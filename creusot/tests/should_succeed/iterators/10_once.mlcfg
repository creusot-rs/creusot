
module C10Once_Common_Iterator_Invariant_Stub
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C10Once_Common_Iterator_Invariant_Interface
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C10Once_Common_Iterator_Invariant
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self) =
    [#"../common.rs" 29 8 29 12] true
  val invariant' [#"../common.rs" 28 4 28 30] (self : self) : bool
    ensures { result = invariant' self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module C10Once_Once_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_once 't =
    | C_Once (Core_Option_Option_Type.t_option 't)
    
  let function once_0 (self : t_once 't) : Core_Option_Option_Type.t_option 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Once a -> a
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C10Once_Impl0_Completed_Stub
  type t
  use prelude.Borrow
  use C10Once_Once_Type as C10Once_Once_Type
  predicate completed [#"../10_once.rs" 14 4 14 35] (self : borrowed (C10Once_Once_Type.t_once t))
end
module C10Once_Impl0_Completed_Interface
  type t
  use prelude.Borrow
  use C10Once_Once_Type as C10Once_Once_Type
  predicate completed [#"../10_once.rs" 14 4 14 35] (self : borrowed (C10Once_Once_Type.t_once t))
end
module C10Once_Impl0_Completed
  type t
  use prelude.Borrow
  use C10Once_Once_Type as C10Once_Once_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = C10Once_Once_Type.t_once t
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate completed [#"../10_once.rs" 14 4 14 35] (self : borrowed (C10Once_Once_Type.t_once t)) =
    [#"../10_once.rs" 15 20 15 57]  * self = C10Once_Once_Type.C_Once (Core_Option_Option_Type.C_None) /\ Resolve0.resolve self
  val completed [#"../10_once.rs" 14 4 14 35] (self : borrowed (C10Once_Once_Type.t_once t)) : bool
    ensures { result = completed self }
    
end
module C10Once_Impl0_Produces_Stub
  type t
  use seq.Seq
  use C10Once_Once_Type as C10Once_Once_Type
  predicate produces [#"../10_once.rs" 19 4 19 64] (self : C10Once_Once_Type.t_once t) (visited : Seq.seq t) (o : C10Once_Once_Type.t_once t)
    
end
module C10Once_Impl0_Produces_Interface
  type t
  use seq.Seq
  use C10Once_Once_Type as C10Once_Once_Type
  predicate produces [#"../10_once.rs" 19 4 19 64] (self : C10Once_Once_Type.t_once t) (visited : Seq.seq t) (o : C10Once_Once_Type.t_once t)
    
end
module C10Once_Impl0_Produces
  type t
  use seq.Seq
  use C10Once_Once_Type as C10Once_Once_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate produces [#"../10_once.rs" 19 4 19 64] (self : C10Once_Once_Type.t_once t) (visited : Seq.seq t) (o : C10Once_Once_Type.t_once t)
    
   =
    [#"../10_once.rs" 20 8 23 9] visited = Seq.empty  /\ self = o \/ (exists e : t . self = C10Once_Once_Type.C_Once (Core_Option_Option_Type.C_Some e) /\ visited = Seq.singleton e /\ o = C10Once_Once_Type.C_Once (Core_Option_Option_Type.C_None))
  val produces [#"../10_once.rs" 19 4 19 64] (self : C10Once_Once_Type.t_once t) (visited : Seq.seq t) (o : C10Once_Once_Type.t_once t) : bool
    ensures { result = produces self visited o }
    
end
module C10Once_Impl0_Invariant_Stub
  type t
  use C10Once_Once_Type as C10Once_Once_Type
  predicate invariant' [#"../10_once.rs" 41 4 41 30] (self : C10Once_Once_Type.t_once t)
end
module C10Once_Impl0_Invariant_Interface
  type t
  use C10Once_Once_Type as C10Once_Once_Type
  predicate invariant' [#"../10_once.rs" 41 4 41 30] (self : C10Once_Once_Type.t_once t)
end
module C10Once_Impl0_Invariant
  type t
  use C10Once_Once_Type as C10Once_Once_Type
  predicate invariant' [#"../10_once.rs" 41 4 41 30] (self : C10Once_Once_Type.t_once t) =
    [#"../10_once.rs" 42 20 42 24] true
  val invariant' [#"../10_once.rs" 41 4 41 30] (self : C10Once_Once_Type.t_once t) : bool
    ensures { result = invariant' self }
    
end
module C10Once_Impl0_ProducesRefl_Stub
  type t
  use seq.Seq
  use C10Once_Once_Type as C10Once_Once_Type
  clone C10Once_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C10Once_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_refl [#"../10_once.rs" 29 4 29 29] (a : C10Once_Once_Type.t_once t) : ()
end
module C10Once_Impl0_ProducesRefl_Interface
  type t
  use seq.Seq
  use C10Once_Once_Type as C10Once_Once_Type
  clone C10Once_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C10Once_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_refl [#"../10_once.rs" 29 4 29 29] (a : C10Once_Once_Type.t_once t) : ()
  axiom produces_refl_spec : forall a : C10Once_Once_Type.t_once t . ([#"../10_once.rs" 27 15 27 28] Invariant0.invariant' a) -> ([#"../10_once.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a)
end
module C10Once_Impl0_ProducesRefl
  type t
  use seq.Seq
  use C10Once_Once_Type as C10Once_Once_Type
  clone C10Once_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C10Once_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_refl [#"../10_once.rs" 29 4 29 29] (a : C10Once_Once_Type.t_once t) : () =
    [#"../10_once.rs" 26 4 26 10] ()
  val produces_refl [#"../10_once.rs" 29 4 29 29] (a : C10Once_Once_Type.t_once t) : ()
    requires {[#"../10_once.rs" 27 15 27 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C10Once_Once_Type.t_once t . ([#"../10_once.rs" 27 15 27 28] Invariant0.invariant' a) -> ([#"../10_once.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a)
end
module C10Once_Impl0_ProducesRefl_Impl
  type t
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use C10Once_Once_Type as C10Once_Once_Type
  clone C10Once_Impl0_Produces as Produces0 with
    type t = t
  clone C10Once_Impl0_Invariant as Invariant0 with
    type t = t
  let rec ghost function produces_refl [#"../10_once.rs" 29 4 29 29] (a : C10Once_Once_Type.t_once t) : ()
    requires {[#"../10_once.rs" 27 15 27 28] Invariant0.invariant' a}
    ensures { [#"../10_once.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../10_once.rs" 26 4 26 10] ()
end
module C10Once_Impl0_ProducesTrans_Stub
  type t
  use seq.Seq
  use C10Once_Once_Type as C10Once_Once_Type
  clone C10Once_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C10Once_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_trans [#"../10_once.rs" 38 4 38 90] (a : C10Once_Once_Type.t_once t) (ab : Seq.seq t) (b : C10Once_Once_Type.t_once t) (bc : Seq.seq t) (c : C10Once_Once_Type.t_once t) : ()
    
end
module C10Once_Impl0_ProducesTrans_Interface
  type t
  use seq.Seq
  use C10Once_Once_Type as C10Once_Once_Type
  clone C10Once_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C10Once_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_trans [#"../10_once.rs" 38 4 38 90] (a : C10Once_Once_Type.t_once t) (ab : Seq.seq t) (b : C10Once_Once_Type.t_once t) (bc : Seq.seq t) (c : C10Once_Once_Type.t_once t) : ()
    
  axiom produces_trans_spec : forall a : C10Once_Once_Type.t_once t, ab : Seq.seq t, b : C10Once_Once_Type.t_once t, bc : Seq.seq t, c : C10Once_Once_Type.t_once t . ([#"../10_once.rs" 32 15 32 28] Invariant0.invariant' a) -> ([#"../10_once.rs" 33 15 33 28] Invariant0.invariant' b) -> ([#"../10_once.rs" 34 15 34 28] Invariant0.invariant' c) -> ([#"../10_once.rs" 35 15 35 32] Produces0.produces a ab b) -> ([#"../10_once.rs" 36 15 36 32] Produces0.produces b bc c) -> ([#"../10_once.rs" 37 14 37 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C10Once_Impl0_ProducesTrans
  type t
  use seq.Seq
  use C10Once_Once_Type as C10Once_Once_Type
  clone C10Once_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C10Once_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_trans [#"../10_once.rs" 38 4 38 90] (a : C10Once_Once_Type.t_once t) (ab : Seq.seq t) (b : C10Once_Once_Type.t_once t) (bc : Seq.seq t) (c : C10Once_Once_Type.t_once t) : ()
    
   =
    [#"../10_once.rs" 31 4 31 10] ()
  val produces_trans [#"../10_once.rs" 38 4 38 90] (a : C10Once_Once_Type.t_once t) (ab : Seq.seq t) (b : C10Once_Once_Type.t_once t) (bc : Seq.seq t) (c : C10Once_Once_Type.t_once t) : ()
    requires {[#"../10_once.rs" 32 15 32 28] Invariant0.invariant' a}
    requires {[#"../10_once.rs" 33 15 33 28] Invariant0.invariant' b}
    requires {[#"../10_once.rs" 34 15 34 28] Invariant0.invariant' c}
    requires {[#"../10_once.rs" 35 15 35 32] Produces0.produces a ab b}
    requires {[#"../10_once.rs" 36 15 36 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C10Once_Once_Type.t_once t, ab : Seq.seq t, b : C10Once_Once_Type.t_once t, bc : Seq.seq t, c : C10Once_Once_Type.t_once t . ([#"../10_once.rs" 32 15 32 28] Invariant0.invariant' a) -> ([#"../10_once.rs" 33 15 33 28] Invariant0.invariant' b) -> ([#"../10_once.rs" 34 15 34 28] Invariant0.invariant' c) -> ([#"../10_once.rs" 35 15 35 32] Produces0.produces a ab b) -> ([#"../10_once.rs" 36 15 36 32] Produces0.produces b bc c) -> ([#"../10_once.rs" 37 14 37 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C10Once_Impl0_ProducesTrans_Impl
  type t
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use C10Once_Once_Type as C10Once_Once_Type
  clone C10Once_Impl0_Produces as Produces0 with
    type t = t
  clone C10Once_Impl0_Invariant as Invariant0 with
    type t = t
  let rec ghost function produces_trans [#"../10_once.rs" 38 4 38 90] (a : C10Once_Once_Type.t_once t) (ab : Seq.seq t) (b : C10Once_Once_Type.t_once t) (bc : Seq.seq t) (c : C10Once_Once_Type.t_once t) : ()
    requires {[#"../10_once.rs" 32 15 32 28] Invariant0.invariant' a}
    requires {[#"../10_once.rs" 33 15 33 28] Invariant0.invariant' b}
    requires {[#"../10_once.rs" 34 15 34 28] Invariant0.invariant' c}
    requires {[#"../10_once.rs" 35 15 35 32] Produces0.produces a ab b}
    requires {[#"../10_once.rs" 36 15 36 32] Produces0.produces b bc c}
    ensures { [#"../10_once.rs" 37 14 37 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../10_once.rs" 31 4 31 10] ()
end
module Core_Option_Impl0_Take_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val take [@cfg:stackify] (self : borrowed (Core_Option_Option_Type.t_option t)) : Core_Option_Option_Type.t_option t
    ensures { result =  * self /\  ^ self = Core_Option_Option_Type.C_None }
    
end
module Core_Option_Impl0_Take
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val take [@cfg:stackify] (self : borrowed (Core_Option_Option_Type.t_option t)) : Core_Option_Option_Type.t_option t
    ensures { result =  * self /\  ^ self = Core_Option_Option_Type.C_None }
    
end
module C10Once_Impl0_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use C10Once_Once_Type as C10Once_Once_Type
  clone C10Once_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C10Once_Impl0_Completed_Stub as Completed0 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C10Once_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  val next [@cfg:stackify] [#"../10_once.rs" 50 4 50 35] (self : borrowed (C10Once_Once_Type.t_once t)) : Core_Option_Option_Type.t_option t
    requires {[#"../10_once.rs" 45 4 45 40] Invariant0.invariant' ( * self)}
    ensures { [#"../10_once.rs" 45 4 45 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../10_once.rs" 46 14 49 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C10Once_Impl0_Next
  type t
  use prelude.Borrow
  use seq.Seq
  use C10Once_Once_Type as C10Once_Once_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C10Once_Once_Type.t_once t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Option_Impl0_Take_Interface as Take0 with
    type t = t
  clone C10Once_Impl0_Produces as Produces0 with
    type t = t
  clone C10Once_Impl0_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve0.resolve
  clone C10Once_Impl0_Invariant as Invariant0 with
    type t = t
  let rec cfg next [@cfg:stackify] [#"../10_once.rs" 50 4 50 35] (self : borrowed (C10Once_Once_Type.t_once t)) : Core_Option_Option_Type.t_option t
    requires {[#"../10_once.rs" 45 4 45 40] Invariant0.invariant' ( * self)}
    ensures { [#"../10_once.rs" 45 4 45 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../10_once.rs" 46 14 49 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var self_1 : borrowed (C10Once_Once_Type.t_once t);
  var _5 : borrowed (Core_Option_Option_Type.t_option t);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- borrow_mut (C10Once_Once_Type.once_0 ( * self_1));
    self_1 <- { self_1 with current = (let C10Once_Once_Type.C_Once a =  * self_1 in C10Once_Once_Type.C_Once ( ^ _5)) };
    _0 <- ([#"../10_once.rs" 51 8 51 21] Take0.take _5);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module C10Once_Common_Iterator_Item_Type
  type self
  type item
end
module C10Once_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C10Once_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C10Once_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C10Once_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C10Once_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C10Once_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module C10Once_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C10Once_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C10Once_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C10Once_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C10Once_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C10Once_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C10Once_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C10Once_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C10Once_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C10Once_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C10Once_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C10Once_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 19 15 19 28] Invariant0.invariant' a}
    requires {[#"../common.rs" 20 15 20 28] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 15 21 28] Invariant0.invariant' c}
    requires {[#"../common.rs" 22 15 22 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 23 15 23 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C10Once_Impl0_Item_Type
  type t
  type item  =
    t
end
module C10Once_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C10Once_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C10Once_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C10Once_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C10Once_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C10Once_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C10Once_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C10Once_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  val next [@cfg:stackify] [#"../common.rs" 37 4 37 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C10Once_Common_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone C10Once_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C10Once_Common_Iterator_Produces_Interface as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C10Once_Common_Iterator_Completed_Interface as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C10Once_Common_Iterator_Invariant_Interface as Invariant0 with
    type self = self
  val next [@cfg:stackify] [#"../common.rs" 37 4 37 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C10Once_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C10Once_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C10Once_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C10Once_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
end
module C10Once_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C10Once_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C10Once_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C10Once_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C10Once_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C10Once_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C10Once_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C10Once_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  val produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
    requires {[#"../common.rs" 14 15 14 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C10Once_Impl0
  type t
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C10Once_Impl0_Item_Type as Item0 with
    type t = t
  use C10Once_Once_Type as C10Once_Once_Type
  clone C10Once_Impl0_Produces as Produces0 with
    type t = t
  clone C10Once_Impl0_Invariant as Invariant0 with
    type t = t
  clone C10Once_Impl0_ProducesTrans as ProducesTrans0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C10Once_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = C10Once_Once_Type.t_once t,
    function produces_trans = ProducesTrans0.produces_trans,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  goal produces_trans_spec : forall a : C10Once_Once_Type.t_once t, ab : Seq.seq t, b : C10Once_Once_Type.t_once t, bc : Seq.seq t, c : C10Once_Once_Type.t_once t . (([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) && ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) && ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) && ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) && ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../10_once.rs" 36 15 36 32] Produces0.produces b bc c) && ([#"../10_once.rs" 35 15 35 32] Produces0.produces a ab b) && ([#"../10_once.rs" 34 15 34 28] Invariant0.invariant' c) && ([#"../10_once.rs" 33 15 33 28] Invariant0.invariant' b) && ([#"../10_once.rs" 32 15 32 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../10_once.rs" 37 14 37 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c))
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C10Once_Once_Type.t_once t
  clone C10Once_Impl0_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve0.resolve
  clone C10Once_Impl0_ProducesRefl as ProducesRefl0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C10Once_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = C10Once_Once_Type.t_once t,
    function produces_refl = ProducesRefl0.produces_refl,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C10Once_Impl0_Next_Interface as Next0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone C10Once_Common_Iterator_Next_Interface as Next1 with
    type self = C10Once_Once_Type.t_once t,
    val next = Next0.next,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  goal produces_refl_spec : forall a : C10Once_Once_Type.t_once t . (([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../10_once.rs" 27 15 27 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../10_once.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a))
end
