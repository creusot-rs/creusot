
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C07Fuse_Fuse_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_fuse 'i =
    | C_Fuse (Core_Option_Option_Type.t_option 'i)
    
  let function fuse_iter (self : t_fuse 'i) : Core_Option_Option_Type.t_option 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Fuse a -> a
      end
end
module C07Fuse_Impl0_Next
  type i
  type item0
  use seq.Seq
  predicate invariant6 (self : Seq.seq item0)
  val invariant6 (self : Seq.seq item0) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq item0)
  val inv6 (_x : Seq.seq item0) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq item0 . inv6 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant5 (self : Core_Option_Option_Type.t_option item0)
  val invariant5 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Core_Option_Option_Type.t_option item0)
  val inv5 (_x : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Core_Option_Option_Type.t_option item0 . inv5 x = true
  use prelude.Borrow
  predicate invariant4 (self : borrowed i)
  val invariant4 (self : borrowed i) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed i)
  val inv4 (_x : borrowed i) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed i . inv4 x = true
  use seq.Seq
  predicate inv3 (_x : i)
  val inv3 (_x : i) : bool
    ensures { result = inv3 _x }
    
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv3 a}
    requires {[#"../common.rs" 21 31 21 33] inv6 ab}
    requires {[#"../common.rs" 21 52 21 53] inv3 b}
    requires {[#"../common.rs" 21 61 21 63] inv6 bc}
    requires {[#"../common.rs" 21 82 21 83] inv3 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv3 a) -> ([#"../common.rs" 21 31 21 33] inv6 ab) -> ([#"../common.rs" 21 52 21 53] inv3 b) -> ([#"../common.rs" 21 61 21 63] inv6 bc) -> ([#"../common.rs" 21 82 21 83] inv3 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv3 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv3 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  predicate invariant3 (self : i)
  val invariant3 (self : i) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : i . inv3 x = true
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate invariant2 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  val invariant2 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  val inv2 (_x : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (C07Fuse_Fuse_Type.t_fuse i) . inv2 x = true
  predicate invariant1 (self : borrowed (Core_Option_Option_Type.t_option i))
  val invariant1 (self : borrowed (Core_Option_Option_Type.t_option i)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (Core_Option_Option_Type.t_option i))
  val inv1 (_x : borrowed (Core_Option_Option_Type.t_option i)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (Core_Option_Option_Type.t_option i) . inv1 x = true
  predicate invariant0 (self : Core_Option_Option_Type.t_option i)
  val invariant0 (self : Core_Option_Option_Type.t_option i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Core_Option_Option_Type.t_option i)
  val inv0 (_x : Core_Option_Option_Type.t_option i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Core_Option_Option_Type.t_option i . inv0 x = true
  predicate produces0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item0) (other : C07Fuse_Fuse_Type.t_fuse i)
    
   =
    [#"../07_fuse.rs" 26 8 32 9] match C07Fuse_Fuse_Type.fuse_iter self with
      | Core_Option_Option_Type.C_None -> prod = Seq.empty  /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Core_Option_Option_Type.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Core_Option_Option_Type.C_Some i2 -> produces1 i prod i2
        | Core_Option_Option_Type.C_None -> false
        end
      end
  val produces0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item0) (other : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = produces0 self prod other }
    
  use seq.Seq
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  predicate completed0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) =
    [#"../07_fuse.rs" 18 12 19 32] (C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_None \/ (exists it : borrowed i . inv4 it /\ completed1 it /\ C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_Some ( * it))) /\ C07Fuse_Fuse_Type.fuse_iter ( ^ self) = Core_Option_Option_Type.C_None
  val completed0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = completed0 self }
    
  predicate resolve4 (self : Core_Option_Option_Type.t_option i)
  val resolve4 (self : Core_Option_Option_Type.t_option i) : bool
    ensures { result = resolve4 self }
    
  predicate resolve3 (self : Core_Option_Option_Type.t_option item0)
  val resolve3 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : borrowed i) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed i) : bool
    ensures { result = resolve2 self }
    
  val next0 [#"../common.rs" 27 4 27 45] (self : borrowed i) : Core_Option_Option_Type.t_option item0
    requires {[#"../common.rs" 27 17 27 21] inv4 self}
    ensures { [#"../common.rs" 23 14 26 5] match result with
      | Core_Option_Option_Type.C_None -> completed1 self
      | Core_Option_Option_Type.C_Some v -> produces1 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 26 27 44] inv5 result }
    
  predicate resolve1 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed (Core_Option_Option_Type.t_option i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (Core_Option_Option_Type.t_option i)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg next [#"../07_fuse.rs" 39 4 39 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : Core_Option_Option_Type.t_option item0
    requires {[#"../07_fuse.rs" 39 17 39 21] inv2 self}
    ensures { [#"../07_fuse.rs" 35 14 38 5] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../07_fuse.rs" 39 26 39 44] inv5 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option item0;
  var self : borrowed (C07Fuse_Fuse_Type.t_fuse i) = self;
  var _3 : borrowed (Core_Option_Option_Type.t_option i);
  var iter : borrowed i;
  var _6 : Core_Option_Option_Type.t_option item0;
  var _7 : borrowed i;
  var x : Core_Option_Option_Type.t_option item0;
  {
    goto BB0
  }
  BB0 {
    [#"../07_fuse.rs" 40 14 40 28] _3 <- Borrow.borrow_mut (C07Fuse_Fuse_Type.fuse_iter ( * self));
    [#"../07_fuse.rs" 40 14 40 28] self <- { self with current = (let C07Fuse_Fuse_Type.C_Fuse x0 =  * self in C07Fuse_Fuse_Type.C_Fuse ( ^ _3)) };
    assume { inv0 ( ^ _3) };
    switch ( * _3)
      | Core_Option_Option_Type.C_None -> goto BB1
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    [#"../07_fuse.rs" 42 17 42 21] iter <- Borrow.borrow_mut (Core_Option_Option_Type.some_0 ( * _3));
    [#"../07_fuse.rs" 42 17 42 21] _3 <- { _3 with current = (let Core_Option_Option_Type.C_Some x0 =  * _3 in Core_Option_Option_Type.C_Some ( ^ iter)) };
    assume { inv3 ( ^ iter) };
    [#"../07_fuse.rs" 42 32 42 43] _7 <- Borrow.borrow_mut ( * iter);
    [#"../07_fuse.rs" 42 32 42 43] iter <- { iter with current =  ^ _7 };
    assume { inv3 ( ^ _7) };
    [#"../07_fuse.rs" 42 32 42 43] _6 <- ([#"../07_fuse.rs" 42 32 42 43] next0 _7);
    _7 <- any borrowed i;
    goto BB5
  }
  BB3 {
    assert { [@expl:type invariant] inv1 _3 };
    assume { resolve0 _3 };
    assert { [@expl:type invariant] inv2 self };
    assume { resolve1 self };
    assert { [#"../07_fuse.rs" 40 14 40 28] false };
    absurd
  }
  BB4 {
    assert { [@expl:type invariant] inv1 _3 };
    assume { resolve0 _3 };
    [#"../07_fuse.rs" 41 20 41 24] _0 <- ([#"../07_fuse.rs" 41 20 41 24] Core_Option_Option_Type.C_None);
    assert { [@expl:type invariant] inv2 self };
    assume { resolve1 self };
    goto BB15
  }
  BB5 {
    assert { [@expl:type invariant] inv4 iter };
    assume { resolve2 iter };
    assert { [@expl:type invariant] inv1 _3 };
    assume { resolve0 _3 };
    switch (_6)
      | Core_Option_Option_Type.C_None -> goto BB6
      | _ -> goto BB7
      end
  }
  BB6 {
    goto BB8
  }
  BB7 {
    assert { [@expl:type invariant] inv2 self };
    assume { resolve1 self };
    [#"../07_fuse.rs" 47 16 47 17] x <- ([#"../07_fuse.rs" 47 16 47 17] _6);
    [#"../07_fuse.rs" 47 16 47 17] _6 <- any Core_Option_Option_Type.t_option item0;
    [#"../07_fuse.rs" 47 21 47 22] _0 <- ([#"../07_fuse.rs" 47 21 47 22] x);
    [#"../07_fuse.rs" 47 21 47 22] x <- any Core_Option_Option_Type.t_option item0;
    goto BB12
  }
  BB8 {
    assert { [@expl:type invariant] inv5 _6 };
    assume { resolve3 _6 };
    goto BB9
  }
  BB9 {
    [#"../07_fuse.rs" 44 20 44 29] self <- { self with current = (let C07Fuse_Fuse_Type.C_Fuse x0 =  * self in C07Fuse_Fuse_Type.C_Fuse ([#"../07_fuse.rs" 44 32 44 36] Core_Option_Option_Type.C_None)) };
    assert { [@expl:type invariant] inv0 (C07Fuse_Fuse_Type.fuse_iter ( * self)) };
    assume { resolve4 (C07Fuse_Fuse_Type.fuse_iter ( * self)) };
    assert { [@expl:type invariant] inv2 self };
    assume { resolve1 self };
    goto BB11
  }
  BB11 {
    [#"../07_fuse.rs" 45 20 45 24] _0 <- ([#"../07_fuse.rs" 45 20 45 24] Core_Option_Option_Type.C_None);
    goto BB13
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module C07Fuse_Impl0_ProducesRefl_Impl
  type i
  type item0
  use seq.Seq
  predicate invariant2 (self : Seq.seq item0)
  val invariant2 (self : Seq.seq item0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Seq.seq item0)
  val inv2 (_x : Seq.seq item0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Seq.seq item0 . inv2 x = true
  predicate invariant1 (self : i)
  val invariant1 (self : i) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : i)
  val inv1 (_x : i) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : i . inv1 x = true
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv1 a}
    requires {[#"../common.rs" 21 31 21 33] inv2 ab}
    requires {[#"../common.rs" 21 52 21 53] inv1 b}
    requires {[#"../common.rs" 21 61 21 63] inv2 bc}
    requires {[#"../common.rs" 21 82 21 83] inv1 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv1 a) -> ([#"../common.rs" 21 31 21 33] inv2 ab) -> ([#"../common.rs" 21 52 21 53] inv1 b) -> ([#"../common.rs" 21 61 21 63] inv2 bc) -> ([#"../common.rs" 21 82 21 83] inv1 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv1 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv1 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate invariant0 (self : C07Fuse_Fuse_Type.t_fuse i)
  val invariant0 (self : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C07Fuse_Fuse_Type.t_fuse i)
  val inv0 (_x : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C07Fuse_Fuse_Type.t_fuse i . inv0 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate produces0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item0) (other : C07Fuse_Fuse_Type.t_fuse i)
    
   =
    [#"../07_fuse.rs" 26 8 32 9] match C07Fuse_Fuse_Type.fuse_iter self with
      | Core_Option_Option_Type.C_None -> prod = Seq.empty  /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Core_Option_Option_Type.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Core_Option_Option_Type.C_Some i2 -> produces1 i prod i2
        | Core_Option_Option_Type.C_None -> false
        end
      end
  val produces0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item0) (other : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = produces0 self prod other }
    
  let rec ghost function produces_refl [#"../07_fuse.rs" 55 4 55 29] (a : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 55 21 55 22] inv0 a}
    ensures { [#"../07_fuse.rs" 54 14 54 39] produces0 a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../07_fuse.rs" 52 4 52 10] ()
end
module C07Fuse_Impl0_ProducesTrans_Impl
  type i
  predicate invariant2 (self : i)
  val invariant2 (self : i) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : i)
  val inv2 (_x : i) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : i . inv2 x = true
  type item0
  use seq.Seq
  use seq.Seq
  predicate inv1 (_x : Seq.seq item0)
  val inv1 (_x : Seq.seq item0) : bool
    ensures { result = inv1 _x }
    
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv2 a}
    requires {[#"../common.rs" 21 31 21 33] inv1 ab}
    requires {[#"../common.rs" 21 52 21 53] inv2 b}
    requires {[#"../common.rs" 21 61 21 63] inv1 bc}
    requires {[#"../common.rs" 21 82 21 83] inv2 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv2 a) -> ([#"../common.rs" 21 31 21 33] inv1 ab) -> ([#"../common.rs" 21 52 21 53] inv2 b) -> ([#"../common.rs" 21 61 21 63] inv1 bc) -> ([#"../common.rs" 21 82 21 83] inv2 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv2 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv2 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  predicate invariant1 (self : Seq.seq item0)
  val invariant1 (self : Seq.seq item0) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : Seq.seq item0 . inv1 x = true
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate invariant0 (self : C07Fuse_Fuse_Type.t_fuse i)
  val invariant0 (self : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C07Fuse_Fuse_Type.t_fuse i)
  val inv0 (_x : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C07Fuse_Fuse_Type.t_fuse i . inv0 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate produces0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item0) (other : C07Fuse_Fuse_Type.t_fuse i)
    
   =
    [#"../07_fuse.rs" 26 8 32 9] match C07Fuse_Fuse_Type.fuse_iter self with
      | Core_Option_Option_Type.C_None -> prod = Seq.empty  /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Core_Option_Option_Type.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Core_Option_Option_Type.C_Some i2 -> produces1 i prod i2
        | Core_Option_Option_Type.C_None -> false
        end
      end
  val produces0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item0) (other : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = produces0 self prod other }
    
  let rec ghost function produces_trans [#"../07_fuse.rs" 62 4 62 90] (a : C07Fuse_Fuse_Type.t_fuse i) (ab : Seq.seq item0) (b : C07Fuse_Fuse_Type.t_fuse i) (bc : Seq.seq item0) (c : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 59 15 59 32] produces0 a ab b}
    requires {[#"../07_fuse.rs" 60 15 60 32] produces0 b bc c}
    requires {[#"../07_fuse.rs" 62 22 62 23] inv0 a}
    requires {[#"../07_fuse.rs" 62 31 62 33] inv1 ab}
    requires {[#"../07_fuse.rs" 62 52 62 53] inv0 b}
    requires {[#"../07_fuse.rs" 62 61 62 63] inv1 bc}
    requires {[#"../07_fuse.rs" 62 82 62 83] inv0 c}
    ensures { [#"../07_fuse.rs" 61 14 61 42] produces0 a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../07_fuse.rs" 57 4 57 10] ()
end
module C07Fuse_Impl1_IsFused_Impl
  type i
  predicate invariant4 (self : i)
  val invariant4 (self : i) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : i)
  val inv4 (_x : i) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : i . inv4 x = true
  use prelude.Borrow
  predicate invariant3 (self : borrowed i)
  val invariant3 (self : borrowed i) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed i)
  val inv3 (_x : borrowed i) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed i . inv3 x = true
  type item0
  use seq.Seq
  use seq.Seq
  predicate inv1 (_x : Seq.seq item0)
  val inv1 (_x : Seq.seq item0) : bool
    ensures { result = inv1 _x }
    
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans1 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans1 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv4 a}
    requires {[#"../common.rs" 21 31 21 33] inv1 ab}
    requires {[#"../common.rs" 21 52 21 53] inv4 b}
    requires {[#"../common.rs" 21 61 21 63] inv1 bc}
    requires {[#"../common.rs" 21 82 21 83] inv4 c}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv4 a) -> ([#"../common.rs" 21 31 21 33] inv1 ab) -> ([#"../common.rs" 21 52 21 53] inv4 b) -> ([#"../common.rs" 21 61 21 63] inv1 bc) -> ([#"../common.rs" 21 82 21 83] inv4 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl1 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl1 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv4 a}
    ensures { result = produces_refl1 a }
    
  axiom produces_refl1_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv4 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate invariant2 (self : C07Fuse_Fuse_Type.t_fuse i)
  val invariant2 (self : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : C07Fuse_Fuse_Type.t_fuse i)
  val inv2 (_x : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : C07Fuse_Fuse_Type.t_fuse i . inv2 x = true
  predicate invariant1 (self : Seq.seq item0)
  val invariant1 (self : Seq.seq item0) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : Seq.seq item0 . inv1 x = true
  predicate invariant0 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  val invariant0 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  val inv0 (_x : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed (C07Fuse_Fuse_Type.t_fuse i) . inv0 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate produces0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item0) (other : C07Fuse_Fuse_Type.t_fuse i)
    
   =
    [#"../07_fuse.rs" 26 8 32 9] match C07Fuse_Fuse_Type.fuse_iter self with
      | Core_Option_Option_Type.C_None -> prod = Seq.empty  /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Core_Option_Option_Type.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Core_Option_Option_Type.C_Some i2 -> produces1 i prod i2
        | Core_Option_Option_Type.C_None -> false
        end
      end
  val produces0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item0) (other : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = produces0 self prod other }
    
  function produces_trans0 [#"../07_fuse.rs" 62 4 62 90] (a : C07Fuse_Fuse_Type.t_fuse i) (ab : Seq.seq item0) (b : C07Fuse_Fuse_Type.t_fuse i) (bc : Seq.seq item0) (c : C07Fuse_Fuse_Type.t_fuse i) : ()
    
   =
    [#"../07_fuse.rs" 57 4 57 10] ()
  val produces_trans0 [#"../07_fuse.rs" 62 4 62 90] (a : C07Fuse_Fuse_Type.t_fuse i) (ab : Seq.seq item0) (b : C07Fuse_Fuse_Type.t_fuse i) (bc : Seq.seq item0) (c : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 59 15 59 32] produces0 a ab b}
    requires {[#"../07_fuse.rs" 60 15 60 32] produces0 b bc c}
    requires {[#"../07_fuse.rs" 62 22 62 23] inv2 a}
    requires {[#"../07_fuse.rs" 62 31 62 33] inv1 ab}
    requires {[#"../07_fuse.rs" 62 52 62 53] inv2 b}
    requires {[#"../07_fuse.rs" 62 61 62 63] inv1 bc}
    requires {[#"../07_fuse.rs" 62 82 62 83] inv2 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : C07Fuse_Fuse_Type.t_fuse i, ab : Seq.seq item0, b : C07Fuse_Fuse_Type.t_fuse i, bc : Seq.seq item0, c : C07Fuse_Fuse_Type.t_fuse i . ([#"../07_fuse.rs" 59 15 59 32] produces0 a ab b) -> ([#"../07_fuse.rs" 60 15 60 32] produces0 b bc c) -> ([#"../07_fuse.rs" 62 22 62 23] inv2 a) -> ([#"../07_fuse.rs" 62 31 62 33] inv1 ab) -> ([#"../07_fuse.rs" 62 52 62 53] inv2 b) -> ([#"../07_fuse.rs" 62 61 62 63] inv1 bc) -> ([#"../07_fuse.rs" 62 82 62 83] inv2 c) -> ([#"../07_fuse.rs" 61 14 61 42] produces0 a (Seq.(++) ab bc) c)
  function produces_refl0 [#"../07_fuse.rs" 55 4 55 29] (a : C07Fuse_Fuse_Type.t_fuse i) : () =
    [#"../07_fuse.rs" 52 4 52 10] ()
  val produces_refl0 [#"../07_fuse.rs" 55 4 55 29] (a : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 55 21 55 22] inv2 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : C07Fuse_Fuse_Type.t_fuse i . ([#"../07_fuse.rs" 55 21 55 22] inv2 a) -> ([#"../07_fuse.rs" 54 14 54 39] produces0 a (Seq.empty ) a)
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  predicate completed0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) =
    [#"../07_fuse.rs" 18 12 19 32] (C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_None \/ (exists it : borrowed i . inv3 it /\ completed1 it /\ C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_Some ( * it))) /\ C07Fuse_Fuse_Type.fuse_iter ( ^ self) = Core_Option_Option_Type.C_None
  val completed0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = completed0 self }
    
  let rec ghost function is_fused [#"../07_fuse.rs" 81 4 81 62] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) (steps : Seq.seq item0) (next : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 78 15 78 31] completed0 self}
    requires {[#"../07_fuse.rs" 79 15 79 44] produces0 ( ^ self) steps next}
    requires {[#"../07_fuse.rs" 81 21 81 25] inv0 self}
    requires {[#"../07_fuse.rs" 81 27 81 32] inv1 steps}
    requires {[#"../07_fuse.rs" 81 51 81 55] inv2 next}
    ensures { [#"../07_fuse.rs" 80 14 80 50] steps = Seq.empty  /\  ^ self = next }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../07_fuse.rs" 76 4 76 10] ()
end
module C07Fuse_Impl0
  type i
  use prelude.Borrow
  predicate invariant4 (self : borrowed i)
  val invariant4 (self : borrowed i) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed i)
  val inv4 (_x : borrowed i) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed i . inv4 x = true
  type item0
  use seq.Seq
  predicate invariant3 (self : Seq.seq item0)
  val invariant3 (self : Seq.seq item0) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq item0)
  val inv3 (_x : Seq.seq item0) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq item0 . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : Core_Option_Option_Type.t_option item0)
  val invariant2 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option item0)
  val inv2 (_x : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option item0 . inv2 x = true
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate invariant1 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  val invariant1 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  val inv1 (_x : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (C07Fuse_Fuse_Type.t_fuse i) . inv1 x = true
  predicate invariant0 (self : C07Fuse_Fuse_Type.t_fuse i)
  val invariant0 (self : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C07Fuse_Fuse_Type.t_fuse i)
  val inv0 (_x : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C07Fuse_Fuse_Type.t_fuse i . inv0 x = true
  use seq.Seq
  use seq.Seq
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  predicate completed0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) =
    [#"../07_fuse.rs" 18 12 19 32] (C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_None \/ (exists it : borrowed i . inv4 it /\ completed1 it /\ C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_Some ( * it))) /\ C07Fuse_Fuse_Type.fuse_iter ( ^ self) = Core_Option_Option_Type.C_None
  val completed0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = completed0 self }
    
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  use seq.Seq
  predicate produces0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item0) (other : C07Fuse_Fuse_Type.t_fuse i)
    
   =
    [#"../07_fuse.rs" 26 8 32 9] match C07Fuse_Fuse_Type.fuse_iter self with
      | Core_Option_Option_Type.C_None -> prod = Seq.empty  /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Core_Option_Option_Type.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Core_Option_Option_Type.C_Some i2 -> produces1 i prod i2
        | Core_Option_Option_Type.C_None -> false
        end
      end
  val produces0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item0) (other : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = produces0 self prod other }
    
  goal produces_refl_refn : [#"../07_fuse.rs" 55 4 55 29] forall a : C07Fuse_Fuse_Type.t_fuse i . inv0 a -> inv0 a /\ (forall result : () . produces0 a (Seq.empty ) a -> produces0 a (Seq.empty ) a)
  goal next_refn : [#"../07_fuse.rs" 39 4 39 44] forall self : borrowed (C07Fuse_Fuse_Type.t_fuse i) . inv1 self -> inv1 self /\ (forall result : Core_Option_Option_Type.t_option item0 . inv2 result /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end -> inv2 result /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_trans_refn : [#"../07_fuse.rs" 62 4 62 90] forall a : C07Fuse_Fuse_Type.t_fuse i . forall ab : Seq.seq item0 . forall b : C07Fuse_Fuse_Type.t_fuse i . forall bc : Seq.seq item0 . forall c : C07Fuse_Fuse_Type.t_fuse i . inv0 c /\ inv3 bc /\ inv0 b /\ inv3 ab /\ inv0 a /\ produces0 b bc c /\ produces0 a ab b -> inv0 c /\ inv3 bc /\ inv0 b /\ inv3 ab /\ inv0 a /\ produces0 b bc c /\ produces0 a ab b /\ (forall result : () . produces0 a (Seq.(++) ab bc) c -> produces0 a (Seq.(++) ab bc) c)
end
module C07Fuse_Impl1
  type i
  use prelude.Borrow
  predicate invariant3 (self : borrowed i)
  val invariant3 (self : borrowed i) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed i)
  val inv3 (_x : borrowed i) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed i . inv3 x = true
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate invariant2 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  val invariant2 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  val inv2 (_x : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (C07Fuse_Fuse_Type.t_fuse i) . inv2 x = true
  type item0
  use seq.Seq
  predicate invariant1 (self : Seq.seq item0)
  val invariant1 (self : Seq.seq item0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq item0)
  val inv1 (_x : Seq.seq item0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq item0 . inv1 x = true
  predicate invariant0 (self : C07Fuse_Fuse_Type.t_fuse i)
  val invariant0 (self : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C07Fuse_Fuse_Type.t_fuse i)
  val inv0 (_x : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C07Fuse_Fuse_Type.t_fuse i . inv0 x = true
  use seq.Seq
  use seq.Seq
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate completed0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) =
    [#"../07_fuse.rs" 18 12 19 32] (C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_None \/ (exists it : borrowed i . inv3 it /\ completed1 it /\ C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_Some ( * it))) /\ C07Fuse_Fuse_Type.fuse_iter ( ^ self) = Core_Option_Option_Type.C_None
  val completed0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = completed0 self }
    
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  predicate produces0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item0) (other : C07Fuse_Fuse_Type.t_fuse i)
    
   =
    [#"../07_fuse.rs" 26 8 32 9] match C07Fuse_Fuse_Type.fuse_iter self with
      | Core_Option_Option_Type.C_None -> prod = Seq.empty  /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Core_Option_Option_Type.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Core_Option_Option_Type.C_Some i2 -> produces1 i prod i2
        | Core_Option_Option_Type.C_None -> false
        end
      end
  val produces0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item0) (other : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = produces0 self prod other }
    
  goal is_fused_refn : [#"../07_fuse.rs" 81 4 81 62] forall self : borrowed (C07Fuse_Fuse_Type.t_fuse i) . forall steps : Seq.seq item0 . forall next : C07Fuse_Fuse_Type.t_fuse i . inv0 next /\ inv1 steps /\ inv2 self /\ produces0 ( ^ self) steps next /\ completed0 self -> inv0 next /\ inv1 steps /\ inv2 self /\ produces0 ( ^ self) steps next /\ completed0 self /\ (forall result : () . steps = Seq.empty  /\  ^ self = next -> steps = Seq.empty  /\  ^ self = next)
end
