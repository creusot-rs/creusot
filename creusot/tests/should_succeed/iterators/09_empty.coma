
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module C09Empty_Empty_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  type t_empty 't =
    | C_Empty (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_empty < 't > (input:t_empty 't) (ret  (field_0:PhantomData'0.t_phantomdata 't))= any
    [ good (field_0:PhantomData'0.t_phantomdata 't)-> {C_Empty field_0 = input} (! ret {field_0})
    | bad (field_0:PhantomData'0.t_phantomdata 't)-> {C_Empty field_0 <> input} {false} any ]
    
end
module CreusotContracts_Logic_Seq2_Seq_Type
  use seq.Seq
  
  type t_seq 't =
    | C_Seq (Seq.seq 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_seq < 't > (input:t_seq 't) (ret  (field_0:Seq.seq 't))= any
    [ good (field_0:Seq.seq 't)-> {C_Seq field_0 = input} (! ret {field_0})
    | bad (field_0:Seq.seq 't)-> {C_Seq field_0 <> input} {false} any ]
    
  
  function seq_0 [@inline:trivial] (self : t_seq 't) : Seq.seq 't =
    match self with
      | C_Seq a -> a
      end
end
module C09Empty_Impl0_ProducesRefl_Impl
  type t
  
  let%span s09_empty0 = "../09_empty.rs" 27 14 27 45
  
  let%span span1 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span2 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span6 = "../09_empty.rs" 22 20 22 54
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'0 (self : Seq'0.t_seq t)
  
  predicate inv'0 (_x : Seq'0.t_seq t)
  
  axiom inv'0 : forall x : Seq'0.t_seq t . inv'0 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'0 (self : Seq'0.t_seq t) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq t . ([%#span1] inv'0 self)  -> ([%#span2] len'0 self >= 0)
  
  constant empty'0 : Seq'0.t_seq t = [%#span3] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span5] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span4] len'0 (empty'0 : Seq'0.t_seq t) = 0
  
  use C09Empty_Empty_Type as Empty'0
  
  predicate produces'0 [#"../09_empty.rs" 21 4 21 64] (self : Empty'0.t_empty t) (visited : Seq'0.t_seq t) (o : Empty'0.t_empty t)
    
   =
    [%#span6] visited = (empty'0 : Seq'0.t_seq t) /\ self = o
  
  constant self  : Empty'0.t_empty t
  
  function produces_refl [#"../09_empty.rs" 28 4 28 26] (self : Empty'0.t_empty t) : ()
  
  goal vc_produces_refl : [%#s09_empty0] produces'0 self (empty'0 : Seq'0.t_seq t) self
end
module C09Empty_Impl0_ProducesTrans_Impl
  type t
  
  let%span s09_empty0 = "../09_empty.rs" 32 15 32 32
  
  let%span s09_empty1 = "../09_empty.rs" 33 15 33 32
  
  let%span s09_empty2 = "../09_empty.rs" 35 31 35 33
  
  let%span s09_empty3 = "../09_empty.rs" 35 61 35 63
  
  let%span s09_empty4 = "../09_empty.rs" 34 14 34 42
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span15 = "../09_empty.rs" 22 20 22 54
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate inv'0 (_x : Seq'0.t_seq t)
  
  function len'0 (self : Seq'0.t_seq t) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq t . ([%#span5] inv'0 self)  -> ([%#span6] len'0 self >= 0)
  
  constant empty'0 : Seq'0.t_seq t = [%#span7] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span9] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span8] len'0 (empty'0 : Seq'0.t_seq t) = 0
  
  predicate invariant'0 (self : Seq'0.t_seq t)
  
  axiom inv'0 : forall x : Seq'0.t_seq t . inv'0 x = true
  
  use C09Empty_Empty_Type as Empty'0
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq t) (x : int) : t
  
  function concat'0 (self : Seq'0.t_seq t) (other : Seq'0.t_seq t) : Seq'0.t_seq t
  
  axiom concat'0_spec : forall self : Seq'0.t_seq t, other : Seq'0.t_seq t . ([%#span10] inv'0 self)
   -> ([%#span11] inv'0 other)
   -> ([%#span14] inv'0 (concat'0 self other))
  && ([%#span13] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span12] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  predicate produces'0 [#"../09_empty.rs" 21 4 21 64] (self : Empty'0.t_empty t) (visited : Seq'0.t_seq t) (o : Empty'0.t_empty t)
    
   =
    [%#span15] visited = (empty'0 : Seq'0.t_seq t) /\ self = o
  
  constant a  : Empty'0.t_empty t
  
  constant ab  : Seq'0.t_seq t
  
  constant b  : Empty'0.t_empty t
  
  constant bc  : Seq'0.t_seq t
  
  constant c  : Empty'0.t_empty t
  
  function produces_trans [#"../09_empty.rs" 35 4 35 90] (a : Empty'0.t_empty t) (ab : Seq'0.t_seq t) (b : Empty'0.t_empty t) (bc : Seq'0.t_seq t) (c : Empty'0.t_empty t) : ()
    
  
  goal vc_produces_trans : ([%#s09_empty3] inv'0 bc)
   -> ([%#s09_empty2] inv'0 ab)
   -> ([%#s09_empty1] produces'0 b bc c)
   -> ([%#s09_empty0] produces'0 a ab b)  -> ([%#s09_empty4] produces'0 a (concat'0 ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C09Empty_Impl0_Next
  type t
  
  let%span s09_empty0 = "../09_empty.rs" 37 14 40 5
  
  let%span s09_empty1 = "../09_empty.rs" 41 26 41 35
  
  let%span span2 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span7 = "../09_empty.rs" 22 20 22 54
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span12 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span13 = "../09_empty.rs" 16 20 16 34
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'2 (self : Seq'0.t_seq t)
  
  predicate inv'2 (_x : Seq'0.t_seq t)
  
  axiom inv'2 : forall x : Seq'0.t_seq t . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'0 (self : Option'0.t_option t)
  
  predicate inv'0 (_x : Option'0.t_option t)
  
  axiom inv'0 : forall x : Option'0.t_option t . inv'0 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'0 (self : Seq'0.t_seq t) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq t . ([%#span2] inv'2 self)  -> ([%#span3] len'0 self >= 0)
  
  constant empty'0 : Seq'0.t_seq t = [%#span4] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span6] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span5] len'0 (empty'0 : Seq'0.t_seq t) = 0
  
  use C09Empty_Empty_Type as Empty'0
  
  predicate produces'0 [#"../09_empty.rs" 21 4 21 64] (self : Empty'0.t_empty t) (visited : Seq'0.t_seq t) (o : Empty'0.t_empty t)
    
   =
    [%#span7] visited = (empty'0 : Seq'0.t_seq t) /\ self = o
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq t) (x : int) : t
  
  function singleton'0 (v : t) : Seq'0.t_seq t
  
  axiom singleton'0_spec : forall v : t . ([%#span8] inv'1 v)
   -> ([%#span11] inv'2 (singleton'0 v))
  && ([%#span10] index_logic'0 (singleton'0 v) 0 = v) && ([%#span9] len'0 (singleton'0 v) = 1)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (self : borrowed (Empty'0.t_empty t)) =
    [%#span12]  ^ self =  * self
  
  predicate completed'0 [#"../09_empty.rs" 15 4 15 35] (self : borrowed (Empty'0.t_empty t)) =
    [%#span13] resolve'0 self
  
  use prelude.prelude.Intrinsic
  
  let rec next (self:borrowed (Empty'0.t_empty t)) (return'  (ret:Option'0.t_option t))= (! bb0
    [ bb0 = s0 [ s0 = -{resolve'0 self}- s1 | s1 =  [ &_0 <- Option'0.C_None ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : Option'0.t_option t = any_l () | & self : borrowed (Empty'0.t_empty t) = self ] 
    [ return' (result:Option'0.t_option t)-> {[@expl:postcondition] [%#s09_empty1] inv'0 result}
      {[@expl:postcondition] [%#s09_empty0] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C09Empty_Impl0
  type t
  
  let%span s09_empty0 = "../09_empty.rs" 28 4 28 26
  
  let%span s09_empty1 = "../09_empty.rs" 41 4 41 35
  
  let%span s09_empty2 = "../09_empty.rs" 35 4 35 90
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span14 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span15 = "../09_empty.rs" 16 20 16 34
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span17 = "../09_empty.rs" 22 20 22 54
  
  predicate invariant'4 (self : t)
  
  predicate inv'4 (_x : t)
  
  axiom inv'4 : forall x : t . inv'4 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'3 (self : Seq'0.t_seq t)
  
  predicate inv'3 (_x : Seq'0.t_seq t)
  
  axiom inv'3 : forall x : Seq'0.t_seq t . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : Option'0.t_option t)
  
  predicate inv'2 (_x : Option'0.t_option t)
  
  axiom inv'2 : forall x : Option'0.t_option t . inv'2 x = true
  
  use C09Empty_Empty_Type as Empty'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (Empty'0.t_empty t))
  
  predicate inv'1 (_x : borrowed (Empty'0.t_empty t))
  
  axiom inv'1 : forall x : borrowed (Empty'0.t_empty t) . inv'1 x = true
  
  predicate invariant'0 (self : Empty'0.t_empty t)
  
  predicate inv'0 (_x : Empty'0.t_empty t)
  
  axiom inv'0 : forall x : Empty'0.t_empty t . inv'0 x = true
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  function index_logic'0 (self : Seq'0.t_seq t) (x : int) : t
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq t) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq t . ([%#span3] inv'3 self)  -> ([%#span4] len'0 self >= 0)
  
  function concat'0 (self : Seq'0.t_seq t) (other : Seq'0.t_seq t) : Seq'0.t_seq t
  
  axiom concat'0_spec : forall self : Seq'0.t_seq t, other : Seq'0.t_seq t . ([%#span5] inv'3 self)
   -> ([%#span6] inv'3 other)
   -> ([%#span9] inv'3 (concat'0 self other))
  && ([%#span8] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span7] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  use seq.Seq
  
  function singleton'0 (v : t) : Seq'0.t_seq t
  
  axiom singleton'0_spec : forall v : t . ([%#span10] inv'4 v)
   -> ([%#span13] inv'3 (singleton'0 v))
  && ([%#span12] index_logic'0 (singleton'0 v) 0 = v) && ([%#span11] len'0 (singleton'0 v) = 1)
  
  predicate resolve'0 (self : borrowed (Empty'0.t_empty t)) =
    [%#span14]  ^ self =  * self
  
  predicate completed'0 [#"../09_empty.rs" 15 4 15 35] (self : borrowed (Empty'0.t_empty t)) =
    [%#span15] resolve'0 self
  
  constant empty'0 : Seq'0.t_seq t = [%#span16] ()
  
  constant empty'0 : Seq'0.t_seq t = [%#span16] ()
  
  predicate produces'0 [#"../09_empty.rs" 21 4 21 64] (self : Empty'0.t_empty t) (visited : Seq'0.t_seq t) (o : Empty'0.t_empty t)
    
   =
    [%#span17] visited = (empty'0 : Seq'0.t_seq t) /\ self = o
  
  goal produces_refl_refn : [%#s09_empty0] forall self : Empty'0.t_empty t . inv'0 self
   -> (forall result : () . produces'0 self (empty'0 : Seq'0.t_seq t) self
   -> produces'0 self (empty'1 : Seq'0.t_seq t) self)
  
  goal next_refn : [%#s09_empty1] forall self : borrowed (Empty'0.t_empty t) . inv'1 self
   -> (forall result : Option'0.t_option t . inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
    end
   -> inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
    end)
  
  goal produces_trans_refn : [%#s09_empty2] forall a : Empty'0.t_empty t . forall ab : Seq'0.t_seq t . forall b : Empty'0.t_empty t . forall bc : Seq'0.t_seq t . forall c : Empty'0.t_empty t . inv'0 c
  /\ inv'3 bc /\ inv'0 b /\ inv'3 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'3 bc
  /\ inv'3 ab
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (concat'0 ab bc) c  -> produces'0 a (concat'0 ab bc) c)
end
