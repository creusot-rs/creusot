module M_09_empty__qyi9513254493468142860__produces_refl [#"09_empty.rs" 28 4 28 26] (* <Empty<T> as common::Iterator> *)
  let%span s09_empty0 = "09_empty.rs" 27 14 27 45
  let%span s09_empty1 = "09_empty.rs" 25 4 25 10
  let%span s09_empty2 = "09_empty.rs" 22 20 22 54
  
  use seq.Seq
  
  type t_T'0
  
  use seq.Seq
  
  type t_Empty'0  =
    { t_Empty__0'0: () }
  
  predicate produces'0 [#"09_empty.rs" 21 4 21 64] (self : t_Empty'0) (visited : Seq.seq t_T'0) (o : t_Empty'0) =
    [%#s09_empty2] visited = (Seq.empty  : Seq.seq t_T'0) /\ self = o
  
  constant self  : t_Empty'0
  
  function produces_refl'0 [#"09_empty.rs" 28 4 28 26] (self : t_Empty'0) : ()
  
  goal vc_produces_refl'0 : [%#s09_empty0] produces'0 self (Seq.empty  : Seq.seq t_T'0) self
end
module M_09_empty__qyi9513254493468142860__produces_trans [#"09_empty.rs" 38 4 38 90] (* <Empty<T> as common::Iterator> *)
  let%span s09_empty0 = "09_empty.rs" 32 15 32 21
  let%span s09_empty1 = "09_empty.rs" 33 15 33 21
  let%span s09_empty2 = "09_empty.rs" 34 15 34 21
  let%span s09_empty3 = "09_empty.rs" 35 15 35 32
  let%span s09_empty4 = "09_empty.rs" 36 15 36 32
  let%span s09_empty5 = "09_empty.rs" 37 14 37 42
  let%span s09_empty6 = "09_empty.rs" 30 4 30 10
  let%span s09_empty7 = "09_empty.rs" 22 20 22 54
  
  type t_Empty'0  =
    { t_Empty__0'0: () }
  
  predicate inv'0 (_1 : t_Empty'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Empty'0 [inv'0 x] . inv'0 x = true
  
  type t_T'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"09_empty.rs" 21 4 21 64] (self : t_Empty'0) (visited : Seq.seq t_T'0) (o : t_Empty'0) =
    [%#s09_empty7] visited = (Seq.empty  : Seq.seq t_T'0) /\ self = o
  
  use seq.Seq
  
  constant a  : t_Empty'0
  
  constant ab  : Seq.seq t_T'0
  
  constant b  : t_Empty'0
  
  constant bc  : Seq.seq t_T'0
  
  constant c  : t_Empty'0
  
  function produces_trans'0 [#"09_empty.rs" 38 4 38 90] (a : t_Empty'0) (ab : Seq.seq t_T'0) (b : t_Empty'0) (bc : Seq.seq t_T'0) (c : t_Empty'0) : ()
    
  
  goal vc_produces_trans'0 : ([%#s09_empty4] produces'0 b bc c)
   -> ([%#s09_empty3] produces'0 a ab b)
   -> ([%#s09_empty2] inv'0 c)
   -> ([%#s09_empty1] inv'0 b)  -> ([%#s09_empty0] inv'0 a)  -> ([%#s09_empty5] produces'0 a (Seq.(++) ab bc) c)
end
module M_09_empty__qyi9513254493468142860__next [#"09_empty.rs" 44 4 44 35] (* <Empty<T> as common::Iterator> *)
  let%span s09_empty0 = "09_empty.rs" 44 26 44 35
  let%span s09_empty1 = "09_empty.rs" 40 14 43 5
  let%span s09_empty2 = "09_empty.rs" 16 20 16 34
  let%span s09_empty3 = "09_empty.rs" 22 20 22 54
  let%span sresolve4 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Borrow
  
  type t_Empty'0  =
    { t_Empty__0'0: () }
  
  predicate resolve'1 (self : borrowed (t_Empty'0)) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Empty'0)) =
    resolve'1 _1
  
  type t_T'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  use prelude.prelude.Intrinsic
  
  predicate inv'1 (_1 : t_T'0)
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'1 a_0
    end
  
  predicate completed'0 [#"09_empty.rs" 15 4 15 35] (self : borrowed (t_Empty'0)) =
    [%#s09_empty2] resolve'1 self
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"09_empty.rs" 21 4 21 64] (self : t_Empty'0) (visited : Seq.seq t_T'0) (o : t_Empty'0) =
    [%#s09_empty3] visited = (Seq.empty  : Seq.seq t_T'0) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  let rec next'0 (self:borrowed (t_Empty'0)) (return'  (ret:t_Option'0))= (! bb0
    [ bb0 = s0 [ s0 = -{resolve'0 self}- s1 | s1 =  [ &_0 <- C_None'0 ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : t_Option'0 = any_l () | & self : borrowed (t_Empty'0) = self ] 
    [ return' (result:t_Option'0)-> {[@expl:next result type invariant] [%#s09_empty0] inv'0 result}
      {[@expl:next ensures] [%#s09_empty1] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_09_empty__qyi9513254493468142860__produces_refl__refines [#"09_empty.rs" 28 4 28 26] (* <Empty<T> as common::Iterator> *)
  let%span s09_empty0 = "09_empty.rs" 28 4 28 26
  let%span s09_empty1 = "09_empty.rs" 22 20 22 54
  
  type t_Empty'0  =
    { t_Empty__0'0: () }
  
  predicate inv'0 (_1 : t_Empty'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Empty'0 [inv'0 x] . inv'0 x = true
  
  use seq.Seq
  
  type t_T'0
  
  use seq.Seq
  
  predicate produces'0 [#"09_empty.rs" 21 4 21 64] (self : t_Empty'0) (visited : Seq.seq t_T'0) (o : t_Empty'0) =
    [%#s09_empty1] visited = (Seq.empty  : Seq.seq t_T'0) /\ self = o
  
  goal refines : [%#s09_empty0] forall self : t_Empty'0 . inv'0 self
   -> (forall result : () . produces'0 self (Seq.empty  : Seq.seq t_T'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_T'0) self)
end
module M_09_empty__qyi9513254493468142860__produces_trans__refines [#"09_empty.rs" 38 4 38 90] (* <Empty<T> as common::Iterator> *)
  let%span s09_empty0 = "09_empty.rs" 38 4 38 90
  let%span s09_empty1 = "09_empty.rs" 22 20 22 54
  
  type t_Empty'0  =
    { t_Empty__0'0: () }
  
  type t_T'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"09_empty.rs" 21 4 21 64] (self : t_Empty'0) (visited : Seq.seq t_T'0) (o : t_Empty'0) =
    [%#s09_empty1] visited = (Seq.empty  : Seq.seq t_T'0) /\ self = o
  
  predicate inv'0 (_1 : t_Empty'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Empty'0 [inv'0 x] . inv'0 x = true
  
  use seq.Seq
  
  goal refines : [%#s09_empty0] forall a : t_Empty'0 . forall ab : Seq.seq t_T'0 . forall b : t_Empty'0 . forall bc : Seq.seq t_T'0 . forall c : t_Empty'0 . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
module M_09_empty__qyi9513254493468142860__next__refines [#"09_empty.rs" 44 4 44 35] (* <Empty<T> as common::Iterator> *)
  let%span s09_empty0 = "09_empty.rs" 44 4 44 35
  let%span s09_empty1 = "09_empty.rs" 16 20 16 34
  let%span s09_empty2 = "09_empty.rs" 22 20 22 54
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Borrow
  
  type t_Empty'0  =
    { t_Empty__0'0: () }
  
  predicate inv'0 (_1 : borrowed (t_Empty'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Empty'0) [inv'0 x] . inv'0 x = true
  
  type t_T'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  predicate resolve'0 (self : borrowed (t_Empty'0)) =
    [%#sresolve3] self.final = self.current
  
  predicate completed'0 [#"09_empty.rs" 15 4 15 35] (self : borrowed (t_Empty'0)) =
    [%#s09_empty1] resolve'0 self
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"09_empty.rs" 21 4 21 64] (self : t_Empty'0) (visited : Seq.seq t_T'0) (o : t_Empty'0) =
    [%#s09_empty2] visited = (Seq.empty  : Seq.seq t_T'0) /\ self = o
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'2 a_0
    end
  
  goal refines : [%#s09_empty0] forall self : borrowed (t_Empty'0) . inv'0 self
   -> (forall result : t_Option'0 . match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result
   -> match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result)
end
