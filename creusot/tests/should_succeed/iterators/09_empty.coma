module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_09_empty__Empty [#"09_empty.rs" 8 0 8 19]
  use T_core__marker__PhantomData as PhantomData'0
  
  type t_Empty 't =
    | C_Empty (PhantomData'0.t_PhantomData 't)
  
  let rec t_Empty < 't > (input:t_Empty 't) (ret  (field_0:PhantomData'0.t_PhantomData 't))= any
    [ good (field_0:PhantomData'0.t_PhantomData 't)-> {C_Empty field_0 = input} (! ret {field_0}) ]
    
end
module M_09_empty__qyi9513254493468142860__produces_refl [#"09_empty.rs" 28 4 28 26] (* <Empty<T> as common::Iterator> *)
  type t
  
  let%span s09_empty0 = "09_empty.rs" 27 14 27 45
  let%span s09_empty1 = "09_empty.rs" 22 20 22 54
  
  use T_09_empty__Empty as Empty'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"09_empty.rs" 21 4 21 64] (self : Empty'0.t_Empty t) (visited : Seq.seq t) (o : Empty'0.t_Empty t)
    
   =
    [%#s09_empty1] visited = (Seq.empty  : Seq.seq t) /\ self = o
  
  constant self  : Empty'0.t_Empty t
  
  function produces_refl [#"09_empty.rs" 28 4 28 26] (self : Empty'0.t_Empty t) : ()
  
  goal vc_produces_refl : [%#s09_empty0] produces'0 self (Seq.empty  : Seq.seq t) self
end
module M_09_empty__qyi9513254493468142860__produces_trans [#"09_empty.rs" 38 4 38 90] (* <Empty<T> as common::Iterator> *)
  type t
  
  let%span s09_empty0 = "09_empty.rs" 32 15 32 21
  let%span s09_empty1 = "09_empty.rs" 33 15 33 21
  let%span s09_empty2 = "09_empty.rs" 34 15 34 21
  let%span s09_empty3 = "09_empty.rs" 35 15 35 32
  let%span s09_empty4 = "09_empty.rs" 36 15 36 32
  let%span s09_empty5 = "09_empty.rs" 37 14 37 42
  let%span s09_empty6 = "09_empty.rs" 22 20 22 54
  
  use T_09_empty__Empty as Empty'0
  
  predicate inv'0 (_1 : Empty'0.t_Empty t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Empty'0.t_Empty t [inv'0 x] . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"09_empty.rs" 21 4 21 64] (self : Empty'0.t_Empty t) (visited : Seq.seq t) (o : Empty'0.t_Empty t)
    
   =
    [%#s09_empty6] visited = (Seq.empty  : Seq.seq t) /\ self = o
  
  constant a  : Empty'0.t_Empty t
  
  constant ab  : Seq.seq t
  
  constant b  : Empty'0.t_Empty t
  
  constant bc  : Seq.seq t
  
  constant c  : Empty'0.t_Empty t
  
  function produces_trans [#"09_empty.rs" 38 4 38 90] (a : Empty'0.t_Empty t) (ab : Seq.seq t) (b : Empty'0.t_Empty t) (bc : Seq.seq t) (c : Empty'0.t_Empty t) : ()
    
  
  goal vc_produces_trans : ([%#s09_empty4] produces'0 b bc c)
   -> ([%#s09_empty3] produces'0 a ab b)
   -> ([%#s09_empty2] inv'0 c)
   -> ([%#s09_empty1] inv'0 b)  -> ([%#s09_empty0] inv'0 a)  -> ([%#s09_empty5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_09_empty__qyi9513254493468142860__next [#"09_empty.rs" 44 4 44 35] (* <Empty<T> as common::Iterator> *)
  type t
  
  let%span s09_empty0 = "09_empty.rs" 40 14 43 5
  let%span s09_empty1 = "09_empty.rs" 44 26 44 35
  let%span s09_empty2 = "09_empty.rs" 16 20 16 34
  let%span s09_empty3 = "09_empty.rs" 22 20 22 54
  let%span sresolve4 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  predicate inv'1 (_1 : t)
  
  use T_core__option__Option as Option'0
  
  predicate inv'0 (_1 : Option'0.t_Option t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Option'0.t_Option t [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'1 a_0
    end
  
  use seq.Seq
  
  use seq.Seq
  
  use T_09_empty__Empty as Empty'0
  
  predicate produces'0 [#"09_empty.rs" 21 4 21 64] (self : Empty'0.t_Empty t) (visited : Seq.seq t) (o : Empty'0.t_Empty t)
    
   =
    [%#s09_empty3] visited = (Seq.empty  : Seq.seq t) /\ self = o
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed (Empty'0.t_Empty t)) =
    [%#sresolve4] self.final = self.current
  
  predicate completed'0 [#"09_empty.rs" 15 4 15 35] (self : borrowed (Empty'0.t_Empty t)) =
    [%#s09_empty2] resolve'1 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (_1 : borrowed (Empty'0.t_Empty t)) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (Empty'0.t_Empty t)) (return'  (ret:Option'0.t_Option t))= (! bb0
    [ bb0 = s0 [ s0 = -{resolve'0 self}- s1 | s1 =  [ &_0 <- Option'0.C_None ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : Option'0.t_Option t = any_l () | & self : borrowed (Empty'0.t_Empty t) = self ] 
    [ return' (result:Option'0.t_Option t)-> {[@expl:postcondition] [%#s09_empty1] inv'0 result}
      {[@expl:postcondition] [%#s09_empty0] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_09_empty__qyi9513254493468142860 [#"09_empty.rs" 10 0 10 29] (* <Empty<T> as common::Iterator> *)
  type t
  
  let%span s09_empty0 = "09_empty.rs" 28 4 28 26
  let%span s09_empty1 = "09_empty.rs" 38 4 38 90
  let%span s09_empty2 = "09_empty.rs" 44 4 44 35
  let%span s09_empty3 = "09_empty.rs" 22 20 22 54
  let%span s09_empty4 = "09_empty.rs" 16 20 16 34
  let%span sresolve5 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  predicate inv'3 (_1 : t)
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Option'0.t_Option t [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  use T_09_empty__Empty as Empty'0
  
  use prelude.prelude.Borrow
  
  predicate inv'1 (_1 : borrowed (Empty'0.t_Empty t))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Empty'0.t_Empty t) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : Empty'0.t_Empty t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Empty'0.t_Empty t [inv'0 x] . inv'0 x = true
  
  use seq.Seq
  
  predicate resolve'0 (self : borrowed (Empty'0.t_Empty t)) =
    [%#sresolve5] self.final = self.current
  
  predicate completed'0 [#"09_empty.rs" 15 4 15 35] (self : borrowed (Empty'0.t_Empty t)) =
    [%#s09_empty4] resolve'0 self
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"09_empty.rs" 21 4 21 64] (self : Empty'0.t_Empty t) (visited : Seq.seq t) (o : Empty'0.t_Empty t)
    
   =
    [%#s09_empty3] visited = (Seq.empty  : Seq.seq t) /\ self = o
  
  goal produces_refl_refn : [%#s09_empty0] forall self : Empty'0.t_Empty t . inv'0 self
   -> (forall result : () . produces'0 self (Seq.empty  : Seq.seq t) self
   -> produces'0 self (Seq.empty  : Seq.seq t) self)
  
  goal produces_trans_refn : [%#s09_empty1] forall a : Empty'0.t_Empty t . forall ab : Seq.seq t . forall b : Empty'0.t_Empty t . forall bc : Seq.seq t . forall c : Empty'0.t_Empty t . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal next_refn : [%#s09_empty2] forall self : borrowed (Empty'0.t_Empty t) . inv'1 self
   -> (forall result : Option'0.t_Option t . inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
end
