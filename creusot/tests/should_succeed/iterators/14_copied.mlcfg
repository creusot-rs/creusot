
module C14Copied_Copied_Type
  type t_copied 'i =
    | C_Copied 'i
    
  let function copied_iter (self : t_copied 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Copied a -> a
      end
end
module C14Copied_Impl0_ProducesRefl_Impl
  type i
  type t
  predicate invariant2 (self : i)
  val invariant2 (self : i) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : i)
  val inv2 (_x : i) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : i . inv2 x = true
  use seq.Seq
  use seq.Seq
  predicate inv1 (_x : Seq.seq t)
  val inv1 (_x : Seq.seq t) : bool
    ensures { result = inv1 _x }
    
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq t) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq t) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv2 a}
    requires {[#"../common.rs" 21 31 21 33] inv1 ab}
    requires {[#"../common.rs" 21 52 21 53] inv2 b}
    requires {[#"../common.rs" 21 61 21 63] inv1 bc}
    requires {[#"../common.rs" 21 82 21 83] inv2 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv2 a) -> ([#"../common.rs" 21 31 21 33] inv1 ab) -> ([#"../common.rs" 21 52 21 53] inv2 b) -> ([#"../common.rs" 21 61 21 63] inv1 bc) -> ([#"../common.rs" 21 82 21 83] inv2 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv2 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv2 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  predicate invariant1 (self : Seq.seq t)
  val invariant1 (self : Seq.seq t) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : Seq.seq t . inv1 x = true
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  predicate invariant0 (self : C14Copied_Copied_Type.t_copied i)
  val invariant0 (self : C14Copied_Copied_Type.t_copied i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C14Copied_Copied_Type.t_copied i)
  val inv0 (_x : C14Copied_Copied_Type.t_copied i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C14Copied_Copied_Type.t_copied i . inv0 x = true
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Borrow
  predicate produces0 [#"../14_copied.rs" 28 4 28 64] (self : C14Copied_Copied_Type.t_copied i) (visited : Seq.seq t) (o : C14Copied_Copied_Type.t_copied i)
    
   =
    [#"../14_copied.rs" 29 8 33 9] exists s : Seq.seq t . inv1 s /\ produces1 (C14Copied_Copied_Type.copied_iter self) s (C14Copied_Copied_Type.copied_iter o) /\ Seq.length visited = Seq.length s /\ (forall i : int . 0 <= i /\ i < Seq.length s -> Seq.get visited i = Seq.get s i)
  val produces0 [#"../14_copied.rs" 28 4 28 64] (self : C14Copied_Copied_Type.t_copied i) (visited : Seq.seq t) (o : C14Copied_Copied_Type.t_copied i) : bool
    ensures { result = produces0 self visited o }
    
  use seq.Seq
  let rec ghost function produces_refl [#"../14_copied.rs" 39 4 39 29] (a : C14Copied_Copied_Type.t_copied i) : ()
    requires {[#"../14_copied.rs" 39 21 39 22] inv0 a}
    ensures { [#"../14_copied.rs" 38 14 38 39] produces0 a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../14_copied.rs" 36 4 36 10] ()
end
module C14Copied_Impl0_ProducesTrans_Impl
  type i
  type t
  predicate invariant3 (self : i)
  val invariant3 (self : i) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : i)
  val inv3 (_x : i) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : i . inv3 x = true
  use seq.Seq
  use seq.Seq
  predicate inv2 (_x : Seq.seq t)
  val inv2 (_x : Seq.seq t) : bool
    ensures { result = inv2 _x }
    
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq t) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq t) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv3 a}
    requires {[#"../common.rs" 21 31 21 33] inv2 ab}
    requires {[#"../common.rs" 21 52 21 53] inv3 b}
    requires {[#"../common.rs" 21 61 21 63] inv2 bc}
    requires {[#"../common.rs" 21 82 21 83] inv3 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv3 a) -> ([#"../common.rs" 21 31 21 33] inv2 ab) -> ([#"../common.rs" 21 52 21 53] inv3 b) -> ([#"../common.rs" 21 61 21 63] inv2 bc) -> ([#"../common.rs" 21 82 21 83] inv3 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv3 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv3 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  predicate invariant2 (self : Seq.seq t)
  val invariant2 (self : Seq.seq t) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : Seq.seq t . inv2 x = true
  predicate invariant1 (self : Seq.seq t)
  val invariant1 (self : Seq.seq t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq t)
  val inv1 (_x : Seq.seq t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq t . inv1 x = true
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  predicate invariant0 (self : C14Copied_Copied_Type.t_copied i)
  val invariant0 (self : C14Copied_Copied_Type.t_copied i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C14Copied_Copied_Type.t_copied i)
  val inv0 (_x : C14Copied_Copied_Type.t_copied i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C14Copied_Copied_Type.t_copied i . inv0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Borrow
  predicate produces0 [#"../14_copied.rs" 28 4 28 64] (self : C14Copied_Copied_Type.t_copied i) (visited : Seq.seq t) (o : C14Copied_Copied_Type.t_copied i)
    
   =
    [#"../14_copied.rs" 29 8 33 9] exists s : Seq.seq t . inv2 s /\ produces1 (C14Copied_Copied_Type.copied_iter self) s (C14Copied_Copied_Type.copied_iter o) /\ Seq.length visited = Seq.length s /\ (forall i : int . 0 <= i /\ i < Seq.length s -> Seq.get visited i = Seq.get s i)
  val produces0 [#"../14_copied.rs" 28 4 28 64] (self : C14Copied_Copied_Type.t_copied i) (visited : Seq.seq t) (o : C14Copied_Copied_Type.t_copied i) : bool
    ensures { result = produces0 self visited o }
    
  let rec ghost function produces_trans [#"../14_copied.rs" 46 4 46 90] (a : C14Copied_Copied_Type.t_copied i) (ab : Seq.seq t) (b : C14Copied_Copied_Type.t_copied i) (bc : Seq.seq t) (c : C14Copied_Copied_Type.t_copied i) : ()
    requires {[#"../14_copied.rs" 43 15 43 32] produces0 a ab b}
    requires {[#"../14_copied.rs" 44 15 44 32] produces0 b bc c}
    requires {[#"../14_copied.rs" 46 22 46 23] inv0 a}
    requires {[#"../14_copied.rs" 46 31 46 33] inv1 ab}
    requires {[#"../14_copied.rs" 46 52 46 53] inv0 b}
    requires {[#"../14_copied.rs" 46 61 46 63] inv1 bc}
    requires {[#"../14_copied.rs" 46 82 46 83] inv0 c}
    ensures { [#"../14_copied.rs" 45 14 45 42] produces0 a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../14_copied.rs" 41 4 41 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module C14Copied_Impl0_Next
  type i
  type t
  use seq.Seq
  predicate invariant6 (self : Seq.seq t)
  val invariant6 (self : Seq.seq t) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq t)
  val inv6 (_x : Seq.seq t) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq t . inv6 x = true
  predicate invariant5 (self : t)
  val invariant5 (self : t) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : t)
  val inv5 (_x : t) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : t . inv5 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant4 (self : Core_Option_Option_Type.t_option t)
  val invariant4 (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Core_Option_Option_Type.t_option t)
  val inv4 (_x : Core_Option_Option_Type.t_option t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Core_Option_Option_Type.t_option t . inv4 x = true
  use prelude.Borrow
  predicate invariant3 (self : borrowed i)
  val invariant3 (self : borrowed i) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed i)
  val inv3 (_x : borrowed i) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed i . inv3 x = true
  predicate invariant2 (self : Core_Option_Option_Type.t_option t)
  val invariant2 (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option t)
  val inv2 (_x : Core_Option_Option_Type.t_option t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option t . inv2 x = true
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  predicate invariant1 (self : borrowed (C14Copied_Copied_Type.t_copied i))
  val invariant1 (self : borrowed (C14Copied_Copied_Type.t_copied i)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (C14Copied_Copied_Type.t_copied i))
  val inv1 (_x : borrowed (C14Copied_Copied_Type.t_copied i)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (C14Copied_Copied_Type.t_copied i) . inv1 x = true
  use seq.Seq
  predicate inv0 (_x : i)
  val inv0 (_x : i) : bool
    ensures { result = inv0 _x }
    
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq t) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq t) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv0 a}
    requires {[#"../common.rs" 21 31 21 33] inv6 ab}
    requires {[#"../common.rs" 21 52 21 53] inv0 b}
    requires {[#"../common.rs" 21 61 21 63] inv6 bc}
    requires {[#"../common.rs" 21 82 21 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv0 a) -> ([#"../common.rs" 21 31 21 33] inv6 ab) -> ([#"../common.rs" 21 52 21 53] inv0 b) -> ([#"../common.rs" 21 61 21 63] inv6 bc) -> ([#"../common.rs" 21 82 21 83] inv0 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv0 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv0 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  predicate invariant0 (self : i)
  val invariant0 (self : i) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : i . inv0 x = true
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  predicate produces0 [#"../14_copied.rs" 28 4 28 64] (self : C14Copied_Copied_Type.t_copied i) (visited : Seq.seq t) (o : C14Copied_Copied_Type.t_copied i)
    
   =
    [#"../14_copied.rs" 29 8 33 9] exists s : Seq.seq t . inv6 s /\ produces1 (C14Copied_Copied_Type.copied_iter self) s (C14Copied_Copied_Type.copied_iter o) /\ Seq.length visited = Seq.length s /\ (forall i : int . 0 <= i /\ i < Seq.length s -> Seq.get visited i = Seq.get s i)
  val produces0 [#"../14_copied.rs" 28 4 28 64] (self : C14Copied_Copied_Type.t_copied i) (visited : Seq.seq t) (o : C14Copied_Copied_Type.t_copied i) : bool
    ensures { result = produces0 self visited o }
    
  use seq.Seq
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  predicate completed0 [#"../14_copied.rs" 22 4 22 35] (self : borrowed (C14Copied_Copied_Type.t_copied i)) =
    [#"../14_copied.rs" 23 8 23 43] completed1 {current = C14Copied_Copied_Type.copied_iter ( * self); final = C14Copied_Copied_Type.copied_iter ( ^ self)}
  val completed0 [#"../14_copied.rs" 22 4 22 35] (self : borrowed (C14Copied_Copied_Type.t_copied i)) : bool
    ensures { result = completed0 self }
    
  val copied0 (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option t
    requires {inv4 self}
    ensures { [#"../../../../../creusot-contracts/src/std/option.rs" 74 16 74 59] self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self = Core_Option_Option_Type.C_None \/ (exists t : t . inv5 t /\ self = Core_Option_Option_Type.C_Some t /\ result = Core_Option_Option_Type.C_Some t) }
    ensures { inv2 result }
    
  predicate resolve0 (self : borrowed (C14Copied_Copied_Type.t_copied i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (C14Copied_Copied_Type.t_copied i)) : bool
    ensures { result = resolve0 self }
    
  use seq.Seq
  val next0 [#"../common.rs" 27 4 27 45] (self : borrowed i) : Core_Option_Option_Type.t_option t
    requires {[#"../common.rs" 27 17 27 21] inv3 self}
    ensures { [#"../common.rs" 23 14 26 5] match result with
      | Core_Option_Option_Type.C_None -> completed1 self
      | Core_Option_Option_Type.C_Some v -> produces1 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 26 27 44] inv4 result }
    
  let rec cfg next [#"../14_copied.rs" 52 4 52 35] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C14Copied_Copied_Type.t_copied i)) : Core_Option_Option_Type.t_option t
    requires {[#"../14_copied.rs" 52 17 52 21] inv1 self}
    ensures { [#"../14_copied.rs" 48 14 51 5] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../14_copied.rs" 52 26 52 35] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var self : borrowed (C14Copied_Copied_Type.t_copied i) = self;
  var _3 : Core_Option_Option_Type.t_option t;
  var _4 : borrowed i;
  {
    goto BB0
  }
  BB0 {
    [#"../14_copied.rs" 53 8 53 24] _4 <- Borrow.borrow_mut (C14Copied_Copied_Type.copied_iter ( * self));
    [#"../14_copied.rs" 53 8 53 24] self <- { self with current = (let C14Copied_Copied_Type.C_Copied x0 =  * self in C14Copied_Copied_Type.C_Copied ( ^ _4)) };
    assume { inv0 ( ^ _4) };
    [#"../14_copied.rs" 53 8 53 24] _3 <- ([#"../14_copied.rs" 53 8 53 24] next0 _4);
    _4 <- any borrowed i;
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv1 self };
    assume { resolve0 self };
    [#"../14_copied.rs" 53 8 53 33] _0 <- ([#"../14_copied.rs" 53 8 53 33] copied0 _3);
    _3 <- any Core_Option_Option_Type.t_option t;
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module C14Copied_Impl0
  type i
  type t
  use seq.Seq
  predicate invariant4 (self : Seq.seq t)
  val invariant4 (self : Seq.seq t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Seq.seq t)
  val inv4 (_x : Seq.seq t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq t . inv4 x = true
  predicate invariant3 (self : Seq.seq t)
  val invariant3 (self : Seq.seq t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq t)
  val inv3 (_x : Seq.seq t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq t . inv3 x = true
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  predicate invariant2 (self : C14Copied_Copied_Type.t_copied i)
  val invariant2 (self : C14Copied_Copied_Type.t_copied i) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : C14Copied_Copied_Type.t_copied i)
  val inv2 (_x : C14Copied_Copied_Type.t_copied i) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : C14Copied_Copied_Type.t_copied i . inv2 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant1 (self : Core_Option_Option_Type.t_option t)
  val invariant1 (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option t)
  val inv1 (_x : Core_Option_Option_Type.t_option t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option t . inv1 x = true
  use prelude.Borrow
  predicate invariant0 (self : borrowed (C14Copied_Copied_Type.t_copied i))
  val invariant0 (self : borrowed (C14Copied_Copied_Type.t_copied i)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed (C14Copied_Copied_Type.t_copied i))
  val inv0 (_x : borrowed (C14Copied_Copied_Type.t_copied i)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed (C14Copied_Copied_Type.t_copied i) . inv0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq t) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq t) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  predicate produces0 [#"../14_copied.rs" 28 4 28 64] (self : C14Copied_Copied_Type.t_copied i) (visited : Seq.seq t) (o : C14Copied_Copied_Type.t_copied i)
    
   =
    [#"../14_copied.rs" 29 8 33 9] exists s : Seq.seq t . inv4 s /\ produces1 (C14Copied_Copied_Type.copied_iter self) s (C14Copied_Copied_Type.copied_iter o) /\ Seq.length visited = Seq.length s /\ (forall i : int . 0 <= i /\ i < Seq.length s -> Seq.get visited i = Seq.get s i)
  val produces0 [#"../14_copied.rs" 28 4 28 64] (self : C14Copied_Copied_Type.t_copied i) (visited : Seq.seq t) (o : C14Copied_Copied_Type.t_copied i) : bool
    ensures { result = produces0 self visited o }
    
  use seq.Seq
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  predicate completed0 [#"../14_copied.rs" 22 4 22 35] (self : borrowed (C14Copied_Copied_Type.t_copied i)) =
    [#"../14_copied.rs" 23 8 23 43] completed1 {current = C14Copied_Copied_Type.copied_iter ( * self); final = C14Copied_Copied_Type.copied_iter ( ^ self)}
  val completed0 [#"../14_copied.rs" 22 4 22 35] (self : borrowed (C14Copied_Copied_Type.t_copied i)) : bool
    ensures { result = completed0 self }
    
  goal next_refn : [#"../14_copied.rs" 52 4 52 35] forall self : borrowed (C14Copied_Copied_Type.t_copied i) . inv0 self -> inv0 self /\ (forall result : Core_Option_Option_Type.t_option t . inv1 result /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end -> inv1 result /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_trans_refn : [#"../14_copied.rs" 46 4 46 90] forall a : C14Copied_Copied_Type.t_copied i . forall ab : Seq.seq t . forall b : C14Copied_Copied_Type.t_copied i . forall bc : Seq.seq t . forall c : C14Copied_Copied_Type.t_copied i . inv2 c /\ inv3 bc /\ inv2 b /\ inv3 ab /\ inv2 a /\ produces0 b bc c /\ produces0 a ab b -> inv2 c /\ inv3 bc /\ inv2 b /\ inv3 ab /\ inv2 a /\ produces0 b bc c /\ produces0 a ab b /\ (forall result : () . produces0 a (Seq.(++) ab bc) c -> produces0 a (Seq.(++) ab bc) c)
  goal produces_refl_refn : [#"../14_copied.rs" 39 4 39 29] forall a : C14Copied_Copied_Type.t_copied i . inv2 a -> inv2 a /\ (forall result : () . produces0 a (Seq.empty ) a -> produces0 a (Seq.empty ) a)
end
