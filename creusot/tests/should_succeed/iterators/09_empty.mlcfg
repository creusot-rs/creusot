
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module C09Empty_Empty_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  type t_empty 't =
    | C_Empty (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C09Empty_Impl0_Completed_Stub
  type t
  use prelude.Borrow
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  predicate completed [#"../09_empty.rs" 15 4 15 35] (self : borrowed (C09Empty_Empty_Type.t_empty t))
end
module C09Empty_Impl0_Completed_Interface
  type t
  use prelude.Borrow
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  predicate completed [#"../09_empty.rs" 15 4 15 35] (self : borrowed (C09Empty_Empty_Type.t_empty t))
  val completed [#"../09_empty.rs" 15 4 15 35] (self : borrowed (C09Empty_Empty_Type.t_empty t)) : bool
    ensures { result = completed self }
    
end
module C09Empty_Impl0_Completed
  type t
  use prelude.Borrow
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = C09Empty_Empty_Type.t_empty t
  predicate completed [#"../09_empty.rs" 15 4 15 35] (self : borrowed (C09Empty_Empty_Type.t_empty t)) =
    [#"../09_empty.rs" 16 20 16 34] Resolve0.resolve self
  val completed [#"../09_empty.rs" 15 4 15 35] (self : borrowed (C09Empty_Empty_Type.t_empty t)) : bool
    ensures { result = completed self }
    
end
module C09Empty_Impl0_Produces_Stub
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  predicate produces [#"../09_empty.rs" 21 4 21 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t)
    
end
module C09Empty_Impl0_Produces_Interface
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  predicate produces [#"../09_empty.rs" 21 4 21 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t)
    
  val produces [#"../09_empty.rs" 21 4 21 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t) : bool
    ensures { result = produces self visited o }
    
end
module C09Empty_Impl0_Produces
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  predicate produces [#"../09_empty.rs" 21 4 21 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t)
    
   =
    [#"../09_empty.rs" 22 20 22 54] visited = Seq.empty  /\ self = o
  val produces [#"../09_empty.rs" 21 4 21 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t) : bool
    ensures { result = produces self visited o }
    
end
module C09Empty_Impl0_ProducesRefl_Stub
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t
  function produces_refl [#"../09_empty.rs" 28 4 28 29] (a : C09Empty_Empty_Type.t_empty t) : ()
end
module C09Empty_Impl0_ProducesRefl_Interface
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t
  function produces_refl [#"../09_empty.rs" 28 4 28 29] (a : C09Empty_Empty_Type.t_empty t) : ()
  val produces_refl [#"../09_empty.rs" 28 4 28 29] (a : C09Empty_Empty_Type.t_empty t) : ()
    ensures { [#"../09_empty.rs" 27 14 27 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C09Empty_Empty_Type.t_empty t . [#"../09_empty.rs" 27 14 27 39] Produces0.produces a (Seq.empty ) a
end
module C09Empty_Impl0_ProducesRefl
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t
  function produces_refl [#"../09_empty.rs" 28 4 28 29] (a : C09Empty_Empty_Type.t_empty t) : () =
    [#"../09_empty.rs" 25 4 25 10] ()
  val produces_refl [#"../09_empty.rs" 28 4 28 29] (a : C09Empty_Empty_Type.t_empty t) : ()
    ensures { [#"../09_empty.rs" 27 14 27 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C09Empty_Empty_Type.t_empty t . [#"../09_empty.rs" 27 14 27 39] Produces0.produces a (Seq.empty ) a
end
module C09Empty_Impl0_ProducesRefl_Impl
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone C09Empty_Impl0_Produces as Produces0 with
    type t = t
  let rec ghost function produces_refl [#"../09_empty.rs" 28 4 28 29] (a : C09Empty_Empty_Type.t_empty t) : ()
    ensures { [#"../09_empty.rs" 27 14 27 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../09_empty.rs" 25 4 25 10] ()
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C09Empty_Impl0_ProducesTrans_Stub
  type t
  use seq.Seq
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t
  function produces_trans [#"../09_empty.rs" 35 4 35 90] (a : C09Empty_Empty_Type.t_empty t) (ab : Seq.seq t) (b : C09Empty_Empty_Type.t_empty t) (bc : Seq.seq t) (c : C09Empty_Empty_Type.t_empty t) : ()
    
end
module C09Empty_Impl0_ProducesTrans_Interface
  type t
  use seq.Seq
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t
  function produces_trans [#"../09_empty.rs" 35 4 35 90] (a : C09Empty_Empty_Type.t_empty t) (ab : Seq.seq t) (b : C09Empty_Empty_Type.t_empty t) (bc : Seq.seq t) (c : C09Empty_Empty_Type.t_empty t) : ()
    
  val produces_trans [#"../09_empty.rs" 35 4 35 90] (a : C09Empty_Empty_Type.t_empty t) (ab : Seq.seq t) (b : C09Empty_Empty_Type.t_empty t) (bc : Seq.seq t) (c : C09Empty_Empty_Type.t_empty t) : ()
    requires {[#"../09_empty.rs" 32 15 32 32] Produces0.produces a ab b}
    requires {[#"../09_empty.rs" 33 15 33 32] Produces0.produces b bc c}
    requires {[#"../09_empty.rs" 35 31 35 33] Inv0.inv ab}
    requires {[#"../09_empty.rs" 35 61 35 63] Inv0.inv bc}
    ensures { [#"../09_empty.rs" 34 14 34 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C09Empty_Empty_Type.t_empty t, ab : Seq.seq t, b : C09Empty_Empty_Type.t_empty t, bc : Seq.seq t, c : C09Empty_Empty_Type.t_empty t . ([#"../09_empty.rs" 32 15 32 32] Produces0.produces a ab b) -> ([#"../09_empty.rs" 33 15 33 32] Produces0.produces b bc c) -> ([#"../09_empty.rs" 35 31 35 33] Inv0.inv ab) -> ([#"../09_empty.rs" 35 61 35 63] Inv0.inv bc) -> ([#"../09_empty.rs" 34 14 34 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C09Empty_Impl0_ProducesTrans
  type t
  use seq.Seq
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t
  function produces_trans [#"../09_empty.rs" 35 4 35 90] (a : C09Empty_Empty_Type.t_empty t) (ab : Seq.seq t) (b : C09Empty_Empty_Type.t_empty t) (bc : Seq.seq t) (c : C09Empty_Empty_Type.t_empty t) : ()
    
   =
    [#"../09_empty.rs" 30 4 30 10] ()
  val produces_trans [#"../09_empty.rs" 35 4 35 90] (a : C09Empty_Empty_Type.t_empty t) (ab : Seq.seq t) (b : C09Empty_Empty_Type.t_empty t) (bc : Seq.seq t) (c : C09Empty_Empty_Type.t_empty t) : ()
    requires {[#"../09_empty.rs" 32 15 32 32] Produces0.produces a ab b}
    requires {[#"../09_empty.rs" 33 15 33 32] Produces0.produces b bc c}
    requires {[#"../09_empty.rs" 35 31 35 33] Inv0.inv ab}
    requires {[#"../09_empty.rs" 35 61 35 63] Inv0.inv bc}
    ensures { [#"../09_empty.rs" 34 14 34 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C09Empty_Empty_Type.t_empty t, ab : Seq.seq t, b : C09Empty_Empty_Type.t_empty t, bc : Seq.seq t, c : C09Empty_Empty_Type.t_empty t . ([#"../09_empty.rs" 32 15 32 32] Produces0.produces a ab b) -> ([#"../09_empty.rs" 33 15 33 32] Produces0.produces b bc c) -> ([#"../09_empty.rs" 35 31 35 33] Inv0.inv ab) -> ([#"../09_empty.rs" 35 61 35 63] Inv0.inv bc) -> ([#"../09_empty.rs" 34 14 34 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C09Empty_Impl0_ProducesTrans_Impl
  type t
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Seq.seq t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Seq.seq t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone C09Empty_Impl0_Produces as Produces0 with
    type t = t
  let rec ghost function produces_trans [#"../09_empty.rs" 35 4 35 90] (a : C09Empty_Empty_Type.t_empty t) (ab : Seq.seq t) (b : C09Empty_Empty_Type.t_empty t) (bc : Seq.seq t) (c : C09Empty_Empty_Type.t_empty t) : ()
    requires {[#"../09_empty.rs" 32 15 32 32] Produces0.produces a ab b}
    requires {[#"../09_empty.rs" 33 15 33 32] Produces0.produces b bc c}
    requires {[#"../09_empty.rs" 35 31 35 33] Inv0.inv ab}
    requires {[#"../09_empty.rs" 35 61 35 63] Inv0.inv bc}
    ensures { [#"../09_empty.rs" 34 14 34 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../09_empty.rs" 30 4 30 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module C09Empty_Impl0_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option t
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C09Empty_Impl0_Completed_Stub as Completed0 with
    type t = t
  val next [#"../09_empty.rs" 41 4 41 35] (self : borrowed (C09Empty_Empty_Type.t_empty t)) : Core_Option_Option_Type.t_option t
    ensures { [#"../09_empty.rs" 37 14 40 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../09_empty.rs" 41 26 41 35] Inv0.inv result }
    
end
module C09Empty_Impl0_Next
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Core_Option_Option_Type.t_option t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Option_Option_Type.t_option t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone C09Empty_Impl0_Produces as Produces0 with
    type t = t
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C09Empty_Empty_Type.t_empty t
  clone C09Empty_Impl0_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve0.resolve
  let rec cfg next [#"../09_empty.rs" 41 4 41 35] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C09Empty_Empty_Type.t_empty t)) : Core_Option_Option_Type.t_option t
    ensures { [#"../09_empty.rs" 37 14 40 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../09_empty.rs" 41 26 41 35] Inv0.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var self : borrowed (C09Empty_Empty_Type.t_empty t) = self;
  {
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve self };
    _0 <- Core_Option_Option_Type.C_None;
    return _0
  }
  
end
module C09Empty_Common_Iterator_Item_Type
  type self
  type item
end
module C09Empty_Impl0
  type t
  use seq.Seq
  use prelude.Borrow
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C09Empty_Empty_Type.t_empty t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Core_Option_Option_Type.t_option t
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Core_Option_Option_Type.t_option t,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (C09Empty_Empty_Type.t_empty t)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (C09Empty_Empty_Type.t_empty t),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq t
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Seq.seq t,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C09Empty_Empty_Type.t_empty t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = C09Empty_Empty_Type.t_empty t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C09Empty_Common_Iterator_Item_Type as Item0 with
    type self = C09Empty_Empty_Type.t_empty t
  clone C09Empty_Impl0_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve0.resolve
  clone C09Empty_Impl0_Produces as Produces0 with
    type t = t
  goal produces_trans_refn : [#"../09_empty.rs" 35 4 35 90] forall a : C09Empty_Empty_Type.t_empty t . forall ab : Seq.seq t . forall b : C09Empty_Empty_Type.t_empty t . forall bc : Seq.seq t . forall c : C09Empty_Empty_Type.t_empty t . Inv0.inv c /\ Inv1.inv bc /\ Inv0.inv b /\ Inv1.inv ab /\ Inv0.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Inv1.inv bc /\ Inv1.inv ab /\ Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
  goal produces_refl_refn : [#"../09_empty.rs" 28 4 28 29] forall a : C09Empty_Empty_Type.t_empty t . Inv0.inv a -> (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
  goal next_refn : [#"../09_empty.rs" 41 4 41 35] forall self : borrowed (C09Empty_Empty_Type.t_empty t) . Inv2.inv self -> (forall result : Core_Option_Option_Type.t_option t . Inv3.inv result /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end -> Inv3.inv result /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
end
