
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module C09Empty_Empty_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  type t_empty 't =
    | C_Empty (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module C09Empty_Impl0_ProducesRefl_Impl
  type t
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  use seq.Seq
  use seq.Seq
  predicate produces0 [#"../09_empty.rs" 21 4 21 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t)
    
   =
    [#"../09_empty.rs" 22 20 22 54] visited = Seq.empty  /\ self = o
  val produces0 [#"../09_empty.rs" 21 4 21 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t) : bool
    ensures { result = produces0 self visited o }
    
  constant self  : C09Empty_Empty_Type.t_empty t
  function produces_refl [#"../09_empty.rs" 28 4 28 26] (self : C09Empty_Empty_Type.t_empty t) : ()
  goal vc_produces_refl : [#"../09_empty.rs" 27 14 27 45] produces0 self (Seq.empty ) self
end
module C09Empty_Impl0_ProducesTrans_Impl
  type t
  use seq.Seq
  predicate invariant0 (self : Seq.seq t)
  val invariant0 (self : Seq.seq t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Seq.seq t)
  val inv0 (_x : Seq.seq t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Seq.seq t . inv0 x = true
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  use seq.Seq
  use seq.Seq
  predicate produces0 [#"../09_empty.rs" 21 4 21 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t)
    
   =
    [#"../09_empty.rs" 22 20 22 54] visited = Seq.empty  /\ self = o
  val produces0 [#"../09_empty.rs" 21 4 21 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t) : bool
    ensures { result = produces0 self visited o }
    
  constant a  : C09Empty_Empty_Type.t_empty t
  constant ab  : Seq.seq t
  constant b  : C09Empty_Empty_Type.t_empty t
  constant bc  : Seq.seq t
  constant c  : C09Empty_Empty_Type.t_empty t
  function produces_trans [#"../09_empty.rs" 35 4 35 90] (a : C09Empty_Empty_Type.t_empty t) (ab : Seq.seq t) (b : C09Empty_Empty_Type.t_empty t) (bc : Seq.seq t) (c : C09Empty_Empty_Type.t_empty t) : ()
    
  goal vc_produces_trans : ([#"../09_empty.rs" 35 61 35 63] inv0 bc)
   -> ([#"../09_empty.rs" 35 31 35 33] inv0 ab)
   -> ([#"../09_empty.rs" 33 15 33 32] produces0 b bc c)
   -> ([#"../09_empty.rs" 32 15 32 32] produces0 a ab b)
   -> ([#"../09_empty.rs" 34 14 34 42] produces0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module C09Empty_Impl0_Next
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant0 (self : Core_Option_Option_Type.t_option t)
  val invariant0 (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Core_Option_Option_Type.t_option t)
  val inv0 (_x : Core_Option_Option_Type.t_option t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Core_Option_Option_Type.t_option t . inv0 x = true
  use seq.Seq
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  predicate produces0 [#"../09_empty.rs" 21 4 21 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t)
    
   =
    [#"../09_empty.rs" 22 20 22 54] visited = Seq.empty  /\ self = o
  val produces0 [#"../09_empty.rs" 21 4 21 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t) : bool
    ensures { result = produces0 self visited o }
    
  use seq.Seq
  use prelude.Borrow
  predicate resolve0 (self : borrowed (C09Empty_Empty_Type.t_empty t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (C09Empty_Empty_Type.t_empty t)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 [#"../09_empty.rs" 15 4 15 35] (self : borrowed (C09Empty_Empty_Type.t_empty t)) =
    [#"../09_empty.rs" 16 20 16 34] resolve0 self
  val completed0 [#"../09_empty.rs" 15 4 15 35] (self : borrowed (C09Empty_Empty_Type.t_empty t)) : bool
    ensures { result = completed0 self }
    
  let rec cfg next [#"../09_empty.rs" 41 4 41 35] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C09Empty_Empty_Type.t_empty t)) : Core_Option_Option_Type.t_option t
    ensures { [#"../09_empty.rs" 37 14 40 5] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../09_empty.rs" 41 26 41 35] inv0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var self : borrowed (C09Empty_Empty_Type.t_empty t) = self;
  {
    goto BB0
  }
  BB0 {
    assume { resolve0 self };
    [#"../09_empty.rs" 42 8 42 12] _0 <- Core_Option_Option_Type.C_None;
    return _0
  }
  
end
module C09Empty_Impl0
  type t
  use seq.Seq
  predicate invariant3 (self : Seq.seq t)
  val invariant3 (self : Seq.seq t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq t)
  val inv3 (_x : Seq.seq t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq t . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : Core_Option_Option_Type.t_option t)
  val invariant2 (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option t)
  val inv2 (_x : Core_Option_Option_Type.t_option t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option t . inv2 x = true
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  use prelude.Borrow
  predicate invariant1 (self : borrowed (C09Empty_Empty_Type.t_empty t))
  val invariant1 (self : borrowed (C09Empty_Empty_Type.t_empty t)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (C09Empty_Empty_Type.t_empty t))
  val inv1 (_x : borrowed (C09Empty_Empty_Type.t_empty t)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (C09Empty_Empty_Type.t_empty t) . inv1 x = true
  predicate invariant0 (self : C09Empty_Empty_Type.t_empty t)
  val invariant0 (self : C09Empty_Empty_Type.t_empty t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C09Empty_Empty_Type.t_empty t)
  val inv0 (_x : C09Empty_Empty_Type.t_empty t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C09Empty_Empty_Type.t_empty t . inv0 x = true
  use seq.Seq
  use seq.Seq
  predicate resolve0 (self : borrowed (C09Empty_Empty_Type.t_empty t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (C09Empty_Empty_Type.t_empty t)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 [#"../09_empty.rs" 15 4 15 35] (self : borrowed (C09Empty_Empty_Type.t_empty t)) =
    [#"../09_empty.rs" 16 20 16 34] resolve0 self
  val completed0 [#"../09_empty.rs" 15 4 15 35] (self : borrowed (C09Empty_Empty_Type.t_empty t)) : bool
    ensures { result = completed0 self }
    
  use seq.Seq
  use seq.Seq
  predicate produces0 [#"../09_empty.rs" 21 4 21 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t)
    
   =
    [#"../09_empty.rs" 22 20 22 54] visited = Seq.empty  /\ self = o
  val produces0 [#"../09_empty.rs" 21 4 21 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t) : bool
    ensures { result = produces0 self visited o }
    
  goal produces_refl_refn : [#"../09_empty.rs" 28 4 28 26] forall self : C09Empty_Empty_Type.t_empty t . inv0 self
   -> (forall result : () . produces0 self (Seq.empty ) self  -> produces0 self (Seq.empty ) self)
  goal next_refn : [#"../09_empty.rs" 41 4 41 35] forall self : borrowed (C09Empty_Empty_Type.t_empty t) . inv1 self
   -> (forall result : Core_Option_Option_Type.t_option t . inv2 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv2 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_trans_refn : [#"../09_empty.rs" 35 4 35 90] forall a : C09Empty_Empty_Type.t_empty t . forall ab : Seq.seq t . forall b : C09Empty_Empty_Type.t_empty t . forall bc : Seq.seq t . forall c : C09Empty_Empty_Type.t_empty t . inv0 c
  /\ inv3 bc /\ inv0 b /\ inv3 ab /\ inv0 a /\ produces0 b bc c /\ produces0 a ab b
   -> inv3 bc
  /\ inv3 ab
  /\ produces0 b bc c
  /\ produces0 a ab b /\ (forall result : () . produces0 a (Seq.(++) ab bc) c  -> produces0 a (Seq.(++) ab bc) c)
end
