
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.prelude.Borrow
  
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use prelude.prelude.Opaque
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_iter 't =
    | C_Iter (NonNull'0.t_nonnull 't) opaque_ptr (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_iter < 't > (input:t_iter 't) (ret  (ptr:NonNull'0.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (ptr:NonNull'0.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Iter ptr end_or_len _marker
      = input}
      (! ret {ptr} {end_or_len} {_marker})
    | bad (ptr:NonNull'0.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Iter ptr end_or_len _marker
      <> input}
      {false}
      any ]
    
end
module CreusotContracts_Snapshot_Snapshot_Type
  type t_snapshot 't
end
module CreusotContracts_Logic_Seq2_Seq_Type
  use seq.Seq
  
  type t_seq 't =
    | C_Seq (Seq.seq 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_seq < 't > (input:t_seq 't) (ret  (field_0:Seq.seq 't))= any
    [ good (field_0:Seq.seq 't)-> {C_Seq field_0 = input} (! ret {field_0})
    | bad (field_0:Seq.seq 't)-> {C_Seq field_0 <> input} {false} any ]
    
  
  function seq_0 [@inline:trivial] (self : t_seq 't) : Seq.seq 't =
    match self with
      | C_Seq a -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C03StdIterators_SliceIter
  type t
  
  let%span s03_std_iterators0 = "../03_std_iterators.rs" 7 16 7 17
  
  let%span s03_std_iterators1 = "../03_std_iterators.rs" 8 4 8 38
  
  let%span s03_std_iterators2 = "../03_std_iterators.rs" 8 4 8 38
  
  let%span s03_std_iterators3 = "../03_std_iterators.rs" 8 4 8 38
  
  let%span s03_std_iterators4 = "../03_std_iterators.rs" 8 16 8 36
  
  let%span s03_std_iterators5 = "../03_std_iterators.rs" 8 4 8 38
  
  let%span s03_std_iterators6 = "../03_std_iterators.rs" 10 13 10 14
  
  let%span s03_std_iterators7 = "../03_std_iterators.rs" 4 11 4 30
  
  let%span s03_std_iterators8 = "../03_std_iterators.rs" 6 21 6 26
  
  let%span s03_std_iterators9 = "../03_std_iterators.rs" 5 10 5 33
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span18 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span19 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "../../../../../creusot-contracts/src/std/slice.rs" 18 21 18 25
  
  let%span span22 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span23 = "../../../../../creusot-contracts/src/std/slice.rs" 18 4 18 50
  
  let%span span24 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span25 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span26 = "../../../../../creusot-contracts/src/std/slice.rs" 76 19 76 23
  
  let%span span27 = "../../../../../creusot-contracts/src/std/slice.rs" 74 14 74 41
  
  let%span span28 = "../../../../../creusot-contracts/src/std/slice.rs" 75 4 75 82
  
  let%span span29 = "../../../../../creusot-contracts/src/std/slice.rs" 76 4 76 35
  
  let%span span30 = "../../../../../creusot-contracts/src/std/slice.rs" 384 12 384 66
  
  let%span span31 = "../../../../../creusot-contracts/src/std/slice.rs" 395 15 395 32
  
  let%span span32 = "../../../../../creusot-contracts/src/std/slice.rs" 396 15 396 32
  
  let%span span33 = "../../../../../creusot-contracts/src/std/slice.rs" 398 31 398 33
  
  let%span span34 = "../../../../../creusot-contracts/src/std/slice.rs" 398 61 398 63
  
  let%span span35 = "../../../../../creusot-contracts/src/std/slice.rs" 397 14 397 42
  
  let%span span36 = "../../../../../creusot-contracts/src/std/slice.rs" 393 4 393 10
  
  let%span span37 = "../../../../../creusot-contracts/src/std/slice.rs" 390 14 390 45
  
  let%span span38 = "../../../../../creusot-contracts/src/std/slice.rs" 388 4 388 10
  
  let%span span39 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span40 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span41 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span42 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span43 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span44 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span45 = "../../../../../creusot-contracts/src/std/slice.rs" 377 20 377 61
  
  let%span span46 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span47 = "" 0 0 0 0
  
  let%span span48 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span49 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span50 = "../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span51 = "../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span52 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span53 = "" 0 0 0 0
  
  let%span span54 = "" 0 0 0 0
  
  let%span span55 = "" 0 0 0 0
  
  let%span span56 = "../../../../../creusot-contracts/src/std/slice.rs" 223 0 332 1
  
  use prelude.prelude.Slice
  
  predicate invariant'6 (self : slice t)
  
  predicate inv'6 (_x : slice t)
  
  axiom inv'6 : forall x : slice t . inv'6 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'5 (self : Seq'0.t_seq t)
  
  predicate inv'5 (_x : Seq'0.t_seq t)
  
  axiom inv'5 : forall x : Seq'0.t_seq t . inv'5 x = true
  
  predicate invariant'4 (self : Seq'0.t_seq t)
  
  predicate inv'4 (_x : Seq'0.t_seq t)
  
  axiom inv'4 : forall x : Seq'0.t_seq t . inv'4 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'1 (self : Seq'0.t_seq t) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq t . ([%#span10] inv'5 self)  -> ([%#span11] len'1 self >= 0)
  
  constant empty'1 : Seq'0.t_seq t = [%#span12] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span14] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span13] len'1 (empty'1 : Seq'0.t_seq t) = 0
  
  predicate invariant'3 (self : t)
  
  predicate inv'3 (_x : t)
  
  axiom inv'3 : forall x : t . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : Option'0.t_option t)
  
  predicate inv'2 (_x : Option'0.t_option t)
  
  axiom inv'2 : forall x : Option'0.t_option t . inv'2 x = true
  
  use prelude.prelude.Borrow
  
  use Core_Slice_Iter_Iter_Type as Iter'0
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq t) (x : int) : t
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq t) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq t . ([%#span10] inv'4 self)  -> ([%#span11] len'0 self >= 0)
  
  function concat'0 (self : Seq'0.t_seq t) (other : Seq'0.t_seq t) : Seq'0.t_seq t
  
  axiom concat'0_spec : forall self : Seq'0.t_seq t, other : Seq'0.t_seq t . ([%#span15] inv'4 self)
   -> ([%#span16] inv'4 other)
   -> ([%#span19] inv'4 (concat'0 self other))
  && ([%#span18] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span17] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  use seq.Seq
  
  function index_logic'2 (self : Seq'0.t_seq t) (x : int) : t
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant max'0 : usize = [%#span20] (18446744073709551615 : usize)
  
  function shallow_model'2 (self : slice t) : Seq'0.t_seq t
  
  axiom shallow_model'2_spec : forall self : slice t . ([%#span21] inv'6 self)
   -> ([%#span23] inv'5 (shallow_model'2 self))
  && ([%#span22] len'1 (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  function index_logic'1 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#span24] index_logic'2 (shallow_model'2 self) ix
  
  function shallow_model'0 (self : slice t) : Seq'0.t_seq t =
    [%#span25] shallow_model'2 self
  
  predicate inv'0 (_x : slice t)
  
  function to_ref_seq'0 (self : slice t) : Seq'0.t_seq t
  
  axiom to_ref_seq'0_spec : forall self : slice t . ([%#span26] inv'0 self)
   -> ([%#span29] inv'4 (to_ref_seq'0 self))
  && ([%#span28] forall i : int . 0 <= i /\ i < len'0 (to_ref_seq'0 self)
   -> index_logic'0 (to_ref_seq'0 self) i = index_logic'1 self i)
  && ([%#span27] len'0 (to_ref_seq'0 self) = len'1 (shallow_model'0 self))
  
  function shallow_model'1 (self : Iter'0.t_iter t) : slice t
  
  predicate produces'0 (self : Iter'0.t_iter t) (visited : Seq'0.t_seq t) (tl : Iter'0.t_iter t) =
    [%#span30] to_ref_seq'0 (shallow_model'1 self) = concat'0 visited (to_ref_seq'0 (shallow_model'1 tl))
  
  function produces_trans'0 (a : Iter'0.t_iter t) (ab : Seq'0.t_seq t) (b : Iter'0.t_iter t) (bc : Seq'0.t_seq t) (c : Iter'0.t_iter t) : ()
    
   =
    [%#span36] ()
  
  axiom produces_trans'0_spec : forall a : Iter'0.t_iter t, ab : Seq'0.t_seq t, b : Iter'0.t_iter t, bc : Seq'0.t_seq t, c : Iter'0.t_iter t . ([%#span31] produces'0 a ab b)
   -> ([%#span32] produces'0 b bc c)
   -> ([%#span33] inv'4 ab)  -> ([%#span34] inv'4 bc)  -> ([%#span35] produces'0 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq t = [%#span12] ()
  
  function produces_refl'0 (self : Iter'0.t_iter t) : () =
    [%#span38] ()
  
  axiom produces_refl'0_spec : forall self : Iter'0.t_iter t . [%#span37] produces'0 self (empty'0 : Seq'0.t_seq t) self
  
  predicate invariant'1 (self : Iter'0.t_iter t)
  
  predicate inv'1 (_x : Iter'0.t_iter t)
  
  axiom inv'1 : forall x : Iter'0.t_iter t . inv'1 x = true
  
  function empty_len'0 (_1 : ()) : () =
    [%#span14] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span13] len'0 (empty'0 : Seq'0.t_seq t) = 0
  
  predicate invariant'0 (self : slice t)
  
  axiom inv'0 : forall x : slice t . inv'0 x = true
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'6 (self : Iter'0.t_iter t)
  
  predicate resolve'5 (self : t)
  
  use seq.Seq
  
  function singleton'0 (v : t) : Seq'0.t_seq t
  
  axiom singleton'0_spec : forall v : t . ([%#span39] inv'3 v)
   -> ([%#span42] inv'4 (singleton'0 v))
  && ([%#span41] index_logic'0 (singleton'0 v) 0 = v) && ([%#span40] len'0 (singleton'0 v) = 1)
  
  predicate resolve'4 (self : Option'0.t_option t)
  
  predicate resolve'3 (self : borrowed (Iter'0.t_iter t)) =
    [%#span43]  ^ self =  * self
  
  function shallow_model'3 (self : borrowed (Iter'0.t_iter t)) : slice t =
    [%#span44] shallow_model'1 ( * self)
  
  predicate completed'0 (self : borrowed (Iter'0.t_iter t)) =
    [%#span45] resolve'3 self /\ shallow_model'2 (shallow_model'3 self) = (empty'1 : Seq'0.t_seq t)
  
  let rec next'0 (self:borrowed (Iter'0.t_iter t)) (return'  (ret:Option'0.t_option t))= any
    [ return' (result:Option'0.t_option t)-> {[%#span47] inv'2 result}
      {[%#span46] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function deref'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq t)) : Seq'0.t_seq t
  
  function inner'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq t)) : Seq'0.t_seq t
  
  function deref'1 (self : Snapshot'0.t_snapshot (Iter'0.t_iter t)) : Iter'0.t_iter t
  
  function inner'0 (self : Snapshot'0.t_snapshot (Iter'0.t_iter t)) : Iter'0.t_iter t
  
  predicate resolve'2 (self : Snapshot'0.t_snapshot (Seq'0.t_seq t))
  
  function new'1 (x : Seq'0.t_seq t) : Snapshot'0.t_snapshot (Seq'0.t_seq t)
  
  axiom new'1_spec : forall x : Seq'0.t_seq t . ([%#span48] inv'4 x)  -> ([%#span49] deref'0 (new'1 x) = x)
  
  predicate resolve'1 (self : Snapshot'0.t_snapshot (Iter'0.t_iter t))
  
  function new'0 (x : Iter'0.t_iter t) : Snapshot'0.t_snapshot (Iter'0.t_iter t)
  
  axiom new'0_spec : forall x : Iter'0.t_iter t . ([%#span48] inv'1 x)  -> ([%#span49] deref'1 (new'0 x) = x)
  
  predicate into_iter_post'0 (self : Iter'0.t_iter t) (res : Iter'0.t_iter t) =
    [%#span50] self = res
  
  predicate into_iter_pre'0 (self : Iter'0.t_iter t) =
    [%#span51] true
  
  let rec into_iter'0 (self:Iter'0.t_iter t) (return'  (ret:Iter'0.t_iter t))= {[@expl:precondition] [%#span53] inv'1 self}
    {[@expl:precondition] [%#span52] into_iter_pre'0 self}
    any
    [ return' (result:Iter'0.t_iter t)-> {[%#span54] inv'1 result}
      {[%#span52] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec iter'0 (self:slice t) (return'  (ret:Iter'0.t_iter t))= {[@expl:precondition] [%#span55] inv'0 self}
    any [ return' (result:Iter'0.t_iter t)-> {[%#span56] shallow_model'1 result = self} (! return' {result}) ] 
  
  predicate resolve'0 (self : slice t)
  
  let rec slice_iter (slice:slice t) (return'  (ret:usize))= {[%#s03_std_iterators8] inv'0 slice}
    {[%#s03_std_iterators7] len'1 (shallow_model'0 slice) < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &i <- [%#s03_std_iterators0] (0 : usize) ] s1
      | s1 = {[@expl:type invariant] inv'0 slice} s2
      | s2 = -{resolve'0 slice}- s3
      | s3 = iter'0 {slice} (fun (_ret':Iter'0.t_iter t) ->  [ &_7 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = into_iter'0 {_7} (fun (_ret':Iter'0.t_iter t) ->  [ &iter <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#s03_std_iterators1] new'0 iter ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = -{resolve'1 iter_old}- s1
      | s1 =  [ &produced <- [%#s03_std_iterators2] new'1 (empty'0 : Seq'0.t_seq t) ] s2
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 = -{resolve'2 produced}- s1 | s1 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [%#s03_std_iterators4] UIntSize.to_int i = len'0 (deref'0 produced)}
        {[@expl:loop invariant] [%#s03_std_iterators3] produces'0 (inner'0 iter_old) (inner'1 produced) iter}
        {[@expl:loop invariant] [%#s03_std_iterators3] inv'1 iter}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = Borrow.borrow_mut <Iter'0.t_iter t> {iter}
              (fun (_ret':borrowed (Iter'0.t_iter t)) ->  [ &_19 <- _ret' ]  [ &iter <-  ^ _19 ] s1)
          | s1 = Borrow.borrow_final <Iter'0.t_iter t> { * _19} {Borrow.get_id _19}
              (fun (_ret':borrowed (Iter'0.t_iter t)) ->
                 [ &_18 <- _ret' ] 
                 [ &_19 <- { _19 with current = ( ^ _18) ; } ] 
                s2)
          | s2 = next'0 {_18} (fun (_ret':Option'0.t_option t) ->  [ &_17 <- _ret' ] s3)
          | s3 = bb7 ]
          
        | bb7 = s0
          [ s0 = -{resolve'3 _19}- s1
          | s1 = any [ br0 -> {_17 = Option'0.C_None } (! bb10) | br1 (a:t)-> {_17 = Option'0.C_Some a} (! bb9) ]  ]
          
        | bb9 = bb11
        | bb11 = s0
          [ s0 = Option'0.some <t> {_17} (fun (r0'0:t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = {[@expl:type invariant] inv'2 _17} s2
          | s2 = -{resolve'4 _17}- s3
          | s3 = 
            [ &_22 <- [%#s03_std_iterators5] new'1 (concat'0 (inner'1 produced) (singleton'0 __creusot_proc_iter_elem)) ]
            
            s4
          | s4 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &produced <- _22 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq t))-> (!  [ &_22 <- _any ] s1) ] )
          | s1 = -{resolve'2 produced}- s2
          | s2 = {[@expl:type invariant] inv'3 __creusot_proc_iter_elem} s3
          | s3 = -{resolve'5 __creusot_proc_iter_elem}- s4
          | s4 = UIntSize.add {i} {[%#s03_std_iterators6] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s5)
          | s5 = bb5 ]
           ]
         ]
      
    | bb8 = s0
      [ s0 = -{resolve'6 iter}- s1
      | s1 = {[@expl:type invariant] inv'2 _17} s2
      | s2 = -{resolve'4 _17}- s3
      | s3 = {[%#s03_std_iterators3] false} any ]
      
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv'2 _17} s1
      | s1 = -{resolve'4 _17}- s2
      | s2 = -{resolve'6 iter}- s3
      | s3 =  [ &_0 <- i ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : usize = any_l ()
    | & slice : slice t = slice
    | & i : usize = any_l ()
    | & iter : Iter'0.t_iter t = any_l ()
    | & _7 : Iter'0.t_iter t = any_l ()
    | & iter_old : Snapshot'0.t_snapshot (Iter'0.t_iter t) = any_l ()
    | & produced : Snapshot'0.t_snapshot (Seq'0.t_seq t) = any_l ()
    | & _17 : Option'0.t_option t = any_l ()
    | & _18 : borrowed (Iter'0.t_iter t) = any_l ()
    | & _19 : borrowed (Iter'0.t_iter t) = any_l ()
    | & __creusot_proc_iter_elem : t = any_l ()
    | & _22 : Snapshot'0.t_snapshot (Seq'0.t_seq t) = any_l () ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [%#s03_std_iterators9] UIntSize.to_int result
      = len'1 (shallow_model'0 slice)}
      (! return' {result}) ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C03StdIterators_VecIter
  type t
  
  let%span s03_std_iterators0 = "../03_std_iterators.rs" 18 16 18 17
  
  let%span s03_std_iterators1 = "../03_std_iterators.rs" 19 4 19 38
  
  let%span s03_std_iterators2 = "../03_std_iterators.rs" 19 4 19 38
  
  let%span s03_std_iterators3 = "../03_std_iterators.rs" 19 4 19 38
  
  let%span s03_std_iterators4 = "../03_std_iterators.rs" 19 16 19 36
  
  let%span s03_std_iterators5 = "../03_std_iterators.rs" 19 4 19 38
  
  let%span s03_std_iterators6 = "../03_std_iterators.rs" 21 13 21 14
  
  let%span s03_std_iterators7 = "../03_std_iterators.rs" 15 11 15 28
  
  let%span s03_std_iterators8 = "../03_std_iterators.rs" 17 19 17 22
  
  let%span s03_std_iterators9 = "../03_std_iterators.rs" 16 10 16 31
  
  let%span span10 = "" 0 0 0 0
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span14 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span15 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span16 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span18 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span19 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span20 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span21 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span22 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span23 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span24 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span25 = "../../../../../creusot-contracts/src/std/slice.rs" 18 21 18 25
  
  let%span span26 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span27 = "../../../../../creusot-contracts/src/std/slice.rs" 18 4 18 50
  
  let%span span28 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span29 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span30 = "../../../../../creusot-contracts/src/std/slice.rs" 76 19 76 23
  
  let%span span31 = "../../../../../creusot-contracts/src/std/slice.rs" 74 14 74 41
  
  let%span span32 = "../../../../../creusot-contracts/src/std/slice.rs" 75 4 75 82
  
  let%span span33 = "../../../../../creusot-contracts/src/std/slice.rs" 76 4 76 35
  
  let%span span34 = "../../../../../creusot-contracts/src/std/slice.rs" 384 12 384 66
  
  let%span span35 = "../../../../../creusot-contracts/src/std/slice.rs" 395 15 395 32
  
  let%span span36 = "../../../../../creusot-contracts/src/std/slice.rs" 396 15 396 32
  
  let%span span37 = "../../../../../creusot-contracts/src/std/slice.rs" 398 31 398 33
  
  let%span span38 = "../../../../../creusot-contracts/src/std/slice.rs" 398 61 398 63
  
  let%span span39 = "../../../../../creusot-contracts/src/std/slice.rs" 397 14 397 42
  
  let%span span40 = "../../../../../creusot-contracts/src/std/slice.rs" 393 4 393 10
  
  let%span span41 = "../../../../../creusot-contracts/src/std/slice.rs" 390 14 390 45
  
  let%span span42 = "../../../../../creusot-contracts/src/std/slice.rs" 388 4 388 10
  
  let%span span43 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span44 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span45 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span46 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span47 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span48 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span49 = "../../../../../creusot-contracts/src/std/slice.rs" 377 20 377 61
  
  let%span span50 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span51 = "" 0 0 0 0
  
  let%span span52 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span53 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span54 = "../../../../../creusot-contracts/src/std/vec.rs" 205 20 205 34
  
  let%span span55 = "../../../../../creusot-contracts/src/std/vec.rs" 199 20 199 24
  
  let%span span56 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span57 = "" 0 0 0 0
  
  use prelude.prelude.Slice
  
  predicate invariant'8 (self : slice t)
  
  predicate inv'8 (_x : slice t)
  
  axiom inv'8 : forall x : slice t . inv'8 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate inv'5 (_x : Seq'0.t_seq t)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span10] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'1 (self : Seq'0.t_seq t) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq t . ([%#span11] inv'5 self)  -> ([%#span12] len'1 self >= 0)
  
  predicate inv'7 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq'0.t_seq t
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span13] inv'7 self)
   -> ([%#span15] inv'5 (shallow_model'2 self))
  && ([%#span14] len'1 (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'7 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span16] inv'5 (shallow_model'2 self)
  
  axiom inv'7 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'7 x = true
  
  predicate invariant'6 (self : slice t)
  
  predicate inv'6 (_x : slice t)
  
  axiom inv'6 : forall x : slice t . inv'6 x = true
  
  predicate invariant'5 (self : Seq'0.t_seq t)
  
  axiom inv'5 : forall x : Seq'0.t_seq t . inv'5 x = true
  
  predicate invariant'4 (self : Seq'0.t_seq t)
  
  predicate inv'4 (_x : Seq'0.t_seq t)
  
  axiom inv'4 : forall x : Seq'0.t_seq t . inv'4 x = true
  
  constant empty'1 : Seq'0.t_seq t = [%#span17] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span19] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span18] len'1 (empty'1 : Seq'0.t_seq t) = 0
  
  predicate invariant'3 (self : t)
  
  predicate inv'3 (_x : t)
  
  axiom inv'3 : forall x : t . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : Option'0.t_option t)
  
  predicate inv'2 (_x : Option'0.t_option t)
  
  axiom inv'2 : forall x : Option'0.t_option t . inv'2 x = true
  
  use prelude.prelude.Borrow
  
  use Core_Slice_Iter_Iter_Type as Iter'0
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq t) (x : int) : t
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq t) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq t . ([%#span11] inv'4 self)  -> ([%#span12] len'0 self >= 0)
  
  function concat'0 (self : Seq'0.t_seq t) (other : Seq'0.t_seq t) : Seq'0.t_seq t
  
  axiom concat'0_spec : forall self : Seq'0.t_seq t, other : Seq'0.t_seq t . ([%#span20] inv'4 self)
   -> ([%#span21] inv'4 other)
   -> ([%#span24] inv'4 (concat'0 self other))
  && ([%#span23] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span22] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  use seq.Seq
  
  function index_logic'2 (self : Seq'0.t_seq t) (x : int) : t
  
  function shallow_model'5 (self : slice t) : Seq'0.t_seq t
  
  axiom shallow_model'5_spec : forall self : slice t . ([%#span25] inv'8 self)
   -> ([%#span27] inv'5 (shallow_model'5 self))
  && ([%#span26] len'1 (shallow_model'5 self) <= UIntSize.to_int (max'0 : usize))
  
  function index_logic'1 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#span28] index_logic'2 (shallow_model'5 self) ix
  
  function shallow_model'3 (self : slice t) : Seq'0.t_seq t =
    [%#span29] shallow_model'5 self
  
  function to_ref_seq'0 (self : slice t) : Seq'0.t_seq t
  
  axiom to_ref_seq'0_spec : forall self : slice t . ([%#span30] inv'6 self)
   -> ([%#span33] inv'4 (to_ref_seq'0 self))
  && ([%#span32] forall i : int . 0 <= i /\ i < len'0 (to_ref_seq'0 self)
   -> index_logic'0 (to_ref_seq'0 self) i = index_logic'1 self i)
  && ([%#span31] len'0 (to_ref_seq'0 self) = len'1 (shallow_model'3 self))
  
  function shallow_model'1 (self : Iter'0.t_iter t) : slice t
  
  predicate produces'0 (self : Iter'0.t_iter t) (visited : Seq'0.t_seq t) (tl : Iter'0.t_iter t) =
    [%#span34] to_ref_seq'0 (shallow_model'1 self) = concat'0 visited (to_ref_seq'0 (shallow_model'1 tl))
  
  function produces_trans'0 (a : Iter'0.t_iter t) (ab : Seq'0.t_seq t) (b : Iter'0.t_iter t) (bc : Seq'0.t_seq t) (c : Iter'0.t_iter t) : ()
    
   =
    [%#span40] ()
  
  axiom produces_trans'0_spec : forall a : Iter'0.t_iter t, ab : Seq'0.t_seq t, b : Iter'0.t_iter t, bc : Seq'0.t_seq t, c : Iter'0.t_iter t . ([%#span35] produces'0 a ab b)
   -> ([%#span36] produces'0 b bc c)
   -> ([%#span37] inv'4 ab)  -> ([%#span38] inv'4 bc)  -> ([%#span39] produces'0 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq t = [%#span17] ()
  
  function produces_refl'0 (self : Iter'0.t_iter t) : () =
    [%#span42] ()
  
  axiom produces_refl'0_spec : forall self : Iter'0.t_iter t . [%#span41] produces'0 self (empty'0 : Seq'0.t_seq t) self
  
  predicate invariant'1 (self : Iter'0.t_iter t)
  
  predicate inv'1 (_x : Iter'0.t_iter t)
  
  axiom inv'1 : forall x : Iter'0.t_iter t . inv'1 x = true
  
  function empty_len'0 (_1 : ()) : () =
    [%#span19] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span18] len'0 (empty'0 : Seq'0.t_seq t) = 0
  
  predicate invariant'0 (self : Vec'0.t_vec t (Global'0.t_global))
  
  predicate inv'0 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  axiom inv'0 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'0 x = true
  
  function shallow_model'0 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq'0.t_seq t =
    [%#span29] shallow_model'2 self
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'6 (self : Iter'0.t_iter t)
  
  predicate resolve'5 (self : t)
  
  use seq.Seq
  
  function singleton'0 (v : t) : Seq'0.t_seq t
  
  axiom singleton'0_spec : forall v : t . ([%#span43] inv'3 v)
   -> ([%#span46] inv'4 (singleton'0 v))
  && ([%#span45] index_logic'0 (singleton'0 v) 0 = v) && ([%#span44] len'0 (singleton'0 v) = 1)
  
  predicate resolve'4 (self : Option'0.t_option t)
  
  predicate resolve'3 (self : borrowed (Iter'0.t_iter t)) =
    [%#span47]  ^ self =  * self
  
  function shallow_model'4 (self : borrowed (Iter'0.t_iter t)) : slice t =
    [%#span48] shallow_model'1 ( * self)
  
  predicate completed'0 (self : borrowed (Iter'0.t_iter t)) =
    [%#span49] resolve'3 self /\ shallow_model'5 (shallow_model'4 self) = (empty'1 : Seq'0.t_seq t)
  
  let rec next'0 (self:borrowed (Iter'0.t_iter t)) (return'  (ret:Option'0.t_option t))= any
    [ return' (result:Option'0.t_option t)-> {[%#span51] inv'2 result}
      {[%#span50] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function deref'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq t)) : Seq'0.t_seq t
  
  function inner'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq t)) : Seq'0.t_seq t
  
  function deref'1 (self : Snapshot'0.t_snapshot (Iter'0.t_iter t)) : Iter'0.t_iter t
  
  function inner'0 (self : Snapshot'0.t_snapshot (Iter'0.t_iter t)) : Iter'0.t_iter t
  
  predicate resolve'2 (self : Snapshot'0.t_snapshot (Seq'0.t_seq t))
  
  function new'1 (x : Seq'0.t_seq t) : Snapshot'0.t_snapshot (Seq'0.t_seq t)
  
  axiom new'1_spec : forall x : Seq'0.t_seq t . ([%#span52] inv'4 x)  -> ([%#span53] deref'0 (new'1 x) = x)
  
  predicate resolve'1 (self : Snapshot'0.t_snapshot (Iter'0.t_iter t))
  
  function new'0 (x : Iter'0.t_iter t) : Snapshot'0.t_snapshot (Iter'0.t_iter t)
  
  axiom new'0_spec : forall x : Iter'0.t_iter t . ([%#span52] inv'1 x)  -> ([%#span53] deref'1 (new'0 x) = x)
  
  predicate into_iter_post'0 (self : Vec'0.t_vec t (Global'0.t_global)) (res : Iter'0.t_iter t) =
    [%#span54] shallow_model'0 self = shallow_model'3 (shallow_model'1 res)
  
  predicate into_iter_pre'0 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span55] true
  
  let rec into_iter'0 (self:Vec'0.t_vec t (Global'0.t_global)) (return'  (ret:Iter'0.t_iter t))= {[@expl:precondition] [%#span57] inv'0 self}
    {[@expl:precondition] [%#span56] into_iter_pre'0 self}
    any [ return' (result:Iter'0.t_iter t)-> {[%#span56] into_iter_post'0 self result} (! return' {result}) ] 
  
  predicate resolve'0 (self : Vec'0.t_vec t (Global'0.t_global))
  
  let rec vec_iter (vec:Vec'0.t_vec t (Global'0.t_global)) (return'  (ret:usize))= {[%#s03_std_iterators8] inv'0 vec}
    {[%#s03_std_iterators7] len'1 (shallow_model'0 vec) < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &i <- [%#s03_std_iterators0] (0 : usize) ] s1
      | s1 = {[@expl:type invariant] inv'0 vec} s2
      | s2 = -{resolve'0 vec}- s3
      | s3 = into_iter'0 {vec} (fun (_ret':Iter'0.t_iter t) ->  [ &iter <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#s03_std_iterators1] new'0 iter ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = -{resolve'1 iter_old}- s1
      | s1 =  [ &produced <- [%#s03_std_iterators2] new'1 (empty'0 : Seq'0.t_seq t) ] s2
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = -{resolve'2 produced}- s1 | s1 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [%#s03_std_iterators4] UIntSize.to_int i = len'0 (deref'0 produced)}
        {[@expl:loop invariant] [%#s03_std_iterators3] produces'0 (inner'0 iter_old) (inner'1 produced) iter}
        {[@expl:loop invariant] [%#s03_std_iterators3] inv'1 iter}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Iter'0.t_iter t> {iter}
              (fun (_ret':borrowed (Iter'0.t_iter t)) ->  [ &_18 <- _ret' ]  [ &iter <-  ^ _18 ] s1)
          | s1 = Borrow.borrow_final <Iter'0.t_iter t> { * _18} {Borrow.get_id _18}
              (fun (_ret':borrowed (Iter'0.t_iter t)) ->
                 [ &_17 <- _ret' ] 
                 [ &_18 <- { _18 with current = ( ^ _17) ; } ] 
                s2)
          | s2 = next'0 {_17} (fun (_ret':Option'0.t_option t) ->  [ &_16 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'3 _18}- s1
          | s1 = any [ br0 -> {_16 = Option'0.C_None } (! bb9) | br1 (a:t)-> {_16 = Option'0.C_Some a} (! bb8) ]  ]
          
        | bb8 = bb10
        | bb10 = s0
          [ s0 = Option'0.some <t> {_16} (fun (r0'0:t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = {[@expl:type invariant] inv'2 _16} s2
          | s2 = -{resolve'4 _16}- s3
          | s3 = 
            [ &_21 <- [%#s03_std_iterators5] new'1 (concat'0 (inner'1 produced) (singleton'0 __creusot_proc_iter_elem)) ]
            
            s4
          | s4 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _21 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq t))-> (!  [ &_21 <- _any ] s1) ] )
          | s1 = -{resolve'2 produced}- s2
          | s2 = {[@expl:type invariant] inv'3 __creusot_proc_iter_elem} s3
          | s3 = -{resolve'5 __creusot_proc_iter_elem}- s4
          | s4 = UIntSize.add {i} {[%#s03_std_iterators6] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s5)
          | s5 = bb4 ]
           ]
         ]
      
    | bb7 = s0
      [ s0 = -{resolve'6 iter}- s1
      | s1 = {[@expl:type invariant] inv'2 _16} s2
      | s2 = -{resolve'4 _16}- s3
      | s3 = {[%#s03_std_iterators3] false} any ]
      
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'2 _16} s1
      | s1 = -{resolve'4 _16}- s2
      | s2 = -{resolve'6 iter}- s3
      | s3 =  [ &_0 <- i ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : usize = any_l ()
    | & vec : Vec'0.t_vec t (Global'0.t_global) = vec
    | & i : usize = any_l ()
    | & iter : Iter'0.t_iter t = any_l ()
    | & iter_old : Snapshot'0.t_snapshot (Iter'0.t_iter t) = any_l ()
    | & produced : Snapshot'0.t_snapshot (Seq'0.t_seq t) = any_l ()
    | & _16 : Option'0.t_option t = any_l ()
    | & _17 : borrowed (Iter'0.t_iter t) = any_l ()
    | & _18 : borrowed (Iter'0.t_iter t) = any_l ()
    | & __creusot_proc_iter_elem : t = any_l ()
    | & _21 : Snapshot'0.t_snapshot (Seq'0.t_seq t) = any_l () ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [%#s03_std_iterators9] UIntSize.to_int result
      = len'1 (shallow_model'0 vec)}
      (! return' {result}) ]
    
end
module Core_Slice_Iter_IterMut_Type
  use prelude.prelude.Borrow
  
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use prelude.prelude.Opaque
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_itermut 't =
    | C_IterMut (NonNull'0.t_nonnull 't) opaque_ptr (PhantomData'0.t_phantomdata (borrowed 't))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_itermut < 't > (input:t_itermut 't) (ret  (ptr:NonNull'0.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_phantomdata (borrowed 't)))= any
    [ good (ptr:NonNull'0.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_phantomdata (borrowed 't))-> {C_IterMut ptr end_or_len _marker
      = input}
      (! ret {ptr} {end_or_len} {_marker})
    | bad (ptr:NonNull'0.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_phantomdata (borrowed 't))-> {C_IterMut ptr end_or_len _marker
      <> input}
      {false}
      any ]
    
end
module C03StdIterators_AllZero
  let%span s03_std_iterators0 = "../03_std_iterators.rs" 29 4 29 87
  
  let%span s03_std_iterators1 = "../03_std_iterators.rs" 29 4 29 87
  
  let%span s03_std_iterators2 = "../03_std_iterators.rs" 29 4 29 87
  
  let%span s03_std_iterators3 = "../03_std_iterators.rs" 29 4 29 87
  
  let%span s03_std_iterators4 = "../03_std_iterators.rs" 31 13 31 14
  
  let%span s03_std_iterators5 = "../03_std_iterators.rs" 26 10 26 33
  
  let%span s03_std_iterators6 = "../03_std_iterators.rs" 27 0 27 66
  
  let%span span7 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span8 = "" 0 0 0 0
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span11 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span12 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span14 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span18 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span19 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span20 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span21 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span22 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span23 = "../../../../../creusot-contracts/src/std/slice.rs" 18 21 18 25
  
  let%span span24 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span25 = "../../../../../creusot-contracts/src/std/slice.rs" 18 4 18 50
  
  let%span span26 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span27 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span28 = "../../../../../creusot-contracts/src/std/slice.rs" 67 23 67 27
  
  let%span span29 = "../../../../../creusot-contracts/src/std/slice.rs" 64 14 64 41
  
  let%span span30 = "../../../../../creusot-contracts/src/std/slice.rs" 65 4 65 82
  
  let%span span31 = "../../../../../creusot-contracts/src/std/slice.rs" 66 4 66 85
  
  let%span span32 = "../../../../../creusot-contracts/src/std/slice.rs" 67 4 67 43
  
  let%span span33 = "../../../../../creusot-contracts/src/std/slice.rs" 407 14 407 50
  
  let%span span34 = "../../../../../creusot-contracts/src/std/slice.rs" 408 4 408 50
  
  let%span span35 = "../../../../../creusot-contracts/src/std/slice.rs" 433 12 433 66
  
  let%span span36 = "../../../../../creusot-contracts/src/std/slice.rs" 444 15 444 32
  
  let%span span37 = "../../../../../creusot-contracts/src/std/slice.rs" 445 15 445 32
  
  let%span span38 = "../../../../../creusot-contracts/src/std/slice.rs" 447 31 447 33
  
  let%span span39 = "../../../../../creusot-contracts/src/std/slice.rs" 447 61 447 63
  
  let%span span40 = "../../../../../creusot-contracts/src/std/slice.rs" 446 14 446 42
  
  let%span span41 = "../../../../../creusot-contracts/src/std/slice.rs" 442 4 442 10
  
  let%span span42 = "../../../../../creusot-contracts/src/std/slice.rs" 439 14 439 45
  
  let%span span43 = "../../../../../creusot-contracts/src/std/slice.rs" 437 4 437 10
  
  let%span span44 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span45 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span46 = "../../../../../creusot-contracts/src/std/slice.rs" 418 20 418 36
  
  let%span span47 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span48 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span49 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span50 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span51 = "../../../../../creusot-contracts/src/std/slice.rs" 426 20 426 61
  
  let%span span52 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span53 = "" 0 0 0 0
  
  let%span span54 = "../../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33
  
  let%span span55 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span56 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span57 = "../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span58 = "../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span59 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span60 = "" 0 0 0 0
  
  let%span span61 = "" 0 0 0 0
  
  let%span span62 = "" 0 0 0 0
  
  let%span span63 = "../../../../../creusot-contracts/src/std/slice.rs" 223 0 332 1
  
  let%span span64 = "" 0 0 0 0
  
  let%span span65 = "../../../../../creusot-contracts/src/std/vec.rs" 169 26 169 42
  
  let%span span66 = "../../../../../creusot-contracts/src/std/vec.rs" 170 26 170 48
  
  let%span span67 = "" 0 0 0 0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Slice
  
  predicate invariant'8 (self : slice usize) =
    [%#span7] true
  
  predicate inv'8 (_x : slice usize)
  
  axiom inv'8 : forall x : slice usize . inv'8 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'7 (self : Seq'0.t_seq usize) =
    [%#span7] true
  
  predicate inv'7 (_x : Seq'0.t_seq usize)
  
  axiom inv'7 : forall x : Seq'0.t_seq usize . inv'7 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span8] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'1 (self : Seq'0.t_seq usize) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq usize . ([%#span9] inv'7 self)  -> ([%#span10] len'1 self >= 0)
  
  predicate inv'6 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq'0.t_seq usize
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span11] inv'6 self)
   -> ([%#span13] inv'7 (shallow_model'0 self))
  && ([%#span12] len'1 (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'6 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span14] inv'7 (shallow_model'0 self)
  
  axiom inv'6 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'6 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'5 (self : borrowed usize) =
    [%#span7] true
  
  predicate inv'5 (_x : borrowed usize)
  
  axiom inv'5 : forall x : borrowed usize . inv'5 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'4 (self : Option'0.t_option (borrowed usize)) =
    [%#span7] true
  
  predicate inv'4 (_x : Option'0.t_option (borrowed usize))
  
  axiom inv'4 : forall x : Option'0.t_option (borrowed usize) . inv'4 x = true
  
  predicate invariant'3 (self : Seq'0.t_seq (borrowed usize)) =
    [%#span7] true
  
  predicate inv'3 (_x : Seq'0.t_seq (borrowed usize))
  
  axiom inv'3 : forall x : Seq'0.t_seq (borrowed usize) . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (slice usize)) =
    [%#span7] true
  
  predicate inv'2 (_x : borrowed (slice usize))
  
  axiom inv'2 : forall x : borrowed (slice usize) . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span7] true
  
  predicate inv'1 (_x : borrowed (Vec'0.t_vec usize (Global'0.t_global)))
  
  axiom inv'1 : forall x : borrowed (Vec'0.t_vec usize (Global'0.t_global)) . inv'1 x = true
  
  constant empty'1 : Seq'0.t_seq usize = [%#span15] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span17] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span16] len'1 (empty'1 : Seq'0.t_seq usize) = 0
  
  use Core_Slice_Iter_IterMut_Type as IterMut'0
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'2 (self : Seq'0.t_seq (borrowed usize)) (x : int) : borrowed usize
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq (borrowed usize)) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq (borrowed usize) . ([%#span9] inv'3 self)
   -> ([%#span10] len'0 self >= 0)
  
  function concat'0 (self : Seq'0.t_seq (borrowed usize)) (other : Seq'0.t_seq (borrowed usize)) : Seq'0.t_seq (borrowed usize)
    
  
  axiom concat'0_spec : forall self : Seq'0.t_seq (borrowed usize), other : Seq'0.t_seq (borrowed usize) . ([%#span18] inv'3 self)
   -> ([%#span19] inv'3 other)
   -> ([%#span22] inv'3 (concat'0 self other))
  && ([%#span21] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'2 (concat'0 self other) i
  = (if i < len'0 self then index_logic'2 self i else index_logic'2 other (i - len'0 self)))
  && ([%#span20] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  use seq.Seq
  
  function index_logic'3 (self : Seq'0.t_seq usize) (x : int) : usize
  
  function shallow_model'3 (self : slice usize) : Seq'0.t_seq usize
  
  axiom shallow_model'3_spec : forall self : slice usize . ([%#span23] inv'8 self)
   -> ([%#span25] inv'7 (shallow_model'3 self))
  && ([%#span24] len'1 (shallow_model'3 self) <= UIntSize.to_int (max'0 : usize))
  
  function index_logic'4 [@inline:trivial] (self : slice usize) (ix : int) : usize =
    [%#span26] index_logic'3 (shallow_model'3 self) ix
  
  function shallow_model'2 (self : borrowed (slice usize)) : Seq'0.t_seq usize =
    [%#span27] shallow_model'3 ( * self)
  
  function to_mut_seq'0 (self : borrowed (slice usize)) : Seq'0.t_seq (borrowed usize)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice usize) . ([%#span28] inv'2 self)
   -> ([%#span32] inv'3 (to_mut_seq'0 self))
  && ([%#span31] forall i : int . 0 <= i /\ i < len'0 (to_mut_seq'0 self)
   ->  ^ index_logic'2 (to_mut_seq'0 self) i = index_logic'4 ( ^ self) i)
  && ([%#span30] forall i : int . 0 <= i /\ i < len'0 (to_mut_seq'0 self)
   ->  * index_logic'2 (to_mut_seq'0 self) i = index_logic'4 ( * self) i)
  && ([%#span29] len'0 (to_mut_seq'0 self) = len'1 (shallow_model'2 self))
  
  function shallow_model'4 (self : IterMut'0.t_itermut usize) : borrowed (slice usize)
  
  axiom shallow_model'4_spec : forall self : IterMut'0.t_itermut usize . ([%#span34] inv'2 (shallow_model'4 self))
  && ([%#span33] len'1 (shallow_model'3 ( ^ shallow_model'4 self)) = len'1 (shallow_model'3 ( * shallow_model'4 self)))
  
  predicate produces'0 (self : IterMut'0.t_itermut usize) (visited : Seq'0.t_seq (borrowed usize)) (tl : IterMut'0.t_itermut usize)
    
   =
    [%#span35] to_mut_seq'0 (shallow_model'4 self) = concat'0 visited (to_mut_seq'0 (shallow_model'4 tl))
  
  function produces_trans'0 (a : IterMut'0.t_itermut usize) (ab : Seq'0.t_seq (borrowed usize)) (b : IterMut'0.t_itermut usize) (bc : Seq'0.t_seq (borrowed usize)) (c : IterMut'0.t_itermut usize) : ()
    
   =
    [%#span41] ()
  
  axiom produces_trans'0_spec : forall a : IterMut'0.t_itermut usize, ab : Seq'0.t_seq (borrowed usize), b : IterMut'0.t_itermut usize, bc : Seq'0.t_seq (borrowed usize), c : IterMut'0.t_itermut usize . ([%#span36] produces'0 a ab b)
   -> ([%#span37] produces'0 b bc c)
   -> ([%#span38] inv'3 ab)  -> ([%#span39] inv'3 bc)  -> ([%#span40] produces'0 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq (borrowed usize) = [%#span15] ()
  
  function produces_refl'0 (self : IterMut'0.t_itermut usize) : () =
    [%#span43] ()
  
  axiom produces_refl'0_spec : forall self : IterMut'0.t_itermut usize . [%#span42] produces'0 self (empty'0 : Seq'0.t_seq (borrowed usize)) self
  
  predicate invariant'0 (self : IterMut'0.t_itermut usize) =
    [%#span7] true
  
  predicate inv'0 (_x : IterMut'0.t_itermut usize)
  
  axiom inv'0 : forall x : IterMut'0.t_itermut usize . inv'0 x = true
  
  function empty_len'0 (_1 : ()) : () =
    [%#span17] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span16] len'0 (empty'0 : Seq'0.t_seq (borrowed usize)) = 0
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : int) : usize =
    [%#span44] index_logic'3 (shallow_model'0 self) ix
  
  function shallow_model'1 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) : Seq'0.t_seq usize =
    [%#span27] shallow_model'0 ( * self)
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'4 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span45]  ^ self =  * self
  
  predicate resolve'3 (self : IterMut'0.t_itermut usize) =
    [%#span46]  * shallow_model'4 self =  ^ shallow_model'4 self
  
  predicate resolve'2 (self : borrowed usize) =
    [%#span45]  ^ self =  * self
  
  use seq.Seq
  
  function singleton'0 (v : borrowed usize) : Seq'0.t_seq (borrowed usize)
  
  axiom singleton'0_spec : forall v : borrowed usize . ([%#span47] inv'5 v)
   -> ([%#span50] inv'3 (singleton'0 v))
  && ([%#span49] index_logic'2 (singleton'0 v) 0 = v) && ([%#span48] len'0 (singleton'0 v) = 1)
  
  predicate resolve'1 (self : borrowed (IterMut'0.t_itermut usize)) =
    [%#span45]  ^ self =  * self
  
  function shallow_model'5 (self : borrowed (IterMut'0.t_itermut usize)) : borrowed (slice usize) =
    [%#span27] shallow_model'4 ( * self)
  
  predicate completed'0 (self : borrowed (IterMut'0.t_itermut usize)) =
    [%#span51] resolve'1 self /\ shallow_model'3 ( * shallow_model'5 self) = (empty'1 : Seq'0.t_seq usize)
  
  let rec next'0 (self:borrowed (IterMut'0.t_itermut usize)) (return'  (ret:Option'0.t_option (borrowed usize)))= any
    [ return' (result:Option'0.t_option (borrowed usize))-> {[%#span53] inv'4 result}
      {[%#span52] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function deref'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq (borrowed usize))) : Seq'0.t_seq (borrowed usize)
  
  function index_logic'0 [@inline:trivial] (self : Snapshot'0.t_snapshot (Seq'0.t_seq (borrowed usize))) (ix : int) : borrowed usize
    
   =
    [%#span54] index_logic'2 (deref'0 self) ix
  
  function inner'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq (borrowed usize))) : Seq'0.t_seq (borrowed usize)
  
  function deref'1 (self : Snapshot'0.t_snapshot (IterMut'0.t_itermut usize)) : IterMut'0.t_itermut usize
  
  function inner'0 (self : Snapshot'0.t_snapshot (IterMut'0.t_itermut usize)) : IterMut'0.t_itermut usize
  
  function new'1 (x : Seq'0.t_seq (borrowed usize)) : Snapshot'0.t_snapshot (Seq'0.t_seq (borrowed usize))
  
  axiom new'1_spec : forall x : Seq'0.t_seq (borrowed usize) . ([%#span55] inv'3 x)
   -> ([%#span56] deref'0 (new'1 x) = x)
  
  function new'0 (x : IterMut'0.t_itermut usize) : Snapshot'0.t_snapshot (IterMut'0.t_itermut usize)
  
  axiom new'0_spec : forall x : IterMut'0.t_itermut usize . ([%#span55] inv'0 x)  -> ([%#span56] deref'1 (new'0 x) = x)
  
  predicate resolve'0 (self : borrowed (slice usize)) =
    [%#span45]  ^ self =  * self
  
  predicate into_iter_post'0 (self : IterMut'0.t_itermut usize) (res : IterMut'0.t_itermut usize) =
    [%#span57] self = res
  
  predicate into_iter_pre'0 (self : IterMut'0.t_itermut usize) =
    [%#span58] true
  
  let rec into_iter'0 (self:IterMut'0.t_itermut usize) (return'  (ret:IterMut'0.t_itermut usize))= {[@expl:precondition] [%#span60] inv'0 self}
    {[@expl:precondition] [%#span59] into_iter_pre'0 self}
    any
    [ return' (result:IterMut'0.t_itermut usize)-> {[%#span61] inv'0 result}
      {[%#span59] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec iter_mut'0 (self:borrowed (slice usize)) (return'  (ret:IterMut'0.t_itermut usize))= {[@expl:precondition] [%#span62] inv'2 self}
    any
    [ return' (result:IterMut'0.t_itermut usize)-> {[%#span63] shallow_model'4 result = self} (! return' {result}) ]
    
  
  let rec deref_mut'0 (self:borrowed (Vec'0.t_vec usize (Global'0.t_global))) (return'  (ret:borrowed (slice usize)))= {[@expl:precondition] [%#span64] inv'1 self}
    any
    [ return' (result:borrowed (slice usize))-> {[%#span67] inv'2 result}
      {[%#span66] shallow_model'3 ( ^ result) = shallow_model'0 ( ^ self)}
      {[%#span65] shallow_model'2 result = shallow_model'1 self}
      (! return' {result}) ]
    
  
  let rec all_zero (v:borrowed (Vec'0.t_vec usize (Global'0.t_global))) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <Vec'0.t_vec usize (Global'0.t_global)> { * v} {Borrow.get_id v}
          (fun (_ret':borrowed (Vec'0.t_vec usize (Global'0.t_global))) ->
             [ &_8 <- _ret' ] 
             [ &v <- { v with current = ( ^ _8) ; } ] 
            s1)
      | s1 = deref_mut'0 {_8} (fun (_ret':borrowed (slice usize)) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <slice usize> { * _7} {Borrow.get_id _7}
          (fun (_ret':borrowed (slice usize)) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = ( ^ _6) ; } ] s1)
      | s1 = iter_mut'0 {_6} (fun (_ret':IterMut'0.t_itermut usize) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 = into_iter'0 {_5} (fun (_ret':IterMut'0.t_itermut usize) ->  [ &iter <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = -{resolve'0 _7}- s1 | s1 =  [ &iter_old <- [%#s03_std_iterators0] new'0 iter ] s2 | s2 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &produced <- [%#s03_std_iterators1] new'1 (empty'0 : Seq'0.t_seq (borrowed usize)) ] s1 | s1 = bb5 ]
      
    | bb5 = bb6
    | bb6 = bb6
      [ bb6 = {[@expl:loop invariant] [%#s03_std_iterators2] forall i : int . 0 <= i /\ i < len'0 (deref'0 produced)
         -> UIntSize.to_int ( ^ index_logic'0 produced i) = 0}
        {[@expl:loop invariant] [%#s03_std_iterators2] produces'0 (inner'0 iter_old) (inner'1 produced) iter}
        {[@expl:loop invariant] [%#s03_std_iterators2] inv'0 iter}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = Borrow.borrow_mut <IterMut'0.t_itermut usize> {iter}
              (fun (_ret':borrowed (IterMut'0.t_itermut usize)) ->  [ &_19 <- _ret' ]  [ &iter <-  ^ _19 ] s1)
          | s1 = Borrow.borrow_final <IterMut'0.t_itermut usize> { * _19} {Borrow.get_id _19}
              (fun (_ret':borrowed (IterMut'0.t_itermut usize)) ->
                 [ &_18 <- _ret' ] 
                 [ &_19 <- { _19 with current = ( ^ _18) ; } ] 
                s2)
          | s2 = next'0 {_18} (fun (_ret':Option'0.t_option (borrowed usize)) ->  [ &_17 <- _ret' ] s3)
          | s3 = bb8 ]
          
        | bb8 = s0
          [ s0 = -{resolve'1 _19}- s1
          | s1 = any
            [ br0 -> {_17 = Option'0.C_None } (! bb11) | br1 (a:borrowed usize)-> {_17 = Option'0.C_Some a} (! bb10) ]
             ]
          
        | bb10 = bb12
        | bb12 = s0
          [ s0 = Option'0.some <borrowed usize> {_17}
              (fun (r0'0:borrowed usize) ->
                 [ &__creusot_proc_iter_elem <- r0'0 ] 
                (any
                [ any_ (_any:borrowed usize)-> (! Option'0.some <borrowed usize> {_17}
                    (fun (l_0'0:borrowed usize) ->  [ &_17 <- Option'0.C_Some _any ] s1)) ]
                ))
          | s1 = 
            [ &_22 <- [%#s03_std_iterators3] new'1 (concat'0 (inner'1 produced) (singleton'0 __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb13 ]
          
        | bb13 = s0
          [ s0 =  [ &produced <- _22 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq (borrowed usize)))-> (!  [ &_22 <- _any ] s1) ] )
          | s1 =  [ &x <- __creusot_proc_iter_elem ] 
            (any [ any_ (_any:borrowed usize)-> (!  [ &__creusot_proc_iter_elem <- _any ] s2) ] )
          | s2 =  [ &x <- { x with current = ([%#s03_std_iterators4] (0 : usize)) ; } ] s3
          | s3 = -{resolve'2 x}- s4
          | s4 = bb6 ]
           ]
         ]
      
    | bb9 = s0 [ s0 = -{resolve'3 iter}- s1 | s1 = -{resolve'4 v}- s2 | s2 = {[%#s03_std_iterators2] false} any ] 
    | bb11 = s0 [ s0 = -{resolve'3 iter}- s1 | s1 = -{resolve'4 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_vec usize (Global'0.t_global)) = v
    | & iter : IterMut'0.t_itermut usize = any_l ()
    | & _5 : IterMut'0.t_itermut usize = any_l ()
    | & _6 : borrowed (slice usize) = any_l ()
    | & _7 : borrowed (slice usize) = any_l ()
    | & _8 : borrowed (Vec'0.t_vec usize (Global'0.t_global)) = any_l ()
    | & iter_old : Snapshot'0.t_snapshot (IterMut'0.t_itermut usize) = any_l ()
    | & produced : Snapshot'0.t_snapshot (Seq'0.t_seq (borrowed usize)) = any_l ()
    | & _17 : Option'0.t_option (borrowed usize) = any_l ()
    | & _18 : borrowed (IterMut'0.t_itermut usize) = any_l ()
    | & _19 : borrowed (IterMut'0.t_itermut usize) = any_l ()
    | & __creusot_proc_iter_elem : borrowed usize = any_l ()
    | & _22 : Snapshot'0.t_snapshot (Seq'0.t_seq (borrowed usize)) = any_l ()
    | & x : borrowed usize = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s03_std_iterators6] forall i : int . 0 <= i
      /\ i < len'1 (shallow_model'1 v)  -> UIntSize.to_int (index_logic'1 ( ^ v) i) = 0}
      {[@expl:postcondition] [%#s03_std_iterators5] len'1 (shallow_model'0 ( ^ v)) = len'1 (shallow_model'1 v)}
      (! return' {result}) ]
    
end
module Core_Iter_Adapters_Take_Take_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_take 'i =
    | C_Take 'i usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_take < 'i > (input:t_take 'i) (ret  (iter:'i) (n:usize))= any
    [ good (iter:'i) (n:usize)-> {C_Take iter n = input} (! ret {iter} {n})
    | bad (iter:'i) (n:usize)-> {C_Take iter n <> input} {false} any ]
    
end
module Core_Iter_Adapters_Skip_Skip_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_skip 'i =
    | C_Skip 'i usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_skip < 'i > (input:t_skip 'i) (ret  (iter:'i) (n:usize))= any
    [ good (iter:'i) (n:usize)-> {C_Skip iter n = input} (! ret {iter} {n})
    | bad (iter:'i) (n:usize)-> {C_Skip iter n <> input} {false} any ]
    
end
module C03StdIterators_SkipTake
  type i
  
  let%span s03_std_iterators0 = "../03_std_iterators.rs" 38 20 38 31
  
  let%span s03_std_iterators1 = "../03_std_iterators.rs" 35 30 35 34
  
  let%span span2 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span9 = "../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32
  
  let%span span10 = "../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32
  
  let%span span11 = "../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23
  
  let%span span12 = "../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33
  
  let%span span13 = "../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53
  
  let%span span14 = "../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63
  
  let%span span15 = "../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83
  
  let%span span16 = "../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span18 = "../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25
  
  let%span span19 = "../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 45
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "../../../../../creusot-contracts/src/std/iter/take.rs" 34 9 34 13
  
  let%span span22 = "../../../../../creusot-contracts/src/std/iter/take.rs" 33 14 33 50
  
  let%span span23 = "../../../../../creusot-contracts/src/std/iter/take.rs" 64 12 64 88
  
  let%span span24 = "../../../../../creusot-contracts/src/std/iter/take.rs" 75 15 75 32
  
  let%span span25 = "../../../../../creusot-contracts/src/std/iter/take.rs" 76 15 76 32
  
  let%span span26 = "../../../../../creusot-contracts/src/std/iter/take.rs" 78 22 78 23
  
  let%span span27 = "../../../../../creusot-contracts/src/std/iter/take.rs" 78 31 78 33
  
  let%span span28 = "../../../../../creusot-contracts/src/std/iter/take.rs" 78 52 78 53
  
  let%span span29 = "../../../../../creusot-contracts/src/std/iter/take.rs" 78 61 78 63
  
  let%span span30 = "../../../../../creusot-contracts/src/std/iter/take.rs" 78 82 78 83
  
  let%span span31 = "../../../../../creusot-contracts/src/std/iter/take.rs" 77 14 77 42
  
  let%span span32 = "../../../../../creusot-contracts/src/std/iter/take.rs" 71 21 71 25
  
  let%span span33 = "../../../../../creusot-contracts/src/std/iter/take.rs" 70 14 70 45
  
  let%span span34 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span35 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span36 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 23 9 23 13
  
  let%span span37 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 22 14 22 50
  
  let%span span38 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 57 8 64 9
  
  let%span span39 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 74 15 74 32
  
  let%span span40 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 75 15 75 32
  
  let%span span41 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 77 22 77 23
  
  let%span span42 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 77 31 77 33
  
  let%span span43 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 77 52 77 53
  
  let%span span44 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 77 61 77 63
  
  let%span span45 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 77 82 77 83
  
  let%span span46 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 76 14 76 42
  
  let%span span47 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 70 21 70 25
  
  let%span span48 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 69 14 69 45
  
  let%span span49 = "../../../../../creusot-contracts/src/std/iter/take.rs" 45 12 45 33
  
  let%span span50 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 34 12 34 33
  
  let%span span51 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span52 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span53 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span54 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span55 = "../../../../../creusot-contracts/src/std/iter/take.rs" 26 21 26 25
  
  let%span span56 = "../../../../../creusot-contracts/src/std/iter/take.rs" 25 14 25 68
  
  let%span span57 = "../../../../../creusot-contracts/src/std/iter/take.rs" 26 4 26 36
  
  let%span span58 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span59 = "../../../../../creusot-contracts/src/std/iter/take.rs" 55 12 56 92
  
  let%span span60 = "../../../../../creusot-contracts/src/std/iter/skip.rs" 43 8 51 9
  
  let%span span61 = "" 0 0 0 0
  
  let%span span62 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span63 = "" 0 0 0 0
  
  let%span span64 = "" 0 0 0 0
  
  let%span span65 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span66 = "" 0 0 0 0
  
  let%span span67 = "" 0 0 0 0
  
  let%span span68 = "" 0 0 0 0
  
  use prelude.prelude.Borrow
  
  predicate invariant'8 (self : borrowed i)
  
  predicate inv'8 (_x : borrowed i)
  
  axiom inv'8 : forall x : borrowed i . inv'8 x = true
  
  type item'0
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  function index_logic'0 (self : Seq'0.t_seq item'0) (x : int) : item'0
  
  use seq.Seq
  
  predicate inv'6 (_x : Seq'0.t_seq item'0)
  
  function len'0 (self : Seq'0.t_seq item'0) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq item'0 . ([%#span2] inv'6 self)  -> ([%#span3] len'0 self >= 0)
  
  function concat'0 (self : Seq'0.t_seq item'0) (other : Seq'0.t_seq item'0) : Seq'0.t_seq item'0
  
  axiom concat'0_spec : forall self : Seq'0.t_seq item'0, other : Seq'0.t_seq item'0 . ([%#span4] inv'6 self)
   -> ([%#span5] inv'6 other)
   -> ([%#span8] inv'6 (concat'0 self other))
  && ([%#span7] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span6] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  predicate inv'2 (_x : i)
  
  predicate produces'2 (self : i) (visited : Seq'0.t_seq item'0) (o : i)
  
  function produces_trans'2 (a : i) (ab : Seq'0.t_seq item'0) (b : i) (bc : Seq'0.t_seq item'0) (c : i) : ()
  
  axiom produces_trans'2_spec : forall a : i, ab : Seq'0.t_seq item'0, b : i, bc : Seq'0.t_seq item'0, c : i . ([%#span9] produces'2 a ab b)
   -> ([%#span10] produces'2 b bc c)
   -> ([%#span11] inv'2 a)
   -> ([%#span12] inv'6 ab)
   -> ([%#span13] inv'2 b)
   -> ([%#span14] inv'6 bc)  -> ([%#span15] inv'2 c)  -> ([%#span16] produces'2 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq item'0 = [%#span17] ()
  
  function produces_refl'2 (self : i) : ()
  
  axiom produces_refl'2_spec : forall self : i . ([%#span18] inv'2 self)
   -> ([%#span19] produces'2 self (empty'0 : Seq'0.t_seq item'0) self)
  
  predicate invariant'7 (self : item'0)
  
  predicate inv'7 (_x : item'0)
  
  axiom inv'7 : forall x : item'0 . inv'7 x = true
  
  use Core_Iter_Adapters_Take_Take_Type as Take'0
  
  predicate inv'3 (_x : Take'0.t_take i)
  
  function iter'0 (self : Take'0.t_take i) : i
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant max'0 : usize = [%#span20] (18446744073709551615 : usize)
  
  function n'0 (self : Take'0.t_take i) : int
  
  axiom n'0_spec : forall self : Take'0.t_take i . ([%#span21] inv'3 self)
   -> ([%#span22] n'0 self >= 0 /\ n'0 self <= UIntSize.to_int (max'0 : usize))
  
  predicate produces'1 (self : Take'0.t_take i) (visited : Seq'0.t_seq item'0) (o : Take'0.t_take i) =
    [%#span23] n'0 self = n'0 o + len'0 visited /\ produces'2 (iter'0 self) visited (iter'0 o)
  
  function produces_trans'1 (a : Take'0.t_take i) (ab : Seq'0.t_seq item'0) (b : Take'0.t_take i) (bc : Seq'0.t_seq item'0) (c : Take'0.t_take i) : ()
    
  
  axiom produces_trans'1_spec : forall a : Take'0.t_take i, ab : Seq'0.t_seq item'0, b : Take'0.t_take i, bc : Seq'0.t_seq item'0, c : Take'0.t_take i . ([%#span24] produces'1 a ab b)
   -> ([%#span25] produces'1 b bc c)
   -> ([%#span26] inv'3 a)
   -> ([%#span27] inv'6 ab)
   -> ([%#span28] inv'3 b)
   -> ([%#span29] inv'6 bc)  -> ([%#span30] inv'3 c)  -> ([%#span31] produces'1 a (concat'0 ab bc) c)
  
  function produces_refl'1 (self : Take'0.t_take i) : ()
  
  axiom produces_refl'1_spec : forall self : Take'0.t_take i . ([%#span32] inv'3 self)
   -> ([%#span33] produces'1 self (empty'0 : Seq'0.t_seq item'0) self)
  
  predicate invariant'6 (self : Seq'0.t_seq item'0)
  
  axiom inv'6 : forall x : Seq'0.t_seq item'0 . inv'6 x = true
  
  predicate invariant'5 (self : borrowed (Take'0.t_take i))
  
  predicate inv'5 (_x : borrowed (Take'0.t_take i))
  
  axiom inv'5 : forall x : borrowed (Take'0.t_take i) . inv'5 x = true
  
  function empty_len'0 (_1 : ()) : () =
    [%#span35] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span34] len'0 (empty'0 : Seq'0.t_seq item'0) = 0
  
  use Core_Iter_Adapters_Skip_Skip_Type as Skip'0
  
  predicate inv'0 (_x : Skip'0.t_skip (Take'0.t_take i))
  
  predicate resolve'3 (self : item'0)
  
  function iter'1 (self : Skip'0.t_skip (Take'0.t_take i)) : Take'0.t_take i
  
  function n'1 (self : Skip'0.t_skip (Take'0.t_take i)) : int
  
  axiom n'1_spec : forall self : Skip'0.t_skip (Take'0.t_take i) . ([%#span36] inv'0 self)
   -> ([%#span37] n'1 self >= 0 /\ n'1 self <= UIntSize.to_int (max'0 : usize))
  
  predicate produces'0 (self : Skip'0.t_skip (Take'0.t_take i)) (visited : Seq'0.t_seq item'0) (o : Skip'0.t_skip (Take'0.t_take i))
    
   =
    [%#span38] visited = (empty'0 : Seq'0.t_seq item'0) /\ self = o
    \/ n'1 o = 0
    /\ len'0 visited > 0
    /\ (exists s : Seq'0.t_seq item'0 . inv'6 s
    /\ len'0 s = n'1 self
    /\ produces'1 (iter'1 self) (concat'0 s visited) (iter'1 o)
    /\ (forall i : int . 0 <= i /\ i < len'0 s  -> resolve'3 (index_logic'0 s i)))
  
  function produces_trans'0 (a : Skip'0.t_skip (Take'0.t_take i)) (ab : Seq'0.t_seq item'0) (b : Skip'0.t_skip (Take'0.t_take i)) (bc : Seq'0.t_seq item'0) (c : Skip'0.t_skip (Take'0.t_take i)) : ()
    
  
  axiom produces_trans'0_spec : forall a : Skip'0.t_skip (Take'0.t_take i), ab : Seq'0.t_seq item'0, b : Skip'0.t_skip (Take'0.t_take i), bc : Seq'0.t_seq item'0, c : Skip'0.t_skip (Take'0.t_take i) . ([%#span39] produces'0 a ab b)
   -> ([%#span40] produces'0 b bc c)
   -> ([%#span41] inv'0 a)
   -> ([%#span42] inv'6 ab)
   -> ([%#span43] inv'0 b)
   -> ([%#span44] inv'6 bc)  -> ([%#span45] inv'0 c)  -> ([%#span46] produces'0 a (concat'0 ab bc) c)
  
  function produces_refl'0 (self : Skip'0.t_skip (Take'0.t_take i)) : ()
  
  axiom produces_refl'0_spec : forall self : Skip'0.t_skip (Take'0.t_take i) . ([%#span47] inv'0 self)
   -> ([%#span48] produces'0 self (empty'0 : Seq'0.t_seq item'0) self)
  
  predicate invariant'4 (self : borrowed (Skip'0.t_skip (Take'0.t_take i)))
  
  predicate inv'4 (_x : borrowed (Skip'0.t_skip (Take'0.t_take i)))
  
  axiom inv'4 : forall x : borrowed (Skip'0.t_skip (Take'0.t_take i)) . inv'4 x = true
  
  predicate invariant'3 (self : Take'0.t_take i)
  
  axiom inv'3 : forall x : Take'0.t_take i . inv'3 x = true
  
  predicate invariant'2 (self : i)
  
  axiom inv'2 : forall x : i . inv'2 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'1 (self : Option'0.t_option item'0)
  
  predicate inv'1 (_x : Option'0.t_option item'0)
  
  axiom inv'1 : forall x : Option'0.t_option item'0 . inv'1 x = true
  
  predicate invariant'0 (self : Skip'0.t_skip (Take'0.t_take i))
  
  axiom inv'0 : forall x : Skip'0.t_skip (Take'0.t_take i) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : Option'0.t_option item'0)
  
  predicate resolve'4 (self : i)
  
  predicate resolve'2 (self : Take'0.t_take i) =
    [%#span49] resolve'4 (iter'0 self)
  
  predicate resolve'0 (self : Skip'0.t_skip (Take'0.t_take i)) =
    [%#span50] resolve'2 (iter'1 self)
  
  use seq.Seq
  
  function singleton'0 (v : item'0) : Seq'0.t_seq item'0
  
  axiom singleton'0_spec : forall v : item'0 . ([%#span51] inv'7 v)
   -> ([%#span54] inv'6 (singleton'0 v))
  && ([%#span53] index_logic'0 (singleton'0 v) 0 = v) && ([%#span52] len'0 (singleton'0 v) = 1)
  
  predicate completed'2 (self : borrowed i)
  
  function iter_mut'0 (self : borrowed (Take'0.t_take i)) : borrowed i
  
  axiom iter_mut'0_spec : forall self : borrowed (Take'0.t_take i) . ([%#span55] inv'5 self)
   -> ([%#span57] inv'8 (iter_mut'0 self))
  && ([%#span56] iter'0 ( * self) =  * iter_mut'0 self /\ iter'0 ( ^ self) =  ^ iter_mut'0 self)
  
  predicate resolve'5 (self : borrowed (Take'0.t_take i)) =
    [%#span58]  ^ self =  * self
  
  predicate completed'1 (self : borrowed (Take'0.t_take i)) =
    [%#span59] n'0 ( * self) = 0 /\ resolve'5 self
    \/ n'0 ( * self) > 0 /\ n'0 ( * self) = n'0 ( ^ self) + 1 /\ completed'2 (iter_mut'0 self)
  
  predicate completed'0 (self : borrowed (Skip'0.t_skip (Take'0.t_take i))) =
    [%#span60] n'1 ( ^ self) = 0
    /\ (exists i : borrowed (Take'0.t_take i) . exists s : Seq'0.t_seq item'0 . inv'5 i
    /\ inv'6 s
    /\ len'0 s <= n'1 ( * self)
    /\ produces'1 (iter'1 ( * self)) s ( * i)
    /\ (forall i : int . 0 <= i /\ i < len'0 s  -> resolve'3 (index_logic'0 s i))
    /\ completed'1 i /\  ^ i = iter'1 ( ^ self))
  
  let rec next'0 (self:borrowed (Skip'0.t_skip (Take'0.t_take i))) (return'  (ret:Option'0.t_option item'0))= {[@expl:precondition] [%#span61] inv'4 self}
    any
    [ return' (result:Option'0.t_option item'0)-> {[%#span63] inv'1 result}
      {[%#span62] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  let rec skip'0 (self:Take'0.t_take i) (n:usize) (return'  (ret:Skip'0.t_skip (Take'0.t_take i)))= {[@expl:precondition] [%#span64] inv'3 self}
    any
    [ return' (result:Skip'0.t_skip (Take'0.t_take i))-> {[%#span66] inv'0 result}
      {[%#span65] iter'1 result = self /\ n'1 result = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  let rec take'0 (self:i) (n:usize) (return'  (ret:Take'0.t_take i))= {[@expl:precondition] [%#span67] inv'2 self}
    any
    [ return' (result:Take'0.t_take i)-> {[%#span68] inv'3 result}
      {[%#span65] iter'0 result = self /\ n'0 result = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  let rec skip_take (iter:i) (n:usize) (return'  (ret:()))= {[%#s03_std_iterators1] inv'2 iter}
    (! bb0
    [ bb0 = s0 [ s0 = take'0 {iter} {n} (fun (_ret':Take'0.t_take i) ->  [ &_6 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = skip'0 {_6} {n} (fun (_ret':Skip'0.t_skip (Take'0.t_take i)) ->  [ &_5 <- _ret' ] s1) | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <Skip'0.t_skip (Take'0.t_take i)> {_5}
          (fun (_ret':borrowed (Skip'0.t_skip (Take'0.t_take i))) ->  [ &_4 <- _ret' ]  [ &_5 <-  ^ _4 ] s1)
      | s1 = -{inv'0 ( ^ _4)}- s2
      | s2 = next'0 {_4} (fun (_ret':Option'0.t_option item'0) ->  [ &res <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 _5} s1
      | s1 = -{resolve'0 _5}- s2
      | s2 = {[@expl:type invariant] inv'1 res} s3
      | s3 = -{resolve'1 res}- s4
      | s4 = bb4 ]
      
    | bb4 = s0 [ s0 = {[@expl:assertion] [%#s03_std_iterators0] res = Option'0.C_None} s1 | s1 = bb5 ] 
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & iter : i = iter
    | & n : usize = n
    | & res : Option'0.t_option item'0 = any_l ()
    | & _4 : borrowed (Skip'0.t_skip (Take'0.t_take i)) = any_l ()
    | & _5 : Skip'0.t_skip (Take'0.t_take i) = any_l ()
    | & _6 : Take'0.t_take i = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  type t_mapinv 'i 'b 'f =
    | C_MapInv 'i 'f (Snapshot'0.t_snapshot (Seq'0.t_seq 'b))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_mapinv < 'i > < 'b > < 'f > (input:t_mapinv 'i 'b 'f) (ret  (iter:'i) (func:'f) (produced:Snapshot'0.t_snapshot (Seq'0.t_seq 'b)))= any
    [ good (iter:'i) (func:'f) (produced:Snapshot'0.t_snapshot (Seq'0.t_seq 'b))-> {C_MapInv iter func produced = input}
      (! ret {iter} {func} {produced})
    | bad (iter:'i) (func:'f) (produced:Snapshot'0.t_snapshot (Seq'0.t_seq 'b))-> {C_MapInv iter func produced <> input}
      {false}
      any ]
    
  
  function mapinv_iter [@inline:trivial] (self : t_mapinv 'i 'b 'f) : 'i =
    match self with
      | C_MapInv a _ _ -> a
      end
  
  function mapinv_func [@inline:trivial] (self : t_mapinv 'i 'b 'f) : 'f =
    match self with
      | C_MapInv _ a _ -> a
      end
  
  function mapinv_produced [@inline:trivial] (self : t_mapinv 'i 'b 'f) : Snapshot'0.t_snapshot (Seq'0.t_seq 'b) =
    match self with
      | C_MapInv _ _ a -> a
      end
end
module C03StdIterators_Counter_Closure0_Type
  use prelude.prelude.UInt32
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Int16
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type c03stditerators_counter_closure0  =
    | C03stditerators_counter_closure0 (borrowed usize)
  
  let rec c03stditerators_counter_closure0 (input:c03stditerators_counter_closure0) (ret  (cnt:borrowed usize))= any
    [ good (cnt:borrowed usize)-> {C03stditerators_counter_closure0 cnt = input} (! ret {cnt})
    | bad (cnt:borrowed usize)-> {C03stditerators_counter_closure0 cnt <> input} {false} any ]
    
end
module C03StdIterators_Counter_Closure0
  let%span s03_std_iterators0 = "../03_std_iterators.rs" 50 23 50 24
  
  let%span s03_std_iterators1 = "../03_std_iterators.rs" 47 23 47 65
  
  let%span s03_std_iterators2 = "../03_std_iterators.rs" 48 22 48 89
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span9 = "" 0 0 0 0
  
  let%span span10 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.UInt32
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'0 (self : Seq'0.t_seq uint32) =
    [%#span3] true
  
  predicate inv'0 (_x : Seq'0.t_seq uint32)
  
  axiom inv'0 : forall x : Seq'0.t_seq uint32 . inv'0 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'0 (self : Seq'0.t_seq uint32) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq uint32 . ([%#span4] inv'0 self)  -> ([%#span5] len'0 self >= 0)
  
  constant empty'0 : Seq'0.t_seq uint32 = [%#span6] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span8] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span7] len'0 (empty'0 : Seq'0.t_seq uint32) = 0
  
  use prelude.prelude.Int16
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Borrow
  
  use C03StdIterators_Counter_Closure0_Type as Closure'0
  
  function field_0'0 [#"../03_std_iterators.rs" 48 12 48 91] (self : Closure'0.c03stditerators_counter_closure0) : borrowed usize
    
   =
    let Closure'0.C03stditerators_counter_closure0 a = self in a
  
  predicate unnest'0 [#"../03_std_iterators.rs" 48 12 48 91] (self : Closure'0.c03stditerators_counter_closure0) (_2 : Closure'0.c03stditerators_counter_closure0)
    
   =
     ^ field_0'0 _2 =  ^ field_0'0 self
  
  constant max'0 : usize = [%#span9] (18446744073709551615 : usize)
  
  function deref'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq uint32)) : Seq'0.t_seq uint32
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed Closure'0.c03stditerators_counter_closure0) =
    [%#span10]  ^ self =  * self
  
  let rec c03stditerators_counter_closure0 (_1:borrowed Closure'0.c03stditerators_counter_closure0) (x:uint32) (_prod:Snapshot'0.t_snapshot (Seq'0.t_seq uint32)) (return'  (ret:uint32))= {[%#s03_std_iterators1] UIntSize.to_int ( * field_0'0 ( * _1))
    = len'0 (deref'0 _prod)
    /\  * field_0'0 ( * _1) < (max'0 : usize)}
    (! bb0
    [ bb0 = s0
      [ s0 = Closure'0.c03stditerators_counter_closure0 { * _1}
          (fun (r'0:borrowed usize) ->
            UIntSize.add { * r'0} {[%#s03_std_iterators0] (1 : usize)}
              (fun (_ret':usize) ->
                Closure'0.c03stditerators_counter_closure0 { * _1}
                  (fun (l'0:borrowed usize) ->
                    
                    [ &_1 <- { _1 with current = Closure'0.C03stditerators_counter_closure0 ({ l'0 with current = _ret' ; }) ; } ]
                    
                    s1)))
      | s1 = -{resolve'0 _1}- s2
      | s2 =  [ &res1 <- x ] s3
      | s3 =  [ &res <- res1 ] s4
      | s4 =  [ &_0 <- res ] s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l ()
    | & _1 : borrowed Closure'0.c03stditerators_counter_closure0 = _1
    | & x : uint32 = x
    | & res : uint32 = any_l ()
    | & res1 : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] unnest'0 ( * _1) ( ^ _1)}
      {[@expl:postcondition] [%#s03_std_iterators2] UIntSize.to_int ( * field_0'0 ( ^ _1))
      = UIntSize.to_int ( * field_0'0 ( * _1)) + 1
      /\ UIntSize.to_int ( * field_0'0 ( ^ _1)) = len'0 (deref'0 _prod) + 1 /\ result = x}
      (! return' {result}) ]
    
end
module C03StdIterators_Counter
  let%span s03_std_iterators0 = "../03_std_iterators.rs" 42 18 42 19
  
  let%span s03_std_iterators1 = "../03_std_iterators.rs" 56 20 56 40
  
  let%span s03_std_iterators2 = "../03_std_iterators.rs" 57 4 57 35
  
  let%span s03_std_iterators3 = "../03_std_iterators.rs" 58 20 58 36
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span10 = "" 0 0 0 0
  
  let%span span11 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span12 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span14 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span18 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span19 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span20 = "../03_std_iterators.rs" 47 23 47 65
  
  let%span span21 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span22 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span23 = "../../../../../creusot-contracts/src/logic/seq2.rs" 47 15 47 50
  
  let%span span24 = "../../../../../creusot-contracts/src/logic/seq2.rs" 50 23 50 27
  
  let%span span25 = "../../../../../creusot-contracts/src/logic/seq2.rs" 48 14 48 35
  
  let%span span26 = "../../../../../creusot-contracts/src/logic/seq2.rs" 49 4 49 87
  
  let%span span27 = "../../../../../creusot-contracts/src/logic/seq2.rs" 50 4 50 52
  
  let%span span28 = "../../../../../creusot-contracts/src/std/slice.rs" 18 21 18 25
  
  let%span span29 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span30 = "../../../../../creusot-contracts/src/std/slice.rs" 18 4 18 50
  
  let%span span31 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span32 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span33 = "../../../../../creusot-contracts/src/std/slice.rs" 76 19 76 23
  
  let%span span34 = "../../../../../creusot-contracts/src/std/slice.rs" 74 14 74 41
  
  let%span span35 = "../../../../../creusot-contracts/src/std/slice.rs" 75 4 75 82
  
  let%span span36 = "../../../../../creusot-contracts/src/std/slice.rs" 76 4 76 35
  
  let%span span37 = "../../../../../creusot-contracts/src/std/slice.rs" 384 12 384 66
  
  let%span span38 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 37 8 49 9
  
  let%span span39 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32
  
  let%span span40 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32
  
  let%span span41 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23
  
  let%span span42 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33
  
  let%span span43 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53
  
  let%span span44 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63
  
  let%span span45 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83
  
  let%span span46 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42
  
  let%span span47 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 25
  
  let%span span48 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 45
  
  let%span span49 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span50 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span51 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span52 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span53 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 112 8 116 9
  
  let%span span54 = "../../../../../creusot-contracts/src/logic/seq2.rs" 99 8 99 39
  
  let%span span55 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 135 8 142 9
  
  let%span span56 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 24 121 28
  
  let%span span57 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 33 121 37
  
  let%span span58 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 42 121 50
  
  let%span span59 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 120 4 120 83
  
  let%span span60 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span61 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span62 = "../../../../../creusot-contracts/src/std/slice.rs" 377 20 377 61
  
  let%span span63 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 148 8 153 9
  
  let%span span64 = "../../../../../creusot-contracts/src/std/slice.rs" 395 15 395 32
  
  let%span span65 = "../../../../../creusot-contracts/src/std/slice.rs" 396 15 396 32
  
  let%span span66 = "../../../../../creusot-contracts/src/std/slice.rs" 398 31 398 33
  
  let%span span67 = "../../../../../creusot-contracts/src/std/slice.rs" 398 61 398 63
  
  let%span span68 = "../../../../../creusot-contracts/src/std/slice.rs" 397 14 397 42
  
  let%span span69 = "../../../../../creusot-contracts/src/std/slice.rs" 393 4 393 10
  
  let%span span70 = "../../../../../creusot-contracts/src/std/slice.rs" 390 14 390 45
  
  let%span span71 = "../../../../../creusot-contracts/src/std/slice.rs" 388 4 388 10
  
  let%span span72 = "../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32
  
  let%span span73 = "../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32
  
  let%span span74 = "../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23
  
  let%span span75 = "../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33
  
  let%span span76 = "../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53
  
  let%span span77 = "../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63
  
  let%span span78 = "../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83
  
  let%span span79 = "../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42
  
  let%span span80 = "../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25
  
  let%span span81 = "../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 45
  
  let%span span82 = "../../../../../creusot-contracts/src/logic/seq2.rs" 91 18 91 22
  
  let%span span83 = "../../../../../creusot-contracts/src/logic/seq2.rs" 91 24 91 27
  
  let%span span84 = "../../../../../creusot-contracts/src/logic/seq2.rs" 88 4 88 38
  
  let%span span85 = "../../../../../creusot-contracts/src/logic/seq2.rs" 89 4 90 81
  
  let%span span86 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span87 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span88 = "../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  
  let%span span89 = "../../../../../creusot-contracts/src/std/vec.rs" 275 20 275 32
  
  let%span span90 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 15 8 18 9
  
  let%span span91 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 56 4 56 27
  
  let%span span92 = "" 0 0 0 0
  
  let%span span93 = "../../../../../creusot-contracts/src/std/iter.rs" 136 16 137 83
  
  let%span span94 = "" 0 0 0 0
  
  let%span span95 = "../../../../../creusot-contracts/src/std/iter.rs" 43 4 43 141
  
  let%span span96 = "../../../../../creusot-contracts/src/std/iter.rs" 44 15 44 51
  
  let%span span97 = "../../../../../creusot-contracts/src/std/iter.rs" 45 15 45 70
  
  let%span span98 = "../../../../../creusot-contracts/src/std/iter.rs" 47 21 47 25
  
  let%span span99 = "../../../../../creusot-contracts/src/std/iter.rs" 47 27 47 31
  
  let%span span100 = "../../../../../creusot-contracts/src/std/iter.rs" 46 14 46 88
  
  let%span span101 = "../../../../../creusot-contracts/src/std/iter.rs" 47 4 50 61
  
  let%span span102 = "" 0 0 0 0
  
  let%span span103 = "../../../../../creusot-contracts/src/std/slice.rs" 223 0 332 1
  
  let%span span104 = "" 0 0 0 0
  
  let%span span105 = "../../../../../creusot-contracts/src/std/vec.rs" 163 26 163 42
  
  let%span span106 = "" 0 0 0 0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Slice
  
  predicate invariant'14 (self : slice uint32) =
    [%#span4] true
  
  predicate inv'14 (_x : slice uint32)
  
  axiom inv'14 : forall x : slice uint32 . inv'14 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Int16
  
  use prelude.prelude.Borrow
  
  use C03StdIterators_Counter_Closure0_Type as Closure'0
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  predicate inv'13 (_x : Seq'0.t_seq (borrowed Closure'0.c03stditerators_counter_closure0))
  
  function len'2 (self : Seq'0.t_seq (borrowed Closure'0.c03stditerators_counter_closure0)) : int
  
  axiom len'2_spec : forall self : Seq'0.t_seq (borrowed Closure'0.c03stditerators_counter_closure0) . ([%#span5] inv'13 self)
   -> ([%#span6] len'2 self >= 0)
  
  constant empty'2 : Seq'0.t_seq (borrowed Closure'0.c03stditerators_counter_closure0) = [%#span7] ()
  
  function empty_len'2 (_1 : ()) : () =
    [%#span9] ()
  
  axiom empty_len'2_spec : forall _1 : () . [%#span8] len'2 (empty'2 : Seq'0.t_seq (borrowed Closure'0.c03stditerators_counter_closure0))
  = 0
  
  predicate invariant'13 (self : Seq'0.t_seq (borrowed Closure'0.c03stditerators_counter_closure0)) =
    [%#span4] true
  
  axiom inv'13 : forall x : Seq'0.t_seq (borrowed Closure'0.c03stditerators_counter_closure0) . inv'13 x = true
  
  predicate invariant'12 (self : borrowed Closure'0.c03stditerators_counter_closure0) =
    [%#span4] true
  
  predicate inv'12 (_x : borrowed Closure'0.c03stditerators_counter_closure0)
  
  axiom inv'12 : forall x : borrowed Closure'0.c03stditerators_counter_closure0 . inv'12 x = true
  
  predicate invariant'11 (self : uint32) =
    [%#span4] true
  
  predicate inv'11 (_x : uint32)
  
  axiom inv'11 : forall x : uint32 . inv'11 x = true
  
  use Core_Slice_Iter_Iter_Type as Iter'0
  
  predicate invariant'10 (self : borrowed (Iter'0.t_iter uint32)) =
    [%#span4] true
  
  predicate inv'10 (_x : borrowed (Iter'0.t_iter uint32))
  
  axiom inv'10 : forall x : borrowed (Iter'0.t_iter uint32) . inv'10 x = true
  
  predicate invariant'9 (self : Seq'0.t_seq uint32) =
    [%#span4] true
  
  predicate inv'9 (_x : Seq'0.t_seq uint32)
  
  axiom inv'9 : forall x : Seq'0.t_seq uint32 . inv'9 x = true
  
  predicate inv'6 (_x : Seq'0.t_seq uint32)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  constant max'0 : usize = [%#span10] (18446744073709551615 : usize)
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq uint32) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq uint32 . ([%#span5] inv'6 self)  -> ([%#span6] len'0 self >= 0)
  
  predicate inv'8 (_x : Vec'0.t_vec uint32 (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) : Seq'0.t_seq uint32
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec uint32 (Global'0.t_global) . ([%#span11] inv'8 self)
   -> ([%#span13] inv'6 (shallow_model'0 self))
  && ([%#span12] len'0 (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'8 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span14] inv'6 (shallow_model'0 self)
  
  axiom inv'8 : forall x : Vec'0.t_vec uint32 (Global'0.t_global) . inv'8 x = true
  
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as MapInv'0
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq uint32) (x : int) : uint32
  
  function concat'1 (self : Seq'0.t_seq uint32) (other : Seq'0.t_seq uint32) : Seq'0.t_seq uint32
  
  axiom concat'1_spec : forall self : Seq'0.t_seq uint32, other : Seq'0.t_seq uint32 . ([%#span15] inv'6 self)
   -> ([%#span16] inv'6 other)
   -> ([%#span19] inv'6 (concat'1 self other))
  && ([%#span18] forall i : int . 0 <= i /\ i < len'0 (concat'1 self other)
   -> index_logic'1 (concat'1 self other) i
  = (if i < len'0 self then index_logic'1 self i else index_logic'1 other (i - len'0 self)))
  && ([%#span17] len'0 (concat'1 self other) = len'0 self + len'0 other)
  
  predicate inv'5 (_x : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0)
  
  function field_0'0 [#"../03_std_iterators.rs" 48 12 48 91] (self : Closure'0.c03stditerators_counter_closure0) : borrowed usize
    
   =
    let Closure'0.C03stditerators_counter_closure0 a = self in a
  
  predicate unnest'0 [#"../03_std_iterators.rs" 48 12 48 91] (self : Closure'0.c03stditerators_counter_closure0) (_2 : Closure'0.c03stditerators_counter_closure0)
    
   =
     ^ field_0'0 _2 =  ^ field_0'0 self
  
  use seq.Seq
  
  function len'1 (self : Seq'0.t_seq uint32) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq uint32 . ([%#span5] inv'9 self)  -> ([%#span6] len'1 self >= 0)
  
  function deref'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq uint32)) : Seq'0.t_seq uint32
  
  predicate postcondition_mut'0 [#"../03_std_iterators.rs" 48 12 48 91] (self : borrowed Closure'0.c03stditerators_counter_closure0) (args : (uint32, Snapshot'0.t_snapshot (Seq'0.t_seq uint32))) (result : uint32)
    
   =
    (let (x, _prod) = args in UIntSize.to_int ( * field_0'0 ( ^ self)) = UIntSize.to_int ( * field_0'0 ( * self)) + 1
    /\ UIntSize.to_int ( * field_0'0 ( ^ self)) = len'1 (deref'1 _prod) + 1 /\ result = x)
    /\ unnest'0 ( * self) ( ^ self)
  
  predicate precondition'0 [#"../03_std_iterators.rs" 48 12 48 91] (self : Closure'0.c03stditerators_counter_closure0) (args : (uint32, Snapshot'0.t_snapshot (Seq'0.t_seq uint32)))
    
   =
    [%#span20] let (x, _prod) = args in UIntSize.to_int ( * field_0'0 self) = len'1 (deref'1 _prod)
    /\  * field_0'0 self < (max'0 : usize)
  
  function new'0 (x : Seq'0.t_seq uint32) : Snapshot'0.t_snapshot (Seq'0.t_seq uint32)
  
  axiom new'0_spec : forall x : Seq'0.t_seq uint32 . ([%#span21] inv'9 x)  -> ([%#span22] deref'1 (new'0 x) = x)
  
  use prelude.seq_ext.SeqExt
  
  use seq.Seq
  
  function index_logic'2 (self : Seq'0.t_seq uint32) (x : int) : uint32
  
  function subsequence'0 (self : Seq'0.t_seq uint32) (n : int) (m : int) : Seq'0.t_seq uint32
  
  axiom subsequence'0_spec : forall self : Seq'0.t_seq uint32, n : int, m : int . ([%#span23] 0 <= n
  /\ n <= m /\ m <= len'1 self)
   -> ([%#span24] inv'9 self)
   -> ([%#span27] inv'9 (subsequence'0 self n m))
  && ([%#span26] forall i : int . 0 <= i /\ i < len'1 (subsequence'0 self n m)
   -> index_logic'2 (subsequence'0 self n m) i = index_logic'2 self (n + i))
  && ([%#span25] len'1 (subsequence'0 self n m) = m - n)
  
  use seq.Seq
  
  function index_logic'3 (self : Seq'0.t_seq (borrowed Closure'0.c03stditerators_counter_closure0)) (x : int) : borrowed Closure'0.c03stditerators_counter_closure0
    
  
  use seq.Seq
  
  function concat'0 (self : Seq'0.t_seq uint32) (other : Seq'0.t_seq uint32) : Seq'0.t_seq uint32
  
  axiom concat'0_spec : forall self : Seq'0.t_seq uint32, other : Seq'0.t_seq uint32 . ([%#span15] inv'9 self)
   -> ([%#span16] inv'9 other)
   -> ([%#span19] inv'9 (concat'0 self other))
  && ([%#span18] forall i : int . 0 <= i /\ i < len'1 (concat'0 self other)
   -> index_logic'2 (concat'0 self other) i
  = (if i < len'1 self then index_logic'2 self i else index_logic'2 other (i - len'1 self)))
  && ([%#span17] len'1 (concat'0 self other) = len'1 self + len'1 other)
  
  function inner'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq uint32)) : Seq'0.t_seq uint32
  
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  
  function shallow_model'4 (self : slice uint32) : Seq'0.t_seq uint32
  
  axiom shallow_model'4_spec : forall self : slice uint32 . ([%#span28] inv'14 self)
   -> ([%#span30] inv'6 (shallow_model'4 self))
  && ([%#span29] len'0 (shallow_model'4 self) <= UIntSize.to_int (max'0 : usize))
  
  function index_logic'4 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [%#span31] index_logic'1 (shallow_model'4 self) ix
  
  function shallow_model'1 (self : slice uint32) : Seq'0.t_seq uint32 =
    [%#span32] shallow_model'4 self
  
  predicate inv'1 (_x : slice uint32)
  
  function to_ref_seq'0 (self : slice uint32) : Seq'0.t_seq uint32
  
  axiom to_ref_seq'0_spec : forall self : slice uint32 . ([%#span33] inv'1 self)
   -> ([%#span36] inv'9 (to_ref_seq'0 self))
  && ([%#span35] forall i : int . 0 <= i /\ i < len'1 (to_ref_seq'0 self)
   -> index_logic'2 (to_ref_seq'0 self) i = index_logic'4 self i)
  && ([%#span34] len'1 (to_ref_seq'0 self) = len'0 (shallow_model'1 self))
  
  function shallow_model'3 (self : Iter'0.t_iter uint32) : slice uint32
  
  predicate produces'0 (self : Iter'0.t_iter uint32) (visited : Seq'0.t_seq uint32) (tl : Iter'0.t_iter uint32) =
    [%#span37] to_ref_seq'0 (shallow_model'3 self) = concat'0 visited (to_ref_seq'0 (shallow_model'3 tl))
  
  predicate produces'1 [@inline:trivial] (self : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0) (visited : Seq'0.t_seq uint32) (succ : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0)
    
   =
    [%#span38] unnest'0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ)
    /\ (exists s : Seq'0.t_seq uint32 . inv'9 s
    /\ len'1 s = len'0 visited
    /\ produces'0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) s (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter succ)
    /\ inner'0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced succ)
    = concat'0 (deref'1 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s
    /\ (exists fs : Seq'0.t_seq (borrowed Closure'0.c03stditerators_counter_closure0) . inv'13 fs
    /\ len'2 fs = len'0 visited
    /\ (forall i : int . 1 <= i /\ i < len'2 fs  ->  ^ index_logic'3 fs (i - 1) =  * index_logic'3 fs i)
    /\ (if len'0 visited = 0 then
      CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self
      = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    else
       * index_logic'3 fs 0 = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self
      /\  ^ index_logic'3 fs (len'0 visited - 1) = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < len'0 visited
     -> unnest'0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) ( * index_logic'3 fs i)
    /\ precondition'0 ( * index_logic'3 fs i) (index_logic'2 s i, new'0 (concat'0 (deref'1 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (subsequence'0 s 0 i)))
    /\ postcondition_mut'0 (index_logic'3 fs i) (index_logic'2 s i, new'0 (concat'0 (deref'1 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (subsequence'0 s 0 i))) (index_logic'1 visited i))))
  
  function produces_trans'2 (a : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0) (ab : Seq'0.t_seq uint32) (b : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0) (bc : Seq'0.t_seq uint32) (c : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0) : ()
    
  
  axiom produces_trans'2_spec : forall a : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0, ab : Seq'0.t_seq uint32, b : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0, bc : Seq'0.t_seq uint32, c : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0 . ([%#span39] produces'1 a ab b)
   -> ([%#span40] produces'1 b bc c)
   -> ([%#span41] inv'5 a)
   -> ([%#span42] inv'6 ab)
   -> ([%#span43] inv'5 b)
   -> ([%#span44] inv'6 bc)  -> ([%#span45] inv'5 c)  -> ([%#span46] produces'1 a (concat'1 ab bc) c)
  
  constant empty'1 : Seq'0.t_seq uint32 = [%#span7] ()
  
  function produces_refl'2 (self : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0) : ()
    
  
  axiom produces_refl'2_spec : forall self : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0 . ([%#span47] inv'5 self)
   -> ([%#span48] produces'1 self (empty'1 : Seq'0.t_seq uint32) self)
  
  predicate invariant'7 (self : borrowed (MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0))
    
   =
    [%#span4] true
  
  predicate inv'7 (_x : borrowed (MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0))
    
  
  axiom inv'7 : forall x : borrowed (MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0) . inv'7 x
  = (inv'5 ( * x) /\ inv'5 ( ^ x))
  
  predicate invariant'6 (self : Seq'0.t_seq uint32) =
    [%#span4] true
  
  axiom inv'6 : forall x : Seq'0.t_seq uint32 . inv'6 x = true
  
  use seq.Seq
  
  predicate inv'3 (_x : uint32)
  
  function singleton'0 (v : uint32) : Seq'0.t_seq uint32
  
  axiom singleton'0_spec : forall v : uint32 . ([%#span49] inv'3 v)
   -> ([%#span52] inv'9 (singleton'0 v))
  && ([%#span51] index_logic'2 (singleton'0 v) 0 = v) && ([%#span50] len'1 (singleton'0 v) = 1)
  
  predicate inv'2 (_x : Iter'0.t_iter uint32)
  
  predicate next_precondition'0 (iter : Iter'0.t_iter uint32) (func : Closure'0.c03stditerators_counter_closure0) (produced : Seq'0.t_seq uint32)
    
   =
    [%#span53] forall i : Iter'0.t_iter uint32 . forall e : uint32 . inv'2 i
     -> inv'3 e  -> produces'0 iter (singleton'0 e) i  -> precondition'0 func (e, new'0 produced)
  
  function push'0 [@inline:trivial] (self : Seq'0.t_seq uint32) (v : uint32) : Seq'0.t_seq uint32 =
    [%#span54] concat'0 self (singleton'0 v)
  
  predicate preservation'0 (iter : Iter'0.t_iter uint32) (func : Closure'0.c03stditerators_counter_closure0) =
    [%#span55] forall i : Iter'0.t_iter uint32 . forall b : uint32 . forall f : borrowed Closure'0.c03stditerators_counter_closure0 . forall e2 : uint32 . forall e1 : uint32 . forall s : Seq'0.t_seq uint32 . inv'2 i
     -> inv'11 b
     -> inv'12 f
     -> inv'3 e2
     -> inv'3 e1
     -> inv'9 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (push'0 (push'0 s e1) e2) i
     -> precondition'0 ( * f) (e1, new'0 s)
     -> postcondition_mut'0 f (e1, new'0 s) b  -> precondition'0 ( ^ f) (e2, new'0 (push'0 s e1))
  
  constant empty'0 : Seq'0.t_seq uint32 = [%#span7] ()
  
  predicate inv'4 (_x : Closure'0.c03stditerators_counter_closure0)
  
  predicate preservation_inv'0 (iter : Iter'0.t_iter uint32) (func : Closure'0.c03stditerators_counter_closure0) (produced : Seq'0.t_seq uint32)
    
  
  axiom preservation_inv'0_spec : forall iter : Iter'0.t_iter uint32, func : Closure'0.c03stditerators_counter_closure0, produced : Seq'0.t_seq uint32 . ([%#span56] inv'2 iter)
   -> ([%#span57] inv'4 func)
   -> ([%#span58] inv'9 produced)
   -> ([%#span59] produced = (empty'0 : Seq'0.t_seq uint32)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  
  function shallow_model'5 (self : borrowed (Iter'0.t_iter uint32)) : slice uint32 =
    [%#span60] shallow_model'3 ( * self)
  
  predicate resolve'5 (self : borrowed (Iter'0.t_iter uint32)) =
    [%#span61]  ^ self =  * self
  
  predicate completed'1 (self : borrowed (Iter'0.t_iter uint32)) =
    [%#span62] resolve'5 self /\ shallow_model'4 (shallow_model'5 self) = (empty'1 : Seq'0.t_seq uint32)
  
  predicate reinitialize'0 (_1 : ()) =
    [%#span63] forall func : Closure'0.c03stditerators_counter_closure0 . forall iter : borrowed (Iter'0.t_iter uint32) . inv'4 func
     -> inv'10 iter
     -> completed'1 iter
     -> next_precondition'0 ( ^ iter) func (empty'0 : Seq'0.t_seq uint32) /\ preservation'0 ( ^ iter) func
  
  predicate invariant'5 (self : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0)
    
  
  axiom inv'5 : forall x : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0 . inv'5 x
  = (invariant'5 x
  /\ match x with
    | MapInv'0.C_MapInv iter func produced -> true
    end)
  
  predicate invariant'4 (self : Closure'0.c03stditerators_counter_closure0) =
    [%#span4] true
  
  axiom inv'4 : forall x : Closure'0.c03stditerators_counter_closure0 . inv'4 x = true
  
  function produces_trans'1 (a : Iter'0.t_iter uint32) (ab : Seq'0.t_seq uint32) (b : Iter'0.t_iter uint32) (bc : Seq'0.t_seq uint32) (c : Iter'0.t_iter uint32) : ()
    
   =
    [%#span69] ()
  
  axiom produces_trans'1_spec : forall a : Iter'0.t_iter uint32, ab : Seq'0.t_seq uint32, b : Iter'0.t_iter uint32, bc : Seq'0.t_seq uint32, c : Iter'0.t_iter uint32 . ([%#span64] produces'0 a ab b)
   -> ([%#span65] produces'0 b bc c)
   -> ([%#span66] inv'9 ab)  -> ([%#span67] inv'9 bc)  -> ([%#span68] produces'0 a (concat'0 ab bc) c)
  
  function produces_refl'1 (self : Iter'0.t_iter uint32) : () =
    [%#span71] ()
  
  axiom produces_refl'1_spec : forall self : Iter'0.t_iter uint32 . [%#span70] produces'0 self (empty'0 : Seq'0.t_seq uint32) self
  
  function empty_len'1 (_1 : ()) : () =
    [%#span9] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span8] len'1 (empty'0 : Seq'0.t_seq uint32) = 0
  
  predicate invariant'3 (self : uint32) =
    [%#span4] true
  
  axiom inv'3 : forall x : uint32 . inv'3 x = true
  
  predicate invariant'2 (self : Iter'0.t_iter uint32) =
    [%#span4] true
  
  axiom inv'2 : forall x : Iter'0.t_iter uint32 . inv'2 x = true
  
  predicate invariant'1 (self : slice uint32) =
    [%#span4] true
  
  axiom inv'1 : forall x : slice uint32 . inv'1 x = true
  
  predicate invariant'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span4] true
  
  predicate inv'0 (_x : Vec'0.t_vec uint32 (Global'0.t_global))
  
  axiom inv'0 : forall x : Vec'0.t_vec uint32 (Global'0.t_global) . inv'0 x = true
  
  function empty_len'0 (_1 : ()) : () =
    [%#span9] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span8] len'0 (empty'1 : Seq'0.t_seq uint32) = 0
  
  function produces_trans'0 (a : Iter'0.t_iter uint32) (ab : Seq'0.t_seq uint32) (b : Iter'0.t_iter uint32) (bc : Seq'0.t_seq uint32) (c : Iter'0.t_iter uint32) : ()
    
  
  axiom produces_trans'0_spec : forall a : Iter'0.t_iter uint32, ab : Seq'0.t_seq uint32, b : Iter'0.t_iter uint32, bc : Seq'0.t_seq uint32, c : Iter'0.t_iter uint32 . ([%#span72] produces'0 a ab b)
   -> ([%#span73] produces'0 b bc c)
   -> ([%#span74] inv'2 a)
   -> ([%#span75] inv'9 ab)
   -> ([%#span76] inv'2 b)
   -> ([%#span77] inv'9 bc)  -> ([%#span78] inv'2 c)  -> ([%#span79] produces'0 a (concat'0 ab bc) c)
  
  function produces_refl'0 (self : Iter'0.t_iter uint32) : ()
  
  axiom produces_refl'0_spec : forall self : Iter'0.t_iter uint32 . ([%#span80] inv'2 self)
   -> ([%#span81] produces'0 self (empty'0 : Seq'0.t_seq uint32) self)
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  predicate ext_eq'0 (self : Seq'0.t_seq uint32) (oth : Seq'0.t_seq uint32)
  
  axiom ext_eq'0_spec : forall self : Seq'0.t_seq uint32, oth : Seq'0.t_seq uint32 . ([%#span82] inv'6 self)
   -> ([%#span83] inv'6 oth)
   -> ([%#span85] len'0 self = len'0 oth
  /\ (forall i : int . 0 <= i /\ i < len'0 self  -> index_logic'1 self i = index_logic'1 oth i)  -> ext_eq'0 self oth)
  && ([%#span84] ext_eq'0 self oth  -> self = oth)
  
  predicate resolve'2 (self : uint32) =
    [%#span86] true
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec uint32 (Global'0.t_global)) (ix : int) : uint32 =
    [%#span87] index_logic'1 (shallow_model'0 self) ix
  
  predicate resolve'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span88] forall i : int . 0 <= i /\ i < len'0 (shallow_model'0 self)  -> resolve'2 (index_logic'0 self i)
  
  predicate from_iter_post'0 (prod : Seq'0.t_seq uint32) (res : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span89] prod = shallow_model'0 res
  
  predicate completed'0 (self : borrowed (MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0))
    
   =
    [%#span90] deref'1 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced ( ^ self))
    = (empty'0 : Seq'0.t_seq uint32)
    /\ completed'1 (Borrow.borrow_logic (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( * self)) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( * self)
    = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( ^ self)
  
  predicate resolve'6 (self : borrowed usize) =
    [%#span61]  ^ self =  * self
  
  predicate resolve'4 [#"../03_std_iterators.rs" 48 12 48 91] (_1 : Closure'0.c03stditerators_counter_closure0) =
    resolve'6 (field_0'0 _1)
  
  predicate resolve'3 (self : Iter'0.t_iter uint32) =
    [%#span86] true
  
  predicate resolve'1 (self : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0)
    
   =
    [%#span91] resolve'3 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self)
    /\ resolve'4 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
  
  let rec collect'0 (self:MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0) (return'  (ret:Vec'0.t_vec uint32 (Global'0.t_global)))= {[@expl:precondition] [%#span92] inv'5 self}
    any
    [ return' (result:Vec'0.t_vec uint32 (Global'0.t_global))-> {[%#span94] inv'8 result}
      {[%#span93] exists prod : Seq'0.t_seq uint32 . exists done' : borrowed (MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0) . inv'6 prod
      /\ inv'7 done'
      /\ resolve'1 ( ^ done') /\ completed'0 done' /\ produces'1 self prod ( * done') /\ from_iter_post'0 prod result}
      (! return' {result}) ]
    
  
  let rec map_inv'0 (self:Iter'0.t_iter uint32) (func:Closure'0.c03stditerators_counter_closure0) (return'  (ret:MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0))= {[@expl:precondition] [%#span99] inv'4 func}
    {[@expl:precondition] [%#span98] inv'2 self}
    {[@expl:precondition] [%#span97] preservation'0 self func}
    {[@expl:precondition] [%#span96] reinitialize'0 ()}
    {[@expl:precondition] [%#span95] forall i2 : Iter'0.t_iter uint32 . forall e : uint32 . inv'2 i2
     -> inv'3 e
     -> produces'0 self (singleton'0 e) i2  -> precondition'0 func (e, new'0 (empty'0 : Seq'0.t_seq uint32))}
    any
    [ return' (result:MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0)-> {[%#span101] inv'5 result}
      {[%#span100] result = MapInv'0.C_MapInv self func (new'0 (empty'0 : Seq'0.t_seq uint32))}
      (! return' {result}) ]
    
  
  let rec iter'0 (self:slice uint32) (return'  (ret:Iter'0.t_iter uint32))= {[@expl:precondition] [%#span102] inv'1 self}
    any [ return' (result:Iter'0.t_iter uint32)-> {[%#span103] shallow_model'3 result = self} (! return' {result}) ] 
  
  function shallow_model'2 (self : Vec'0.t_vec uint32 (Global'0.t_global)) : Seq'0.t_seq uint32 =
    [%#span32] shallow_model'0 self
  
  let rec deref'0 (self:Vec'0.t_vec uint32 (Global'0.t_global)) (return'  (ret:slice uint32))= {[@expl:precondition] [%#span104] inv'0 self}
    any
    [ return' (result:slice uint32)-> {[%#span106] inv'1 result}
      {[%#span105] shallow_model'1 result = shallow_model'2 self}
      (! return' {result}) ]
    
  
  let rec counter (v:Vec'0.t_vec uint32 (Global'0.t_global)) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &cnt <- [%#s03_std_iterators0] (0 : usize) ] s1
      | s1 = deref'0 {v} (fun (_ret':slice uint32) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = iter'0 {_7} (fun (_ret':Iter'0.t_iter uint32) ->  [ &_5 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <usize> {cnt} (fun (_ret':borrowed usize) ->  [ &_10 <- _ret' ]  [ &cnt <-  ^ _10 ] s1)
      | s1 =  [ &_9 <- Closure'0.C03stditerators_counter_closure0 _10 ] 
        (any [ any_ (_any:borrowed usize)-> (!  [ &_10 <- _any ] s2) ] )
      | s2 = map_inv'0 {_5} {_9}
          (fun (_ret':MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0) ->
             [ &_4 <- _ret' ] 
            s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = collect'0 {_4} (fun (_ret':Vec'0.t_vec uint32 (Global'0.t_global)) ->  [ &x <- _ret' ] s1) | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = -{resolve'0 v}- s1
      | s1 = -{resolve'0 x}- s2
      | s2 = {[@expl:assertion] [%#s03_std_iterators1] len'0 (shallow_model'0 x) = len'0 (shallow_model'0 v)} s3
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = {[@expl:assertion] [%#s03_std_iterators2] ext_eq'0 (shallow_model'0 x) (shallow_model'0 v)} s1 | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 = {[@expl:assertion] [%#s03_std_iterators3] UIntSize.to_int cnt = len'0 (shallow_model'0 x)} s1 | s1 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v : Vec'0.t_vec uint32 (Global'0.t_global) = v
    | & cnt : usize = any_l ()
    | & x : Vec'0.t_vec uint32 (Global'0.t_global) = any_l ()
    | & _4 : MapInv'0.t_mapinv (Iter'0.t_iter uint32) uint32 Closure'0.c03stditerators_counter_closure0 = any_l ()
    | & _5 : Iter'0.t_iter uint32 = any_l ()
    | & _7 : slice uint32 = any_l ()
    | & _9 : Closure'0.c03stditerators_counter_closure0 = any_l ()
    | & _10 : borrowed usize = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
  
  function any_l (_ : 'b) : 'a
  
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  
  function range_end [@inline:trivial] (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function range_start [@inline:trivial] (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module C03StdIterators_SumRange
  let%span s03_std_iterators0 = "../03_std_iterators.rs" 64 16 64 17
  
  let%span s03_std_iterators1 = "../03_std_iterators.rs" 66 13 66 14
  
  let%span s03_std_iterators2 = "../03_std_iterators.rs" 65 4 65 48
  
  let%span s03_std_iterators3 = "../03_std_iterators.rs" 65 4 65 48
  
  let%span s03_std_iterators4 = "../03_std_iterators.rs" 65 4 65 48
  
  let%span s03_std_iterators5 = "../03_std_iterators.rs" 65 16 65 46
  
  let%span s03_std_iterators6 = "../03_std_iterators.rs" 65 4 65 48
  
  let%span s03_std_iterators7 = "../03_std_iterators.rs" 67 13 67 14
  
  let%span s03_std_iterators8 = "../03_std_iterators.rs" 61 11 61 18
  
  let%span s03_std_iterators9 = "../03_std_iterators.rs" 62 10 62 21
  
  let%span span10 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span18 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span19 = "../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  
  let%span span20 = "../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  
  let%span span21 = "../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  
  let%span span22 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  
  let%span span23 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33
  
  let%span span24 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  
  let%span span25 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63
  
  let%span span26 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  
  let%span span27 = "../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  
  let%span span28 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span29 = "../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  
  let%span span30 = "../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  
  let%span span31 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span32 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span33 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span34 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span35 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span36 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span37 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span38 = "../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  
  let%span span39 = "" 0 0 0 0
  
  let%span span40 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span41 = "" 0 0 0 0
  
  let%span span42 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span43 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span44 = "../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span45 = "../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span46 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span47 = "" 0 0 0 0
  
  let%span span48 = "" 0 0 0 0
  
  use prelude.prelude.IntSize
  
  predicate invariant'4 (self : isize) =
    [%#span10] true
  
  predicate inv'4 (_x : isize)
  
  axiom inv'4 : forall x : isize . inv'4 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option isize) =
    [%#span10] true
  
  predicate inv'3 (_x : Option'0.t_option isize)
  
  axiom inv'3 : forall x : Option'0.t_option isize . inv'3 x = true
  
  use Core_Ops_Range_Range_Type as Range'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Range'0.t_range isize)) =
    [%#span10] true
  
  predicate inv'2 (_x : borrowed (Range'0.t_range isize))
  
  axiom inv'2 : forall x : borrowed (Range'0.t_range isize) . inv'2 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'1 (self : Seq'0.t_seq isize) =
    [%#span10] true
  
  predicate inv'1 (_x : Seq'0.t_seq isize)
  
  axiom inv'1 : forall x : Seq'0.t_seq isize . inv'1 x = true
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  function index_logic'0 (self : Seq'0.t_seq isize) (x : int) : isize
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq isize) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq isize . ([%#span11] inv'1 self)  -> ([%#span12] len'0 self >= 0)
  
  function concat'0 (self : Seq'0.t_seq isize) (other : Seq'0.t_seq isize) : Seq'0.t_seq isize
  
  axiom concat'0_spec : forall self : Seq'0.t_seq isize, other : Seq'0.t_seq isize . ([%#span13] inv'1 self)
   -> ([%#span14] inv'1 other)
   -> ([%#span17] inv'1 (concat'0 self other))
  && ([%#span16] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span15] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  predicate inv'0 (_x : Range'0.t_range isize)
  
  use prelude.prelude.Int
  
  use prelude.prelude.IntSize
  
  function deep_model'0 (self : isize) : int =
    [%#span18] IntSize.to_int self
  
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  
  predicate produces'0 (self : Range'0.t_range isize) (visited : Seq'0.t_seq isize) (o : Range'0.t_range isize) =
    [%#span19] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (len'0 visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ len'0 visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < len'0 visited
     -> deep_model'0 (index_logic'0 visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  
  function produces_trans'0 (a : Range'0.t_range isize) (ab : Seq'0.t_seq isize) (b : Range'0.t_range isize) (bc : Seq'0.t_seq isize) (c : Range'0.t_range isize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_range isize, ab : Seq'0.t_seq isize, b : Range'0.t_range isize, bc : Seq'0.t_seq isize, c : Range'0.t_range isize . ([%#span20] produces'0 a ab b)
   -> ([%#span21] produces'0 b bc c)
   -> ([%#span22] inv'0 a)
   -> ([%#span23] inv'1 ab)
   -> ([%#span24] inv'0 b)
   -> ([%#span25] inv'1 bc)  -> ([%#span26] inv'0 c)  -> ([%#span27] produces'0 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq isize = [%#span28] ()
  
  function produces_refl'0 (self : Range'0.t_range isize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_range isize . ([%#span29] inv'0 self)
   -> ([%#span30] produces'0 self (empty'0 : Seq'0.t_seq isize) self)
  
  predicate invariant'0 (self : Range'0.t_range isize) =
    [%#span10] true
  
  axiom inv'0 : forall x : Range'0.t_range isize . inv'0 x = true
  
  function empty_len'0 (_1 : ()) : () =
    [%#span32] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span31] len'0 (empty'0 : Seq'0.t_seq isize) = 0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  function singleton'0 (v : isize) : Seq'0.t_seq isize
  
  axiom singleton'0_spec : forall v : isize . ([%#span33] inv'4 v)
   -> ([%#span36] inv'1 (singleton'0 v))
  && ([%#span35] index_logic'0 (singleton'0 v) 0 = v) && ([%#span34] len'0 (singleton'0 v) = 1)
  
  predicate resolve'0 (self : borrowed (Range'0.t_range isize)) =
    [%#span37]  ^ self =  * self
  
  predicate completed'0 (self : borrowed (Range'0.t_range isize)) =
    [%#span38] resolve'0 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  
  let rec next'0 (self:borrowed (Range'0.t_range isize)) (return'  (ret:Option'0.t_option isize))= {[@expl:precondition] [%#span39] inv'2 self}
    any
    [ return' (result:Option'0.t_option isize)-> {[%#span41] inv'3 result}
      {[%#span40] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function deref'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq isize)) : Seq'0.t_seq isize
  
  function inner'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq isize)) : Seq'0.t_seq isize
  
  function deref'1 (self : Snapshot'0.t_snapshot (Range'0.t_range isize)) : Range'0.t_range isize
  
  function inner'0 (self : Snapshot'0.t_snapshot (Range'0.t_range isize)) : Range'0.t_range isize
  
  function new'1 (x : Seq'0.t_seq isize) : Snapshot'0.t_snapshot (Seq'0.t_seq isize)
  
  axiom new'1_spec : forall x : Seq'0.t_seq isize . ([%#span42] inv'1 x)  -> ([%#span43] deref'0 (new'1 x) = x)
  
  function new'0 (x : Range'0.t_range isize) : Snapshot'0.t_snapshot (Range'0.t_range isize)
  
  axiom new'0_spec : forall x : Range'0.t_range isize . ([%#span42] inv'0 x)  -> ([%#span43] deref'1 (new'0 x) = x)
  
  predicate into_iter_post'0 (self : Range'0.t_range isize) (res : Range'0.t_range isize) =
    [%#span44] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_range isize) =
    [%#span45] true
  
  let rec into_iter'0 (self:Range'0.t_range isize) (return'  (ret:Range'0.t_range isize))= {[@expl:precondition] [%#span47] inv'0 self}
    {[@expl:precondition] [%#span46] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_range isize)-> {[%#span48] inv'0 result}
      {[%#span46] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec sum_range (n:isize) (return'  (ret:isize))= {[%#s03_std_iterators8] IntSize.to_int n >= 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &i <- [%#s03_std_iterators0] (0 : isize) ] s1
      | s1 =  [ &_7 <- Range'0.C_Range ([%#s03_std_iterators1] (0 : isize)) n ] s2
      | s2 = into_iter'0 {_7} (fun (_ret':Range'0.t_range isize) ->  [ &iter <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#s03_std_iterators2] new'0 iter ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &produced <- [%#s03_std_iterators3] new'1 (empty'0 : Seq'0.t_seq isize) ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [%#s03_std_iterators5] IntSize.to_int i = len'0 (deref'0 produced) /\ i <= n}
        {[@expl:loop invariant] [%#s03_std_iterators4] produces'0 (inner'0 iter_old) (inner'1 produced) iter}
        {[@expl:loop invariant] [%#s03_std_iterators4] inv'0 iter}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_range isize> {iter}
              (fun (_ret':borrowed (Range'0.t_range isize)) ->  [ &_19 <- _ret' ]  [ &iter <-  ^ _19 ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_range isize> { * _19} {Borrow.get_id _19}
              (fun (_ret':borrowed (Range'0.t_range isize)) ->
                 [ &_18 <- _ret' ] 
                 [ &_19 <- { _19 with current = ( ^ _18) ; } ] 
                s2)
          | s2 = next'0 {_18} (fun (_ret':Option'0.t_option isize) ->  [ &_17 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _19}- s1
          | s1 = any [ br0 -> {_17 = Option'0.C_None } (! bb9) | br1 (a:isize)-> {_17 = Option'0.C_Some a} (! bb8) ]  ]
          
        | bb8 = bb10
        | bb10 = s0
          [ s0 = Option'0.some <isize> {_17} (fun (r0'0:isize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_22 <- [%#s03_std_iterators6] new'1 (concat'0 (inner'1 produced) (singleton'0 __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _22 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq isize))-> (!  [ &_22 <- _any ] s1) ] )
          | s1 = IntSize.add {i} {[%#s03_std_iterators7] (1 : isize)} (fun (_ret':isize) ->  [ &i <- _ret' ] s2)
          | s2 = bb4 ]
           ]
         ]
      
    | bb7 = {[%#s03_std_iterators4] false} any
    | bb9 = s0 [ s0 =  [ &_0 <- i ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : isize = any_l ()
    | & n : isize = n
    | & i : isize = any_l ()
    | & iter : Range'0.t_range isize = any_l ()
    | & _7 : Range'0.t_range isize = any_l ()
    | & iter_old : Snapshot'0.t_snapshot (Range'0.t_range isize) = any_l ()
    | & produced : Snapshot'0.t_snapshot (Seq'0.t_seq isize) = any_l ()
    | & _17 : Option'0.t_option isize = any_l ()
    | & _18 : borrowed (Range'0.t_range isize) = any_l ()
    | & _19 : borrowed (Range'0.t_range isize) = any_l ()
    | & __creusot_proc_iter_elem : isize = any_l ()
    | & _22 : Snapshot'0.t_snapshot (Seq'0.t_seq isize) = any_l () ]
     [ return' (result:isize)-> {[@expl:postcondition] [%#s03_std_iterators9] result = n} (! return' {result}) ] 
end
module Core_Iter_Adapters_Enumerate_Enumerate_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_enumerate 'i =
    | C_Enumerate 'i usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_enumerate < 'i > (input:t_enumerate 'i) (ret  (iter:'i) (count:usize))= any
    [ good (iter:'i) (count:usize)-> {C_Enumerate iter count = input} (! ret {iter} {count})
    | bad (iter:'i) (count:usize)-> {C_Enumerate iter count <> input} {false} any ]
    
end
module C03StdIterators_EnumerateRange
  let%span s03_std_iterators0 = "../03_std_iterators.rs" 74 20 74 21
  
  let%span s03_std_iterators1 = "../03_std_iterators.rs" 74 23 74 25
  
  let%span s03_std_iterators2 = "../03_std_iterators.rs" 73 4 73 96
  
  let%span s03_std_iterators3 = "../03_std_iterators.rs" 73 4 73 96
  
  let%span s03_std_iterators4 = "../03_std_iterators.rs" 73 4 73 96
  
  let%span s03_std_iterators5 = "../03_std_iterators.rs" 73 4 73 96
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span17 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span18 = "../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  
  let%span span19 = "../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  
  let%span span20 = "../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  
  let%span span21 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  
  let%span span22 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33
  
  let%span span23 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  
  let%span span24 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63
  
  let%span span25 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  
  let%span span26 = "../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  
  let%span span27 = "../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  
  let%span span28 = "../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  
  let%span span29 = "../../../../../creusot-contracts/src/std/iter/enumerate.rs" 62 8 67 9
  
  let%span span30 = "../../../../../creusot-contracts/src/std/iter/enumerate.rs" 77 15 77 32
  
  let%span span31 = "../../../../../creusot-contracts/src/std/iter/enumerate.rs" 78 15 78 32
  
  let%span span32 = "../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 22 80 23
  
  let%span span33 = "../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 31 80 33
  
  let%span span34 = "../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 52 80 53
  
  let%span span35 = "../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 61 80 63
  
  let%span span36 = "../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 82 80 83
  
  let%span span37 = "../../../../../creusot-contracts/src/std/iter/enumerate.rs" 79 14 79 42
  
  let%span span38 = "../../../../../creusot-contracts/src/std/iter/enumerate.rs" 73 21 73 25
  
  let%span span39 = "../../../../../creusot-contracts/src/std/iter/enumerate.rs" 72 14 72 45
  
  let%span span40 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span41 = "../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  
  let%span span42 = "" 0 0 0 0
  
  let%span span43 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span44 = "../../../../../creusot-contracts/src/std/iter/enumerate.rs" 33 12 33 33
  
  let%span span45 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  let%span span46 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span47 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span48 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span49 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span50 = "../../../../../creusot-contracts/src/std/iter/enumerate.rs" 56 8 56 115
  
  let%span span51 = "" 0 0 0 0
  
  let%span span52 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span53 = "" 0 0 0 0
  
  let%span span54 = "../../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33
  
  let%span span55 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span56 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span57 = "../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span58 = "../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span59 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span60 = "" 0 0 0 0
  
  let%span span61 = "" 0 0 0 0
  
  let%span span62 = "" 0 0 0 0
  
  let%span span63 = "" 0 0 0 0
  
  use prelude.prelude.UIntSize
  
  use Core_Ops_Range_Range_Type as Range'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : borrowed (Range'0.t_range usize)) =
    [%#span6] true
  
  predicate inv'7 (_x : borrowed (Range'0.t_range usize))
  
  axiom inv'7 : forall x : borrowed (Range'0.t_range usize) . inv'7 x = true
  
  predicate invariant'6 (self : (usize, usize)) =
    [%#span6] true
  
  predicate inv'6 (_x : (usize, usize))
  
  axiom inv'6 : forall x : (usize, usize) . inv'6 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'5 (self : Option'0.t_option (usize, usize)) =
    [%#span6] true
  
  predicate inv'5 (_x : Option'0.t_option (usize, usize))
  
  axiom inv'5 : forall x : Option'0.t_option (usize, usize) . inv'5 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate inv'4 (_x : Seq'0.t_seq usize)
  
  function len'1 (self : Seq'0.t_seq usize) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq usize . ([%#span7] inv'4 self)  -> ([%#span8] len'1 self >= 0)
  
  constant empty'1 : Seq'0.t_seq usize = [%#span9] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span11] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span10] len'1 (empty'1 : Seq'0.t_seq usize) = 0
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'2 (self : Seq'0.t_seq usize) (x : int) : usize
  
  function concat'1 (self : Seq'0.t_seq usize) (other : Seq'0.t_seq usize) : Seq'0.t_seq usize
  
  axiom concat'1_spec : forall self : Seq'0.t_seq usize, other : Seq'0.t_seq usize . ([%#span12] inv'4 self)
   -> ([%#span13] inv'4 other)
   -> ([%#span16] inv'4 (concat'1 self other))
  && ([%#span15] forall i : int . 0 <= i /\ i < len'1 (concat'1 self other)
   -> index_logic'2 (concat'1 self other) i
  = (if i < len'1 self then index_logic'2 self i else index_logic'2 other (i - len'1 self)))
  && ([%#span14] len'1 (concat'1 self other) = len'1 self + len'1 other)
  
  predicate inv'2 (_x : Range'0.t_range usize)
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  function deep_model'0 (self : usize) : int =
    [%#span17] UIntSize.to_int self
  
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  
  predicate produces'1 (self : Range'0.t_range usize) (visited : Seq'0.t_seq usize) (o : Range'0.t_range usize) =
    [%#span18] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (len'1 visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ len'1 visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < len'1 visited
     -> deep_model'0 (index_logic'2 visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  
  function produces_trans'1 (a : Range'0.t_range usize) (ab : Seq'0.t_seq usize) (b : Range'0.t_range usize) (bc : Seq'0.t_seq usize) (c : Range'0.t_range usize) : ()
    
  
  axiom produces_trans'1_spec : forall a : Range'0.t_range usize, ab : Seq'0.t_seq usize, b : Range'0.t_range usize, bc : Seq'0.t_seq usize, c : Range'0.t_range usize . ([%#span19] produces'1 a ab b)
   -> ([%#span20] produces'1 b bc c)
   -> ([%#span21] inv'2 a)
   -> ([%#span22] inv'4 ab)
   -> ([%#span23] inv'2 b)
   -> ([%#span24] inv'4 bc)  -> ([%#span25] inv'2 c)  -> ([%#span26] produces'1 a (concat'1 ab bc) c)
  
  function produces_refl'1 (self : Range'0.t_range usize) : ()
  
  axiom produces_refl'1_spec : forall self : Range'0.t_range usize . ([%#span27] inv'2 self)
   -> ([%#span28] produces'1 self (empty'1 : Seq'0.t_seq usize) self)
  
  predicate invariant'4 (self : Seq'0.t_seq usize) =
    [%#span6] true
  
  axiom inv'4 : forall x : Seq'0.t_seq usize . inv'4 x = true
  
  predicate invariant'3 (self : Seq'0.t_seq (usize, usize)) =
    [%#span6] true
  
  predicate inv'3 (_x : Seq'0.t_seq (usize, usize))
  
  axiom inv'3 : forall x : Seq'0.t_seq (usize, usize) . inv'3 x = true
  
  predicate invariant'2 (self : Range'0.t_range usize) =
    [%#span6] true
  
  axiom inv'2 : forall x : Range'0.t_range usize . inv'2 x = true
  
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Enumerate'0
  
  predicate invariant'1 (self : borrowed (Enumerate'0.t_enumerate (Range'0.t_range usize))) =
    [%#span6] true
  
  predicate inv'0 (_x : Enumerate'0.t_enumerate (Range'0.t_range usize))
  
  predicate inv'1 (_x : borrowed (Enumerate'0.t_enumerate (Range'0.t_range usize)))
  
  axiom inv'1 : forall x : borrowed (Enumerate'0.t_enumerate (Range'0.t_range usize)) . inv'1 x
  = (inv'0 ( * x) /\ inv'0 ( ^ x))
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq (usize, usize)) (x : int) : (usize, usize)
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq (usize, usize)) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq (usize, usize) . ([%#span7] inv'3 self)  -> ([%#span8] len'0 self >= 0)
  
  function concat'0 (self : Seq'0.t_seq (usize, usize)) (other : Seq'0.t_seq (usize, usize)) : Seq'0.t_seq (usize, usize)
    
  
  axiom concat'0_spec : forall self : Seq'0.t_seq (usize, usize), other : Seq'0.t_seq (usize, usize) . ([%#span12] inv'3 self)
   -> ([%#span13] inv'3 other)
   -> ([%#span16] inv'3 (concat'0 self other))
  && ([%#span15] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'1 (concat'0 self other) i
  = (if i < len'0 self then index_logic'1 self i else index_logic'1 other (i - len'0 self)))
  && ([%#span14] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  function iter'0 (self : Enumerate'0.t_enumerate (Range'0.t_range usize)) : Range'0.t_range usize
  
  function n'0 (self : Enumerate'0.t_enumerate (Range'0.t_range usize)) : int
  
  predicate produces'0 (self : Enumerate'0.t_enumerate (Range'0.t_range usize)) (visited : Seq'0.t_seq (usize, usize)) (o : Enumerate'0.t_enumerate (Range'0.t_range usize))
    
   =
    [%#span29] len'0 visited = n'0 o - n'0 self
    /\ (exists s : Seq'0.t_seq usize . inv'4 s
    /\ produces'1 (iter'0 self) s (iter'0 o)
    /\ len'0 visited = len'1 s
    /\ (forall i : int . 0 <= i /\ i < len'1 s
     -> UIntSize.to_int (let (a, _) = index_logic'1 visited i in a) = n'0 self + i
    /\ (let (_, a) = index_logic'1 visited i in a) = index_logic'2 s i))
  
  function produces_trans'0 (a : Enumerate'0.t_enumerate (Range'0.t_range usize)) (ab : Seq'0.t_seq (usize, usize)) (b : Enumerate'0.t_enumerate (Range'0.t_range usize)) (bc : Seq'0.t_seq (usize, usize)) (c : Enumerate'0.t_enumerate (Range'0.t_range usize)) : ()
    
  
  axiom produces_trans'0_spec : forall a : Enumerate'0.t_enumerate (Range'0.t_range usize), ab : Seq'0.t_seq (usize, usize), b : Enumerate'0.t_enumerate (Range'0.t_range usize), bc : Seq'0.t_seq (usize, usize), c : Enumerate'0.t_enumerate (Range'0.t_range usize) . ([%#span30] produces'0 a ab b)
   -> ([%#span31] produces'0 b bc c)
   -> ([%#span32] inv'0 a)
   -> ([%#span33] inv'3 ab)
   -> ([%#span34] inv'0 b)
   -> ([%#span35] inv'3 bc)  -> ([%#span36] inv'0 c)  -> ([%#span37] produces'0 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq (usize, usize) = [%#span9] ()
  
  function produces_refl'0 (self : Enumerate'0.t_enumerate (Range'0.t_range usize)) : ()
  
  axiom produces_refl'0_spec : forall self : Enumerate'0.t_enumerate (Range'0.t_range usize) . ([%#span38] inv'0 self)
   -> ([%#span39] produces'0 self (empty'0 : Seq'0.t_seq (usize, usize)) self)
  
  predicate resolve'5 (self : borrowed (Range'0.t_range usize)) =
    [%#span40]  ^ self =  * self
  
  predicate completed'1 (self : borrowed (Range'0.t_range usize)) =
    [%#span41] resolve'5 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  
  constant max'0 : usize = [%#span42] (18446744073709551615 : usize)
  
  predicate invariant'0 (self : Enumerate'0.t_enumerate (Range'0.t_range usize))
  
  axiom inv'0 : forall x : Enumerate'0.t_enumerate (Range'0.t_range usize) . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> true
    end)
  
  function empty_len'0 (_1 : ()) : () =
    [%#span11] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span10] len'0 (empty'0 : Seq'0.t_seq (usize, usize)) = 0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'4 (self : Range'0.t_range usize) =
    [%#span43] true
  
  predicate resolve'2 (self : Enumerate'0.t_enumerate (Range'0.t_range usize)) =
    [%#span44] resolve'4 (iter'0 self)
  
  predicate resolve'3 (self : usize) =
    [%#span43] true
  
  predicate resolve'1 (self : (usize, usize)) =
    [%#span45] resolve'3 (let (a, _) = self in a) /\ resolve'3 (let (_, a) = self in a)
  
  use seq.Seq
  
  function singleton'0 (v : (usize, usize)) : Seq'0.t_seq (usize, usize)
  
  axiom singleton'0_spec : forall v : (usize, usize) . ([%#span46] inv'6 v)
   -> ([%#span49] inv'3 (singleton'0 v))
  && ([%#span48] index_logic'1 (singleton'0 v) 0 = v) && ([%#span47] len'0 (singleton'0 v) = 1)
  
  predicate resolve'0 (self : borrowed (Enumerate'0.t_enumerate (Range'0.t_range usize))) =
    [%#span40]  ^ self =  * self
  
  predicate completed'0 (self : borrowed (Enumerate'0.t_enumerate (Range'0.t_range usize))) =
    [%#span50] exists inner : borrowed (Range'0.t_range usize) . inv'7 inner
    /\  * inner = iter'0 ( * self) /\  ^ inner = iter'0 ( ^ self) /\ completed'1 inner
  
  let rec next'0 (self:borrowed (Enumerate'0.t_enumerate (Range'0.t_range usize))) (return'  (ret:Option'0.t_option (usize, usize)))= {[@expl:precondition] [%#span51] inv'1 self}
    any
    [ return' (result:Option'0.t_option (usize, usize))-> {[%#span53] inv'5 result}
      {[%#span52] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function deref'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq (usize, usize))) : Seq'0.t_seq (usize, usize)
  
  function index_logic'0 [@inline:trivial] (self : Snapshot'0.t_snapshot (Seq'0.t_seq (usize, usize))) (ix : int) : (usize, usize)
    
   =
    [%#span54] index_logic'1 (deref'0 self) ix
  
  function inner'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq (usize, usize))) : Seq'0.t_seq (usize, usize)
  
  function deref'1 (self : Snapshot'0.t_snapshot (Enumerate'0.t_enumerate (Range'0.t_range usize))) : Enumerate'0.t_enumerate (Range'0.t_range usize)
    
  
  function inner'0 (self : Snapshot'0.t_snapshot (Enumerate'0.t_enumerate (Range'0.t_range usize))) : Enumerate'0.t_enumerate (Range'0.t_range usize)
    
  
  function new'1 (x : Seq'0.t_seq (usize, usize)) : Snapshot'0.t_snapshot (Seq'0.t_seq (usize, usize))
  
  axiom new'1_spec : forall x : Seq'0.t_seq (usize, usize) . ([%#span55] inv'3 x)  -> ([%#span56] deref'0 (new'1 x) = x)
  
  function new'0 (x : Enumerate'0.t_enumerate (Range'0.t_range usize)) : Snapshot'0.t_snapshot (Enumerate'0.t_enumerate (Range'0.t_range usize))
    
  
  axiom new'0_spec : forall x : Enumerate'0.t_enumerate (Range'0.t_range usize) . ([%#span55] inv'0 x)
   -> ([%#span56] deref'1 (new'0 x) = x)
  
  predicate into_iter_post'0 (self : Enumerate'0.t_enumerate (Range'0.t_range usize)) (res : Enumerate'0.t_enumerate (Range'0.t_range usize))
    
   =
    [%#span57] self = res
  
  predicate into_iter_pre'0 (self : Enumerate'0.t_enumerate (Range'0.t_range usize)) =
    [%#span58] true
  
  let rec into_iter'0 (self:Enumerate'0.t_enumerate (Range'0.t_range usize)) (return'  (ret:Enumerate'0.t_enumerate (Range'0.t_range usize)))= {[@expl:precondition] [%#span60] inv'0 self}
    {[@expl:precondition] [%#span59] into_iter_pre'0 self}
    any
    [ return' (result:Enumerate'0.t_enumerate (Range'0.t_range usize))-> {[%#span61] inv'0 result}
      {[%#span59] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec enumerate'0 (self:Range'0.t_range usize) (return'  (ret:Enumerate'0.t_enumerate (Range'0.t_range usize)))= {[@expl:precondition] [%#span62] inv'2 self}
    any
    [ return' (result:Enumerate'0.t_enumerate (Range'0.t_range usize))-> {[%#span63] inv'0 result}
      {[%#span59] iter'0 result = self /\ n'0 result = 0}
      (! return' {result}) ]
    
  
  let rec enumerate_range (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- Range'0.C_Range ([%#s03_std_iterators0] (0 : usize)) ([%#s03_std_iterators1] (10 : usize)) ] s1
      | s1 = enumerate'0 {_3} (fun (_ret':Enumerate'0.t_enumerate (Range'0.t_range usize)) ->  [ &_2 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = into_iter'0 {_2} (fun (_ret':Enumerate'0.t_enumerate (Range'0.t_range usize)) ->  [ &iter <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#s03_std_iterators2] new'0 iter ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &produced <- [%#s03_std_iterators3] new'1 (empty'0 : Seq'0.t_seq (usize, usize)) ] s1 | s1 = bb4 ]
      
    | bb4 = bb5
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [%#s03_std_iterators4] forall i : int . 0 <= i /\ i < len'0 (deref'0 produced)
         -> (let (a, _) = index_logic'0 produced i in a) = (let (_, a) = index_logic'0 produced i in a)}
        {[@expl:loop invariant] [%#s03_std_iterators4] produces'0 (inner'0 iter_old) (inner'1 produced) iter}
        {[@expl:loop invariant] [%#s03_std_iterators4] inv'0 iter}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = Borrow.borrow_mut <Enumerate'0.t_enumerate (Range'0.t_range usize)> {iter}
              (fun (_ret':borrowed (Enumerate'0.t_enumerate (Range'0.t_range usize))) ->
                 [ &_14 <- _ret' ] 
                 [ &iter <-  ^ _14 ] 
                s1)
          | s1 = -{inv'0 ( ^ _14)}- s2
          | s2 = Borrow.borrow_final <Enumerate'0.t_enumerate (Range'0.t_range usize)> { * _14} {Borrow.get_id _14}
              (fun (_ret':borrowed (Enumerate'0.t_enumerate (Range'0.t_range usize))) ->
                 [ &_13 <- _ret' ] 
                 [ &_14 <- { _14 with current = ( ^ _13) ; } ] 
                s3)
          | s3 = -{inv'0 ( ^ _13)}- s4
          | s4 = next'0 {_13} (fun (_ret':Option'0.t_option (usize, usize)) ->  [ &_12 <- _ret' ] s5)
          | s5 = bb7 ]
          
        | bb7 = s0
          [ s0 = {[@expl:type invariant] inv'1 _14} s1
          | s1 = -{resolve'0 _14}- s2
          | s2 = any
            [ br0 -> {_12 = Option'0.C_None } (! bb10) | br1 (a:(usize, usize))-> {_12 = Option'0.C_Some a} (! bb9) ]
             ]
          
        | bb9 = bb11
        | bb11 = s0
          [ s0 = Option'0.some <(usize, usize)> {_12}
              (fun (r0'0:(usize, usize)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_17 <- [%#s03_std_iterators5] new'1 (concat'0 (inner'1 produced) (singleton'0 __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &produced <- _17 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq (usize, usize)))-> (!  [ &_17 <- _any ] s1) ] )
          | s1 =  [ &ix <- let (r'0, _) = __creusot_proc_iter_elem in r'0 ] s2
          | s2 =  [ &x <- let (_, r'1) = __creusot_proc_iter_elem in r'1 ] s3
          | s3 = -{resolve'1 __creusot_proc_iter_elem}- s4
          | s4 =  [ &_21 <- (ix, x) ] s5
          | s5 = -{resolve'1 _21}- s6
          | s6 = bb5 ]
           ]
         ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'0 iter} s1
      | s1 = -{resolve'2 iter}- s2
      | s2 = {[%#s03_std_iterators4] false} any ]
      
    | bb10 = s0 [ s0 = {[@expl:type invariant] inv'0 iter} s1 | s1 = -{resolve'2 iter}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & iter : Enumerate'0.t_enumerate (Range'0.t_range usize) = any_l ()
    | & _2 : Enumerate'0.t_enumerate (Range'0.t_range usize) = any_l ()
    | & _3 : Range'0.t_range usize = any_l ()
    | & iter_old : Snapshot'0.t_snapshot (Enumerate'0.t_enumerate (Range'0.t_range usize)) = any_l ()
    | & produced : Snapshot'0.t_snapshot (Seq'0.t_seq (usize, usize)) = any_l ()
    | & _12 : Option'0.t_option (usize, usize) = any_l ()
    | & _13 : borrowed (Enumerate'0.t_enumerate (Range'0.t_range usize)) = any_l ()
    | & _14 : borrowed (Enumerate'0.t_enumerate (Range'0.t_range usize)) = any_l ()
    | & __creusot_proc_iter_elem : (usize, usize) = any_l ()
    | & _17 : Snapshot'0.t_snapshot (Seq'0.t_seq (usize, usize)) = any_l ()
    | & ix : usize = any_l ()
    | & x : usize = any_l ()
    | & _21 : (usize, usize) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Core_Iter_Adapters_Zip_Zip_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_zip 'a 'b =
    | C_Zip 'a 'b usize usize usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_zip < 'a > < 'b > (input:t_zip 'a 'b) (ret  (a:'a) (b:'b) (index:usize) (len:usize) (a_len:usize))= any
    [ good (a:'a) (b:'b) (index:usize) (len:usize) (a_len:usize)-> {C_Zip a b index len a_len = input}
      (! ret {a} {b} {index} {len} {a_len})
    | bad (a:'a) (b:'b) (index:usize) (len:usize) (a_len:usize)-> {C_Zip a b index len a_len <> input} {false} any ]
    
end
module C03StdIterators_MyReverse
  type t
  
  let%span s03_std_iterators0 = "../03_std_iterators.rs" 96 36 96 55
  
  let%span s03_std_iterators1 = "../03_std_iterators.rs" 102 26 102 27
  
  let%span s03_std_iterators2 = "../03_std_iterators.rs" 102 22 102 27
  
  let%span s03_std_iterators3 = "../03_std_iterators.rs" 102 19 102 20
  
  let%span s03_std_iterators4 = "../03_std_iterators.rs" 102 40 102 41
  
  let%span s03_std_iterators5 = "../03_std_iterators.rs" 102 36 102 41
  
  let%span s03_std_iterators6 = "../03_std_iterators.rs" 102 33 102 34
  
  let%span s03_std_iterators7 = "../03_std_iterators.rs" 97 4 97 35
  
  let%span s03_std_iterators8 = "../03_std_iterators.rs" 97 4 97 35
  
  let%span s03_std_iterators9 = "../03_std_iterators.rs" 97 4 97 35
  
  let%span s03_std_iterators10 = "../03_std_iterators.rs" 97 16 97 33
  
  let%span s03_std_iterators11 = "../03_std_iterators.rs" 98 16 98 34
  
  let%span s03_std_iterators12 = "../03_std_iterators.rs" 99 16 99 78
  
  let%span s03_std_iterators13 = "../03_std_iterators.rs" 100 16 100 76
  
  let%span s03_std_iterators14 = "../03_std_iterators.rs" 101 16 101 80
  
  let%span s03_std_iterators15 = "../03_std_iterators.rs" 97 4 97 35
  
  let%span s03_std_iterators16 = "../03_std_iterators.rs" 103 30 103 31
  
  let%span s03_std_iterators17 = "../03_std_iterators.rs" 104 22 104 52
  
  let%span s03_std_iterators18 = "../03_std_iterators.rs" 94 21 94 26
  
  let%span s03_std_iterators19 = "../03_std_iterators.rs" 93 0 93 46
  
  let%span span20 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span21 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span22 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span23 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span24 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span25 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span26 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span27 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span28 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span29 = "../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  
  let%span span30 = "../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  
  let%span span31 = "../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  
  let%span span32 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  
  let%span span33 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33
  
  let%span span34 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  
  let%span span35 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63
  
  let%span span36 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  
  let%span span37 = "../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  
  let%span span38 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span39 = "../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  
  let%span span40 = "../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  
  let%span span41 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span42 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span43 = "../../../../../creusot-contracts/src/std/iter/zip.rs" 44 8 50 9
  
  let%span span44 = "../../../../../creusot-contracts/src/std/iter/zip.rs" 60 15 60 32
  
  let%span span45 = "../../../../../creusot-contracts/src/std/iter/zip.rs" 61 15 61 32
  
  let%span span46 = "../../../../../creusot-contracts/src/std/iter/zip.rs" 63 22 63 23
  
  let%span span47 = "../../../../../creusot-contracts/src/std/iter/zip.rs" 63 31 63 33
  
  let%span span48 = "../../../../../creusot-contracts/src/std/iter/zip.rs" 63 52 63 53
  
  let%span span49 = "../../../../../creusot-contracts/src/std/iter/zip.rs" 63 61 63 63
  
  let%span span50 = "../../../../../creusot-contracts/src/std/iter/zip.rs" 63 82 63 83
  
  let%span span51 = "../../../../../creusot-contracts/src/std/iter/zip.rs" 62 14 62 42
  
  let%span span52 = "../../../../../creusot-contracts/src/std/iter/zip.rs" 56 21 56 25
  
  let%span span53 = "../../../../../creusot-contracts/src/std/iter/zip.rs" 55 14 55 45
  
  let%span span54 = "../../../../../creusot-contracts/src/logic/seq2.rs" 91 18 91 22
  
  let%span span55 = "../../../../../creusot-contracts/src/logic/seq2.rs" 91 24 91 27
  
  let%span span56 = "../../../../../creusot-contracts/src/logic/seq2.rs" 88 4 88 38
  
  let%span span57 = "../../../../../creusot-contracts/src/logic/seq2.rs" 89 4 90 81
  
  let%span span58 = "../../../../../creusot-contracts/src/logic/seq2.rs" 115 19 115 23
  
  let%span span59 = "../../../../../creusot-contracts/src/logic/seq2.rs" 113 14 113 40
  
  let%span span60 = "../../../../../creusot-contracts/src/logic/seq2.rs" 114 4 114 100
  
  let%span span61 = "../../../../../creusot-contracts/src/logic/seq2.rs" 115 4 115 32
  
  let%span span62 = "" 0 0 0 0
  
  let%span span63 = "../../../../../creusot-contracts/src/std/slice.rs" 18 21 18 25
  
  let%span span64 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span65 = "../../../../../creusot-contracts/src/std/slice.rs" 18 4 18 50
  
  let%span span66 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span67 = "../../../../../creusot-contracts/src/logic/ops.rs" 54 8 54 32
  
  let%span span68 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span69 = "../../../../../creusot-contracts/src/logic/seq2.rs" 134 8 141 110
  
  let%span span70 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span71 = "../../../../../creusot-contracts/src/std/slice.rs" 235 19 235 35
  
  let%span span72 = "../../../../../creusot-contracts/src/std/slice.rs" 236 19 236 35
  
  let%span span73 = "" 0 0 0 0
  
  let%span span74 = "../../../../../creusot-contracts/src/std/slice.rs" 237 8 237 52
  
  let%span span75 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span76 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  let%span span77 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span78 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span79 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span80 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span81 = "../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  
  let%span span82 = "../../../../../creusot-contracts/src/std/iter/zip.rs" 31 8 38 9
  
  let%span span83 = "" 0 0 0 0
  
  let%span span84 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span85 = "" 0 0 0 0
  
  let%span span86 = "../03_std_iterators.rs" 88 4 90 5
  
  let%span span87 = "../03_std_iterators.rs" 81 4 83 5
  
  let%span span88 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span89 = "../../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48
  
  let%span span90 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span91 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span92 = "../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span93 = "../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span94 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span95 = "" 0 0 0 0
  
  let%span span96 = "" 0 0 0 0
  
  let%span span97 = "../../../../../creusot-contracts/src/std/iter.rs" 129 27 129 48
  
  let%span span98 = "" 0 0 0 0
  
  let%span span99 = "" 0 0 0 0
  
  let%span span100 = "../../../../../creusot-contracts/src/std/iter.rs" 131 26 131 62
  
  let%span span101 = "" 0 0 0 0
  
  let%span span102 = "" 0 0 0 0
  
  let%span span103 = "../../../../../creusot-contracts/src/std/slice.rs" 223 0 332 1
  
  use prelude.prelude.UIntSize
  
  predicate invariant'12 (self : usize) =
    [%#span20] true
  
  predicate inv'12 (_x : usize)
  
  axiom inv'12 : forall x : usize . inv'12 x = true
  
  use Core_Ops_Range_Range_Type as Range'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'11 (self : borrowed (Range'0.t_range usize)) =
    [%#span20] true
  
  predicate inv'11 (_x : borrowed (Range'0.t_range usize))
  
  axiom inv'11 : forall x : borrowed (Range'0.t_range usize) . inv'11 x = true
  
  predicate invariant'10 (self : (usize, usize)) =
    [%#span20] true
  
  predicate inv'10 (_x : (usize, usize))
  
  axiom inv'10 : forall x : (usize, usize) . inv'10 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'9 (self : Option'0.t_option (usize, usize)) =
    [%#span20] true
  
  predicate inv'9 (_x : Option'0.t_option (usize, usize))
  
  axiom inv'9 : forall x : Option'0.t_option (usize, usize) . inv'9 x = true
  
  use Core_Iter_Adapters_Zip_Zip_Type as Zip'0
  
  predicate invariant'8 (self : borrowed (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))) =
    [%#span20] true
  
  predicate inv'8 (_x : borrowed (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)))
  
  axiom inv'8 : forall x : borrowed (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) . inv'8 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'7 (self : Seq'0.t_seq t)
  
  predicate inv'7 (_x : Seq'0.t_seq t)
  
  axiom inv'7 : forall x : Seq'0.t_seq t . inv'7 x = true
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  function index_logic'3 (self : Seq'0.t_seq usize) (x : int) : usize
  
  use seq.Seq
  
  predicate inv'6 (_x : Seq'0.t_seq usize)
  
  function len'3 (self : Seq'0.t_seq usize) : int
  
  axiom len'3_spec : forall self : Seq'0.t_seq usize . ([%#span21] inv'6 self)  -> ([%#span22] len'3 self >= 0)
  
  function concat'1 (self : Seq'0.t_seq usize) (other : Seq'0.t_seq usize) : Seq'0.t_seq usize
  
  axiom concat'1_spec : forall self : Seq'0.t_seq usize, other : Seq'0.t_seq usize . ([%#span23] inv'6 self)
   -> ([%#span24] inv'6 other)
   -> ([%#span27] inv'6 (concat'1 self other))
  && ([%#span26] forall i : int . 0 <= i /\ i < len'3 (concat'1 self other)
   -> index_logic'3 (concat'1 self other) i
  = (if i < len'3 self then index_logic'3 self i else index_logic'3 other (i - len'3 self)))
  && ([%#span25] len'3 (concat'1 self other) = len'3 self + len'3 other)
  
  predicate inv'4 (_x : Range'0.t_range usize)
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  function deep_model'0 (self : usize) : int =
    [%#span28] UIntSize.to_int self
  
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  
  predicate produces'1 (self : Range'0.t_range usize) (visited : Seq'0.t_seq usize) (o : Range'0.t_range usize) =
    [%#span29] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (len'3 visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ len'3 visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < len'3 visited
     -> deep_model'0 (index_logic'3 visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  
  function produces_trans'1 (a : Range'0.t_range usize) (ab : Seq'0.t_seq usize) (b : Range'0.t_range usize) (bc : Seq'0.t_seq usize) (c : Range'0.t_range usize) : ()
    
  
  axiom produces_trans'1_spec : forall a : Range'0.t_range usize, ab : Seq'0.t_seq usize, b : Range'0.t_range usize, bc : Seq'0.t_seq usize, c : Range'0.t_range usize . ([%#span30] produces'1 a ab b)
   -> ([%#span31] produces'1 b bc c)
   -> ([%#span32] inv'4 a)
   -> ([%#span33] inv'6 ab)
   -> ([%#span34] inv'4 b)
   -> ([%#span35] inv'6 bc)  -> ([%#span36] inv'4 c)  -> ([%#span37] produces'1 a (concat'1 ab bc) c)
  
  constant empty'2 : Seq'0.t_seq usize = [%#span38] ()
  
  function produces_refl'1 (self : Range'0.t_range usize) : ()
  
  axiom produces_refl'1_spec : forall self : Range'0.t_range usize . ([%#span39] inv'4 self)
   -> ([%#span40] produces'1 self (empty'2 : Seq'0.t_seq usize) self)
  
  function empty_len'2 (_1 : ()) : () =
    [%#span42] ()
  
  axiom empty_len'2_spec : forall _1 : () . [%#span41] len'3 (empty'2 : Seq'0.t_seq usize) = 0
  
  predicate invariant'6 (self : Seq'0.t_seq usize) =
    [%#span20] true
  
  axiom inv'6 : forall x : Seq'0.t_seq usize . inv'6 x = true
  
  predicate invariant'5 (self : Seq'0.t_seq (usize, usize)) =
    [%#span20] true
  
  predicate inv'5 (_x : Seq'0.t_seq (usize, usize))
  
  axiom inv'5 : forall x : Seq'0.t_seq (usize, usize) . inv'5 x = true
  
  predicate invariant'4 (self : Range'0.t_range usize) =
    [%#span20] true
  
  axiom inv'4 : forall x : Range'0.t_range usize . inv'4 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'3 (self : slice t)
  
  predicate inv'3 (_x : slice t)
  
  axiom inv'3 : forall x : slice t . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (slice t))
  
  predicate inv'2 (_x : borrowed (slice t))
  
  axiom inv'2 : forall x : borrowed (slice t) . inv'2 x = true
  
  predicate invariant'1 (self : slice t)
  
  predicate inv'1 (_x : slice t)
  
  axiom inv'1 : forall x : slice t . inv'1 x = true
  
  use seq.Seq
  
  function len'1 (self : Seq'0.t_seq t) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq t . ([%#span21] inv'7 self)  -> ([%#span22] len'1 self >= 0)
  
  constant empty'1 : Seq'0.t_seq t = [%#span38] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span42] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span41] len'1 (empty'1 : Seq'0.t_seq t) = 0
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'2 (self : Seq'0.t_seq (usize, usize)) (x : int) : (usize, usize)
  
  use seq.Seq
  
  function len'2 (self : Seq'0.t_seq (usize, usize)) : int
  
  axiom len'2_spec : forall self : Seq'0.t_seq (usize, usize) . ([%#span21] inv'5 self)  -> ([%#span22] len'2 self >= 0)
  
  function concat'0 (self : Seq'0.t_seq (usize, usize)) (other : Seq'0.t_seq (usize, usize)) : Seq'0.t_seq (usize, usize)
    
  
  axiom concat'0_spec : forall self : Seq'0.t_seq (usize, usize), other : Seq'0.t_seq (usize, usize) . ([%#span23] inv'5 self)
   -> ([%#span24] inv'5 other)
   -> ([%#span27] inv'5 (concat'0 self other))
  && ([%#span26] forall i : int . 0 <= i /\ i < len'2 (concat'0 self other)
   -> index_logic'2 (concat'0 self other) i
  = (if i < len'2 self then index_logic'2 self i else index_logic'2 other (i - len'2 self)))
  && ([%#span25] len'2 (concat'0 self other) = len'2 self + len'2 other)
  
  predicate inv'0 (_x : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))
  
  function iterb'0 (self : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) : Range'0.t_range usize
  
  function itera'0 (self : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) : Range'0.t_range usize
  
  predicate produces'0 (self : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) (visited : Seq'0.t_seq (usize, usize)) (o : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))
    
   =
    [%#span43] exists p2 : Seq'0.t_seq usize . exists p1 : Seq'0.t_seq usize . inv'6 p2
    /\ inv'6 p1
    /\ len'3 p1 = len'3 p2
    /\ len'3 p2 = len'2 visited
    /\ (forall i : int . 0 <= i /\ i < len'2 visited
     -> index_logic'2 visited i = (index_logic'3 p1 i, index_logic'3 p2 i))
    /\ produces'1 (itera'0 self) p1 (itera'0 o) /\ produces'1 (iterb'0 self) p2 (iterb'0 o)
  
  function produces_trans'0 (a : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) (ab : Seq'0.t_seq (usize, usize)) (b : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) (bc : Seq'0.t_seq (usize, usize)) (c : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) : ()
    
  
  axiom produces_trans'0_spec : forall a : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize), ab : Seq'0.t_seq (usize, usize), b : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize), bc : Seq'0.t_seq (usize, usize), c : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize) . ([%#span44] produces'0 a ab b)
   -> ([%#span45] produces'0 b bc c)
   -> ([%#span46] inv'0 a)
   -> ([%#span47] inv'5 ab)
   -> ([%#span48] inv'0 b)
   -> ([%#span49] inv'5 bc)  -> ([%#span50] inv'0 c)  -> ([%#span51] produces'0 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq (usize, usize) = [%#span38] ()
  
  function produces_refl'0 (self : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) : ()
  
  axiom produces_refl'0_spec : forall self : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize) . ([%#span52] inv'0 self)
   -> ([%#span53] produces'0 self (empty'0 : Seq'0.t_seq (usize, usize)) self)
  
  predicate invariant'0 (self : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) =
    [%#span20] true
  
  axiom inv'0 : forall x : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize) . inv'0 x = true
  
  function empty_len'0 (_1 : ()) : () =
    [%#span42] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span41] len'2 (empty'0 : Seq'0.t_seq (usize, usize)) = 0
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'4 (self : Seq'0.t_seq t) (x : int) : t
  
  predicate ext_eq'0 (self : Seq'0.t_seq t) (oth : Seq'0.t_seq t)
  
  axiom ext_eq'0_spec : forall self : Seq'0.t_seq t, oth : Seq'0.t_seq t . ([%#span54] inv'7 self)
   -> ([%#span55] inv'7 oth)
   -> ([%#span57] len'1 self = len'1 oth
  /\ (forall i : int . 0 <= i /\ i < len'1 self  -> index_logic'4 self i = index_logic'4 oth i)  -> ext_eq'0 self oth)
  && ([%#span56] ext_eq'0 self oth  -> self = oth)
  
  use seq.Reverse
  
  function reverse'0 (self : Seq'0.t_seq t) : Seq'0.t_seq t
  
  axiom reverse'0_spec : forall self : Seq'0.t_seq t . ([%#span58] inv'7 self)
   -> ([%#span61] inv'7 (reverse'0 self))
  && ([%#span60] forall i : int . 0 <= i /\ i < len'1 (reverse'0 self)
   -> index_logic'4 (reverse'0 self) i = index_logic'4 self (len'1 self - 1 - i))
  && ([%#span59] len'1 (reverse'0 self) = len'1 self)
  
  constant max'0 : usize = [%#span62] (18446744073709551615 : usize)
  
  function shallow_model'2 (self : slice t) : Seq'0.t_seq t
  
  axiom shallow_model'2_spec : forall self : slice t . ([%#span63] inv'1 self)
   -> ([%#span65] inv'7 (shallow_model'2 self))
  && ([%#span64] len'1 (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (slice t)) =
    [%#span66]  ^ self =  * self
  
  function index_logic'1 [@inline:trivial] (self : slice t) (ix : usize) : t =
    [%#span67] index_logic'4 (shallow_model'2 self) (UIntSize.to_int ix)
  
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#span68] index_logic'4 (shallow_model'2 self) ix
  
  predicate exchange'0 (self : Seq'0.t_seq t) (oth : Seq'0.t_seq t) (i : int) (j : int) =
    [%#span69] len'1 self = len'1 oth
    /\ 0 <= i
    /\ i < len'1 self
    /\ 0 <= j
    /\ j < len'1 self
    /\ index_logic'4 self i = index_logic'4 oth j
    /\ index_logic'4 self j = index_logic'4 oth i
    /\ (forall k : int . 0 <= k /\ k < len'1 self  -> k <> i  -> k <> j  -> index_logic'4 self k = index_logic'4 oth k)
  
  function shallow_model'0 (self : borrowed (slice t)) : Seq'0.t_seq t =
    [%#span70] shallow_model'2 ( * self)
  
  let rec swap'0 (self:borrowed (slice t)) (a:usize) (b:usize) (return'  (ret:()))= {[@expl:precondition] [%#span73] inv'2 self}
    {[@expl:precondition] [%#span72] UIntSize.to_int b < len'1 (shallow_model'0 self)}
    {[@expl:precondition] [%#span71] UIntSize.to_int a < len'1 (shallow_model'0 self)}
    any
    [ return' (result:())-> {[%#span74] exchange'0 (shallow_model'2 ( ^ self)) (shallow_model'0 self) (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  predicate resolve'4 (self : usize) =
    [%#span75] true
  
  predicate resolve'2 (self : (usize, usize)) =
    [%#span76] resolve'4 (let (a, _) = self in a) /\ resolve'4 (let (_, a) = self in a)
  
  use seq.Seq
  
  function singleton'0 (v : (usize, usize)) : Seq'0.t_seq (usize, usize)
  
  axiom singleton'0_spec : forall v : (usize, usize) . ([%#span77] inv'10 v)
   -> ([%#span80] inv'5 (singleton'0 v))
  && ([%#span79] index_logic'2 (singleton'0 v) 0 = v) && ([%#span78] len'2 (singleton'0 v) = 1)
  
  predicate resolve'1 (self : borrowed (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))) =
    [%#span66]  ^ self =  * self
  
  use seq.Seq
  
  function singleton'1 (v : usize) : Seq'0.t_seq usize
  
  axiom singleton'1_spec : forall v : usize . ([%#span77] inv'12 v)
   -> ([%#span80] inv'6 (singleton'1 v))
  && ([%#span79] index_logic'3 (singleton'1 v) 0 = v) && ([%#span78] len'3 (singleton'1 v) = 1)
  
  predicate resolve'5 (self : borrowed (Range'0.t_range usize)) =
    [%#span66]  ^ self =  * self
  
  predicate completed'1 (self : borrowed (Range'0.t_range usize)) =
    [%#span81] resolve'5 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  
  predicate completed'0 (self : borrowed (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))) =
    [%#span82] exists b : borrowed (Range'0.t_range usize) . exists a : borrowed (Range'0.t_range usize) . inv'11 b
    /\ inv'11 a
    /\  * a = itera'0 ( * self)
    /\  * b = iterb'0 ( * self)
    /\  ^ a = itera'0 ( ^ self)
    /\  ^ b = iterb'0 ( ^ self)
    /\ (completed'1 a /\ resolve'5 b
    \/ (exists x : usize . inv'12 x /\ produces'1 ( * a) (singleton'1 x) ( ^ a) /\ resolve'4 x /\ completed'1 b))
  
  let rec next'0 (self:borrowed (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))) (return'  (ret:Option'0.t_option (usize, usize)))= {[@expl:precondition] [%#span83] inv'8 self}
    any
    [ return' (result:Option'0.t_option (usize, usize))-> {[%#span85] inv'9 result}
      {[%#span84] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  predicate equiv_reverse_range'0 [#"../03_std_iterators.rs" 87 0 87 81] (s1 : Seq'0.t_seq t) (s2 : Seq'0.t_seq t) (l : int) (u : int) (n : int)
    
   =
    [%#span86] forall i : int . l <= i /\ i < u  -> index_logic'4 s1 i = index_logic'4 s2 (n - i)
  
  predicate equiv_range'0 [#"../03_std_iterators.rs" 80 0 80 65] (s1 : Seq'0.t_seq t) (s2 : Seq'0.t_seq t) (l : int) (u : int)
    
   =
    [%#span87] forall i : int . l <= i /\ i < u  -> index_logic'4 s1 i = index_logic'4 s2 i
  
  function deref'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq (usize, usize))) : Seq'0.t_seq (usize, usize)
  
  function shallow_model'4 (self : borrowed (slice t)) : Seq'0.t_seq t =
    [%#span88] shallow_model'0 self
  
  function deref'0 (self : Snapshot'0.t_snapshot (borrowed (slice t))) : borrowed (slice t)
  
  function shallow_model'1 (self : Snapshot'0.t_snapshot (borrowed (slice t))) : Seq'0.t_seq t =
    [%#span89] shallow_model'4 (deref'0 self)
  
  function inner'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq (usize, usize))) : Seq'0.t_seq (usize, usize)
  
  function deref'2 (self : Snapshot'0.t_snapshot (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))) : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)
    
  
  function inner'0 (self : Snapshot'0.t_snapshot (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))) : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)
    
  
  function new'2 (x : Seq'0.t_seq (usize, usize)) : Snapshot'0.t_snapshot (Seq'0.t_seq (usize, usize))
  
  axiom new'2_spec : forall x : Seq'0.t_seq (usize, usize) . ([%#span90] inv'5 x)  -> ([%#span91] deref'1 (new'2 x) = x)
  
  function new'1 (x : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) : Snapshot'0.t_snapshot (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))
    
  
  axiom new'1_spec : forall x : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize) . ([%#span90] inv'0 x)
   -> ([%#span91] deref'2 (new'1 x) = x)
  
  predicate into_iter_post'1 (self : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) (res : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))
    
   =
    [%#span92] self = res
  
  predicate into_iter_pre'1 (self : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) =
    [%#span93] true
  
  let rec into_iter'0 (self:Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) (return'  (ret:Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)))= {[@expl:precondition] [%#span95] inv'0 self}
    {[@expl:precondition] [%#span94] into_iter_pre'1 self}
    any
    [ return' (result:Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))-> {[%#span96] inv'0 result}
      {[%#span94] into_iter_post'1 self result}
      (! return' {result}) ]
    
  
  predicate into_iter_post'0 (self : Range'0.t_range usize) (res : Range'0.t_range usize) =
    [%#span92] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_range usize) =
    [%#span93] true
  
  let rec zip'0 (self:Range'0.t_range usize) (other:Range'0.t_range usize) (return'  (ret:Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)))= {[@expl:precondition] [%#span99] inv'4 other}
    {[@expl:precondition] [%#span98] inv'4 self}
    {[@expl:precondition] [%#span97] into_iter_pre'0 other}
    any
    [ return' (result:Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))-> {[%#span101] inv'0 result}
      {[%#span100] into_iter_post'0 other (iterb'0 result)}
      {[%#span94] itera'0 result = self}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : Snapshot'0.t_snapshot (borrowed (slice t)))
  
  function new'0 (x : borrowed (slice t)) : Snapshot'0.t_snapshot (borrowed (slice t))
  
  axiom new'0_spec : forall x : borrowed (slice t) . ([%#span90] inv'2 x)  -> ([%#span91] deref'0 (new'0 x) = x)
  
  function shallow_model'3 (self : slice t) : Seq'0.t_seq t =
    [%#span88] shallow_model'2 self
  
  let rec len'0 (self:slice t) (return'  (ret:usize))= {[@expl:precondition] [%#span102] inv'3 self}
    any
    [ return' (result:usize)-> {[%#span103] len'1 (shallow_model'3 self) = UIntSize.to_int result}
      (! return' {result}) ]
    
  
  let rec my_reverse (slice:borrowed (slice t)) (return'  (ret:()))= {[%#s03_std_iterators18] inv'2 slice}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 { * slice} (fun (_ret':usize) ->  [ &n <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &old_v <- [%#s03_std_iterators0] new'0 slice ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = -{resolve'0 old_v}- s1
      | s1 = UIntSize.eq {[%#s03_std_iterators1] (2 : usize)} {[%#s03_std_iterators2] (0 : usize)}
          (fun (_ret':bool) ->  [ &_12 <- _ret' ] s2)
      | s2 = {[@expl:division by zero] [%#s03_std_iterators2] not _12} s3
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = UIntSize.div {n} {[%#s03_std_iterators1] (2 : usize)} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1)
      | s1 =  [ &_9 <- Range'0.C_Range ([%#s03_std_iterators3] (0 : usize)) _10 ] 
        (any [ any_ (_any:usize)-> (!  [ &_10 <- _any ] s2) ] )
      | s2 = UIntSize.eq {[%#s03_std_iterators4] (2 : usize)} {[%#s03_std_iterators5] (0 : usize)}
          (fun (_ret':bool) ->  [ &_16 <- _ret' ] s3)
      | s3 = {[@expl:division by zero] [%#s03_std_iterators5] not _16} s4
      | s4 = bb4 ]
      
    | bb4 = s0
      [ s0 = UIntSize.div {n} {[%#s03_std_iterators4] (2 : usize)} (fun (_ret':usize) ->  [ &_14 <- _ret' ] s1)
      | s1 =  [ &_13 <- Range'0.C_Range ([%#s03_std_iterators6] (0 : usize)) _14 ] 
        (any [ any_ (_any:usize)-> (!  [ &_14 <- _any ] s2) ] )
      | s2 = zip'0 {_9} {_13}
          (fun (_ret':Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = into_iter'0 {_8}
          (fun (_ret':Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) ->  [ &iter <- _ret' ] s1)
      | s1 = bb6 ]
      
    | bb6 = s0 [ s0 =  [ &iter_old <- [%#s03_std_iterators7] new'1 iter ] s1 | s1 = bb7 ] 
    | bb7 = s0
      [ s0 =  [ &produced <- [%#s03_std_iterators8] new'2 (empty'0 : Seq'0.t_seq (usize, usize)) ] s1 | s1 = bb8 ]
      
    | bb8 = s0 [ s0 =  [ &old_9_0 <- new'0 slice ] s1 | s1 = bb9 ] 
    | bb9 = bb9
      [ bb9 = {[@expl:loop invariant]  ^ deref'0 old_9_0 =  ^ slice}
        {[@expl:loop invariant] [%#s03_std_iterators14] equiv_reverse_range'0 (shallow_model'0 slice) (shallow_model'1 old_v) (UIntSize.to_int n
        - len'2 (deref'1 produced)) (UIntSize.to_int n) (UIntSize.to_int n - 1)}
        {[@expl:loop invariant] [%#s03_std_iterators13] equiv_reverse_range'0 (shallow_model'0 slice) (shallow_model'1 old_v) 0 (len'2 (deref'1 produced)) (UIntSize.to_int n
        - 1)}
        {[@expl:loop invariant] [%#s03_std_iterators12] equiv_range'0 (shallow_model'0 slice) (shallow_model'1 old_v) (len'2 (deref'1 produced)) (UIntSize.to_int n
        - len'2 (deref'1 produced))}
        {[@expl:loop invariant] [%#s03_std_iterators11] UIntSize.to_int n = len'1 (shallow_model'0 slice)}
        {[@expl:loop invariant] [%#s03_std_iterators10]  ^ deref'0 old_v =  ^ slice}
        {[@expl:loop invariant] [%#s03_std_iterators9] produces'0 (inner'0 iter_old) (inner'1 produced) iter}
        {[@expl:loop invariant] [%#s03_std_iterators9] inv'0 iter}
        (! s0) [ s0 = bb10 ] 
        [ bb10 = s0
          [ s0 = Borrow.borrow_mut <Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)> {iter}
              (fun (_ret':borrowed (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))) ->
                 [ &_31 <- _ret' ] 
                 [ &iter <-  ^ _31 ] 
                s1)
          | s1 = Borrow.borrow_final
              <Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)>
              { * _31}
              {Borrow.get_id _31}
              (fun (_ret':borrowed (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize))) ->
                 [ &_30 <- _ret' ] 
                 [ &_31 <- { _31 with current = ( ^ _30) ; } ] 
                s2)
          | s2 = next'0 {_30} (fun (_ret':Option'0.t_option (usize, usize)) ->  [ &_29 <- _ret' ] s3)
          | s3 = bb11 ]
          
        | bb11 = s0
          [ s0 = -{resolve'1 _31}- s1
          | s1 = any
            [ br0 -> {_29 = Option'0.C_None } (! bb14) | br1 (a:(usize, usize))-> {_29 = Option'0.C_Some a} (! bb13) ]
             ]
          
        | bb13 = bb15
        | bb15 = s0
          [ s0 = Option'0.some <(usize, usize)> {_29}
              (fun (r0'0:(usize, usize)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_34 <- [%#s03_std_iterators15] new'2 (concat'0 (inner'1 produced) (singleton'0 __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb16 ]
          
        | bb16 = s0
          [ s0 =  [ &produced <- _34 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq (usize, usize)))-> (!  [ &_34 <- _any ] s1) ] )
          | s1 =  [ &i <- let (r'0, _) = __creusot_proc_iter_elem in r'0 ] s2
          | s2 =  [ &j <- let (_, r'1) = __creusot_proc_iter_elem in r'1 ] s3
          | s3 = -{resolve'2 __creusot_proc_iter_elem}- s4
          | s4 = Borrow.borrow_mut <slice t> { * slice}
              (fun (_ret':borrowed (slice t)) ->
                 [ &_39 <- _ret' ] 
                 [ &slice <- { slice with current = ( ^ _39) ; } ] 
                s5)
          | s5 = -{inv'1 ( ^ _39)}- s6
          | s6 = UIntSize.sub {n} {j} (fun (_ret':usize) ->  [ &_42 <- _ret' ] s7)
          | s7 = UIntSize.sub {_42} {[%#s03_std_iterators16] (1 : usize)}
              (fun (_ret':usize) ->  [ &_41 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_42 <- _any ] s8) ] ))
          | s8 = swap'0 {_39} {i} {_41} (fun (_ret':()) ->  [ &_38 <- _ret' ] s9)
          | s9 = bb17 ]
          
        | bb17 = s0
          [ s0 = {[@expl:assertion] [%#s03_std_iterators17] index_logic'0 ( * deref'0 old_v) (UIntSize.to_int n
            - UIntSize.to_int j
            - 1)
            = index_logic'1 ( * slice) i}
            s1
          | s1 = bb9 ]
           ]
         ]
      
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv'2 slice} s1
      | s1 = -{resolve'3 slice}- s2
      | s2 = {[%#s03_std_iterators9] false} any ]
      
    | bb14 = s0 [ s0 = {[@expl:type invariant] inv'2 slice} s1 | s1 = -{resolve'3 slice}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & slice : borrowed (slice t) = slice
    | & n : usize = any_l ()
    | & old_v : Snapshot'0.t_snapshot (borrowed (slice t)) = any_l ()
    | & iter : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize) = any_l ()
    | & _8 : Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize) = any_l ()
    | & _9 : Range'0.t_range usize = any_l ()
    | & _10 : usize = any_l ()
    | & _12 : bool = any_l ()
    | & _13 : Range'0.t_range usize = any_l ()
    | & _14 : usize = any_l ()
    | & _16 : bool = any_l ()
    | & iter_old : Snapshot'0.t_snapshot (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) = any_l ()
    | & produced : Snapshot'0.t_snapshot (Seq'0.t_seq (usize, usize)) = any_l ()
    | & _29 : Option'0.t_option (usize, usize) = any_l ()
    | & _30 : borrowed (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) = any_l ()
    | & _31 : borrowed (Zip'0.t_zip (Range'0.t_range usize) (Range'0.t_range usize)) = any_l ()
    | & __creusot_proc_iter_elem : (usize, usize) = any_l ()
    | & _34 : Snapshot'0.t_snapshot (Seq'0.t_seq (usize, usize)) = any_l ()
    | & i : usize = any_l ()
    | & j : usize = any_l ()
    | & _38 : () = any_l ()
    | & _39 : borrowed (slice t) = any_l ()
    | & _41 : usize = any_l ()
    | & _42 : usize = any_l ()
    | & old_9_0 : Snapshot'0.t_snapshot (borrowed (slice t)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s03_std_iterators19] ext_eq'0 (shallow_model'2 ( ^ slice)) (reverse'0 (shallow_model'0 slice))}
      (! return' {result}) ]
    
end
