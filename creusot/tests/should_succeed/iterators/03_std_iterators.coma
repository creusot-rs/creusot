
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_iter < 't > (input:t_iter 't) (ret  (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Iter ptr end_or_len _marker
      = input}
      (! ret {ptr} {end_or_len} {_marker})
    | bad (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Iter ptr end_or_len _marker
      <> input}
      {false}
      any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C03StdIterators_SliceIter
  type t
  use seq.Seq
  predicate invariant'7 (self : Seq.seq t)
  let rec invariant'7 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Seq.seq t)
  let rec inv'7 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Seq.seq t . inv'7 x = true
  use prelude.Slice
  predicate invariant'6 (self : slice t)
  let rec invariant'6 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : slice t)
  let rec inv'6 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : slice t . inv'6 x = true
  predicate invariant'5 (self : Seq.seq t)
  let rec invariant'5 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq t)
  let rec inv'5 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq t . inv'5 x = true
  predicate invariant'4 (self : t)
  let rec invariant'4 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : t)
  let rec inv'4 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : t . inv'4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option t)
  let rec invariant'3 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option t)
  let rec inv'3 (_x:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option t . inv'3 x = true
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  use seq.Seq
  use prelude.Slice
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  function shallow_model'2 (self : slice t) : Seq.seq t
  let rec shallow_model'2 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'6 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'2 self} (! return' {result}) ] 
  axiom shallow_model'2_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'7 (shallow_model'2 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'2 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'2 self) ix
  let rec index_logic'0 (self:slice t) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'0 (self : slice t) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'2 self
  let rec shallow_model'0 (self:slice t) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use seq.Seq
  predicate inv'0 (_x : slice t)
  let rec inv'0 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  function to_ref_seq'0 (self : slice t) : Seq.seq t
  let rec to_ref_seq'0 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv'0 self}
    any [ return' (result:Seq.seq t)-> {result = to_ref_seq'0 self} (! return' {result}) ] 
  axiom to_ref_seq'0_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 4 91 35] inv'5 (to_ref_seq'0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 90 4 90 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq'0 self)  -> Seq.get (to_ref_seq'0 self) i = index_logic'0 self i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 89 14 89 41] Seq.length (to_ref_seq'0 self)
  = Seq.length (shallow_model'0 self))
  function shallow_model'1 (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  let rec shallow_model'1 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:slice t))= any
    [ return' (result:slice t)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  predicate produces'0 (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 399 12 399 66] to_ref_seq'0 (shallow_model'1 self)
    = Seq.(++) visited (to_ref_seq'0 (shallow_model'1 tl))
  let rec produces'0 (self:Core_Slice_Iter_Iter_Type.t_iter t) (visited:Seq.seq t) (tl:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 408 4 408 10] ()
  let rec produces_trans'0 (a:Core_Slice_Iter_Iter_Type.t_iter t) (ab:Seq.seq t) (b:Core_Slice_Iter_Iter_Type.t_iter t) (bc:Seq.seq t) (c:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 413 61 413 63] inv'5 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 413 31 413 33] inv'5 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 411 15 411 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 410 15 410 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 410 15 410 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 411 15 411 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 413 31 413 33] inv'5 ab)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 413 61 413 63] inv'5 bc)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 412 14 412 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 403 4 403 10] ()
  let rec produces_refl'0 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:()))= any
    [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ]
    
  axiom produces_refl'0_spec : forall self : Core_Slice_Iter_Iter_Type.t_iter t . [#"../../../../../creusot-contracts/src/std/slice.rs" 405 14 405 45] produces'0 self (Seq.empty  : Seq.seq t) self
  predicate invariant'2 (self : Core_Slice_Iter_Iter_Type.t_iter t)
  let rec invariant'2 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Slice_Iter_Iter_Type.t_iter t)
  let rec inv'2 (_x:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Slice_Iter_Iter_Type.t_iter t . inv'2 x = true
  use prelude.Snapshot
  predicate invariant'1 (self : Snapshot.snap_ty (Seq.seq t))
  let rec invariant'1 (self:Snapshot.snap_ty (Seq.seq t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Snapshot.snap_ty (Seq.seq t))
  let rec inv'1 (_x:Snapshot.snap_ty (Seq.seq t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Snapshot.snap_ty (Seq.seq t) . inv'1 x = true
  predicate invariant'0 (self : slice t)
  let rec invariant'0 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : slice t . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'6 (self : Core_Slice_Iter_Iter_Type.t_iter t)
  let rec resolve'6 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'6 self} (! return' {result}) ]
    
  predicate resolve'5 (self : t)
  let rec resolve'5 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'5 self} (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'4 (self : Core_Option_Option_Type.t_option t)
  let rec resolve'4 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  predicate resolve'3 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'3 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'3 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : slice t =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'1 ( * self)
  let rec shallow_model'3 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:slice t))= any
    [ return' (result:slice t)-> {result = shallow_model'3 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 392 20 392 61] resolve'3 self
    /\ shallow_model'2 (shallow_model'3 self) = (Seq.empty  : Seq.seq t)
  let rec completed'0 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:Core_Option_Option_Type.t_option t))= any
    [ return' (result:Core_Option_Option_Type.t_option t)-> {inv'3 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate resolve'2 (self : Snapshot.snap_ty (Seq.seq t))
  let rec resolve'2 (self:Snapshot.snap_ty (Seq.seq t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use prelude.Snapshot
  predicate resolve'1 (self : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t))
  let rec resolve'1 (self:Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Core_Slice_Iter_Iter_Type.t_iter t) (res : Core_Slice_Iter_Iter_Type.t_iter t) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'0 (self:Core_Slice_Iter_Iter_Type.t_iter t) (res:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Core_Slice_Iter_Iter_Type.t_iter t) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'0 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:Core_Slice_Iter_Iter_Type.t_iter t))= {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Slice_Iter_Iter_Type.t_iter t)-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  let rec iter'0 (self:slice t) (return'  (ret:Core_Slice_Iter_Iter_Type.t_iter t))= {[@expl:precondition] inv'0 self}
    any
    [ return' (result:Core_Slice_Iter_Iter_Type.t_iter t)-> {[#"../../../../../creusot-contracts/src/std/slice.rs" 238 0 347 1] shallow_model'1 result
      = self}
      (! return' {result}) ]
    
  predicate resolve'0 (self : slice t)
  let rec resolve'0 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec slice_iter (slice:slice t) (return'  (ret:usize))= {[#"../03_std_iterators.rs" 6 21 6 26] inv'0 slice}
    {[#"../03_std_iterators.rs" 4 11 4 30] Seq.length (shallow_model'0 slice) < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &i <- [#"../03_std_iterators.rs" 7 16 7 17] (0 : usize) ] s1
      | s1 = {[@expl:type invariant] inv'0 slice} s2
      | s2 = -{resolve'0 slice}- s3
      | s3 = iter'0 {slice} (fun (_ret':Core_Slice_Iter_Iter_Type.t_iter t) ->  [ &_7 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = into_iter'0 {_7} (fun (_ret':Core_Slice_Iter_Iter_Type.t_iter t) ->  [ &iter <- _ret' ] s1) | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = 
        [ &iter_old <- ([#"../03_std_iterators.rs" 8 4 8 38] Snapshot.new iter) : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t) ]
        
        s1
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = -{resolve'1 iter_old}- s1
      | s1 = 
        [ &produced <- ([#"../03_std_iterators.rs" 8 4 8 38] Snapshot.new (Seq.empty  : Seq.seq t)) : Snapshot.snap_ty (Seq.seq t) ]
        
        s2
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'1 produced} s1 | s1 = -{resolve'2 produced}- s2 | s2 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [#"../03_std_iterators.rs" 8 16 8 36] UIntSize.to_int i
        = Seq.length (Snapshot.inner produced)}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 8 4 8 38] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 8 4 8 38] inv'2 iter}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = Borrow.borrow_mut <Core_Slice_Iter_Iter_Type.t_iter t> {iter}
              (fun (_ret':borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) ->  [ &_19 <- _ret' ]  [ &iter <-  ^ _19 ] s1)
          | s1 = Borrow.borrow_final <Core_Slice_Iter_Iter_Type.t_iter t> { * _19} {Borrow.get_id _19}
              (fun (_ret':borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) ->
                 [ &_18 <- _ret' ] 
                 [ &_19 <- { _19 with current = ( ^ _18) ; } ] 
                s2)
          | s2 = next'0 {_18} (fun (_ret':Core_Option_Option_Type.t_option t) ->  [ &_17 <- _ret' ] s3)
          | s3 = bb7 ]
          
        | bb7 = s0
          [ s0 = -{resolve'3 _19}- s1
          | s1 = any
            [ br0 -> {_17 = Core_Option_Option_Type.C_None } (! bb10)
            | br1 (a:t)-> {_17 = Core_Option_Option_Type.C_Some a} (! bb9) ]
             ]
          
        | bb9 = s0 [ s0 = bb11 ] 
        | bb11 = s0
          [ s0 = Core_Option_Option_Type.some <t> {_17} (fun (r0'0:t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = {[@expl:type invariant] inv'3 _17} s2
          | s2 = -{resolve'4 _17}- s3
          | s3 = 
            [ &_22 <- ([#"../03_std_iterators.rs" 8 4 8 38] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq t) ]
            
            s4
          | s4 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &produced <- _22 ] (any [ any_ (_any:Snapshot.snap_ty (Seq.seq t))-> (!  [ &_22 <- _any ] s1) ] )
          | s1 = {[@expl:type invariant] inv'1 produced} s2
          | s2 = -{resolve'2 produced}- s3
          | s3 = {[@expl:type invariant] inv'4 __creusot_proc_iter_elem} s4
          | s4 = -{resolve'5 __creusot_proc_iter_elem}- s5
          | s5 = UIntSize.add {i} {[#"../03_std_iterators.rs" 10 13 10 14] (1 : usize)}
              (fun (_ret':usize) ->  [ &i <- _ret' ] s6)
          | s6 = bb5 ]
           ]
         ]
      
    | bb8 = s0
      [ s0 = -{resolve'6 iter}- s1
      | s1 = {[@expl:type invariant] inv'3 _17} s2
      | s2 = -{resolve'4 _17}- s3
      | s3 = {[#"../03_std_iterators.rs" 8 4 8 38] false} any ]
      
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv'3 _17} s1
      | s1 = -{resolve'4 _17}- s2
      | s2 = -{resolve'6 iter}- s3
      | s3 =  [ &_0 <- i ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : usize = any_l () : usize
    | & slice : slice t = slice
    | & i : usize = any_l () : usize
    | & iter : Core_Slice_Iter_Iter_Type.t_iter t = any_l () : Core_Slice_Iter_Iter_Type.t_iter t
    | & _7 : Core_Slice_Iter_Iter_Type.t_iter t = any_l () : Core_Slice_Iter_Iter_Type.t_iter t
    | & iter_old : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t) = any_l () : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t)
    | & produced : Snapshot.snap_ty (Seq.seq t) = any_l () : Snapshot.snap_ty (Seq.seq t)
    | & _17 : Core_Option_Option_Type.t_option t = any_l () : Core_Option_Option_Type.t_option t
    | & _18 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t) = any_l () : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)
    | & _19 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t) = any_l () : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)
    | & __creusot_proc_iter_elem : t = any_l () : t
    | & _22 : Snapshot.snap_ty (Seq.seq t) = any_l () : Snapshot.snap_ty (Seq.seq t) ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [#"../03_std_iterators.rs" 5 10 5 33] UIntSize.to_int result
      = Seq.length (shallow_model'0 slice)}
      (! return' {result}) ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C03StdIterators_VecIter
  type t
  use prelude.Slice
  predicate invariant'9 (self : slice t)
  let rec invariant'9 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : slice t)
  let rec inv'9 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : slice t . inv'9 x = true
  use seq.Seq
  predicate invariant'8 (self : Seq.seq t)
  let rec invariant'8 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Seq.seq t)
  let rec inv'8 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Seq.seq t . inv'8 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'7 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'7 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  function shallow_model'2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  let rec shallow_model'2 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'7 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'2 self} (! return' {result}) ] 
  axiom shallow_model'2_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'8 (shallow_model'2 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'7 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'8 (shallow_model'2 self)
  let rec invariant'7 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  axiom inv'7 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'7 x = true
  predicate invariant'6 (self : slice t)
  let rec invariant'6 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : slice t)
  let rec inv'6 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : slice t . inv'6 x = true
  predicate invariant'5 (self : Seq.seq t)
  let rec invariant'5 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq t)
  let rec inv'5 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq t . inv'5 x = true
  predicate invariant'4 (self : t)
  let rec invariant'4 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : t)
  let rec inv'4 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : t . inv'4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option t)
  let rec invariant'3 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option t)
  let rec inv'3 (_x:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option t . inv'3 x = true
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  use seq.Seq
  use prelude.Slice
  function shallow_model'5 (self : slice t) : Seq.seq t
  let rec shallow_model'5 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'9 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'5 self} (! return' {result}) ] 
  axiom shallow_model'5_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'9 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'8 (shallow_model'5 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'5 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'5 self)
  <= UIntSize.to_int (max'0 : usize))
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'5 self) ix
  let rec index_logic'0 (self:slice t) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'3 (self : slice t) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'5 self
  let rec shallow_model'3 (self:slice t) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'3 self} (! return' {result}) ]
    
  use seq.Seq
  function to_ref_seq'0 (self : slice t) : Seq.seq t
  let rec to_ref_seq'0 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv'6 self}
    any [ return' (result:Seq.seq t)-> {result = to_ref_seq'0 self} (! return' {result}) ] 
  axiom to_ref_seq'0_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 4 91 35] inv'5 (to_ref_seq'0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 90 4 90 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq'0 self)  -> Seq.get (to_ref_seq'0 self) i = index_logic'0 self i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 89 14 89 41] Seq.length (to_ref_seq'0 self)
  = Seq.length (shallow_model'3 self))
  function shallow_model'1 (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  let rec shallow_model'1 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:slice t))= any
    [ return' (result:slice t)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  predicate produces'0 (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 399 12 399 66] to_ref_seq'0 (shallow_model'1 self)
    = Seq.(++) visited (to_ref_seq'0 (shallow_model'1 tl))
  let rec produces'0 (self:Core_Slice_Iter_Iter_Type.t_iter t) (visited:Seq.seq t) (tl:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 408 4 408 10] ()
  let rec produces_trans'0 (a:Core_Slice_Iter_Iter_Type.t_iter t) (ab:Seq.seq t) (b:Core_Slice_Iter_Iter_Type.t_iter t) (bc:Seq.seq t) (c:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 413 61 413 63] inv'5 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 413 31 413 33] inv'5 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 411 15 411 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 410 15 410 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 410 15 410 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 411 15 411 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 413 31 413 33] inv'5 ab)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 413 61 413 63] inv'5 bc)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 412 14 412 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 403 4 403 10] ()
  let rec produces_refl'0 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:()))= any
    [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ]
    
  axiom produces_refl'0_spec : forall self : Core_Slice_Iter_Iter_Type.t_iter t . [#"../../../../../creusot-contracts/src/std/slice.rs" 405 14 405 45] produces'0 self (Seq.empty  : Seq.seq t) self
  predicate invariant'2 (self : Core_Slice_Iter_Iter_Type.t_iter t)
  let rec invariant'2 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Slice_Iter_Iter_Type.t_iter t)
  let rec inv'2 (_x:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Slice_Iter_Iter_Type.t_iter t . inv'2 x = true
  use prelude.Snapshot
  predicate invariant'1 (self : Snapshot.snap_ty (Seq.seq t))
  let rec invariant'1 (self:Snapshot.snap_ty (Seq.seq t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Snapshot.snap_ty (Seq.seq t))
  let rec inv'1 (_x:Snapshot.snap_ty (Seq.seq t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Snapshot.snap_ty (Seq.seq t) . inv'1 x = true
  predicate invariant'0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec invariant'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'0 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'0 x = true
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'2 self
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'6 (self : Core_Slice_Iter_Iter_Type.t_iter t)
  let rec resolve'6 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'6 self} (! return' {result}) ]
    
  predicate resolve'5 (self : t)
  let rec resolve'5 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'5 self} (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'4 (self : Core_Option_Option_Type.t_option t)
  let rec resolve'4 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  predicate resolve'3 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'3 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'4 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : slice t =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'1 ( * self)
  let rec shallow_model'4 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:slice t))= any
    [ return' (result:slice t)-> {result = shallow_model'4 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 392 20 392 61] resolve'3 self
    /\ shallow_model'5 (shallow_model'4 self) = (Seq.empty  : Seq.seq t)
  let rec completed'0 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:Core_Option_Option_Type.t_option t))= any
    [ return' (result:Core_Option_Option_Type.t_option t)-> {inv'3 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate resolve'2 (self : Snapshot.snap_ty (Seq.seq t))
  let rec resolve'2 (self:Snapshot.snap_ty (Seq.seq t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use prelude.Snapshot
  predicate resolve'1 (self : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t))
  let rec resolve'1 (self:Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (res : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 205 20 205 34] shallow_model'0 self
    = shallow_model'3 (shallow_model'1 res)
  let rec into_iter_post'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (res:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 199 20 199 24] true
  let rec into_iter_pre'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Core_Slice_Iter_Iter_Type.t_iter t))= {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Slice_Iter_Iter_Type.t_iter t)-> {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  predicate resolve'0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec resolve'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec vec_iter (vec:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:usize))= {[#"../03_std_iterators.rs" 17 19 17 22] inv'0 vec}
    {[#"../03_std_iterators.rs" 15 11 15 28] Seq.length (shallow_model'0 vec) < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &i <- [#"../03_std_iterators.rs" 18 16 18 17] (0 : usize) ] s1
      | s1 = {[@expl:type invariant] inv'0 vec} s2
      | s2 = -{resolve'0 vec}- s3
      | s3 = into_iter'0 {vec} (fun (_ret':Core_Slice_Iter_Iter_Type.t_iter t) ->  [ &iter <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = 
        [ &iter_old <- ([#"../03_std_iterators.rs" 19 4 19 38] Snapshot.new iter) : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t) ]
        
        s1
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'1 iter_old}- s1
      | s1 = 
        [ &produced <- ([#"../03_std_iterators.rs" 19 4 19 38] Snapshot.new (Seq.empty  : Seq.seq t)) : Snapshot.snap_ty (Seq.seq t) ]
        
        s2
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'1 produced} s1 | s1 = -{resolve'2 produced}- s2 | s2 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [#"../03_std_iterators.rs" 19 16 19 36] UIntSize.to_int i
        = Seq.length (Snapshot.inner produced)}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 19 4 19 38] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 19 4 19 38] inv'2 iter}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Core_Slice_Iter_Iter_Type.t_iter t> {iter}
              (fun (_ret':borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) ->  [ &_18 <- _ret' ]  [ &iter <-  ^ _18 ] s1)
          | s1 = Borrow.borrow_final <Core_Slice_Iter_Iter_Type.t_iter t> { * _18} {Borrow.get_id _18}
              (fun (_ret':borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) ->
                 [ &_17 <- _ret' ] 
                 [ &_18 <- { _18 with current = ( ^ _17) ; } ] 
                s2)
          | s2 = next'0 {_17} (fun (_ret':Core_Option_Option_Type.t_option t) ->  [ &_16 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'3 _18}- s1
          | s1 = any
            [ br0 -> {_16 = Core_Option_Option_Type.C_None } (! bb9)
            | br1 (a:t)-> {_16 = Core_Option_Option_Type.C_Some a} (! bb8) ]
             ]
          
        | bb8 = s0 [ s0 = bb10 ] 
        | bb10 = s0
          [ s0 = Core_Option_Option_Type.some <t> {_16} (fun (r0'0:t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = {[@expl:type invariant] inv'3 _16} s2
          | s2 = -{resolve'4 _16}- s3
          | s3 = 
            [ &_21 <- ([#"../03_std_iterators.rs" 19 4 19 38] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq t) ]
            
            s4
          | s4 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _21 ] (any [ any_ (_any:Snapshot.snap_ty (Seq.seq t))-> (!  [ &_21 <- _any ] s1) ] )
          | s1 = {[@expl:type invariant] inv'1 produced} s2
          | s2 = -{resolve'2 produced}- s3
          | s3 = {[@expl:type invariant] inv'4 __creusot_proc_iter_elem} s4
          | s4 = -{resolve'5 __creusot_proc_iter_elem}- s5
          | s5 = UIntSize.add {i} {[#"../03_std_iterators.rs" 21 13 21 14] (1 : usize)}
              (fun (_ret':usize) ->  [ &i <- _ret' ] s6)
          | s6 = bb4 ]
           ]
         ]
      
    | bb7 = s0
      [ s0 = -{resolve'6 iter}- s1
      | s1 = {[@expl:type invariant] inv'3 _16} s2
      | s2 = -{resolve'4 _16}- s3
      | s3 = {[#"../03_std_iterators.rs" 19 4 19 38] false} any ]
      
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'3 _16} s1
      | s1 = -{resolve'4 _16}- s2
      | s2 = -{resolve'6 iter}- s3
      | s3 =  [ &_0 <- i ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : usize = any_l () : usize
    | & vec : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) = vec
    | & i : usize = any_l () : usize
    | & iter : Core_Slice_Iter_Iter_Type.t_iter t = any_l () : Core_Slice_Iter_Iter_Type.t_iter t
    | & iter_old : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t) = any_l () : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t)
    | & produced : Snapshot.snap_ty (Seq.seq t) = any_l () : Snapshot.snap_ty (Seq.seq t)
    | & _16 : Core_Option_Option_Type.t_option t = any_l () : Core_Option_Option_Type.t_option t
    | & _17 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t) = any_l () : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)
    | & _18 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t) = any_l () : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)
    | & __creusot_proc_iter_elem : t = any_l () : t
    | & _21 : Snapshot.snap_ty (Seq.seq t) = any_l () : Snapshot.snap_ty (Seq.seq t) ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [#"../03_std_iterators.rs" 16 10 16 31] UIntSize.to_int result
      = Seq.length (shallow_model'0 vec)}
      (! return' {result}) ]
    
end
module Core_Slice_Iter_IterMut_Type
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_itermut 't =
    | C_IterMut (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata (borrowed 't))
    
  function any_l (_ : 'b) : 'a
  let rec t_itermut < 't > (input:t_itermut 't) (ret  (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:Core_Marker_PhantomData_Type.t_phantomdata (borrowed 't)))= any
    [ good (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:Core_Marker_PhantomData_Type.t_phantomdata (borrowed 't))-> {C_IterMut ptr end_or_len _marker
      = input}
      (! ret {ptr} {end_or_len} {_marker})
    | bad (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:Core_Marker_PhantomData_Type.t_phantomdata (borrowed 't))-> {C_IterMut ptr end_or_len _marker
      <> input}
      {false}
      any ]
    
end
module C03StdIterators_AllZero
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  predicate invariant'7 (self : Seq.seq (borrowed usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:Seq.seq (borrowed usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Seq.seq (borrowed usize))
  let rec inv'7 (_x:Seq.seq (borrowed usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Seq.seq (borrowed usize) . inv'7 x = true
  use prelude.Slice
  predicate invariant'6 (self : slice usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:slice usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : slice usize)
  let rec inv'6 (_x:slice usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : slice usize . inv'6 x = true
  predicate invariant'5 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq usize)
  let rec inv'5 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq usize . inv'5 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'4 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'4 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'4 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'0 self} (! return' {result}) ] 
  axiom shallow_model'0_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'5 (shallow_model'0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'5 (shallow_model'0 self)
  let rec invariant'4 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option (borrowed usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Core_Option_Option_Type.t_option (borrowed usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option (borrowed usize))
  let rec inv'3 (_x:Core_Option_Option_Type.t_option (borrowed usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option (borrowed usize) . inv'3 x = true
  predicate invariant'2 (self : borrowed (slice usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:borrowed (slice usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (slice usize))
  let rec inv'2 (_x:borrowed (slice usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (slice usize) . inv'2 x = true
  predicate invariant'1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'1 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv'1 x = true
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  use seq.Seq
  use seq.Seq
  use prelude.Slice
  function shallow_model'3 (self : slice usize) : Seq.seq usize
  let rec shallow_model'3 (self:slice usize) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'6 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'3 self} (! return' {result}) ] 
  axiom shallow_model'3_spec : forall self : slice usize . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'5 (shallow_model'3 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'3 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (max'0 : usize))
  function index_logic'2 [@inline:trivial] (self : slice usize) (ix : int) : usize =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'3 self) ix
  let rec index_logic'2 (self:slice usize) (ix:int) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = index_logic'2 self ix} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'2 (self : borrowed (slice usize)) : Seq.seq usize =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'3 ( * self)
  let rec shallow_model'2 (self:borrowed (slice usize)) (return'  (ret:Seq.seq usize))= any
    [ return' (result:Seq.seq usize)-> {result = shallow_model'2 self} (! return' {result}) ]
    
  use seq.Seq
  function to_mut_seq'0 (self : borrowed (slice usize)) : Seq.seq (borrowed usize)
  let rec to_mut_seq'0 (self:borrowed (slice usize)) (return'  (ret:Seq.seq (borrowed usize)))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv'2 self}
    any [ return' (result:Seq.seq (borrowed usize))-> {result = to_mut_seq'0 self} (! return' {result}) ] 
  axiom to_mut_seq'0_spec : forall self : borrowed (slice usize) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43] inv'7 (to_mut_seq'0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)  ->  ^ Seq.get (to_mut_seq'0 self) i = index_logic'2 ( ^ self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)  ->  * Seq.get (to_mut_seq'0 self) i = index_logic'2 ( * self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41] Seq.length (to_mut_seq'0 self)
  = Seq.length (shallow_model'2 self))
  function shallow_model'4 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) : borrowed (slice usize)
  let rec shallow_model'4 (self:Core_Slice_Iter_IterMut_Type.t_itermut usize) (return'  (ret:borrowed (slice usize)))= any
    [ return' (result:borrowed (slice usize))-> {result = shallow_model'4 self} (! return' {result}) ]
    
  axiom shallow_model'4_spec : forall self : Core_Slice_Iter_IterMut_Type.t_itermut usize . ([#"../../../../../creusot-contracts/src/std/slice.rs" 423 4 423 50] inv'2 (shallow_model'4 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 422 14 422 50] Seq.length (shallow_model'3 ( ^ shallow_model'4 self))
  = Seq.length (shallow_model'3 ( * shallow_model'4 self)))
  predicate produces'0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) (visited : Seq.seq (borrowed usize)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 448 12 448 66] to_mut_seq'0 (shallow_model'4 self)
    = Seq.(++) visited (to_mut_seq'0 (shallow_model'4 tl))
  let rec produces'0 (self:Core_Slice_Iter_IterMut_Type.t_itermut usize) (visited:Seq.seq (borrowed usize)) (tl:Core_Slice_Iter_IterMut_Type.t_itermut usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Slice_Iter_IterMut_Type.t_itermut usize) (ab : Seq.seq (borrowed usize)) (b : Core_Slice_Iter_IterMut_Type.t_itermut usize) (bc : Seq.seq (borrowed usize)) (c : Core_Slice_Iter_IterMut_Type.t_itermut usize) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 457 4 457 10] ()
  let rec produces_trans'0 (a:Core_Slice_Iter_IterMut_Type.t_itermut usize) (ab:Seq.seq (borrowed usize)) (b:Core_Slice_Iter_IterMut_Type.t_itermut usize) (bc:Seq.seq (borrowed usize)) (c:Core_Slice_Iter_IterMut_Type.t_itermut usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 462 61 462 63] inv'7 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 462 31 462 33] inv'7 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 460 15 460 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 459 15 459 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut usize, ab : Seq.seq (borrowed usize), b : Core_Slice_Iter_IterMut_Type.t_itermut usize, bc : Seq.seq (borrowed usize), c : Core_Slice_Iter_IterMut_Type.t_itermut usize . ([#"../../../../../creusot-contracts/src/std/slice.rs" 459 15 459 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 460 15 460 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 462 31 462 33] inv'7 ab)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 462 61 462 63] inv'7 bc)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 461 14 461 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) : () =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 452 4 452 10] ()
  let rec produces_refl'0 (self:Core_Slice_Iter_IterMut_Type.t_itermut usize) (return'  (ret:()))= any
    [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ]
    
  axiom produces_refl'0_spec : forall self : Core_Slice_Iter_IterMut_Type.t_itermut usize . [#"../../../../../creusot-contracts/src/std/slice.rs" 454 14 454 45] produces'0 self (Seq.empty  : Seq.seq (borrowed usize)) self
  predicate invariant'0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Core_Slice_Iter_IterMut_Type.t_itermut usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Core_Slice_Iter_IterMut_Type.t_itermut usize)
  let rec inv'0 (_x:Core_Slice_Iter_IterMut_Type.t_itermut usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Slice_Iter_IterMut_Type.t_itermut usize . inv'0 x = true
  function index_logic'1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'0 self) ix
  let rec index_logic'1 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = index_logic'1 self ix} (! return' {result}) ]
    
  function shallow_model'1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'0 ( * self)
  let rec shallow_model'1 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq usize))= any
    [ return' (result:Seq.seq usize)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'4 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  predicate resolve'3 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 433 20 433 36]  * shallow_model'4 self
    =  ^ shallow_model'4 self
  let rec resolve'3 (self:Core_Slice_Iter_IterMut_Type.t_itermut usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'2 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'1 (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'5 (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) : borrowed (slice usize) =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'4 ( * self)
  let rec shallow_model'5 (self:borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) (return'  (ret:borrowed (slice usize)))= any
    [ return' (result:borrowed (slice usize))-> {result = shallow_model'5 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 441 20 441 61] resolve'1 self
    /\ shallow_model'3 ( * shallow_model'5 self) = (Seq.empty  : Seq.seq usize)
  let rec completed'0 (self:borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) (return'  (ret:Core_Option_Option_Type.t_option (borrowed usize)))= any
    [ return' (result:Core_Option_Option_Type.t_option (borrowed usize))-> {inv'3 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq (borrowed usize))) (ix : int) : borrowed usize
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33] Seq.get (Snapshot.inner self) ix
  let rec index_logic'0 (self:Snapshot.snap_ty (Seq.seq (borrowed usize))) (ix:int) (return'  (ret:borrowed usize))= any
    [ return' (result:borrowed usize)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate resolve'0 (self : borrowed (slice usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (slice usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate into_iter_post'0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) (res : Core_Slice_Iter_IterMut_Type.t_itermut usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'0 (self:Core_Slice_Iter_IterMut_Type.t_itermut usize) (res:Core_Slice_Iter_IterMut_Type.t_itermut usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'0 (self:Core_Slice_Iter_IterMut_Type.t_itermut usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Core_Slice_Iter_IterMut_Type.t_itermut usize) (return'  (ret:Core_Slice_Iter_IterMut_Type.t_itermut usize))= {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Slice_Iter_IterMut_Type.t_itermut usize)-> {inv'0 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  let rec iter_mut'0 (self:borrowed (slice usize)) (return'  (ret:Core_Slice_Iter_IterMut_Type.t_itermut usize))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:Core_Slice_Iter_IterMut_Type.t_itermut usize)-> {[#"../../../../../creusot-contracts/src/std/slice.rs" 238 0 347 1] shallow_model'4 result
      = self}
      (! return' {result}) ]
    
  let rec deref_mut'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:borrowed (slice usize)))= {[@expl:precondition] inv'1 self}
    any
    [ return' (result:borrowed (slice usize))-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 170 26 170 48] shallow_model'3 ( ^ result)
      = shallow_model'0 ( ^ self)}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 169 26 169 42] shallow_model'2 result = shallow_model'1 self}
      (! return' {result}) ]
    
  let rec all_zero (v:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final
          <Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)>
          { * v}
          {Borrow.get_id v}
          (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) ->
             [ &_8 <- _ret' ] 
             [ &v <- { v with current = ( ^ _8) ; } ] 
            s1)
      | s1 = deref_mut'0 {_8} (fun (_ret':borrowed (slice usize)) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <slice usize> { * _7} {Borrow.get_id _7}
          (fun (_ret':borrowed (slice usize)) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = ( ^ _6) ; } ] s1)
      | s1 = iter_mut'0 {_6} (fun (_ret':Core_Slice_Iter_IterMut_Type.t_itermut usize) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = into_iter'0 {_5} (fun (_ret':Core_Slice_Iter_IterMut_Type.t_itermut usize) ->  [ &iter <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 = 
        [ &iter_old <- ([#"../03_std_iterators.rs" 29 4 29 87] Snapshot.new iter) : Snapshot.snap_ty (Core_Slice_Iter_IterMut_Type.t_itermut usize) ]
        
        s2
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 = 
        [ &produced <- ([#"../03_std_iterators.rs" 29 4 29 87] Snapshot.new (Seq.empty  : Seq.seq (borrowed usize))) : Snapshot.snap_ty (Seq.seq (borrowed usize)) ]
        
        s1
      | s1 = bb5 ]
      
    | bb5 = s0 [ s0 = bb6 ] 
    | bb6 = bb6
      [ bb6 = {[@expl:loop invariant] [#"../03_std_iterators.rs" 29 4 29 87] forall i : int . 0 <= i
        /\ i < Seq.length (Snapshot.inner produced)  -> UIntSize.to_int ( ^ index_logic'0 produced i) = 0}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 29 4 29 87] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 29 4 29 87] inv'0 iter}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = Borrow.borrow_mut <Core_Slice_Iter_IterMut_Type.t_itermut usize> {iter}
              (fun (_ret':borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) ->
                 [ &_19 <- _ret' ] 
                 [ &iter <-  ^ _19 ] 
                s1)
          | s1 = Borrow.borrow_final <Core_Slice_Iter_IterMut_Type.t_itermut usize> { * _19} {Borrow.get_id _19}
              (fun (_ret':borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) ->
                 [ &_18 <- _ret' ] 
                 [ &_19 <- { _19 with current = ( ^ _18) ; } ] 
                s2)
          | s2 = next'0 {_18} (fun (_ret':Core_Option_Option_Type.t_option (borrowed usize)) ->  [ &_17 <- _ret' ] s3)
          | s3 = bb8 ]
          
        | bb8 = s0
          [ s0 = -{resolve'1 _19}- s1
          | s1 = any
            [ br0 -> {_17 = Core_Option_Option_Type.C_None } (! bb11)
            | br1 (a:borrowed usize)-> {_17 = Core_Option_Option_Type.C_Some a} (! bb10) ]
             ]
          
        | bb10 = s0 [ s0 = bb12 ] 
        | bb12 = s0
          [ s0 = Core_Option_Option_Type.some <borrowed usize> {_17}
              (fun (r0'0:borrowed usize) ->
                 [ &__creusot_proc_iter_elem <- r0'0 ] 
                (any
                [ any_ (_any:borrowed usize)-> (! Core_Option_Option_Type.some <borrowed usize> {_17}
                    (fun (l_0'0:borrowed usize) ->
                      
                      [ &_17 <- Core_Option_Option_Type.C_Some _any : Core_Option_Option_Type.t_option (borrowed usize) ]
                      
                      s1)) ]
                ))
          | s1 = 
            [ &_22 <- ([#"../03_std_iterators.rs" 29 4 29 87] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq (borrowed usize)) ]
            
            s2
          | s2 = bb13 ]
          
        | bb13 = s0
          [ s0 =  [ &produced <- _22 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq (borrowed usize)))-> (!  [ &_22 <- _any ] s1) ] )
          | s1 =  [ &x <- __creusot_proc_iter_elem ] 
            (any [ any_ (_any:borrowed usize)-> (!  [ &__creusot_proc_iter_elem <- _any ] s2) ] )
          | s2 =  [ &x <- { x with current = ([#"../03_std_iterators.rs" 31 13 31 14] (0 : usize)) ; } ] s3
          | s3 = -{resolve'2 x}- s4
          | s4 = bb6 ]
           ]
         ]
      
    | bb9 = s0
      [ s0 = -{resolve'3 iter}- s1 | s1 = -{resolve'4 v}- s2 | s2 = {[#"../03_std_iterators.rs" 29 4 29 87] false} any ]
      
    | bb11 = s0
      [ s0 = -{resolve'3 iter}- s1
      | s1 =  [ &_0 <- [#"../03_std_iterators.rs" 29 4 29 87] () ] s2
      | s2 = -{resolve'4 v}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) = v
    | & iter : Core_Slice_Iter_IterMut_Type.t_itermut usize = any_l () : Core_Slice_Iter_IterMut_Type.t_itermut usize
    | & _5 : Core_Slice_Iter_IterMut_Type.t_itermut usize = any_l () : Core_Slice_Iter_IterMut_Type.t_itermut usize
    | & _6 : borrowed (slice usize) = any_l () : borrowed (slice usize)
    | & _7 : borrowed (slice usize) = any_l () : borrowed (slice usize)
    | & _8 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    | & iter_old : Snapshot.snap_ty (Core_Slice_Iter_IterMut_Type.t_itermut usize) = any_l () : Snapshot.snap_ty (Core_Slice_Iter_IterMut_Type.t_itermut usize)
    | & produced : Snapshot.snap_ty (Seq.seq (borrowed usize)) = any_l () : Snapshot.snap_ty (Seq.seq (borrowed usize))
    | & _17 : Core_Option_Option_Type.t_option (borrowed usize) = any_l () : Core_Option_Option_Type.t_option (borrowed usize)
    | & _18 : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize) = any_l () : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)
    | & _19 : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize) = any_l () : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)
    | & __creusot_proc_iter_elem : borrowed usize = any_l () : borrowed usize
    | & _22 : Snapshot.snap_ty (Seq.seq (borrowed usize)) = any_l () : Snapshot.snap_ty (Seq.seq (borrowed usize))
    | & x : borrowed usize = any_l () : borrowed usize ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../03_std_iterators.rs" 27 0 27 66] forall i : int . 0 <= i
      /\ i < Seq.length (shallow_model'1 v)  -> UIntSize.to_int (index_logic'1 ( ^ v) i) = 0}
      {[@expl:postcondition] [#"../03_std_iterators.rs" 26 10 26 33] Seq.length (shallow_model'0 ( ^ v))
      = Seq.length (shallow_model'1 v)}
      (! return' {result}) ]
    
end
module Core_Iter_Adapters_Take_Take_Type
  use prelude.UIntSize
  use prelude.Int
  type t_take 'i =
    | C_Take 'i usize
    
  function any_l (_ : 'b) : 'a
  let rec t_take < 'i > (input:t_take 'i) (ret  (iter:'i) (n:usize))= any
    [ good (iter:'i) (n:usize)-> {C_Take iter n = input} (! ret {iter} {n})
    | bad (iter:'i) (n:usize)-> {C_Take iter n <> input} {false} any ]
    
end
module Core_Iter_Adapters_Skip_Skip_Type
  use prelude.UIntSize
  use prelude.Int
  type t_skip 'i =
    | C_Skip 'i usize
    
  function any_l (_ : 'b) : 'a
  let rec t_skip < 'i > (input:t_skip 'i) (ret  (iter:'i) (n:usize))= any
    [ good (iter:'i) (n:usize)-> {C_Skip iter n = input} (! ret {iter} {n})
    | bad (iter:'i) (n:usize)-> {C_Skip iter n <> input} {false} any ]
    
end
module C03StdIterators_SkipTake
  type i
  use prelude.Borrow
  predicate invariant'7 (self : borrowed i)
  let rec invariant'7 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : borrowed i)
  let rec inv'7 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : borrowed i . inv'7 x = true
  type item'0
  use seq.Seq
  use seq.Seq
  predicate inv'6 (_x : Seq.seq item'0)
  let rec inv'6 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  predicate inv'2 (_x : i)
  let rec inv'2 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  predicate produces'2 (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'2 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'2 self visited o} (! return' {result}) ]
    
  function produces_trans'2 (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
  let rec produces_trans'2 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] inv'2 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] inv'6 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] inv'2 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] inv'6 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] inv'2 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] produces'2 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] produces'2 a ab b}
    any [ return' (result:())-> {result = produces_trans'2 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'2_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] produces'2 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] produces'2 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] inv'2 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] inv'6 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] inv'2 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] inv'6 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] inv'2 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] produces'2 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'2 (self : i) : ()
  let rec produces_refl'2 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25] inv'2 self}
    any [ return' (result:())-> {result = produces_refl'2 self} (! return' {result}) ] 
  axiom produces_refl'2_spec : forall self : i . ([#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 45] produces'2 self (Seq.empty  : Seq.seq item'0) self)
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate inv'3 (_x : Core_Iter_Adapters_Take_Take_Type.t_take i)
  let rec inv'3 (_x:Core_Iter_Adapters_Take_Take_Type.t_take i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  function iter'0 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : i
  let rec iter'0 (self:Core_Iter_Adapters_Take_Take_Type.t_take i) (return'  (ret:i))= any
    [ return' (result:i)-> {result = iter'0 self} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use prelude.UIntSize
  constant max'0 : usize = (18446744073709551615 : usize)
  function n'0 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : int
  let rec n'0 (self:Core_Iter_Adapters_Take_Take_Type.t_take i) (return'  (ret:int))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/take.rs" 34 9 34 13] inv'3 self}
    any [ return' (result:int)-> {result = n'0 self} (! return' {result}) ] 
  axiom n'0_spec : forall self : Core_Iter_Adapters_Take_Take_Type.t_take i . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 34 9 34 13] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 33 14 33 50] n'0 self >= 0
  /\ n'0 self <= UIntSize.to_int (max'0 : usize))
  predicate produces'1 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) (visited : Seq.seq item'0) (o : Core_Iter_Adapters_Take_Take_Type.t_take i)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/take.rs" 64 12 64 88] n'0 self = n'0 o + Seq.length visited
    /\ produces'2 (iter'0 self) visited (iter'0 o)
  let rec produces'1 (self:Core_Iter_Adapters_Take_Take_Type.t_take i) (visited:Seq.seq item'0) (o:Core_Iter_Adapters_Take_Take_Type.t_take i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'1 (a : Core_Iter_Adapters_Take_Take_Type.t_take i) (ab : Seq.seq item'0) (b : Core_Iter_Adapters_Take_Take_Type.t_take i) (bc : Seq.seq item'0) (c : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    
  let rec produces_trans'1 (a:Core_Iter_Adapters_Take_Take_Type.t_take i) (ab:Seq.seq item'0) (b:Core_Iter_Adapters_Take_Take_Type.t_take i) (bc:Seq.seq item'0) (c:Core_Iter_Adapters_Take_Take_Type.t_take i) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 82 78 83] inv'3 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 61 78 63] inv'6 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 52 78 53] inv'3 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 31 78 33] inv'6 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 22 78 23] inv'3 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/take.rs" 76 15 76 32] produces'1 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/take.rs" 75 15 75 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : Core_Iter_Adapters_Take_Take_Type.t_take i, ab : Seq.seq item'0, b : Core_Iter_Adapters_Take_Take_Type.t_take i, bc : Seq.seq item'0, c : Core_Iter_Adapters_Take_Take_Type.t_take i . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 75 15 75 32] produces'1 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 76 15 76 32] produces'1 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 22 78 23] inv'3 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 31 78 33] inv'6 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 52 78 53] inv'3 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 61 78 63] inv'6 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 82 78 83] inv'3 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 77 14 77 42] produces'1 a (Seq.(++) ab bc) c)
  function produces_refl'1 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
  let rec produces_refl'1 (self:Core_Iter_Adapters_Take_Take_Type.t_take i) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/take.rs" 71 21 71 25] inv'3 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : Core_Iter_Adapters_Take_Take_Type.t_take i . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 71 21 71 25] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 70 14 70 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'6 (self : Seq.seq item'0)
  let rec invariant'6 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq item'0 . inv'6 x = true
  predicate invariant'5 (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i))
  let rec invariant'5 (self:borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i))
  let rec inv'5 (_x:borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i) . inv'5 x = true
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate inv'0 (_x : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))
  let rec inv'0 (_x:Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  predicate resolve'3 (self : item'0)
  let rec resolve'3 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  use seq.Seq
  function iter'1 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : Core_Iter_Adapters_Take_Take_Type.t_take i
    
  let rec iter'1 (self:Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (return'  (ret:Core_Iter_Adapters_Take_Take_Type.t_take i))= any
    [ return' (result:Core_Iter_Adapters_Take_Take_Type.t_take i)-> {result = iter'1 self} (! return' {result}) ]
    
  function n'1 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : int
  let rec n'1 (self:Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (return'  (ret:int))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 23 9 23 13] inv'0 self}
    any [ return' (result:int)-> {result = n'1 self} (! return' {result}) ] 
  axiom n'1_spec : forall self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i) . ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 23 9 23 13] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 22 14 22 50] n'1 self >= 0
  /\ n'1 self <= UIntSize.to_int (max'0 : usize))
  predicate produces'0 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (visited : Seq.seq item'0) (o : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 57 8 64 9] visited = (Seq.empty  : Seq.seq item'0)
    /\ self = o
    \/ n'1 o = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq item'0 . inv'6 s
    /\ Seq.length s = n'1 self
    /\ produces'1 (iter'1 self) (Seq.(++) s visited) (iter'1 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'3 (Seq.get s i)))
  let rec produces'0 (self:Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (visited:Seq.seq item'0) (o:Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (ab : Seq.seq item'0) (b : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (bc : Seq.seq item'0) (c : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : ()
    
  let rec produces_trans'0 (a:Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (ab:Seq.seq item'0) (b:Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (bc:Seq.seq item'0) (c:Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 82 77 83] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 61 77 63] inv'6 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 52 77 53] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 31 77 33] inv'6 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 22 77 23] inv'0 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 75 15 75 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 74 15 74 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i), ab : Seq.seq item'0, b : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i), bc : Seq.seq item'0, c : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i) . ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 74 15 74 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 75 15 75 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 22 77 23] inv'0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 31 77 33] inv'6 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 52 77 53] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 61 77 63] inv'6 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 82 77 83] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 76 14 76 42] produces'0 a (Seq.(++) ab bc) c)
  function produces_refl'0 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : ()
    
  let rec produces_refl'0 (self:Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 70 21 70 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i) . ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 70 21 70 25] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 69 14 69 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'4 (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)))
    
  let rec invariant'4 (self:borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)))
    
  let rec inv'4 (_x:borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) . inv'4 x
  = true
  predicate invariant'3 (self : Core_Iter_Adapters_Take_Take_Type.t_take i)
  let rec invariant'3 (self:Core_Iter_Adapters_Take_Take_Type.t_take i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Iter_Adapters_Take_Take_Type.t_take i . inv'3 x = true
  predicate invariant'2 (self : i)
  let rec invariant'2 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : i . inv'2 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'1 (self : Core_Option_Option_Type.t_option item'0)
  let rec invariant'1 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Core_Option_Option_Type.t_option item'0)
  let rec inv'1 (_x:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Core_Option_Option_Type.t_option item'0 . inv'1 x = true
  predicate invariant'0 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))
  let rec invariant'0 (self:Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i) . inv'0 x
  = true
  use prelude.Intrinsic
  predicate resolve'1 (self : Core_Option_Option_Type.t_option item'0)
  let rec resolve'1 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'4 (self : i)
  let rec resolve'4 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  predicate resolve'2 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) =
    [#"../../../../../creusot-contracts/src/std/iter/take.rs" 45 12 45 33] resolve'4 (iter'0 self)
  let rec resolve'2 (self:Core_Iter_Adapters_Take_Take_Type.t_take i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) =
    [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 34 12 34 33] resolve'2 (iter'1 self)
  let rec resolve'0 (self:Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use seq.Seq
  predicate completed'2 (self : borrowed i)
  let rec completed'2 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'2 self} (! return' {result}) ]
    
  function iter_mut'0 (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : borrowed i
  let rec iter_mut'0 (self:borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) (return'  (ret:borrowed i))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 21 26 25] inv'5 self}
    any [ return' (result:borrowed i)-> {result = iter_mut'0 self} (! return' {result}) ] 
  axiom iter_mut'0_spec : forall self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i) . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 21 26 25] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 4 26 36] inv'7 (iter_mut'0 self))
  && ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 25 14 25 68] iter'0 ( * self) =  * iter_mut'0 self
  /\ iter'0 ( ^ self) =  ^ iter_mut'0 self)
  predicate resolve'5 (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'5 (self:borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'5 self} (! return' {result}) ]
    
  predicate completed'1 (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) =
    [#"../../../../../creusot-contracts/src/std/iter/take.rs" 55 12 56 92] n'0 ( * self) = 0 /\ resolve'5 self
    \/ n'0 ( * self) > 0 /\ n'0 ( * self) = n'0 ( ^ self) + 1 /\ completed'2 (iter_mut'0 self)
  let rec completed'1 (self:borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 43 8 51 9] n'1 ( ^ self) = 0
    /\ (exists i : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i) . exists s : Seq.seq item'0 . inv'5 i
    /\ inv'6 s
    /\ Seq.length s <= n'1 ( * self)
    /\ produces'1 (iter'1 ( * self)) s ( * i)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'3 (Seq.get s i))
    /\ completed'1 i /\  ^ i = iter'1 ( ^ self))
  let rec completed'0 (self:borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))) (return'  (ret:Core_Option_Option_Type.t_option item'0))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option item'0)-> {inv'1 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  let rec skip'0 (self:Core_Iter_Adapters_Take_Take_Type.t_take i) (n:usize) (return'  (ret:Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))-> {inv'0 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] iter'1 result = self
      /\ n'1 result = UIntSize.to_int n}
      (! return' {result}) ]
    
  let rec take'0 (self:i) (n:usize) (return'  (ret:Core_Iter_Adapters_Take_Take_Type.t_take i))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:Core_Iter_Adapters_Take_Take_Type.t_take i)-> {inv'3 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] iter'0 result = self
      /\ n'0 result = UIntSize.to_int n}
      (! return' {result}) ]
    
  let rec skip_take (iter:i) (n:usize) (return'  (ret:()))= {[#"../03_std_iterators.rs" 35 30 35 34] inv'2 iter}
    (! bb0
    [ bb0 = s0
      [ s0 = take'0 {iter} {n} (fun (_ret':Core_Iter_Adapters_Take_Take_Type.t_take i) ->  [ &_6 <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = skip'0 {_6} {n}
          (fun (_ret':Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) ->
             [ &_5 <- _ret' ] 
            s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = Borrow.borrow_mut
          <Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)>
          {_5}
          (fun (_ret':borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))) ->
             [ &_4 <- _ret' ] 
             [ &_5 <-  ^ _4 ] 
            s1)
      | s1 = -{inv'0 ( ^ _4)}- s2
      | s2 = next'0 {_4} (fun (_ret':Core_Option_Option_Type.t_option item'0) ->  [ &res <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 _5} s1
      | s1 = -{resolve'0 _5}- s2
      | s2 = {[@expl:type invariant] inv'1 res} s3
      | s3 = -{resolve'1 res}- s4
      | s4 = bb4 ]
      
    | bb4 = s0
      [ s0 = {[@expl:assertion] [#"../03_std_iterators.rs" 38 20 38 31] res = Core_Option_Option_Type.C_None} s1
      | s1 = bb5 ]
      
    | bb5 = s0 [ s0 =  [ &_0 <- [#"../03_std_iterators.rs" 35 49 39 1] () ] s1 | s1 = bb6 ] 
    | bb6 = s0 [ s0 = bb7 ] 
    | bb7 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & iter : i = iter
    | & n : usize = n
    | & res : Core_Option_Option_Type.t_option item'0 = any_l () : Core_Option_Option_Type.t_option item'0
    | & _4 : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) = any_l () : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))
    | & _5 : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i) = any_l () : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)
    | & _6 : Core_Iter_Adapters_Take_Take_Type.t_take i = any_l () : Core_Iter_Adapters_Take_Take_Type.t_take i ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C03StdIterators_Counter_Closure0_Type
  use prelude.UInt32
  use seq.Seq
  use prelude.Snapshot
  use prelude.Int16
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  type c03stditerators_counter_closure0  =
    | C03stditerators_counter_closure0 (borrowed usize)
    
  let rec c03stditerators_counter_closure0 (input:c03stditerators_counter_closure0) (ret  (cnt:borrowed usize))= any
    [ good (cnt:borrowed usize)-> {C03stditerators_counter_closure0 cnt = input} (! ret {cnt})
    | bad (cnt:borrowed usize)-> {C03stditerators_counter_closure0 cnt <> input} {false} any ]
    
end
module C03StdIterators_Counter_Closure0
  use prelude.Int16
  use prelude.UInt32
  use seq.Seq
  use prelude.Snapshot
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use C03StdIterators_Counter_Closure0_Type as C03StdIterators_Counter_Closure0_Type
  function field_0'0 [#"../03_std_iterators.rs" 48 12 48 91] (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : borrowed usize
    
   =
    let C03StdIterators_Counter_Closure0_Type.C03stditerators_counter_closure0 a = self in a
  let rec field_0'0 (self:C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:borrowed usize))= any
    [ return' (result:borrowed usize)-> {result = field_0'0 self} (! return' {result}) ]
    
  predicate unnest'0 [#"../03_std_iterators.rs" 48 12 48 91] (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (_2 : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
   =
     ^ field_0'0 _2 =  ^ field_0'0 self
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  use prelude.Snapshot
  use prelude.UIntSize
  use prelude.Intrinsic
  predicate resolve'0 (self : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec c03stditerators_counter_closure0 (_1:borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (x:uint32) (_prod:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:uint32))= {[#"../03_std_iterators.rs" 47 23 47 65] UIntSize.to_int ( * field_0'0 ( * _1))
    = Seq.length (Snapshot.inner _prod)
    /\  * field_0'0 ( * _1) < (max'0 : usize)}
    (! bb0
    [ bb0 = s0
      [ s0 = C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 { * _1}
          (fun (r'0:borrowed usize) ->
            UIntSize.add { * r'0} {[#"../03_std_iterators.rs" 50 23 50 24] (1 : usize)}
              (fun (_ret':usize) ->
                C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 { * _1}
                  (fun (l'0:borrowed usize) ->
                    
                    [ &_1 <- { _1 with current = (C03StdIterators_Counter_Closure0_Type.C03stditerators_counter_closure0 ({ l'0 with current = _ret' ; }) : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) ; } ]
                    
                    s1)))
      | s1 = -{resolve'0 _1}- s2
      | s2 =  [ &res1 <- x ] s3
      | s3 =  [ &res <- res1 ] s4
      | s4 =  [ &_0 <- res ] s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l () : uint32
    | & _1 : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 = _1
    | & x : uint32 = x
    | & res : uint32 = any_l () : uint32
    | & res1 : uint32 = any_l () : uint32 ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] unnest'0 ( * _1) ( ^ _1)}
      {[@expl:postcondition] [#"../03_std_iterators.rs" 48 22 48 89] UIntSize.to_int ( * field_0'0 ( ^ _1))
      = UIntSize.to_int ( * field_0'0 ( * _1)) + 1
      /\ UIntSize.to_int ( * field_0'0 ( ^ _1)) = Seq.length (Snapshot.inner _prod) + 1 /\ result = x}
      (! return' {result}) ]
    
end
module CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  use prelude.Snapshot
  type t_mapinv 'i 'b 'f =
    | C_MapInv 'i 'f (Snapshot.snap_ty (Seq.seq 'b))
    
  function any_l (_ : 'b) : 'a
  let rec t_mapinv < 'i > < 'b > < 'f > (input:t_mapinv 'i 'b 'f) (ret  (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b)))= any
    [ good (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b))-> {C_MapInv iter func produced = input}
      (! ret {iter} {func} {produced})
    | bad (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b))-> {C_MapInv iter func produced <> input}
      {false}
      any ]
    
  function mapinv_iter (self : t_mapinv 'i 'b 'f) : 'i =
    match self with
      | C_MapInv a _ _ -> a
      end
  function mapinv_func (self : t_mapinv 'i 'b 'f) : 'f =
    match self with
      | C_MapInv _ a _ -> a
      end
  function mapinv_produced (self : t_mapinv 'i 'b 'f) : Snapshot.snap_ty (Seq.seq 'b) =
    match self with
      | C_MapInv _ _ a -> a
      end
end
module C03StdIterators_Counter
  use prelude.UInt32
  use seq.Seq
  use prelude.Snapshot
  predicate invariant'15 (self : Snapshot.snap_ty (Seq.seq uint32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'15 (self:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'15 self} (! return' {result}) ]
    
  predicate inv'15 (_x : Snapshot.snap_ty (Seq.seq uint32))
  let rec inv'15 (_x:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'15 _x} (! return' {result}) ]
    
  axiom inv'15 : forall x : Snapshot.snap_ty (Seq.seq uint32) . inv'15 x = true
  use prelude.Slice
  predicate invariant'14 (self : slice uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'14 (self:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'14 self} (! return' {result}) ]
    
  predicate inv'14 (_x : slice uint32)
  let rec inv'14 (_x:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'14 _x} (! return' {result}) ]
    
  axiom inv'14 : forall x : slice uint32 . inv'14 x = true
  use prelude.UIntSize
  use prelude.Int16
  use prelude.Borrow
  use C03StdIterators_Counter_Closure0_Type as C03StdIterators_Counter_Closure0_Type
  predicate invariant'13 (self : Seq.seq (borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'13 (self:Seq.seq (borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'13 self} (! return' {result}) ]
    
  predicate inv'13 (_x : Seq.seq (borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0))
  let rec inv'13 (_x:Seq.seq (borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'13 _x} (! return' {result}) ]
    
  axiom inv'13 : forall x : Seq.seq (borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) . inv'13 x
  = true
  predicate invariant'12 (self : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'12 (self:borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'12 self} (! return' {result}) ]
    
  predicate inv'12 (_x : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
  let rec inv'12 (_x:borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'12 _x} (! return' {result}) ]
    
  axiom inv'12 : forall x : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . inv'12 x
  = true
  predicate invariant'11 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'11 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  predicate inv'11 (_x : uint32)
  let rec inv'11 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  axiom inv'11 : forall x : uint32 . inv'11 x = true
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate invariant'10 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'10 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32))
  let rec inv'10 (_x:borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32) . inv'10 x = true
  predicate invariant'9 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'9 (self:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : Seq.seq uint32)
  let rec inv'9 (_x:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : Seq.seq uint32 . inv'9 x = true
  predicate inv'6 (_x : Seq.seq uint32)
  let rec inv'6 (_x:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'8 (_x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
  let rec inv'8 (_x:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq uint32
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq uint32))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'8 self}
    any [ return' (result:Seq.seq uint32)-> {result = shallow_model'0 self} (! return' {result}) ] 
  axiom shallow_model'0_spec : forall self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'8 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'6 (shallow_model'0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'8 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'6 (shallow_model'0 self)
  let rec invariant'8 (self:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  axiom inv'8 : forall x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) . inv'8 x = true
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  predicate inv'5 (_x : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
  let rec inv'5 (_x:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  function field_0'0 [#"../03_std_iterators.rs" 48 12 48 91] (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : borrowed usize
    
   =
    let C03StdIterators_Counter_Closure0_Type.C03stditerators_counter_closure0 a = self in a
  let rec field_0'0 (self:C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:borrowed usize))= any
    [ return' (result:borrowed usize)-> {result = field_0'0 self} (! return' {result}) ]
    
  predicate unnest'0 [#"../03_std_iterators.rs" 48 12 48 91] (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (_2 : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
   =
     ^ field_0'0 _2 =  ^ field_0'0 self
  use seq.Seq
  use prelude.Snapshot
  predicate postcondition_mut'0 [#"../03_std_iterators.rs" 48 12 48 91] (self : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (result : uint32)
    
   =
    (let (x, _prod) = args in UIntSize.to_int ( * field_0'0 ( ^ self)) = UIntSize.to_int ( * field_0'0 ( * self)) + 1
    /\ UIntSize.to_int ( * field_0'0 ( ^ self)) = Seq.length (Snapshot.inner _prod) + 1 /\ result = x)
    /\ unnest'0 ( * self) ( ^ self)
  use seq.Seq
  predicate precondition'0 [#"../03_std_iterators.rs" 48 12 48 91] (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32)))
    
   =
    [#"../03_std_iterators.rs" 47 23 47 65] let (x, _prod) = args in UIntSize.to_int ( * field_0'0 self)
    = Seq.length (Snapshot.inner _prod)
    /\  * field_0'0 self < (max'0 : usize)
  use prelude.Snapshot
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Snapshot
  use prelude.Slice
  function shallow_model'4 (self : slice uint32) : Seq.seq uint32
  let rec shallow_model'4 (self:slice uint32) (return'  (ret:Seq.seq uint32))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'14 self}
    any [ return' (result:Seq.seq uint32)-> {result = shallow_model'4 self} (! return' {result}) ] 
  axiom shallow_model'4_spec : forall self : slice uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'14 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'6 (shallow_model'4 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'4 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'4 self)
  <= UIntSize.to_int (max'0 : usize))
  function index_logic'1 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'4 self) ix
  let rec index_logic'1 (self:slice uint32) (ix:int) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {result = index_logic'1 self ix} (! return' {result}) ]
    
  function shallow_model'1 (self : slice uint32) : Seq.seq uint32 =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'4 self
  let rec shallow_model'1 (self:slice uint32) (return'  (ret:Seq.seq uint32))= any
    [ return' (result:Seq.seq uint32)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : slice uint32)
  let rec inv'1 (_x:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  function to_ref_seq'0 (self : slice uint32) : Seq.seq uint32
  let rec to_ref_seq'0 (self:slice uint32) (return'  (ret:Seq.seq uint32))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv'1 self}
    any [ return' (result:Seq.seq uint32)-> {result = to_ref_seq'0 self} (! return' {result}) ] 
  axiom to_ref_seq'0_spec : forall self : slice uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 4 91 35] inv'9 (to_ref_seq'0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 90 4 90 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq'0 self)  -> Seq.get (to_ref_seq'0 self) i = index_logic'1 self i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 89 14 89 41] Seq.length (to_ref_seq'0 self)
  = Seq.length (shallow_model'1 self))
  function shallow_model'3 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) : slice uint32
  let rec shallow_model'3 (self:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:slice uint32))= any
    [ return' (result:slice uint32)-> {result = shallow_model'3 self} (! return' {result}) ]
    
  predicate produces'0 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) (visited : Seq.seq uint32) (tl : Core_Slice_Iter_Iter_Type.t_iter uint32)
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 399 12 399 66] to_ref_seq'0 (shallow_model'3 self)
    = Seq.(++) visited (to_ref_seq'0 (shallow_model'3 tl))
  let rec produces'0 (self:Core_Slice_Iter_Iter_Type.t_iter uint32) (visited:Seq.seq uint32) (tl:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  predicate produces'1 [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (visited : Seq.seq uint32) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 37 8 49 9] unnest'0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ)
    /\ (exists s : Seq.seq uint32 . inv'9 s
    /\ Seq.length s = Seq.length visited
    /\ produces'0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) s (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter succ)
    /\ Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced succ)
    = Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s
    /\ (exists fs : Seq.seq (borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) . inv'13 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self
      = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    else
       * Seq.get fs 0 = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) ( * Seq.get fs i)
    /\ precondition'0 ( * Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  let rec produces'1 (self:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (visited:Seq.seq uint32) (succ:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited succ} (! return' {result}) ]
    
  function produces_trans'2 (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (ab : Seq.seq uint32) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (bc : Seq.seq uint32) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : ()
    
  let rec produces_trans'2 (a:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (ab:Seq.seq uint32) (b:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (bc:Seq.seq uint32) (c:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] inv'5 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] inv'6 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] inv'5 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] inv'6 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] inv'5 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] produces'1 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'2 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'2_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0, ab : Seq.seq uint32, b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0, bc : Seq.seq uint32, c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] produces'1 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] produces'1 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] inv'5 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] inv'6 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] inv'5 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] inv'6 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] inv'5 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'2 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : ()
    
  let rec produces_refl'2 (self:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 25] inv'5 self}
    any [ return' (result:())-> {result = produces_refl'2 self} (! return' {result}) ] 
  axiom produces_refl'2_spec : forall self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 25] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 45] produces'1 self (Seq.empty  : Seq.seq uint32) self)
  predicate invariant'7 (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0))
    
  let rec inv'7 (_x:borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) . inv'7 x
  = (inv'5 ( * x) /\ inv'5 ( ^ x))
  predicate invariant'6 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq uint32 . inv'6 x = true
  use seq.Seq
  predicate inv'3 (_x : uint32)
  let rec inv'3 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Slice_Iter_Iter_Type.t_iter uint32)
  let rec inv'2 (_x:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  predicate next_precondition'0 (iter : Core_Slice_Iter_Iter_Type.t_iter uint32) (func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (produced : Seq.seq uint32)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 112 8 116 9] forall i : Core_Slice_Iter_Iter_Type.t_iter uint32 . forall e : uint32 . inv'2 i
     -> inv'3 e  -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  let rec next_precondition'0 (iter:Core_Slice_Iter_Iter_Type.t_iter uint32) (func:C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (produced:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func produced} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation'0 (iter : Core_Slice_Iter_Iter_Type.t_iter uint32) (func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 135 8 142 9] forall i : Core_Slice_Iter_Iter_Type.t_iter uint32 . forall b : uint32 . forall f : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . forall e2 : uint32 . forall e1 : uint32 . forall s : Seq.seq uint32 . inv'2 i
     -> inv'11 b
     -> inv'12 f
     -> inv'3 e2
     -> inv'3 e1
     -> inv'9 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  let rec preservation'0 (iter:Core_Slice_Iter_Iter_Type.t_iter uint32) (func:C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  use seq.Seq
  predicate inv'4 (_x : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
  let rec inv'4 (_x:C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  predicate preservation_inv'0 (iter : Core_Slice_Iter_Iter_Type.t_iter uint32) (func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (produced : Seq.seq uint32)
    
  let rec preservation_inv'0 (iter:Core_Slice_Iter_Iter_Type.t_iter uint32) (func:C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (produced:Seq.seq uint32) (return'  (ret:bool))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 42 121 50] inv'9 produced}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 33 121 37] inv'4 func}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 24 121 28] inv'2 iter}
    any [ return' (result:bool)-> {result = preservation_inv'0 iter func produced} (! return' {result}) ] 
  axiom preservation_inv'0_spec : forall iter : Core_Slice_Iter_Iter_Type.t_iter uint32, func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0, produced : Seq.seq uint32 . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 24 121 28] inv'2 iter)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 33 121 37] inv'4 func)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 42 121 50] inv'9 produced)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 120 4 120 83] produced
  = (Seq.empty  : Seq.seq uint32)  -> preservation_inv'0 iter func produced = preservation'0 iter func)
  function shallow_model'5 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) : slice uint32 =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'3 ( * self)
  let rec shallow_model'5 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) (return'  (ret:slice uint32))= any
    [ return' (result:slice uint32)-> {result = shallow_model'5 self} (! return' {result}) ]
    
  predicate resolve'5 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'5 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'5 self} (! return' {result}) ]
    
  predicate completed'1 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 392 20 392 61] resolve'5 self
    /\ shallow_model'4 (shallow_model'5 self) = (Seq.empty  : Seq.seq uint32)
  let rec completed'1 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate reinitialize'0 (_1 : ()) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 148 8 153 9] forall func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . forall iter : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32) . inv'4 func
     -> inv'10 iter
     -> completed'1 iter
     -> next_precondition'0 ( ^ iter) func (Seq.empty  : Seq.seq uint32) /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'5 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
  let rec invariant'5 (self:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  axiom inv'5 : forall x : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . inv'5 x
  = (invariant'5 x
  /\ match x with
    | CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv iter func produced -> true
    end)
  predicate invariant'4 (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . inv'4 x = true
  function produces_trans'1 (a : Core_Slice_Iter_Iter_Type.t_iter uint32) (ab : Seq.seq uint32) (b : Core_Slice_Iter_Iter_Type.t_iter uint32) (bc : Seq.seq uint32) (c : Core_Slice_Iter_Iter_Type.t_iter uint32) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 408 4 408 10] ()
  let rec produces_trans'1 (a:Core_Slice_Iter_Iter_Type.t_iter uint32) (ab:Seq.seq uint32) (b:Core_Slice_Iter_Iter_Type.t_iter uint32) (bc:Seq.seq uint32) (c:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 413 61 413 63] inv'9 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 413 31 413 33] inv'9 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 411 15 411 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 410 15 410 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter uint32, ab : Seq.seq uint32, b : Core_Slice_Iter_Iter_Type.t_iter uint32, bc : Seq.seq uint32, c : Core_Slice_Iter_Iter_Type.t_iter uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 410 15 410 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 411 15 411 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 413 31 413 33] inv'9 ab)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 413 61 413 63] inv'9 bc)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 412 14 412 42] produces'0 a (Seq.(++) ab bc) c)
  function produces_refl'1 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) : () =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 403 4 403 10] ()
  let rec produces_refl'1 (self:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:()))= any
    [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ]
    
  axiom produces_refl'1_spec : forall self : Core_Slice_Iter_Iter_Type.t_iter uint32 . [#"../../../../../creusot-contracts/src/std/slice.rs" 405 14 405 45] produces'0 self (Seq.empty  : Seq.seq uint32) self
  predicate invariant'3 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : uint32 . inv'3 x = true
  predicate invariant'2 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Slice_Iter_Iter_Type.t_iter uint32 . inv'2 x = true
  predicate invariant'1 (self : slice uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : slice uint32 . inv'1 x = true
  predicate invariant'0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
  let rec inv'0 (_x:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) . inv'0 x = true
  function produces_trans'0 (a : Core_Slice_Iter_Iter_Type.t_iter uint32) (ab : Seq.seq uint32) (b : Core_Slice_Iter_Iter_Type.t_iter uint32) (bc : Seq.seq uint32) (c : Core_Slice_Iter_Iter_Type.t_iter uint32) : ()
    
  let rec produces_trans'0 (a:Core_Slice_Iter_Iter_Type.t_iter uint32) (ab:Seq.seq uint32) (b:Core_Slice_Iter_Iter_Type.t_iter uint32) (bc:Seq.seq uint32) (c:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] inv'2 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] inv'9 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] inv'2 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] inv'9 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] inv'2 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter uint32, ab : Seq.seq uint32, b : Core_Slice_Iter_Iter_Type.t_iter uint32, bc : Seq.seq uint32, c : Core_Slice_Iter_Iter_Type.t_iter uint32 . ([#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] inv'2 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] inv'9 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] inv'2 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] inv'9 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] inv'2 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] produces'0 a (Seq.(++) ab bc) c)
  function produces_refl'0 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) : ()
  let rec produces_refl'0 (self:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25] inv'2 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Core_Slice_Iter_Iter_Type.t_iter uint32 . ([#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 45] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  use prelude.Intrinsic
  use seq.Seq
  predicate resolve'2 (self : uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'2 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : uint32
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'0 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  predicate resolve'0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model'0 self)  -> resolve'2 (index_logic'0 self i)
  let rec resolve'0 (self:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate from_iter_post'0 (prod : Seq.seq uint32) (res : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 275 20 275 32] prod = shallow_model'0 res
  let rec from_iter_post'0 (prod:Seq.seq uint32) (res:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = from_iter_post'0 prod res} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 15 8 18 9] Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced ( ^ self))
    = (Seq.empty  : Seq.seq uint32)
    /\ completed'1 (Borrow.borrow_logic (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( * self)) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( * self)
    = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( ^ self)
  let rec completed'0 (self:borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate resolve'6 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'6 (self:borrowed usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'6 self} (! return' {result}) ]
    
  predicate resolve'4 [#"../03_std_iterators.rs" 48 12 48 91] (_1 : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
   =
    resolve'6 (field_0'0 _1)
  predicate resolve'3 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'3 (self:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'1 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 56 4 56 27] resolve'3 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self)
    /\ resolve'4 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
  let rec resolve'1 (self:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  let rec collect'0 (self:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)))= {[@expl:precondition] inv'5 self}
    any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))-> {inv'8 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 136 16 137 83] exists prod : Seq.seq uint32 . exists done' : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) . inv'6 prod
      /\ inv'7 done'
      /\ resolve'1 ( ^ done') /\ completed'0 done' /\ produces'1 self prod ( * done') /\ from_iter_post'0 prod result}
      (! return' {result}) ]
    
  let rec map_inv'0 (self:Core_Slice_Iter_Iter_Type.t_iter uint32) (func:C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (return'  (ret:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 47 27 47 31] inv'4 func}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 47 21 47 25] inv'2 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 45 15 45 70] preservation'0 self func}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 44 15 44 51] reinitialize'0 ()}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 43 4 43 141] forall i2 : Core_Slice_Iter_Iter_Type.t_iter uint32 . forall e : uint32 . inv'2 i2
     -> inv'3 e
     -> produces'0 self (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq uint32))}
    any
    [ return' (result:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)-> {[#"../../../../../creusot-contracts/src/std/iter.rs" 47 4 50 61] inv'5 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 46 14 46 88] result
      = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv self func (Snapshot.new (Seq.empty  : Seq.seq uint32))}
      (! return' {result}) ]
    
  let rec iter'0 (self:slice uint32) (return'  (ret:Core_Slice_Iter_Iter_Type.t_iter uint32))= {[@expl:precondition] inv'1 self}
    any
    [ return' (result:Core_Slice_Iter_Iter_Type.t_iter uint32)-> {[#"../../../../../creusot-contracts/src/std/slice.rs" 238 0 347 1] shallow_model'3 result
      = self}
      (! return' {result}) ]
    
  function shallow_model'2 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq uint32
   =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'0 self
  let rec shallow_model'2 (self:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq uint32))= any
    [ return' (result:Seq.seq uint32)-> {result = shallow_model'2 self} (! return' {result}) ]
    
  let rec deref'0 (self:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:slice uint32))= {[@expl:precondition] inv'0 self}
    any
    [ return' (result:slice uint32)-> {inv'1 result}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 163 26 163 42] shallow_model'1 result = shallow_model'2 self}
      (! return' {result}) ]
    
  let rec counter (v:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &cnt <- [#"../03_std_iterators.rs" 42 18 42 19] (0 : usize) ] s1
      | s1 = deref'0 {v} (fun (_ret':slice uint32) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = iter'0 {_7} (fun (_ret':Core_Slice_Iter_Iter_Type.t_iter uint32) ->  [ &_5 <- _ret' ] s1) | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <usize> {cnt} (fun (_ret':borrowed usize) ->  [ &_10 <- _ret' ]  [ &cnt <-  ^ _10 ] s1)
      | s1 = 
        [ &_9 <- C03StdIterators_Counter_Closure0_Type.C03stditerators_counter_closure0 _10 : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 ]
        
        (any [ any_ (_any:borrowed usize)-> (!  [ &_10 <- _any ] s2) ] )
      | s2 = map_inv'0 {_5} {_9}
          (fun (_ret':CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) ->
             [ &_4 <- _ret' ] 
            s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = collect'0 {_4}
          (fun (_ret':Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) ->  [ &x <- _ret' ] s1)
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = -{resolve'0 v}- s1
      | s1 = -{resolve'0 x}- s2
      | s2 = {[@expl:assertion] [#"../03_std_iterators.rs" 56 20 56 40] Seq.length (shallow_model'0 x)
        = Seq.length (shallow_model'0 v)}
        s3
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = {[@expl:assertion] [#"../03_std_iterators.rs" 57 4 57 35] Seq.(==) (shallow_model'0 x) (shallow_model'0 v)}
        s1
      | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 = {[@expl:assertion] [#"../03_std_iterators.rs" 58 20 58 36] UIntSize.to_int cnt
        = Seq.length (shallow_model'0 x)}
        s1
      | s1 = bb7 ]
      
    | bb7 = s0 [ s0 =  [ &_0 <- [#"../03_std_iterators.rs" 41 28 59 1] () ] s1 | s1 = bb8 ] 
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & v : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) = v
    | & cnt : usize = any_l () : usize
    | & x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
    | & _4 : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 = any_l () : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0
    | & _5 : Core_Slice_Iter_Iter_Type.t_iter uint32 = any_l () : Core_Slice_Iter_Iter_Type.t_iter uint32
    | & _7 : slice uint32 = any_l () : slice uint32
    | & _9 : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 = any_l () : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0
    | & _10 : borrowed usize = any_l () : borrowed usize ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  function any_l (_ : 'b) : 'a
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  function range_end (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  function range_start (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module C03StdIterators_SumRange
  use prelude.IntSize
  use seq.Seq
  predicate invariant'3 (self : Seq.seq isize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Seq.seq isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq isize)
  let rec inv'3 (_x:Seq.seq isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq isize . inv'3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'2 (self : Core_Option_Option_Type.t_option isize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Core_Option_Option_Type.t_option isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option isize)
  let rec inv'2 (_x:Core_Option_Option_Type.t_option isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option isize . inv'2 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant'1 (self : borrowed (Core_Ops_Range_Range_Type.t_range isize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (Core_Ops_Range_Range_Type.t_range isize))
  let rec inv'1 (_x:borrowed (Core_Ops_Range_Range_Type.t_range isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range isize) . inv'1 x = true
  use seq.Seq
  predicate inv'0 (_x : Core_Ops_Range_Range_Type.t_range isize)
  let rec inv'0 (_x:Core_Ops_Range_Range_Type.t_range isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  function deep_model'0 (self : isize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] IntSize.to_int self
  let rec deep_model'0 (self:isize) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  predicate produces'0 (self : Core_Ops_Range_Range_Type.t_range isize) (visited : Seq.seq isize) (o : Core_Ops_Range_Range_Type.t_range isize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  let rec produces'0 (self:Core_Ops_Range_Range_Type.t_range isize) (visited:Seq.seq isize) (o:Core_Ops_Range_Range_Type.t_range isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Ops_Range_Range_Type.t_range isize) (ab : Seq.seq isize) (b : Core_Ops_Range_Range_Type.t_range isize) (bc : Seq.seq isize) (c : Core_Ops_Range_Range_Type.t_range isize) : ()
    
  let rec produces_trans'0 (a:Core_Ops_Range_Range_Type.t_range isize) (ab:Seq.seq isize) (b:Core_Ops_Range_Range_Type.t_range isize) (bc:Seq.seq isize) (c:Core_Ops_Range_Range_Type.t_range isize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'3 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'3 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'0 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Ops_Range_Range_Type.t_range isize, ab : Seq.seq isize, b : Core_Ops_Range_Range_Type.t_range isize, bc : Seq.seq isize, c : Core_Ops_Range_Range_Type.t_range isize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'3 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'3 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Ops_Range_Range_Type.t_range isize) : ()
  let rec produces_refl'0 (self:Core_Ops_Range_Range_Type.t_range isize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Core_Ops_Range_Range_Type.t_range isize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces'0 self (Seq.empty  : Seq.seq isize) self)
  predicate invariant'0 (self : Core_Ops_Range_Range_Type.t_range isize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Core_Ops_Range_Range_Type.t_range isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Ops_Range_Range_Type.t_range isize . inv'0 x = true
  use prelude.Intrinsic
  use seq.Seq
  predicate resolve'0 (self : borrowed (Core_Ops_Range_Range_Type.t_range isize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Ops_Range_Range_Type.t_range isize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve'0 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  let rec completed'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range isize)) (return'  (ret:Core_Option_Option_Type.t_option isize))= {[@expl:precondition] inv'1 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option isize)-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Core_Ops_Range_Range_Type.t_range isize) (res : Core_Ops_Range_Range_Type.t_range isize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'0 (self:Core_Ops_Range_Range_Type.t_range isize) (res:Core_Ops_Range_Range_Type.t_range isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Core_Ops_Range_Range_Type.t_range isize) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'0 (self:Core_Ops_Range_Range_Type.t_range isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Core_Ops_Range_Range_Type.t_range isize) (return'  (ret:Core_Ops_Range_Range_Type.t_range isize))= {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Ops_Range_Range_Type.t_range isize)-> {inv'0 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  let rec sum_range (n:isize) (return'  (ret:isize))= {[#"../03_std_iterators.rs" 61 11 61 18] IntSize.to_int n >= 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &i <- [#"../03_std_iterators.rs" 64 16 64 17] (0 : isize) ] s1
      | s1 = 
        [ &_7 <- Core_Ops_Range_Range_Type.C_Range ([#"../03_std_iterators.rs" 66 13 66 14] (0 : isize)) n : Core_Ops_Range_Range_Type.t_range isize ]
        
        s2
      | s2 = into_iter'0 {_7} (fun (_ret':Core_Ops_Range_Range_Type.t_range isize) ->  [ &iter <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = 
        [ &iter_old <- ([#"../03_std_iterators.rs" 65 4 65 48] Snapshot.new iter) : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range isize) ]
        
        s1
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = 
        [ &produced <- ([#"../03_std_iterators.rs" 65 4 65 48] Snapshot.new (Seq.empty  : Seq.seq isize)) : Snapshot.snap_ty (Seq.seq isize) ]
        
        s1
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [#"../03_std_iterators.rs" 65 16 65 46] IntSize.to_int i
        = Seq.length (Snapshot.inner produced)
        /\ i <= n}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 65 4 65 48] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 65 4 65 48] inv'0 iter}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Core_Ops_Range_Range_Type.t_range isize> {iter}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range isize)) ->
                 [ &_19 <- _ret' ] 
                 [ &iter <-  ^ _19 ] 
                s1)
          | s1 = Borrow.borrow_final <Core_Ops_Range_Range_Type.t_range isize> { * _19} {Borrow.get_id _19}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range isize)) ->
                 [ &_18 <- _ret' ] 
                 [ &_19 <- { _19 with current = ( ^ _18) ; } ] 
                s2)
          | s2 = next'0 {_18} (fun (_ret':Core_Option_Option_Type.t_option isize) ->  [ &_17 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _19}- s1
          | s1 = any
            [ br0 -> {_17 = Core_Option_Option_Type.C_None } (! bb9)
            | br1 (a:isize)-> {_17 = Core_Option_Option_Type.C_Some a} (! bb8) ]
             ]
          
        | bb8 = s0 [ s0 = bb10 ] 
        | bb10 = s0
          [ s0 = Core_Option_Option_Type.some <isize> {_17}
              (fun (r0'0:isize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_22 <- ([#"../03_std_iterators.rs" 65 4 65 48] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq isize) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _22 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq isize))-> (!  [ &_22 <- _any ] s1) ] )
          | s1 = IntSize.add {i} {[#"../03_std_iterators.rs" 67 13 67 14] (1 : isize)}
              (fun (_ret':isize) ->  [ &i <- _ret' ] s2)
          | s2 = bb4 ]
           ]
         ]
      
    | bb7 = s0 [ s0 = {[#"../03_std_iterators.rs" 65 4 65 48] false} any ] 
    | bb9 = s0 [ s0 =  [ &_0 <- i ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : isize = any_l () : isize
    | & n : isize = n
    | & i : isize = any_l () : isize
    | & iter : Core_Ops_Range_Range_Type.t_range isize = any_l () : Core_Ops_Range_Range_Type.t_range isize
    | & _7 : Core_Ops_Range_Range_Type.t_range isize = any_l () : Core_Ops_Range_Range_Type.t_range isize
    | & iter_old : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range isize) = any_l () : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range isize)
    | & produced : Snapshot.snap_ty (Seq.seq isize) = any_l () : Snapshot.snap_ty (Seq.seq isize)
    | & _17 : Core_Option_Option_Type.t_option isize = any_l () : Core_Option_Option_Type.t_option isize
    | & _18 : borrowed (Core_Ops_Range_Range_Type.t_range isize) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range isize)
    | & _19 : borrowed (Core_Ops_Range_Range_Type.t_range isize) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range isize)
    | & __creusot_proc_iter_elem : isize = any_l () : isize
    | & _22 : Snapshot.snap_ty (Seq.seq isize) = any_l () : Snapshot.snap_ty (Seq.seq isize) ]
    
    [ return' (result:isize)-> {[@expl:postcondition] [#"../03_std_iterators.rs" 62 10 62 21] result = n}
      (! return' {result}) ]
    
end
module Core_Iter_Adapters_Enumerate_Enumerate_Type
  use prelude.UIntSize
  use prelude.Int
  type t_enumerate 'i =
    | C_Enumerate 'i usize
    
  function any_l (_ : 'b) : 'a
  let rec t_enumerate < 'i > (input:t_enumerate 'i) (ret  (iter:'i) (count:usize))= any
    [ good (iter:'i) (count:usize)-> {C_Enumerate iter count = input} (! ret {iter} {count})
    | bad (iter:'i) (count:usize)-> {C_Enumerate iter count <> input} {false} any ]
    
end
module C03StdIterators_EnumerateRange
  use prelude.UIntSize
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant'6 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  let rec inv'6 (_x:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv'6 x = true
  use seq.Seq
  predicate invariant'5 (self : Seq.seq (usize, usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:Seq.seq (usize, usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq (usize, usize))
  let rec inv'5 (_x:Seq.seq (usize, usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq (usize, usize) . inv'5 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'4 (self : Core_Option_Option_Type.t_option (usize, usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:Core_Option_Option_Type.t_option (usize, usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Core_Option_Option_Type.t_option (usize, usize))
  let rec inv'4 (_x:Core_Option_Option_Type.t_option (usize, usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Core_Option_Option_Type.t_option (usize, usize) . inv'4 x = true
  use seq.Seq
  predicate inv'3 (_x : Seq.seq usize)
  let rec inv'3 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Ops_Range_Range_Type.t_range usize)
  let rec inv'2 (_x:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  function deep_model'0 (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  let rec deep_model'0 (self:usize) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  predicate produces'1 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  let rec produces'1 (self:Core_Ops_Range_Range_Type.t_range usize) (visited:Seq.seq usize) (o:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'1 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  let rec produces_trans'1 (a:Core_Ops_Range_Range_Type.t_range usize) (ab:Seq.seq usize) (b:Core_Ops_Range_Range_Type.t_range usize) (bc:Seq.seq usize) (c:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'2 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'3 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'2 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'3 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'2 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'1 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'1 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'1 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'2 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'3 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'2 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'3 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'2 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'1 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  let rec produces_refl'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'2 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces'1 self (Seq.empty  : Seq.seq usize) self)
  predicate invariant'3 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq usize . inv'3 x = true
  predicate invariant'2 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv'2 x = true
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  predicate invariant'1 (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    
  let rec inv'0 (_x:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)))
    
  let rec inv'1 (_x:borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) . inv'1 x
  = (inv'0 ( * x) /\ inv'0 ( ^ x))
  use seq.Seq
  use seq.Seq
  function iter'0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : Core_Ops_Range_Range_Type.t_range usize
    
  let rec iter'0 (self:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:Core_Ops_Range_Range_Type.t_range usize))= any
    [ return' (result:Core_Ops_Range_Range_Type.t_range usize)-> {result = iter'0 self} (! return' {result}) ]
    
  function n'0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : int
    
  let rec n'0 (self:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:int))= any
    [ return' (result:int)-> {result = n'0 self} (! return' {result}) ]
    
  use seq.Seq
  predicate produces'0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (visited : Seq.seq (usize, usize)) (o : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 62 8 67 9] Seq.length visited = n'0 o - n'0 self
    /\ (exists s : Seq.seq usize . inv'3 s
    /\ produces'1 (iter'0 self) s (iter'0 o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a) = n'0 self + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  let rec produces'0 (self:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (visited:Seq.seq (usize, usize)) (o:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (ab : Seq.seq (usize, usize)) (b : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (bc : Seq.seq (usize, usize)) (c : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : ()
    
  let rec produces_trans'0 (a:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (ab:Seq.seq (usize, usize)) (b:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (bc:Seq.seq (usize, usize)) (c:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 82 80 83] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 61 80 63] inv'5 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 52 80 53] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 31 80 33] inv'5 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 22 80 23] inv'0 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 78 15 78 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 77 15 77 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize), ab : Seq.seq (usize, usize), b : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize), bc : Seq.seq (usize, usize), c : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize) . ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 77 15 77 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 78 15 78 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 22 80 23] inv'0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 31 80 33] inv'5 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 52 80 53] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 61 80 63] inv'5 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 82 80 83] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 79 14 79 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : ()
    
  let rec produces_refl'0 (self:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 73 21 73 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize) . ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 73 21 73 25] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 72 14 72 45] produces'0 self (Seq.empty  : Seq.seq (usize, usize)) self)
  predicate resolve'5 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'5 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'5 self} (! return' {result}) ]
    
  predicate completed'1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve'5 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  let rec completed'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  constant max'0 : usize = (18446744073709551615 : usize)
  predicate invariant'0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    
  let rec invariant'0 (self:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize) . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Core_Iter_Adapters_Enumerate_Enumerate_Type.C_Enumerate iter count -> true
    end)
  use prelude.Intrinsic
  predicate resolve'4 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'4 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  predicate resolve'2 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 33 12 33 33] resolve'4 (iter'0 self)
  let rec resolve'2 (self:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'3 (self : usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'3 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'1 (self : (usize, usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'3 (let (a, _) = self in a)
    /\ resolve'3 (let (_, a) = self in a)
  let rec resolve'1 (self:(usize, usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'0 (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)))
    
   =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 56 8 56 115] exists inner : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv'6 inner
    /\  * inner = iter'0 ( * self) /\  ^ inner = iter'0 ( ^ self) /\ completed'1 inner
  let rec completed'0 (self:borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))) (return'  (ret:Core_Option_Option_Type.t_option (usize, usize)))= {[@expl:precondition] inv'1 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option (usize, usize))-> {inv'4 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq (usize, usize))) (ix : int) : (usize, usize)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33] Seq.get (Snapshot.inner self) ix
  let rec index_logic'0 (self:Snapshot.snap_ty (Seq.seq (usize, usize))) (ix:int) (return'  (ret:(usize, usize)))= any
    [ return' (result:(usize, usize))-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (res : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'0 (self:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (res:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'0 (self:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)))= {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))-> {inv'0 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  let rec enumerate'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))-> {inv'0 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] iter'0 result = self /\ n'0 result = 0}
      (! return' {result}) ]
    
  let rec enumerate_range (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_3 <- Core_Ops_Range_Range_Type.C_Range ([#"../03_std_iterators.rs" 74 20 74 21] (0 : usize)) ([#"../03_std_iterators.rs" 74 23 74 25] (10 : usize)) : Core_Ops_Range_Range_Type.t_range usize ]
        
        s1
      | s1 = enumerate'0 {_3}
          (fun (_ret':Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) ->
             [ &_2 <- _ret' ] 
            s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = into_iter'0 {_2}
          (fun (_ret':Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) ->
             [ &iter <- _ret' ] 
            s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = 
        [ &iter_old <- ([#"../03_std_iterators.rs" 73 4 73 96] Snapshot.new iter) : Snapshot.snap_ty (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) ]
        
        s1
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = 
        [ &produced <- ([#"../03_std_iterators.rs" 73 4 73 96] Snapshot.new (Seq.empty  : Seq.seq (usize, usize))) : Snapshot.snap_ty (Seq.seq (usize, usize)) ]
        
        s1
      | s1 = bb4 ]
      
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [#"../03_std_iterators.rs" 73 4 73 96] forall i : int . 0 <= i
        /\ i < Seq.length (Snapshot.inner produced)
         -> (let (a, _) = index_logic'0 produced i in a) = (let (_, a) = index_logic'0 produced i in a)}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 73 4 73 96] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 73 4 73 96] inv'0 iter}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = Borrow.borrow_mut
              <Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)>
              {iter}
              (fun (_ret':borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))) ->
                 [ &_14 <- _ret' ] 
                 [ &iter <-  ^ _14 ] 
                s1)
          | s1 = -{inv'0 ( ^ _14)}- s2
          | s2 = Borrow.borrow_final
              <Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)>
              { * _14}
              {Borrow.get_id _14}
              (fun (_ret':borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))) ->
                 [ &_13 <- _ret' ] 
                 [ &_14 <- { _14 with current = ( ^ _13) ; } ] 
                s3)
          | s3 = -{inv'0 ( ^ _13)}- s4
          | s4 = next'0 {_13} (fun (_ret':Core_Option_Option_Type.t_option (usize, usize)) ->  [ &_12 <- _ret' ] s5)
          | s5 = bb7 ]
          
        | bb7 = s0
          [ s0 = {[@expl:type invariant] inv'1 _14} s1
          | s1 = -{resolve'0 _14}- s2
          | s2 = any
            [ br0 -> {_12 = Core_Option_Option_Type.C_None } (! bb10)
            | br1 (a:(usize, usize))-> {_12 = Core_Option_Option_Type.C_Some a} (! bb9) ]
             ]
          
        | bb9 = s0 [ s0 = bb11 ] 
        | bb11 = s0
          [ s0 = Core_Option_Option_Type.some <(usize, usize)> {_12}
              (fun (r0'0:(usize, usize)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_17 <- ([#"../03_std_iterators.rs" 73 4 73 96] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq (usize, usize)) ]
            
            s2
          | s2 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &produced <- _17 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq (usize, usize)))-> (!  [ &_17 <- _any ] s1) ] )
          | s1 =  [ &ix <- let (r'0, _) = __creusot_proc_iter_elem in r'0 ] s2
          | s2 =  [ &x <- let (_, r'1) = __creusot_proc_iter_elem in r'1 ] s3
          | s3 = -{resolve'1 __creusot_proc_iter_elem}- s4
          | s4 =  [ &_21 <- (ix, x) ] s5
          | s5 = -{resolve'1 _21}- s6
          | s6 = bb5 ]
           ]
         ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'0 iter} s1
      | s1 = -{resolve'2 iter}- s2
      | s2 = {[#"../03_std_iterators.rs" 73 4 73 96] false} any ]
      
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv'0 iter} s1
      | s1 = -{resolve'2 iter}- s2
      | s2 =  [ &_0 <- [#"../03_std_iterators.rs" 73 4 73 96] () ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & iter : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize) = any_l () : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)
    | & _2 : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize) = any_l () : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)
    | & _3 : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & iter_old : Snapshot.snap_ty (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) = any_l () : Snapshot.snap_ty (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    | & produced : Snapshot.snap_ty (Seq.seq (usize, usize)) = any_l () : Snapshot.snap_ty (Seq.seq (usize, usize))
    | & _12 : Core_Option_Option_Type.t_option (usize, usize) = any_l () : Core_Option_Option_Type.t_option (usize, usize)
    | & _13 : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) = any_l () : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    | & _14 : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) = any_l () : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    | & __creusot_proc_iter_elem : (usize, usize) = any_l () : (usize, usize)
    | & _17 : Snapshot.snap_ty (Seq.seq (usize, usize)) = any_l () : Snapshot.snap_ty (Seq.seq (usize, usize))
    | & ix : usize = any_l () : usize
    | & x : usize = any_l () : usize
    | & _21 : (usize, usize) = any_l () : (usize, usize) ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Core_Iter_Adapters_Zip_Zip_Type
  use prelude.UIntSize
  use prelude.Int
  type t_zip 'a 'b =
    | C_Zip 'a 'b usize usize usize
    
  function any_l (_ : 'b) : 'a
  let rec t_zip < 'a > < 'b > (input:t_zip 'a 'b) (ret  (a:'a) (b:'b) (index:usize) (len:usize) (a_len:usize))= any
    [ good (a:'a) (b:'b) (index:usize) (len:usize) (a_len:usize)-> {C_Zip a b index len a_len = input}
      (! ret {a} {b} {index} {len} {a_len})
    | bad (a:'a) (b:'b) (index:usize) (len:usize) (a_len:usize)-> {C_Zip a b index len a_len <> input} {false} any ]
    
end
module C03StdIterators_MyReverse
  type t
  use prelude.UIntSize
  predicate invariant'12 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'12 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'12 self} (! return' {result}) ]
    
  predicate inv'12 (_x : usize)
  let rec inv'12 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'12 _x} (! return' {result}) ]
    
  axiom inv'12 : forall x : usize . inv'12 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant'11 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'11 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  predicate inv'11 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  let rec inv'11 (_x:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  axiom inv'11 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv'11 x = true
  use seq.Seq
  predicate invariant'10 (self : Seq.seq (usize, usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'10 (self:Seq.seq (usize, usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : Seq.seq (usize, usize))
  let rec inv'10 (_x:Seq.seq (usize, usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : Seq.seq (usize, usize) . inv'10 x = true
  predicate invariant'9 (self : Seq.seq t)
  let rec invariant'9 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : Seq.seq t)
  let rec inv'9 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : Seq.seq t . inv'9 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'8 (self : Core_Option_Option_Type.t_option (usize, usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'8 (self:Core_Option_Option_Type.t_option (usize, usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Core_Option_Option_Type.t_option (usize, usize))
  let rec inv'8 (_x:Core_Option_Option_Type.t_option (usize, usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Core_Option_Option_Type.t_option (usize, usize) . inv'8 x = true
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  predicate invariant'7 (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)))
    
  let rec inv'7 (_x:borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) . inv'7 x
  = true
  use seq.Seq
  predicate inv'6 (_x : Seq.seq usize)
  let rec inv'6 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  predicate inv'5 (_x : Core_Ops_Range_Range_Type.t_range usize)
  let rec inv'5 (_x:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  function deep_model'0 (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  let rec deep_model'0 (self:usize) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  predicate produces'1 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  let rec produces'1 (self:Core_Ops_Range_Range_Type.t_range usize) (visited:Seq.seq usize) (o:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'1 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  let rec produces_trans'1 (a:Core_Ops_Range_Range_Type.t_range usize) (ab:Seq.seq usize) (b:Core_Ops_Range_Range_Type.t_range usize) (bc:Seq.seq usize) (c:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'5 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'6 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'5 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'6 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'5 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'1 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'1 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'1 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'5 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'6 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'5 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'6 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'5 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'1 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  let rec produces_refl'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'5 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces'1 self (Seq.empty  : Seq.seq usize) self)
  predicate invariant'6 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq usize . inv'6 x = true
  predicate invariant'5 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  axiom inv'5 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv'5 x = true
  use prelude.Slice
  predicate invariant'4 (self : slice t)
  let rec invariant'4 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : slice t)
  let rec inv'4 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : slice t . inv'4 x = true
  predicate invariant'3 (self : borrowed (slice t))
  let rec invariant'3 (self:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed (slice t))
  let rec inv'3 (_x:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed (slice t) . inv'3 x = true
  predicate invariant'2 (self : slice t)
  let rec invariant'2 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : slice t)
  let rec inv'2 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : slice t . inv'2 x = true
  use seq.Seq
  predicate inv'1 (_x : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
    
  let rec inv'1 (_x:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  function iterb'0 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : Core_Ops_Range_Range_Type.t_range usize
    
  let rec iterb'0 (self:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:Core_Ops_Range_Range_Type.t_range usize))= any
    [ return' (result:Core_Ops_Range_Range_Type.t_range usize)-> {result = iterb'0 self} (! return' {result}) ]
    
  function itera'0 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : Core_Ops_Range_Range_Type.t_range usize
    
  let rec itera'0 (self:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:Core_Ops_Range_Range_Type.t_range usize))= any
    [ return' (result:Core_Ops_Range_Range_Type.t_range usize)-> {result = itera'0 self} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  predicate produces'0 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (visited : Seq.seq (usize, usize)) (o : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 44 8 50 9] exists p2 : Seq.seq usize . exists p1 : Seq.seq usize . inv'6 p2
    /\ inv'6 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 (itera'0 self) p1 (itera'0 o) /\ produces'1 (iterb'0 self) p2 (iterb'0 o)
  let rec produces'0 (self:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (visited:Seq.seq (usize, usize)) (o:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (ab : Seq.seq (usize, usize)) (b : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (bc : Seq.seq (usize, usize)) (c : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : ()
    
  let rec produces_trans'0 (a:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (ab:Seq.seq (usize, usize)) (b:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (bc:Seq.seq (usize, usize)) (c:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 82 63 83] inv'1 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 61 63 63] inv'10 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 52 63 53] inv'1 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 31 63 33] inv'10 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 22 63 23] inv'1 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 61 15 61 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 60 15 60 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize), ab : Seq.seq (usize, usize), b : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize), bc : Seq.seq (usize, usize), c : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize) . ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 60 15 60 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 61 15 61 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 22 63 23] inv'1 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 31 63 33] inv'10 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 52 63 53] inv'1 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 61 63 63] inv'10 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 82 63 83] inv'1 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 62 14 62 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : ()
    
  let rec produces_refl'0 (self:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 56 21 56 25] inv'1 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize) . ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 56 21 56 25] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 55 14 55 45] produces'0 self (Seq.empty  : Seq.seq (usize, usize)) self)
  predicate invariant'1 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize) . inv'1 x
  = true
  use prelude.Snapshot
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (slice t)))
  let rec invariant'0 (self:Snapshot.snap_ty (borrowed (slice t))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (slice t)))
  let rec inv'0 (_x:Snapshot.snap_ty (borrowed (slice t))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (slice t)) . inv'0 x = true
  use seq.Seq
  use seq.Reverse
  use prelude.Slice
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  function shallow_model'2 (self : slice t) : Seq.seq t
  let rec shallow_model'2 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'2 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'2 self} (! return' {result}) ] 
  axiom shallow_model'2_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'9 (shallow_model'2 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'2 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  use prelude.Intrinsic
  predicate resolve'3 (self : borrowed (slice t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'3 (self:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  use seq.Seq
  function index_logic'1 [@inline:trivial] (self : slice t) (ix : usize) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 54 8 54 32] Seq.get (shallow_model'2 self) (UIntSize.to_int ix)
  let rec index_logic'1 (self:slice t) (ix:usize) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'1 self ix} (! return' {result}) ]
    
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'2 self) ix
  let rec index_logic'0 (self:slice t) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use seq.Permut
  function shallow_model'0 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'2 ( * self)
  let rec shallow_model'0 (self:borrowed (slice t)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec swap'0 (self:borrowed (slice t)) (a:usize) (b:usize) (return'  (ret:()))= {[@expl:precondition] inv'3 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 251 19 251 35] UIntSize.to_int b
    < Seq.length (shallow_model'0 self)}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 250 19 250 35] UIntSize.to_int a
    < Seq.length (shallow_model'0 self)}
    any
    [ return' (result:())-> {[#"../../../../../creusot-contracts/src/std/slice.rs" 252 8 252 52] Permut.exchange (shallow_model'2 ( ^ self)) (shallow_model'0 self) (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  predicate resolve'4 (self : usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'4 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  predicate resolve'2 (self : (usize, usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'4 (let (a, _) = self in a)
    /\ resolve'4 (let (_, a) = self in a)
  let rec resolve'2 (self:(usize, usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'1 (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)))
    
   =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'5 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'5 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'5 self} (! return' {result}) ]
    
  predicate completed'1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve'5 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  let rec completed'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 31 8 38 9] exists b : borrowed (Core_Ops_Range_Range_Type.t_range usize) . exists a : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv'11 b
    /\ inv'11 a
    /\  * a = itera'0 ( * self)
    /\  * b = iterb'0 ( * self)
    /\  ^ a = itera'0 ( ^ self)
    /\  ^ b = iterb'0 ( ^ self)
    /\ (completed'1 a /\ resolve'5 b
    \/ (exists x : usize . inv'12 x /\ produces'1 ( * a) (Seq.singleton x) ( ^ a) /\ resolve'4 x /\ completed'1 b))
  let rec completed'0 (self:borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))) (return'  (ret:Core_Option_Option_Type.t_option (usize, usize)))= {[@expl:precondition] inv'7 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option (usize, usize))-> {inv'8 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  predicate equiv_reverse_range'0 [#"../03_std_iterators.rs" 87 0 87 81] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) (n : int)
    
   =
    [#"../03_std_iterators.rs" 88 4 90 5] forall i : int . l <= i /\ i < u  -> Seq.get s1 i = Seq.get s2 (n - i)
  let rec equiv_reverse_range'0 (s1:Seq.seq t) (s2:Seq.seq t) (l:int) (u:int) (n:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = equiv_reverse_range'0 s1 s2 l u n} (! return' {result}) ]
    
  predicate equiv_range'0 [#"../03_std_iterators.rs" 80 0 80 65] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) =
    [#"../03_std_iterators.rs" 81 4 83 5] forall i : int . l <= i /\ i < u  -> Seq.get s1 i = Seq.get s2 i
  let rec equiv_range'0 (s1:Seq.seq t) (s2:Seq.seq t) (l:int) (u:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = equiv_range'0 s1 s2 l u} (! return' {result}) ]
    
  use prelude.Snapshot
  function shallow_model'4 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'0 self
  let rec shallow_model'4 (self:borrowed (slice t)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'4 self} (! return' {result}) ]
    
  use prelude.Snapshot
  function shallow_model'1 (self : Snapshot.snap_ty (borrowed (slice t))) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model'4 (Snapshot.inner self)
  let rec shallow_model'1 (self:Snapshot.snap_ty (borrowed (slice t))) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'1 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (res : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'1 (self:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (res:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'1 self res} (! return' {result}) ]
    
  predicate into_iter_pre'1 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'1 (self:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'1 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'1 self}
    any
    [ return' (result:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))-> {inv'1 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'1 self result}
      (! return' {result}) ]
    
  predicate into_iter_post'0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'0 (self:Core_Ops_Range_Range_Type.t_range usize) (res:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec zip'0 (self:Core_Ops_Range_Range_Type.t_range usize) (other:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)))= {[@expl:precondition] inv'5 other}
    {[@expl:precondition] inv'5 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 129 27 129 48] into_iter_pre'0 other}
    any
    [ return' (result:Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))-> {inv'1 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 131 26 131 62] into_iter_post'0 other (iterb'0 result)}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] itera'0 result = self}
      (! return' {result}) ]
    
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (slice t)))
  let rec resolve'0 (self:Snapshot.snap_ty (borrowed (slice t))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  function shallow_model'3 (self : slice t) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'2 self
  let rec shallow_model'3 (self:slice t) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'3 self} (! return' {result}) ]
    
  let rec len'0 (self:slice t) (return'  (ret:usize))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:usize)-> {[#"../../../../../creusot-contracts/src/std/slice.rs" 238 0 347 1] Seq.length (shallow_model'3 self)
      = UIntSize.to_int result}
      (! return' {result}) ]
    
  let rec my_reverse (slice:borrowed (slice t)) (return'  (ret:()))= {[#"../03_std_iterators.rs" 94 21 94 26] inv'3 slice}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 { * slice} (fun (_ret':usize) ->  [ &n <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &old_v <- [#"../03_std_iterators.rs" 96 36 96 55] Snapshot.new slice ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_v} s1
      | s1 = -{resolve'0 old_v}- s2
      | s2 = UIntSize.eq
          {[#"../03_std_iterators.rs" 102 26 102 27] (2 : usize)}
          {[#"../03_std_iterators.rs" 102 22 102 27] (0 : usize)}
          (fun (_ret':bool) ->  [ &_12 <- _ret' ] s3)
      | s3 = {[@expl:division by zero] [#"../03_std_iterators.rs" 102 22 102 27] not _12} s4
      | s4 = bb3 ]
      
    | bb3 = s0
      [ s0 = UIntSize.div {n} {[#"../03_std_iterators.rs" 102 26 102 27] (2 : usize)}
          (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1)
      | s1 = 
        [ &_9 <- Core_Ops_Range_Range_Type.C_Range ([#"../03_std_iterators.rs" 102 19 102 20] (0 : usize)) _10 : Core_Ops_Range_Range_Type.t_range usize ]
        
        (any [ any_ (_any:usize)-> (!  [ &_10 <- _any ] s2) ] )
      | s2 = UIntSize.eq
          {[#"../03_std_iterators.rs" 102 40 102 41] (2 : usize)}
          {[#"../03_std_iterators.rs" 102 36 102 41] (0 : usize)}
          (fun (_ret':bool) ->  [ &_16 <- _ret' ] s3)
      | s3 = {[@expl:division by zero] [#"../03_std_iterators.rs" 102 36 102 41] not _16} s4
      | s4 = bb4 ]
      
    | bb4 = s0
      [ s0 = UIntSize.div {n} {[#"../03_std_iterators.rs" 102 40 102 41] (2 : usize)}
          (fun (_ret':usize) ->  [ &_14 <- _ret' ] s1)
      | s1 = 
        [ &_13 <- Core_Ops_Range_Range_Type.C_Range ([#"../03_std_iterators.rs" 102 33 102 34] (0 : usize)) _14 : Core_Ops_Range_Range_Type.t_range usize ]
        
        (any [ any_ (_any:usize)-> (!  [ &_14 <- _any ] s2) ] )
      | s2 = zip'0 {_9} {_13}
          (fun (_ret':Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) ->
             [ &_8 <- _ret' ] 
            s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = into_iter'0 {_8}
          (fun (_ret':Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) ->
             [ &iter <- _ret' ] 
            s1)
      | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 = 
        [ &iter_old <- ([#"../03_std_iterators.rs" 97 4 97 35] Snapshot.new iter) : Snapshot.snap_ty (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) ]
        
        s1
      | s1 = bb7 ]
      
    | bb7 = s0
      [ s0 = 
        [ &produced <- ([#"../03_std_iterators.rs" 97 4 97 35] Snapshot.new (Seq.empty  : Seq.seq (usize, usize))) : Snapshot.snap_ty (Seq.seq (usize, usize)) ]
        
        s1
      | s1 = bb8 ]
      
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = bb9
      [ bb9 = {[@expl:loop invariant] [#"../03_std_iterators.rs" 101 16 101 80] equiv_reverse_range'0 (shallow_model'0 slice) (shallow_model'1 old_v) (UIntSize.to_int n
        - Seq.length (Snapshot.inner produced)) (UIntSize.to_int n) (UIntSize.to_int n - 1)}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 100 16 100 76] equiv_reverse_range'0 (shallow_model'0 slice) (shallow_model'1 old_v) 0 (Seq.length (Snapshot.inner produced)) (UIntSize.to_int n
        - 1)}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 99 16 99 78] equiv_range'0 (shallow_model'0 slice) (shallow_model'1 old_v) (Seq.length (Snapshot.inner produced)) (UIntSize.to_int n
        - Seq.length (Snapshot.inner produced))}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 98 16 98 34] UIntSize.to_int n
        = Seq.length (shallow_model'0 slice)}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 97 16 97 33]  ^ Snapshot.inner old_v =  ^ slice}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 97 4 97 35] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../03_std_iterators.rs" 97 4 97 35] inv'1 iter}
        (! s0) [ s0 = bb10 ] 
        [ bb10 = s0
          [ s0 = Borrow.borrow_mut
              <Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)>
              {iter}
              (fun (_ret':borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))) ->
                 [ &_31 <- _ret' ] 
                 [ &iter <-  ^ _31 ] 
                s1)
          | s1 = Borrow.borrow_final
              <Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)>
              { * _31}
              {Borrow.get_id _31}
              (fun (_ret':borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))) ->
                 [ &_30 <- _ret' ] 
                 [ &_31 <- { _31 with current = ( ^ _30) ; } ] 
                s2)
          | s2 = next'0 {_30} (fun (_ret':Core_Option_Option_Type.t_option (usize, usize)) ->  [ &_29 <- _ret' ] s3)
          | s3 = bb11 ]
          
        | bb11 = s0
          [ s0 = -{resolve'1 _31}- s1
          | s1 = any
            [ br0 -> {_29 = Core_Option_Option_Type.C_None } (! bb14)
            | br1 (a:(usize, usize))-> {_29 = Core_Option_Option_Type.C_Some a} (! bb13) ]
             ]
          
        | bb13 = s0 [ s0 = bb15 ] 
        | bb15 = s0
          [ s0 = Core_Option_Option_Type.some <(usize, usize)> {_29}
              (fun (r0'0:(usize, usize)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_34 <- ([#"../03_std_iterators.rs" 97 4 97 35] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq (usize, usize)) ]
            
            s2
          | s2 = bb16 ]
          
        | bb16 = s0
          [ s0 =  [ &produced <- _34 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq (usize, usize)))-> (!  [ &_34 <- _any ] s1) ] )
          | s1 =  [ &i <- let (r'0, _) = __creusot_proc_iter_elem in r'0 ] s2
          | s2 =  [ &j <- let (_, r'1) = __creusot_proc_iter_elem in r'1 ] s3
          | s3 = -{resolve'2 __creusot_proc_iter_elem}- s4
          | s4 = Borrow.borrow_mut <slice t> { * slice}
              (fun (_ret':borrowed (slice t)) ->
                 [ &_39 <- _ret' ] 
                 [ &slice <- { slice with current = ( ^ _39) ; } ] 
                s5)
          | s5 = -{inv'2 ( ^ _39)}- s6
          | s6 = UIntSize.sub {n} {j} (fun (_ret':usize) ->  [ &_42 <- _ret' ] s7)
          | s7 = UIntSize.sub {_42} {[#"../03_std_iterators.rs" 103 30 103 31] (1 : usize)}
              (fun (_ret':usize) ->  [ &_41 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_42 <- _any ] s8) ] ))
          | s8 = swap'0 {_39} {i} {_41} (fun (_ret':()) ->  [ &_38 <- _ret' ] s9)
          | s9 = bb17 ]
          
        | bb17 = s0
          [ s0 = {[@expl:assertion] [#"../03_std_iterators.rs" 104 22 104 52] index_logic'0 ( * Snapshot.inner old_v) (UIntSize.to_int n
            - UIntSize.to_int j
            - 1)
            = index_logic'1 ( * slice) i}
            s1
          | s1 = bb9 ]
           ]
         ]
      
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv'3 slice} s1
      | s1 = -{resolve'3 slice}- s2
      | s2 = {[#"../03_std_iterators.rs" 97 4 97 35] false} any ]
      
    | bb14 = s0
      [ s0 = {[@expl:type invariant] inv'3 slice} s1
      | s1 = -{resolve'3 slice}- s2
      | s2 =  [ &_0 <- [#"../03_std_iterators.rs" 97 4 97 35] () ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & slice : borrowed (slice t) = slice
    | & n : usize = any_l () : usize
    | & old_v : Snapshot.snap_ty (borrowed (slice t)) = any_l () : Snapshot.snap_ty (borrowed (slice t))
    | & iter : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize) = any_l () : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)
    | & _8 : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize) = any_l () : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)
    | & _9 : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & _10 : usize = any_l () : usize
    | & _12 : bool = any_l () : bool
    | & _13 : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & _14 : usize = any_l () : usize
    | & _16 : bool = any_l () : bool
    | & iter_old : Snapshot.snap_ty (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) = any_l () : Snapshot.snap_ty (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
    | & produced : Snapshot.snap_ty (Seq.seq (usize, usize)) = any_l () : Snapshot.snap_ty (Seq.seq (usize, usize))
    | & _29 : Core_Option_Option_Type.t_option (usize, usize) = any_l () : Core_Option_Option_Type.t_option (usize, usize)
    | & _30 : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) = any_l () : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
    | & _31 : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) = any_l () : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
    | & __creusot_proc_iter_elem : (usize, usize) = any_l () : (usize, usize)
    | & _34 : Snapshot.snap_ty (Seq.seq (usize, usize)) = any_l () : Snapshot.snap_ty (Seq.seq (usize, usize))
    | & i : usize = any_l () : usize
    | & j : usize = any_l () : usize
    | & _38 : () = any_l () : ()
    | & _39 : borrowed (slice t) = any_l () : borrowed (slice t)
    | & _41 : usize = any_l () : usize
    | & _42 : usize = any_l () : usize ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../03_std_iterators.rs" 93 0 93 46] Seq.(==) (shallow_model'2 ( ^ slice)) (Reverse.reverse (shallow_model'0 slice))}
      (! return' {result}) ]
    
end
