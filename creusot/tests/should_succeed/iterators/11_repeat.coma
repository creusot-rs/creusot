
module C11Repeat_Repeat_Type
  type t_repeat 'a =
    | C_Repeat 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_repeat < 'a > (input:t_repeat 'a) (ret  (element:'a))= any
    [ good (element:'a)-> {C_Repeat element = input} (! ret {element})
    | bad (element:'a)-> {C_Repeat element <> input} {false} any ]
    
  
  function repeat_element (self : t_repeat 'a) : 'a =
    match self with
      | C_Repeat a -> a
      end
end
module C11Repeat_Impl0_ProducesRefl_Impl
  type a
  
  let%span s11_repeat0 = "../11_repeat.rs" 33 21 33 25
  
  let%span s11_repeat1 = "../11_repeat.rs" 32 14 32 45
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../11_repeat.rs" 24 8 27 9
  
  use C11Repeat_Repeat_Type as Repeat'0
  
  predicate invariant'0 (self : Repeat'0.t_repeat a) =
    [%#span2] true
  
  predicate inv'0 (_x : Repeat'0.t_repeat a)
  
  axiom inv'0 : forall x : Repeat'0.t_repeat a . inv'0 x = true
  
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate produces'0 [#"../11_repeat.rs" 23 4 23 64] (self : Repeat'0.t_repeat a) (visited : Seq.seq a) (o : Repeat'0.t_repeat a)
    
   =
    [%#span3] self = o
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = C11Repeat_Repeat_Type.repeat_element self)
  
  use seq.Seq
  
  constant self  : Repeat'0.t_repeat a
  
  function produces_refl [#"../11_repeat.rs" 33 4 33 26] (self : Repeat'0.t_repeat a) : ()
  
  goal vc_produces_refl : ([%#s11_repeat0] inv'0 self)
   -> ([%#s11_repeat1] produces'0 self (Seq.empty  : Seq.seq a) self)
end
module C11Repeat_Impl0_ProducesTrans_Impl
  type a
  
  let%span s11_repeat0 = "../11_repeat.rs" 37 15 37 32
  
  let%span s11_repeat1 = "../11_repeat.rs" 38 15 38 32
  
  let%span s11_repeat2 = "../11_repeat.rs" 40 22 40 23
  
  let%span s11_repeat3 = "../11_repeat.rs" 40 31 40 33
  
  let%span s11_repeat4 = "../11_repeat.rs" 40 52 40 53
  
  let%span s11_repeat5 = "../11_repeat.rs" 40 61 40 63
  
  let%span s11_repeat6 = "../11_repeat.rs" 40 82 40 83
  
  let%span s11_repeat7 = "../11_repeat.rs" 39 14 39 42
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "../11_repeat.rs" 24 8 27 9
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq a) =
    [%#span8] true
  
  predicate inv'1 (_x : Seq.seq a)
  
  axiom inv'1 : forall x : Seq.seq a . inv'1 x = true
  
  use C11Repeat_Repeat_Type as Repeat'0
  
  predicate invariant'0 (self : Repeat'0.t_repeat a) =
    [%#span8] true
  
  predicate inv'0 (_x : Repeat'0.t_repeat a)
  
  axiom inv'0 : forall x : Repeat'0.t_repeat a . inv'0 x = true
  
  use seq.Seq
  
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate produces'0 [#"../11_repeat.rs" 23 4 23 64] (self : Repeat'0.t_repeat a) (visited : Seq.seq a) (o : Repeat'0.t_repeat a)
    
   =
    [%#span9] self = o
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = C11Repeat_Repeat_Type.repeat_element self)
  
  constant a  : Repeat'0.t_repeat a
  
  constant ab  : Seq.seq a
  
  constant b  : Repeat'0.t_repeat a
  
  constant bc  : Seq.seq a
  
  constant c  : Repeat'0.t_repeat a
  
  function produces_trans [#"../11_repeat.rs" 40 4 40 90] (a : Repeat'0.t_repeat a) (ab : Seq.seq a) (b : Repeat'0.t_repeat a) (bc : Seq.seq a) (c : Repeat'0.t_repeat a) : ()
    
  
  goal vc_produces_trans : ([%#s11_repeat6] inv'0 c)
   -> ([%#s11_repeat5] inv'1 bc)
   -> ([%#s11_repeat4] inv'0 b)
   -> ([%#s11_repeat3] inv'1 ab)
   -> ([%#s11_repeat2] inv'0 a)
   -> ([%#s11_repeat1] produces'0 b bc c)
   -> ([%#s11_repeat0] produces'0 a ab b)  -> ([%#s11_repeat7] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C11Repeat_Impl0_Next
  type a
  
  let%span s11_repeat0 = "../11_repeat.rs" 46 17 46 21
  
  let%span s11_repeat1 = "../11_repeat.rs" 42 14 45 5
  
  let%span s11_repeat2 = "../11_repeat.rs" 46 26 46 35
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../11_repeat.rs" 24 8 27 9
  
  let%span span5 = "../11_repeat.rs" 18 20 18 25
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  
  let%span span9 = "" 0 0 0 0
  
  predicate invariant'3 (self : a)
  
  predicate inv'3 (_x : a)
  
  axiom inv'3 : forall x : a . inv'3 x = true
  
  predicate invariant'2 (self : a)
  
  predicate inv'2 (_x : a)
  
  axiom inv'2 : forall x : a . inv'2 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'1 (self : Option'0.t_option a) =
    [%#span3] true
  
  predicate inv'1 (_x : Option'0.t_option a)
  
  axiom inv'1 : forall x : Option'0.t_option a . inv'1 x = true
  
  use C11Repeat_Repeat_Type as Repeat'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Repeat'0.t_repeat a)) =
    [%#span3] true
  
  predicate inv'0 (_x : borrowed (Repeat'0.t_repeat a))
  
  axiom inv'0 : forall x : borrowed (Repeat'0.t_repeat a) . inv'0 x = true
  
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate produces'0 [#"../11_repeat.rs" 23 4 23 64] (self : Repeat'0.t_repeat a) (visited : Seq.seq a) (o : Repeat'0.t_repeat a)
    
   =
    [%#span4] self = o
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = C11Repeat_Repeat_Type.repeat_element self)
  
  use seq.Seq
  
  predicate completed'0 [#"../11_repeat.rs" 17 4 17 35] (self : borrowed (Repeat'0.t_repeat a)) =
    [%#span5] false
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (Repeat'0.t_repeat a)) =
    [%#span6]  ^ self =  * self
  
  let rec clone'0 (self:a) (return'  (ret:a))= {[@expl:precondition] [%#span7] inv'2 self}
    any [ return' (result:a)-> {[%#span9] inv'3 result} {[%#span8] result = self} (! return' {result}) ] 
  
  let rec next (self:borrowed (Repeat'0.t_repeat a)) (return'  (ret:Option'0.t_option a))= {[%#s11_repeat0] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Repeat'0.t_repeat <a> { * self}
          (fun (relement'0:a) -> clone'0 {relement'0} (fun (_ret':a) ->  [ &_3 <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 =  [ &_0 <- Option'0.C_Some _3 ] (any [ any_ (_any:a)-> (!  [ &_3 <- _any ] s3) ] )
      | s3 = bb2 ]
      
    | bb2 = return' {_0} ]
    ) [ & _0 : Option'0.t_option a = any_l () | & self : borrowed (Repeat'0.t_repeat a) = self | & _3 : a = any_l () ] 
    [ return' (result:Option'0.t_option a)-> {[@expl:postcondition] [%#s11_repeat2] inv'1 result}
      {[@expl:postcondition] [%#s11_repeat1] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C11Repeat_Impl0
  type a
  
  let%span s11_repeat0 = "../11_repeat.rs" 33 4 33 26
  
  let%span s11_repeat1 = "../11_repeat.rs" 40 4 40 90
  
  let%span s11_repeat2 = "../11_repeat.rs" 46 4 46 35
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../11_repeat.rs" 18 20 18 25
  
  let%span span5 = "../11_repeat.rs" 24 8 27 9
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option a) =
    [%#span3] true
  
  predicate inv'3 (_x : Option'0.t_option a)
  
  axiom inv'3 : forall x : Option'0.t_option a . inv'3 x = true
  
  use C11Repeat_Repeat_Type as Repeat'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Repeat'0.t_repeat a)) =
    [%#span3] true
  
  predicate inv'2 (_x : borrowed (Repeat'0.t_repeat a))
  
  axiom inv'2 : forall x : borrowed (Repeat'0.t_repeat a) . inv'2 x = true
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq a) =
    [%#span3] true
  
  predicate inv'1 (_x : Seq.seq a)
  
  axiom inv'1 : forall x : Seq.seq a . inv'1 x = true
  
  predicate invariant'0 (self : Repeat'0.t_repeat a) =
    [%#span3] true
  
  predicate inv'0 (_x : Repeat'0.t_repeat a)
  
  axiom inv'0 : forall x : Repeat'0.t_repeat a . inv'0 x = true
  
  use seq.Seq
  
  predicate completed'0 [#"../11_repeat.rs" 17 4 17 35] (self : borrowed (Repeat'0.t_repeat a)) =
    [%#span4] false
  
  use seq.Seq
  
  use seq.Seq
  
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate produces'0 [#"../11_repeat.rs" 23 4 23 64] (self : Repeat'0.t_repeat a) (visited : Seq.seq a) (o : Repeat'0.t_repeat a)
    
   =
    [%#span5] self = o
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = C11Repeat_Repeat_Type.repeat_element self)
  
  use seq.Seq
  
  goal produces_refl_refn : [%#s11_repeat0] forall self : Repeat'0.t_repeat a . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq a) self
   -> produces'0 self (Seq.empty  : Seq.seq a) self)
  
  goal produces_trans_refn : [%#s11_repeat1] forall a : Repeat'0.t_repeat a . forall ab : Seq.seq a . forall b : Repeat'0.t_repeat a . forall bc : Seq.seq a . forall c : Repeat'0.t_repeat a . inv'0 c
  /\ inv'1 bc /\ inv'0 b /\ inv'1 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'0 c
  /\ inv'1 bc
  /\ inv'0 b
  /\ inv'1 ab
  /\ inv'0 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal next_refn : [%#s11_repeat2] forall self : borrowed (Repeat'0.t_repeat a) . inv'2 self
   -> inv'2 self
  /\ (forall result : Option'0.t_option a . inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
end
