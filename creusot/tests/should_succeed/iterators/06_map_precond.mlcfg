
module C06MapPrecond_Common_Iterator_Invariant_Stub
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C06MapPrecond_Common_Iterator_Invariant_Interface
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C06MapPrecond_Common_Iterator_Invariant
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self) =
    [#"../common.rs" 29 8 29 12] true
  val invariant' [#"../common.rs" 28 4 28 30] (self : self) : bool
    ensures { result = invariant' self }
    
end
module C06MapPrecond_Map_Type
  use prelude.Ghost
  use seq.Seq
  type t_map 'i 'a 'f =
    | C_Map 'i 'f (Ghost.ghost_ty (Seq.seq 'a))
    
  let function map_produced (self : t_map 'i 'a 'f) : Ghost.ghost_ty (Seq.seq 'a) = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ _ a -> a
      end
  let function map_iter (self : t_map 'i 'a 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map a _ _ -> a
      end
  let function map_func (self : t_map 'i 'a 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ a _ -> a
      end
end
module C06MapPrecond_Common_Iterator_Item_Type
  type self
  type item
end
module C06MapPrecond_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C06MapPrecond_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C06MapPrecond_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C06MapPrecond_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C06MapPrecond_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C06MapPrecond_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module C06MapPrecond_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
end
module C06MapPrecond_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C06MapPrecond_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  val produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
    requires {[#"../common.rs" 14 15 14 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C06MapPrecond_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C06MapPrecond_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06MapPrecond_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 19 15 19 28] Invariant0.invariant' a}
    requires {[#"../common.rs" 20 15 20 28] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 15 21 28] Invariant0.invariant' c}
    requires {[#"../common.rs" 22 15 22 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 23 15 23 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06MapPrecond_Impl0_Completed_Stub
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed [#"../06_map_precond.rs" 19 4 19 35] (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f))
    
end
module C06MapPrecond_Impl0_Completed_Interface
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed [#"../06_map_precond.rs" 19 4 19 35] (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f))
    
end
module C06MapPrecond_Impl0_Completed
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use prelude.Ghost
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  predicate completed [#"../06_map_precond.rs" 19 4 19 35] (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f))
    
   =
    [#"../06_map_precond.rs" 20 8 23 9] Ghost.inner (C06MapPrecond_Map_Type.map_produced ( ^ self)) = Seq.empty  /\ Completed0.completed {current = C06MapPrecond_Map_Type.map_iter ( * self); final = C06MapPrecond_Map_Type.map_iter ( ^ self)} /\ C06MapPrecond_Map_Type.map_func ( * self) = C06MapPrecond_Map_Type.map_func ( ^ self)
  val completed [#"../06_map_precond.rs" 19 4 19 35] (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2' : args)
  val precondition (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module C06MapPrecond_Impl1_NextPrecondition_Stub
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate next_precondition [#"../06_map_precond.rs" 94 4 94 38] (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
end
module C06MapPrecond_Impl1_NextPrecondition_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate next_precondition [#"../06_map_precond.rs" 94 4 94 38] (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
end
module C06MapPrecond_Impl1_NextPrecondition
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use seq.Seq
  use prelude.Ghost
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = i
  predicate next_precondition [#"../06_map_precond.rs" 94 4 94 38] (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
   =
    [#"../06_map_precond.rs" 95 8 100 9] forall i : i . forall e : Item0.item . Invariant0.invariant' i -> Produces0.produces (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) i -> Precondition0.precondition (C06MapPrecond_Map_Type.map_func self) (e, C06MapPrecond_Map_Type.map_produced self)
  val next_precondition [#"../06_map_precond.rs" 94 4 94 38] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) : bool
    ensures { result = next_precondition self }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module C06MapPrecond_Impl1_Preservation_Stub
  type i
  type b
  type f
  predicate preservation [#"../06_map_precond.rs" 129 4 129 45] (iter : i) (func : f)
end
module C06MapPrecond_Impl1_Preservation_Interface
  type i
  type b
  type f
  predicate preservation [#"../06_map_precond.rs" 129 4 129 45] (iter : i) (func : f)
end
module C06MapPrecond_Impl1_Preservation
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = i
  predicate preservation [#"../06_map_precond.rs" 129 4 129 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 130 8 138 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Invariant0.invariant' i -> Unnest0.unnest func ( * f) -> Produces0.produces iter (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1, Ghost.new s) -> PostconditionMut0.postcondition_mut f (e1, Ghost.new s) b -> Precondition0.precondition ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation [#"../06_map_precond.rs" 129 4 129 45] (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module C06MapPrecond_Impl1_Reinitialize_Stub
  type i
  type b
  type f
  predicate reinitialize [#"../06_map_precond.rs" 104 4 104 29] (_1' : ())
end
module C06MapPrecond_Impl1_Reinitialize_Interface
  type i
  type b
  type f
  predicate reinitialize [#"../06_map_precond.rs" 104 4 104 29] (_1' : ())
end
module C06MapPrecond_Impl1_Reinitialize
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = i
  clone C06MapPrecond_Impl0_Completed_Stub as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  predicate reinitialize [#"../06_map_precond.rs" 104 4 104 29] (_1' : ()) =
    [#"../06_map_precond.rs" 105 8 111 9] forall reset : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f) . Completed0.completed reset -> Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter ( ^ reset)) -> NextPrecondition0.next_precondition ( ^ reset) /\ Preservation0.preservation (C06MapPrecond_Map_Type.map_iter ( ^ reset)) (C06MapPrecond_Map_Type.map_func ( ^ reset))
  val reinitialize [#"../06_map_precond.rs" 104 4 104 29] (_1' : ()) : bool
    ensures { result = reinitialize _1' }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res -> Unnest0.unnest ( * self) ( ^ self)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : () =
    ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {PostconditionMut0.postcondition_mut self args res}
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res -> Unnest0.unnest ( * self) ( ^ self)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : ()
  axiom unnest_refl_spec : forall self : f . Unnest0.unnest self self
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : () =
    ()
  val unnest_refl (self : f) : ()
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . Unnest0.unnest self self
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
  axiom unnest_trans_spec : forall self : f, b : f, c : f . Unnest0.unnest self b -> Unnest0.unnest b c -> Unnest0.unnest self c
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : () =
    ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {Unnest0.unnest self b}
    requires {Unnest0.unnest b c}
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . Unnest0.unnest self b -> Unnest0.unnest b c -> Unnest0.unnest self c
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
  val postcondition_once (self : f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_once self _2' _3' }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module C06MapPrecond_Impl1_PreservationInv_Stub
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate preservation_inv [#"../06_map_precond.rs" 116 4 116 37] (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
end
module C06MapPrecond_Impl1_PreservationInv_Interface
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate preservation_inv [#"../06_map_precond.rs" 116 4 116 37] (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
  axiom preservation_inv_spec : forall self : C06MapPrecond_Map_Type.t_map i Item0.item f . [#"../06_map_precond.rs" 115 4 115 106] Ghost.inner (C06MapPrecond_Map_Type.map_produced self) = Seq.empty  -> preservation_inv self = Preservation0.preservation (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self)
end
module C06MapPrecond_Impl1_PreservationInv
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = i
  predicate preservation_inv [#"../06_map_precond.rs" 116 4 116 37] (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
   =
    [#"../06_map_precond.rs" 117 8 125 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Invariant0.invariant' i -> Unnest0.unnest (C06MapPrecond_Map_Type.map_func self) ( * f) -> Produces0.produces (C06MapPrecond_Map_Type.map_iter self) (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s)) -> PostconditionMut0.postcondition_mut f (e1, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s)) b -> Precondition0.precondition ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s) e1))
  val preservation_inv [#"../06_map_precond.rs" 116 4 116 37] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) : bool
    ensures { result = preservation_inv self }
    
  axiom preservation_inv_spec : forall self : C06MapPrecond_Map_Type.t_map i Item0.item f . [#"../06_map_precond.rs" 115 4 115 106] Ghost.inner (C06MapPrecond_Map_Type.map_produced self) = Seq.empty  -> preservation_inv self = Preservation0.preservation (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self)
end
module C06MapPrecond_Impl1_PreservationInv_Impl
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with
    type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  let rec ghost predicate preservation_inv [#"../06_map_precond.rs" 116 4 116 37] (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
    ensures { [#"../06_map_precond.rs" 115 4 115 106] Ghost.inner (C06MapPrecond_Map_Type.map_produced self) = Seq.empty  -> result = Preservation0.preservation (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 117 8 125 9] pure {forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Invariant0.invariant' i -> Unnest0.unnest (C06MapPrecond_Map_Type.map_func self) ( * f) -> Produces0.produces (C06MapPrecond_Map_Type.map_iter self) (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s)) -> PostconditionMut0.postcondition_mut f (e1, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s)) b -> Precondition0.precondition ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s) e1))}
end
module C06MapPrecond_Impl0_Invariant_Stub
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate invariant' [#"../06_map_precond.rs" 60 4 60 30] (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
end
module C06MapPrecond_Impl0_Invariant_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate invariant' [#"../06_map_precond.rs" 60 4 60 30] (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
end
module C06MapPrecond_Impl0_Invariant
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone C06MapPrecond_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = i
  clone C06MapPrecond_Impl1_PreservationInv_Stub as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  predicate invariant' [#"../06_map_precond.rs" 60 4 60 30] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) =
    [#"../06_map_precond.rs" 61 8 66 9] Reinitialize0.reinitialize () /\ PreservationInv0.preservation_inv self /\ Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter self) /\ NextPrecondition0.next_precondition self
  val invariant' [#"../06_map_precond.rs" 60 4 60 30] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) : bool
    ensures { result = invariant' self }
    
end
module C06MapPrecond_Impl0_Produces_Stub
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate produces [@inline:trivial] [#"../06_map_precond.rs" 42 4 42 67] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
end
module C06MapPrecond_Impl0_Produces_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate produces [@inline:trivial] [#"../06_map_precond.rs" 42 4 42 67] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
end
module C06MapPrecond_Impl0_Produces
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use prelude.Ghost
  use prelude.Borrow
  use mach.int.Int
  use seq_ext.SeqExt
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  predicate produces [@inline:trivial] [#"../06_map_precond.rs" 42 4 42 67] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
   =
    [#"../06_map_precond.rs" 43 8 55 9] Unnest0.unnest (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ) /\ (exists s : Seq.seq Item0.item . Seq.length s = Seq.length visited /\ Produces0.produces (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s /\ (exists fs : Seq.seq (borrowed f) . Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Unnest0.unnest (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i) /\ Precondition0.precondition ( * Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) /\ PostconditionMut0.postcondition_mut (Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces [@inline:trivial] [#"../06_map_precond.rs" 42 4 42 67] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f) : bool
    ensures { result = produces self visited succ }
    
end
module C06MapPrecond_Impl0_ProducesRefl_Stub
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_refl [#"../06_map_precond.rs" 29 4 29 29] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
end
module C06MapPrecond_Impl0_ProducesRefl_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_refl [#"../06_map_precond.rs" 29 4 29 29] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
  axiom produces_refl_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 27 15 27 28] Invariant0.invariant' a) -> ([#"../06_map_precond.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a)
end
module C06MapPrecond_Impl0_ProducesRefl
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_refl [#"../06_map_precond.rs" 29 4 29 29] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) : () =
    [#"../06_map_precond.rs" 26 4 26 10] ()
  val produces_refl [#"../06_map_precond.rs" 29 4 29 29] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 27 15 27 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 27 15 27 28] Invariant0.invariant' a) -> ([#"../06_map_precond.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a)
end
module C06MapPrecond_Impl0_ProducesRefl_Impl
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  let rec ghost function produces_refl [#"../06_map_precond.rs" 29 4 29 29] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 27 15 27 28] Invariant0.invariant' a}
    ensures { [#"../06_map_precond.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 26 4 26 10] ()
end
module C06MapPrecond_Impl0_ProducesTrans_Stub
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans [#"../06_map_precond.rs" 38 4 38 90] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
end
module C06MapPrecond_Impl0_ProducesTrans_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans [#"../06_map_precond.rs" 38 4 38 90] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
  axiom produces_trans_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f, ab : Seq.seq b, b : C06MapPrecond_Map_Type.t_map i Item0.item f, bc : Seq.seq b, c : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 32 15 32 28] Invariant0.invariant' a) -> ([#"../06_map_precond.rs" 33 15 33 28] Invariant0.invariant' b) -> ([#"../06_map_precond.rs" 34 15 34 28] Invariant0.invariant' c) -> ([#"../06_map_precond.rs" 35 15 35 32] Produces0.produces a ab b) -> ([#"../06_map_precond.rs" 36 15 36 32] Produces0.produces b bc c) -> ([#"../06_map_precond.rs" 37 14 37 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06MapPrecond_Impl0_ProducesTrans
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans [#"../06_map_precond.rs" 38 4 38 90] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
   =
    [#"../06_map_precond.rs" 31 4 31 10] ()
  val produces_trans [#"../06_map_precond.rs" 38 4 38 90] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 32 15 32 28] Invariant0.invariant' a}
    requires {[#"../06_map_precond.rs" 33 15 33 28] Invariant0.invariant' b}
    requires {[#"../06_map_precond.rs" 34 15 34 28] Invariant0.invariant' c}
    requires {[#"../06_map_precond.rs" 35 15 35 32] Produces0.produces a ab b}
    requires {[#"../06_map_precond.rs" 36 15 36 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f, ab : Seq.seq b, b : C06MapPrecond_Map_Type.t_map i Item0.item f, bc : Seq.seq b, c : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 32 15 32 28] Invariant0.invariant' a) -> ([#"../06_map_precond.rs" 33 15 33 28] Invariant0.invariant' b) -> ([#"../06_map_precond.rs" 34 15 34 28] Invariant0.invariant' c) -> ([#"../06_map_precond.rs" 35 15 35 32] Produces0.produces a ab b) -> ([#"../06_map_precond.rs" 36 15 36 32] Produces0.produces b bc c) -> ([#"../06_map_precond.rs" 37 14 37 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06MapPrecond_Impl0_ProducesTrans_Impl
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  let rec ghost function produces_trans [#"../06_map_precond.rs" 38 4 38 90] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 32 15 32 28] Invariant0.invariant' a}
    requires {[#"../06_map_precond.rs" 33 15 33 28] Invariant0.invariant' b}
    requires {[#"../06_map_precond.rs" 34 15 34 28] Invariant0.invariant' c}
    requires {[#"../06_map_precond.rs" 35 15 35 32] Produces0.produces a ab b}
    requires {[#"../06_map_precond.rs" 36 15 36 32] Produces0.produces b bc c}
    ensures { [#"../06_map_precond.rs" 37 14 37 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 31 4 31 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C06MapPrecond_Impl1_ProducesOne_Stub
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  predicate produces_one [#"../06_map_precond.rs" 150 4 150 57] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
end
module C06MapPrecond_Impl1_ProducesOne_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  predicate produces_one [#"../06_map_precond.rs" 150 4 150 57] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
  axiom produces_one_spec : forall self : C06MapPrecond_Map_Type.t_map i Item0.item f, visited : b, succ : C06MapPrecond_Map_Type.t_map i Item0.item f . [#"../06_map_precond.rs" 149 14 149 68] produces_one self visited succ = Produces0.produces self (Seq.singleton visited) succ
end
module C06MapPrecond_Impl1_ProducesOne
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  predicate produces_one [#"../06_map_precond.rs" 150 4 150 57] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
   =
    [#"../06_map_precond.rs" 151 8 157 9] exists f : borrowed f .  * f = C06MapPrecond_Map_Type.map_func self /\  ^ f = C06MapPrecond_Map_Type.map_func succ /\ (exists e : Item0.item . Produces1.produces (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) e /\ Precondition0.precondition ( * f) (e, C06MapPrecond_Map_Type.map_produced self) /\ PostconditionMut0.postcondition_mut f (e, C06MapPrecond_Map_Type.map_produced self) visited)
  val produces_one [#"../06_map_precond.rs" 150 4 150 57] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f) : bool
    ensures { result = produces_one self visited succ }
    
  axiom produces_one_spec : forall self : C06MapPrecond_Map_Type.t_map i Item0.item f, visited : b, succ : C06MapPrecond_Map_Type.t_map i Item0.item f . [#"../06_map_precond.rs" 149 14 149 68] produces_one self visited succ = Produces0.produces self (Seq.singleton visited) succ
end
module C06MapPrecond_Impl1_ProducesOne_Impl
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  use prelude.Ghost
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  let rec ghost predicate produces_one [#"../06_map_precond.rs" 150 4 150 57] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f)
    ensures { [#"../06_map_precond.rs" 149 14 149 68] result = Produces0.produces self (Seq.singleton visited) succ }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 151 8 157 9] pure {exists f : borrowed f .  * f = C06MapPrecond_Map_Type.map_func self /\  ^ f = C06MapPrecond_Map_Type.map_func succ /\ (exists e : Item0.item . Produces1.produces (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) e /\ Precondition0.precondition ( * f) (e, C06MapPrecond_Map_Type.map_produced self) /\ PostconditionMut0.postcondition_mut f (e, C06MapPrecond_Map_Type.map_produced self) visited)}
end
module C06MapPrecond_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  val next [@cfg:stackify] [#"../common.rs" 37 4 37 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C06MapPrecond_Common_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with
    type self = self
  val next [@cfg:stackify] [#"../common.rs" 37 4 37 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module Core_Ops_Function_FnMut_CallMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = args,
    type f = self
  val call_mut [@cfg:stackify] (self : borrowed self) (args : args) : Output0.output
    requires {Precondition0.precondition ( * self) args}
    ensures { PostconditionMut0.postcondition_mut self args result }
    
end
module Core_Ops_Function_FnMut_CallMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Interface as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = args,
    type f = self
  val call_mut [@cfg:stackify] (self : borrowed self) (args : args) : Output0.output
    requires {Precondition0.precondition ( * self) args}
    ensures { PostconditionMut0.postcondition_mut self args result }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C06MapPrecond_Impl1_ProducesOneInvariant_Stub
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone C06MapPrecond_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_one_invariant [#"../06_map_precond.rs" 146 4 146 54] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (e : b) (other : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
end
module C06MapPrecond_Impl1_ProducesOneInvariant_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone C06MapPrecond_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_one_invariant [#"../06_map_precond.rs" 146 4 146 54] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (e : b) (other : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
  axiom produces_one_invariant_spec : forall self : C06MapPrecond_Map_Type.t_map i Item0.item f, e : b, other : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 142 15 142 31] Invariant0.invariant' self) -> ([#"../06_map_precond.rs" 143 15 143 42] ProducesOne0.produces_one self e other) -> ([#"../06_map_precond.rs" 144 4 144 39] Invariant1.invariant' (C06MapPrecond_Map_Type.map_iter other)) -> ([#"../06_map_precond.rs" 145 14 145 31] Invariant0.invariant' other)
end
module C06MapPrecond_Impl1_ProducesOneInvariant
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant1 with
    type self = i
  clone C06MapPrecond_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_one_invariant [#"../06_map_precond.rs" 146 4 146 54] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (e : b) (other : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
   =
    [#"../06_map_precond.rs" 141 4 141 12] ()
  val produces_one_invariant [#"../06_map_precond.rs" 146 4 146 54] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (e : b) (other : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 142 15 142 31] Invariant0.invariant' self}
    requires {[#"../06_map_precond.rs" 143 15 143 42] ProducesOne0.produces_one self e other}
    requires {[#"../06_map_precond.rs" 144 4 144 39] Invariant1.invariant' (C06MapPrecond_Map_Type.map_iter other)}
    ensures { result = produces_one_invariant self e other }
    
  axiom produces_one_invariant_spec : forall self : C06MapPrecond_Map_Type.t_map i Item0.item f, e : b, other : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 142 15 142 31] Invariant0.invariant' self) -> ([#"../06_map_precond.rs" 143 15 143 42] ProducesOne0.produces_one self e other) -> ([#"../06_map_precond.rs" 144 4 144 39] Invariant1.invariant' (C06MapPrecond_Map_Type.map_iter other)) -> ([#"../06_map_precond.rs" 145 14 145 31] Invariant0.invariant' other)
end
module C06MapPrecond_Impl1_ProducesOneInvariant_Impl
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl1_ProducesOne as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  let rec ghost function produces_one_invariant [#"../06_map_precond.rs" 146 4 146 54] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (e : b) (other : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 142 15 142 31] Invariant0.invariant' self}
    requires {[#"../06_map_precond.rs" 143 15 143 42] ProducesOne0.produces_one self e other}
    requires {[#"../06_map_precond.rs" 144 4 144 39] Invariant1.invariant' (C06MapPrecond_Map_Type.map_iter other)}
    ensures { [#"../06_map_precond.rs" 145 14 145 31] Invariant0.invariant' other }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 141 4 141 12] ()
end
module C06MapPrecond_Impl0_Next_Interface
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl0_Completed_Stub as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  val next [@cfg:stackify] [#"../06_map_precond.rs" 74 4 74 44] (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f)) : Core_Option_Option_Type.t_option b
    requires {[#"../06_map_precond.rs" 73 4 73 40] Invariant0.invariant' ( * self)}
    ensures { [#"../06_map_precond.rs" 69 14 72 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> ProducesOne0.produces_one ( * self) v ( ^ self)
      end }
    ensures { [#"../06_map_precond.rs" 73 4 73 40] Invariant0.invariant' ( ^ self) }
    
end
module C06MapPrecond_Impl0_Next
  type i
  type b
  type f
  use prelude.Borrow
  use mach.int.Int
  use prelude.IntSize
  use prelude.Ghost
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve5.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = Core_Option_Option_Type.t_option b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = Ghost.ghost_ty (Seq.seq Item0.item)
  clone Core_Ops_Function_FnMut_CallMut_Interface as CallMut0 with
    type self = f,
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    type Output0.output = b
  clone C06MapPrecond_Impl1_ProducesOne as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl1_ProducesOneInvariant as ProducesOneInvariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate ProducesOne0.produces_one = ProducesOne0.produces_one,
    predicate Invariant1.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Item0.item
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C06MapPrecond_Map_Type.t_map i Item0.item f
  clone C06MapPrecond_Common_Iterator_Next_Interface as Next0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces
  let rec cfg next [@cfg:stackify] [#"../06_map_precond.rs" 74 4 74 44] (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f)) : Core_Option_Option_Type.t_option b
    requires {[#"../06_map_precond.rs" 73 4 73 40] Invariant0.invariant' ( * self)}
    ensures { [#"../06_map_precond.rs" 69 14 72 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> ProducesOne0.produces_one ( * self) v ( ^ self)
      end }
    ensures { [#"../06_map_precond.rs" 73 4 73 40] Invariant0.invariant' ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option b;
  var self_1 : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f);
  var _5 : Core_Option_Option_Type.t_option Item0.item;
  var _6 : borrowed i;
  var _7 : isize;
  var v_8 : Item0.item;
  var _9 : ();
  var _11 : Ghost.ghost_ty ();
  var _14 : ();
  var produced_15 : Ghost.ghost_ty (Seq.seq Item0.item);
  var _17 : ();
  var r_18 : Core_Option_Option_Type.t_option b;
  var _19 : b;
  var _20 : borrowed f;
  var _21 : (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item));
  var _22 : Item0.item;
  var _23 : Ghost.ghost_ty (Seq.seq Item0.item);
  var _25 : ();
  var _26 : Ghost.ghost_ty (Seq.seq Item0.item);
  var _27 : Ghost.ghost_ty (Seq.seq Item0.item);
  var _30 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut (C06MapPrecond_Map_Type.map_iter ( * self_1));
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c =  * self_1 in C06MapPrecond_Map_Type.C_Map ( ^ _6) b c) };
    _5 <- ([#"../06_map_precond.rs" 75 14 75 30] Next0.next _6);
    goto BB1
  }
  BB1 {
    switch (_5)
      | Core_Option_Option_Type.C_None -> goto BB2
      | Core_Option_Option_Type.C_Some _ -> goto BB4
      end
  }
  BB2 {
    _30 <- ();
    _27 <- ([#"../06_map_precond.rs" 85 32 85 53] Ghost.new (Seq.empty ));
    goto BB14
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve _5 };
    absurd
  }
  BB4 {
    assume { Resolve2.resolve v_8 };
    v_8 <- Core_Option_Option_Type.some_0 _5;
    _5 <- (let Core_Option_Option_Type.C_Some a = _5 in Core_Option_Option_Type.C_Some (any Item0.item));
    assert { [#"../06_map_precond.rs" 77 16 77 76] Precondition0.precondition (C06MapPrecond_Map_Type.map_func ( * self_1)) (v_8, C06MapPrecond_Map_Type.map_produced ( * self_1)) };
    goto BB5
  }
  BB5 {
    _9 <- ();
    _14 <- ();
    _11 <- ([#"../06_map_precond.rs" 78 16 78 55] Ghost.new ());
    goto BB6
  }
  BB6 {
    _17 <- ();
    produced_15 <- ([#"../06_map_precond.rs" 79 31 79 63] Ghost.new (Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced ( * self_1))) v_8));
    goto BB7
  }
  BB7 {
    _20 <- borrow_mut (C06MapPrecond_Map_Type.map_func ( * self_1));
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c =  * self_1 in C06MapPrecond_Map_Type.C_Map a ( ^ _20) c) };
    assume { Resolve2.resolve _22 };
    _22 <- v_8;
    v_8 <- any Item0.item;
    _25 <- ();
    _23 <- ([#"../06_map_precond.rs" 80 44 80 76] Ghost.new (Ghost.inner (C06MapPrecond_Map_Type.map_produced ( * self_1))));
    goto BB8
  }
  BB8 {
    _21 <- (_22, _23);
    _19 <- ([#"../06_map_precond.rs" 80 29 80 77] CallMut0.call_mut _20 _21);
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    r_18 <- Core_Option_Option_Type.C_Some _19;
    goto BB11
  }
  BB11 {
    assume { Resolve3.resolve _26 };
    _26 <- produced_15;
    produced_15 <- any Ghost.ghost_ty (Seq.seq Item0.item);
    assume { Resolve3.resolve (C06MapPrecond_Map_Type.map_produced ( * self_1)) };
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c =  * self_1 in C06MapPrecond_Map_Type.C_Map a b _26) };
    _26 <- any Ghost.ghost_ty (Seq.seq Item0.item);
    assume { Resolve0.resolve self_1 };
    assume { Resolve4.resolve _0 };
    _0 <- r_18;
    r_18 <- any Core_Option_Option_Type.t_option b;
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB15
  }
  BB14 {
    assume { Resolve3.resolve (C06MapPrecond_Map_Type.map_produced ( * self_1)) };
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c =  * self_1 in C06MapPrecond_Map_Type.C_Map a b _27) };
    _27 <- any Ghost.ghost_ty (Seq.seq Item0.item);
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    assume { Resolve1.resolve _5 };
    return _0
  }
  
end
module C06MapPrecond_Map_Interface
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant1 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone C06MapPrecond_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = i
  val map [@cfg:stackify] [#"../06_map_precond.rs" 167 0 170 23] (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map i Item0.item f
    requires {[#"../06_map_precond.rs" 161 0 161 147] forall i2 : i . forall e : Item0.item . Invariant0.invariant' i2 -> Produces0.produces iter (Seq.singleton e) i2 -> Precondition0.precondition func (e, Ghost.new (Seq.empty ))}
    requires {[#"../06_map_precond.rs" 162 11 162 41] Reinitialize0.reinitialize ()}
    requires {[#"../06_map_precond.rs" 163 11 163 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 164 11 164 57] Preservation0.preservation iter func}
    ensures { [#"../06_map_precond.rs" 165 10 165 28] Invariant1.invariant' result }
    ensures { [#"../06_map_precond.rs" 166 10 166 72] result = C06MapPrecond_Map_Type.C_Map iter func (Ghost.new (Seq.empty )) }
    
end
module C06MapPrecond_Map
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces as Produces1 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve1.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with
    type self = i
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Invariant as Invariant1 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = i
  let rec cfg map [@cfg:stackify] [#"../06_map_precond.rs" 167 0 170 23] (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map i Item0.item f
    requires {[#"../06_map_precond.rs" 161 0 161 147] forall i2 : i . forall e : Item0.item . Invariant0.invariant' i2 -> Produces0.produces iter (Seq.singleton e) i2 -> Precondition0.precondition func (e, Ghost.new (Seq.empty ))}
    requires {[#"../06_map_precond.rs" 162 11 162 41] Reinitialize0.reinitialize ()}
    requires {[#"../06_map_precond.rs" 163 11 163 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 164 11 164 57] Preservation0.preservation iter func}
    ensures { [#"../06_map_precond.rs" 165 10 165 28] Invariant1.invariant' result }
    ensures { [#"../06_map_precond.rs" 166 10 166 72] result = C06MapPrecond_Map_Type.C_Map iter func (Ghost.new (Seq.empty )) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06MapPrecond_Map_Type.t_map i Item0.item f;
  var iter_1 : i;
  var func_2 : f;
  var _9 : i;
  var _10 : f;
  var _11 : Ghost.ghost_ty (Seq.seq Item0.item);
  var _14 : ();
  {
    iter_1 <- iter;
    func_2 <- func;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve _9 };
    _9 <- iter_1;
    iter_1 <- any i;
    assume { Resolve1.resolve _10 };
    _10 <- func_2;
    func_2 <- any f;
    _14 <- ();
    _11 <- ([#"../06_map_precond.rs" 171 32 171 51] Ghost.new (Seq.empty ));
    goto BB5
  }
  BB5 {
    _0 <- C06MapPrecond_Map_Type.C_Map _9 _10 _11;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module C06MapPrecond_Identity_Closure0_Interface
  type i
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  type c06mapprecond_identity_closure0  =
    | C06MapPrecond_Identity_Closure0
    
  predicate precondition [@cfg:stackify] [#"../06_map_precond.rs" 176 14 176 20] (self : c06mapprecond_identity_closure0) (args : (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)))
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _3') = args in true
  predicate unnest (self : c06mapprecond_identity_closure0) (_2' : c06mapprecond_identity_closure0) =
    true
  predicate postcondition_mut [@cfg:stackify] [#"../06_map_precond.rs" 176 14 176 20] (self : borrowed c06mapprecond_identity_closure0) (args : (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))) (result : Item0.item)
    
   =
    ([#"../06_map_precond.rs" 1 0 1 0] let (x, _3') = args in true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../06_map_precond.rs" 176 14 176 20] (self : c06mapprecond_identity_closure0) (args : (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))) (result : Item0.item)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _3') = args in true
  predicate resolve (_1' : c06mapprecond_identity_closure0) =
    true
  val c06MapPrecond_Identity_Closure0 [@cfg:stackify] [#"../06_map_precond.rs" 176 14 176 20] (_1' : borrowed c06mapprecond_identity_closure0) (x : Item0.item) (_3' : Ghost.ghost_ty (Seq.seq Item0.item)) : Item0.item
    ensures { unnest ( * _1') ( ^ _1') }
    
end
module C06MapPrecond_Identity_Closure0
  type i
  type c06mapprecond_identity_closure0  =
    | C06MapPrecond_Identity_Closure0
    
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with
    type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  predicate precondition [@cfg:stackify] [#"../06_map_precond.rs" 176 14 176 20] (self : c06mapprecond_identity_closure0) (args : (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)))
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _3') = args in true
  predicate unnest (self : c06mapprecond_identity_closure0) (_2' : c06mapprecond_identity_closure0) =
    true
  predicate postcondition_mut [@cfg:stackify] [#"../06_map_precond.rs" 176 14 176 20] (self : borrowed c06mapprecond_identity_closure0) (args : (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))) (result : Item0.item)
    
   =
    ([#"../06_map_precond.rs" 1 0 1 0] let (x, _3') = args in true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../06_map_precond.rs" 176 14 176 20] (self : c06mapprecond_identity_closure0) (args : (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))) (result : Item0.item)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _3') = args in true
  predicate resolve (_1' : c06mapprecond_identity_closure0) =
    true
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty (Seq.seq Item0.item)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = c06mapprecond_identity_closure0
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Item0.item
  let rec cfg c06MapPrecond_Identity_Closure0 [@cfg:stackify] [#"../06_map_precond.rs" 176 14 176 20] (_1' : borrowed c06mapprecond_identity_closure0) (x : Item0.item) (_3' : Ghost.ghost_ty (Seq.seq Item0.item)) : Item0.item
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Item0.item;
  var _1 : borrowed c06mapprecond_identity_closure0;
  var x_2 : Item0.item;
  var _3 : Ghost.ghost_ty (Seq.seq Item0.item);
  {
    _1 <- _1';
    x_2 <- x;
    _3 <- _3';
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- x_2;
    x_2 <- any Item0.item;
    assume { Resolve1.resolve _1 };
    assume { Resolve2.resolve _3 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C06MapPrecond_Identity_Interface
  type i
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = i
  val identity [@cfg:stackify] [#"../06_map_precond.rs" 175 0 175 37] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 174 11 174 27] Invariant0.invariant' iter}
    
end
module C06MapPrecond_Identity
  type i
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  use seq.Seq
  use prelude.Ghost
  clone C06MapPrecond_Identity_Closure0_Interface as Closure00 with
    type i = i,
    type Item0.item = Item0.item,
    axiom .
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces as Produces1 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0,
    predicate Unnest0.unnest = Closure00.unnest,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure00.postcondition_mut,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with
    type self = i
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0,
    predicate Unnest0.unnest = Closure00.unnest,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure00.postcondition_mut,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0,
    predicate Unnest0.unnest = Closure00.unnest,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure00.postcondition_mut,
    type Item0.item = Item0.item,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0,
    predicate Precondition0.precondition = Closure00.precondition,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Invariant as Invariant1 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans1 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl1 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = C06MapPrecond_Map_Type.t_map i Item0.item Closure00.c06mapprecond_identity_closure0
  clone C06MapPrecond_Map_Interface as Map1 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0,
    predicate Precondition0.precondition = Closure00.precondition,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Invariant1.invariant' = Invariant1.invariant'
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = i
  let rec cfg identity [@cfg:stackify] [#"../06_map_precond.rs" 175 0 175 37] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 174 11 174 27] Invariant0.invariant' iter}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter_1 : i;
  var _3 : C06MapPrecond_Map_Type.t_map i Item0.item Closure00.c06mapprecond_identity_closure0;
  var _4 : i;
  var _5 : Closure00.c06mapprecond_identity_closure0;
  {
    iter_1 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _4 };
    _4 <- iter_1;
    iter_1 <- any i;
    _5 <- Closure00.C06MapPrecond_Identity_Closure0;
    _3 <- ([#"../06_map_precond.rs" 176 4 176 23] Map1.map _4 _5);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve _3 };
    _0 <- ();
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module C06MapPrecond_Increment_Closure3_Interface
  type i
  use mach.int.UInt32
  use mach.int.Int
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  type c06mapprecond_increment_closure3  =
    | C06MapPrecond_Increment_Closure3
    
  predicate precondition [@cfg:stackify] [#"../06_map_precond.rs" 188 8 188 35] (self : c06mapprecond_increment_closure3) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 187 19 187 27] let (x, _3') = args in UInt32.to_int x <= 15
  predicate unnest (self : c06mapprecond_increment_closure3) (_2' : c06mapprecond_increment_closure3) =
    true
  predicate postcondition_mut [@cfg:stackify] [#"../06_map_precond.rs" 188 8 188 35] (self : borrowed c06mapprecond_increment_closure3) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    ([#"../06_map_precond.rs" 188 18 188 33] let (x, _3') = args in UInt32.to_int result = UInt32.to_int x + 1) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../06_map_precond.rs" 188 8 188 35] (self : c06mapprecond_increment_closure3) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 188 18 188 33] let (x, _3') = args in UInt32.to_int result = UInt32.to_int x + 1
  predicate resolve (_1' : c06mapprecond_increment_closure3) =
    true
  val c06MapPrecond_Increment_Closure3 [@cfg:stackify] [#"../06_map_precond.rs" 188 8 188 35] (_1' : borrowed c06mapprecond_increment_closure3) (x : uint32) (_3' : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 187 19 187 27] UInt32.to_int x <= 15}
    ensures { [#"../06_map_precond.rs" 188 18 188 33] UInt32.to_int result = UInt32.to_int x + 1 }
    ensures { unnest ( * _1') ( ^ _1') }
    
end
module C06MapPrecond_Increment_Closure3
  type i
  type c06mapprecond_increment_closure3  =
    | C06MapPrecond_Increment_Closure3
    
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  predicate precondition [@cfg:stackify] [#"../06_map_precond.rs" 188 8 188 35] (self : c06mapprecond_increment_closure3) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 187 19 187 27] let (x, _3') = args in UInt32.to_int x <= 15
  predicate unnest (self : c06mapprecond_increment_closure3) (_2' : c06mapprecond_increment_closure3) =
    true
  predicate postcondition_mut [@cfg:stackify] [#"../06_map_precond.rs" 188 8 188 35] (self : borrowed c06mapprecond_increment_closure3) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    ([#"../06_map_precond.rs" 188 18 188 33] let (x, _3') = args in UInt32.to_int result = UInt32.to_int x + 1) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../06_map_precond.rs" 188 8 188 35] (self : c06mapprecond_increment_closure3) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 188 18 188 33] let (x, _3') = args in UInt32.to_int result = UInt32.to_int x + 1
  predicate resolve (_1' : c06mapprecond_increment_closure3) =
    true
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = c06mapprecond_increment_closure3
  let rec cfg c06MapPrecond_Increment_Closure3 [@cfg:stackify] [#"../06_map_precond.rs" 188 8 188 35] (_1' : borrowed c06mapprecond_increment_closure3) (x : uint32) (_3' : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 187 19 187 27] UInt32.to_int x <= 15}
    ensures { [#"../06_map_precond.rs" 188 18 188 33] UInt32.to_int result = UInt32.to_int x + 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : borrowed c06mapprecond_increment_closure3;
  var x_2 : uint32;
  var _3 : Ghost.ghost_ty (Seq.seq uint32);
  var res_4 : uint32;
  var res_5 : uint32;
  var _6 : uint32;
  {
    _1 <- _1';
    x_2 <- x;
    _3 <- _3';
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _1 };
    _6 <- x_2;
    res_5 <- ([#"../06_map_precond.rs" 189 20 189 25] _6 + ([#"../06_map_precond.rs" 189 24 189 25] (1 : uint32)));
    res_4 <- res_5;
    _0 <- res_4;
    return _0
  }
  
end
module C06MapPrecond_Increment_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = uint32
  clone C06MapPrecond_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = i
  val increment [@cfg:stackify] [#"../06_map_precond.rs" 184 0 184 50] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 179 11 179 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 180 0 180 187] forall done_ : borrowed i . Completed0.completed done_ -> Invariant0.invariant' ( ^ done_) -> (forall steps : Seq.seq uint32 . forall next : i . Produces0.produces ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 181 0 183 2] forall fin : i . forall prod : Seq.seq uint32 . Invariant0.invariant' fin -> Produces0.produces iter prod fin -> (forall x : int . 0 <= x /\ x < Seq.length prod -> Seq.get prod x <= (10 : uint32))}
    
end
module C06MapPrecond_Increment
  type i
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone C06MapPrecond_Increment_Closure3_Interface as Closure30 with
    type i = i,
    axiom .
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Completed as Completed1 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_increment_closure3,
    type Item0.item = uint32,
    predicate Completed0.completed = Completed0.completed
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = uint32
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with
    type self = i
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_increment_closure3,
    predicate Precondition0.precondition = Closure30.precondition,
    type Item0.item = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_increment_closure3,
    predicate Unnest0.unnest = Closure30.unnest,
    predicate Precondition0.precondition = Closure30.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure30.postcondition_mut,
    type Item0.item = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_increment_closure3,
    predicate Unnest0.unnest = Closure30.unnest,
    predicate Precondition0.precondition = Closure30.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure30.postcondition_mut,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C06MapPrecond_Impl0_Produces as Produces1 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_increment_closure3,
    predicate Unnest0.unnest = Closure30.unnest,
    predicate Precondition0.precondition = Closure30.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure30.postcondition_mut,
    type Item0.item = uint32,
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_increment_closure3,
    type Item0.item = uint32,
    predicate Completed0.completed = Completed1.completed,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Invariant as Invariant1 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_increment_closure3,
    type Item0.item = uint32,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans1 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_increment_closure3,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = uint32,
    axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl1 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_increment_closure3,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = uint32,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = uint32,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = uint32,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = C06MapPrecond_Map_Type.t_map i uint32 Closure30.c06mapprecond_increment_closure3
  clone C06MapPrecond_Map_Interface as Map1 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_increment_closure3,
    predicate Precondition0.precondition = Closure30.precondition,
    type Item0.item = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Invariant1.invariant' = Invariant1.invariant'
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = i
  let rec cfg increment [@cfg:stackify] [#"../06_map_precond.rs" 184 0 184 50] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 179 11 179 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 180 0 180 187] forall done_ : borrowed i . Completed0.completed done_ -> Invariant0.invariant' ( ^ done_) -> (forall steps : Seq.seq uint32 . forall next : i . Produces0.produces ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 181 0 183 2] forall fin : i . forall prod : Seq.seq uint32 . Invariant0.invariant' fin -> Produces0.produces iter prod fin -> (forall x : int . 0 <= x /\ x < Seq.length prod -> Seq.get prod x <= (10 : uint32))}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter_1 : i;
  var i_5 : C06MapPrecond_Map_Type.t_map i uint32 Closure30.c06mapprecond_increment_closure3;
  var _6 : i;
  var _7 : Closure30.c06mapprecond_increment_closure3;
  var _8 : ();
  {
    iter_1 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _6 };
    _6 <- iter_1;
    iter_1 <- any i;
    _7 <- Closure30.C06MapPrecond_Increment_Closure3;
    i_5 <- ([#"../06_map_precond.rs" 185 12 190 5] Map1.map _6 _7);
    goto BB3
  }
  BB3 {
    assert { [#"../06_map_precond.rs" 192 4 195 5] forall fin : C06MapPrecond_Map_Type.t_map i uint32 Closure30.c06mapprecond_increment_closure3 . forall prod : Seq.seq uint32 . Invariant1.invariant' fin -> Produces1.produces i_5 prod fin -> (forall x : int . 0 <= x /\ x < Seq.length prod -> Seq.get prod x <= (11 : uint32)) };
    goto BB4
  }
  BB4 {
    _8 <- ();
    _0 <- ();
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve i_5 };
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module Core_Num_Impl12_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module C06MapPrecond_Counter_Closure3_Interface
  type i
  use prelude.Borrow
  use mach.int.UInt64
  use prelude.Ghost
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  type c06mapprecond_counter_closure3  =
    | C06MapPrecond_Counter_Closure3 (borrowed usize)
    
  let function c06mapprecond_counter_closure3_0 (self : c06mapprecond_counter_closure3) : borrowed usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C06MapPrecond_Counter_Closure3 a -> a
      end
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = usize
  predicate precondition [@cfg:stackify] [#"../06_map_precond.rs" 206 8 206 41] (self : c06mapprecond_counter_closure3) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 205 19 205 61] let (x, _prod) = args in UInt64.to_int ( * c06mapprecond_counter_closure3_0 self) = Seq.length (Ghost.inner _prod) /\  * c06mapprecond_counter_closure3_0 self < Max0.mAX'
  predicate unnest (self : c06mapprecond_counter_closure3) (_2' : c06mapprecond_counter_closure3) =
     ^ c06mapprecond_counter_closure3_0 _2' =  ^ c06mapprecond_counter_closure3_0 self
  predicate postcondition_mut [@cfg:stackify] [#"../06_map_precond.rs" 206 8 206 41] (self : borrowed c06mapprecond_counter_closure3) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    ([#"../06_map_precond.rs" 206 18 206 39] let (x, _prod) = args in UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( ^ self)) = UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( * self)) + 1) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../06_map_precond.rs" 206 8 206 41] (self : c06mapprecond_counter_closure3) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 206 18 206 39] let (x, _prod) = args in UInt64.to_int ( * c06mapprecond_counter_closure3_0 self) = UInt64.to_int ( * c06mapprecond_counter_closure3_0 self) + 1
  predicate resolve (_1' : c06mapprecond_counter_closure3) =
    Resolve0.resolve (c06mapprecond_counter_closure3_0 _1')
  val c06MapPrecond_Counter_Closure3 [@cfg:stackify] [#"../06_map_precond.rs" 206 8 206 41] (_1' : borrowed c06mapprecond_counter_closure3) (x : uint32) (_prod : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 205 19 205 61] UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( * _1')) = Seq.length (Ghost.inner _prod) /\  * c06mapprecond_counter_closure3_0 ( * _1') < Max0.mAX'}
    ensures { [#"../06_map_precond.rs" 206 18 206 39] UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( ^ _1')) = UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( * _1')) + 1 }
    ensures { unnest ( * _1') ( ^ _1') }
    
end
module C06MapPrecond_Counter_Closure3
  type i
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  type c06mapprecond_counter_closure3  =
    | C06MapPrecond_Counter_Closure3 (borrowed usize)
    
  let function c06mapprecond_counter_closure3_0 (self : c06mapprecond_counter_closure3) : borrowed usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C06MapPrecond_Counter_Closure3 a -> a
      end
  use mach.int.UInt32
  use prelude.Ghost
  use seq.Seq
  use mach.int.UInt64
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = usize
  clone Core_Num_Impl12_Max as Max0
  predicate precondition [@cfg:stackify] [#"../06_map_precond.rs" 206 8 206 41] (self : c06mapprecond_counter_closure3) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 205 19 205 61] let (x, _prod) = args in UInt64.to_int ( * c06mapprecond_counter_closure3_0 self) = Seq.length (Ghost.inner _prod) /\  * c06mapprecond_counter_closure3_0 self < Max0.mAX'
  predicate unnest (self : c06mapprecond_counter_closure3) (_2' : c06mapprecond_counter_closure3) =
     ^ c06mapprecond_counter_closure3_0 _2' =  ^ c06mapprecond_counter_closure3_0 self
  predicate postcondition_mut [@cfg:stackify] [#"../06_map_precond.rs" 206 8 206 41] (self : borrowed c06mapprecond_counter_closure3) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    ([#"../06_map_precond.rs" 206 18 206 39] let (x, _prod) = args in UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( ^ self)) = UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( * self)) + 1) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../06_map_precond.rs" 206 8 206 41] (self : c06mapprecond_counter_closure3) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 206 18 206 39] let (x, _prod) = args in UInt64.to_int ( * c06mapprecond_counter_closure3_0 self) = UInt64.to_int ( * c06mapprecond_counter_closure3_0 self) + 1
  predicate resolve (_1' : c06mapprecond_counter_closure3) =
    Resolve0.resolve (c06mapprecond_counter_closure3_0 _1')
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = c06mapprecond_counter_closure3
  let rec cfg c06MapPrecond_Counter_Closure3 [@cfg:stackify] [#"../06_map_precond.rs" 206 8 206 41] (_1' : borrowed c06mapprecond_counter_closure3) (x : uint32) (_prod : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 205 19 205 61] UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( * _1')) = Seq.length (Ghost.inner _prod) /\  * c06mapprecond_counter_closure3_0 ( * _1') < Max0.mAX'}
    ensures { [#"../06_map_precond.rs" 206 18 206 39] UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( ^ _1')) = UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( * _1')) + 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : borrowed c06mapprecond_counter_closure3;
  var x_2 : uint32;
  var _prod_3 : Ghost.ghost_ty (Seq.seq uint32);
  var res_4 : uint32;
  var res_5 : uint32;
  {
    _1 <- _1';
    x_2 <- x;
    _prod_3 <- _prod;
    goto BB0
  }
  BB0 {
    _1 <- { _1 with current = (let C06MapPrecond_Counter_Closure3 a =  * _1 in C06MapPrecond_Counter_Closure3 ({ (c06mapprecond_counter_closure3_0 ( * _1)) with current = ([#"../06_map_precond.rs" 208 12 208 20]  * c06mapprecond_counter_closure3_0 ( * _1) + ([#"../06_map_precond.rs" 208 19 208 20] (1 : usize))) })) };
    assume { Resolve1.resolve _1 };
    res_5 <- x_2;
    res_4 <- res_5;
    _0 <- res_4;
    return _0
  }
  
end
module C06MapPrecond_Counter_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.UInt64
  clone Core_Num_Impl12_Max_Stub as Max0
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = uint32
  clone C06MapPrecond_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = i
  val counter [@cfg:stackify] [#"../06_map_precond.rs" 201 0 201 48] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 198 11 198 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 199 0 199 187] forall done_ : borrowed i . Completed0.completed done_ -> Invariant0.invariant' ( ^ done_) -> (forall steps : Seq.seq uint32 . forall next : i . Produces0.produces ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 200 0 200 112] forall fin : i . forall prod : Seq.seq uint32 . Invariant0.invariant' fin -> Produces0.produces iter prod fin -> Seq.length prod <= UInt64.to_int Max0.mAX'}
    
end
module C06MapPrecond_Counter
  type i
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt32
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = uint32
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = usize
  clone Core_Num_Impl12_Max as Max0
  clone C06MapPrecond_Counter_Closure3_Interface as Closure30 with
    type i = i,
    val Max0.mAX' = Max0.mAX',
    predicate Resolve0.resolve = Resolve2.resolve,
    axiom .
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces as Produces1 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3,
    predicate Unnest0.unnest = Closure30.unnest,
    predicate Precondition0.precondition = Closure30.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure30.postcondition_mut,
    type Item0.item = uint32,
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with
    type self = i
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3,
    predicate Unnest0.unnest = Closure30.unnest,
    predicate Precondition0.precondition = Closure30.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure30.postcondition_mut,
    type Item0.item = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3,
    predicate Unnest0.unnest = Closure30.unnest,
    predicate Precondition0.precondition = Closure30.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure30.postcondition_mut,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3,
    predicate Precondition0.precondition = Closure30.precondition,
    type Item0.item = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone C06MapPrecond_Impl0_Completed as Completed1 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3,
    type Item0.item = uint32,
    predicate Completed0.completed = Completed0.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3,
    type Item0.item = uint32,
    predicate Completed0.completed = Completed1.completed,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Invariant as Invariant1 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3,
    type Item0.item = uint32,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans1 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = uint32,
    axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl1 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = uint32,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = uint32,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = uint32,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = C06MapPrecond_Map_Type.t_map i uint32 Closure30.c06mapprecond_counter_closure3
  clone C06MapPrecond_Map_Interface as Map1 with
    type i = i,
    type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3,
    predicate Precondition0.precondition = Closure30.precondition,
    type Item0.item = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Invariant1.invariant' = Invariant1.invariant'
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = i
  let rec cfg counter [@cfg:stackify] [#"../06_map_precond.rs" 201 0 201 48] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 198 11 198 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 199 0 199 187] forall done_ : borrowed i . Completed0.completed done_ -> Invariant0.invariant' ( ^ done_) -> (forall steps : Seq.seq uint32 . forall next : i . Produces0.produces ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 200 0 200 112] forall fin : i . forall prod : Seq.seq uint32 . Invariant0.invariant' fin -> Produces0.produces iter prod fin -> Seq.length prod <= UInt64.to_int Max0.mAX'}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter_1 : i;
  var cnt_5 : usize;
  var _6 : C06MapPrecond_Map_Type.t_map i uint32 Closure30.c06mapprecond_counter_closure3;
  var _7 : i;
  var _8 : Closure30.c06mapprecond_counter_closure3;
  var _9 : borrowed usize;
  {
    iter_1 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    cnt_5 <- ([#"../06_map_precond.rs" 202 18 202 19] (0 : usize));
    assume { Resolve0.resolve _7 };
    _7 <- iter_1;
    iter_1 <- any i;
    _9 <- borrow_mut cnt_5;
    cnt_5 <-  ^ _9;
    _8 <- Closure30.C06MapPrecond_Counter_Closure3 _9;
    _6 <- ([#"../06_map_precond.rs" 203 4 211 5] Map1.map _7 _8);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    assume { Resolve1.resolve _6 };
    _0 <- ();
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06MapPrecond_Impl0_Item_Type
  type i
  type b
  type f
  type item  =
    b
end
module C06MapPrecond_Impl0
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Item_Type as Item1 with
    type i = i,
    type b = b,
    type f = f
  clone C06MapPrecond_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_ProducesOne as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = C06MapPrecond_Map_Type.t_map i Item0.item f,
    function produces_refl = ProducesRefl0.produces_refl,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item1.item,
    axiom .
  clone C06MapPrecond_Impl0_Next_Interface as Next0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate ProducesOne0.produces_one = ProducesOne0.produces_one,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Common_Iterator_Next_Interface as Next1 with
    type self = C06MapPrecond_Map_Type.t_map i Item0.item f,
    val next = Next0.next,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item1.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  goal produces_refl_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f . (([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../06_map_precond.rs" 27 15 27 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../06_map_precond.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a))
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = C06MapPrecond_Map_Type.t_map i Item0.item f,
    function produces_trans = ProducesTrans0.produces_trans,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item1.item,
    axiom .
  goal produces_trans_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f, ab : Seq.seq b, b : C06MapPrecond_Map_Type.t_map i Item0.item f, bc : Seq.seq b, c : C06MapPrecond_Map_Type.t_map i Item0.item f . (([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) && ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) && ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) && ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) && ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../06_map_precond.rs" 36 15 36 32] Produces0.produces b bc c) && ([#"../06_map_precond.rs" 35 15 35 32] Produces0.produces a ab b) && ([#"../06_map_precond.rs" 34 15 34 28] Invariant0.invariant' c) && ([#"../06_map_precond.rs" 33 15 33 28] Invariant0.invariant' b) && ([#"../06_map_precond.rs" 32 15 32 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../06_map_precond.rs" 37 14 37 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c))
end
