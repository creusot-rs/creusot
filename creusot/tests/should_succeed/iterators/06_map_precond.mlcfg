
module C06MapPrecond_Map_Type
  use prelude.Ghost
  use seq.Seq
  type t_map 'a 'i 'b 'f =
    | C_Map 'i 'f (Ghost.ghost_ty (Seq.seq 'a))
    
  let function map_produced (self : t_map 'a 'i 'b 'f) : Ghost.ghost_ty (Seq.seq 'a) = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ _ a -> a
      end
  let function map_iter (self : t_map 'a 'i 'b 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map a _ _ -> a
      end
  let function map_func (self : t_map 'a 'i 'b 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ a _ -> a
      end
end
module C06MapPrecond_Common_Iterator_Item_Type
  type self
  type item
end
module C06MapPrecond_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C06MapPrecond_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C06MapPrecond_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 27 4 27 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module C06MapPrecond_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module C06MapPrecond_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module C06MapPrecond_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module C06MapPrecond_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
end
module C06MapPrecond_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Inv0.inv a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Inv0.inv a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C06MapPrecond_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Inv0.inv a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Inv0.inv a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C06MapPrecond_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C06MapPrecond_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Inv0.inv a}
    requires {[#"../common.rs" 21 52 21 53] Inv0.inv b}
    requires {[#"../common.rs" 21 82 21 83] Inv0.inv c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Inv0.inv a) -> ([#"../common.rs" 21 52 21 53] Inv0.inv b) -> ([#"../common.rs" 21 82 21 83] Inv0.inv c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06MapPrecond_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Inv0.inv a}
    requires {[#"../common.rs" 21 52 21 53] Inv0.inv b}
    requires {[#"../common.rs" 21 82 21 83] Inv0.inv c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Inv0.inv a) -> ([#"../common.rs" 21 52 21 53] Inv0.inv b) -> ([#"../common.rs" 21 82 21 83] Inv0.inv c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C06MapPrecond_Impl0_Completed_Stub
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed [#"../06_map_precond.rs" 28 4 28 35] (self : borrowed (C06MapPrecond_Map_Type.t_map Item0.item i b f))
    
end
module C06MapPrecond_Impl0_Completed_Interface
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed [#"../06_map_precond.rs" 28 4 28 35] (self : borrowed (C06MapPrecond_Map_Type.t_map Item0.item i b f))
    
  val completed [#"../06_map_precond.rs" 28 4 28 35] (self : borrowed (C06MapPrecond_Map_Type.t_map Item0.item i b f)) : bool
    ensures { result = completed self }
    
end
module C06MapPrecond_Impl0_Completed
  type i
  type b
  type f
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed [#"../06_map_precond.rs" 28 4 28 35] (self : borrowed (C06MapPrecond_Map_Type.t_map Item0.item i b f))
    
   =
    [#"../06_map_precond.rs" 29 8 32 9] Ghost.inner (C06MapPrecond_Map_Type.map_produced ( ^ self)) = Seq.empty  /\ Completed0.completed {current = C06MapPrecond_Map_Type.map_iter ( * self); final = C06MapPrecond_Map_Type.map_iter ( ^ self)} /\ C06MapPrecond_Map_Type.map_func ( * self) = C06MapPrecond_Map_Type.map_func ( ^ self)
  val completed [#"../06_map_precond.rs" 28 4 28 35] (self : borrowed (C06MapPrecond_Map_Type.t_map Item0.item i b f)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2 : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2 : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module C06MapPrecond_Impl0_Produces_Stub
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate produces [@inline:trivial] [#"../06_map_precond.rs" 50 4 50 67] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    
end
module C06MapPrecond_Impl0_Produces_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate produces [@inline:trivial] [#"../06_map_precond.rs" 50 4 50 67] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    
  val produces [@inline:trivial] [#"../06_map_precond.rs" 50 4 50 67] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map Item0.item i b f) : bool
    ensures { result = produces self visited succ }
    
end
module C06MapPrecond_Impl0_Produces
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  use prelude.Borrow
  use prelude.Int
  use seq_ext.SeqExt
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate produces [@inline:trivial] [#"../06_map_precond.rs" 50 4 50 67] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    
   =
    [#"../06_map_precond.rs" 51 8 63 9] Unnest0.unnest (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ) /\ (exists s : Seq.seq Item0.item . Seq.length s = Seq.length visited /\ Produces0.produces (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s /\ (exists fs : Seq.seq (borrowed f) . Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Unnest0.unnest (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i) /\ Precondition0.precondition ( * Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) /\ PostconditionMut0.postcondition_mut (Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces [@inline:trivial] [#"../06_map_precond.rs" 50 4 50 67] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map Item0.item i b f) : bool
    ensures { result = produces self visited succ }
    
end
module C06MapPrecond_Impl1_NextPrecondition_Stub
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate next_precondition [#"../06_map_precond.rs" 93 4 93 59] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    
end
module C06MapPrecond_Impl1_NextPrecondition_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate next_precondition [#"../06_map_precond.rs" 93 4 93 59] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    
  val next_precondition [#"../06_map_precond.rs" 93 4 93 59] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) : bool
    ensures { result = next_precondition self }
    
end
module C06MapPrecond_Impl1_NextPrecondition
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate next_precondition [#"../06_map_precond.rs" 93 4 93 59] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    
   =
    [#"../06_map_precond.rs" 94 8 98 9] forall i : i . forall e : Item0.item . Inv0.inv i -> Inv1.inv e -> Produces0.produces (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) i -> Precondition0.precondition (C06MapPrecond_Map_Type.map_func self) (e, C06MapPrecond_Map_Type.map_produced self)
  val next_precondition [#"../06_map_precond.rs" 93 4 93 59] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) : bool
    ensures { result = next_precondition self }
    
end
module C06MapPrecond_Impl1_Preservation_Stub
  type i
  type b
  type f
  predicate preservation [#"../06_map_precond.rs" 128 4 128 45] (iter : i) (func : f)
end
module C06MapPrecond_Impl1_Preservation_Interface
  type i
  type b
  type f
  predicate preservation [#"../06_map_precond.rs" 128 4 128 45] (iter : i) (func : f)
  val preservation [#"../06_map_precond.rs" 128 4 128 45] (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module C06MapPrecond_Impl1_Preservation
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  predicate preservation [#"../06_map_precond.rs" 128 4 128 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 129 8 136 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Inv0.inv i -> Inv1.inv b -> Inv2.inv f -> Inv3.inv e2 -> Inv3.inv e1 -> Unnest0.unnest func ( * f) -> Produces0.produces iter (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1, Ghost.new s) -> PostconditionMut0.postcondition_mut f (e1, Ghost.new s) b -> Precondition0.precondition ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation [#"../06_map_precond.rs" 128 4 128 45] (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module C06MapPrecond_Impl1_Reinitialize_Stub
  type i
  type b
  type f
  predicate reinitialize [#"../06_map_precond.rs" 103 4 103 29] (_1 : ())
end
module C06MapPrecond_Impl1_Reinitialize_Interface
  type i
  type b
  type f
  predicate reinitialize [#"../06_map_precond.rs" 103 4 103 29] (_1 : ())
  val reinitialize [#"../06_map_precond.rs" 103 4 103 29] (_1 : ()) : bool
    ensures { result = reinitialize _1 }
    
end
module C06MapPrecond_Impl1_Reinitialize
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Completed_Stub as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  predicate reinitialize [#"../06_map_precond.rs" 103 4 103 29] (_1 : ()) =
    [#"../06_map_precond.rs" 104 8 111 9] forall reset : borrowed (C06MapPrecond_Map_Type.t_map Item0.item i b f) . Inv0.inv (C06MapPrecond_Map_Type.map_iter ( * reset)) -> Completed0.completed reset -> Inv0.inv (C06MapPrecond_Map_Type.map_iter ( ^ reset)) -> NextPrecondition0.next_precondition ( ^ reset) /\ Preservation0.preservation (C06MapPrecond_Map_Type.map_iter ( ^ reset)) (C06MapPrecond_Map_Type.map_func ( ^ reset))
  val reinitialize [#"../06_map_precond.rs" 103 4 103 29] (_1 : ()) : bool
    ensures { result = reinitialize _1 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 101 4 101 10] ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function unnest_refl (self : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function unnest_refl (self : f) : ()
  val unnest_refl (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function unnest_refl (self : f) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 107 4 107 10] ()
  val unnest_refl (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Stub
  type args
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface
  type args
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans
  type args
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 112 4 112 10] ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition_once (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_once self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition_once (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_once self _2 _3 }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)))
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)))
end
module C06MapPrecond_Impl1_PreservationInv_Stub
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate preservation_inv [#"../06_map_precond.rs" 116 4 116 58] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    
end
module C06MapPrecond_Impl1_PreservationInv_Interface
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate preservation_inv [#"../06_map_precond.rs" 116 4 116 58] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    
  val preservation_inv [#"../06_map_precond.rs" 116 4 116 58] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) : bool
    ensures { [#"../06_map_precond.rs" 115 4 115 106] Ghost.inner (C06MapPrecond_Map_Type.map_produced self) = Seq.empty  -> result = Preservation0.preservation (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) }
    ensures { result = preservation_inv self }
    
  axiom preservation_inv_spec : forall self : C06MapPrecond_Map_Type.t_map Item0.item i b f . [#"../06_map_precond.rs" 115 4 115 106] Ghost.inner (C06MapPrecond_Map_Type.map_produced self) = Seq.empty  -> preservation_inv self = Preservation0.preservation (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self)
end
module C06MapPrecond_Impl1_PreservationInv
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate preservation_inv [#"../06_map_precond.rs" 116 4 116 58] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    
   =
    [#"../06_map_precond.rs" 117 8 124 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Inv0.inv i -> Inv1.inv b -> Inv2.inv f -> Inv3.inv e2 -> Inv3.inv e1 -> Unnest0.unnest (C06MapPrecond_Map_Type.map_func self) ( * f) -> Produces0.produces (C06MapPrecond_Map_Type.map_iter self) (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s)) -> PostconditionMut0.postcondition_mut f (e1, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s)) b -> Precondition0.precondition ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s) e1))
  val preservation_inv [#"../06_map_precond.rs" 116 4 116 58] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) : bool
    ensures { [#"../06_map_precond.rs" 115 4 115 106] Ghost.inner (C06MapPrecond_Map_Type.map_produced self) = Seq.empty  -> result = Preservation0.preservation (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) }
    ensures { result = preservation_inv self }
    
  axiom preservation_inv_spec : forall self : C06MapPrecond_Map_Type.t_map Item0.item i b f . [#"../06_map_precond.rs" 115 4 115 106] Ghost.inner (C06MapPrecond_Map_Type.map_produced self) = Seq.empty  -> preservation_inv self = Preservation0.preservation (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self)
end
module C06MapPrecond_Impl1_PreservationInv_Impl
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = f
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = f,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = b
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv1.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv2.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv5.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv1.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Item0.item,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed f,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = b,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate Inv3.inv = Inv3.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  let rec ghost predicate preservation_inv [#"../06_map_precond.rs" 116 4 116 58] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    ensures { [#"../06_map_precond.rs" 115 4 115 106] Ghost.inner (C06MapPrecond_Map_Type.map_produced self) = Seq.empty  -> result = Preservation0.preservation (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 117 8 124 9] pure {forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Inv0.inv i -> Inv1.inv b -> Inv2.inv f -> Inv3.inv e2 -> Inv3.inv e1 -> Unnest0.unnest (C06MapPrecond_Map_Type.map_func self) ( * f) -> Produces0.produces (C06MapPrecond_Map_Type.map_iter self) (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s)) -> PostconditionMut0.postcondition_mut f (e1, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s)) b -> Precondition0.precondition ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s) e1))}
end
module C06MapPrecond_Impl2_Invariant_Stub
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate invariant' [#"../06_map_precond.rs" 168 4 168 30] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f)
end
module C06MapPrecond_Impl2_Invariant_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate invariant' [#"../06_map_precond.rs" 168 4 168 30] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f)
  val invariant' [#"../06_map_precond.rs" 168 4 168 30] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) : bool
    ensures { result = invariant' self }
    
end
module C06MapPrecond_Impl2_Invariant
  type i
  type b
  type f
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_PreservationInv_Stub as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  predicate invariant' [#"../06_map_precond.rs" 168 4 168 30] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) =
    [#"../06_map_precond.rs" 170 12 172 36] Reinitialize0.reinitialize () /\ PreservationInv0.preservation_inv self /\ NextPrecondition0.next_precondition self
  val invariant' [#"../06_map_precond.rs" 168 4 168 30] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) : bool
    ensures { result = invariant' self }
    
end
module C06MapPrecond_Map_Type_Inv
  type a
  type i
  type b
  type f
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone C06MapPrecond_Impl2_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C06MapPrecond_Map_Type.t_map a i b f
  axiom inv_t_map [@rewrite] : forall self : C06MapPrecond_Map_Type.t_map a i b f . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv (C06MapPrecond_Map_Type.map_iter self))
end
module C06MapPrecond_Impl0_ProducesRefl_Stub
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  function produces_refl [#"../06_map_precond.rs" 38 4 38 29] (a : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
end
module C06MapPrecond_Impl0_ProducesRefl_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  function produces_refl [#"../06_map_precond.rs" 38 4 38 29] (a : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
  val produces_refl [#"../06_map_precond.rs" 38 4 38 29] (a : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    requires {[#"../06_map_precond.rs" 38 21 38 22] Inv0.inv a}
    ensures { [#"../06_map_precond.rs" 37 14 37 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C06MapPrecond_Map_Type.t_map Item0.item i b f . ([#"../06_map_precond.rs" 38 21 38 22] Inv0.inv a) -> ([#"../06_map_precond.rs" 37 14 37 39] Produces0.produces a (Seq.empty ) a)
end
module C06MapPrecond_Impl0_ProducesRefl
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  function produces_refl [#"../06_map_precond.rs" 38 4 38 29] (a : C06MapPrecond_Map_Type.t_map Item0.item i b f) : () =
    [#"../06_map_precond.rs" 35 4 35 10] ()
  val produces_refl [#"../06_map_precond.rs" 38 4 38 29] (a : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    requires {[#"../06_map_precond.rs" 38 21 38 22] Inv0.inv a}
    ensures { [#"../06_map_precond.rs" 37 14 37 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C06MapPrecond_Map_Type.t_map Item0.item i b f . ([#"../06_map_precond.rs" 38 21 38 22] Inv0.inv a) -> ([#"../06_map_precond.rs" 37 14 37 39] Produces0.produces a (Seq.empty ) a)
end
module C06MapPrecond_Impl0_ProducesRefl_Impl
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = f
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = f,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = b
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = b,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed f
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed f,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate Inv3.inv = Inv6.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv6.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate Inv3.inv = Inv6.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv4.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv2.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv5.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv4.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone C06MapPrecond_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv1.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone C06MapPrecond_Map_Type_Inv as C06MapPrecond_Map_Type_Inv0 with
    type a = Item0.item,
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone C06MapPrecond_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  let rec ghost function produces_refl [#"../06_map_precond.rs" 38 4 38 29] (a : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    requires {[#"../06_map_precond.rs" 38 21 38 22] Inv0.inv a}
    ensures { [#"../06_map_precond.rs" 37 14 37 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 35 4 35 10] ()
end
module C06MapPrecond_Impl0_ProducesTrans_Stub
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans [#"../06_map_precond.rs" 45 4 45 90] (a : C06MapPrecond_Map_Type.t_map Item0.item i b f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map Item0.item i b f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    
end
module C06MapPrecond_Impl0_ProducesTrans_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans [#"../06_map_precond.rs" 45 4 45 90] (a : C06MapPrecond_Map_Type.t_map Item0.item i b f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map Item0.item i b f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    
  val produces_trans [#"../06_map_precond.rs" 45 4 45 90] (a : C06MapPrecond_Map_Type.t_map Item0.item i b f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map Item0.item i b f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    requires {[#"../06_map_precond.rs" 42 15 42 32] Produces0.produces a ab b}
    requires {[#"../06_map_precond.rs" 43 15 43 32] Produces0.produces b bc c}
    requires {[#"../06_map_precond.rs" 45 22 45 23] Inv0.inv a}
    requires {[#"../06_map_precond.rs" 45 52 45 53] Inv0.inv b}
    requires {[#"../06_map_precond.rs" 45 82 45 83] Inv0.inv c}
    ensures { [#"../06_map_precond.rs" 44 14 44 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C06MapPrecond_Map_Type.t_map Item0.item i b f, ab : Seq.seq b, b : C06MapPrecond_Map_Type.t_map Item0.item i b f, bc : Seq.seq b, c : C06MapPrecond_Map_Type.t_map Item0.item i b f . ([#"../06_map_precond.rs" 42 15 42 32] Produces0.produces a ab b) -> ([#"../06_map_precond.rs" 43 15 43 32] Produces0.produces b bc c) -> ([#"../06_map_precond.rs" 45 22 45 23] Inv0.inv a) -> ([#"../06_map_precond.rs" 45 52 45 53] Inv0.inv b) -> ([#"../06_map_precond.rs" 45 82 45 83] Inv0.inv c) -> ([#"../06_map_precond.rs" 44 14 44 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06MapPrecond_Impl0_ProducesTrans
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans [#"../06_map_precond.rs" 45 4 45 90] (a : C06MapPrecond_Map_Type.t_map Item0.item i b f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map Item0.item i b f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    
   =
    [#"../06_map_precond.rs" 40 4 40 10] ()
  val produces_trans [#"../06_map_precond.rs" 45 4 45 90] (a : C06MapPrecond_Map_Type.t_map Item0.item i b f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map Item0.item i b f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    requires {[#"../06_map_precond.rs" 42 15 42 32] Produces0.produces a ab b}
    requires {[#"../06_map_precond.rs" 43 15 43 32] Produces0.produces b bc c}
    requires {[#"../06_map_precond.rs" 45 22 45 23] Inv0.inv a}
    requires {[#"../06_map_precond.rs" 45 52 45 53] Inv0.inv b}
    requires {[#"../06_map_precond.rs" 45 82 45 83] Inv0.inv c}
    ensures { [#"../06_map_precond.rs" 44 14 44 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C06MapPrecond_Map_Type.t_map Item0.item i b f, ab : Seq.seq b, b : C06MapPrecond_Map_Type.t_map Item0.item i b f, bc : Seq.seq b, c : C06MapPrecond_Map_Type.t_map Item0.item i b f . ([#"../06_map_precond.rs" 42 15 42 32] Produces0.produces a ab b) -> ([#"../06_map_precond.rs" 43 15 43 32] Produces0.produces b bc c) -> ([#"../06_map_precond.rs" 45 22 45 23] Inv0.inv a) -> ([#"../06_map_precond.rs" 45 52 45 53] Inv0.inv b) -> ([#"../06_map_precond.rs" 45 82 45 83] Inv0.inv c) -> ([#"../06_map_precond.rs" 44 14 44 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06MapPrecond_Impl0_ProducesTrans_Impl
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = f
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = f,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = b
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = b,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed f
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed f,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate Inv3.inv = Inv6.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv6.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate Inv3.inv = Inv6.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone C06MapPrecond_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv4.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv2.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv5.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv4.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv1.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone C06MapPrecond_Map_Type_Inv as C06MapPrecond_Map_Type_Inv0 with
    type a = Item0.item,
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone C06MapPrecond_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  let rec ghost function produces_trans [#"../06_map_precond.rs" 45 4 45 90] (a : C06MapPrecond_Map_Type.t_map Item0.item i b f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map Item0.item i b f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    requires {[#"../06_map_precond.rs" 42 15 42 32] Produces0.produces a ab b}
    requires {[#"../06_map_precond.rs" 43 15 43 32] Produces0.produces b bc c}
    requires {[#"../06_map_precond.rs" 45 22 45 23] Inv0.inv a}
    requires {[#"../06_map_precond.rs" 45 52 45 53] Inv0.inv b}
    requires {[#"../06_map_precond.rs" 45 82 45 83] Inv0.inv c}
    ensures { [#"../06_map_precond.rs" 44 14 44 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 40 4 40 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C06MapPrecond_Impl1_ProducesOne_Stub
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = b
  predicate produces_one [#"../06_map_precond.rs" 147 4 151 13] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (visited : b) (succ : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    
end
module C06MapPrecond_Impl1_ProducesOne_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = b
  predicate produces_one [#"../06_map_precond.rs" 147 4 151 13] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (visited : b) (succ : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    
  val produces_one [#"../06_map_precond.rs" 147 4 151 13] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (visited : b) (succ : C06MapPrecond_Map_Type.t_map Item0.item i b f) : bool
    requires {[#"../06_map_precond.rs" 149 8 149 15] Inv0.inv visited}
    ensures { [#"../06_map_precond.rs" 146 14 146 68] result = Produces0.produces self (Seq.singleton visited) succ }
    ensures { result = produces_one self visited succ }
    
  axiom produces_one_spec : forall self : C06MapPrecond_Map_Type.t_map Item0.item i b f, visited : b, succ : C06MapPrecond_Map_Type.t_map Item0.item i b f . ([#"../06_map_precond.rs" 149 8 149 15] Inv0.inv visited) -> ([#"../06_map_precond.rs" 146 14 146 68] produces_one self visited succ = Produces0.produces self (Seq.singleton visited) succ)
end
module C06MapPrecond_Impl1_ProducesOne
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  use prelude.Ghost
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed f
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = b
  predicate produces_one [#"../06_map_precond.rs" 147 4 151 13] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (visited : b) (succ : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    
   =
    [#"../06_map_precond.rs" 152 8 158 9] exists f : borrowed f . Inv1.inv f /\  * f = C06MapPrecond_Map_Type.map_func self /\  ^ f = C06MapPrecond_Map_Type.map_func succ /\ (exists e : Item0.item . Inv2.inv e /\ Produces1.produces (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) e /\ Precondition0.precondition ( * f) (e, C06MapPrecond_Map_Type.map_produced self) /\ PostconditionMut0.postcondition_mut f (e, C06MapPrecond_Map_Type.map_produced self) visited)
  val produces_one [#"../06_map_precond.rs" 147 4 151 13] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (visited : b) (succ : C06MapPrecond_Map_Type.t_map Item0.item i b f) : bool
    requires {[#"../06_map_precond.rs" 149 8 149 15] Inv0.inv visited}
    ensures { [#"../06_map_precond.rs" 146 14 146 68] result = Produces0.produces self (Seq.singleton visited) succ }
    ensures { result = produces_one self visited succ }
    
  axiom produces_one_spec : forall self : C06MapPrecond_Map_Type.t_map Item0.item i b f, visited : b, succ : C06MapPrecond_Map_Type.t_map Item0.item i b f . ([#"../06_map_precond.rs" 149 8 149 15] Inv0.inv visited) -> ([#"../06_map_precond.rs" 146 14 146 68] produces_one self visited succ = Produces0.produces self (Seq.singleton visited) succ)
end
module C06MapPrecond_Impl1_ProducesOne_Impl
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  use prelude.Ghost
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = i
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv0.inv,
    predicate Inv2.inv = Inv1.inv,
    predicate Inv3.inv = Inv2.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv0.inv,
    predicate Inv2.inv = Inv1.inv,
    predicate Inv3.inv = Inv2.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv4.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = f
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = f,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = i,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone C06MapPrecond_Map_Type_Inv as C06MapPrecond_Map_Type_Inv0 with
    type a = Item0.item,
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Inv2.inv = Inv0.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv1.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv6.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Inv2.inv = Inv0.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Item0.item,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed f,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv4.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = i,
    predicate Inv0.inv = Inv4.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv3.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = b,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  let rec ghost predicate produces_one [#"../06_map_precond.rs" 147 4 151 13] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (visited : b) (succ : C06MapPrecond_Map_Type.t_map Item0.item i b f)
    requires {[#"../06_map_precond.rs" 149 8 149 15] Inv0.inv visited}
    ensures { [#"../06_map_precond.rs" 146 14 146 68] result = Produces0.produces self (Seq.singleton visited) succ }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 152 8 158 9] pure {exists f : borrowed f . Inv1.inv f /\  * f = C06MapPrecond_Map_Type.map_func self /\  ^ f = C06MapPrecond_Map_Type.map_func succ /\ (exists e : Item0.item . Inv2.inv e /\ Produces1.produces (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) e /\ Precondition0.precondition ( * f) (e, C06MapPrecond_Map_Type.map_produced self) /\ PostconditionMut0.postcondition_mut f (e, C06MapPrecond_Map_Type.map_produced self) visited)}
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C06MapPrecond_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  val next [#"../common.rs" 27 4 27 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 27 17 27 21] Inv0.inv self}
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 26 27 44] Inv1.inv result }
    
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module Core_Ops_Function_FnMut_CallMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = args,
    type f = self
  val call_mut (self : borrowed self) (args : args) : Output0.output
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 160 27 160 52] Precondition0.precondition ( * self) args}
    requires {Inv0.inv self}
    requires {Inv1.inv args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] PostconditionMut0.postcondition_mut self args result }
    ensures { Inv2.inv result }
    
end
module C06MapPrecond_Impl1_ProducesOneInvariant_Stub
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  clone C06MapPrecond_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  function produces_one_invariant [#"../06_map_precond.rs" 143 4 143 75] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (e : b) (other : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    
end
module C06MapPrecond_Impl1_ProducesOneInvariant_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  clone C06MapPrecond_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  function produces_one_invariant [#"../06_map_precond.rs" 143 4 143 75] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (e : b) (other : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    
  val produces_one_invariant [#"../06_map_precond.rs" 143 4 143 75] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (e : b) (other : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    requires {[#"../06_map_precond.rs" 140 15 140 42] ProducesOne0.produces_one self e other}
    requires {[#"../06_map_precond.rs" 141 15 141 30] Inv0.inv (C06MapPrecond_Map_Type.map_iter other)}
    requires {[#"../06_map_precond.rs" 143 30 143 34] Inv1.inv self}
    requires {[#"../06_map_precond.rs" 143 36 143 37] Inv2.inv e}
    ensures { [#"../06_map_precond.rs" 142 14 142 24] Inv1.inv other }
    ensures { result = produces_one_invariant self e other }
    
  axiom produces_one_invariant_spec : forall self : C06MapPrecond_Map_Type.t_map Item0.item i b f, e : b, other : C06MapPrecond_Map_Type.t_map Item0.item i b f . ([#"../06_map_precond.rs" 140 15 140 42] ProducesOne0.produces_one self e other) -> ([#"../06_map_precond.rs" 141 15 141 30] Inv0.inv (C06MapPrecond_Map_Type.map_iter other)) -> ([#"../06_map_precond.rs" 143 30 143 34] Inv1.inv self) -> ([#"../06_map_precond.rs" 143 36 143 37] Inv2.inv e) -> ([#"../06_map_precond.rs" 142 14 142 24] Inv1.inv other)
end
module C06MapPrecond_Impl1_ProducesOneInvariant
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  clone C06MapPrecond_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  function produces_one_invariant [#"../06_map_precond.rs" 143 4 143 75] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (e : b) (other : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    
   =
    [#"../06_map_precond.rs" 139 4 139 12] ()
  val produces_one_invariant [#"../06_map_precond.rs" 143 4 143 75] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (e : b) (other : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    requires {[#"../06_map_precond.rs" 140 15 140 42] ProducesOne0.produces_one self e other}
    requires {[#"../06_map_precond.rs" 141 15 141 30] Inv0.inv (C06MapPrecond_Map_Type.map_iter other)}
    requires {[#"../06_map_precond.rs" 143 30 143 34] Inv1.inv self}
    requires {[#"../06_map_precond.rs" 143 36 143 37] Inv2.inv e}
    ensures { [#"../06_map_precond.rs" 142 14 142 24] Inv1.inv other }
    ensures { result = produces_one_invariant self e other }
    
  axiom produces_one_invariant_spec : forall self : C06MapPrecond_Map_Type.t_map Item0.item i b f, e : b, other : C06MapPrecond_Map_Type.t_map Item0.item i b f . ([#"../06_map_precond.rs" 140 15 140 42] ProducesOne0.produces_one self e other) -> ([#"../06_map_precond.rs" 141 15 141 30] Inv0.inv (C06MapPrecond_Map_Type.map_iter other)) -> ([#"../06_map_precond.rs" 143 30 143 34] Inv1.inv self) -> ([#"../06_map_precond.rs" 143 36 143 37] Inv2.inv e) -> ([#"../06_map_precond.rs" 142 14 142 24] Inv1.inv other)
end
module C06MapPrecond_Impl1_ProducesOneInvariant_Impl
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = f
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = f,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = i
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Inv2.inv = Inv3.inv,
    predicate Inv3.inv = Inv4.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Inv2.inv = Inv3.inv,
    predicate Inv3.inv = Inv4.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone C06MapPrecond_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv3.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv6.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Item0.item,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed f,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone C06MapPrecond_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv1.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv0.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = b,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone C06MapPrecond_Map_Type_Inv as C06MapPrecond_Map_Type_Inv0 with
    type a = Item0.item,
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C06MapPrecond_Impl1_ProducesOne as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv4.inv,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  let rec ghost function produces_one_invariant [#"../06_map_precond.rs" 143 4 143 75] (self : C06MapPrecond_Map_Type.t_map Item0.item i b f) (e : b) (other : C06MapPrecond_Map_Type.t_map Item0.item i b f) : ()
    requires {[#"../06_map_precond.rs" 140 15 140 42] ProducesOne0.produces_one self e other}
    requires {[#"../06_map_precond.rs" 141 15 141 30] Inv0.inv (C06MapPrecond_Map_Type.map_iter other)}
    requires {[#"../06_map_precond.rs" 143 30 143 34] Inv1.inv self}
    requires {[#"../06_map_precond.rs" 143 36 143 37] Inv2.inv e}
    ensures { [#"../06_map_precond.rs" 142 14 142 24] Inv1.inv other }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 139 4 139 12] ()
end
module TyInv_Borrow
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  axiom inv_borrow [@rewrite] : forall self : borrowed t . Inv0.inv self = (Inv1.inv ( * self) /\ Inv1.inv ( ^ self))
end
module C06MapPrecond_Impl0_Next_Interface
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = b
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option b
  clone C06MapPrecond_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl0_Completed_Stub as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (C06MapPrecond_Map_Type.t_map Item0.item i b f)
  val next [#"../06_map_precond.rs" 70 4 70 44] (self : borrowed (C06MapPrecond_Map_Type.t_map Item0.item i b f)) : Core_Option_Option_Type.t_option b
    requires {[#"../06_map_precond.rs" 70 17 70 21] Inv0.inv self}
    ensures { [#"../06_map_precond.rs" 66 14 69 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> ProducesOne0.produces_one ( * self) v ( ^ self)
      end }
    ensures { [#"../06_map_precond.rs" 70 26 70 44] Inv1.inv result }
    
end
module C06MapPrecond_Impl0_Next
  type i
  type b
  type f
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = i
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv8.inv,
    predicate Inv2.inv = Inv6.inv,
    predicate Inv3.inv = Inv10.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv10.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv8.inv,
    predicate Inv2.inv = Inv6.inv,
    predicate Inv3.inv = Inv10.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Item0.item,
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone C06MapPrecond_Map_Type_Inv as C06MapPrecond_Map_Type_Inv0 with
    type a = Item0.item,
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv9.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = b,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv7.inv,
    predicate Inv2.inv = Inv8.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv6.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve5.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv7.inv,
    predicate Inv2.inv = Inv8.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = borrowed f,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = borrowed i
  clone TyInv_Borrow as TyInv_Borrow1 with
    type t = i,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv0.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Core_Option_Option_Type.t_option b
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Core_Option_Option_Type.t_option b,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed (C06MapPrecond_Map_Type.t_map Item0.item i b f)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv9.inv,
    axiom .
  clone C06MapPrecond_Impl0_Produces as Produces1 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = f,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Option_Option_Type.t_option Item0.item,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = Ghost.ghost_ty (Seq.seq Item0.item)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone C06MapPrecond_Impl1_ProducesOne as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv8.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    predicate Inv1.inv = Inv6.inv,
    predicate Inv2.inv = Inv10.inv,
    predicate Produces1.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty ()
  clone C06MapPrecond_Impl1_ProducesOneInvariant as ProducesOneInvariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate ProducesOne0.produces_one = ProducesOne0.produces_one,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv9.inv,
    predicate Inv2.inv = Inv8.inv,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone Core_Ops_Function_FnMut_CallMut_Interface as CallMut0 with
    type self = f,
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv7.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv2.inv = Inv8.inv,
    type Output0.output = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone C06MapPrecond_Common_Iterator_Next_Interface as Next0 with
    type self = i,
    predicate Inv0.inv = Inv5.inv,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv1.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (C06MapPrecond_Map_Type.t_map Item0.item i b f)
  let rec cfg next [#"../06_map_precond.rs" 70 4 70 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C06MapPrecond_Map_Type.t_map Item0.item i b f)) : Core_Option_Option_Type.t_option b
    requires {[#"../06_map_precond.rs" 70 17 70 21] Inv3.inv self}
    ensures { [#"../06_map_precond.rs" 66 14 69 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> ProducesOne0.produces_one ( * self) v ( ^ self)
      end }
    ensures { [#"../06_map_precond.rs" 70 26 70 44] Inv4.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option b;
  var self : borrowed (C06MapPrecond_Map_Type.t_map Item0.item i b f) = self;
  var old_self : Ghost.ghost_ty (C06MapPrecond_Map_Type.t_map Item0.item i b f);
  var _5 : Core_Option_Option_Type.t_option Item0.item;
  var _6 : borrowed i;
  var v : Item0.item;
  var produced : Ghost.ghost_ty (Seq.seq Item0.item);
  var r : b;
  var _14 : borrowed f;
  var _17 : Ghost.ghost_ty (Seq.seq Item0.item);
  var _20 : Ghost.ghost_ty ();
  var _25 : Ghost.ghost_ty (Seq.seq Item0.item);
  {
    goto BB0
  }
  BB0 {
    old_self <- ([#"../06_map_precond.rs" 71 23 71 36] Ghost.new ( * self));
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self };
    _6 <- Borrow.borrow_mut (C06MapPrecond_Map_Type.map_iter ( * self));
    self <- { self with current = (let C06MapPrecond_Map_Type.C_Map a b c =  * self in C06MapPrecond_Map_Type.C_Map ( ^ _6) b c) };
    assume { Inv0.inv ( ^ _6) };
    _5 <- ([#"../06_map_precond.rs" 72 14 72 30] Next0.next _6);
    _6 <- any borrowed i;
    goto BB2
  }
  BB2 {
    switch (_5)
      | Core_Option_Option_Type.C_None -> goto BB3
      | Core_Option_Option_Type.C_Some _ -> goto BB4
      end
  }
  BB3 {
    assert { [@expl:type invariant] Inv1.inv _5 };
    assume { Resolve1.resolve _5 };
    _25 <- ([#"../06_map_precond.rs" 84 32 84 50] Ghost.new (Seq.empty ));
    goto BB17
  }
  BB4 {
    goto BB6
  }
  BB5 {
    assert { [@expl:type invariant] Inv1.inv _5 };
    assume { Resolve1.resolve _5 };
    assert { [@expl:type invariant] Inv3.inv self };
    assume { Resolve3.resolve self };
    absurd
  }
  BB6 {
    v <- Core_Option_Option_Type.some_0 _5;
    _5 <- (let Core_Option_Option_Type.C_Some a = _5 in Core_Option_Option_Type.C_Some (any Item0.item));
    assert { [@expl:type invariant] Inv1.inv _5 };
    assume { Resolve1.resolve _5 };
    assert { [@expl:assertion] [#"../06_map_precond.rs" 74 16 74 76] Precondition0.precondition (C06MapPrecond_Map_Type.map_func ( * self)) (v, C06MapPrecond_Map_Type.map_produced ( * self)) };
    goto BB7
  }
  BB7 {
    produced <- ([#"../06_map_precond.rs" 75 31 75 60] Ghost.new (Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced ( * self))) v));
    goto BB8
  }
  BB8 {
    _14 <- Borrow.borrow_mut (C06MapPrecond_Map_Type.map_func ( * self));
    self <- { self with current = (let C06MapPrecond_Map_Type.C_Map a b c =  * self in C06MapPrecond_Map_Type.C_Map a ( ^ _14) c) };
    assume { Inv2.inv ( ^ _14) };
    _17 <- ([#"../06_map_precond.rs" 76 39 76 68] Ghost.new (Ghost.inner (C06MapPrecond_Map_Type.map_produced ( * self))));
    goto BB9
  }
  BB9 {
    r <- ([#"../06_map_precond.rs" 76 24 76 69] CallMut0.call_mut _14 (v, _17));
    _14 <- any borrowed f;
    v <- any Item0.item;
    _17 <- any Ghost.ghost_ty (Seq.seq Item0.item);
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    self <- { self with current = (let C06MapPrecond_Map_Type.C_Map a b c =  * self in C06MapPrecond_Map_Type.C_Map a b produced) };
    produced <- any Ghost.ghost_ty (Seq.seq Item0.item);
    _20 <- ([#"../06_map_precond.rs" 78 16 78 52] Ghost.new ());
    goto BB12
  }
  BB12 {
    assume { Resolve2.resolve _20 };
    assert { [@expl:assertion] [#"../06_map_precond.rs" 79 32 79 63] ProducesOne0.produces_one (Ghost.inner old_self) r ( * self) };
    goto BB13
  }
  BB13 {
    assert { [@expl:type invariant] Inv3.inv self };
    assume { Resolve3.resolve self };
    _0 <- Core_Option_Option_Type.C_Some r;
    r <- any b;
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB18
  }
  BB17 {
    self <- { self with current = (let C06MapPrecond_Map_Type.C_Map a b c =  * self in C06MapPrecond_Map_Type.C_Map a b _25) };
    _25 <- any Ghost.ghost_ty (Seq.seq Item0.item);
    assume { Resolve4.resolve (C06MapPrecond_Map_Type.map_produced ( * self)) };
    assert { [@expl:type invariant] Inv3.inv self };
    assume { Resolve3.resolve self };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
module C06MapPrecond_Map_Interface
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = f
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone C06MapPrecond_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  val map [#"../06_map_precond.rs" 181 0 184 26] (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map Item0.item i b f
    requires {[#"../06_map_precond.rs" 177 0 177 128] forall i2 : i . forall e : Item0.item . Inv0.inv i2 -> Inv1.inv e -> Produces0.produces iter (Seq.singleton e) i2 -> Precondition0.precondition func (e, Ghost.new (Seq.empty ))}
    requires {[#"../06_map_precond.rs" 178 11 178 50] Reinitialize0.reinitialize ()}
    requires {[#"../06_map_precond.rs" 179 11 179 60] Preservation0.preservation iter func}
    requires {[#"../06_map_precond.rs" 182 4 182 8] Inv0.inv iter}
    requires {[#"../06_map_precond.rs" 183 4 183 8] Inv2.inv func}
    ensures { [#"../06_map_precond.rs" 180 10 180 72] result = C06MapPrecond_Map_Type.C_Map iter func (Ghost.new (Seq.empty )) }
    ensures { [#"../06_map_precond.rs" 184 5 184 26] Inv3.inv result }
    
end
module C06MapPrecond_Map
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = i
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Inv3.inv = Inv1.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Inv3.inv = Inv1.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone C06MapPrecond_Impl0_Produces as Produces1 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv6.inv,
    predicate Inv2.inv = Inv4.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv5.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv6.inv,
    predicate Inv2.inv = Inv4.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = borrowed f,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = b,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv3.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Map_Type_Inv as C06MapPrecond_Map_Type_Inv0 with
    type a = Item0.item,
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = f,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  let rec cfg map [#"../06_map_precond.rs" 181 0 184 26] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map Item0.item i b f
    requires {[#"../06_map_precond.rs" 177 0 177 128] forall i2 : i . forall e : Item0.item . Inv0.inv i2 -> Inv1.inv e -> Produces0.produces iter (Seq.singleton e) i2 -> Precondition0.precondition func (e, Ghost.new (Seq.empty ))}
    requires {[#"../06_map_precond.rs" 178 11 178 50] Reinitialize0.reinitialize ()}
    requires {[#"../06_map_precond.rs" 179 11 179 60] Preservation0.preservation iter func}
    requires {[#"../06_map_precond.rs" 182 4 182 8] Inv0.inv iter}
    requires {[#"../06_map_precond.rs" 183 4 183 8] Inv2.inv func}
    ensures { [#"../06_map_precond.rs" 180 10 180 72] result = C06MapPrecond_Map_Type.C_Map iter func (Ghost.new (Seq.empty )) }
    ensures { [#"../06_map_precond.rs" 184 5 184 26] Inv3.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06MapPrecond_Map_Type.t_map Item0.item i b f;
  var iter : i = iter;
  var func : f = func;
  var _9 : Ghost.ghost_ty (Seq.seq Item0.item);
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _9 <- ([#"../06_map_precond.rs" 185 32 185 48] Ghost.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    _0 <- C06MapPrecond_Map_Type.C_Map iter func _9;
    iter <- any i;
    func <- any f;
    _9 <- any Ghost.ghost_ty (Seq.seq Item0.item);
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module C06MapPrecond_Identity_Closure0_Type
  type c06mapprecond_identity_closure0 'i =
    | C06MapPrecond_Identity_Closure0
    
end
module C06MapPrecond_Identity_Closure0_Interface
  type i
  use export C06MapPrecond_Identity_Closure0_Type
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Item0.item
  predicate resolve [#"../06_map_precond.rs" 189 14 189 20] (_1 : c06mapprecond_identity_closure0 i) =
    [#"../06_map_precond.rs" 1 0 1 0] true
  predicate unnest [#"../06_map_precond.rs" 189 14 189 20] (self : c06mapprecond_identity_closure0 i) (_2 : c06mapprecond_identity_closure0 i)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] true
  predicate precondition [#"../06_map_precond.rs" 189 14 189 20] (self : c06mapprecond_identity_closure0 i) (args : (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)))
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _3) = args in true
  predicate postcondition_once [#"../06_map_precond.rs" 189 14 189 20] (self : c06mapprecond_identity_closure0 i) (args : (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))) (result : Item0.item)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _3) = args in true
  predicate postcondition_mut [#"../06_map_precond.rs" 189 14 189 20] (self : borrowed (c06mapprecond_identity_closure0 i)) (args : (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))) (result : Item0.item)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] (let (x, _3) = args in true) /\ unnest ( * self) ( ^ self)
  val c06MapPrecond_Identity_Closure0 [#"../06_map_precond.rs" 189 14 189 20] (_1 : borrowed (c06mapprecond_identity_closure0 i)) (x : Item0.item) (_3 : Ghost.ghost_ty (Seq.seq Item0.item)) : Item0.item
    requires {[#"../06_map_precond.rs" 189 15 189 16] Inv0.inv x}
    ensures { [#"../06_map_precond.rs" 189 14 189 20] Inv0.inv result }
    ensures { unnest ( * _1) ( ^ _1) }
    
end
module C06MapPrecond_Identity_Closure0
  type i
  use export C06MapPrecond_Identity_Closure0_Type
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = i,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use seq.Seq
  use prelude.Ghost
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv1.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = c06mapprecond_identity_closure0 i
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (Seq.seq Item0.item)
  predicate resolve [#"../06_map_precond.rs" 189 14 189 20] (_1 : c06mapprecond_identity_closure0 i) =
    [#"../06_map_precond.rs" 1 0 1 0] true
  predicate unnest [#"../06_map_precond.rs" 189 14 189 20] (self : c06mapprecond_identity_closure0 i) (_2 : c06mapprecond_identity_closure0 i)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] true
  predicate precondition [#"../06_map_precond.rs" 189 14 189 20] (self : c06mapprecond_identity_closure0 i) (args : (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)))
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _3) = args in true
  predicate postcondition_once [#"../06_map_precond.rs" 189 14 189 20] (self : c06mapprecond_identity_closure0 i) (args : (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))) (result : Item0.item)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _3) = args in true
  predicate postcondition_mut [#"../06_map_precond.rs" 189 14 189 20] (self : borrowed (c06mapprecond_identity_closure0 i)) (args : (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item))) (result : Item0.item)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] (let (x, _3) = args in true) /\ unnest ( * self) ( ^ self)
  let rec cfg c06MapPrecond_Identity_Closure0 [#"../06_map_precond.rs" 189 14 189 20] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed (c06mapprecond_identity_closure0 i)) (x : Item0.item) (_3 : Ghost.ghost_ty (Seq.seq Item0.item)) : Item0.item
    requires {[#"../06_map_precond.rs" 189 15 189 16] Inv0.inv x}
    ensures { [#"../06_map_precond.rs" 189 14 189 20] Inv0.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Item0.item;
  var _1 : borrowed (c06mapprecond_identity_closure0 i) = _1;
  var x : Item0.item = x;
  var _3 : Ghost.ghost_ty (Seq.seq Item0.item) = _3;
  {
    goto BB0
  }
  BB0 {
    _0 <- x;
    x <- any Item0.item;
    assume { Resolve0.resolve _3 };
    assume { Resolve1.resolve _1 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C06MapPrecond_Identity_Interface
  type i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  val identity [#"../06_map_precond.rs" 188 0 188 37] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 188 29 188 33] Inv0.inv iter}
    
end
module C06MapPrecond_Identity
  type i
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Item0.item
  clone C06MapPrecond_Identity_Closure0_Interface as Closure00 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv2.inv
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces as Produces1 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0 i,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Closure00.unnest,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure00.postcondition_mut,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = borrowed (Closure00.c06mapprecond_identity_closure0 i)
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = i
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0 i,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Closure00.unnest,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure00.postcondition_mut,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Inv3.inv = Inv2.inv,
    predicate Inv2.inv = Inv4.inv,
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0 i,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Closure00.unnest,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure00.postcondition_mut,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Inv3.inv = Inv2.inv,
    predicate Inv2.inv = Inv4.inv,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed (Closure00.c06mapprecond_identity_closure0 i),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i Item0.item (Closure00.c06mapprecond_identity_closure0 i)
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans1 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0 i,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl1 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0 i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0 i,
    type Item0.item = Item0.item,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0 i,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0 i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0 i,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Closure00.c06mapprecond_identity_closure0 i
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Closure00.c06mapprecond_identity_closure0 i,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Item0.item,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv1.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C06MapPrecond_Map_Type_Inv as C06MapPrecond_Map_Type_Inv0 with
    type a = Item0.item,
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0 i,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = C06MapPrecond_Map_Type.t_map Item0.item i Item0.item (Closure00.c06mapprecond_identity_closure0 i)
  clone C06MapPrecond_Map_Interface as Map0 with
    type i = i,
    type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0 i,
    type Item0.item = Item0.item,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Inv2.inv = Inv3.inv,
    predicate Inv3.inv = Inv0.inv
  let rec cfg identity [#"../06_map_precond.rs" 188 0 188 37] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 188 29 188 33] Inv1.inv iter}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter : i = iter;
  var _2 : C06MapPrecond_Map_Type.t_map Item0.item i Item0.item (Closure00.c06mapprecond_identity_closure0 i);
  {
    goto BB0
  }
  BB0 {
    _2 <- ([#"../06_map_precond.rs" 189 4 189 23] Map0.map iter (Closure00.C06MapPrecond_Identity_Closure0));
    iter <- any i;
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] Inv0.inv _2 };
    assume { Resolve0.resolve _2 };
    goto BB2
  }
  BB2 {
    _0 <- ();
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C06MapPrecond_Increment_Closure2_Type
  type c06mapprecond_increment_closure2 'i =
    | C06MapPrecond_Increment_Closure2
    
end
module C06MapPrecond_Increment_Closure2_Interface
  type i
  use export C06MapPrecond_Increment_Closure2_Type
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  predicate resolve [#"../06_map_precond.rs" 200 8 200 35] (_1 : c06mapprecond_increment_closure2 i) =
    [#"../06_map_precond.rs" 1 0 1 0] true
  predicate unnest [#"../06_map_precond.rs" 200 8 200 35] (self : c06mapprecond_increment_closure2 i) (_2 : c06mapprecond_increment_closure2 i)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] true
  predicate precondition [#"../06_map_precond.rs" 200 8 200 35] (self : c06mapprecond_increment_closure2 i) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 199 19 199 27] let (x, _3) = args in UInt32.to_int x <= 15
  predicate postcondition_once [#"../06_map_precond.rs" 200 8 200 35] (self : c06mapprecond_increment_closure2 i) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 200 18 200 33] let (x, _3) = args in UInt32.to_int result = UInt32.to_int x + 1
  predicate postcondition_mut [#"../06_map_precond.rs" 200 8 200 35] (self : borrowed (c06mapprecond_increment_closure2 i)) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] (let (x, _3) = args in UInt32.to_int result = UInt32.to_int x + 1) /\ unnest ( * self) ( ^ self)
  val c06MapPrecond_Increment_Closure2 [#"../06_map_precond.rs" 200 8 200 35] (_1 : borrowed (c06mapprecond_increment_closure2 i)) (x : uint32) (_3 : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 199 19 199 27] UInt32.to_int x <= 15}
    ensures { [#"../06_map_precond.rs" 200 18 200 33] UInt32.to_int result = UInt32.to_int x + 1 }
    ensures { unnest ( * _1) ( ^ _1) }
    
end
module C06MapPrecond_Increment_Closure2
  type i
  use export C06MapPrecond_Increment_Closure2_Type
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = c06mapprecond_increment_closure2 i
  predicate resolve [#"../06_map_precond.rs" 200 8 200 35] (_1 : c06mapprecond_increment_closure2 i) =
    [#"../06_map_precond.rs" 1 0 1 0] true
  predicate unnest [#"../06_map_precond.rs" 200 8 200 35] (self : c06mapprecond_increment_closure2 i) (_2 : c06mapprecond_increment_closure2 i)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] true
  predicate precondition [#"../06_map_precond.rs" 200 8 200 35] (self : c06mapprecond_increment_closure2 i) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 199 19 199 27] let (x, _3) = args in UInt32.to_int x <= 15
  predicate postcondition_once [#"../06_map_precond.rs" 200 8 200 35] (self : c06mapprecond_increment_closure2 i) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 200 18 200 33] let (x, _3) = args in UInt32.to_int result = UInt32.to_int x + 1
  predicate postcondition_mut [#"../06_map_precond.rs" 200 8 200 35] (self : borrowed (c06mapprecond_increment_closure2 i)) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] (let (x, _3) = args in UInt32.to_int result = UInt32.to_int x + 1) /\ unnest ( * self) ( ^ self)
  let rec cfg c06MapPrecond_Increment_Closure2 [#"../06_map_precond.rs" 200 8 200 35] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed (c06mapprecond_increment_closure2 i)) (x : uint32) (_3 : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 199 19 199 27] UInt32.to_int x <= 15}
    ensures { [#"../06_map_precond.rs" 200 18 200 33] UInt32.to_int result = UInt32.to_int x + 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : borrowed (c06mapprecond_increment_closure2 i) = _1;
  var x : uint32 = x;
  var res : uint32;
  var res1 : uint32;
  {
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _1 };
    res1 <- ([#"../06_map_precond.rs" 201 20 201 25] x + ([#"../06_map_precond.rs" 201 24 201 25] (1 : uint32)));
    res <- res1;
    _0 <- res;
    return _0
  }
  
end
module C06MapPrecond_Increment_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = uint32
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone C06MapPrecond_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed i
  val increment [#"../06_map_precond.rs" 196 0 196 50] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 192 0 192 178] forall done_ : borrowed i . Inv0.inv done_ -> Completed0.completed done_ -> Inv1.inv ( ^ done_) -> (forall steps : Seq.seq uint32 . forall next : i . Inv1.inv next -> Produces0.produces ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 193 0 195 2] forall fin : i . forall prod : Seq.seq uint32 . Inv1.inv fin -> Produces0.produces iter prod fin -> (forall x : int . 0 <= x /\ x < Seq.length prod -> Seq.get prod x <= (10 : uint32))}
    requires {[#"../06_map_precond.rs" 196 42 196 46] Inv1.inv iter}
    
end
module C06MapPrecond_Increment
  type i
  use prelude.Int
  use prelude.UInt32
  use seq.Seq
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = uint32
  use seq.Seq
  use prelude.Ghost
  clone C06MapPrecond_Increment_Closure2_Interface as Closure20 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = borrowed (Closure20.c06mapprecond_increment_closure2 i)
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = uint32
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = i
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_increment_closure2 i,
    predicate Unnest0.unnest = Closure20.unnest,
    predicate Precondition0.precondition = Closure20.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure20.postcondition_mut,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv3.inv = Inv3.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Produces0.produces = Produces1.produces
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_increment_closure2 i,
    predicate Unnest0.unnest = Closure20.unnest,
    predicate Precondition0.precondition = Closure20.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure20.postcondition_mut,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv3.inv = Inv3.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed (Closure20.c06mapprecond_increment_closure2 i),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_increment_closure2 i,
    predicate Precondition0.precondition = Closure20.precondition,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone C06MapPrecond_Impl0_Completed as Completed1 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_increment_closure2 i,
    type Item0.item = uint32,
    predicate Completed0.completed = Completed0.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_increment_closure2 i,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Completed0.completed = Completed1.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_increment_closure2 i,
    type Item0.item = uint32,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Closure20.c06mapprecond_increment_closure2 i
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Closure20.c06mapprecond_increment_closure2 i,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = uint32,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv2.inv,
    type Item0.item = uint32,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = i,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = uint32,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed i
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C06MapPrecond_Map_Type.t_map uint32 i uint32 (Closure20.c06mapprecond_increment_closure2 i)
  clone C06MapPrecond_Impl0_Produces as Produces0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_increment_closure2 i,
    predicate Unnest0.unnest = Closure20.unnest,
    predicate Precondition0.precondition = Closure20.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure20.postcondition_mut,
    type Item0.item = uint32,
    predicate Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_increment_closure2 i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    type Item0.item = uint32,
    axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_increment_closure2 i,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = uint32,
    axiom .
  clone C06MapPrecond_Map_Type_Inv as C06MapPrecond_Map_Type_Inv0 with
    type a = uint32,
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_increment_closure2 i,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = C06MapPrecond_Map_Type.t_map uint32 i uint32 (Closure20.c06mapprecond_increment_closure2 i)
  clone C06MapPrecond_Map_Interface as Map0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_increment_closure2 i,
    predicate Precondition0.precondition = Closure20.precondition,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Inv2.inv = Inv4.inv,
    predicate Inv3.inv = Inv0.inv
  let rec cfg increment [#"../06_map_precond.rs" 196 0 196 50] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 192 0 192 178] forall done_ : borrowed i . Inv1.inv done_ -> Completed0.completed done_ -> Inv2.inv ( ^ done_) -> (forall steps : Seq.seq uint32 . forall next : i . Inv2.inv next -> Produces1.produces ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 193 0 195 2] forall fin : i . forall prod : Seq.seq uint32 . Inv2.inv fin -> Produces1.produces iter prod fin -> (forall x : int . 0 <= x /\ x < Seq.length prod -> Seq.get prod x <= (10 : uint32))}
    requires {[#"../06_map_precond.rs" 196 42 196 46] Inv2.inv iter}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter : i = iter;
  var i : C06MapPrecond_Map_Type.t_map uint32 i uint32 (Closure20.c06mapprecond_increment_closure2 i);
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    i <- ([#"../06_map_precond.rs" 197 12 202 5] Map0.map iter (Closure20.C06MapPrecond_Increment_Closure2));
    iter <- any i;
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] Inv0.inv i };
    assume { Resolve0.resolve i };
    assert { [@expl:assertion] [#"../06_map_precond.rs" 204 4 207 5] forall fin : C06MapPrecond_Map_Type.t_map uint32 i uint32 (Closure20.c06mapprecond_increment_closure2 i) . forall prod : Seq.seq uint32 . Inv0.inv fin -> Produces0.produces i prod fin -> (forall x : int . 0 <= x /\ x < Seq.length prod -> Seq.get prod x <= (11 : uint32)) };
    goto BB3
  }
  BB3 {
    _0 <- ();
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module C06MapPrecond_Counter_Closure2_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  type c06mapprecond_counter_closure2 'i =
    | C06MapPrecond_Counter_Closure2 (borrowed usize)
    
end
module C06MapPrecond_Counter_Closure2_Interface
  type i
  use export C06MapPrecond_Counter_Closure2_Type
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = usize
  clone Core_Num_Impl11_Max_Stub as Max0
  let function field_0 [#"../06_map_precond.rs" 217 8 217 41] (self : c06mapprecond_counter_closure2 i) : borrowed usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 1 0 1 0] let C06MapPrecond_Counter_Closure2 a = self in a
  predicate resolve [#"../06_map_precond.rs" 217 8 217 41] (_1 : c06mapprecond_counter_closure2 i) =
    [#"../06_map_precond.rs" 1 0 1 0] Resolve0.resolve (field_0 _1)
  predicate unnest [#"../06_map_precond.rs" 217 8 217 41] (self : c06mapprecond_counter_closure2 i) (_2 : c06mapprecond_counter_closure2 i)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0]  ^ field_0 _2 =  ^ field_0 self
  predicate precondition [#"../06_map_precond.rs" 217 8 217 41] (self : c06mapprecond_counter_closure2 i) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 216 19 216 61] let (x, _prod) = args in UIntSize.to_int ( * field_0 self) = Seq.length (Ghost.inner _prod) /\  * field_0 self < Max0.mAX'
  predicate postcondition_once [#"../06_map_precond.rs" 217 8 217 41] (self : c06mapprecond_counter_closure2 i) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 217 18 217 39] let (x, _prod) = args in UIntSize.to_int ( ^ field_0 self) = UIntSize.to_int ( * field_0 self) + 1
  predicate postcondition_mut [#"../06_map_precond.rs" 217 8 217 41] (self : borrowed (c06mapprecond_counter_closure2 i)) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] (let (x, _prod) = args in UIntSize.to_int ( * field_0 ( ^ self)) = UIntSize.to_int ( * field_0 ( * self)) + 1) /\ unnest ( * self) ( ^ self)
  val c06MapPrecond_Counter_Closure2 [#"../06_map_precond.rs" 217 8 217 41] (_1 : borrowed (c06mapprecond_counter_closure2 i)) (x : uint32) (_prod : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 216 19 216 61] UIntSize.to_int ( * field_0 ( * _1)) = Seq.length (Ghost.inner _prod) /\  * field_0 ( * _1) < Max0.mAX'}
    ensures { [#"../06_map_precond.rs" 217 18 217 39] UIntSize.to_int ( * field_0 ( ^ _1)) = UIntSize.to_int ( * field_0 ( * _1)) + 1 }
    ensures { unnest ( * _1) ( ^ _1) }
    
end
module C06MapPrecond_Counter_Closure2
  type i
  use export C06MapPrecond_Counter_Closure2_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = usize
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = c06mapprecond_counter_closure2 i
  let function field_0 [#"../06_map_precond.rs" 217 8 217 41] (self : c06mapprecond_counter_closure2 i) : borrowed usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 1 0 1 0] let C06MapPrecond_Counter_Closure2 a = self in a
  predicate resolve [#"../06_map_precond.rs" 217 8 217 41] (_1 : c06mapprecond_counter_closure2 i) =
    [#"../06_map_precond.rs" 1 0 1 0] Resolve1.resolve (field_0 _1)
  predicate unnest [#"../06_map_precond.rs" 217 8 217 41] (self : c06mapprecond_counter_closure2 i) (_2 : c06mapprecond_counter_closure2 i)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0]  ^ field_0 _2 =  ^ field_0 self
  predicate precondition [#"../06_map_precond.rs" 217 8 217 41] (self : c06mapprecond_counter_closure2 i) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 216 19 216 61] let (x, _prod) = args in UIntSize.to_int ( * field_0 self) = Seq.length (Ghost.inner _prod) /\  * field_0 self < Max0.mAX'
  predicate postcondition_once [#"../06_map_precond.rs" 217 8 217 41] (self : c06mapprecond_counter_closure2 i) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 217 18 217 39] let (x, _prod) = args in UIntSize.to_int ( ^ field_0 self) = UIntSize.to_int ( * field_0 self) + 1
  predicate postcondition_mut [#"../06_map_precond.rs" 217 8 217 41] (self : borrowed (c06mapprecond_counter_closure2 i)) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] (let (x, _prod) = args in UIntSize.to_int ( * field_0 ( ^ self)) = UIntSize.to_int ( * field_0 ( * self)) + 1) /\ unnest ( * self) ( ^ self)
  let rec cfg c06MapPrecond_Counter_Closure2 [#"../06_map_precond.rs" 217 8 217 41] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed (c06mapprecond_counter_closure2 i)) (x : uint32) (_prod : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 216 19 216 61] UIntSize.to_int ( * field_0 ( * _1)) = Seq.length (Ghost.inner _prod) /\  * field_0 ( * _1) < Max0.mAX'}
    ensures { [#"../06_map_precond.rs" 217 18 217 39] UIntSize.to_int ( * field_0 ( ^ _1)) = UIntSize.to_int ( * field_0 ( * _1)) + 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : borrowed (c06mapprecond_counter_closure2 i) = _1;
  var x : uint32 = x;
  var res : uint32;
  var res1 : uint32;
  {
    goto BB0
  }
  BB0 {
    _1 <- { _1 with current = (let C06MapPrecond_Counter_Closure2 a =  * _1 in C06MapPrecond_Counter_Closure2 ({ (field_0 ( * _1)) with current = ([#"../06_map_precond.rs" 219 12 219 20]  * field_0 ( * _1) + ([#"../06_map_precond.rs" 219 19 219 20] (1 : usize))) })) };
    assume { Resolve0.resolve _1 };
    res1 <- x;
    res <- res1;
    _0 <- res;
    return _0
  }
  
end
module C06MapPrecond_Counter_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  use prelude.UIntSize
  clone Core_Num_Impl11_Max_Stub as Max0
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = uint32
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone C06MapPrecond_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed i
  val counter [#"../06_map_precond.rs" 212 0 212 48] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 210 0 210 178] forall done_ : borrowed i . Inv0.inv done_ -> Completed0.completed done_ -> Inv1.inv ( ^ done_) -> (forall steps : Seq.seq uint32 . forall next : i . Inv1.inv next -> Produces0.produces ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 211 0 211 92] forall fin : i . forall prod : Seq.seq uint32 . Inv1.inv fin -> Produces0.produces iter prod fin -> Seq.length prod <= UIntSize.to_int Max0.mAX'}
    requires {[#"../06_map_precond.rs" 212 40 212 44] Inv1.inv iter}
    
end
module C06MapPrecond_Counter
  type i
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.UInt32
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = uint32
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = usize
  clone Core_Num_Impl11_Max as Max0
  clone C06MapPrecond_Counter_Closure2_Interface as Closure20 with
    type i = i,
    val Max0.mAX' = Max0.mAX',
    predicate Resolve0.resolve = Resolve1.resolve
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces as Produces1 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_counter_closure2 i,
    predicate Unnest0.unnest = Closure20.unnest,
    predicate Precondition0.precondition = Closure20.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure20.postcondition_mut,
    type Item0.item = uint32,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = borrowed (Closure20.c06mapprecond_counter_closure2 i)
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = uint32
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = i
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_counter_closure2 i,
    predicate Unnest0.unnest = Closure20.unnest,
    predicate Precondition0.precondition = Closure20.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure20.postcondition_mut,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv3.inv = Inv3.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_counter_closure2 i,
    predicate Unnest0.unnest = Closure20.unnest,
    predicate Precondition0.precondition = Closure20.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure20.postcondition_mut,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv3.inv = Inv3.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed (Closure20.c06mapprecond_counter_closure2 i),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C06MapPrecond_Map_Type.t_map uint32 i uint32 (Closure20.c06mapprecond_counter_closure2 i)
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans1 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_counter_closure2 i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv0.inv,
    type Item0.item = uint32,
    axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl1 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_counter_closure2 i,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = uint32,
    axiom .
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_counter_closure2 i,
    predicate Precondition0.precondition = Closure20.precondition,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Produces0.produces = Produces0.produces
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone C06MapPrecond_Impl0_Completed as Completed1 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_counter_closure2 i,
    type Item0.item = uint32,
    predicate Completed0.completed = Completed0.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_counter_closure2 i,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Completed0.completed = Completed1.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_counter_closure2 i,
    type Item0.item = uint32,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Closure20.c06mapprecond_counter_closure2 i
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Closure20.c06mapprecond_counter_closure2 i,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = uint32,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv2.inv,
    type Item0.item = uint32,
    axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = uint32,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed i
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone C06MapPrecond_Map_Type_Inv as C06MapPrecond_Map_Type_Inv0 with
    type a = uint32,
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_counter_closure2 i,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = C06MapPrecond_Map_Type.t_map uint32 i uint32 (Closure20.c06mapprecond_counter_closure2 i)
  clone C06MapPrecond_Map_Interface as Map0 with
    type i = i,
    type b = uint32,
    type f = Closure20.c06mapprecond_counter_closure2 i,
    predicate Precondition0.precondition = Closure20.precondition,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Inv2.inv = Inv4.inv,
    predicate Inv3.inv = Inv0.inv
  let rec cfg counter [#"../06_map_precond.rs" 212 0 212 48] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 210 0 210 178] forall done_ : borrowed i . Inv1.inv done_ -> Completed0.completed done_ -> Inv2.inv ( ^ done_) -> (forall steps : Seq.seq uint32 . forall next : i . Inv2.inv next -> Produces0.produces ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 211 0 211 92] forall fin : i . forall prod : Seq.seq uint32 . Inv2.inv fin -> Produces0.produces iter prod fin -> Seq.length prod <= UIntSize.to_int Max0.mAX'}
    requires {[#"../06_map_precond.rs" 212 40 212 44] Inv2.inv iter}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter : i = iter;
  var cnt : usize;
  var _5 : C06MapPrecond_Map_Type.t_map uint32 i uint32 (Closure20.c06mapprecond_counter_closure2 i);
  var _8 : borrowed usize;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    cnt <- ([#"../06_map_precond.rs" 213 18 213 19] (0 : usize));
    _8 <- Borrow.borrow_mut cnt;
    cnt <-  ^ _8;
    _5 <- ([#"../06_map_precond.rs" 214 4 222 5] Map0.map iter (Closure20.C06MapPrecond_Counter_Closure2 _8));
    iter <- any i;
    _8 <- any borrowed usize;
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] Inv0.inv _5 };
    assume { Resolve0.resolve _5 };
    goto BB3
  }
  BB3 {
    _0 <- ();
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module C06MapPrecond_Impl0
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = i,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = b
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv4.inv,
    predicate Inv3.inv = Inv5.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv4.inv,
    predicate Inv3.inv = Inv5.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C06MapPrecond_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Item0.item,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed f,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = b,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone C06MapPrecond_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Option_Option_Type.t_option b
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Option_Option_Type.t_option b,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (C06MapPrecond_Map_Type.t_map Item0.item i b f)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C06MapPrecond_Map_Type.t_map Item0.item i b f,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone C06MapPrecond_Map_Type_Inv as C06MapPrecond_Map_Type_Inv0 with
    type a = Item0.item,
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone C06MapPrecond_Common_Iterator_Item_Type as Item1 with
    type self = C06MapPrecond_Map_Type.t_map Item0.item i b f
  clone C06MapPrecond_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_ProducesOne as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  goal produces_refl_refn : [#"../06_map_precond.rs" 38 4 38 29] forall a : C06MapPrecond_Map_Type.t_map Item0.item i b f . Inv0.inv a -> Inv0.inv a /\ (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
  goal next_refn : [#"../06_map_precond.rs" 70 4 70 44] forall self : borrowed (C06MapPrecond_Map_Type.t_map Item0.item i b f) . Inv1.inv self -> Inv1.inv self /\ (forall result : Core_Option_Option_Type.t_option b . Inv2.inv result /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> ProducesOne0.produces_one ( * self) v ( ^ self)
    end -> Inv2.inv result /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_trans_refn : [#"../06_map_precond.rs" 45 4 45 90] forall a : C06MapPrecond_Map_Type.t_map Item0.item i b f . forall ab : Seq.seq b . forall b : C06MapPrecond_Map_Type.t_map Item0.item i b f . forall bc : Seq.seq b . forall c : C06MapPrecond_Map_Type.t_map Item0.item i b f . Inv0.inv c /\ Inv0.inv b /\ Inv0.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Inv0.inv c /\ Inv0.inv b /\ Inv0.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
end
module C06MapPrecond_Impl2
  type i
  type b
  type f
end
