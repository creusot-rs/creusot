
module C06MapPrecond_Common_Iterator_Invariant_Stub
  type self
  val ghost predicate invariant' (self : self)
end
module C06MapPrecond_Common_Iterator_Invariant_Interface
  type self
  val ghost predicate invariant' (self : self)
end
module C06MapPrecond_Common_Iterator_Invariant
  type self
  let rec ghost predicate invariant' [#"../common.rs" 28 4 28 30] (self : self) = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../common.rs" 29 8 29 12] true
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
  let function ghost_0 (self : t_ghost 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ghost a -> a
      end
end
module C06MapPrecond_Map_Type
  use seq.Seq
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  type t_map 'i 'a 'f =
    | C_Map 'i 'f (CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq 'a)) (CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost 'i)
    
  let function map_init_iter (self : t_map 'i 'a 'f) : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost 'i
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ _ _ a -> a
      end
  let function map_iter (self : t_map 'i 'a 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map a _ _ _ -> a
      end
  let function map_produced (self : t_map 'i 'a 'f) : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq 'a)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ _ a _ -> a
      end
  let function map_func (self : t_map 'i 'a 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ a _ _ -> a
      end
end
module C06MapPrecond_Common_Iterator_Item_Type
  type self
  type item
end
module C06MapPrecond_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  val ghost predicate completed (self : borrowed self)
end
module C06MapPrecond_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  val ghost predicate completed (self : borrowed self)
end
module C06MapPrecond_Common_Iterator_Completed
  type self
  use prelude.Borrow
  val ghost predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C06MapPrecond_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C06MapPrecond_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C06MapPrecond_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C06MapPrecond_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl (a : self) : ()
end
module C06MapPrecond_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl (a : self) : ()
    requires {[#"../common.rs" 14 15 14 28] Invariant0.invariant' a}
    ensures { [#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a }
    
end
module C06MapPrecond_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C06MapPrecond_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C06MapPrecond_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 19 15 19 28] Invariant0.invariant' a}
    requires {[#"../common.rs" 20 15 20 28] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 15 21 28] Invariant0.invariant' c}
    requires {[#"../common.rs" 22 15 22 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 23 15 23 32] Produces0.produces b bc c}
    ensures { [#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c }
    
end
module C06MapPrecond_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06MapPrecond_Impl0_Completed_Stub
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost predicate completed (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f))
end
module C06MapPrecond_Impl0_Completed_Interface
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost predicate completed (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f))
end
module C06MapPrecond_Impl0_Completed
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use seq.Seq
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone C06MapPrecond_Common_Iterator_Completed_Stub as Completed0 with type self = i
  let rec ghost predicate completed [#"../06_map_precond.rs" 24 4 24 35] (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f))
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 26 12 27 99] pure {CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_init_iter ( ^ self)) = C06MapPrecond_Map_Type.map_iter ( ^ self)} && pure {CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced ( ^ self)) = Seq.empty } && pure {exists iter : borrowed i .  * iter = C06MapPrecond_Map_Type.map_iter ( * self) /\  ^ iter = C06MapPrecond_Map_Type.map_iter ( ^ self) /\ Completed0.completed iter}
end
module CreusotContracts_Std1_Fun_Impl0_Precondition_Stub
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition_Interface
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module C06MapPrecond_Impl1_HasPrecond_Stub
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost predicate has_precond (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (start : i) (with' : Seq.seq Item0.item)
    
end
module C06MapPrecond_Impl1_HasPrecond_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost predicate has_precond (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (start : i) (with' : Seq.seq Item0.item)
    
end
module C06MapPrecond_Impl1_HasPrecond
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Stub as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = i, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = i
  let rec ghost predicate has_precond [#"../06_map_precond.rs" 112 4 112 62] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (start : i) (with' : Seq.seq Item0.item)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 113 8 117 9] pure {forall i2 : i . forall e : Item0.item . Invariant0.invariant' i2 -> Produces0.produces start (Seq.snoc with' e) i2 -> Precondition0.precondition (C06MapPrecond_Map_Type.map_func self) (e, C06MapPrecond_Map_Type.map_produced self)}
end
module C06MapPrecond_Impl1_InnerExtension_Stub
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost predicate inner_extension (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (other : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
end
module C06MapPrecond_Impl1_InnerExtension_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost predicate inner_extension (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (other : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
end
module C06MapPrecond_Impl1_InnerExtension
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use mach.int.Int
  use seq.Seq
  use seq_ext.SeqExt
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = i, type Item0.item = Item0.item
  let rec ghost predicate inner_extension [#"../06_map_precond.rs" 100 4 100 49] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (other : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 99 4 99 16] pure {C06MapPrecond_Map_Type.map_init_iter self = C06MapPrecond_Map_Type.map_init_iter other} && Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced other)) >= Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) && Seq.(==) (SeqExt.subsequence (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced other)) 0 (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)))) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) && Produces0.produces (C06MapPrecond_Map_Type.map_iter self) (SeqExt.subsequence (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced other)) (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self))) (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced other)))) (C06MapPrecond_Map_Type.map_iter other)
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Fun_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module C06MapPrecond_Impl0_Produces_Stub
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost predicate produces (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
end
module C06MapPrecond_Impl0_Produces_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost predicate produces (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
end
module C06MapPrecond_Impl0_Produces
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use mach.int.Int
  use seq_ext.SeqExt
  use prelude.Borrow
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut_Stub as PostconditionMut0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = i, type Item0.item = Item0.item
  let rec ghost predicate produces [#"../06_map_precond.rs" 46 4 46 67] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 47 8 61 9] pure {Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) + Seq.length visited = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced succ))} && Seq.(==) (SeqExt.subsequence (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced succ)) 0 (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)))) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) && pure {C06MapPrecond_Map_Type.map_init_iter self = C06MapPrecond_Map_Type.map_init_iter succ} && Produces0.produces (C06MapPrecond_Map_Type.map_iter self) (SeqExt.subsequence (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced succ)) (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self))) (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced succ)))) (C06MapPrecond_Map_Type.map_iter succ) && pure {exists fs : Seq.seq (borrowed f) . Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (Seq.length visited > 0 ->  * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ) /\ (Seq.length visited = 0 -> C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> PostconditionMut0.postcondition_mut (Seq.get fs i) (Seq.get (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced succ)) (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) + i), CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (SeqExt.subsequence (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced succ)) 0 (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) + i))) (Seq.get visited i))}
end
module C06MapPrecond_Impl1_Preservation_Stub
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost predicate preservation (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
end
module C06MapPrecond_Impl1_Preservation_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost predicate preservation (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
end
module C06MapPrecond_Impl1_Preservation
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use seq.Seq
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = i
  clone C06MapPrecond_Impl1_HasPrecond_Stub as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_InnerExtension_Stub as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  let rec ghost predicate preservation [#"../06_map_precond.rs" 153 4 153 33] (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 154 8 165 9] pure {forall initial : C06MapPrecond_Map_Type.t_map i Item0.item f . InnerExtension0.inner_extension self initial -> HasPrecond0.has_precond initial (C06MapPrecond_Map_Type.map_iter initial) (Seq.empty ) -> Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter initial) -> (forall b : b . forall n : C06MapPrecond_Map_Type.t_map i Item0.item f . Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter n) -> Produces0.produces initial (Seq.singleton b) n -> HasPrecond0.has_precond n (C06MapPrecond_Map_Type.map_iter n) (Seq.empty ))}
end
module C06MapPrecond_Impl1_Reinitialize_Stub
  type i
  type b
  type f
  val ghost predicate reinitialize (_ : ())
end
module C06MapPrecond_Impl1_Reinitialize_Interface
  type i
  type b
  type f
  val ghost predicate reinitialize (_ : ())
end
module C06MapPrecond_Impl1_Reinitialize
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_HasPrecond_Stub as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = i
  clone C06MapPrecond_Impl0_Completed_Stub as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  let rec ghost predicate reinitialize [#"../06_map_precond.rs" 142 4 142 29] (_ : ())
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 143 8 149 9] pure {forall reset : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f) . Completed0.completed reset -> Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter ( ^ reset)) -> HasPrecond0.has_precond ( ^ reset) (C06MapPrecond_Map_Type.map_iter ( ^ reset)) (Seq.empty ) /\ Preservation0.preservation ( ^ reset)}
end
module C06MapPrecond_Impl0_Invariant_Stub
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost predicate invariant' (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
end
module C06MapPrecond_Impl0_Invariant_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost predicate invariant' (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
end
module C06MapPrecond_Impl0_Invariant
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use seq.Seq
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone C06MapPrecond_Impl1_HasPrecond_Stub as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = i, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = i
  clone C06MapPrecond_Impl1_Preservation_Stub as Preservation0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_Reinitialize_Stub as Reinitialize0 with type i = i, type b = b, type f = f
  let rec ghost predicate invariant' [#"../06_map_precond.rs" 66 4 66 30] (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 67 8 73 9] Reinitialize0.reinitialize () && Preservation0.preservation self && Invariant0.invariant' (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_init_iter self)) && Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter self) && Produces0.produces (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_init_iter self)) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) (C06MapPrecond_Map_Type.map_iter self) && HasPrecond0.has_precond self (C06MapPrecond_Map_Type.map_iter self) (Seq.empty )
end
module CreusotContracts_Std1_Fun_Impl1_FnMutOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost function fn_mut_once (self : f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl1_FnMutOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost function fn_mut_once (self : f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl1_FnMutOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  let rec ghost function fn_mut_once (self : f) (_2' : args) (_3' : Output0.output) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module C06MapPrecond_Impl0_ProducesRefl_Stub
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  val ghost function produces_refl (a : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
end
module C06MapPrecond_Impl0_ProducesRefl_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  val ghost function produces_refl (a : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 32 15 32 28] Invariant0.invariant' a}
    ensures { [#"../06_map_precond.rs" 33 14 33 39] Produces0.produces a (Seq.empty ) a }
    
end
module C06MapPrecond_Impl0_ProducesRefl
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  let rec ghost function produces_refl [#"../06_map_precond.rs" 34 4 34 29] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 31 4 31 10] ()
  axiom produces_refl_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 32 15 32 28] Invariant0.invariant' a) -> ([#"../06_map_precond.rs" 33 14 33 39] Produces0.produces a (Seq.empty ) a)
end
module C06MapPrecond_Impl0_ProducesRefl_Impl
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with type self = i
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with type self = i, type Item0.item = Item0.item
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl0_Completed as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Completed0.completed = Completed1.completed
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant1 with type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces1.produces, val Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl0_Produces as Produces0 with type i = i, type b = b, type f = f, type Item0.item = Item0.item,
    val Produces0.produces = Produces1.produces,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Completed0.completed = Completed0.completed,
    val Invariant0.invariant' = Invariant1.invariant', val HasPrecond0.has_precond = HasPrecond0.has_precond,
    val Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    val Preservation0.preservation = Preservation0.preservation, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces1.produces, val HasPrecond0.has_precond = HasPrecond0.has_precond
  let rec ghost function produces_refl (a : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 32 15 32 28] Invariant0.invariant' a}
    ensures { [#"../06_map_precond.rs" 33 14 33 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 31 4 31 10] ()
end
module C06MapPrecond_Impl0_ProducesTrans_Stub
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  val ghost function produces_trans (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
end
module C06MapPrecond_Impl0_ProducesTrans_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  val ghost function produces_trans (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 37 15 37 28] Invariant0.invariant' a}
    requires {[#"../06_map_precond.rs" 38 15 38 28] Invariant0.invariant' b}
    requires {[#"../06_map_precond.rs" 39 15 39 28] Invariant0.invariant' c}
    requires {[#"../06_map_precond.rs" 40 15 40 32] Produces0.produces a ab b}
    requires {[#"../06_map_precond.rs" 41 15 41 32] Produces0.produces b bc c}
    ensures { [#"../06_map_precond.rs" 42 14 42 42] Produces0.produces a (Seq.(++) ab bc) c }
    
end
module C06MapPrecond_Impl0_ProducesTrans
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  let rec ghost function produces_trans [#"../06_map_precond.rs" 43 4 43 90] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 36 4 36 10] ()
  axiom produces_trans_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f, ab : Seq.seq b, b : C06MapPrecond_Map_Type.t_map i Item0.item f, bc : Seq.seq b, c : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 37 15 37 28] Invariant0.invariant' a) -> ([#"../06_map_precond.rs" 38 15 38 28] Invariant0.invariant' b) -> ([#"../06_map_precond.rs" 39 15 39 28] Invariant0.invariant' c) -> ([#"../06_map_precond.rs" 40 15 40 32] Produces0.produces a ab b) -> ([#"../06_map_precond.rs" 41 15 41 32] Produces0.produces b bc c) -> ([#"../06_map_precond.rs" 42 14 42 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06MapPrecond_Impl0_ProducesTrans_Impl
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with type self = i
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with type self = i, type Item0.item = Item0.item
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl0_Completed as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Completed0.completed = Completed1.completed
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant1 with type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces1.produces, val Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl0_Produces as Produces0 with type i = i, type b = b, type f = f, type Item0.item = Item0.item,
    val Produces0.produces = Produces1.produces,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Completed0.completed = Completed0.completed,
    val Invariant0.invariant' = Invariant1.invariant', val HasPrecond0.has_precond = HasPrecond0.has_precond,
    val Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    val Preservation0.preservation = Preservation0.preservation, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces1.produces, val HasPrecond0.has_precond = HasPrecond0.has_precond
  let rec ghost function produces_trans (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 37 15 37 28] Invariant0.invariant' a}
    requires {[#"../06_map_precond.rs" 38 15 38 28] Invariant0.invariant' b}
    requires {[#"../06_map_precond.rs" 39 15 39 28] Invariant0.invariant' c}
    requires {[#"../06_map_precond.rs" 40 15 40 32] Produces0.produces a ab b}
    requires {[#"../06_map_precond.rs" 41 15 41 32] Produces0.produces b bc c}
    ensures { [#"../06_map_precond.rs" 42 14 42 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 36 4 36 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C06MapPrecond_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Completed_Stub as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C06MapPrecond_Common_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module Core_Ops_Function_FnMut_CallMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Stub as PostconditionMut0 with type self = self,
    type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Stub as Precondition0 with type args = args, type f = self
  val call_mut [@cfg:stackify] (self : borrowed self) (args : args) : Output0.output
    requires {Precondition0.precondition ( * self) args}
    ensures { PostconditionMut0.postcondition_mut self args result }
    
end
module Core_Ops_Function_FnMut_CallMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
    type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = args, type f = self
  val call_mut [@cfg:stackify] (self : borrowed self) (args : args) : Output0.output
    requires {Precondition0.precondition ( * self) args}
    ensures { PostconditionMut0.postcondition_mut self args result }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module C06MapPrecond_Impl1_InnerProducesAg_Stub
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension_Stub as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  val ghost function inner_produces_ag (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (s : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
end
module C06MapPrecond_Impl1_InnerProducesAg_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension_Stub as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  val ghost function inner_produces_ag (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (s : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 121 15 121 31] Produces0.produces a s b}
    ensures { [#"../06_map_precond.rs" 122 14 122 34] InnerExtension0.inner_extension a b }
    
end
module C06MapPrecond_Impl1_InnerProducesAg
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension_Stub as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  let rec ghost function inner_produces_ag [#"../06_map_precond.rs" 123 4 123 53] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (s : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 120 4 120 12] ()
  axiom inner_produces_ag_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f, s : Seq.seq b, b : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 121 15 121 31] Produces0.produces a s b) -> ([#"../06_map_precond.rs" 122 14 122 34] InnerExtension0.inner_extension a b)
end
module C06MapPrecond_Impl1_InnerProducesAg_Impl
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with type self = i
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Completed as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Completed0.completed = Completed1.completed
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with type self = i, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant1 with type self = i
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces1.produces, val Precondition0.precondition = Precondition0.precondition
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone C06MapPrecond_Impl0_Produces as Produces0 with type i = i, type b = b, type f = f, type Item0.item = Item0.item,
    val Produces0.produces = Produces1.produces,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Completed0.completed = Completed0.completed,
    val Invariant0.invariant' = Invariant1.invariant', val HasPrecond0.has_precond = HasPrecond0.has_precond,
    val Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    val Preservation0.preservation = Preservation0.preservation, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces1.produces, val HasPrecond0.has_precond = HasPrecond0.has_precond
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans1 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl1 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans0 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl0 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  let rec ghost function inner_produces_ag (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (s : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 121 15 121 31] Produces0.produces a s b}
    ensures { [#"../06_map_precond.rs" 122 14 122 34] InnerExtension0.inner_extension a b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 120 4 120 12] ()
end
module C06MapPrecond_Impl1_InnerExtTrans_Stub
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension_Stub as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = i
  val ghost function inner_ext_trans (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
end
module C06MapPrecond_Impl1_InnerExtTrans_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension_Stub as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = i
  val ghost function inner_ext_trans (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 126 4 126 35] Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter a)}
    requires {[#"../06_map_precond.rs" 127 4 127 35] Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter b)}
    requires {[#"../06_map_precond.rs" 128 4 128 35] Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter c)}
    requires {[#"../06_map_precond.rs" 129 15 129 35] InnerExtension0.inner_extension a b}
    requires {[#"../06_map_precond.rs" 130 15 130 35] InnerExtension0.inner_extension b c}
    ensures { [#"../06_map_precond.rs" 131 14 131 34] InnerExtension0.inner_extension a c }
    
end
module C06MapPrecond_Impl1_InnerExtTrans
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension_Stub as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = i
  let rec ghost function inner_ext_trans [#"../06_map_precond.rs" 132 4 132 49] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 125 4 125 12] ()
  axiom inner_ext_trans_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f, b : C06MapPrecond_Map_Type.t_map i Item0.item f, c : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 126 4 126 35] Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter a)) -> ([#"../06_map_precond.rs" 127 4 127 35] Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter b)) -> ([#"../06_map_precond.rs" 128 4 128 35] Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter c)) -> ([#"../06_map_precond.rs" 129 15 129 35] InnerExtension0.inner_extension a b) -> ([#"../06_map_precond.rs" 130 15 130 35] InnerExtension0.inner_extension b c) -> ([#"../06_map_precond.rs" 131 14 131 34] InnerExtension0.inner_extension a c)
end
module C06MapPrecond_Impl1_InnerExtTrans_Impl
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = i, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Produces0.produces = Produces0.produces
  let rec ghost function inner_ext_trans (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 126 4 126 35] Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter a)}
    requires {[#"../06_map_precond.rs" 127 4 127 35] Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter b)}
    requires {[#"../06_map_precond.rs" 128 4 128 35] Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter c)}
    requires {[#"../06_map_precond.rs" 129 15 129 35] InnerExtension0.inner_extension a b}
    requires {[#"../06_map_precond.rs" 130 15 130 35] InnerExtension0.inner_extension b c}
    ensures { [#"../06_map_precond.rs" 131 14 131 34] InnerExtension0.inner_extension a c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 125 4 125 12] ()
end
module C06MapPrecond_Impl0_Next_Interface
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Completed_Stub as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  val next [@cfg:stackify] (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f)) : Core_Option_Option_Type.t_option b
    requires {[#"../06_map_precond.rs" 80 4 80 40] Invariant0.invariant' ( * self)}
    ensures { [#"../06_map_precond.rs" 76 14 79 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../06_map_precond.rs" 80 4 80 40] Invariant0.invariant' ( ^ self) }
    
end
module C06MapPrecond_Impl0_Next
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with type self = i, type Item0.item = Item0.item
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Produces0.produces = Produces1.produces
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant1 with type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with type self = i
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces1.produces, val Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl0_Produces as Produces0 with type i = i, type b = b, type f = f, type Item0.item = Item0.item,
    val Produces0.produces = Produces1.produces,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl0_Completed as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Completed0.completed = Completed1.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Completed0.completed = Completed0.completed,
    val Invariant0.invariant' = Invariant1.invariant', val HasPrecond0.has_precond = HasPrecond0.has_precond,
    val Preservation0.preservation = Preservation0.preservation
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    val Preservation0.preservation = Preservation0.preservation, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces1.produces, val HasPrecond0.has_precond = HasPrecond0.has_precond
  use mach.int.Int
  use prelude.IntSize
  use seq.FreeMonoid
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost i
  clone Core_Ops_Function_FnMut_CallMut_Interface as CallMut0 with type self = f,
    type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    val Precondition0.precondition = Precondition0.precondition,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut, type Output0.output = b
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Item0.item
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = C06MapPrecond_Map_Type.t_map i Item0.item f
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)
  clone C06MapPrecond_Common_Iterator_Next_Interface as Next0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', type Item0.item = Item0.item,
    val Completed0.completed = Completed1.completed, val Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl1_InnerExtTrans as InnerExtTrans0 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant1.invariant',
    val InnerExtension0.inner_extension = InnerExtension0.inner_extension, type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Impl1_InnerProducesAg as InnerProducesAg0 with type i = i, type b = b, type f = f,
    val Produces0.produces = Produces0.produces, val InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    type Item0.item = Item0.item, axiom .
  let rec cfg next [@cfg:stackify] [#"../06_map_precond.rs" 81 4 81 44] (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f)) : Core_Option_Option_Type.t_option b
    requires {[#"../06_map_precond.rs" 80 4 80 40] Invariant0.invariant' ( * self)}
    ensures { [#"../06_map_precond.rs" 76 14 79 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../06_map_precond.rs" 80 4 80 40] Invariant0.invariant' ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option b;
  var self_1 : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f);
  var _5 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost ();
  var _8 : ();
  var produced_9 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
  var _12 : ();
  var _13 : Core_Option_Option_Type.t_option Item0.item;
  var _14 : borrowed i;
  var _15 : isize;
  var v_16 : Item0.item;
  var _17 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
  var _19 : ();
  var _20 : b;
  var _21 : borrowed f;
  var _22 : (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item));
  var _23 : Item0.item;
  var _24 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
  var _25 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost i;
  var _27 : ();
  var _28 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
  var _31 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _8 <- ();
    _5 <- ([#"../06_map_precond.rs" 82 16 82 132] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (let _ = FreeMonoid.left_neutral  in let _ = () in let _ = () in ()));
    goto BB1
  }
  BB1 {
    _12 <- ();
    produced_9 <- ([#"../06_map_precond.rs" 83 23 83 48] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced ( * self_1))));
    goto BB2
  }
  BB2 {
    _14 <- borrow_mut (C06MapPrecond_Map_Type.map_iter ( * self_1));
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c d =  * self_1 in C06MapPrecond_Map_Type.C_Map ( ^ _14) b c d) };
    _13 <- ([#"../06_map_precond.rs" 84 14 84 30] Next0.next _14);
    goto BB3
  }
  BB3 {
    switch (_13)
      | Core_Option_Option_Type.C_None -> goto BB4
      | Core_Option_Option_Type.C_Some _ -> goto BB6
      end
  }
  BB4 {
    assume { Resolve0.resolve produced_9 };
    _27 <- ();
    _25 <- ([#"../06_map_precond.rs" 90 33 90 53] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (C06MapPrecond_Map_Type.map_iter ( * self_1)));
    goto BB12
  }
  BB5 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve0.resolve produced_9 };
    assume { Resolve2.resolve _13 };
    absurd
  }
  BB6 {
    assume { Resolve3.resolve v_16 };
    v_16 <- Core_Option_Option_Type.some_0 _13;
    _13 <- (let Core_Option_Option_Type.C_Some a = _13 in Core_Option_Option_Type.C_Some (any Item0.item));
    _19 <- ();
    _17 <- ([#"../06_map_precond.rs" 86 32 86 59] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.snoc (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_9) v_16));
    goto BB7
  }
  BB7 {
    assume { Resolve0.resolve (C06MapPrecond_Map_Type.map_produced ( * self_1)) };
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c d =  * self_1 in C06MapPrecond_Map_Type.C_Map a b _17 d) };
    _17 <- any CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
    _21 <- borrow_mut (C06MapPrecond_Map_Type.map_func ( * self_1));
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c d =  * self_1 in C06MapPrecond_Map_Type.C_Map a ( ^ _21) c d) };
    assume { Resolve1.resolve self_1 };
    assume { Resolve3.resolve _23 };
    _23 <- v_16;
    v_16 <- any Item0.item;
    assume { Resolve0.resolve _24 };
    _24 <- produced_9;
    produced_9 <- any CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
    _22 <- (_23, _24);
    _20 <- ([#"../06_map_precond.rs" 87 21 87 45] CallMut0.call_mut _21 _22);
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    _0 <- Core_Option_Option_Type.C_Some _20;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB16
  }
  BB12 {
    assume { Resolve4.resolve (C06MapPrecond_Map_Type.map_init_iter ( * self_1)) };
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c d =  * self_1 in C06MapPrecond_Map_Type.C_Map a b c _25) };
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    _31 <- ();
    _28 <- ([#"../06_map_precond.rs" 91 32 91 53] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ));
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve (C06MapPrecond_Map_Type.map_produced ( * self_1)) };
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c d =  * self_1 in C06MapPrecond_Map_Type.C_Map a b _28 d) };
    _28 <- any CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
    assume { Resolve1.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    assume { Resolve2.resolve _13 };
    return _0
  }
  
end
module C06MapPrecond_Impl1_NewLogic_Stub
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost function new_logic (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map i Item0.item f
end
module C06MapPrecond_Impl1_NewLogic_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  val ghost function new_logic (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map i Item0.item f
end
module C06MapPrecond_Impl1_NewLogic
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use seq.Seq
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  let rec ghost function new_logic [#"../06_map_precond.rs" 137 4 137 42] (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map i Item0.item f
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 138 8 138 79] C06MapPrecond_Map_Type.C_Map iter func (CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty )) (CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter)
end
module C06MapPrecond_Map_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Invariant_Stub as Invariant1 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Produces_Stub as Produces1 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_HasPrecond_Stub as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_InnerExtension_Stub as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_NewLogic_Stub as NewLogic0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_Reinitialize_Stub as Reinitialize0 with type i = i, type b = b, type f = f
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Stub as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = i, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = i
  val map [@cfg:stackify] (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map i Item0.item f
    requires {[#"../06_map_precond.rs" 169 0 169 142] forall i2 : i . forall e : Item0.item . Invariant0.invariant' i2 -> Produces0.produces iter (Seq.singleton e) i2 -> Precondition0.precondition func (e, CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ))}
    requires {[#"../06_map_precond.rs" 170 11 170 41] Reinitialize0.reinitialize ()}
    requires {[#"../06_map_precond.rs" 171 11 171 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 172 0 179 2] forall initial : C06MapPrecond_Map_Type.t_map i Item0.item f . Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter initial) -> InnerExtension0.inner_extension (NewLogic0.new_logic iter func) initial -> HasPrecond0.has_precond initial (C06MapPrecond_Map_Type.map_iter initial) (Seq.empty ) -> (forall b : b . forall n : C06MapPrecond_Map_Type.t_map i Item0.item f . Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter n) -> Produces1.produces initial (Seq.singleton b) n -> HasPrecond0.has_precond n iter (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced n)))}
    ensures { [#"../06_map_precond.rs" 180 10 180 28] Invariant1.invariant' result }
    ensures { [#"../06_map_precond.rs" 181 10 181 91] result = C06MapPrecond_Map_Type.C_Map iter func (CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty )) (CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter) }
    
end
module C06MapPrecond_Map
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with type self = i
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = i, type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Produces as Produces1 with type i = i, type b = b, type f = f, type Item0.item = Item0.item,
    val Produces0.produces = Produces0.produces,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = i
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, val Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl0_Completed as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Completed0.completed = Completed1.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Completed0.completed = Completed0.completed,
    val Invariant0.invariant' = Invariant0.invariant', val HasPrecond0.has_precond = HasPrecond0.has_precond,
    val Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Invariant as Invariant1 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, val Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    val Preservation0.preservation = Preservation0.preservation, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, val HasPrecond0.has_precond = HasPrecond0.has_precond
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans1 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl1 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Impl1_NewLogic as NewLogic0 with type i = i, type b = b, type f = f, type Item0.item = Item0.item
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = f
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = i
  let rec cfg map [@cfg:stackify] [#"../06_map_precond.rs" 182 0 185 23] (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map i Item0.item f
    requires {[#"../06_map_precond.rs" 169 0 169 142] forall i2 : i . forall e : Item0.item . Invariant0.invariant' i2 -> Produces0.produces iter (Seq.singleton e) i2 -> Precondition0.precondition func (e, CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ))}
    requires {[#"../06_map_precond.rs" 170 11 170 41] Reinitialize0.reinitialize ()}
    requires {[#"../06_map_precond.rs" 171 11 171 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 172 0 179 2] forall initial : C06MapPrecond_Map_Type.t_map i Item0.item f . Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter initial) -> InnerExtension0.inner_extension (NewLogic0.new_logic iter func) initial -> HasPrecond0.has_precond initial (C06MapPrecond_Map_Type.map_iter initial) (Seq.empty ) -> (forall b : b . forall n : C06MapPrecond_Map_Type.t_map i Item0.item f . Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter n) -> Produces1.produces initial (Seq.singleton b) n -> HasPrecond0.has_precond n iter (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced n)))}
    ensures { [#"../06_map_precond.rs" 180 10 180 28] Invariant1.invariant' result }
    ensures { [#"../06_map_precond.rs" 181 10 181 91] result = C06MapPrecond_Map_Type.C_Map iter func (CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty )) (CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06MapPrecond_Map_Type.t_map i Item0.item f;
  var iter_1 : i;
  var func_2 : f;
  var _9 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost i;
  var _11 : ();
  var _12 : i;
  var _13 : f;
  var _14 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
  var _17 : ();
  {
    iter_1 <- iter;
    func_2 <- func;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _11 <- ();
    _9 <- ([#"../06_map_precond.rs" 186 21 186 34] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter_1);
    goto BB5
  }
  BB5 {
    assume { Resolve0.resolve _12 };
    _12 <- iter_1;
    iter_1 <- any i;
    assume { Resolve1.resolve _13 };
    _13 <- func_2;
    func_2 <- any f;
    _17 <- ();
    _14 <- ([#"../06_map_precond.rs" 186 58 186 77] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ));
    goto BB6
  }
  BB6 {
    _0 <- C06MapPrecond_Map_Type.C_Map _12 _13 _14 _9;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module C06MapPrecond_Identity_Closure0_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  type c06mapprecond_identity_closure0  =
    | C06MapPrecond_Identity_Closure0
    
  predicate precondition [@cfg:stackify] (_1' : c06mapprecond_identity_closure0) (args : (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)))
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _) = args in true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c06mapprecond_identity_closure0) (args : (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item))) (result : Item0.item)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _) = args in true
  predicate postcondition_once [@cfg:stackify] (_1' : c06mapprecond_identity_closure0) (args : (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item))) (result : Item0.item)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _) = args in true
  predicate resolve (_1' : c06mapprecond_identity_closure0) =
    true
  val c06MapPrecond_Identity_Closure0 [@cfg:stackify] (_1' : borrowed c06mapprecond_identity_closure0) (x : Item0.item) (_3' : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)) : Item0.item
    ensures { true }
    
end
module C06MapPrecond_Identity_Closure0
  type i
  type c06mapprecond_identity_closure0  =
    | C06MapPrecond_Identity_Closure0
    
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = i, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = i
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  predicate precondition [@cfg:stackify] (_1' : c06mapprecond_identity_closure0) (args : (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)))
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _) = args in true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c06mapprecond_identity_closure0) (args : (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item))) (result : Item0.item)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _) = args in true
  predicate postcondition_once [@cfg:stackify] (_1' : c06mapprecond_identity_closure0) (args : (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item))) (result : Item0.item)
    
   =
    [#"../06_map_precond.rs" 1 0 1 0] let (x, _) = args in true
  predicate resolve (_1' : c06mapprecond_identity_closure0) =
    true
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = c06mapprecond_identity_closure0
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Item0.item
  let rec cfg c06MapPrecond_Identity_Closure0 [@cfg:stackify] [#"../06_map_precond.rs" 191 14 191 20] (_1' : borrowed c06mapprecond_identity_closure0) (x : Item0.item) (_3' : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)) : Item0.item
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Item0.item;
  var _1 : borrowed c06mapprecond_identity_closure0;
  var x_2 : Item0.item;
  var _3 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
  {
    _1 <- _1';
    x_2 <- x;
    _3 <- _3';
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- x_2;
    x_2 <- any Item0.item;
    assume { Resolve1.resolve _1 };
    assume { Resolve2.resolve _3 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C06MapPrecond_Identity_Interface
  type i
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = i
  val identity [@cfg:stackify] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 189 11 189 27] Invariant0.invariant' iter}
    
end
module C06MapPrecond_Identity
  type i
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = i, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  use seq.Seq
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone C06MapPrecond_Identity_Closure0_Interface as Closure00 with type i = i, type Item0.item = Item0.item, axiom .
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with type self = i
  clone C06MapPrecond_Impl0_Produces as Produces1 with type i = i, type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0,
    val PostconditionMut0.postcondition_mut = Closure00.postcondition_mut, type Item0.item = Item0.item,
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0, val Precondition0.precondition = Closure00.precondition,
    type Item0.item = Item0.item, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0, type Item0.item = Item0.item,
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with type i = i, type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0, type Item0.item = Item0.item,
    val InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl0_Completed as Completed0 with type i = i, type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0, type Item0.item = Item0.item,
    val Completed0.completed = Completed1.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with type i = i, type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0, type Item0.item = Item0.item,
    val Completed0.completed = Completed0.completed, val Invariant0.invariant' = Invariant0.invariant',
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Invariant as Invariant1 with type i = i, type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0, type Item0.item = Item0.item,
    val Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    val Preservation0.preservation = Preservation0.preservation, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, val HasPrecond0.has_precond = HasPrecond0.has_precond
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans1 with type i = i, type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0, type Item0.item = Item0.item,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces, axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl1 with type i = i, type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0, type Item0.item = Item0.item,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces, axiom .
  clone C06MapPrecond_Impl1_NewLogic as NewLogic0 with type i = i, type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0, type Item0.item = Item0.item
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = C06MapPrecond_Map_Type.t_map i Item0.item Closure00.c06mapprecond_identity_closure0
  clone C06MapPrecond_Map_Interface as Map1 with type i = i, type b = Item0.item,
    type f = Closure00.c06mapprecond_identity_closure0, val Precondition0.precondition = Closure00.precondition,
    type Item0.item = Item0.item, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, val Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    val NewLogic0.new_logic = NewLogic0.new_logic,
    val InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Produces1.produces = Produces1.produces,
    val Invariant1.invariant' = Invariant1.invariant'
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = i
  let rec cfg identity [@cfg:stackify] [#"../06_map_precond.rs" 190 0 190 37] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 189 11 189 27] Invariant0.invariant' iter}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter_1 : i;
  var _3 : C06MapPrecond_Map_Type.t_map i Item0.item Closure00.c06mapprecond_identity_closure0;
  var _4 : i;
  var _5 : Closure00.c06mapprecond_identity_closure0;
  {
    iter_1 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _4 };
    _4 <- iter_1;
    iter_1 <- any i;
    _5 <- Closure00.C06MapPrecond_Identity_Closure0;
    _3 <- ([#"../06_map_precond.rs" 191 4 191 23] Map1.map _4 _5);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve _3 };
    _0 <- ();
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module C06MapPrecond_Increment_Closure4_Interface
  type i
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  type c06mapprecond_increment_closure4  =
    | C06MapPrecond_Increment_Closure4
    
  predicate precondition [@cfg:stackify] (_1' : c06mapprecond_increment_closure4) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 205 19 205 27] let (x, _) = args in UInt32.to_int x <= 15
  predicate postcondition [@cfg:stackify] (_1' : c06mapprecond_increment_closure4) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 206 18 206 33] let (x, _) = args in UInt32.to_int result = UInt32.to_int x + 1
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c06mapprecond_increment_closure4) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 206 18 206 33] let (x, _) = args in UInt32.to_int result = UInt32.to_int x + 1
  predicate postcondition_once [@cfg:stackify] (_1' : c06mapprecond_increment_closure4) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 206 18 206 33] let (x, _) = args in UInt32.to_int result = UInt32.to_int x + 1
  predicate resolve (_1' : c06mapprecond_increment_closure4) =
    true
  val c06MapPrecond_Increment_Closure4 [@cfg:stackify] (_1' : c06mapprecond_increment_closure4) (x : uint32) (_3' : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 205 19 205 27] UInt32.to_int x <= 15}
    ensures { [#"../06_map_precond.rs" 206 18 206 33] UInt32.to_int result = UInt32.to_int x + 1 }
    
end
module C06MapPrecond_Increment_Closure4
  type i
  type c06mapprecond_increment_closure4  =
    | C06MapPrecond_Increment_Closure4
    
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  predicate precondition [@cfg:stackify] (_1' : c06mapprecond_increment_closure4) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 205 19 205 27] let (x, _) = args in UInt32.to_int x <= 15
  predicate postcondition [@cfg:stackify] (_1' : c06mapprecond_increment_closure4) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 206 18 206 33] let (x, _) = args in UInt32.to_int result = UInt32.to_int x + 1
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c06mapprecond_increment_closure4) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 206 18 206 33] let (x, _) = args in UInt32.to_int result = UInt32.to_int x + 1
  predicate postcondition_once [@cfg:stackify] (_1' : c06mapprecond_increment_closure4) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 206 18 206 33] let (x, _) = args in UInt32.to_int result = UInt32.to_int x + 1
  predicate resolve (_1' : c06mapprecond_increment_closure4) =
    true
  let rec cfg c06MapPrecond_Increment_Closure4 [@cfg:stackify] [#"../06_map_precond.rs" 207 8 207 19] (_1' : c06mapprecond_increment_closure4) (x : uint32) (_3' : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 205 19 205 27] UInt32.to_int x <= 15}
    ensures { [#"../06_map_precond.rs" 206 18 206 33] UInt32.to_int result = UInt32.to_int x + 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : c06mapprecond_increment_closure4;
  var x_2 : uint32;
  var _3 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32);
  var _4 : uint32;
  {
    _1 <- _1';
    x_2 <- x;
    _3 <- _3';
    goto BB0
  }
  BB0 {
    _4 <- x_2;
    _0 <- ([#"../06_map_precond.rs" 207 20 207 25] _4 + (1 : uint32));
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Stub
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  let rec ghost predicate resolve (self : t) = [@vc:do_not_keep_trace] [@vc:sp]
    true
end
module C06MapPrecond_Increment_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = i, type Item0.item = uint32
  clone C06MapPrecond_Common_Iterator_Completed_Stub as Completed0 with type self = i
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = i
  val increment [@cfg:stackify] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 194 11 194 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 195 0 195 187] forall done_ : borrowed i . Completed0.completed done_ -> Invariant0.invariant' ( ^ done_) -> (forall steps : Seq.seq uint32 . forall next : i . Produces0.produces ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 196 0 198 2] forall fin : i . forall prod : Seq.seq uint32 . Invariant0.invariant' fin -> Produces0.produces iter prod fin -> (forall x : int . 0 <= x /\ x < Seq.length prod -> Seq.get prod x <= (10 : uint32))}
    requires {[#"../06_map_precond.rs" 199 0 201 2] forall fin : i . forall prod : Seq.seq uint32 . Invariant0.invariant' fin -> Produces0.produces iter prod fin -> (forall x : int . 0 <= x /\ x < Seq.length prod -> Seq.get prod x <= (10 : uint32))}
    
end
module C06MapPrecond_Increment
  type i
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = i, type Item0.item = uint32
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = uint32, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = uint32, axiom .
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone C06MapPrecond_Increment_Closure4_Interface as Closure40 with type i = i, axiom .
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Completed as Completed1 with type i = i, type b = uint32,
    type f = Closure40.c06mapprecond_increment_closure4, type Item0.item = uint32,
    val Completed0.completed = Completed0.completed
  clone C06MapPrecond_Impl0_Produces as Produces1 with type i = i, type b = uint32,
    type f = Closure40.c06mapprecond_increment_closure4,
    val PostconditionMut0.postcondition_mut = Closure40.postcondition_mut, type Item0.item = uint32,
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = uint32,
    type f = Closure40.c06mapprecond_increment_closure4, val Precondition0.precondition = Closure40.precondition,
    type Item0.item = uint32, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = uint32,
    type f = Closure40.c06mapprecond_increment_closure4, type Item0.item = uint32,
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with type i = i, type b = uint32,
    type f = Closure40.c06mapprecond_increment_closure4, type Item0.item = uint32,
    val InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with type i = i, type b = uint32,
    type f = Closure40.c06mapprecond_increment_closure4, type Item0.item = uint32,
    val Completed0.completed = Completed1.completed, val Invariant0.invariant' = Invariant0.invariant',
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Invariant as Invariant1 with type i = i, type b = uint32,
    type f = Closure40.c06mapprecond_increment_closure4, type Item0.item = uint32,
    val Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    val Preservation0.preservation = Preservation0.preservation, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, val HasPrecond0.has_precond = HasPrecond0.has_precond
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans1 with type i = i, type b = uint32,
    type f = Closure40.c06mapprecond_increment_closure4, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces1.produces, type Item0.item = uint32, axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl1 with type i = i, type b = uint32,
    type f = Closure40.c06mapprecond_increment_closure4, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces1.produces, type Item0.item = uint32, axiom .
  clone C06MapPrecond_Impl1_NewLogic as NewLogic0 with type i = i, type b = uint32,
    type f = Closure40.c06mapprecond_increment_closure4, type Item0.item = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = C06MapPrecond_Map_Type.t_map i uint32 Closure40.c06mapprecond_increment_closure4
  clone C06MapPrecond_Map_Interface as Map1 with type i = i, type b = uint32,
    type f = Closure40.c06mapprecond_increment_closure4, val Precondition0.precondition = Closure40.precondition,
    type Item0.item = uint32, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, val Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    val NewLogic0.new_logic = NewLogic0.new_logic,
    val InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Produces1.produces = Produces1.produces,
    val Invariant1.invariant' = Invariant1.invariant'
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = i
  let rec cfg increment [@cfg:stackify] [#"../06_map_precond.rs" 202 0 202 50] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 194 11 194 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 195 0 195 187] forall done_ : borrowed i . Completed0.completed done_ -> Invariant0.invariant' ( ^ done_) -> (forall steps : Seq.seq uint32 . forall next : i . Produces0.produces ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 196 0 198 2] forall fin : i . forall prod : Seq.seq uint32 . Invariant0.invariant' fin -> Produces0.produces iter prod fin -> (forall x : int . 0 <= x /\ x < Seq.length prod -> Seq.get prod x <= (10 : uint32))}
    requires {[#"../06_map_precond.rs" 199 0 201 2] forall fin : i . forall prod : Seq.seq uint32 . Invariant0.invariant' fin -> Produces0.produces iter prod fin -> (forall x : int . 0 <= x /\ x < Seq.length prod -> Seq.get prod x <= (10 : uint32))}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter_1 : i;
  var i_6 : C06MapPrecond_Map_Type.t_map i uint32 Closure40.c06mapprecond_increment_closure4;
  var _7 : i;
  var _8 : Closure40.c06mapprecond_increment_closure4;
  var closure_9 : Closure40.c06mapprecond_increment_closure4;
  var closure_10 : Closure40.c06mapprecond_increment_closure4;
  var _13 : ();
  {
    iter_1 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _7 };
    _7 <- iter_1;
    iter_1 <- any i;
    closure_10 <- Closure40.C06MapPrecond_Increment_Closure4;
    assume { Closure40.resolve closure_9 };
    closure_9 <- closure_10;
    assume { Closure40.resolve closure_10 };
    assume { Closure40.resolve _8 };
    _8 <- closure_9;
    assume { Closure40.resolve closure_9 };
    i_6 <- ([#"../06_map_precond.rs" 203 12 208 5] Map1.map _7 _8);
    goto BB4
  }
  BB4 {
    assert { [#"../06_map_precond.rs" 210 4 213 5] forall fin : C06MapPrecond_Map_Type.t_map i uint32 Closure40.c06mapprecond_increment_closure4 . forall prod : Seq.seq uint32 . Invariant1.invariant' fin -> Produces1.produces i_6 prod fin -> (forall x : int . 0 <= x /\ x < Seq.length prod -> Seq.get prod x <= (11 : uint32)) };
    goto BB5
  }
  BB5 {
    _13 <- ();
    _0 <- ();
    goto BB6
  }
  BB6 {
    assume { Resolve1.resolve i_6 };
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module C06MapPrecond_Counter_Closure3_Interface
  type i
  use prelude.Borrow
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt32
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  type c06mapprecond_counter_closure3  =
    | C06MapPrecond_Counter_Closure3 (borrowed usize)
    
  let function c06mapprecond_counter_closure3_0 (self : c06mapprecond_counter_closure3) : borrowed usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C06MapPrecond_Counter_Closure3 a -> a
      end
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub as Resolve0 with type t = usize
  predicate precondition [@cfg:stackify] (_1' : c06mapprecond_counter_closure3) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 223 19 223 60] let (x, prod) = args in UInt64.to_int ( * c06mapprecond_counter_closure3_0 _1') = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 prod) /\  * c06mapprecond_counter_closure3_0 _1' < (18446744073709551615 : usize)
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c06mapprecond_counter_closure3) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32))) (result : uint32)
    
   =
    ([#"../06_map_precond.rs" 224 18 224 68] let (x, prod) = args in UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( ^ _1')) = UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( * _1')) + 1 /\ UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( ^ _1')) = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 prod) + 1) &&  ^ c06mapprecond_counter_closure3_0 ( ^ _1') =  ^ c06mapprecond_counter_closure3_0 ( * _1')
  predicate postcondition_once [@cfg:stackify] (_1' : c06mapprecond_counter_closure3) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 224 18 224 68] let (x, prod) = args in UInt64.to_int ( * c06mapprecond_counter_closure3_0 _1') = UInt64.to_int ( * c06mapprecond_counter_closure3_0 _1') + 1 /\ UInt64.to_int ( * c06mapprecond_counter_closure3_0 _1') = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 prod) + 1
  predicate resolve (_1' : c06mapprecond_counter_closure3) =
    Resolve0.resolve (c06mapprecond_counter_closure3_0 _1')
  val c06MapPrecond_Counter_Closure3 [@cfg:stackify] (_1' : borrowed c06mapprecond_counter_closure3) (x : uint32) (prod : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 223 19 223 60] UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( * _1')) = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 prod) /\  * c06mapprecond_counter_closure3_0 ( * _1') < (18446744073709551615 : usize)}
    ensures { [#"../06_map_precond.rs" 224 18 224 68] UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( ^ _1')) = UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( * _1')) + 1 /\ UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( ^ _1')) = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 prod) + 1 }
    ensures {  ^ c06mapprecond_counter_closure3_0 ( ^ _1') =  ^ c06mapprecond_counter_closure3_0 ( * _1') }
    
end
module C06MapPrecond_Counter_Closure3
  type i
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  type c06mapprecond_counter_closure3  =
    | C06MapPrecond_Counter_Closure3 (borrowed usize)
    
  let function c06mapprecond_counter_closure3_0 (self : c06mapprecond_counter_closure3) : borrowed usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C06MapPrecond_Counter_Closure3 a -> a
      end
  use mach.int.UInt32
  use seq.Seq
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = usize
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  predicate precondition [@cfg:stackify] (_1' : c06mapprecond_counter_closure3) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 223 19 223 60] let (x, prod) = args in UInt64.to_int ( * c06mapprecond_counter_closure3_0 _1') = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 prod) /\  * c06mapprecond_counter_closure3_0 _1' < (18446744073709551615 : usize)
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c06mapprecond_counter_closure3) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32))) (result : uint32)
    
   =
    ([#"../06_map_precond.rs" 224 18 224 68] let (x, prod) = args in UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( ^ _1')) = UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( * _1')) + 1 /\ UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( ^ _1')) = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 prod) + 1) &&  ^ c06mapprecond_counter_closure3_0 ( ^ _1') =  ^ c06mapprecond_counter_closure3_0 ( * _1')
  predicate postcondition_once [@cfg:stackify] (_1' : c06mapprecond_counter_closure3) (args : (uint32, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../06_map_precond.rs" 224 18 224 68] let (x, prod) = args in UInt64.to_int ( * c06mapprecond_counter_closure3_0 _1') = UInt64.to_int ( * c06mapprecond_counter_closure3_0 _1') + 1 /\ UInt64.to_int ( * c06mapprecond_counter_closure3_0 _1') = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 prod) + 1
  predicate resolve (_1' : c06mapprecond_counter_closure3) =
    Resolve0.resolve (c06mapprecond_counter_closure3_0 _1')
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = c06mapprecond_counter_closure3
  let rec cfg c06MapPrecond_Counter_Closure3 [@cfg:stackify] [#"../06_map_precond.rs" 225 8 225 32] (_1' : borrowed c06mapprecond_counter_closure3) (x : uint32) (prod : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 223 19 223 60] UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( * _1')) = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 prod) /\  * c06mapprecond_counter_closure3_0 ( * _1') < (18446744073709551615 : usize)}
    ensures { [#"../06_map_precond.rs" 224 18 224 68] UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( ^ _1')) = UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( * _1')) + 1 /\ UInt64.to_int ( * c06mapprecond_counter_closure3_0 ( ^ _1')) = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 prod) + 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : borrowed c06mapprecond_counter_closure3;
  var x_2 : uint32;
  var prod_3 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq uint32);
  {
    _1 <- _1';
    x_2 <- x;
    prod_3 <- prod;
    goto BB0
  }
  BB0 {
    _1 <- { _1 with current = (let C06MapPrecond_Counter_Closure3 a =  * _1 in C06MapPrecond_Counter_Closure3 ({ (c06mapprecond_counter_closure3_0 ( * _1)) with current = ([#"../06_map_precond.rs" 226 12 226 20]  * c06mapprecond_counter_closure3_0 ( * _1) + (1 : usize)) })) };
    assume { Resolve1.resolve _1 };
    _0 <- x_2;
    return _0
  }
  
end
module C06MapPrecond_Counter_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  use prelude.UIntSize
  use mach.int.UInt64
  clone C06MapPrecond_Common_Iterator_Produces_Stub as Produces0 with type self = i, type Item0.item = uint32
  clone C06MapPrecond_Common_Iterator_Completed_Stub as Completed0 with type self = i
  clone C06MapPrecond_Common_Iterator_Invariant_Stub as Invariant0 with type self = i
  val counter [@cfg:stackify] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 216 11 216 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 217 0 217 187] forall done_ : borrowed i . Completed0.completed done_ -> Invariant0.invariant' ( ^ done_) -> (forall steps : Seq.seq uint32 . forall next : i . Produces0.produces ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 218 0 218 112] forall fin : i . forall prod : Seq.seq uint32 . Invariant0.invariant' fin -> Produces0.produces iter prod fin -> Seq.length prod <= UInt64.to_int (18446744073709551615 : usize)}
    
end
module C06MapPrecond_Counter
  type i
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  use prelude.UIntSize
  use mach.int.UInt64
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = i, type Item0.item = uint32
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = uint32, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = uint32, axiom .
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed0 with type self = i
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = usize
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone C06MapPrecond_Counter_Closure3_Interface as Closure30 with type i = i, val Resolve0.resolve = Resolve0.resolve,
    axiom .
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces as Produces1 with type i = i, type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3,
    val PostconditionMut0.postcondition_mut = Closure30.postcondition_mut, type Item0.item = uint32,
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3, val Precondition0.precondition = Closure30.precondition,
    type Item0.item = uint32, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3, type Item0.item = uint32,
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with type i = i, type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3, type Item0.item = uint32,
    val InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl0_Completed as Completed1 with type i = i, type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3, type Item0.item = uint32,
    val Completed0.completed = Completed0.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with type i = i, type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3, type Item0.item = uint32,
    val Completed0.completed = Completed1.completed, val Invariant0.invariant' = Invariant0.invariant',
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Invariant as Invariant1 with type i = i, type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3, type Item0.item = uint32,
    val Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    val Preservation0.preservation = Preservation0.preservation, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, val HasPrecond0.has_precond = HasPrecond0.has_precond
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans1 with type i = i, type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces1.produces, type Item0.item = uint32, axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl1 with type i = i, type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces1.produces, type Item0.item = uint32, axiom .
  clone C06MapPrecond_Impl1_NewLogic as NewLogic0 with type i = i, type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3, type Item0.item = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = C06MapPrecond_Map_Type.t_map i uint32 Closure30.c06mapprecond_counter_closure3
  clone C06MapPrecond_Map_Interface as Map1 with type i = i, type b = uint32,
    type f = Closure30.c06mapprecond_counter_closure3, val Precondition0.precondition = Closure30.precondition,
    type Item0.item = uint32, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, val Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    val NewLogic0.new_logic = NewLogic0.new_logic,
    val InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Produces1.produces = Produces1.produces,
    val Invariant1.invariant' = Invariant1.invariant'
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = i
  let rec cfg counter [@cfg:stackify] [#"../06_map_precond.rs" 219 0 219 48] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 216 11 216 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 217 0 217 187] forall done_ : borrowed i . Completed0.completed done_ -> Invariant0.invariant' ( ^ done_) -> (forall steps : Seq.seq uint32 . forall next : i . Produces0.produces ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 218 0 218 112] forall fin : i . forall prod : Seq.seq uint32 . Invariant0.invariant' fin -> Produces0.produces iter prod fin -> Seq.length prod <= UInt64.to_int (18446744073709551615 : usize)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter_1 : i;
  var cnt_5 : usize;
  var _6 : C06MapPrecond_Map_Type.t_map i uint32 Closure30.c06mapprecond_counter_closure3;
  var _7 : i;
  var _8 : Closure30.c06mapprecond_counter_closure3;
  var closure_9 : Closure30.c06mapprecond_counter_closure3;
  var closure_10 : Closure30.c06mapprecond_counter_closure3;
  var _11 : borrowed usize;
  {
    iter_1 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    cnt_5 <- (0 : usize);
    assume { Resolve1.resolve _7 };
    _7 <- iter_1;
    iter_1 <- any i;
    _11 <- borrow_mut cnt_5;
    cnt_5 <-  ^ _11;
    closure_10 <- Closure30.C06MapPrecond_Counter_Closure3 _11;
    assume { Closure30.resolve closure_9 };
    closure_9 <- closure_10;
    closure_10 <- any Closure30.c06mapprecond_counter_closure3;
    assume { Closure30.resolve _8 };
    _8 <- closure_9;
    closure_9 <- any Closure30.c06mapprecond_counter_closure3;
    _6 <- ([#"../06_map_precond.rs" 221 4 229 5] Map1.map _7 _8);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve _6 };
    _0 <- ();
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06MapPrecond_Impl0_Item_Type
  type i
  type b
  type f
  type item  =
    b
end
module C06MapPrecond_Impl0
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item2 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (Item2.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item2.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces2 with type self = i, type Item0.item = Item2.item
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item2.item, val Produces0.produces = Produces2.produces
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant1 with type self = i
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item2.item, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces2.produces, val Precondition0.precondition = Precondition0.precondition
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = (Item2.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item2.item)),
    type f = f, type Output0.output = b
  clone C06MapPrecond_Impl0_Produces as Produces0 with type i = i, type b = b, type f = f, type Item0.item = Item2.item,
    val Produces0.produces = Produces2.produces,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_Preservation as Preservation0 with type i = i, type b = b, type f = f,
    type Item0.item = Item2.item, val InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    val HasPrecond0.has_precond = HasPrecond0.has_precond, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed2 with type self = i
  clone C06MapPrecond_Impl0_Completed as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item2.item, val Completed0.completed = Completed2.completed
  clone C06MapPrecond_Impl1_Reinitialize as Reinitialize0 with type i = i, type b = b, type f = f,
    type Item0.item = Item2.item, val Completed0.completed = Completed0.completed,
    val Invariant0.invariant' = Invariant1.invariant', val HasPrecond0.has_precond = HasPrecond0.has_precond,
    val Preservation0.preservation = Preservation0.preservation
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item2.item, val Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    val Preservation0.preservation = Preservation0.preservation, val Invariant0.invariant' = Invariant1.invariant',
    val Produces0.produces = Produces2.produces, val HasPrecond0.has_precond = HasPrecond0.has_precond
  clone C06MapPrecond_Impl0_Item_Type as Item0 with type i = i, type b = b, type f = f
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl0 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = Item2.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with type self = C06MapPrecond_Map_Type.t_map i Item2.item f,
    val produces_refl = ProducesRefl0.produces_refl, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed1 with type self = C06MapPrecond_Map_Type.t_map i Item2.item f,
    val completed = Completed0.completed
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with type self = C06MapPrecond_Map_Type.t_map i Item2.item f,
    val produces = Produces0.produces, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Item_Type as Item1 with type self = C06MapPrecond_Map_Type.t_map i Item2.item f,
    type item = Item0.item
  goal produces_refl_spec : forall a : C06MapPrecond_Map_Type.t_map i Item2.item f . (([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../06_map_precond.rs" 32 15 32 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../06_map_precond.rs" 33 14 33 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a))
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans0 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = Item2.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with type self = C06MapPrecond_Map_Type.t_map i Item2.item f,
    val produces_trans = ProducesTrans0.produces_trans, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, type Item0.item = Item0.item, axiom .
  goal produces_trans_spec : forall a : C06MapPrecond_Map_Type.t_map i Item2.item f, ab : Seq.seq b, b : C06MapPrecond_Map_Type.t_map i Item2.item f, bc : Seq.seq b, c : C06MapPrecond_Map_Type.t_map i Item2.item f . (([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) && ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) && ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) && ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) && ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../06_map_precond.rs" 41 15 41 32] Produces0.produces b bc c) && ([#"../06_map_precond.rs" 40 15 40 32] Produces0.produces a ab b) && ([#"../06_map_precond.rs" 39 15 39 28] Invariant0.invariant' c) && ([#"../06_map_precond.rs" 38 15 38 28] Invariant0.invariant' b) && ([#"../06_map_precond.rs" 37 15 37 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../06_map_precond.rs" 42 14 42 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c))
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06MapPrecond_Impl0_Next_Interface as Next0 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant0.invariant', val Completed0.completed = Completed0.completed,
    val Produces0.produces = Produces0.produces, type Item0.item = Item2.item
  clone C06MapPrecond_Common_Iterator_Next_Interface as Next1 with type self = C06MapPrecond_Map_Type.t_map i Item2.item f,
    val next = Next0.next, val Invariant0.invariant' = Invariant0.invariant', type Item0.item = Item0.item,
    val Completed0.completed = Completed0.completed, val Produces0.produces = Produces0.produces
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant2 with type self = C06MapPrecond_Map_Type.t_map i Item2.item f,
    val invariant' = Invariant0.invariant'
end
