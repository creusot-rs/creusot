
module C06MapPrecond_Map_Type
  type item0
  use seq.Seq
  use prelude.Ghost
  type t_map 'i 'b 'f 'proj0 =
    | C_Map 'i 'f (Ghost.ghost_ty (Seq.seq 'proj0))
    
  let function map_produced (self : t_map 'i 'b 'f 'proj0) : Ghost.ghost_ty (Seq.seq 'proj0)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Map _ _ a -> a
      end
  let function map_iter (self : t_map 'i 'b 'f 'proj0) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Map a _ _ -> a
      end
  let function map_func (self : t_map 'i 'b 'f 'proj0) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Map _ a _ -> a
      end
end
module C06MapPrecond_Impl1_PreservationInv_Impl
  type i
  type b
  type f
  type item0
  use seq.Seq
  use prelude.Ghost
  predicate invariant6 (self : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val invariant6 (self : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val inv6 (_x : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : (item0, Ghost.ghost_ty (Seq.seq item0)) . inv6 x = true
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  use prelude.Borrow
  predicate postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate inv4 (_x : borrowed f)
  val inv4 (_x : borrowed f) : bool
    ensures { result = inv4 _x }
    
  predicate postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  predicate inv3 (_x : b)
  val inv3 (_x : b) : bool
    ensures { result = inv3 _x }
    
  predicate inv1 (_x : f)
  val inv1 (_x : f) : bool
    ensures { result = inv1 _x }
    
  function fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv1 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv6 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv3 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv1 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv6 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv3 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv4 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv1 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv1 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv1 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv1 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv1 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv1 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv1 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv1 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv4 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv6 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv3 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv4 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv6 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv3 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate invariant5 (self : item0)
  val invariant5 (self : item0) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : item0)
  val inv5 (_x : item0) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : item0 . inv5 x = true
  predicate invariant4 (self : borrowed f)
  val invariant4 (self : borrowed f) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : borrowed f . inv4 x = true
  predicate invariant3 (self : b)
  val invariant3 (self : b) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : b . inv3 x = true
  use seq.Seq
  predicate inv2 (_x : Seq.seq item0)
  val inv2 (_x : Seq.seq item0) : bool
    ensures { result = inv2 _x }
    
  predicate inv0 (_x : i)
  val inv0 (_x : i) : bool
    ensures { result = inv0 _x }
    
  predicate produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces0 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces0 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces0 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv0 a}
    requires {[#"../common.rs" 21 31 21 33] inv2 ab}
    requires {[#"../common.rs" 21 52 21 53] inv0 b}
    requires {[#"../common.rs" 21 61 21 63] inv2 bc}
    requires {[#"../common.rs" 21 82 21 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces0 a ab b) -> ([#"../common.rs" 19 15 19 32] produces0 b bc c) -> ([#"../common.rs" 21 22 21 23] inv0 a) -> ([#"../common.rs" 21 31 21 33] inv2 ab) -> ([#"../common.rs" 21 52 21 53] inv0 b) -> ([#"../common.rs" 21 61 21 63] inv2 bc) -> ([#"../common.rs" 21 82 21 83] inv0 c) -> ([#"../common.rs" 20 14 20 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv0 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv0 a) -> ([#"../common.rs" 14 14 14 39] produces0 a (Seq.empty ) a)
  predicate invariant2 (self : Seq.seq item0)
  val invariant2 (self : Seq.seq item0) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : Seq.seq item0 . inv2 x = true
  predicate invariant1 (self : f)
  val invariant1 (self : f) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : f . inv1 x = true
  predicate invariant0 (self : i)
  val invariant0 (self : i) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : i . inv0 x = true
  predicate precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = precondition0 self _2 }
    
  use prelude.Ghost
  use seq.Seq
  predicate preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv0 i -> inv3 b -> inv4 f -> inv5 e2 -> inv5 e1 -> inv2 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new s) -> postcondition_mut0 f (e1, Ghost.new s) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  let rec ghost predicate preservation_inv [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0)
    requires {[#"../06_map_precond.rs" 93 24 93 28] inv0 iter}
    requires {[#"../06_map_precond.rs" 93 33 93 37] inv1 func}
    requires {[#"../06_map_precond.rs" 93 42 93 50] inv2 produced}
    ensures { [#"../06_map_precond.rs" 92 4 92 83] produced = Seq.empty  -> result = preservation0 iter func }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 94 8 101 9] pure {forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv0 i -> inv3 b -> inv4 f -> inv5 e2 -> inv5 e1 -> inv2 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new (Seq.(++) produced s)) -> postcondition_mut0 f (e1, Ghost.new (Seq.(++) produced s)) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) produced s) e1))}
end
module C06MapPrecond_Impl0_ProducesRefl_Impl
  type i
  type b
  type f
  type item0
  predicate invariant10 (self : item0)
  val invariant10 (self : item0) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : item0)
  val inv10 (_x : item0) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : item0 . inv10 x = true
  use prelude.Borrow
  predicate invariant9 (self : borrowed i)
  val invariant9 (self : borrowed i) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : borrowed i)
  val inv9 (_x : borrowed i) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : borrowed i . inv9 x = true
  predicate invariant8 (self : b)
  val invariant8 (self : b) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : b)
  val inv8 (_x : b) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : b . inv8 x = true
  use seq.Seq
  use prelude.Ghost
  predicate invariant7 (self : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val invariant7 (self : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val inv7 (_x : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : (item0, Ghost.ghost_ty (Seq.seq item0)) . inv7 x = true
  predicate invariant6 (self : borrowed f)
  val invariant6 (self : borrowed f) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed f)
  val inv6 (_x : borrowed f) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed f . inv6 x = true
  predicate invariant5 (self : Ghost.ghost_ty (Seq.seq item0))
  val invariant5 (self : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Ghost.ghost_ty (Seq.seq item0))
  val inv5 (_x : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Ghost.ghost_ty (Seq.seq item0) . inv5 x = true
  predicate invariant4 (self : f)
  val invariant4 (self : f) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : f)
  val inv4 (_x : f) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : f . inv4 x = true
  predicate invariant3 (self : i)
  val invariant3 (self : i) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : i)
  val inv3 (_x : i) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : i . inv3 x = true
  predicate invariant2 (self : Seq.seq (borrowed f))
  val invariant2 (self : Seq.seq (borrowed f)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Seq.seq (borrowed f))
  val inv2 (_x : Seq.seq (borrowed f)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Seq.seq (borrowed f) . inv2 x = true
  predicate invariant1 (self : Seq.seq item0)
  val invariant1 (self : Seq.seq item0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq item0)
  val inv1 (_x : Seq.seq item0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq item0 . inv1 x = true
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  predicate postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  function fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv4 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv7 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv8 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv4 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv7 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv8 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv6 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv4 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv4 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv4 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv4 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv4 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv4 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv4 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv4 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv6 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv7 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv8 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv6 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv7 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv8 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv3 a}
    requires {[#"../common.rs" 21 31 21 33] inv1 ab}
    requires {[#"../common.rs" 21 52 21 53] inv3 b}
    requires {[#"../common.rs" 21 61 21 63] inv1 bc}
    requires {[#"../common.rs" 21 82 21 83] inv3 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv3 a) -> ([#"../common.rs" 21 31 21 33] inv1 ab) -> ([#"../common.rs" 21 52 21 53] inv3 b) -> ([#"../common.rs" 21 61 21 63] inv1 bc) -> ([#"../common.rs" 21 82 21 83] inv3 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv3 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv3 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  predicate precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = precondition0 self _2 }
    
  use prelude.Ghost
  use seq.Seq
  predicate next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item0 . inv3 i -> inv10 e -> produces1 iter (Seq.singleton e) i -> precondition0 func (e, Ghost.new produced)
  val next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    ensures { result = next_precondition0 iter func produced }
    
  use seq.Seq
  predicate preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv3 i -> inv8 b -> inv6 f -> inv10 e2 -> inv10 e1 -> inv1 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new s) -> postcondition_mut0 f (e1, Ghost.new s) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  predicate preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv3 i -> inv8 b -> inv6 f -> inv10 e2 -> inv10 e1 -> inv1 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new (Seq.(++) produced s)) -> postcondition_mut0 f (e1, Ghost.new (Seq.(++) produced s)) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) produced s) e1))
  val preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    requires {[#"../06_map_precond.rs" 93 24 93 28] inv3 iter}
    requires {[#"../06_map_precond.rs" 93 33 93 37] inv4 func}
    requires {[#"../06_map_precond.rs" 93 42 93 50] inv1 produced}
    ensures { result = preservation_inv0 iter func produced }
    
  axiom preservation_inv0_spec : forall iter : i, func : f, produced : Seq.seq item0 . ([#"../06_map_precond.rs" 93 24 93 28] inv3 iter) -> ([#"../06_map_precond.rs" 93 33 93 37] inv4 func) -> ([#"../06_map_precond.rs" 93 42 93 50] inv1 produced) -> ([#"../06_map_precond.rs" 92 4 92 83] produced = Seq.empty  -> preservation_inv0 iter func produced = preservation0 iter func)
  use prelude.Ghost
  predicate completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed0 self }
    
  predicate reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv4 func -> inv9 iter -> completed0 iter -> next_precondition0 ( ^ iter) func (Seq.empty ) /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize0 () /\ preservation_inv0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) /\ next_precondition0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self))
  val invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C06MapPrecond_Map_Type.t_map i b f item0)
  val inv0 (_x : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C06MapPrecond_Map_Type.t_map i b f item0 . inv0 x = (invariant0 x /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  use seq.Seq
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use prelude.Ghost
  use seq.Seq
  use seq.Seq
  predicate produces0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item0)
    
   =
    [#"../06_map_precond.rs" 44 8 56 9] unnest0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ) /\ (exists s : Seq.seq item0 . inv1 s /\ Seq.length s = Seq.length visited /\ produces1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s /\ (exists fs : Seq.seq (borrowed f) . inv2 fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> unnest0 (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i) /\ precondition0 ( * Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) /\ postcondition_mut0 (Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = produces0 self visited succ }
    
  use seq.Seq
  let rec ghost function produces_refl [#"../06_map_precond.rs" 31 4 31 29] (a : C06MapPrecond_Map_Type.t_map i b f item0) : ()
    requires {[#"../06_map_precond.rs" 31 21 31 22] inv0 a}
    ensures { [#"../06_map_precond.rs" 30 14 30 39] produces0 a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 28 4 28 10] ()
end
module C06MapPrecond_Impl0_ProducesTrans_Impl
  type i
  type b
  type f
  type item0
  predicate invariant11 (self : item0)
  val invariant11 (self : item0) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : item0)
  val inv11 (_x : item0) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : item0 . inv11 x = true
  use prelude.Borrow
  predicate invariant10 (self : borrowed i)
  val invariant10 (self : borrowed i) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : borrowed i)
  val inv10 (_x : borrowed i) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : borrowed i . inv10 x = true
  predicate invariant9 (self : b)
  val invariant9 (self : b) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : b)
  val inv9 (_x : b) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : b . inv9 x = true
  use seq.Seq
  use prelude.Ghost
  predicate invariant8 (self : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val invariant8 (self : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val inv8 (_x : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : (item0, Ghost.ghost_ty (Seq.seq item0)) . inv8 x = true
  predicate invariant7 (self : borrowed f)
  val invariant7 (self : borrowed f) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed f)
  val inv7 (_x : borrowed f) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed f . inv7 x = true
  predicate invariant6 (self : Ghost.ghost_ty (Seq.seq item0))
  val invariant6 (self : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Ghost.ghost_ty (Seq.seq item0))
  val inv6 (_x : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Ghost.ghost_ty (Seq.seq item0) . inv6 x = true
  predicate invariant5 (self : f)
  val invariant5 (self : f) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : f)
  val inv5 (_x : f) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : f . inv5 x = true
  predicate invariant4 (self : i)
  val invariant4 (self : i) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : i)
  val inv4 (_x : i) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : i . inv4 x = true
  predicate invariant3 (self : Seq.seq (borrowed f))
  val invariant3 (self : Seq.seq (borrowed f)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq (borrowed f))
  val inv3 (_x : Seq.seq (borrowed f)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq (borrowed f) . inv3 x = true
  predicate invariant2 (self : Seq.seq item0)
  val invariant2 (self : Seq.seq item0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Seq.seq item0)
  val inv2 (_x : Seq.seq item0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Seq.seq item0 . inv2 x = true
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  predicate postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  function fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv5 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv8 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv9 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv5 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv8 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv9 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv7 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv5 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv5 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv5 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv5 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv5 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv5 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv5 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv5 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv7 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv8 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv9 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv7 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv8 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv9 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv4 a}
    requires {[#"../common.rs" 21 31 21 33] inv2 ab}
    requires {[#"../common.rs" 21 52 21 53] inv4 b}
    requires {[#"../common.rs" 21 61 21 63] inv2 bc}
    requires {[#"../common.rs" 21 82 21 83] inv4 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv4 a) -> ([#"../common.rs" 21 31 21 33] inv2 ab) -> ([#"../common.rs" 21 52 21 53] inv4 b) -> ([#"../common.rs" 21 61 21 63] inv2 bc) -> ([#"../common.rs" 21 82 21 83] inv4 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv4 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv4 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  predicate invariant1 (self : Seq.seq b)
  val invariant1 (self : Seq.seq b) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq b)
  val inv1 (_x : Seq.seq b) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq b . inv1 x = true
  predicate precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = precondition0 self _2 }
    
  use prelude.Ghost
  use seq.Seq
  predicate next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item0 . inv4 i -> inv11 e -> produces1 iter (Seq.singleton e) i -> precondition0 func (e, Ghost.new produced)
  val next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    ensures { result = next_precondition0 iter func produced }
    
  use seq.Seq
  predicate preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv4 i -> inv9 b -> inv7 f -> inv11 e2 -> inv11 e1 -> inv2 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new s) -> postcondition_mut0 f (e1, Ghost.new s) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  predicate preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv4 i -> inv9 b -> inv7 f -> inv11 e2 -> inv11 e1 -> inv2 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new (Seq.(++) produced s)) -> postcondition_mut0 f (e1, Ghost.new (Seq.(++) produced s)) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) produced s) e1))
  val preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    requires {[#"../06_map_precond.rs" 93 24 93 28] inv4 iter}
    requires {[#"../06_map_precond.rs" 93 33 93 37] inv5 func}
    requires {[#"../06_map_precond.rs" 93 42 93 50] inv2 produced}
    ensures { result = preservation_inv0 iter func produced }
    
  axiom preservation_inv0_spec : forall iter : i, func : f, produced : Seq.seq item0 . ([#"../06_map_precond.rs" 93 24 93 28] inv4 iter) -> ([#"../06_map_precond.rs" 93 33 93 37] inv5 func) -> ([#"../06_map_precond.rs" 93 42 93 50] inv2 produced) -> ([#"../06_map_precond.rs" 92 4 92 83] produced = Seq.empty  -> preservation_inv0 iter func produced = preservation0 iter func)
  use prelude.Ghost
  predicate completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed0 self }
    
  predicate reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv5 func -> inv10 iter -> completed0 iter -> next_precondition0 ( ^ iter) func (Seq.empty ) /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize0 () /\ preservation_inv0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) /\ next_precondition0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self))
  val invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C06MapPrecond_Map_Type.t_map i b f item0)
  val inv0 (_x : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C06MapPrecond_Map_Type.t_map i b f item0 . inv0 x = (invariant0 x /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use prelude.Ghost
  use seq.Seq
  use seq.Seq
  predicate produces0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item0)
    
   =
    [#"../06_map_precond.rs" 44 8 56 9] unnest0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ) /\ (exists s : Seq.seq item0 . inv2 s /\ Seq.length s = Seq.length visited /\ produces1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s /\ (exists fs : Seq.seq (borrowed f) . inv3 fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> unnest0 (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i) /\ precondition0 ( * Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) /\ postcondition_mut0 (Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = produces0 self visited succ }
    
  let rec ghost function produces_trans [#"../06_map_precond.rs" 38 4 38 90] (a : C06MapPrecond_Map_Type.t_map i b f item0) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i b f item0) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i b f item0) : ()
    requires {[#"../06_map_precond.rs" 35 15 35 32] produces0 a ab b}
    requires {[#"../06_map_precond.rs" 36 15 36 32] produces0 b bc c}
    requires {[#"../06_map_precond.rs" 38 22 38 23] inv0 a}
    requires {[#"../06_map_precond.rs" 38 31 38 33] inv1 ab}
    requires {[#"../06_map_precond.rs" 38 52 38 53] inv0 b}
    requires {[#"../06_map_precond.rs" 38 61 38 63] inv1 bc}
    requires {[#"../06_map_precond.rs" 38 82 38 83] inv0 c}
    ensures { [#"../06_map_precond.rs" 37 14 37 42] produces0 a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 33 4 33 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C06MapPrecond_Impl1_ProducesOne_Impl
  type i
  type b
  type f
  use prelude.Borrow
  predicate invariant11 (self : borrowed i)
  val invariant11 (self : borrowed i) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : borrowed i)
  val inv11 (_x : borrowed i) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : borrowed i . inv11 x = true
  type item0
  use seq.Seq
  use prelude.Ghost
  predicate invariant10 (self : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val invariant10 (self : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val inv10 (_x : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : (item0, Ghost.ghost_ty (Seq.seq item0)) . inv10 x = true
  predicate invariant9 (self : Seq.seq b)
  val invariant9 (self : Seq.seq b) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : Seq.seq b)
  val inv9 (_x : Seq.seq b) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Seq.seq b . inv9 x = true
  predicate invariant8 (self : Ghost.ghost_ty (Seq.seq item0))
  val invariant8 (self : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Ghost.ghost_ty (Seq.seq item0))
  val inv8 (_x : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Ghost.ghost_ty (Seq.seq item0) . inv8 x = true
  predicate invariant7 (self : f)
  val invariant7 (self : f) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : f)
  val inv7 (_x : f) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : f . inv7 x = true
  predicate invariant6 (self : i)
  val invariant6 (self : i) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : i)
  val inv6 (_x : i) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : i . inv6 x = true
  predicate invariant5 (self : Seq.seq (borrowed f))
  val invariant5 (self : Seq.seq (borrowed f)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq (borrowed f))
  val inv5 (_x : Seq.seq (borrowed f)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq (borrowed f) . inv5 x = true
  predicate invariant4 (self : Seq.seq item0)
  val invariant4 (self : Seq.seq item0) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Seq.seq item0)
  val inv4 (_x : Seq.seq item0) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq item0 . inv4 x = true
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  predicate postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate inv2 (_x : borrowed f)
  val inv2 (_x : borrowed f) : bool
    ensures { result = inv2 _x }
    
  predicate postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  predicate inv1 (_x : b)
  val inv1 (_x : b) : bool
    ensures { result = inv1 _x }
    
  function fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv7 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv10 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv1 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv7 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv10 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv1 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv2 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv7 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv7 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv7 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv7 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv7 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv7 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv7 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv7 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv2 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv10 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv1 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv10 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv1 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate invariant3 (self : item0)
  val invariant3 (self : item0) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : item0)
  val inv3 (_x : item0) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : item0 . inv3 x = true
  predicate invariant2 (self : borrowed f)
  val invariant2 (self : borrowed f) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : borrowed f . inv2 x = true
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans1 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans1 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv6 a}
    requires {[#"../common.rs" 21 31 21 33] inv4 ab}
    requires {[#"../common.rs" 21 52 21 53] inv6 b}
    requires {[#"../common.rs" 21 61 21 63] inv4 bc}
    requires {[#"../common.rs" 21 82 21 83] inv6 c}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv6 a) -> ([#"../common.rs" 21 31 21 33] inv4 ab) -> ([#"../common.rs" 21 52 21 53] inv6 b) -> ([#"../common.rs" 21 61 21 63] inv4 bc) -> ([#"../common.rs" 21 82 21 83] inv6 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl1 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl1 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv6 a}
    ensures { result = produces_refl1 a }
    
  axiom produces_refl1_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv6 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use seq.Seq
  predicate inv0 (_x : C06MapPrecond_Map_Type.t_map i b f item0)
  val inv0 (_x : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = inv0 _x }
    
  use seq.Seq
  predicate precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = precondition0 self _2 }
    
  use prelude.Ghost
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use prelude.Ghost
  use prelude.Ghost
  use seq.Seq
  use seq.Seq
  predicate produces0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item0)
    
   =
    [#"../06_map_precond.rs" 44 8 56 9] unnest0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ) /\ (exists s : Seq.seq item0 . inv4 s /\ Seq.length s = Seq.length visited /\ produces1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s /\ (exists fs : Seq.seq (borrowed f) . inv5 fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> unnest0 (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i) /\ precondition0 ( * Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) /\ postcondition_mut0 (Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = produces0 self visited succ }
    
  function produces_trans0 [#"../06_map_precond.rs" 38 4 38 90] (a : C06MapPrecond_Map_Type.t_map i b f item0) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i b f item0) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i b f item0) : ()
    
   =
    [#"../06_map_precond.rs" 33 4 33 10] ()
  val produces_trans0 [#"../06_map_precond.rs" 38 4 38 90] (a : C06MapPrecond_Map_Type.t_map i b f item0) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i b f item0) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i b f item0) : ()
    requires {[#"../06_map_precond.rs" 35 15 35 32] produces0 a ab b}
    requires {[#"../06_map_precond.rs" 36 15 36 32] produces0 b bc c}
    requires {[#"../06_map_precond.rs" 38 22 38 23] inv0 a}
    requires {[#"../06_map_precond.rs" 38 31 38 33] inv9 ab}
    requires {[#"../06_map_precond.rs" 38 52 38 53] inv0 b}
    requires {[#"../06_map_precond.rs" 38 61 38 63] inv9 bc}
    requires {[#"../06_map_precond.rs" 38 82 38 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : C06MapPrecond_Map_Type.t_map i b f item0, ab : Seq.seq b, b : C06MapPrecond_Map_Type.t_map i b f item0, bc : Seq.seq b, c : C06MapPrecond_Map_Type.t_map i b f item0 . ([#"../06_map_precond.rs" 35 15 35 32] produces0 a ab b) -> ([#"../06_map_precond.rs" 36 15 36 32] produces0 b bc c) -> ([#"../06_map_precond.rs" 38 22 38 23] inv0 a) -> ([#"../06_map_precond.rs" 38 31 38 33] inv9 ab) -> ([#"../06_map_precond.rs" 38 52 38 53] inv0 b) -> ([#"../06_map_precond.rs" 38 61 38 63] inv9 bc) -> ([#"../06_map_precond.rs" 38 82 38 83] inv0 c) -> ([#"../06_map_precond.rs" 37 14 37 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../06_map_precond.rs" 31 4 31 29] (a : C06MapPrecond_Map_Type.t_map i b f item0) : () =
    [#"../06_map_precond.rs" 28 4 28 10] ()
  val produces_refl0 [#"../06_map_precond.rs" 31 4 31 29] (a : C06MapPrecond_Map_Type.t_map i b f item0) : ()
    requires {[#"../06_map_precond.rs" 31 21 31 22] inv0 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : C06MapPrecond_Map_Type.t_map i b f item0 . ([#"../06_map_precond.rs" 31 21 31 22] inv0 a) -> ([#"../06_map_precond.rs" 30 14 30 39] produces0 a (Seq.empty ) a)
  predicate invariant1 (self : b)
  val invariant1 (self : b) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : b . inv1 x = true
  use seq.Seq
  predicate next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item0 . inv6 i -> inv3 e -> produces1 iter (Seq.singleton e) i -> precondition0 func (e, Ghost.new produced)
  val next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    ensures { result = next_precondition0 iter func produced }
    
  use seq.Seq
  predicate preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv6 i -> inv1 b -> inv2 f -> inv3 e2 -> inv3 e1 -> inv4 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new s) -> postcondition_mut0 f (e1, Ghost.new s) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  predicate preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv6 i -> inv1 b -> inv2 f -> inv3 e2 -> inv3 e1 -> inv4 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new (Seq.(++) produced s)) -> postcondition_mut0 f (e1, Ghost.new (Seq.(++) produced s)) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) produced s) e1))
  val preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    requires {[#"../06_map_precond.rs" 93 24 93 28] inv6 iter}
    requires {[#"../06_map_precond.rs" 93 33 93 37] inv7 func}
    requires {[#"../06_map_precond.rs" 93 42 93 50] inv4 produced}
    ensures { result = preservation_inv0 iter func produced }
    
  axiom preservation_inv0_spec : forall iter : i, func : f, produced : Seq.seq item0 . ([#"../06_map_precond.rs" 93 24 93 28] inv6 iter) -> ([#"../06_map_precond.rs" 93 33 93 37] inv7 func) -> ([#"../06_map_precond.rs" 93 42 93 50] inv4 produced) -> ([#"../06_map_precond.rs" 92 4 92 83] produced = Seq.empty  -> preservation_inv0 iter func produced = preservation0 iter func)
  predicate completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed0 self }
    
  predicate reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv7 func -> inv11 iter -> completed0 iter -> next_precondition0 ( ^ iter) func (Seq.empty ) /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  predicate invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize0 () /\ preservation_inv0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) /\ next_precondition0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self))
  val invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : C06MapPrecond_Map_Type.t_map i b f item0 . inv0 x = (invariant0 x /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  use seq.Seq
  let rec ghost predicate produces_one [#"../06_map_precond.rs" 142 4 142 57] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : b) (succ : C06MapPrecond_Map_Type.t_map i b f item0)
    requires {[#"../06_map_precond.rs" 142 20 142 24] inv0 self}
    requires {[#"../06_map_precond.rs" 142 26 142 33] inv1 visited}
    requires {[#"../06_map_precond.rs" 142 38 142 42] inv0 succ}
    ensures { [#"../06_map_precond.rs" 141 14 141 68] result = produces0 self (Seq.singleton visited) succ }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 143 8 149 9] pure {exists f : borrowed f . inv2 f /\  * f = C06MapPrecond_Map_Type.map_func self /\  ^ f = C06MapPrecond_Map_Type.map_func succ /\ (exists e : item0 . inv3 e /\ produces1 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) e /\ precondition0 ( * f) (e, C06MapPrecond_Map_Type.map_produced self) /\ postcondition_mut0 f (e, C06MapPrecond_Map_Type.map_produced self) visited)}
end
module C06MapPrecond_Impl1_ProducesOneInvariant_Impl
  type i
  type b
  type f
  use prelude.Borrow
  predicate invariant9 (self : borrowed i)
  val invariant9 (self : borrowed i) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : borrowed i)
  val inv9 (_x : borrowed i) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : borrowed i . inv9 x = true
  type item0
  use seq.Seq
  use prelude.Ghost
  predicate invariant8 (self : Ghost.ghost_ty (Seq.seq item0))
  val invariant8 (self : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Ghost.ghost_ty (Seq.seq item0))
  val inv8 (_x : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Ghost.ghost_ty (Seq.seq item0) . inv8 x = true
  predicate invariant7 (self : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val invariant7 (self : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val inv7 (_x : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : (item0, Ghost.ghost_ty (Seq.seq item0)) . inv7 x = true
  predicate invariant6 (self : f)
  val invariant6 (self : f) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : f)
  val inv6 (_x : f) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : f . inv6 x = true
  predicate invariant5 (self : Seq.seq item0)
  val invariant5 (self : Seq.seq item0) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq item0)
  val inv5 (_x : Seq.seq item0) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq item0 . inv5 x = true
  predicate invariant4 (self : i)
  val invariant4 (self : i) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : i)
  val inv4 (_x : i) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : i . inv4 x = true
  predicate invariant3 (self : borrowed f)
  val invariant3 (self : borrowed f) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed f)
  val inv3 (_x : borrowed f) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed f . inv3 x = true
  predicate invariant2 (self : b)
  val invariant2 (self : b) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : b)
  val inv2 (_x : b) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : b . inv2 x = true
  predicate invariant1 (self : item0)
  val invariant1 (self : item0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : item0)
  val inv1 (_x : item0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : item0 . inv1 x = true
  predicate precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = precondition0 self _2 }
    
  use prelude.Ghost
  predicate produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces0 self visited _o }
    
  use seq.Seq
  predicate next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item0 . inv4 i -> inv1 e -> produces0 iter (Seq.singleton e) i -> precondition0 func (e, Ghost.new produced)
  val next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    ensures { result = next_precondition0 iter func produced }
    
  predicate postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  use seq.Seq
  use seq.Seq
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  predicate preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv4 i -> inv2 b -> inv3 f -> inv1 e2 -> inv1 e1 -> inv5 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new s) -> postcondition_mut0 f (e1, Ghost.new s) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  use seq.Seq
  predicate preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv4 i -> inv2 b -> inv3 f -> inv1 e2 -> inv1 e1 -> inv5 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new (Seq.(++) produced s)) -> postcondition_mut0 f (e1, Ghost.new (Seq.(++) produced s)) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) produced s) e1))
  val preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    requires {[#"../06_map_precond.rs" 93 24 93 28] inv4 iter}
    requires {[#"../06_map_precond.rs" 93 33 93 37] inv6 func}
    requires {[#"../06_map_precond.rs" 93 42 93 50] inv5 produced}
    ensures { result = preservation_inv0 iter func produced }
    
  axiom preservation_inv0_spec : forall iter : i, func : f, produced : Seq.seq item0 . ([#"../06_map_precond.rs" 93 24 93 28] inv4 iter) -> ([#"../06_map_precond.rs" 93 33 93 37] inv6 func) -> ([#"../06_map_precond.rs" 93 42 93 50] inv5 produced) -> ([#"../06_map_precond.rs" 92 4 92 83] produced = Seq.empty  -> preservation_inv0 iter func produced = preservation0 iter func)
  use prelude.Ghost
  predicate completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed0 self }
    
  predicate reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv6 func -> inv9 iter -> completed0 iter -> next_precondition0 ( ^ iter) func (Seq.empty ) /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize0 () /\ preservation_inv0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) /\ next_precondition0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self))
  val invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C06MapPrecond_Map_Type.t_map i b f item0)
  val inv0 (_x : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C06MapPrecond_Map_Type.t_map i b f item0 . inv0 x = (invariant0 x /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  predicate postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  function fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv6 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv7 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv2 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv6 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv7 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv3 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv6 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv6 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv6 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv6 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv6 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv6 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv6 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv6 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv3 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv7 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv2 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv3 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv7 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces0 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces0 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv4 a}
    requires {[#"../common.rs" 21 31 21 33] inv5 ab}
    requires {[#"../common.rs" 21 52 21 53] inv4 b}
    requires {[#"../common.rs" 21 61 21 63] inv5 bc}
    requires {[#"../common.rs" 21 82 21 83] inv4 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces0 a ab b) -> ([#"../common.rs" 19 15 19 32] produces0 b bc c) -> ([#"../common.rs" 21 22 21 23] inv4 a) -> ([#"../common.rs" 21 31 21 33] inv5 ab) -> ([#"../common.rs" 21 52 21 53] inv4 b) -> ([#"../common.rs" 21 61 21 63] inv5 bc) -> ([#"../common.rs" 21 82 21 83] inv4 c) -> ([#"../common.rs" 20 14 20 42] produces0 a (Seq.(++) ab bc) c)
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv4 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv4 a) -> ([#"../common.rs" 14 14 14 39] produces0 a (Seq.empty ) a)
  let rec ghost function produces_one_invariant [#"../06_map_precond.rs" 132 4 132 73] (self : C06MapPrecond_Map_Type.t_map i b f item0) (e : item0) (r : b) (f : borrowed f) (iter : i) : ()
    requires {[#"../06_map_precond.rs" 127 4 127 60] produces0 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) iter}
    requires {[#"../06_map_precond.rs" 128 15 128 30]  * f = C06MapPrecond_Map_Type.map_func self}
    requires {[#"../06_map_precond.rs" 129 15 129 57] postcondition_mut0 f (e, C06MapPrecond_Map_Type.map_produced self) r}
    requires {[#"../06_map_precond.rs" 132 30 132 34] inv0 self}
    requires {[#"../06_map_precond.rs" 132 36 132 37] inv1 e}
    requires {[#"../06_map_precond.rs" 132 48 132 49] inv2 r}
    requires {[#"../06_map_precond.rs" 132 54 132 55] inv3 f}
    requires {[#"../06_map_precond.rs" 132 65 132 69] inv4 iter}
    ensures { [#"../06_map_precond.rs" 130 14 130 69] preservation_inv0 iter ( ^ f) (Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) e) }
    ensures { [#"../06_map_precond.rs" 131 14 131 70] next_precondition0 iter ( ^ f) (Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) e) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 126 4 126 12] let _ = let a = pure {forall i : i . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv4 i -> inv1 e2 -> inv1 e1 -> inv5 s -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> produces0 (C06MapPrecond_Map_Type.map_iter self) (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i} in assert {a} in ()
end
module C06MapPrecond_Impl0_Next
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  predicate invariant13 (self : Seq.seq (borrowed f))
  val invariant13 (self : Seq.seq (borrowed f)) : bool
    ensures { result = invariant13 self }
    
  predicate inv13 (_x : Seq.seq (borrowed f))
  val inv13 (_x : Seq.seq (borrowed f)) : bool
    ensures { result = inv13 _x }
    
  axiom inv13 : forall x : Seq.seq (borrowed f) . inv13 x = true
  type item0
  predicate invariant12 (self : Seq.seq item0)
  val invariant12 (self : Seq.seq item0) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : Seq.seq item0)
  val inv12 (_x : Seq.seq item0) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : Seq.seq item0 . inv12 x = true
  predicate invariant11 (self : item0)
  val invariant11 (self : item0) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : item0)
  val inv11 (_x : item0) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : item0 . inv11 x = true
  use prelude.Ghost
  predicate inv3 (_x : Ghost.ghost_ty (Seq.seq item0))
  val inv3 (_x : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = inv3 _x }
    
  predicate inv2 (_x : f)
  val inv2 (_x : f) : bool
    ensures { result = inv2 _x }
    
  predicate inv0 (_x : i)
  val inv0 (_x : i) : bool
    ensures { result = inv0 _x }
    
  predicate precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = precondition0 self _2 }
    
  use prelude.Ghost
  predicate produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces0 self visited _o }
    
  use seq.Seq
  predicate next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item0 . inv0 i -> inv11 e -> produces0 iter (Seq.singleton e) i -> precondition0 func (e, Ghost.new produced)
  val next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    ensures { result = next_precondition0 iter func produced }
    
  predicate postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  use seq.Seq
  use seq.Seq
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  predicate inv7 (_x : borrowed f)
  val inv7 (_x : borrowed f) : bool
    ensures { result = inv7 _x }
    
  predicate inv9 (_x : b)
  val inv9 (_x : b) : bool
    ensures { result = inv9 _x }
    
  predicate preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv0 i -> inv9 b -> inv7 f -> inv11 e2 -> inv11 e1 -> inv12 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new s) -> postcondition_mut0 f (e1, Ghost.new s) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  use seq.Seq
  predicate preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv0 i -> inv9 b -> inv7 f -> inv11 e2 -> inv11 e1 -> inv12 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new (Seq.(++) produced s)) -> postcondition_mut0 f (e1, Ghost.new (Seq.(++) produced s)) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) produced s) e1))
  val preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    requires {[#"../06_map_precond.rs" 93 24 93 28] inv0 iter}
    requires {[#"../06_map_precond.rs" 93 33 93 37] inv2 func}
    requires {[#"../06_map_precond.rs" 93 42 93 50] inv12 produced}
    ensures { result = preservation_inv0 iter func produced }
    
  axiom preservation_inv0_spec : forall iter : i, func : f, produced : Seq.seq item0 . ([#"../06_map_precond.rs" 93 24 93 28] inv0 iter) -> ([#"../06_map_precond.rs" 93 33 93 37] inv2 func) -> ([#"../06_map_precond.rs" 93 42 93 50] inv12 produced) -> ([#"../06_map_precond.rs" 92 4 92 83] produced = Seq.empty  -> preservation_inv0 iter func produced = preservation0 iter func)
  use prelude.Ghost
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  predicate inv6 (_x : borrowed i)
  val inv6 (_x : borrowed i) : bool
    ensures { result = inv6 _x }
    
  predicate reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv2 func -> inv6 iter -> completed1 iter -> next_precondition0 ( ^ iter) func (Seq.empty ) /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate invariant10 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize0 () /\ preservation_inv0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) /\ next_precondition0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self))
  val invariant10 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : C06MapPrecond_Map_Type.t_map i b f item0)
  val inv10 (_x : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : C06MapPrecond_Map_Type.t_map i b f item0 . inv10 x = (invariant10 x /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  predicate invariant9 (self : b)
  val invariant9 (self : b) : bool
    ensures { result = invariant9 self }
    
  axiom inv9 : forall x : b . inv9 x = true
  predicate resolve4 (self : f)
  val resolve4 (self : f) : bool
    ensures { result = resolve4 self }
    
  predicate postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  predicate inv8 (_x : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val inv8 (_x : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = inv8 _x }
    
  function fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv2 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv8 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv9 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv8 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv9 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv7 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve4 ( ^ s)))
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv2 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv2 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv2 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv2 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv2 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv2 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv7 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv8 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv9 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv7 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv8 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv9 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate invariant8 (self : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val invariant8 (self : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = invariant8 self }
    
  axiom inv8 : forall x : (item0, Ghost.ghost_ty (Seq.seq item0)) . inv8 x = true
  predicate invariant7 (self : borrowed f)
  val invariant7 (self : borrowed f) : bool
    ensures { result = invariant7 self }
    
  axiom inv7 : forall x : borrowed f . inv7 x = true
  predicate invariant6 (self : borrowed i)
  val invariant6 (self : borrowed i) : bool
    ensures { result = invariant6 self }
    
  axiom inv6 : forall x : borrowed i . inv6 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant5 (self : Core_Option_Option_Type.t_option b)
  val invariant5 (self : Core_Option_Option_Type.t_option b) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Core_Option_Option_Type.t_option b)
  val inv5 (_x : Core_Option_Option_Type.t_option b) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Core_Option_Option_Type.t_option b . inv5 x = true
  predicate invariant4 (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item0))
  val invariant4 (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item0)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed (C06MapPrecond_Map_Type.t_map i b f item0))
  val inv4 (_x : borrowed (C06MapPrecond_Map_Type.t_map i b f item0)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (C06MapPrecond_Map_Type.t_map i b f item0) . inv4 x = (inv10 ( * x) /\ inv10 ( ^ x))
  predicate invariant3 (self : Ghost.ghost_ty (Seq.seq item0))
  val invariant3 (self : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : Ghost.ghost_ty (Seq.seq item0) . inv3 x = true
  predicate invariant2 (self : f)
  val invariant2 (self : f) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : f . inv2 x = true
  predicate invariant1 (self : Core_Option_Option_Type.t_option item0)
  val invariant1 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option item0)
  val inv1 (_x : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option item0 . inv1 x = true
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces0 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces0 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv0 a}
    requires {[#"../common.rs" 21 31 21 33] inv12 ab}
    requires {[#"../common.rs" 21 52 21 53] inv0 b}
    requires {[#"../common.rs" 21 61 21 63] inv12 bc}
    requires {[#"../common.rs" 21 82 21 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces0 a ab b) -> ([#"../common.rs" 19 15 19 32] produces0 b bc c) -> ([#"../common.rs" 21 22 21 23] inv0 a) -> ([#"../common.rs" 21 31 21 33] inv12 ab) -> ([#"../common.rs" 21 52 21 53] inv0 b) -> ([#"../common.rs" 21 61 21 63] inv12 bc) -> ([#"../common.rs" 21 82 21 83] inv0 c) -> ([#"../common.rs" 20 14 20 42] produces0 a (Seq.(++) ab bc) c)
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv0 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv0 a) -> ([#"../common.rs" 14 14 14 39] produces0 a (Seq.empty ) a)
  predicate invariant0 (self : i)
  val invariant0 (self : i) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : i . inv0 x = true
  use prelude.Ghost
  use seq.Seq
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces1 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item0)
    
   =
    [#"../06_map_precond.rs" 44 8 56 9] unnest0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ) /\ (exists s : Seq.seq item0 . inv12 s /\ Seq.length s = Seq.length visited /\ produces0 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s /\ (exists fs : Seq.seq (borrowed f) . inv13 fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> unnest0 (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i) /\ precondition0 ( * Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) /\ postcondition_mut0 (Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces1 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = produces1 self visited succ }
    
  use seq.Seq
  predicate produces_one0 [#"../06_map_precond.rs" 142 4 142 57] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : b) (succ : C06MapPrecond_Map_Type.t_map i b f item0)
    
   =
    [#"../06_map_precond.rs" 143 8 149 9] exists f : borrowed f . inv7 f /\  * f = C06MapPrecond_Map_Type.map_func self /\  ^ f = C06MapPrecond_Map_Type.map_func succ /\ (exists e : item0 . inv11 e /\ produces0 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) e /\ precondition0 ( * f) (e, C06MapPrecond_Map_Type.map_produced self) /\ postcondition_mut0 f (e, C06MapPrecond_Map_Type.map_produced self) visited)
  val produces_one0 [#"../06_map_precond.rs" 142 4 142 57] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : b) (succ : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    requires {[#"../06_map_precond.rs" 142 20 142 24] inv10 self}
    requires {[#"../06_map_precond.rs" 142 26 142 33] inv9 visited}
    requires {[#"../06_map_precond.rs" 142 38 142 42] inv10 succ}
    ensures { result = produces_one0 self visited succ }
    
  axiom produces_one0_spec : forall self : C06MapPrecond_Map_Type.t_map i b f item0, visited : b, succ : C06MapPrecond_Map_Type.t_map i b f item0 . ([#"../06_map_precond.rs" 142 20 142 24] inv10 self) -> ([#"../06_map_precond.rs" 142 26 142 33] inv9 visited) -> ([#"../06_map_precond.rs" 142 38 142 42] inv10 succ) -> ([#"../06_map_precond.rs" 141 14 141 68] produces_one0 self visited succ = produces1 self (Seq.singleton visited) succ)
  predicate completed0 [#"../06_map_precond.rs" 21 4 21 35] (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item0))
   =
    [#"../06_map_precond.rs" 22 8 25 9] Ghost.inner (C06MapPrecond_Map_Type.map_produced ( ^ self)) = Seq.empty  /\ completed1 (Borrow.borrow_logic (C06MapPrecond_Map_Type.map_iter ( * self)) (C06MapPrecond_Map_Type.map_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1)) /\ C06MapPrecond_Map_Type.map_func ( * self) = C06MapPrecond_Map_Type.map_func ( ^ self)
  val completed0 [#"../06_map_precond.rs" 21 4 21 35] (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item0)) : bool
    ensures { result = completed0 self }
    
  predicate resolve3 (self : Ghost.ghost_ty ())
  val resolve3 (self : Ghost.ghost_ty ()) : bool
    ensures { result = resolve3 self }
    
  use prelude.Ghost
  function produces_one_invariant0 [#"../06_map_precond.rs" 132 4 132 73] (self : C06MapPrecond_Map_Type.t_map i b f item0) (e : item0) (r : b) (f : borrowed f) (iter : i) : ()
    
  val produces_one_invariant0 [#"../06_map_precond.rs" 132 4 132 73] (self : C06MapPrecond_Map_Type.t_map i b f item0) (e : item0) (r : b) (f : borrowed f) (iter : i) : ()
    requires {[#"../06_map_precond.rs" 127 4 127 60] produces0 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) iter}
    requires {[#"../06_map_precond.rs" 128 15 128 30]  * f = C06MapPrecond_Map_Type.map_func self}
    requires {[#"../06_map_precond.rs" 129 15 129 57] postcondition_mut0 f (e, C06MapPrecond_Map_Type.map_produced self) r}
    requires {[#"../06_map_precond.rs" 132 30 132 34] inv10 self}
    requires {[#"../06_map_precond.rs" 132 36 132 37] inv11 e}
    requires {[#"../06_map_precond.rs" 132 48 132 49] inv9 r}
    requires {[#"../06_map_precond.rs" 132 54 132 55] inv7 f}
    requires {[#"../06_map_precond.rs" 132 65 132 69] inv0 iter}
    ensures { result = produces_one_invariant0 self e r f iter }
    
  axiom produces_one_invariant0_spec : forall self : C06MapPrecond_Map_Type.t_map i b f item0, e : item0, r : b, f : borrowed f, iter : i . ([#"../06_map_precond.rs" 127 4 127 60] produces0 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) iter) -> ([#"../06_map_precond.rs" 128 15 128 30]  * f = C06MapPrecond_Map_Type.map_func self) -> ([#"../06_map_precond.rs" 129 15 129 57] postcondition_mut0 f (e, C06MapPrecond_Map_Type.map_produced self) r) -> ([#"../06_map_precond.rs" 132 30 132 34] inv10 self) -> ([#"../06_map_precond.rs" 132 36 132 37] inv11 e) -> ([#"../06_map_precond.rs" 132 48 132 49] inv9 r) -> ([#"../06_map_precond.rs" 132 54 132 55] inv7 f) -> ([#"../06_map_precond.rs" 132 65 132 69] inv0 iter) -> ([#"../06_map_precond.rs" 131 14 131 70] next_precondition0 iter ( ^ f) (Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) e)) && ([#"../06_map_precond.rs" 130 14 130 69] preservation_inv0 iter ( ^ f) (Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) e))
  predicate resolve2 (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item0)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item0)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : Ghost.ghost_ty (Seq.seq item0))
  val resolve1 (self : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = resolve1 self }
    
  val call_mut0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) : b
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 160 27 160 52] precondition0 ( * self) args}
    requires {inv7 self}
    requires {inv8 args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition_mut0 self args result }
    ensures { inv9 result }
    
  predicate resolve0 (self : Core_Option_Option_Type.t_option item0)
  val resolve0 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = resolve0 self }
    
  val next0 [#"../common.rs" 27 4 27 45] (self : borrowed i) : Core_Option_Option_Type.t_option item0
    requires {[#"../common.rs" 27 17 27 21] inv6 self}
    ensures { [#"../common.rs" 23 14 26 5] match result with
      | Core_Option_Option_Type.C_None -> completed1 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 26 27 44] inv1 result }
    
  let rec cfg next [#"../06_map_precond.rs" 63 4 63 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item0)) : Core_Option_Option_Type.t_option b
    requires {[#"../06_map_precond.rs" 63 17 63 21] inv4 self}
    ensures { [#"../06_map_precond.rs" 59 14 62 5] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces_one0 ( * self) v ( ^ self)
      end }
    ensures { [#"../06_map_precond.rs" 63 26 63 44] inv5 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option b;
  var self : borrowed (C06MapPrecond_Map_Type.t_map i b f item0) = self;
  var _3 : Core_Option_Option_Type.t_option item0;
  var _4 : borrowed i;
  var v : item0;
  var produced : Ghost.ghost_ty (Seq.seq item0);
  var r : b;
  var _12 : borrowed f;
  var _17 : Ghost.ghost_ty ();
  var _20 : Ghost.ghost_ty (Seq.seq item0);
  {
    goto BB0
  }
  BB0 {
    [#"../06_map_precond.rs" 64 14 64 30] _4 <- Borrow.borrow_final (C06MapPrecond_Map_Type.map_iter ( * self)) (Borrow.inherit_id (Borrow.get_id self) 1);
    [#"../06_map_precond.rs" 64 14 64 30] self <- { self with current = (let C06MapPrecond_Map_Type.C_Map x0 x1 x2 =  * self in C06MapPrecond_Map_Type.C_Map ( ^ _4) x1 x2) ; };
    assume { inv0 ( ^ _4) };
    [#"../06_map_precond.rs" 64 14 64 30] _3 <- ([#"../06_map_precond.rs" 64 14 64 30] next0 _4);
    _4 <- any borrowed i;
    goto BB1
  }
  BB1 {
    switch (_3)
      | Core_Option_Option_Type.C_None -> goto BB2
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      end
  }
  BB2 {
    assert { [@expl:type invariant] inv1 _3 };
    assume { resolve0 _3 };
    [#"../06_map_precond.rs" 74 32 74 50] _20 <- ([#"../06_map_precond.rs" 74 32 74 50] Ghost.new (Seq.empty ));
    goto BB14
  }
  BB3 {
    goto BB5
  }
  BB4 {
    assert { [@expl:type invariant] inv1 _3 };
    assume { resolve0 _3 };
    assert { [@expl:type invariant] inv4 self };
    assume { resolve2 self };
    assert { [#"../06_map_precond.rs" 64 14 64 30] false };
    absurd
  }
  BB5 {
    [#"../06_map_precond.rs" 65 17 65 18] v <- ([#"../06_map_precond.rs" 65 17 65 18] Core_Option_Option_Type.some_0 _3);
    [#"../06_map_precond.rs" 65 17 65 18] _3 <- (let Core_Option_Option_Type.C_Some x0 = _3 in Core_Option_Option_Type.C_Some (any item0));
    assert { [@expl:type invariant] inv1 _3 };
    assume { resolve0 _3 };
    assert { [@expl:assertion] [#"../06_map_precond.rs" 66 16 66 76] precondition0 (C06MapPrecond_Map_Type.map_func ( * self)) (v, C06MapPrecond_Map_Type.map_produced ( * self)) };
    goto BB6
  }
  BB6 {
    [#"../06_map_precond.rs" 67 31 67 60] produced <- ([#"../06_map_precond.rs" 67 31 67 60] Ghost.new (Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced ( * self))) v));
    goto BB7
  }
  BB7 {
    [#"../06_map_precond.rs" 68 24 68 35] _12 <- Borrow.borrow_final (C06MapPrecond_Map_Type.map_func ( * self)) (Borrow.inherit_id (Borrow.get_id self) 2);
    [#"../06_map_precond.rs" 68 24 68 35] self <- { self with current = (let C06MapPrecond_Map_Type.C_Map x0 x1 x2 =  * self in C06MapPrecond_Map_Type.C_Map x0 ( ^ _12) x2) ; };
    assume { inv2 ( ^ _12) };
    [#"../06_map_precond.rs" 68 24 68 53] r <- ([#"../06_map_precond.rs" 68 24 68 53] call_mut0 _12 ([#"../06_map_precond.rs" 68 24 68 53] (([#"../06_map_precond.rs" 68 36 68 37] v), ([#"../06_map_precond.rs" 68 39 68 52] C06MapPrecond_Map_Type.map_produced ( * self)))));
    _12 <- any borrowed f;
    [#"../06_map_precond.rs" 68 36 68 37] v <- any item0;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    assert { [@expl:type invariant] inv3 produced };
    assume { resolve1 produced };
    [#"../06_map_precond.rs" 69 16 69 40] self <- { self with current = (let C06MapPrecond_Map_Type.C_Map x0 x1 x2 =  * self in C06MapPrecond_Map_Type.C_Map x0 x1 ([#"../06_map_precond.rs" 69 32 69 40] produced)) ; };
    assert { [@expl:type invariant] inv3 (C06MapPrecond_Map_Type.map_produced ( * self)) };
    assume { resolve1 (C06MapPrecond_Map_Type.map_produced ( * self)) };
    assert { [@expl:type invariant] inv4 self };
    assume { resolve2 self };
    [#"../06_map_precond.rs" 70 16 70 52] _17 <- ([#"../06_map_precond.rs" 70 16 70 52] Ghost.new ());
    goto BB10
  }
  BB10 {
    assume { resolve3 _17 };
    [#"../06_map_precond.rs" 71 16 71 23] _0 <- ([#"../06_map_precond.rs" 71 16 71 23] Core_Option_Option_Type.C_Some ([#"../06_map_precond.rs" 71 21 71 22] r));
    [#"../06_map_precond.rs" 71 21 71 22] r <- any b;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB15
  }
  BB14 {
    [#"../06_map_precond.rs" 74 16 74 50] self <- { self with current = (let C06MapPrecond_Map_Type.C_Map x0 x1 x2 =  * self in C06MapPrecond_Map_Type.C_Map x0 x1 ([#"../06_map_precond.rs" 74 16 74 50] _20)) ; };
    [#"../06_map_precond.rs" 74 16 74 50] _20 <- any Ghost.ghost_ty (Seq.seq item0);
    assert { [@expl:type invariant] inv3 (C06MapPrecond_Map_Type.map_produced ( * self)) };
    assume { resolve1 (C06MapPrecond_Map_Type.map_produced ( * self)) };
    assert { [@expl:type invariant] inv4 self };
    assume { resolve2 self };
    [#"../06_map_precond.rs" 75 16 75 20] _0 <- ([#"../06_map_precond.rs" 75 16 75 20] Core_Option_Option_Type.C_None);
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    return _0
  }
  
end
module C06MapPrecond_Map
  type i
  type b
  type f
  type item0
  use seq.Seq
  use prelude.Ghost
  predicate invariant9 (self : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val invariant9 (self : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val inv9 (_x : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : (item0, Ghost.ghost_ty (Seq.seq item0)) . inv9 x = true
  predicate invariant8 (self : Ghost.ghost_ty (Seq.seq item0))
  val invariant8 (self : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Ghost.ghost_ty (Seq.seq item0))
  val inv8 (_x : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Ghost.ghost_ty (Seq.seq item0) . inv8 x = true
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  use prelude.Borrow
  predicate postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate inv6 (_x : borrowed f)
  val inv6 (_x : borrowed f) : bool
    ensures { result = inv6 _x }
    
  predicate postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_once0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  predicate inv5 (_x : b)
  val inv5 (_x : b) : bool
    ensures { result = inv5 _x }
    
  predicate inv2 (_x : f)
  val inv2 (_x : f) : bool
    ensures { result = inv2 _x }
    
  function fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val fn_mut_once0 (self : f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv2 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv9 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv5 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv9 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv5 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv6 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv2 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv2 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv2 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv2 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv2 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv2 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv6 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv9 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv5 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : (item0, Ghost.ghost_ty (Seq.seq item0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv6 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv9 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv5 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate invariant7 (self : Seq.seq item0)
  val invariant7 (self : Seq.seq item0) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Seq.seq item0)
  val inv7 (_x : Seq.seq item0) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Seq.seq item0 . inv7 x = true
  predicate invariant6 (self : borrowed f)
  val invariant6 (self : borrowed f) : bool
    ensures { result = invariant6 self }
    
  axiom inv6 : forall x : borrowed f . inv6 x = true
  predicate invariant5 (self : b)
  val invariant5 (self : b) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : b . inv5 x = true
  predicate invariant4 (self : borrowed i)
  val invariant4 (self : borrowed i) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed i)
  val inv4 (_x : borrowed i) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed i . inv4 x = true
  predicate inv0 (_x : i)
  val inv0 (_x : i) : bool
    ensures { result = inv0 _x }
    
  predicate precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = precondition0 self _2 }
    
  use prelude.Ghost
  predicate produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces0 self visited _o }
    
  use seq.Seq
  predicate inv1 (_x : item0)
  val inv1 (_x : item0) : bool
    ensures { result = inv1 _x }
    
  predicate next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item0 . inv0 i -> inv1 e -> produces0 iter (Seq.singleton e) i -> precondition0 func (e, Ghost.new produced)
  val next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    ensures { result = next_precondition0 iter func produced }
    
  use seq.Seq
  use seq.Seq
  predicate preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv0 i -> inv5 b -> inv6 f -> inv1 e2 -> inv1 e1 -> inv7 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new s) -> postcondition_mut0 f (e1, Ghost.new s) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  use seq.Seq
  predicate preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv0 i -> inv5 b -> inv6 f -> inv1 e2 -> inv1 e1 -> inv7 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new (Seq.(++) produced s)) -> postcondition_mut0 f (e1, Ghost.new (Seq.(++) produced s)) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) produced s) e1))
  val preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    requires {[#"../06_map_precond.rs" 93 24 93 28] inv0 iter}
    requires {[#"../06_map_precond.rs" 93 33 93 37] inv2 func}
    requires {[#"../06_map_precond.rs" 93 42 93 50] inv7 produced}
    ensures { result = preservation_inv0 iter func produced }
    
  axiom preservation_inv0_spec : forall iter : i, func : f, produced : Seq.seq item0 . ([#"../06_map_precond.rs" 93 24 93 28] inv0 iter) -> ([#"../06_map_precond.rs" 93 33 93 37] inv2 func) -> ([#"../06_map_precond.rs" 93 42 93 50] inv7 produced) -> ([#"../06_map_precond.rs" 92 4 92 83] produced = Seq.empty  -> preservation_inv0 iter func produced = preservation0 iter func)
  use prelude.Ghost
  predicate completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed0 self }
    
  predicate reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv2 func -> inv4 iter -> completed0 iter -> next_precondition0 ( ^ iter) func (Seq.empty ) /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate invariant3 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize0 () /\ preservation_inv0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) /\ next_precondition0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self))
  val invariant3 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : C06MapPrecond_Map_Type.t_map i b f item0)
  val inv3 (_x : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : C06MapPrecond_Map_Type.t_map i b f item0 . inv3 x = (invariant3 x /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  predicate invariant2 (self : f)
  val invariant2 (self : f) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : f . inv2 x = true
  predicate invariant1 (self : item0)
  val invariant1 (self : item0) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : item0 . inv1 x = true
  predicate invariant0 (self : i)
  val invariant0 (self : i) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : i . inv0 x = true
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces0 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces0 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv0 a}
    requires {[#"../common.rs" 21 31 21 33] inv7 ab}
    requires {[#"../common.rs" 21 52 21 53] inv0 b}
    requires {[#"../common.rs" 21 61 21 63] inv7 bc}
    requires {[#"../common.rs" 21 82 21 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces0 a ab b) -> ([#"../common.rs" 19 15 19 32] produces0 b bc c) -> ([#"../common.rs" 21 22 21 23] inv0 a) -> ([#"../common.rs" 21 31 21 33] inv7 ab) -> ([#"../common.rs" 21 52 21 53] inv0 b) -> ([#"../common.rs" 21 61 21 63] inv7 bc) -> ([#"../common.rs" 21 82 21 83] inv0 c) -> ([#"../common.rs" 20 14 20 42] produces0 a (Seq.(++) ab bc) c)
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv0 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv0 a) -> ([#"../common.rs" 14 14 14 39] produces0 a (Seq.empty ) a)
  let rec cfg map [#"../06_map_precond.rs" 170 0 173 17] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map i b f item0
    requires {[#"../06_map_precond.rs" 166 0 166 128] forall i2 : i . forall e : item0 . inv0 i2 -> inv1 e -> produces0 iter (Seq.singleton e) i2 -> precondition0 func (e, Ghost.new (Seq.empty ))}
    requires {[#"../06_map_precond.rs" 167 11 167 41] reinitialize0 ()}
    requires {[#"../06_map_precond.rs" 168 11 168 51] preservation0 iter func}
    requires {[#"../06_map_precond.rs" 171 4 171 8] inv0 iter}
    requires {[#"../06_map_precond.rs" 172 4 172 8] inv2 func}
    ensures { [#"../06_map_precond.rs" 169 10 169 72] result = C06MapPrecond_Map_Type.C_Map iter func (Ghost.new (Seq.empty )) }
    ensures { [#"../06_map_precond.rs" 173 5 173 17] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06MapPrecond_Map_Type.t_map i b f item0;
  var iter : i = iter;
  var func : f = func;
  var _9 : Ghost.ghost_ty (Seq.seq item0);
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    [#"../06_map_precond.rs" 174 32 174 48] _9 <- ([#"../06_map_precond.rs" 174 32 174 48] Ghost.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    [#"../06_map_precond.rs" 174 4 174 50] _0 <- ([#"../06_map_precond.rs" 174 4 174 50] C06MapPrecond_Map_Type.C_Map ([#"../06_map_precond.rs" 174 10 174 14] iter) ([#"../06_map_precond.rs" 174 16 174 20] func) _9);
    [#"../06_map_precond.rs" 174 10 174 14] iter <- any i;
    [#"../06_map_precond.rs" 174 16 174 20] func <- any f;
    _9 <- any Ghost.ghost_ty (Seq.seq item0);
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module C06MapPrecond_Identity_Closure0_Type
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Ghost
  use prelude.Int16
  type c06mapprecond_identity_closure0 'i =
    | C06MapPrecond_Identity_Closure0
    
end
module C06MapPrecond_Identity_Closure0
  type i
  type item0
  use seq.Seq
  predicate invariant3 (self : Seq.seq item0)
  val invariant3 (self : Seq.seq item0) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq item0)
  val inv3 (_x : Seq.seq item0) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq item0 . inv3 x = true
  predicate invariant2 (self : i)
  val invariant2 (self : i) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : i)
  val inv2 (_x : i) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : i . inv2 x = true
  predicate invariant1 (self : item0)
  val invariant1 (self : item0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : item0)
  val inv1 (_x : item0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : item0 . inv1 x = true
  use prelude.Ghost
  predicate invariant0 (self : Ghost.ghost_ty (Seq.seq item0))
  val invariant0 (self : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Ghost.ghost_ty (Seq.seq item0))
  val inv0 (_x : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Ghost.ghost_ty (Seq.seq item0) . inv0 x = true
  use seq.Seq
  predicate produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces0 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces0 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces0 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv2 a}
    requires {[#"../common.rs" 21 31 21 33] inv3 ab}
    requires {[#"../common.rs" 21 52 21 53] inv2 b}
    requires {[#"../common.rs" 21 61 21 63] inv3 bc}
    requires {[#"../common.rs" 21 82 21 83] inv2 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces0 a ab b) -> ([#"../common.rs" 19 15 19 32] produces0 b bc c) -> ([#"../common.rs" 21 22 21 23] inv2 a) -> ([#"../common.rs" 21 31 21 33] inv3 ab) -> ([#"../common.rs" 21 52 21 53] inv2 b) -> ([#"../common.rs" 21 61 21 63] inv3 bc) -> ([#"../common.rs" 21 82 21 83] inv2 c) -> ([#"../common.rs" 20 14 20 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv2 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv2 a) -> ([#"../common.rs" 14 14 14 39] produces0 a (Seq.empty ) a)
  use prelude.Int16
  use C06MapPrecond_Identity_Closure0_Type as C06MapPrecond_Identity_Closure0
  predicate unnest0 [#"../06_map_precond.rs" 178 14 178 20] (self : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) (_2 : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i)
    
   =
    true
  use prelude.Borrow
  predicate resolve1 (self : borrowed (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : Ghost.ghost_ty (Seq.seq item0))
  val resolve0 (self : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg c06MapPrecond_Identity_Closure0 [#"../06_map_precond.rs" 178 14 178 20] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i)) (x : item0) (_3 : Ghost.ghost_ty (Seq.seq item0)) : item0
    requires {[#"../06_map_precond.rs" 178 15 178 16] inv1 x}
    requires {inv0 _3}
    ensures { unnest0 ( * _1) ( ^ _1) }
    ensures { [#"../06_map_precond.rs" 178 14 178 20] inv1 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : item0;
  var _1 : borrowed (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) = _1;
  var x : item0 = x;
  var _3 : Ghost.ghost_ty (Seq.seq item0) = _3;
  {
    goto BB0
  }
  BB0 {
    [#"../06_map_precond.rs" 178 21 178 22] _0 <- ([#"../06_map_precond.rs" 178 21 178 22] x);
    [#"../06_map_precond.rs" 178 21 178 22] x <- any item0;
    assert { [@expl:type invariant] inv0 _3 };
    assume { resolve0 _3 };
    assume { resolve1 _1 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C06MapPrecond_Identity
  type i
  type item0
  use seq.Seq
  use prelude.Ghost
  predicate invariant7 (self : Ghost.ghost_ty (Seq.seq item0))
  val invariant7 (self : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Ghost.ghost_ty (Seq.seq item0))
  val inv7 (_x : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Ghost.ghost_ty (Seq.seq item0) . inv7 x = true
  predicate invariant6 (self : Seq.seq item0)
  val invariant6 (self : Seq.seq item0) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq item0)
  val inv6 (_x : Seq.seq item0) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq item0 . inv6 x = true
  use prelude.Int16
  use C06MapPrecond_Identity_Closure0_Type as C06MapPrecond_Identity_Closure0
  use prelude.Borrow
  predicate invariant5 (self : borrowed (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i))
  val invariant5 (self : borrowed (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i))
  val inv5 (_x : borrowed (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) . inv5 x = true
  predicate invariant4 (self : borrowed i)
  val invariant4 (self : borrowed i) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed i)
  val inv4 (_x : borrowed i) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed i . inv4 x = true
  predicate invariant3 (self : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i)
  val invariant3 (self : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i)
  val inv3 (_x : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i . inv3 x = true
  predicate invariant2 (self : item0)
  val invariant2 (self : item0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : item0)
  val inv2 (_x : item0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : item0 . inv2 x = true
  predicate invariant1 (self : i)
  val invariant1 (self : i) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : i)
  val inv1 (_x : i) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : i . inv1 x = true
  use seq.Seq
  predicate produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces0 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces0 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces0 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv1 a}
    requires {[#"../common.rs" 21 31 21 33] inv6 ab}
    requires {[#"../common.rs" 21 52 21 53] inv1 b}
    requires {[#"../common.rs" 21 61 21 63] inv6 bc}
    requires {[#"../common.rs" 21 82 21 83] inv1 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces0 a ab b) -> ([#"../common.rs" 19 15 19 32] produces0 b bc c) -> ([#"../common.rs" 21 22 21 23] inv1 a) -> ([#"../common.rs" 21 31 21 33] inv6 ab) -> ([#"../common.rs" 21 52 21 53] inv1 b) -> ([#"../common.rs" 21 61 21 63] inv6 bc) -> ([#"../common.rs" 21 82 21 83] inv1 c) -> ([#"../common.rs" 20 14 20 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv1 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv1 a) -> ([#"../common.rs" 14 14 14 39] produces0 a (Seq.empty ) a)
  predicate precondition0 [#"../06_map_precond.rs" 178 14 178 20] (self : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) (args : (item0, Ghost.ghost_ty (Seq.seq item0)))
    
   =
    let (x, _3) = args in true
  use prelude.Ghost
  use seq.Seq
  predicate next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) (produced : Seq.seq item0)
    
   =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item0 . inv1 i -> inv2 e -> produces0 iter (Seq.singleton e) i -> precondition0 func (e, Ghost.new produced)
  val next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) (produced : Seq.seq item0) : bool
    ensures { result = next_precondition0 iter func produced }
    
  predicate unnest0 [#"../06_map_precond.rs" 178 14 178 20] (self : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) (_2 : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i)
    
   =
    true
  predicate postcondition_mut0 [#"../06_map_precond.rs" 178 14 178 20] (self : borrowed (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i)) (args : (item0, Ghost.ghost_ty (Seq.seq item0))) (result : item0)
    
   =
    (let (x, _3) = args in true) /\ unnest0 ( * self) ( ^ self)
  use seq.Seq
  predicate preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i)
    
   =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : item0 . forall f : borrowed (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv1 i -> inv2 b -> inv5 f -> inv2 e2 -> inv2 e1 -> inv6 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new s) -> postcondition_mut0 f (e1, Ghost.new s) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) : bool
    ensures { result = preservation0 iter func }
    
  predicate preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) (produced : Seq.seq item0)
    
   =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : item0 . forall f : borrowed (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv1 i -> inv2 b -> inv5 f -> inv2 e2 -> inv2 e1 -> inv6 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new (Seq.(++) produced s)) -> postcondition_mut0 f (e1, Ghost.new (Seq.(++) produced s)) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) produced s) e1))
  val preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) (produced : Seq.seq item0) : bool
    requires {[#"../06_map_precond.rs" 93 24 93 28] inv1 iter}
    requires {[#"../06_map_precond.rs" 93 33 93 37] inv3 func}
    requires {[#"../06_map_precond.rs" 93 42 93 50] inv6 produced}
    ensures { result = preservation_inv0 iter func produced }
    
  axiom preservation_inv0_spec : forall iter : i, func : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i, produced : Seq.seq item0 . ([#"../06_map_precond.rs" 93 24 93 28] inv1 iter) -> ([#"../06_map_precond.rs" 93 33 93 37] inv3 func) -> ([#"../06_map_precond.rs" 93 42 93 50] inv6 produced) -> ([#"../06_map_precond.rs" 92 4 92 83] produced = Seq.empty  -> preservation_inv0 iter func produced = preservation0 iter func)
  use prelude.Ghost
  predicate completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed0 self }
    
  predicate reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i . forall iter : borrowed i . inv3 func -> inv4 iter -> completed0 iter -> next_precondition0 ( ^ iter) func (Seq.empty ) /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i item0 (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) item0)
    
   =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize0 () /\ preservation_inv0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) /\ next_precondition0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self))
  val invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i item0 (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) item0) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C06MapPrecond_Map_Type.t_map i item0 (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) item0)
    
  val inv0 (_x : C06MapPrecond_Map_Type.t_map i item0 (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) item0) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C06MapPrecond_Map_Type.t_map i item0 (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) item0 . inv0 x = (invariant0 x /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  predicate resolve0 (self : C06MapPrecond_Map_Type.t_map i item0 (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) item0)
    
  val resolve0 (self : C06MapPrecond_Map_Type.t_map i item0 (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) item0) : bool
    ensures { result = resolve0 self }
    
  val map0 [#"../06_map_precond.rs" 170 0 173 17] (iter : i) (func : C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) : C06MapPrecond_Map_Type.t_map i item0 (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) item0
    requires {[#"../06_map_precond.rs" 166 0 166 128] forall i2 : i . forall e : item0 . inv1 i2 -> inv2 e -> produces0 iter (Seq.singleton e) i2 -> precondition0 func (e, Ghost.new (Seq.empty ))}
    requires {[#"../06_map_precond.rs" 167 11 167 41] reinitialize0 ()}
    requires {[#"../06_map_precond.rs" 168 11 168 51] preservation0 iter func}
    requires {[#"../06_map_precond.rs" 171 4 171 8] inv1 iter}
    requires {[#"../06_map_precond.rs" 172 4 172 8] inv3 func}
    ensures { [#"../06_map_precond.rs" 169 10 169 72] result = C06MapPrecond_Map_Type.C_Map iter func (Ghost.new (Seq.empty )) }
    ensures { [#"../06_map_precond.rs" 173 5 173 17] inv0 result }
    
  let rec cfg identity [#"../06_map_precond.rs" 177 0 177 37] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 177 29 177 33] inv1 iter}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter : i = iter;
  var _2 : C06MapPrecond_Map_Type.t_map i item0 (C06MapPrecond_Identity_Closure0.c06mapprecond_identity_closure0 i) item0;
  {
    goto BB0
  }
  BB0 {
    [#"../06_map_precond.rs" 178 4 178 23] _2 <- ([#"../06_map_precond.rs" 178 4 178 23] map0 ([#"../06_map_precond.rs" 178 8 178 12] iter) ([#"../06_map_precond.rs" 178 14 178 22] C06MapPrecond_Identity_Closure0.C06MapPrecond_Identity_Closure0));
    [#"../06_map_precond.rs" 178 8 178 12] iter <- any i;
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 _2 };
    assume { resolve0 _2 };
    goto BB2
  }
  BB2 {
    [#"../06_map_precond.rs" 177 38 179 1] _0 <- ([#"../06_map_precond.rs" 177 38 179 1] ());
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C06MapPrecond_Increment_Closure2_Type
  use prelude.UInt32
  use seq.Seq
  use prelude.Ghost
  use prelude.Int16
  type c06mapprecond_increment_closure2 'u =
    | C06MapPrecond_Increment_Closure2
    
end
module C06MapPrecond_Increment_Closure2
  type u
  use prelude.Int16
  use prelude.UInt32
  use seq.Seq
  use prelude.Ghost
  use C06MapPrecond_Increment_Closure2_Type as C06MapPrecond_Increment_Closure2
  predicate unnest0 [#"../06_map_precond.rs" 189 8 189 35] (self : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) (_2 : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)
    
   =
    true
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Int
  predicate resolve0 (self : borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg c06MapPrecond_Increment_Closure2 [#"../06_map_precond.rs" 189 8 189 35] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)) (x : uint32) (_3 : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 188 19 188 27] UInt32.to_int x <= 15}
    ensures { [#"../06_map_precond.rs" 189 18 189 33] UInt32.to_int result = UInt32.to_int x + 1 }
    ensures { unnest0 ( * _1) ( ^ _1) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) = _1;
  var x : uint32 = x;
  var res : uint32;
  var res1 : uint32;
  {
    goto BB0
  }
  BB0 {
    assume { resolve0 _1 };
    [#"../06_map_precond.rs" 190 20 190 25] res1 <- ([#"../06_map_precond.rs" 190 20 190 25] ([#"../06_map_precond.rs" 190 20 190 21] x) + ([#"../06_map_precond.rs" 190 24 190 25] [#"../06_map_precond.rs" 190 24 190 25] (1 : uint32)));
    [#"../06_map_precond.rs" 188 8 188 29] res <- ([#"../06_map_precond.rs" 188 8 188 29] res1);
    [#"../06_map_precond.rs" 189 8 189 35] _0 <- ([#"../06_map_precond.rs" 189 8 189 35] res);
    return _0
  }
  
end
module C06MapPrecond_Increment
  type u
  use prelude.UInt32
  use seq.Seq
  use prelude.Ghost
  predicate invariant8 (self : Ghost.ghost_ty (Seq.seq uint32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : Ghost.ghost_ty (Seq.seq uint32)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Ghost.ghost_ty (Seq.seq uint32))
  val inv8 (_x : Ghost.ghost_ty (Seq.seq uint32)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Ghost.ghost_ty (Seq.seq uint32) . inv8 x = true
  use prelude.Int16
  use C06MapPrecond_Increment_Closure2_Type as C06MapPrecond_Increment_Closure2
  use prelude.Borrow
  predicate invariant7 (self : borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u))
  val inv7 (_x : borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) . inv7 x = true
  predicate invariant6 (self : Seq.seq (borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)))
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : Seq.seq (borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u))) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq (borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)))
  val inv6 (_x : Seq.seq (borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u))) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq (borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)) . inv6 x = true
  predicate invariant5 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : Seq.seq uint32) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq uint32)
  val inv5 (_x : Seq.seq uint32) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq uint32 . inv5 x = true
  predicate invariant4 (self : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)
  val inv4 (_x : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u . inv4 x = true
  predicate invariant3 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : uint32) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : uint32)
  val inv3 (_x : uint32) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : uint32 . inv3 x = true
  predicate invariant2 (self : u)
  val invariant2 (self : u) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : u)
  val inv2 (_x : u) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : u . inv2 x = true
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : u) (visited : Seq.seq uint32) (_o : u)
  val produces1 [#"../common.rs" 8 4 8 66] (self : u) (visited : Seq.seq uint32) (_o : u) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans1 [#"../common.rs" 21 4 21 91] (a : u) (ab : Seq.seq uint32) (b : u) (bc : Seq.seq uint32) (c : u) : ()
    
  val produces_trans1 [#"../common.rs" 21 4 21 91] (a : u) (ab : Seq.seq uint32) (b : u) (bc : Seq.seq uint32) (c : u) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv2 a}
    requires {[#"../common.rs" 21 31 21 33] inv5 ab}
    requires {[#"../common.rs" 21 52 21 53] inv2 b}
    requires {[#"../common.rs" 21 61 21 63] inv5 bc}
    requires {[#"../common.rs" 21 82 21 83] inv2 c}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : u, ab : Seq.seq uint32, b : u, bc : Seq.seq uint32, c : u . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv2 a) -> ([#"../common.rs" 21 31 21 33] inv5 ab) -> ([#"../common.rs" 21 52 21 53] inv2 b) -> ([#"../common.rs" 21 61 21 63] inv5 bc) -> ([#"../common.rs" 21 82 21 83] inv2 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl1 [#"../common.rs" 15 4 15 30] (a : u) : ()
  val produces_refl1 [#"../common.rs" 15 4 15 30] (a : u) : ()
    requires {[#"../common.rs" 15 21 15 22] inv2 a}
    ensures { result = produces_refl1 a }
    
  axiom produces_refl1_spec : forall a : u . ([#"../common.rs" 15 21 15 22] inv2 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  predicate invariant1 (self : borrowed u)
  val invariant1 (self : borrowed u) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed u)
  val inv1 (_x : borrowed u) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed u . inv1 x = true
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate inv0 (_x : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32)
    
  val inv0 (_x : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) : bool
    ensures { result = inv0 _x }
    
  predicate unnest0 [#"../06_map_precond.rs" 189 8 189 35] (self : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) (_2 : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)
    
   =
    true
  use prelude.UInt32
  use prelude.Int
  predicate postcondition_mut0 [#"../06_map_precond.rs" 189 8 189 35] (self : borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    (let (x, _3) = args in UInt32.to_int result = UInt32.to_int x + 1) /\ unnest0 ( * self) ( ^ self)
  predicate precondition0 [#"../06_map_precond.rs" 189 8 189 35] (self : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 188 19 188 27] let (x, _3) = args in UInt32.to_int x <= 15
  use prelude.Ghost
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Ghost
  use prelude.Ghost
  use seq.Seq
  predicate produces0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) (visited : Seq.seq uint32) (succ : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32)
    
   =
    [#"../06_map_precond.rs" 44 8 56 9] unnest0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ) /\ (exists s : Seq.seq uint32 . inv5 s /\ Seq.length s = Seq.length visited /\ produces1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s /\ (exists fs : Seq.seq (borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)) . inv6 fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> unnest0 (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i) /\ precondition0 ( * Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) /\ postcondition_mut0 (Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) (visited : Seq.seq uint32) (succ : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) : bool
    ensures { result = produces0 self visited succ }
    
  function produces_trans0 [#"../06_map_precond.rs" 38 4 38 90] (a : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) (ab : Seq.seq uint32) (b : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) (bc : Seq.seq uint32) (c : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) : ()
    
   =
    [#"../06_map_precond.rs" 33 4 33 10] ()
  val produces_trans0 [#"../06_map_precond.rs" 38 4 38 90] (a : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) (ab : Seq.seq uint32) (b : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) (bc : Seq.seq uint32) (c : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) : ()
    requires {[#"../06_map_precond.rs" 35 15 35 32] produces0 a ab b}
    requires {[#"../06_map_precond.rs" 36 15 36 32] produces0 b bc c}
    requires {[#"../06_map_precond.rs" 38 22 38 23] inv0 a}
    requires {[#"../06_map_precond.rs" 38 31 38 33] inv5 ab}
    requires {[#"../06_map_precond.rs" 38 52 38 53] inv0 b}
    requires {[#"../06_map_precond.rs" 38 61 38 63] inv5 bc}
    requires {[#"../06_map_precond.rs" 38 82 38 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32, ab : Seq.seq uint32, b : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32, bc : Seq.seq uint32, c : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32 . ([#"../06_map_precond.rs" 35 15 35 32] produces0 a ab b) -> ([#"../06_map_precond.rs" 36 15 36 32] produces0 b bc c) -> ([#"../06_map_precond.rs" 38 22 38 23] inv0 a) -> ([#"../06_map_precond.rs" 38 31 38 33] inv5 ab) -> ([#"../06_map_precond.rs" 38 52 38 53] inv0 b) -> ([#"../06_map_precond.rs" 38 61 38 63] inv5 bc) -> ([#"../06_map_precond.rs" 38 82 38 83] inv0 c) -> ([#"../06_map_precond.rs" 37 14 37 42] produces0 a (Seq.(++) ab bc) c)
  function produces_refl0 [#"../06_map_precond.rs" 31 4 31 29] (a : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) : ()
    
   =
    [#"../06_map_precond.rs" 28 4 28 10] ()
  val produces_refl0 [#"../06_map_precond.rs" 31 4 31 29] (a : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) : ()
    requires {[#"../06_map_precond.rs" 31 21 31 22] inv0 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32 . ([#"../06_map_precond.rs" 31 21 31 22] inv0 a) -> ([#"../06_map_precond.rs" 30 14 30 39] produces0 a (Seq.empty ) a)
  use seq.Seq
  predicate next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : u) (func : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) (produced : Seq.seq uint32)
    
   =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : u . forall e : uint32 . inv2 i -> inv3 e -> produces1 iter (Seq.singleton e) i -> precondition0 func (e, Ghost.new produced)
  val next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : u) (func : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) (produced : Seq.seq uint32) : bool
    ensures { result = next_precondition0 iter func produced }
    
  use seq.Seq
  predicate preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : u) (func : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u)
    
   =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : u . forall b : uint32 . forall f : borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) . forall e2 : uint32 . forall e1 : uint32 . forall s : Seq.seq uint32 . inv2 i -> inv3 b -> inv7 f -> inv3 e2 -> inv3 e1 -> inv5 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new s) -> postcondition_mut0 f (e1, Ghost.new s) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : u) (func : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) : bool
    ensures { result = preservation0 iter func }
    
  predicate preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : u) (func : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) (produced : Seq.seq uint32)
    
   =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : u . forall b : uint32 . forall f : borrowed (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) . forall e2 : uint32 . forall e1 : uint32 . forall s : Seq.seq uint32 . inv2 i -> inv3 b -> inv7 f -> inv3 e2 -> inv3 e1 -> inv5 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new (Seq.(++) produced s)) -> postcondition_mut0 f (e1, Ghost.new (Seq.(++) produced s)) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) produced s) e1))
  val preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : u) (func : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) (produced : Seq.seq uint32) : bool
    requires {[#"../06_map_precond.rs" 93 24 93 28] inv2 iter}
    requires {[#"../06_map_precond.rs" 93 33 93 37] inv4 func}
    requires {[#"../06_map_precond.rs" 93 42 93 50] inv5 produced}
    ensures { result = preservation_inv0 iter func produced }
    
  axiom preservation_inv0_spec : forall iter : u, func : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u, produced : Seq.seq uint32 . ([#"../06_map_precond.rs" 93 24 93 28] inv2 iter) -> ([#"../06_map_precond.rs" 93 33 93 37] inv4 func) -> ([#"../06_map_precond.rs" 93 42 93 50] inv5 produced) -> ([#"../06_map_precond.rs" 92 4 92 83] produced = Seq.empty  -> preservation_inv0 iter func produced = preservation0 iter func)
  predicate completed0 [#"../common.rs" 11 4 11 36] (self : borrowed u)
  val completed0 [#"../common.rs" 11 4 11 36] (self : borrowed u) : bool
    ensures { result = completed0 self }
    
  predicate reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u . forall iter : borrowed u . inv4 func -> inv1 iter -> completed0 iter -> next_precondition0 ( ^ iter) func (Seq.empty ) /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  predicate invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32)
    
   =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize0 () /\ preservation_inv0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) /\ next_precondition0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self))
  val invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32 . inv0 x = (invariant0 x /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  predicate resolve0 (self : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32)
    
  val resolve0 (self : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32) : bool
    ensures { result = resolve0 self }
    
  val map0 [#"../06_map_precond.rs" 170 0 173 17] (iter : u) (func : C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32
    requires {[#"../06_map_precond.rs" 166 0 166 128] forall i2 : u . forall e : uint32 . inv2 i2 -> inv3 e -> produces1 iter (Seq.singleton e) i2 -> precondition0 func (e, Ghost.new (Seq.empty ))}
    requires {[#"../06_map_precond.rs" 167 11 167 41] reinitialize0 ()}
    requires {[#"../06_map_precond.rs" 168 11 168 51] preservation0 iter func}
    requires {[#"../06_map_precond.rs" 171 4 171 8] inv2 iter}
    requires {[#"../06_map_precond.rs" 172 4 172 8] inv4 func}
    ensures { [#"../06_map_precond.rs" 169 10 169 72] result = C06MapPrecond_Map_Type.C_Map iter func (Ghost.new (Seq.empty )) }
    ensures { [#"../06_map_precond.rs" 173 5 173 17] inv0 result }
    
  let rec cfg increment [#"../06_map_precond.rs" 185 0 185 50] [@cfg:stackify] [@cfg:subregion_analysis] (iter : u) : ()
    requires {[#"../06_map_precond.rs" 181 0 181 162] forall done_ : borrowed u . inv1 done_ -> completed0 done_ -> (forall steps : Seq.seq uint32 . forall next : u . inv2 next -> produces1 ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 182 0 184 2] forall fin : u . forall prod : Seq.seq uint32 . inv2 fin -> produces1 iter prod fin -> (forall x : int . 0 <= x /\ x < Seq.length prod -> Seq.get prod x <= (10 : uint32))}
    requires {[#"../06_map_precond.rs" 185 42 185 46] inv2 iter}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter : u = iter;
  var i : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    [#"../06_map_precond.rs" 186 12 191 5] i <- ([#"../06_map_precond.rs" 186 12 191 5] map0 ([#"../06_map_precond.rs" 187 8 187 12] iter) ([#"../06_map_precond.rs" 189 8 189 35] C06MapPrecond_Increment_Closure2.C06MapPrecond_Increment_Closure2));
    [#"../06_map_precond.rs" 187 8 187 12] iter <- any u;
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] inv0 i };
    assume { resolve0 i };
    assert { [@expl:assertion] [#"../06_map_precond.rs" 193 4 196 5] forall fin : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2.c06mapprecond_increment_closure2 u) uint32 . forall prod : Seq.seq uint32 . inv0 fin -> produces0 i prod fin -> (forall x : int . 0 <= x /\ x < Seq.length prod -> Seq.get prod x <= (11 : uint32)) };
    goto BB3
  }
  BB3 {
    [#"../06_map_precond.rs" 185 51 197 1] _0 <- ([#"../06_map_precond.rs" 185 51 197 1] ());
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06MapPrecond_Counter_Closure2_Type
  use prelude.UInt32
  use seq.Seq
  use prelude.Ghost
  use prelude.Int16
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  type c06mapprecond_counter_closure2 'i =
    | C06MapPrecond_Counter_Closure2 (borrowed usize)
    
end
module C06MapPrecond_Counter_Closure2
  type i
  use prelude.Int16
  use prelude.UInt32
  use seq.Seq
  use prelude.Ghost
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use C06MapPrecond_Counter_Closure2_Type as C06MapPrecond_Counter_Closure2
  function field_00 [#"../06_map_precond.rs" 206 8 206 41] (self : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) : borrowed usize
    
   =
    let C06MapPrecond_Counter_Closure2.C06MapPrecond_Counter_Closure2 a = self in a
  val field_00 [#"../06_map_precond.rs" 206 8 206 41] (self : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) : borrowed usize
    ensures { result = field_00 self }
    
  predicate unnest0 [#"../06_map_precond.rs" 206 8 206 41] (self : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) (_2 : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i)
    
   =
     ^ field_00 _2 =  ^ field_00 self
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  use prelude.Ghost
  use prelude.UIntSize
  predicate resolve0 (self : borrowed (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg c06MapPrecond_Counter_Closure2 [#"../06_map_precond.rs" 206 8 206 41] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i)) (x : uint32) (_prod : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../06_map_precond.rs" 205 19 205 61] UIntSize.to_int ( * field_00 ( * _1)) = Seq.length (Ghost.inner _prod) /\  * field_00 ( * _1) < max0}
    ensures { [#"../06_map_precond.rs" 206 18 206 39] UIntSize.to_int ( * field_00 ( ^ _1)) = UIntSize.to_int ( * field_00 ( * _1)) + 1 }
    ensures { unnest0 ( * _1) ( ^ _1) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : borrowed (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) = _1;
  var x : uint32 = x;
  var res : uint32;
  var res1 : uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../06_map_precond.rs" 208 12 208 20] _1 <- { _1 with current = (let C06MapPrecond_Counter_Closure2.C06MapPrecond_Counter_Closure2 x0 =  * _1 in C06MapPrecond_Counter_Closure2.C06MapPrecond_Counter_Closure2 ({ (field_00 ( * _1)) with current = ([#"../06_map_precond.rs" 208 12 208 20]  * field_00 ( * _1) + ([#"../06_map_precond.rs" 208 19 208 20] [#"../06_map_precond.rs" 208 19 208 20] (1 : usize))) ; })) ; };
    assume { resolve0 _1 };
    [#"../06_map_precond.rs" 209 12 209 13] res1 <- ([#"../06_map_precond.rs" 209 12 209 13] x);
    [#"../06_map_precond.rs" 205 8 205 63] res <- ([#"../06_map_precond.rs" 205 8 205 63] res1);
    [#"../06_map_precond.rs" 206 8 206 41] _0 <- ([#"../06_map_precond.rs" 206 8 206 41] res);
    return _0
  }
  
end
module C06MapPrecond_Counter
  type i
  use prelude.UInt32
  use seq.Seq
  use prelude.Ghost
  predicate invariant7 (self : Ghost.ghost_ty (Seq.seq uint32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : Ghost.ghost_ty (Seq.seq uint32)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Ghost.ghost_ty (Seq.seq uint32))
  val inv7 (_x : Ghost.ghost_ty (Seq.seq uint32)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Ghost.ghost_ty (Seq.seq uint32) . inv7 x = true
  predicate invariant6 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : Seq.seq uint32) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq uint32)
  val inv6 (_x : Seq.seq uint32) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq uint32 . inv6 x = true
  use prelude.UIntSize
  use prelude.Int16
  use prelude.Borrow
  use C06MapPrecond_Counter_Closure2_Type as C06MapPrecond_Counter_Closure2
  predicate invariant5 (self : borrowed (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : borrowed (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i))
  val inv5 (_x : borrowed (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) . inv5 x = true
  predicate invariant4 (self : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i)
  val inv4 (_x : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i . inv4 x = true
  predicate invariant3 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : uint32) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : uint32)
  val inv3 (_x : uint32) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : uint32 . inv3 x = true
  predicate invariant2 (self : i)
  val invariant2 (self : i) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : i)
  val inv2 (_x : i) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : i . inv2 x = true
  use seq.Seq
  predicate produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq uint32) (_o : i)
  val produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq uint32) (_o : i) : bool
    ensures { result = produces0 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq uint32) (b : i) (bc : Seq.seq uint32) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq uint32) (b : i) (bc : Seq.seq uint32) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces0 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces0 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv2 a}
    requires {[#"../common.rs" 21 31 21 33] inv6 ab}
    requires {[#"../common.rs" 21 52 21 53] inv2 b}
    requires {[#"../common.rs" 21 61 21 63] inv6 bc}
    requires {[#"../common.rs" 21 82 21 83] inv2 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq uint32, b : i, bc : Seq.seq uint32, c : i . ([#"../common.rs" 18 15 18 32] produces0 a ab b) -> ([#"../common.rs" 19 15 19 32] produces0 b bc c) -> ([#"../common.rs" 21 22 21 23] inv2 a) -> ([#"../common.rs" 21 31 21 33] inv6 ab) -> ([#"../common.rs" 21 52 21 53] inv2 b) -> ([#"../common.rs" 21 61 21 63] inv6 bc) -> ([#"../common.rs" 21 82 21 83] inv2 c) -> ([#"../common.rs" 20 14 20 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv2 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv2 a) -> ([#"../common.rs" 14 14 14 39] produces0 a (Seq.empty ) a)
  predicate invariant1 (self : borrowed i)
  val invariant1 (self : borrowed i) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed i)
  val inv1 (_x : borrowed i) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed i . inv1 x = true
  use prelude.Int
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  use prelude.Ghost
  use prelude.UIntSize
  function field_00 [#"../06_map_precond.rs" 206 8 206 41] (self : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) : borrowed usize
    
   =
    let C06MapPrecond_Counter_Closure2.C06MapPrecond_Counter_Closure2 a = self in a
  val field_00 [#"../06_map_precond.rs" 206 8 206 41] (self : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) : borrowed usize
    ensures { result = field_00 self }
    
  predicate precondition0 [#"../06_map_precond.rs" 206 8 206 41] (self : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 205 19 205 61] let (x, _prod) = args in UIntSize.to_int ( * field_00 self) = Seq.length (Ghost.inner _prod) /\  * field_00 self < max0
  use prelude.Ghost
  use seq.Seq
  predicate next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) (produced : Seq.seq uint32)
    
   =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : uint32 . inv2 i -> inv3 e -> produces0 iter (Seq.singleton e) i -> precondition0 func (e, Ghost.new produced)
  val next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) (produced : Seq.seq uint32) : bool
    ensures { result = next_precondition0 iter func produced }
    
  predicate unnest0 [#"../06_map_precond.rs" 206 8 206 41] (self : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) (_2 : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i)
    
   =
     ^ field_00 _2 =  ^ field_00 self
  predicate postcondition_mut0 [#"../06_map_precond.rs" 206 8 206 41] (self : borrowed (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i)) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    (let (x, _prod) = args in UIntSize.to_int ( * field_00 ( ^ self)) = UIntSize.to_int ( * field_00 ( * self)) + 1) /\ unnest0 ( * self) ( ^ self)
  use seq.Seq
  predicate preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i)
    
   =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : uint32 . forall f : borrowed (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) . forall e2 : uint32 . forall e1 : uint32 . forall s : Seq.seq uint32 . inv2 i -> inv3 b -> inv5 f -> inv3 e2 -> inv3 e1 -> inv6 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new s) -> postcondition_mut0 f (e1, Ghost.new s) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) : bool
    ensures { result = preservation0 iter func }
    
  predicate preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) (produced : Seq.seq uint32)
    
   =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : uint32 . forall f : borrowed (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) . forall e2 : uint32 . forall e1 : uint32 . forall s : Seq.seq uint32 . inv2 i -> inv3 b -> inv5 f -> inv3 e2 -> inv3 e1 -> inv6 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new (Seq.(++) produced s)) -> postcondition_mut0 f (e1, Ghost.new (Seq.(++) produced s)) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) produced s) e1))
  val preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) (produced : Seq.seq uint32) : bool
    requires {[#"../06_map_precond.rs" 93 24 93 28] inv2 iter}
    requires {[#"../06_map_precond.rs" 93 33 93 37] inv4 func}
    requires {[#"../06_map_precond.rs" 93 42 93 50] inv6 produced}
    ensures { result = preservation_inv0 iter func produced }
    
  axiom preservation_inv0_spec : forall iter : i, func : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i, produced : Seq.seq uint32 . ([#"../06_map_precond.rs" 93 24 93 28] inv2 iter) -> ([#"../06_map_precond.rs" 93 33 93 37] inv4 func) -> ([#"../06_map_precond.rs" 93 42 93 50] inv6 produced) -> ([#"../06_map_precond.rs" 92 4 92 83] produced = Seq.empty  -> preservation_inv0 iter func produced = preservation0 iter func)
  predicate completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed0 self }
    
  predicate reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i . forall iter : borrowed i . inv4 func -> inv1 iter -> completed0 iter -> next_precondition0 ( ^ iter) func (Seq.empty ) /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) uint32)
    
   =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize0 () /\ preservation_inv0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) /\ next_precondition0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self))
  val invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) uint32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) uint32)
    
  val inv0 (_x : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) uint32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) uint32 . inv0 x = (invariant0 x /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  predicate resolve0 (self : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) uint32)
    
  val resolve0 (self : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) uint32) : bool
    ensures { result = resolve0 self }
    
  val map0 [#"../06_map_precond.rs" 170 0 173 17] (iter : i) (func : C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) uint32
    requires {[#"../06_map_precond.rs" 166 0 166 128] forall i2 : i . forall e : uint32 . inv2 i2 -> inv3 e -> produces0 iter (Seq.singleton e) i2 -> precondition0 func (e, Ghost.new (Seq.empty ))}
    requires {[#"../06_map_precond.rs" 167 11 167 41] reinitialize0 ()}
    requires {[#"../06_map_precond.rs" 168 11 168 51] preservation0 iter func}
    requires {[#"../06_map_precond.rs" 171 4 171 8] inv2 iter}
    requires {[#"../06_map_precond.rs" 172 4 172 8] inv4 func}
    ensures { [#"../06_map_precond.rs" 169 10 169 72] result = C06MapPrecond_Map_Type.C_Map iter func (Ghost.new (Seq.empty )) }
    ensures { [#"../06_map_precond.rs" 173 5 173 17] inv0 result }
    
  let rec cfg counter [#"../06_map_precond.rs" 201 0 201 48] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) : ()
    requires {[#"../06_map_precond.rs" 199 0 199 162] forall done_ : borrowed i . inv1 done_ -> completed0 done_ -> (forall steps : Seq.seq uint32 . forall next : i . inv2 next -> produces0 ( ^ done_) steps next -> steps = Seq.empty  /\  ^ done_ = next)}
    requires {[#"../06_map_precond.rs" 200 0 200 92] forall fin : i . forall prod : Seq.seq uint32 . inv2 fin -> produces0 iter prod fin -> Seq.length prod <= UIntSize.to_int max0}
    requires {[#"../06_map_precond.rs" 201 40 201 44] inv2 iter}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter : i = iter;
  var cnt : usize;
  var _5 : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2.c06mapprecond_counter_closure2 i) uint32;
  var _8 : borrowed usize;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    [#"../06_map_precond.rs" 202 18 202 19] cnt <- ([#"../06_map_precond.rs" 202 18 202 19] [#"../06_map_precond.rs" 202 18 202 19] (0 : usize));
    [#"../06_map_precond.rs" 206 8 206 41] _8 <- Borrow.borrow_mut cnt;
    [#"../06_map_precond.rs" 206 8 206 41] cnt <-  ^ _8;
    [#"../06_map_precond.rs" 203 4 211 5] _5 <- ([#"../06_map_precond.rs" 203 4 211 5] map0 ([#"../06_map_precond.rs" 204 8 204 12] iter) ([#"../06_map_precond.rs" 206 8 206 41] C06MapPrecond_Counter_Closure2.C06MapPrecond_Counter_Closure2 _8));
    [#"../06_map_precond.rs" 204 8 204 12] iter <- any i;
    _8 <- any borrowed usize;
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] inv0 _5 };
    assume { resolve0 _5 };
    goto BB3
  }
  BB3 {
    [#"../06_map_precond.rs" 201 49 212 1] _0 <- ([#"../06_map_precond.rs" 201 49 212 1] ());
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module C06MapPrecond_Impl0
  type i
  type b
  type f
  use prelude.Borrow
  predicate invariant12 (self : borrowed i)
  val invariant12 (self : borrowed i) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : borrowed i)
  val inv12 (_x : borrowed i) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : borrowed i . inv12 x = true
  type item0
  use seq.Seq
  use prelude.Ghost
  predicate invariant11 (self : Ghost.ghost_ty (Seq.seq item0))
  val invariant11 (self : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : Ghost.ghost_ty (Seq.seq item0))
  val inv11 (_x : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : Ghost.ghost_ty (Seq.seq item0) . inv11 x = true
  predicate invariant10 (self : f)
  val invariant10 (self : f) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : f)
  val inv10 (_x : f) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : f . inv10 x = true
  predicate invariant9 (self : i)
  val invariant9 (self : i) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : i)
  val inv9 (_x : i) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : i . inv9 x = true
  predicate invariant8 (self : item0)
  val invariant8 (self : item0) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : item0)
  val inv8 (_x : item0) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : item0 . inv8 x = true
  predicate invariant7 (self : borrowed f)
  val invariant7 (self : borrowed f) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed f)
  val inv7 (_x : borrowed f) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed f . inv7 x = true
  predicate invariant6 (self : b)
  val invariant6 (self : b) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : b)
  val inv6 (_x : b) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : b . inv6 x = true
  predicate invariant5 (self : Seq.seq (borrowed f))
  val invariant5 (self : Seq.seq (borrowed f)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq (borrowed f))
  val inv5 (_x : Seq.seq (borrowed f)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq (borrowed f) . inv5 x = true
  predicate invariant4 (self : Seq.seq item0)
  val invariant4 (self : Seq.seq item0) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Seq.seq item0)
  val inv4 (_x : Seq.seq item0) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq item0 . inv4 x = true
  predicate invariant3 (self : Seq.seq b)
  val invariant3 (self : Seq.seq b) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq b)
  val inv3 (_x : Seq.seq b) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq b . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : Core_Option_Option_Type.t_option b)
  val invariant2 (self : Core_Option_Option_Type.t_option b) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option b)
  val inv2 (_x : Core_Option_Option_Type.t_option b) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option b . inv2 x = true
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate invariant1 (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item0))
  val invariant1 (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item0)) : bool
    ensures { result = invariant1 self }
    
  predicate inv0 (_x : C06MapPrecond_Map_Type.t_map i b f item0)
  val inv0 (_x : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = inv0 _x }
    
  predicate inv1 (_x : borrowed (C06MapPrecond_Map_Type.t_map i b f item0))
  val inv1 (_x : borrowed (C06MapPrecond_Map_Type.t_map i b f item0)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (C06MapPrecond_Map_Type.t_map i b f item0) . inv1 x = (inv0 ( * x) /\ inv0 ( ^ x))
  predicate precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0)))
  val precondition0 (self : f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) : bool
    ensures { result = precondition0 self _2 }
    
  use prelude.Ghost
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  use seq.Seq
  predicate next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item0 . inv9 i -> inv8 e -> produces1 iter (Seq.singleton e) i -> precondition0 func (e, Ghost.new produced)
  val next_precondition0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    ensures { result = next_precondition0 iter func produced }
    
  predicate postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : (item0, Ghost.ghost_ty (Seq.seq item0))) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  use seq.Seq
  use seq.Seq
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  predicate preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv9 i -> inv6 b -> inv7 f -> inv8 e2 -> inv8 e1 -> inv4 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new s) -> postcondition_mut0 f (e1, Ghost.new s) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  use seq.Seq
  predicate preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv9 i -> inv6 b -> inv7 f -> inv8 e2 -> inv8 e1 -> inv4 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1, Ghost.new (Seq.(++) produced s)) -> postcondition_mut0 f (e1, Ghost.new (Seq.(++) produced s)) b -> precondition0 ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) produced s) e1))
  val preservation_inv0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item0) : bool
    requires {[#"../06_map_precond.rs" 93 24 93 28] inv9 iter}
    requires {[#"../06_map_precond.rs" 93 33 93 37] inv10 func}
    requires {[#"../06_map_precond.rs" 93 42 93 50] inv4 produced}
    ensures { result = preservation_inv0 iter func produced }
    
  axiom preservation_inv0_spec : forall iter : i, func : f, produced : Seq.seq item0 . ([#"../06_map_precond.rs" 93 24 93 28] inv9 iter) -> ([#"../06_map_precond.rs" 93 33 93 37] inv10 func) -> ([#"../06_map_precond.rs" 93 42 93 50] inv4 produced) -> ([#"../06_map_precond.rs" 92 4 92 83] produced = Seq.empty  -> preservation_inv0 iter func produced = preservation0 iter func)
  use prelude.Ghost
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  predicate reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv10 func -> inv12 iter -> completed1 iter -> next_precondition0 ( ^ iter) func (Seq.empty ) /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  predicate invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize0 () /\ preservation_inv0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) /\ next_precondition0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self))
  val invariant0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : C06MapPrecond_Map_Type.t_map i b f item0 . inv0 x = (invariant0 x /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  use seq.Seq
  use seq.Seq
  use prelude.Ghost
  use seq.Seq
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item0)
    
   =
    [#"../06_map_precond.rs" 44 8 56 9] unnest0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ) /\ (exists s : Seq.seq item0 . inv4 s /\ Seq.length s = Seq.length visited /\ produces1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) s /\ (exists fs : Seq.seq (borrowed f) . inv5 fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> unnest0 (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i) /\ precondition0 ( * Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) /\ postcondition_mut0 (Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    ensures { result = produces0 self visited succ }
    
  predicate produces_one0 [#"../06_map_precond.rs" 142 4 142 57] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : b) (succ : C06MapPrecond_Map_Type.t_map i b f item0)
    
   =
    [#"../06_map_precond.rs" 143 8 149 9] exists f : borrowed f . inv7 f /\  * f = C06MapPrecond_Map_Type.map_func self /\  ^ f = C06MapPrecond_Map_Type.map_func succ /\ (exists e : item0 . inv8 e /\ produces1 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) (C06MapPrecond_Map_Type.map_iter succ) /\ Ghost.inner (C06MapPrecond_Map_Type.map_produced succ) = Seq.snoc (Ghost.inner (C06MapPrecond_Map_Type.map_produced self)) e /\ precondition0 ( * f) (e, C06MapPrecond_Map_Type.map_produced self) /\ postcondition_mut0 f (e, C06MapPrecond_Map_Type.map_produced self) visited)
  val produces_one0 [#"../06_map_precond.rs" 142 4 142 57] (self : C06MapPrecond_Map_Type.t_map i b f item0) (visited : b) (succ : C06MapPrecond_Map_Type.t_map i b f item0) : bool
    requires {[#"../06_map_precond.rs" 142 20 142 24] inv0 self}
    requires {[#"../06_map_precond.rs" 142 26 142 33] inv6 visited}
    requires {[#"../06_map_precond.rs" 142 38 142 42] inv0 succ}
    ensures { result = produces_one0 self visited succ }
    
  axiom produces_one0_spec : forall self : C06MapPrecond_Map_Type.t_map i b f item0, visited : b, succ : C06MapPrecond_Map_Type.t_map i b f item0 . ([#"../06_map_precond.rs" 142 20 142 24] inv0 self) -> ([#"../06_map_precond.rs" 142 26 142 33] inv6 visited) -> ([#"../06_map_precond.rs" 142 38 142 42] inv0 succ) -> ([#"../06_map_precond.rs" 141 14 141 68] produces_one0 self visited succ = produces0 self (Seq.singleton visited) succ)
  predicate completed0 [#"../06_map_precond.rs" 21 4 21 35] (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item0))
   =
    [#"../06_map_precond.rs" 22 8 25 9] Ghost.inner (C06MapPrecond_Map_Type.map_produced ( ^ self)) = Seq.empty  /\ completed1 (Borrow.borrow_logic (C06MapPrecond_Map_Type.map_iter ( * self)) (C06MapPrecond_Map_Type.map_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1)) /\ C06MapPrecond_Map_Type.map_func ( * self) = C06MapPrecond_Map_Type.map_func ( ^ self)
  val completed0 [#"../06_map_precond.rs" 21 4 21 35] (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item0)) : bool
    ensures { result = completed0 self }
    
  use seq.Seq
  use seq.Seq
  goal produces_refl_refn : [#"../06_map_precond.rs" 31 4 31 29] forall a : C06MapPrecond_Map_Type.t_map i b f item0 . inv0 a -> inv0 a /\ (forall result : () . produces0 a (Seq.empty ) a -> produces0 a (Seq.empty ) a)
  goal next_refn : [#"../06_map_precond.rs" 63 4 63 44] forall self : borrowed (C06MapPrecond_Map_Type.t_map i b f item0) . inv1 self -> inv1 self /\ (forall result : Core_Option_Option_Type.t_option b . inv2 result /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces_one0 ( * self) v ( ^ self)
    end -> inv2 result /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_trans_refn : [#"../06_map_precond.rs" 38 4 38 90] forall a : C06MapPrecond_Map_Type.t_map i b f item0 . forall ab : Seq.seq b . forall b : C06MapPrecond_Map_Type.t_map i b f item0 . forall bc : Seq.seq b . forall c : C06MapPrecond_Map_Type.t_map i b f item0 . inv0 c /\ inv3 bc /\ inv0 b /\ inv3 ab /\ inv0 a /\ produces0 b bc c /\ produces0 a ab b -> inv0 c /\ inv3 bc /\ inv0 b /\ inv3 ab /\ inv0 a /\ produces0 b bc c /\ produces0 a ab b /\ (forall result : () . produces0 a (Seq.(++) ab bc) c -> produces0 a (Seq.(++) ab bc) c)
end
module C06MapPrecond_Impl2
  type i
  type b
  type f
end
