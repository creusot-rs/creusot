
module C01Range_Common_Iterator_Invariant_Stub
  type self
  val ghost predicate invariant' (self : self)
end
module C01Range_Common_Iterator_Invariant_Interface
  type self
  val ghost predicate invariant' (self : self)
end
module C01Range_Common_Iterator_Invariant
  type self
  let rec ghost predicate invariant' [#"../common.rs" 28 4 28 30] (self : self) = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../common.rs" 29 8 29 12] true
end
module C01Range_Range_Type
  use mach.int.Int
  use prelude.IntSize
  type t_range  =
    | C_Range isize isize
    
  let function range_start (self : t_range) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
  let function range_end (self : t_range) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module C01Range_Impl0_Completed_Stub
  use prelude.Borrow
  use C01Range_Range_Type as C01Range_Range_Type
  val ghost predicate completed (self : borrowed (C01Range_Range_Type.t_range))
end
module C01Range_Impl0_Completed_Interface
  use prelude.Borrow
  use C01Range_Range_Type as C01Range_Range_Type
  val ghost predicate completed (self : borrowed (C01Range_Range_Type.t_range))
end
module C01Range_Impl0_Completed
  use prelude.Borrow
  use C01Range_Range_Type as C01Range_Range_Type
  use prelude.IntSize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub as Resolve0 with type t = C01Range_Range_Type.t_range
  let rec ghost predicate completed [#"../01_range.rs" 18 4 18 35] (self : borrowed (C01Range_Range_Type.t_range))
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01_range.rs" 20 12 20 52] Resolve0.resolve self && C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self)
end
module C01Range_Impl0_Produces_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  val ghost predicate produces (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
end
module C01Range_Impl0_Produces_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  val ghost predicate produces (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
end
module C01Range_Impl0_Produces
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  use mach.int.Int64
  let rec ghost predicate produces [#"../01_range.rs" 25 4 25 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01_range.rs" 26 8 32 9] pure {C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o} && C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o && pure {Seq.length visited > 0 -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o} && pure {Seq.length visited = Int64.to_int (C01Range_Range_Type.range_start o) - Int64.to_int (C01Range_Range_Type.range_start self)} && pure {forall i : int . 0 <= i /\ i < Seq.length visited -> Int64.to_int (Seq.get visited i) = Int64.to_int (C01Range_Range_Type.range_start self) + i}
end
module C01Range_Impl0_ProducesRefl_Stub
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  val ghost function produces_refl (a : C01Range_Range_Type.t_range) : ()
end
module C01Range_Impl0_ProducesRefl_Interface
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  val ghost function produces_refl (a : C01Range_Range_Type.t_range) : ()
    ensures { [#"../01_range.rs" 36 14 36 39] Produces0.produces a (Seq.empty ) a }
    
end
module C01Range_Impl0_ProducesRefl
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  let rec ghost function produces_refl [#"../01_range.rs" 37 4 37 29] (a : C01Range_Range_Type.t_range) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01_range.rs" 35 4 35 10] ()
  axiom produces_refl_spec : forall a : C01Range_Range_Type.t_range . [#"../01_range.rs" 36 14 36 39] Produces0.produces a (Seq.empty ) a
end
module C01Range_Impl0_ProducesRefl_Impl
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces as Produces0
  let rec ghost function produces_refl (a : C01Range_Range_Type.t_range) : ()
    ensures { [#"../01_range.rs" 36 14 36 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01_range.rs" 35 4 35 10] ()
end
module C01Range_Impl0_ProducesTrans_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  val ghost function produces_trans (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    
end
module C01Range_Impl0_ProducesTrans_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  val ghost function produces_trans (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    requires {[#"../01_range.rs" 40 15 40 32] Produces0.produces a ab b}
    requires {[#"../01_range.rs" 41 15 41 32] Produces0.produces b bc c}
    ensures { [#"../01_range.rs" 42 14 42 42] Produces0.produces a (Seq.(++) ab bc) c }
    
end
module C01Range_Impl0_ProducesTrans
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  let rec ghost function produces_trans [#"../01_range.rs" 43 4 43 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01_range.rs" 39 4 39 10] ()
  axiom produces_trans_spec : forall a : C01Range_Range_Type.t_range, ab : Seq.seq isize, b : C01Range_Range_Type.t_range, bc : Seq.seq isize, c : C01Range_Range_Type.t_range . ([#"../01_range.rs" 40 15 40 32] Produces0.produces a ab b) -> ([#"../01_range.rs" 41 15 41 32] Produces0.produces b bc c) -> ([#"../01_range.rs" 42 14 42 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Impl0_ProducesTrans_Impl
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces as Produces0
  let rec ghost function produces_trans (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    requires {[#"../01_range.rs" 40 15 40 32] Produces0.produces a ab b}
    requires {[#"../01_range.rs" 41 15 41 32] Produces0.produces b bc c}
    ensures { [#"../01_range.rs" 42 14 42 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01_range.rs" 39 4 39 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C01Range_Impl0_Next_Interface
  use mach.int.Int
  use prelude.IntSize
  use prelude.Borrow
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  clone C01Range_Impl0_Completed_Stub as Completed0
  use Core_Option_Option_Type as Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed (C01Range_Range_Type.t_range)) : Core_Option_Option_Type.t_option isize
    ensures { [#"../01_range.rs" 45 14 48 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C01Range_Impl0_Next
  use mach.int.Int
  use prelude.IntSize
  use prelude.Borrow
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = C01Range_Range_Type.t_range
  clone C01Range_Impl0_Produces as Produces0
  clone C01Range_Impl0_Completed as Completed0 with val Resolve0.resolve = Resolve0.resolve
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec cfg next [@cfg:stackify] [#"../01_range.rs" 49 4 49 39] (self : borrowed (C01Range_Range_Type.t_range)) : Core_Option_Option_Type.t_option isize
    ensures { [#"../01_range.rs" 45 14 48 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option isize;
  var self_1 : borrowed (C01Range_Range_Type.t_range);
  var _3 : bool;
  var _4 : isize;
  var _5 : isize;
  var r_6 : isize;
  var _7 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- C01Range_Range_Type.range_start ( * self_1);
    _5 <- C01Range_Range_Type.range_end ( * self_1);
    _3 <- ([#"../01_range.rs" 50 11 50 33] _4 >= _5);
    switch (_3)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB3
  }
  BB2 {
    r_6 <- C01Range_Range_Type.range_start ( * self_1);
    self_1 <- { self_1 with current = (let C01Range_Range_Type.C_Range a b =  * self_1 in C01Range_Range_Type.C_Range ([#"../01_range.rs" 54 12 54 27] C01Range_Range_Type.range_start ( * self_1) + (1 : isize)) b) };
    assume { Resolve0.resolve self_1 };
    _7 <- r_6;
    _0 <- Core_Option_Option_Type.C_Some _7;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C01Range_Impl1_IntoIter_Interface
  use C01Range_Range_Type as C01Range_Range_Type
  val into_iter [@cfg:stackify] (self : C01Range_Range_Type.t_range) : C01Range_Range_Type.t_range
    ensures { [#"../01_range.rs" 61 14 61 28] result = self }
    
end
module C01Range_Impl1_IntoIter
  use C01Range_Range_Type as C01Range_Range_Type
  let rec cfg into_iter [@cfg:stackify] [#"../01_range.rs" 62 4 62 34] (self : C01Range_Range_Type.t_range) : C01Range_Range_Type.t_range
    ensures { [#"../01_range.rs" 61 14 61 28] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C01Range_Range_Type.t_range;
  var self_1 : C01Range_Range_Type.t_range;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    self_1 <- any C01Range_Range_Type.t_range;
    return _0
  }
  
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
  let function ghost_0 (self : t_ghost 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ghost a -> a
      end
end
module C01Range_SumRange_Interface
  use mach.int.Int
  use mach.int.Int64
  use prelude.IntSize
  val sum_range [@cfg:stackify] (n : isize) : isize
    requires {[#"../01_range.rs" 67 11 67 18] Int64.to_int n >= 0}
    ensures { [#"../01_range.rs" 68 10 68 21] result = n }
    
end
module C01Range_SumRange
  use mach.int.Int
  use mach.int.Int64
  use prelude.IntSize
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use C01Range_Range_Type as C01Range_Range_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = C01Range_Range_Type.t_range
  clone C01Range_Impl0_Completed as Completed0 with val Resolve0.resolve = Resolve0.resolve
  clone C01Range_Impl0_Produces as Produces0
  clone C01Range_Impl0_ProducesTrans as ProducesTrans0 with val Produces0.produces = Produces0.produces, axiom .
  clone C01Range_Impl0_ProducesRefl as ProducesRefl0 with val Produces0.produces = Produces0.produces, axiom .
  clone C01Range_Impl0_Next_Interface as Next0 with val Completed0.completed = Completed0.completed,
    val Produces0.produces = Produces0.produces
  clone C01Range_Impl1_IntoIter_Interface as IntoIter0
  let rec cfg sum_range [@cfg:stackify] [#"../01_range.rs" 69 0 69 35] (n : isize) : isize
    requires {[#"../01_range.rs" 67 11 67 18] Int64.to_int n >= 0}
    ensures { [#"../01_range.rs" 68 10 68 21] result = n }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : isize;
  var n_1 : isize;
  var i_4 : isize;
  var _5 : ();
  var iter_6 : C01Range_Range_Type.t_range;
  var _7 : C01Range_Range_Type.t_range;
  var _8 : isize;
  var iter_old_9 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (C01Range_Range_Type.t_range);
  var _11 : ();
  var produced_12 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq isize);
  var _15 : ();
  var _18 : ();
  var _19 : Core_Option_Option_Type.t_option isize;
  var _20 : borrowed (C01Range_Range_Type.t_range);
  var _21 : isize;
  var i_22 : isize;
  var _23 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq isize);
  var _26 : ();
  var _27 : ();
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : isize);
    _8 <- n_1;
    _7 <- C01Range_Range_Type.C_Range (0 : isize) _8;
    iter_6 <- ([#"../01_range.rs" 71 4 71 54] IntoIter0.into_iter _7);
    goto BB1
  }
  BB1 {
    _11 <- ();
    iter_old_9 <- ([#"../01_range.rs" 71 4 71 54] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter_6);
    goto BB2
  }
  BB2 {
    _15 <- ();
    produced_12 <- ([#"../01_range.rs" 71 4 71 54] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant structural { [#"../01_range.rs" 71 4 71 54] Produces0.produces (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 iter_old_9) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_12) iter_6 };
    invariant user { [#"../01_range.rs" 71 22 71 52] Int64.to_int i_4 = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_12) /\ i_4 <= n_1 };
    _20 <- borrow_mut iter_6;
    iter_6 <-  ^ _20;
    _19 <- ([#"../01_range.rs" 71 4 71 54] Next0.next _20);
    goto BB5
  }
  BB5 {
    switch (_19)
      | Core_Option_Option_Type.C_None -> goto BB6
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB6 {
    _5 <- ();
    _0 <- i_4;
    return _0
  }
  BB7 {
    absurd
  }
  BB8 {
    i_22 <- Core_Option_Option_Type.some_0 _19;
    _26 <- ();
    _23 <- ([#"../01_range.rs" 71 4 71 54] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.snoc (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_12) i_22));
    goto BB9
  }
  BB9 {
    produced_12 <- _23;
    _23 <- any CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq isize);
    i_4 <- ([#"../01_range.rs" 73 8 73 14] i_4 + (1 : isize));
    _18 <- ();
    goto BB4
  }
  
end
module C01Range_Impl0_Item_Type
  use mach.int.Int
  use prelude.IntSize
  type item  =
    isize
end
module C01Range_Common_Iterator_Item_Type
  type self
  type item
end
module C01Range_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C01Range_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C01Range_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C01Range_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  val ghost predicate completed (self : borrowed self)
end
module C01Range_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  val ghost predicate completed (self : borrowed self)
end
module C01Range_Common_Iterator_Completed
  type self
  use prelude.Borrow
  val ghost predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C01Range_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl (a : self) : ()
end
module C01Range_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl (a : self) : ()
    requires {[#"../common.rs" 14 15 14 28] Invariant0.invariant' a}
    ensures { [#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a }
    
end
module C01Range_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C01Range_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C01Range_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 19 15 19 28] Invariant0.invariant' a}
    requires {[#"../common.rs" 20 15 20 28] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 15 21 28] Invariant0.invariant' c}
    requires {[#"../common.rs" 22 15 22 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 23 15 23 32] Produces0.produces b bc c}
    ensures { [#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c }
    
end
module C01Range_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Completed_Stub as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C01Range_Common_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Completed_Interface as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C01Range_Common_Iterator_Invariant_Interface as Invariant0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C01Range_Impl0
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = C01Range_Range_Type.t_range
  clone C01Range_Common_Iterator_Invariant as Invariant0 with type self = C01Range_Range_Type.t_range
  clone C01Range_Impl0_Item_Type as Item0
  clone C01Range_Impl0_Produces as Produces0
  clone C01Range_Impl0_ProducesRefl as ProducesRefl0 with val Produces0.produces = Produces0.produces, axiom .
  clone C01Range_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with type self = C01Range_Range_Type.t_range,
    val produces_refl = ProducesRefl0.produces_refl, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, type Item0.item = Item0.item, axiom .
  clone C01Range_Impl0_Completed as Completed0 with val Resolve0.resolve = Resolve0.resolve
  clone C01Range_Common_Iterator_Completed_Interface as Completed1 with type self = C01Range_Range_Type.t_range,
    val completed = Completed0.completed
  clone C01Range_Common_Iterator_Produces_Interface as Produces1 with type self = C01Range_Range_Type.t_range,
    val produces = Produces0.produces, type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Item_Type as Item1 with type self = C01Range_Range_Type.t_range, type item = Item0.item
  goal produces_refl_spec : forall a : C01Range_Range_Type.t_range . (([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> true) /\ (forall result : () . ([#"../01_range.rs" 36 14 36 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a))
  use mach.int.Int
  use prelude.IntSize
  clone C01Range_Impl0_ProducesTrans as ProducesTrans0 with val Produces0.produces = Produces0.produces, axiom .
  clone C01Range_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with type self = C01Range_Range_Type.t_range,
    val produces_trans = ProducesTrans0.produces_trans, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, type Item0.item = Item0.item, axiom .
  goal produces_trans_spec : forall a : C01Range_Range_Type.t_range, ab : Seq.seq isize, b : C01Range_Range_Type.t_range, bc : Seq.seq isize, c : C01Range_Range_Type.t_range . (([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) && ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) && ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) && ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) && ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../01_range.rs" 41 15 41 32] Produces0.produces b bc c) && ([#"../01_range.rs" 40 15 40 32] Produces0.produces a ab b)) /\ (forall result : () . ([#"../01_range.rs" 42 14 42 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c))
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C01Range_Impl0_Next_Interface as Next0 with val Completed0.completed = Completed0.completed,
    val Produces0.produces = Produces0.produces
  clone C01Range_Common_Iterator_Next_Interface as Next1 with type self = C01Range_Range_Type.t_range,
    val next = Next0.next, val Invariant0.invariant' = Invariant0.invariant', type Item0.item = Item0.item,
    val Completed0.completed = Completed0.completed, val Produces0.produces = Produces0.produces
end
