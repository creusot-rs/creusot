
module C01Range_Range_Type
  use prelude.IntSize
  use prelude.Int
  type t_range  =
    | C_Range isize isize
    
  let function range_start (self : t_range) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range a _ -> a
      end
  let function range_end (self : t_range) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range _ a -> a
      end
end
module C01Range_Impl0_ProducesRefl_Impl
  use C01Range_Range_Type as C01Range_Range_Type
  use seq.Seq
  use prelude.IntSize
  use seq.Seq
  use prelude.IntSize
  use prelude.Int
  use seq.Seq
  predicate produces0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
   =
    [#"../01_range.rs" 32 8 38 9] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o /\ (Seq.length visited > 0
     -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o) /\ Seq.length visited = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  val produces0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range) : bool
    ensures { result = produces0 self visited o }
    
  use seq.Seq
  constant self  : C01Range_Range_Type.t_range
  function produces_refl [#"../01_range.rs" 44 4 44 26] (self : C01Range_Range_Type.t_range) : ()
  goal vc_produces_refl : [#"../01_range.rs" 43 14 43 45] produces0 self (Seq.empty ) self
end
module C01Range_Impl0_ProducesTrans_Impl
  use prelude.IntSize
  use prelude.Int
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  use seq.Seq
  use seq.Seq
  use prelude.IntSize
  use seq.Seq
  predicate produces0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
   =
    [#"../01_range.rs" 32 8 38 9] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o /\ (Seq.length visited > 0
     -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o) /\ Seq.length visited = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  val produces0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range) : bool
    ensures { result = produces0 self visited o }
    
  constant a  : C01Range_Range_Type.t_range
  constant ab  : Seq.seq isize
  constant b  : C01Range_Range_Type.t_range
  constant bc  : Seq.seq isize
  constant c  : C01Range_Range_Type.t_range
  function produces_trans [#"../01_range.rs" 51 4 51 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    
  goal vc_produces_trans : ([#"../01_range.rs" 49 15 49 32] produces0 b bc c)
   -> ([#"../01_range.rs" 48 15 48 32] produces0 a ab b)
   -> ([#"../01_range.rs" 50 14 50 42] produces0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C01Range_Impl0_Next
  use seq.Seq
  use prelude.IntSize
  use seq.Seq
  use prelude.IntSize
  use prelude.Int
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  predicate produces0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
   =
    [#"../01_range.rs" 32 8 38 9] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o /\ (Seq.length visited > 0
     -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o) /\ Seq.length visited = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  val produces0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range) : bool
    ensures { result = produces0 self visited o }
    
  use seq.Seq
  use prelude.Borrow
  predicate resolve0 (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (C01Range_Range_Type.t_range)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 [#"../01_range.rs" 23 4 23 35] (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../01_range.rs" 25 12 25 52] resolve0 self /\ C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self)
  val completed0 [#"../01_range.rs" 23 4 23 35] (self : borrowed (C01Range_Range_Type.t_range)) : bool
    ensures { result = completed0 self }
    
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec cfg next [#"../01_range.rs" 57 4 57 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C01Range_Range_Type.t_range)) : Core_Option_Option_Type.t_option isize
    ensures { [#"../01_range.rs" 53 14 56 5] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option isize;
  var self : borrowed (C01Range_Range_Type.t_range) = self;
  var _3 : bool;
  var r : isize;
  {
    goto BB0
  }
  BB0 {
    [#"../01_range.rs" 58 11 58 33] _3 <- C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self);
    switch (_3)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { resolve0 self };
    [#"../01_range.rs" 59 12 59 16] _0 <- Core_Option_Option_Type.C_None;
    goto BB3
  }
  BB2 {
    [#"../01_range.rs" 61 20 61 30] r <- C01Range_Range_Type.range_start ( * self);
    [#"../01_range.rs" 62 12 62 27] self <- { self with current = (let C01Range_Range_Type.C_Range x0 x1 =  * self in C01Range_Range_Type.C_Range (C01Range_Range_Type.range_start ( * self) + ([#"../01_range.rs" 62 26 62 27] (1 : isize))) x1) ; };
    assume { resolve0 self };
    [#"../01_range.rs" 63 12 63 19] _0 <- Core_Option_Option_Type.C_Some r;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C01Range_Impl1_IntoIter
  use C01Range_Range_Type as C01Range_Range_Type
  let rec cfg into_iter [#"../01_range.rs" 70 4 70 34] [@cfg:stackify] [@cfg:subregion_analysis] (self : C01Range_Range_Type.t_range) : C01Range_Range_Type.t_range
    ensures { [#"../01_range.rs" 69 14 69 28] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C01Range_Range_Type.t_range;
  var self : C01Range_Range_Type.t_range = self;
  {
    goto BB0
  }
  BB0 {
    [#"../01_range.rs" 71 8 71 12] _0 <- self;
    self <- any C01Range_Range_Type.t_range;
    return _0
  }
  
end
module C01Range_SumRange
  use prelude.IntSize
  use prelude.Int
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  use seq.Seq
  use seq.Seq
  use prelude.IntSize
  use seq.Seq
  predicate produces0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
   =
    [#"../01_range.rs" 32 8 38 9] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o /\ (Seq.length visited > 0
     -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o) /\ Seq.length visited = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  val produces0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range) : bool
    ensures { result = produces0 self visited o }
    
  function produces_trans0 [#"../01_range.rs" 51 4 51 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    
   =
    [#"../01_range.rs" 46 4 46 10] ()
  val produces_trans0 [#"../01_range.rs" 51 4 51 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    requires {[#"../01_range.rs" 48 15 48 32] produces0 a ab b}
    requires {[#"../01_range.rs" 49 15 49 32] produces0 b bc c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : C01Range_Range_Type.t_range, ab : Seq.seq isize, b : C01Range_Range_Type.t_range, bc : Seq.seq isize, c : C01Range_Range_Type.t_range . ([#"../01_range.rs" 48 15 48 32] produces0 a ab b)
   -> ([#"../01_range.rs" 49 15 49 32] produces0 b bc c)
   -> ([#"../01_range.rs" 50 14 50 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../01_range.rs" 44 4 44 26] (self : C01Range_Range_Type.t_range) : () =
    [#"../01_range.rs" 41 4 41 10] ()
  val produces_refl0 [#"../01_range.rs" 44 4 44 26] (self : C01Range_Range_Type.t_range) : ()
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : C01Range_Range_Type.t_range . [#"../01_range.rs" 43 14 43 45] produces0 self (Seq.empty ) self
  predicate invariant0 (self : C01Range_Range_Type.t_range) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : C01Range_Range_Type.t_range) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C01Range_Range_Type.t_range)
  val inv0 (_x : C01Range_Range_Type.t_range) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C01Range_Range_Type.t_range . inv0 x = true
  use prelude.Snapshot
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Borrow
  predicate resolve0 (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (C01Range_Range_Type.t_range)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 [#"../01_range.rs" 23 4 23 35] (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../01_range.rs" 25 12 25 52] resolve0 self /\ C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self)
  val completed0 [#"../01_range.rs" 23 4 23 35] (self : borrowed (C01Range_Range_Type.t_range)) : bool
    ensures { result = completed0 self }
    
  val next0 [#"../01_range.rs" 57 4 57 39] (self : borrowed (C01Range_Range_Type.t_range)) : Core_Option_Option_Type.t_option isize
    ensures { [#"../01_range.rs" 53 14 56 5] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  val into_iter0 [#"../01_range.rs" 70 4 70 34] (self : C01Range_Range_Type.t_range) : C01Range_Range_Type.t_range
    ensures { [#"../01_range.rs" 69 14 69 28] result = self }
    
  let rec cfg sum_range [#"../01_range.rs" 77 0 77 35] [@cfg:stackify] [@cfg:subregion_analysis] (n : isize) : isize
    requires {[#"../01_range.rs" 75 11 75 18] IntSize.to_int n >= 0}
    ensures { [#"../01_range.rs" 76 10 76 21] result = n }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : isize;
  var n : isize = n;
  var i : isize;
  var it : C01Range_Range_Type.t_range;
  var _6 : C01Range_Range_Type.t_range;
  var iter_old : Snapshot.snap_ty (C01Range_Range_Type.t_range);
  var produced : Snapshot.snap_ty (Seq.seq isize);
  var _17 : Core_Option_Option_Type.t_option isize;
  var _18 : borrowed (C01Range_Range_Type.t_range);
  var x : isize;
  var _21 : Snapshot.snap_ty (Seq.seq isize);
  {
    goto BB0
  }
  BB0 {
    [#"../01_range.rs" 78 16 78 17] i <- ([#"../01_range.rs" 78 16 78 17] (0 : isize));
    [#"../01_range.rs" 79 17 79 43] _6 <- C01Range_Range_Type.C_Range ([#"../01_range.rs" 79 32 79 33] (0 : isize)) n;
    [#"../01_range.rs" 79 17 79 55] it <- ([#"../01_range.rs" 79 17 79 55] into_iter0 _6);
    _6 <- any C01Range_Range_Type.t_range;
    goto BB1
  }
  BB1 {
    [#"../01_range.rs" 80 19 80 35] iter_old <- ([#"../01_range.rs" 80 19 80 35] Snapshot.new it);
    goto BB2
  }
  BB2 {
    [#"../01_range.rs" 81 23 81 47] produced <- ([#"../01_range.rs" 81 23 81 47] Snapshot.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"../01_range.rs" 82 16 82 23] inv0 it };
    invariant { [#"../01_range.rs" 83 16 83 55] produces0 (Snapshot.inner iter_old) (Snapshot.inner produced) it };
    invariant { [#"../01_range.rs" 84 16 84 46] IntSize.to_int i = Seq.length (Snapshot.inner produced) /\ i <= n };
    goto BB5
  }
  BB5 {
    [#"../01_range.rs" 86 14 86 16] _18 <- Borrow.borrow_mut it;
    [#"../01_range.rs" 86 14 86 16] it <-  ^ _18;
    [#"../01_range.rs" 86 14 86 23] _17 <- ([#"../01_range.rs" 86 14 86 23] next0 _18);
    _18 <- any borrowed (C01Range_Range_Type.t_range);
    goto BB6
  }
  BB6 {
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB7 {
    [#"../01_range.rs" 94 4 94 5] _0 <- i;
    return _0
  }
  BB8 {
    goto BB10
  }
  BB9 {
    assert { [#"../01_range.rs" 86 14 86 23] false };
    absurd
  }
  BB10 {
    [#"../01_range.rs" 87 17 87 18] x <- Core_Option_Option_Type.some_0 _17;
    [#"../01_range.rs" 88 27 88 75] _21 <- ([#"../01_range.rs" 88 27 88 75] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton x)));
    goto BB11
  }
  BB11 {
    [#"../01_range.rs" 88 16 88 75] produced <- _21;
    _21 <- any Snapshot.snap_ty (Seq.seq isize);
    [#"../01_range.rs" 89 16 89 22] i <- i + ([#"../01_range.rs" 89 21 89 22] (1 : isize));
    goto BB4
  }
  
end
module C01Range_Impl0
  use prelude.IntSize
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option isize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Core_Option_Option_Type.t_option isize) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option isize)
  val inv3 (_x : Core_Option_Option_Type.t_option isize) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option isize . inv3 x = true
  use C01Range_Range_Type as C01Range_Range_Type
  use prelude.Borrow
  predicate invariant2 (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : borrowed (C01Range_Range_Type.t_range)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (C01Range_Range_Type.t_range))
  val inv2 (_x : borrowed (C01Range_Range_Type.t_range)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (C01Range_Range_Type.t_range) . inv2 x = true
  use seq.Seq
  predicate invariant1 (self : Seq.seq isize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Seq.seq isize) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq isize)
  val inv1 (_x : Seq.seq isize) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq isize . inv1 x = true
  predicate invariant0 (self : C01Range_Range_Type.t_range) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : C01Range_Range_Type.t_range) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C01Range_Range_Type.t_range)
  val inv0 (_x : C01Range_Range_Type.t_range) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C01Range_Range_Type.t_range . inv0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  predicate resolve0 (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (C01Range_Range_Type.t_range)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 [#"../01_range.rs" 23 4 23 35] (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../01_range.rs" 25 12 25 52] resolve0 self /\ C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self)
  val completed0 [#"../01_range.rs" 23 4 23 35] (self : borrowed (C01Range_Range_Type.t_range)) : bool
    ensures { result = completed0 self }
    
  use seq.Seq
  use seq.Seq
  use prelude.IntSize
  use seq.Seq
  predicate produces0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
   =
    [#"../01_range.rs" 32 8 38 9] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o /\ (Seq.length visited > 0
     -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o) /\ Seq.length visited = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  val produces0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range) : bool
    ensures { result = produces0 self visited o }
    
  goal produces_trans_refn : [#"../01_range.rs" 51 4 51 90] forall a : C01Range_Range_Type.t_range . forall ab : Seq.seq isize . forall b : C01Range_Range_Type.t_range . forall bc : Seq.seq isize . forall c : C01Range_Range_Type.t_range . inv0 c /\ inv1 bc /\ inv0 b /\ inv1 ab /\ inv0 a /\ produces0 b bc c /\ produces0 a ab b
   -> produces0 b bc c /\ produces0 a ab b /\ (forall result : () . produces0 a (Seq.(++) ab bc) c
   -> produces0 a (Seq.(++) ab bc) c)
  goal next_refn : [#"../01_range.rs" 57 4 57 39] forall self : borrowed (C01Range_Range_Type.t_range) . inv2 self
   -> (forall result : Core_Option_Option_Type.t_option isize . match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv3 result /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_refl_refn : [#"../01_range.rs" 44 4 44 26] forall self : C01Range_Range_Type.t_range . inv0 self
   -> (forall result : () . produces0 self (Seq.empty ) self  -> produces0 self (Seq.empty ) self)
end
