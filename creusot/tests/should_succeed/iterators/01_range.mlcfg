
module C01Range_Common_Iterator_Invariant_Stub
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C01Range_Common_Iterator_Invariant_Interface
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C01Range_Common_Iterator_Invariant
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self) =
    [#"../common.rs" 29 8 29 12] true
  val invariant' [#"../common.rs" 28 4 28 30] (self : self) : bool
    ensures { result = invariant' self }
    
end
module C01Range_Range_Type
  use mach.int.Int
  use prelude.IntSize
  type t_range  =
    | C_Range isize isize
    
  let function range_start (self : t_range) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
  let function range_end (self : t_range) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C01Range_Impl0_Completed_Stub
  use prelude.Borrow
  use C01Range_Range_Type as C01Range_Range_Type
  predicate completed [#"../01_range.rs" 21 4 21 35] (self : borrowed (C01Range_Range_Type.t_range))
end
module C01Range_Impl0_Completed_Interface
  use prelude.Borrow
  use C01Range_Range_Type as C01Range_Range_Type
  predicate completed [#"../01_range.rs" 21 4 21 35] (self : borrowed (C01Range_Range_Type.t_range))
end
module C01Range_Impl0_Completed
  use prelude.Borrow
  use C01Range_Range_Type as C01Range_Range_Type
  use mach.int.Int
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = C01Range_Range_Type.t_range
  predicate completed [#"../01_range.rs" 21 4 21 35] (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../01_range.rs" 23 12 23 52] Resolve0.resolve self /\ C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self)
  val completed [#"../01_range.rs" 21 4 21 35] (self : borrowed (C01Range_Range_Type.t_range)) : bool
    ensures { result = completed self }
    
end
module C01Range_Impl0_Produces_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  predicate produces [#"../01_range.rs" 28 4 28 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
end
module C01Range_Impl0_Produces_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  predicate produces [#"../01_range.rs" 28 4 28 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
end
module C01Range_Impl0_Produces
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  use mach.int.Int64
  predicate produces [#"../01_range.rs" 28 4 28 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
   =
    [#"../01_range.rs" 29 8 35 9] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o /\ (Seq.length visited > 0 -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o) /\ Seq.length visited = Int64.to_int (C01Range_Range_Type.range_start o) - Int64.to_int (C01Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Int64.to_int (Seq.get visited i) = Int64.to_int (C01Range_Range_Type.range_start self) + i)
  val produces [#"../01_range.rs" 28 4 28 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range) : bool
    ensures { result = produces self visited o }
    
end
module C01Range_Impl0_ProducesRefl_Stub
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  function produces_refl [#"../01_range.rs" 40 4 40 29] (a : C01Range_Range_Type.t_range) : ()
end
module C01Range_Impl0_ProducesRefl_Interface
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  function produces_refl [#"../01_range.rs" 40 4 40 29] (a : C01Range_Range_Type.t_range) : ()
  axiom produces_refl_spec : forall a : C01Range_Range_Type.t_range . [#"../01_range.rs" 39 14 39 39] Produces0.produces a (Seq.empty ) a
end
module C01Range_Impl0_ProducesRefl
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  function produces_refl [#"../01_range.rs" 40 4 40 29] (a : C01Range_Range_Type.t_range) : () =
    [#"../01_range.rs" 38 4 38 10] ()
  val produces_refl [#"../01_range.rs" 40 4 40 29] (a : C01Range_Range_Type.t_range) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C01Range_Range_Type.t_range . [#"../01_range.rs" 39 14 39 39] Produces0.produces a (Seq.empty ) a
end
module C01Range_Impl0_ProducesRefl_Impl
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces as Produces0
  let rec ghost function produces_refl [#"../01_range.rs" 40 4 40 29] (a : C01Range_Range_Type.t_range) : ()
    ensures { [#"../01_range.rs" 39 14 39 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01_range.rs" 38 4 38 10] ()
end
module C01Range_Impl0_ProducesTrans_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  function produces_trans [#"../01_range.rs" 46 4 46 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    
end
module C01Range_Impl0_ProducesTrans_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  function produces_trans [#"../01_range.rs" 46 4 46 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    
  axiom produces_trans_spec : forall a : C01Range_Range_Type.t_range, ab : Seq.seq isize, b : C01Range_Range_Type.t_range, bc : Seq.seq isize, c : C01Range_Range_Type.t_range . ([#"../01_range.rs" 43 15 43 32] Produces0.produces a ab b) -> ([#"../01_range.rs" 44 15 44 32] Produces0.produces b bc c) -> ([#"../01_range.rs" 45 14 45 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Impl0_ProducesTrans
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  function produces_trans [#"../01_range.rs" 46 4 46 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    
   =
    [#"../01_range.rs" 42 4 42 10] ()
  val produces_trans [#"../01_range.rs" 46 4 46 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    requires {[#"../01_range.rs" 43 15 43 32] Produces0.produces a ab b}
    requires {[#"../01_range.rs" 44 15 44 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C01Range_Range_Type.t_range, ab : Seq.seq isize, b : C01Range_Range_Type.t_range, bc : Seq.seq isize, c : C01Range_Range_Type.t_range . ([#"../01_range.rs" 43 15 43 32] Produces0.produces a ab b) -> ([#"../01_range.rs" 44 15 44 32] Produces0.produces b bc c) -> ([#"../01_range.rs" 45 14 45 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Impl0_ProducesTrans_Impl
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces as Produces0
  let rec ghost function produces_trans [#"../01_range.rs" 46 4 46 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    requires {[#"../01_range.rs" 43 15 43 32] Produces0.produces a ab b}
    requires {[#"../01_range.rs" 44 15 44 32] Produces0.produces b bc c}
    ensures { [#"../01_range.rs" 45 14 45 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01_range.rs" 42 4 42 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C01Range_Impl0_Next_Interface
  use mach.int.Int
  use prelude.IntSize
  use prelude.Borrow
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces_Stub as Produces0
  clone C01Range_Impl0_Completed_Stub as Completed0
  use Core_Option_Option_Type as Core_Option_Option_Type
  val next [@cfg:stackify] [#"../01_range.rs" 52 4 52 39] (self : borrowed (C01Range_Range_Type.t_range)) : Core_Option_Option_Type.t_option isize
    ensures { [#"../01_range.rs" 48 14 51 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C01Range_Impl0_Next
  use mach.int.Int
  use prelude.IntSize
  use prelude.Borrow
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C01Range_Range_Type.t_range
  clone C01Range_Impl0_Produces as Produces0
  clone C01Range_Impl0_Completed as Completed0 with
    predicate Resolve0.resolve = Resolve0.resolve
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec cfg next [@cfg:stackify] [#"../01_range.rs" 52 4 52 39] (self : borrowed (C01Range_Range_Type.t_range)) : Core_Option_Option_Type.t_option isize
    ensures { [#"../01_range.rs" 48 14 51 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option isize;
  var self_1 : borrowed (C01Range_Range_Type.t_range);
  var _3 : bool;
  var _4 : isize;
  var _5 : isize;
  var r_6 : isize;
  var _7 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- C01Range_Range_Type.range_start ( * self_1);
    _5 <- C01Range_Range_Type.range_end ( * self_1);
    _3 <- ([#"../01_range.rs" 53 11 53 33] _4 >= _5);
    switch (_3)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB3
  }
  BB2 {
    r_6 <- C01Range_Range_Type.range_start ( * self_1);
    self_1 <- { self_1 with current = (let C01Range_Range_Type.C_Range a b =  * self_1 in C01Range_Range_Type.C_Range ([#"../01_range.rs" 57 12 57 27] C01Range_Range_Type.range_start ( * self_1) + ([#"../01_range.rs" 57 26 57 27] (1 : isize))) b) };
    assume { Resolve0.resolve self_1 };
    _7 <- r_6;
    _0 <- Core_Option_Option_Type.C_Some _7;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C01Range_Impl1_IntoIter_Interface
  use C01Range_Range_Type as C01Range_Range_Type
  val into_iter [@cfg:stackify] [#"../01_range.rs" 65 4 65 34] (self : C01Range_Range_Type.t_range) : C01Range_Range_Type.t_range
    ensures { [#"../01_range.rs" 64 14 64 28] result = self }
    
end
module C01Range_Impl1_IntoIter
  use C01Range_Range_Type as C01Range_Range_Type
  let rec cfg into_iter [@cfg:stackify] [#"../01_range.rs" 65 4 65 34] (self : C01Range_Range_Type.t_range) : C01Range_Range_Type.t_range
    ensures { [#"../01_range.rs" 64 14 64 28] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C01Range_Range_Type.t_range;
  var self_1 : C01Range_Range_Type.t_range;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    self_1 <- any C01Range_Range_Type.t_range;
    return _0
  }
  
end
module C01Range_Common_Iterator_Item_Type
  type self
  type item
end
module C01Range_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C01Range_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C01Range_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module C01Range_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
end
module C01Range_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C01Range_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  val produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
    requires {[#"../common.rs" 14 15 14 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C01Range_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C01Range_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 19 15 19 28] Invariant0.invariant' a}
    requires {[#"../common.rs" 20 15 20 28] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 15 21 28] Invariant0.invariant' c}
    requires {[#"../common.rs" 22 15 22 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 23 15 23 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Impl0_Item_Type
  use mach.int.Int
  use prelude.IntSize
  type item  =
    isize
end
module C01Range_SumRange_Interface
  use mach.int.Int64
  use mach.int.Int
  use prelude.IntSize
  val sum_range [@cfg:stackify] [#"../01_range.rs" 72 0 72 35] (n : isize) : isize
    requires {[#"../01_range.rs" 70 11 70 18] Int64.to_int n >= 0}
    ensures { [#"../01_range.rs" 71 10 71 21] result = n }
    
end
module C01Range_SumRange
  use mach.int.Int
  use prelude.IntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int64
  use C01Range_Range_Type as C01Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C01Range_Range_Type.t_range
  clone C01Range_Impl0_Item_Type as Item0
  clone C01Range_Impl0_Completed as Completed0 with
    predicate Resolve0.resolve = Resolve0.resolve
  clone C01Range_Impl0_Produces as Produces0
  clone C01Range_Impl0_ProducesTrans as ProducesTrans1 with
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C01Range_Impl0_ProducesRefl as ProducesRefl1 with
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C01Range_Common_Iterator_Invariant as Invariant0 with
    type self = C01Range_Range_Type.t_range
  clone C01Range_Common_Iterator_ProducesTrans as ProducesTrans0 with
    type self = C01Range_Range_Type.t_range,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C01Range_Common_Iterator_ProducesRefl as ProducesRefl0 with
    type self = C01Range_Range_Type.t_range,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C01Range_Impl0_Next_Interface as Next0 with
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone C01Range_Impl1_IntoIter_Interface as IntoIter0
  let rec cfg sum_range [@cfg:stackify] [#"../01_range.rs" 72 0 72 35] (n : isize) : isize
    requires {[#"../01_range.rs" 70 11 70 18] Int64.to_int n >= 0}
    ensures { [#"../01_range.rs" 71 10 71 21] result = n }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : isize;
  var n_1 : isize;
  var i_4 : isize;
  var it_5 : C01Range_Range_Type.t_range;
  var _6 : C01Range_Range_Type.t_range;
  var _7 : isize;
  var iter_old_8 : Ghost.ghost_ty (C01Range_Range_Type.t_range);
  var _10 : ();
  var produced_11 : Ghost.ghost_ty (Seq.seq isize);
  var _14 : ();
  var _15 : ();
  var _19 : ();
  var _20 : Core_Option_Option_Type.t_option isize;
  var _21 : borrowed (C01Range_Range_Type.t_range);
  var _22 : isize;
  var x_23 : isize;
  var _24 : Ghost.ghost_ty (Seq.seq isize);
  var _27 : ();
  var _28 : ();
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    i_4 <- ([#"../01_range.rs" 73 16 73 17] (0 : isize));
    _7 <- n_1;
    _6 <- C01Range_Range_Type.C_Range ([#"../01_range.rs" 74 32 74 33] (0 : isize)) _7;
    it_5 <- ([#"../01_range.rs" 74 17 74 55] IntoIter0.into_iter _6);
    goto BB1
  }
  BB1 {
    _10 <- ();
    iter_old_8 <- ([#"../01_range.rs" 75 19 75 32] Ghost.new it_5);
    goto BB2
  }
  BB2 {
    _14 <- ();
    produced_11 <- ([#"../01_range.rs" 76 23 76 44] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant type_invariant { [#"../01_range.rs" 77 32 77 46] Invariant0.invariant' it_5 };
    invariant structural { [#"../01_range.rs" 78 28 78 67] Produces0.produces (Ghost.inner iter_old_8) (Ghost.inner produced_11) it_5 };
    invariant user { [#"../01_range.rs" 79 22 79 52] Int64.to_int i_4 = Seq.length (Ghost.inner produced_11) /\ i_4 <= n_1 };
    _21 <- borrow_mut it_5;
    it_5 <-  ^ _21;
    _20 <- ([#"../01_range.rs" 81 14 81 23] Next0.next _21);
    goto BB5
  }
  BB5 {
    switch (_20)
      | Core_Option_Option_Type.C_None -> goto BB6
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB6 {
    _15 <- ();
    _0 <- i_4;
    return _0
  }
  BB7 {
    absurd
  }
  BB8 {
    x_23 <- Core_Option_Option_Type.some_0 _20;
    _27 <- ();
    _24 <- ([#"../01_range.rs" 83 27 83 72] Ghost.new (Seq.(++) (Ghost.inner produced_11) (Seq.singleton x_23)));
    goto BB9
  }
  BB9 {
    produced_11 <- _24;
    _24 <- any Ghost.ghost_ty (Seq.seq isize);
    i_4 <- ([#"../01_range.rs" 84 16 84 22] i_4 + ([#"../01_range.rs" 84 21 84 22] (1 : isize)));
    _19 <- ();
    goto BB4
  }
  
end
module C01Range_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C01Range_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C01Range_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C01Range_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C01Range_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C01Range_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  val next [@cfg:stackify] [#"../common.rs" 37 4 37 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C01Range_Common_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Completed_Interface as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C01Range_Common_Iterator_Invariant_Interface as Invariant0 with
    type self = self
  val next [@cfg:stackify] [#"../common.rs" 37 4 37 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C01Range_Impl0
  use seq.Seq
  clone C01Range_Impl0_Item_Type as Item0
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl0_Produces as Produces0
  clone C01Range_Common_Iterator_Invariant as Invariant0 with
    type self = C01Range_Range_Type.t_range
  clone C01Range_Impl0_ProducesRefl as ProducesRefl0 with
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C01Range_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = C01Range_Range_Type.t_range,
    function produces_refl = ProducesRefl0.produces_refl,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  goal produces_refl_spec : forall a : C01Range_Range_Type.t_range . (([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> true) /\ (forall result : () . ([#"../01_range.rs" 39 14 39 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a))
  use mach.int.Int
  use prelude.IntSize
  clone C01Range_Impl0_ProducesTrans as ProducesTrans0 with
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C01Range_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = C01Range_Range_Type.t_range,
    function produces_trans = ProducesTrans0.produces_trans,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  goal produces_trans_spec : forall a : C01Range_Range_Type.t_range, ab : Seq.seq isize, b : C01Range_Range_Type.t_range, bc : Seq.seq isize, c : C01Range_Range_Type.t_range . (([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) && ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) && ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) && ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) && ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../01_range.rs" 44 15 44 32] Produces0.produces b bc c) && ([#"../01_range.rs" 43 15 43 32] Produces0.produces a ab b)) /\ (forall result : () . ([#"../01_range.rs" 45 14 45 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c))
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C01Range_Range_Type.t_range
  clone C01Range_Impl0_Completed as Completed0 with
    predicate Resolve0.resolve = Resolve0.resolve
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C01Range_Impl0_Next_Interface as Next0 with
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone C01Range_Common_Iterator_Next_Interface as Next1 with
    type self = C01Range_Range_Type.t_range,
    val next = Next0.next,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
end
