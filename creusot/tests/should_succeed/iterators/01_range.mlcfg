
module C01Range_Range_Type
  use prelude.Int
  use prelude.IntSize
  type t_range  =
    | C_Range isize isize
    
  let function range_start (self : t_range) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
  let function range_end (self : t_range) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C01Range_Impl1_Completed_Stub
  use prelude.Borrow
  use C01Range_Range_Type as C01Range_Range_Type
  predicate completed [#"../01_range.rs" 25 4 25 35] (self : borrowed (C01Range_Range_Type.t_range))
end
module C01Range_Impl1_Completed_Interface
  use prelude.Borrow
  use C01Range_Range_Type as C01Range_Range_Type
  predicate completed [#"../01_range.rs" 25 4 25 35] (self : borrowed (C01Range_Range_Type.t_range))
  val completed [#"../01_range.rs" 25 4 25 35] (self : borrowed (C01Range_Range_Type.t_range)) : bool
    ensures { result = completed self }
    
end
module C01Range_Impl1_Completed
  use prelude.Borrow
  use prelude.Int
  use C01Range_Range_Type as C01Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = C01Range_Range_Type.t_range
  predicate completed [#"../01_range.rs" 25 4 25 35] (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../01_range.rs" 27 12 27 52] Resolve0.resolve self /\ C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self)
  val completed [#"../01_range.rs" 25 4 25 35] (self : borrowed (C01Range_Range_Type.t_range)) : bool
    ensures { result = completed self }
    
end
module C01Range_Impl1_Produces_Stub
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  predicate produces [#"../01_range.rs" 33 4 33 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
end
module C01Range_Impl1_Produces_Interface
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  predicate produces [#"../01_range.rs" 33 4 33 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
  val produces [#"../01_range.rs" 33 4 33 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range) : bool
    ensures { result = produces self visited o }
    
end
module C01Range_Impl1_Produces
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  predicate produces [#"../01_range.rs" 33 4 33 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
   =
    [#"../01_range.rs" 34 8 40 9] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o /\ (Seq.length visited > 0 -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o) /\ Seq.length visited = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> IntSize.to_int (Seq.get visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  val produces [#"../01_range.rs" 33 4 33 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range) : bool
    ensures { result = produces self visited o }
    
end
module C01Range_Impl1_ProducesRefl_Stub
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl1_Produces_Stub as Produces0
  function produces_refl [#"../01_range.rs" 46 4 46 29] (a : C01Range_Range_Type.t_range) : ()
end
module C01Range_Impl1_ProducesRefl_Interface
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl1_Produces_Stub as Produces0
  function produces_refl [#"../01_range.rs" 46 4 46 29] (a : C01Range_Range_Type.t_range) : ()
  val produces_refl [#"../01_range.rs" 46 4 46 29] (a : C01Range_Range_Type.t_range) : ()
    ensures { [#"../01_range.rs" 45 14 45 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C01Range_Range_Type.t_range . [#"../01_range.rs" 45 14 45 39] Produces0.produces a (Seq.empty ) a
end
module C01Range_Impl1_ProducesRefl
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl1_Produces_Stub as Produces0
  function produces_refl [#"../01_range.rs" 46 4 46 29] (a : C01Range_Range_Type.t_range) : () =
    [#"../01_range.rs" 43 4 43 10] ()
  val produces_refl [#"../01_range.rs" 46 4 46 29] (a : C01Range_Range_Type.t_range) : ()
    ensures { [#"../01_range.rs" 45 14 45 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C01Range_Range_Type.t_range . [#"../01_range.rs" 45 14 45 39] Produces0.produces a (Seq.empty ) a
end
module C01Range_Impl1_ProducesRefl_Impl
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl1_Produces as Produces0
  let rec ghost function produces_refl [#"../01_range.rs" 46 4 46 29] (a : C01Range_Range_Type.t_range) : ()
    ensures { [#"../01_range.rs" 45 14 45 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01_range.rs" 43 4 43 10] ()
end
module C01Range_Impl1_ProducesTrans_Stub
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl1_Produces_Stub as Produces0
  function produces_trans [#"../01_range.rs" 53 4 53 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    
end
module C01Range_Impl1_ProducesTrans_Interface
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl1_Produces_Stub as Produces0
  function produces_trans [#"../01_range.rs" 53 4 53 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    
  val produces_trans [#"../01_range.rs" 53 4 53 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    requires {[#"../01_range.rs" 50 15 50 32] Produces0.produces a ab b}
    requires {[#"../01_range.rs" 51 15 51 32] Produces0.produces b bc c}
    ensures { [#"../01_range.rs" 52 14 52 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C01Range_Range_Type.t_range, ab : Seq.seq isize, b : C01Range_Range_Type.t_range, bc : Seq.seq isize, c : C01Range_Range_Type.t_range . ([#"../01_range.rs" 50 15 50 32] Produces0.produces a ab b) -> ([#"../01_range.rs" 51 15 51 32] Produces0.produces b bc c) -> ([#"../01_range.rs" 52 14 52 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Impl1_ProducesTrans
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl1_Produces_Stub as Produces0
  function produces_trans [#"../01_range.rs" 53 4 53 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    
   =
    [#"../01_range.rs" 48 4 48 10] ()
  val produces_trans [#"../01_range.rs" 53 4 53 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    requires {[#"../01_range.rs" 50 15 50 32] Produces0.produces a ab b}
    requires {[#"../01_range.rs" 51 15 51 32] Produces0.produces b bc c}
    ensures { [#"../01_range.rs" 52 14 52 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C01Range_Range_Type.t_range, ab : Seq.seq isize, b : C01Range_Range_Type.t_range, bc : Seq.seq isize, c : C01Range_Range_Type.t_range . ([#"../01_range.rs" 50 15 50 32] Produces0.produces a ab b) -> ([#"../01_range.rs" 51 15 51 32] Produces0.produces b bc c) -> ([#"../01_range.rs" 52 14 52 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Impl1_ProducesTrans_Impl
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl1_Produces as Produces0
  let rec ghost function produces_trans [#"../01_range.rs" 53 4 53 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    requires {[#"../01_range.rs" 50 15 50 32] Produces0.produces a ab b}
    requires {[#"../01_range.rs" 51 15 51 32] Produces0.produces b bc c}
    ensures { [#"../01_range.rs" 52 14 52 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01_range.rs" 48 4 48 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C01Range_Impl1_Next_Interface
  use prelude.Int
  use prelude.IntSize
  use prelude.Borrow
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl1_Produces_Stub as Produces0
  clone C01Range_Impl1_Completed_Stub as Completed0
  use Core_Option_Option_Type as Core_Option_Option_Type
  val next [#"../01_range.rs" 59 4 59 39] (self : borrowed (C01Range_Range_Type.t_range)) : Core_Option_Option_Type.t_option isize
    ensures { [#"../01_range.rs" 55 14 58 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C01Range_Impl1_Next
  use prelude.Int
  use prelude.IntSize
  use prelude.Borrow
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  clone C01Range_Impl1_Produces as Produces0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C01Range_Range_Type.t_range
  clone C01Range_Impl1_Completed as Completed0 with
    predicate Resolve0.resolve = Resolve0.resolve
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec cfg next [#"../01_range.rs" 59 4 59 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C01Range_Range_Type.t_range)) : Core_Option_Option_Type.t_option isize
    ensures { [#"../01_range.rs" 55 14 58 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option isize;
  var self : borrowed (C01Range_Range_Type.t_range) = self;
  var r : isize;
  {
    goto BB0
  }
  BB0 {
    switch ([#"../01_range.rs" 60 11 60 33] C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self))
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve self };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB3
  }
  BB2 {
    r <- C01Range_Range_Type.range_start ( * self);
    self <- { self with current = (let C01Range_Range_Type.C_Range a b =  * self in C01Range_Range_Type.C_Range ([#"../01_range.rs" 64 12 64 27] C01Range_Range_Type.range_start ( * self) + ([#"../01_range.rs" 64 26 64 27] (1 : isize))) b) };
    assume { Resolve0.resolve self };
    _0 <- Core_Option_Option_Type.C_Some r;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C01Range_Impl2_IntoIter_Interface
  use C01Range_Range_Type as C01Range_Range_Type
  val into_iter [#"../01_range.rs" 72 4 72 34] (self : C01Range_Range_Type.t_range) : C01Range_Range_Type.t_range
    ensures { [#"../01_range.rs" 71 14 71 28] result = self }
    
end
module C01Range_Impl2_IntoIter
  use C01Range_Range_Type as C01Range_Range_Type
  let rec cfg into_iter [#"../01_range.rs" 72 4 72 34] [@cfg:stackify] [@cfg:subregion_analysis] (self : C01Range_Range_Type.t_range) : C01Range_Range_Type.t_range
    ensures { [#"../01_range.rs" 71 14 71 28] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C01Range_Range_Type.t_range;
  var self : C01Range_Range_Type.t_range = self;
  {
    goto BB0
  }
  BB0 {
    _0 <- self;
    self <- any C01Range_Range_Type.t_range;
    return _0
  }
  
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 27 4 27 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module C01Range_Range_Type_Inv
  use C01Range_Range_Type as C01Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C01Range_Range_Type.t_range
  axiom inv_t_range : forall self : C01Range_Range_Type.t_range . Inv0.inv self = true
end
module C01Range_SumRange_Interface
  use prelude.IntSize
  use prelude.Int
  val sum_range [#"../01_range.rs" 79 0 79 35] (n : isize) : isize
    requires {[#"../01_range.rs" 77 11 77 18] IntSize.to_int n >= 0}
    ensures { [#"../01_range.rs" 78 10 78 21] result = n }
    
end
module C01Range_SumRange
  use prelude.Int
  use prelude.IntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use C01Range_Range_Type as C01Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C01Range_Range_Type.t_range
  clone C01Range_Impl1_Completed as Completed0 with
    predicate Resolve0.resolve = Resolve0.resolve
  clone C01Range_Impl1_Produces as Produces0
  clone C01Range_Impl1_ProducesTrans as ProducesTrans0 with
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C01Range_Impl1_ProducesRefl as ProducesRefl0 with
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C01Range_Range_Type.t_range
  clone C01Range_Range_Type_Inv as C01Range_Range_Type_Inv0 with
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C01Range_Impl1_Next_Interface as Next0 with
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone C01Range_Impl2_IntoIter_Interface as IntoIter0
  let rec cfg sum_range [#"../01_range.rs" 79 0 79 35] [@cfg:stackify] [@cfg:subregion_analysis] (n : isize) : isize
    requires {[#"../01_range.rs" 77 11 77 18] IntSize.to_int n >= 0}
    ensures { [#"../01_range.rs" 78 10 78 21] result = n }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : isize;
  var n : isize = n;
  var i : isize;
  var it : C01Range_Range_Type.t_range;
  var iter_old : Ghost.ghost_ty (C01Range_Range_Type.t_range);
  var produced : Ghost.ghost_ty (Seq.seq isize);
  var _17 : Core_Option_Option_Type.t_option isize;
  var _18 : borrowed (C01Range_Range_Type.t_range);
  var x : isize;
  var _21 : Ghost.ghost_ty (Seq.seq isize);
  {
    goto BB0
  }
  BB0 {
    i <- ([#"../01_range.rs" 80 16 80 17] (0 : isize));
    it <- ([#"../01_range.rs" 81 17 81 55] IntoIter0.into_iter (C01Range_Range_Type.C_Range ([#"../01_range.rs" 81 32 81 33] (0 : isize)) n));
    goto BB1
  }
  BB1 {
    iter_old <- ([#"../01_range.rs" 82 19 82 32] Ghost.new it);
    goto BB2
  }
  BB2 {
    produced <- ([#"../01_range.rs" 83 23 83 44] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"../01_range.rs" 84 16 84 23] Inv0.inv it };
    invariant { [#"../01_range.rs" 85 16 85 55] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) it };
    invariant { [#"../01_range.rs" 86 16 86 46] IntSize.to_int i = Seq.length (Ghost.inner produced) /\ i <= n };
    goto BB5
  }
  BB5 {
    _18 <- borrow_mut it;
    it <-  ^ _18;
    _17 <- ([#"../01_range.rs" 88 14 88 23] Next0.next _18);
    _18 <- any borrowed (C01Range_Range_Type.t_range);
    goto BB6
  }
  BB6 {
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB7 {
    _0 <- i;
    return _0
  }
  BB8 {
    goto BB10
  }
  BB9 {
    absurd
  }
  BB10 {
    x <- Core_Option_Option_Type.some_0 _17;
    _21 <- ([#"../01_range.rs" 90 27 90 72] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton x)));
    goto BB11
  }
  BB11 {
    produced <- _21;
    _21 <- any Ghost.ghost_ty (Seq.seq isize);
    i <- ([#"../01_range.rs" 91 16 91 22] i + ([#"../01_range.rs" 91 21 91 22] (1 : isize)));
    goto BB4
  }
  
end
module C01Range_Impl0
  
end
module TyInv_Borrow
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  axiom inv_borrow [@rewrite] : forall self : borrowed t . Inv0.inv self = Inv1.inv ( * self)
end
module C01Range_Common_Iterator_Item_Type
  type self
  type item
end
module C01Range_Impl1
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  use prelude.Borrow
  use C01Range_Range_Type as C01Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C01Range_Range_Type.t_range
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C01Range_Range_Type.t_range
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (C01Range_Range_Type.t_range)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C01Range_Range_Type.t_range,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone C01Range_Range_Type_Inv as C01Range_Range_Type_Inv0 with
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C01Range_Common_Iterator_Item_Type as Item0 with
    type self = C01Range_Range_Type.t_range
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C01Range_Impl1_Completed as Completed0 with
    predicate Resolve0.resolve = Resolve0.resolve
  clone C01Range_Impl1_Produces as Produces0
  goal produces_trans_refn : [#"../01_range.rs" 53 4 53 90] forall a : C01Range_Range_Type.t_range . forall ab : Seq.seq isize . forall b : C01Range_Range_Type.t_range . forall bc : Seq.seq isize . forall c : C01Range_Range_Type.t_range . Inv0.inv c /\ Inv0.inv b /\ Inv0.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
  goal produces_refl_refn : [#"../01_range.rs" 46 4 46 29] forall a : C01Range_Range_Type.t_range . Inv0.inv a -> (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
  goal next_refn : [#"../01_range.rs" 59 4 59 39] forall self : borrowed (C01Range_Range_Type.t_range) . Inv1.inv self -> (forall result : Core_Option_Option_Type.t_option isize . match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end -> Inv0.inv ( ^ self) /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
end
