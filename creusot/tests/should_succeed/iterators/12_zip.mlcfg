
module C12Zip_Zip_Type
  type t_zip 'a 'b =
    | C_Zip 'a 'b
    
  let function zip_a (self : t_zip 'a 'b) : 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Zip a _ -> a
      end
  let function zip_b (self : t_zip 'a 'b) : 'b = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Zip _ a -> a
      end
end
module C12Zip_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C12Zip_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C12Zip_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module C12Zip_Common_Iterator_Item_Type
  type self
  type item
end
module C12Zip_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module C12Zip_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module C12Zip_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C12Zip_Impl0_Completed_Stub
  type a
  type b
  use prelude.Borrow
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate completed [#"../12_zip.rs" 18 4 18 35] (self : borrowed (C12Zip_Zip_Type.t_zip a b))
end
module C12Zip_Impl0_Completed_Interface
  type a
  type b
  use prelude.Borrow
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate completed [#"../12_zip.rs" 18 4 18 35] (self : borrowed (C12Zip_Zip_Type.t_zip a b))
  val completed [#"../12_zip.rs" 18 4 18 35] (self : borrowed (C12Zip_Zip_Type.t_zip a b)) : bool
    ensures { result = completed self }
    
end
module C12Zip_Impl0_Completed
  type a
  type b
  use prelude.Borrow
  use seq.Seq
  clone C12Zip_Common_Iterator_Completed_Stub as Completed1 with
    type self = b
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = Item0.item
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = a,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Item0.item
  clone C12Zip_Common_Iterator_Completed_Stub as Completed0 with
    type self = a
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate completed [#"../12_zip.rs" 18 4 18 35] (self : borrowed (C12Zip_Zip_Type.t_zip a b)) =
    [#"../12_zip.rs" 20 13 22 67] Completed0.completed {current = C12Zip_Zip_Type.zip_a ( * self); final = C12Zip_Zip_Type.zip_a ( ^ self)} /\ C12Zip_Zip_Type.zip_b ( * self) = C12Zip_Zip_Type.zip_b ( ^ self) \/ (exists x : Item0.item . Inv0.inv x /\ Produces0.produces (C12Zip_Zip_Type.zip_a ( * self)) (Seq.singleton x) (C12Zip_Zip_Type.zip_a ( ^ self)) /\ Resolve0.resolve x /\ Completed1.completed {current = C12Zip_Zip_Type.zip_b ( * self); final = C12Zip_Zip_Type.zip_b ( ^ self)})
  val completed [#"../12_zip.rs" 18 4 18 35] (self : borrowed (C12Zip_Zip_Type.t_zip a b)) : bool
    ensures { result = completed self }
    
end
module C12Zip_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
end
module C12Zip_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Inv0.inv a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Inv0.inv a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C12Zip_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Inv0.inv a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Inv0.inv a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C12Zip_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C12Zip_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Inv0.inv a}
    requires {[#"../common.rs" 21 31 21 33] Inv1.inv ab}
    requires {[#"../common.rs" 21 52 21 53] Inv0.inv b}
    requires {[#"../common.rs" 21 61 21 63] Inv1.inv bc}
    requires {[#"../common.rs" 21 82 21 83] Inv0.inv c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Inv0.inv a) -> ([#"../common.rs" 21 31 21 33] Inv1.inv ab) -> ([#"../common.rs" 21 52 21 53] Inv0.inv b) -> ([#"../common.rs" 21 61 21 63] Inv1.inv bc) -> ([#"../common.rs" 21 82 21 83] Inv0.inv c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C12Zip_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Inv0.inv a}
    requires {[#"../common.rs" 21 31 21 33] Inv1.inv ab}
    requires {[#"../common.rs" 21 52 21 53] Inv0.inv b}
    requires {[#"../common.rs" 21 61 21 63] Inv1.inv bc}
    requires {[#"../common.rs" 21 82 21 83] Inv0.inv c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Inv0.inv a) -> ([#"../common.rs" 21 31 21 33] Inv1.inv ab) -> ([#"../common.rs" 21 52 21 53] Inv0.inv b) -> ([#"../common.rs" 21 61 21 63] Inv1.inv bc) -> ([#"../common.rs" 21 82 21 83] Inv0.inv c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C12Zip_Impl0_Produces_Stub
  type a
  type b
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate produces [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (Item0.item, Item1.item)) (tl : C12Zip_Zip_Type.t_zip a b)
    
end
module C12Zip_Impl0_Produces_Interface
  type a
  type b
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate produces [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (Item0.item, Item1.item)) (tl : C12Zip_Zip_Type.t_zip a b)
    
  val produces [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (Item0.item, Item1.item)) (tl : C12Zip_Zip_Type.t_zip a b) : bool
    ensures { result = produces self visited tl }
    
end
module C12Zip_Impl0_Produces
  type a
  type b
  use seq.Seq
  use prelude.Int
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone C12Zip_Common_Iterator_Produces_Stub as Produces1 with
    type self = b,
    type Item0.item = Item1.item
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = a,
    type Item0.item = Item0.item
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq Item1.item
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate produces [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (Item0.item, Item1.item)) (tl : C12Zip_Zip_Type.t_zip a b)
    
   =
    [#"../12_zip.rs" 29 8 35 9] exists p2 : Seq.seq Item1.item . exists p1 : Seq.seq Item0.item . Inv0.inv p2 /\ Inv1.inv p1 /\ Seq.length p1 = Seq.length p2 /\ Seq.length p2 = Seq.length visited /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i)) /\ Produces0.produces (C12Zip_Zip_Type.zip_a self) p1 (C12Zip_Zip_Type.zip_a tl) /\ Produces1.produces (C12Zip_Zip_Type.zip_b self) p2 (C12Zip_Zip_Type.zip_b tl)
  val produces [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (Item0.item, Item1.item)) (tl : C12Zip_Zip_Type.t_zip a b) : bool
    ensures { result = produces self visited tl }
    
end
module C12Zip_Impl0_ProducesRefl_Stub
  type a
  type b
  use seq.Seq
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C12Zip_Zip_Type.t_zip a b
  function produces_refl [#"../12_zip.rs" 41 4 41 29] (a : C12Zip_Zip_Type.t_zip a b) : ()
end
module C12Zip_Impl0_ProducesRefl_Interface
  type a
  type b
  use seq.Seq
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C12Zip_Zip_Type.t_zip a b
  function produces_refl [#"../12_zip.rs" 41 4 41 29] (a : C12Zip_Zip_Type.t_zip a b) : ()
  val produces_refl [#"../12_zip.rs" 41 4 41 29] (a : C12Zip_Zip_Type.t_zip a b) : ()
    requires {[#"../12_zip.rs" 41 21 41 22] Inv0.inv a}
    ensures { [#"../12_zip.rs" 40 14 40 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C12Zip_Zip_Type.t_zip a b . ([#"../12_zip.rs" 41 21 41 22] Inv0.inv a) -> ([#"../12_zip.rs" 40 14 40 39] Produces0.produces a (Seq.empty ) a)
end
module C12Zip_Impl0_ProducesRefl
  type a
  type b
  use seq.Seq
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C12Zip_Zip_Type.t_zip a b
  function produces_refl [#"../12_zip.rs" 41 4 41 29] (a : C12Zip_Zip_Type.t_zip a b) : () =
    [#"../12_zip.rs" 38 4 38 10] ()
  val produces_refl [#"../12_zip.rs" 41 4 41 29] (a : C12Zip_Zip_Type.t_zip a b) : ()
    requires {[#"../12_zip.rs" 41 21 41 22] Inv0.inv a}
    ensures { [#"../12_zip.rs" 40 14 40 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C12Zip_Zip_Type.t_zip a b . ([#"../12_zip.rs" 41 21 41 22] Inv0.inv a) -> ([#"../12_zip.rs" 40 14 40 39] Produces0.produces a (Seq.empty ) a)
end
module C12Zip_Impl0_ProducesRefl_Impl
  type a
  type b
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = b
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = b,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = a
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = a,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Seq.seq Item0.item
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq Item1.item
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Seq.seq Item1.item,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone C12Zip_Common_Iterator_Produces_Interface as Produces2 with
    type self = b,
    type Item0.item = Item1.item
  clone C12Zip_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = b,
    predicate Produces0.produces = Produces2.produces,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv1.inv,
    type Item0.item = Item1.item,
    axiom .
  clone C12Zip_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = b,
    predicate Inv0.inv = Inv4.inv,
    predicate Produces0.produces = Produces2.produces,
    type Item0.item = Item1.item,
    axiom .
  clone C12Zip_Common_Iterator_Produces_Interface as Produces1 with
    type self = a,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = a,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv2.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C12Zip_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = a,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C12Zip_Zip_Type.t_zip a b
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = C12Zip_Zip_Type.t_zip a b,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C12Zip_Impl0_Produces as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Produces1.produces = Produces2.produces
  let rec ghost function produces_refl [#"../12_zip.rs" 41 4 41 29] (a : C12Zip_Zip_Type.t_zip a b) : ()
    requires {[#"../12_zip.rs" 41 21 41 22] Inv0.inv a}
    ensures { [#"../12_zip.rs" 40 14 40 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../12_zip.rs" 38 4 38 10] ()
end
module C12Zip_Impl0_ProducesTrans_Stub
  type a
  type b
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Item0.item, Item1.item)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C12Zip_Zip_Type.t_zip a b
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  function produces_trans [#"../12_zip.rs" 48 4 48 90] (a : C12Zip_Zip_Type.t_zip a b) (ab : Seq.seq (Item0.item, Item1.item)) (b : C12Zip_Zip_Type.t_zip a b) (bc : Seq.seq (Item0.item, Item1.item)) (c : C12Zip_Zip_Type.t_zip a b) : ()
    
end
module C12Zip_Impl0_ProducesTrans_Interface
  type a
  type b
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Item0.item, Item1.item)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C12Zip_Zip_Type.t_zip a b
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  function produces_trans [#"../12_zip.rs" 48 4 48 90] (a : C12Zip_Zip_Type.t_zip a b) (ab : Seq.seq (Item0.item, Item1.item)) (b : C12Zip_Zip_Type.t_zip a b) (bc : Seq.seq (Item0.item, Item1.item)) (c : C12Zip_Zip_Type.t_zip a b) : ()
    
  val produces_trans [#"../12_zip.rs" 48 4 48 90] (a : C12Zip_Zip_Type.t_zip a b) (ab : Seq.seq (Item0.item, Item1.item)) (b : C12Zip_Zip_Type.t_zip a b) (bc : Seq.seq (Item0.item, Item1.item)) (c : C12Zip_Zip_Type.t_zip a b) : ()
    requires {[#"../12_zip.rs" 45 15 45 32] Produces0.produces a ab b}
    requires {[#"../12_zip.rs" 46 15 46 32] Produces0.produces b bc c}
    requires {[#"../12_zip.rs" 48 22 48 23] Inv0.inv a}
    requires {[#"../12_zip.rs" 48 31 48 33] Inv1.inv ab}
    requires {[#"../12_zip.rs" 48 52 48 53] Inv0.inv b}
    requires {[#"../12_zip.rs" 48 61 48 63] Inv1.inv bc}
    requires {[#"../12_zip.rs" 48 82 48 83] Inv0.inv c}
    ensures { [#"../12_zip.rs" 47 14 47 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C12Zip_Zip_Type.t_zip a b, ab : Seq.seq (Item0.item, Item1.item), b : C12Zip_Zip_Type.t_zip a b, bc : Seq.seq (Item0.item, Item1.item), c : C12Zip_Zip_Type.t_zip a b . ([#"../12_zip.rs" 45 15 45 32] Produces0.produces a ab b) -> ([#"../12_zip.rs" 46 15 46 32] Produces0.produces b bc c) -> ([#"../12_zip.rs" 48 22 48 23] Inv0.inv a) -> ([#"../12_zip.rs" 48 31 48 33] Inv1.inv ab) -> ([#"../12_zip.rs" 48 52 48 53] Inv0.inv b) -> ([#"../12_zip.rs" 48 61 48 63] Inv1.inv bc) -> ([#"../12_zip.rs" 48 82 48 83] Inv0.inv c) -> ([#"../12_zip.rs" 47 14 47 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C12Zip_Impl0_ProducesTrans
  type a
  type b
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Item0.item, Item1.item)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C12Zip_Zip_Type.t_zip a b
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  function produces_trans [#"../12_zip.rs" 48 4 48 90] (a : C12Zip_Zip_Type.t_zip a b) (ab : Seq.seq (Item0.item, Item1.item)) (b : C12Zip_Zip_Type.t_zip a b) (bc : Seq.seq (Item0.item, Item1.item)) (c : C12Zip_Zip_Type.t_zip a b) : ()
    
   =
    [#"../12_zip.rs" 43 4 43 10] ()
  val produces_trans [#"../12_zip.rs" 48 4 48 90] (a : C12Zip_Zip_Type.t_zip a b) (ab : Seq.seq (Item0.item, Item1.item)) (b : C12Zip_Zip_Type.t_zip a b) (bc : Seq.seq (Item0.item, Item1.item)) (c : C12Zip_Zip_Type.t_zip a b) : ()
    requires {[#"../12_zip.rs" 45 15 45 32] Produces0.produces a ab b}
    requires {[#"../12_zip.rs" 46 15 46 32] Produces0.produces b bc c}
    requires {[#"../12_zip.rs" 48 22 48 23] Inv0.inv a}
    requires {[#"../12_zip.rs" 48 31 48 33] Inv1.inv ab}
    requires {[#"../12_zip.rs" 48 52 48 53] Inv0.inv b}
    requires {[#"../12_zip.rs" 48 61 48 63] Inv1.inv bc}
    requires {[#"../12_zip.rs" 48 82 48 83] Inv0.inv c}
    ensures { [#"../12_zip.rs" 47 14 47 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C12Zip_Zip_Type.t_zip a b, ab : Seq.seq (Item0.item, Item1.item), b : C12Zip_Zip_Type.t_zip a b, bc : Seq.seq (Item0.item, Item1.item), c : C12Zip_Zip_Type.t_zip a b . ([#"../12_zip.rs" 45 15 45 32] Produces0.produces a ab b) -> ([#"../12_zip.rs" 46 15 46 32] Produces0.produces b bc c) -> ([#"../12_zip.rs" 48 22 48 23] Inv0.inv a) -> ([#"../12_zip.rs" 48 31 48 33] Inv1.inv ab) -> ([#"../12_zip.rs" 48 52 48 53] Inv0.inv b) -> ([#"../12_zip.rs" 48 61 48 63] Inv1.inv bc) -> ([#"../12_zip.rs" 48 82 48 83] Inv0.inv c) -> ([#"../12_zip.rs" 47 14 47 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C12Zip_Impl0_ProducesTrans_Impl
  type a
  type b
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = b
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = b,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = a
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = a,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Seq.seq Item0.item
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Seq.seq Item1.item
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Seq.seq Item1.item,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone C12Zip_Common_Iterator_Produces_Interface as Produces2 with
    type self = b,
    type Item0.item = Item1.item
  clone C12Zip_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = b,
    predicate Produces0.produces = Produces2.produces,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv2.inv,
    type Item0.item = Item1.item,
    axiom .
  clone C12Zip_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = b,
    predicate Inv0.inv = Inv5.inv,
    predicate Produces0.produces = Produces2.produces,
    type Item0.item = Item1.item,
    axiom .
  clone C12Zip_Common_Iterator_Produces_Interface as Produces1 with
    type self = a,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = a,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv3.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C12Zip_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = a,
    predicate Inv0.inv = Inv4.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq (Item0.item, Item1.item)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Seq.seq (Item0.item, Item1.item),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C12Zip_Zip_Type.t_zip a b
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = C12Zip_Zip_Type.t_zip a b,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C12Zip_Impl0_Produces as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Produces1.produces = Produces2.produces
  let rec ghost function produces_trans [#"../12_zip.rs" 48 4 48 90] (a : C12Zip_Zip_Type.t_zip a b) (ab : Seq.seq (Item0.item, Item1.item)) (b : C12Zip_Zip_Type.t_zip a b) (bc : Seq.seq (Item0.item, Item1.item)) (c : C12Zip_Zip_Type.t_zip a b) : ()
    requires {[#"../12_zip.rs" 45 15 45 32] Produces0.produces a ab b}
    requires {[#"../12_zip.rs" 46 15 46 32] Produces0.produces b bc c}
    requires {[#"../12_zip.rs" 48 22 48 23] Inv0.inv a}
    requires {[#"../12_zip.rs" 48 31 48 33] Inv1.inv ab}
    requires {[#"../12_zip.rs" 48 52 48 53] Inv0.inv b}
    requires {[#"../12_zip.rs" 48 61 48 63] Inv1.inv bc}
    requires {[#"../12_zip.rs" 48 82 48 83] Inv0.inv c}
    ensures { [#"../12_zip.rs" 47 14 47 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../12_zip.rs" 43 4 43 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C12Zip_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone C12Zip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  val next [#"../common.rs" 27 4 27 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 27 17 27 21] Inv0.inv self}
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 26 27 44] Inv1.inv result }
    
end
module C12Zip_Impl0_Next_Interface
  type a
  type b
  use prelude.Borrow
  use seq.Seq
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option (Item0.item, Item1.item)
  clone C12Zip_Impl0_Produces_Stub as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone C12Zip_Impl0_Completed_Stub as Completed0 with
    type a = a,
    type b = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (C12Zip_Zip_Type.t_zip a b)
  val next [#"../12_zip.rs" 54 4 54 44] (self : borrowed (C12Zip_Zip_Type.t_zip a b)) : Core_Option_Option_Type.t_option (Item0.item, Item1.item)
    requires {[#"../12_zip.rs" 54 17 54 21] Inv0.inv self}
    ensures { [#"../12_zip.rs" 50 14 53 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../12_zip.rs" 54 26 54 44] Inv1.inv result }
    
end
module C12Zip_Impl0_Next
  type a
  type b
  use prelude.Borrow
  use seq.Seq
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Seq.seq Item0.item
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Seq.seq Item1.item
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = Seq.seq Item1.item,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = borrowed b
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = borrowed b,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = borrowed a
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = borrowed a,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Core_Option_Option_Type.t_option (Item0.item, Item1.item)
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Core_Option_Option_Type.t_option (Item0.item, Item1.item),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Item0.item,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Core_Option_Option_Type.t_option Item1.item
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Core_Option_Option_Type.t_option Item1.item,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = b
  clone C12Zip_Common_Iterator_Produces_Interface as Produces2 with
    type self = b,
    type Item0.item = Item1.item
  clone C12Zip_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = b,
    predicate Produces0.produces = Produces2.produces,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv9.inv,
    type Item0.item = Item1.item,
    axiom .
  clone C12Zip_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = b,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces2.produces,
    type Item0.item = Item1.item,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = b,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (C12Zip_Zip_Type.t_zip a b)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (C12Zip_Zip_Type.t_zip a b),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Option_Option_Type.t_option Item0.item,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = a
  clone C12Zip_Common_Iterator_Produces_Interface as Produces1 with
    type self = a,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = a,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv10.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C12Zip_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = a,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = a,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C12Zip_Impl0_Produces as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item,
    predicate Inv0.inv = Inv9.inv,
    predicate Inv1.inv = Inv10.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Produces1.produces = Produces2.produces
  clone C12Zip_Common_Iterator_Completed_Interface as Completed2 with
    type self = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = Item0.item
  clone C12Zip_Common_Iterator_Completed_Interface as Completed1 with
    type self = a
  clone C12Zip_Impl0_Completed as Completed0 with
    type a = a,
    type b = b,
    predicate Completed0.completed = Completed1.completed,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv5.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Completed1.completed = Completed2.completed
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Core_Option_Option_Type.t_option Item1.item
  clone C12Zip_Common_Iterator_Next_Interface as Next1 with
    type self = b,
    predicate Inv0.inv = Inv8.inv,
    type Item0.item = Item1.item,
    predicate Completed0.completed = Completed2.completed,
    predicate Produces0.produces = Produces2.produces,
    predicate Inv1.inv = Inv4.inv
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = C12Zip_Zip_Type.t_zip a b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone C12Zip_Common_Iterator_Next_Interface as Next0 with
    type self = a,
    predicate Inv0.inv = Inv7.inv,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv1.inv = Inv1.inv
  let rec cfg next [#"../12_zip.rs" 54 4 54 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C12Zip_Zip_Type.t_zip a b)) : Core_Option_Option_Type.t_option (Item0.item, Item1.item)
    requires {[#"../12_zip.rs" 54 17 54 21] Inv2.inv self}
    ensures { [#"../12_zip.rs" 50 14 53 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../12_zip.rs" 54 26 54 44] Inv6.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (Item0.item, Item1.item);
  var self : borrowed (C12Zip_Zip_Type.t_zip a b) = self;
  var x : Item0.item;
  var _4 : Core_Option_Option_Type.t_option Item0.item;
  var _5 : borrowed a;
  var x1 : Item0.item;
  var y : Item1.item;
  var _10 : Core_Option_Option_Type.t_option Item1.item;
  var _11 : borrowed b;
  var y1 : Item1.item;
  {
    goto BB0
  }
  BB0 {
    _5 <- Borrow.borrow_mut (C12Zip_Zip_Type.zip_a ( * self));
    self <- { self with current = (let C12Zip_Zip_Type.C_Zip a b =  * self in C12Zip_Zip_Type.C_Zip ( ^ _5) b) };
    assume { Inv0.inv ( ^ _5) };
    _4 <- ([#"../12_zip.rs" 55 22 55 35] Next0.next _5);
    _5 <- any borrowed a;
    goto BB1
  }
  BB1 {
    switch (_4)
      | Core_Option_Option_Type.C_None -> goto BB2
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      end
  }
  BB2 {
    goto BB5
  }
  BB3 {
    x1 <- Core_Option_Option_Type.some_0 _4;
    _4 <- (let Core_Option_Option_Type.C_Some a = _4 in Core_Option_Option_Type.C_Some (any Item0.item));
    assert { [@expl:type invariant] Inv1.inv _4 };
    assume { Resolve0.resolve _4 };
    x <- x1;
    x1 <- any Item0.item;
    goto BB6
  }
  BB4 {
    absurd
  }
  BB5 {
    assert { [@expl:type invariant] Inv1.inv _4 };
    assume { Resolve0.resolve _4 };
    assert { [@expl:type invariant] Inv2.inv self };
    assume { Resolve1.resolve self };
    _0 <- ([#"../12_zip.rs" 56 27 56 31] Core_Option_Option_Type.C_None);
    goto BB20
  }
  BB6 {
    goto BB7
  }
  BB7 {
    _11 <- Borrow.borrow_mut (C12Zip_Zip_Type.zip_b ( * self));
    self <- { self with current = (let C12Zip_Zip_Type.C_Zip a b =  * self in C12Zip_Zip_Type.C_Zip a ( ^ _11)) };
    assume { Inv3.inv ( ^ _11) };
    _10 <- ([#"../12_zip.rs" 59 22 59 35] Next1.next _11);
    _11 <- any borrowed b;
    goto BB8
  }
  BB8 {
    assert { [@expl:type invariant] Inv2.inv self };
    assume { Resolve1.resolve self };
    switch (_10)
      | Core_Option_Option_Type.C_None -> goto BB9
      | Core_Option_Option_Type.C_Some _ -> goto BB10
      end
  }
  BB9 {
    goto BB11
  }
  BB10 {
    y1 <- Core_Option_Option_Type.some_0 _10;
    _10 <- (let Core_Option_Option_Type.C_Some a = _10 in Core_Option_Option_Type.C_Some (any Item1.item));
    assert { [@expl:type invariant] Inv4.inv _10 };
    assume { Resolve2.resolve _10 };
    y <- y1;
    y1 <- any Item1.item;
    goto BB12
  }
  BB11 {
    assert { [@expl:type invariant] Inv4.inv _10 };
    assume { Resolve2.resolve _10 };
    assert { [@expl:type invariant] Inv5.inv x };
    assume { Resolve3.resolve x };
    _0 <- ([#"../12_zip.rs" 60 27 60 31] Core_Option_Option_Type.C_None);
    goto BB19
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    _0 <- ([#"../12_zip.rs" 63 8 63 20] Core_Option_Option_Type.C_Some ([#"../12_zip.rs" 63 13 63 19] (x, y)));
    x <- any Item0.item;
    y <- any Item1.item;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB22
  }
  BB19 {
    goto BB21
  }
  BB20 {
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    return _0
  }
  BB30 {
    assert { [@expl:type invariant] Inv1.inv _4 };
    assume { Resolve0.resolve _4 };
    assert { [@expl:type invariant] Inv2.inv self };
    assume { Resolve1.resolve self };
    goto BB4
  }
  BB31 {
    assert { [@expl:type invariant] Inv4.inv _10 };
    assume { Resolve2.resolve _10 };
    assert { [@expl:type invariant] Inv5.inv x };
    assume { Resolve3.resolve x };
    goto BB4
  }
  
end
module C12Zip_Impl0
  type a
  type b
  use seq.Seq
  use prelude.Borrow
  clone C12Zip_Common_Iterator_Item_Type as Item0 with
    type self = a
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Seq.seq Item0.item
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone C12Zip_Common_Iterator_Item_Type as Item1 with
    type self = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Seq.seq Item1.item
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Seq.seq Item1.item,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Core_Option_Option_Type.t_option (Item0.item, Item1.item)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Core_Option_Option_Type.t_option (Item0.item, Item1.item),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (C12Zip_Zip_Type.t_zip a b)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (C12Zip_Zip_Type.t_zip a b),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq (Item0.item, Item1.item)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Seq.seq (Item0.item, Item1.item),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C12Zip_Zip_Type.t_zip a b
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = C12Zip_Zip_Type.t_zip a b,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C12Zip_Common_Iterator_Completed_Interface as Completed2 with
    type self = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Item0.item
  clone C12Zip_Common_Iterator_Produces_Interface as Produces1 with
    type self = a,
    type Item0.item = Item0.item
  clone C12Zip_Common_Iterator_Completed_Interface as Completed1 with
    type self = a
  clone C12Zip_Impl0_Completed as Completed0 with
    type a = a,
    type b = b,
    predicate Completed0.completed = Completed1.completed,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Completed1.completed = Completed2.completed
  clone C12Zip_Common_Iterator_Produces_Interface as Produces2 with
    type self = b,
    type Item0.item = Item1.item
  clone C12Zip_Impl0_Produces as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Produces1.produces = Produces2.produces
  goal produces_refl_refn : [#"../12_zip.rs" 41 4 41 29] forall a : C12Zip_Zip_Type.t_zip a b . Inv0.inv a -> Inv0.inv a /\ (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
  goal produces_trans_refn : [#"../12_zip.rs" 48 4 48 90] forall a : C12Zip_Zip_Type.t_zip a b . forall ab : Seq.seq (Item0.item, Item1.item) . forall b : C12Zip_Zip_Type.t_zip a b . forall bc : Seq.seq (Item0.item, Item1.item) . forall c : C12Zip_Zip_Type.t_zip a b . Inv0.inv c /\ Inv1.inv bc /\ Inv0.inv b /\ Inv1.inv ab /\ Inv0.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Inv0.inv c /\ Inv1.inv bc /\ Inv0.inv b /\ Inv1.inv ab /\ Inv0.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
  goal next_refn : [#"../12_zip.rs" 54 4 54 44] forall self : borrowed (C12Zip_Zip_Type.t_zip a b) . Inv2.inv self -> Inv2.inv self /\ (forall result : Core_Option_Option_Type.t_option (Item0.item, Item1.item) . Inv3.inv result /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end -> Inv3.inv result /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
end
