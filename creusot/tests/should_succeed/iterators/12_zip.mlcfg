
module C12Zip_Zip_Type
  type t_zip 'a 'b =
    | C_Zip 'a 'b
    
  let function zip_a (self : t_zip 'a 'b) : 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Zip a _ -> a
      end
  let function zip_b (self : t_zip 'a 'b) : 'b = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Zip _ a -> a
      end
end
module C12Zip_Impl0_ProducesRefl_Impl
  type a
  type b
  predicate invariant4 (self : b)
  val invariant4 (self : b) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : b)
  val inv4 (_x : b) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : b . inv4 x = true
  predicate invariant3 (self : a)
  val invariant3 (self : a) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : a)
  val inv3 (_x : a) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : a . inv3 x = true
  type item0
  use seq.Seq
  predicate invariant2 (self : Seq.seq item0)
  val invariant2 (self : Seq.seq item0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Seq.seq item0)
  val inv2 (_x : Seq.seq item0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Seq.seq item0 . inv2 x = true
  type item1
  predicate invariant1 (self : Seq.seq item1)
  val invariant1 (self : Seq.seq item1) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq item1)
  val inv1 (_x : Seq.seq item1) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq item1 . inv1 x = true
  use seq.Seq
  predicate produces2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item1) (o : b)
  val produces2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item1) (o : b) : bool
    ensures { result = produces2 self visited o }
    
  function produces_trans1 [#"../common.rs" 21 4 21 91] (a : b) (ab : Seq.seq item1) (b : b) (bc : Seq.seq item1) (c : b) : ()
    
  val produces_trans1 [#"../common.rs" 21 4 21 91] (a : b) (ab : Seq.seq item1) (b : b) (bc : Seq.seq item1) (c : b) : ()
    requires {[#"../common.rs" 18 15 18 32] produces2 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces2 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv4 a}
    requires {[#"../common.rs" 21 31 21 33] inv1 ab}
    requires {[#"../common.rs" 21 52 21 53] inv4 b}
    requires {[#"../common.rs" 21 61 21 63] inv1 bc}
    requires {[#"../common.rs" 21 82 21 83] inv4 c}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : b, ab : Seq.seq item1, b : b, bc : Seq.seq item1, c : b . ([#"../common.rs" 18 15 18 32] produces2 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces2 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv4 a)
   -> ([#"../common.rs" 21 31 21 33] inv1 ab)
   -> ([#"../common.rs" 21 52 21 53] inv4 b)
   -> ([#"../common.rs" 21 61 21 63] inv1 bc)
   -> ([#"../common.rs" 21 82 21 83] inv4 c)  -> ([#"../common.rs" 20 14 20 42] produces2 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl1 [#"../common.rs" 15 4 15 27] (self : b) : ()
  val produces_refl1 [#"../common.rs" 15 4 15 27] (self : b) : ()
    requires {[#"../common.rs" 15 21 15 25] inv4 self}
    ensures { result = produces_refl1 self }
    
  axiom produces_refl1_spec : forall self : b . ([#"../common.rs" 15 21 15 25] inv4 self)
   -> ([#"../common.rs" 14 14 14 45] produces2 self (Seq.empty ) self)
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item0) (o : a)
  val produces1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item0) (o : a) : bool
    ensures { result = produces1 self visited o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : a) (ab : Seq.seq item0) (b : a) (bc : Seq.seq item0) (c : a) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : a) (ab : Seq.seq item0) (b : a) (bc : Seq.seq item0) (c : a) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv3 a}
    requires {[#"../common.rs" 21 31 21 33] inv2 ab}
    requires {[#"../common.rs" 21 52 21 53] inv3 b}
    requires {[#"../common.rs" 21 61 21 63] inv2 bc}
    requires {[#"../common.rs" 21 82 21 83] inv3 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : a, ab : Seq.seq item0, b : a, bc : Seq.seq item0, c : a . ([#"../common.rs" 18 15 18 32] produces1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv3 a)
   -> ([#"../common.rs" 21 31 21 33] inv2 ab)
   -> ([#"../common.rs" 21 52 21 53] inv3 b)
   -> ([#"../common.rs" 21 61 21 63] inv2 bc)
   -> ([#"../common.rs" 21 82 21 83] inv3 c)  -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 27] (self : a) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 27] (self : a) : ()
    requires {[#"../common.rs" 15 21 15 25] inv3 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : a . ([#"../common.rs" 15 21 15 25] inv3 self)
   -> ([#"../common.rs" 14 14 14 45] produces1 self (Seq.empty ) self)
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate invariant0 (self : C12Zip_Zip_Type.t_zip a b)
  val invariant0 (self : C12Zip_Zip_Type.t_zip a b) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C12Zip_Zip_Type.t_zip a b)
  val inv0 (_x : C12Zip_Zip_Type.t_zip a b) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C12Zip_Zip_Type.t_zip a b . inv0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces0 [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (item0, item1)) (tl : C12Zip_Zip_Type.t_zip a b)
    
   =
    [#"../12_zip.rs" 29 8 35 9] exists p2 : Seq.seq item1 . exists p1 : Seq.seq item0 . inv1 p2
    /\ inv2 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces1 (C12Zip_Zip_Type.zip_a self) p1 (C12Zip_Zip_Type.zip_a tl)
    /\ produces2 (C12Zip_Zip_Type.zip_b self) p2 (C12Zip_Zip_Type.zip_b tl)
  val produces0 [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (item0, item1)) (tl : C12Zip_Zip_Type.t_zip a b) : bool
    ensures { result = produces0 self visited tl }
    
  use seq.Seq
  constant self  : C12Zip_Zip_Type.t_zip a b
  function produces_refl [#"../12_zip.rs" 41 4 41 26] (self : C12Zip_Zip_Type.t_zip a b) : ()
  goal vc_produces_refl : ([#"../12_zip.rs" 41 21 41 25] inv0 self)
   -> ([#"../12_zip.rs" 40 14 40 45] produces0 self (Seq.empty ) self)
end
module C12Zip_Impl0_ProducesTrans_Impl
  type a
  type b
  predicate invariant5 (self : b)
  val invariant5 (self : b) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : b)
  val inv5 (_x : b) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : b . inv5 x = true
  predicate invariant4 (self : a)
  val invariant4 (self : a) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : a)
  val inv4 (_x : a) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : a . inv4 x = true
  type item0
  use seq.Seq
  predicate invariant3 (self : Seq.seq item0)
  val invariant3 (self : Seq.seq item0) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq item0)
  val inv3 (_x : Seq.seq item0) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq item0 . inv3 x = true
  type item1
  predicate invariant2 (self : Seq.seq item1)
  val invariant2 (self : Seq.seq item1) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Seq.seq item1)
  val inv2 (_x : Seq.seq item1) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Seq.seq item1 . inv2 x = true
  use seq.Seq
  predicate produces2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item1) (o : b)
  val produces2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item1) (o : b) : bool
    ensures { result = produces2 self visited o }
    
  function produces_trans1 [#"../common.rs" 21 4 21 91] (a : b) (ab : Seq.seq item1) (b : b) (bc : Seq.seq item1) (c : b) : ()
    
  val produces_trans1 [#"../common.rs" 21 4 21 91] (a : b) (ab : Seq.seq item1) (b : b) (bc : Seq.seq item1) (c : b) : ()
    requires {[#"../common.rs" 18 15 18 32] produces2 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces2 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv5 a}
    requires {[#"../common.rs" 21 31 21 33] inv2 ab}
    requires {[#"../common.rs" 21 52 21 53] inv5 b}
    requires {[#"../common.rs" 21 61 21 63] inv2 bc}
    requires {[#"../common.rs" 21 82 21 83] inv5 c}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : b, ab : Seq.seq item1, b : b, bc : Seq.seq item1, c : b . ([#"../common.rs" 18 15 18 32] produces2 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces2 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv5 a)
   -> ([#"../common.rs" 21 31 21 33] inv2 ab)
   -> ([#"../common.rs" 21 52 21 53] inv5 b)
   -> ([#"../common.rs" 21 61 21 63] inv2 bc)
   -> ([#"../common.rs" 21 82 21 83] inv5 c)  -> ([#"../common.rs" 20 14 20 42] produces2 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl1 [#"../common.rs" 15 4 15 27] (self : b) : ()
  val produces_refl1 [#"../common.rs" 15 4 15 27] (self : b) : ()
    requires {[#"../common.rs" 15 21 15 25] inv5 self}
    ensures { result = produces_refl1 self }
    
  axiom produces_refl1_spec : forall self : b . ([#"../common.rs" 15 21 15 25] inv5 self)
   -> ([#"../common.rs" 14 14 14 45] produces2 self (Seq.empty ) self)
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item0) (o : a)
  val produces1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item0) (o : a) : bool
    ensures { result = produces1 self visited o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : a) (ab : Seq.seq item0) (b : a) (bc : Seq.seq item0) (c : a) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : a) (ab : Seq.seq item0) (b : a) (bc : Seq.seq item0) (c : a) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv4 a}
    requires {[#"../common.rs" 21 31 21 33] inv3 ab}
    requires {[#"../common.rs" 21 52 21 53] inv4 b}
    requires {[#"../common.rs" 21 61 21 63] inv3 bc}
    requires {[#"../common.rs" 21 82 21 83] inv4 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : a, ab : Seq.seq item0, b : a, bc : Seq.seq item0, c : a . ([#"../common.rs" 18 15 18 32] produces1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv4 a)
   -> ([#"../common.rs" 21 31 21 33] inv3 ab)
   -> ([#"../common.rs" 21 52 21 53] inv4 b)
   -> ([#"../common.rs" 21 61 21 63] inv3 bc)
   -> ([#"../common.rs" 21 82 21 83] inv4 c)  -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 27] (self : a) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 27] (self : a) : ()
    requires {[#"../common.rs" 15 21 15 25] inv4 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : a . ([#"../common.rs" 15 21 15 25] inv4 self)
   -> ([#"../common.rs" 14 14 14 45] produces1 self (Seq.empty ) self)
  predicate invariant1 (self : Seq.seq (item0, item1))
  val invariant1 (self : Seq.seq (item0, item1)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq (item0, item1))
  val inv1 (_x : Seq.seq (item0, item1)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq (item0, item1) . inv1 x = true
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate invariant0 (self : C12Zip_Zip_Type.t_zip a b)
  val invariant0 (self : C12Zip_Zip_Type.t_zip a b) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C12Zip_Zip_Type.t_zip a b)
  val inv0 (_x : C12Zip_Zip_Type.t_zip a b) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C12Zip_Zip_Type.t_zip a b . inv0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces0 [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (item0, item1)) (tl : C12Zip_Zip_Type.t_zip a b)
    
   =
    [#"../12_zip.rs" 29 8 35 9] exists p2 : Seq.seq item1 . exists p1 : Seq.seq item0 . inv2 p2
    /\ inv3 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces1 (C12Zip_Zip_Type.zip_a self) p1 (C12Zip_Zip_Type.zip_a tl)
    /\ produces2 (C12Zip_Zip_Type.zip_b self) p2 (C12Zip_Zip_Type.zip_b tl)
  val produces0 [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (item0, item1)) (tl : C12Zip_Zip_Type.t_zip a b) : bool
    ensures { result = produces0 self visited tl }
    
  constant a  : C12Zip_Zip_Type.t_zip a b
  constant ab  : Seq.seq (item0, item1)
  constant b  : C12Zip_Zip_Type.t_zip a b
  constant bc  : Seq.seq (item0, item1)
  constant c  : C12Zip_Zip_Type.t_zip a b
  function produces_trans [#"../12_zip.rs" 48 4 48 90] (a : C12Zip_Zip_Type.t_zip a b) (ab : Seq.seq (item0, item1)) (b : C12Zip_Zip_Type.t_zip a b) (bc : Seq.seq (item0, item1)) (c : C12Zip_Zip_Type.t_zip a b) : ()
    
  goal vc_produces_trans : ([#"../12_zip.rs" 48 82 48 83] inv0 c)
   -> ([#"../12_zip.rs" 48 61 48 63] inv1 bc)
   -> ([#"../12_zip.rs" 48 52 48 53] inv0 b)
   -> ([#"../12_zip.rs" 48 31 48 33] inv1 ab)
   -> ([#"../12_zip.rs" 48 22 48 23] inv0 a)
   -> ([#"../12_zip.rs" 46 15 46 32] produces0 b bc c)
   -> ([#"../12_zip.rs" 45 15 45 32] produces0 a ab b)
   -> ([#"../12_zip.rs" 47 14 47 42] produces0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C12Zip_Impl0_Next
  type a
  type b
  type item0
  use seq.Seq
  predicate invariant10 (self : Seq.seq item0)
  val invariant10 (self : Seq.seq item0) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : Seq.seq item0)
  val inv10 (_x : Seq.seq item0) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Seq.seq item0 . inv10 x = true
  type item1
  predicate invariant9 (self : Seq.seq item1)
  val invariant9 (self : Seq.seq item1) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : Seq.seq item1)
  val inv9 (_x : Seq.seq item1) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Seq.seq item1 . inv9 x = true
  use prelude.Borrow
  predicate invariant8 (self : borrowed b)
  val invariant8 (self : borrowed b) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : borrowed b)
  val inv8 (_x : borrowed b) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : borrowed b . inv8 x = true
  predicate invariant7 (self : borrowed a)
  val invariant7 (self : borrowed a) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed a)
  val inv7 (_x : borrowed a) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed a . inv7 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant6 (self : Core_Option_Option_Type.t_option (item0, item1))
  val invariant6 (self : Core_Option_Option_Type.t_option (item0, item1)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Core_Option_Option_Type.t_option (item0, item1))
  val inv6 (_x : Core_Option_Option_Type.t_option (item0, item1)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Core_Option_Option_Type.t_option (item0, item1) . inv6 x = true
  predicate invariant5 (self : item0)
  val invariant5 (self : item0) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : item0)
  val inv5 (_x : item0) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : item0 . inv5 x = true
  predicate invariant4 (self : Core_Option_Option_Type.t_option item1)
  val invariant4 (self : Core_Option_Option_Type.t_option item1) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Core_Option_Option_Type.t_option item1)
  val inv4 (_x : Core_Option_Option_Type.t_option item1) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Core_Option_Option_Type.t_option item1 . inv4 x = true
  use seq.Seq
  predicate inv3 (_x : b)
  val inv3 (_x : b) : bool
    ensures { result = inv3 _x }
    
  predicate produces2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item1) (o : b)
  val produces2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item1) (o : b) : bool
    ensures { result = produces2 self visited o }
    
  function produces_trans1 [#"../common.rs" 21 4 21 91] (a : b) (ab : Seq.seq item1) (b : b) (bc : Seq.seq item1) (c : b) : ()
    
  val produces_trans1 [#"../common.rs" 21 4 21 91] (a : b) (ab : Seq.seq item1) (b : b) (bc : Seq.seq item1) (c : b) : ()
    requires {[#"../common.rs" 18 15 18 32] produces2 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces2 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv3 a}
    requires {[#"../common.rs" 21 31 21 33] inv9 ab}
    requires {[#"../common.rs" 21 52 21 53] inv3 b}
    requires {[#"../common.rs" 21 61 21 63] inv9 bc}
    requires {[#"../common.rs" 21 82 21 83] inv3 c}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : b, ab : Seq.seq item1, b : b, bc : Seq.seq item1, c : b . ([#"../common.rs" 18 15 18 32] produces2 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces2 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv3 a)
   -> ([#"../common.rs" 21 31 21 33] inv9 ab)
   -> ([#"../common.rs" 21 52 21 53] inv3 b)
   -> ([#"../common.rs" 21 61 21 63] inv9 bc)
   -> ([#"../common.rs" 21 82 21 83] inv3 c)  -> ([#"../common.rs" 20 14 20 42] produces2 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl1 [#"../common.rs" 15 4 15 27] (self : b) : ()
  val produces_refl1 [#"../common.rs" 15 4 15 27] (self : b) : ()
    requires {[#"../common.rs" 15 21 15 25] inv3 self}
    ensures { result = produces_refl1 self }
    
  axiom produces_refl1_spec : forall self : b . ([#"../common.rs" 15 21 15 25] inv3 self)
   -> ([#"../common.rs" 14 14 14 45] produces2 self (Seq.empty ) self)
  predicate invariant3 (self : b)
  val invariant3 (self : b) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : b . inv3 x = true
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate invariant2 (self : borrowed (C12Zip_Zip_Type.t_zip a b))
  val invariant2 (self : borrowed (C12Zip_Zip_Type.t_zip a b)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (C12Zip_Zip_Type.t_zip a b))
  val inv2 (_x : borrowed (C12Zip_Zip_Type.t_zip a b)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (C12Zip_Zip_Type.t_zip a b) . inv2 x = true
  predicate invariant1 (self : Core_Option_Option_Type.t_option item0)
  val invariant1 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option item0)
  val inv1 (_x : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option item0 . inv1 x = true
  use seq.Seq
  predicate inv0 (_x : a)
  val inv0 (_x : a) : bool
    ensures { result = inv0 _x }
    
  predicate produces1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item0) (o : a)
  val produces1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item0) (o : a) : bool
    ensures { result = produces1 self visited o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : a) (ab : Seq.seq item0) (b : a) (bc : Seq.seq item0) (c : a) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : a) (ab : Seq.seq item0) (b : a) (bc : Seq.seq item0) (c : a) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv0 a}
    requires {[#"../common.rs" 21 31 21 33] inv10 ab}
    requires {[#"../common.rs" 21 52 21 53] inv0 b}
    requires {[#"../common.rs" 21 61 21 63] inv10 bc}
    requires {[#"../common.rs" 21 82 21 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : a, ab : Seq.seq item0, b : a, bc : Seq.seq item0, c : a . ([#"../common.rs" 18 15 18 32] produces1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv0 a)
   -> ([#"../common.rs" 21 31 21 33] inv10 ab)
   -> ([#"../common.rs" 21 52 21 53] inv0 b)
   -> ([#"../common.rs" 21 61 21 63] inv10 bc)
   -> ([#"../common.rs" 21 82 21 83] inv0 c)  -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 27] (self : a) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 27] (self : a) : ()
    requires {[#"../common.rs" 15 21 15 25] inv0 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : a . ([#"../common.rs" 15 21 15 25] inv0 self)
   -> ([#"../common.rs" 14 14 14 45] produces1 self (Seq.empty ) self)
  predicate invariant0 (self : a)
  val invariant0 (self : a) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : a . inv0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces0 [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (item0, item1)) (tl : C12Zip_Zip_Type.t_zip a b)
    
   =
    [#"../12_zip.rs" 29 8 35 9] exists p2 : Seq.seq item1 . exists p1 : Seq.seq item0 . inv9 p2
    /\ inv10 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces1 (C12Zip_Zip_Type.zip_a self) p1 (C12Zip_Zip_Type.zip_a tl)
    /\ produces2 (C12Zip_Zip_Type.zip_b self) p2 (C12Zip_Zip_Type.zip_b tl)
  val produces0 [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (item0, item1)) (tl : C12Zip_Zip_Type.t_zip a b) : bool
    ensures { result = produces0 self visited tl }
    
  use seq.Seq
  predicate completed2 [#"../common.rs" 11 4 11 36] (self : borrowed b)
  val completed2 [#"../common.rs" 11 4 11 36] (self : borrowed b) : bool
    ensures { result = completed2 self }
    
  predicate resolve3 (self : item0)
  val resolve3 (self : item0) : bool
    ensures { result = resolve3 self }
    
  use seq.Seq
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed a)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed a) : bool
    ensures { result = completed1 self }
    
  predicate completed0 [#"../12_zip.rs" 18 4 18 35] (self : borrowed (C12Zip_Zip_Type.t_zip a b)) =
    [#"../12_zip.rs" 20 13 22 67] completed1 (Borrow.borrow_logic (C12Zip_Zip_Type.zip_a ( * self)) (C12Zip_Zip_Type.zip_a ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C12Zip_Zip_Type.zip_b ( * self) = C12Zip_Zip_Type.zip_b ( ^ self)
    \/ (exists x : item0 . inv5 x
    /\ produces1 (C12Zip_Zip_Type.zip_a ( * self)) (Seq.singleton x) (C12Zip_Zip_Type.zip_a ( ^ self))
    /\ resolve3 x
    /\ completed2 (Borrow.borrow_logic (C12Zip_Zip_Type.zip_b ( * self)) (C12Zip_Zip_Type.zip_b ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 2)))
  val completed0 [#"../12_zip.rs" 18 4 18 35] (self : borrowed (C12Zip_Zip_Type.t_zip a b)) : bool
    ensures { result = completed0 self }
    
  predicate resolve2 (self : Core_Option_Option_Type.t_option item1)
  val resolve2 (self : Core_Option_Option_Type.t_option item1) : bool
    ensures { result = resolve2 self }
    
  use seq.Seq
  val next1 [#"../common.rs" 27 4 27 45] (self : borrowed b) : Core_Option_Option_Type.t_option item1
    requires {[#"../common.rs" 27 17 27 21] inv8 self}
    ensures { [#"../common.rs" 23 14 26 5] match result with
      | Core_Option_Option_Type.C_None -> completed2 self
      | Core_Option_Option_Type.C_Some v -> produces2 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 26 27 44] inv4 result }
    
  predicate resolve1 (self : borrowed (C12Zip_Zip_Type.t_zip a b)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (C12Zip_Zip_Type.t_zip a b)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : Core_Option_Option_Type.t_option item0)
  val resolve0 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = resolve0 self }
    
  val next0 [#"../common.rs" 27 4 27 45] (self : borrowed a) : Core_Option_Option_Type.t_option item0
    requires {[#"../common.rs" 27 17 27 21] inv7 self}
    ensures { [#"../common.rs" 23 14 26 5] match result with
      | Core_Option_Option_Type.C_None -> completed1 self
      | Core_Option_Option_Type.C_Some v -> produces1 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 26 27 44] inv1 result }
    
  let rec cfg next [#"../12_zip.rs" 54 4 54 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C12Zip_Zip_Type.t_zip a b)) : Core_Option_Option_Type.t_option (item0, item1)
    requires {[#"../12_zip.rs" 54 17 54 21] inv2 self}
    ensures { [#"../12_zip.rs" 50 14 53 5] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../12_zip.rs" 54 26 54 44] inv6 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (item0, item1);
  var self : borrowed (C12Zip_Zip_Type.t_zip a b) = self;
  var x : item0;
  var _4 : Core_Option_Option_Type.t_option item0;
  var _5 : borrowed a;
  var x1 : item0;
  var y : item1;
  var _10 : Core_Option_Option_Type.t_option item1;
  var _11 : borrowed b;
  var y1 : item1;
  var _15 : (item0, item1);
  {
    goto BB0
  }
  BB0 {
    [#"../12_zip.rs" 55 22 55 28] _5 <- Borrow.borrow_final (C12Zip_Zip_Type.zip_a ( * self)) (Borrow.inherit_id (Borrow.get_id self) 1);
    [#"../12_zip.rs" 55 22 55 28] self <- { self with current = (let C12Zip_Zip_Type.C_Zip x0 x1 =  * self in C12Zip_Zip_Type.C_Zip ( ^ _5) x1) ; };
    assume { inv0 ( ^ _5) };
    [#"../12_zip.rs" 55 22 55 35] _4 <- ([#"../12_zip.rs" 55 22 55 35] next0 _5);
    _5 <- any borrowed a;
    goto BB1
  }
  BB1 {
    switch (_4)
      | Core_Option_Option_Type.C_None -> goto BB3
      | Core_Option_Option_Type.C_Some _ -> goto BB4
      end
  }
  BB2 {
    assert { [@expl:type invariant] inv2 self };
    assume { resolve1 self };
    assert { [@expl:type invariant] inv1 _4 };
    assume { resolve0 _4 };
    assert { [#"../12_zip.rs" 55 22 55 35] false };
    absurd
  }
  BB3 {
    goto BB5
  }
  BB4 {
    [#"../12_zip.rs" 57 17 57 18] x1 <- Core_Option_Option_Type.some_0 _4;
    _4 <- (let Core_Option_Option_Type.C_Some x0 = _4 in Core_Option_Option_Type.C_Some (any item0));
    assert { [@expl:type invariant] inv1 _4 };
    assume { resolve0 _4 };
    [#"../12_zip.rs" 57 23 57 24] x <- x1;
    x1 <- any item0;
    goto BB6
  }
  BB5 {
    assert { [@expl:type invariant] inv1 _4 };
    assume { resolve0 _4 };
    assert { [@expl:type invariant] inv2 self };
    assume { resolve1 self };
    [#"../12_zip.rs" 56 27 56 31] _0 <- Core_Option_Option_Type.C_None;
    goto BB21
  }
  BB6 {
    goto BB7
  }
  BB7 {
    [#"../12_zip.rs" 59 22 59 28] _11 <- Borrow.borrow_final (C12Zip_Zip_Type.zip_b ( * self)) (Borrow.inherit_id (Borrow.get_id self) 2);
    [#"../12_zip.rs" 59 22 59 28] self <- { self with current = (let C12Zip_Zip_Type.C_Zip x0 x1 =  * self in C12Zip_Zip_Type.C_Zip x0 ( ^ _11)) ; };
    assume { inv3 ( ^ _11) };
    [#"../12_zip.rs" 59 22 59 35] _10 <- ([#"../12_zip.rs" 59 22 59 35] next1 _11);
    _11 <- any borrowed b;
    goto BB8
  }
  BB8 {
    assert { [@expl:type invariant] inv2 self };
    assume { resolve1 self };
    switch (_10)
      | Core_Option_Option_Type.C_None -> goto BB10
      | Core_Option_Option_Type.C_Some _ -> goto BB11
      end
  }
  BB9 {
    assert { [@expl:type invariant] inv5 x };
    assume { resolve3 x };
    assert { [@expl:type invariant] inv4 _10 };
    assume { resolve2 _10 };
    assert { [#"../12_zip.rs" 59 22 59 35] false };
    absurd
  }
  BB10 {
    goto BB12
  }
  BB11 {
    [#"../12_zip.rs" 61 17 61 18] y1 <- Core_Option_Option_Type.some_0 _10;
    _10 <- (let Core_Option_Option_Type.C_Some x0 = _10 in Core_Option_Option_Type.C_Some (any item1));
    assert { [@expl:type invariant] inv4 _10 };
    assume { resolve2 _10 };
    [#"../12_zip.rs" 61 23 61 24] y <- y1;
    y1 <- any item1;
    goto BB13
  }
  BB12 {
    assert { [@expl:type invariant] inv4 _10 };
    assume { resolve2 _10 };
    assert { [@expl:type invariant] inv5 x };
    assume { resolve3 x };
    [#"../12_zip.rs" 60 27 60 31] _0 <- Core_Option_Option_Type.C_None;
    goto BB20
  }
  BB13 {
    goto BB14
  }
  BB14 {
    [#"../12_zip.rs" 63 13 63 19] _15 <- (x, y);
    x <- any item0;
    y <- any item1;
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    [#"../12_zip.rs" 63 8 63 20] _0 <- Core_Option_Option_Type.C_Some _15;
    _15 <- any (item0, item1);
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB23
  }
  BB20 {
    goto BB22
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    return _0
  }
  
end
module C12Zip_Impl0
  type a
  type b
  type item0
  use seq.Seq
  predicate invariant6 (self : Seq.seq item0)
  val invariant6 (self : Seq.seq item0) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq item0)
  val inv6 (_x : Seq.seq item0) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq item0 . inv6 x = true
  type item1
  predicate invariant5 (self : Seq.seq item1)
  val invariant5 (self : Seq.seq item1) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq item1)
  val inv5 (_x : Seq.seq item1) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq item1 . inv5 x = true
  predicate invariant4 (self : item0)
  val invariant4 (self : item0) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : item0)
  val inv4 (_x : item0) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : item0 . inv4 x = true
  predicate invariant3 (self : Seq.seq (item0, item1))
  val invariant3 (self : Seq.seq (item0, item1)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq (item0, item1))
  val inv3 (_x : Seq.seq (item0, item1)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq (item0, item1) . inv3 x = true
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate invariant2 (self : C12Zip_Zip_Type.t_zip a b)
  val invariant2 (self : C12Zip_Zip_Type.t_zip a b) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : C12Zip_Zip_Type.t_zip a b)
  val inv2 (_x : C12Zip_Zip_Type.t_zip a b) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : C12Zip_Zip_Type.t_zip a b . inv2 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant1 (self : Core_Option_Option_Type.t_option (item0, item1))
  val invariant1 (self : Core_Option_Option_Type.t_option (item0, item1)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option (item0, item1))
  val inv1 (_x : Core_Option_Option_Type.t_option (item0, item1)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option (item0, item1) . inv1 x = true
  use prelude.Borrow
  predicate invariant0 (self : borrowed (C12Zip_Zip_Type.t_zip a b))
  val invariant0 (self : borrowed (C12Zip_Zip_Type.t_zip a b)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed (C12Zip_Zip_Type.t_zip a b))
  val inv0 (_x : borrowed (C12Zip_Zip_Type.t_zip a b)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed (C12Zip_Zip_Type.t_zip a b) . inv0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item1) (o : b)
  val produces2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item1) (o : b) : bool
    ensures { result = produces2 self visited o }
    
  predicate produces1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item0) (o : a)
  val produces1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item0) (o : a) : bool
    ensures { result = produces1 self visited o }
    
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces0 [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (item0, item1)) (tl : C12Zip_Zip_Type.t_zip a b)
    
   =
    [#"../12_zip.rs" 29 8 35 9] exists p2 : Seq.seq item1 . exists p1 : Seq.seq item0 . inv5 p2
    /\ inv6 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces1 (C12Zip_Zip_Type.zip_a self) p1 (C12Zip_Zip_Type.zip_a tl)
    /\ produces2 (C12Zip_Zip_Type.zip_b self) p2 (C12Zip_Zip_Type.zip_b tl)
  val produces0 [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (item0, item1)) (tl : C12Zip_Zip_Type.t_zip a b) : bool
    ensures { result = produces0 self visited tl }
    
  use seq.Seq
  predicate completed2 [#"../common.rs" 11 4 11 36] (self : borrowed b)
  val completed2 [#"../common.rs" 11 4 11 36] (self : borrowed b) : bool
    ensures { result = completed2 self }
    
  predicate resolve0 (self : item0)
  val resolve0 (self : item0) : bool
    ensures { result = resolve0 self }
    
  use seq.Seq
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed a)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed a) : bool
    ensures { result = completed1 self }
    
  predicate completed0 [#"../12_zip.rs" 18 4 18 35] (self : borrowed (C12Zip_Zip_Type.t_zip a b)) =
    [#"../12_zip.rs" 20 13 22 67] completed1 (Borrow.borrow_logic (C12Zip_Zip_Type.zip_a ( * self)) (C12Zip_Zip_Type.zip_a ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C12Zip_Zip_Type.zip_b ( * self) = C12Zip_Zip_Type.zip_b ( ^ self)
    \/ (exists x : item0 . inv4 x
    /\ produces1 (C12Zip_Zip_Type.zip_a ( * self)) (Seq.singleton x) (C12Zip_Zip_Type.zip_a ( ^ self))
    /\ resolve0 x
    /\ completed2 (Borrow.borrow_logic (C12Zip_Zip_Type.zip_b ( * self)) (C12Zip_Zip_Type.zip_b ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 2)))
  val completed0 [#"../12_zip.rs" 18 4 18 35] (self : borrowed (C12Zip_Zip_Type.t_zip a b)) : bool
    ensures { result = completed0 self }
    
  goal next_refn : [#"../12_zip.rs" 54 4 54 44] forall self : borrowed (C12Zip_Zip_Type.t_zip a b) . inv0 self
   -> inv0 self
  /\ (forall result : Core_Option_Option_Type.t_option (item0, item1) . inv1 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv1 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_refl_refn : [#"../12_zip.rs" 41 4 41 26] forall self : C12Zip_Zip_Type.t_zip a b . inv2 self
   -> inv2 self /\ (forall result : () . produces0 self (Seq.empty ) self  -> produces0 self (Seq.empty ) self)
  goal produces_trans_refn : [#"../12_zip.rs" 48 4 48 90] forall a : C12Zip_Zip_Type.t_zip a b . forall ab : Seq.seq (item0, item1) . forall b : C12Zip_Zip_Type.t_zip a b . forall bc : Seq.seq (item0, item1) . forall c : C12Zip_Zip_Type.t_zip a b . inv2 c
  /\ inv3 bc /\ inv2 b /\ inv3 ab /\ inv2 a /\ produces0 b bc c /\ produces0 a ab b
   -> inv2 c
  /\ inv3 bc
  /\ inv2 b
  /\ inv3 ab
  /\ inv2 a
  /\ produces0 b bc c
  /\ produces0 a ab b /\ (forall result : () . produces0 a (Seq.(++) ab bc) c  -> produces0 a (Seq.(++) ab bc) c)
end
