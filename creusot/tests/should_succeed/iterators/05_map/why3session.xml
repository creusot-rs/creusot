<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="05_map.mlcfg"/>
<theory name="C05Map_Impl1_PreservationInv_Impl" proved="true">
 <goal name="preservation_inv&#39;vc" expl="VC for preservation_inv" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="105"/></proof>
 </goal>
</theory>
<theory name="C05Map_Impl0_ProducesRefl_Impl" proved="true">
 <goal name="produces_refl&#39;vc" expl="VC for produces_refl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_refl&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="produces_refl&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="produces_refl&#39;vc.0.0.0" expl="VC for produces_refl" proved="true">
    <proof prover="1"><result status="valid" time="0.00" steps="8"/></proof>
    </goal>
    <goal name="produces_refl&#39;vc.0.0.1" expl="VC for produces_refl" proved="true">
    <proof prover="3"><result status="valid" time="0.11" steps="20353"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C05Map_Impl0_ProducesTrans_Impl" proved="true">
 <goal name="produces_trans&#39;vc" expl="VC for produces_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_trans&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="produces_trans&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="produces" arg2="in" arg3="Requires">
    <goal name="produces_trans&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="produces" arg2="in" arg3="Requires1">
     <goal name="produces_trans&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="produces_trans&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="1"><result status="valid" time="0.01" steps="45"/></proof>
      </goal>
      <goal name="produces_trans&#39;vc.0.0.0.0.1" expl="postcondition" proved="true">
      <transf name="exists" proved="true" arg1="(s1 ++ s)">
       <goal name="produces_trans&#39;vc.0.0.0.0.1.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="produces_trans&#39;vc.0.0.0.0.1.0.0" proved="true">
        <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
        </goal>
        <goal name="produces_trans&#39;vc.0.0.0.0.1.0.1" proved="true">
        <proof prover="1"><result status="valid" time="0.01" steps="34"/></proof>
        </goal>
        <goal name="produces_trans&#39;vc.0.0.0.0.1.0.2" proved="true">
        <transf name="exists" proved="true" arg1="(fs1 ++ fs)">
         <goal name="produces_trans&#39;vc.0.0.0.0.1.0.2.0" proved="true">
         <proof prover="1"><result status="valid" time="0.18" steps="3249"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C05Map_Impl1_ProducesOne_Impl" proved="true">
 <goal name="produces_one&#39;vc" expl="VC for produces_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="produces_one&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="produces_one&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="produces_one&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="16"/></proof>
     </goal>
     <goal name="produces_one&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <transf name="exists" proved="true" arg1="(singleton e)">
      <goal name="produces_one&#39;vc.0.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="produces_one&#39;vc.0.0.0.1.0.0" proved="true">
       <proof prover="1"><result status="valid" time="0.01" steps="16"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.1" proved="true">
       <proof prover="1"><result status="valid" time="0.01" steps="14"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.2" proved="true">
       <transf name="exists" proved="true" arg1="(singleton f)">
        <goal name="produces_one&#39;vc.0.0.0.1.0.2.0" proved="true">
        <proof prover="1" timelimit="5"><result status="valid" time="0.01" steps="199"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="produces_one&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="produces_one&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="0.13" steps="26148"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C05Map_Impl1_ProducesOneInvariant_Impl" proved="true">
 <goal name="produces_one_invariant&#39;vc" expl="VC for produces_one_invariant" proved="true">
 <transf name="unfold" proved="true" arg1="invariant&#39;">
  <goal name="produces_one_invariant&#39;vc.0" expl="VC for produces_one_invariant" proved="true">
  <transf name="unfold" proved="true" arg1="next_precondition">
   <goal name="produces_one_invariant&#39;vc.0.0" expl="VC for produces_one_invariant" proved="true">
   <transf name="unfold" proved="true" arg1="preservation_inv">
    <goal name="produces_one_invariant&#39;vc.0.0.0" expl="VC for produces_one_invariant" proved="true">
    <transf name="unfold" proved="true" arg1="produces_one">
     <goal name="produces_one_invariant&#39;vc.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="produces_one_invariant&#39;vc.0.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
      <proof prover="1"><result status="valid" time="0.01" steps="20"/></proof>
      </goal>
      <goal name="produces_one_invariant&#39;vc.0.0.0.0.1" expl="VC for produces_one_invariant" proved="true">
      <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
       <goal name="produces_one_invariant&#39;vc.0.0.0.0.1.0" expl="VC for produces_one_invariant" proved="true">
       <transf name="apply" proved="true" arg1="H13" arg2="with" arg3="i,b,e1,((singleton e ++ s))">
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.01" steps="30"/></proof>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.01" steps="30"/></proof>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.1.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.02" steps="32"/></proof>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.1.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.13" steps="3332"/></proof>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.1.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.01" steps="30"/></proof>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.1.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.01" steps="30"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="produces_one_invariant&#39;vc.0.0.0.0.2" expl="VC for produces_one_invariant" proved="true">
      <proof prover="1"><result status="valid" time="0.01" steps="20"/></proof>
      </goal>
      <goal name="produces_one_invariant&#39;vc.0.0.0.0.3" expl="VC for produces_one_invariant" proved="true">
      <transf name="rewrite" proved="true" arg1="&lt;-" arg2="H6">
       <goal name="produces_one_invariant&#39;vc.0.0.0.0.3.0" expl="VC for produces_one_invariant" proved="true">
       <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.3.0.0" expl="VC for produces_one_invariant" proved="true">
        <proof prover="3"><result status="valid" time="0.18" steps="32854"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C05Map_Impl0_Next" proved="true">
 <goal name="next&#39;vc" expl="VC for next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="next&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="next&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="next&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="125"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="next&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="41"/></proof>
  </goal>
  <goal name="next&#39;vc.3" expl="unreachable point" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
  <goal name="next&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="next&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.4.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="68"/></proof>
    </goal>
    <goal name="next&#39;vc.4.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="128"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="next&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.4.1.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="32"/></proof>
    </goal>
    <goal name="next&#39;vc.4.1.1" expl="postcondition" proved="true">
    <proof prover="1" timelimit="5"><result status="valid" time="0.01" steps="244"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="next&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="next&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.5.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="123"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="next&#39;vc.5.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.5.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="next&#39;vc.5.1.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.02" steps="176"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C05Map_Map" proved="true">
 <goal name="map&#39;vc" expl="VC for map" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="85"/></proof>
 </goal>
</theory>
<theory name="C05Map_Impl0" proved="true">
 <goal name="next_refn" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="531"/></proof>
 </goal>
 <goal name="produces_trans_refn" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="317"/></proof>
 </goal>
 <goal name="produces_refl_refn" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
</theory>
</file>
</why3session>
