<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.12.4" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.6.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="coma" proved="true">
<path name=".."/><path name="17_filter.coma"/>
<theory name="M_17_filter__qyi17392541228996028033__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.027103" steps="2707"/></proof>
 </goal>
</theory>
<theory name="M_17_filter__qyi17392541228996028033__produces_refl" proved="true">
 <goal name="vc_produces_refl&#39;0" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_refl&#39;0.0" proved="true">
  <transf name="unfold" proved="true" arg1="produces&#39;0">
   <goal name="vc_produces_refl&#39;0.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="vc_produces_refl&#39;0.0.0.0" proved="true">
    <proof prover="1"><result status="valid" time="0.014083" steps="4"/></proof>
    </goal>
    <goal name="vc_produces_refl&#39;0.0.0.1" proved="true">
    <transf name="exists" proved="true" arg1="(empty: seq t_Item&#39;0)">
     <goal name="vc_produces_refl&#39;0.0.0.1.0" proved="true">
     <proof prover="0"><result status="valid" time="0.024618" steps="45999"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_17_filter__qyi17392541228996028033__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.016548" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_17_filter__qyi17392541228996028033__produces_trans" proved="true">
 <goal name="vc_produces_trans&#39;0" proved="true">
 <transf name="unfold" proved="true" arg1="produces&#39;0">
  <goal name="vc_produces_trans&#39;0.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_produces_trans&#39;0.0.0" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.028661" steps="3913"/></proof>
   </goal>
   <goal name="vc_produces_trans&#39;0.0.1" proved="true">
   <transf name="exists" proved="true" arg1="(s ++ s1)">
    <goal name="vc_produces_trans&#39;0.0.1.0" proved="true">
    <transf name="exists" proved="true" arg1="(fun i -&gt; if i &lt; length ab then f i else (f1 (i - length ab) + length s))">
     <goal name="vc_produces_trans&#39;0.0.1.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="vc_produces_trans&#39;0.0.1.0.0.0" proved="true">
      <proof prover="0"><result status="valid" time="0.031426" steps="23546"/></proof>
      </goal>
      <goal name="vc_produces_trans&#39;0.0.1.0.0.1" proved="true">
      <proof prover="0"><result status="valid" time="0.037591" steps="25382"/></proof>
      </goal>
      <goal name="vc_produces_trans&#39;0.0.1.0.0.2" proved="true">
      <proof prover="3" timelimit="5"><result status="valid" time="0.093298" steps="7391"/></proof>
      </goal>
      <goal name="vc_produces_trans&#39;0.0.1.0.0.3" proved="true">
      <proof prover="3" timelimit="5"><result status="valid" time="0.081422" steps="5786"/></proof>
      </goal>
      <goal name="vc_produces_trans&#39;0.0.1.0.0.4" proved="true">
      <proof prover="2"><result status="valid" time="0.073259" steps="11721"/></proof>
      </goal>
      <goal name="vc_produces_trans&#39;0.0.1.0.0.5" proved="true">
      <proof prover="3" timelimit="5"><result status="valid" time="0.171309" steps="9172"/></proof>
      </goal>
      <goal name="vc_produces_trans&#39;0.0.1.0.0.6" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; length s)">
       <goal name="vc_produces_trans&#39;0.0.1.0.0.6.0" expl="true case" proved="true">
       <proof prover="0"><result status="valid" time="0.031511" steps="28248"/></proof>
       </goal>
       <goal name="vc_produces_trans&#39;0.0.1.0.0.6.1" expl="false case" proved="true">
       <transf name="instantiate" proved="true" arg1="H11" arg2="(i-length s)">
        <goal name="vc_produces_trans&#39;0.0.1.0.0.6.1.0" expl="false case" proved="true">
        <transf name="destruct_rec" proved="true" arg1="Hinst">
         <goal name="vc_produces_trans&#39;0.0.1.0.0.6.1.0.0" expl="destruct premise" proved="true">
         <proof prover="3" timelimit="5"><result status="valid" time="0.043608" steps="4525"/></proof>
         </goal>
         <goal name="vc_produces_trans&#39;0.0.1.0.0.6.1.0.1" expl="false case" proved="true">
         <transf name="replace" proved="true" arg1="(b.t_Filter__func&#39;0)" arg2="(a.t_Filter__func&#39;0)" arg3="in" arg4="Hinst">
          <goal name="vc_produces_trans&#39;0.0.1.0.0.6.1.0.1.0" expl="false case" proved="true">
          <proof prover="1"><result status="valid" time="0.057374" steps="471"/></proof>
          </goal>
          <goal name="vc_produces_trans&#39;0.0.1.0.0.6.1.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="3" timelimit="5"><result status="valid" time="0.051922" steps="5175"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_17_filter__qyi17392541228996028033__next__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.032063" steps="4090"/></proof>
 </goal>
</theory>
<theory name="M_17_filter__qyi17392541228996028033__next" proved="true">
 <goal name="vc_next&#39;0" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_next&#39;0.0" expl="mut invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.015985" steps="3498"/></proof>
  </goal>
  <goal name="vc_next&#39;0.1" expl="loop invariant #0" proved="true">
  <proof prover="3"><result status="valid" time="0.018920" steps="2661"/></proof>
  </goal>
  <goal name="vc_next&#39;0.2" expl="loop invariant #1" proved="true">
  <proof prover="3"><result status="valid" time="0.024402" steps="3479"/></proof>
  </goal>
  <goal name="vc_next&#39;0.3" expl="loop invariant #2" proved="true">
  <proof prover="3"><result status="valid" time="0.035799" steps="4507"/></proof>
  </goal>
  <goal name="vc_next&#39;0.4" expl="loop invariant #3" proved="true">
  <proof prover="3"><result status="valid" time="0.025173" steps="5126"/></proof>
  </goal>
  <goal name="vc_next&#39;0.5" expl="loop invariant #4" proved="true">
  <proof prover="3"><result status="valid" time="0.026285" steps="4472"/></proof>
  </goal>
  <goal name="vc_next&#39;0.6" proved="true">
  <proof prover="3"><result status="valid" time="0.031052" steps="5436"/></proof>
  </goal>
  <goal name="vc_next&#39;0.7" expl="next &#39;self&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.031786" steps="5166"/></proof>
  </goal>
  <goal name="vc_next&#39;0.8" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.019163" steps="3992"/></proof>
  </goal>
  <goal name="vc_next&#39;0.9" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.135125" steps="6431"/></proof>
  </goal>
  <goal name="vc_next&#39;0.10" expl="next result type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.019148" steps="4218"/></proof>
  </goal>
  <goal name="vc_next&#39;0.11" expl="next ensures" proved="true">
  <proof prover="0"><result status="valid" time="0.019046" steps="42463"/></proof>
  </goal>
  <goal name="vc_next&#39;0.12" expl="assertion" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="vc_next&#39;0.12.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.037868" steps="9373"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="vc_next&#39;0.13" proved="true">
  <proof prover="3"><result status="valid" time="0.031208" steps="6357"/></proof>
  </goal>
  <goal name="vc_next&#39;0.14" expl="call_mut &#39;self&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.031061" steps="6031"/></proof>
  </goal>
  <goal name="vc_next&#39;0.15" expl="call_mut &#39;args&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.032542" steps="6260"/></proof>
  </goal>
  <goal name="vc_next&#39;0.16" expl="call_mut requires" proved="true">
  <proof prover="3"><result status="valid" time="0.032395" steps="6248"/></proof>
  </goal>
  <goal name="vc_next&#39;0.17" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.025367" steps="5374"/></proof>
  </goal>
  <goal name="vc_next&#39;0.18" expl="mut invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.027236" steps="4467"/></proof>
  </goal>
  <goal name="vc_next&#39;0.19" expl="loop invariant #0" proved="true">
  <proof prover="3"><result status="valid" time="0.016191" steps="6661"/></proof>
  </goal>
  <goal name="vc_next&#39;0.20" expl="loop invariant #1" proved="true">
  <proof prover="3"><result status="valid" time="0.140911" steps="6659"/></proof>
  </goal>
  <goal name="vc_next&#39;0.21" expl="loop invariant #2" proved="true">
  <proof prover="3"><result status="valid" time="0.019116" steps="8295"/></proof>
  </goal>
  <goal name="vc_next&#39;0.22" expl="loop invariant #3" proved="true">
  <proof prover="3"><result status="valid" time="0.049348" steps="4567"/></proof>
  </goal>
  <goal name="vc_next&#39;0.23" expl="loop invariant #4" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.020908" steps="4828"/></proof>
  </goal>
  <goal name="vc_next&#39;0.24" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.033945" steps="6639"/></proof>
  </goal>
  <goal name="vc_next&#39;0.25" expl="next result type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.060862" steps="14266"/></proof>
  </goal>
  <goal name="vc_next&#39;0.26" expl="next ensures" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="vc_next&#39;0.26.0" expl="next ensures" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="vc_next&#39;0.26.0.0" expl="next ensures" proved="true">
    <proof prover="3" timelimit="5"><result status="valid" time="0.032139" steps="5845"/></proof>
    </goal>
    <goal name="vc_next&#39;0.26.0.1" expl="next ensures" proved="true">
    <transf name="exists" proved="true" arg1="(snoc (inner produced) field_0)">
     <goal name="vc_next&#39;0.26.0.1.0" proved="true">
     <transf name="exists" proved="true" arg1="(fun (_ : int) -&gt; length (inner produced))">
      <goal name="vc_next&#39;0.26.0.1.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="vc_next&#39;0.26.0.1.0.0.0" proved="true">
       <proof prover="0"><result status="valid" time="0.019923" steps="44138"/></proof>
       </goal>
       <goal name="vc_next&#39;0.26.0.1.0.0.1" proved="true">
       <proof prover="2"><result status="valid" time="0.054198" steps="12462"/></proof>
       </goal>
       <goal name="vc_next&#39;0.26.0.1.0.0.2" proved="true">
       <proof prover="3" timelimit="5"><result status="valid" time="0.046913" steps="7535"/></proof>
       </goal>
       <goal name="vc_next&#39;0.26.0.1.0.0.3" proved="true">
       <proof prover="1"><result status="valid" time="0.017256" steps="57"/></proof>
       </goal>
       <goal name="vc_next&#39;0.26.0.1.0.0.4" proved="true">
       <proof prover="3" timelimit="5"><result status="valid" time="0.088763" steps="16844"/></proof>
       </goal>
       <goal name="vc_next&#39;0.26.0.1.0.0.5" proved="true">
       <proof prover="3" timelimit="5"><result status="valid" time="0.056568" steps="8232"/></proof>
       </goal>
       <goal name="vc_next&#39;0.26.0.1.0.0.6" proved="true">
       <transf name="exists" proved="true" arg1="0">
        <goal name="vc_next&#39;0.26.0.1.0.0.6.0" proved="true">
        <proof prover="3" timelimit="5"><result status="valid" time="0.070624" steps="9636"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="vc_next&#39;0.27" proved="true">
  <proof prover="3"><result status="valid" time="0.029219" steps="4139"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_17_filter__filter" proved="true">
 <goal name="vc_filter&#39;0" proved="true">
 <proof prover="3"><result status="valid" time="0.026229" steps="2202"/></proof>
 </goal>
</theory>
<theory name="M_17_filter__less_than" proved="true">
 <goal name="vc_closure2&#39;0" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.021182" steps="2625"/></proof>
 </goal>
 <goal name="vc_less_than&#39;0" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_less_than&#39;0.0" expl="into_iter &#39;self&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.017634" steps="5152"/></proof>
  </goal>
  <goal name="vc_less_than&#39;0.1" expl="into_iter requires" proved="true">
  <proof prover="3"><result status="valid" time="0.026326" steps="3645"/></proof>
  </goal>
  <goal name="vc_less_than&#39;0.2" expl="filter &#39;self&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.024106" steps="3679"/></proof>
  </goal>
  <goal name="vc_less_than&#39;0.3" expl="filter &#39;predicate&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.026382" steps="5287"/></proof>
  </goal>
  <goal name="vc_less_than&#39;0.4" expl="filter requires #0" proved="true">
  <proof prover="3"><result status="valid" time="0.159460" steps="12731"/></proof>
  </goal>
  <goal name="vc_less_than&#39;0.5" expl="filter requires #1" proved="true">
  <proof prover="3"><result status="valid" time="0.150046" steps="12553"/></proof>
  </goal>
  <goal name="vc_less_than&#39;0.6" expl="filter requires #2" proved="true">
  <proof prover="3"><result status="valid" time="0.177981" steps="14325"/></proof>
  </goal>
  <goal name="vc_less_than&#39;0.7" expl="collect &#39;self&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.025616" steps="3712"/></proof>
  </goal>
  <goal name="vc_less_than&#39;0.8" expl="less_than ensures #0" proved="true">
  <transf name="unfold" proved="true" arg1="produces&#39;0" arg2="in" arg3="Assert">
   <goal name="vc_less_than&#39;0.8.0" expl="less_than ensures #0" proved="true">
   <transf name="unfold" proved="true" arg1="postcondition_mut&#39;0" arg2="in" arg3="Assert">
    <goal name="vc_less_than&#39;0.8.0.0" expl="less_than ensures #0" proved="true">
    <proof prover="2"><result status="valid" time="0.070261" steps="15780"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="vc_less_than&#39;0.9" expl="less_than ensures #1" proved="true">
  <transf name="destruct_rec" proved="true" arg1="Assert1">
   <goal name="vc_less_than&#39;0.9.0" expl="less_than ensures #1" proved="true">
   <transf name="unfold" proved="true" arg1="produces&#39;0" arg2="in" arg3="Assert2">
    <goal name="vc_less_than&#39;0.9.0.0" expl="less_than ensures #1" proved="true">
    <transf name="destruct_rec" proved="true" arg1="Assert2">
     <goal name="vc_less_than&#39;0.9.0.0.0" expl="less_than ensures #1" proved="true">
     <transf name="assert" proved="true" arg1="(forall i . contains&#39;0 s i -&gt; contains&#39;0 (view&#39;0 v) i)">
      <goal name="vc_less_than&#39;0.9.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
       <goal name="vc_less_than&#39;0.9.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.237236" steps="1751"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="vc_less_than&#39;0.9.0.0.0.1" expl="less_than ensures #1" proved="true">
      <proof prover="0"><result status="valid" time="0.036507" steps="70457"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
