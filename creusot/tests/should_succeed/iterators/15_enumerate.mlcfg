
module C15Enumerate_Enumerate_Type
  use prelude.Int
  use prelude.UIntSize
  type t_enumerate 'i =
    | C_Enumerate 'i usize
    
  let function enumerate_iter (self : t_enumerate 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Enumerate a _ -> a
      end
  let function enumerate_count (self : t_enumerate 'i) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Enumerate _ a -> a
      end
end
module C15Enumerate_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C15Enumerate_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C15Enumerate_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C15Enumerate_Impl0_Completed_Stub
  type i
  use prelude.Borrow
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate completed [#"../15_enumerate.rs" 22 4 22 35] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i))
end
module C15Enumerate_Impl0_Completed_Interface
  type i
  use prelude.Borrow
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate completed [#"../15_enumerate.rs" 22 4 22 35] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i))
  val completed [#"../15_enumerate.rs" 22 4 22 35] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) : bool
    ensures { result = completed self }
    
end
module C15Enumerate_Impl0_Completed
  type i
  use prelude.Borrow
  clone C15Enumerate_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate completed [#"../15_enumerate.rs" 22 4 22 35] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) =
    [#"../15_enumerate.rs" 23 8 23 43] Completed0.completed {current = C15Enumerate_Enumerate_Type.enumerate_iter ( * self); final = C15Enumerate_Enumerate_Type.enumerate_iter ( ^ self)}
  val completed [#"../15_enumerate.rs" 22 4 22 35] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) : bool
    ensures { result = completed self }
    
end
module C15Enumerate_Common_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module C15Enumerate_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module C15Enumerate_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module C15Enumerate_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module C15Enumerate_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
end
module C15Enumerate_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Inv0.inv a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Inv0.inv a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C15Enumerate_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Inv0.inv a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Inv0.inv a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C15Enumerate_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C15Enumerate_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Inv0.inv a}
    requires {[#"../common.rs" 21 31 21 33] Inv1.inv ab}
    requires {[#"../common.rs" 21 52 21 53] Inv0.inv b}
    requires {[#"../common.rs" 21 61 21 63] Inv1.inv bc}
    requires {[#"../common.rs" 21 82 21 83] Inv0.inv c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Inv0.inv a) -> ([#"../common.rs" 21 31 21 33] Inv1.inv ab) -> ([#"../common.rs" 21 52 21 53] Inv0.inv b) -> ([#"../common.rs" 21 61 21 63] Inv1.inv bc) -> ([#"../common.rs" 21 82 21 83] Inv0.inv c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C15Enumerate_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Inv0.inv a}
    requires {[#"../common.rs" 21 31 21 33] Inv1.inv ab}
    requires {[#"../common.rs" 21 52 21 53] Inv0.inv b}
    requires {[#"../common.rs" 21 61 21 63] Inv1.inv bc}
    requires {[#"../common.rs" 21 82 21 83] Inv0.inv c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Inv0.inv a) -> ([#"../common.rs" 21 31 21 33] Inv1.inv ab) -> ([#"../common.rs" 21 52 21 53] Inv0.inv b) -> ([#"../common.rs" 21 61 21 63] Inv1.inv bc) -> ([#"../common.rs" 21 82 21 83] Inv0.inv c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C15Enumerate_Impl0_Produces_Stub
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate produces [#"../15_enumerate.rs" 28 4 28 64] (self : C15Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : C15Enumerate_Enumerate_Type.t_enumerate i)
    
end
module C15Enumerate_Impl0_Produces_Interface
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate produces [#"../15_enumerate.rs" 28 4 28 64] (self : C15Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : C15Enumerate_Enumerate_Type.t_enumerate i)
    
  val produces [#"../15_enumerate.rs" 28 4 28 64] (self : C15Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : C15Enumerate_Enumerate_Type.t_enumerate i) : bool
    ensures { result = produces self visited o }
    
end
module C15Enumerate_Impl0_Produces
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq Item0.item
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate produces [#"../15_enumerate.rs" 28 4 28 64] (self : C15Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : C15Enumerate_Enumerate_Type.t_enumerate i)
    
   =
    [#"../15_enumerate.rs" 29 8 34 9] Seq.length visited = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count o) - UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) /\ (exists s : Seq.seq Item0.item . Inv0.inv s /\ Produces0.produces (C15Enumerate_Enumerate_Type.enumerate_iter self) s (C15Enumerate_Enumerate_Type.enumerate_iter o) /\ Seq.length visited = Seq.length s /\ (forall i : int . 0 <= i /\ i < Seq.length s -> UIntSize.to_int (let (a, _) = Seq.get visited i in a) = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + i /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  val produces [#"../15_enumerate.rs" 28 4 28 64] (self : C15Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : C15Enumerate_Enumerate_Type.t_enumerate i) : bool
    ensures { result = produces self visited o }
    
end
module Core_Usize_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Usize_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module C15Enumerate_Impl1_Invariant_Stub
  type i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate invariant' [#"../15_enumerate.rs" 71 4 71 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i)
end
module C15Enumerate_Impl1_Invariant_Interface
  type i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate invariant' [#"../15_enumerate.rs" 71 4 71 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i)
  val invariant' [#"../15_enumerate.rs" 71 4 71 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i) : bool
    ensures { result = invariant' self }
    
end
module C15Enumerate_Impl1_Invariant
  type i
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed i
  clone Core_Usize_Max_Stub as Max0
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate invariant' [#"../15_enumerate.rs" 71 4 71 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i) =
    [#"../15_enumerate.rs" 73 12 74 79] (forall i : i . forall s : Seq.seq Item0.item . Inv0.inv i -> Inv1.inv s -> Produces0.produces (C15Enumerate_Enumerate_Type.enumerate_iter self) s i -> UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + Seq.length s < UIntSize.to_int Max0.mAX') /\ (forall i : borrowed i . Inv2.inv i -> Completed0.completed i -> Produces0.produces ( * i) (Seq.empty ) ( ^ i))
  val invariant' [#"../15_enumerate.rs" 71 4 71 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i) : bool
    ensures { result = invariant' self }
    
end
module C15Enumerate_Enumerate_Type_Inv
  type i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone C15Enumerate_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  axiom inv_t_enumerate [@rewrite] : forall self : C15Enumerate_Enumerate_Type.t_enumerate i . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv (C15Enumerate_Enumerate_Type.enumerate_iter self))
end
module C15Enumerate_Impl0_ProducesRefl_Stub
  type i
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  function produces_refl [#"../15_enumerate.rs" 40 4 40 29] (a : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
end
module C15Enumerate_Impl0_ProducesRefl_Interface
  type i
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  function produces_refl [#"../15_enumerate.rs" 40 4 40 29] (a : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
  val produces_refl [#"../15_enumerate.rs" 40 4 40 29] (a : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../15_enumerate.rs" 40 21 40 22] Inv0.inv a}
    ensures { [#"../15_enumerate.rs" 39 14 39 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C15Enumerate_Enumerate_Type.t_enumerate i . ([#"../15_enumerate.rs" 40 21 40 22] Inv0.inv a) -> ([#"../15_enumerate.rs" 39 14 39 39] Produces0.produces a (Seq.empty ) a)
end
module C15Enumerate_Impl0_ProducesRefl
  type i
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  function produces_refl [#"../15_enumerate.rs" 40 4 40 29] (a : C15Enumerate_Enumerate_Type.t_enumerate i) : () =
    [#"../15_enumerate.rs" 37 4 37 10] ()
  val produces_refl [#"../15_enumerate.rs" 40 4 40 29] (a : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../15_enumerate.rs" 40 21 40 22] Inv0.inv a}
    ensures { [#"../15_enumerate.rs" 39 14 39 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C15Enumerate_Enumerate_Type.t_enumerate i . ([#"../15_enumerate.rs" 40 21 40 22] Inv0.inv a) -> ([#"../15_enumerate.rs" 39 14 39 39] Produces0.produces a (Seq.empty ) a)
end
module C15Enumerate_Impl0_ProducesRefl_Impl
  type i
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed i,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = i,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone C15Enumerate_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone Core_Usize_Max as Max0
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq Item0.item
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone C15Enumerate_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C15Enumerate_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv1.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C15Enumerate_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl1_Invariant as Invariant0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Produces0.produces = Produces1.produces,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv3.inv,
    predicate Completed0.completed = Completed0.completed
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  clone C15Enumerate_Enumerate_Type_Inv as C15Enumerate_Enumerate_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone C15Enumerate_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces1.produces
  let rec ghost function produces_refl [#"../15_enumerate.rs" 40 4 40 29] (a : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../15_enumerate.rs" 40 21 40 22] Inv0.inv a}
    ensures { [#"../15_enumerate.rs" 39 14 39 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../15_enumerate.rs" 37 4 37 10] ()
end
module C15Enumerate_Impl0_ProducesTrans_Stub
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (usize, Item0.item)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans [#"../15_enumerate.rs" 47 4 47 90] (a : C15Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : C15Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    
end
module C15Enumerate_Impl0_ProducesTrans_Interface
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (usize, Item0.item)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans [#"../15_enumerate.rs" 47 4 47 90] (a : C15Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : C15Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    
  val produces_trans [#"../15_enumerate.rs" 47 4 47 90] (a : C15Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : C15Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../15_enumerate.rs" 44 15 44 32] Produces0.produces a ab b}
    requires {[#"../15_enumerate.rs" 45 15 45 32] Produces0.produces b bc c}
    requires {[#"../15_enumerate.rs" 47 22 47 23] Inv0.inv a}
    requires {[#"../15_enumerate.rs" 47 31 47 33] Inv1.inv ab}
    requires {[#"../15_enumerate.rs" 47 52 47 53] Inv0.inv b}
    requires {[#"../15_enumerate.rs" 47 61 47 63] Inv1.inv bc}
    requires {[#"../15_enumerate.rs" 47 82 47 83] Inv0.inv c}
    ensures { [#"../15_enumerate.rs" 46 14 46 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C15Enumerate_Enumerate_Type.t_enumerate i, ab : Seq.seq (usize, Item0.item), b : C15Enumerate_Enumerate_Type.t_enumerate i, bc : Seq.seq (usize, Item0.item), c : C15Enumerate_Enumerate_Type.t_enumerate i . ([#"../15_enumerate.rs" 44 15 44 32] Produces0.produces a ab b) -> ([#"../15_enumerate.rs" 45 15 45 32] Produces0.produces b bc c) -> ([#"../15_enumerate.rs" 47 22 47 23] Inv0.inv a) -> ([#"../15_enumerate.rs" 47 31 47 33] Inv1.inv ab) -> ([#"../15_enumerate.rs" 47 52 47 53] Inv0.inv b) -> ([#"../15_enumerate.rs" 47 61 47 63] Inv1.inv bc) -> ([#"../15_enumerate.rs" 47 82 47 83] Inv0.inv c) -> ([#"../15_enumerate.rs" 46 14 46 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C15Enumerate_Impl0_ProducesTrans
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (usize, Item0.item)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans [#"../15_enumerate.rs" 47 4 47 90] (a : C15Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : C15Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    
   =
    [#"../15_enumerate.rs" 42 4 42 10] ()
  val produces_trans [#"../15_enumerate.rs" 47 4 47 90] (a : C15Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : C15Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../15_enumerate.rs" 44 15 44 32] Produces0.produces a ab b}
    requires {[#"../15_enumerate.rs" 45 15 45 32] Produces0.produces b bc c}
    requires {[#"../15_enumerate.rs" 47 22 47 23] Inv0.inv a}
    requires {[#"../15_enumerate.rs" 47 31 47 33] Inv1.inv ab}
    requires {[#"../15_enumerate.rs" 47 52 47 53] Inv0.inv b}
    requires {[#"../15_enumerate.rs" 47 61 47 63] Inv1.inv bc}
    requires {[#"../15_enumerate.rs" 47 82 47 83] Inv0.inv c}
    ensures { [#"../15_enumerate.rs" 46 14 46 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C15Enumerate_Enumerate_Type.t_enumerate i, ab : Seq.seq (usize, Item0.item), b : C15Enumerate_Enumerate_Type.t_enumerate i, bc : Seq.seq (usize, Item0.item), c : C15Enumerate_Enumerate_Type.t_enumerate i . ([#"../15_enumerate.rs" 44 15 44 32] Produces0.produces a ab b) -> ([#"../15_enumerate.rs" 45 15 45 32] Produces0.produces b bc c) -> ([#"../15_enumerate.rs" 47 22 47 23] Inv0.inv a) -> ([#"../15_enumerate.rs" 47 31 47 33] Inv1.inv ab) -> ([#"../15_enumerate.rs" 47 52 47 53] Inv0.inv b) -> ([#"../15_enumerate.rs" 47 61 47 63] Inv1.inv bc) -> ([#"../15_enumerate.rs" 47 82 47 83] Inv0.inv c) -> ([#"../15_enumerate.rs" 46 14 46 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C15Enumerate_Impl0_ProducesTrans_Impl
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed i,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = i,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone C15Enumerate_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone Core_Usize_Max as Max0
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Seq.seq Item0.item
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl1_Invariant as Invariant0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv4.inv,
    predicate Completed0.completed = Completed0.completed
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone C15Enumerate_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv2.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C15Enumerate_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq (usize, Item0.item)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Seq.seq (usize, Item0.item),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  clone C15Enumerate_Enumerate_Type_Inv as C15Enumerate_Enumerate_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone C15Enumerate_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces
  let rec ghost function produces_trans [#"../15_enumerate.rs" 47 4 47 90] (a : C15Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : C15Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../15_enumerate.rs" 44 15 44 32] Produces0.produces a ab b}
    requires {[#"../15_enumerate.rs" 45 15 45 32] Produces0.produces b bc c}
    requires {[#"../15_enumerate.rs" 47 22 47 23] Inv0.inv a}
    requires {[#"../15_enumerate.rs" 47 31 47 33] Inv1.inv ab}
    requires {[#"../15_enumerate.rs" 47 52 47 53] Inv0.inv b}
    requires {[#"../15_enumerate.rs" 47 61 47 63] Inv1.inv bc}
    requires {[#"../15_enumerate.rs" 47 82 47 83] Inv0.inv c}
    ensures { [#"../15_enumerate.rs" 46 14 46 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../15_enumerate.rs" 42 4 42 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C15Enumerate_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C15Enumerate_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  val next [#"../common.rs" 27 4 27 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 27 17 27 21] Inv0.inv self}
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 26 27 44] Inv1.inv result }
    
end
module TyInv_Borrow
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  axiom inv_borrow [@rewrite] : forall self : borrowed t . Inv0.inv self = (Inv1.inv ( * self) /\ Inv1.inv ( ^ self))
end
module C15Enumerate_Impl0_Next_Interface
  type i
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option (usize, Item0.item)
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C15Enumerate_Impl0_Completed_Stub as Completed0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)
  val next [#"../15_enumerate.rs" 53 4 53 44] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) : Core_Option_Option_Type.t_option (usize, Item0.item)
    requires {[#"../15_enumerate.rs" 53 17 53 21] Inv0.inv self}
    ensures { [#"../15_enumerate.rs" 49 14 52 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../15_enumerate.rs" 53 26 53 44] Inv1.inv result }
    
end
module C15Enumerate_Impl0_Next
  type i
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  clone Core_Usize_Max as Max0
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = borrowed i
  clone C15Enumerate_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl1_Invariant as Invariant0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Produces0.produces = Produces1.produces,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv4.inv,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  clone C15Enumerate_Enumerate_Type_Inv as C15Enumerate_Enumerate_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv6.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed i,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Core_Option_Option_Type.t_option (usize, Item0.item)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Core_Option_Option_Type.t_option (usize, Item0.item),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Option_Option_Type.t_option Item0.item,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone C15Enumerate_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv5.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C15Enumerate_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C15Enumerate_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv5.inv,
    predicate Produces0.produces = Produces1.produces
  clone C15Enumerate_Impl0_Completed as Completed0 with
    type i = i,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone C15Enumerate_Common_Iterator_Next_Interface as Next0 with
    type self = i,
    predicate Inv0.inv = Inv4.inv,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv1.inv = Inv1.inv
  let rec cfg next [#"../15_enumerate.rs" 53 4 53 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) : Core_Option_Option_Type.t_option (usize, Item0.item)
    requires {[#"../15_enumerate.rs" 53 17 53 21] Inv2.inv self}
    ensures { [#"../15_enumerate.rs" 49 14 52 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../15_enumerate.rs" 53 26 53 44] Inv3.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (usize, Item0.item);
  var self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i) = self;
  var _3 : Core_Option_Option_Type.t_option Item0.item;
  var _4 : borrowed i;
  var x : Item0.item;
  var n : usize;
  {
    goto BB0
  }
  BB0 {
    _4 <- Borrow.borrow_mut (C15Enumerate_Enumerate_Type.enumerate_iter ( * self));
    self <- { self with current = (let C15Enumerate_Enumerate_Type.C_Enumerate a b =  * self in C15Enumerate_Enumerate_Type.C_Enumerate ( ^ _4) b) };
    assume { Inv0.inv ( ^ _4) };
    _3 <- ([#"../15_enumerate.rs" 54 14 54 30] Next0.next _4);
    _4 <- any borrowed i;
    goto BB1
  }
  BB1 {
    switch (_3)
      | Core_Option_Option_Type.C_None -> goto BB2
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      end
  }
  BB2 {
    goto BB5
  }
  BB3 {
    x <- Core_Option_Option_Type.some_0 _3;
    _3 <- (let Core_Option_Option_Type.C_Some a = _3 in Core_Option_Option_Type.C_Some (any Item0.item));
    assert { [@expl:type invariant] Inv1.inv _3 };
    assume { Resolve0.resolve _3 };
    n <- C15Enumerate_Enumerate_Type.enumerate_count ( * self);
    self <- { self with current = (let C15Enumerate_Enumerate_Type.C_Enumerate a b =  * self in C15Enumerate_Enumerate_Type.C_Enumerate a ([#"../15_enumerate.rs" 58 16 58 31] C15Enumerate_Enumerate_Type.enumerate_count ( * self) + ([#"../15_enumerate.rs" 58 30 58 31] (1 : usize)))) };
    assert { [@expl:type invariant] Inv2.inv self };
    assume { Resolve1.resolve self };
    goto BB6
  }
  BB4 {
    assert { [@expl:type invariant] Inv1.inv _3 };
    assume { Resolve0.resolve _3 };
    assert { [@expl:type invariant] Inv2.inv self };
    assume { Resolve1.resolve self };
    absurd
  }
  BB5 {
    assert { [@expl:type invariant] Inv1.inv _3 };
    assume { Resolve0.resolve _3 };
    assert { [@expl:type invariant] Inv2.inv self };
    assume { Resolve1.resolve self };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB9
  }
  BB6 {
    _0 <- Core_Option_Option_Type.C_Some (n, x);
    x <- any Item0.item;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module C15Enumerate_Enumerate_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  clone Core_Usize_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone C15Enumerate_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed i
  val enumerate [#"../15_enumerate.rs" 81 0 81 54] (iter : i) : C15Enumerate_Enumerate_Type.t_enumerate i
    requires {[#"../15_enumerate.rs" 79 0 79 75] forall i : borrowed i . Inv0.inv i -> Completed0.completed i -> Produces0.produces ( * i) (Seq.empty ) ( ^ i)}
    requires {[#"../15_enumerate.rs" 80 0 80 93] forall i : i . forall s : Seq.seq Item0.item . Inv1.inv i -> Inv2.inv s -> Produces0.produces iter s i -> Seq.length s < UIntSize.to_int Max0.mAX'}
    requires {[#"../15_enumerate.rs" 81 30 81 34] Inv1.inv iter}
    ensures { [#"../15_enumerate.rs" 81 42 81 54] Inv3.inv result }
    
end
module C15Enumerate_Enumerate
  type i
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed i
  clone Core_Usize_Max as Max0
  clone C15Enumerate_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl1_Invariant as Invariant0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Produces0.produces = Produces0.produces,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv0.inv,
    predicate Completed0.completed = Completed0.completed
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  clone C15Enumerate_Enumerate_Type_Inv as C15Enumerate_Enumerate_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = i,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone C15Enumerate_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C15Enumerate_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  let rec cfg enumerate [#"../15_enumerate.rs" 81 0 81 54] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) : C15Enumerate_Enumerate_Type.t_enumerate i
    requires {[#"../15_enumerate.rs" 79 0 79 75] forall i : borrowed i . Inv0.inv i -> Completed0.completed i -> Produces0.produces ( * i) (Seq.empty ) ( ^ i)}
    requires {[#"../15_enumerate.rs" 80 0 80 93] forall i : i . forall s : Seq.seq Item0.item . Inv1.inv i -> Inv2.inv s -> Produces0.produces iter s i -> Seq.length s < UIntSize.to_int Max0.mAX'}
    requires {[#"../15_enumerate.rs" 81 30 81 34] Inv1.inv iter}
    ensures { [#"../15_enumerate.rs" 81 42 81 54] Inv3.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C15Enumerate_Enumerate_Type.t_enumerate i;
  var iter : i = iter;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _0 <- C15Enumerate_Enumerate_Type.C_Enumerate iter ([#"../15_enumerate.rs" 82 29 82 30] (0 : usize));
    iter <- any i;
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C15Enumerate_Impl0
  type i
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = borrowed i,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = i,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone Core_Usize_Max as Max0
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C15Enumerate_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Seq.seq Item0.item
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl1_Invariant as Invariant0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate Produces0.produces = Produces1.produces,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv6.inv,
    predicate Completed0.completed = Completed1.completed
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Seq.seq (usize, Item0.item)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Seq.seq (usize, Item0.item),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  clone C15Enumerate_Enumerate_Type_Inv as C15Enumerate_Enumerate_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv5.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Option_Option_Type.t_option (usize, Item0.item)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Option_Option_Type.t_option (usize, Item0.item),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone C15Enumerate_Common_Iterator_Item_Type as Item1 with
    type self = C15Enumerate_Enumerate_Type.t_enumerate i
  clone C15Enumerate_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv4.inv,
    predicate Produces0.produces = Produces1.produces
  clone C15Enumerate_Impl0_Completed as Completed0 with
    type i = i,
    predicate Completed0.completed = Completed1.completed
  goal next_refn : [#"../15_enumerate.rs" 53 4 53 44] forall self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i) . Inv0.inv self -> Inv0.inv self /\ (forall result : Core_Option_Option_Type.t_option (usize, Item0.item) . Inv1.inv result /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end -> Inv1.inv result /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_refl_refn : [#"../15_enumerate.rs" 40 4 40 29] forall a : C15Enumerate_Enumerate_Type.t_enumerate i . Inv2.inv a -> Inv2.inv a /\ (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
  goal produces_trans_refn : [#"../15_enumerate.rs" 47 4 47 90] forall a : C15Enumerate_Enumerate_Type.t_enumerate i . forall ab : Seq.seq (usize, Item0.item) . forall b : C15Enumerate_Enumerate_Type.t_enumerate i . forall bc : Seq.seq (usize, Item0.item) . forall c : C15Enumerate_Enumerate_Type.t_enumerate i . Inv2.inv c /\ Inv3.inv bc /\ Inv2.inv b /\ Inv3.inv ab /\ Inv2.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Inv2.inv c /\ Inv3.inv bc /\ Inv2.inv b /\ Inv3.inv ab /\ Inv2.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
end
module C15Enumerate_Impl1
  type i
end
