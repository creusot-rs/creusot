module T_06_map_precond__Map [#"06_map_precond.rs" 13 0 13 78]
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  type t_Map 'i 'b 'f 'proj0 =
    | C_Map 'i 'f (Snapshot.snap_ty (Seq.seq 'proj0))
  
  let rec t_Map < 'i > < 'b > < 'f > < 'proj0 > (input:t_Map 'i 'b 'f 'proj0) (ret  (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'proj0)))= any
    [ good (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'proj0))-> {C_Map iter func produced = input}
      (! ret {iter} {func} {produced}) ]
    
  
  function t_Map__func (self : t_Map 'i 'b 'f 'proj0) : 'f =
    match self with
      | C_Map _ a _ -> a
      end
  
  function t_Map__iter (self : t_Map 'i 'b 'f 'proj0) : 'i =
    match self with
      | C_Map a _ _ -> a
      end
  
  function t_Map__produced (self : t_Map 'i 'b 'f 'proj0) : Snapshot.snap_ty (Seq.seq 'proj0) =
    match self with
      | C_Map _ _ a -> a
      end
end
module M_06_map_precond__qyi16548623944279504987__preservation_inv [#"06_map_precond.rs" 103 4 103 73] (* Map<I, B, F> *)
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "06_map_precond.rs" 102 4 102 83
  let%span s06_map_precond1 = "06_map_precond.rs" 104 8 112 9
  let%span s06_map_precond2 = "06_map_precond.rs" 117 8 124 9
  let%span scommon3 = "common.rs" 14 15 14 24
  let%span scommon4 = "common.rs" 15 14 15 45
  let%span scommon5 = "common.rs" 19 15 19 21
  let%span scommon6 = "common.rs" 20 15 20 21
  let%span scommon7 = "common.rs" 21 15 21 21
  let%span scommon8 = "common.rs" 22 15 22 32
  let%span scommon9 = "common.rs" 23 15 23 32
  let%span scommon10 = "common.rs" 24 14 24 42
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span sseq18 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sinvariant19 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed20 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'1 (_1 : t_Item'0)
  
  predicate invariant'2 (self : t_Item'0) =
    [%#sboxed20] inv'1 self
  
  predicate inv'5 (_1 : t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Item'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . [%#sops17] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops14] unnest'0 self b)
   -> ([%#sops15] unnest'0 b c)  -> ([%#sops16] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops13] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . ([%#sops11] postcondition_mut'0 self args res)
   -> ([%#sops12] unnest'0 self.current self.final)
  
  predicate inv'6 (_1 : f)
  
  predicate invariant'1 (self : borrowed f) =
    [%#sinvariant19] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'2 (_1 : borrowed f)
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed f [inv'2 x] . inv'2 x = invariant'1 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'0 (self : Seq.seq t_Item'0) =
    [%#sseq18] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'0 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  predicate inv'4 (_1 : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon5] inv'4 a)
   -> ([%#scommon6] inv'4 b)
   -> ([%#scommon7] inv'4 c)
   -> ([%#scommon8] produces'0 a ab b)
   -> ([%#scommon9] produces'0 b bc c)  -> ([%#scommon10] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon3] inv'4 self)
   -> ([%#scommon4] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate precondition'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate inv'3 (_1 : b)
  
  predicate preservation'0 [#"06_map_precond.rs" 116 4 116 45] (iter : i) (func : f) =
    [%#s06_map_precond2] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i . inv'0 s
    /\ inv'1 e1 /\ inv'1 e2 /\ inv'2 f /\ inv'3 b /\ inv'4 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  constant iter  : i
  
  constant func  : f
  
  constant produced  : Seq.seq t_Item'0
  
  predicate preservation_inv [#"06_map_precond.rs" 103 4 103 73] (iter : i) (func : f) (produced : Seq.seq t_Item'0)
  
  goal vc_preservation_inv : [%#s06_map_precond0] produced = (Seq.empty  : Seq.seq t_Item'0)
   -> ([%#s06_map_precond1] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b] . inv'0 s
  /\ inv'1 e1 /\ inv'1 e2 /\ inv'2 f /\ inv'3 b /\ inv'4 i /\ unnest'0 func f.current
   -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
   -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
   -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
   -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1)))
  = preservation'0 iter func
end
module M_06_map_precond__qyi18374305379273630819__produces_refl [#"06_map_precond.rs" 35 4 35 26] (* <Map<I, B, F> as common::Iterator> *)
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "06_map_precond.rs" 33 15 33 24
  let%span s06_map_precond1 = "06_map_precond.rs" 34 14 34 45
  let%span s06_map_precond2 = "06_map_precond.rs" 51 8 65 9
  let%span scommon3 = "common.rs" 14 15 14 24
  let%span scommon4 = "common.rs" 15 14 15 45
  let%span scommon5 = "common.rs" 19 15 19 21
  let%span scommon6 = "common.rs" 20 15 20 21
  let%span scommon7 = "common.rs" 21 15 21 21
  let%span scommon8 = "common.rs" 22 15 22 32
  let%span scommon9 = "common.rs" 23 15 23 32
  let%span scommon10 = "common.rs" 24 14 24 42
  let%span s06_map_precond11 = "06_map_precond.rs" 178 12 180 73
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span s06_map_precond19 = "06_map_precond.rs" 129 8 135 9
  let%span s06_map_precond20 = "06_map_precond.rs" 102 4 102 83
  let%span s06_map_precond21 = "06_map_precond.rs" 104 8 112 9
  let%span s06_map_precond22 = "06_map_precond.rs" 93 8 98 9
  let%span sseq23 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span s06_map_precond24 = "06_map_precond.rs" 117 8 124 9
  let%span sinvariant25 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed26 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'6 (_1 : t_Item'0)
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed26] inv'6 self
  
  predicate inv'10 (_1 : t_Item'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Item'0 [inv'10 x] . inv'10 x = invariant'6 x
  
  use prelude.prelude.Borrow
  
  predicate inv'7 (_1 : borrowed f)
  
  predicate invariant'5 (self : borrowed f) =
    [%#sboxed26] inv'7 self
  
  predicate inv'9 (_1 : borrowed f)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed f [inv'9 x] . inv'9 x = invariant'5 x
  
  predicate inv'4 (_1 : f)
  
  predicate invariant'4 (self : borrowed f) =
    [%#sinvariant25] inv'4 self.current /\ inv'4 self.final
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed f [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate inv'3 (_1 : i)
  
  predicate invariant'3 (self : borrowed i) =
    [%#sinvariant25] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'5 (_1 : borrowed i)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed i [inv'5 x] . inv'5 x = invariant'3 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq23] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq (borrowed f)) =
    [%#sseq23] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq (borrowed f))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (borrowed f) [inv'1 x] . inv'1 x = invariant'1 x
  
  use prelude.prelude.Snapshot
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . [%#sops18] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops15] unnest'0 self b)
   -> ([%#sops16] unnest'0 b c)  -> ([%#sops17] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops14] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . ([%#sops12] postcondition_mut'0 self args res)
   -> ([%#sops13] unnest'0 self.current self.final)
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon5] inv'3 a)
   -> ([%#scommon6] inv'3 b)
   -> ([%#scommon7] inv'3 c)
   -> ([%#scommon8] produces'1 a ab b)
   -> ([%#scommon9] produces'1 b bc c)  -> ([%#scommon10] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon3] inv'3 self)
   -> ([%#scommon4] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate precondition'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate next_precondition'0 [#"06_map_precond.rs" 92 4 92 74] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond22] forall e : t_Item'0, i : i [produces'1 iter (Seq.singleton e) i] . inv'6 e
    /\ inv'3 i /\ produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  predicate inv'8 (_1 : b)
  
  predicate preservation'0 [#"06_map_precond.rs" 116 4 116 45] (iter : i) (func : f) =
    [%#s06_map_precond24] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i . inv'2 s
    /\ inv'6 e1 /\ inv'6 e2 /\ inv'7 f /\ inv'8 b /\ inv'3 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 103 4 103 73] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond21] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b] . inv'2 s
    /\ inv'6 e1 /\ inv'6 e2 /\ inv'7 f /\ inv'8 b /\ inv'3 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq t_Item'0 . [%#s06_map_precond20] produced
  = (Seq.empty  : Seq.seq t_Item'0)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  use prelude.prelude.Snapshot
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"06_map_precond.rs" 128 4 128 29] (_1 : ()) =
    [%#s06_map_precond19] forall iter : borrowed i, func : f . inv'5 iter /\ inv'4 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq t_Item'0) /\ preservation'0 iter.final func
  
  use T_06_map_precond__Map as Map'0
  
  predicate invariant'0 [#"06_map_precond.rs" 176 4 176 30] (self : Map'0.t_Map i b f t_Item'0) =
    [%#s06_map_precond11] reinitialize'0 ()
    /\ preservation_inv'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
    /\ next_precondition'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
  
  predicate inv'0 (_1 : Map'0.t_Map i b f t_Item'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Map'0.t_Map i b f t_Item'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> inv'3 iter /\ inv'4 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 50 4 50 67] (self : Map'0.t_Map i b f t_Item'0) (visited : Seq.seq b) (succ : Map'0.t_Map i b f t_Item'0)
    
   =
    [%#s06_map_precond2] unnest'0 (T_06_map_precond__Map.t_Map__func self) (T_06_map_precond__Map.t_Map__func succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'1 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 (T_06_map_precond__Map.t_Map__iter self) s (T_06_map_precond__Map.t_Map__iter succ)] . inv'2 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (T_06_map_precond__Map.t_Map__iter self) s (T_06_map_precond__Map.t_Map__iter succ)
    /\ Snapshot.inner (T_06_map_precond__Map.t_Map__produced succ)
    = Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      T_06_map_precond__Map.t_Map__func self = T_06_map_precond__Map.t_Map__func succ
    else
      (Seq.get fs 0).current = T_06_map_precond__Map.t_Map__func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = T_06_map_precond__Map.t_Map__func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (T_06_map_precond__Map.t_Map__func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) (Seq.([..]) s 0 i))) (Seq.get visited i))))
  
  use seq.Seq
  
  constant self  : Map'0.t_Map i b f t_Item'0
  
  function produces_refl [#"06_map_precond.rs" 35 4 35 26] (self : Map'0.t_Map i b f t_Item'0) : ()
  
  goal vc_produces_refl : ([%#s06_map_precond0] inv'0 self)
   -> ([%#s06_map_precond1] produces'0 self (Seq.empty  : Seq.seq b) self)
end
module M_06_map_precond__qyi18374305379273630819__produces_trans [#"06_map_precond.rs" 45 4 45 90] (* <Map<I, B, F> as common::Iterator> *)
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "06_map_precond.rs" 39 15 39 21
  let%span s06_map_precond1 = "06_map_precond.rs" 40 15 40 21
  let%span s06_map_precond2 = "06_map_precond.rs" 41 15 41 21
  let%span s06_map_precond3 = "06_map_precond.rs" 42 15 42 32
  let%span s06_map_precond4 = "06_map_precond.rs" 43 15 43 32
  let%span s06_map_precond5 = "06_map_precond.rs" 44 14 44 42
  let%span s06_map_precond6 = "06_map_precond.rs" 51 8 65 9
  let%span scommon7 = "common.rs" 14 15 14 24
  let%span scommon8 = "common.rs" 15 14 15 45
  let%span scommon9 = "common.rs" 19 15 19 21
  let%span scommon10 = "common.rs" 20 15 20 21
  let%span scommon11 = "common.rs" 21 15 21 21
  let%span scommon12 = "common.rs" 22 15 22 32
  let%span scommon13 = "common.rs" 23 15 23 32
  let%span scommon14 = "common.rs" 24 14 24 42
  let%span s06_map_precond15 = "06_map_precond.rs" 178 12 180 73
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops21 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span s06_map_precond23 = "06_map_precond.rs" 129 8 135 9
  let%span s06_map_precond24 = "06_map_precond.rs" 102 4 102 83
  let%span s06_map_precond25 = "06_map_precond.rs" 104 8 112 9
  let%span s06_map_precond26 = "06_map_precond.rs" 93 8 98 9
  let%span sseq27 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span s06_map_precond28 = "06_map_precond.rs" 117 8 124 9
  let%span sinvariant29 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed30 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'6 (_1 : t_Item'0)
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed30] inv'6 self
  
  predicate inv'10 (_1 : t_Item'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Item'0 [inv'10 x] . inv'10 x = invariant'6 x
  
  use prelude.prelude.Borrow
  
  predicate inv'7 (_1 : borrowed f)
  
  predicate invariant'5 (self : borrowed f) =
    [%#sboxed30] inv'7 self
  
  predicate inv'9 (_1 : borrowed f)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed f [inv'9 x] . inv'9 x = invariant'5 x
  
  predicate inv'4 (_1 : f)
  
  predicate invariant'4 (self : borrowed f) =
    [%#sinvariant29] inv'4 self.current /\ inv'4 self.final
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed f [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate inv'3 (_1 : i)
  
  predicate invariant'3 (self : borrowed i) =
    [%#sinvariant29] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'5 (_1 : borrowed i)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed i [inv'5 x] . inv'5 x = invariant'3 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq27] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq (borrowed f)) =
    [%#sseq27] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq (borrowed f))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (borrowed f) [inv'1 x] . inv'1 x = invariant'1 x
  
  use prelude.prelude.Snapshot
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . [%#sops22] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops19] unnest'0 self b)
   -> ([%#sops20] unnest'0 b c)  -> ([%#sops21] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops18] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . ([%#sops16] postcondition_mut'0 self args res)
   -> ([%#sops17] unnest'0 self.current self.final)
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon9] inv'3 a)
   -> ([%#scommon10] inv'3 b)
   -> ([%#scommon11] inv'3 c)
   -> ([%#scommon12] produces'1 a ab b)
   -> ([%#scommon13] produces'1 b bc c)  -> ([%#scommon14] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon7] inv'3 self)
   -> ([%#scommon8] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate precondition'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate next_precondition'0 [#"06_map_precond.rs" 92 4 92 74] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond26] forall e : t_Item'0, i : i [produces'1 iter (Seq.singleton e) i] . inv'6 e
    /\ inv'3 i /\ produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  predicate inv'8 (_1 : b)
  
  predicate preservation'0 [#"06_map_precond.rs" 116 4 116 45] (iter : i) (func : f) =
    [%#s06_map_precond28] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i . inv'2 s
    /\ inv'6 e1 /\ inv'6 e2 /\ inv'7 f /\ inv'8 b /\ inv'3 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 103 4 103 73] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond25] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b] . inv'2 s
    /\ inv'6 e1 /\ inv'6 e2 /\ inv'7 f /\ inv'8 b /\ inv'3 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq t_Item'0 . [%#s06_map_precond24] produced
  = (Seq.empty  : Seq.seq t_Item'0)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  use prelude.prelude.Snapshot
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"06_map_precond.rs" 128 4 128 29] (_1 : ()) =
    [%#s06_map_precond23] forall iter : borrowed i, func : f . inv'5 iter /\ inv'4 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq t_Item'0) /\ preservation'0 iter.final func
  
  use T_06_map_precond__Map as Map'0
  
  predicate invariant'0 [#"06_map_precond.rs" 176 4 176 30] (self : Map'0.t_Map i b f t_Item'0) =
    [%#s06_map_precond15] reinitialize'0 ()
    /\ preservation_inv'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
    /\ next_precondition'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
  
  predicate inv'0 (_1 : Map'0.t_Map i b f t_Item'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Map'0.t_Map i b f t_Item'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> inv'3 iter /\ inv'4 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 50 4 50 67] (self : Map'0.t_Map i b f t_Item'0) (visited : Seq.seq b) (succ : Map'0.t_Map i b f t_Item'0)
    
   =
    [%#s06_map_precond6] unnest'0 (T_06_map_precond__Map.t_Map__func self) (T_06_map_precond__Map.t_Map__func succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'1 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 (T_06_map_precond__Map.t_Map__iter self) s (T_06_map_precond__Map.t_Map__iter succ)] . inv'2 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (T_06_map_precond__Map.t_Map__iter self) s (T_06_map_precond__Map.t_Map__iter succ)
    /\ Snapshot.inner (T_06_map_precond__Map.t_Map__produced succ)
    = Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      T_06_map_precond__Map.t_Map__func self = T_06_map_precond__Map.t_Map__func succ
    else
      (Seq.get fs 0).current = T_06_map_precond__Map.t_Map__func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = T_06_map_precond__Map.t_Map__func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (T_06_map_precond__Map.t_Map__func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) (Seq.([..]) s 0 i))) (Seq.get visited i))))
  
  constant a  : Map'0.t_Map i b f t_Item'0
  
  constant ab  : Seq.seq b
  
  constant b  : Map'0.t_Map i b f t_Item'0
  
  constant bc  : Seq.seq b
  
  constant c  : Map'0.t_Map i b f t_Item'0
  
  function produces_trans [#"06_map_precond.rs" 45 4 45 90] (a : Map'0.t_Map i b f t_Item'0) (ab : Seq.seq b) (b : Map'0.t_Map i b f t_Item'0) (bc : Seq.seq b) (c : Map'0.t_Map i b f t_Item'0) : ()
    
  
  goal vc_produces_trans : ([%#s06_map_precond4] produces'0 b bc c)
   -> ([%#s06_map_precond3] produces'0 a ab b)
   -> ([%#s06_map_precond2] inv'0 c)
   -> ([%#s06_map_precond1] inv'0 b)
   -> ([%#s06_map_precond0] inv'0 a)  -> ([%#s06_map_precond5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_06_map_precond__qyi16548623944279504987__produces_one [#"06_map_precond.rs" 160 4 160 57] (* Map<I, B, F> *)
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "06_map_precond.rs" 159 14 159 68
  let%span s06_map_precond1 = "06_map_precond.rs" 161 8 169 9
  let%span s06_map_precond2 = "06_map_precond.rs" 51 8 65 9
  let%span s06_map_precond3 = "06_map_precond.rs" 33 15 33 24
  let%span s06_map_precond4 = "06_map_precond.rs" 34 14 34 45
  let%span s06_map_precond5 = "06_map_precond.rs" 31 4 31 10
  let%span s06_map_precond6 = "06_map_precond.rs" 39 15 39 21
  let%span s06_map_precond7 = "06_map_precond.rs" 40 15 40 21
  let%span s06_map_precond8 = "06_map_precond.rs" 41 15 41 21
  let%span s06_map_precond9 = "06_map_precond.rs" 42 15 42 32
  let%span s06_map_precond10 = "06_map_precond.rs" 43 15 43 32
  let%span s06_map_precond11 = "06_map_precond.rs" 44 14 44 42
  let%span s06_map_precond12 = "06_map_precond.rs" 37 4 37 10
  let%span scommon13 = "common.rs" 14 15 14 24
  let%span scommon14 = "common.rs" 15 14 15 45
  let%span scommon15 = "common.rs" 19 15 19 21
  let%span scommon16 = "common.rs" 20 15 20 21
  let%span scommon17 = "common.rs" 21 15 21 21
  let%span scommon18 = "common.rs" 22 15 22 32
  let%span scommon19 = "common.rs" 23 15 23 32
  let%span scommon20 = "common.rs" 24 14 24 42
  let%span sops21 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops24 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops25 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops26 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops27 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span sinvariant28 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq29 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span s06_map_precond30 = "06_map_precond.rs" 178 12 180 73
  let%span s06_map_precond31 = "06_map_precond.rs" 129 8 135 9
  let%span s06_map_precond32 = "06_map_precond.rs" 102 4 102 83
  let%span s06_map_precond33 = "06_map_precond.rs" 104 8 112 9
  let%span s06_map_precond34 = "06_map_precond.rs" 93 8 98 9
  let%span s06_map_precond35 = "06_map_precond.rs" 117 8 124 9
  let%span sboxed36 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'5 (_1 : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'6 (self : borrowed i) =
    [%#sinvariant28] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'9 (_1 : borrowed i)
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed i [inv'9 x] . inv'9 x = invariant'6 x
  
  type t_Item'0
  
  predicate inv'1 (_1 : t_Item'0)
  
  predicate invariant'5 (self : t_Item'0) =
    [%#sboxed36] inv'1 self
  
  predicate inv'8 (_1 : t_Item'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Item'0 [inv'8 x] . inv'8 x = invariant'5 x
  
  predicate inv'0 (_1 : borrowed f)
  
  predicate invariant'4 (self : borrowed f) =
    [%#sboxed36] inv'0 self
  
  predicate inv'7 (_1 : borrowed f)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed f [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate inv'6 (_1 : f)
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use prelude.prelude.Snapshot
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"06_map_precond.rs" 92 4 92 74] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond34] forall e : t_Item'0, i : i [produces'1 iter (Seq.singleton e) i] . inv'1 e
    /\ inv'5 i /\ produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate inv'10 (_1 : b)
  
  predicate inv'3 (_1 : Seq.seq t_Item'0)
  
  predicate preservation'0 [#"06_map_precond.rs" 116 4 116 45] (iter : i) (func : f) =
    [%#s06_map_precond35] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i . inv'3 s
    /\ inv'1 e1 /\ inv'1 e2 /\ inv'0 f /\ inv'10 b /\ inv'5 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  use seq.Seq
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 103 4 103 73] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond33] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b] . inv'3 s
    /\ inv'1 e1 /\ inv'1 e2 /\ inv'0 f /\ inv'10 b /\ inv'5 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq t_Item'0 . [%#s06_map_precond32] produced
  = (Seq.empty  : Seq.seq t_Item'0)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  use prelude.prelude.Snapshot
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"06_map_precond.rs" 128 4 128 29] (_1 : ()) =
    [%#s06_map_precond31] forall iter : borrowed i, func : f . inv'9 iter /\ inv'6 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq t_Item'0) /\ preservation'0 iter.final func
  
  use T_06_map_precond__Map as Map'0
  
  predicate invariant'3 [#"06_map_precond.rs" 176 4 176 30] (self : Map'0.t_Map i b f t_Item'0) =
    [%#s06_map_precond30] reinitialize'0 ()
    /\ preservation_inv'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
    /\ next_precondition'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
  
  predicate inv'4 (_1 : Map'0.t_Map i b f t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Map'0.t_Map i b f t_Item'0 [inv'4 x] . inv'4 x
  = (invariant'3 x
  /\ match x with
    | Map'0.C_Map iter func produced -> inv'5 iter /\ inv'6 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq29] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq (borrowed f)) =
    [%#sseq29] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq (borrowed f))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (borrowed f) [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_once'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . [%#sops27] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops24] unnest'0 self b)
   -> ([%#sops25] unnest'0 b c)  -> ([%#sops26] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops23] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . ([%#sops21] postcondition_mut'0 self args res)
   -> ([%#sops22] unnest'0 self.current self.final)
  
  predicate invariant'0 (self : borrowed f) =
    [%#sinvariant28] inv'6 self.current /\ inv'6 self.final
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed f [inv'0 x] . inv'0 x = invariant'0 x
  
  function produces_trans'1 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'1_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon15] inv'5 a)
   -> ([%#scommon16] inv'5 b)
   -> ([%#scommon17] inv'5 c)
   -> ([%#scommon18] produces'1 a ab b)
   -> ([%#scommon19] produces'1 b bc c)  -> ([%#scommon20] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'1_spec : forall self : i . ([%#scommon13] inv'5 self)
   -> ([%#scommon14] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 50 4 50 67] (self : Map'0.t_Map i b f t_Item'0) (visited : Seq.seq b) (succ : Map'0.t_Map i b f t_Item'0)
    
   =
    [%#s06_map_precond2] unnest'0 (T_06_map_precond__Map.t_Map__func self) (T_06_map_precond__Map.t_Map__func succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'2 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 (T_06_map_precond__Map.t_Map__iter self) s (T_06_map_precond__Map.t_Map__iter succ)] . inv'3 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (T_06_map_precond__Map.t_Map__iter self) s (T_06_map_precond__Map.t_Map__iter succ)
    /\ Snapshot.inner (T_06_map_precond__Map.t_Map__produced succ)
    = Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      T_06_map_precond__Map.t_Map__func self = T_06_map_precond__Map.t_Map__func succ
    else
      (Seq.get fs 0).current = T_06_map_precond__Map.t_Map__func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = T_06_map_precond__Map.t_Map__func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (T_06_map_precond__Map.t_Map__func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) (Seq.([..]) s 0 i))) (Seq.get visited i))))
  
  function produces_trans'0 [#"06_map_precond.rs" 45 4 45 90] (a : Map'0.t_Map i b f t_Item'0) (ab : Seq.seq b) (b : Map'0.t_Map i b f t_Item'0) (bc : Seq.seq b) (c : Map'0.t_Map i b f t_Item'0) : ()
    
   =
    [%#s06_map_precond12] ()
  
  axiom produces_trans'0_spec : forall a : Map'0.t_Map i b f t_Item'0, ab : Seq.seq b, b : Map'0.t_Map i b f t_Item'0, bc : Seq.seq b, c : Map'0.t_Map i b f t_Item'0 . ([%#s06_map_precond6] inv'4 a)
   -> ([%#s06_map_precond7] inv'4 b)
   -> ([%#s06_map_precond8] inv'4 c)
   -> ([%#s06_map_precond9] produces'0 a ab b)
   -> ([%#s06_map_precond10] produces'0 b bc c)  -> ([%#s06_map_precond11] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"06_map_precond.rs" 35 4 35 26] (self : Map'0.t_Map i b f t_Item'0) : () =
    [%#s06_map_precond5] ()
  
  axiom produces_refl'0_spec : forall self : Map'0.t_Map i b f t_Item'0 . ([%#s06_map_precond3] inv'4 self)
   -> ([%#s06_map_precond4] produces'0 self (Seq.empty  : Seq.seq b) self)
  
  use seq.Seq
  
  constant self  : Map'0.t_Map i b f t_Item'0
  
  constant visited  : b
  
  constant succ  : Map'0.t_Map i b f t_Item'0
  
  predicate produces_one [#"06_map_precond.rs" 160 4 160 57] (self : Map'0.t_Map i b f t_Item'0) (visited : b) (succ : Map'0.t_Map i b f t_Item'0)
    
  
  goal vc_produces_one : [%#s06_map_precond0] ([%#s06_map_precond1] exists f : borrowed f, e : t_Item'0 [postcondition_mut'0 f (e, T_06_map_precond__Map.t_Map__produced self) visited] . inv'0 f
  /\ inv'1 e
  /\ f.current = T_06_map_precond__Map.t_Map__func self
  /\ f.final = T_06_map_precond__Map.t_Map__func succ
  /\ produces'1 (T_06_map_precond__Map.t_Map__iter self) (Seq.singleton e) (T_06_map_precond__Map.t_Map__iter succ)
  /\ Snapshot.inner (T_06_map_precond__Map.t_Map__produced succ)
  = Seq.snoc (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) e
  /\ precondition'0 f.current (e, T_06_map_precond__Map.t_Map__produced self)
  /\ postcondition_mut'0 f (e, T_06_map_precond__Map.t_Map__produced self) visited)
  = produces'0 self (Seq.singleton visited) succ
end
module M_06_map_precond__qyi18374305379273630819__next [#"06_map_precond.rs" 72 4 72 44] (* <Map<I, B, F> as common::Iterator> *)
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "06_map_precond.rs" 75 16 75 76
  let%span s06_map_precond1 = "06_map_precond.rs" 76 31 76 66
  let%span s06_map_precond2 = "06_map_precond.rs" 79 16 79 58
  let%span s06_map_precond3 = "06_map_precond.rs" 83 32 83 56
  let%span s06_map_precond4 = "06_map_precond.rs" 72 17 72 21
  let%span s06_map_precond5 = "06_map_precond.rs" 68 14 71 5
  let%span s06_map_precond6 = "06_map_precond.rs" 72 26 72 44
  let%span scommon7 = "common.rs" 31 17 31 21
  let%span scommon8 = "common.rs" 27 14 30 5
  let%span scommon9 = "common.rs" 31 26 31 44
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 163 27 163 52
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 151 0 175 1
  let%span s06_map_precond12 = "06_map_precond.rs" 139 15 139 24
  let%span s06_map_precond13 = "06_map_precond.rs" 140 15 140 21
  let%span s06_map_precond14 = "06_map_precond.rs" 141 15 141 21
  let%span s06_map_precond15 = "06_map_precond.rs" 142 15 142 21
  let%span s06_map_precond16 = "06_map_precond.rs" 143 15 143 24
  let%span s06_map_precond17 = "06_map_precond.rs" 144 4 144 60
  let%span s06_map_precond18 = "06_map_precond.rs" 145 15 145 30
  let%span s06_map_precond19 = "06_map_precond.rs" 146 15 146 57
  let%span s06_map_precond20 = "06_map_precond.rs" 147 14 147 69
  let%span s06_map_precond21 = "06_map_precond.rs" 148 14 148 70
  let%span s06_map_precond22 = "06_map_precond.rs" 138 4 138 12
  let%span s06_map_precond23 = "06_map_precond.rs" 25 8 28 9
  let%span s06_map_precond24 = "06_map_precond.rs" 159 14 159 68
  let%span s06_map_precond25 = "06_map_precond.rs" 161 8 169 9
  let%span scommon26 = "common.rs" 14 15 14 24
  let%span scommon27 = "common.rs" 15 14 15 45
  let%span scommon28 = "common.rs" 19 15 19 21
  let%span scommon29 = "common.rs" 20 15 20 21
  let%span scommon30 = "common.rs" 21 15 21 21
  let%span scommon31 = "common.rs" 22 15 22 32
  let%span scommon32 = "common.rs" 23 15 23 32
  let%span scommon33 = "common.rs" 24 14 24 42
  let%span sresolve34 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span s06_map_precond35 = "06_map_precond.rs" 102 4 102 83
  let%span s06_map_precond36 = "06_map_precond.rs" 104 8 112 9
  let%span s06_map_precond37 = "06_map_precond.rs" 93 8 98 9
  let%span s06_map_precond38 = "06_map_precond.rs" 51 8 65 9
  let%span sops39 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops40 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops41 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops42 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops43 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops44 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops45 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span sinvariant46 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span s06_map_precond47 = "06_map_precond.rs" 117 8 124 9
  let%span s06_map_precond48 = "06_map_precond.rs" 178 12 180 73
  let%span sseq49 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span s06_map_precond50 = "06_map_precond.rs" 129 8 135 9
  let%span sboxed51 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  predicate inv'6 (_1 : borrowed f)
  
  predicate invariant'7 (self : borrowed f) =
    [%#sboxed51] inv'6 self
  
  predicate inv'14 (_1 : borrowed f)
  
  axiom inv_axiom'10 [@rewrite] : forall x : borrowed f [inv'14 x] . inv'14 x = invariant'7 x
  
  type t_Item'0
  
  predicate inv'10 (_1 : t_Item'0)
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed51] inv'10 self
  
  predicate inv'13 (_1 : t_Item'0)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_Item'0 [inv'13 x] . inv'13 x = invariant'6 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq (borrowed f)) =
    [%#sseq49] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'14 (Seq.get self i)
  
  predicate inv'12 (_1 : Seq.seq (borrowed f))
  
  axiom inv_axiom'8 [@rewrite] : forall x : Seq.seq (borrowed f) [inv'12 x] . inv'12 x = invariant'5 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq t_Item'0) =
    [%#sseq49] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'13 (Seq.get self i)
  
  predicate inv'11 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'11 x] . inv'11 x = invariant'4 x
  
  predicate inv'1 (_1 : f)
  
  predicate inv'0 (_1 : i)
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use prelude.prelude.Snapshot
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"06_map_precond.rs" 92 4 92 74] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond37] forall e : t_Item'0, i : i [produces'0 iter (Seq.singleton e) i] . inv'10 e
    /\ inv'0 i /\ produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate inv'8 (_1 : b)
  
  predicate preservation'0 [#"06_map_precond.rs" 116 4 116 45] (iter : i) (func : f) =
    [%#s06_map_precond47] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i . inv'11 s
    /\ inv'10 e1 /\ inv'10 e2 /\ inv'6 f /\ inv'8 b /\ inv'0 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  use seq.Seq
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 103 4 103 73] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond36] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b] . inv'11 s
    /\ inv'10 e1 /\ inv'10 e2 /\ inv'6 f /\ inv'8 b /\ inv'0 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq t_Item'0 . [%#s06_map_precond35] produced
  = (Seq.empty  : Seq.seq t_Item'0)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  use prelude.prelude.Snapshot
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate inv'4 (_1 : borrowed i)
  
  predicate reinitialize'0 [#"06_map_precond.rs" 128 4 128 29] (_1 : ()) =
    [%#s06_map_precond50] forall iter : borrowed i, func : f . inv'4 iter /\ inv'1 func
     -> completed'1 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq t_Item'0) /\ preservation'0 iter.final func
  
  use T_06_map_precond__Map as Map'0
  
  predicate invariant'3 [#"06_map_precond.rs" 176 4 176 30] (self : Map'0.t_Map i b f t_Item'0) =
    [%#s06_map_precond48] reinitialize'0 ()
    /\ preservation_inv'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
    /\ next_precondition'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
  
  predicate inv'9 (_1 : Map'0.t_Map i b f t_Item'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : Map'0.t_Map i b f t_Item'0 [inv'9 x] . inv'9 x
  = (invariant'3 x
  /\ match x with
    | Map'0.C_Map iter func produced -> inv'0 iter /\ inv'1 func
    end)
  
  predicate resolve'2 (_1 : f)
  
  predicate postcondition_once'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . [%#sops45] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'2 s.final)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops42] unnest'0 self b)
   -> ([%#sops43] unnest'0 b c)  -> ([%#sops44] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops41] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . ([%#sops39] postcondition_mut'0 self args res)
   -> ([%#sops40] unnest'0 self.current self.final)
  
  predicate inv'7 (_1 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  axiom inv_axiom'5 [@rewrite] : forall x : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)) [inv'7 x] . inv'7 x
  = (let (a, b) = x in inv'10 a)
  
  predicate invariant'2 (self : borrowed f) =
    [%#sinvariant46] inv'1 self.current /\ inv'1 self.final
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed f [inv'6 x] . inv'6 x = invariant'2 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'5 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'5 x] . inv'5 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'10 a_0
    end
  
  predicate invariant'1 (self : borrowed i) =
    [%#sinvariant46] inv'0 self.current /\ inv'0 self.final
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed i [inv'4 x] . inv'4 x = invariant'1 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'3 (_1 : Option'0.t_Option b)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option b [inv'3 x] . inv'3 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'8 a_0
    end
  
  predicate invariant'0 (self : borrowed (Map'0.t_Map i b f t_Item'0)) =
    [%#sinvariant46] inv'9 self.current /\ inv'9 self.final
  
  predicate inv'2 (_1 : borrowed (Map'0.t_Map i b f t_Item'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (Map'0.t_Map i b f t_Item'0) [inv'2 x] . inv'2 x = invariant'0 x
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon28] inv'0 a)
   -> ([%#scommon29] inv'0 b)
   -> ([%#scommon30] inv'0 c)
   -> ([%#scommon31] produces'0 a ab b)
   -> ([%#scommon32] produces'0 b bc c)  -> ([%#scommon33] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon26] inv'0 self)
   -> ([%#scommon27] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [@inline:trivial] [#"06_map_precond.rs" 50 4 50 67] (self : Map'0.t_Map i b f t_Item'0) (visited : Seq.seq b) (succ : Map'0.t_Map i b f t_Item'0)
    
   =
    [%#s06_map_precond38] unnest'0 (T_06_map_precond__Map.t_Map__func self) (T_06_map_precond__Map.t_Map__func succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'12 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'0 (T_06_map_precond__Map.t_Map__iter self) s (T_06_map_precond__Map.t_Map__iter succ)] . inv'11 s
    /\ Seq.length s = Seq.length visited
    /\ produces'0 (T_06_map_precond__Map.t_Map__iter self) s (T_06_map_precond__Map.t_Map__iter succ)
    /\ Snapshot.inner (T_06_map_precond__Map.t_Map__produced succ)
    = Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      T_06_map_precond__Map.t_Map__func self = T_06_map_precond__Map.t_Map__func succ
    else
      (Seq.get fs 0).current = T_06_map_precond__Map.t_Map__func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = T_06_map_precond__Map.t_Map__func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (T_06_map_precond__Map.t_Map__func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) (Seq.([..]) s 0 i))) (Seq.get visited i))))
  
  use seq.Seq
  
  predicate produces_one'0 [#"06_map_precond.rs" 160 4 160 57] (self : Map'0.t_Map i b f t_Item'0) (visited : b) (succ : Map'0.t_Map i b f t_Item'0)
    
   =
    [%#s06_map_precond25] exists f : borrowed f, e : t_Item'0 [postcondition_mut'0 f (e, T_06_map_precond__Map.t_Map__produced self) visited] . inv'6 f
    /\ inv'10 e
    /\ f.current = T_06_map_precond__Map.t_Map__func self
    /\ f.final = T_06_map_precond__Map.t_Map__func succ
    /\ produces'0 (T_06_map_precond__Map.t_Map__iter self) (Seq.singleton e) (T_06_map_precond__Map.t_Map__iter succ)
    /\ Snapshot.inner (T_06_map_precond__Map.t_Map__produced succ)
    = Seq.snoc (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) e
    /\ precondition'0 f.current (e, T_06_map_precond__Map.t_Map__produced self)
    /\ postcondition_mut'0 f (e, T_06_map_precond__Map.t_Map__produced self) visited
  
  axiom produces_one'0_spec : forall self : Map'0.t_Map i b f t_Item'0, visited : b, succ : Map'0.t_Map i b f t_Item'0 . [%#s06_map_precond24] produces_one'0 self visited succ
  = produces'1 self (Seq.singleton visited) succ
  
  predicate completed'0 [#"06_map_precond.rs" 24 4 24 35] (self : borrowed (Map'0.t_Map i b f t_Item'0)) =
    [%#s06_map_precond23] Snapshot.inner (T_06_map_precond__Map.t_Map__produced self.final)
    = (Seq.empty  : Seq.seq t_Item'0)
    /\ completed'1 (Borrow.borrow_logic (T_06_map_precond__Map.t_Map__iter self.current) (T_06_map_precond__Map.t_Map__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ T_06_map_precond__Map.t_Map__func self.current = T_06_map_precond__Map.t_Map__func self.final
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  function produces_one_invariant'0 [#"06_map_precond.rs" 149 4 149 73] (self : Map'0.t_Map i b f t_Item'0) (e : t_Item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  
  axiom produces_one_invariant'0_spec : forall self : Map'0.t_Map i b f t_Item'0, e : t_Item'0, r : b, f : borrowed f, iter : i . ([%#s06_map_precond12] inv'9 self)
   -> ([%#s06_map_precond13] inv'10 e)
   -> ([%#s06_map_precond14] inv'8 r)
   -> ([%#s06_map_precond15] inv'6 f)
   -> ([%#s06_map_precond16] inv'0 iter)
   -> ([%#s06_map_precond17] produces'0 (T_06_map_precond__Map.t_Map__iter self) (Seq.singleton e) iter)
   -> ([%#s06_map_precond18] f.current = T_06_map_precond__Map.t_Map__func self)
   -> ([%#s06_map_precond19] postcondition_mut'0 f (e, T_06_map_precond__Map.t_Map__produced self) r)
   -> ([%#s06_map_precond21] next_precondition'0 iter f.final (Seq.snoc (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) e))
  && ([%#s06_map_precond20] preservation_inv'0 iter f.final (Seq.snoc (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) e))
  
  predicate resolve'1 (self : borrowed (Map'0.t_Map i b f t_Item'0)) =
    [%#sresolve34] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Map'0.t_Map i b f t_Item'0)) =
    resolve'1 _1
  
  let rec call_mut'0 (self:borrowed f) (args:(t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (return'  (ret:b))= {[@expl:precondition] inv'7 args}
    {[@expl:precondition] inv'6 self}
    {[@expl:precondition] [%#sops10] precondition'0 self.current args}
    any [ return' (result:b)-> {inv'8 result} {[%#sops11] postcondition_mut'0 self args result} (! return' {result}) ] 
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option t_Item'0))= {[@expl:precondition] [%#scommon7] inv'4 self}
    any
    [ return' (result:Option'0.t_Option t_Item'0)-> {[%#scommon9] inv'5 result}
      {[%#scommon8] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (Map'0.t_Map i b f t_Item'0)) (return'  (ret:Option'0.t_Option b))= {[%#s06_map_precond4] inv'2 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Map'0.t_Map <i> <b> <f> <t_Item'0> {self.current}
          (fun (riter'0:i) (rfunc'0:f) (rproduced'0:Snapshot.snap_ty (Seq.seq t_Item'0)) ->
            {inv'0 riter'0}
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &self <- { self with current = Map'0.C_Map _ret'.final rfunc'0 rproduced'0 ; } ] 
                s1))
      | s1 = next'0 {_4} (fun (_ret':Option'0.t_Option t_Item'0) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = any [ br0 -> {_3 = Option'0.C_None } (! bb4) | br1 (a:t_Item'0)-> {_3 = Option'0.C_Some a} (! bb3) ] 
    | bb3 = bb5
    | bb5 = s0
      [ s0 = Option'0.v_Some <t_Item'0> {_3} (fun (r0'0:t_Item'0) ->  [ &v <- r0'0 ] s1)
      | s1 = {[@expl:assertion] [%#s06_map_precond0] precondition'0 (T_06_map_precond__Map.t_Map__func self.current) (v, T_06_map_precond__Map.t_Map__produced self.current)}
        s2
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = 
        [ &produced <- [%#s06_map_precond1] Snapshot.new (Seq.snoc (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self.current)) v) ]
        
        s1
      | s1 = bb7 ]
      
    | bb7 = s0
      [ s0 = Map'0.t_Map <i> <b> <f> <t_Item'0> {self.current}
          (fun (riter'0:i) (rfunc'0:f) (rproduced'0:Snapshot.snap_ty (Seq.seq t_Item'0)) ->
            {inv'1 rfunc'0}
            Borrow.borrow_final <f> {rfunc'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed f) ->
                 [ &_12 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &self <- { self with current = Map'0.C_Map riter'0 _ret'.final rproduced'0 ; } ] 
                s1))
      | s1 = Map'0.t_Map <i> <b> <f> <t_Item'0> {self.current}
          (fun (riter'1:i) (rfunc'1:f) (rproduced'1:Snapshot.snap_ty (Seq.seq t_Item'0)) ->
             [ &_13 <- (v, rproduced'1) ] 
            s2)
      | s2 = call_mut'0 {_12} {_13} (fun (_ret':b) ->  [ &r <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb8 = bb9
    | bb9 = s0
      [ s0 = Map'0.t_Map <i> <b> <f> <t_Item'0> {self.current}
          (fun (riter'0:i) (rfunc'0:f) (rproduced'0:Snapshot.snap_ty (Seq.seq t_Item'0)) ->
             [ &self <- { self with current = Map'0.C_Map riter'0 rfunc'0 produced ; } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'2 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_17 <- [%#s06_map_precond2] Snapshot.new () ] s4
      | s4 = bb10 ]
      
    | bb10 = s0 [ s0 =  [ &_0 <- Option'0.C_Some r ] s1 | s1 = bb11 ] 
    | bb11 = bb12
    | bb12 = bb13
    | bb13 = bb15
    | bb4 = s0 [ s0 =  [ &_20 <- [%#s06_map_precond3] Snapshot.new (Seq.empty  : Seq.seq t_Item'0) ] s1 | s1 = bb14 ] 
    | bb14 = s0
      [ s0 = Map'0.t_Map <i> <b> <f> <t_Item'0> {self.current}
          (fun (riter'0:i) (rfunc'0:f) (rproduced'0:Snapshot.snap_ty (Seq.seq t_Item'0)) ->
             [ &self <- { self with current = Map'0.C_Map riter'0 rfunc'0 _20 ; } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'2 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- Option'0.C_None ] s4
      | s4 = bb15 ]
      
    | bb15 = bb16
    | bb16 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option b = any_l ()
    | & self : borrowed (Map'0.t_Map i b f t_Item'0) = self
    | & _3 : Option'0.t_Option t_Item'0 = any_l ()
    | & _4 : borrowed i = any_l ()
    | & v : t_Item'0 = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & r : b = any_l ()
    | & _12 : borrowed f = any_l ()
    | & _13 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)) = any_l ()
    | & _17 : Snapshot.snap_ty () = any_l ()
    | & _20 : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l () ]
    
    [ return' (result:Option'0.t_Option b)-> {[@expl:postcondition] [%#s06_map_precond6] inv'3 result}
      {[@expl:postcondition] [%#s06_map_precond5] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces_one'0 self.current v self.final
        end}
      (! return' {result}) ]
    
end
module M_06_map_precond__qyi16548623944279504987__produces_one_invariant [#"06_map_precond.rs" 149 4 149 73] (* Map<I, B, F> *)
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "06_map_precond.rs" 139 15 139 24
  let%span s06_map_precond1 = "06_map_precond.rs" 140 15 140 21
  let%span s06_map_precond2 = "06_map_precond.rs" 141 15 141 21
  let%span s06_map_precond3 = "06_map_precond.rs" 142 15 142 21
  let%span s06_map_precond4 = "06_map_precond.rs" 143 15 143 24
  let%span s06_map_precond5 = "06_map_precond.rs" 144 4 144 60
  let%span s06_map_precond6 = "06_map_precond.rs" 145 15 145 30
  let%span s06_map_precond7 = "06_map_precond.rs" 146 15 146 57
  let%span s06_map_precond8 = "06_map_precond.rs" 147 14 147 69
  let%span s06_map_precond9 = "06_map_precond.rs" 148 14 148 70
  let%span s06_map_precond10 = "06_map_precond.rs" 138 4 138 12
  let%span s06_map_precond11 = "06_map_precond.rs" 102 4 102 83
  let%span s06_map_precond12 = "06_map_precond.rs" 104 8 112 9
  let%span s06_map_precond13 = "06_map_precond.rs" 93 8 98 9
  let%span scommon14 = "common.rs" 14 15 14 24
  let%span scommon15 = "common.rs" 15 14 15 45
  let%span scommon16 = "common.rs" 19 15 19 21
  let%span scommon17 = "common.rs" 20 15 20 21
  let%span scommon18 = "common.rs" 21 15 21 21
  let%span scommon19 = "common.rs" 22 15 22 32
  let%span scommon20 = "common.rs" 23 15 23 32
  let%span scommon21 = "common.rs" 24 14 24 42
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops24 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops25 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops26 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops27 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops28 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span s06_map_precond29 = "06_map_precond.rs" 117 8 124 9
  let%span s06_map_precond30 = "06_map_precond.rs" 178 12 180 73
  let%span sinvariant31 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq32 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span s06_map_precond33 = "06_map_precond.rs" 129 8 135 9
  let%span sboxed34 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'4 (_1 : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed i) =
    [%#sinvariant31] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'8 (_1 : borrowed i)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed i [inv'8 x] . inv'8 x = invariant'4 x
  
  type t_Item'0
  
  predicate inv'1 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed34] inv'1 self
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = invariant'3 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq32] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  use prelude.prelude.Snapshot
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . [%#sops28] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops25] unnest'0 self b)
   -> ([%#sops26] unnest'0 b c)  -> ([%#sops27] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops24] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . ([%#sops22] postcondition_mut'0 self args res)
   -> ([%#sops23] unnest'0 self.current self.final)
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon16] inv'4 a)
   -> ([%#scommon17] inv'4 b)
   -> ([%#scommon18] inv'4 c)
   -> ([%#scommon19] produces'0 a ab b)
   -> ([%#scommon20] produces'0 b bc c)  -> ([%#scommon21] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon14] inv'4 self)
   -> ([%#scommon15] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate inv'6 (_1 : f)
  
  predicate invariant'1 (self : borrowed f) =
    [%#sinvariant31] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'3 (_1 : borrowed f)
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed f [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate precondition'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate next_precondition'0 [#"06_map_precond.rs" 92 4 92 74] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond13] forall e : t_Item'0, i : i [produces'0 iter (Seq.singleton e) i] . inv'1 e
    /\ inv'4 i /\ produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  predicate inv'2 (_1 : b)
  
  predicate preservation'0 [#"06_map_precond.rs" 116 4 116 45] (iter : i) (func : f) =
    [%#s06_map_precond29] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i . inv'5 s
    /\ inv'1 e1 /\ inv'1 e2 /\ inv'3 f /\ inv'2 b /\ inv'4 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 103 4 103 73] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond12] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b] . inv'5 s
    /\ inv'1 e1 /\ inv'1 e2 /\ inv'3 f /\ inv'2 b /\ inv'4 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq t_Item'0 . [%#s06_map_precond11] produced
  = (Seq.empty  : Seq.seq t_Item'0)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  use prelude.prelude.Snapshot
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"06_map_precond.rs" 128 4 128 29] (_1 : ()) =
    [%#s06_map_precond33] forall iter : borrowed i, func : f . inv'8 iter /\ inv'6 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq t_Item'0) /\ preservation'0 iter.final func
  
  use T_06_map_precond__Map as Map'0
  
  predicate invariant'0 [#"06_map_precond.rs" 176 4 176 30] (self : Map'0.t_Map i b f t_Item'0) =
    [%#s06_map_precond30] reinitialize'0 ()
    /\ preservation_inv'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
    /\ next_precondition'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
  
  predicate inv'0 (_1 : Map'0.t_Map i b f t_Item'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Map'0.t_Map i b f t_Item'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> inv'4 iter /\ inv'6 func
    end)
  
  constant self  : Map'0.t_Map i b f t_Item'0
  
  constant e  : t_Item'0
  
  constant r  : b
  
  constant f  : borrowed f
  
  constant iter  : i
  
  function produces_one_invariant [#"06_map_precond.rs" 149 4 149 73] (self : Map'0.t_Map i b f t_Item'0) (e : t_Item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  
  goal vc_produces_one_invariant : ([%#s06_map_precond7] postcondition_mut'0 f (e, T_06_map_precond__Map.t_Map__produced self) r)
   -> ([%#s06_map_precond6] f.current = T_06_map_precond__Map.t_Map__func self)
   -> ([%#s06_map_precond5] produces'0 (T_06_map_precond__Map.t_Map__iter self) (Seq.singleton e) iter)
   -> ([%#s06_map_precond4] inv'4 iter)
   -> ([%#s06_map_precond3] inv'3 f)
   -> ([%#s06_map_precond2] inv'2 r)
   -> ([%#s06_map_precond1] inv'1 e)
   -> ([%#s06_map_precond0] inv'0 self)
   -> ([%#s06_map_precond10] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, i : i . inv'5 s
  /\ inv'1 e1 /\ inv'1 e2 /\ inv'4 i
   -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
   -> produces'0 (T_06_map_precond__Map.t_Map__iter self) (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i)
  && (let _ = () in ([%#s06_map_precond9] next_precondition'0 iter f.final (Seq.snoc (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) e))
  && ([%#s06_map_precond8] preservation_inv'0 iter f.final (Seq.snoc (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) e)))
end
module M_06_map_precond__map [#"06_map_precond.rs" 191 0 194 17]
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "06_map_precond.rs" 195 32 195 54
  let%span s06_map_precond1 = "06_map_precond.rs" 185 0 187 67
  let%span s06_map_precond2 = "06_map_precond.rs" 188 11 188 41
  let%span s06_map_precond3 = "06_map_precond.rs" 189 11 189 51
  let%span s06_map_precond4 = "06_map_precond.rs" 192 4 192 8
  let%span s06_map_precond5 = "06_map_precond.rs" 193 4 193 8
  let%span s06_map_precond6 = "06_map_precond.rs" 190 10 190 75
  let%span s06_map_precond7 = "06_map_precond.rs" 194 5 194 17
  let%span s06_map_precond8 = "06_map_precond.rs" 129 8 135 9
  let%span s06_map_precond9 = "06_map_precond.rs" 117 8 124 9
  let%span scommon10 = "common.rs" 14 15 14 24
  let%span scommon11 = "common.rs" 15 14 15 45
  let%span scommon12 = "common.rs" 19 15 19 21
  let%span scommon13 = "common.rs" 20 15 20 21
  let%span scommon14 = "common.rs" 21 15 21 21
  let%span scommon15 = "common.rs" 22 15 22 32
  let%span scommon16 = "common.rs" 23 15 23 32
  let%span scommon17 = "common.rs" 24 14 24 42
  let%span s06_map_precond18 = "06_map_precond.rs" 93 8 98 9
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops21 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops24 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops25 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span s06_map_precond26 = "06_map_precond.rs" 178 12 180 73
  let%span sinvariant27 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq28 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span s06_map_precond29 = "06_map_precond.rs" 102 4 102 83
  let%span s06_map_precond30 = "06_map_precond.rs" 104 8 112 9
  let%span sboxed31 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'0 (_1 : t_Item'0)
  
  predicate invariant'4 (self : t_Item'0) =
    [%#sboxed31] inv'0 self
  
  predicate inv'8 (_1 : t_Item'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Item'0 [inv'8 x] . inv'8 x = invariant'4 x
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . [%#sops25] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops22] unnest'0 self b)
   -> ([%#sops23] unnest'0 b c)  -> ([%#sops24] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops21] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : b . ([%#sops19] postcondition_mut'0 self args res)
   -> ([%#sops20] unnest'0 self.current self.final)
  
  predicate inv'2 (_1 : f)
  
  predicate invariant'3 (self : borrowed f) =
    [%#sinvariant27] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'6 (_1 : borrowed f)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed f [inv'6 x] . inv'6 x = invariant'3 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq28] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  predicate inv'1 (_1 : i)
  
  predicate invariant'1 (self : borrowed i) =
    [%#sinvariant27] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'4 (_1 : borrowed i)
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed i [inv'4 x] . inv'4 x = invariant'1 x
  
  predicate precondition'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use prelude.prelude.Snapshot
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"06_map_precond.rs" 92 4 92 74] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond18] forall e : t_Item'0, i : i [produces'0 iter (Seq.singleton e) i] . inv'0 e
    /\ inv'1 i /\ produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'7 (_1 : b)
  
  predicate preservation'0 [#"06_map_precond.rs" 116 4 116 45] (iter : i) (func : f) =
    [%#s06_map_precond9] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i . inv'5 s
    /\ inv'0 e1 /\ inv'0 e2 /\ inv'6 f /\ inv'7 b /\ inv'1 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  use seq.Seq
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 103 4 103 73] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond30] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b] . inv'5 s
    /\ inv'0 e1 /\ inv'0 e2 /\ inv'6 f /\ inv'7 b /\ inv'1 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq t_Item'0 . [%#s06_map_precond29] produced
  = (Seq.empty  : Seq.seq t_Item'0)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  use prelude.prelude.Snapshot
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"06_map_precond.rs" 128 4 128 29] (_1 : ()) =
    [%#s06_map_precond8] forall iter : borrowed i, func : f . inv'4 iter /\ inv'2 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq t_Item'0) /\ preservation'0 iter.final func
  
  use T_06_map_precond__Map as Map'0
  
  predicate invariant'0 [#"06_map_precond.rs" 176 4 176 30] (self : Map'0.t_Map i b f t_Item'0) =
    [%#s06_map_precond26] reinitialize'0 ()
    /\ preservation_inv'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
    /\ next_precondition'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
  
  predicate inv'3 (_1 : Map'0.t_Map i b f t_Item'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Map'0.t_Map i b f t_Item'0 [inv'3 x] . inv'3 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> inv'1 iter /\ inv'2 func
    end)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon12] inv'1 a)
   -> ([%#scommon13] inv'1 b)
   -> ([%#scommon14] inv'1 c)
   -> ([%#scommon15] produces'0 a ab b)
   -> ([%#scommon16] produces'0 b bc c)  -> ([%#scommon17] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon10] inv'1 self)
   -> ([%#scommon11] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec map (iter:i) (func:f) (return'  (ret:Map'0.t_Map i b f t_Item'0))= {[%#s06_map_precond5] inv'2 func}
    {[%#s06_map_precond4] inv'1 iter}
    {[%#s06_map_precond3] preservation'0 iter func}
    {[%#s06_map_precond2] reinitialize'0 ()}
    {[%#s06_map_precond1] forall e : t_Item'0, i2 : i . inv'0 e /\ inv'1 i2
     -> produces'0 iter (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq t_Item'0))}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = s0 [ s0 =  [ &_9 <- [%#s06_map_precond0] Snapshot.new (Seq.empty  : Seq.seq t_Item'0) ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &_0 <- Map'0.C_Map iter func _9 ] s1 | s1 = bb5 ] 
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = return' {_0} ]
    )
    [ & _0 : Map'0.t_Map i b f t_Item'0 = any_l ()
    | & iter : i = iter
    | & func : f = func
    | & _9 : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l () ]
    
    [ return' (result:Map'0.t_Map i b f t_Item'0)-> {[@expl:postcondition] [%#s06_map_precond7] inv'3 result}
      {[@expl:postcondition] [%#s06_map_precond6] result
      = Map'0.C_Map iter func (Snapshot.new (Seq.empty  : Seq.seq t_Item'0))}
      (! return' {result}) ]
    
end
module T_06_map_precond__identity__qyClosure0 [#"06_map_precond.rs" 199 14 199 20]
  type m_06_map_precond__identity__qyClosure0 'i =
    | M_06_map_precond__identity__qyClosure0
  
  let rec m_06_map_precond__identity__qyClosure0 < 'i > (input:m_06_map_precond__identity__qyClosure0 'i) (ret  )= any
    [ good -> {M_06_map_precond__identity__qyClosure0  = input} (! ret) ]
    
end
module M_06_map_precond__identity__qyClosure0 [#"06_map_precond.rs" 199 14 199 20]
  type i
  
  let%span s06_map_precond0 = "06_map_precond.rs" 199 15 199 16
  let%span s06_map_precond1 = "06_map_precond.rs" 199 14 199 20
  let%span sresolve2 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span scommon3 = "common.rs" 14 15 14 24
  let%span scommon4 = "common.rs" 15 14 15 45
  let%span scommon5 = "common.rs" 19 15 19 21
  let%span scommon6 = "common.rs" 20 15 20 21
  let%span scommon7 = "common.rs" 21 15 21 21
  let%span scommon8 = "common.rs" 22 15 22 32
  let%span scommon9 = "common.rs" 23 15 23 32
  let%span scommon10 = "common.rs" 24 14 24 42
  
  type t_Item'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  predicate inv'1 (_1 : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon5] inv'1 a)
   -> ([%#scommon6] inv'1 b)
   -> ([%#scommon7] inv'1 c)
   -> ([%#scommon8] produces'0 a ab b)
   -> ([%#scommon9] produces'0 b bc c)  -> ([%#scommon10] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon3] inv'1 self)
   -> ([%#scommon4] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.Snapshot
  
  use T_06_map_precond__identity__qyClosure0 as Closure'0
  
  predicate unnest'0 [#"06_map_precond.rs" 199 14 199 20] (self : Closure'0.m_06_map_precond__identity__qyClosure0 i) (_2 : Closure'0.m_06_map_precond__identity__qyClosure0 i)
    
   =
    true
  
  predicate inv'0 (_1 : t_Item'0)
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Closure'0.m_06_map_precond__identity__qyClosure0 i)) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Closure'0.m_06_map_precond__identity__qyClosure0 i)) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec m_06_map_precond__identity__qyClosure0 (_1:borrowed (Closure'0.m_06_map_precond__identity__qyClosure0 i)) (x:t_Item'0) (_3:Snapshot.snap_ty (Seq.seq t_Item'0)) (return'  (ret:t_Item'0))= {[%#s06_map_precond0] inv'0 x}
    (! bb0 [ bb0 = s0 [ s0 = -{resolve'0 _1}- s1 | s1 =  [ &_0 <- x ] s2 | s2 = bb1 ]  | bb1 = return' {_0} ] )
    [ & _0 : t_Item'0 = any_l ()
    | & _1 : borrowed (Closure'0.m_06_map_precond__identity__qyClosure0 i) = _1
    | & x : t_Item'0 = x ]
    
    [ return' (result:t_Item'0)-> {[@expl:postcondition] [%#s06_map_precond1] inv'0 result}
      {[@expl:postcondition] unnest'0 _1.current _1.final}
      (! return' {result}) ]
    
end
module M_06_map_precond__identity [#"06_map_precond.rs" 198 0 198 37]
  type i
  
  let%span s06_map_precond0 = "06_map_precond.rs" 198 29 198 33
  let%span s06_map_precond1 = "06_map_precond.rs" 185 0 187 67
  let%span s06_map_precond2 = "06_map_precond.rs" 188 11 188 41
  let%span s06_map_precond3 = "06_map_precond.rs" 189 11 189 51
  let%span s06_map_precond4 = "06_map_precond.rs" 192 4 192 8
  let%span s06_map_precond5 = "06_map_precond.rs" 193 4 193 8
  let%span s06_map_precond6 = "06_map_precond.rs" 190 10 190 75
  let%span s06_map_precond7 = "06_map_precond.rs" 194 5 194 17
  let%span s06_map_precond8 = "06_map_precond.rs" 129 8 135 9
  let%span s06_map_precond9 = "06_map_precond.rs" 117 8 124 9
  let%span scommon10 = "common.rs" 14 15 14 24
  let%span scommon11 = "common.rs" 15 14 15 45
  let%span scommon12 = "common.rs" 19 15 19 21
  let%span scommon13 = "common.rs" 20 15 20 21
  let%span scommon14 = "common.rs" 21 15 21 21
  let%span scommon15 = "common.rs" 22 15 22 32
  let%span scommon16 = "common.rs" 23 15 23 32
  let%span scommon17 = "common.rs" 24 14 24 42
  let%span s06_map_precond18 = "06_map_precond.rs" 93 8 98 9
  let%span s06_map_precond19 = "06_map_precond.rs" 178 12 180 73
  let%span s06_map_precond20 = "06_map_precond.rs" 102 4 102 83
  let%span s06_map_precond21 = "06_map_precond.rs" 104 8 112 9
  let%span sinvariant22 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq23 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed24 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'2 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed24] inv'2 self
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = invariant'3 x
  
  use T_06_map_precond__identity__qyClosure0 as Closure'0
  
  use prelude.prelude.Borrow
  
  predicate inv'6 (_1 : borrowed (Closure'0.m_06_map_precond__identity__qyClosure0 i))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (Closure'0.m_06_map_precond__identity__qyClosure0 i) [inv'6 x] . inv'6 x
  = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq23] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  predicate inv'1 (_1 : i)
  
  predicate invariant'1 (self : borrowed i) =
    [%#sinvariant22] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'4 (_1 : borrowed i)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed i [inv'4 x] . inv'4 x = invariant'1 x
  
  predicate inv'3 (_1 : Closure'0.m_06_map_precond__identity__qyClosure0 i)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Closure'0.m_06_map_precond__identity__qyClosure0 i [inv'3 x] . inv'3 x
  = true
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 [#"06_map_precond.rs" 199 14 199 20] (self : Closure'0.m_06_map_precond__identity__qyClosure0 i) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
    
   =
    let (x, _3) = args in true
  
  use prelude.prelude.Snapshot
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"06_map_precond.rs" 92 4 92 74] (iter : i) (func : Closure'0.m_06_map_precond__identity__qyClosure0 i) (produced : Seq.seq t_Item'0)
    
   =
    [%#s06_map_precond18] forall e : t_Item'0, i : i [produces'0 iter (Seq.singleton e) i] . inv'2 e
    /\ inv'1 i /\ produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  predicate unnest'0 [#"06_map_precond.rs" 199 14 199 20] (self : Closure'0.m_06_map_precond__identity__qyClosure0 i) (_2 : Closure'0.m_06_map_precond__identity__qyClosure0 i)
    
   =
    true
  
  predicate postcondition_mut'0 [#"06_map_precond.rs" 199 14 199 20] (self : borrowed (Closure'0.m_06_map_precond__identity__qyClosure0 i)) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result : t_Item'0)
    
   =
    (let (x, _3) = args in true) /\ unnest'0 self.current self.final
  
  use seq.Seq
  
  use seq.Seq
  
  predicate preservation'0 [#"06_map_precond.rs" 116 4 116 45] (iter : i) (func : Closure'0.m_06_map_precond__identity__qyClosure0 i)
    
   =
    [%#s06_map_precond9] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed (Closure'0.m_06_map_precond__identity__qyClosure0 i), b : t_Item'0, i : i . inv'5 s
    /\ inv'2 e1 /\ inv'2 e2 /\ inv'6 f /\ inv'2 b /\ inv'1 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  use seq.Seq
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 103 4 103 73] (iter : i) (func : Closure'0.m_06_map_precond__identity__qyClosure0 i) (produced : Seq.seq t_Item'0)
    
   =
    [%#s06_map_precond21] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed (Closure'0.m_06_map_precond__identity__qyClosure0 i), b : t_Item'0, i : i [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b] . inv'5 s
    /\ inv'2 e1 /\ inv'2 e2 /\ inv'6 f /\ inv'2 b /\ inv'1 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : Closure'0.m_06_map_precond__identity__qyClosure0 i, produced : Seq.seq t_Item'0 . [%#s06_map_precond20] produced
  = (Seq.empty  : Seq.seq t_Item'0)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  use prelude.prelude.Snapshot
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"06_map_precond.rs" 128 4 128 29] (_1 : ()) =
    [%#s06_map_precond8] forall iter : borrowed i, func : Closure'0.m_06_map_precond__identity__qyClosure0 i . inv'4 iter
    /\ inv'3 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq t_Item'0) /\ preservation'0 iter.final func
  
  use T_06_map_precond__Map as Map'0
  
  predicate invariant'0 [#"06_map_precond.rs" 176 4 176 30] (self : Map'0.t_Map i t_Item'0 (Closure'0.m_06_map_precond__identity__qyClosure0 i) t_Item'0)
    
   =
    [%#s06_map_precond19] reinitialize'0 ()
    /\ preservation_inv'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
    /\ next_precondition'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
  
  predicate inv'0 (_1 : Map'0.t_Map i t_Item'0 (Closure'0.m_06_map_precond__identity__qyClosure0 i) t_Item'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Map'0.t_Map i t_Item'0 (Closure'0.m_06_map_precond__identity__qyClosure0 i) t_Item'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> inv'1 iter
    end)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon12] inv'1 a)
   -> ([%#scommon13] inv'1 b)
   -> ([%#scommon14] inv'1 c)
   -> ([%#scommon15] produces'0 a ab b)
   -> ([%#scommon16] produces'0 b bc c)  -> ([%#scommon17] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon10] inv'1 self)
   -> ([%#scommon11] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.Intrinsic
  
  let rec map'0 (iter:i) (func:Closure'0.m_06_map_precond__identity__qyClosure0 i) (return'  (ret:Map'0.t_Map i t_Item'0 (Closure'0.m_06_map_precond__identity__qyClosure0 i) t_Item'0))= {[@expl:precondition] [%#s06_map_precond5] inv'3 func}
    {[@expl:precondition] [%#s06_map_precond4] inv'1 iter}
    {[@expl:precondition] [%#s06_map_precond3] preservation'0 iter func}
    {[@expl:precondition] [%#s06_map_precond2] reinitialize'0 ()}
    {[@expl:precondition] [%#s06_map_precond1] forall e : t_Item'0, i2 : i . inv'2 e /\ inv'1 i2
     -> produces'0 iter (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq t_Item'0))}
    any
    [ return' (result:Map'0.t_Map i t_Item'0 (Closure'0.m_06_map_precond__identity__qyClosure0 i) t_Item'0)-> {[%#s06_map_precond7] inv'0 result}
      {[%#s06_map_precond6] result = Map'0.C_Map iter func (Snapshot.new (Seq.empty  : Seq.seq t_Item'0))}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec identity (iter:i) (return'  (ret:()))= {[%#s06_map_precond0] inv'1 iter}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- Closure'0.M_06_map_precond__identity__qyClosure0 ] s1
      | s1 = map'0 {iter} {_4}
          (fun (_ret':Map'0.t_Map i t_Item'0 (Closure'0.m_06_map_precond__identity__qyClosure0 i) t_Item'0) ->
             [ &_2 <- _ret' ] 
            s2)
      | s2 = {[@expl:type invariant] inv'0 _2} s3
      | s3 = bb1 ]
      
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & iter : i = iter
    | & _2 : Map'0.t_Map i t_Item'0 (Closure'0.m_06_map_precond__identity__qyClosure0 i) t_Item'0 = any_l ()
    | & _4 : Closure'0.m_06_map_precond__identity__qyClosure0 i = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module T_06_map_precond__increment__qyClosure2 [#"06_map_precond.rs" 210 8 210 35]
  type m_06_map_precond__increment__qyClosure2 'u =
    | M_06_map_precond__increment__qyClosure2
  
  let rec m_06_map_precond__increment__qyClosure2 < 'u > (input:m_06_map_precond__increment__qyClosure2 'u) (ret  )= any
    [ good -> {M_06_map_precond__increment__qyClosure2  = input} (! ret) ]
    
end
module M_06_map_precond__increment__qyClosure2 [#"06_map_precond.rs" 210 8 210 35]
  type u
  
  let%span s06_map_precond0 = "06_map_precond.rs" 211 24 211 25
  let%span s06_map_precond1 = "06_map_precond.rs" 209 19 209 27
  let%span s06_map_precond2 = "06_map_precond.rs" 210 18 210 33
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use T_06_map_precond__increment__qyClosure2 as Closure'0
  
  predicate unnest'0 [#"06_map_precond.rs" 210 8 210 35] (self : Closure'0.m_06_map_precond__increment__qyClosure2 u) (_2 : Closure'0.m_06_map_precond__increment__qyClosure2 u)
    
   =
    true
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  predicate resolve'1 (self : borrowed (Closure'0.m_06_map_precond__increment__qyClosure2 u)) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Closure'0.m_06_map_precond__increment__qyClosure2 u)) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec m_06_map_precond__increment__qyClosure2 (_1:borrowed (Closure'0.m_06_map_precond__increment__qyClosure2 u)) (x:uint32) (_3:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:uint32))= {[%#s06_map_precond1] UInt32.to_int x
    <= 15}
    (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 = UInt32.add {x} {[%#s06_map_precond0] (1 : uint32)} (fun (_ret':uint32) ->  [ &res1 <- _ret' ] s2)
      | s2 =  [ &res <- res1 ] s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l ()
    | & _1 : borrowed (Closure'0.m_06_map_precond__increment__qyClosure2 u) = _1
    | & x : uint32 = x
    | & res : uint32 = any_l ()
    | & res1 : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s06_map_precond2] UInt32.to_int result = UInt32.to_int x + 1}
      (! return' {result}) ]
    
end
module M_06_map_precond__increment [#"06_map_precond.rs" 206 0 206 50]
  type u
  
  let%span s06_map_precond0 = "06_map_precond.rs" 214 4 217 5
  let%span s06_map_precond1 = "06_map_precond.rs" 202 0 202 171
  let%span s06_map_precond2 = "06_map_precond.rs" 203 0 205 2
  let%span s06_map_precond3 = "06_map_precond.rs" 206 42 206 46
  let%span s06_map_precond4 = "06_map_precond.rs" 185 0 187 67
  let%span s06_map_precond5 = "06_map_precond.rs" 188 11 188 41
  let%span s06_map_precond6 = "06_map_precond.rs" 189 11 189 51
  let%span s06_map_precond7 = "06_map_precond.rs" 192 4 192 8
  let%span s06_map_precond8 = "06_map_precond.rs" 193 4 193 8
  let%span s06_map_precond9 = "06_map_precond.rs" 190 10 190 75
  let%span s06_map_precond10 = "06_map_precond.rs" 194 5 194 17
  let%span s06_map_precond11 = "06_map_precond.rs" 51 8 65 9
  let%span s06_map_precond12 = "06_map_precond.rs" 209 19 209 27
  let%span s06_map_precond13 = "06_map_precond.rs" 129 8 135 9
  let%span s06_map_precond14 = "06_map_precond.rs" 117 8 124 9
  let%span s06_map_precond15 = "06_map_precond.rs" 33 15 33 24
  let%span s06_map_precond16 = "06_map_precond.rs" 34 14 34 45
  let%span s06_map_precond17 = "06_map_precond.rs" 31 4 31 10
  let%span s06_map_precond18 = "06_map_precond.rs" 39 15 39 21
  let%span s06_map_precond19 = "06_map_precond.rs" 40 15 40 21
  let%span s06_map_precond20 = "06_map_precond.rs" 41 15 41 21
  let%span s06_map_precond21 = "06_map_precond.rs" 42 15 42 32
  let%span s06_map_precond22 = "06_map_precond.rs" 43 15 43 32
  let%span s06_map_precond23 = "06_map_precond.rs" 44 14 44 42
  let%span s06_map_precond24 = "06_map_precond.rs" 37 4 37 10
  let%span scommon25 = "common.rs" 14 15 14 24
  let%span scommon26 = "common.rs" 15 14 15 45
  let%span scommon27 = "common.rs" 19 15 19 21
  let%span scommon28 = "common.rs" 20 15 20 21
  let%span scommon29 = "common.rs" 21 15 21 21
  let%span scommon30 = "common.rs" 22 15 22 32
  let%span scommon31 = "common.rs" 23 15 23 32
  let%span scommon32 = "common.rs" 24 14 24 42
  let%span s06_map_precond33 = "06_map_precond.rs" 93 8 98 9
  let%span s06_map_precond34 = "06_map_precond.rs" 178 12 180 73
  let%span sinvariant35 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span s06_map_precond36 = "06_map_precond.rs" 102 4 102 83
  let%span s06_map_precond37 = "06_map_precond.rs" 104 8 112 9
  
  use T_06_map_precond__increment__qyClosure2 as Closure'0
  
  use prelude.prelude.Borrow
  
  predicate inv'7 (_1 : borrowed (Closure'0.m_06_map_precond__increment__qyClosure2 u))
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed (Closure'0.m_06_map_precond__increment__qyClosure2 u) [inv'7 x] . inv'7 x
  = true
  
  use seq.Seq
  
  predicate inv'6 (_1 : Seq.seq (borrowed (Closure'0.m_06_map_precond__increment__qyClosure2 u)))
  
  axiom inv_axiom'5 [@rewrite] : forall x : Seq.seq (borrowed (Closure'0.m_06_map_precond__increment__qyClosure2 u)) [inv'6 x] . inv'6 x
  = true
  
  predicate inv'5 (_1 : Closure'0.m_06_map_precond__increment__qyClosure2 u)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Closure'0.m_06_map_precond__increment__qyClosure2 u [inv'5 x] . inv'5 x
  = true
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  predicate inv'4 (_1 : uint32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : uint32 [inv'4 x] . inv'4 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : u) (visited : Seq.seq uint32) (o : u)
  
  predicate inv'3 (_1 : u)
  
  function produces_trans'1 [#"common.rs" 25 4 25 91] (a : u) (ab : Seq.seq uint32) (b : u) (bc : Seq.seq uint32) (c : u) : ()
    
  
  axiom produces_trans'1_spec : forall a : u, ab : Seq.seq uint32, b : u, bc : Seq.seq uint32, c : u . ([%#scommon27] inv'3 a)
   -> ([%#scommon28] inv'3 b)
   -> ([%#scommon29] inv'3 c)
   -> ([%#scommon30] produces'1 a ab b)
   -> ([%#scommon31] produces'1 b bc c)  -> ([%#scommon32] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"common.rs" 16 4 16 27] (self : u) : ()
  
  axiom produces_refl'1_spec : forall self : u . ([%#scommon25] inv'3 self)
   -> ([%#scommon26] produces'1 self (Seq.empty  : Seq.seq uint32) self)
  
  predicate invariant'1 (self : borrowed u) =
    [%#sinvariant35] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'2 (_1 : borrowed u)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed u [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_06_map_precond__Map as Map'0
  
  predicate unnest'0 [#"06_map_precond.rs" 210 8 210 35] (self : Closure'0.m_06_map_precond__increment__qyClosure2 u) (_2 : Closure'0.m_06_map_precond__increment__qyClosure2 u)
    
   =
    true
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Snapshot
  
  predicate postcondition_mut'0 [#"06_map_precond.rs" 210 8 210 35] (self : borrowed (Closure'0.m_06_map_precond__increment__qyClosure2 u)) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (result : uint32)
    
   =
    (let (x, _3) = args in UInt32.to_int result = UInt32.to_int x + 1) /\ unnest'0 self.current self.final
  
  predicate precondition'0 [#"06_map_precond.rs" 210 8 210 35] (self : Closure'0.m_06_map_precond__increment__qyClosure2 u) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32)))
    
   =
    [%#s06_map_precond12] let (x, _3) = args in UInt32.to_int x <= 15
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  predicate inv'1 (_1 : Seq.seq uint32)
  
  use seq.Seq
  
  use seq.Seq
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 50 4 50 67] (self : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32) (visited : Seq.seq uint32) (succ : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32)
    
   =
    [%#s06_map_precond11] unnest'0 (T_06_map_precond__Map.t_Map__func self) (T_06_map_precond__Map.t_Map__func succ)
    /\ (exists fs : Seq.seq (borrowed (Closure'0.m_06_map_precond__increment__qyClosure2 u)) . inv'6 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq uint32 [produces'1 (T_06_map_precond__Map.t_Map__iter self) s (T_06_map_precond__Map.t_Map__iter succ)] . inv'1 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (T_06_map_precond__Map.t_Map__iter self) s (T_06_map_precond__Map.t_Map__iter succ)
    /\ Snapshot.inner (T_06_map_precond__Map.t_Map__produced succ)
    = Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      T_06_map_precond__Map.t_Map__func self = T_06_map_precond__Map.t_Map__func succ
    else
      (Seq.get fs 0).current = T_06_map_precond__Map.t_Map__func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = T_06_map_precond__Map.t_Map__func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (T_06_map_precond__Map.t_Map__func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) (Seq.([..]) s 0 i))) (Seq.get visited i))))
  
  predicate inv'0 (_1 : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32)
  
  function produces_trans'0 [#"06_map_precond.rs" 45 4 45 90] (a : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32) (ab : Seq.seq uint32) (b : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32) (bc : Seq.seq uint32) (c : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32) : ()
    
   =
    [%#s06_map_precond24] ()
  
  axiom produces_trans'0_spec : forall a : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32, ab : Seq.seq uint32, b : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32, bc : Seq.seq uint32, c : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32 . ([%#s06_map_precond18] inv'0 a)
   -> ([%#s06_map_precond19] inv'0 b)
   -> ([%#s06_map_precond20] inv'0 c)
   -> ([%#s06_map_precond21] produces'0 a ab b)
   -> ([%#s06_map_precond22] produces'0 b bc c)  -> ([%#s06_map_precond23] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"06_map_precond.rs" 35 4 35 26] (self : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32) : ()
    
   =
    [%#s06_map_precond17] ()
  
  axiom produces_refl'0_spec : forall self : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32 . ([%#s06_map_precond15] inv'0 self)
   -> ([%#s06_map_precond16] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq uint32 [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  predicate next_precondition'0 [#"06_map_precond.rs" 92 4 92 74] (iter : u) (func : Closure'0.m_06_map_precond__increment__qyClosure2 u) (produced : Seq.seq uint32)
    
   =
    [%#s06_map_precond33] forall e : uint32, i : u [produces'1 iter (Seq.singleton e) i] . inv'4 e
    /\ inv'3 i /\ produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  predicate preservation'0 [#"06_map_precond.rs" 116 4 116 45] (iter : u) (func : Closure'0.m_06_map_precond__increment__qyClosure2 u)
    
   =
    [%#s06_map_precond14] forall s : Seq.seq uint32, e1 : uint32, e2 : uint32, f : borrowed (Closure'0.m_06_map_precond__increment__qyClosure2 u), b : uint32, i : u . inv'1 s
    /\ inv'4 e1 /\ inv'4 e2 /\ inv'7 f /\ inv'4 b /\ inv'3 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 103 4 103 73] (iter : u) (func : Closure'0.m_06_map_precond__increment__qyClosure2 u) (produced : Seq.seq uint32)
    
   =
    [%#s06_map_precond37] forall s : Seq.seq uint32, e1 : uint32, e2 : uint32, f : borrowed (Closure'0.m_06_map_precond__increment__qyClosure2 u), b : uint32, i : u [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b] . inv'1 s
    /\ inv'4 e1 /\ inv'4 e2 /\ inv'7 f /\ inv'4 b /\ inv'3 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : u, func : Closure'0.m_06_map_precond__increment__qyClosure2 u, produced : Seq.seq uint32 . [%#s06_map_precond36] produced
  = (Seq.empty  : Seq.seq uint32)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed u)
  
  predicate reinitialize'0 [#"06_map_precond.rs" 128 4 128 29] (_1 : ()) =
    [%#s06_map_precond13] forall iter : borrowed u, func : Closure'0.m_06_map_precond__increment__qyClosure2 u . inv'2 iter
    /\ inv'5 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq uint32) /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"06_map_precond.rs" 176 4 176 30] (self : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32)
    
   =
    [%#s06_map_precond34] reinitialize'0 ()
    /\ preservation_inv'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
    /\ next_precondition'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> inv'3 iter
    end)
  
  use prelude.prelude.Intrinsic
  
  let rec map'0 (iter:u) (func:Closure'0.m_06_map_precond__increment__qyClosure2 u) (return'  (ret:Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32))= {[@expl:precondition] [%#s06_map_precond8] inv'5 func}
    {[@expl:precondition] [%#s06_map_precond7] inv'3 iter}
    {[@expl:precondition] [%#s06_map_precond6] preservation'0 iter func}
    {[@expl:precondition] [%#s06_map_precond5] reinitialize'0 ()}
    {[@expl:precondition] [%#s06_map_precond4] forall e : uint32, i2 : u . inv'4 e /\ inv'3 i2
     -> produces'1 iter (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq uint32))}
    any
    [ return' (result:Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32)-> {[%#s06_map_precond10] inv'0 result}
      {[%#s06_map_precond9] result = Map'0.C_Map iter func (Snapshot.new (Seq.empty  : Seq.seq uint32))}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec increment (iter:u) (return'  (ret:()))= {[%#s06_map_precond3] inv'3 iter}
    {[%#s06_map_precond2] forall prod : Seq.seq uint32, fin : u . inv'1 prod /\ inv'3 fin /\ produces'1 iter prod fin
     -> (forall x : int . 0 <= x /\ x < Seq.length prod  -> Seq.get prod x <= (10 : uint32))}
    {[%#s06_map_precond1] forall done' : borrowed u . inv'2 done' /\ completed'0 done'
     -> (forall next : u, steps : Seq.seq uint32 . produces'1 done'.final steps next
     -> steps = (Seq.empty  : Seq.seq uint32) /\ done'.final = next)}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 =  [ &_6 <- Closure'0.M_06_map_precond__increment__qyClosure2 ] s1
      | s1 = map'0 {iter} {_6}
          (fun (_ret':Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32) ->
             [ &i <- _ret' ] 
            s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'0 i} s1
      | s1 = {[@expl:assertion] [%#s06_map_precond0] forall prod : Seq.seq uint32, fin : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32 . inv'1 prod
        /\ inv'0 fin /\ produces'0 i prod fin
         -> (forall x : int . 0 <= x /\ x < Seq.length prod  -> Seq.get prod x <= (11 : uint32))}
        s2
      | s2 = bb3 ]
      
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & iter : u = iter
    | & i : Map'0.t_Map u uint32 (Closure'0.m_06_map_precond__increment__qyClosure2 u) uint32 = any_l ()
    | & _6 : Closure'0.m_06_map_precond__increment__qyClosure2 u = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module T_06_map_precond__counter__qyClosure2 [#"06_map_precond.rs" 227 8 227 41]
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_06_map_precond__counter__qyClosure2 'i =
    | M_06_map_precond__counter__qyClosure2 (borrowed usize)
  
  let rec m_06_map_precond__counter__qyClosure2 < 'i > (input:m_06_map_precond__counter__qyClosure2 'i) (ret  (cnt:borrowed usize))= any
    [ good (cnt:borrowed usize)-> {M_06_map_precond__counter__qyClosure2 cnt = input} (! ret {cnt}) ]
    
end
module M_06_map_precond__counter__qyClosure2 [#"06_map_precond.rs" 227 8 227 41]
  type i
  
  let%span s06_map_precond0 = "06_map_precond.rs" 229 19 229 20
  let%span s06_map_precond1 = "06_map_precond.rs" 226 19 226 61
  let%span s06_map_precond2 = "06_map_precond.rs" 227 18 227 39
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use T_06_map_precond__counter__qyClosure2 as Closure'0
  
  function field_0'0 [#"06_map_precond.rs" 227 8 227 41] (self : Closure'0.m_06_map_precond__counter__qyClosure2 i) : borrowed usize
    
   =
    let Closure'0.M_06_map_precond__counter__qyClosure2 a = self in a
  
  predicate unnest'0 [#"06_map_precond.rs" 227 8 227 41] (self : Closure'0.m_06_map_precond__counter__qyClosure2 i) (_2 : Closure'0.m_06_map_precond__counter__qyClosure2 i)
    
   =
    (field_0'0 _2).final = (field_0'0 self).final
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  predicate resolve'1 (self : borrowed (Closure'0.m_06_map_precond__counter__qyClosure2 i)) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Closure'0.m_06_map_precond__counter__qyClosure2 i)) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec m_06_map_precond__counter__qyClosure2 (_1:borrowed (Closure'0.m_06_map_precond__counter__qyClosure2 i)) (x:uint32) (_prod:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:uint32))= {[%#s06_map_precond1] UIntSize.to_int (field_0'0 _1.current).current
    = Seq.length (Snapshot.inner _prod)
    /\ (field_0'0 _1.current).current < (v_MAX'0 : usize)}
    (! bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_06_map_precond__counter__qyClosure2 <i> {_1.current}
          (fun (r'0:borrowed usize) ->
            UIntSize.add {r'0.current} {[%#s06_map_precond0] (1 : usize)}
              (fun (_ret':usize) ->
                Closure'0.m_06_map_precond__counter__qyClosure2 <i> {_1.current}
                  (fun (r'1:borrowed usize) ->
                    
                    [ &_1 <- { _1 with current = Closure'0.M_06_map_precond__counter__qyClosure2 ({ r'1 with current = _ret' ; }) ; } ]
                    
                    s1)))
      | s1 = -{resolve'0 _1}- s2
      | s2 =  [ &res1 <- x ] s3
      | s3 =  [ &res <- res1 ] s4
      | s4 =  [ &_0 <- res ] s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l ()
    | & _1 : borrowed (Closure'0.m_06_map_precond__counter__qyClosure2 i) = _1
    | & x : uint32 = x
    | & res : uint32 = any_l ()
    | & res1 : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s06_map_precond2] UIntSize.to_int (field_0'0 _1.final).current
      = UIntSize.to_int (field_0'0 _1.current).current + 1}
      (! return' {result}) ]
    
end
module M_06_map_precond__counter [#"06_map_precond.rs" 222 0 222 48]
  type i
  
  let%span s06_map_precond0 = "06_map_precond.rs" 223 18 223 19
  let%span s06_map_precond1 = "06_map_precond.rs" 220 0 220 171
  let%span s06_map_precond2 = "06_map_precond.rs" 221 0 221 117
  let%span s06_map_precond3 = "06_map_precond.rs" 222 40 222 44
  let%span s06_map_precond4 = "06_map_precond.rs" 185 0 187 67
  let%span s06_map_precond5 = "06_map_precond.rs" 188 11 188 41
  let%span s06_map_precond6 = "06_map_precond.rs" 189 11 189 51
  let%span s06_map_precond7 = "06_map_precond.rs" 192 4 192 8
  let%span s06_map_precond8 = "06_map_precond.rs" 193 4 193 8
  let%span s06_map_precond9 = "06_map_precond.rs" 190 10 190 75
  let%span s06_map_precond10 = "06_map_precond.rs" 194 5 194 17
  let%span s06_map_precond11 = "06_map_precond.rs" 226 19 226 61
  let%span s06_map_precond12 = "06_map_precond.rs" 129 8 135 9
  let%span s06_map_precond13 = "06_map_precond.rs" 117 8 124 9
  let%span scommon14 = "common.rs" 14 15 14 24
  let%span scommon15 = "common.rs" 15 14 15 45
  let%span scommon16 = "common.rs" 19 15 19 21
  let%span scommon17 = "common.rs" 20 15 20 21
  let%span scommon18 = "common.rs" 21 15 21 21
  let%span scommon19 = "common.rs" 22 15 22 32
  let%span scommon20 = "common.rs" 23 15 23 32
  let%span scommon21 = "common.rs" 24 14 24 42
  let%span s06_map_precond22 = "06_map_precond.rs" 93 8 98 9
  let%span s06_map_precond23 = "06_map_precond.rs" 178 12 180 73
  let%span sinvariant24 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span s06_map_precond25 = "06_map_precond.rs" 102 4 102 83
  let%span s06_map_precond26 = "06_map_precond.rs" 104 8 112 9
  
  use T_06_map_precond__counter__qyClosure2 as Closure'0
  
  use prelude.prelude.Borrow
  
  predicate inv'6 (_1 : borrowed (Closure'0.m_06_map_precond__counter__qyClosure2 i))
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed (Closure'0.m_06_map_precond__counter__qyClosure2 i) [inv'6 x] . inv'6 x
  = true
  
  predicate inv'5 (_1 : Closure'0.m_06_map_precond__counter__qyClosure2 i)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Closure'0.m_06_map_precond__counter__qyClosure2 i [inv'5 x] . inv'5 x = true
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  predicate inv'4 (_1 : uint32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : uint32 [inv'4 x] . inv'4 x = true
  
  use seq.Seq
  
  predicate inv'2 (_1 : Seq.seq uint32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq uint32 [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq uint32) (o : i)
  
  predicate inv'3 (_1 : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq uint32) (b : i) (bc : Seq.seq uint32) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq uint32, b : i, bc : Seq.seq uint32, c : i . ([%#scommon16] inv'3 a)
   -> ([%#scommon17] inv'3 b)
   -> ([%#scommon18] inv'3 c)
   -> ([%#scommon19] produces'0 a ab b)
   -> ([%#scommon20] produces'0 b bc c)  -> ([%#scommon21] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon14] inv'3 self)
   -> ([%#scommon15] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  
  predicate invariant'1 (self : borrowed i) =
    [%#sinvariant24] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'1 (_1 : borrowed i)
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed i [inv'1 x] . inv'1 x = invariant'1 x
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.UIntSize
  
  function field_0'0 [#"06_map_precond.rs" 227 8 227 41] (self : Closure'0.m_06_map_precond__counter__qyClosure2 i) : borrowed usize
    
   =
    let Closure'0.M_06_map_precond__counter__qyClosure2 a = self in a
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 [#"06_map_precond.rs" 227 8 227 41] (self : Closure'0.m_06_map_precond__counter__qyClosure2 i) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32)))
    
   =
    [%#s06_map_precond11] let (x, _prod) = args in UIntSize.to_int (field_0'0 self).current
    = Seq.length (Snapshot.inner _prod)
    /\ (field_0'0 self).current < (v_MAX'0 : usize)
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate next_precondition'0 [#"06_map_precond.rs" 92 4 92 74] (iter : i) (func : Closure'0.m_06_map_precond__counter__qyClosure2 i) (produced : Seq.seq uint32)
    
   =
    [%#s06_map_precond22] forall e : uint32, i : i [produces'0 iter (Seq.singleton e) i] . inv'4 e
    /\ inv'3 i /\ produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  predicate unnest'0 [#"06_map_precond.rs" 227 8 227 41] (self : Closure'0.m_06_map_precond__counter__qyClosure2 i) (_2 : Closure'0.m_06_map_precond__counter__qyClosure2 i)
    
   =
    (field_0'0 _2).final = (field_0'0 self).final
  
  predicate postcondition_mut'0 [#"06_map_precond.rs" 227 8 227 41] (self : borrowed (Closure'0.m_06_map_precond__counter__qyClosure2 i)) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (result : uint32)
    
   =
    (let (x, _prod) = args in UIntSize.to_int (field_0'0 self.final).current
    = UIntSize.to_int (field_0'0 self.current).current + 1)
    /\ unnest'0 self.current self.final
  
  use seq.Seq
  
  predicate preservation'0 [#"06_map_precond.rs" 116 4 116 45] (iter : i) (func : Closure'0.m_06_map_precond__counter__qyClosure2 i)
    
   =
    [%#s06_map_precond13] forall s : Seq.seq uint32, e1 : uint32, e2 : uint32, f : borrowed (Closure'0.m_06_map_precond__counter__qyClosure2 i), b : uint32, i : i . inv'2 s
    /\ inv'4 e1 /\ inv'4 e2 /\ inv'6 f /\ inv'4 b /\ inv'3 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 103 4 103 73] (iter : i) (func : Closure'0.m_06_map_precond__counter__qyClosure2 i) (produced : Seq.seq uint32)
    
   =
    [%#s06_map_precond26] forall s : Seq.seq uint32, e1 : uint32, e2 : uint32, f : borrowed (Closure'0.m_06_map_precond__counter__qyClosure2 i), b : uint32, i : i [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b] . inv'2 s
    /\ inv'4 e1 /\ inv'4 e2 /\ inv'6 f /\ inv'4 b /\ inv'3 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : Closure'0.m_06_map_precond__counter__qyClosure2 i, produced : Seq.seq uint32 . [%#s06_map_precond25] produced
  = (Seq.empty  : Seq.seq uint32)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"06_map_precond.rs" 128 4 128 29] (_1 : ()) =
    [%#s06_map_precond12] forall iter : borrowed i, func : Closure'0.m_06_map_precond__counter__qyClosure2 i . inv'1 iter
    /\ inv'5 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq uint32) /\ preservation'0 iter.final func
  
  use T_06_map_precond__Map as Map'0
  
  predicate invariant'0 [#"06_map_precond.rs" 176 4 176 30] (self : Map'0.t_Map i uint32 (Closure'0.m_06_map_precond__counter__qyClosure2 i) uint32)
    
   =
    [%#s06_map_precond23] reinitialize'0 ()
    /\ preservation_inv'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
    /\ next_precondition'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
  
  predicate inv'0 (_1 : Map'0.t_Map i uint32 (Closure'0.m_06_map_precond__counter__qyClosure2 i) uint32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Map'0.t_Map i uint32 (Closure'0.m_06_map_precond__counter__qyClosure2 i) uint32 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> inv'3 iter
    end)
  
  use prelude.prelude.Intrinsic
  
  let rec map'0 (iter:i) (func:Closure'0.m_06_map_precond__counter__qyClosure2 i) (return'  (ret:Map'0.t_Map i uint32 (Closure'0.m_06_map_precond__counter__qyClosure2 i) uint32))= {[@expl:precondition] [%#s06_map_precond8] inv'5 func}
    {[@expl:precondition] [%#s06_map_precond7] inv'3 iter}
    {[@expl:precondition] [%#s06_map_precond6] preservation'0 iter func}
    {[@expl:precondition] [%#s06_map_precond5] reinitialize'0 ()}
    {[@expl:precondition] [%#s06_map_precond4] forall e : uint32, i2 : i . inv'4 e /\ inv'3 i2
     -> produces'0 iter (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq uint32))}
    any
    [ return' (result:Map'0.t_Map i uint32 (Closure'0.m_06_map_precond__counter__qyClosure2 i) uint32)-> {[%#s06_map_precond10] inv'0 result}
      {[%#s06_map_precond9] result = Map'0.C_Map iter func (Snapshot.new (Seq.empty  : Seq.seq uint32))}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec counter (iter:i) (return'  (ret:()))= {[%#s06_map_precond3] inv'3 iter}
    {[%#s06_map_precond2] forall prod : Seq.seq uint32, fin : i . inv'2 prod /\ inv'3 fin /\ produces'0 iter prod fin
     -> Seq.length prod <= UIntSize.to_int (v_MAX'0 : usize)}
    {[%#s06_map_precond1] forall done' : borrowed i . inv'1 done' /\ completed'0 done'
     -> (forall next : i, steps : Seq.seq uint32 . produces'0 done'.final steps next
     -> steps = (Seq.empty  : Seq.seq uint32) /\ done'.final = next)}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 =  [ &cnt <- [%#s06_map_precond0] (0 : usize) ] s1
      | s1 = Borrow.borrow_mut <usize> {cnt}
          (fun (_ret':borrowed usize) ->  [ &_8 <- _ret' ]  [ &cnt <- _ret'.final ] s2)
      | s2 =  [ &_7 <- Closure'0.M_06_map_precond__counter__qyClosure2 _8 ] s3
      | s3 = map'0 {iter} {_7}
          (fun (_ret':Map'0.t_Map i uint32 (Closure'0.m_06_map_precond__counter__qyClosure2 i) uint32) ->
             [ &_5 <- _ret' ] 
            s4)
      | s4 = {[@expl:type invariant] inv'0 _5} s5
      | s5 = bb2 ]
      
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & iter : i = iter
    | & cnt : usize = any_l ()
    | & _5 : Map'0.t_Map i uint32 (Closure'0.m_06_map_precond__counter__qyClosure2 i) uint32 = any_l ()
    | & _7 : Closure'0.m_06_map_precond__counter__qyClosure2 i = any_l ()
    | & _8 : borrowed usize = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_06_map_precond__qyi18374305379273630819 [#"06_map_precond.rs" 19 0 19 94] (* <Map<I, B, F> as common::Iterator> *)
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "06_map_precond.rs" 45 4 45 90
  let%span s06_map_precond1 = "06_map_precond.rs" 72 4 72 44
  let%span s06_map_precond2 = "06_map_precond.rs" 35 4 35 26
  let%span s06_map_precond3 = "06_map_precond.rs" 51 8 65 9
  let%span s06_map_precond4 = "06_map_precond.rs" 25 8 28 9
  let%span s06_map_precond5 = "06_map_precond.rs" 159 14 159 68
  let%span s06_map_precond6 = "06_map_precond.rs" 161 8 169 9
  let%span s06_map_precond7 = "06_map_precond.rs" 178 12 180 73
  let%span sinvariant8 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq9 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span s06_map_precond10 = "06_map_precond.rs" 129 8 135 9
  let%span s06_map_precond11 = "06_map_precond.rs" 102 4 102 83
  let%span s06_map_precond12 = "06_map_precond.rs" 104 8 112 9
  let%span s06_map_precond13 = "06_map_precond.rs" 93 8 98 9
  let%span s06_map_precond14 = "06_map_precond.rs" 117 8 124 9
  let%span sboxed15 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'7 (_1 : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : borrowed i) =
    [%#sinvariant8] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'12 (_1 : borrowed i)
  
  axiom inv_axiom'8 [@rewrite] : forall x : borrowed i [inv'12 x] . inv'12 x = invariant'7 x
  
  type t_Item'0
  
  predicate inv'6 (_1 : t_Item'0)
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed15] inv'6 self
  
  predicate inv'11 (_1 : t_Item'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Item'0 [inv'11 x] . inv'11 x = invariant'6 x
  
  predicate inv'5 (_1 : borrowed f)
  
  predicate invariant'5 (self : borrowed f) =
    [%#sboxed15] inv'5 self
  
  predicate inv'10 (_1 : borrowed f)
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed f [inv'10 x] . inv'10 x = invariant'5 x
  
  predicate inv'8 (_1 : f)
  
  predicate invariant'4 (self : borrowed f) =
    [%#sinvariant8] inv'8 self.current /\ inv'8 self.final
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed f [inv'5 x] . inv'5 x = invariant'4 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t_Item'0) =
    [%#sseq9] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'11 (Seq.get self i)
  
  predicate inv'4 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq (borrowed f)) =
    [%#sseq9] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq (borrowed f))
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq (borrowed f) [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate inv'9 (_1 : b)
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option b)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Option'0.t_Option b [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'9 a_0
    end
  
  use T_06_map_precond__Map as Map'0
  
  predicate inv'0 (_1 : Map'0.t_Map i b f t_Item'0)
  
  predicate invariant'1 (self : borrowed (Map'0.t_Map i b f t_Item'0)) =
    [%#sinvariant8] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Map'0.t_Map i b f t_Item'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Map'0.t_Map i b f t_Item'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use prelude.prelude.Snapshot
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"06_map_precond.rs" 92 4 92 74] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond13] forall e : t_Item'0, i : i [produces'1 iter (Seq.singleton e) i] . inv'6 e
    /\ inv'7 i /\ produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (_3 : b)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate preservation'0 [#"06_map_precond.rs" 116 4 116 45] (iter : i) (func : f) =
    [%#s06_map_precond14] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i . inv'4 s
    /\ inv'6 e1 /\ inv'6 e2 /\ inv'5 f /\ inv'9 b /\ inv'7 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  use seq.Seq
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 103 4 103 73] (iter : i) (func : f) (produced : Seq.seq t_Item'0) =
    [%#s06_map_precond12] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b] . inv'4 s
    /\ inv'6 e1 /\ inv'6 e2 /\ inv'5 f /\ inv'9 b /\ inv'7 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq t_Item'0 . [%#s06_map_precond11] produced
  = (Seq.empty  : Seq.seq t_Item'0)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  use prelude.prelude.Snapshot
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  use T_06_map_precond__Map as T_06_map_precond__Map
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"06_map_precond.rs" 128 4 128 29] (_1 : ()) =
    [%#s06_map_precond10] forall iter : borrowed i, func : f . inv'12 iter /\ inv'8 func
     -> completed'1 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq t_Item'0) /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"06_map_precond.rs" 176 4 176 30] (self : Map'0.t_Map i b f t_Item'0) =
    [%#s06_map_precond7] reinitialize'0 ()
    /\ preservation_inv'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
    /\ next_precondition'0 (T_06_map_precond__Map.t_Map__iter self) (T_06_map_precond__Map.t_Map__func self) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Map'0.t_Map i b f t_Item'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> inv'7 iter /\ inv'8 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 50 4 50 67] (self : Map'0.t_Map i b f t_Item'0) (visited : Seq.seq b) (succ : Map'0.t_Map i b f t_Item'0)
    
   =
    [%#s06_map_precond3] unnest'0 (T_06_map_precond__Map.t_Map__func self) (T_06_map_precond__Map.t_Map__func succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'3 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 (T_06_map_precond__Map.t_Map__iter self) s (T_06_map_precond__Map.t_Map__iter succ)] . inv'4 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (T_06_map_precond__Map.t_Map__iter self) s (T_06_map_precond__Map.t_Map__iter succ)
    /\ Snapshot.inner (T_06_map_precond__Map.t_Map__produced succ)
    = Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      T_06_map_precond__Map.t_Map__func self = T_06_map_precond__Map.t_Map__func succ
    else
      (Seq.get fs 0).current = T_06_map_precond__Map.t_Map__func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = T_06_map_precond__Map.t_Map__func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (T_06_map_precond__Map.t_Map__func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) (Seq.([..]) s 0 i))) (Seq.get visited i))))
  
  predicate produces_one'0 [#"06_map_precond.rs" 160 4 160 57] (self : Map'0.t_Map i b f t_Item'0) (visited : b) (succ : Map'0.t_Map i b f t_Item'0)
    
   =
    [%#s06_map_precond6] exists f : borrowed f, e : t_Item'0 [postcondition_mut'0 f (e, T_06_map_precond__Map.t_Map__produced self) visited] . inv'5 f
    /\ inv'6 e
    /\ f.current = T_06_map_precond__Map.t_Map__func self
    /\ f.final = T_06_map_precond__Map.t_Map__func succ
    /\ produces'1 (T_06_map_precond__Map.t_Map__iter self) (Seq.singleton e) (T_06_map_precond__Map.t_Map__iter succ)
    /\ Snapshot.inner (T_06_map_precond__Map.t_Map__produced succ)
    = Seq.snoc (Snapshot.inner (T_06_map_precond__Map.t_Map__produced self)) e
    /\ precondition'0 f.current (e, T_06_map_precond__Map.t_Map__produced self)
    /\ postcondition_mut'0 f (e, T_06_map_precond__Map.t_Map__produced self) visited
  
  axiom produces_one'0_spec : forall self : Map'0.t_Map i b f t_Item'0, visited : b, succ : Map'0.t_Map i b f t_Item'0 . [%#s06_map_precond5] produces_one'0 self visited succ
  = produces'0 self (Seq.singleton visited) succ
  
  predicate completed'0 [#"06_map_precond.rs" 24 4 24 35] (self : borrowed (Map'0.t_Map i b f t_Item'0)) =
    [%#s06_map_precond4] Snapshot.inner (T_06_map_precond__Map.t_Map__produced self.final)
    = (Seq.empty  : Seq.seq t_Item'0)
    /\ completed'1 (Borrow.borrow_logic (T_06_map_precond__Map.t_Map__iter self.current) (T_06_map_precond__Map.t_Map__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ T_06_map_precond__Map.t_Map__func self.current = T_06_map_precond__Map.t_Map__func self.final
  
  use seq.Seq
  
  goal produces_trans_refn : [%#s06_map_precond0] forall a : Map'0.t_Map i b f t_Item'0 . forall ab : Seq.seq b . forall b : Map'0.t_Map i b f t_Item'0 . forall bc : Seq.seq b . forall c : Map'0.t_Map i b f t_Item'0 . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal next_refn : [%#s06_map_precond1] forall self : borrowed (Map'0.t_Map i b f t_Item'0) . inv'1 self
   -> inv'1 self
  /\ (forall result : Option'0.t_Option b . inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces_one'0 self.current v self.final
    end
   -> inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_refl_refn : [%#s06_map_precond2] forall self : Map'0.t_Map i b f t_Item'0 . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq b) self
   -> produces'0 self (Seq.empty  : Seq.seq b) self)
end
module M_06_map_precond__qyi10524796479245032139 [#"06_map_precond.rs" 173 0 173 95] (* <Map<I, B, F> as creusot_contracts::Invariant> *)
  type i
  
  type b
  
  type f
end
