module M_06_map_precond__qyi12121551022315030028__resolve_coherence [#"06_map_precond.rs" 9 9 9 16] (* <Map<I, F> as creusot_contracts::Resolve> *)
  let%span s06_map_precond0 = "06_map_precond.rs" 9 9 9 16
  let%span s06_map_precond1 = "06_map_precond.rs" 9 9 9 16
  let%span s06_map_precond2 = "06_map_precond.rs" 11 4 13 36
  let%span scommon3 = "common.rs" 14 14 14 45
  let%span scommon4 = "common.rs" 18 15 18 32
  let%span scommon5 = "common.rs" 19 15 19 32
  let%span scommon6 = "common.rs" 20 14 20 42
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_F'0
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon4] produces'0 a ab b)
   -> ([%#scommon5] produces'0 b bc c)  -> ([%#scommon6] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon3] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Snapshot
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0; t_Map__produced'0: Snapshot.snap_ty (Seq.seq t_Item'0) }
  
  predicate resolve'1 (_1 : Snapshot.snap_ty (Seq.seq t_Item'0)) =
    true
  
  predicate resolve'2 (_1 : t_F'0)
  
  predicate resolve'3 (_1 : t_I'0)
  
  predicate structural_resolve'0 (_1 : t_Map'0) =
    match _1 with
      | {t_Map__iter'0 = x0 ; t_Map__func'0 = x1 ; t_Map__produced'0 = x2} -> resolve'1 x2
      /\ resolve'2 x1 /\ resolve'3 x0
      end
  
  predicate resolve'0 [#"06_map_precond.rs" 9 9 9 16] (self : t_Map'0) =
    [%#s06_map_precond2] resolve'3 self.t_Map__iter'0
    /\ resolve'2 self.t_Map__func'0 /\ resolve'1 self.t_Map__produced'0
  
  constant self  : t_Map'0
  
  function resolve_coherence'0 [#"06_map_precond.rs" 9 9 9 16] (self : t_Map'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#s06_map_precond0] structural_resolve'0 self)
   -> ([%#s06_map_precond0] resolve'0 self)
end
module M_06_map_precond__qyi16809708214464407778__produces_refl [#"06_map_precond.rs" 31 4 31 26] (* <Map<I, F> as common::Iterator> *)
  let%span s06_map_precond0 = "06_map_precond.rs" 30 14 30 45
  let%span s06_map_precond1 = "06_map_precond.rs" 28 4 28 10
  let%span s06_map_precond2 = "06_map_precond.rs" 44 8 58 9
  let%span sops3 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span scommon10 = "common.rs" 14 14 14 45
  let%span scommon11 = "common.rs" 18 15 18 32
  let%span scommon12 = "common.rs" 19 15 19 32
  let%span scommon13 = "common.rs" 20 14 20 42
  
  use seq.Seq
  
  type t_B'0
  
  use seq.Seq
  
  type t_I'0
  
  type t_F'0
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon11] produces'1 a ab b)
   -> ([%#scommon12] produces'1 b bc c)  -> ([%#scommon13] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . [%#scommon10] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Snapshot
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0; t_Map__produced'0: Snapshot.snap_ty (Seq.seq t_Item'0) }
  
  predicate postcondition_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result : t_B'0)
    
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result_state : t_F'0) (result : t_B'0)
    
  
  function fn_mut_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : t_B'0 . [%#sops9] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops6] unnest'0 self b)
   -> ([%#sops7] unnest'0 b c)  -> ([%#sops8] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops5] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res_state : t_F'0) (res : t_B'0) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res_state : t_F'0, res : t_B'0 . ([%#sops3] postcondition_mut'0 self args res_state res)
   -> ([%#sops4] unnest'0 self res_state)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 43 4 43 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s06_map_precond2] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ Snapshot.inner succ.t_Map__produced'0 = Seq.(++) (Snapshot.inner self.t_Map__produced'0) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i))) (Seq.get fs i).final (Seq.get visited i))))
  
  constant self  : t_Map'0
  
  function produces_refl'0 [#"06_map_precond.rs" 31 4 31 26] (self : t_Map'0) : ()
  
  goal vc_produces_refl'0 : [%#s06_map_precond0] produces'0 self (Seq.empty  : Seq.seq t_B'0) self
end
module M_06_map_precond__qyi16809708214464407778__produces_trans [#"06_map_precond.rs" 38 4 38 90] (* <Map<I, F> as common::Iterator> *)
  let%span s06_map_precond0 = "06_map_precond.rs" 35 15 35 32
  let%span s06_map_precond1 = "06_map_precond.rs" 36 15 36 32
  let%span s06_map_precond2 = "06_map_precond.rs" 37 14 37 42
  let%span s06_map_precond3 = "06_map_precond.rs" 33 4 33 10
  let%span s06_map_precond4 = "06_map_precond.rs" 44 8 58 9
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span scommon12 = "common.rs" 14 14 14 45
  let%span scommon13 = "common.rs" 18 15 18 32
  let%span scommon14 = "common.rs" 19 15 19 32
  let%span scommon15 = "common.rs" 20 14 20 42
  
  type t_I'0
  
  type t_F'0
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon13] produces'1 a ab b)
   -> ([%#scommon14] produces'1 b bc c)  -> ([%#scommon15] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon12] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Snapshot
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0; t_Map__produced'0: Snapshot.snap_ty (Seq.seq t_Item'0) }
  
  type t_B'0
  
  use seq.Seq
  
  predicate postcondition_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result : t_B'0)
    
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result_state : t_F'0) (result : t_B'0)
    
  
  function fn_mut_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : t_B'0 . [%#sops11] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops8] unnest'0 self b)
   -> ([%#sops9] unnest'0 b c)  -> ([%#sops10] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops7] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res_state : t_F'0) (res : t_B'0) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res_state : t_F'0, res : t_B'0 . ([%#sops5] postcondition_mut'0 self args res_state res)
   -> ([%#sops6] unnest'0 self res_state)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 43 4 43 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s06_map_precond4] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ Snapshot.inner succ.t_Map__produced'0 = Seq.(++) (Snapshot.inner self.t_Map__produced'0) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i))) (Seq.get fs i).final (Seq.get visited i))))
  
  use seq.Seq
  
  constant a  : t_Map'0
  
  constant ab  : Seq.seq t_B'0
  
  constant b  : t_Map'0
  
  constant bc  : Seq.seq t_B'0
  
  constant c  : t_Map'0
  
  function produces_trans'0 [#"06_map_precond.rs" 38 4 38 90] (a : t_Map'0) (ab : Seq.seq t_B'0) (b : t_Map'0) (bc : Seq.seq t_B'0) (c : t_Map'0) : ()
    
  
  goal vc_produces_trans'0 : ([%#s06_map_precond1] produces'0 b bc c)
   -> ([%#s06_map_precond0] produces'0 a ab b)  -> ([%#s06_map_precond2] produces'0 a (Seq.(++) ab bc) c)
end
module M_06_map_precond__qyi16809708214464407778__next [#"06_map_precond.rs" 65 4 65 44] (* <Map<I, F> as common::Iterator> *)
  let%span s06_map_precond0 = "06_map_precond.rs" 68 16 68 76
  let%span s06_map_precond1 = "06_map_precond.rs" 69 31 69 71
  let%span s06_map_precond2 = "06_map_precond.rs" 72 16 72 58
  let%span s06_map_precond3 = "06_map_precond.rs" 76 32 76 56
  let%span s06_map_precond4 = "06_map_precond.rs" 65 17 65 21
  let%span s06_map_precond5 = "06_map_precond.rs" 65 26 65 44
  let%span s06_map_precond6 = "06_map_precond.rs" 61 14 64 5
  let%span scommon7 = "common.rs" 27 17 27 21
  let%span scommon8 = "common.rs" 27 26 27 44
  let%span scommon9 = "common.rs" 23 14 26 5
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 162 27 162 52
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 163 26 163 71
  let%span s06_map_precond12 = "06_map_precond.rs" 131 15 131 31
  let%span s06_map_precond13 = "06_map_precond.rs" 132 4 132 60
  let%span s06_map_precond14 = "06_map_precond.rs" 133 15 133 30
  let%span s06_map_precond15 = "06_map_precond.rs" 134 15 134 64
  let%span s06_map_precond16 = "06_map_precond.rs" 135 14 135 74
  let%span s06_map_precond17 = "06_map_precond.rs" 136 14 136 75
  let%span s06_map_precond18 = "06_map_precond.rs" 138 8 142 9
  let%span s06_map_precond19 = "06_map_precond.rs" 22 8 25 9
  let%span s06_map_precond20 = "06_map_precond.rs" 146 14 146 68
  let%span s06_map_precond21 = "06_map_precond.rs" 149 12 155 74
  let%span scommon22 = "common.rs" 14 14 14 45
  let%span scommon23 = "common.rs" 18 15 18 32
  let%span scommon24 = "common.rs" 19 15 19 32
  let%span scommon25 = "common.rs" 20 14 20 42
  let%span sresolve26 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span s06_map_precond27 = "06_map_precond.rs" 165 12 167 73
  let%span s06_map_precond28 = "06_map_precond.rs" 95 14 95 81
  let%span s06_map_precond29 = "06_map_precond.rs" 98 12 104 88
  let%span s06_map_precond30 = "06_map_precond.rs" 87 12 90 63
  let%span s06_map_precond31 = "06_map_precond.rs" 44 8 58 9
  let%span sops32 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops33 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops34 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops35 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops36 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops37 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops38 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span sinvariant39 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span s06_map_precond40 = "06_map_precond.rs" 123 12 126 47
  let%span s06_map_precond41 = "06_map_precond.rs" 111 12 116 71
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  predicate inv'0 (_1 : t_I'0)
  
  type t_F'0
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon23] produces'0 a ab b)
   -> ([%#scommon24] produces'0 b bc c)  -> ([%#scommon25] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon22] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Snapshot
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0; t_Map__produced'0: Snapshot.snap_ty (Seq.seq t_Item'0) }
  
  predicate invariant'2 (self : borrowed t_I'0) =
    [%#sinvariant39] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'4 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_I'0 [inv'4 x] . inv'4 x = invariant'2 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_Item'0
  
  predicate inv'9 (_1 : t_Item'0)
  
  predicate inv'5 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'5 x] . inv'5 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'9 a_0
    end
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  use seq.Seq
  
  let rec next'1 (self:borrowed t_I'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] [%#scommon7] inv'4 self}
    any
    [ return' (result:t_Option'0)-> {[%#scommon8] inv'5 result}
      {[%#scommon9] match result with
        | C_None'0 -> completed'1 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_Item'0))= any
    [ good (field_0:t_Item'0)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_Item'0 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  predicate precondition'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate inv'1 (_1 : t_F'0)
  
  predicate invariant'3 (self : borrowed t_F'0) =
    [%#sinvariant39] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'6 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed t_F'0 [inv'6 x] . inv'6 x = invariant'3 x
  
  predicate inv'7 (_1 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  axiom inv_axiom'5 [@rewrite] : forall x : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)) [inv'7 x] . inv'7 x
  = (let (x0, x1) = x in inv'9 x0)
  
  type t_B'0
  
  predicate inv'8 (_1 : t_B'0)
  
  predicate postcondition_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result : t_B'0)
    
  
  predicate resolve'2 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result_state : t_F'0) (result : t_B'0)
    
  
  function fn_mut_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : t_B'0 . [%#sops38] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'2 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops35] unnest'0 self b)
   -> ([%#sops36] unnest'0 b c)  -> ([%#sops37] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops34] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res_state : t_F'0) (res : t_B'0) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res_state : t_F'0, res : t_B'0 . ([%#sops32] postcondition_mut'0 self args res_state res)
   -> ([%#sops33] unnest'0 self res_state)
  
  let rec call_mut'0 (self:borrowed t_F'0) (args:(t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (return'  (ret:t_B'0))= {[@expl:call_mut 'self' type invariant] inv'6 self}
    {[@expl:call_mut 'args' type invariant] inv'7 args}
    {[@expl:call_mut requires] [%#sops10] precondition'0 self.current args}
    any
    [ return' (result:t_B'0)-> {inv'8 result}
      {[%#sops11] postcondition_mut'0 self.current args self.final result}
      (! return' {result}) ]
    
  
  predicate next_precondition'0 [#"06_map_precond.rs" 85 4 85 74] (iter : t_I'0) (func : t_F'0) (produced : Seq.seq t_Item'0)
    
   =
    [%#s06_map_precond30] forall e : t_Item'0, i : t_I'0 [produces'0 iter (Seq.singleton e) i] . produces'0 iter (Seq.singleton e) i
     -> precondition'0 func (e, Snapshot.new produced)
  
  predicate preservation'0 [#"06_map_precond.rs" 109 4 109 45] (iter : t_I'0) (func : t_F'0) =
    [%#s06_map_precond41] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f.current (e1, Snapshot.new s) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate reinitialize'0 [#"06_map_precond.rs" 121 4 121 29] (_1 : ()) =
    [%#s06_map_precond40] forall iter : borrowed t_I'0, func : t_F'0 . completed'1 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq t_Item'0) /\ preservation'0 iter.final func
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 96 4 96 73] (iter : t_I'0) (func : t_F'0) (produced : Seq.seq t_Item'0)
    
   =
    [%#s06_map_precond29] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b] . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : t_I'0, func : t_F'0, produced : Seq.seq t_Item'0 . [%#s06_map_precond28] produced
  = (Seq.empty  : Seq.seq t_Item'0)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  predicate invariant'0 [#"06_map_precond.rs" 163 4 163 30] (self : t_Map'0) =
    [%#s06_map_precond27] reinitialize'0 ()
    /\ preservation_inv'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
    /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
  
  predicate inv'10 (_1 : t_Map'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Map'0 [inv'10 x] . inv'10 x
  = (invariant'0 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func ; t_Map__produced'0 = produced} -> inv'0 iter /\ inv'1 func
    end)
  
  predicate invariant'1 (self : borrowed (t_Map'0)) =
    [%#sinvariant39] inv'10 self.current /\ inv'10 self.final
  
  predicate inv'2 (_1 : borrowed (t_Map'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Map'0) [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate resolve'1 (self : borrowed (t_Map'0)) =
    [%#sresolve26] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Map'0)) =
    resolve'1 _1
  
  function produces_one_invariant'0 [#"06_map_precond.rs" 137 4 137 73] (self : t_Map'0) (e : t_Item'0) (r : t_B'0) (f : borrowed t_F'0) (iter : t_I'0) : ()
    
   =
    [%#s06_map_precond18] let _ = () in ()
  
  axiom produces_one_invariant'0_spec : forall self : t_Map'0, e : t_Item'0, r : t_B'0, f : borrowed t_F'0, iter : t_I'0 . ([%#s06_map_precond12] invariant'0 self)
   -> ([%#s06_map_precond13] produces'0 self.t_Map__iter'0 (Seq.singleton e) iter)
   -> ([%#s06_map_precond14] f.current = self.t_Map__func'0)
   -> ([%#s06_map_precond15] postcondition_mut'0 f.current (e, self.t_Map__produced'0) f.final r)
   -> ([%#s06_map_precond16] preservation_inv'0 iter f.final (Seq.snoc (Snapshot.inner self.t_Map__produced'0) e))
  && ([%#s06_map_precond17] next_precondition'0 iter f.final (Seq.snoc (Snapshot.inner self.t_Map__produced'0) e))
  
  use prelude.prelude.Snapshot
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 t_B'0
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  predicate inv'3 (_1 : t_Option'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'1 [inv'3 x] . inv'3 x
  = match x with
    | C_None'1 -> true
    | C_Some'1 a_0 -> inv'8 a_0
    end
  
  predicate completed'0 [#"06_map_precond.rs" 21 4 21 35] (self : borrowed (t_Map'0)) =
    [%#s06_map_precond19] Snapshot.inner (self.final).t_Map__produced'0 = (Seq.empty  : Seq.seq t_Item'0)
    /\ completed'1 (Borrow.borrow_logic (self.current).t_Map__iter'0 (self.final).t_Map__iter'0 (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ (self.current).t_Map__func'0 = (self.final).t_Map__func'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [@inline:trivial] [#"06_map_precond.rs" 43 4 43 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s06_map_precond31] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'0 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'0 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ Snapshot.inner succ.t_Map__produced'0 = Seq.(++) (Snapshot.inner self.t_Map__produced'0) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i))) (Seq.get fs i).final (Seq.get visited i))))
  
  predicate produces_one'0 [#"06_map_precond.rs" 147 4 147 57] (self : t_Map'0) (visited : t_B'0) (succ : t_Map'0) =
    [%#s06_map_precond21] exists f : borrowed t_F'0, e : t_Item'0 [postcondition_mut'0 f.current (e, self.t_Map__produced'0) f.final visited] . f.current
    = self.t_Map__func'0
    /\ f.final = succ.t_Map__func'0
    /\ produces'0 self.t_Map__iter'0 (Seq.singleton e) succ.t_Map__iter'0
    /\ Snapshot.inner succ.t_Map__produced'0 = Seq.snoc (Snapshot.inner self.t_Map__produced'0) e
    /\ precondition'0 f.current (e, self.t_Map__produced'0)
    /\ postcondition_mut'0 f.current (e, self.t_Map__produced'0) f.final visited
  
  axiom produces_one'0_spec : forall self : t_Map'0, visited : t_B'0, succ : t_Map'0 . [%#s06_map_precond20] produces_one'0 self visited succ
  = produces'1 self (Seq.singleton visited) succ
  
  meta "compute_max_steps" 1000000
  
  let rec next'0 (self:borrowed (t_Map'0)) (return'  (ret:t_Option'1))= {[@expl:next 'self' type invariant] [%#s06_map_precond4] inv'2 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 (self.current).t_Map__iter'0}
        Borrow.borrow_final <t_I'0> {(self.current).t_Map__iter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
          (fun (_ret':borrowed t_I'0) ->
             [ &_4 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { self.current with t_Map__iter'0 = _ret'.final } } ] 
            s1)
      | s1 = next'1 {_4} (fun (_ret':t_Option'0) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = any [ br0 -> {_3 = C_None'0 } (! bb4) | br1 (x0:t_Item'0)-> {_3 = C_Some'0 x0} (! bb3) ] 
    | bb3 = bb5
    | bb5 = s0
      [ s0 = v_Some'0 {_3} (fun (r0'0:t_Item'0) ->  [ &v <- r0'0 ] s1)
      | s1 = {[@expl:assertion] [%#s06_map_precond0] precondition'0 (self.current).t_Map__func'0 (v, (self.current).t_Map__produced'0)}
        s2
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = 
        [ &produced <- [%#s06_map_precond1] Snapshot.new (Seq.snoc (Snapshot.inner (self.current).t_Map__produced'0) v) ]
        
        s1
      | s1 = bb7 ]
      
    | bb7 = s0
      [ s0 = {inv'1 (self.current).t_Map__func'0}
        Borrow.borrow_final <t_F'0> {(self.current).t_Map__func'0} {Borrow.inherit_id (Borrow.get_id self) 2}
          (fun (_ret':borrowed t_F'0) ->
             [ &_12 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &self <- { self with current = { self.current with t_Map__func'0 = _ret'.final } } ] 
            s1)
      | s1 =  [ &_13 <- (v, (self.current).t_Map__produced'0) ] s2
      | s2 = call_mut'0 {_12} {_13} (fun (_ret':t_B'0) ->  [ &r <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb8 = bb9
    | bb9 = s0
      [ s0 =  [ &self <- { self with current = { self.current with t_Map__produced'0 = produced } } ] s1
      | s1 = {[@expl:type invariant] inv'2 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_17 <- [%#s06_map_precond2] Snapshot.new () ] s4
      | s4 = bb10 ]
      
    | bb10 = s0 [ s0 =  [ &_0 <- C_Some'1 r ] s1 | s1 = bb11 ] 
    | bb11 = bb12
    | bb12 = bb13
    | bb13 = bb15
    | bb4 = s0 [ s0 =  [ &_20 <- [%#s06_map_precond3] Snapshot.new (Seq.empty  : Seq.seq t_Item'0) ] s1 | s1 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &self <- { self with current = { self.current with t_Map__produced'0 = _20 } } ] s1
      | s1 = {[@expl:type invariant] inv'2 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- C_None'1 ] s4
      | s4 = bb15 ]
      
    | bb15 = bb16
    | bb16 = return' {_0} ]
    )
    [ & _0 : t_Option'1 = any_l ()
    | & self : borrowed (t_Map'0) = self
    | & _3 : t_Option'0 = any_l ()
    | & _4 : borrowed t_I'0 = any_l ()
    | & v : t_Item'0 = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & r : t_B'0 = any_l ()
    | & _12 : borrowed t_F'0 = any_l ()
    | & _13 : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)) = any_l ()
    | & _17 : Snapshot.snap_ty () = any_l ()
    | & _20 : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l () ]
    
    [ return' (result:t_Option'1)-> {[@expl:next result type invariant] [%#s06_map_precond5] inv'3 result}
      {[@expl:next ensures] [%#s06_map_precond6] match result with
        | C_None'1 -> completed'0 self
        | C_Some'1 v -> produces_one'0 self.current v self.final
        end}
      (! return' {result}) ]
    
end
module M_06_map_precond__qyi15984651645423927012__preservation_inv [#"06_map_precond.rs" 96 4 96 73] (* Map<I, F> *)
  let%span s06_map_precond0 = "06_map_precond.rs" 95 14 95 81
  let%span s06_map_precond1 = "06_map_precond.rs" 98 12 104 88
  let%span s06_map_precond2 = "06_map_precond.rs" 111 12 116 71
  let%span scommon3 = "common.rs" 14 14 14 45
  let%span scommon4 = "common.rs" 18 15 18 32
  let%span scommon5 = "common.rs" 19 15 19 32
  let%span scommon6 = "common.rs" 20 14 20 42
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  
  use seq.Seq
  
  type t_I'0
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon4] produces'0 a ab b)
   -> ([%#scommon5] produces'0 b bc c)  -> ([%#scommon6] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon3] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
  
  type t_F'0
  
  use prelude.prelude.Borrow
  
  type t_B'0
  
  use prelude.prelude.Snapshot
  
  predicate postcondition_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result : t_B'0)
    
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result_state : t_F'0) (result : t_B'0)
    
  
  function fn_mut_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : t_B'0 . [%#sops13] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops10] unnest'0 self b)
   -> ([%#sops11] unnest'0 b c)  -> ([%#sops12] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops9] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res_state : t_F'0) (res : t_B'0) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res_state : t_F'0, res : t_B'0 . ([%#sops7] postcondition_mut'0 self args res_state res)
   -> ([%#sops8] unnest'0 self res_state)
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  predicate preservation'0 [#"06_map_precond.rs" 109 4 109 45] (iter : t_I'0) (func : t_F'0) =
    [%#s06_map_precond2] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f.current (e1, Snapshot.new s) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  constant iter  : t_I'0
  
  constant func  : t_F'0
  
  constant produced  : Seq.seq t_Item'0
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 96 4 96 73] (iter : t_I'0) (func : t_F'0) (produced : Seq.seq t_Item'0)
    
  
  goal vc_preservation_inv'0 : [%#s06_map_precond0] produced = (Seq.empty  : Seq.seq t_Item'0)
   -> ([%#s06_map_precond1] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b] . unnest'0 func f.current
   -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
   -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
   -> postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b
   -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1)))
  = preservation'0 iter func
end
module M_06_map_precond__qyi15984651645423927012__produces_one_invariant [#"06_map_precond.rs" 137 4 137 73] (* Map<I, F> *)
  let%span s06_map_precond0 = "06_map_precond.rs" 131 15 131 31
  let%span s06_map_precond1 = "06_map_precond.rs" 132 4 132 60
  let%span s06_map_precond2 = "06_map_precond.rs" 133 15 133 30
  let%span s06_map_precond3 = "06_map_precond.rs" 134 15 134 64
  let%span s06_map_precond4 = "06_map_precond.rs" 135 14 135 74
  let%span s06_map_precond5 = "06_map_precond.rs" 136 14 136 75
  let%span s06_map_precond6 = "06_map_precond.rs" 139 12 141 94
  let%span s06_map_precond7 = "06_map_precond.rs" 138 8 142 9
  let%span s06_map_precond8 = "06_map_precond.rs" 165 12 167 73
  let%span s06_map_precond9 = "06_map_precond.rs" 95 14 95 81
  let%span s06_map_precond10 = "06_map_precond.rs" 98 12 104 88
  let%span s06_map_precond11 = "06_map_precond.rs" 87 12 90 63
  let%span s06_map_precond12 = "06_map_precond.rs" 123 12 126 47
  let%span scommon13 = "common.rs" 14 14 14 45
  let%span scommon14 = "common.rs" 18 15 18 32
  let%span scommon15 = "common.rs" 19 15 19 32
  let%span scommon16 = "common.rs" 20 14 20 42
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops21 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span s06_map_precond24 = "06_map_precond.rs" 111 12 116 71
  
  type t_I'0
  
  type t_F'0
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon14] produces'0 a ab b)
   -> ([%#scommon15] produces'0 b bc c)  -> ([%#scommon16] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon13] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Snapshot
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0; t_Map__produced'0: Snapshot.snap_ty (Seq.seq t_Item'0) }
  
  use prelude.prelude.Borrow
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  predicate next_precondition'0 [#"06_map_precond.rs" 85 4 85 74] (iter : t_I'0) (func : t_F'0) (produced : Seq.seq t_Item'0)
    
   =
    [%#s06_map_precond11] forall e : t_Item'0, i : t_I'0 [produces'0 iter (Seq.singleton e) i] . produces'0 iter (Seq.singleton e) i
     -> precondition'0 func (e, Snapshot.new produced)
  
  type t_B'0
  
  predicate postcondition_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result : t_B'0)
    
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result_state : t_F'0) (result : t_B'0)
    
  
  function fn_mut_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : t_B'0 . [%#sops23] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops20] unnest'0 self b)
   -> ([%#sops21] unnest'0 b c)  -> ([%#sops22] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops19] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res_state : t_F'0) (res : t_B'0) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res_state : t_F'0, res : t_B'0 . ([%#sops17] postcondition_mut'0 self args res_state res)
   -> ([%#sops18] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"06_map_precond.rs" 109 4 109 45] (iter : t_I'0) (func : t_F'0) =
    [%#s06_map_precond24] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f.current (e1, Snapshot.new s) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate reinitialize'0 [#"06_map_precond.rs" 121 4 121 29] (_1 : ()) =
    [%#s06_map_precond12] forall iter : borrowed t_I'0, func : t_F'0 . completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq t_Item'0) /\ preservation'0 iter.final func
  
  use prelude.prelude.Snapshot
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 96 4 96 73] (iter : t_I'0) (func : t_F'0) (produced : Seq.seq t_Item'0)
    
   =
    [%#s06_map_precond10] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b] . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : t_I'0, func : t_F'0, produced : Seq.seq t_Item'0 . [%#s06_map_precond9] produced
  = (Seq.empty  : Seq.seq t_Item'0)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  predicate invariant'0 [#"06_map_precond.rs" 163 4 163 30] (self : t_Map'0) =
    [%#s06_map_precond8] reinitialize'0 ()
    /\ preservation_inv'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
    /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
  
  constant self  : t_Map'0
  
  constant e  : t_Item'0
  
  constant r  : t_B'0
  
  constant f  : borrowed t_F'0
  
  constant iter  : t_I'0
  
  function produces_one_invariant'0 [#"06_map_precond.rs" 137 4 137 73] (self : t_Map'0) (e : t_Item'0) (r : t_B'0) (f : borrowed t_F'0) (iter : t_I'0) : ()
    
  
  goal vc_produces_one_invariant'0 : ([%#s06_map_precond3] postcondition_mut'0 f.current (e, self.t_Map__produced'0) f.final r)
   -> ([%#s06_map_precond2] f.current = self.t_Map__func'0)
   -> ([%#s06_map_precond1] produces'0 self.t_Map__iter'0 (Seq.singleton e) iter)
   -> ([%#s06_map_precond0] invariant'0 self)
   -> ([%#s06_map_precond6] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, i : t_I'0 . produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
   -> produces'0 self.t_Map__iter'0 (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i)
  && (let _ = () in ([%#s06_map_precond4] preservation_inv'0 iter f.final (Seq.snoc (Snapshot.inner self.t_Map__produced'0) e))
  && ([%#s06_map_precond5] next_precondition'0 iter f.final (Seq.snoc (Snapshot.inner self.t_Map__produced'0) e)))
end
module M_06_map_precond__qyi15984651645423927012__produces_one [#"06_map_precond.rs" 147 4 147 57] (* Map<I, F> *)
  let%span s06_map_precond0 = "06_map_precond.rs" 146 14 146 68
  let%span s06_map_precond1 = "06_map_precond.rs" 149 12 155 74
  let%span s06_map_precond2 = "06_map_precond.rs" 44 8 58 9
  let%span s06_map_precond3 = "06_map_precond.rs" 30 14 30 45
  let%span s06_map_precond4 = "06_map_precond.rs" 28 4 28 10
  let%span s06_map_precond5 = "06_map_precond.rs" 35 15 35 32
  let%span s06_map_precond6 = "06_map_precond.rs" 36 15 36 32
  let%span s06_map_precond7 = "06_map_precond.rs" 37 14 37 42
  let%span s06_map_precond8 = "06_map_precond.rs" 33 4 33 10
  let%span scommon9 = "common.rs" 14 14 14 45
  let%span scommon10 = "common.rs" 18 15 18 32
  let%span scommon11 = "common.rs" 19 15 19 32
  let%span scommon12 = "common.rs" 20 14 20 42
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  
  use seq.Seq
  
  use seq.Seq
  
  type t_I'0
  
  type t_F'0
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon10] produces'1 a ab b)
   -> ([%#scommon11] produces'1 b bc c)  -> ([%#scommon12] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . [%#scommon9] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Snapshot
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0; t_Map__produced'0: Snapshot.snap_ty (Seq.seq t_Item'0) }
  
  type t_B'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate postcondition_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result : t_B'0)
    
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result_state : t_F'0) (result : t_B'0)
    
  
  function fn_mut_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : t_B'0 . [%#sops19] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops16] unnest'0 self b)
   -> ([%#sops17] unnest'0 b c)  -> ([%#sops18] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops15] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res_state : t_F'0) (res : t_B'0) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res_state : t_F'0, res : t_B'0 . ([%#sops13] postcondition_mut'0 self args res_state res)
   -> ([%#sops14] unnest'0 self res_state)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 43 4 43 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s06_map_precond2] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ Snapshot.inner succ.t_Map__produced'0 = Seq.(++) (Snapshot.inner self.t_Map__produced'0) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i))) (Seq.get fs i).final (Seq.get visited i))))
  
  function produces_trans'0 [#"06_map_precond.rs" 38 4 38 90] (a : t_Map'0) (ab : Seq.seq t_B'0) (b : t_Map'0) (bc : Seq.seq t_B'0) (c : t_Map'0) : ()
    
   =
    [%#s06_map_precond8] ()
  
  axiom produces_trans'0_spec : forall a : t_Map'0, ab : Seq.seq t_B'0, b : t_Map'0, bc : Seq.seq t_B'0, c : t_Map'0 . ([%#s06_map_precond5] produces'0 a ab b)
   -> ([%#s06_map_precond6] produces'0 b bc c)  -> ([%#s06_map_precond7] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"06_map_precond.rs" 31 4 31 26] (self : t_Map'0) : () =
    [%#s06_map_precond4] ()
  
  axiom produces_refl'0_spec : forall self : t_Map'0 . [%#s06_map_precond3] produces'0 self (Seq.empty  : Seq.seq t_B'0) self
  
  use seq.Seq
  
  use seq.Seq
  
  constant self  : t_Map'0
  
  constant visited  : t_B'0
  
  constant succ  : t_Map'0
  
  predicate produces_one'0 [#"06_map_precond.rs" 147 4 147 57] (self : t_Map'0) (visited : t_B'0) (succ : t_Map'0)
  
  goal vc_produces_one'0 : [%#s06_map_precond0] ([%#s06_map_precond1] exists f : borrowed t_F'0, e : t_Item'0 [postcondition_mut'0 f.current (e, self.t_Map__produced'0) f.final visited] . f.current
  = self.t_Map__func'0
  /\ f.final = succ.t_Map__func'0
  /\ produces'1 self.t_Map__iter'0 (Seq.singleton e) succ.t_Map__iter'0
  /\ Snapshot.inner succ.t_Map__produced'0 = Seq.snoc (Snapshot.inner self.t_Map__produced'0) e
  /\ precondition'0 f.current (e, self.t_Map__produced'0)
  /\ postcondition_mut'0 f.current (e, self.t_Map__produced'0) f.final visited)
  = produces'0 self (Seq.singleton visited) succ
end
module M_06_map_precond__map [#"06_map_precond.rs" 178 0 181 14]
  let%span s06_map_precond0 = "06_map_precond.rs" 182 32 182 54
  let%span s06_map_precond1 = "06_map_precond.rs" 179 4 179 8
  let%span s06_map_precond2 = "06_map_precond.rs" 180 4 180 8
  let%span s06_map_precond3 = "06_map_precond.rs" 172 11 174 65
  let%span s06_map_precond4 = "06_map_precond.rs" 175 11 175 38
  let%span s06_map_precond5 = "06_map_precond.rs" 176 11 176 48
  let%span s06_map_precond6 = "06_map_precond.rs" 181 5 181 14
  let%span s06_map_precond7 = "06_map_precond.rs" 177 10 177 75
  let%span s06_map_precond8 = "06_map_precond.rs" 123 12 126 47
  let%span s06_map_precond9 = "06_map_precond.rs" 111 12 116 71
  let%span scommon10 = "common.rs" 14 14 14 45
  let%span scommon11 = "common.rs" 18 15 18 32
  let%span scommon12 = "common.rs" 19 15 19 32
  let%span scommon13 = "common.rs" 20 14 20 42
  let%span s06_map_precond14 = "06_map_precond.rs" 87 12 90 63
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops21 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span s06_map_precond22 = "06_map_precond.rs" 165 12 167 73
  let%span s06_map_precond23 = "06_map_precond.rs" 95 14 95 81
  let%span s06_map_precond24 = "06_map_precond.rs" 98 12 104 88
  
  use seq.Seq
  
  type t_I'0
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon11] produces'0 a ab b)
   -> ([%#scommon12] produces'0 b bc c)  -> ([%#scommon13] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon10] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Snapshot
  
  type t_F'0
  
  use prelude.prelude.Snapshot
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0; t_Map__produced'0: Snapshot.snap_ty (Seq.seq t_Item'0) }
  
  use prelude.prelude.Intrinsic
  
  predicate inv'0 (_1 : t_I'0)
  
  predicate inv'1 (_1 : t_F'0)
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use prelude.prelude.Borrow
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate next_precondition'0 [#"06_map_precond.rs" 85 4 85 74] (iter : t_I'0) (func : t_F'0) (produced : Seq.seq t_Item'0)
    
   =
    [%#s06_map_precond14] forall e : t_Item'0, i : t_I'0 [produces'0 iter (Seq.singleton e) i] . produces'0 iter (Seq.singleton e) i
     -> precondition'0 func (e, Snapshot.new produced)
  
  type t_B'0
  
  predicate postcondition_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result : t_B'0)
    
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result_state : t_F'0) (result : t_B'0)
    
  
  function fn_mut_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : t_B'0 . [%#sops21] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops18] unnest'0 self b)
   -> ([%#sops19] unnest'0 b c)  -> ([%#sops20] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops17] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res_state : t_F'0) (res : t_B'0) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res_state : t_F'0, res : t_B'0 . ([%#sops15] postcondition_mut'0 self args res_state res)
   -> ([%#sops16] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"06_map_precond.rs" 109 4 109 45] (iter : t_I'0) (func : t_F'0) =
    [%#s06_map_precond9] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f.current (e1, Snapshot.new s) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate reinitialize'0 [#"06_map_precond.rs" 121 4 121 29] (_1 : ()) =
    [%#s06_map_precond8] forall iter : borrowed t_I'0, func : t_F'0 . completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq t_Item'0) /\ preservation'0 iter.final func
  
  use prelude.prelude.Snapshot
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 96 4 96 73] (iter : t_I'0) (func : t_F'0) (produced : Seq.seq t_Item'0)
    
   =
    [%#s06_map_precond24] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b] . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : t_I'0, func : t_F'0, produced : Seq.seq t_Item'0 . [%#s06_map_precond23] produced
  = (Seq.empty  : Seq.seq t_Item'0)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  predicate invariant'0 [#"06_map_precond.rs" 163 4 163 30] (self : t_Map'0) =
    [%#s06_map_precond22] reinitialize'0 ()
    /\ preservation_inv'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
    /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
  
  predicate inv'2 (_1 : t_Map'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Map'0 [inv'2 x] . inv'2 x
  = (invariant'0 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func ; t_Map__produced'0 = produced} -> inv'0 iter /\ inv'1 func
    end)
  
  meta "compute_max_steps" 1000000
  
  let rec map'0 (iter:t_I'0) (func:t_F'0) (return'  (ret:t_Map'0))= {[@expl:map 'iter' type invariant] [%#s06_map_precond1] inv'0 iter}
    {[@expl:map 'func' type invariant] [%#s06_map_precond2] inv'1 func}
    {[@expl:map requires #0] [%#s06_map_precond3] forall e : t_Item'0, i2 : t_I'0 . produces'0 iter (Seq.singleton e) i2
     -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq t_Item'0))}
    {[@expl:map requires #1] [%#s06_map_precond4] reinitialize'0 ()}
    {[@expl:map requires #2] [%#s06_map_precond5] preservation'0 iter func}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = s0 [ s0 =  [ &_9 <- [%#s06_map_precond0] Snapshot.new (Seq.empty  : Seq.seq t_Item'0) ] s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &_0 <- { t_Map__iter'0 = iter; t_Map__func'0 = func; t_Map__produced'0 = _9 } ] s1 | s1 = bb5 ]
      
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = return' {_0} ]
    )
    [ & _0 : t_Map'0 = any_l ()
    | & iter : t_I'0 = iter
    | & func : t_F'0 = func
    | & _9 : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l () ]
    
    [ return' (result:t_Map'0)-> {[@expl:map result type invariant] [%#s06_map_precond6] inv'2 result}
      {[@expl:map ensures] [%#s06_map_precond7] result
      = { t_Map__iter'0 = iter;
          t_Map__func'0 = func;
          t_Map__produced'0 = Snapshot.new (Seq.empty  : Seq.seq t_Item'0) }}
      (! return' {result}) ]
    
end
module M_06_map_precond__identity [#"06_map_precond.rs" 185 0 185 37]
  let%span s06_map_precond0 = "06_map_precond.rs" 185 29 185 33
  let%span s06_map_precond1 = "06_map_precond.rs" 186 15 186 16
  let%span s06_map_precond2 = "06_map_precond.rs" 186 14 186 20
  let%span s06_map_precond3 = "06_map_precond.rs" 179 4 179 8
  let%span s06_map_precond4 = "06_map_precond.rs" 180 4 180 8
  let%span s06_map_precond5 = "06_map_precond.rs" 172 11 174 65
  let%span s06_map_precond6 = "06_map_precond.rs" 175 11 175 38
  let%span s06_map_precond7 = "06_map_precond.rs" 176 11 176 48
  let%span s06_map_precond8 = "06_map_precond.rs" 181 5 181 14
  let%span s06_map_precond9 = "06_map_precond.rs" 177 10 177 75
  let%span s06_map_precond10 = "06_map_precond.rs" 123 12 126 47
  let%span s06_map_precond11 = "06_map_precond.rs" 111 12 116 71
  let%span s06_map_precond12 = "06_map_precond.rs" 11 4 13 36
  let%span sresolve13 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span scommon14 = "common.rs" 14 14 14 45
  let%span scommon15 = "common.rs" 18 15 18 32
  let%span scommon16 = "common.rs" 19 15 19 32
  let%span scommon17 = "common.rs" 20 14 20 42
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops21 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops24 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span s06_map_precond25 = "06_map_precond.rs" 87 12 90 63
  let%span s06_map_precond26 = "06_map_precond.rs" 165 12 167 73
  let%span s06_map_precond27 = "06_map_precond.rs" 95 14 95 81
  let%span s06_map_precond28 = "06_map_precond.rs" 98 12 104 88
  
  use prelude.prelude.Borrow
  
  predicate resolve'3 (self : borrowed ()) =
    [%#sresolve13] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed ()) =
    resolve'3 _1
  
  type t_I'0
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon15] produces'0 a ab b)
   -> ([%#scommon16] produces'0 b bc c)  -> ([%#scommon17] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon14] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Intrinsic
  
  predicate inv'2 (_1 : t_Item'0)
  
  use prelude.prelude.Snapshot
  
  predicate postcondition_once'0 (self : ()) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result : t_Item'0)
    
   =
    let (x, _3) = args in true
  
  predicate resolve'5 (_1 : ()) =
    true
  
  predicate unnest'0 (self : ()) (_2 : ()) =
    true
  
  predicate postcondition_mut'0 (self : ()) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result_state : ()) (result : t_Item'0)
    
   =
    (let (x, _3) = args in true) /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : ()) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : t_Item'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : (), args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : t_Item'0 . [%#sops24] postcondition_once'0 self args res
  = (exists res_state : () . postcondition_mut'0 self args res_state res /\ resolve'5 res_state)
  
  function unnest_trans'0 (self : ()) (b : ()) (c : ()) : ()
  
  axiom unnest_trans'0_spec : forall self : (), b : (), c : () . ([%#sops21] unnest'0 self b)
   -> ([%#sops22] unnest'0 b c)  -> ([%#sops23] unnest'0 self c)
  
  function unnest_refl'0 (self : ()) : ()
  
  axiom unnest_refl'0_spec : forall self : () . [%#sops20] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : ()) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res_state : ()) (res : t_Item'0) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : (), args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res_state : (), res : t_Item'0 . ([%#sops18] postcondition_mut'0 self args res_state res)
   -> ([%#sops19] unnest'0 self res_state)
  
  let rec closure0'0 (_1:borrowed ()) (x:t_Item'0) (_3:Snapshot.snap_ty (Seq.seq t_Item'0)) (return'  (ret:t_Item'0))= {[@expl:closure 'x' type invariant] [%#s06_map_precond1] inv'2 x}
    (! bb0 [ bb0 = s0 [ s0 = -{resolve'1 _1}- s1 | s1 =  [ &_0 <- x ] s2 | s2 = bb1 ]  | bb1 = return' {_0} ] )
    [ & _0 : t_Item'0 = any_l () | & _1 : borrowed () = _1 | & x : t_Item'0 = x ]
    
    [ return' (result:t_Item'0)-> {[@expl:closure result type invariant] [%#s06_map_precond2] inv'2 result}
      {[@expl:closure unnest] unnest'0 _1.current _1.final}
      (! return' {result}) ]
    
  
  predicate inv'1 (_1 : t_I'0)
  
  predicate inv'3 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'3 x] . inv'3 x = true
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : ()) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) =
    let (x, _3) = args in true
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate next_precondition'0 [#"06_map_precond.rs" 85 4 85 74] (iter : t_I'0) (func : ()) (produced : Seq.seq t_Item'0)
    
   =
    [%#s06_map_precond25] forall e : t_Item'0, i : t_I'0 [produces'0 iter (Seq.singleton e) i] . produces'0 iter (Seq.singleton e) i
     -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  predicate preservation'0 [#"06_map_precond.rs" 109 4 109 45] (iter : t_I'0) (func : ()) =
    [%#s06_map_precond11] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed (), b : t_Item'0, i : t_I'0 . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f.current (e1, Snapshot.new s) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate reinitialize'0 [#"06_map_precond.rs" 121 4 121 29] (_1 : ()) =
    [%#s06_map_precond10] forall iter : borrowed t_I'0, func : () . completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq t_Item'0) /\ preservation'0 iter.final func
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: (); t_Map__produced'0: Snapshot.snap_ty (Seq.seq t_Item'0) }
  
  use prelude.prelude.Snapshot
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 96 4 96 73] (iter : t_I'0) (func : ()) (produced : Seq.seq t_Item'0)
    
   =
    [%#s06_map_precond28] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed (), b : t_Item'0, i : t_I'0 [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b] . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : t_I'0, func : (), produced : Seq.seq t_Item'0 . [%#s06_map_precond27] produced
  = (Seq.empty  : Seq.seq t_Item'0)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  predicate invariant'0 [#"06_map_precond.rs" 163 4 163 30] (self : t_Map'0) =
    [%#s06_map_precond26] reinitialize'0 ()
    /\ preservation_inv'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
    /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
  
  predicate inv'0 (_1 : t_Map'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Map'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func ; t_Map__produced'0 = produced} -> inv'1 iter
    end)
  
  let rec map'0 (iter:t_I'0) (func:()) (return'  (ret:t_Map'0))= {[@expl:map 'iter' type invariant] [%#s06_map_precond3] inv'1 iter}
    {[@expl:map 'func' type invariant] [%#s06_map_precond4] inv'3 func}
    {[@expl:map requires #0] [%#s06_map_precond5] forall e : t_Item'0, i2 : t_I'0 . produces'0 iter (Seq.singleton e) i2
     -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq t_Item'0))}
    {[@expl:map requires #1] [%#s06_map_precond6] reinitialize'0 ()}
    {[@expl:map requires #2] [%#s06_map_precond7] preservation'0 iter func}
    any
    [ return' (result:t_Map'0)-> {[%#s06_map_precond8] inv'0 result}
      {[%#s06_map_precond9] result
      = { t_Map__iter'0 = iter;
          t_Map__func'0 = func;
          t_Map__produced'0 = Snapshot.new (Seq.empty  : Seq.seq t_Item'0) }}
      (! return' {result}) ]
    
  
  predicate resolve'4 (_1 : t_I'0)
  
  predicate resolve'6 (_1 : Snapshot.snap_ty (Seq.seq t_Item'0)) =
    true
  
  predicate resolve'2 [#"06_map_precond.rs" 9 9 9 16] (self : t_Map'0) =
    [%#s06_map_precond12] resolve'4 self.t_Map__iter'0
    /\ resolve'5 self.t_Map__func'0 /\ resolve'6 self.t_Map__produced'0
  
  predicate resolve'0 (_1 : t_Map'0) =
    resolve'2 _1
  
  meta "compute_max_steps" 1000000
  
  let rec identity'0 (iter:t_I'0) (return'  (ret:()))= {[@expl:identity 'iter' type invariant] [%#s06_map_precond0] inv'1 iter}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- () ] s1
      | s1 = map'0 {iter} {_4} (fun (_ret':t_Map'0) ->  [ &_2 <- _ret' ] s2)
      | s2 = {[@expl:type invariant] inv'0 _2} s3
      | s3 = -{resolve'0 _2}- s4
      | s4 = bb1 ]
      
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : () = any_l () | & iter : t_I'0 = iter | & _2 : t_Map'0 = any_l () | & _4 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_06_map_precond__increment [#"06_map_precond.rs" 193 0 193 50]
  let%span s06_map_precond0 = "06_map_precond.rs" 202 8 203 71
  let%span s06_map_precond1 = "06_map_precond.rs" 193 42 193 46
  let%span s06_map_precond2 = "06_map_precond.rs" 189 11 189 156
  let%span s06_map_precond3 = "06_map_precond.rs" 190 11 191 63
  let%span s06_map_precond4 = "06_map_precond.rs" 198 24 198 25
  let%span s06_map_precond5 = "06_map_precond.rs" 196 19 196 27
  let%span s06_map_precond6 = "06_map_precond.rs" 197 18 197 33
  let%span s06_map_precond7 = "06_map_precond.rs" 179 4 179 8
  let%span s06_map_precond8 = "06_map_precond.rs" 180 4 180 8
  let%span s06_map_precond9 = "06_map_precond.rs" 172 11 174 65
  let%span s06_map_precond10 = "06_map_precond.rs" 175 11 175 38
  let%span s06_map_precond11 = "06_map_precond.rs" 176 11 176 48
  let%span s06_map_precond12 = "06_map_precond.rs" 181 5 181 14
  let%span s06_map_precond13 = "06_map_precond.rs" 177 10 177 75
  let%span s06_map_precond14 = "06_map_precond.rs" 44 8 58 9
  let%span s06_map_precond15 = "06_map_precond.rs" 123 12 126 47
  let%span s06_map_precond16 = "06_map_precond.rs" 111 12 116 71
  let%span s06_map_precond17 = "06_map_precond.rs" 11 4 13 36
  let%span s06_map_precond18 = "06_map_precond.rs" 30 14 30 45
  let%span s06_map_precond19 = "06_map_precond.rs" 28 4 28 10
  let%span s06_map_precond20 = "06_map_precond.rs" 35 15 35 32
  let%span s06_map_precond21 = "06_map_precond.rs" 36 15 36 32
  let%span s06_map_precond22 = "06_map_precond.rs" 37 14 37 42
  let%span s06_map_precond23 = "06_map_precond.rs" 33 4 33 10
  let%span scommon24 = "common.rs" 14 14 14 45
  let%span scommon25 = "common.rs" 18 15 18 32
  let%span scommon26 = "common.rs" 19 15 19 32
  let%span scommon27 = "common.rs" 20 14 20 42
  let%span sresolve28 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops29 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops30 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops31 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops32 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops33 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops34 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops35 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span s06_map_precond36 = "06_map_precond.rs" 87 12 90 63
  let%span s06_map_precond37 = "06_map_precond.rs" 165 12 167 73
  let%span s06_map_precond38 = "06_map_precond.rs" 95 14 95 81
  let%span s06_map_precond39 = "06_map_precond.rs" 98 12 104 88
  
  use prelude.prelude.Borrow
  
  predicate resolve'3 (self : borrowed ()) =
    [%#sresolve28] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed ()) =
    resolve'3 _1
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate postcondition_once'0 (self : ()) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (result : uint32) =
    [%#s06_map_precond6] let (x, _3) = args in UInt32.to_int result = UInt32.to_int x + 1
  
  predicate resolve'5 (_1 : ()) =
    true
  
  predicate unnest'0 (self : ()) (_2 : ()) =
    true
  
  predicate postcondition_mut'0 (self : ()) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (result_state : ()) (result : uint32)
    
   =
    (let (x, _3) = args in UInt32.to_int result = UInt32.to_int x + 1) /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : ()) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (res : uint32) : ()
  
  axiom fn_mut_once'0_spec : forall self : (), args : (uint32, Snapshot.snap_ty (Seq.seq uint32)), res : uint32 . [%#sops35] postcondition_once'0 self args res
  = (exists res_state : () . postcondition_mut'0 self args res_state res /\ resolve'5 res_state)
  
  function unnest_trans'0 (self : ()) (b : ()) (c : ()) : ()
  
  axiom unnest_trans'0_spec : forall self : (), b : (), c : () . ([%#sops32] unnest'0 self b)
   -> ([%#sops33] unnest'0 b c)  -> ([%#sops34] unnest'0 self c)
  
  function unnest_refl'0 (self : ()) : ()
  
  axiom unnest_refl'0_spec : forall self : () . [%#sops31] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : ()) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (res_state : ()) (res : uint32) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : (), args : (uint32, Snapshot.snap_ty (Seq.seq uint32)), res_state : (), res : uint32 . ([%#sops29] postcondition_mut'0 self args res_state res)
   -> ([%#sops30] unnest'0 self res_state)
  
  let rec closure2'0 (_1:borrowed ()) (x:uint32) (_3:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:uint32))= {[@expl:closure requires] [%#s06_map_precond5] UInt32.to_int x
    <= 15}
    (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'1 _1}- s1
      | s1 = UInt32.add {x} {[%#s06_map_precond4] (1 : uint32)} (fun (_ret':uint32) ->  [ &res1 <- _ret' ] s2)
      | s2 =  [ &res <- res1 ] s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l ()
    | & _1 : borrowed () = _1
    | & x : uint32 = x
    | & res : uint32 = any_l ()
    | & res1 : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:closure ensures] [%#s06_map_precond6] UInt32.to_int result
      = UInt32.to_int x + 1}
      {[@expl:closure unnest] unnest'0 _1.current _1.final}
      (! return' {result}) ]
    
  
  type t_U'0
  
  predicate inv'1 (_1 : t_U'0)
  
  predicate inv'2 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_U'0) (visited : Seq.seq uint32) (o : t_U'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_U'0) (ab : Seq.seq uint32) (b : t_U'0) (bc : Seq.seq uint32) (c : t_U'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_U'0, ab : Seq.seq uint32, b : t_U'0, bc : Seq.seq uint32, c : t_U'0 . ([%#scommon25] produces'1 a ab b)
   -> ([%#scommon26] produces'1 b bc c)  -> ([%#scommon27] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_U'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_U'0 . [%#scommon24] produces'1 self (Seq.empty  : Seq.seq uint32) self
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : ()) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) =
    [%#s06_map_precond5] let (x, _3) = args in UInt32.to_int x <= 15
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_U'0)
  
  predicate next_precondition'0 [#"06_map_precond.rs" 85 4 85 74] (iter : t_U'0) (func : ()) (produced : Seq.seq uint32)
   =
    [%#s06_map_precond36] forall e : uint32, i : t_U'0 [produces'1 iter (Seq.singleton e) i] . produces'1 iter (Seq.singleton e) i
     -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  predicate preservation'0 [#"06_map_precond.rs" 109 4 109 45] (iter : t_U'0) (func : ()) =
    [%#s06_map_precond16] forall s : Seq.seq uint32, e1 : uint32, e2 : uint32, f : borrowed (), b : uint32, i : t_U'0 . unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f.current (e1, Snapshot.new s) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate reinitialize'0 [#"06_map_precond.rs" 121 4 121 29] (_1 : ()) =
    [%#s06_map_precond15] forall iter : borrowed t_U'0, func : () . completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq uint32) /\ preservation'0 iter.final func
  
  type t_Map'0  =
    { t_Map__iter'0: t_U'0; t_Map__func'0: (); t_Map__produced'0: Snapshot.snap_ty (Seq.seq uint32) }
  
  use prelude.prelude.Snapshot
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 96 4 96 73] (iter : t_U'0) (func : ()) (produced : Seq.seq uint32)
   =
    [%#s06_map_precond39] forall s : Seq.seq uint32, e1 : uint32, e2 : uint32, f : borrowed (), b : uint32, i : t_U'0 [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b] . unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : t_U'0, func : (), produced : Seq.seq uint32 . [%#s06_map_precond38] produced
  = (Seq.empty  : Seq.seq uint32)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  predicate invariant'0 [#"06_map_precond.rs" 163 4 163 30] (self : t_Map'0) =
    [%#s06_map_precond37] reinitialize'0 ()
    /\ preservation_inv'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
    /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
  
  predicate inv'0 (_1 : t_Map'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Map'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func ; t_Map__produced'0 = produced} -> inv'1 iter
    end)
  
  let rec map'0 (iter:t_U'0) (func:()) (return'  (ret:t_Map'0))= {[@expl:map 'iter' type invariant] [%#s06_map_precond7] inv'1 iter}
    {[@expl:map 'func' type invariant] [%#s06_map_precond8] inv'2 func}
    {[@expl:map requires #0] [%#s06_map_precond9] forall e : uint32, i2 : t_U'0 . produces'1 iter (Seq.singleton e) i2
     -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq uint32))}
    {[@expl:map requires #1] [%#s06_map_precond10] reinitialize'0 ()}
    {[@expl:map requires #2] [%#s06_map_precond11] preservation'0 iter func}
    any
    [ return' (result:t_Map'0)-> {[%#s06_map_precond12] inv'0 result}
      {[%#s06_map_precond13] result
      = { t_Map__iter'0 = iter; t_Map__func'0 = func; t_Map__produced'0 = Snapshot.new (Seq.empty  : Seq.seq uint32) }}
      (! return' {result}) ]
    
  
  predicate resolve'4 (_1 : t_U'0)
  
  predicate resolve'6 (_1 : Snapshot.snap_ty (Seq.seq uint32)) =
    true
  
  predicate resolve'2 [#"06_map_precond.rs" 9 9 9 16] (self : t_Map'0) =
    [%#s06_map_precond17] resolve'4 self.t_Map__iter'0
    /\ resolve'5 self.t_Map__func'0 /\ resolve'6 self.t_Map__produced'0
  
  predicate resolve'0 (_1 : t_Map'0) =
    resolve'2 _1
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 43 4 43 67] (self : t_Map'0) (visited : Seq.seq uint32) (succ : t_Map'0)
    
   =
    [%#s06_map_precond14] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed ()) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq uint32 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ Snapshot.inner succ.t_Map__produced'0 = Seq.(++) (Snapshot.inner self.t_Map__produced'0) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i))) (Seq.get fs i).final (Seq.get visited i))))
  
  function produces_trans'0 [#"06_map_precond.rs" 38 4 38 90] (a : t_Map'0) (ab : Seq.seq uint32) (b : t_Map'0) (bc : Seq.seq uint32) (c : t_Map'0) : ()
    
   =
    [%#s06_map_precond23] ()
  
  axiom produces_trans'0_spec : forall a : t_Map'0, ab : Seq.seq uint32, b : t_Map'0, bc : Seq.seq uint32, c : t_Map'0 . ([%#s06_map_precond20] produces'0 a ab b)
   -> ([%#s06_map_precond21] produces'0 b bc c)  -> ([%#s06_map_precond22] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"06_map_precond.rs" 31 4 31 26] (self : t_Map'0) : () =
    [%#s06_map_precond19] ()
  
  axiom produces_refl'0_spec : forall self : t_Map'0 . [%#s06_map_precond18] produces'0 self (Seq.empty  : Seq.seq uint32) self
  
  meta "compute_max_steps" 1000000
  
  let rec increment'0 (iter:t_U'0) (return'  (ret:()))= {[@expl:increment 'iter' type invariant] [%#s06_map_precond1] inv'1 iter}
    {[@expl:increment requires #0] [%#s06_map_precond2] forall done' : borrowed t_U'0 . completed'0 done'
     -> (forall next : t_U'0, steps : Seq.seq uint32 . produces'1 done'.final steps next
     -> steps = (Seq.empty  : Seq.seq uint32) /\ done'.final = next)}
    {[@expl:increment requires #1] [%#s06_map_precond3] forall prod : Seq.seq uint32, fin : t_U'0 . produces'1 iter prod fin
     -> (forall x : int . 0 <= x /\ x < Seq.length prod  -> Seq.get prod x <= (10 : uint32))}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 =  [ &_6 <- () ] s1 | s1 = map'0 {iter} {_6} (fun (_ret':t_Map'0) ->  [ &i <- _ret' ] s2) | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'0 i} s1
      | s1 = -{resolve'0 i}- s2
      | s2 = {[@expl:assertion] [%#s06_map_precond0] forall prod : Seq.seq uint32, fin : t_Map'0 . produces'0 i prod fin
         -> (forall x : int . 0 <= x /\ x < Seq.length prod  -> Seq.get prod x <= (11 : uint32))}
        s3
      | s3 = bb3 ]
      
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : () = any_l () | & iter : t_U'0 = iter | & i : t_Map'0 = any_l () | & _6 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_06_map_precond__counter [#"06_map_precond.rs" 209 0 209 48]
  let%span s06_map_precond0 = "06_map_precond.rs" 210 18 210 19
  let%span s06_map_precond1 = "06_map_precond.rs" 209 40 209 44
  let%span s06_map_precond2 = "06_map_precond.rs" 207 11 207 156
  let%span s06_map_precond3 = "06_map_precond.rs" 208 11 208 90
  let%span s06_map_precond4 = "06_map_precond.rs" 216 19 216 20
  let%span s06_map_precond5 = "06_map_precond.rs" 213 19 213 61
  let%span s06_map_precond6 = "06_map_precond.rs" 214 18 214 39
  let%span s06_map_precond7 = "06_map_precond.rs" 179 4 179 8
  let%span s06_map_precond8 = "06_map_precond.rs" 180 4 180 8
  let%span s06_map_precond9 = "06_map_precond.rs" 172 11 174 65
  let%span s06_map_precond10 = "06_map_precond.rs" 175 11 175 38
  let%span s06_map_precond11 = "06_map_precond.rs" 176 11 176 48
  let%span s06_map_precond12 = "06_map_precond.rs" 181 5 181 14
  let%span s06_map_precond13 = "06_map_precond.rs" 177 10 177 75
  let%span s06_map_precond14 = "06_map_precond.rs" 123 12 126 47
  let%span s06_map_precond15 = "06_map_precond.rs" 111 12 116 71
  let%span s06_map_precond16 = "06_map_precond.rs" 11 4 13 36
  let%span scommon17 = "common.rs" 14 14 14 45
  let%span scommon18 = "common.rs" 18 15 18 32
  let%span scommon19 = "common.rs" 19 15 19 32
  let%span scommon20 = "common.rs" 20 14 20 42
  let%span sresolve21 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops24 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops25 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops26 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops27 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops28 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span s06_map_precond29 = "06_map_precond.rs" 87 12 90 63
  let%span s06_map_precond30 = "06_map_precond.rs" 165 12 167 73
  let%span s06_map_precond31 = "06_map_precond.rs" 95 14 95 81
  let%span s06_map_precond32 = "06_map_precond.rs" 98 12 104 88
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Borrow
  
  type closure2'1  =
    { field_0'0: borrowed usize }
  
  predicate resolve'3 (self : borrowed closure2'1) =
    [%#sresolve21] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed closure2'1) =
    resolve'3 _1
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate postcondition_once'0 (self : closure2'1) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [%#s06_map_precond6] let (x, _prod) = args in UIntSize.to_int (self.field_0'0).final
    = UIntSize.to_int (self.field_0'0).current + 1
  
  predicate resolve'8 (self : borrowed usize) =
    [%#sresolve21] self.final = self.current
  
  predicate resolve'7 (_1 : borrowed usize) =
    resolve'8 _1
  
  predicate resolve'5 (_1 : closure2'1) =
    resolve'7 _1.field_0'0
  
  predicate unnest'0 (self : closure2'1) (_2 : closure2'1) =
    (_2.field_0'0).final = (self.field_0'0).final
  
  predicate postcondition_mut'0 (self : closure2'1) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (result_state : closure2'1) (result : uint32)
    
   =
    (let (x, _prod) = args in UIntSize.to_int (result_state.field_0'0).current
    = UIntSize.to_int (self.field_0'0).current + 1)
    /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : closure2'1) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (res : uint32) : ()
  
  axiom fn_mut_once'0_spec : forall self : closure2'1, args : (uint32, Snapshot.snap_ty (Seq.seq uint32)), res : uint32 . [%#sops28] postcondition_once'0 self args res
  = (exists res_state : closure2'1 . postcondition_mut'0 self args res_state res /\ resolve'5 res_state)
  
  function unnest_trans'0 (self : closure2'1) (b : closure2'1) (c : closure2'1) : ()
  
  axiom unnest_trans'0_spec : forall self : closure2'1, b : closure2'1, c : closure2'1 . ([%#sops25] unnest'0 self b)
   -> ([%#sops26] unnest'0 b c)  -> ([%#sops27] unnest'0 self c)
  
  function unnest_refl'0 (self : closure2'1) : ()
  
  axiom unnest_refl'0_spec : forall self : closure2'1 . [%#sops24] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : closure2'1) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (res_state : closure2'1) (res : uint32) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : closure2'1, args : (uint32, Snapshot.snap_ty (Seq.seq uint32)), res_state : closure2'1, res : uint32 . ([%#sops22] postcondition_mut'0 self args res_state res)
   -> ([%#sops23] unnest'0 self res_state)
  
  let rec closure2'0 (_1:borrowed closure2'1) (x:uint32) (_prod:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:uint32))= {[@expl:closure requires] [%#s06_map_precond5] UIntSize.to_int ((_1.current).field_0'0).current
    = Seq.length (Snapshot.inner _prod)
    /\ ((_1.current).field_0'0).current < (v_MAX'0 : usize)}
    (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.add {((_1.current).field_0'0).current} {[%#s06_map_precond4] (1 : usize)}
          (fun (_ret':usize) ->
             [ &_1 <- { _1 with current = { field_0'0 = { (_1.current).field_0'0 with current = _ret' } } } ] 
            s1)
      | s1 = -{resolve'1 _1}- s2
      | s2 =  [ &res1 <- x ] s3
      | s3 =  [ &res <- res1 ] s4
      | s4 =  [ &_0 <- res ] s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l ()
    | & _1 : borrowed closure2'1 = _1
    | & x : uint32 = x
    | & res : uint32 = any_l ()
    | & res1 : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:closure ensures] [%#s06_map_precond6] UIntSize.to_int ((_1.final).field_0'0).current
      = UIntSize.to_int ((_1.current).field_0'0).current + 1}
      {[@expl:closure unnest] unnest'0 _1.current _1.final}
      (! return' {result}) ]
    
  
  type t_I'0
  
  predicate inv'1 (_1 : t_I'0)
  
  predicate inv'2 (_1 : closure2'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : closure2'1 [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq uint32) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq uint32) (b : t_I'0) (bc : Seq.seq uint32) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq uint32, b : t_I'0, bc : Seq.seq uint32, c : t_I'0 . ([%#scommon18] produces'0 a ab b)
   -> ([%#scommon19] produces'0 b bc c)  -> ([%#scommon20] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon17] produces'0 self (Seq.empty  : Seq.seq uint32) self
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : closure2'1) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) =
    [%#s06_map_precond5] let (x, _prod) = args in UIntSize.to_int (self.field_0'0).current
    = Seq.length (Snapshot.inner _prod)
    /\ (self.field_0'0).current < (v_MAX'0 : usize)
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate next_precondition'0 [#"06_map_precond.rs" 85 4 85 74] (iter : t_I'0) (func : closure2'1) (produced : Seq.seq uint32)
    
   =
    [%#s06_map_precond29] forall e : uint32, i : t_I'0 [produces'0 iter (Seq.singleton e) i] . produces'0 iter (Seq.singleton e) i
     -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  predicate preservation'0 [#"06_map_precond.rs" 109 4 109 45] (iter : t_I'0) (func : closure2'1) =
    [%#s06_map_precond15] forall s : Seq.seq uint32, e1 : uint32, e2 : uint32, f : borrowed closure2'1, b : uint32, i : t_I'0 . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f.current (e1, Snapshot.new s) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate reinitialize'0 [#"06_map_precond.rs" 121 4 121 29] (_1 : ()) =
    [%#s06_map_precond14] forall iter : borrowed t_I'0, func : closure2'1 . completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq uint32) /\ preservation'0 iter.final func
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: closure2'1; t_Map__produced'0: Snapshot.snap_ty (Seq.seq uint32) }
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 96 4 96 73] (iter : t_I'0) (func : closure2'1) (produced : Seq.seq uint32)
    
   =
    [%#s06_map_precond32] forall s : Seq.seq uint32, e1 : uint32, e2 : uint32, f : borrowed closure2'1, b : uint32, i : t_I'0 [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b] . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : t_I'0, func : closure2'1, produced : Seq.seq uint32 . [%#s06_map_precond31] produced
  = (Seq.empty  : Seq.seq uint32)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  predicate invariant'0 [#"06_map_precond.rs" 163 4 163 30] (self : t_Map'0) =
    [%#s06_map_precond30] reinitialize'0 ()
    /\ preservation_inv'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
    /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
  
  predicate inv'0 (_1 : t_Map'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Map'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func ; t_Map__produced'0 = produced} -> inv'1 iter
    end)
  
  let rec map'0 (iter:t_I'0) (func:closure2'1) (return'  (ret:t_Map'0))= {[@expl:map 'iter' type invariant] [%#s06_map_precond7] inv'1 iter}
    {[@expl:map 'func' type invariant] [%#s06_map_precond8] inv'2 func}
    {[@expl:map requires #0] [%#s06_map_precond9] forall e : uint32, i2 : t_I'0 . produces'0 iter (Seq.singleton e) i2
     -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq uint32))}
    {[@expl:map requires #1] [%#s06_map_precond10] reinitialize'0 ()}
    {[@expl:map requires #2] [%#s06_map_precond11] preservation'0 iter func}
    any
    [ return' (result:t_Map'0)-> {[%#s06_map_precond12] inv'0 result}
      {[%#s06_map_precond13] result
      = { t_Map__iter'0 = iter; t_Map__func'0 = func; t_Map__produced'0 = Snapshot.new (Seq.empty  : Seq.seq uint32) }}
      (! return' {result}) ]
    
  
  predicate resolve'4 (_1 : t_I'0)
  
  predicate resolve'6 (_1 : Snapshot.snap_ty (Seq.seq uint32)) =
    true
  
  predicate resolve'2 [#"06_map_precond.rs" 9 9 9 16] (self : t_Map'0) =
    [%#s06_map_precond16] resolve'4 self.t_Map__iter'0
    /\ resolve'5 self.t_Map__func'0 /\ resolve'6 self.t_Map__produced'0
  
  predicate resolve'0 (_1 : t_Map'0) =
    resolve'2 _1
  
  meta "compute_max_steps" 1000000
  
  let rec counter'0 (iter:t_I'0) (return'  (ret:()))= {[@expl:counter 'iter' type invariant] [%#s06_map_precond1] inv'1 iter}
    {[@expl:counter requires #0] [%#s06_map_precond2] forall done' : borrowed t_I'0 . completed'0 done'
     -> (forall next : t_I'0, steps : Seq.seq uint32 . produces'0 done'.final steps next
     -> steps = (Seq.empty  : Seq.seq uint32) /\ done'.final = next)}
    {[@expl:counter requires #1] [%#s06_map_precond3] forall prod : Seq.seq uint32, fin : t_I'0 . produces'0 iter prod fin
     -> Seq.length prod <= UIntSize.to_int (v_MAX'0 : usize)}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 =  [ &cnt <- [%#s06_map_precond0] (0 : usize) ] s1
      | s1 = Borrow.borrow_mut <usize> {cnt}
          (fun (_ret':borrowed usize) ->  [ &_8 <- _ret' ]  [ &cnt <- _ret'.final ] s2)
      | s2 =  [ &_7 <- { field_0'0 = _8 } ] s3
      | s3 = map'0 {iter} {_7} (fun (_ret':t_Map'0) ->  [ &_5 <- _ret' ] s4)
      | s4 = {[@expl:type invariant] inv'0 _5} s5
      | s5 = -{resolve'0 _5}- s6
      | s6 = bb2 ]
      
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & iter : t_I'0 = iter
    | & cnt : usize = any_l ()
    | & _5 : t_Map'0 = any_l ()
    | & _7 : closure2'1 = any_l ()
    | & _8 : borrowed usize = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_06_map_precond__qyi12121551022315030028__resolve_coherence__refines [#"06_map_precond.rs" 9 9 9 16] (* <Map<I, F> as creusot_contracts::Resolve> *)
  let%span s06_map_precond0 = "06_map_precond.rs" 9 9 9 16
  let%span s06_map_precond1 = "06_map_precond.rs" 11 4 13 36
  let%span scommon2 = "common.rs" 14 14 14 45
  let%span scommon3 = "common.rs" 18 15 18 32
  let%span scommon4 = "common.rs" 19 15 19 32
  let%span scommon5 = "common.rs" 20 14 20 42
  let%span sinvariant6 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_F'0
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon3] produces'0 a ab b)
   -> ([%#scommon4] produces'0 b bc c)  -> ([%#scommon5] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon2] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Snapshot
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0; t_Map__produced'0: Snapshot.snap_ty (Seq.seq t_Item'0) }
  
  predicate resolve'1 (_1 : Snapshot.snap_ty (Seq.seq t_Item'0)) =
    true
  
  predicate resolve'2 (_1 : t_F'0)
  
  predicate resolve'3 (_1 : t_I'0)
  
  predicate structural_resolve'0 (_1 : t_Map'0) =
    match _1 with
      | {t_Map__iter'0 = x0 ; t_Map__func'0 = x1 ; t_Map__produced'0 = x2} -> resolve'1 x2
      /\ resolve'2 x1 /\ resolve'3 x0
      end
  
  predicate inv'2 (_1 : t_I'0)
  
  predicate inv'3 (_1 : t_F'0)
  
  predicate inv'1 (_1 : t_Map'0)
  
  axiom inv_axiom'1 : forall x : t_Map'0 [inv'1 x] . inv'1 x
   -> match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func ; t_Map__produced'0 = produced} -> inv'2 iter /\ inv'3 func
    end
  
  predicate invariant'0 (self : t_Map'0) =
    [%#sinvariant6] inv'1 self
  
  predicate inv'0 (_1 : t_Map'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Map'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'0 [#"06_map_precond.rs" 9 9 9 16] (self : t_Map'0) =
    [%#s06_map_precond1] resolve'3 self.t_Map__iter'0
    /\ resolve'2 self.t_Map__func'0 /\ resolve'1 self.t_Map__produced'0
  
  goal refines : [%#s06_map_precond0] forall self : t_Map'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
module M_06_map_precond__qyi16809708214464407778__next__refines [#"06_map_precond.rs" 65 4 65 44] (* <Map<I, F> as common::Iterator> *)
  let%span s06_map_precond0 = "06_map_precond.rs" 65 4 65 44
  let%span s06_map_precond1 = "06_map_precond.rs" 22 8 25 9
  let%span s06_map_precond2 = "06_map_precond.rs" 146 14 146 68
  let%span s06_map_precond3 = "06_map_precond.rs" 149 12 155 74
  let%span s06_map_precond4 = "06_map_precond.rs" 44 8 58 9
  let%span scommon5 = "common.rs" 14 14 14 45
  let%span scommon6 = "common.rs" 18 15 18 32
  let%span scommon7 = "common.rs" 19 15 19 32
  let%span scommon8 = "common.rs" 20 14 20 42
  let%span sinvariant9 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span s06_map_precond17 = "06_map_precond.rs" 165 12 167 73
  let%span s06_map_precond18 = "06_map_precond.rs" 123 12 126 47
  let%span s06_map_precond19 = "06_map_precond.rs" 95 14 95 81
  let%span s06_map_precond20 = "06_map_precond.rs" 98 12 104 88
  let%span s06_map_precond21 = "06_map_precond.rs" 87 12 90 63
  let%span s06_map_precond22 = "06_map_precond.rs" 111 12 116 71
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_F'0
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon6] produces'1 a ab b)
   -> ([%#scommon7] produces'1 b bc c)  -> ([%#scommon8] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon5] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Snapshot
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0; t_Map__produced'0: Snapshot.snap_ty (Seq.seq t_Item'0) }
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  predicate next_precondition'0 [#"06_map_precond.rs" 85 4 85 74] (iter : t_I'0) (func : t_F'0) (produced : Seq.seq t_Item'0)
    
   =
    [%#s06_map_precond21] forall e : t_Item'0, i : t_I'0 [produces'1 iter (Seq.singleton e) i] . produces'1 iter (Seq.singleton e) i
     -> precondition'0 func (e, Snapshot.new produced)
  
  type t_B'0
  
  predicate postcondition_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result : t_B'0)
    
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result_state : t_F'0) (result : t_B'0)
    
  
  function fn_mut_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : t_B'0 . [%#sops16] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops13] unnest'0 self b)
   -> ([%#sops14] unnest'0 b c)  -> ([%#sops15] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops12] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res_state : t_F'0) (res : t_B'0) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res_state : t_F'0, res : t_B'0 . ([%#sops10] postcondition_mut'0 self args res_state res)
   -> ([%#sops11] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"06_map_precond.rs" 109 4 109 45] (iter : t_I'0) (func : t_F'0) =
    [%#s06_map_precond22] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 . unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f.current (e1, Snapshot.new s) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate reinitialize'0 [#"06_map_precond.rs" 121 4 121 29] (_1 : ()) =
    [%#s06_map_precond18] forall iter : borrowed t_I'0, func : t_F'0 . completed'1 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq t_Item'0) /\ preservation'0 iter.final func
  
  use prelude.prelude.Snapshot
  
  predicate preservation_inv'0 [#"06_map_precond.rs" 96 4 96 73] (iter : t_I'0) (func : t_F'0) (produced : Seq.seq t_Item'0)
    
   =
    [%#s06_map_precond20] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b] . unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f.current (e1, Snapshot.new (Seq.(++) produced s)) f.final b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : t_I'0, func : t_F'0, produced : Seq.seq t_Item'0 . [%#s06_map_precond19] produced
  = (Seq.empty  : Seq.seq t_Item'0)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  predicate invariant'1 [#"06_map_precond.rs" 163 4 163 30] (self : t_Map'0) =
    [%#s06_map_precond17] reinitialize'0 ()
    /\ preservation_inv'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
    /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0 (Snapshot.inner self.t_Map__produced'0)
  
  predicate inv'4 (_1 : t_I'0)
  
  predicate inv'5 (_1 : t_F'0)
  
  predicate inv'3 (_1 : t_Map'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Map'0 [inv'3 x] . inv'3 x
  = (invariant'1 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func ; t_Map__produced'0 = produced} -> inv'4 iter /\ inv'5 func
    end)
  
  predicate invariant'0 (self : borrowed (t_Map'0)) =
    [%#sinvariant9] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'0 (_1 : borrowed (t_Map'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Map'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_B'0
  
  predicate completed'0 [#"06_map_precond.rs" 21 4 21 35] (self : borrowed (t_Map'0)) =
    [%#s06_map_precond1] Snapshot.inner (self.final).t_Map__produced'0 = (Seq.empty  : Seq.seq t_Item'0)
    /\ completed'1 (Borrow.borrow_logic (self.current).t_Map__iter'0 (self.final).t_Map__iter'0 (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ (self.current).t_Map__func'0 = (self.final).t_Map__func'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 43 4 43 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s06_map_precond4] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ Snapshot.inner succ.t_Map__produced'0 = Seq.(++) (Snapshot.inner self.t_Map__produced'0) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i))) (Seq.get fs i).final (Seq.get visited i))))
  
  predicate produces_one'0 [#"06_map_precond.rs" 147 4 147 57] (self : t_Map'0) (visited : t_B'0) (succ : t_Map'0) =
    [%#s06_map_precond3] exists f : borrowed t_F'0, e : t_Item'0 [postcondition_mut'0 f.current (e, self.t_Map__produced'0) f.final visited] . f.current
    = self.t_Map__func'0
    /\ f.final = succ.t_Map__func'0
    /\ produces'1 self.t_Map__iter'0 (Seq.singleton e) succ.t_Map__iter'0
    /\ Snapshot.inner succ.t_Map__produced'0 = Seq.snoc (Snapshot.inner self.t_Map__produced'0) e
    /\ precondition'0 f.current (e, self.t_Map__produced'0)
    /\ postcondition_mut'0 f.current (e, self.t_Map__produced'0) f.final visited
  
  axiom produces_one'0_spec : forall self : t_Map'0, visited : t_B'0, succ : t_Map'0 . [%#s06_map_precond2] produces_one'0 self visited succ
  = produces'0 self (Seq.singleton visited) succ
  
  predicate inv'2 (_1 : t_B'0)
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'2 a_0
    end
  
  goal refines : [%#s06_map_precond0] forall self : borrowed (t_Map'0) . inv'0 self
   -> inv'0 self
  /\ (forall result : t_Option'0 . match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces_one'0 self.current v self.final
    end
  /\ inv'1 result
   -> match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result)
end
module M_06_map_precond__qyi16809708214464407778__produces_refl__refines [#"06_map_precond.rs" 31 4 31 26] (* <Map<I, F> as common::Iterator> *)
  let%span s06_map_precond0 = "06_map_precond.rs" 31 4 31 26
  let%span s06_map_precond1 = "06_map_precond.rs" 44 8 58 9
  let%span scommon2 = "common.rs" 14 14 14 45
  let%span scommon3 = "common.rs" 18 15 18 32
  let%span scommon4 = "common.rs" 19 15 19 32
  let%span scommon5 = "common.rs" 20 14 20 42
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  
  type t_I'0
  
  type t_F'0
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon3] produces'1 a ab b)
   -> ([%#scommon4] produces'1 b bc c)  -> ([%#scommon5] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . [%#scommon2] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Snapshot
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0; t_Map__produced'0: Snapshot.snap_ty (Seq.seq t_Item'0) }
  
  use seq.Seq
  
  type t_B'0
  
  use seq.Seq
  
  predicate postcondition_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result : t_B'0)
    
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result_state : t_F'0) (result : t_B'0)
    
  
  function fn_mut_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : t_B'0 . [%#sops12] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops9] unnest'0 self b)
   -> ([%#sops10] unnest'0 b c)  -> ([%#sops11] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops8] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res_state : t_F'0) (res : t_B'0) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res_state : t_F'0, res : t_B'0 . ([%#sops6] postcondition_mut'0 self args res_state res)
   -> ([%#sops7] unnest'0 self res_state)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 43 4 43 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s06_map_precond1] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ Snapshot.inner succ.t_Map__produced'0 = Seq.(++) (Snapshot.inner self.t_Map__produced'0) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i))) (Seq.get fs i).final (Seq.get visited i))))
  
  goal refines : [%#s06_map_precond0] forall self : t_Map'0 . forall result : () . produces'0 self (Seq.empty  : Seq.seq t_B'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_B'0) self
end
module M_06_map_precond__qyi16809708214464407778__produces_trans__refines [#"06_map_precond.rs" 38 4 38 90] (* <Map<I, F> as common::Iterator> *)
  let%span s06_map_precond0 = "06_map_precond.rs" 38 4 38 90
  let%span s06_map_precond1 = "06_map_precond.rs" 44 8 58 9
  let%span scommon2 = "common.rs" 14 14 14 45
  let%span scommon3 = "common.rs" 18 15 18 32
  let%span scommon4 = "common.rs" 19 15 19 32
  let%span scommon5 = "common.rs" 20 14 20 42
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  
  type t_I'0
  
  type t_F'0
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon3] produces'1 a ab b)
   -> ([%#scommon4] produces'1 b bc c)  -> ([%#scommon5] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon2] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Snapshot
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0; t_Map__produced'0: Snapshot.snap_ty (Seq.seq t_Item'0) }
  
  type t_B'0
  
  use seq.Seq
  
  predicate postcondition_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result : t_B'0)
    
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (result_state : t_F'0) (result : t_B'0)
    
  
  function fn_mut_once'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res : t_B'0 . [%#sops12] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops9] unnest'0 self b)
   -> ([%#sops10] unnest'0 b c)  -> ([%#sops11] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops8] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0))) (res_state : t_F'0) (res : t_B'0) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)), res_state : t_F'0, res : t_B'0 . ([%#sops6] postcondition_mut'0 self args res_state res)
   -> ([%#sops7] unnest'0 self res_state)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate precondition'0 (self : t_F'0) (args : (t_Item'0, Snapshot.snap_ty (Seq.seq t_Item'0)))
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 43 4 43 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s06_map_precond1] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ Snapshot.inner succ.t_Map__produced'0 = Seq.(++) (Snapshot.inner self.t_Map__produced'0) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner self.t_Map__produced'0) (Seq.([..]) s 0 i))) (Seq.get fs i).final (Seq.get visited i))))
  
  use seq.Seq
  
  goal refines : [%#s06_map_precond0] forall a : t_Map'0 . forall ab : Seq.seq t_B'0 . forall b : t_Map'0 . forall bc : Seq.seq t_B'0 . forall c : t_Map'0 . produces'0 b bc c
  /\ produces'0 a ab b
   -> produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
