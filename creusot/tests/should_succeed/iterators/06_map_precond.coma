
module C06MapPrecond_Map_Type
  type item'0
  use seq.Seq
  use prelude.Snapshot
  type t_map 'i 'b 'f 'proj0 =
    | C_Map 'i 'f (Snapshot.snap_ty (Seq.seq 'proj0))
    
  function any_l (_ : 'b) : 'a
  let rec t_map < 'i > < 'b > < 'f > < 'proj0 > (input:t_map 'i 'b 'f 'proj0) (ret  (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'proj0)))= any
    [ good (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'proj0))-> {C_Map iter func produced = input}
      (! ret {iter} {func} {produced})
    | bad (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'proj0))-> {C_Map iter func produced <> input}
      {false}
      any ]
    
  function map_produced (self : t_map 'i 'b 'f 'proj0) : Snapshot.snap_ty (Seq.seq 'proj0) =
    match self with
      | C_Map _ _ a -> a
      end
  function map_iter (self : t_map 'i 'b 'f 'proj0) : 'i =
    match self with
      | C_Map a _ _ -> a
      end
  function map_func (self : t_map 'i 'b 'f 'proj0) : 'f =
    match self with
      | C_Map _ a _ -> a
      end
end
module C06MapPrecond_Impl1_PreservationInv_Impl
  type i
  type b
  type f
  type item'0
  use seq.Seq
  use prelude.Snapshot
  predicate invariant'6 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec invariant'6 (self:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec inv'6 (_x:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'6 x = true
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed f)
  let rec inv'4 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'3 (_x : b)
  let rec inv'3 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  predicate inv'1 (_x : f)
  let rec inv'1 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'3 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'6 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'1 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'4 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'1 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'1 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'1 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'1 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'1 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'1 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'3 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'6 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'4 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'5 (self : item'0)
  let rec invariant'5 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : item'0)
  let rec inv'5 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : item'0 . inv'5 x = true
  predicate invariant'4 (self : borrowed f)
  let rec invariant'4 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed f . inv'4 x = true
  predicate invariant'3 (self : b)
  let rec invariant'3 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : b . inv'3 x = true
  use seq.Seq
  predicate inv'2 (_x : Seq.seq item'0)
  let rec inv'2 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  predicate inv'0 (_x : i)
  let rec inv'0 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'0 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'0 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'2 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'0 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'2 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'0 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'0 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'0 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'0 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'0 a)
   -> ([#"../common.rs" 21 31 21 33] inv'2 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'0 b)
   -> ([#"../common.rs" 21 61 21 63] inv'2 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'0 c)  -> ([#"../common.rs" 20 14 20 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'0 self)
   -> ([#"../common.rs" 14 14 14 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'2 (self : Seq.seq item'0)
  let rec invariant'2 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : Seq.seq item'0 . inv'2 x = true
  predicate invariant'1 (self : f)
  let rec invariant'1 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : f . inv'1 x = true
  predicate invariant'0 (self : i)
  let rec invariant'0 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : i . inv'0 x = true
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec precondition'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use prelude.Snapshot
  use seq.Seq
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'0 i
     -> inv'3 b
     -> inv'4 f
     -> inv'5 e2
     -> inv'5 e1
     -> inv'2 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  constant iter  : i
  constant func  : f
  constant produced  : Seq.seq item'0
  predicate preservation_inv [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0)
  goal vc_preservation_inv : ([#"../06_map_precond.rs" 93 42 93 50] inv'2 produced)
   -> ([#"../06_map_precond.rs" 93 33 93 37] inv'1 func)
   -> ([#"../06_map_precond.rs" 93 24 93 28] inv'0 iter)
   -> ([#"../06_map_precond.rs" 92 4 92 83] produced = (Seq.empty  : Seq.seq item'0)
   -> ([#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'0 i
   -> inv'3 b
   -> inv'4 f
   -> inv'5 e2
   -> inv'5 e1
   -> inv'2 s
   -> unnest'0 func ( * f)
   -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
   -> precondition'0 ( * f) (e1, Snapshot.new (Seq.(++) produced s))
   -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
   -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1)))
  = preservation'0 iter func)
end
module C06MapPrecond_Impl0_ProducesRefl_Impl
  type i
  type b
  type f
  type item'0
  predicate invariant'10 (self : item'0)
  let rec invariant'10 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : item'0)
  let rec inv'10 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : item'0 . inv'10 x = true
  use prelude.Borrow
  predicate invariant'9 (self : borrowed i)
  let rec invariant'9 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : borrowed i)
  let rec inv'9 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : borrowed i . inv'9 x = true
  predicate invariant'8 (self : b)
  let rec invariant'8 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : b)
  let rec inv'8 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ] 
  axiom inv'8 : forall x : b . inv'8 x = true
  use seq.Seq
  use prelude.Snapshot
  predicate invariant'7 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec invariant'7 (self:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec inv'7 (_x:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'7 x = true
  predicate invariant'6 (self : borrowed f)
  let rec invariant'6 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : borrowed f)
  let rec inv'6 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : borrowed f . inv'6 x = true
  predicate invariant'5 (self : Snapshot.snap_ty (Seq.seq item'0))
  let rec invariant'5 (self:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Snapshot.snap_ty (Seq.seq item'0))
  let rec inv'5 (_x:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'5 x = true
  predicate invariant'4 (self : f)
  let rec invariant'4 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : f)
  let rec inv'4 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : f . inv'4 x = true
  predicate invariant'3 (self : i)
  let rec invariant'3 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : i)
  let rec inv'3 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : i . inv'3 x = true
  predicate invariant'2 (self : Seq.seq (borrowed f))
  let rec invariant'2 (self:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Seq.seq (borrowed f))
  let rec inv'2 (_x:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Seq.seq (borrowed f) . inv'2 x = true
  predicate invariant'1 (self : Seq.seq item'0)
  let rec invariant'1 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq item'0)
  let rec inv'1 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'8 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'7 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'4 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'7 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'8 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'6 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'4 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'4 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'4 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'4 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'4 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'4 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'8 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'7 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'6 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'7 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'8 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'3 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'1 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'3 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'1 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'3 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'3 a)
   -> ([#"../common.rs" 21 31 21 33] inv'1 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'3 b)
   -> ([#"../common.rs" 21 61 21 63] inv'1 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'3 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'3 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'3 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec precondition'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use prelude.Snapshot
  use seq.Seq
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item'0 . inv'3 i
     -> inv'10 e  -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  let rec next_precondition'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func produced} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'3 i
     -> inv'8 b
     -> inv'6 f
     -> inv'10 e2
     -> inv'10 e1
     -> inv'1 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'3 i
     -> inv'8 b
     -> inv'6 f
     -> inv'10 e2
     -> inv'10 e1
     -> inv'1 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  let rec preservation_inv'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= {[@expl:precondition] [#"../06_map_precond.rs" 93 42 93 50] inv'1 produced}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 33 93 37] inv'4 func}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 24 93 28] inv'3 iter}
    any [ return' (result:bool)-> {result = preservation_inv'0 iter func produced} (! return' {result}) ] 
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([#"../06_map_precond.rs" 93 24 93 28] inv'3 iter)
   -> ([#"../06_map_precond.rs" 93 33 93 37] inv'4 func)
   -> ([#"../06_map_precond.rs" 93 42 93 50] inv'1 produced)
   -> ([#"../06_map_precond.rs" 92 4 92 83] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  use prelude.Snapshot
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv'4 func
     -> inv'9 iter
     -> completed'0 iter
     -> next_precondition'0 ( ^ iter) func (Seq.empty  : Seq.seq item'0) /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item'0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  let rec invariant'0 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C06MapPrecond_Map_Type.t_map i b f item'0)
  let rec inv'0 (_x:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C06MapPrecond_Map_Type.t_map i b f item'0 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  use seq.Seq
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use prelude.Snapshot
  use seq.Seq
  use seq.Seq
  predicate produces'0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item'0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item'0)
    
   =
    [#"../06_map_precond.rs" 44 8 56 9] unnest'0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'1 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) s
    /\ (exists fs : Seq.seq (borrowed f) . inv'2 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i)
    /\ precondition'0 ( * Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  let rec produces'0 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (visited:Seq.seq b) (succ:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited succ} (! return' {result}) ]
    
  use seq.Seq
  constant self  : C06MapPrecond_Map_Type.t_map i b f item'0
  function produces_refl [#"../06_map_precond.rs" 31 4 31 26] (self : C06MapPrecond_Map_Type.t_map i b f item'0) : ()
  goal vc_produces_refl : ([#"../06_map_precond.rs" 31 21 31 25] inv'0 self)
   -> ([#"../06_map_precond.rs" 30 14 30 45] produces'0 self (Seq.empty  : Seq.seq b) self)
end
module C06MapPrecond_Impl0_ProducesTrans_Impl
  type i
  type b
  type f
  type item'0
  predicate invariant'11 (self : item'0)
  let rec invariant'11 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  predicate inv'11 (_x : item'0)
  let rec inv'11 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  axiom inv'11 : forall x : item'0 . inv'11 x = true
  use prelude.Borrow
  predicate invariant'10 (self : borrowed i)
  let rec invariant'10 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : borrowed i)
  let rec inv'10 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : borrowed i . inv'10 x = true
  predicate invariant'9 (self : b)
  let rec invariant'9 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : b)
  let rec inv'9 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ] 
  axiom inv'9 : forall x : b . inv'9 x = true
  use seq.Seq
  use prelude.Snapshot
  predicate invariant'8 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec invariant'8 (self:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec inv'8 (_x:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'8 x = true
  predicate invariant'7 (self : borrowed f)
  let rec invariant'7 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : borrowed f)
  let rec inv'7 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : borrowed f . inv'7 x = true
  predicate invariant'6 (self : Snapshot.snap_ty (Seq.seq item'0))
  let rec invariant'6 (self:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Snapshot.snap_ty (Seq.seq item'0))
  let rec inv'6 (_x:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'6 x = true
  predicate invariant'5 (self : f)
  let rec invariant'5 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : f)
  let rec inv'5 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ] 
  axiom inv'5 : forall x : f . inv'5 x = true
  predicate invariant'4 (self : i)
  let rec invariant'4 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : i)
  let rec inv'4 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : i . inv'4 x = true
  predicate invariant'3 (self : Seq.seq (borrowed f))
  let rec invariant'3 (self:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq (borrowed f))
  let rec inv'3 (_x:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq (borrowed f) . inv'3 x = true
  predicate invariant'2 (self : Seq.seq item'0)
  let rec invariant'2 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Seq.seq item'0)
  let rec inv'2 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Seq.seq item'0 . inv'2 x = true
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'9 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'8 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'5 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'8 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'9 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'7 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'5 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'5 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'5 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'5 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'5 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'5 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'9 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'8 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'7 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'8 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'9 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'4 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'2 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'4 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'2 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'4 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'4 a)
   -> ([#"../common.rs" 21 31 21 33] inv'2 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'4 b)
   -> ([#"../common.rs" 21 61 21 63] inv'2 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'4 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'4 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'4 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'1 (self : Seq.seq b)
  let rec invariant'1 (self:Seq.seq b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq b)
  let rec inv'1 (_x:Seq.seq b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq b . inv'1 x = true
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec precondition'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use prelude.Snapshot
  use seq.Seq
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item'0 . inv'4 i
     -> inv'11 e  -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  let rec next_precondition'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func produced} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'4 i
     -> inv'9 b
     -> inv'7 f
     -> inv'11 e2
     -> inv'11 e1
     -> inv'2 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'4 i
     -> inv'9 b
     -> inv'7 f
     -> inv'11 e2
     -> inv'11 e1
     -> inv'2 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  let rec preservation_inv'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= {[@expl:precondition] [#"../06_map_precond.rs" 93 42 93 50] inv'2 produced}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 33 93 37] inv'5 func}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 24 93 28] inv'4 iter}
    any [ return' (result:bool)-> {result = preservation_inv'0 iter func produced} (! return' {result}) ] 
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([#"../06_map_precond.rs" 93 24 93 28] inv'4 iter)
   -> ([#"../06_map_precond.rs" 93 33 93 37] inv'5 func)
   -> ([#"../06_map_precond.rs" 93 42 93 50] inv'2 produced)
   -> ([#"../06_map_precond.rs" 92 4 92 83] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  use prelude.Snapshot
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv'5 func
     -> inv'10 iter
     -> completed'0 iter
     -> next_precondition'0 ( ^ iter) func (Seq.empty  : Seq.seq item'0) /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item'0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  let rec invariant'0 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C06MapPrecond_Map_Type.t_map i b f item'0)
  let rec inv'0 (_x:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C06MapPrecond_Map_Type.t_map i b f item'0 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use prelude.Snapshot
  use seq.Seq
  use seq.Seq
  predicate produces'0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item'0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item'0)
    
   =
    [#"../06_map_precond.rs" 44 8 56 9] unnest'0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'2 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) s
    /\ (exists fs : Seq.seq (borrowed f) . inv'3 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i)
    /\ precondition'0 ( * Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  let rec produces'0 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (visited:Seq.seq b) (succ:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited succ} (! return' {result}) ]
    
  constant a  : C06MapPrecond_Map_Type.t_map i b f item'0
  constant ab  : Seq.seq b
  constant b  : C06MapPrecond_Map_Type.t_map i b f item'0
  constant bc  : Seq.seq b
  constant c  : C06MapPrecond_Map_Type.t_map i b f item'0
  function produces_trans [#"../06_map_precond.rs" 38 4 38 90] (a : C06MapPrecond_Map_Type.t_map i b f item'0) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i b f item'0) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i b f item'0) : ()
    
  goal vc_produces_trans : ([#"../06_map_precond.rs" 38 82 38 83] inv'0 c)
   -> ([#"../06_map_precond.rs" 38 61 38 63] inv'1 bc)
   -> ([#"../06_map_precond.rs" 38 52 38 53] inv'0 b)
   -> ([#"../06_map_precond.rs" 38 31 38 33] inv'1 ab)
   -> ([#"../06_map_precond.rs" 38 22 38 23] inv'0 a)
   -> ([#"../06_map_precond.rs" 36 15 36 32] produces'0 b bc c)
   -> ([#"../06_map_precond.rs" 35 15 35 32] produces'0 a ab b)
   -> ([#"../06_map_precond.rs" 37 14 37 42] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C06MapPrecond_Impl1_ProducesOne_Impl
  type i
  type b
  type f
  use prelude.Borrow
  predicate invariant'11 (self : borrowed i)
  let rec invariant'11 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  predicate inv'11 (_x : borrowed i)
  let rec inv'11 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  axiom inv'11 : forall x : borrowed i . inv'11 x = true
  type item'0
  use seq.Seq
  use prelude.Snapshot
  predicate invariant'10 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec invariant'10 (self:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec inv'10 (_x:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'10 x = true
  predicate invariant'9 (self : Seq.seq b)
  let rec invariant'9 (self:Seq.seq b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : Seq.seq b)
  let rec inv'9 (_x:Seq.seq b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : Seq.seq b . inv'9 x = true
  predicate invariant'8 (self : Snapshot.snap_ty (Seq.seq item'0))
  let rec invariant'8 (self:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Snapshot.snap_ty (Seq.seq item'0))
  let rec inv'8 (_x:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'8 x = true
  predicate invariant'7 (self : f)
  let rec invariant'7 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : f)
  let rec inv'7 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ] 
  axiom inv'7 : forall x : f . inv'7 x = true
  predicate invariant'6 (self : i)
  let rec invariant'6 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : i)
  let rec inv'6 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ] 
  axiom inv'6 : forall x : i . inv'6 x = true
  predicate invariant'5 (self : Seq.seq (borrowed f))
  let rec invariant'5 (self:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq (borrowed f))
  let rec inv'5 (_x:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq (borrowed f) . inv'5 x = true
  predicate invariant'4 (self : Seq.seq item'0)
  let rec invariant'4 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Seq.seq item'0)
  let rec inv'4 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Seq.seq item'0 . inv'4 x = true
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed f)
  let rec inv'2 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'1 (_x : b)
  let rec inv'1 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'1 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'10 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'7 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'10 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'1 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'2 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'7 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'7 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'7 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'7 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'7 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'7 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'1 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'10 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'2 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'10 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'1 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'3 (self : item'0)
  let rec invariant'3 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : item'0)
  let rec inv'3 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : item'0 . inv'3 x = true
  predicate invariant'2 (self : borrowed f)
  let rec invariant'2 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed f . inv'2 x = true
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'1 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'6 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'4 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'6 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'4 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'6 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'6 a)
   -> ([#"../common.rs" 21 31 21 33] inv'4 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'6 b)
   -> ([#"../common.rs" 21 61 21 63] inv'4 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'6 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'1 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'6 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'6 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use seq.Seq
  predicate inv'0 (_x : C06MapPrecond_Map_Type.t_map i b f item'0)
  let rec inv'0 (_x:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  use seq.Seq
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec precondition'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use prelude.Snapshot
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use prelude.Snapshot
  use prelude.Snapshot
  use seq.Seq
  use seq.Seq
  predicate produces'0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item'0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item'0)
    
   =
    [#"../06_map_precond.rs" 44 8 56 9] unnest'0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'4 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) s
    /\ (exists fs : Seq.seq (borrowed f) . inv'5 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i)
    /\ precondition'0 ( * Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  let rec produces'0 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (visited:Seq.seq b) (succ:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited succ} (! return' {result}) ]
    
  function produces_trans'0 [#"../06_map_precond.rs" 38 4 38 90] (a : C06MapPrecond_Map_Type.t_map i b f item'0) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i b f item'0) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i b f item'0) : ()
    
   =
    [#"../06_map_precond.rs" 33 4 33 10] ()
  let rec produces_trans'0 (a:C06MapPrecond_Map_Type.t_map i b f item'0) (ab:Seq.seq b) (b:C06MapPrecond_Map_Type.t_map i b f item'0) (bc:Seq.seq b) (c:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:()))= {[@expl:precondition] [#"../06_map_precond.rs" 38 82 38 83] inv'0 c}
    {[@expl:precondition] [#"../06_map_precond.rs" 38 61 38 63] inv'9 bc}
    {[@expl:precondition] [#"../06_map_precond.rs" 38 52 38 53] inv'0 b}
    {[@expl:precondition] [#"../06_map_precond.rs" 38 31 38 33] inv'9 ab}
    {[@expl:precondition] [#"../06_map_precond.rs" 38 22 38 23] inv'0 a}
    {[@expl:precondition] [#"../06_map_precond.rs" 36 15 36 32] produces'0 b bc c}
    {[@expl:precondition] [#"../06_map_precond.rs" 35 15 35 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : C06MapPrecond_Map_Type.t_map i b f item'0, ab : Seq.seq b, b : C06MapPrecond_Map_Type.t_map i b f item'0, bc : Seq.seq b, c : C06MapPrecond_Map_Type.t_map i b f item'0 . ([#"../06_map_precond.rs" 35 15 35 32] produces'0 a ab b)
   -> ([#"../06_map_precond.rs" 36 15 36 32] produces'0 b bc c)
   -> ([#"../06_map_precond.rs" 38 22 38 23] inv'0 a)
   -> ([#"../06_map_precond.rs" 38 31 38 33] inv'9 ab)
   -> ([#"../06_map_precond.rs" 38 52 38 53] inv'0 b)
   -> ([#"../06_map_precond.rs" 38 61 38 63] inv'9 bc)
   -> ([#"../06_map_precond.rs" 38 82 38 83] inv'0 c)
   -> ([#"../06_map_precond.rs" 37 14 37 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../06_map_precond.rs" 31 4 31 26] (self : C06MapPrecond_Map_Type.t_map i b f item'0) : ()
   =
    [#"../06_map_precond.rs" 28 4 28 10] ()
  let rec produces_refl'0 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:()))= {[@expl:precondition] [#"../06_map_precond.rs" 31 21 31 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : C06MapPrecond_Map_Type.t_map i b f item'0 . ([#"../06_map_precond.rs" 31 21 31 25] inv'0 self)
   -> ([#"../06_map_precond.rs" 30 14 30 45] produces'0 self (Seq.empty  : Seq.seq b) self)
  predicate invariant'1 (self : b)
  let rec invariant'1 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : b . inv'1 x = true
  use seq.Seq
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item'0 . inv'6 i
     -> inv'3 e  -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  let rec next_precondition'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func produced} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'6 i
     -> inv'1 b
     -> inv'2 f
     -> inv'3 e2
     -> inv'3 e1
     -> inv'4 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'6 i
     -> inv'1 b
     -> inv'2 f
     -> inv'3 e2
     -> inv'3 e1
     -> inv'4 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  let rec preservation_inv'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= {[@expl:precondition] [#"../06_map_precond.rs" 93 42 93 50] inv'4 produced}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 33 93 37] inv'7 func}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 24 93 28] inv'6 iter}
    any [ return' (result:bool)-> {result = preservation_inv'0 iter func produced} (! return' {result}) ] 
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([#"../06_map_precond.rs" 93 24 93 28] inv'6 iter)
   -> ([#"../06_map_precond.rs" 93 33 93 37] inv'7 func)
   -> ([#"../06_map_precond.rs" 93 42 93 50] inv'4 produced)
   -> ([#"../06_map_precond.rs" 92 4 92 83] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv'7 func
     -> inv'11 iter
     -> completed'0 iter
     -> next_precondition'0 ( ^ iter) func (Seq.empty  : Seq.seq item'0) /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item'0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  let rec invariant'0 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : C06MapPrecond_Map_Type.t_map i b f item'0 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  use seq.Seq
  constant self  : C06MapPrecond_Map_Type.t_map i b f item'0
  constant visited  : b
  constant succ  : C06MapPrecond_Map_Type.t_map i b f item'0
  predicate produces_one [#"../06_map_precond.rs" 142 4 142 57] (self : C06MapPrecond_Map_Type.t_map i b f item'0) (visited : b) (succ : C06MapPrecond_Map_Type.t_map i b f item'0)
    
  goal vc_produces_one : ([#"../06_map_precond.rs" 142 38 142 42] inv'0 succ)
   -> ([#"../06_map_precond.rs" 142 26 142 33] inv'1 visited)
   -> ([#"../06_map_precond.rs" 142 20 142 24] inv'0 self)
   -> ([#"../06_map_precond.rs" 141 14 141 68] ([#"../06_map_precond.rs" 143 8 149 9] exists f : borrowed f . inv'2 f
  /\  * f = C06MapPrecond_Map_Type.map_func self
  /\  ^ f = C06MapPrecond_Map_Type.map_func succ
  /\ (exists e : item'0 . inv'3 e
  /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) (C06MapPrecond_Map_Type.map_iter succ)
  /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
  = Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e
  /\ precondition'0 ( * f) (e, C06MapPrecond_Map_Type.map_produced self)
  /\ postcondition_mut'0 f (e, C06MapPrecond_Map_Type.map_produced self) visited))
  = produces'0 self (Seq.singleton visited) succ)
end
module C06MapPrecond_Impl1_ProducesOneInvariant_Impl
  type i
  type b
  type f
  use prelude.Borrow
  predicate invariant'9 (self : borrowed i)
  let rec invariant'9 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : borrowed i)
  let rec inv'9 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : borrowed i . inv'9 x = true
  type item'0
  use seq.Seq
  use prelude.Snapshot
  predicate invariant'8 (self : Snapshot.snap_ty (Seq.seq item'0))
  let rec invariant'8 (self:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Snapshot.snap_ty (Seq.seq item'0))
  let rec inv'8 (_x:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'8 x = true
  predicate invariant'7 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec invariant'7 (self:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec inv'7 (_x:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'7 x = true
  predicate invariant'6 (self : f)
  let rec invariant'6 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : f)
  let rec inv'6 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ] 
  axiom inv'6 : forall x : f . inv'6 x = true
  predicate invariant'5 (self : Seq.seq item'0)
  let rec invariant'5 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq item'0)
  let rec inv'5 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq item'0 . inv'5 x = true
  predicate invariant'4 (self : i)
  let rec invariant'4 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : i)
  let rec inv'4 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : i . inv'4 x = true
  predicate invariant'3 (self : borrowed f)
  let rec invariant'3 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed f)
  let rec inv'3 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed f . inv'3 x = true
  predicate invariant'2 (self : b)
  let rec invariant'2 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : b)
  let rec inv'2 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : b . inv'2 x = true
  predicate invariant'1 (self : item'0)
  let rec invariant'1 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : item'0)
  let rec inv'1 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : item'0 . inv'1 x = true
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec precondition'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use prelude.Snapshot
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'0 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item'0 . inv'4 i
     -> inv'1 e  -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  let rec next_precondition'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func produced} (! return' {result}) ]
    
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'4 i
     -> inv'2 b
     -> inv'3 f
     -> inv'1 e2
     -> inv'1 e1
     -> inv'5 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'4 i
     -> inv'2 b
     -> inv'3 f
     -> inv'1 e2
     -> inv'1 e1
     -> inv'5 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  let rec preservation_inv'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= {[@expl:precondition] [#"../06_map_precond.rs" 93 42 93 50] inv'5 produced}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 33 93 37] inv'6 func}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 24 93 28] inv'4 iter}
    any [ return' (result:bool)-> {result = preservation_inv'0 iter func produced} (! return' {result}) ] 
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([#"../06_map_precond.rs" 93 24 93 28] inv'4 iter)
   -> ([#"../06_map_precond.rs" 93 33 93 37] inv'6 func)
   -> ([#"../06_map_precond.rs" 93 42 93 50] inv'5 produced)
   -> ([#"../06_map_precond.rs" 92 4 92 83] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  use prelude.Snapshot
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv'6 func
     -> inv'9 iter
     -> completed'0 iter
     -> next_precondition'0 ( ^ iter) func (Seq.empty  : Seq.seq item'0) /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item'0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  let rec invariant'0 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C06MapPrecond_Map_Type.t_map i b f item'0)
  let rec inv'0 (_x:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C06MapPrecond_Map_Type.t_map i b f item'0 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'7 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'6 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'7 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'3 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'6 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'6 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'6 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'6 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'6 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'6 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'7 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'3 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'7 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'4 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'5 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'4 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'5 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'4 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'0 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'0 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'0 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'4 a)
   -> ([#"../common.rs" 21 31 21 33] inv'5 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'4 b)
   -> ([#"../common.rs" 21 61 21 63] inv'5 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'4 c)  -> ([#"../common.rs" 20 14 20 42] produces'0 a (Seq.(++) ab bc) c)
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'4 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'4 self)
   -> ([#"../common.rs" 14 14 14 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  constant self  : C06MapPrecond_Map_Type.t_map i b f item'0
  constant e  : item'0
  constant r  : b
  constant f  : borrowed f
  constant iter  : i
  function produces_one_invariant [#"../06_map_precond.rs" 132 4 132 73] (self : C06MapPrecond_Map_Type.t_map i b f item'0) (e : item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  goal vc_produces_one_invariant : ([#"../06_map_precond.rs" 132 65 132 69] inv'4 iter)
   -> ([#"../06_map_precond.rs" 132 54 132 55] inv'3 f)
   -> ([#"../06_map_precond.rs" 132 48 132 49] inv'2 r)
   -> ([#"../06_map_precond.rs" 132 36 132 37] inv'1 e)
   -> ([#"../06_map_precond.rs" 132 30 132 34] inv'0 self)
   -> ([#"../06_map_precond.rs" 129 15 129 57] postcondition_mut'0 f (e, C06MapPrecond_Map_Type.map_produced self) r)
   -> ([#"../06_map_precond.rs" 128 15 128 30]  * f = C06MapPrecond_Map_Type.map_func self)
   -> ([#"../06_map_precond.rs" 127 4 127 60] produces'0 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) iter)
   -> ([#"../06_map_precond.rs" 126 4 126 12] forall i : i . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'4 i
   -> inv'1 e2
   -> inv'1 e1
   -> inv'5 s
   -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
   -> produces'0 (C06MapPrecond_Map_Type.map_iter self) (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i)
  && (let _ = () in ([#"../06_map_precond.rs" 131 14 131 70] next_precondition'0 iter ( ^ f) (Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e))
  && ([#"../06_map_precond.rs" 130 14 130 69] preservation_inv'0 iter ( ^ f) (Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e)))
end
module C06MapPrecond_Impl0_Next
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  predicate invariant'13 (self : Seq.seq (borrowed f))
  let rec invariant'13 (self:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'13 self} (! return' {result}) ]
    
  predicate inv'13 (_x : Seq.seq (borrowed f))
  let rec inv'13 (_x:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'13 _x} (! return' {result}) ]
    
  axiom inv'13 : forall x : Seq.seq (borrowed f) . inv'13 x = true
  type item'0
  predicate invariant'12 (self : Seq.seq item'0)
  let rec invariant'12 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'12 self} (! return' {result}) ]
    
  predicate inv'12 (_x : Seq.seq item'0)
  let rec inv'12 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'12 _x} (! return' {result}) ]
    
  axiom inv'12 : forall x : Seq.seq item'0 . inv'12 x = true
  predicate invariant'11 (self : item'0)
  let rec invariant'11 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  predicate inv'11 (_x : item'0)
  let rec inv'11 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  axiom inv'11 : forall x : item'0 . inv'11 x = true
  use prelude.Snapshot
  predicate inv'4 (_x : Snapshot.snap_ty (Seq.seq item'0))
  let rec inv'4 (_x:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  predicate inv'3 (_x : f)
  let rec inv'3 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  predicate inv'0 (_x : i)
  let rec inv'0 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec precondition'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use prelude.Snapshot
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'0 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item'0 . inv'0 i
     -> inv'11 e  -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  let rec next_precondition'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func produced} (! return' {result}) ]
    
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  predicate inv'7 (_x : borrowed f)
  let rec inv'7 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  predicate inv'9 (_x : b)
  let rec inv'9 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ] 
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'0 i
     -> inv'9 b
     -> inv'7 f
     -> inv'11 e2
     -> inv'11 e1
     -> inv'12 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'0 i
     -> inv'9 b
     -> inv'7 f
     -> inv'11 e2
     -> inv'11 e1
     -> inv'12 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  let rec preservation_inv'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= {[@expl:precondition] [#"../06_map_precond.rs" 93 42 93 50] inv'12 produced}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 33 93 37] inv'3 func}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 24 93 28] inv'0 iter}
    any [ return' (result:bool)-> {result = preservation_inv'0 iter func produced} (! return' {result}) ] 
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([#"../06_map_precond.rs" 93 24 93 28] inv'0 iter)
   -> ([#"../06_map_precond.rs" 93 33 93 37] inv'3 func)
   -> ([#"../06_map_precond.rs" 93 42 93 50] inv'12 produced)
   -> ([#"../06_map_precond.rs" 92 4 92 83] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  use prelude.Snapshot
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate inv'6 (_x : borrowed i)
  let rec inv'6 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv'3 func
     -> inv'6 iter
     -> completed'1 iter
     -> next_precondition'0 ( ^ iter) func (Seq.empty  : Seq.seq item'0) /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'10 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item'0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  let rec invariant'10 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : C06MapPrecond_Map_Type.t_map i b f item'0)
  let rec inv'10 (_x:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : C06MapPrecond_Map_Type.t_map i b f item'0 . inv'10 x
  = (invariant'10 x
  /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  predicate invariant'9 (self : b)
  let rec invariant'9 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  axiom inv'9 : forall x : b . inv'9 x = true
  predicate resolve'4 (self : f)
  let rec resolve'4 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'8 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec inv'8 (_x:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'9 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'8 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'3 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'8 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'9 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'7 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'4 ( ^ s)))
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'3 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'3 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'3 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'3 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'3 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'3 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'9 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'8 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'7 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'8 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'9 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'8 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec invariant'8 (self:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  axiom inv'8 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'8 x = true
  predicate invariant'7 (self : borrowed f)
  let rec invariant'7 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  axiom inv'7 : forall x : borrowed f . inv'7 x = true
  predicate invariant'6 (self : borrowed i)
  let rec invariant'6 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  axiom inv'6 : forall x : borrowed i . inv'6 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'5 (self : Core_Option_Option_Type.t_option b)
  let rec invariant'5 (self:Core_Option_Option_Type.t_option b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Core_Option_Option_Type.t_option b)
  let rec inv'5 (_x:Core_Option_Option_Type.t_option b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Core_Option_Option_Type.t_option b . inv'5 x = true
  predicate invariant'4 (self : Snapshot.snap_ty (Seq.seq item'0))
  let rec invariant'4 (self:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'4 x = true
  predicate invariant'3 (self : f)
  let rec invariant'3 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : f . inv'3 x = true
  predicate invariant'2 (self : Core_Option_Option_Type.t_option item'0)
  let rec invariant'2 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option item'0)
  let rec inv'2 (_x:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option item'0 . inv'2 x = true
  predicate invariant'1 (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item'0))
  let rec invariant'1 (self:borrowed (C06MapPrecond_Map_Type.t_map i b f item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (C06MapPrecond_Map_Type.t_map i b f item'0))
  let rec inv'1 (_x:borrowed (C06MapPrecond_Map_Type.t_map i b f item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (C06MapPrecond_Map_Type.t_map i b f item'0) . inv'1 x
  = (inv'10 ( * x) /\ inv'10 ( ^ x))
  predicate invariant'0 (self : i)
  let rec invariant'0 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : i . inv'0 x = true
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'0 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'12 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'0 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'12 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'0 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'0 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'0 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'0 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'0 a)
   -> ([#"../common.rs" 21 31 21 33] inv'12 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'0 b)
   -> ([#"../common.rs" 21 61 21 63] inv'12 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'0 c)  -> ([#"../common.rs" 20 14 20 42] produces'0 a (Seq.(++) ab bc) c)
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'0 self)
   -> ([#"../common.rs" 14 14 14 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  use prelude.Snapshot
  use seq.Seq
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'1 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item'0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item'0)
    
   =
    [#"../06_map_precond.rs" 44 8 56 9] unnest'0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'12 s
    /\ Seq.length s = Seq.length visited
    /\ produces'0 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) s
    /\ (exists fs : Seq.seq (borrowed f) . inv'13 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i)
    /\ precondition'0 ( * Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  let rec produces'1 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (visited:Seq.seq b) (succ:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited succ} (! return' {result}) ]
    
  use seq.Seq
  predicate produces_one'0 [#"../06_map_precond.rs" 142 4 142 57] (self : C06MapPrecond_Map_Type.t_map i b f item'0) (visited : b) (succ : C06MapPrecond_Map_Type.t_map i b f item'0)
    
   =
    [#"../06_map_precond.rs" 143 8 149 9] exists f : borrowed f . inv'7 f
    /\  * f = C06MapPrecond_Map_Type.map_func self
    /\  ^ f = C06MapPrecond_Map_Type.map_func succ
    /\ (exists e : item'0 . inv'11 e
    /\ produces'0 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e
    /\ precondition'0 ( * f) (e, C06MapPrecond_Map_Type.map_produced self)
    /\ postcondition_mut'0 f (e, C06MapPrecond_Map_Type.map_produced self) visited)
  let rec produces_one'0 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (visited:b) (succ:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= {[@expl:precondition] [#"../06_map_precond.rs" 142 38 142 42] inv'10 succ}
    {[@expl:precondition] [#"../06_map_precond.rs" 142 26 142 33] inv'9 visited}
    {[@expl:precondition] [#"../06_map_precond.rs" 142 20 142 24] inv'10 self}
    any [ return' (result:bool)-> {result = produces_one'0 self visited succ} (! return' {result}) ] 
  axiom produces_one'0_spec : forall self : C06MapPrecond_Map_Type.t_map i b f item'0, visited : b, succ : C06MapPrecond_Map_Type.t_map i b f item'0 . ([#"../06_map_precond.rs" 142 20 142 24] inv'10 self)
   -> ([#"../06_map_precond.rs" 142 26 142 33] inv'9 visited)
   -> ([#"../06_map_precond.rs" 142 38 142 42] inv'10 succ)
   -> ([#"../06_map_precond.rs" 141 14 141 68] produces_one'0 self visited succ
  = produces'1 self (Seq.singleton visited) succ)
  predicate completed'0 [#"../06_map_precond.rs" 21 4 21 35] (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item'0))
    
   =
    [#"../06_map_precond.rs" 22 8 25 9] Snapshot.inner (C06MapPrecond_Map_Type.map_produced ( ^ self))
    = (Seq.empty  : Seq.seq item'0)
    /\ completed'1 (Borrow.borrow_logic (C06MapPrecond_Map_Type.map_iter ( * self)) (C06MapPrecond_Map_Type.map_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C06MapPrecond_Map_Type.map_func ( * self) = C06MapPrecond_Map_Type.map_func ( ^ self)
  let rec completed'0 (self:borrowed (C06MapPrecond_Map_Type.t_map i b f item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'3 (self : Snapshot.snap_ty ())
  let rec resolve'3 (self:Snapshot.snap_ty ()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  use prelude.Snapshot
  function produces_one_invariant'0 [#"../06_map_precond.rs" 132 4 132 73] (self : C06MapPrecond_Map_Type.t_map i b f item'0) (e : item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  let rec produces_one_invariant'0 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (e:item'0) (r:b) (f:borrowed f) (iter:i) (return'  (ret:()))= {[@expl:precondition] [#"../06_map_precond.rs" 132 65 132 69] inv'0 iter}
    {[@expl:precondition] [#"../06_map_precond.rs" 132 54 132 55] inv'7 f}
    {[@expl:precondition] [#"../06_map_precond.rs" 132 48 132 49] inv'9 r}
    {[@expl:precondition] [#"../06_map_precond.rs" 132 36 132 37] inv'11 e}
    {[@expl:precondition] [#"../06_map_precond.rs" 132 30 132 34] inv'10 self}
    {[@expl:precondition] [#"../06_map_precond.rs" 129 15 129 57] postcondition_mut'0 f (e, C06MapPrecond_Map_Type.map_produced self) r}
    {[@expl:precondition] [#"../06_map_precond.rs" 128 15 128 30]  * f = C06MapPrecond_Map_Type.map_func self}
    {[@expl:precondition] [#"../06_map_precond.rs" 127 4 127 60] produces'0 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) iter}
    any [ return' (result:())-> {result = produces_one_invariant'0 self e r f iter} (! return' {result}) ] 
  axiom produces_one_invariant'0_spec : forall self : C06MapPrecond_Map_Type.t_map i b f item'0, e : item'0, r : b, f : borrowed f, iter : i . ([#"../06_map_precond.rs" 127 4 127 60] produces'0 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) iter)
   -> ([#"../06_map_precond.rs" 128 15 128 30]  * f = C06MapPrecond_Map_Type.map_func self)
   -> ([#"../06_map_precond.rs" 129 15 129 57] postcondition_mut'0 f (e, C06MapPrecond_Map_Type.map_produced self) r)
   -> ([#"../06_map_precond.rs" 132 30 132 34] inv'10 self)
   -> ([#"../06_map_precond.rs" 132 36 132 37] inv'11 e)
   -> ([#"../06_map_precond.rs" 132 48 132 49] inv'9 r)
   -> ([#"../06_map_precond.rs" 132 54 132 55] inv'7 f)
   -> ([#"../06_map_precond.rs" 132 65 132 69] inv'0 iter)
   -> ([#"../06_map_precond.rs" 131 14 131 70] next_precondition'0 iter ( ^ f) (Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e))
  && ([#"../06_map_precond.rs" 130 14 130 69] preservation_inv'0 iter ( ^ f) (Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e))
  predicate resolve'2 (self : Snapshot.snap_ty (Seq.seq item'0))
  let rec resolve'2 (self:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  let rec call_mut'0 (self:borrowed f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:b))= {[@expl:precondition] inv'8 args}
    {[@expl:precondition] inv'7 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 160 27 160 52] precondition'0 ( * self) args}
    any
    [ return' (result:b)-> {inv'9 result}
      {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition_mut'0 self args result}
      (! return' {result}) ]
    
  predicate resolve'1 (self : Core_Option_Option_Type.t_option item'0)
  let rec resolve'1 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item'0)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C06MapPrecond_Map_Type.t_map i b f item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed i) (return'  (ret:Core_Option_Option_Type.t_option item'0))= {[@expl:precondition] [#"../common.rs" 27 17 27 21] inv'6 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option item'0)-> {[#"../common.rs" 27 26 27 44] inv'2 result}
      {[#"../common.rs" 23 14 26 5] match result with
        | Core_Option_Option_Type.C_None -> completed'1 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  let rec next (self:borrowed (C06MapPrecond_Map_Type.t_map i b f item'0)) (return'  (ret:Core_Option_Option_Type.t_option b))= {[#"../06_map_precond.rs" 63 17 63 21] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = C06MapPrecond_Map_Type.t_map <i> <b> <f> <item'0> { * self}
          (fun (riter'0:i) (rfunc'0:f) (rproduced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                C06MapPrecond_Map_Type.t_map <i> <b> <f> <item'0> { * self}
                  (fun (l_iter'0:i) (l_func'0:f) (l_produced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
                    
                    [ &self <- { self with current = (C06MapPrecond_Map_Type.C_Map ( ^ _4) l_func'0 l_produced'0 : C06MapPrecond_Map_Type.t_map i b f item'0) ; } ]
                    
                    s1)))
      | s1 = -{inv'0 ( ^ _4)}- s2
      | s2 = next'0 {_4} (fun (_ret':Core_Option_Option_Type.t_option item'0) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = any
        [ br0 -> {_3 = Core_Option_Option_Type.C_None } (! bb4)
        | br1 (a:item'0)-> {_3 = Core_Option_Option_Type.C_Some a} (! bb3) ]
         ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[@expl:type invariant] inv'2 _3} s3
      | s3 = -{resolve'1 _3}- s4
      | s4 = {[#"../06_map_precond.rs" 64 14 64 30] false} any ]
      
    | bb3 = s0 [ s0 = bb5 ] 
    | bb5 = s0
      [ s0 = Core_Option_Option_Type.some <item'0> {_3}
          (fun (r0'0:item'0) ->
             [ &v <- r0'0 ] 
            (any
            [ any_ (_any:item'0)-> (! Core_Option_Option_Type.some <item'0> {_3}
                (fun (l_0'0:item'0) ->
                   [ &_3 <- Core_Option_Option_Type.C_Some _any : Core_Option_Option_Type.t_option item'0 ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 _3} s2
      | s2 = -{resolve'1 _3}- s3
      | s3 = {[@expl:assertion] [#"../06_map_precond.rs" 66 16 66 76] precondition'0 (C06MapPrecond_Map_Type.map_func ( * self)) (v, C06MapPrecond_Map_Type.map_produced ( * self))}
        s4
      | s4 = bb6 ]
      
    | bb6 = s0
      [ s0 = 
        [ &produced <- ([#"../06_map_precond.rs" 67 31 67 66] Snapshot.new (Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced ( * self))) v)) : Snapshot.snap_ty (Seq.seq item'0) ]
        
        s1
      | s1 = bb7 ]
      
    | bb7 = s0
      [ s0 = C06MapPrecond_Map_Type.t_map <i> <b> <f> <item'0> { * self}
          (fun (riter'0:i) (rfunc'0:f) (rproduced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
            Borrow.borrow_final <f> {rfunc'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed f) ->
                 [ &_12 <- _ret' ] 
                C06MapPrecond_Map_Type.t_map <i> <b> <f> <item'0> { * self}
                  (fun (l_iter'0:i) (l_func'0:f) (l_produced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
                    
                    [ &self <- { self with current = (C06MapPrecond_Map_Type.C_Map l_iter'0 ( ^ _12) l_produced'0 : C06MapPrecond_Map_Type.t_map i b f item'0) ; } ]
                    
                    s1)))
      | s1 = -{inv'3 ( ^ _12)}- s2
      | s2 = C06MapPrecond_Map_Type.t_map <i> <b> <f> <item'0> { * self}
          (fun (riter'1:i) (rfunc'1:f) (rproduced'1:Snapshot.snap_ty (Seq.seq item'0)) ->
             [ &_13 <- (v, rproduced'1) ] 
            (any [ any_ (_any:item'0)-> (!  [ &v <- _any ] s3) ] ))
      | s3 = call_mut'0 {_12} {_13} (fun (_ret':b) ->  [ &r <- _ret' ] s4)
      | s4 = bb8 ]
      
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'4 produced} s1
      | s1 = -{resolve'2 produced}- s2
      | s2 = C06MapPrecond_Map_Type.t_map <i> <b> <f> <item'0> { * self}
          (fun (l_iter'0:i) (l_func'0:f) (l_produced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
            
            [ &self <- { self with current = (C06MapPrecond_Map_Type.C_Map l_iter'0 l_func'0 produced : C06MapPrecond_Map_Type.t_map i b f item'0) ; } ]
            
            s3)
      | s3 = C06MapPrecond_Map_Type.t_map <i> <b> <f> <item'0> { * self}
          (fun (riter'0:i) (rfunc'0:f) (rproduced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
            {[@expl:type invariant] inv'4 rproduced'0}
            s4)
      | s4 = C06MapPrecond_Map_Type.t_map <i> <b> <f> <item'0> { * self}
          (fun (riter'1:i) (rfunc'1:f) (rproduced'1:Snapshot.snap_ty (Seq.seq item'0)) -> -{resolve'2 rproduced'1}- s5)
      | s5 = {[@expl:type invariant] inv'1 self} s6
      | s6 = -{resolve'0 self}- s7
      | s7 =  [ &_17 <- [#"../06_map_precond.rs" 70 16 70 58] Snapshot.new () ] s8
      | s8 = bb10 ]
      
    | bb10 = s0
      [ s0 = -{resolve'3 _17}- s1
      | s1 =  [ &_0 <- Core_Option_Option_Type.C_Some r : Core_Option_Option_Type.t_option b ] 
        (any [ any_ (_any:b)-> (!  [ &r <- _any ] s2) ] )
      | s2 = bb11 ]
      
    | bb11 = s0 [ s0 = bb12 ] 
    | bb12 = s0 [ s0 = bb13 ] 
    | bb13 = s0 [ s0 = bb15 ] 
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'2 _3} s1
      | s1 = -{resolve'1 _3}- s2
      | s2 = 
        [ &_20 <- ([#"../06_map_precond.rs" 74 32 74 56] Snapshot.new (Seq.empty  : Seq.seq item'0)) : Snapshot.snap_ty (Seq.seq item'0) ]
        
        s3
      | s3 = bb14 ]
      
    | bb14 = s0
      [ s0 = C06MapPrecond_Map_Type.t_map <i> <b> <f> <item'0> { * self}
          (fun (l_iter'0:i) (l_func'0:f) (l_produced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
            
            [ &self <- { self with current = (C06MapPrecond_Map_Type.C_Map l_iter'0 l_func'0 _20 : C06MapPrecond_Map_Type.t_map i b f item'0) ; } ]
            
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq item'0))-> (!  [ &_20 <- _any ] s1) ] ))
      | s1 = C06MapPrecond_Map_Type.t_map <i> <b> <f> <item'0> { * self}
          (fun (riter'0:i) (rfunc'0:f) (rproduced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
            {[@expl:type invariant] inv'4 rproduced'0}
            s2)
      | s2 = C06MapPrecond_Map_Type.t_map <i> <b> <f> <item'0> { * self}
          (fun (riter'1:i) (rfunc'1:f) (rproduced'1:Snapshot.snap_ty (Seq.seq item'0)) -> -{resolve'2 rproduced'1}- s3)
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 =  [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option b ] s6
      | s6 = bb15 ]
      
    | bb15 = s0 [ s0 = bb16 ] 
    | bb16 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option b = any_l () : Core_Option_Option_Type.t_option b
    | & self : borrowed (C06MapPrecond_Map_Type.t_map i b f item'0) = self
    | & _3 : Core_Option_Option_Type.t_option item'0 = any_l () : Core_Option_Option_Type.t_option item'0
    | & _4 : borrowed i = any_l () : borrowed i
    | & v : item'0 = any_l () : item'0
    | & produced : Snapshot.snap_ty (Seq.seq item'0) = any_l () : Snapshot.snap_ty (Seq.seq item'0)
    | & r : b = any_l () : b
    | & _12 : borrowed f = any_l () : borrowed f
    | & _13 : (item'0, Snapshot.snap_ty (Seq.seq item'0)) = any_l () : (item'0, Snapshot.snap_ty (Seq.seq item'0))
    | & _17 : Snapshot.snap_ty () = any_l () : Snapshot.snap_ty ()
    | & _20 : Snapshot.snap_ty (Seq.seq item'0) = any_l () : Snapshot.snap_ty (Seq.seq item'0) ]
    
    [ return' (result:Core_Option_Option_Type.t_option b)-> {[@expl:postcondition] [#"../06_map_precond.rs" 63 26 63 44] inv'5 result}
      {[@expl:postcondition] [#"../06_map_precond.rs" 59 14 62 5] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces_one'0 ( * self) v ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C06MapPrecond_Map
  type i
  type b
  type f
  type item'0
  use seq.Seq
  use prelude.Snapshot
  predicate invariant'9 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec invariant'9 (self:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec inv'9 (_x:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'9 x = true
  predicate invariant'8 (self : Snapshot.snap_ty (Seq.seq item'0))
  let rec invariant'8 (self:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Snapshot.snap_ty (Seq.seq item'0))
  let rec inv'8 (_x:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'8 x = true
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'6 (_x : borrowed f)
  let rec inv'6 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'5 (_x : b)
  let rec inv'5 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ] 
  predicate inv'2 (_x : f)
  let rec inv'2 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'5 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'9 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'2 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'9 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'5 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'6 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'2 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'2 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'2 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'2 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'2 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'2 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'5 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'9 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'6 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'9 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'5 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'7 (self : Seq.seq item'0)
  let rec invariant'7 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Seq.seq item'0)
  let rec inv'7 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Seq.seq item'0 . inv'7 x = true
  predicate invariant'6 (self : borrowed f)
  let rec invariant'6 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  axiom inv'6 : forall x : borrowed f . inv'6 x = true
  predicate invariant'5 (self : b)
  let rec invariant'5 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  axiom inv'5 : forall x : b . inv'5 x = true
  predicate invariant'4 (self : borrowed i)
  let rec invariant'4 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed i)
  let rec inv'4 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  predicate inv'0 (_x : i)
  let rec inv'0 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec precondition'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use prelude.Snapshot
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'0 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  predicate inv'1 (_x : item'0)
  let rec inv'1 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item'0 . inv'0 i
     -> inv'1 e  -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  let rec next_precondition'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func produced} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'0 i
     -> inv'5 b
     -> inv'6 f
     -> inv'1 e2
     -> inv'1 e1
     -> inv'7 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'0 i
     -> inv'5 b
     -> inv'6 f
     -> inv'1 e2
     -> inv'1 e1
     -> inv'7 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  let rec preservation_inv'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= {[@expl:precondition] [#"../06_map_precond.rs" 93 42 93 50] inv'7 produced}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 33 93 37] inv'2 func}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 24 93 28] inv'0 iter}
    any [ return' (result:bool)-> {result = preservation_inv'0 iter func produced} (! return' {result}) ] 
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([#"../06_map_precond.rs" 93 24 93 28] inv'0 iter)
   -> ([#"../06_map_precond.rs" 93 33 93 37] inv'2 func)
   -> ([#"../06_map_precond.rs" 93 42 93 50] inv'7 produced)
   -> ([#"../06_map_precond.rs" 92 4 92 83] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  use prelude.Snapshot
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv'2 func
     -> inv'4 iter
     -> completed'0 iter
     -> next_precondition'0 ( ^ iter) func (Seq.empty  : Seq.seq item'0) /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'3 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item'0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  let rec invariant'3 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : C06MapPrecond_Map_Type.t_map i b f item'0)
  let rec inv'3 (_x:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : C06MapPrecond_Map_Type.t_map i b f item'0 . inv'3 x
  = (invariant'3 x
  /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  predicate invariant'2 (self : f)
  let rec invariant'2 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : f . inv'2 x = true
  predicate invariant'1 (self : item'0)
  let rec invariant'1 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : item'0 . inv'1 x = true
  predicate invariant'0 (self : i)
  let rec invariant'0 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : i . inv'0 x = true
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'0 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'7 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'0 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'7 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'0 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'0 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'0 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'0 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'0 a)
   -> ([#"../common.rs" 21 31 21 33] inv'7 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'0 b)
   -> ([#"../common.rs" 21 61 21 63] inv'7 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'0 c)  -> ([#"../common.rs" 20 14 20 42] produces'0 a (Seq.(++) ab bc) c)
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'0 self)
   -> ([#"../common.rs" 14 14 14 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  use prelude.Intrinsic
  let rec map (iter:i) (func:f) (return'  (ret:C06MapPrecond_Map_Type.t_map i b f item'0))= {[#"../06_map_precond.rs" 172 4 172 8] inv'2 func}
    {[#"../06_map_precond.rs" 171 4 171 8] inv'0 iter}
    {[#"../06_map_precond.rs" 168 11 168 51] preservation'0 iter func}
    {[#"../06_map_precond.rs" 167 11 167 41] reinitialize'0 ()}
    {[#"../06_map_precond.rs" 166 0 166 131] forall i2 : i . forall e : item'0 . inv'0 i2
     -> inv'1 e
     -> produces'0 iter (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq item'0))}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = s0
      [ s0 = 
        [ &_9 <- ([#"../06_map_precond.rs" 174 32 174 54] Snapshot.new (Seq.empty  : Seq.seq item'0)) : Snapshot.snap_ty (Seq.seq item'0) ]
        
        s1
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 =  [ &_0 <- C06MapPrecond_Map_Type.C_Map iter func _9 : C06MapPrecond_Map_Type.t_map i b f item'0 ] 
        (any
        [ any_ (_any:i)-> (!  [ &iter <- _any ] 
          (any
          [ any_ (_any:f)-> (!  [ &func <- _any ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq item'0))-> (!  [ &_9 <- _any ] s1) ] )) ]
          )) ]
        )
      | s1 = bb5 ]
      
    | bb5 = s0 [ s0 = bb6 ] 
    | bb6 = s0 [ s0 = bb7 ] 
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : C06MapPrecond_Map_Type.t_map i b f item'0 = any_l () : C06MapPrecond_Map_Type.t_map i b f item'0
    | & iter : i = iter
    | & func : f = func
    | & _9 : Snapshot.snap_ty (Seq.seq item'0) = any_l () : Snapshot.snap_ty (Seq.seq item'0) ]
    
    [ return' (result:C06MapPrecond_Map_Type.t_map i b f item'0)-> {[@expl:postcondition] [#"../06_map_precond.rs" 173 5 173 17] inv'3 result}
      {[@expl:postcondition] [#"../06_map_precond.rs" 169 10 169 75] result
      = C06MapPrecond_Map_Type.C_Map iter func (Snapshot.new (Seq.empty  : Seq.seq item'0))}
      (! return' {result}) ]
    
end
module C06MapPrecond_Identity_Closure0_Type
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Snapshot
  use prelude.Int16
  type c06mapprecond_identity_closure0 'i =
    | C06mapprecond_identity_closure0
    
  let rec c06mapprecond_identity_closure0 < 'i > (input:c06mapprecond_identity_closure0 'i) (ret  )= any
    [ good -> {C06mapprecond_identity_closure0  = input} (! ret)
    | bad -> {C06mapprecond_identity_closure0  <> input} {false} any ]
    
end
module C06MapPrecond_Identity_Closure0
  type i
  type item'0
  use seq.Seq
  predicate invariant'3 (self : Seq.seq item'0)
  let rec invariant'3 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq item'0)
  let rec inv'3 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq item'0 . inv'3 x = true
  predicate invariant'2 (self : i)
  let rec invariant'2 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : i)
  let rec inv'2 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : i . inv'2 x = true
  predicate invariant'1 (self : item'0)
  let rec invariant'1 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : item'0)
  let rec inv'1 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : item'0 . inv'1 x = true
  use prelude.Snapshot
  predicate invariant'0 (self : Snapshot.snap_ty (Seq.seq item'0))
  let rec invariant'0 (self:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Snapshot.snap_ty (Seq.seq item'0))
  let rec inv'0 (_x:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'0 x = true
  use seq.Seq
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'0 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'2 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'3 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'2 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'3 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'2 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'0 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'0 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'0 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'2 a)
   -> ([#"../common.rs" 21 31 21 33] inv'3 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'2 b)
   -> ([#"../common.rs" 21 61 21 63] inv'3 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'2 c)  -> ([#"../common.rs" 20 14 20 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'2 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'2 self)
   -> ([#"../common.rs" 14 14 14 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  use prelude.Int16
  use C06MapPrecond_Identity_Closure0_Type as C06MapPrecond_Identity_Closure0_Type
  predicate unnest'0 [#"../06_map_precond.rs" 178 14 178 20] (self : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) (_2 : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i)
    
   =
    true
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : Snapshot.snap_ty (Seq.seq item'0))
  let rec resolve'0 (self:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec c06mapprecond_identity_closure0 (_1:borrowed (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i)) (x:item'0) (_3:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:item'0))= {inv'0 _3}
    {[#"../06_map_precond.rs" 178 15 178 16] inv'1 x}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- x ] (any [ any_ (_any:item'0)-> (!  [ &x <- _any ] s1) ] )
      | s1 = {[@expl:type invariant] inv'0 _3} s2
      | s2 = -{resolve'0 _3}- s3
      | s3 = -{resolve'1 _1}- s4
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : item'0 = any_l () : item'0
    | & _1 : borrowed (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) = _1
    | & x : item'0 = x
    | & _3 : Snapshot.snap_ty (Seq.seq item'0) = _3 ]
    
    [ return' (result:item'0)-> {[@expl:postcondition] [#"../06_map_precond.rs" 178 14 178 20] inv'1 result}
      {[@expl:postcondition] unnest'0 ( * _1) ( ^ _1)}
      (! return' {result}) ]
    
end
module C06MapPrecond_Identity
  type i
  type item'0
  use seq.Seq
  use prelude.Snapshot
  predicate invariant'7 (self : Snapshot.snap_ty (Seq.seq item'0))
  let rec invariant'7 (self:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Snapshot.snap_ty (Seq.seq item'0))
  let rec inv'7 (_x:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'7 x = true
  predicate invariant'6 (self : Seq.seq item'0)
  let rec invariant'6 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq item'0)
  let rec inv'6 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq item'0 . inv'6 x = true
  use prelude.Int16
  use C06MapPrecond_Identity_Closure0_Type as C06MapPrecond_Identity_Closure0_Type
  use prelude.Borrow
  predicate invariant'5 (self : borrowed (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i))
  let rec invariant'5 (self:borrowed (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : borrowed (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i))
  let rec inv'5 (_x:borrowed (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : borrowed (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) . inv'5 x
  = true
  predicate invariant'4 (self : borrowed i)
  let rec invariant'4 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed i)
  let rec inv'4 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  predicate invariant'3 (self : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i)
  let rec invariant'3 (self:C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i)
  let rec inv'3 (_x:C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i . inv'3 x = true
  predicate invariant'2 (self : item'0)
  let rec invariant'2 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : item'0)
  let rec inv'2 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : item'0 . inv'2 x = true
  predicate invariant'1 (self : i)
  let rec invariant'1 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : i)
  let rec inv'1 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : i . inv'1 x = true
  predicate precondition'0 [#"../06_map_precond.rs" 178 14 178 20] (self : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
    
   =
    let (x, _3) = args in true
  use prelude.Snapshot
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'0 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) (produced : Seq.seq item'0)
    
   =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item'0 . inv'1 i
     -> inv'2 e  -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  let rec next_precondition'0 (iter:i) (func:C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) (produced:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func produced} (! return' {result}) ]
    
  predicate unnest'0 [#"../06_map_precond.rs" 178 14 178 20] (self : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) (_2 : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i)
    
   =
    true
  predicate postcondition_mut'0 [#"../06_map_precond.rs" 178 14 178 20] (self : borrowed (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i)) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (result : item'0)
    
   =
    (let (x, _3) = args in true) /\ unnest'0 ( * self) ( ^ self)
  use seq.Seq
  use seq.Seq
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i)
    
   =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : item'0 . forall f : borrowed (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'1 i
     -> inv'2 b
     -> inv'5 f
     -> inv'2 e2
     -> inv'2 e1
     -> inv'6 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  let rec preservation'0 (iter:i) (func:C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) (produced : Seq.seq item'0)
    
   =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : item'0 . forall f : borrowed (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'1 i
     -> inv'2 b
     -> inv'5 f
     -> inv'2 e2
     -> inv'2 e1
     -> inv'6 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  let rec preservation_inv'0 (iter:i) (func:C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) (produced:Seq.seq item'0) (return'  (ret:bool))= {[@expl:precondition] [#"../06_map_precond.rs" 93 42 93 50] inv'6 produced}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 33 93 37] inv'3 func}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 24 93 28] inv'1 iter}
    any [ return' (result:bool)-> {result = preservation_inv'0 iter func produced} (! return' {result}) ] 
  axiom preservation_inv'0_spec : forall iter : i, func : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i, produced : Seq.seq item'0 . ([#"../06_map_precond.rs" 93 24 93 28] inv'1 iter)
   -> ([#"../06_map_precond.rs" 93 33 93 37] inv'3 func)
   -> ([#"../06_map_precond.rs" 93 42 93 50] inv'6 produced)
   -> ([#"../06_map_precond.rs" 92 4 92 83] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  use prelude.Snapshot
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i . forall iter : borrowed i . inv'3 func
     -> inv'4 iter
     -> completed'0 iter
     -> next_precondition'0 ( ^ iter) func (Seq.empty  : Seq.seq item'0) /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i item'0 (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) item'0)
    
   =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  let rec invariant'0 (self:C06MapPrecond_Map_Type.t_map i item'0 (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C06MapPrecond_Map_Type.t_map i item'0 (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) item'0)
    
  let rec inv'0 (_x:C06MapPrecond_Map_Type.t_map i item'0 (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C06MapPrecond_Map_Type.t_map i item'0 (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) item'0 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'1 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'6 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'1 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'6 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'1 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'0 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'0 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'0 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'1 a)
   -> ([#"../common.rs" 21 31 21 33] inv'6 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'1 b)
   -> ([#"../common.rs" 21 61 21 63] inv'6 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'1 c)  -> ([#"../common.rs" 20 14 20 42] produces'0 a (Seq.(++) ab bc) c)
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'1 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'1 self)
   -> ([#"../common.rs" 14 14 14 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  use prelude.Intrinsic
  predicate resolve'0 (self : C06MapPrecond_Map_Type.t_map i item'0 (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) item'0)
    
  let rec resolve'0 (self:C06MapPrecond_Map_Type.t_map i item'0 (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec map'0 (iter:i) (func:C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) (return'  (ret:C06MapPrecond_Map_Type.t_map i item'0 (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) item'0))= {[@expl:precondition] [#"../06_map_precond.rs" 172 4 172 8] inv'3 func}
    {[@expl:precondition] [#"../06_map_precond.rs" 171 4 171 8] inv'1 iter}
    {[@expl:precondition] [#"../06_map_precond.rs" 168 11 168 51] preservation'0 iter func}
    {[@expl:precondition] [#"../06_map_precond.rs" 167 11 167 41] reinitialize'0 ()}
    {[@expl:precondition] [#"../06_map_precond.rs" 166 0 166 131] forall i2 : i . forall e : item'0 . inv'1 i2
     -> inv'2 e
     -> produces'0 iter (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq item'0))}
    any
    [ return' (result:C06MapPrecond_Map_Type.t_map i item'0 (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) item'0)-> {[#"../06_map_precond.rs" 173 5 173 17] inv'0 result}
      {[#"../06_map_precond.rs" 169 10 169 75] result
      = C06MapPrecond_Map_Type.C_Map iter func (Snapshot.new (Seq.empty  : Seq.seq item'0))}
      (! return' {result}) ]
    
  let rec identity (iter:i) (return'  (ret:()))= {[#"../06_map_precond.rs" 177 29 177 33] inv'1 iter}
    (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_4 <- C06MapPrecond_Identity_Closure0_Type.C06mapprecond_identity_closure0 : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i ]
        
        s1
      | s1 = map'0 {iter} {_4}
          (fun (_ret':C06MapPrecond_Map_Type.t_map i item'0 (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) item'0) ->
             [ &_2 <- _ret' ] 
            s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 _2} s1 | s1 = -{resolve'0 _2}- s2 | s2 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- [#"../06_map_precond.rs" 177 38 179 1] () ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & iter : i = iter
    | & _2 : C06MapPrecond_Map_Type.t_map i item'0 (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) item'0 = any_l () : C06MapPrecond_Map_Type.t_map i item'0 (C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i) item'0
    | & _4 : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i = any_l () : C06MapPrecond_Identity_Closure0_Type.c06mapprecond_identity_closure0 i ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C06MapPrecond_Increment_Closure2_Type
  use prelude.UInt32
  use seq.Seq
  use prelude.Snapshot
  use prelude.Int16
  type c06mapprecond_increment_closure2 'u =
    | C06mapprecond_increment_closure2
    
  let rec c06mapprecond_increment_closure2 < 'u > (input:c06mapprecond_increment_closure2 'u) (ret  )= any
    [ good -> {C06mapprecond_increment_closure2  = input} (! ret)
    | bad -> {C06mapprecond_increment_closure2  <> input} {false} any ]
    
end
module C06MapPrecond_Increment_Closure2
  type u
  use prelude.Int16
  use prelude.UInt32
  use seq.Seq
  use prelude.Snapshot
  use C06MapPrecond_Increment_Closure2_Type as C06MapPrecond_Increment_Closure2_Type
  predicate unnest'0 [#"../06_map_precond.rs" 189 8 189 35] (self : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) (_2 : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)
    
   =
    true
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Intrinsic
  use prelude.Int
  predicate resolve'0 (self : borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec c06mapprecond_increment_closure2 (_1:borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)) (x:uint32) (_3:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:uint32))= {[#"../06_map_precond.rs" 188 19 188 27] UInt32.to_int x
    <= 15}
    (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 = UInt32.add {x} {[#"../06_map_precond.rs" 190 24 190 25] (1 : uint32)}
          (fun (_ret':uint32) ->  [ &res1 <- _ret' ] s2)
      | s2 =  [ &res <- res1 ] s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l () : uint32
    | & _1 : borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) = _1
    | & x : uint32 = x
    | & res : uint32 = any_l () : uint32
    | & res1 : uint32 = any_l () : uint32 ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] unnest'0 ( * _1) ( ^ _1)}
      {[@expl:postcondition] [#"../06_map_precond.rs" 189 18 189 33] UInt32.to_int result = UInt32.to_int x + 1}
      (! return' {result}) ]
    
end
module C06MapPrecond_Increment
  type u
  use prelude.UInt32
  use seq.Seq
  use prelude.Snapshot
  predicate invariant'8 (self : Snapshot.snap_ty (Seq.seq uint32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'8 (self:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Snapshot.snap_ty (Seq.seq uint32))
  let rec inv'8 (_x:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Snapshot.snap_ty (Seq.seq uint32) . inv'8 x = true
  use prelude.Int16
  use C06MapPrecond_Increment_Closure2_Type as C06MapPrecond_Increment_Closure2_Type
  use prelude.Borrow
  predicate invariant'7 (self : borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u))
  let rec inv'7 (_x:borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) . inv'7 x
  = true
  predicate invariant'6 (self : Seq.seq (borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Seq.seq (borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq (borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)))
  let rec inv'6 (_x:Seq.seq (borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq (borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)) . inv'6 x
  = true
  predicate invariant'5 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq uint32)
  let rec inv'5 (_x:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq uint32 . inv'5 x = true
  predicate invariant'4 (self : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)
  let rec inv'4 (_x:C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u . inv'4 x = true
  predicate invariant'3 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : uint32)
  let rec inv'3 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : uint32 . inv'3 x = true
  predicate invariant'2 (self : u)
  let rec invariant'2 (self:u) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : u)
  let rec inv'2 (_x:u) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : u . inv'2 x = true
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : u) (visited : Seq.seq uint32) (o : u)
  let rec produces'1 (self:u) (visited:Seq.seq uint32) (o:u) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : u) (ab : Seq.seq uint32) (b : u) (bc : Seq.seq uint32) (c : u) : ()
    
  let rec produces_trans'1 (a:u) (ab:Seq.seq uint32) (b:u) (bc:Seq.seq uint32) (c:u) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'2 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'5 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'2 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'5 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'2 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : u, ab : Seq.seq uint32, b : u, bc : Seq.seq uint32, c : u . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'2 a)
   -> ([#"../common.rs" 21 31 21 33] inv'5 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'2 b)
   -> ([#"../common.rs" 21 61 21 63] inv'5 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'2 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : u) : ()
  let rec produces_refl'1 (self:u) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'2 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : u . ([#"../common.rs" 15 21 15 25] inv'2 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq uint32) self)
  predicate invariant'1 (self : borrowed u)
  let rec invariant'1 (self:borrowed u) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed u)
  let rec inv'1 (_x:borrowed u) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed u . inv'1 x = true
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate inv'0 (_x : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32)
    
  let rec inv'0 (_x:C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  predicate unnest'0 [#"../06_map_precond.rs" 189 8 189 35] (self : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) (_2 : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)
    
   =
    true
  use prelude.UInt32
  use prelude.Int
  predicate postcondition_mut'0 [#"../06_map_precond.rs" 189 8 189 35] (self : borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (result : uint32)
    
   =
    (let (x, _3) = args in UInt32.to_int result = UInt32.to_int x + 1) /\ unnest'0 ( * self) ( ^ self)
  predicate precondition'0 [#"../06_map_precond.rs" 189 8 189 35] (self : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 188 19 188 27] let (x, _3) = args in UInt32.to_int x <= 15
  use prelude.Snapshot
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Snapshot
  use prelude.Snapshot
  use seq.Seq
  predicate produces'0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) (visited : Seq.seq uint32) (succ : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32)
    
   =
    [#"../06_map_precond.rs" 44 8 56 9] unnest'0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ)
    /\ (exists s : Seq.seq uint32 . inv'5 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) s
    /\ (exists fs : Seq.seq (borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)) . inv'6 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i)
    /\ precondition'0 ( * Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  let rec produces'0 (self:C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) (visited:Seq.seq uint32) (succ:C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited succ} (! return' {result}) ]
    
  function produces_trans'0 [#"../06_map_precond.rs" 38 4 38 90] (a : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) (ab : Seq.seq uint32) (b : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) (bc : Seq.seq uint32) (c : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) : ()
    
   =
    [#"../06_map_precond.rs" 33 4 33 10] ()
  let rec produces_trans'0 (a:C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) (ab:Seq.seq uint32) (b:C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) (bc:Seq.seq uint32) (c:C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) (return'  (ret:()))= {[@expl:precondition] [#"../06_map_precond.rs" 38 82 38 83] inv'0 c}
    {[@expl:precondition] [#"../06_map_precond.rs" 38 61 38 63] inv'5 bc}
    {[@expl:precondition] [#"../06_map_precond.rs" 38 52 38 53] inv'0 b}
    {[@expl:precondition] [#"../06_map_precond.rs" 38 31 38 33] inv'5 ab}
    {[@expl:precondition] [#"../06_map_precond.rs" 38 22 38 23] inv'0 a}
    {[@expl:precondition] [#"../06_map_precond.rs" 36 15 36 32] produces'0 b bc c}
    {[@expl:precondition] [#"../06_map_precond.rs" 35 15 35 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32, ab : Seq.seq uint32, b : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32, bc : Seq.seq uint32, c : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32 . ([#"../06_map_precond.rs" 35 15 35 32] produces'0 a ab b)
   -> ([#"../06_map_precond.rs" 36 15 36 32] produces'0 b bc c)
   -> ([#"../06_map_precond.rs" 38 22 38 23] inv'0 a)
   -> ([#"../06_map_precond.rs" 38 31 38 33] inv'5 ab)
   -> ([#"../06_map_precond.rs" 38 52 38 53] inv'0 b)
   -> ([#"../06_map_precond.rs" 38 61 38 63] inv'5 bc)
   -> ([#"../06_map_precond.rs" 38 82 38 83] inv'0 c)
   -> ([#"../06_map_precond.rs" 37 14 37 42] produces'0 a (Seq.(++) ab bc) c)
  function produces_refl'0 [#"../06_map_precond.rs" 31 4 31 26] (self : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) : ()
    
   =
    [#"../06_map_precond.rs" 28 4 28 10] ()
  let rec produces_refl'0 (self:C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) (return'  (ret:()))= {[@expl:precondition] [#"../06_map_precond.rs" 31 21 31 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32 . ([#"../06_map_precond.rs" 31 21 31 25] inv'0 self)
   -> ([#"../06_map_precond.rs" 30 14 30 45] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  use seq.Seq
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : u) (func : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) (produced : Seq.seq uint32)
    
   =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : u . forall e : uint32 . inv'2 i
     -> inv'3 e  -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  let rec next_precondition'0 (iter:u) (func:C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) (produced:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func produced} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : u) (func : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u)
    
   =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : u . forall b : uint32 . forall f : borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) . forall e2 : uint32 . forall e1 : uint32 . forall s : Seq.seq uint32 . inv'2 i
     -> inv'3 b
     -> inv'7 f
     -> inv'3 e2
     -> inv'3 e1
     -> inv'5 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  let rec preservation'0 (iter:u) (func:C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : u) (func : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) (produced : Seq.seq uint32)
    
   =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : u . forall b : uint32 . forall f : borrowed (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) . forall e2 : uint32 . forall e1 : uint32 . forall s : Seq.seq uint32 . inv'2 i
     -> inv'3 b
     -> inv'7 f
     -> inv'3 e2
     -> inv'3 e1
     -> inv'5 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  let rec preservation_inv'0 (iter:u) (func:C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) (produced:Seq.seq uint32) (return'  (ret:bool))= {[@expl:precondition] [#"../06_map_precond.rs" 93 42 93 50] inv'5 produced}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 33 93 37] inv'4 func}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 24 93 28] inv'2 iter}
    any [ return' (result:bool)-> {result = preservation_inv'0 iter func produced} (! return' {result}) ] 
  axiom preservation_inv'0_spec : forall iter : u, func : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u, produced : Seq.seq uint32 . ([#"../06_map_precond.rs" 93 24 93 28] inv'2 iter)
   -> ([#"../06_map_precond.rs" 93 33 93 37] inv'4 func)
   -> ([#"../06_map_precond.rs" 93 42 93 50] inv'5 produced)
   -> ([#"../06_map_precond.rs" 92 4 92 83] produced = (Seq.empty  : Seq.seq uint32)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed u)
  let rec completed'0 (self:borrowed u) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u . forall iter : borrowed u . inv'4 func
     -> inv'1 iter
     -> completed'0 iter
     -> next_precondition'0 ( ^ iter) func (Seq.empty  : Seq.seq uint32) /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32)
    
   =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  let rec invariant'0 (self:C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  use prelude.Intrinsic
  predicate resolve'0 (self : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32)
    
  let rec resolve'0 (self:C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec map'0 (iter:u) (func:C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) (return'  (ret:C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32))= {[@expl:precondition] [#"../06_map_precond.rs" 172 4 172 8] inv'4 func}
    {[@expl:precondition] [#"../06_map_precond.rs" 171 4 171 8] inv'2 iter}
    {[@expl:precondition] [#"../06_map_precond.rs" 168 11 168 51] preservation'0 iter func}
    {[@expl:precondition] [#"../06_map_precond.rs" 167 11 167 41] reinitialize'0 ()}
    {[@expl:precondition] [#"../06_map_precond.rs" 166 0 166 131] forall i2 : u . forall e : uint32 . inv'2 i2
     -> inv'3 e
     -> produces'1 iter (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq uint32))}
    any
    [ return' (result:C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32)-> {[#"../06_map_precond.rs" 173 5 173 17] inv'0 result}
      {[#"../06_map_precond.rs" 169 10 169 75] result
      = C06MapPrecond_Map_Type.C_Map iter func (Snapshot.new (Seq.empty  : Seq.seq uint32))}
      (! return' {result}) ]
    
  let rec increment (iter:u) (return'  (ret:()))= {[#"../06_map_precond.rs" 185 42 185 46] inv'2 iter}
    {[#"../06_map_precond.rs" 182 0 184 2] forall fin : u . forall prod : Seq.seq uint32 . inv'2 fin
     -> produces'1 iter prod fin
     -> (forall x : int . 0 <= x /\ x < Seq.length prod  -> Seq.get prod x <= (10 : uint32))}
    {[#"../06_map_precond.rs" 181 0 181 158] forall done' : borrowed u . inv'1 done'
     -> completed'0 done'
     -> (forall steps : Seq.seq uint32 . forall next : u . inv'2 next
     -> produces'1 ( ^ done') steps next  -> steps = (Seq.empty  : Seq.seq uint32) /\  ^ done' = next)}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0
      [ s0 = 
        [ &_6 <- C06MapPrecond_Increment_Closure2_Type.C06mapprecond_increment_closure2 : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u ]
        
        s1
      | s1 = map'0 {iter} {_6}
          (fun (_ret':C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32) ->
             [ &i <- _ret' ] 
            s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'0 i} s1
      | s1 = -{resolve'0 i}- s2
      | s2 = {[@expl:assertion] [#"../06_map_precond.rs" 193 4 196 5] forall fin : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32 . forall prod : Seq.seq uint32 . inv'0 fin
         -> produces'0 i prod fin
         -> (forall x : int . 0 <= x /\ x < Seq.length prod  -> Seq.get prod x <= (11 : uint32))}
        s3
      | s3 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &_0 <- [#"../06_map_precond.rs" 185 51 197 1] () ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & iter : u = iter
    | & i : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32 = any_l () : C06MapPrecond_Map_Type.t_map u uint32 (C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u) uint32
    | & _6 : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u = any_l () : C06MapPrecond_Increment_Closure2_Type.c06mapprecond_increment_closure2 u ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C06MapPrecond_Counter_Closure2_Type
  use prelude.UInt32
  use seq.Seq
  use prelude.Snapshot
  use prelude.Int16
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  type c06mapprecond_counter_closure2 'i =
    | C06mapprecond_counter_closure2 (borrowed usize)
    
  let rec c06mapprecond_counter_closure2 < 'i > (input:c06mapprecond_counter_closure2 'i) (ret  (cnt:borrowed usize))= any
    [ good (cnt:borrowed usize)-> {C06mapprecond_counter_closure2 cnt = input} (! ret {cnt})
    | bad (cnt:borrowed usize)-> {C06mapprecond_counter_closure2 cnt <> input} {false} any ]
    
end
module C06MapPrecond_Counter_Closure2
  type i
  use prelude.Int16
  use prelude.UInt32
  use seq.Seq
  use prelude.Snapshot
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use C06MapPrecond_Counter_Closure2_Type as C06MapPrecond_Counter_Closure2_Type
  function field_0'0 [#"../06_map_precond.rs" 206 8 206 41] (self : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) : borrowed usize
    
   =
    let C06MapPrecond_Counter_Closure2_Type.C06mapprecond_counter_closure2 a = self in a
  let rec field_0'0 (self:C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) (return'  (ret:borrowed usize))= any
    [ return' (result:borrowed usize)-> {result = field_0'0 self} (! return' {result}) ]
    
  predicate unnest'0 [#"../06_map_precond.rs" 206 8 206 41] (self : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) (_2 : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i)
    
   =
     ^ field_0'0 _2 =  ^ field_0'0 self
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  use prelude.Snapshot
  use prelude.UIntSize
  use prelude.Intrinsic
  predicate resolve'0 (self : borrowed (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec c06mapprecond_counter_closure2 (_1:borrowed (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i)) (x:uint32) (_prod:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:uint32))= {[#"../06_map_precond.rs" 205 19 205 61] UIntSize.to_int ( * field_0'0 ( * _1))
    = Seq.length (Snapshot.inner _prod)
    /\  * field_0'0 ( * _1) < (max'0 : usize)}
    (! bb0
    [ bb0 = s0
      [ s0 = C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 <i> { * _1}
          (fun (r'0:borrowed usize) ->
            UIntSize.add { * r'0} {[#"../06_map_precond.rs" 208 19 208 20] (1 : usize)}
              (fun (_ret':usize) ->
                C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 <i> { * _1}
                  (fun (l'0:borrowed usize) ->
                    
                    [ &_1 <- { _1 with current = (C06MapPrecond_Counter_Closure2_Type.C06mapprecond_counter_closure2 ({ l'0 with current = _ret' ; }) : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) ; } ]
                    
                    s1)))
      | s1 = -{resolve'0 _1}- s2
      | s2 =  [ &res1 <- x ] s3
      | s3 =  [ &res <- res1 ] s4
      | s4 =  [ &_0 <- res ] s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l () : uint32
    | & _1 : borrowed (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) = _1
    | & x : uint32 = x
    | & res : uint32 = any_l () : uint32
    | & res1 : uint32 = any_l () : uint32 ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] unnest'0 ( * _1) ( ^ _1)}
      {[@expl:postcondition] [#"../06_map_precond.rs" 206 18 206 39] UIntSize.to_int ( * field_0'0 ( ^ _1))
      = UIntSize.to_int ( * field_0'0 ( * _1)) + 1}
      (! return' {result}) ]
    
end
module C06MapPrecond_Counter
  type i
  use prelude.UInt32
  use seq.Seq
  use prelude.Snapshot
  predicate invariant'7 (self : Snapshot.snap_ty (Seq.seq uint32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Snapshot.snap_ty (Seq.seq uint32))
  let rec inv'7 (_x:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Snapshot.snap_ty (Seq.seq uint32) . inv'7 x = true
  predicate invariant'6 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq uint32)
  let rec inv'6 (_x:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq uint32 . inv'6 x = true
  use prelude.UIntSize
  use prelude.Int16
  use prelude.Borrow
  use C06MapPrecond_Counter_Closure2_Type as C06MapPrecond_Counter_Closure2_Type
  predicate invariant'5 (self : borrowed (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:borrowed (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : borrowed (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i))
  let rec inv'5 (_x:borrowed (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : borrowed (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) . inv'5 x
  = true
  predicate invariant'4 (self : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i)
  let rec inv'4 (_x:C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i . inv'4 x = true
  predicate invariant'3 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : uint32)
  let rec inv'3 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : uint32 . inv'3 x = true
  predicate invariant'2 (self : i)
  let rec invariant'2 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : i)
  let rec inv'2 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : i . inv'2 x = true
  use seq.Seq
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq uint32) (o : i)
  let rec produces'0 (self:i) (visited:Seq.seq uint32) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq uint32) (b : i) (bc : Seq.seq uint32) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq uint32) (b:i) (bc:Seq.seq uint32) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'2 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'6 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'2 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'6 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'2 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'0 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq uint32, b : i, bc : Seq.seq uint32, c : i . ([#"../common.rs" 18 15 18 32] produces'0 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'0 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'2 a)
   -> ([#"../common.rs" 21 31 21 33] inv'6 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'2 b)
   -> ([#"../common.rs" 21 61 21 63] inv'6 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'2 c)  -> ([#"../common.rs" 20 14 20 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'2 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'2 self)
   -> ([#"../common.rs" 14 14 14 45] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  predicate invariant'1 (self : borrowed i)
  let rec invariant'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed i)
  let rec inv'1 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed i . inv'1 x = true
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  use prelude.Snapshot
  use prelude.UIntSize
  function field_0'0 [#"../06_map_precond.rs" 206 8 206 41] (self : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) : borrowed usize
    
   =
    let C06MapPrecond_Counter_Closure2_Type.C06mapprecond_counter_closure2 a = self in a
  let rec field_0'0 (self:C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) (return'  (ret:borrowed usize))= any
    [ return' (result:borrowed usize)-> {result = field_0'0 self} (! return' {result}) ]
    
  predicate precondition'0 [#"../06_map_precond.rs" 206 8 206 41] (self : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32)))
    
   =
    [#"../06_map_precond.rs" 205 19 205 61] let (x, _prod) = args in UIntSize.to_int ( * field_0'0 self)
    = Seq.length (Snapshot.inner _prod)
    /\  * field_0'0 self < (max'0 : usize)
  use prelude.Snapshot
  use seq.Seq
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) (produced : Seq.seq uint32)
    
   =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : uint32 . inv'2 i
     -> inv'3 e  -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  let rec next_precondition'0 (iter:i) (func:C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) (produced:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func produced} (! return' {result}) ]
    
  predicate unnest'0 [#"../06_map_precond.rs" 206 8 206 41] (self : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) (_2 : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i)
    
   =
     ^ field_0'0 _2 =  ^ field_0'0 self
  predicate postcondition_mut'0 [#"../06_map_precond.rs" 206 8 206 41] (self : borrowed (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i)) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (result : uint32)
    
   =
    (let (x, _prod) = args in UIntSize.to_int ( * field_0'0 ( ^ self)) = UIntSize.to_int ( * field_0'0 ( * self)) + 1)
    /\ unnest'0 ( * self) ( ^ self)
  use seq.Seq
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i)
    
   =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : uint32 . forall f : borrowed (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) . forall e2 : uint32 . forall e1 : uint32 . forall s : Seq.seq uint32 . inv'2 i
     -> inv'3 b
     -> inv'5 f
     -> inv'3 e2
     -> inv'3 e1
     -> inv'6 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  let rec preservation'0 (iter:i) (func:C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) (produced : Seq.seq uint32)
    
   =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : uint32 . forall f : borrowed (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) . forall e2 : uint32 . forall e1 : uint32 . forall s : Seq.seq uint32 . inv'2 i
     -> inv'3 b
     -> inv'5 f
     -> inv'3 e2
     -> inv'3 e1
     -> inv'6 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  let rec preservation_inv'0 (iter:i) (func:C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) (produced:Seq.seq uint32) (return'  (ret:bool))= {[@expl:precondition] [#"../06_map_precond.rs" 93 42 93 50] inv'6 produced}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 33 93 37] inv'4 func}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 24 93 28] inv'2 iter}
    any [ return' (result:bool)-> {result = preservation_inv'0 iter func produced} (! return' {result}) ] 
  axiom preservation_inv'0_spec : forall iter : i, func : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i, produced : Seq.seq uint32 . ([#"../06_map_precond.rs" 93 24 93 28] inv'2 iter)
   -> ([#"../06_map_precond.rs" 93 33 93 37] inv'4 func)
   -> ([#"../06_map_precond.rs" 93 42 93 50] inv'6 produced)
   -> ([#"../06_map_precond.rs" 92 4 92 83] produced = (Seq.empty  : Seq.seq uint32)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i . forall iter : borrowed i . inv'4 func
     -> inv'1 iter
     -> completed'0 iter
     -> next_precondition'0 ( ^ iter) func (Seq.empty  : Seq.seq uint32) /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) uint32)
    
   =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  let rec invariant'0 (self:C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) uint32)
    
  let rec inv'0 (_x:C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) uint32 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  use prelude.Intrinsic
  predicate resolve'0 (self : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) uint32)
    
  let rec resolve'0 (self:C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec map'0 (iter:i) (func:C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) (return'  (ret:C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) uint32))= {[@expl:precondition] [#"../06_map_precond.rs" 172 4 172 8] inv'4 func}
    {[@expl:precondition] [#"../06_map_precond.rs" 171 4 171 8] inv'2 iter}
    {[@expl:precondition] [#"../06_map_precond.rs" 168 11 168 51] preservation'0 iter func}
    {[@expl:precondition] [#"../06_map_precond.rs" 167 11 167 41] reinitialize'0 ()}
    {[@expl:precondition] [#"../06_map_precond.rs" 166 0 166 131] forall i2 : i . forall e : uint32 . inv'2 i2
     -> inv'3 e
     -> produces'0 iter (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq uint32))}
    any
    [ return' (result:C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) uint32)-> {[#"../06_map_precond.rs" 173 5 173 17] inv'0 result}
      {[#"../06_map_precond.rs" 169 10 169 75] result
      = C06MapPrecond_Map_Type.C_Map iter func (Snapshot.new (Seq.empty  : Seq.seq uint32))}
      (! return' {result}) ]
    
  let rec counter (iter:i) (return'  (ret:()))= {[#"../06_map_precond.rs" 201 40 201 44] inv'2 iter}
    {[#"../06_map_precond.rs" 200 0 200 92] forall fin : i . forall prod : Seq.seq uint32 . inv'2 fin
     -> produces'0 iter prod fin  -> Seq.length prod <= UIntSize.to_int (max'0 : usize)}
    {[#"../06_map_precond.rs" 199 0 199 158] forall done' : borrowed i . inv'1 done'
     -> completed'0 done'
     -> (forall steps : Seq.seq uint32 . forall next : i . inv'2 next
     -> produces'0 ( ^ done') steps next  -> steps = (Seq.empty  : Seq.seq uint32) /\  ^ done' = next)}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &cnt <- [#"../06_map_precond.rs" 202 18 202 19] (0 : usize) ] s1
      | s1 = Borrow.borrow_mut <usize> {cnt} (fun (_ret':borrowed usize) ->  [ &_8 <- _ret' ]  [ &cnt <-  ^ _8 ] s2)
      | s2 = 
        [ &_7 <- C06MapPrecond_Counter_Closure2_Type.C06mapprecond_counter_closure2 _8 : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i ]
        
        (any [ any_ (_any:borrowed usize)-> (!  [ &_8 <- _any ] s3) ] )
      | s3 = map'0 {iter} {_7}
          (fun (_ret':C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) uint32) ->
             [ &_5 <- _ret' ] 
            s4)
      | s4 = bb2 ]
      
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'0 _5} s1 | s1 = -{resolve'0 _5}- s2 | s2 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &_0 <- [#"../06_map_precond.rs" 201 49 212 1] () ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & iter : i = iter
    | & cnt : usize = any_l () : usize
    | & _5 : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) uint32 = any_l () : C06MapPrecond_Map_Type.t_map i uint32 (C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i) uint32
    | & _7 : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i = any_l () : C06MapPrecond_Counter_Closure2_Type.c06mapprecond_counter_closure2 i
    | & _8 : borrowed usize = any_l () : borrowed usize ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C06MapPrecond_Impl0
  type i
  type b
  type f
  use prelude.Borrow
  predicate invariant'12 (self : borrowed i)
  let rec invariant'12 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'12 self} (! return' {result}) ]
    
  predicate inv'12 (_x : borrowed i)
  let rec inv'12 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'12 _x} (! return' {result}) ]
    
  axiom inv'12 : forall x : borrowed i . inv'12 x = true
  type item'0
  use seq.Seq
  use prelude.Snapshot
  predicate invariant'11 (self : Snapshot.snap_ty (Seq.seq item'0))
  let rec invariant'11 (self:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  predicate inv'11 (_x : Snapshot.snap_ty (Seq.seq item'0))
  let rec inv'11 (_x:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  axiom inv'11 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'11 x = true
  predicate invariant'10 (self : f)
  let rec invariant'10 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : f)
  let rec inv'10 (_x:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : f . inv'10 x = true
  predicate invariant'9 (self : i)
  let rec invariant'9 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : i)
  let rec inv'9 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ] 
  axiom inv'9 : forall x : i . inv'9 x = true
  predicate invariant'8 (self : Seq.seq (borrowed f))
  let rec invariant'8 (self:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Seq.seq (borrowed f))
  let rec inv'8 (_x:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Seq.seq (borrowed f) . inv'8 x = true
  predicate invariant'7 (self : Seq.seq item'0)
  let rec invariant'7 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Seq.seq item'0)
  let rec inv'7 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Seq.seq item'0 . inv'7 x = true
  predicate invariant'6 (self : item'0)
  let rec invariant'6 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : item'0)
  let rec inv'6 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : item'0 . inv'6 x = true
  predicate invariant'5 (self : borrowed f)
  let rec invariant'5 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : borrowed f)
  let rec inv'5 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : borrowed f . inv'5 x = true
  predicate invariant'4 (self : b)
  let rec invariant'4 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : b)
  let rec inv'4 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : b . inv'4 x = true
  predicate invariant'3 (self : Seq.seq b)
  let rec invariant'3 (self:Seq.seq b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq b)
  let rec inv'3 (_x:Seq.seq b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq b . inv'3 x = true
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  let rec precondition'0 (self:f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use prelude.Snapshot
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  use seq.Seq
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 84 8 88 9] forall i : i . forall e : item'0 . inv'9 i
     -> inv'6 e  -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  let rec next_precondition'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func produced} (! return' {result}) ]
    
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [#"../06_map_precond.rs" 106 8 113 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'9 i
     -> inv'4 b
     -> inv'5 f
     -> inv'6 e2
     -> inv'6 e1
     -> inv'7 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [#"../06_map_precond.rs" 94 8 101 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'9 i
     -> inv'4 b
     -> inv'5 f
     -> inv'6 e2
     -> inv'6 e1
     -> inv'7 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  let rec preservation_inv'0 (iter:i) (func:f) (produced:Seq.seq item'0) (return'  (ret:bool))= {[@expl:precondition] [#"../06_map_precond.rs" 93 42 93 50] inv'7 produced}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 33 93 37] inv'10 func}
    {[@expl:precondition] [#"../06_map_precond.rs" 93 24 93 28] inv'9 iter}
    any [ return' (result:bool)-> {result = preservation_inv'0 iter func produced} (! return' {result}) ] 
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([#"../06_map_precond.rs" 93 24 93 28] inv'9 iter)
   -> ([#"../06_map_precond.rs" 93 33 93 37] inv'10 func)
   -> ([#"../06_map_precond.rs" 93 42 93 50] inv'7 produced)
   -> ([#"../06_map_precond.rs" 92 4 92 83] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  use prelude.Snapshot
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [#"../06_map_precond.rs" 118 8 123 9] forall func : f . forall iter : borrowed i . inv'10 func
     -> inv'12 iter
     -> completed'1 iter
     -> next_precondition'0 ( ^ iter) func (Seq.empty  : Seq.seq item'0) /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'2 [#"../06_map_precond.rs" 157 4 157 30] (self : C06MapPrecond_Map_Type.t_map i b f item'0) =
    [#"../06_map_precond.rs" 159 12 161 73] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  let rec invariant'2 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : C06MapPrecond_Map_Type.t_map i b f item'0)
  let rec inv'2 (_x:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : C06MapPrecond_Map_Type.t_map i b f item'0 . inv'2 x
  = (invariant'2 x
  /\ match x with
    | C06MapPrecond_Map_Type.C_Map iter func produced -> true
    end)
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'1 (self : Core_Option_Option_Type.t_option b)
  let rec invariant'1 (self:Core_Option_Option_Type.t_option b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Core_Option_Option_Type.t_option b)
  let rec inv'1 (_x:Core_Option_Option_Type.t_option b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Core_Option_Option_Type.t_option b . inv'1 x = true
  predicate invariant'0 (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item'0))
  let rec invariant'0 (self:borrowed (C06MapPrecond_Map_Type.t_map i b f item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed (C06MapPrecond_Map_Type.t_map i b f item'0))
  let rec inv'0 (_x:borrowed (C06MapPrecond_Map_Type.t_map i b f item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed (C06MapPrecond_Map_Type.t_map i b f item'0) . inv'0 x
  = (inv'2 ( * x) /\ inv'2 ( ^ x))
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use prelude.Snapshot
  use seq.Seq
  use seq.Seq
  predicate produces'0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : C06MapPrecond_Map_Type.t_map i b f item'0) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i b f item'0)
    
   =
    [#"../06_map_precond.rs" 44 8 56 9] unnest'0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'7 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) s
    /\ (exists fs : Seq.seq (borrowed f) . inv'8 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C06MapPrecond_Map_Type.map_func self) ( * Seq.get fs i)
    /\ precondition'0 ( * Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  let rec produces'0 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (visited:Seq.seq b) (succ:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited succ} (! return' {result}) ]
    
  use seq.Seq
  predicate produces_one'0 [#"../06_map_precond.rs" 142 4 142 57] (self : C06MapPrecond_Map_Type.t_map i b f item'0) (visited : b) (succ : C06MapPrecond_Map_Type.t_map i b f item'0)
    
   =
    [#"../06_map_precond.rs" 143 8 149 9] exists f : borrowed f . inv'5 f
    /\  * f = C06MapPrecond_Map_Type.map_func self
    /\  ^ f = C06MapPrecond_Map_Type.map_func succ
    /\ (exists e : item'0 . inv'6 e
    /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e
    /\ precondition'0 ( * f) (e, C06MapPrecond_Map_Type.map_produced self)
    /\ postcondition_mut'0 f (e, C06MapPrecond_Map_Type.map_produced self) visited)
  let rec produces_one'0 (self:C06MapPrecond_Map_Type.t_map i b f item'0) (visited:b) (succ:C06MapPrecond_Map_Type.t_map i b f item'0) (return'  (ret:bool))= {[@expl:precondition] [#"../06_map_precond.rs" 142 38 142 42] inv'2 succ}
    {[@expl:precondition] [#"../06_map_precond.rs" 142 26 142 33] inv'4 visited}
    {[@expl:precondition] [#"../06_map_precond.rs" 142 20 142 24] inv'2 self}
    any [ return' (result:bool)-> {result = produces_one'0 self visited succ} (! return' {result}) ] 
  axiom produces_one'0_spec : forall self : C06MapPrecond_Map_Type.t_map i b f item'0, visited : b, succ : C06MapPrecond_Map_Type.t_map i b f item'0 . ([#"../06_map_precond.rs" 142 20 142 24] inv'2 self)
   -> ([#"../06_map_precond.rs" 142 26 142 33] inv'4 visited)
   -> ([#"../06_map_precond.rs" 142 38 142 42] inv'2 succ)
   -> ([#"../06_map_precond.rs" 141 14 141 68] produces_one'0 self visited succ
  = produces'0 self (Seq.singleton visited) succ)
  predicate completed'0 [#"../06_map_precond.rs" 21 4 21 35] (self : borrowed (C06MapPrecond_Map_Type.t_map i b f item'0))
    
   =
    [#"../06_map_precond.rs" 22 8 25 9] Snapshot.inner (C06MapPrecond_Map_Type.map_produced ( ^ self))
    = (Seq.empty  : Seq.seq item'0)
    /\ completed'1 (Borrow.borrow_logic (C06MapPrecond_Map_Type.map_iter ( * self)) (C06MapPrecond_Map_Type.map_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C06MapPrecond_Map_Type.map_func ( * self) = C06MapPrecond_Map_Type.map_func ( ^ self)
  let rec completed'0 (self:borrowed (C06MapPrecond_Map_Type.t_map i b f item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  goal next_refn : [#"../06_map_precond.rs" 63 4 63 44] forall self : borrowed (C06MapPrecond_Map_Type.t_map i b f item'0) . inv'0 self
   -> inv'0 self
  /\ (forall result : Core_Option_Option_Type.t_option b . inv'1 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces_one'0 ( * self) v ( ^ self)
    end
   -> inv'1 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_trans_refn : [#"../06_map_precond.rs" 38 4 38 90] forall a : C06MapPrecond_Map_Type.t_map i b f item'0 . forall ab : Seq.seq b . forall b : C06MapPrecond_Map_Type.t_map i b f item'0 . forall bc : Seq.seq b . forall c : C06MapPrecond_Map_Type.t_map i b f item'0 . inv'2 c
  /\ inv'3 bc /\ inv'2 b /\ inv'3 ab /\ inv'2 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'2 c
  /\ inv'3 bc
  /\ inv'2 b
  /\ inv'3 ab
  /\ inv'2 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  goal produces_refl_refn : [#"../06_map_precond.rs" 31 4 31 26] forall self : C06MapPrecond_Map_Type.t_map i b f item'0 . inv'2 self
   -> inv'2 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq b) self
   -> produces'0 self (Seq.empty  : Seq.seq b) self)
end
module C06MapPrecond_Impl2
  type i
  type b
  type f
end
