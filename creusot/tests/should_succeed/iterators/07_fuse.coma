
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C07Fuse_Fuse_Type
  use Core_Option_Option_Type as Option'0
  
  type t_fuse 'i =
    | C_Fuse (Option'0.t_option 'i)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_fuse < 'i > (input:t_fuse 'i) (ret  (iter:Option'0.t_option 'i))= any
    [ good (iter:Option'0.t_option 'i)-> {C_Fuse iter = input} (! ret {iter})
    | bad (iter:Option'0.t_option 'i)-> {C_Fuse iter <> input} {false} any ]
    
  
  function fuse_iter (self : t_fuse 'i) : Option'0.t_option 'i =
    match self with
      | C_Fuse a -> a
      end
end
module C07Fuse_Impl0_Next
  type i
  
  let%span s07_fuse0 = "../07_fuse.rs" 40 14 40 28
  
  let%span s07_fuse1 = "../07_fuse.rs" 39 17 39 21
  
  let%span s07_fuse2 = "../07_fuse.rs" 35 14 38 5
  
  let%span s07_fuse3 = "../07_fuse.rs" 39 26 39 44
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../common.rs" 18 15 18 32
  
  let%span span6 = "../common.rs" 19 15 19 32
  
  let%span span7 = "../common.rs" 21 22 21 23
  
  let%span span8 = "../common.rs" 21 31 21 33
  
  let%span span9 = "../common.rs" 21 52 21 53
  
  let%span span10 = "../common.rs" 21 61 21 63
  
  let%span span11 = "../common.rs" 21 82 21 83
  
  let%span span12 = "../common.rs" 20 14 20 42
  
  let%span span13 = "../common.rs" 15 21 15 25
  
  let%span span14 = "../common.rs" 14 14 14 45
  
  let%span span15 = "../07_fuse.rs" 26 8 32 9
  
  let%span span16 = "../07_fuse.rs" 18 12 19 32
  
  let%span span17 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span18 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span19 = "../common.rs" 27 17 27 21
  
  let%span span20 = "../common.rs" 23 14 26 5
  
  let%span span21 = "../common.rs" 27 26 27 44
  
  type item'0
  
  use seq.Seq
  
  predicate invariant'6 (self : Seq.seq item'0) =
    [%#span4] true
  
  predicate inv'6 (_x : Seq.seq item'0)
  
  axiom inv'6 : forall x : Seq.seq item'0 . inv'6 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'5 (self : Option'0.t_option item'0) =
    [%#span4] true
  
  predicate inv'5 (_x : Option'0.t_option item'0)
  
  axiom inv'5 : forall x : Option'0.t_option item'0 . inv'5 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed i)
  
  predicate inv'4 (_x : borrowed i)
  
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  
  use seq.Seq
  
  predicate inv'3 (_x : i)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span5] produces'1 a ab b)
   -> ([%#span6] produces'1 b bc c)
   -> ([%#span7] inv'3 a)
   -> ([%#span8] inv'6 ab)
   -> ([%#span9] inv'3 b)
   -> ([%#span10] inv'6 bc)  -> ([%#span11] inv'3 c)  -> ([%#span12] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span13] inv'3 self)
   -> ([%#span14] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate invariant'3 (self : i)
  
  axiom inv'3 : forall x : i . inv'3 x = true
  
  use C07Fuse_Fuse_Type as Fuse'0
  
  predicate invariant'2 (self : borrowed (Fuse'0.t_fuse i)) =
    [%#span4] true
  
  predicate inv'2 (_x : borrowed (Fuse'0.t_fuse i))
  
  axiom inv'2 : forall x : borrowed (Fuse'0.t_fuse i) . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (Option'0.t_option i)) =
    [%#span4] true
  
  predicate inv'1 (_x : borrowed (Option'0.t_option i))
  
  axiom inv'1 : forall x : borrowed (Option'0.t_option i) . inv'1 x = true
  
  predicate invariant'0 (self : Option'0.t_option i) =
    [%#span4] true
  
  predicate inv'0 (_x : Option'0.t_option i)
  
  axiom inv'0 : forall x : Option'0.t_option i . inv'0 x = true
  
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : Fuse'0.t_fuse i) (prod : Seq.seq item'0) (other : Fuse'0.t_fuse i)
    
   =
    [%#span15] match C07Fuse_Fuse_Type.fuse_iter self with
      | Option'0.C_None -> prod = (Seq.empty  : Seq.seq item'0)
      /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Option'0.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Option'0.C_Some i2 -> produces'1 i prod i2
        | Option'0.C_None -> false
        end
      end
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate completed'0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (Fuse'0.t_fuse i)) =
    [%#span16] (C07Fuse_Fuse_Type.fuse_iter ( * self) = Option'0.C_None
    \/ (exists it : borrowed i . inv'4 it
    /\ completed'1 it /\ C07Fuse_Fuse_Type.fuse_iter ( * self) = Option'0.C_Some ( * it)))
    /\ C07Fuse_Fuse_Type.fuse_iter ( ^ self) = Option'0.C_None
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'4 (self : Option'0.t_option i) =
    [%#span17] true
  
  predicate resolve'3 (self : Option'0.t_option item'0) =
    [%#span17] true
  
  predicate resolve'2 (self : borrowed i) =
    [%#span18]  ^ self =  * self
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_option item'0))= {[@expl:precondition] [%#span19] inv'4 self}
    any
    [ return' (result:Option'0.t_option item'0)-> {[%#span21] inv'5 result}
      {[%#span20] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed (Fuse'0.t_fuse i)) =
    [%#span18]  ^ self =  * self
  
  predicate resolve'0 (self : borrowed (Option'0.t_option i)) =
    [%#span18]  ^ self =  * self
  
  let rec next (self:borrowed (Fuse'0.t_fuse i)) (return'  (ret:Option'0.t_option item'0))= {[%#s07_fuse1] inv'2 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Fuse'0.t_fuse <i> { * self}
          (fun (riter'0:Option'0.t_option i) ->
            Borrow.borrow_final <Option'0.t_option i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_option i)) ->
                 [ &_3 <- _ret' ] 
                Fuse'0.t_fuse <i> { * self}
                  (fun (l_iter'0:Option'0.t_option i) ->
                     [ &self <- { self with current = Fuse'0.C_Fuse ( ^ _3) ; } ] 
                    s1)))
      | s1 = -{inv'0 ( ^ _3)}- s2
      | s2 = any [ br0 -> { * _3 = Option'0.C_None } (! bb2) | br1 (a:i)-> { * _3 = Option'0.C_Some a} (! bb3) ]  ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'1 _3} s1
      | s1 = -{resolve'0 _3}- s2
      | s2 = {[@expl:type invariant] inv'2 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = {[%#s07_fuse0] false} any ]
      
    | bb3 = s0
      [ s0 = Option'0.some <i> { * _3}
          (fun (r0'0:i) ->
            Borrow.borrow_final <i> {r0'0} {Borrow.inherit_id (Borrow.get_id _3) 1}
              (fun (_ret':borrowed i) ->
                 [ &iter <- _ret' ] 
                Option'0.some <i> { * _3}
                  (fun (l_0'0:i) ->  [ &_3 <- { _3 with current = Option'0.C_Some ( ^ iter) ; } ] s1)))
      | s1 = -{inv'3 ( ^ iter)}- s2
      | s2 = Borrow.borrow_final <i> { * iter} {Borrow.get_id iter}
          (fun (_ret':borrowed i) ->  [ &_7 <- _ret' ]  [ &iter <- { iter with current = ( ^ _7) ; } ] s3)
      | s3 = -{inv'3 ( ^ _7)}- s4
      | s4 = next'0 {_7} (fun (_ret':Option'0.t_option item'0) ->  [ &_6 <- _ret' ] s5)
      | s5 = bb5 ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'4 iter} s1
      | s1 = -{resolve'2 iter}- s2
      | s2 = {[@expl:type invariant] inv'1 _3} s3
      | s3 = -{resolve'0 _3}- s4
      | s4 = any [ br0 -> {_6 = Option'0.C_None } (! bb7) | br1 (a:item'0)-> {_6 = Option'0.C_Some a} (! bb6) ]  ]
      
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'2 self} s1
      | s1 = -{resolve'1 self}- s2
      | s2 =  [ &x <- _6 ] (any [ any_ (_any:Option'0.t_option item'0)-> (!  [ &_6 <- _any ] s3) ] )
      | s3 =  [ &_0 <- x ] (any [ any_ (_any:Option'0.t_option item'0)-> (!  [ &x <- _any ] s4) ] )
      | s4 = bb12 ]
      
    | bb12 = bb13
    | bb7 = bb8
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'5 _6} s1
      | s1 = -{resolve'3 _6}- s2
      | s2 =  [ &_9 <- Option'0.C_None ] s3
      | s3 = bb9 ]
      
    | bb9 = s0
      [ s0 = Fuse'0.t_fuse <i> { * self}
          (fun (l_iter'0:Option'0.t_option i) ->
             [ &self <- { self with current = Fuse'0.C_Fuse _9 ; } ] 
            (any [ any_ (_any:Option'0.t_option i)-> (!  [ &_9 <- _any ] s1) ] ))
      | s1 = Fuse'0.t_fuse <i> { * self}
          (fun (riter'0:Option'0.t_option i) -> {[@expl:type invariant] inv'0 riter'0} s2)
      | s2 = Fuse'0.t_fuse <i> { * self} (fun (riter'1:Option'0.t_option i) -> -{resolve'4 riter'1}- s3)
      | s3 = {[@expl:type invariant] inv'2 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 = bb11 ]
      
    | bb11 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb13 ] 
    | bb13 = bb14
    | bb14 = bb15
    | bb2 = bb4
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'1 _3} s1
      | s1 = -{resolve'0 _3}- s2
      | s2 =  [ &_0 <- Option'0.C_None ] s3
      | s3 = {[@expl:type invariant] inv'2 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 = bb15 ]
      
    | bb15 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option item'0 = any_l ()
    | & self : borrowed (Fuse'0.t_fuse i) = self
    | & _3 : borrowed (Option'0.t_option i) = any_l ()
    | & iter : borrowed i = any_l ()
    | & _6 : Option'0.t_option item'0 = any_l ()
    | & _7 : borrowed i = any_l ()
    | & _9 : Option'0.t_option i = any_l ()
    | & x : Option'0.t_option item'0 = any_l () ]
    
    [ return' (result:Option'0.t_option item'0)-> {[@expl:postcondition] [%#s07_fuse3] inv'5 result}
      {[@expl:postcondition] [%#s07_fuse2] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C07Fuse_Impl0_ProducesRefl_Impl
  type i
  
  let%span s07_fuse0 = "../07_fuse.rs" 55 21 55 25
  
  let%span s07_fuse1 = "../07_fuse.rs" 54 14 54 45
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../common.rs" 18 15 18 32
  
  let%span span4 = "../common.rs" 19 15 19 32
  
  let%span span5 = "../common.rs" 21 22 21 23
  
  let%span span6 = "../common.rs" 21 31 21 33
  
  let%span span7 = "../common.rs" 21 52 21 53
  
  let%span span8 = "../common.rs" 21 61 21 63
  
  let%span span9 = "../common.rs" 21 82 21 83
  
  let%span span10 = "../common.rs" 20 14 20 42
  
  let%span span11 = "../common.rs" 15 21 15 25
  
  let%span span12 = "../common.rs" 14 14 14 45
  
  let%span span13 = "../07_fuse.rs" 26 8 32 9
  
  type item'0
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq item'0) =
    [%#span2] true
  
  predicate inv'2 (_x : Seq.seq item'0)
  
  axiom inv'2 : forall x : Seq.seq item'0 . inv'2 x = true
  
  predicate invariant'1 (self : i)
  
  predicate inv'1 (_x : i)
  
  axiom inv'1 : forall x : i . inv'1 x = true
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span3] produces'1 a ab b)
   -> ([%#span4] produces'1 b bc c)
   -> ([%#span5] inv'1 a)
   -> ([%#span6] inv'2 ab)
   -> ([%#span7] inv'1 b)
   -> ([%#span8] inv'2 bc)  -> ([%#span9] inv'1 c)  -> ([%#span10] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span11] inv'1 self)
   -> ([%#span12] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  use C07Fuse_Fuse_Type as Fuse'0
  
  predicate invariant'0 (self : Fuse'0.t_fuse i) =
    [%#span2] true
  
  predicate inv'0 (_x : Fuse'0.t_fuse i)
  
  axiom inv'0 : forall x : Fuse'0.t_fuse i . inv'0 x = true
  
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  
  use Core_Option_Option_Type as Option'0
  
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : Fuse'0.t_fuse i) (prod : Seq.seq item'0) (other : Fuse'0.t_fuse i)
    
   =
    [%#span13] match C07Fuse_Fuse_Type.fuse_iter self with
      | Option'0.C_None -> prod = (Seq.empty  : Seq.seq item'0)
      /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Option'0.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Option'0.C_Some i2 -> produces'1 i prod i2
        | Option'0.C_None -> false
        end
      end
  
  constant self  : Fuse'0.t_fuse i
  
  function produces_refl [#"../07_fuse.rs" 55 4 55 26] (self : Fuse'0.t_fuse i) : ()
  
  goal vc_produces_refl : ([%#s07_fuse0] inv'0 self)
   -> ([%#s07_fuse1] produces'0 self (Seq.empty  : Seq.seq item'0) self)
end
module C07Fuse_Impl0_ProducesTrans_Impl
  type i
  
  let%span s07_fuse0 = "../07_fuse.rs" 59 15 59 32
  
  let%span s07_fuse1 = "../07_fuse.rs" 60 15 60 32
  
  let%span s07_fuse2 = "../07_fuse.rs" 62 22 62 23
  
  let%span s07_fuse3 = "../07_fuse.rs" 62 31 62 33
  
  let%span s07_fuse4 = "../07_fuse.rs" 62 52 62 53
  
  let%span s07_fuse5 = "../07_fuse.rs" 62 61 62 63
  
  let%span s07_fuse6 = "../07_fuse.rs" 62 82 62 83
  
  let%span s07_fuse7 = "../07_fuse.rs" 61 14 61 42
  
  let%span span8 = "../common.rs" 18 15 18 32
  
  let%span span9 = "../common.rs" 19 15 19 32
  
  let%span span10 = "../common.rs" 21 22 21 23
  
  let%span span11 = "../common.rs" 21 31 21 33
  
  let%span span12 = "../common.rs" 21 52 21 53
  
  let%span span13 = "../common.rs" 21 61 21 63
  
  let%span span14 = "../common.rs" 21 82 21 83
  
  let%span span15 = "../common.rs" 20 14 20 42
  
  let%span span16 = "../common.rs" 15 21 15 25
  
  let%span span17 = "../common.rs" 14 14 14 45
  
  let%span span18 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span19 = "../07_fuse.rs" 26 8 32 9
  
  predicate invariant'2 (self : i)
  
  predicate inv'2 (_x : i)
  
  axiom inv'2 : forall x : i . inv'2 x = true
  
  type item'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'1 (_x : Seq.seq item'0)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span8] produces'1 a ab b)
   -> ([%#span9] produces'1 b bc c)
   -> ([%#span10] inv'2 a)
   -> ([%#span11] inv'1 ab)
   -> ([%#span12] inv'2 b)
   -> ([%#span13] inv'1 bc)  -> ([%#span14] inv'2 c)  -> ([%#span15] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span16] inv'2 self)
   -> ([%#span17] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate invariant'1 (self : Seq.seq item'0) =
    [%#span18] true
  
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  
  use C07Fuse_Fuse_Type as Fuse'0
  
  predicate invariant'0 (self : Fuse'0.t_fuse i) =
    [%#span18] true
  
  predicate inv'0 (_x : Fuse'0.t_fuse i)
  
  axiom inv'0 : forall x : Fuse'0.t_fuse i . inv'0 x = true
  
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  
  use Core_Option_Option_Type as Option'0
  
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : Fuse'0.t_fuse i) (prod : Seq.seq item'0) (other : Fuse'0.t_fuse i)
    
   =
    [%#span19] match C07Fuse_Fuse_Type.fuse_iter self with
      | Option'0.C_None -> prod = (Seq.empty  : Seq.seq item'0)
      /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Option'0.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Option'0.C_Some i2 -> produces'1 i prod i2
        | Option'0.C_None -> false
        end
      end
  
  constant a  : Fuse'0.t_fuse i
  
  constant ab  : Seq.seq item'0
  
  constant b  : Fuse'0.t_fuse i
  
  constant bc  : Seq.seq item'0
  
  constant c  : Fuse'0.t_fuse i
  
  function produces_trans [#"../07_fuse.rs" 62 4 62 90] (a : Fuse'0.t_fuse i) (ab : Seq.seq item'0) (b : Fuse'0.t_fuse i) (bc : Seq.seq item'0) (c : Fuse'0.t_fuse i) : ()
    
  
  goal vc_produces_trans : ([%#s07_fuse6] inv'0 c)
   -> ([%#s07_fuse5] inv'1 bc)
   -> ([%#s07_fuse4] inv'0 b)
   -> ([%#s07_fuse3] inv'1 ab)
   -> ([%#s07_fuse2] inv'0 a)
   -> ([%#s07_fuse1] produces'0 b bc c)
   -> ([%#s07_fuse0] produces'0 a ab b)  -> ([%#s07_fuse7] produces'0 a (Seq.(++) ab bc) c)
end
module C07Fuse_Impl1_IsFused_Impl
  type i
  
  let%span s07_fuse0 = "../07_fuse.rs" 78 15 78 31
  
  let%span s07_fuse1 = "../07_fuse.rs" 79 15 79 44
  
  let%span s07_fuse2 = "../07_fuse.rs" 81 21 81 25
  
  let%span s07_fuse3 = "../07_fuse.rs" 81 27 81 32
  
  let%span s07_fuse4 = "../07_fuse.rs" 81 51 81 55
  
  let%span s07_fuse5 = "../07_fuse.rs" 80 14 80 50
  
  let%span span6 = "../common.rs" 18 15 18 32
  
  let%span span7 = "../common.rs" 19 15 19 32
  
  let%span span8 = "../common.rs" 21 22 21 23
  
  let%span span9 = "../common.rs" 21 31 21 33
  
  let%span span10 = "../common.rs" 21 52 21 53
  
  let%span span11 = "../common.rs" 21 61 21 63
  
  let%span span12 = "../common.rs" 21 82 21 83
  
  let%span span13 = "../common.rs" 20 14 20 42
  
  let%span span14 = "../common.rs" 15 21 15 25
  
  let%span span15 = "../common.rs" 14 14 14 45
  
  let%span span16 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span17 = "../07_fuse.rs" 26 8 32 9
  
  let%span span18 = "../07_fuse.rs" 59 15 59 32
  
  let%span span19 = "../07_fuse.rs" 60 15 60 32
  
  let%span span20 = "../07_fuse.rs" 62 22 62 23
  
  let%span span21 = "../07_fuse.rs" 62 31 62 33
  
  let%span span22 = "../07_fuse.rs" 62 52 62 53
  
  let%span span23 = "../07_fuse.rs" 62 61 62 63
  
  let%span span24 = "../07_fuse.rs" 62 82 62 83
  
  let%span span25 = "../07_fuse.rs" 61 14 61 42
  
  let%span span26 = "../07_fuse.rs" 57 4 57 10
  
  let%span span27 = "../07_fuse.rs" 55 21 55 25
  
  let%span span28 = "../07_fuse.rs" 54 14 54 45
  
  let%span span29 = "../07_fuse.rs" 52 4 52 10
  
  let%span span30 = "../07_fuse.rs" 18 12 19 32
  
  predicate invariant'4 (self : i)
  
  predicate inv'4 (_x : i)
  
  axiom inv'4 : forall x : i . inv'4 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed i)
  
  predicate inv'3 (_x : borrowed i)
  
  axiom inv'3 : forall x : borrowed i . inv'3 x = true
  
  type item'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'1 (_x : Seq.seq item'0)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'1_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span6] produces'1 a ab b)
   -> ([%#span7] produces'1 b bc c)
   -> ([%#span8] inv'4 a)
   -> ([%#span9] inv'1 ab)
   -> ([%#span10] inv'4 b)
   -> ([%#span11] inv'1 bc)  -> ([%#span12] inv'4 c)  -> ([%#span13] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'1_spec : forall self : i . ([%#span14] inv'4 self)
   -> ([%#span15] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  use C07Fuse_Fuse_Type as Fuse'0
  
  predicate invariant'2 (self : Fuse'0.t_fuse i) =
    [%#span16] true
  
  predicate inv'2 (_x : Fuse'0.t_fuse i)
  
  axiom inv'2 : forall x : Fuse'0.t_fuse i . inv'2 x = true
  
  predicate invariant'1 (self : Seq.seq item'0) =
    [%#span16] true
  
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  
  predicate invariant'0 (self : borrowed (Fuse'0.t_fuse i)) =
    [%#span16] true
  
  predicate inv'0 (_x : borrowed (Fuse'0.t_fuse i))
  
  axiom inv'0 : forall x : borrowed (Fuse'0.t_fuse i) . inv'0 x = true
  
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  
  use Core_Option_Option_Type as Option'0
  
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : Fuse'0.t_fuse i) (prod : Seq.seq item'0) (other : Fuse'0.t_fuse i)
    
   =
    [%#span17] match C07Fuse_Fuse_Type.fuse_iter self with
      | Option'0.C_None -> prod = (Seq.empty  : Seq.seq item'0)
      /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Option'0.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Option'0.C_Some i2 -> produces'1 i prod i2
        | Option'0.C_None -> false
        end
      end
  
  function produces_trans'0 [#"../07_fuse.rs" 62 4 62 90] (a : Fuse'0.t_fuse i) (ab : Seq.seq item'0) (b : Fuse'0.t_fuse i) (bc : Seq.seq item'0) (c : Fuse'0.t_fuse i) : ()
    
   =
    [%#span26] ()
  
  axiom produces_trans'0_spec : forall a : Fuse'0.t_fuse i, ab : Seq.seq item'0, b : Fuse'0.t_fuse i, bc : Seq.seq item'0, c : Fuse'0.t_fuse i . ([%#span18] produces'0 a ab b)
   -> ([%#span19] produces'0 b bc c)
   -> ([%#span20] inv'2 a)
   -> ([%#span21] inv'1 ab)
   -> ([%#span22] inv'2 b)
   -> ([%#span23] inv'1 bc)  -> ([%#span24] inv'2 c)  -> ([%#span25] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"../07_fuse.rs" 55 4 55 26] (self : Fuse'0.t_fuse i) : () =
    [%#span29] ()
  
  axiom produces_refl'0_spec : forall self : Fuse'0.t_fuse i . ([%#span27] inv'2 self)
   -> ([%#span28] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate completed'0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (Fuse'0.t_fuse i)) =
    [%#span30] (C07Fuse_Fuse_Type.fuse_iter ( * self) = Option'0.C_None
    \/ (exists it : borrowed i . inv'3 it
    /\ completed'1 it /\ C07Fuse_Fuse_Type.fuse_iter ( * self) = Option'0.C_Some ( * it)))
    /\ C07Fuse_Fuse_Type.fuse_iter ( ^ self) = Option'0.C_None
  
  constant self  : borrowed (Fuse'0.t_fuse i)
  
  constant steps  : Seq.seq item'0
  
  constant next  : Fuse'0.t_fuse i
  
  function is_fused [#"../07_fuse.rs" 81 4 81 62] (self : borrowed (Fuse'0.t_fuse i)) (steps : Seq.seq item'0) (next : Fuse'0.t_fuse i) : ()
    
  
  goal vc_is_fused : ([%#s07_fuse4] inv'2 next)
   -> ([%#s07_fuse3] inv'1 steps)
   -> ([%#s07_fuse2] inv'0 self)
   -> ([%#s07_fuse1] produces'0 ( ^ self) steps next)
   -> ([%#s07_fuse0] completed'0 self)  -> ([%#s07_fuse5] steps = (Seq.empty  : Seq.seq item'0) /\  ^ self = next)
end
module C07Fuse_Impl0
  type i
  
  let%span s07_fuse0 = "../07_fuse.rs" 55 4 55 26
  
  let%span s07_fuse1 = "../07_fuse.rs" 62 4 62 90
  
  let%span s07_fuse2 = "../07_fuse.rs" 39 4 39 44
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../07_fuse.rs" 18 12 19 32
  
  let%span span5 = "../07_fuse.rs" 26 8 32 9
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed i)
  
  predicate inv'4 (_x : borrowed i)
  
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  
  type item'0
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option item'0) =
    [%#span3] true
  
  predicate inv'3 (_x : Option'0.t_option item'0)
  
  axiom inv'3 : forall x : Option'0.t_option item'0 . inv'3 x = true
  
  use C07Fuse_Fuse_Type as Fuse'0
  
  predicate invariant'2 (self : borrowed (Fuse'0.t_fuse i)) =
    [%#span3] true
  
  predicate inv'2 (_x : borrowed (Fuse'0.t_fuse i))
  
  axiom inv'2 : forall x : borrowed (Fuse'0.t_fuse i) . inv'2 x = true
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq item'0) =
    [%#span3] true
  
  predicate inv'1 (_x : Seq.seq item'0)
  
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  
  predicate invariant'0 (self : Fuse'0.t_fuse i) =
    [%#span3] true
  
  predicate inv'0 (_x : Fuse'0.t_fuse i)
  
  axiom inv'0 : forall x : Fuse'0.t_fuse i . inv'0 x = true
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  
  predicate completed'0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (Fuse'0.t_fuse i)) =
    [%#span4] (C07Fuse_Fuse_Type.fuse_iter ( * self) = Option'0.C_None
    \/ (exists it : borrowed i . inv'4 it
    /\ completed'1 it /\ C07Fuse_Fuse_Type.fuse_iter ( * self) = Option'0.C_Some ( * it)))
    /\ C07Fuse_Fuse_Type.fuse_iter ( ^ self) = Option'0.C_None
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  use seq.Seq
  
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : Fuse'0.t_fuse i) (prod : Seq.seq item'0) (other : Fuse'0.t_fuse i)
    
   =
    [%#span5] match C07Fuse_Fuse_Type.fuse_iter self with
      | Option'0.C_None -> prod = (Seq.empty  : Seq.seq item'0)
      /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Option'0.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Option'0.C_Some i2 -> produces'1 i prod i2
        | Option'0.C_None -> false
        end
      end
  
  goal produces_refl_refn : [%#s07_fuse0] forall self : Fuse'0.t_fuse i . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq item'0) self
   -> produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  goal produces_trans_refn : [%#s07_fuse1] forall a : Fuse'0.t_fuse i . forall ab : Seq.seq item'0 . forall b : Fuse'0.t_fuse i . forall bc : Seq.seq item'0 . forall c : Fuse'0.t_fuse i . inv'0 c
  /\ inv'1 bc /\ inv'0 b /\ inv'1 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'0 c
  /\ inv'1 bc
  /\ inv'0 b
  /\ inv'1 ab
  /\ inv'0 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal next_refn : [%#s07_fuse2] forall self : borrowed (Fuse'0.t_fuse i) . inv'2 self
   -> inv'2 self
  /\ (forall result : Option'0.t_option item'0 . inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
end
module C07Fuse_Impl1
  type i
  
  let%span s07_fuse0 = "../07_fuse.rs" 81 4 81 62
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../07_fuse.rs" 18 12 19 32
  
  let%span span3 = "../07_fuse.rs" 26 8 32 9
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed i)
  
  predicate inv'3 (_x : borrowed i)
  
  axiom inv'3 : forall x : borrowed i . inv'3 x = true
  
  use C07Fuse_Fuse_Type as Fuse'0
  
  predicate invariant'2 (self : borrowed (Fuse'0.t_fuse i)) =
    [%#span1] true
  
  predicate inv'2 (_x : borrowed (Fuse'0.t_fuse i))
  
  axiom inv'2 : forall x : borrowed (Fuse'0.t_fuse i) . inv'2 x = true
  
  type item'0
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq item'0) =
    [%#span1] true
  
  predicate inv'1 (_x : Seq.seq item'0)
  
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  
  predicate invariant'0 (self : Fuse'0.t_fuse i) =
    [%#span1] true
  
  predicate inv'0 (_x : Fuse'0.t_fuse i)
  
  axiom inv'0 : forall x : Fuse'0.t_fuse i . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  use Core_Option_Option_Type as Option'0
  
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  
  predicate completed'0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (Fuse'0.t_fuse i)) =
    [%#span2] (C07Fuse_Fuse_Type.fuse_iter ( * self) = Option'0.C_None
    \/ (exists it : borrowed i . inv'3 it
    /\ completed'1 it /\ C07Fuse_Fuse_Type.fuse_iter ( * self) = Option'0.C_Some ( * it)))
    /\ C07Fuse_Fuse_Type.fuse_iter ( ^ self) = Option'0.C_None
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : Fuse'0.t_fuse i) (prod : Seq.seq item'0) (other : Fuse'0.t_fuse i)
    
   =
    [%#span3] match C07Fuse_Fuse_Type.fuse_iter self with
      | Option'0.C_None -> prod = (Seq.empty  : Seq.seq item'0)
      /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Option'0.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Option'0.C_Some i2 -> produces'1 i prod i2
        | Option'0.C_None -> false
        end
      end
  
  goal is_fused_refn : [%#s07_fuse0] forall self : borrowed (Fuse'0.t_fuse i) . forall steps : Seq.seq item'0 . forall next : Fuse'0.t_fuse i . inv'0 next
  /\ inv'1 steps /\ inv'2 self /\ produces'0 ( ^ self) steps next /\ completed'0 self
   -> inv'0 next
  /\ inv'1 steps
  /\ inv'2 self
  /\ produces'0 ( ^ self) steps next
  /\ completed'0 self
  /\ (forall result : () . steps = (Seq.empty  : Seq.seq item'0) /\  ^ self = next
   -> steps = (Seq.empty  : Seq.seq item'0) /\  ^ self = next)
end
