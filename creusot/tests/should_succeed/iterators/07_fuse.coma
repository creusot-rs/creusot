
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C07Fuse_Fuse_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_fuse 'i =
    | C_Fuse (Core_Option_Option_Type.t_option 'i)
    
  function any_l (_ : 'b) : 'a
  let rec t_fuse < 'i > (input:t_fuse 'i) (ret  (iter:Core_Option_Option_Type.t_option 'i))= any
    [ good (iter:Core_Option_Option_Type.t_option 'i)-> {C_Fuse iter = input} (! ret {iter})
    | bad (iter:Core_Option_Option_Type.t_option 'i)-> {C_Fuse iter <> input} {false} any ]
    
  function fuse_iter (self : t_fuse 'i) : Core_Option_Option_Type.t_option 'i =
    match self with
      | C_Fuse a -> a
      end
end
module C07Fuse_Impl0_Next
  type i
  type item'0
  use seq.Seq
  predicate invariant'6 (self : Seq.seq item'0)
  let rec invariant'6 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq item'0)
  let rec inv'6 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq item'0 . inv'6 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'5 (self : Core_Option_Option_Type.t_option item'0)
  let rec invariant'5 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Core_Option_Option_Type.t_option item'0)
  let rec inv'5 (_x:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Core_Option_Option_Type.t_option item'0 . inv'5 x = true
  use prelude.Borrow
  predicate invariant'4 (self : borrowed i)
  let rec invariant'4 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed i)
  let rec inv'4 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  use seq.Seq
  predicate inv'3 (_x : i)
  let rec inv'3 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'3 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'6 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'3 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'6 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'3 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'3 a)
   -> ([#"../common.rs" 21 31 21 33] inv'6 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'3 b)
   -> ([#"../common.rs" 21 61 21 63] inv'6 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'3 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'3 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'3 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'3 (self : i)
  let rec invariant'3 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : i . inv'3 x = true
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate invariant'2 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  let rec invariant'2 (self:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  let rec inv'2 (_x:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (C07Fuse_Fuse_Type.t_fuse i) . inv'2 x = true
  predicate invariant'1 (self : borrowed (Core_Option_Option_Type.t_option i))
  let rec invariant'1 (self:borrowed (Core_Option_Option_Type.t_option i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (Core_Option_Option_Type.t_option i))
  let rec inv'1 (_x:borrowed (Core_Option_Option_Type.t_option i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (Core_Option_Option_Type.t_option i) . inv'1 x = true
  predicate invariant'0 (self : Core_Option_Option_Type.t_option i)
  let rec invariant'0 (self:Core_Option_Option_Type.t_option i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Core_Option_Option_Type.t_option i)
  let rec inv'0 (_x:Core_Option_Option_Type.t_option i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Option_Option_Type.t_option i . inv'0 x = true
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item'0) (other : C07Fuse_Fuse_Type.t_fuse i)
    
   =
    [#"../07_fuse.rs" 26 8 32 9] match C07Fuse_Fuse_Type.fuse_iter self with
      | Core_Option_Option_Type.C_None -> prod = (Seq.empty  : Seq.seq item'0)
      /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Core_Option_Option_Type.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Core_Option_Option_Type.C_Some i2 -> produces'1 i prod i2
        | Core_Option_Option_Type.C_None -> false
        end
      end
  let rec produces'0 (self:C07Fuse_Fuse_Type.t_fuse i) (prod:Seq.seq item'0) (other:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self prod other} (! return' {result}) ]
    
  use seq.Seq
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate completed'0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) =
    [#"../07_fuse.rs" 18 12 19 32] (C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_None
    \/ (exists it : borrowed i . inv'4 it
    /\ completed'1 it /\ C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_Some ( * it)))
    /\ C07Fuse_Fuse_Type.fuse_iter ( ^ self) = Core_Option_Option_Type.C_None
  let rec completed'0 (self:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'4 (self : Core_Option_Option_Type.t_option i)
  let rec resolve'4 (self:Core_Option_Option_Type.t_option i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  predicate resolve'3 (self : Core_Option_Option_Type.t_option item'0)
  let rec resolve'3 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'2 (self : borrowed i) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed i) (return'  (ret:Core_Option_Option_Type.t_option item'0))= {[@expl:precondition] [#"../common.rs" 27 17 27 21] inv'4 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option item'0)-> {[#"../common.rs" 27 26 27 44] inv'5 result}
      {[#"../common.rs" 23 14 26 5] match result with
        | Core_Option_Option_Type.C_None -> completed'1 self
        | Core_Option_Option_Type.C_Some v -> produces'1 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  predicate resolve'1 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (Core_Option_Option_Type.t_option i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Core_Option_Option_Type.t_option i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec next (self:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:Core_Option_Option_Type.t_option item'0))= {[#"../07_fuse.rs" 39 17 39 21] inv'2 self}
    (! bb0
    [ bb0 = s0
      [ s0 = C07Fuse_Fuse_Type.t_fuse <i> { * self}
          (fun (riter'0:Core_Option_Option_Type.t_option i) ->
            Borrow.borrow_final
              <Core_Option_Option_Type.t_option i>
              {riter'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Core_Option_Option_Type.t_option i)) ->
                 [ &_3 <- _ret' ] 
                C07Fuse_Fuse_Type.t_fuse <i> { * self}
                  (fun (l_iter'0:Core_Option_Option_Type.t_option i) ->
                    
                    [ &self <- { self with current = (C07Fuse_Fuse_Type.C_Fuse ( ^ _3) : C07Fuse_Fuse_Type.t_fuse i) ; } ]
                    
                    s1)))
      | s1 = -{inv'0 ( ^ _3)}- s2
      | s2 = any
        [ br0 -> { * _3 = Core_Option_Option_Type.C_None } (! bb2)
        | br1 (a:i)-> { * _3 = Core_Option_Option_Type.C_Some a} (! bb3) ]
         ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'1 _3} s1
      | s1 = -{resolve'0 _3}- s2
      | s2 = {[@expl:type invariant] inv'2 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = {[#"../07_fuse.rs" 40 14 40 28] false} any ]
      
    | bb3 = s0
      [ s0 = Core_Option_Option_Type.some <i> { * _3}
          (fun (r0'0:i) ->
            Borrow.borrow_final <i> {r0'0} {Borrow.inherit_id (Borrow.get_id _3) 1}
              (fun (_ret':borrowed i) ->
                 [ &iter <- _ret' ] 
                Core_Option_Option_Type.some <i> { * _3}
                  (fun (l_0'0:i) ->
                    
                    [ &_3 <- { _3 with current = (Core_Option_Option_Type.C_Some ( ^ iter) : Core_Option_Option_Type.t_option i) ; } ]
                    
                    s1)))
      | s1 = -{inv'3 ( ^ iter)}- s2
      | s2 = Borrow.borrow_final <i> { * iter} {Borrow.get_id iter}
          (fun (_ret':borrowed i) ->  [ &_7 <- _ret' ]  [ &iter <- { iter with current = ( ^ _7) ; } ] s3)
      | s3 = -{inv'3 ( ^ _7)}- s4
      | s4 = next'0 {_7} (fun (_ret':Core_Option_Option_Type.t_option item'0) ->  [ &_6 <- _ret' ] s5)
      | s5 = bb5 ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'4 iter} s1
      | s1 = -{resolve'2 iter}- s2
      | s2 = {[@expl:type invariant] inv'1 _3} s3
      | s3 = -{resolve'0 _3}- s4
      | s4 = any
        [ br0 -> {_6 = Core_Option_Option_Type.C_None } (! bb7)
        | br1 (a:item'0)-> {_6 = Core_Option_Option_Type.C_Some a} (! bb6) ]
         ]
      
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'2 self} s1
      | s1 = -{resolve'1 self}- s2
      | s2 =  [ &x <- _6 ] (any [ any_ (_any:Core_Option_Option_Type.t_option item'0)-> (!  [ &_6 <- _any ] s3) ] )
      | s3 =  [ &_0 <- x ] (any [ any_ (_any:Core_Option_Option_Type.t_option item'0)-> (!  [ &x <- _any ] s4) ] )
      | s4 = bb12 ]
      
    | bb12 = s0 [ s0 = bb13 ] 
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'5 _6} s1
      | s1 = -{resolve'3 _6}- s2
      | s2 =  [ &_9 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option i ] s3
      | s3 = bb9 ]
      
    | bb9 = s0
      [ s0 = C07Fuse_Fuse_Type.t_fuse <i> { * self}
          (fun (l_iter'0:Core_Option_Option_Type.t_option i) ->
             [ &self <- { self with current = (C07Fuse_Fuse_Type.C_Fuse _9 : C07Fuse_Fuse_Type.t_fuse i) ; } ] 
            (any [ any_ (_any:Core_Option_Option_Type.t_option i)-> (!  [ &_9 <- _any ] s1) ] ))
      | s1 = C07Fuse_Fuse_Type.t_fuse <i> { * self}
          (fun (riter'0:Core_Option_Option_Type.t_option i) -> {[@expl:type invariant] inv'0 riter'0} s2)
      | s2 = C07Fuse_Fuse_Type.t_fuse <i> { * self}
          (fun (riter'1:Core_Option_Option_Type.t_option i) -> -{resolve'4 riter'1}- s3)
      | s3 = {[@expl:type invariant] inv'2 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 = bb11 ]
      
    | bb11 = s0
      [ s0 =  [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option item'0 ] s1 | s1 = bb13 ]
      
    | bb13 = s0 [ s0 = bb14 ] 
    | bb14 = s0 [ s0 = bb15 ] 
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'1 _3} s1
      | s1 = -{resolve'0 _3}- s2
      | s2 =  [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option item'0 ] s3
      | s3 = {[@expl:type invariant] inv'2 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 = bb15 ]
      
    | bb15 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option item'0 = any_l () : Core_Option_Option_Type.t_option item'0
    | & self : borrowed (C07Fuse_Fuse_Type.t_fuse i) = self
    | & _3 : borrowed (Core_Option_Option_Type.t_option i) = any_l () : borrowed (Core_Option_Option_Type.t_option i)
    | & iter : borrowed i = any_l () : borrowed i
    | & _6 : Core_Option_Option_Type.t_option item'0 = any_l () : Core_Option_Option_Type.t_option item'0
    | & _7 : borrowed i = any_l () : borrowed i
    | & _9 : Core_Option_Option_Type.t_option i = any_l () : Core_Option_Option_Type.t_option i
    | & x : Core_Option_Option_Type.t_option item'0 = any_l () : Core_Option_Option_Type.t_option item'0 ]
    
    [ return' (result:Core_Option_Option_Type.t_option item'0)-> {[@expl:postcondition] [#"../07_fuse.rs" 39 26 39 44] inv'5 result}
      {[@expl:postcondition] [#"../07_fuse.rs" 35 14 38 5] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C07Fuse_Impl0_ProducesRefl_Impl
  type i
  type item'0
  use seq.Seq
  predicate invariant'2 (self : Seq.seq item'0)
  let rec invariant'2 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Seq.seq item'0)
  let rec inv'2 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Seq.seq item'0 . inv'2 x = true
  predicate invariant'1 (self : i)
  let rec invariant'1 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : i)
  let rec inv'1 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : i . inv'1 x = true
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'1 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'2 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'1 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'2 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'1 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'1 a)
   -> ([#"../common.rs" 21 31 21 33] inv'2 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'1 b)
   -> ([#"../common.rs" 21 61 21 63] inv'2 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'1 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'1 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'1 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate invariant'0 (self : C07Fuse_Fuse_Type.t_fuse i)
  let rec invariant'0 (self:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C07Fuse_Fuse_Type.t_fuse i)
  let rec inv'0 (_x:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C07Fuse_Fuse_Type.t_fuse i . inv'0 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item'0) (other : C07Fuse_Fuse_Type.t_fuse i)
    
   =
    [#"../07_fuse.rs" 26 8 32 9] match C07Fuse_Fuse_Type.fuse_iter self with
      | Core_Option_Option_Type.C_None -> prod = (Seq.empty  : Seq.seq item'0)
      /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Core_Option_Option_Type.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Core_Option_Option_Type.C_Some i2 -> produces'1 i prod i2
        | Core_Option_Option_Type.C_None -> false
        end
      end
  let rec produces'0 (self:C07Fuse_Fuse_Type.t_fuse i) (prod:Seq.seq item'0) (other:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self prod other} (! return' {result}) ]
    
  constant self  : C07Fuse_Fuse_Type.t_fuse i
  function produces_refl [#"../07_fuse.rs" 55 4 55 26] (self : C07Fuse_Fuse_Type.t_fuse i) : ()
  goal vc_produces_refl : ([#"../07_fuse.rs" 55 21 55 25] inv'0 self)
   -> ([#"../07_fuse.rs" 54 14 54 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
end
module C07Fuse_Impl0_ProducesTrans_Impl
  type i
  predicate invariant'2 (self : i)
  let rec invariant'2 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : i)
  let rec inv'2 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : i . inv'2 x = true
  type item'0
  use seq.Seq
  use seq.Seq
  predicate inv'1 (_x : Seq.seq item'0)
  let rec inv'1 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'2 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'1 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'2 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'1 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'2 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'2 a)
   -> ([#"../common.rs" 21 31 21 33] inv'1 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'2 b)
   -> ([#"../common.rs" 21 61 21 63] inv'1 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'2 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'2 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'2 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'1 (self : Seq.seq item'0)
  let rec invariant'1 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate invariant'0 (self : C07Fuse_Fuse_Type.t_fuse i)
  let rec invariant'0 (self:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C07Fuse_Fuse_Type.t_fuse i)
  let rec inv'0 (_x:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C07Fuse_Fuse_Type.t_fuse i . inv'0 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item'0) (other : C07Fuse_Fuse_Type.t_fuse i)
    
   =
    [#"../07_fuse.rs" 26 8 32 9] match C07Fuse_Fuse_Type.fuse_iter self with
      | Core_Option_Option_Type.C_None -> prod = (Seq.empty  : Seq.seq item'0)
      /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Core_Option_Option_Type.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Core_Option_Option_Type.C_Some i2 -> produces'1 i prod i2
        | Core_Option_Option_Type.C_None -> false
        end
      end
  let rec produces'0 (self:C07Fuse_Fuse_Type.t_fuse i) (prod:Seq.seq item'0) (other:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self prod other} (! return' {result}) ]
    
  constant a  : C07Fuse_Fuse_Type.t_fuse i
  constant ab  : Seq.seq item'0
  constant b  : C07Fuse_Fuse_Type.t_fuse i
  constant bc  : Seq.seq item'0
  constant c  : C07Fuse_Fuse_Type.t_fuse i
  function produces_trans [#"../07_fuse.rs" 62 4 62 90] (a : C07Fuse_Fuse_Type.t_fuse i) (ab : Seq.seq item'0) (b : C07Fuse_Fuse_Type.t_fuse i) (bc : Seq.seq item'0) (c : C07Fuse_Fuse_Type.t_fuse i) : ()
    
  goal vc_produces_trans : ([#"../07_fuse.rs" 62 82 62 83] inv'0 c)
   -> ([#"../07_fuse.rs" 62 61 62 63] inv'1 bc)
   -> ([#"../07_fuse.rs" 62 52 62 53] inv'0 b)
   -> ([#"../07_fuse.rs" 62 31 62 33] inv'1 ab)
   -> ([#"../07_fuse.rs" 62 22 62 23] inv'0 a)
   -> ([#"../07_fuse.rs" 60 15 60 32] produces'0 b bc c)
   -> ([#"../07_fuse.rs" 59 15 59 32] produces'0 a ab b)
   -> ([#"../07_fuse.rs" 61 14 61 42] produces'0 a (Seq.(++) ab bc) c)
end
module C07Fuse_Impl1_IsFused_Impl
  type i
  predicate invariant'4 (self : i)
  let rec invariant'4 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : i)
  let rec inv'4 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : i . inv'4 x = true
  use prelude.Borrow
  predicate invariant'3 (self : borrowed i)
  let rec invariant'3 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed i)
  let rec inv'3 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed i . inv'3 x = true
  type item'0
  use seq.Seq
  use seq.Seq
  predicate inv'1 (_x : Seq.seq item'0)
  let rec inv'1 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'1 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'4 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'1 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'4 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'1 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'4 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'4 a)
   -> ([#"../common.rs" 21 31 21 33] inv'1 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'4 b)
   -> ([#"../common.rs" 21 61 21 63] inv'1 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'4 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'1 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'4 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'4 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate invariant'2 (self : C07Fuse_Fuse_Type.t_fuse i)
  let rec invariant'2 (self:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : C07Fuse_Fuse_Type.t_fuse i)
  let rec inv'2 (_x:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : C07Fuse_Fuse_Type.t_fuse i . inv'2 x = true
  predicate invariant'1 (self : Seq.seq item'0)
  let rec invariant'1 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  predicate invariant'0 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  let rec invariant'0 (self:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  let rec inv'0 (_x:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed (C07Fuse_Fuse_Type.t_fuse i) . inv'0 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item'0) (other : C07Fuse_Fuse_Type.t_fuse i)
    
   =
    [#"../07_fuse.rs" 26 8 32 9] match C07Fuse_Fuse_Type.fuse_iter self with
      | Core_Option_Option_Type.C_None -> prod = (Seq.empty  : Seq.seq item'0)
      /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Core_Option_Option_Type.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Core_Option_Option_Type.C_Some i2 -> produces'1 i prod i2
        | Core_Option_Option_Type.C_None -> false
        end
      end
  let rec produces'0 (self:C07Fuse_Fuse_Type.t_fuse i) (prod:Seq.seq item'0) (other:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self prod other} (! return' {result}) ]
    
  function produces_trans'0 [#"../07_fuse.rs" 62 4 62 90] (a : C07Fuse_Fuse_Type.t_fuse i) (ab : Seq.seq item'0) (b : C07Fuse_Fuse_Type.t_fuse i) (bc : Seq.seq item'0) (c : C07Fuse_Fuse_Type.t_fuse i) : ()
    
   =
    [#"../07_fuse.rs" 57 4 57 10] ()
  let rec produces_trans'0 (a:C07Fuse_Fuse_Type.t_fuse i) (ab:Seq.seq item'0) (b:C07Fuse_Fuse_Type.t_fuse i) (bc:Seq.seq item'0) (c:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:()))= {[@expl:precondition] [#"../07_fuse.rs" 62 82 62 83] inv'2 c}
    {[@expl:precondition] [#"../07_fuse.rs" 62 61 62 63] inv'1 bc}
    {[@expl:precondition] [#"../07_fuse.rs" 62 52 62 53] inv'2 b}
    {[@expl:precondition] [#"../07_fuse.rs" 62 31 62 33] inv'1 ab}
    {[@expl:precondition] [#"../07_fuse.rs" 62 22 62 23] inv'2 a}
    {[@expl:precondition] [#"../07_fuse.rs" 60 15 60 32] produces'0 b bc c}
    {[@expl:precondition] [#"../07_fuse.rs" 59 15 59 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : C07Fuse_Fuse_Type.t_fuse i, ab : Seq.seq item'0, b : C07Fuse_Fuse_Type.t_fuse i, bc : Seq.seq item'0, c : C07Fuse_Fuse_Type.t_fuse i . ([#"../07_fuse.rs" 59 15 59 32] produces'0 a ab b)
   -> ([#"../07_fuse.rs" 60 15 60 32] produces'0 b bc c)
   -> ([#"../07_fuse.rs" 62 22 62 23] inv'2 a)
   -> ([#"../07_fuse.rs" 62 31 62 33] inv'1 ab)
   -> ([#"../07_fuse.rs" 62 52 62 53] inv'2 b)
   -> ([#"../07_fuse.rs" 62 61 62 63] inv'1 bc)
   -> ([#"../07_fuse.rs" 62 82 62 83] inv'2 c)  -> ([#"../07_fuse.rs" 61 14 61 42] produces'0 a (Seq.(++) ab bc) c)
  function produces_refl'0 [#"../07_fuse.rs" 55 4 55 26] (self : C07Fuse_Fuse_Type.t_fuse i) : () =
    [#"../07_fuse.rs" 52 4 52 10] ()
  let rec produces_refl'0 (self:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:()))= {[@expl:precondition] [#"../07_fuse.rs" 55 21 55 25] inv'2 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : C07Fuse_Fuse_Type.t_fuse i . ([#"../07_fuse.rs" 55 21 55 25] inv'2 self)
   -> ([#"../07_fuse.rs" 54 14 54 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate completed'0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) =
    [#"../07_fuse.rs" 18 12 19 32] (C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_None
    \/ (exists it : borrowed i . inv'3 it
    /\ completed'1 it /\ C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_Some ( * it)))
    /\ C07Fuse_Fuse_Type.fuse_iter ( ^ self) = Core_Option_Option_Type.C_None
  let rec completed'0 (self:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  constant self  : borrowed (C07Fuse_Fuse_Type.t_fuse i)
  constant steps  : Seq.seq item'0
  constant next  : C07Fuse_Fuse_Type.t_fuse i
  function is_fused [#"../07_fuse.rs" 81 4 81 62] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) (steps : Seq.seq item'0) (next : C07Fuse_Fuse_Type.t_fuse i) : ()
    
  goal vc_is_fused : ([#"../07_fuse.rs" 81 51 81 55] inv'2 next)
   -> ([#"../07_fuse.rs" 81 27 81 32] inv'1 steps)
   -> ([#"../07_fuse.rs" 81 21 81 25] inv'0 self)
   -> ([#"../07_fuse.rs" 79 15 79 44] produces'0 ( ^ self) steps next)
   -> ([#"../07_fuse.rs" 78 15 78 31] completed'0 self)
   -> ([#"../07_fuse.rs" 80 14 80 50] steps = (Seq.empty  : Seq.seq item'0) /\  ^ self = next)
end
module C07Fuse_Impl0
  type i
  use prelude.Borrow
  predicate invariant'4 (self : borrowed i)
  let rec invariant'4 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed i)
  let rec inv'4 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  type item'0
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option item'0)
  let rec invariant'3 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option item'0)
  let rec inv'3 (_x:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option item'0 . inv'3 x = true
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate invariant'2 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  let rec invariant'2 (self:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  let rec inv'2 (_x:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (C07Fuse_Fuse_Type.t_fuse i) . inv'2 x = true
  use seq.Seq
  predicate invariant'1 (self : Seq.seq item'0)
  let rec invariant'1 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq item'0)
  let rec inv'1 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  predicate invariant'0 (self : C07Fuse_Fuse_Type.t_fuse i)
  let rec invariant'0 (self:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C07Fuse_Fuse_Type.t_fuse i)
  let rec inv'0 (_x:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C07Fuse_Fuse_Type.t_fuse i . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate completed'0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) =
    [#"../07_fuse.rs" 18 12 19 32] (C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_None
    \/ (exists it : borrowed i . inv'4 it
    /\ completed'1 it /\ C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_Some ( * it)))
    /\ C07Fuse_Fuse_Type.fuse_iter ( ^ self) = Core_Option_Option_Type.C_None
  let rec completed'0 (self:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item'0) (other : C07Fuse_Fuse_Type.t_fuse i)
    
   =
    [#"../07_fuse.rs" 26 8 32 9] match C07Fuse_Fuse_Type.fuse_iter self with
      | Core_Option_Option_Type.C_None -> prod = (Seq.empty  : Seq.seq item'0)
      /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Core_Option_Option_Type.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Core_Option_Option_Type.C_Some i2 -> produces'1 i prod i2
        | Core_Option_Option_Type.C_None -> false
        end
      end
  let rec produces'0 (self:C07Fuse_Fuse_Type.t_fuse i) (prod:Seq.seq item'0) (other:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self prod other} (! return' {result}) ]
    
  goal produces_trans_refn : [#"../07_fuse.rs" 62 4 62 90] forall a : C07Fuse_Fuse_Type.t_fuse i . forall ab : Seq.seq item'0 . forall b : C07Fuse_Fuse_Type.t_fuse i . forall bc : Seq.seq item'0 . forall c : C07Fuse_Fuse_Type.t_fuse i . inv'0 c
  /\ inv'1 bc /\ inv'0 b /\ inv'1 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'0 c
  /\ inv'1 bc
  /\ inv'0 b
  /\ inv'1 ab
  /\ inv'0 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  goal next_refn : [#"../07_fuse.rs" 39 4 39 44] forall self : borrowed (C07Fuse_Fuse_Type.t_fuse i) . inv'2 self
   -> inv'2 self
  /\ (forall result : Core_Option_Option_Type.t_option item'0 . inv'3 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv'3 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_refl_refn : [#"../07_fuse.rs" 55 4 55 26] forall self : C07Fuse_Fuse_Type.t_fuse i . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq item'0) self
   -> produces'0 self (Seq.empty  : Seq.seq item'0) self)
end
module C07Fuse_Impl1
  type i
  use prelude.Borrow
  predicate invariant'3 (self : borrowed i)
  let rec invariant'3 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed i)
  let rec inv'3 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed i . inv'3 x = true
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate invariant'2 (self : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  let rec invariant'2 (self:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  let rec inv'2 (_x:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (C07Fuse_Fuse_Type.t_fuse i) . inv'2 x = true
  type item'0
  use seq.Seq
  predicate invariant'1 (self : Seq.seq item'0)
  let rec invariant'1 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq item'0)
  let rec inv'1 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  predicate invariant'0 (self : C07Fuse_Fuse_Type.t_fuse i)
  let rec invariant'0 (self:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C07Fuse_Fuse_Type.t_fuse i)
  let rec inv'0 (_x:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C07Fuse_Fuse_Type.t_fuse i . inv'0 x = true
  use seq.Seq
  use seq.Seq
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate completed'0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) =
    [#"../07_fuse.rs" 18 12 19 32] (C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_None
    \/ (exists it : borrowed i . inv'3 it
    /\ completed'1 it /\ C07Fuse_Fuse_Type.fuse_iter ( * self) = Core_Option_Option_Type.C_Some ( * it)))
    /\ C07Fuse_Fuse_Type.fuse_iter ( ^ self) = Core_Option_Option_Type.C_None
  let rec completed'0 (self:borrowed (C07Fuse_Fuse_Type.t_fuse i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq item'0) (other : C07Fuse_Fuse_Type.t_fuse i)
    
   =
    [#"../07_fuse.rs" 26 8 32 9] match C07Fuse_Fuse_Type.fuse_iter self with
      | Core_Option_Option_Type.C_None -> prod = (Seq.empty  : Seq.seq item'0)
      /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Core_Option_Option_Type.C_Some i -> match C07Fuse_Fuse_Type.fuse_iter other with
        | Core_Option_Option_Type.C_Some i2 -> produces'1 i prod i2
        | Core_Option_Option_Type.C_None -> false
        end
      end
  let rec produces'0 (self:C07Fuse_Fuse_Type.t_fuse i) (prod:Seq.seq item'0) (other:C07Fuse_Fuse_Type.t_fuse i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self prod other} (! return' {result}) ]
    
  goal is_fused_refn : [#"../07_fuse.rs" 81 4 81 62] forall self : borrowed (C07Fuse_Fuse_Type.t_fuse i) . forall steps : Seq.seq item'0 . forall next : C07Fuse_Fuse_Type.t_fuse i . inv'0 next
  /\ inv'1 steps /\ inv'2 self /\ produces'0 ( ^ self) steps next /\ completed'0 self
   -> inv'0 next
  /\ inv'1 steps
  /\ inv'2 self
  /\ produces'0 ( ^ self) steps next
  /\ completed'0 self
  /\ (forall result : () . steps = (Seq.empty  : Seq.seq item'0) /\  ^ self = next
   -> steps = (Seq.empty  : Seq.seq item'0) /\  ^ self = next)
end
