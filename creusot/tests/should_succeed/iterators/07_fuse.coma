module M_07_fuse__qyi9228006394033832720__resolve_coherence [#"07_fuse.rs" 7 9 7 16] (* <Fuse<I> as creusot_contracts::Resolve> *)
  let%span s07_fuse0 = "07_fuse.rs" 7 9 7 16
  let%span s07_fuse1 = "07_fuse.rs" 7 9 7 16
  let%span s07_fuse2 = "07_fuse.rs" 9 4 9 19
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_I'0
  
  type t_Fuse'0  =
    { t_Fuse__iter'0: t_Option'0 }
  
  predicate resolve'3 (_1 : t_I'0)
  
  predicate resolve'2 (self : t_Option'0) =
    [%#sresolve3] match self with
      | C_Some'0 x -> resolve'3 x
      | C_None'0 -> true
      end
  
  predicate resolve'1 (_1 : t_Option'0) =
    resolve'2 _1
  
  predicate structural_resolve'0 (_1 : t_Fuse'0) =
    match _1 with
      | {t_Fuse__iter'0 = x0} -> resolve'1 x0
      end
  
  predicate resolve'0 [#"07_fuse.rs" 7 9 7 16] (self : t_Fuse'0) =
    [%#s07_fuse2] resolve'1 self.t_Fuse__iter'0
  
  constant self  : t_Fuse'0
  
  function resolve_coherence'0 [#"07_fuse.rs" 7 9 7 16] (self : t_Fuse'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#s07_fuse0] structural_resolve'0 self)  -> ([%#s07_fuse0] resolve'0 self)
end
module M_07_fuse__qyi2452592938496686347__next [#"07_fuse.rs" 40 4 40 44] (* <Fuse<I> as common::Iterator> *)
  let%span s07_fuse0 = "07_fuse.rs" 40 17 40 21
  let%span s07_fuse1 = "07_fuse.rs" 40 26 40 44
  let%span s07_fuse2 = "07_fuse.rs" 36 14 39 5
  let%span scommon3 = "common.rs" 27 17 27 21
  let%span scommon4 = "common.rs" 27 26 27 44
  let%span scommon5 = "common.rs" 23 14 26 5
  let%span s07_fuse6 = "07_fuse.rs" 19 12 20 35
  let%span s07_fuse7 = "07_fuse.rs" 27 8 33 9
  let%span scommon8 = "common.rs" 14 14 14 45
  let%span scommon9 = "common.rs" 18 15 18 32
  let%span scommon10 = "common.rs" 19 15 19 32
  let%span scommon11 = "common.rs" 20 14 20 42
  let%span sresolve12 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sresolve13 = "../../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span sinvariant14 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  type t_I'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_I'0
  
  use prelude.prelude.Borrow
  
  predicate inv'1 (_1 : t_I'0)
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'1 a_0
    end
  
  type t_Fuse'0  =
    { t_Fuse__iter'0: t_Option'0 }
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_I'0))= any
    [ good (field_0:t_I'0)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_I'0 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon9] produces'1 a ab b)
   -> ([%#scommon10] produces'1 b bc c)  -> ([%#scommon11] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon8] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate invariant'0 (self : borrowed t_I'0) =
    [%#sinvariant14] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed t_I'0 [inv'2 x] . inv'2 x = invariant'0 x
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 t_Item'0
  
  predicate inv'6 (_1 : t_Item'0)
  
  predicate inv'5 (_1 : t_Option'1)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Option'1 [inv'5 x] . inv'5 x
  = match x with
    | C_None'1 -> true
    | C_Some'1 a_0 -> inv'6 a_0
    end
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  use seq.Seq
  
  let rec next'1 (self:borrowed t_I'0) (return'  (ret:t_Option'1))= {[@expl:next 'self' type invariant] [%#scommon3] inv'2 self}
    any
    [ return' (result:t_Option'1)-> {[%#scommon4] inv'5 result}
      {[%#scommon5] match result with
        | C_None'1 -> completed'1 self
        | C_Some'1 v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed t_I'0) =
    [%#sresolve12] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t_I'0) =
    resolve'5 _1
  
  predicate invariant'1 (self : borrowed (t_Option'0)) =
    [%#sinvariant14] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed (t_Option'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (t_Option'0) [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate resolve'6 (self : borrowed (t_Option'0)) =
    [%#sresolve12] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_Option'0)) =
    resolve'6 _1
  
  predicate inv'7 (_1 : t_Fuse'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Fuse'0 [inv'7 x] . inv'7 x
  = match x with
    | {t_Fuse__iter'0 = iter} -> inv'0 iter
    end
  
  predicate invariant'2 (self : borrowed (t_Fuse'0)) =
    [%#sinvariant14] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'4 (_1 : borrowed (t_Fuse'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (t_Fuse'0) [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate resolve'7 (self : borrowed (t_Fuse'0)) =
    [%#sresolve12] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (t_Fuse'0)) =
    resolve'7 _1
  
  predicate resolve'10 (_1 : t_Item'0)
  
  predicate resolve'8 (self : t_Option'1) =
    [%#sresolve13] match self with
      | C_Some'1 x -> resolve'10 x
      | C_None'1 -> true
      end
  
  predicate resolve'3 (_1 : t_Option'1) =
    resolve'8 _1
  
  predicate resolve'11 (_1 : t_I'0)
  
  predicate resolve'9 (self : t_Option'0) =
    [%#sresolve13] match self with
      | C_Some'0 x -> resolve'11 x
      | C_None'0 -> true
      end
  
  predicate resolve'4 (_1 : t_Option'0) =
    resolve'9 _1
  
  use prelude.prelude.Intrinsic
  
  predicate completed'0 [#"07_fuse.rs" 17 4 17 35] (self : borrowed (t_Fuse'0)) =
    [%#s07_fuse6] ((self.current).t_Fuse__iter'0 = C_None'0
    \/ (exists it : borrowed t_I'0 . completed'1 it /\ (self.current).t_Fuse__iter'0 = C_Some'0 (it.current)))
    /\ (self.final).t_Fuse__iter'0 = C_None'0
  
  predicate produces'0 [#"07_fuse.rs" 26 4 26 65] (self : t_Fuse'0) (prod : Seq.seq t_Item'0) (other : t_Fuse'0) =
    [%#s07_fuse7] match self.t_Fuse__iter'0 with
      | C_None'0 -> prod = (Seq.empty  : Seq.seq t_Item'0) /\ other.t_Fuse__iter'0 = self.t_Fuse__iter'0
      | C_Some'0 i -> match other.t_Fuse__iter'0 with
        | C_Some'0 i2 -> produces'1 i prod i2
        | C_None'0 -> false
        end
      end
  
  meta "compute_max_steps" 1000000
  
  let rec next'0 (self:borrowed (t_Fuse'0)) (return'  (ret:t_Option'1))= {[@expl:next 'self' type invariant] [%#s07_fuse0] inv'4 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 (self.current).t_Fuse__iter'0}
        Borrow.borrow_mut <t_Option'0> {(self.current).t_Fuse__iter'0}
          (fun (_ret':borrowed (t_Option'0)) ->
             [ &_3 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { t_Fuse__iter'0 = _ret'.final } } ] 
            s1)
      | s1 = any [ br0 -> {_3.current = C_None'0 } (! bb2) | br1 (x0:t_I'0)-> {_3.current = C_Some'0 x0} (! bb3) ]  ]
      
    | bb3 = s0
      [ s0 = v_Some'0 {_3.current}
          (fun (r0'0:t_I'0) ->
            {inv'1 r0'0}
            Borrow.borrow_final <t_I'0> {r0'0} {Borrow.inherit_id (Borrow.get_id _3) 1}
              (fun (_ret':borrowed t_I'0) ->
                 [ &iter <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &_3 <- { _3 with current = C_Some'0 _ret'.final } ] 
                s1))
      | s1 = {inv'1 iter.current}
        Borrow.borrow_final <t_I'0> {iter.current} {Borrow.get_id iter}
          (fun (_ret':borrowed t_I'0) ->
             [ &_7 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &iter <- { iter with current = _ret'.final } ] 
            s2)
      | s2 = next'1 {_7} (fun (_ret':t_Option'1) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'2 iter} s1
      | s1 = -{resolve'0 iter}- s2
      | s2 = {[@expl:type invariant] inv'3 _3} s3
      | s3 = -{resolve'1 _3}- s4
      | s4 = any [ br0 -> {_6 = C_None'1 } (! bb7) | br1 (x0:t_Item'0)-> {_6 = C_Some'1 x0} (! bb6) ]  ]
      
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'4 self} s1
      | s1 = -{resolve'2 self}- s2
      | s2 =  [ &x <- _6 ] s3
      | s3 =  [ &_0 <- x ] s4
      | s4 = bb12 ]
      
    | bb12 = bb13
    | bb7 = s0 [ s0 = {[@expl:type invariant] inv'5 _6} s1 | s1 = -{resolve'3 _6}- s2 | s2 = bb8 ] 
    | bb8 = s0 [ s0 =  [ &_9 <- C_None'0 ] s1 | s1 = bb9 ] 
    | bb9 = s0
      [ s0 = {[@expl:type invariant] match self with
          | {current = {t_Fuse__iter'0 = x'0}} -> inv'0 x'0
          | _ -> true
          end}
        s1
      | s1 = -{match self with
          | {current = {t_Fuse__iter'0 = x'1}} -> resolve'4 x'1
          | _ -> true
          end}-
        s2
      | s2 =  [ &self <- { self with current = { t_Fuse__iter'0 = _9 } } ] s3
      | s3 = {[@expl:type invariant] inv'4 self} s4
      | s4 = -{resolve'2 self}- s5
      | s5 = bb11 ]
      
    | bb11 = s0 [ s0 =  [ &_0 <- C_None'1 ] s1 | s1 = bb13 ] 
    | bb13 = bb14
    | bb14 = bb15
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'3 _3} s1 | s1 = -{resolve'1 _3}- s2 | s2 = bb4 ] 
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'4 self} s1
      | s1 = -{resolve'2 self}- s2
      | s2 =  [ &_0 <- C_None'1 ] s3
      | s3 = bb15 ]
      
    | bb15 = return' {_0} ]
    )
    [ & _0 : t_Option'1 = any_l ()
    | & self : borrowed (t_Fuse'0) = self
    | & _3 : borrowed (t_Option'0) = any_l ()
    | & iter : borrowed t_I'0 = any_l ()
    | & _6 : t_Option'1 = any_l ()
    | & _7 : borrowed t_I'0 = any_l ()
    | & _9 : t_Option'0 = any_l ()
    | & x : t_Option'1 = any_l () ]
    
    [ return' (result:t_Option'1)-> {[@expl:next result type invariant] [%#s07_fuse1] inv'5 result}
      {[@expl:next ensures] [%#s07_fuse2] match result with
        | C_None'1 -> completed'0 self
        | C_Some'1 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_07_fuse__qyi2452592938496686347__produces_refl [#"07_fuse.rs" 56 4 56 26] (* <Fuse<I> as common::Iterator> *)
  let%span s07_fuse0 = "07_fuse.rs" 55 14 55 45
  let%span s07_fuse1 = "07_fuse.rs" 53 4 53 10
  let%span s07_fuse2 = "07_fuse.rs" 27 8 33 9
  let%span scommon3 = "common.rs" 14 14 14 45
  let%span scommon4 = "common.rs" 18 15 18 32
  let%span scommon5 = "common.rs" 19 15 19 32
  let%span scommon6 = "common.rs" 20 14 20 42
  
  use seq.Seq
  
  type t_I'0
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon4] produces'1 a ab b)
   -> ([%#scommon5] produces'1 b bc c)  -> ([%#scommon6] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . [%#scommon3] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_I'0
  
  type t_Fuse'0  =
    { t_Fuse__iter'0: t_Option'0 }
  
  predicate produces'0 [#"07_fuse.rs" 26 4 26 65] (self : t_Fuse'0) (prod : Seq.seq t_Item'0) (other : t_Fuse'0) =
    [%#s07_fuse2] match self.t_Fuse__iter'0 with
      | C_None'0 -> prod = (Seq.empty  : Seq.seq t_Item'0) /\ other.t_Fuse__iter'0 = self.t_Fuse__iter'0
      | C_Some'0 i -> match other.t_Fuse__iter'0 with
        | C_Some'0 i2 -> produces'1 i prod i2
        | C_None'0 -> false
        end
      end
  
  constant self  : t_Fuse'0
  
  function produces_refl'0 [#"07_fuse.rs" 56 4 56 26] (self : t_Fuse'0) : ()
  
  goal vc_produces_refl'0 : [%#s07_fuse0] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
end
module M_07_fuse__qyi2452592938496686347__produces_trans [#"07_fuse.rs" 63 4 63 90] (* <Fuse<I> as common::Iterator> *)
  let%span s07_fuse0 = "07_fuse.rs" 60 15 60 32
  let%span s07_fuse1 = "07_fuse.rs" 61 15 61 32
  let%span s07_fuse2 = "07_fuse.rs" 62 14 62 42
  let%span s07_fuse3 = "07_fuse.rs" 58 4 58 10
  let%span s07_fuse4 = "07_fuse.rs" 27 8 33 9
  let%span scommon5 = "common.rs" 14 14 14 45
  let%span scommon6 = "common.rs" 18 15 18 32
  let%span scommon7 = "common.rs" 19 15 19 32
  let%span scommon8 = "common.rs" 20 14 20 42
  
  type t_I'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_I'0
  
  type t_Fuse'0  =
    { t_Fuse__iter'0: t_Option'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon6] produces'1 a ab b)
   -> ([%#scommon7] produces'1 b bc c)  -> ([%#scommon8] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon5] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate produces'0 [#"07_fuse.rs" 26 4 26 65] (self : t_Fuse'0) (prod : Seq.seq t_Item'0) (other : t_Fuse'0) =
    [%#s07_fuse4] match self.t_Fuse__iter'0 with
      | C_None'0 -> prod = (Seq.empty  : Seq.seq t_Item'0) /\ other.t_Fuse__iter'0 = self.t_Fuse__iter'0
      | C_Some'0 i -> match other.t_Fuse__iter'0 with
        | C_Some'0 i2 -> produces'1 i prod i2
        | C_None'0 -> false
        end
      end
  
  constant a  : t_Fuse'0
  
  constant ab  : Seq.seq t_Item'0
  
  constant b  : t_Fuse'0
  
  constant bc  : Seq.seq t_Item'0
  
  constant c  : t_Fuse'0
  
  function produces_trans'0 [#"07_fuse.rs" 63 4 63 90] (a : t_Fuse'0) (ab : Seq.seq t_Item'0) (b : t_Fuse'0) (bc : Seq.seq t_Item'0) (c : t_Fuse'0) : ()
    
  
  goal vc_produces_trans'0 : ([%#s07_fuse1] produces'0 b bc c)
   -> ([%#s07_fuse0] produces'0 a ab b)  -> ([%#s07_fuse2] produces'0 a (Seq.(++) ab bc) c)
end
module M_07_fuse__qyi3347558734837599430__is_fused [#"07_fuse.rs" 82 4 82 62] (* <Fuse<I> as FusedIterator> *)
  let%span s07_fuse0 = "07_fuse.rs" 79 15 79 31
  let%span s07_fuse1 = "07_fuse.rs" 80 15 80 44
  let%span s07_fuse2 = "07_fuse.rs" 81 14 81 50
  let%span s07_fuse3 = "07_fuse.rs" 77 4 77 10
  let%span s07_fuse4 = "07_fuse.rs" 19 12 20 35
  let%span s07_fuse5 = "07_fuse.rs" 27 8 33 9
  let%span s07_fuse6 = "07_fuse.rs" 55 14 55 45
  let%span s07_fuse7 = "07_fuse.rs" 53 4 53 10
  let%span s07_fuse8 = "07_fuse.rs" 60 15 60 32
  let%span s07_fuse9 = "07_fuse.rs" 61 15 61 32
  let%span s07_fuse10 = "07_fuse.rs" 62 14 62 42
  let%span s07_fuse11 = "07_fuse.rs" 58 4 58 10
  let%span scommon12 = "common.rs" 14 14 14 45
  let%span scommon13 = "common.rs" 18 15 18 32
  let%span scommon14 = "common.rs" 19 15 19 32
  let%span scommon15 = "common.rs" 20 14 20 42
  
  type t_I'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_I'0
  
  type t_Fuse'0  =
    { t_Fuse__iter'0: t_Option'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon13] produces'1 a ab b)
   -> ([%#scommon14] produces'1 b bc c)  -> ([%#scommon15] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . [%#scommon12] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate produces'0 [#"07_fuse.rs" 26 4 26 65] (self : t_Fuse'0) (prod : Seq.seq t_Item'0) (other : t_Fuse'0) =
    [%#s07_fuse5] match self.t_Fuse__iter'0 with
      | C_None'0 -> prod = (Seq.empty  : Seq.seq t_Item'0) /\ other.t_Fuse__iter'0 = self.t_Fuse__iter'0
      | C_Some'0 i -> match other.t_Fuse__iter'0 with
        | C_Some'0 i2 -> produces'1 i prod i2
        | C_None'0 -> false
        end
      end
  
  function produces_trans'0 [#"07_fuse.rs" 63 4 63 90] (a : t_Fuse'0) (ab : Seq.seq t_Item'0) (b : t_Fuse'0) (bc : Seq.seq t_Item'0) (c : t_Fuse'0) : ()
    
   =
    [%#s07_fuse11] ()
  
  axiom produces_trans'0_spec : forall a : t_Fuse'0, ab : Seq.seq t_Item'0, b : t_Fuse'0, bc : Seq.seq t_Item'0, c : t_Fuse'0 . ([%#s07_fuse8] produces'0 a ab b)
   -> ([%#s07_fuse9] produces'0 b bc c)  -> ([%#s07_fuse10] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"07_fuse.rs" 56 4 56 26] (self : t_Fuse'0) : () =
    [%#s07_fuse7] ()
  
  axiom produces_refl'0_spec : forall self : t_Fuse'0 . [%#s07_fuse6] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Borrow
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate completed'0 [#"07_fuse.rs" 17 4 17 35] (self : borrowed (t_Fuse'0)) =
    [%#s07_fuse4] ((self.current).t_Fuse__iter'0 = C_None'0
    \/ (exists it : borrowed t_I'0 . completed'1 it /\ (self.current).t_Fuse__iter'0 = C_Some'0 (it.current)))
    /\ (self.final).t_Fuse__iter'0 = C_None'0
  
  constant self  : borrowed (t_Fuse'0)
  
  constant steps  : Seq.seq t_Item'0
  
  constant next  : t_Fuse'0
  
  function is_fused'0 [#"07_fuse.rs" 82 4 82 62] (self : borrowed (t_Fuse'0)) (steps : Seq.seq t_Item'0) (next : t_Fuse'0) : ()
    
  
  goal vc_is_fused'0 : ([%#s07_fuse1] produces'0 self.final steps next)
   -> ([%#s07_fuse0] completed'0 self)  -> ([%#s07_fuse2] steps = (Seq.empty  : Seq.seq t_Item'0) /\ self.final = next)
end
module M_07_fuse__qyi9228006394033832720__resolve_coherence__refines [#"07_fuse.rs" 7 9 7 16] (* <Fuse<I> as creusot_contracts::Resolve> *)
  let%span s07_fuse0 = "07_fuse.rs" 7 9 7 16
  let%span s07_fuse1 = "07_fuse.rs" 9 4 9 19
  let%span sresolve2 = "../../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span sinvariant3 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_I'0
  
  type t_Fuse'0  =
    { t_Fuse__iter'0: t_Option'0 }
  
  predicate resolve'3 (_1 : t_I'0)
  
  predicate resolve'2 (self : t_Option'0) =
    [%#sresolve2] match self with
      | C_Some'0 x -> resolve'3 x
      | C_None'0 -> true
      end
  
  predicate resolve'1 (_1 : t_Option'0) =
    resolve'2 _1
  
  predicate structural_resolve'0 (_1 : t_Fuse'0) =
    match _1 with
      | {t_Fuse__iter'0 = x0} -> resolve'1 x0
      end
  
  predicate inv'3 (_1 : t_I'0)
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'3 a_0
    end
  
  predicate inv'1 (_1 : t_Fuse'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Fuse'0 [inv'1 x] . inv'1 x
  = match x with
    | {t_Fuse__iter'0 = iter} -> inv'2 iter
    end
  
  predicate invariant'0 (self : t_Fuse'0) =
    [%#sinvariant3] inv'1 self
  
  predicate inv'0 (_1 : t_Fuse'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Fuse'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'0 [#"07_fuse.rs" 7 9 7 16] (self : t_Fuse'0) =
    [%#s07_fuse1] resolve'1 self.t_Fuse__iter'0
  
  goal refines : [%#s07_fuse0] forall self : t_Fuse'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
module M_07_fuse__qyi2452592938496686347__produces_trans__refines [#"07_fuse.rs" 63 4 63 90] (* <Fuse<I> as common::Iterator> *)
  let%span s07_fuse0 = "07_fuse.rs" 63 4 63 90
  let%span s07_fuse1 = "07_fuse.rs" 27 8 33 9
  let%span scommon2 = "common.rs" 14 14 14 45
  let%span scommon3 = "common.rs" 18 15 18 32
  let%span scommon4 = "common.rs" 19 15 19 32
  let%span scommon5 = "common.rs" 20 14 20 42
  
  type t_I'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_I'0
  
  type t_Fuse'0  =
    { t_Fuse__iter'0: t_Option'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon3] produces'1 a ab b)
   -> ([%#scommon4] produces'1 b bc c)  -> ([%#scommon5] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon2] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate produces'0 [#"07_fuse.rs" 26 4 26 65] (self : t_Fuse'0) (prod : Seq.seq t_Item'0) (other : t_Fuse'0) =
    [%#s07_fuse1] match self.t_Fuse__iter'0 with
      | C_None'0 -> prod = (Seq.empty  : Seq.seq t_Item'0) /\ other.t_Fuse__iter'0 = self.t_Fuse__iter'0
      | C_Some'0 i -> match other.t_Fuse__iter'0 with
        | C_Some'0 i2 -> produces'1 i prod i2
        | C_None'0 -> false
        end
      end
  
  goal refines : [%#s07_fuse0] forall a : t_Fuse'0 . forall ab : Seq.seq t_Item'0 . forall b : t_Fuse'0 . forall bc : Seq.seq t_Item'0 . forall c : t_Fuse'0 . produces'0 b bc c
  /\ produces'0 a ab b
   -> produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
module M_07_fuse__qyi2452592938496686347__produces_refl__refines [#"07_fuse.rs" 56 4 56 26] (* <Fuse<I> as common::Iterator> *)
  let%span s07_fuse0 = "07_fuse.rs" 56 4 56 26
  let%span s07_fuse1 = "07_fuse.rs" 27 8 33 9
  let%span scommon2 = "common.rs" 14 14 14 45
  let%span scommon3 = "common.rs" 18 15 18 32
  let%span scommon4 = "common.rs" 19 15 19 32
  let%span scommon5 = "common.rs" 20 14 20 42
  
  type t_I'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_I'0
  
  type t_Fuse'0  =
    { t_Fuse__iter'0: t_Option'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon3] produces'1 a ab b)
   -> ([%#scommon4] produces'1 b bc c)  -> ([%#scommon5] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . [%#scommon2] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate produces'0 [#"07_fuse.rs" 26 4 26 65] (self : t_Fuse'0) (prod : Seq.seq t_Item'0) (other : t_Fuse'0) =
    [%#s07_fuse1] match self.t_Fuse__iter'0 with
      | C_None'0 -> prod = (Seq.empty  : Seq.seq t_Item'0) /\ other.t_Fuse__iter'0 = self.t_Fuse__iter'0
      | C_Some'0 i -> match other.t_Fuse__iter'0 with
        | C_Some'0 i2 -> produces'1 i prod i2
        | C_None'0 -> false
        end
      end
  
  goal refines : [%#s07_fuse0] forall self : t_Fuse'0 . forall result : () . produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
end
module M_07_fuse__qyi2452592938496686347__next__refines [#"07_fuse.rs" 40 4 40 44] (* <Fuse<I> as common::Iterator> *)
  let%span s07_fuse0 = "07_fuse.rs" 40 4 40 44
  let%span s07_fuse1 = "07_fuse.rs" 19 12 20 35
  let%span s07_fuse2 = "07_fuse.rs" 27 8 33 9
  let%span sinvariant3 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span scommon4 = "common.rs" 14 14 14 45
  let%span scommon5 = "common.rs" 18 15 18 32
  let%span scommon6 = "common.rs" 19 15 19 32
  let%span scommon7 = "common.rs" 20 14 20 42
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 t_I'0
  
  type t_Fuse'0  =
    { t_Fuse__iter'0: t_Option'1 }
  
  predicate inv'5 (_1 : t_I'0)
  
  predicate inv'4 (_1 : t_Option'1)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'1 [inv'4 x] . inv'4 x
  = match x with
    | C_None'1 -> true
    | C_Some'1 a_0 -> inv'5 a_0
    end
  
  predicate inv'3 (_1 : t_Fuse'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Fuse'0 [inv'3 x] . inv'3 x
  = match x with
    | {t_Fuse__iter'0 = iter} -> inv'4 iter
    end
  
  predicate invariant'0 (self : borrowed (t_Fuse'0)) =
    [%#sinvariant3] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'0 (_1 : borrowed (t_Fuse'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Fuse'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon5] produces'1 a ab b)
   -> ([%#scommon6] produces'1 b bc c)  -> ([%#scommon7] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon4] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_Item'0
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate completed'0 [#"07_fuse.rs" 17 4 17 35] (self : borrowed (t_Fuse'0)) =
    [%#s07_fuse1] ((self.current).t_Fuse__iter'0 = C_None'1
    \/ (exists it : borrowed t_I'0 . completed'1 it /\ (self.current).t_Fuse__iter'0 = C_Some'1 (it.current)))
    /\ (self.final).t_Fuse__iter'0 = C_None'1
  
  use seq.Seq
  
  predicate produces'0 [#"07_fuse.rs" 26 4 26 65] (self : t_Fuse'0) (prod : Seq.seq t_Item'0) (other : t_Fuse'0) =
    [%#s07_fuse2] match self.t_Fuse__iter'0 with
      | C_None'1 -> prod = (Seq.empty  : Seq.seq t_Item'0) /\ other.t_Fuse__iter'0 = self.t_Fuse__iter'0
      | C_Some'1 i -> match other.t_Fuse__iter'0 with
        | C_Some'1 i2 -> produces'1 i prod i2
        | C_None'1 -> false
        end
      end
  
  predicate inv'2 (_1 : t_Item'0)
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'2 a_0
    end
  
  goal refines : [%#s07_fuse0] forall self : borrowed (t_Fuse'0) . inv'0 self
   -> inv'0 self
  /\ (forall result : t_Option'0 . match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result
   -> match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result)
end
module M_07_fuse__qyi3347558734837599430__is_fused__refines [#"07_fuse.rs" 82 4 82 62] (* <Fuse<I> as FusedIterator> *)
  let%span s07_fuse0 = "07_fuse.rs" 82 4 82 62
  let%span s07_fuse1 = "07_fuse.rs" 27 8 33 9
  let%span s07_fuse2 = "07_fuse.rs" 19 12 20 35
  let%span scommon3 = "common.rs" 14 14 14 45
  let%span scommon4 = "common.rs" 18 15 18 32
  let%span scommon5 = "common.rs" 19 15 19 32
  let%span scommon6 = "common.rs" 20 14 20 42
  let%span s07_fuse7 = "07_fuse.rs" 55 14 55 45
  let%span s07_fuse8 = "07_fuse.rs" 53 4 53 10
  let%span s07_fuse9 = "07_fuse.rs" 60 15 60 32
  let%span s07_fuse10 = "07_fuse.rs" 61 15 61 32
  let%span s07_fuse11 = "07_fuse.rs" 62 14 62 42
  let%span s07_fuse12 = "07_fuse.rs" 58 4 58 10
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_I'0
  
  type t_Fuse'0  =
    { t_Fuse__iter'0: t_Option'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon4] produces'1 a ab b)
   -> ([%#scommon5] produces'1 b bc c)  -> ([%#scommon6] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon3] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate produces'0 [#"07_fuse.rs" 26 4 26 65] (self : t_Fuse'0) (prod : Seq.seq t_Item'0) (other : t_Fuse'0) =
    [%#s07_fuse1] match self.t_Fuse__iter'0 with
      | C_None'0 -> prod = (Seq.empty  : Seq.seq t_Item'0) /\ other.t_Fuse__iter'0 = self.t_Fuse__iter'0
      | C_Some'0 i -> match other.t_Fuse__iter'0 with
        | C_Some'0 i2 -> produces'1 i prod i2
        | C_None'0 -> false
        end
      end
  
  function produces_trans'1 [#"07_fuse.rs" 63 4 63 90] (a : t_Fuse'0) (ab : Seq.seq t_Item'0) (b : t_Fuse'0) (bc : Seq.seq t_Item'0) (c : t_Fuse'0) : ()
    
   =
    [%#s07_fuse12] ()
  
  axiom produces_trans'1_spec : forall a : t_Fuse'0, ab : Seq.seq t_Item'0, b : t_Fuse'0, bc : Seq.seq t_Item'0, c : t_Fuse'0 . ([%#s07_fuse9] produces'0 a ab b)
   -> ([%#s07_fuse10] produces'0 b bc c)  -> ([%#s07_fuse11] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"07_fuse.rs" 56 4 56 26] (self : t_Fuse'0) : () =
    [%#s07_fuse8] ()
  
  axiom produces_refl'1_spec : forall self : t_Fuse'0 . [%#s07_fuse7] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate completed'0 [#"07_fuse.rs" 17 4 17 35] (self : borrowed (t_Fuse'0)) =
    [%#s07_fuse2] ((self.current).t_Fuse__iter'0 = C_None'0
    \/ (exists it : borrowed t_I'0 . completed'1 it /\ (self.current).t_Fuse__iter'0 = C_Some'0 (it.current)))
    /\ (self.final).t_Fuse__iter'0 = C_None'0
  
  goal refines : [%#s07_fuse0] forall self : borrowed (t_Fuse'0) . forall steps : Seq.seq t_Item'0 . forall next : t_Fuse'0 . produces'0 self.final steps next
  /\ completed'0 self
   -> produces'0 self.final steps next
  /\ completed'0 self
  /\ (forall result : () . steps = (Seq.empty  : Seq.seq t_Item'0) /\ self.final = next
   -> steps = (Seq.empty  : Seq.seq t_Item'0) /\ self.final = next)
end
