module T_05_map__Map [#"05_map.rs" 13 0 13 54]
  type t_Map 'i 'b 'f =
    | C_Map 'i 'f
  
  let rec t_Map < 'i > < 'b > < 'f > (input:t_Map 'i 'b 'f) (ret  (iter:'i) (func:'f))= any
    [ good (iter:'i) (func:'f)-> {C_Map iter func = input} (! ret {iter} {func}) ]
    
  
  function t_Map__func (self : t_Map 'i 'b 'f) : 'f =
    match self with
      | C_Map _ a -> a
      end
  
  function t_Map__iter (self : t_Map 'i 'b 'f) : 'i =
    match self with
      | C_Map a _ -> a
      end
end
module M_05_map__qyi14910388998417814812__produces_refl [#"05_map.rs" 33 4 33 26] (* <Map<I, B, F> as common::Iterator> *)
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "05_map.rs" 31 15 31 24
  let%span s05_map1 = "05_map.rs" 32 14 32 45
  let%span s05_map2 = "05_map.rs" 49 8 62 9
  let%span s05_map3 = "05_map.rs" 155 12 157 57
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span scommon11 = "common.rs" 14 15 14 24
  let%span scommon12 = "common.rs" 15 14 15 45
  let%span scommon13 = "common.rs" 19 15 19 21
  let%span scommon14 = "common.rs" 20 15 20 21
  let%span scommon15 = "common.rs" 21 15 21 21
  let%span scommon16 = "common.rs" 22 15 22 32
  let%span scommon17 = "common.rs" 23 15 23 32
  let%span scommon18 = "common.rs" 24 14 24 42
  let%span s05_map19 = "05_map.rs" 108 8 113 9
  let%span s05_map20 = "05_map.rs" 95 8 103 9
  let%span s05_map21 = "05_map.rs" 84 8 90 9
  let%span sseq22 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sinvariant23 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed24 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'6 (_1 : t_Item'0)
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed24] inv'6 self
  
  predicate inv'9 (_1 : t_Item'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Item'0 [inv'9 x] . inv'9 x = invariant'6 x
  
  use prelude.prelude.Borrow
  
  predicate inv'7 (_1 : borrowed f)
  
  predicate invariant'5 (self : borrowed f) =
    [%#sboxed24] inv'7 self
  
  predicate inv'8 (_1 : borrowed f)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed f [inv'8 x] . inv'8 x = invariant'5 x
  
  predicate inv'4 (_1 : f)
  
  predicate invariant'4 (self : borrowed f) =
    [%#sinvariant23] inv'4 self.current /\ inv'4 self.final
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed f [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate inv'3 (_1 : i)
  
  predicate invariant'3 (self : borrowed i) =
    [%#sinvariant23] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'5 (_1 : borrowed i)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed i [inv'5 x] . inv'5 x = invariant'3 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq22] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon13] inv'3 a)
   -> ([%#scommon14] inv'3 b)
   -> ([%#scommon15] inv'3 c)
   -> ([%#scommon16] produces'1 a ab b)
   -> ([%#scommon17] produces'1 b bc c)  -> ([%#scommon18] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon11] inv'3 self)
   -> ([%#scommon12] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq (borrowed f)) =
    [%#sseq22] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq (borrowed f))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (borrowed f) [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : t_Item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : t_Item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : t_Item'0, res : b . [%#sops10] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops7] unnest'0 self b)
   -> ([%#sops8] unnest'0 b c)  -> ([%#sops9] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops6] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : t_Item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : t_Item'0, res : b . ([%#sops4] postcondition_mut'0 self args res)
   -> ([%#sops5] unnest'0 self.current self.final)
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : i) (func : f) =
    [%#s05_map21] forall e : t_Item'0, i : i [produces'1 iter (Seq.singleton e) i] . inv'6 e /\ inv'3 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : i) (func : f) =
    [%#s05_map20] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1) b] . inv'2 s
    /\ inv'6 e1 /\ inv'6 e2 /\ inv'7 f /\ inv'3 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  use T_05_map__Map as T_05_map__Map
  
  use T_05_map__Map as T_05_map__Map
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map19] forall iter : borrowed i, func : f . inv'5 iter /\ inv'4 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  use T_05_map__Map as Map'0
  
  predicate invariant'0 [#"05_map.rs" 153 4 153 30] (self : Map'0.t_Map i b f) =
    [%#s05_map3] reinitialize'0 ()
    /\ preservation'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
    /\ next_precondition'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
  
  predicate inv'0 (_1 : Map'0.t_Map i b f)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Map'0.t_Map i b f [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> inv'3 iter /\ inv'4 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 48 4 48 67] (self : Map'0.t_Map i b f) (visited : Seq.seq b) (succ : Map'0.t_Map i b f)
    
   =
    [%#s05_map2] unnest'0 (T_05_map__Map.t_Map__func self) (T_05_map__Map.t_Map__func succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'1 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 (T_05_map__Map.t_Map__iter self) s (T_05_map__Map.t_Map__iter succ)] . inv'2 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (T_05_map__Map.t_Map__iter self) s (T_05_map__Map.t_Map__iter succ)
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      T_05_map__Map.t_Map__func self = T_05_map__Map.t_Map__func succ
    else
      (Seq.get fs 0).current = T_05_map__Map.t_Map__func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = T_05_map__Map.t_Map__func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (T_05_map__Map.t_Map__func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  
  use seq.Seq
  
  constant self  : Map'0.t_Map i b f
  
  function produces_refl [#"05_map.rs" 33 4 33 26] (self : Map'0.t_Map i b f) : ()
  
  goal vc_produces_refl : ([%#s05_map0] inv'0 self)  -> ([%#s05_map1] produces'0 self (Seq.empty  : Seq.seq b) self)
end
module M_05_map__qyi14910388998417814812__produces_trans [#"05_map.rs" 43 4 43 90] (* <Map<I, B, F> as common::Iterator> *)
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "05_map.rs" 37 15 37 21
  let%span s05_map1 = "05_map.rs" 38 15 38 21
  let%span s05_map2 = "05_map.rs" 39 15 39 21
  let%span s05_map3 = "05_map.rs" 40 15 40 32
  let%span s05_map4 = "05_map.rs" 41 15 41 32
  let%span s05_map5 = "05_map.rs" 42 14 42 42
  let%span s05_map6 = "05_map.rs" 49 8 62 9
  let%span s05_map7 = "05_map.rs" 155 12 157 57
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span scommon15 = "common.rs" 14 15 14 24
  let%span scommon16 = "common.rs" 15 14 15 45
  let%span scommon17 = "common.rs" 19 15 19 21
  let%span scommon18 = "common.rs" 20 15 20 21
  let%span scommon19 = "common.rs" 21 15 21 21
  let%span scommon20 = "common.rs" 22 15 22 32
  let%span scommon21 = "common.rs" 23 15 23 32
  let%span scommon22 = "common.rs" 24 14 24 42
  let%span s05_map23 = "05_map.rs" 108 8 113 9
  let%span s05_map24 = "05_map.rs" 95 8 103 9
  let%span s05_map25 = "05_map.rs" 84 8 90 9
  let%span sseq26 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sinvariant27 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed28 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'6 (_1 : t_Item'0)
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed28] inv'6 self
  
  predicate inv'9 (_1 : t_Item'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Item'0 [inv'9 x] . inv'9 x = invariant'6 x
  
  use prelude.prelude.Borrow
  
  predicate inv'7 (_1 : borrowed f)
  
  predicate invariant'5 (self : borrowed f) =
    [%#sboxed28] inv'7 self
  
  predicate inv'8 (_1 : borrowed f)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed f [inv'8 x] . inv'8 x = invariant'5 x
  
  predicate inv'4 (_1 : f)
  
  predicate invariant'4 (self : borrowed f) =
    [%#sinvariant27] inv'4 self.current /\ inv'4 self.final
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed f [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate inv'3 (_1 : i)
  
  predicate invariant'3 (self : borrowed i) =
    [%#sinvariant27] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'5 (_1 : borrowed i)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed i [inv'5 x] . inv'5 x = invariant'3 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq26] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon17] inv'3 a)
   -> ([%#scommon18] inv'3 b)
   -> ([%#scommon19] inv'3 c)
   -> ([%#scommon20] produces'1 a ab b)
   -> ([%#scommon21] produces'1 b bc c)  -> ([%#scommon22] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon15] inv'3 self)
   -> ([%#scommon16] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq (borrowed f)) =
    [%#sseq26] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq (borrowed f))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (borrowed f) [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : t_Item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : t_Item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : t_Item'0, res : b . [%#sops14] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops11] unnest'0 self b)
   -> ([%#sops12] unnest'0 b c)  -> ([%#sops13] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops10] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : t_Item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : t_Item'0, res : b . ([%#sops8] postcondition_mut'0 self args res)
   -> ([%#sops9] unnest'0 self.current self.final)
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : i) (func : f) =
    [%#s05_map25] forall e : t_Item'0, i : i [produces'1 iter (Seq.singleton e) i] . inv'6 e /\ inv'3 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : i) (func : f) =
    [%#s05_map24] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1) b] . inv'2 s
    /\ inv'6 e1 /\ inv'6 e2 /\ inv'7 f /\ inv'3 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  use T_05_map__Map as T_05_map__Map
  
  use T_05_map__Map as T_05_map__Map
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map23] forall iter : borrowed i, func : f . inv'5 iter /\ inv'4 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  use T_05_map__Map as Map'0
  
  predicate invariant'0 [#"05_map.rs" 153 4 153 30] (self : Map'0.t_Map i b f) =
    [%#s05_map7] reinitialize'0 ()
    /\ preservation'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
    /\ next_precondition'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
  
  predicate inv'0 (_1 : Map'0.t_Map i b f)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Map'0.t_Map i b f [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> inv'3 iter /\ inv'4 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 48 4 48 67] (self : Map'0.t_Map i b f) (visited : Seq.seq b) (succ : Map'0.t_Map i b f)
    
   =
    [%#s05_map6] unnest'0 (T_05_map__Map.t_Map__func self) (T_05_map__Map.t_Map__func succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'1 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 (T_05_map__Map.t_Map__iter self) s (T_05_map__Map.t_Map__iter succ)] . inv'2 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (T_05_map__Map.t_Map__iter self) s (T_05_map__Map.t_Map__iter succ)
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      T_05_map__Map.t_Map__func self = T_05_map__Map.t_Map__func succ
    else
      (Seq.get fs 0).current = T_05_map__Map.t_Map__func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = T_05_map__Map.t_Map__func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (T_05_map__Map.t_Map__func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  
  constant a  : Map'0.t_Map i b f
  
  constant ab  : Seq.seq b
  
  constant b  : Map'0.t_Map i b f
  
  constant bc  : Seq.seq b
  
  constant c  : Map'0.t_Map i b f
  
  function produces_trans [#"05_map.rs" 43 4 43 90] (a : Map'0.t_Map i b f) (ab : Seq.seq b) (b : Map'0.t_Map i b f) (bc : Seq.seq b) (c : Map'0.t_Map i b f) : ()
    
  
  goal vc_produces_trans : ([%#s05_map4] produces'0 b bc c)
   -> ([%#s05_map3] produces'0 a ab b)
   -> ([%#s05_map2] inv'0 c)
   -> ([%#s05_map1] inv'0 b)  -> ([%#s05_map0] inv'0 a)  -> ([%#s05_map5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_05_map__qyi9543869049664362474__produces_one [#"05_map.rs" 138 4 138 57] (* Map<I, B, F> *)
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "05_map.rs" 137 14 137 68
  let%span s05_map1 = "05_map.rs" 139 8 146 9
  let%span s05_map2 = "05_map.rs" 49 8 62 9
  let%span s05_map3 = "05_map.rs" 31 15 31 24
  let%span s05_map4 = "05_map.rs" 32 14 32 45
  let%span s05_map5 = "05_map.rs" 29 4 29 10
  let%span s05_map6 = "05_map.rs" 37 15 37 21
  let%span s05_map7 = "05_map.rs" 38 15 38 21
  let%span s05_map8 = "05_map.rs" 39 15 39 21
  let%span s05_map9 = "05_map.rs" 40 15 40 32
  let%span s05_map10 = "05_map.rs" 41 15 41 32
  let%span s05_map11 = "05_map.rs" 42 14 42 42
  let%span s05_map12 = "05_map.rs" 35 4 35 10
  let%span scommon13 = "common.rs" 14 15 14 24
  let%span scommon14 = "common.rs" 15 14 15 45
  let%span scommon15 = "common.rs" 19 15 19 21
  let%span scommon16 = "common.rs" 20 15 20 21
  let%span scommon17 = "common.rs" 21 15 21 21
  let%span scommon18 = "common.rs" 22 15 22 32
  let%span scommon19 = "common.rs" 23 15 23 32
  let%span scommon20 = "common.rs" 24 14 24 42
  let%span sops21 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops24 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops25 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops26 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops27 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span sinvariant28 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq29 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span s05_map30 = "05_map.rs" 155 12 157 57
  let%span s05_map31 = "05_map.rs" 108 8 113 9
  let%span s05_map32 = "05_map.rs" 95 8 103 9
  let%span s05_map33 = "05_map.rs" 84 8 90 9
  let%span sboxed34 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'5 (_1 : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'6 (self : borrowed i) =
    [%#sinvariant28] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'9 (_1 : borrowed i)
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed i [inv'9 x] . inv'9 x = invariant'6 x
  
  type t_Item'0
  
  predicate inv'1 (_1 : t_Item'0)
  
  predicate invariant'5 (self : t_Item'0) =
    [%#sboxed34] inv'1 self
  
  predicate inv'8 (_1 : t_Item'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Item'0 [inv'8 x] . inv'8 x = invariant'5 x
  
  predicate inv'0 (_1 : borrowed f)
  
  predicate invariant'4 (self : borrowed f) =
    [%#sboxed34] inv'0 self
  
  predicate inv'7 (_1 : borrowed f)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed f [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate inv'6 (_1 : f)
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : i) (func : f) =
    [%#s05_map33] forall e : t_Item'0, i : i [produces'1 iter (Seq.singleton e) i] . inv'1 e /\ inv'5 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : b)
  
  use seq.Seq
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate inv'3 (_1 : Seq.seq t_Item'0)
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : i) (func : f) =
    [%#s05_map32] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1) b] . inv'3 s
    /\ inv'1 e1 /\ inv'1 e2 /\ inv'0 f /\ inv'5 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  use T_05_map__Map as T_05_map__Map
  
  use T_05_map__Map as T_05_map__Map
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map31] forall iter : borrowed i, func : f . inv'9 iter /\ inv'6 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  use T_05_map__Map as Map'0
  
  predicate invariant'3 [#"05_map.rs" 153 4 153 30] (self : Map'0.t_Map i b f) =
    [%#s05_map30] reinitialize'0 ()
    /\ preservation'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
    /\ next_precondition'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
  
  predicate inv'4 (_1 : Map'0.t_Map i b f)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Map'0.t_Map i b f [inv'4 x] . inv'4 x
  = (invariant'3 x
  /\ match x with
    | Map'0.C_Map iter func -> inv'5 iter /\ inv'6 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq29] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq (borrowed f)) =
    [%#sseq29] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq (borrowed f))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (borrowed f) [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_once'0 (self : f) (_2 : t_Item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : t_Item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : t_Item'0, res : b . [%#sops27] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops24] unnest'0 self b)
   -> ([%#sops25] unnest'0 b c)  -> ([%#sops26] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops23] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : t_Item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : t_Item'0, res : b . ([%#sops21] postcondition_mut'0 self args res)
   -> ([%#sops22] unnest'0 self.current self.final)
  
  use seq.Seq
  
  function produces_trans'1 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'1_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon15] inv'5 a)
   -> ([%#scommon16] inv'5 b)
   -> ([%#scommon17] inv'5 c)
   -> ([%#scommon18] produces'1 a ab b)
   -> ([%#scommon19] produces'1 b bc c)  -> ([%#scommon20] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'1_spec : forall self : i . ([%#scommon13] inv'5 self)
   -> ([%#scommon14] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate invariant'0 (self : borrowed f) =
    [%#sinvariant28] inv'6 self.current /\ inv'6 self.final
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed f [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 48 4 48 67] (self : Map'0.t_Map i b f) (visited : Seq.seq b) (succ : Map'0.t_Map i b f)
    
   =
    [%#s05_map2] unnest'0 (T_05_map__Map.t_Map__func self) (T_05_map__Map.t_Map__func succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'2 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 (T_05_map__Map.t_Map__iter self) s (T_05_map__Map.t_Map__iter succ)] . inv'3 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (T_05_map__Map.t_Map__iter self) s (T_05_map__Map.t_Map__iter succ)
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      T_05_map__Map.t_Map__func self = T_05_map__Map.t_Map__func succ
    else
      (Seq.get fs 0).current = T_05_map__Map.t_Map__func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = T_05_map__Map.t_Map__func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (T_05_map__Map.t_Map__func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  
  function produces_trans'0 [#"05_map.rs" 43 4 43 90] (a : Map'0.t_Map i b f) (ab : Seq.seq b) (b : Map'0.t_Map i b f) (bc : Seq.seq b) (c : Map'0.t_Map i b f) : ()
    
   =
    [%#s05_map12] ()
  
  axiom produces_trans'0_spec : forall a : Map'0.t_Map i b f, ab : Seq.seq b, b : Map'0.t_Map i b f, bc : Seq.seq b, c : Map'0.t_Map i b f . ([%#s05_map6] inv'4 a)
   -> ([%#s05_map7] inv'4 b)
   -> ([%#s05_map8] inv'4 c)
   -> ([%#s05_map9] produces'0 a ab b)
   -> ([%#s05_map10] produces'0 b bc c)  -> ([%#s05_map11] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"05_map.rs" 33 4 33 26] (self : Map'0.t_Map i b f) : () =
    [%#s05_map5] ()
  
  axiom produces_refl'0_spec : forall self : Map'0.t_Map i b f . ([%#s05_map3] inv'4 self)
   -> ([%#s05_map4] produces'0 self (Seq.empty  : Seq.seq b) self)
  
  use seq.Seq
  
  constant self  : Map'0.t_Map i b f
  
  constant visited  : b
  
  constant succ  : Map'0.t_Map i b f
  
  predicate produces_one [#"05_map.rs" 138 4 138 57] (self : Map'0.t_Map i b f) (visited : b) (succ : Map'0.t_Map i b f)
  
  goal vc_produces_one : [%#s05_map0] ([%#s05_map1] exists f : borrowed f, e : t_Item'0 [postcondition_mut'0 f (e) visited] . inv'0 f
  /\ inv'1 e
  /\ f.current = T_05_map__Map.t_Map__func self
  /\ f.final = T_05_map__Map.t_Map__func succ
  /\ produces'1 (T_05_map__Map.t_Map__iter self) (Seq.singleton e) (T_05_map__Map.t_Map__iter succ)
  /\ precondition'0 f.current (e) /\ postcondition_mut'0 f (e) visited)
  = produces'0 self (Seq.singleton visited) succ
end
module M_05_map__qyi14910388998417814812__next [#"05_map.rs" 69 4 69 44] (* <Map<I, B, F> as common::Iterator> *)
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "05_map.rs" 72 16 72 62
  let%span s05_map1 = "05_map.rs" 73 16 73 58
  let%span s05_map2 = "05_map.rs" 69 17 69 21
  let%span s05_map3 = "05_map.rs" 65 14 68 5
  let%span s05_map4 = "05_map.rs" 69 26 69 44
  let%span scommon5 = "common.rs" 31 17 31 21
  let%span scommon6 = "common.rs" 27 14 30 5
  let%span scommon7 = "common.rs" 31 26 31 44
  let%span s05_map8 = "05_map.rs" 117 15 117 24
  let%span s05_map9 = "05_map.rs" 118 15 118 21
  let%span s05_map10 = "05_map.rs" 119 15 119 21
  let%span s05_map11 = "05_map.rs" 120 15 120 21
  let%span s05_map12 = "05_map.rs" 121 15 121 24
  let%span s05_map13 = "05_map.rs" 122 4 122 60
  let%span s05_map14 = "05_map.rs" 123 15 123 30
  let%span s05_map15 = "05_map.rs" 124 15 124 43
  let%span s05_map16 = "05_map.rs" 125 14 125 42
  let%span s05_map17 = "05_map.rs" 126 14 126 47
  let%span s05_map18 = "05_map.rs" 116 4 116 12
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 163 27 163 52
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 151 0 175 1
  let%span s05_map21 = "05_map.rs" 26 8 26 75
  let%span s05_map22 = "05_map.rs" 137 14 137 68
  let%span s05_map23 = "05_map.rs" 139 8 146 9
  let%span scommon24 = "common.rs" 14 15 14 24
  let%span scommon25 = "common.rs" 15 14 15 45
  let%span scommon26 = "common.rs" 19 15 19 21
  let%span scommon27 = "common.rs" 20 15 20 21
  let%span scommon28 = "common.rs" 21 15 21 21
  let%span scommon29 = "common.rs" 22 15 22 32
  let%span scommon30 = "common.rs" 23 15 23 32
  let%span scommon31 = "common.rs" 24 14 24 42
  let%span s05_map32 = "05_map.rs" 95 8 103 9
  let%span s05_map33 = "05_map.rs" 84 8 90 9
  let%span sresolve34 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span s05_map35 = "05_map.rs" 49 8 62 9
  let%span sops36 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops37 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops38 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops39 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops40 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops41 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops42 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span sinvariant43 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span s05_map44 = "05_map.rs" 155 12 157 57
  let%span sseq45 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span s05_map46 = "05_map.rs" 108 8 113 9
  let%span sboxed47 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  predicate inv'9 (_1 : borrowed f)
  
  predicate invariant'7 (self : borrowed f) =
    [%#sboxed47] inv'9 self
  
  predicate inv'14 (_1 : borrowed f)
  
  axiom inv_axiom'10 [@rewrite] : forall x : borrowed f [inv'14 x] . inv'14 x = invariant'7 x
  
  type t_Item'0
  
  predicate inv'7 (_1 : t_Item'0)
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed47] inv'7 self
  
  predicate inv'13 (_1 : t_Item'0)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_Item'0 [inv'13 x] . inv'13 x = invariant'6 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq (borrowed f)) =
    [%#sseq45] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'14 (Seq.get self i)
  
  predicate inv'12 (_1 : Seq.seq (borrowed f))
  
  axiom inv_axiom'8 [@rewrite] : forall x : Seq.seq (borrowed f) [inv'12 x] . inv'12 x = invariant'5 x
  
  predicate inv'11 (_1 : t_Item'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Item'0 [inv'11 x] . inv'11 x = (let (a) = x in inv'7 a)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq t_Item'0) =
    [%#sseq45] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'13 (Seq.get self i)
  
  predicate inv'10 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'10 x] . inv'10 x = invariant'4 x
  
  predicate resolve'2 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : t_Item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : t_Item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : t_Item'0, res : b . [%#sops42] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'2 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops39] unnest'0 self b)
   -> ([%#sops40] unnest'0 b c)  -> ([%#sops41] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops38] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : t_Item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : t_Item'0, res : b . ([%#sops36] postcondition_mut'0 self args res)
   -> ([%#sops37] unnest'0 self.current self.final)
  
  predicate inv'1 (_1 : f)
  
  predicate invariant'3 (self : borrowed f) =
    [%#sinvariant43] inv'1 self.current /\ inv'1 self.final
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed f [inv'9 x] . inv'9 x = invariant'3 x
  
  predicate inv'0 (_1 : i)
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : i) (func : f) =
    [%#s05_map33] forall e : t_Item'0, i : i [produces'0 iter (Seq.singleton e) i] . inv'7 e /\ inv'0 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : i) (func : f) =
    [%#s05_map32] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1) b] . inv'10 s
    /\ inv'7 e1 /\ inv'7 e2 /\ inv'9 f /\ inv'0 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  use T_05_map__Map as T_05_map__Map
  
  use T_05_map__Map as T_05_map__Map
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate inv'4 (_1 : borrowed i)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map46] forall iter : borrowed i, func : f . inv'4 iter /\ inv'1 func
     -> completed'1 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  use T_05_map__Map as Map'0
  
  predicate invariant'2 [#"05_map.rs" 153 4 153 30] (self : Map'0.t_Map i b f) =
    [%#s05_map44] reinitialize'0 ()
    /\ preservation'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
    /\ next_precondition'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
  
  predicate inv'6 (_1 : Map'0.t_Map i b f)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Map'0.t_Map i b f [inv'6 x] . inv'6 x
  = (invariant'2 x
  /\ match x with
    | Map'0.C_Map iter func -> inv'0 iter /\ inv'1 func
    end)
  
  use T_core__option__Option as Option'0
  
  predicate inv'5 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'5 x] . inv'5 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'7 a_0
    end
  
  predicate invariant'1 (self : borrowed i) =
    [%#sinvariant43] inv'0 self.current /\ inv'0 self.final
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed i [inv'4 x] . inv'4 x = invariant'1 x
  
  predicate inv'8 (_1 : b)
  
  use T_core__option__Option as Option'0
  
  predicate inv'3 (_1 : Option'0.t_Option b)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option b [inv'3 x] . inv'3 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'8 a_0
    end
  
  predicate invariant'0 (self : borrowed (Map'0.t_Map i b f)) =
    [%#sinvariant43] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'2 (_1 : borrowed (Map'0.t_Map i b f))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (Map'0.t_Map i b f) [inv'2 x] . inv'2 x = invariant'0 x
  
  use seq.Seq
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon26] inv'0 a)
   -> ([%#scommon27] inv'0 b)
   -> ([%#scommon28] inv'0 c)
   -> ([%#scommon29] produces'0 a ab b)
   -> ([%#scommon30] produces'0 b bc c)  -> ([%#scommon31] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon24] inv'0 self)
   -> ([%#scommon25] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [@inline:trivial] [#"05_map.rs" 48 4 48 67] (self : Map'0.t_Map i b f) (visited : Seq.seq b) (succ : Map'0.t_Map i b f)
    
   =
    [%#s05_map35] unnest'0 (T_05_map__Map.t_Map__func self) (T_05_map__Map.t_Map__func succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'12 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'0 (T_05_map__Map.t_Map__iter self) s (T_05_map__Map.t_Map__iter succ)] . inv'10 s
    /\ Seq.length s = Seq.length visited
    /\ produces'0 (T_05_map__Map.t_Map__iter self) s (T_05_map__Map.t_Map__iter succ)
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      T_05_map__Map.t_Map__func self = T_05_map__Map.t_Map__func succ
    else
      (Seq.get fs 0).current = T_05_map__Map.t_Map__func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = T_05_map__Map.t_Map__func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (T_05_map__Map.t_Map__func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  
  use seq.Seq
  
  predicate produces_one'0 [#"05_map.rs" 138 4 138 57] (self : Map'0.t_Map i b f) (visited : b) (succ : Map'0.t_Map i b f)
    
   =
    [%#s05_map23] exists f : borrowed f, e : t_Item'0 [postcondition_mut'0 f (e) visited] . inv'9 f
    /\ inv'7 e
    /\ f.current = T_05_map__Map.t_Map__func self
    /\ f.final = T_05_map__Map.t_Map__func succ
    /\ produces'0 (T_05_map__Map.t_Map__iter self) (Seq.singleton e) (T_05_map__Map.t_Map__iter succ)
    /\ precondition'0 f.current (e) /\ postcondition_mut'0 f (e) visited
  
  axiom produces_one'0_spec : forall self : Map'0.t_Map i b f, visited : b, succ : Map'0.t_Map i b f . [%#s05_map22] produces_one'0 self visited succ
  = produces'1 self (Seq.singleton visited) succ
  
  predicate completed'0 [#"05_map.rs" 25 4 25 35] (self : borrowed (Map'0.t_Map i b f)) =
    [%#s05_map21] completed'1 (Borrow.borrow_logic (T_05_map__Map.t_Map__iter self.current) (T_05_map__Map.t_Map__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ T_05_map__Map.t_Map__func self.current = T_05_map__Map.t_Map__func self.final
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Map'0.t_Map i b f)) =
    [%#sresolve34] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Map'0.t_Map i b f)) =
    resolve'1 _1
  
  let rec call_mut'0 (self:borrowed f) (args:t_Item'0) (return'  (ret:b))= {[@expl:precondition] inv'11 args}
    {[@expl:precondition] inv'9 self}
    {[@expl:precondition] [%#sops19] precondition'0 self.current args}
    any [ return' (result:b)-> {inv'8 result} {[%#sops20] postcondition_mut'0 self args result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  function produces_one_invariant'0 [#"05_map.rs" 127 4 127 73] (self : Map'0.t_Map i b f) (e : t_Item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  
  axiom produces_one_invariant'0_spec : forall self : Map'0.t_Map i b f, e : t_Item'0, r : b, f : borrowed f, iter : i . ([%#s05_map8] inv'6 self)
   -> ([%#s05_map9] inv'7 e)
   -> ([%#s05_map10] inv'8 r)
   -> ([%#s05_map11] inv'9 f)
   -> ([%#s05_map12] inv'0 iter)
   -> ([%#s05_map13] produces'0 (T_05_map__Map.t_Map__iter self) (Seq.singleton e) iter)
   -> ([%#s05_map14] f.current = T_05_map__Map.t_Map__func self)
   -> ([%#s05_map15] postcondition_mut'0 f (e) r)
   -> ([%#s05_map17] next_precondition'0 iter f.final) && ([%#s05_map16] preservation'0 iter f.final)
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option t_Item'0))= {[@expl:precondition] [%#scommon5] inv'4 self}
    any
    [ return' (result:Option'0.t_Option t_Item'0)-> {[%#scommon7] inv'5 result}
      {[%#scommon6] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (Map'0.t_Map i b f)) (return'  (ret:Option'0.t_Option b))= {[%#s05_map2] inv'2 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Map'0.t_Map <i> <b> <f> {self.current}
          (fun (riter'0:i) (rfunc'0:f) ->
            {inv'0 riter'0}
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &self <- { self with current = Map'0.C_Map _ret'.final rfunc'0 ; } ] 
                s1))
      | s1 = next'0 {_4} (fun (_ret':Option'0.t_Option t_Item'0) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = any [ br0 -> {_3 = Option'0.C_None } (! bb4) | br1 (a:t_Item'0)-> {_3 = Option'0.C_Some a} (! bb3) ] 
    | bb3 = bb5
    | bb5 = s0
      [ s0 = Option'0.v_Some <t_Item'0> {_3} (fun (r0'0:t_Item'0) ->  [ &v <- r0'0 ] s1)
      | s1 = {[@expl:assertion] [%#s05_map0] precondition'0 (T_05_map__Map.t_Map__func self.current) (v)} s2
      | s2 = bb6 ]
      
    | bb6 = s0 [ s0 =  [ &_9 <- [%#s05_map1] Snapshot.new () ] s1 | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = Map'0.t_Map <i> <b> <f> {self.current}
          (fun (riter'0:i) (rfunc'0:f) ->
            {inv'1 rfunc'0}
            Borrow.borrow_final <f> {rfunc'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed f) ->
                 [ &_12 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &self <- { self with current = Map'0.C_Map riter'0 _ret'.final ; } ] 
                s1))
      | s1 =  [ &_13 <- (v) ] s2
      | s2 = call_mut'0 {_12} {_13} (fun (_ret':b) ->  [ &_11 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb8 = s0 [ s0 = {[@expl:type invariant] inv'2 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb9 ] 
    | bb9 = s0 [ s0 =  [ &_0 <- Option'0.C_Some _11 ] s1 | s1 = bb10 ] 
    | bb10 = bb11
    | bb11 = bb12
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'2 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 =  [ &_0 <- Option'0.C_None ] s3
      | s3 = bb12 ]
      
    | bb12 = bb13
    | bb13 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option b = any_l ()
    | & self : borrowed (Map'0.t_Map i b f) = self
    | & _3 : Option'0.t_Option t_Item'0 = any_l ()
    | & _4 : borrowed i = any_l ()
    | & v : t_Item'0 = any_l ()
    | & _9 : Snapshot.snap_ty () = any_l ()
    | & _11 : b = any_l ()
    | & _12 : borrowed f = any_l ()
    | & _13 : t_Item'0 = any_l () ]
    
    [ return' (result:Option'0.t_Option b)-> {[@expl:postcondition] [%#s05_map4] inv'3 result}
      {[@expl:postcondition] [%#s05_map3] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces_one'0 self.current v self.final
        end}
      (! return' {result}) ]
    
end
module M_05_map__qyi9543869049664362474__produces_one_invariant [#"05_map.rs" 127 4 127 73] (* Map<I, B, F> *)
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "05_map.rs" 117 15 117 24
  let%span s05_map1 = "05_map.rs" 118 15 118 21
  let%span s05_map2 = "05_map.rs" 119 15 119 21
  let%span s05_map3 = "05_map.rs" 120 15 120 21
  let%span s05_map4 = "05_map.rs" 121 15 121 24
  let%span s05_map5 = "05_map.rs" 122 4 122 60
  let%span s05_map6 = "05_map.rs" 123 15 123 30
  let%span s05_map7 = "05_map.rs" 124 15 124 43
  let%span s05_map8 = "05_map.rs" 125 14 125 42
  let%span s05_map9 = "05_map.rs" 126 14 126 47
  let%span s05_map10 = "05_map.rs" 116 4 116 12
  let%span s05_map11 = "05_map.rs" 95 8 103 9
  let%span s05_map12 = "05_map.rs" 84 8 90 9
  let%span scommon13 = "common.rs" 14 15 14 24
  let%span scommon14 = "common.rs" 15 14 15 45
  let%span scommon15 = "common.rs" 19 15 19 21
  let%span scommon16 = "common.rs" 20 15 20 21
  let%span scommon17 = "common.rs" 21 15 21 21
  let%span scommon18 = "common.rs" 22 15 22 32
  let%span scommon19 = "common.rs" 23 15 23 32
  let%span scommon20 = "common.rs" 24 14 24 42
  let%span sops21 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops24 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops25 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops26 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops27 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span s05_map28 = "05_map.rs" 155 12 157 57
  let%span sinvariant29 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq30 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span s05_map31 = "05_map.rs" 108 8 113 9
  let%span sboxed32 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'4 (_1 : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed i) =
    [%#sinvariant29] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'8 (_1 : borrowed i)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed i [inv'8 x] . inv'8 x = invariant'4 x
  
  type t_Item'0
  
  predicate inv'1 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed32] inv'1 self
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = invariant'3 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq30] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : t_Item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : t_Item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : t_Item'0, res : b . [%#sops27] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops24] unnest'0 self b)
   -> ([%#sops25] unnest'0 b c)  -> ([%#sops26] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops23] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : t_Item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : t_Item'0, res : b . ([%#sops21] postcondition_mut'0 self args res)
   -> ([%#sops22] unnest'0 self.current self.final)
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon15] inv'4 a)
   -> ([%#scommon16] inv'4 b)
   -> ([%#scommon17] inv'4 c)
   -> ([%#scommon18] produces'0 a ab b)
   -> ([%#scommon19] produces'0 b bc c)  -> ([%#scommon20] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon13] inv'4 self)
   -> ([%#scommon14] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate inv'6 (_1 : f)
  
  predicate invariant'1 (self : borrowed f) =
    [%#sinvariant29] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'3 (_1 : borrowed f)
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed f [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : i) (func : f) =
    [%#s05_map12] forall e : t_Item'0, i : i [produces'0 iter (Seq.singleton e) i] . inv'1 e /\ inv'4 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : i) (func : f) =
    [%#s05_map11] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1) b] . inv'5 s
    /\ inv'1 e1 /\ inv'1 e2 /\ inv'3 f /\ inv'4 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  use T_05_map__Map as T_05_map__Map
  
  use T_05_map__Map as T_05_map__Map
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map31] forall iter : borrowed i, func : f . inv'8 iter /\ inv'6 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  use T_05_map__Map as Map'0
  
  predicate invariant'0 [#"05_map.rs" 153 4 153 30] (self : Map'0.t_Map i b f) =
    [%#s05_map28] reinitialize'0 ()
    /\ preservation'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
    /\ next_precondition'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
  
  predicate inv'0 (_1 : Map'0.t_Map i b f)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Map'0.t_Map i b f [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> inv'4 iter /\ inv'6 func
    end)
  
  predicate inv'2 (_1 : b)
  
  constant self  : Map'0.t_Map i b f
  
  constant e  : t_Item'0
  
  constant r  : b
  
  constant f  : borrowed f
  
  constant iter  : i
  
  function produces_one_invariant [#"05_map.rs" 127 4 127 73] (self : Map'0.t_Map i b f) (e : t_Item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  
  goal vc_produces_one_invariant : ([%#s05_map7] postcondition_mut'0 f (e) r)
   -> ([%#s05_map6] f.current = T_05_map__Map.t_Map__func self)
   -> ([%#s05_map5] produces'0 (T_05_map__Map.t_Map__iter self) (Seq.singleton e) iter)
   -> ([%#s05_map4] inv'4 iter)
   -> ([%#s05_map3] inv'3 f)
   -> ([%#s05_map2] inv'2 r)
   -> ([%#s05_map1] inv'1 e)
   -> ([%#s05_map0] inv'0 self)
   -> ([%#s05_map10] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, i : i . inv'5 s
  /\ inv'1 e1 /\ inv'1 e2 /\ inv'4 i
   -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
   -> produces'0 (T_05_map__Map.t_Map__iter self) (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i)
  && (let _ = () in ([%#s05_map9] next_precondition'0 iter f.final) && ([%#s05_map8] preservation'0 iter f.final))
end
module M_05_map__map [#"05_map.rs" 168 0 168 84]
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "05_map.rs" 162 0 164 41
  let%span s05_map1 = "05_map.rs" 165 11 165 41
  let%span s05_map2 = "05_map.rs" 166 11 166 51
  let%span s05_map3 = "05_map.rs" 168 51 168 55
  let%span s05_map4 = "05_map.rs" 168 60 168 64
  let%span s05_map5 = "05_map.rs" 167 10 167 38
  let%span s05_map6 = "05_map.rs" 168 72 168 84
  let%span s05_map7 = "05_map.rs" 108 8 113 9
  let%span s05_map8 = "05_map.rs" 95 8 103 9
  let%span scommon9 = "common.rs" 14 15 14 24
  let%span scommon10 = "common.rs" 15 14 15 45
  let%span scommon11 = "common.rs" 19 15 19 21
  let%span scommon12 = "common.rs" 20 15 20 21
  let%span scommon13 = "common.rs" 21 15 21 21
  let%span scommon14 = "common.rs" 22 15 22 32
  let%span scommon15 = "common.rs" 23 15 23 32
  let%span scommon16 = "common.rs" 24 14 24 42
  let%span s05_map17 = "05_map.rs" 84 8 90 9
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops21 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops24 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span s05_map25 = "05_map.rs" 155 12 157 57
  let%span sinvariant26 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq27 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed28 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'0 (_1 : t_Item'0)
  
  predicate invariant'4 (self : t_Item'0) =
    [%#sboxed28] inv'0 self
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = invariant'4 x
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : t_Item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : t_Item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : t_Item'0, res : b . [%#sops24] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops21] unnest'0 self b)
   -> ([%#sops22] unnest'0 b c)  -> ([%#sops23] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops20] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : t_Item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : t_Item'0, res : b . ([%#sops18] postcondition_mut'0 self args res)
   -> ([%#sops19] unnest'0 self.current self.final)
  
  predicate inv'2 (_1 : f)
  
  predicate invariant'3 (self : borrowed f) =
    [%#sinvariant26] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'6 (_1 : borrowed f)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed f [inv'6 x] . inv'6 x = invariant'3 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq27] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  predicate inv'1 (_1 : i)
  
  predicate invariant'1 (self : borrowed i) =
    [%#sinvariant26] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'4 (_1 : borrowed i)
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed i [inv'4 x] . inv'4 x = invariant'1 x
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : i) (func : f) =
    [%#s05_map17] forall e : t_Item'0, i : i [produces'0 iter (Seq.singleton e) i] . inv'0 e /\ inv'1 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : i) (func : f) =
    [%#s05_map8] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1) b] . inv'5 s
    /\ inv'0 e1 /\ inv'0 e2 /\ inv'6 f /\ inv'1 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  use T_05_map__Map as T_05_map__Map
  
  use T_05_map__Map as T_05_map__Map
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map7] forall iter : borrowed i, func : f . inv'4 iter /\ inv'2 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  use T_05_map__Map as Map'0
  
  predicate invariant'0 [#"05_map.rs" 153 4 153 30] (self : Map'0.t_Map i b f) =
    [%#s05_map25] reinitialize'0 ()
    /\ preservation'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
    /\ next_precondition'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
  
  predicate inv'3 (_1 : Map'0.t_Map i b f)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Map'0.t_Map i b f [inv'3 x] . inv'3 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> inv'1 iter /\ inv'2 func
    end)
  
  use seq.Seq
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon11] inv'1 a)
   -> ([%#scommon12] inv'1 b)
   -> ([%#scommon13] inv'1 c)
   -> ([%#scommon14] produces'0 a ab b)
   -> ([%#scommon15] produces'0 b bc c)  -> ([%#scommon16] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon9] inv'1 self)
   -> ([%#scommon10] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec map (iter:i) (func:f) (return'  (ret:Map'0.t_Map i b f))= {[%#s05_map4] inv'2 func}
    {[%#s05_map3] inv'1 iter}
    {[%#s05_map2] preservation'0 iter func}
    {[%#s05_map1] reinitialize'0 ()}
    {[%#s05_map0] forall e : t_Item'0, i2 : i . inv'0 e /\ inv'1 i2
     -> produces'0 iter (Seq.singleton e) i2  -> precondition'0 func (e)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = s0 [ s0 =  [ &_0 <- Map'0.C_Map iter func ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = return' {_0} ]
    ) [ & _0 : Map'0.t_Map i b f = any_l () | & iter : i = iter | & func : f = func ] 
    [ return' (result:Map'0.t_Map i b f)-> {[@expl:postcondition] [%#s05_map6] inv'3 result}
      {[@expl:postcondition] [%#s05_map5] result = Map'0.C_Map iter func}
      (! return' {result}) ]
    
end
module M_05_map__qyi14910388998417814812 [#"05_map.rs" 20 0 20 70] (* <Map<I, B, F> as common::Iterator> *)
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "05_map.rs" 33 4 33 26
  let%span s05_map1 = "05_map.rs" 69 4 69 44
  let%span s05_map2 = "05_map.rs" 43 4 43 90
  let%span s05_map3 = "05_map.rs" 49 8 62 9
  let%span s05_map4 = "05_map.rs" 26 8 26 75
  let%span s05_map5 = "05_map.rs" 137 14 137 68
  let%span s05_map6 = "05_map.rs" 139 8 146 9
  let%span s05_map7 = "05_map.rs" 155 12 157 57
  let%span sinvariant8 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span s05_map9 = "05_map.rs" 108 8 113 9
  let%span s05_map10 = "05_map.rs" 95 8 103 9
  let%span s05_map11 = "05_map.rs" 84 8 90 9
  let%span sseq12 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed13 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'6 (_1 : t_Item'0)
  
  predicate invariant'7 (self : t_Item'0) =
    [%#sboxed13] inv'6 self
  
  predicate inv'12 (_1 : t_Item'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_Item'0 [inv'12 x] . inv'12 x = invariant'7 x
  
  use prelude.prelude.Borrow
  
  predicate inv'5 (_1 : borrowed f)
  
  predicate invariant'6 (self : borrowed f) =
    [%#sboxed13] inv'5 self
  
  predicate inv'11 (_1 : borrowed f)
  
  axiom inv_axiom'7 [@rewrite] : forall x : borrowed f [inv'11 x] . inv'11 x = invariant'6 x
  
  predicate inv'7 (_1 : i)
  
  predicate invariant'5 (self : borrowed i) =
    [%#sinvariant8] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'10 (_1 : borrowed i)
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed i [inv'10 x] . inv'10 x = invariant'5 x
  
  predicate inv'8 (_1 : f)
  
  predicate invariant'4 (self : borrowed f) =
    [%#sinvariant8] inv'8 self.current /\ inv'8 self.final
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed f [inv'5 x] . inv'5 x = invariant'4 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t_Item'0) =
    [%#sseq12] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'12 (Seq.get self i)
  
  predicate inv'4 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq (borrowed f)) =
    [%#sseq12] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'11 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq (borrowed f))
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq (borrowed f) [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate inv'9 (_1 : b)
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option b)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Option'0.t_Option b [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'9 a_0
    end
  
  use T_05_map__Map as Map'0
  
  predicate inv'0 (_1 : Map'0.t_Map i b f)
  
  predicate invariant'1 (self : borrowed (Map'0.t_Map i b f)) =
    [%#sinvariant8] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Map'0.t_Map i b f))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Map'0.t_Map i b f) [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : i) (func : f) =
    [%#s05_map11] forall e : t_Item'0, i : i [produces'1 iter (Seq.singleton e) i] . inv'6 e /\ inv'7 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : b)
  
  use seq.Seq
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : i) (func : f) =
    [%#s05_map10] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed f, b : b, i : i [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f (e1) b] . inv'4 s
    /\ inv'6 e1 /\ inv'6 e2 /\ inv'5 f /\ inv'7 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  use T_05_map__Map as T_05_map__Map
  
  use T_05_map__Map as T_05_map__Map
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map9] forall iter : borrowed i, func : f . inv'10 iter /\ inv'8 func
     -> completed'1 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"05_map.rs" 153 4 153 30] (self : Map'0.t_Map i b f) =
    [%#s05_map7] reinitialize'0 ()
    /\ preservation'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
    /\ next_precondition'0 (T_05_map__Map.t_Map__iter self) (T_05_map__Map.t_Map__func self)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Map'0.t_Map i b f [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> inv'7 iter /\ inv'8 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 48 4 48 67] (self : Map'0.t_Map i b f) (visited : Seq.seq b) (succ : Map'0.t_Map i b f)
    
   =
    [%#s05_map3] unnest'0 (T_05_map__Map.t_Map__func self) (T_05_map__Map.t_Map__func succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'3 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 (T_05_map__Map.t_Map__iter self) s (T_05_map__Map.t_Map__iter succ)] . inv'4 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (T_05_map__Map.t_Map__iter self) s (T_05_map__Map.t_Map__iter succ)
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      T_05_map__Map.t_Map__func self = T_05_map__Map.t_Map__func succ
    else
      (Seq.get fs 0).current = T_05_map__Map.t_Map__func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = T_05_map__Map.t_Map__func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (T_05_map__Map.t_Map__func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  
  predicate produces_one'0 [#"05_map.rs" 138 4 138 57] (self : Map'0.t_Map i b f) (visited : b) (succ : Map'0.t_Map i b f)
    
   =
    [%#s05_map6] exists f : borrowed f, e : t_Item'0 [postcondition_mut'0 f (e) visited] . inv'5 f
    /\ inv'6 e
    /\ f.current = T_05_map__Map.t_Map__func self
    /\ f.final = T_05_map__Map.t_Map__func succ
    /\ produces'1 (T_05_map__Map.t_Map__iter self) (Seq.singleton e) (T_05_map__Map.t_Map__iter succ)
    /\ precondition'0 f.current (e) /\ postcondition_mut'0 f (e) visited
  
  axiom produces_one'0_spec : forall self : Map'0.t_Map i b f, visited : b, succ : Map'0.t_Map i b f . [%#s05_map5] produces_one'0 self visited succ
  = produces'0 self (Seq.singleton visited) succ
  
  predicate completed'0 [#"05_map.rs" 25 4 25 35] (self : borrowed (Map'0.t_Map i b f)) =
    [%#s05_map4] completed'1 (Borrow.borrow_logic (T_05_map__Map.t_Map__iter self.current) (T_05_map__Map.t_Map__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ T_05_map__Map.t_Map__func self.current = T_05_map__Map.t_Map__func self.final
  
  use seq.Seq
  
  goal produces_refl_refn : [%#s05_map0] forall self : Map'0.t_Map i b f . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq b) self
   -> produces'0 self (Seq.empty  : Seq.seq b) self)
  
  goal next_refn : [%#s05_map1] forall self : borrowed (Map'0.t_Map i b f) . inv'1 self
   -> inv'1 self
  /\ (forall result : Option'0.t_Option b . inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces_one'0 self.current v self.final
    end
   -> inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_trans_refn : [%#s05_map2] forall a : Map'0.t_Map i b f . forall ab : Seq.seq b . forall b : Map'0.t_Map i b f . forall bc : Seq.seq b . forall c : Map'0.t_Map i b f . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
module M_05_map__qyi8373110953524039531 [#"05_map.rs" 150 0 150 71] (* <Map<I, B, F> as creusot_contracts::Invariant> *)
  type i
  
  type b
  
  type f
end
