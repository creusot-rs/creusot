module M_05_map__qyi14910388998417814812__produces_refl [#"05_map.rs" 33 4 33 26] (* <Map<I, B, F> as common::Iterator> *)
  let%span s05_map0 = "05_map.rs" 31 15 31 24
  let%span s05_map1 = "05_map.rs" 32 14 32 45
  let%span s05_map2 = "05_map.rs" 29 4 29 10
  let%span s05_map3 = "05_map.rs" 49 8 62 9
  let%span s05_map4 = "05_map.rs" 155 12 157 57
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  let%span scommon12 = "common.rs" 14 15 14 24
  let%span scommon13 = "common.rs" 15 14 15 45
  let%span scommon14 = "common.rs" 19 15 19 21
  let%span scommon15 = "common.rs" 20 15 20 21
  let%span scommon16 = "common.rs" 21 15 21 21
  let%span scommon17 = "common.rs" 22 15 22 32
  let%span scommon18 = "common.rs" 23 15 23 32
  let%span scommon19 = "common.rs" 24 14 24 42
  let%span s05_map20 = "05_map.rs" 109 12 112 87
  let%span s05_map21 = "05_map.rs" 96 12 102 41
  let%span s05_map22 = "05_map.rs" 85 12 89 39
  let%span sseq23 = "../../../../creusot-contracts/src/logic/seq.rs" 444 20 444 95
  let%span sinvariant24 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed25 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  use prelude.prelude.Borrow
  
  predicate inv'3 (_1 : t_I'0)
  
  predicate invariant'3 (self : borrowed t_I'0) =
    [%#sinvariant24] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'5 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed t_I'0 [inv'5 x] . inv'5 x = invariant'3 x
  
  predicate inv'4 (_1 : t_F'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon14] inv'3 a)
   -> ([%#scommon15] inv'3 b)
   -> ([%#scommon16] inv'3 c)
   -> ([%#scommon17] produces'1 a ab b)
   -> ([%#scommon18] produces'1 b bc c)  -> ([%#scommon19] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . ([%#scommon12] inv'3 self)
   -> ([%#scommon13] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate inv'6 (_1 : t_Item'0)
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map22] forall e : t_Item'0, i : t_I'0 [produces'1 iter (Seq.singleton e) i] . inv'6 e /\ inv'3 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  type t_B'0
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed25] inv'6 self
  
  predicate inv'9 (_1 : t_Item'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Item'0 [inv'9 x] . inv'9 x = invariant'6 x
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq23] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'4 (self : borrowed t_F'0) =
    [%#sinvariant24] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'7 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed t_F'0 [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops11] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops8] unnest'0 self b)
   -> ([%#sops9] unnest'0 b c)  -> ([%#sops10] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops7] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops5] postcondition_mut'0 self args res_state res)
   -> ([%#sops6] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map21] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1) f.final b] . inv'2 s
    /\ inv'6 e1 /\ inv'6 e2 /\ inv'7 f /\ inv'3 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f.current (e1) f.final b  -> precondition'0 f.final (e2)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map20] forall iter : borrowed t_I'0, func : t_F'0 . inv'5 iter /\ inv'4 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"05_map.rs" 153 4 153 30] (self : t_Map'0) =
    [%#s05_map4] reinitialize'0 ()
    /\ preservation'0 self.t_Map__iter'0 self.t_Map__func'0 /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0
  
  predicate inv'0 (_1 : t_Map'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Map'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'3 iter /\ inv'4 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'5 (self : borrowed t_F'0) =
    [%#sboxed25] inv'7 self
  
  predicate inv'8 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed t_F'0 [inv'8 x] . inv'8 x = invariant'5 x
  
  predicate invariant'1 (self : Seq.seq (borrowed t_F'0)) =
    [%#sseq23] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq (borrowed t_F'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (borrowed t_F'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 48 4 48 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map3] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . inv'1 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . inv'2 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  constant self  : t_Map'0
  
  function produces_refl'0 [#"05_map.rs" 33 4 33 26] (self : t_Map'0) : ()
  
  goal vc_produces_refl'0 : ([%#s05_map0] inv'0 self)
   -> ([%#s05_map1] produces'0 self (Seq.empty  : Seq.seq t_B'0) self)
end
module M_05_map__qyi14910388998417814812__produces_trans [#"05_map.rs" 43 4 43 90] (* <Map<I, B, F> as common::Iterator> *)
  let%span s05_map0 = "05_map.rs" 37 15 37 21
  let%span s05_map1 = "05_map.rs" 38 15 38 21
  let%span s05_map2 = "05_map.rs" 39 15 39 21
  let%span s05_map3 = "05_map.rs" 40 15 40 32
  let%span s05_map4 = "05_map.rs" 41 15 41 32
  let%span s05_map5 = "05_map.rs" 42 14 42 42
  let%span s05_map6 = "05_map.rs" 35 4 35 10
  let%span s05_map7 = "05_map.rs" 49 8 62 9
  let%span s05_map8 = "05_map.rs" 155 12 157 57
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  let%span scommon16 = "common.rs" 14 15 14 24
  let%span scommon17 = "common.rs" 15 14 15 45
  let%span scommon18 = "common.rs" 19 15 19 21
  let%span scommon19 = "common.rs" 20 15 20 21
  let%span scommon20 = "common.rs" 21 15 21 21
  let%span scommon21 = "common.rs" 22 15 22 32
  let%span scommon22 = "common.rs" 23 15 23 32
  let%span scommon23 = "common.rs" 24 14 24 42
  let%span s05_map24 = "05_map.rs" 109 12 112 87
  let%span s05_map25 = "05_map.rs" 96 12 102 41
  let%span s05_map26 = "05_map.rs" 85 12 89 39
  let%span sseq27 = "../../../../creusot-contracts/src/logic/seq.rs" 444 20 444 95
  let%span sinvariant28 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed29 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  use prelude.prelude.Borrow
  
  predicate inv'3 (_1 : t_I'0)
  
  predicate invariant'3 (self : borrowed t_I'0) =
    [%#sinvariant28] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'5 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed t_I'0 [inv'5 x] . inv'5 x = invariant'3 x
  
  predicate inv'4 (_1 : t_F'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon18] inv'3 a)
   -> ([%#scommon19] inv'3 b)
   -> ([%#scommon20] inv'3 c)
   -> ([%#scommon21] produces'1 a ab b)
   -> ([%#scommon22] produces'1 b bc c)  -> ([%#scommon23] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon16] inv'3 self)
   -> ([%#scommon17] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate inv'6 (_1 : t_Item'0)
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map26] forall e : t_Item'0, i : t_I'0 [produces'1 iter (Seq.singleton e) i] . inv'6 e /\ inv'3 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  type t_B'0
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed29] inv'6 self
  
  predicate inv'9 (_1 : t_Item'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Item'0 [inv'9 x] . inv'9 x = invariant'6 x
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq27] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'4 (self : borrowed t_F'0) =
    [%#sinvariant28] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'7 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed t_F'0 [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops15] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops12] unnest'0 self b)
   -> ([%#sops13] unnest'0 b c)  -> ([%#sops14] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops11] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops9] postcondition_mut'0 self args res_state res)
   -> ([%#sops10] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map25] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1) f.final b] . inv'2 s
    /\ inv'6 e1 /\ inv'6 e2 /\ inv'7 f /\ inv'3 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f.current (e1) f.final b  -> precondition'0 f.final (e2)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map24] forall iter : borrowed t_I'0, func : t_F'0 . inv'5 iter /\ inv'4 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"05_map.rs" 153 4 153 30] (self : t_Map'0) =
    [%#s05_map8] reinitialize'0 ()
    /\ preservation'0 self.t_Map__iter'0 self.t_Map__func'0 /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0
  
  predicate inv'0 (_1 : t_Map'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Map'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'3 iter /\ inv'4 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'5 (self : borrowed t_F'0) =
    [%#sboxed29] inv'7 self
  
  predicate inv'8 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed t_F'0 [inv'8 x] . inv'8 x = invariant'5 x
  
  predicate invariant'1 (self : Seq.seq (borrowed t_F'0)) =
    [%#sseq27] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq (borrowed t_F'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (borrowed t_F'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 48 4 48 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map7] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . inv'1 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . inv'2 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  use seq.Seq
  
  constant a  : t_Map'0
  
  constant ab  : Seq.seq t_B'0
  
  constant b  : t_Map'0
  
  constant bc  : Seq.seq t_B'0
  
  constant c  : t_Map'0
  
  function produces_trans'0 [#"05_map.rs" 43 4 43 90] (a : t_Map'0) (ab : Seq.seq t_B'0) (b : t_Map'0) (bc : Seq.seq t_B'0) (c : t_Map'0) : ()
    
  
  goal vc_produces_trans'0 : ([%#s05_map4] produces'0 b bc c)
   -> ([%#s05_map3] produces'0 a ab b)
   -> ([%#s05_map2] inv'0 c)
   -> ([%#s05_map1] inv'0 b)  -> ([%#s05_map0] inv'0 a)  -> ([%#s05_map5] produces'0 a (Seq.(++) ab bc) c)
end
module M_05_map__qyi14910388998417814812__next [#"05_map.rs" 69 4 69 44] (* <Map<I, B, F> as common::Iterator> *)
  let%span s05_map0 = "05_map.rs" 72 16 72 62
  let%span s05_map1 = "05_map.rs" 73 16 73 58
  let%span s05_map2 = "05_map.rs" 69 17 69 21
  let%span s05_map3 = "05_map.rs" 69 26 69 44
  let%span s05_map4 = "05_map.rs" 65 14 68 5
  let%span scommon5 = "common.rs" 31 17 31 21
  let%span scommon6 = "common.rs" 31 26 31 44
  let%span scommon7 = "common.rs" 27 14 30 5
  let%span s05_map8 = "05_map.rs" 117 15 117 24
  let%span s05_map9 = "05_map.rs" 118 15 118 21
  let%span s05_map10 = "05_map.rs" 119 15 119 21
  let%span s05_map11 = "05_map.rs" 120 15 120 21
  let%span s05_map12 = "05_map.rs" 121 15 121 24
  let%span s05_map13 = "05_map.rs" 122 4 122 60
  let%span s05_map14 = "05_map.rs" 123 15 123 30
  let%span s05_map15 = "05_map.rs" 124 15 124 50
  let%span s05_map16 = "05_map.rs" 125 14 125 42
  let%span s05_map17 = "05_map.rs" 126 14 126 47
  let%span s05_map18 = "05_map.rs" 128 8 133 9
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 158 27 158 52
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 159 26 159 71
  let%span s05_map21 = "05_map.rs" 26 8 26 75
  let%span s05_map22 = "05_map.rs" 137 14 137 68
  let%span s05_map23 = "05_map.rs" 140 12 145 60
  let%span scommon24 = "common.rs" 14 15 14 24
  let%span scommon25 = "common.rs" 15 14 15 45
  let%span scommon26 = "common.rs" 19 15 19 21
  let%span scommon27 = "common.rs" 20 15 20 21
  let%span scommon28 = "common.rs" 21 15 21 21
  let%span scommon29 = "common.rs" 22 15 22 32
  let%span scommon30 = "common.rs" 23 15 23 32
  let%span scommon31 = "common.rs" 24 14 24 42
  let%span s05_map32 = "05_map.rs" 96 12 102 41
  let%span s05_map33 = "05_map.rs" 85 12 89 39
  let%span sresolve34 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span s05_map35 = "05_map.rs" 49 8 62 9
  let%span sops36 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops37 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops38 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops39 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops40 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops41 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops42 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  let%span sinvariant43 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span s05_map44 = "05_map.rs" 155 12 157 57
  let%span s05_map45 = "05_map.rs" 109 12 112 87
  let%span sseq46 = "../../../../creusot-contracts/src/logic/seq.rs" 444 20 444 95
  let%span sboxed47 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  predicate inv'0 (_1 : t_I'0)
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon26] inv'0 a)
   -> ([%#scommon27] inv'0 b)
   -> ([%#scommon28] inv'0 c)
   -> ([%#scommon29] produces'0 a ab b)
   -> ([%#scommon30] produces'0 b bc c)  -> ([%#scommon31] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon24] inv'0 self)
   -> ([%#scommon25] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate invariant'1 (self : borrowed t_I'0) =
    [%#sinvariant43] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'4 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_I'0 [inv'4 x] . inv'4 x = invariant'1 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_Item'0
  
  predicate inv'7 (_1 : t_Item'0)
  
  predicate inv'5 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'5 x] . inv'5 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'7 a_0
    end
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  use seq.Seq
  
  let rec next'1 (self:borrowed t_I'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] [%#scommon5] inv'4 self}
    any
    [ return' (result:t_Option'0)-> {[%#scommon6] inv'5 result}
      {[%#scommon7] match result with
        | C_None'0 -> completed'1 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_Item'0))= any
    [ good (field_0:t_Item'0)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_Item'0 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  predicate inv'1 (_1 : t_F'0)
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map33] forall e : t_Item'0, i : t_I'0 [produces'0 iter (Seq.singleton e) i] . inv'7 e /\ inv'0 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  type t_B'0
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed47] inv'7 self
  
  predicate inv'13 (_1 : t_Item'0)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_Item'0 [inv'13 x] . inv'13 x = invariant'6 x
  
  predicate invariant'4 (self : Seq.seq t_Item'0) =
    [%#sseq46] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'13 (Seq.get self i)
  
  predicate inv'11 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'11 x] . inv'11 x = invariant'4 x
  
  predicate invariant'3 (self : borrowed t_F'0) =
    [%#sinvariant43] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'9 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed t_F'0 [inv'9 x] . inv'9 x = invariant'3 x
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  predicate resolve'2 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops42] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'2 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops39] unnest'0 self b)
   -> ([%#sops40] unnest'0 b c)  -> ([%#sops41] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops38] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops36] postcondition_mut'0 self args res_state res)
   -> ([%#sops37] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map32] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1) f.final b] . inv'11 s
    /\ inv'7 e1 /\ inv'7 e2 /\ inv'9 f /\ inv'0 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f.current (e1) f.final b  -> precondition'0 f.final (e2)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map45] forall iter : borrowed t_I'0, func : t_F'0 . inv'4 iter /\ inv'1 func
     -> completed'1 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'2 [#"05_map.rs" 153 4 153 30] (self : t_Map'0) =
    [%#s05_map44] reinitialize'0 ()
    /\ preservation'0 self.t_Map__iter'0 self.t_Map__func'0 /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0
  
  predicate inv'6 (_1 : t_Map'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Map'0 [inv'6 x] . inv'6 x
  = (invariant'2 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'0 iter /\ inv'1 func
    end)
  
  predicate inv'8 (_1 : t_B'0)
  
  function produces_one_invariant'0 [#"05_map.rs" 127 4 127 73] (self : t_Map'0) (e : t_Item'0) (r : t_B'0) (f : borrowed t_F'0) (iter : t_I'0) : ()
    
   =
    [%#s05_map18] let _ = () in ()
  
  axiom produces_one_invariant'0_spec : forall self : t_Map'0, e : t_Item'0, r : t_B'0, f : borrowed t_F'0, iter : t_I'0 . ([%#s05_map8] inv'6 self)
   -> ([%#s05_map9] inv'7 e)
   -> ([%#s05_map10] inv'8 r)
   -> ([%#s05_map11] inv'9 f)
   -> ([%#s05_map12] inv'0 iter)
   -> ([%#s05_map13] produces'0 self.t_Map__iter'0 (Seq.singleton e) iter)
   -> ([%#s05_map14] f.current = self.t_Map__func'0)
   -> ([%#s05_map15] postcondition_mut'0 f.current (e) f.final r)
   -> ([%#s05_map16] preservation'0 iter f.final) && ([%#s05_map17] next_precondition'0 iter f.final)
  
  use prelude.prelude.Snapshot
  
  predicate inv'10 (_1 : t_Item'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Item'0 [inv'10 x] . inv'10 x = (let (x0) = x in inv'7 x0)
  
  let rec call_mut'0 (self:borrowed t_F'0) (args:t_Item'0) (return'  (ret:t_B'0))= {[@expl:call_mut 'self' type invariant] inv'9 self}
    {[@expl:call_mut 'args' type invariant] inv'10 args}
    {[@expl:call_mut requires] [%#sops19] precondition'0 self.current args}
    any
    [ return' (result:t_B'0)-> {inv'8 result}
      {[%#sops20] postcondition_mut'0 self.current args self.final result}
      (! return' {result}) ]
    
  
  predicate invariant'0 (self : borrowed (t_Map'0)) =
    [%#sinvariant43] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'2 (_1 : borrowed (t_Map'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Map'0) [inv'2 x] . inv'2 x = invariant'0 x
  
  predicate resolve'1 (self : borrowed (t_Map'0)) =
    [%#sresolve34] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Map'0)) =
    resolve'1 _1
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 t_B'0
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  predicate inv'3 (_1 : t_Option'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'1 [inv'3 x] . inv'3 x
  = match x with
    | C_None'1 -> true
    | C_Some'1 a_0 -> inv'8 a_0
    end
  
  predicate completed'0 [#"05_map.rs" 25 4 25 35] (self : borrowed (t_Map'0)) =
    [%#s05_map21] completed'1 (Borrow.borrow_logic (self.current).t_Map__iter'0 (self.final).t_Map__iter'0 (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ (self.current).t_Map__func'0 = (self.final).t_Map__func'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'7 (self : borrowed t_F'0) =
    [%#sboxed47] inv'9 self
  
  predicate inv'14 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'10 [@rewrite] : forall x : borrowed t_F'0 [inv'14 x] . inv'14 x = invariant'7 x
  
  predicate invariant'5 (self : Seq.seq (borrowed t_F'0)) =
    [%#sseq46] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'14 (Seq.get self i)
  
  predicate inv'12 (_1 : Seq.seq (borrowed t_F'0))
  
  axiom inv_axiom'8 [@rewrite] : forall x : Seq.seq (borrowed t_F'0) [inv'12 x] . inv'12 x = invariant'5 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [@inline:trivial] [#"05_map.rs" 48 4 48 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map35] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . inv'12 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'0 self.t_Map__iter'0 s succ.t_Map__iter'0] . inv'11 s
    /\ Seq.length s = Seq.length visited
    /\ produces'0 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  predicate produces_one'0 [#"05_map.rs" 138 4 138 57] (self : t_Map'0) (visited : t_B'0) (succ : t_Map'0) =
    [%#s05_map23] exists f : borrowed t_F'0, e : t_Item'0 [postcondition_mut'0 f.current (e) f.final visited] . inv'9 f
    /\ inv'7 e
    /\ f.current = self.t_Map__func'0
    /\ f.final = succ.t_Map__func'0
    /\ produces'0 self.t_Map__iter'0 (Seq.singleton e) succ.t_Map__iter'0
    /\ precondition'0 f.current (e) /\ postcondition_mut'0 f.current (e) f.final visited
  
  axiom produces_one'0_spec : forall self : t_Map'0, visited : t_B'0, succ : t_Map'0 . [%#s05_map22] produces_one'0 self visited succ
  = produces'1 self (Seq.singleton visited) succ
  
  meta "compute_max_steps" 1000000
  
  let rec next'0 (self:borrowed (t_Map'0)) (return'  (ret:t_Option'1))= {[@expl:next 'self' type invariant] [%#s05_map2] inv'2 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 (self.current).t_Map__iter'0}
        Borrow.borrow_final <t_I'0> {(self.current).t_Map__iter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
          (fun (_ret':borrowed t_I'0) ->
             [ &_4 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { self.current with t_Map__iter'0 = _ret'.final } } ] 
            s1)
      | s1 = next'1 {_4} (fun (_ret':t_Option'0) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = any [ br0 -> {_3 = C_None'0 } (! bb4) | br1 (x0:t_Item'0)-> {_3 = C_Some'0 x0} (! bb3) ] 
    | bb3 = bb5
    | bb5 = s0
      [ s0 = v_Some'0 {_3} (fun (r0'0:t_Item'0) ->  [ &v <- r0'0 ] s1)
      | s1 = {[@expl:assertion] [%#s05_map0] precondition'0 (self.current).t_Map__func'0 (v)} s2
      | s2 = bb6 ]
      
    | bb6 = s0 [ s0 =  [ &_9 <- [%#s05_map1] Snapshot.new () ] s1 | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = {inv'1 (self.current).t_Map__func'0}
        Borrow.borrow_final <t_F'0> {(self.current).t_Map__func'0} {Borrow.inherit_id (Borrow.get_id self) 2}
          (fun (_ret':borrowed t_F'0) ->
             [ &_12 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &self <- { self with current = { self.current with t_Map__func'0 = _ret'.final } } ] 
            s1)
      | s1 =  [ &_13 <- (v) ] s2
      | s2 = call_mut'0 {_12} {_13} (fun (_ret':t_B'0) ->  [ &_11 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb8 = s0 [ s0 = {[@expl:type invariant] inv'2 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb9 ] 
    | bb9 = s0 [ s0 =  [ &_0 <- C_Some'1 _11 ] s1 | s1 = bb10 ] 
    | bb10 = bb11
    | bb11 = bb12
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'2 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 =  [ &_0 <- C_None'1 ] s3
      | s3 = bb12 ]
      
    | bb12 = bb13
    | bb13 = return' {_0} ]
    )
    [ & _0 : t_Option'1 = any_l ()
    | & self : borrowed (t_Map'0) = self
    | & _3 : t_Option'0 = any_l ()
    | & _4 : borrowed t_I'0 = any_l ()
    | & v : t_Item'0 = any_l ()
    | & _9 : Snapshot.snap_ty () = any_l ()
    | & _11 : t_B'0 = any_l ()
    | & _12 : borrowed t_F'0 = any_l ()
    | & _13 : t_Item'0 = any_l () ]
    
    [ return' (result:t_Option'1)-> {[@expl:next result type invariant] [%#s05_map3] inv'3 result}
      {[@expl:next ensures] [%#s05_map4] match result with
        | C_None'1 -> completed'0 self
        | C_Some'1 v -> produces_one'0 self.current v self.final
        end}
      (! return' {result}) ]
    
end
module M_05_map__qyi9543869049664362474__produces_one_invariant [#"05_map.rs" 127 4 127 73] (* Map<I, B, F> *)
  let%span s05_map0 = "05_map.rs" 117 15 117 24
  let%span s05_map1 = "05_map.rs" 118 15 118 21
  let%span s05_map2 = "05_map.rs" 119 15 119 21
  let%span s05_map3 = "05_map.rs" 120 15 120 21
  let%span s05_map4 = "05_map.rs" 121 15 121 24
  let%span s05_map5 = "05_map.rs" 122 4 122 60
  let%span s05_map6 = "05_map.rs" 123 15 123 30
  let%span s05_map7 = "05_map.rs" 124 15 124 50
  let%span s05_map8 = "05_map.rs" 125 14 125 42
  let%span s05_map9 = "05_map.rs" 126 14 126 47
  let%span s05_map10 = "05_map.rs" 129 12 132 94
  let%span s05_map11 = "05_map.rs" 128 8 133 9
  let%span s05_map12 = "05_map.rs" 96 12 102 41
  let%span s05_map13 = "05_map.rs" 85 12 89 39
  let%span scommon14 = "common.rs" 14 15 14 24
  let%span scommon15 = "common.rs" 15 14 15 45
  let%span scommon16 = "common.rs" 19 15 19 21
  let%span scommon17 = "common.rs" 20 15 20 21
  let%span scommon18 = "common.rs" 21 15 21 21
  let%span scommon19 = "common.rs" 22 15 22 32
  let%span scommon20 = "common.rs" 23 15 23 32
  let%span scommon21 = "common.rs" 24 14 24 42
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops24 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops25 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops26 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops27 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops28 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  let%span s05_map29 = "05_map.rs" 155 12 157 57
  let%span sinvariant30 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq31 = "../../../../creusot-contracts/src/logic/seq.rs" 444 20 444 95
  let%span s05_map32 = "05_map.rs" 109 12 112 87
  let%span sboxed33 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  use prelude.prelude.Borrow
  
  predicate inv'4 (_1 : t_I'0)
  
  predicate invariant'4 (self : borrowed t_I'0) =
    [%#sinvariant30] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'8 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed t_I'0 [inv'8 x] . inv'8 x = invariant'4 x
  
  predicate inv'6 (_1 : t_F'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon16] inv'4 a)
   -> ([%#scommon17] inv'4 b)
   -> ([%#scommon18] inv'4 c)
   -> ([%#scommon19] produces'0 a ab b)
   -> ([%#scommon20] produces'0 b bc c)  -> ([%#scommon21] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon14] inv'4 self)
   -> ([%#scommon15] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate inv'1 (_1 : t_Item'0)
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map13] forall e : t_Item'0, i : t_I'0 [produces'0 iter (Seq.singleton e) i] . inv'1 e /\ inv'4 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  type t_B'0
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed33] inv'1 self
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = invariant'3 x
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq31] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed t_F'0) =
    [%#sinvariant30] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'3 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed t_F'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops28] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops25] unnest'0 self b)
   -> ([%#sops26] unnest'0 b c)  -> ([%#sops27] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops24] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops22] postcondition_mut'0 self args res_state res)
   -> ([%#sops23] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map12] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1) f.final b] . inv'5 s
    /\ inv'1 e1 /\ inv'1 e2 /\ inv'3 f /\ inv'4 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f.current (e1) f.final b  -> precondition'0 f.final (e2)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map32] forall iter : borrowed t_I'0, func : t_F'0 . inv'8 iter /\ inv'6 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"05_map.rs" 153 4 153 30] (self : t_Map'0) =
    [%#s05_map29] reinitialize'0 ()
    /\ preservation'0 self.t_Map__iter'0 self.t_Map__func'0 /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0
  
  predicate inv'0 (_1 : t_Map'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Map'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'4 iter /\ inv'6 func
    end)
  
  predicate inv'2 (_1 : t_B'0)
  
  constant self  : t_Map'0
  
  constant e  : t_Item'0
  
  constant r  : t_B'0
  
  constant f  : borrowed t_F'0
  
  constant iter  : t_I'0
  
  function produces_one_invariant'0 [#"05_map.rs" 127 4 127 73] (self : t_Map'0) (e : t_Item'0) (r : t_B'0) (f : borrowed t_F'0) (iter : t_I'0) : ()
    
  
  goal vc_produces_one_invariant'0 : ([%#s05_map7] postcondition_mut'0 f.current (e) f.final r)
   -> ([%#s05_map6] f.current = self.t_Map__func'0)
   -> ([%#s05_map5] produces'0 self.t_Map__iter'0 (Seq.singleton e) iter)
   -> ([%#s05_map4] inv'4 iter)
   -> ([%#s05_map3] inv'3 f)
   -> ([%#s05_map2] inv'2 r)
   -> ([%#s05_map1] inv'1 e)
   -> ([%#s05_map0] inv'0 self)
   -> ([%#s05_map10] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, i : t_I'0 . inv'5 s
  /\ inv'1 e1 /\ inv'1 e2 /\ inv'4 i
   -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
   -> produces'0 self.t_Map__iter'0 (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i)
  && (let _ = () in ([%#s05_map8] preservation'0 iter f.final) && ([%#s05_map9] next_precondition'0 iter f.final))
end
module M_05_map__qyi9543869049664362474__produces_one [#"05_map.rs" 138 4 138 57] (* Map<I, B, F> *)
  let%span s05_map0 = "05_map.rs" 137 14 137 68
  let%span s05_map1 = "05_map.rs" 140 12 145 60
  let%span s05_map2 = "05_map.rs" 49 8 62 9
  let%span s05_map3 = "05_map.rs" 31 15 31 24
  let%span s05_map4 = "05_map.rs" 32 14 32 45
  let%span s05_map5 = "05_map.rs" 29 4 29 10
  let%span s05_map6 = "05_map.rs" 37 15 37 21
  let%span s05_map7 = "05_map.rs" 38 15 38 21
  let%span s05_map8 = "05_map.rs" 39 15 39 21
  let%span s05_map9 = "05_map.rs" 40 15 40 32
  let%span s05_map10 = "05_map.rs" 41 15 41 32
  let%span s05_map11 = "05_map.rs" 42 14 42 42
  let%span s05_map12 = "05_map.rs" 35 4 35 10
  let%span scommon13 = "common.rs" 14 15 14 24
  let%span scommon14 = "common.rs" 15 14 15 45
  let%span scommon15 = "common.rs" 19 15 19 21
  let%span scommon16 = "common.rs" 20 15 20 21
  let%span scommon17 = "common.rs" 21 15 21 21
  let%span scommon18 = "common.rs" 22 15 22 32
  let%span scommon19 = "common.rs" 23 15 23 32
  let%span scommon20 = "common.rs" 24 14 24 42
  let%span sops21 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops24 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops25 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops26 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops27 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  let%span sinvariant28 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq29 = "../../../../creusot-contracts/src/logic/seq.rs" 444 20 444 95
  let%span s05_map30 = "05_map.rs" 155 12 157 57
  let%span s05_map31 = "05_map.rs" 109 12 112 87
  let%span s05_map32 = "05_map.rs" 96 12 102 41
  let%span s05_map33 = "05_map.rs" 85 12 89 39
  let%span sboxed34 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use seq.Seq
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  use prelude.prelude.Borrow
  
  predicate inv'5 (_1 : t_I'0)
  
  predicate invariant'6 (self : borrowed t_I'0) =
    [%#sinvariant28] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'9 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed t_I'0 [inv'9 x] . inv'9 x = invariant'6 x
  
  predicate inv'6 (_1 : t_F'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon15] inv'5 a)
   -> ([%#scommon16] inv'5 b)
   -> ([%#scommon17] inv'5 c)
   -> ([%#scommon18] produces'1 a ab b)
   -> ([%#scommon19] produces'1 b bc c)  -> ([%#scommon20] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . ([%#scommon13] inv'5 self)
   -> ([%#scommon14] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate inv'1 (_1 : t_Item'0)
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map33] forall e : t_Item'0, i : t_I'0 [produces'1 iter (Seq.singleton e) i] . inv'1 e /\ inv'5 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  type t_B'0
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'5 (self : t_Item'0) =
    [%#sboxed34] inv'1 self
  
  predicate inv'8 (_1 : t_Item'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Item'0 [inv'8 x] . inv'8 x = invariant'5 x
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq29] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'0 (self : borrowed t_F'0) =
    [%#sinvariant28] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'0 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed t_F'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops27] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops24] unnest'0 self b)
   -> ([%#sops25] unnest'0 b c)  -> ([%#sops26] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops23] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops21] postcondition_mut'0 self args res_state res)
   -> ([%#sops22] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map32] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1) f.final b] . inv'3 s
    /\ inv'1 e1 /\ inv'1 e2 /\ inv'0 f /\ inv'5 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f.current (e1) f.final b  -> precondition'0 f.final (e2)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map31] forall iter : borrowed t_I'0, func : t_F'0 . inv'9 iter /\ inv'6 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'3 [#"05_map.rs" 153 4 153 30] (self : t_Map'0) =
    [%#s05_map30] reinitialize'0 ()
    /\ preservation'0 self.t_Map__iter'0 self.t_Map__func'0 /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0
  
  predicate inv'4 (_1 : t_Map'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Map'0 [inv'4 x] . inv'4 x
  = (invariant'3 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'5 iter /\ inv'6 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'4 (self : borrowed t_F'0) =
    [%#sboxed34] inv'0 self
  
  predicate inv'7 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed t_F'0 [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate invariant'1 (self : Seq.seq (borrowed t_F'0)) =
    [%#sseq29] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq (borrowed t_F'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (borrowed t_F'0) [inv'2 x] . inv'2 x = invariant'1 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 48 4 48 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map2] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . inv'2 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . inv'3 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  function produces_trans'0 [#"05_map.rs" 43 4 43 90] (a : t_Map'0) (ab : Seq.seq t_B'0) (b : t_Map'0) (bc : Seq.seq t_B'0) (c : t_Map'0) : ()
    
   =
    [%#s05_map12] ()
  
  axiom produces_trans'0_spec : forall a : t_Map'0, ab : Seq.seq t_B'0, b : t_Map'0, bc : Seq.seq t_B'0, c : t_Map'0 . ([%#s05_map6] inv'4 a)
   -> ([%#s05_map7] inv'4 b)
   -> ([%#s05_map8] inv'4 c)
   -> ([%#s05_map9] produces'0 a ab b)
   -> ([%#s05_map10] produces'0 b bc c)  -> ([%#s05_map11] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"05_map.rs" 33 4 33 26] (self : t_Map'0) : () =
    [%#s05_map5] ()
  
  axiom produces_refl'0_spec : forall self : t_Map'0 . ([%#s05_map3] inv'4 self)
   -> ([%#s05_map4] produces'0 self (Seq.empty  : Seq.seq t_B'0) self)
  
  constant self  : t_Map'0
  
  constant visited  : t_B'0
  
  constant succ  : t_Map'0
  
  predicate produces_one'0 [#"05_map.rs" 138 4 138 57] (self : t_Map'0) (visited : t_B'0) (succ : t_Map'0)
  
  goal vc_produces_one'0 : [%#s05_map0] ([%#s05_map1] exists f : borrowed t_F'0, e : t_Item'0 [postcondition_mut'0 f.current (e) f.final visited] . inv'0 f
  /\ inv'1 e
  /\ f.current = self.t_Map__func'0
  /\ f.final = succ.t_Map__func'0
  /\ produces'1 self.t_Map__iter'0 (Seq.singleton e) succ.t_Map__iter'0
  /\ precondition'0 f.current (e) /\ postcondition_mut'0 f.current (e) f.final visited)
  = produces'0 self (Seq.singleton visited) succ
end
module M_05_map__map [#"05_map.rs" 168 0 168 84]
  let%span s05_map0 = "05_map.rs" 168 51 168 55
  let%span s05_map1 = "05_map.rs" 168 60 168 64
  let%span s05_map2 = "05_map.rs" 162 11 164 39
  let%span s05_map3 = "05_map.rs" 165 11 165 41
  let%span s05_map4 = "05_map.rs" 166 11 166 51
  let%span s05_map5 = "05_map.rs" 168 72 168 84
  let%span s05_map6 = "05_map.rs" 167 10 167 38
  let%span s05_map7 = "05_map.rs" 109 12 112 87
  let%span s05_map8 = "05_map.rs" 96 12 102 41
  let%span scommon9 = "common.rs" 14 15 14 24
  let%span scommon10 = "common.rs" 15 14 15 45
  let%span scommon11 = "common.rs" 19 15 19 21
  let%span scommon12 = "common.rs" 20 15 20 21
  let%span scommon13 = "common.rs" 21 15 21 21
  let%span scommon14 = "common.rs" 22 15 22 32
  let%span scommon15 = "common.rs" 23 15 23 32
  let%span scommon16 = "common.rs" 24 14 24 42
  let%span s05_map17 = "05_map.rs" 85 12 89 39
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops21 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops24 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  let%span s05_map25 = "05_map.rs" 155 12 157 57
  let%span sinvariant26 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq27 = "../../../../creusot-contracts/src/logic/seq.rs" 444 20 444 95
  let%span sboxed28 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  use prelude.prelude.Intrinsic
  
  predicate inv'0 (_1 : t_I'0)
  
  predicate inv'1 (_1 : t_F'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon11] inv'0 a)
   -> ([%#scommon12] inv'0 b)
   -> ([%#scommon13] inv'0 c)
   -> ([%#scommon14] produces'0 a ab b)
   -> ([%#scommon15] produces'0 b bc c)  -> ([%#scommon16] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon9] inv'0 self)
   -> ([%#scommon10] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate inv'2 (_1 : t_Item'0)
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed t_I'0) =
    [%#sinvariant26] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'4 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed t_I'0 [inv'4 x] . inv'4 x = invariant'1 x
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map17] forall e : t_Item'0, i : t_I'0 [produces'0 iter (Seq.singleton e) i] . inv'2 e /\ inv'0 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  type t_B'0
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'4 (self : t_Item'0) =
    [%#sboxed28] inv'2 self
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq27] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  predicate invariant'3 (self : borrowed t_F'0) =
    [%#sinvariant26] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'6 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed t_F'0 [inv'6 x] . inv'6 x = invariant'3 x
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops24] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops21] unnest'0 self b)
   -> ([%#sops22] unnest'0 b c)  -> ([%#sops23] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops20] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops18] postcondition_mut'0 self args res_state res)
   -> ([%#sops19] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map8] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1) f.final b] . inv'5 s
    /\ inv'2 e1 /\ inv'2 e2 /\ inv'6 f /\ inv'0 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f.current (e1) f.final b  -> precondition'0 f.final (e2)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map7] forall iter : borrowed t_I'0, func : t_F'0 . inv'4 iter /\ inv'1 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"05_map.rs" 153 4 153 30] (self : t_Map'0) =
    [%#s05_map25] reinitialize'0 ()
    /\ preservation'0 self.t_Map__iter'0 self.t_Map__func'0 /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0
  
  predicate inv'3 (_1 : t_Map'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Map'0 [inv'3 x] . inv'3 x
  = (invariant'0 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'0 iter /\ inv'1 func
    end)
  
  meta "compute_max_steps" 1000000
  
  let rec map'0 (iter:t_I'0) (func:t_F'0) (return'  (ret:t_Map'0))= {[@expl:map 'iter' type invariant] [%#s05_map0] inv'0 iter}
    {[@expl:map 'func' type invariant] [%#s05_map1] inv'1 func}
    {[@expl:map requires #0] [%#s05_map2] forall e : t_Item'0, i2 : t_I'0 . inv'2 e /\ inv'0 i2
     -> produces'0 iter (Seq.singleton e) i2  -> precondition'0 func (e)}
    {[@expl:map requires #1] [%#s05_map3] reinitialize'0 ()}
    {[@expl:map requires #2] [%#s05_map4] preservation'0 iter func}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = s0 [ s0 =  [ &_0 <- { t_Map__iter'0 = iter; t_Map__func'0 = func } ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = return' {_0} ]
    ) [ & _0 : t_Map'0 = any_l () | & iter : t_I'0 = iter | & func : t_F'0 = func ] 
    [ return' (result:t_Map'0)-> {[@expl:map result type invariant] [%#s05_map5] inv'3 result}
      {[@expl:map ensures] [%#s05_map6] result = { t_Map__iter'0 = iter; t_Map__func'0 = func }}
      (! return' {result}) ]
    
end
module M_05_map__qyi14910388998417814812__next__refines [#"05_map.rs" 69 4 69 44] (* <Map<I, B, F> as common::Iterator> *)
  let%span s05_map0 = "05_map.rs" 69 4 69 44
  let%span s05_map1 = "05_map.rs" 26 8 26 75
  let%span s05_map2 = "05_map.rs" 137 14 137 68
  let%span s05_map3 = "05_map.rs" 140 12 145 60
  let%span s05_map4 = "05_map.rs" 49 8 62 9
  let%span sinvariant5 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span scommon6 = "common.rs" 14 15 14 24
  let%span scommon7 = "common.rs" 15 14 15 45
  let%span scommon8 = "common.rs" 19 15 19 21
  let%span scommon9 = "common.rs" 20 15 20 21
  let%span scommon10 = "common.rs" 21 15 21 21
  let%span scommon11 = "common.rs" 22 15 22 32
  let%span scommon12 = "common.rs" 23 15 23 32
  let%span scommon13 = "common.rs" 24 14 24 42
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  let%span sseq21 = "../../../../creusot-contracts/src/logic/seq.rs" 444 20 444 95
  let%span s05_map22 = "05_map.rs" 155 12 157 57
  let%span s05_map23 = "05_map.rs" 109 12 112 87
  let%span s05_map24 = "05_map.rs" 96 12 102 41
  let%span s05_map25 = "05_map.rs" 85 12 89 39
  let%span sboxed26 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  predicate inv'8 (_1 : t_I'0)
  
  predicate invariant'7 (self : borrowed t_I'0) =
    [%#sinvariant5] inv'8 self.current /\ inv'8 self.final
  
  predicate inv'12 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : borrowed t_I'0 [inv'12 x] . inv'12 x = invariant'7 x
  
  predicate inv'9 (_1 : t_F'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon8] inv'8 a)
   -> ([%#scommon9] inv'8 b)
   -> ([%#scommon10] inv'8 c)
   -> ([%#scommon11] produces'1 a ab b)
   -> ([%#scommon12] produces'1 b bc c)  -> ([%#scommon13] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon6] inv'8 self)
   -> ([%#scommon7] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate inv'3 (_1 : t_Item'0)
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map25] forall e : t_Item'0, i : t_I'0 [produces'1 iter (Seq.singleton e) i] . inv'3 e /\ inv'8 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  type t_B'0
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed26] inv'3 self
  
  predicate inv'11 (_1 : t_Item'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Item'0 [inv'11 x] . inv'11 x = invariant'6 x
  
  predicate invariant'3 (self : Seq.seq t_Item'0) =
    [%#sseq21] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'11 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'5 x] . inv'5 x = invariant'3 x
  
  predicate invariant'1 (self : borrowed t_F'0) =
    [%#sinvariant5] inv'9 self.current /\ inv'9 self.final
  
  predicate inv'2 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_F'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops20] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops17] unnest'0 self b)
   -> ([%#sops18] unnest'0 b c)  -> ([%#sops19] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops16] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops14] postcondition_mut'0 self args res_state res)
   -> ([%#sops15] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map24] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1) f.final b] . inv'5 s
    /\ inv'3 e1 /\ inv'3 e2 /\ inv'2 f /\ inv'8 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f.current (e1) f.final b  -> precondition'0 f.final (e2)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map23] forall iter : borrowed t_I'0, func : t_F'0 . inv'12 iter /\ inv'9 func
     -> completed'1 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'4 [#"05_map.rs" 153 4 153 30] (self : t_Map'0) =
    [%#s05_map22] reinitialize'0 ()
    /\ preservation'0 self.t_Map__iter'0 self.t_Map__func'0 /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0
  
  predicate inv'7 (_1 : t_Map'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Map'0 [inv'7 x] . inv'7 x
  = (invariant'4 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'8 iter /\ inv'9 func
    end)
  
  predicate invariant'0 (self : borrowed (t_Map'0)) =
    [%#sinvariant5] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'0 (_1 : borrowed (t_Map'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Map'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_B'0
  
  predicate completed'0 [#"05_map.rs" 25 4 25 35] (self : borrowed (t_Map'0)) =
    [%#s05_map1] completed'1 (Borrow.borrow_logic (self.current).t_Map__iter'0 (self.final).t_Map__iter'0 (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ (self.current).t_Map__func'0 = (self.final).t_Map__func'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'5 (self : borrowed t_F'0) =
    [%#sboxed26] inv'2 self
  
  predicate inv'10 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed t_F'0 [inv'10 x] . inv'10 x = invariant'5 x
  
  predicate invariant'2 (self : Seq.seq (borrowed t_F'0)) =
    [%#sseq21] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  predicate inv'4 (_1 : Seq.seq (borrowed t_F'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq (borrowed t_F'0) [inv'4 x] . inv'4 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 48 4 48 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map4] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . inv'4 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . inv'5 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  predicate produces_one'0 [#"05_map.rs" 138 4 138 57] (self : t_Map'0) (visited : t_B'0) (succ : t_Map'0) =
    [%#s05_map3] exists f : borrowed t_F'0, e : t_Item'0 [postcondition_mut'0 f.current (e) f.final visited] . inv'2 f
    /\ inv'3 e
    /\ f.current = self.t_Map__func'0
    /\ f.final = succ.t_Map__func'0
    /\ produces'1 self.t_Map__iter'0 (Seq.singleton e) succ.t_Map__iter'0
    /\ precondition'0 f.current (e) /\ postcondition_mut'0 f.current (e) f.final visited
  
  axiom produces_one'0_spec : forall self : t_Map'0, visited : t_B'0, succ : t_Map'0 . [%#s05_map2] produces_one'0 self visited succ
  = produces'0 self (Seq.singleton visited) succ
  
  predicate inv'6 (_1 : t_B'0)
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'6 a_0
    end
  
  goal refines : [%#s05_map0] forall self : borrowed (t_Map'0) . inv'0 self
   -> inv'0 self
  /\ (forall result : t_Option'0 . match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces_one'0 self.current v self.final
    end
  /\ inv'1 result
   -> match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result)
end
module M_05_map__qyi14910388998417814812__produces_refl__refines [#"05_map.rs" 33 4 33 26] (* <Map<I, B, F> as common::Iterator> *)
  let%span s05_map0 = "05_map.rs" 33 4 33 26
  let%span s05_map1 = "05_map.rs" 49 8 62 9
  let%span s05_map2 = "05_map.rs" 155 12 157 57
  let%span sops3 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  let%span scommon10 = "common.rs" 14 15 14 24
  let%span scommon11 = "common.rs" 15 14 15 45
  let%span scommon12 = "common.rs" 19 15 19 21
  let%span scommon13 = "common.rs" 20 15 20 21
  let%span scommon14 = "common.rs" 21 15 21 21
  let%span scommon15 = "common.rs" 22 15 22 32
  let%span scommon16 = "common.rs" 23 15 23 32
  let%span scommon17 = "common.rs" 24 14 24 42
  let%span s05_map18 = "05_map.rs" 109 12 112 87
  let%span s05_map19 = "05_map.rs" 96 12 102 41
  let%span s05_map20 = "05_map.rs" 85 12 89 39
  let%span sseq21 = "../../../../creusot-contracts/src/logic/seq.rs" 444 20 444 95
  let%span sinvariant22 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed23 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  use prelude.prelude.Borrow
  
  predicate inv'3 (_1 : t_I'0)
  
  predicate invariant'3 (self : borrowed t_I'0) =
    [%#sinvariant22] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'5 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed t_I'0 [inv'5 x] . inv'5 x = invariant'3 x
  
  predicate inv'4 (_1 : t_F'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon12] inv'3 a)
   -> ([%#scommon13] inv'3 b)
   -> ([%#scommon14] inv'3 c)
   -> ([%#scommon15] produces'1 a ab b)
   -> ([%#scommon16] produces'1 b bc c)  -> ([%#scommon17] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . ([%#scommon10] inv'3 self)
   -> ([%#scommon11] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate inv'6 (_1 : t_Item'0)
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map20] forall e : t_Item'0, i : t_I'0 [produces'1 iter (Seq.singleton e) i] . inv'6 e /\ inv'3 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  type t_B'0
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed23] inv'6 self
  
  predicate inv'9 (_1 : t_Item'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Item'0 [inv'9 x] . inv'9 x = invariant'6 x
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq21] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'4 (self : borrowed t_F'0) =
    [%#sinvariant22] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'7 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed t_F'0 [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops9] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops6] unnest'0 self b)
   -> ([%#sops7] unnest'0 b c)  -> ([%#sops8] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops5] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops3] postcondition_mut'0 self args res_state res)
   -> ([%#sops4] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map19] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1) f.final b] . inv'2 s
    /\ inv'6 e1 /\ inv'6 e2 /\ inv'7 f /\ inv'3 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f.current (e1) f.final b  -> precondition'0 f.final (e2)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map18] forall iter : borrowed t_I'0, func : t_F'0 . inv'5 iter /\ inv'4 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"05_map.rs" 153 4 153 30] (self : t_Map'0) =
    [%#s05_map2] reinitialize'0 ()
    /\ preservation'0 self.t_Map__iter'0 self.t_Map__func'0 /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0
  
  predicate inv'0 (_1 : t_Map'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Map'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'3 iter /\ inv'4 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'5 (self : borrowed t_F'0) =
    [%#sboxed23] inv'7 self
  
  predicate inv'8 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed t_F'0 [inv'8 x] . inv'8 x = invariant'5 x
  
  predicate invariant'1 (self : Seq.seq (borrowed t_F'0)) =
    [%#sseq21] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq (borrowed t_F'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (borrowed t_F'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 48 4 48 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map1] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . inv'1 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . inv'2 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  goal refines : [%#s05_map0] forall self : t_Map'0 . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t_B'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_B'0) self)
end
module M_05_map__qyi14910388998417814812__produces_trans__refines [#"05_map.rs" 43 4 43 90] (* <Map<I, B, F> as common::Iterator> *)
  let%span s05_map0 = "05_map.rs" 43 4 43 90
  let%span s05_map1 = "05_map.rs" 49 8 62 9
  let%span sops2 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops3 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  let%span scommon9 = "common.rs" 14 15 14 24
  let%span scommon10 = "common.rs" 15 14 15 45
  let%span scommon11 = "common.rs" 19 15 19 21
  let%span scommon12 = "common.rs" 20 15 20 21
  let%span scommon13 = "common.rs" 21 15 21 21
  let%span scommon14 = "common.rs" 22 15 22 32
  let%span scommon15 = "common.rs" 23 15 23 32
  let%span scommon16 = "common.rs" 24 14 24 42
  let%span s05_map17 = "05_map.rs" 155 12 157 57
  let%span sseq18 = "../../../../creusot-contracts/src/logic/seq.rs" 444 20 444 95
  let%span s05_map19 = "05_map.rs" 109 12 112 87
  let%span s05_map20 = "05_map.rs" 96 12 102 41
  let%span s05_map21 = "05_map.rs" 85 12 89 39
  let%span sboxed22 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sinvariant23 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  type t_B'0
  
  use seq.Seq
  
  predicate inv'3 (_1 : t_I'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon11] inv'3 a)
   -> ([%#scommon12] inv'3 b)
   -> ([%#scommon13] inv'3 c)
   -> ([%#scommon14] produces'1 a ab b)
   -> ([%#scommon15] produces'1 b bc c)  -> ([%#scommon16] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon9] inv'3 self)
   -> ([%#scommon10] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops8] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops5] unnest'0 self b)
   -> ([%#sops6] unnest'0 b c)  -> ([%#sops7] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops4] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops2] postcondition_mut'0 self args res_state res)
   -> ([%#sops3] unnest'0 self res_state)
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'4 (_1 : t_F'0)
  
  predicate invariant'6 (self : borrowed t_F'0) =
    [%#sinvariant23] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'9 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed t_F'0 [inv'9 x] . inv'9 x = invariant'6 x
  
  predicate invariant'3 (self : borrowed t_F'0) =
    [%#sboxed22] inv'9 self
  
  predicate inv'5 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed t_F'0 [inv'5 x] . inv'5 x = invariant'3 x
  
  predicate invariant'1 (self : Seq.seq (borrowed t_F'0)) =
    [%#sseq18] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq (borrowed t_F'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (borrowed t_F'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'8 (_1 : t_Item'0)
  
  predicate invariant'4 (self : t_Item'0) =
    [%#sboxed22] inv'8 self
  
  predicate inv'6 (_1 : t_Item'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Item'0 [inv'6 x] . inv'6 x = invariant'4 x
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq18] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 48 4 48 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map1] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . inv'1 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . inv'2 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  predicate invariant'5 (self : borrowed t_I'0) =
    [%#sinvariant23] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'7 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed t_I'0 [inv'7 x] . inv'7 x = invariant'5 x
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"05_map.rs" 83 4 83 50] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map21] forall e : t_Item'0, i : t_I'0 [produces'1 iter (Seq.singleton e) i] . inv'8 e /\ inv'3 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 94 4 94 45] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map20] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1) f.final b] . inv'2 s
    /\ inv'8 e1 /\ inv'8 e2 /\ inv'9 f /\ inv'3 i /\ unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f.current (e1) f.final b  -> precondition'0 f.final (e2)
  
  predicate reinitialize'0 [#"05_map.rs" 107 4 107 29] (_1 : ()) =
    [%#s05_map19] forall iter : borrowed t_I'0, func : t_F'0 . inv'7 iter /\ inv'4 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"05_map.rs" 153 4 153 30] (self : t_Map'0) =
    [%#s05_map17] reinitialize'0 ()
    /\ preservation'0 self.t_Map__iter'0 self.t_Map__func'0 /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0
  
  predicate inv'0 (_1 : t_Map'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Map'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'3 iter /\ inv'4 func
    end)
  
  use seq.Seq
  
  goal refines : [%#s05_map0] forall a : t_Map'0 . forall ab : Seq.seq t_B'0 . forall b : t_Map'0 . forall bc : Seq.seq t_B'0 . forall c : t_Map'0 . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
