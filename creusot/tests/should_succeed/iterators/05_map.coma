module M_05_map__qyi4717544419812877023__resolve_coherence [#"05_map.rs" 9 9 9 16] (* <Map<I, F> as creusot_contracts::Resolve> *)
  let%span s05_map0 = "05_map.rs" 9 9 9 16
  let%span s05_map1 = "05_map.rs" 9 9 9 16
  let%span s05_map2 = "05_map.rs" 12 4 14 15
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  predicate resolve'1 (_1 : t_F'0)
  
  predicate resolve'2 (_1 : t_I'0)
  
  predicate structural_resolve'0 (_1 : t_Map'0) =
    match _1 with
      | {t_Map__iter'0 = x0 ; t_Map__func'0 = x1} -> resolve'1 x1 /\ resolve'2 x0
      end
  
  predicate resolve'0 [#"05_map.rs" 9 9 9 16] (self : t_Map'0) =
    [%#s05_map2] resolve'2 self.t_Map__iter'0 /\ resolve'1 self.t_Map__func'0
  
  constant self  : t_Map'0
  
  function resolve_coherence'0 [#"05_map.rs" 9 9 9 16] (self : t_Map'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#s05_map0] structural_resolve'0 self)  -> ([%#s05_map0] resolve'0 self)
end
module M_05_map__qyi16807608259409463994__produces_refl [#"05_map.rs" 29 4 29 26] (* <Map<I, F> as common::Iterator> *)
  let%span s05_map0 = "05_map.rs" 28 14 28 45
  let%span s05_map1 = "05_map.rs" 26 4 26 10
  let%span s05_map2 = "05_map.rs" 42 8 55 9
  let%span sops3 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span scommon10 = "common.rs" 14 14 14 45
  let%span scommon11 = "common.rs" 18 15 18 32
  let%span scommon12 = "common.rs" 19 15 19 32
  let%span scommon13 = "common.rs" 20 14 20 42
  
  use seq.Seq
  
  type t_B'0
  
  use seq.Seq
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon11] produces'1 a ab b)
   -> ([%#scommon12] produces'1 b bc c)  -> ([%#scommon13] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . [%#scommon10] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops9] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops6] unnest'0 self b)
   -> ([%#sops7] unnest'0 b c)  -> ([%#sops8] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops5] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops3] postcondition_mut'0 self args res_state res)
   -> ([%#sops4] unnest'0 self res_state)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 41 4 41 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map2] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  constant self  : t_Map'0
  
  function produces_refl'0 [#"05_map.rs" 29 4 29 26] (self : t_Map'0) : ()
  
  goal vc_produces_refl'0 : [%#s05_map0] produces'0 self (Seq.empty  : Seq.seq t_B'0) self
end
module M_05_map__qyi16807608259409463994__produces_trans [#"05_map.rs" 36 4 36 90] (* <Map<I, F> as common::Iterator> *)
  let%span s05_map0 = "05_map.rs" 33 15 33 32
  let%span s05_map1 = "05_map.rs" 34 15 34 32
  let%span s05_map2 = "05_map.rs" 35 14 35 42
  let%span s05_map3 = "05_map.rs" 31 4 31 10
  let%span s05_map4 = "05_map.rs" 42 8 55 9
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span scommon12 = "common.rs" 14 14 14 45
  let%span scommon13 = "common.rs" 18 15 18 32
  let%span scommon14 = "common.rs" 19 15 19 32
  let%span scommon15 = "common.rs" 20 14 20 42
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  type t_B'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon13] produces'1 a ab b)
   -> ([%#scommon14] produces'1 b bc c)  -> ([%#scommon15] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon12] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops11] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops8] unnest'0 self b)
   -> ([%#sops9] unnest'0 b c)  -> ([%#sops10] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops7] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops5] postcondition_mut'0 self args res_state res)
   -> ([%#sops6] unnest'0 self res_state)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 41 4 41 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map4] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  use seq.Seq
  
  constant a  : t_Map'0
  
  constant ab  : Seq.seq t_B'0
  
  constant b  : t_Map'0
  
  constant bc  : Seq.seq t_B'0
  
  constant c  : t_Map'0
  
  function produces_trans'0 [#"05_map.rs" 36 4 36 90] (a : t_Map'0) (ab : Seq.seq t_B'0) (b : t_Map'0) (bc : Seq.seq t_B'0) (c : t_Map'0) : ()
    
  
  goal vc_produces_trans'0 : ([%#s05_map1] produces'0 b bc c)
   -> ([%#s05_map0] produces'0 a ab b)  -> ([%#s05_map2] produces'0 a (Seq.(++) ab bc) c)
end
module M_05_map__qyi16807608259409463994__next [#"05_map.rs" 62 4 62 44] (* <Map<I, F> as common::Iterator> *)
  let%span s05_map0 = "05_map.rs" 65 16 65 62
  let%span s05_map1 = "05_map.rs" 66 16 66 58
  let%span s05_map2 = "05_map.rs" 62 17 62 21
  let%span s05_map3 = "05_map.rs" 62 26 62 44
  let%span s05_map4 = "05_map.rs" 58 14 61 5
  let%span scommon5 = "common.rs" 27 17 27 21
  let%span scommon6 = "common.rs" 27 26 27 44
  let%span scommon7 = "common.rs" 23 14 26 5
  let%span s05_map8 = "05_map.rs" 108 15 108 31
  let%span s05_map9 = "05_map.rs" 109 4 109 60
  let%span s05_map10 = "05_map.rs" 110 15 110 30
  let%span s05_map11 = "05_map.rs" 111 15 111 50
  let%span s05_map12 = "05_map.rs" 112 14 112 42
  let%span s05_map13 = "05_map.rs" 113 14 113 47
  let%span s05_map14 = "05_map.rs" 115 8 119 9
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 162 27 162 52
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 163 26 163 71
  let%span s05_map17 = "05_map.rs" 23 8 23 75
  let%span s05_map18 = "05_map.rs" 123 14 123 68
  let%span s05_map19 = "05_map.rs" 126 12 131 60
  let%span scommon20 = "common.rs" 14 14 14 45
  let%span scommon21 = "common.rs" 18 15 18 32
  let%span scommon22 = "common.rs" 19 15 19 32
  let%span scommon23 = "common.rs" 20 14 20 42
  let%span s05_map24 = "05_map.rs" 141 12 143 57
  let%span s05_map25 = "05_map.rs" 88 12 94 41
  let%span s05_map26 = "05_map.rs" 78 12 81 39
  let%span sresolve27 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span s05_map28 = "05_map.rs" 42 8 55 9
  let%span s05_map29 = "05_map.rs" 101 12 103 87
  let%span sops30 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops31 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops32 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops33 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops34 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops35 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops36 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span sinvariant37 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  predicate inv'0 (_1 : t_I'0)
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon21] produces'0 a ab b)
   -> ([%#scommon22] produces'0 b bc c)  -> ([%#scommon23] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon20] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate invariant'2 (self : borrowed t_I'0) =
    [%#sinvariant37] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'4 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_I'0 [inv'4 x] . inv'4 x = invariant'2 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_Item'0
  
  predicate inv'9 (_1 : t_Item'0)
  
  predicate inv'5 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'5 x] . inv'5 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'9 a_0
    end
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  use seq.Seq
  
  let rec next'1 (self:borrowed t_I'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] [%#scommon5] inv'4 self}
    any
    [ return' (result:t_Option'0)-> {[%#scommon6] inv'5 result}
      {[%#scommon7] match result with
        | C_None'0 -> completed'1 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_Item'0))= any
    [ good (field_0:t_Item'0)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_Item'0 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  predicate next_precondition'0 [#"05_map.rs" 76 4 76 50] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map26] forall e : t_Item'0, i : t_I'0 [produces'0 iter (Seq.singleton e) i] . produces'0 iter (Seq.singleton e) i
     -> precondition'0 func (e)
  
  type t_B'0
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  predicate resolve'2 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops36] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'2 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops33] unnest'0 self b)
   -> ([%#sops34] unnest'0 b c)  -> ([%#sops35] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops32] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops30] postcondition_mut'0 self args res_state res)
   -> ([%#sops31] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 86 4 86 45] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map25] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1) f.final b] . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f.current (e1) f.final b  -> precondition'0 f.final (e2)
  
  predicate reinitialize'0 [#"05_map.rs" 99 4 99 29] (_1 : ()) =
    [%#s05_map29] forall iter : borrowed t_I'0, func : t_F'0 . completed'1 iter
     -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"05_map.rs" 139 4 139 30] (self : t_Map'0) =
    [%#s05_map24] reinitialize'0 ()
    /\ preservation'0 self.t_Map__iter'0 self.t_Map__func'0 /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0
  
  function produces_one_invariant'0 [#"05_map.rs" 114 4 114 73] (self : t_Map'0) (e : t_Item'0) (r : t_B'0) (f : borrowed t_F'0) (iter : t_I'0) : ()
    
   =
    [%#s05_map14] let _ = () in ()
  
  axiom produces_one_invariant'0_spec : forall self : t_Map'0, e : t_Item'0, r : t_B'0, f : borrowed t_F'0, iter : t_I'0 . ([%#s05_map8] invariant'0 self)
   -> ([%#s05_map9] produces'0 self.t_Map__iter'0 (Seq.singleton e) iter)
   -> ([%#s05_map10] f.current = self.t_Map__func'0)
   -> ([%#s05_map11] postcondition_mut'0 f.current (e) f.final r)
   -> ([%#s05_map12] preservation'0 iter f.final) && ([%#s05_map13] next_precondition'0 iter f.final)
  
  use prelude.prelude.Snapshot
  
  predicate inv'1 (_1 : t_F'0)
  
  predicate invariant'3 (self : borrowed t_F'0) =
    [%#sinvariant37] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'6 (_1 : borrowed t_F'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed t_F'0 [inv'6 x] . inv'6 x = invariant'3 x
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = (let (x0) = x in inv'9 x0)
  
  predicate inv'8 (_1 : t_B'0)
  
  let rec call_mut'0 (self:borrowed t_F'0) (args:t_Item'0) (return'  (ret:t_B'0))= {[@expl:call_mut 'self' type invariant] inv'6 self}
    {[@expl:call_mut 'args' type invariant] inv'7 args}
    {[@expl:call_mut requires] [%#sops15] precondition'0 self.current args}
    any
    [ return' (result:t_B'0)-> {inv'8 result}
      {[%#sops16] postcondition_mut'0 self.current args self.final result}
      (! return' {result}) ]
    
  
  predicate inv'10 (_1 : t_Map'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Map'0 [inv'10 x] . inv'10 x
  = (invariant'0 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'0 iter /\ inv'1 func
    end)
  
  predicate invariant'1 (self : borrowed (t_Map'0)) =
    [%#sinvariant37] inv'10 self.current /\ inv'10 self.final
  
  predicate inv'2 (_1 : borrowed (t_Map'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Map'0) [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate resolve'1 (self : borrowed (t_Map'0)) =
    [%#sresolve27] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Map'0)) =
    resolve'1 _1
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 t_B'0
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  predicate inv'3 (_1 : t_Option'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'1 [inv'3 x] . inv'3 x
  = match x with
    | C_None'1 -> true
    | C_Some'1 a_0 -> inv'8 a_0
    end
  
  predicate completed'0 [#"05_map.rs" 22 4 22 35] (self : borrowed (t_Map'0)) =
    [%#s05_map17] completed'1 (Borrow.borrow_logic (self.current).t_Map__iter'0 (self.final).t_Map__iter'0 (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ (self.current).t_Map__func'0 = (self.final).t_Map__func'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [@inline:trivial] [#"05_map.rs" 41 4 41 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map28] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'0 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'0 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  predicate produces_one'0 [#"05_map.rs" 124 4 124 57] (self : t_Map'0) (visited : t_B'0) (succ : t_Map'0) =
    [%#s05_map19] exists f : borrowed t_F'0, e : t_Item'0 [postcondition_mut'0 f.current (e) f.final visited] . f.current
    = self.t_Map__func'0
    /\ f.final = succ.t_Map__func'0
    /\ produces'0 self.t_Map__iter'0 (Seq.singleton e) succ.t_Map__iter'0
    /\ precondition'0 f.current (e) /\ postcondition_mut'0 f.current (e) f.final visited
  
  axiom produces_one'0_spec : forall self : t_Map'0, visited : t_B'0, succ : t_Map'0 . [%#s05_map18] produces_one'0 self visited succ
  = produces'1 self (Seq.singleton visited) succ
  
  meta "compute_max_steps" 1000000
  
  let rec next'0 (self:borrowed (t_Map'0)) (return'  (ret:t_Option'1))= {[@expl:next 'self' type invariant] [%#s05_map2] inv'2 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 (self.current).t_Map__iter'0}
        Borrow.borrow_final <t_I'0> {(self.current).t_Map__iter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
          (fun (_ret':borrowed t_I'0) ->
             [ &_4 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { self.current with t_Map__iter'0 = _ret'.final } } ] 
            s1)
      | s1 = next'1 {_4} (fun (_ret':t_Option'0) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = any [ br0 -> {_3 = C_None'0 } (! bb4) | br1 (x0:t_Item'0)-> {_3 = C_Some'0 x0} (! bb3) ] 
    | bb3 = bb5
    | bb5 = s0
      [ s0 = v_Some'0 {_3} (fun (r0'0:t_Item'0) ->  [ &v <- r0'0 ] s1)
      | s1 = {[@expl:assertion] [%#s05_map0] precondition'0 (self.current).t_Map__func'0 (v)} s2
      | s2 = bb6 ]
      
    | bb6 = s0 [ s0 =  [ &_9 <- [%#s05_map1] Snapshot.new () ] s1 | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = {inv'1 (self.current).t_Map__func'0}
        Borrow.borrow_final <t_F'0> {(self.current).t_Map__func'0} {Borrow.inherit_id (Borrow.get_id self) 2}
          (fun (_ret':borrowed t_F'0) ->
             [ &_12 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &self <- { self with current = { self.current with t_Map__func'0 = _ret'.final } } ] 
            s1)
      | s1 =  [ &_13 <- (v) ] s2
      | s2 = call_mut'0 {_12} {_13} (fun (_ret':t_B'0) ->  [ &_11 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb8 = s0 [ s0 = {[@expl:type invariant] inv'2 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb9 ] 
    | bb9 = s0 [ s0 =  [ &_0 <- C_Some'1 _11 ] s1 | s1 = bb10 ] 
    | bb10 = bb11
    | bb11 = bb12
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'2 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 =  [ &_0 <- C_None'1 ] s3
      | s3 = bb12 ]
      
    | bb12 = bb13
    | bb13 = return' {_0} ]
    )
    [ & _0 : t_Option'1 = any_l ()
    | & self : borrowed (t_Map'0) = self
    | & _3 : t_Option'0 = any_l ()
    | & _4 : borrowed t_I'0 = any_l ()
    | & v : t_Item'0 = any_l ()
    | & _9 : Snapshot.snap_ty () = any_l ()
    | & _11 : t_B'0 = any_l ()
    | & _12 : borrowed t_F'0 = any_l ()
    | & _13 : t_Item'0 = any_l () ]
    
    [ return' (result:t_Option'1)-> {[@expl:next result type invariant] [%#s05_map3] inv'3 result}
      {[@expl:next ensures] [%#s05_map4] match result with
        | C_None'1 -> completed'0 self
        | C_Some'1 v -> produces_one'0 self.current v self.final
        end}
      (! return' {result}) ]
    
end
module M_05_map__qyi6570657843506441439__produces_one_invariant [#"05_map.rs" 114 4 114 73] (* Map<I, F> *)
  let%span s05_map0 = "05_map.rs" 108 15 108 31
  let%span s05_map1 = "05_map.rs" 109 4 109 60
  let%span s05_map2 = "05_map.rs" 110 15 110 30
  let%span s05_map3 = "05_map.rs" 111 15 111 50
  let%span s05_map4 = "05_map.rs" 112 14 112 42
  let%span s05_map5 = "05_map.rs" 113 14 113 47
  let%span s05_map6 = "05_map.rs" 116 12 118 94
  let%span s05_map7 = "05_map.rs" 115 8 119 9
  let%span s05_map8 = "05_map.rs" 141 12 143 57
  let%span s05_map9 = "05_map.rs" 88 12 94 41
  let%span s05_map10 = "05_map.rs" 78 12 81 39
  let%span s05_map11 = "05_map.rs" 101 12 103 87
  let%span scommon12 = "common.rs" 14 14 14 45
  let%span scommon13 = "common.rs" 18 15 18 32
  let%span scommon14 = "common.rs" 19 15 19 32
  let%span scommon15 = "common.rs" 20 14 20 42
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops21 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon13] produces'0 a ab b)
   -> ([%#scommon14] produces'0 b bc c)  -> ([%#scommon15] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon12] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  predicate next_precondition'0 [#"05_map.rs" 76 4 76 50] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map10] forall e : t_Item'0, i : t_I'0 [produces'0 iter (Seq.singleton e) i] . produces'0 iter (Seq.singleton e) i
     -> precondition'0 func (e)
  
  type t_B'0
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops22] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops19] unnest'0 self b)
   -> ([%#sops20] unnest'0 b c)  -> ([%#sops21] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops18] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops16] postcondition_mut'0 self args res_state res)
   -> ([%#sops17] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 86 4 86 45] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map9] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1) f.final b] . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f.current (e1) f.final b  -> precondition'0 f.final (e2)
  
  predicate reinitialize'0 [#"05_map.rs" 99 4 99 29] (_1 : ()) =
    [%#s05_map11] forall iter : borrowed t_I'0, func : t_F'0 . completed'0 iter
     -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"05_map.rs" 139 4 139 30] (self : t_Map'0) =
    [%#s05_map8] reinitialize'0 ()
    /\ preservation'0 self.t_Map__iter'0 self.t_Map__func'0 /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0
  
  constant self  : t_Map'0
  
  constant e  : t_Item'0
  
  constant r  : t_B'0
  
  constant f  : borrowed t_F'0
  
  constant iter  : t_I'0
  
  function produces_one_invariant'0 [#"05_map.rs" 114 4 114 73] (self : t_Map'0) (e : t_Item'0) (r : t_B'0) (f : borrowed t_F'0) (iter : t_I'0) : ()
    
  
  goal vc_produces_one_invariant'0 : ([%#s05_map3] postcondition_mut'0 f.current (e) f.final r)
   -> ([%#s05_map2] f.current = self.t_Map__func'0)
   -> ([%#s05_map1] produces'0 self.t_Map__iter'0 (Seq.singleton e) iter)
   -> ([%#s05_map0] invariant'0 self)
   -> ([%#s05_map6] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, i : t_I'0 . produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
   -> produces'0 self.t_Map__iter'0 (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i)
  && (let _ = () in ([%#s05_map4] preservation'0 iter f.final) && ([%#s05_map5] next_precondition'0 iter f.final))
end
module M_05_map__qyi6570657843506441439__produces_one [#"05_map.rs" 124 4 124 57] (* Map<I, F> *)
  let%span s05_map0 = "05_map.rs" 123 14 123 68
  let%span s05_map1 = "05_map.rs" 126 12 131 60
  let%span s05_map2 = "05_map.rs" 42 8 55 9
  let%span s05_map3 = "05_map.rs" 28 14 28 45
  let%span s05_map4 = "05_map.rs" 26 4 26 10
  let%span s05_map5 = "05_map.rs" 33 15 33 32
  let%span s05_map6 = "05_map.rs" 34 15 34 32
  let%span s05_map7 = "05_map.rs" 35 14 35 42
  let%span s05_map8 = "05_map.rs" 31 4 31 10
  let%span scommon9 = "common.rs" 14 14 14 45
  let%span scommon10 = "common.rs" 18 15 18 32
  let%span scommon11 = "common.rs" 19 15 19 32
  let%span scommon12 = "common.rs" 20 14 20 42
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  
  use seq.Seq
  
  use seq.Seq
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  type t_B'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon10] produces'1 a ab b)
   -> ([%#scommon11] produces'1 b bc c)  -> ([%#scommon12] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . [%#scommon9] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops19] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops16] unnest'0 self b)
   -> ([%#sops17] unnest'0 b c)  -> ([%#sops18] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops15] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops13] postcondition_mut'0 self args res_state res)
   -> ([%#sops14] unnest'0 self res_state)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 41 4 41 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map2] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  function produces_trans'0 [#"05_map.rs" 36 4 36 90] (a : t_Map'0) (ab : Seq.seq t_B'0) (b : t_Map'0) (bc : Seq.seq t_B'0) (c : t_Map'0) : ()
    
   =
    [%#s05_map8] ()
  
  axiom produces_trans'0_spec : forall a : t_Map'0, ab : Seq.seq t_B'0, b : t_Map'0, bc : Seq.seq t_B'0, c : t_Map'0 . ([%#s05_map5] produces'0 a ab b)
   -> ([%#s05_map6] produces'0 b bc c)  -> ([%#s05_map7] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"05_map.rs" 29 4 29 26] (self : t_Map'0) : () =
    [%#s05_map4] ()
  
  axiom produces_refl'0_spec : forall self : t_Map'0 . [%#s05_map3] produces'0 self (Seq.empty  : Seq.seq t_B'0) self
  
  use seq.Seq
  
  constant self  : t_Map'0
  
  constant visited  : t_B'0
  
  constant succ  : t_Map'0
  
  predicate produces_one'0 [#"05_map.rs" 124 4 124 57] (self : t_Map'0) (visited : t_B'0) (succ : t_Map'0)
  
  goal vc_produces_one'0 : [%#s05_map0] ([%#s05_map1] exists f : borrowed t_F'0, e : t_Item'0 [postcondition_mut'0 f.current (e) f.final visited] . f.current
  = self.t_Map__func'0
  /\ f.final = succ.t_Map__func'0
  /\ produces'1 self.t_Map__iter'0 (Seq.singleton e) succ.t_Map__iter'0
  /\ precondition'0 f.current (e) /\ postcondition_mut'0 f.current (e) f.final visited)
  = produces'0 self (Seq.singleton visited) succ
end
module M_05_map__map [#"05_map.rs" 154 0 154 81]
  let%span s05_map0 = "05_map.rs" 154 51 154 55
  let%span s05_map1 = "05_map.rs" 154 60 154 64
  let%span s05_map2 = "05_map.rs" 148 11 150 39
  let%span s05_map3 = "05_map.rs" 151 11 151 38
  let%span s05_map4 = "05_map.rs" 152 11 152 48
  let%span s05_map5 = "05_map.rs" 154 72 154 81
  let%span s05_map6 = "05_map.rs" 153 10 153 38
  let%span s05_map7 = "05_map.rs" 101 12 103 87
  let%span s05_map8 = "05_map.rs" 88 12 94 41
  let%span scommon9 = "common.rs" 14 14 14 45
  let%span scommon10 = "common.rs" 18 15 18 32
  let%span scommon11 = "common.rs" 19 15 19 32
  let%span scommon12 = "common.rs" 20 14 20 42
  let%span s05_map13 = "05_map.rs" 78 12 81 39
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span s05_map21 = "05_map.rs" 141 12 143 57
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  use prelude.prelude.Intrinsic
  
  predicate inv'0 (_1 : t_I'0)
  
  predicate inv'1 (_1 : t_F'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon10] produces'0 a ab b)
   -> ([%#scommon11] produces'0 b bc c)  -> ([%#scommon12] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon9] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  use prelude.prelude.Borrow
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate next_precondition'0 [#"05_map.rs" 76 4 76 50] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map13] forall e : t_Item'0, i : t_I'0 [produces'0 iter (Seq.singleton e) i] . produces'0 iter (Seq.singleton e) i
     -> precondition'0 func (e)
  
  type t_B'0
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops20] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops17] unnest'0 self b)
   -> ([%#sops18] unnest'0 b c)  -> ([%#sops19] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops16] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops14] postcondition_mut'0 self args res_state res)
   -> ([%#sops15] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 86 4 86 45] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map8] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1) f.final b] . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f.current (e1) f.final b  -> precondition'0 f.final (e2)
  
  predicate reinitialize'0 [#"05_map.rs" 99 4 99 29] (_1 : ()) =
    [%#s05_map7] forall iter : borrowed t_I'0, func : t_F'0 . completed'0 iter
     -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"05_map.rs" 139 4 139 30] (self : t_Map'0) =
    [%#s05_map21] reinitialize'0 ()
    /\ preservation'0 self.t_Map__iter'0 self.t_Map__func'0 /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0
  
  predicate inv'2 (_1 : t_Map'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Map'0 [inv'2 x] . inv'2 x
  = (invariant'0 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'0 iter /\ inv'1 func
    end)
  
  meta "compute_max_steps" 1000000
  
  let rec map'0 (iter:t_I'0) (func:t_F'0) (return'  (ret:t_Map'0))= {[@expl:map 'iter' type invariant] [%#s05_map0] inv'0 iter}
    {[@expl:map 'func' type invariant] [%#s05_map1] inv'1 func}
    {[@expl:map requires #0] [%#s05_map2] forall e : t_Item'0, i2 : t_I'0 . produces'0 iter (Seq.singleton e) i2
     -> precondition'0 func (e)}
    {[@expl:map requires #1] [%#s05_map3] reinitialize'0 ()}
    {[@expl:map requires #2] [%#s05_map4] preservation'0 iter func}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = s0 [ s0 =  [ &_0 <- { t_Map__iter'0 = iter; t_Map__func'0 = func } ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = return' {_0} ]
    ) [ & _0 : t_Map'0 = any_l () | & iter : t_I'0 = iter | & func : t_F'0 = func ] 
    [ return' (result:t_Map'0)-> {[@expl:map result type invariant] [%#s05_map5] inv'2 result}
      {[@expl:map ensures] [%#s05_map6] result = { t_Map__iter'0 = iter; t_Map__func'0 = func }}
      (! return' {result}) ]
    
end
module M_05_map__qyi4717544419812877023__resolve_coherence__refines [#"05_map.rs" 9 9 9 16] (* <Map<I, F> as creusot_contracts::Resolve> *)
  let%span s05_map0 = "05_map.rs" 9 9 9 16
  let%span s05_map1 = "05_map.rs" 12 4 14 15
  let%span sinvariant2 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  predicate resolve'1 (_1 : t_F'0)
  
  predicate resolve'2 (_1 : t_I'0)
  
  predicate structural_resolve'0 (_1 : t_Map'0) =
    match _1 with
      | {t_Map__iter'0 = x0 ; t_Map__func'0 = x1} -> resolve'1 x1 /\ resolve'2 x0
      end
  
  predicate inv'2 (_1 : t_I'0)
  
  predicate inv'3 (_1 : t_F'0)
  
  predicate inv'1 (_1 : t_Map'0)
  
  axiom inv_axiom'1 : forall x : t_Map'0 [inv'1 x] . inv'1 x
   -> match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'2 iter /\ inv'3 func
    end
  
  predicate invariant'0 (self : t_Map'0) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : t_Map'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Map'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'0 [#"05_map.rs" 9 9 9 16] (self : t_Map'0) =
    [%#s05_map1] resolve'2 self.t_Map__iter'0 /\ resolve'1 self.t_Map__func'0
  
  goal refines : [%#s05_map0] forall self : t_Map'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
module M_05_map__qyi16807608259409463994__next__refines [#"05_map.rs" 62 4 62 44] (* <Map<I, F> as common::Iterator> *)
  let%span s05_map0 = "05_map.rs" 62 4 62 44
  let%span s05_map1 = "05_map.rs" 23 8 23 75
  let%span s05_map2 = "05_map.rs" 123 14 123 68
  let%span s05_map3 = "05_map.rs" 126 12 131 60
  let%span s05_map4 = "05_map.rs" 42 8 55 9
  let%span sinvariant5 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span scommon6 = "common.rs" 14 14 14 45
  let%span scommon7 = "common.rs" 18 15 18 32
  let%span scommon8 = "common.rs" 19 15 19 32
  let%span scommon9 = "common.rs" 20 14 20 42
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span s05_map17 = "05_map.rs" 141 12 143 57
  let%span s05_map18 = "05_map.rs" 101 12 103 87
  let%span s05_map19 = "05_map.rs" 88 12 94 41
  let%span s05_map20 = "05_map.rs" 78 12 81 39
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon7] produces'1 a ab b)
   -> ([%#scommon8] produces'1 b bc c)  -> ([%#scommon9] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon6] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  predicate next_precondition'0 [#"05_map.rs" 76 4 76 50] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map20] forall e : t_Item'0, i : t_I'0 [produces'1 iter (Seq.singleton e) i] . produces'1 iter (Seq.singleton e) i
     -> precondition'0 func (e)
  
  type t_B'0
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops16] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops13] unnest'0 self b)
   -> ([%#sops14] unnest'0 b c)  -> ([%#sops15] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops12] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops10] postcondition_mut'0 self args res_state res)
   -> ([%#sops11] unnest'0 self res_state)
  
  use seq.Seq
  
  predicate preservation'0 [#"05_map.rs" 86 4 86 45] (iter : t_I'0) (func : t_F'0) =
    [%#s05_map19] forall s : Seq.seq t_Item'0, e1 : t_Item'0, e2 : t_Item'0, f : borrowed t_F'0, b : t_B'0, i : t_I'0 [produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut'0 f.current (e1) f.final b] . unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f.current (e1) f.final b  -> precondition'0 f.final (e2)
  
  predicate reinitialize'0 [#"05_map.rs" 99 4 99 29] (_1 : ()) =
    [%#s05_map18] forall iter : borrowed t_I'0, func : t_F'0 . completed'1 iter
     -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'1 [#"05_map.rs" 139 4 139 30] (self : t_Map'0) =
    [%#s05_map17] reinitialize'0 ()
    /\ preservation'0 self.t_Map__iter'0 self.t_Map__func'0 /\ next_precondition'0 self.t_Map__iter'0 self.t_Map__func'0
  
  predicate inv'4 (_1 : t_I'0)
  
  predicate inv'5 (_1 : t_F'0)
  
  predicate inv'3 (_1 : t_Map'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Map'0 [inv'3 x] . inv'3 x
  = (invariant'1 x
  /\ match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'4 iter /\ inv'5 func
    end)
  
  predicate invariant'0 (self : borrowed (t_Map'0)) =
    [%#sinvariant5] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'0 (_1 : borrowed (t_Map'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Map'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_B'0
  
  predicate completed'0 [#"05_map.rs" 22 4 22 35] (self : borrowed (t_Map'0)) =
    [%#s05_map1] completed'1 (Borrow.borrow_logic (self.current).t_Map__iter'0 (self.final).t_Map__iter'0 (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ (self.current).t_Map__func'0 = (self.final).t_Map__func'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 41 4 41 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map4] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  predicate produces_one'0 [#"05_map.rs" 124 4 124 57] (self : t_Map'0) (visited : t_B'0) (succ : t_Map'0) =
    [%#s05_map3] exists f : borrowed t_F'0, e : t_Item'0 [postcondition_mut'0 f.current (e) f.final visited] . f.current
    = self.t_Map__func'0
    /\ f.final = succ.t_Map__func'0
    /\ produces'1 self.t_Map__iter'0 (Seq.singleton e) succ.t_Map__iter'0
    /\ precondition'0 f.current (e) /\ postcondition_mut'0 f.current (e) f.final visited
  
  axiom produces_one'0_spec : forall self : t_Map'0, visited : t_B'0, succ : t_Map'0 . [%#s05_map2] produces_one'0 self visited succ
  = produces'0 self (Seq.singleton visited) succ
  
  predicate inv'2 (_1 : t_B'0)
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'2 a_0
    end
  
  goal refines : [%#s05_map0] forall self : borrowed (t_Map'0) . inv'0 self
   -> inv'0 self
  /\ (forall result : t_Option'0 . match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces_one'0 self.current v self.final
    end
  /\ inv'1 result
   -> match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result)
end
module M_05_map__qyi16807608259409463994__produces_refl__refines [#"05_map.rs" 29 4 29 26] (* <Map<I, F> as common::Iterator> *)
  let%span s05_map0 = "05_map.rs" 29 4 29 26
  let%span s05_map1 = "05_map.rs" 42 8 55 9
  let%span sops2 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops3 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span scommon9 = "common.rs" 14 14 14 45
  let%span scommon10 = "common.rs" 18 15 18 32
  let%span scommon11 = "common.rs" 19 15 19 32
  let%span scommon12 = "common.rs" 20 14 20 42
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  use seq.Seq
  
  type t_B'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon10] produces'1 a ab b)
   -> ([%#scommon11] produces'1 b bc c)  -> ([%#scommon12] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . [%#scommon9] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops8] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops5] unnest'0 self b)
   -> ([%#sops6] unnest'0 b c)  -> ([%#sops7] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops4] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops2] postcondition_mut'0 self args res_state res)
   -> ([%#sops3] unnest'0 self res_state)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 41 4 41 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map1] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  goal refines : [%#s05_map0] forall self : t_Map'0 . forall result : () . produces'0 self (Seq.empty  : Seq.seq t_B'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_B'0) self
end
module M_05_map__qyi16807608259409463994__produces_trans__refines [#"05_map.rs" 36 4 36 90] (* <Map<I, F> as common::Iterator> *)
  let%span s05_map0 = "05_map.rs" 36 4 36 90
  let%span s05_map1 = "05_map.rs" 42 8 55 9
  let%span sops2 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops3 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span scommon9 = "common.rs" 14 14 14 45
  let%span scommon10 = "common.rs" 18 15 18 32
  let%span scommon11 = "common.rs" 19 15 19 32
  let%span scommon12 = "common.rs" 20 14 20 42
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  type t_B'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon10] produces'1 a ab b)
   -> ([%#scommon11] produces'1 b bc c)  -> ([%#scommon12] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon9] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_Item'0) (result : t_B'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_Item'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_Item'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_Item'0, res : t_B'0 . [%#sops8] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops5] unnest'0 self b)
   -> ([%#sops6] unnest'0 b c)  -> ([%#sops7] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops4] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_Item'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_Item'0, res_state : t_F'0, res : t_B'0 . ([%#sops2] postcondition_mut'0 self args res_state res)
   -> ([%#sops3] unnest'0 self res_state)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate precondition'0 (self : t_F'0) (args : t_Item'0)
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"05_map.rs" 41 4 41 67] (self : t_Map'0) (visited : Seq.seq t_B'0) (succ : t_Map'0)
    
   =
    [%#s05_map1] unnest'0 self.t_Map__func'0 succ.t_Map__func'0
    /\ (exists fs : Seq.seq (borrowed t_F'0) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq t_Item'0 [produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0] . Seq.length s
    = Seq.length visited
    /\ produces'1 self.t_Map__iter'0 s succ.t_Map__iter'0
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_Map__func'0 = succ.t_Map__func'0
    else
      (Seq.get fs 0).current = self.t_Map__func'0 /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_Map__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  use seq.Seq
  
  goal refines : [%#s05_map0] forall a : t_Map'0 . forall ab : Seq.seq t_B'0 . forall b : t_Map'0 . forall bc : Seq.seq t_B'0 . forall c : t_Map'0 . produces'0 b bc c
  /\ produces'0 a ab b
   -> produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
