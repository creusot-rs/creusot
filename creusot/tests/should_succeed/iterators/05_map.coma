
module C05Map_Map_Type
  type t_map 'i 'b 'f =
    | C_Map 'i 'f
    
  function any_l (_ : 'b) : 'a
  let rec t_map < 'i > < 'b > < 'f > (input:t_map 'i 'b 'f) (ret  (iter:'i) (func:'f))= any
    [ good (iter:'i) (func:'f)-> {C_Map iter func = input} (! ret {iter} {func})
    | bad (iter:'i) (func:'f)-> {C_Map iter func <> input} {false} any ]
    
  function map_iter (self : t_map 'i 'b 'f) : 'i =
    match self with
      | C_Map a _ -> a
      end
  function map_func (self : t_map 'i 'b 'f) : 'f =
    match self with
      | C_Map _ a -> a
      end
end
module C05Map_Impl0_ProducesRefl_Impl
  type i
  type b
  type f
  type item'0
  predicate invariant'9 (self : item'0)
  let rec invariant'9 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : item'0)
  let rec inv'9 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : item'0 . inv'9 x = true
  use prelude.Borrow
  predicate invariant'8 (self : borrowed i)
  let rec invariant'8 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : borrowed i)
  let rec inv'8 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : borrowed i . inv'8 x = true
  predicate invariant'7 (self : b)
  let rec invariant'7 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : b)
  let rec inv'7 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ] 
  axiom inv'7 : forall x : b . inv'7 x = true
  predicate invariant'6 (self : item'0)
  let rec invariant'6 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : item'0)
  let rec inv'6 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : item'0 . inv'6 x = true
  predicate invariant'5 (self : borrowed f)
  let rec invariant'5 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : borrowed f)
  let rec inv'5 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : borrowed f . inv'5 x = true
  predicate invariant'4 (self : f)
  let rec invariant'4 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : f)
  let rec inv'4 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : f . inv'4 x = true
  predicate invariant'3 (self : i)
  let rec invariant'3 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : i)
  let rec inv'3 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : i . inv'3 x = true
  use seq.Seq
  predicate invariant'2 (self : Seq.seq (borrowed f))
  let rec invariant'2 (self:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Seq.seq (borrowed f))
  let rec inv'2 (_x:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Seq.seq (borrowed f) . inv'2 x = true
  predicate invariant'1 (self : Seq.seq item'0)
  let rec invariant'1 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq item'0)
  let rec inv'1 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'3 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'1 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'3 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'1 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'3 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'3 a)
   -> ([#"../common.rs" 21 31 21 33] inv'1 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'3 b)
   -> ([#"../common.rs" 21 61 21 63] inv'1 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'3 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'3 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'3 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:item'0) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:item'0) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:item'0) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'7 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'6 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'4 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'7 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'5 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'4 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'4 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'4 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'4 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'4 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'4 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:item'0) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'7 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'6 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'5 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'7 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  predicate precondition'0 (self : f) (_2 : item'0)
  let rec precondition'0 (self:f) (_2:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use seq.Seq
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item'0 . inv'3 i
     -> inv'9 e  -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  let rec next_precondition'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'3 i
     -> inv'7 b
     -> inv'5 f
     -> inv'9 e2
     -> inv'9 e1
     -> inv'1 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  use C05Map_Map_Type as C05Map_Map_Type
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv'4 func
     -> inv'8 iter  -> completed'0 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  let rec invariant'0 (self:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C05Map_Map_Type.t_map i b f)
  let rec inv'0 (_x:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C05Map_Map_Type.t_map i b f . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 42 8 53 9] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'1 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'2 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C05Map_Map_Type.map_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C05Map_Map_Type.map_func self) ( * Seq.get fs i)
    /\ precondition'0 ( * Seq.get fs i) (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  let rec produces'0 (self:C05Map_Map_Type.t_map i b f) (visited:Seq.seq b) (succ:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited succ} (! return' {result}) ]
    
  use seq.Seq
  constant self  : C05Map_Map_Type.t_map i b f
  function produces_refl [#"../05_map.rs" 29 4 29 26] (self : C05Map_Map_Type.t_map i b f) : ()
  goal vc_produces_refl : ([#"../05_map.rs" 29 21 29 25] inv'0 self)
   -> ([#"../05_map.rs" 28 14 28 45] produces'0 self (Seq.empty  : Seq.seq b) self)
end
module C05Map_Impl0_ProducesTrans_Impl
  type i
  type b
  type f
  type item'0
  predicate invariant'10 (self : item'0)
  let rec invariant'10 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : item'0)
  let rec inv'10 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : item'0 . inv'10 x = true
  use prelude.Borrow
  predicate invariant'9 (self : borrowed i)
  let rec invariant'9 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : borrowed i)
  let rec inv'9 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : borrowed i . inv'9 x = true
  predicate invariant'8 (self : b)
  let rec invariant'8 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : b)
  let rec inv'8 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ] 
  axiom inv'8 : forall x : b . inv'8 x = true
  predicate invariant'7 (self : item'0)
  let rec invariant'7 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : item'0)
  let rec inv'7 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : item'0 . inv'7 x = true
  predicate invariant'6 (self : borrowed f)
  let rec invariant'6 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : borrowed f)
  let rec inv'6 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : borrowed f . inv'6 x = true
  predicate invariant'5 (self : f)
  let rec invariant'5 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : f)
  let rec inv'5 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ] 
  axiom inv'5 : forall x : f . inv'5 x = true
  predicate invariant'4 (self : i)
  let rec invariant'4 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : i)
  let rec inv'4 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : i . inv'4 x = true
  use seq.Seq
  predicate invariant'3 (self : Seq.seq (borrowed f))
  let rec invariant'3 (self:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq (borrowed f))
  let rec inv'3 (_x:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq (borrowed f) . inv'3 x = true
  predicate invariant'2 (self : Seq.seq item'0)
  let rec invariant'2 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Seq.seq item'0)
  let rec inv'2 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Seq.seq item'0 . inv'2 x = true
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'4 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'2 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'4 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'2 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'4 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'4 a)
   -> ([#"../common.rs" 21 31 21 33] inv'2 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'4 b)
   -> ([#"../common.rs" 21 61 21 63] inv'2 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'4 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'4 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'4 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:item'0) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:item'0) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:item'0) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'8 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'7 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'5 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'7 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'8 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'6 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'5 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'5 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'5 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'5 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'5 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'5 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:item'0) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'8 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'7 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'6 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'7 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'8 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'1 (self : Seq.seq b)
  let rec invariant'1 (self:Seq.seq b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq b)
  let rec inv'1 (_x:Seq.seq b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq b . inv'1 x = true
  predicate precondition'0 (self : f) (_2 : item'0)
  let rec precondition'0 (self:f) (_2:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use seq.Seq
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item'0 . inv'4 i
     -> inv'10 e  -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  let rec next_precondition'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'4 i
     -> inv'8 b
     -> inv'6 f
     -> inv'10 e2
     -> inv'10 e1
     -> inv'2 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  use C05Map_Map_Type as C05Map_Map_Type
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv'5 func
     -> inv'9 iter  -> completed'0 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  let rec invariant'0 (self:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C05Map_Map_Type.t_map i b f)
  let rec inv'0 (_x:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C05Map_Map_Type.t_map i b f . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 42 8 53 9] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'2 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'3 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C05Map_Map_Type.map_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C05Map_Map_Type.map_func self) ( * Seq.get fs i)
    /\ precondition'0 ( * Seq.get fs i) (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  let rec produces'0 (self:C05Map_Map_Type.t_map i b f) (visited:Seq.seq b) (succ:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited succ} (! return' {result}) ]
    
  constant a  : C05Map_Map_Type.t_map i b f
  constant ab  : Seq.seq b
  constant b  : C05Map_Map_Type.t_map i b f
  constant bc  : Seq.seq b
  constant c  : C05Map_Map_Type.t_map i b f
  function produces_trans [#"../05_map.rs" 36 4 36 90] (a : C05Map_Map_Type.t_map i b f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i b f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i b f) : ()
    
  goal vc_produces_trans : ([#"../05_map.rs" 36 82 36 83] inv'0 c)
   -> ([#"../05_map.rs" 36 61 36 63] inv'1 bc)
   -> ([#"../05_map.rs" 36 52 36 53] inv'0 b)
   -> ([#"../05_map.rs" 36 31 36 33] inv'1 ab)
   -> ([#"../05_map.rs" 36 22 36 23] inv'0 a)
   -> ([#"../05_map.rs" 34 15 34 32] produces'0 b bc c)
   -> ([#"../05_map.rs" 33 15 33 32] produces'0 a ab b)
   -> ([#"../05_map.rs" 35 14 35 42] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C05Map_Impl1_ProducesOne_Impl
  type i
  type b
  type f
  use prelude.Borrow
  predicate invariant'10 (self : borrowed i)
  let rec invariant'10 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : borrowed i)
  let rec inv'10 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : borrowed i . inv'10 x = true
  type item'0
  predicate invariant'9 (self : item'0)
  let rec invariant'9 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : item'0)
  let rec inv'9 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : item'0 . inv'9 x = true
  use seq.Seq
  predicate invariant'8 (self : Seq.seq b)
  let rec invariant'8 (self:Seq.seq b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Seq.seq b)
  let rec inv'8 (_x:Seq.seq b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Seq.seq b . inv'8 x = true
  predicate invariant'7 (self : f)
  let rec invariant'7 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : f)
  let rec inv'7 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ] 
  axiom inv'7 : forall x : f . inv'7 x = true
  predicate invariant'6 (self : i)
  let rec invariant'6 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : i)
  let rec inv'6 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ] 
  axiom inv'6 : forall x : i . inv'6 x = true
  predicate invariant'5 (self : Seq.seq (borrowed f))
  let rec invariant'5 (self:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq (borrowed f))
  let rec inv'5 (_x:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq (borrowed f) . inv'5 x = true
  predicate invariant'4 (self : Seq.seq item'0)
  let rec invariant'4 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Seq.seq item'0)
  let rec inv'4 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Seq.seq item'0 . inv'4 x = true
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:item'0) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed f)
  let rec inv'2 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:item'0) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'1 (_x : b)
  let rec inv'1 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:item'0) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'1 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'9 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'7 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'9 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'1 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'2 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'7 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'7 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'7 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'7 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'7 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'7 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:item'0) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'1 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'9 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'2 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'9 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'1 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'1 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'6 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'4 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'6 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'4 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'6 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'6 a)
   -> ([#"../common.rs" 21 31 21 33] inv'4 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'6 b)
   -> ([#"../common.rs" 21 61 21 63] inv'4 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'6 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'1 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'6 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'6 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'3 (self : item'0)
  let rec invariant'3 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : item'0)
  let rec inv'3 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : item'0 . inv'3 x = true
  predicate invariant'2 (self : borrowed f)
  let rec invariant'2 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed f . inv'2 x = true
  use C05Map_Map_Type as C05Map_Map_Type
  use seq.Seq
  predicate inv'0 (_x : C05Map_Map_Type.t_map i b f)
  let rec inv'0 (_x:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  use seq.Seq
  predicate precondition'0 (self : f) (_2 : item'0)
  let rec precondition'0 (self:f) (_2:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 42 8 53 9] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'4 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'5 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C05Map_Map_Type.map_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C05Map_Map_Type.map_func self) ( * Seq.get fs i)
    /\ precondition'0 ( * Seq.get fs i) (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  let rec produces'0 (self:C05Map_Map_Type.t_map i b f) (visited:Seq.seq b) (succ:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited succ} (! return' {result}) ]
    
  function produces_trans'0 [#"../05_map.rs" 36 4 36 90] (a : C05Map_Map_Type.t_map i b f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i b f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i b f) : ()
    
   =
    [#"../05_map.rs" 31 4 31 10] ()
  let rec produces_trans'0 (a:C05Map_Map_Type.t_map i b f) (ab:Seq.seq b) (b:C05Map_Map_Type.t_map i b f) (bc:Seq.seq b) (c:C05Map_Map_Type.t_map i b f) (return'  (ret:()))= {[@expl:precondition] [#"../05_map.rs" 36 82 36 83] inv'0 c}
    {[@expl:precondition] [#"../05_map.rs" 36 61 36 63] inv'8 bc}
    {[@expl:precondition] [#"../05_map.rs" 36 52 36 53] inv'0 b}
    {[@expl:precondition] [#"../05_map.rs" 36 31 36 33] inv'8 ab}
    {[@expl:precondition] [#"../05_map.rs" 36 22 36 23] inv'0 a}
    {[@expl:precondition] [#"../05_map.rs" 34 15 34 32] produces'0 b bc c}
    {[@expl:precondition] [#"../05_map.rs" 33 15 33 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : C05Map_Map_Type.t_map i b f, ab : Seq.seq b, b : C05Map_Map_Type.t_map i b f, bc : Seq.seq b, c : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 33 15 33 32] produces'0 a ab b)
   -> ([#"../05_map.rs" 34 15 34 32] produces'0 b bc c)
   -> ([#"../05_map.rs" 36 22 36 23] inv'0 a)
   -> ([#"../05_map.rs" 36 31 36 33] inv'8 ab)
   -> ([#"../05_map.rs" 36 52 36 53] inv'0 b)
   -> ([#"../05_map.rs" 36 61 36 63] inv'8 bc)
   -> ([#"../05_map.rs" 36 82 36 83] inv'0 c)  -> ([#"../05_map.rs" 35 14 35 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../05_map.rs" 29 4 29 26] (self : C05Map_Map_Type.t_map i b f) : () =
    [#"../05_map.rs" 26 4 26 10] ()
  let rec produces_refl'0 (self:C05Map_Map_Type.t_map i b f) (return'  (ret:()))= {[@expl:precondition] [#"../05_map.rs" 29 21 29 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 29 21 29 25] inv'0 self)
   -> ([#"../05_map.rs" 28 14 28 45] produces'0 self (Seq.empty  : Seq.seq b) self)
  predicate invariant'1 (self : b)
  let rec invariant'1 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : b . inv'1 x = true
  use seq.Seq
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item'0 . inv'6 i
     -> inv'3 e  -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  let rec next_precondition'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'6 i
     -> inv'1 b
     -> inv'2 f
     -> inv'3 e2
     -> inv'3 e1
     -> inv'4 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv'7 func
     -> inv'10 iter  -> completed'0 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  let rec invariant'0 (self:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : C05Map_Map_Type.t_map i b f . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  use seq.Seq
  constant self  : C05Map_Map_Type.t_map i b f
  constant visited  : b
  constant succ  : C05Map_Map_Type.t_map i b f
  predicate produces_one [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f)
    
  goal vc_produces_one : ([#"../05_map.rs" 117 38 117 42] inv'0 succ)
   -> ([#"../05_map.rs" 117 26 117 33] inv'1 visited)
   -> ([#"../05_map.rs" 117 20 117 24] inv'0 self)
   -> ([#"../05_map.rs" 116 14 116 68] ([#"../05_map.rs" 118 8 123 9] exists f : borrowed f . inv'2 f
  /\  * f = C05Map_Map_Type.map_func self
  /\  ^ f = C05Map_Map_Type.map_func succ
  /\ (exists e : item'0 . inv'3 e
  /\ produces'1 (C05Map_Map_Type.map_iter self) (Seq.singleton e) (C05Map_Map_Type.map_iter succ)
  /\ precondition'0 ( * f) (e) /\ postcondition_mut'0 f (e) visited))
  = produces'0 self (Seq.singleton visited) succ)
end
module C05Map_Impl1_ProducesOneInvariant_Impl
  type i
  type b
  type f
  use prelude.Borrow
  predicate invariant'8 (self : borrowed i)
  let rec invariant'8 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : borrowed i)
  let rec inv'8 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : borrowed i . inv'8 x = true
  predicate invariant'7 (self : f)
  let rec invariant'7 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : f)
  let rec inv'7 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ] 
  axiom inv'7 : forall x : f . inv'7 x = true
  type item'0
  predicate invariant'6 (self : item'0)
  let rec invariant'6 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : item'0)
  let rec inv'6 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : item'0 . inv'6 x = true
  use seq.Seq
  predicate invariant'5 (self : Seq.seq item'0)
  let rec invariant'5 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq item'0)
  let rec inv'5 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq item'0 . inv'5 x = true
  predicate invariant'4 (self : i)
  let rec invariant'4 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : i)
  let rec inv'4 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : i . inv'4 x = true
  predicate invariant'3 (self : borrowed f)
  let rec invariant'3 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed f)
  let rec inv'3 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed f . inv'3 x = true
  predicate invariant'2 (self : b)
  let rec invariant'2 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : b)
  let rec inv'2 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : b . inv'2 x = true
  predicate invariant'1 (self : item'0)
  let rec invariant'1 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : item'0)
  let rec inv'1 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : item'0 . inv'1 x = true
  predicate precondition'0 (self : f) (_2 : item'0)
  let rec precondition'0 (self:f) (_2:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'0 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item'0 . inv'4 i
     -> inv'1 e  -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e)
  let rec next_precondition'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func} (! return' {result}) ]
    
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:item'0) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  use seq.Seq
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'4 i
     -> inv'2 b
     -> inv'3 f
     -> inv'1 e2
     -> inv'1 e1
     -> inv'5 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  use C05Map_Map_Type as C05Map_Map_Type
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv'7 func
     -> inv'8 iter  -> completed'0 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  let rec invariant'0 (self:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C05Map_Map_Type.t_map i b f)
  let rec inv'0 (_x:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C05Map_Map_Type.t_map i b f . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:item'0) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:item'0) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'6 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'7 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'3 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'7 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'7 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'7 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'7 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'7 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'7 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:item'0) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'6 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'3 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  use seq.Seq
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'4 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'5 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'4 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'5 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'4 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'0 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'0 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'0 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'4 a)
   -> ([#"../common.rs" 21 31 21 33] inv'5 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'4 b)
   -> ([#"../common.rs" 21 61 21 63] inv'5 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'4 c)  -> ([#"../common.rs" 20 14 20 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'4 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'4 self)
   -> ([#"../common.rs" 14 14 14 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  constant self  : C05Map_Map_Type.t_map i b f
  constant e  : item'0
  constant r  : b
  constant f  : borrowed f
  constant iter  : i
  function produces_one_invariant [#"../05_map.rs" 107 4 107 73] (self : C05Map_Map_Type.t_map i b f) (e : item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  goal vc_produces_one_invariant : ([#"../05_map.rs" 107 65 107 69] inv'4 iter)
   -> ([#"../05_map.rs" 107 54 107 55] inv'3 f)
   -> ([#"../05_map.rs" 107 48 107 49] inv'2 r)
   -> ([#"../05_map.rs" 107 36 107 37] inv'1 e)
   -> ([#"../05_map.rs" 107 30 107 34] inv'0 self)
   -> ([#"../05_map.rs" 104 15 104 43] postcondition_mut'0 f (e) r)
   -> ([#"../05_map.rs" 103 15 103 30]  * f = C05Map_Map_Type.map_func self)
   -> ([#"../05_map.rs" 102 4 102 60] produces'0 (C05Map_Map_Type.map_iter self) (Seq.singleton e) iter)
   -> ([#"../05_map.rs" 101 4 101 12] forall i : i . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'4 i
   -> inv'1 e2
   -> inv'1 e1
   -> inv'5 s
   -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
   -> produces'0 (C05Map_Map_Type.map_iter self) (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i)
  && (let _ = () in ([#"../05_map.rs" 106 14 106 47] next_precondition'0 iter ( ^ f))
  && ([#"../05_map.rs" 105 14 105 42] preservation'0 iter ( ^ f)))
end
module C05Map_Impl0_Next
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  predicate invariant'12 (self : Seq.seq (borrowed f))
  let rec invariant'12 (self:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'12 self} (! return' {result}) ]
    
  predicate inv'12 (_x : Seq.seq (borrowed f))
  let rec inv'12 (_x:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'12 _x} (! return' {result}) ]
    
  axiom inv'12 : forall x : Seq.seq (borrowed f) . inv'12 x = true
  type item'0
  predicate invariant'11 (self : item'0)
  let rec invariant'11 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  predicate inv'11 (_x : item'0)
  let rec inv'11 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  axiom inv'11 : forall x : item'0 . inv'11 x = true
  predicate invariant'10 (self : Seq.seq item'0)
  let rec invariant'10 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : Seq.seq item'0)
  let rec inv'10 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : Seq.seq item'0 . inv'10 x = true
  predicate invariant'9 (self : borrowed f)
  let rec invariant'9 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : borrowed f)
  let rec inv'9 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : borrowed f . inv'9 x = true
  predicate invariant'8 (self : b)
  let rec invariant'8 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : b)
  let rec inv'8 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ] 
  axiom inv'8 : forall x : b . inv'8 x = true
  predicate invariant'7 (self : item'0)
  let rec invariant'7 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : item'0)
  let rec inv'7 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : item'0 . inv'7 x = true
  predicate inv'3 (_x : f)
  let rec inv'3 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  predicate inv'0 (_x : i)
  let rec inv'0 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  predicate precondition'0 (self : f) (_2 : item'0)
  let rec precondition'0 (self:f) (_2:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'0 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item'0 . inv'0 i
     -> inv'7 e  -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e)
  let rec next_precondition'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func} (! return' {result}) ]
    
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:item'0) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  use seq.Seq
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'0 i
     -> inv'8 b
     -> inv'9 f
     -> inv'7 e2
     -> inv'7 e1
     -> inv'10 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  use C05Map_Map_Type as C05Map_Map_Type
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate inv'5 (_x : borrowed i)
  let rec inv'5 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv'3 func
     -> inv'5 iter  -> completed'1 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'6 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  let rec invariant'6 (self:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : C05Map_Map_Type.t_map i b f)
  let rec inv'6 (_x:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : C05Map_Map_Type.t_map i b f . inv'6 x
  = (invariant'6 x
  /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  predicate resolve'3 (self : f)
  let rec resolve'3 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:item'0) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:item'0) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'8 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'11 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'3 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'11 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'8 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'9 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'3 ( ^ s)))
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'3 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'3 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'3 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'3 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'3 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'3 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:item'0) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'8 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'11 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'9 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'9 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'11 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'8 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'5 (self : borrowed i)
  let rec invariant'5 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  axiom inv'5 : forall x : borrowed i . inv'5 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'4 (self : Core_Option_Option_Type.t_option b)
  let rec invariant'4 (self:Core_Option_Option_Type.t_option b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Core_Option_Option_Type.t_option b)
  let rec inv'4 (_x:Core_Option_Option_Type.t_option b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Core_Option_Option_Type.t_option b . inv'4 x = true
  predicate invariant'3 (self : f)
  let rec invariant'3 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : f . inv'3 x = true
  predicate invariant'2 (self : Core_Option_Option_Type.t_option item'0)
  let rec invariant'2 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option item'0)
  let rec inv'2 (_x:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option item'0 . inv'2 x = true
  predicate invariant'1 (self : borrowed (C05Map_Map_Type.t_map i b f))
  let rec invariant'1 (self:borrowed (C05Map_Map_Type.t_map i b f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (C05Map_Map_Type.t_map i b f))
  let rec inv'1 (_x:borrowed (C05Map_Map_Type.t_map i b f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (C05Map_Map_Type.t_map i b f) . inv'1 x = (inv'6 ( * x) /\ inv'6 ( ^ x))
  use seq.Seq
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'0 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'10 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'0 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'10 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'0 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'0 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'0 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'0 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'0 a)
   -> ([#"../common.rs" 21 31 21 33] inv'10 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'0 b)
   -> ([#"../common.rs" 21 61 21 63] inv'10 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'0 c)  -> ([#"../common.rs" 20 14 20 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'0 self)
   -> ([#"../common.rs" 14 14 14 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'0 (self : i)
  let rec invariant'0 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : i . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'1 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 42 8 53 9] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'10 s
    /\ Seq.length s = Seq.length visited
    /\ produces'0 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'12 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C05Map_Map_Type.map_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C05Map_Map_Type.map_func self) ( * Seq.get fs i)
    /\ precondition'0 ( * Seq.get fs i) (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  let rec produces'1 (self:C05Map_Map_Type.t_map i b f) (visited:Seq.seq b) (succ:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited succ} (! return' {result}) ]
    
  use seq.Seq
  predicate produces_one'0 [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 118 8 123 9] exists f : borrowed f . inv'9 f
    /\  * f = C05Map_Map_Type.map_func self
    /\  ^ f = C05Map_Map_Type.map_func succ
    /\ (exists e : item'0 . inv'7 e
    /\ produces'0 (C05Map_Map_Type.map_iter self) (Seq.singleton e) (C05Map_Map_Type.map_iter succ)
    /\ precondition'0 ( * f) (e) /\ postcondition_mut'0 f (e) visited)
  let rec produces_one'0 (self:C05Map_Map_Type.t_map i b f) (visited:b) (succ:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= {[@expl:precondition] [#"../05_map.rs" 117 38 117 42] inv'6 succ}
    {[@expl:precondition] [#"../05_map.rs" 117 26 117 33] inv'8 visited}
    {[@expl:precondition] [#"../05_map.rs" 117 20 117 24] inv'6 self}
    any [ return' (result:bool)-> {result = produces_one'0 self visited succ} (! return' {result}) ] 
  axiom produces_one'0_spec : forall self : C05Map_Map_Type.t_map i b f, visited : b, succ : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 117 20 117 24] inv'6 self)
   -> ([#"../05_map.rs" 117 26 117 33] inv'8 visited)
   -> ([#"../05_map.rs" 117 38 117 42] inv'6 succ)
   -> ([#"../05_map.rs" 116 14 116 68] produces_one'0 self visited succ = produces'1 self (Seq.singleton visited) succ)
  predicate completed'0 [#"../05_map.rs" 22 4 22 35] (self : borrowed (C05Map_Map_Type.t_map i b f)) =
    [#"../05_map.rs" 23 8 23 75] completed'1 (Borrow.borrow_logic (C05Map_Map_Type.map_iter ( * self)) (C05Map_Map_Type.map_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C05Map_Map_Type.map_func ( * self) = C05Map_Map_Type.map_func ( ^ self)
  let rec completed'0 (self:borrowed (C05Map_Map_Type.t_map i b f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Intrinsic
  let rec call_mut'0 (self:borrowed f) (args:item'0) (return'  (ret:b))= {[@expl:precondition] inv'11 args}
    {[@expl:precondition] inv'9 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 160 27 160 52] precondition'0 ( * self) args}
    any
    [ return' (result:b)-> {inv'8 result}
      {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition_mut'0 self args result}
      (! return' {result}) ]
    
  predicate resolve'2 (self : Snapshot.snap_ty ())
  let rec resolve'2 (self:Snapshot.snap_ty ()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use prelude.Snapshot
  function produces_one_invariant'0 [#"../05_map.rs" 107 4 107 73] (self : C05Map_Map_Type.t_map i b f) (e : item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  let rec produces_one_invariant'0 (self:C05Map_Map_Type.t_map i b f) (e:item'0) (r:b) (f:borrowed f) (iter:i) (return'  (ret:()))= {[@expl:precondition] [#"../05_map.rs" 107 65 107 69] inv'0 iter}
    {[@expl:precondition] [#"../05_map.rs" 107 54 107 55] inv'9 f}
    {[@expl:precondition] [#"../05_map.rs" 107 48 107 49] inv'8 r}
    {[@expl:precondition] [#"../05_map.rs" 107 36 107 37] inv'7 e}
    {[@expl:precondition] [#"../05_map.rs" 107 30 107 34] inv'6 self}
    {[@expl:precondition] [#"../05_map.rs" 104 15 104 43] postcondition_mut'0 f (e) r}
    {[@expl:precondition] [#"../05_map.rs" 103 15 103 30]  * f = C05Map_Map_Type.map_func self}
    {[@expl:precondition] [#"../05_map.rs" 102 4 102 60] produces'0 (C05Map_Map_Type.map_iter self) (Seq.singleton e) iter}
    any [ return' (result:())-> {result = produces_one_invariant'0 self e r f iter} (! return' {result}) ] 
  axiom produces_one_invariant'0_spec : forall self : C05Map_Map_Type.t_map i b f, e : item'0, r : b, f : borrowed f, iter : i . ([#"../05_map.rs" 102 4 102 60] produces'0 (C05Map_Map_Type.map_iter self) (Seq.singleton e) iter)
   -> ([#"../05_map.rs" 103 15 103 30]  * f = C05Map_Map_Type.map_func self)
   -> ([#"../05_map.rs" 104 15 104 43] postcondition_mut'0 f (e) r)
   -> ([#"../05_map.rs" 107 30 107 34] inv'6 self)
   -> ([#"../05_map.rs" 107 36 107 37] inv'7 e)
   -> ([#"../05_map.rs" 107 48 107 49] inv'8 r)
   -> ([#"../05_map.rs" 107 54 107 55] inv'9 f)
   -> ([#"../05_map.rs" 107 65 107 69] inv'0 iter)
   -> ([#"../05_map.rs" 106 14 106 47] next_precondition'0 iter ( ^ f))
  && ([#"../05_map.rs" 105 14 105 42] preservation'0 iter ( ^ f))
  predicate resolve'1 (self : Core_Option_Option_Type.t_option item'0)
  let rec resolve'1 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (C05Map_Map_Type.t_map i b f)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C05Map_Map_Type.t_map i b f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed i) (return'  (ret:Core_Option_Option_Type.t_option item'0))= {[@expl:precondition] [#"../common.rs" 27 17 27 21] inv'5 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option item'0)-> {[#"../common.rs" 27 26 27 44] inv'2 result}
      {[#"../common.rs" 23 14 26 5] match result with
        | Core_Option_Option_Type.C_None -> completed'1 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  let rec next (self:borrowed (C05Map_Map_Type.t_map i b f)) (return'  (ret:Core_Option_Option_Type.t_option b))= {[#"../05_map.rs" 60 17 60 21] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = C05Map_Map_Type.t_map <i> <b> <f> { * self}
          (fun (riter'0:i) (rfunc'0:f) ->
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                C05Map_Map_Type.t_map <i> <b> <f> { * self}
                  (fun (l_iter'0:i) (l_func'0:f) ->
                    
                    [ &self <- { self with current = (C05Map_Map_Type.C_Map ( ^ _4) l_func'0 : C05Map_Map_Type.t_map i b f) ; } ]
                    
                    s1)))
      | s1 = -{inv'0 ( ^ _4)}- s2
      | s2 = next'0 {_4} (fun (_ret':Core_Option_Option_Type.t_option item'0) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = any
        [ br0 -> {_3 = Core_Option_Option_Type.C_None } (! bb4)
        | br1 (a:item'0)-> {_3 = Core_Option_Option_Type.C_Some a} (! bb3) ]
         ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[@expl:type invariant] inv'2 _3} s3
      | s3 = -{resolve'1 _3}- s4
      | s4 = {[#"../05_map.rs" 61 14 61 30] false} any ]
      
    | bb3 = s0 [ s0 = bb5 ] 
    | bb5 = s0
      [ s0 = Core_Option_Option_Type.some <item'0> {_3}
          (fun (r0'0:item'0) ->
             [ &v <- r0'0 ] 
            (any
            [ any_ (_any:item'0)-> (! Core_Option_Option_Type.some <item'0> {_3}
                (fun (l_0'0:item'0) ->
                   [ &_3 <- Core_Option_Option_Type.C_Some _any : Core_Option_Option_Type.t_option item'0 ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 _3} s2
      | s2 = -{resolve'1 _3}- s3
      | s3 = {[@expl:assertion] [#"../05_map.rs" 63 16 63 62] precondition'0 (C05Map_Map_Type.map_func ( * self)) (v)}
        s4
      | s4 = bb6 ]
      
    | bb6 = s0 [ s0 =  [ &_9 <- [#"../05_map.rs" 64 16 64 58] Snapshot.new () ] s1 | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = -{resolve'2 _9}- s1
      | s1 = C05Map_Map_Type.t_map <i> <b> <f> { * self}
          (fun (riter'0:i) (rfunc'0:f) ->
            Borrow.borrow_final <f> {rfunc'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed f) ->
                 [ &_12 <- _ret' ] 
                C05Map_Map_Type.t_map <i> <b> <f> { * self}
                  (fun (l_iter'0:i) (l_func'0:f) ->
                    
                    [ &self <- { self with current = (C05Map_Map_Type.C_Map l_iter'0 ( ^ _12) : C05Map_Map_Type.t_map i b f) ; } ]
                    
                    s2)))
      | s2 = -{inv'3 ( ^ _12)}- s3
      | s3 =  [ &_13 <- (v) ] (any [ any_ (_any:item'0)-> (!  [ &v <- _any ] s4) ] )
      | s4 = call_mut'0 {_12} {_13} (fun (_ret':b) ->  [ &_11 <- _ret' ] s5)
      | s5 = bb8 ]
      
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 =  [ &_0 <- Core_Option_Option_Type.C_Some _11 : Core_Option_Option_Type.t_option b ] 
        (any [ any_ (_any:b)-> (!  [ &_11 <- _any ] s3) ] )
      | s3 = bb10 ]
      
    | bb10 = s0 [ s0 = bb11 ] 
    | bb11 = s0 [ s0 = bb12 ] 
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'2 _3} s1
      | s1 = -{resolve'1 _3}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'0 self}- s4
      | s4 =  [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option b ] s5
      | s5 = bb12 ]
      
    | bb12 = s0 [ s0 = bb13 ] 
    | bb13 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option b = any_l () : Core_Option_Option_Type.t_option b
    | & self : borrowed (C05Map_Map_Type.t_map i b f) = self
    | & _3 : Core_Option_Option_Type.t_option item'0 = any_l () : Core_Option_Option_Type.t_option item'0
    | & _4 : borrowed i = any_l () : borrowed i
    | & v : item'0 = any_l () : item'0
    | & _9 : Snapshot.snap_ty () = any_l () : Snapshot.snap_ty ()
    | & _11 : b = any_l () : b
    | & _12 : borrowed f = any_l () : borrowed f
    | & _13 : item'0 = any_l () : item'0 ]
    
    [ return' (result:Core_Option_Option_Type.t_option b)-> {[@expl:postcondition] [#"../05_map.rs" 60 26 60 44] inv'4 result}
      {[@expl:postcondition] [#"../05_map.rs" 56 14 59 5] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces_one'0 ( * self) v ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C05Map_Map
  type i
  type b
  type f
  type item'0
  predicate invariant'8 (self : item'0)
  let rec invariant'8 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : item'0)
  let rec inv'8 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : item'0 . inv'8 x = true
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:item'0) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'6 (_x : borrowed f)
  let rec inv'6 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:item'0) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'5 (_x : b)
  let rec inv'5 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ] 
  predicate inv'2 (_x : f)
  let rec inv'2 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:item'0) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'5 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'8 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'2 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'8 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'5 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'6 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'2 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'2 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'2 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'2 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'2 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'2 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:item'0) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'5 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'8 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'6 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'8 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'5 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  use seq.Seq
  predicate invariant'7 (self : Seq.seq item'0)
  let rec invariant'7 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Seq.seq item'0)
  let rec inv'7 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Seq.seq item'0 . inv'7 x = true
  predicate invariant'6 (self : borrowed f)
  let rec invariant'6 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  axiom inv'6 : forall x : borrowed f . inv'6 x = true
  predicate invariant'5 (self : b)
  let rec invariant'5 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  axiom inv'5 : forall x : b . inv'5 x = true
  predicate invariant'4 (self : borrowed i)
  let rec invariant'4 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed i)
  let rec inv'4 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  predicate inv'0 (_x : i)
  let rec inv'0 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  predicate precondition'0 (self : f) (_2 : item'0)
  let rec precondition'0 (self:f) (_2:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'0 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  predicate inv'1 (_x : item'0)
  let rec inv'1 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item'0 . inv'0 i
     -> inv'1 e  -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e)
  let rec next_precondition'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'0 i
     -> inv'5 b
     -> inv'6 f
     -> inv'1 e2
     -> inv'1 e1
     -> inv'7 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  use C05Map_Map_Type as C05Map_Map_Type
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv'2 func
     -> inv'4 iter  -> completed'0 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'3 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  let rec invariant'3 (self:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : C05Map_Map_Type.t_map i b f)
  let rec inv'3 (_x:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : C05Map_Map_Type.t_map i b f . inv'3 x
  = (invariant'3 x
  /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  predicate invariant'2 (self : f)
  let rec invariant'2 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : f . inv'2 x = true
  predicate invariant'1 (self : item'0)
  let rec invariant'1 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : item'0 . inv'1 x = true
  predicate invariant'0 (self : i)
  let rec invariant'0 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : i . inv'0 x = true
  use seq.Seq
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'0 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'7 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'0 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'7 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'0 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'0 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'0 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'0 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'0 a)
   -> ([#"../common.rs" 21 31 21 33] inv'7 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'0 b)
   -> ([#"../common.rs" 21 61 21 63] inv'7 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'0 c)  -> ([#"../common.rs" 20 14 20 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'0 self)
   -> ([#"../common.rs" 14 14 14 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  use prelude.Intrinsic
  let rec map (iter:i) (func:f) (return'  (ret:C05Map_Map_Type.t_map i b f))= {[#"../05_map.rs" 144 60 144 64] inv'2 func}
    {[#"../05_map.rs" 144 51 144 55] inv'0 iter}
    {[#"../05_map.rs" 142 11 142 51] preservation'0 iter func}
    {[#"../05_map.rs" 141 11 141 41] reinitialize'0 ()}
    {[#"../05_map.rs" 140 0 140 105] forall i2 : i . forall e : item'0 . inv'0 i2
     -> inv'1 e  -> produces'0 iter (Seq.singleton e) i2  -> precondition'0 func (e)}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_0 <- C05Map_Map_Type.C_Map iter func : C05Map_Map_Type.t_map i b f ] 
        (any [ any_ (_any:i)-> (!  [ &iter <- _any ] (any [ any_ (_any:f)-> (!  [ &func <- _any ] s1) ] )) ] )
      | s1 = bb4 ]
      
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = s0 [ s0 = bb6 ] 
    | bb6 = s0 [ s0 = bb7 ] 
    | bb7 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : C05Map_Map_Type.t_map i b f = any_l () : C05Map_Map_Type.t_map i b f
    | & iter : i = iter
    | & func : f = func ]
    
    [ return' (result:C05Map_Map_Type.t_map i b f)-> {[@expl:postcondition] [#"../05_map.rs" 144 72 144 84] inv'3 result}
      {[@expl:postcondition] [#"../05_map.rs" 143 10 143 38] result = C05Map_Map_Type.C_Map iter func}
      (! return' {result}) ]
    
end
module C05Map_Impl0
  type i
  type b
  type f
  use prelude.Borrow
  predicate invariant'11 (self : borrowed i)
  let rec invariant'11 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  predicate inv'11 (_x : borrowed i)
  let rec inv'11 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  axiom inv'11 : forall x : borrowed i . inv'11 x = true
  predicate invariant'10 (self : f)
  let rec invariant'10 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : f)
  let rec inv'10 (_x:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : f . inv'10 x = true
  predicate invariant'9 (self : i)
  let rec invariant'9 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : i)
  let rec inv'9 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ] 
  axiom inv'9 : forall x : i . inv'9 x = true
  use seq.Seq
  predicate invariant'8 (self : Seq.seq (borrowed f))
  let rec invariant'8 (self:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Seq.seq (borrowed f))
  let rec inv'8 (_x:Seq.seq (borrowed f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Seq.seq (borrowed f) . inv'8 x = true
  type item'0
  predicate invariant'7 (self : Seq.seq item'0)
  let rec invariant'7 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Seq.seq item'0)
  let rec inv'7 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Seq.seq item'0 . inv'7 x = true
  predicate invariant'6 (self : item'0)
  let rec invariant'6 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : item'0)
  let rec inv'6 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : item'0 . inv'6 x = true
  predicate invariant'5 (self : borrowed f)
  let rec invariant'5 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : borrowed f)
  let rec inv'5 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : borrowed f . inv'5 x = true
  predicate invariant'4 (self : b)
  let rec invariant'4 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : b)
  let rec inv'4 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : b . inv'4 x = true
  predicate invariant'3 (self : Seq.seq b)
  let rec invariant'3 (self:Seq.seq b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq b)
  let rec inv'3 (_x:Seq.seq b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq b . inv'3 x = true
  predicate precondition'0 (self : f) (_2 : item'0)
  let rec precondition'0 (self:f) (_2:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  use seq.Seq
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item'0 . inv'9 i
     -> inv'6 e  -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  let rec next_precondition'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func} (! return' {result}) ]
    
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:item'0) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  use seq.Seq
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq.seq item'0 . inv'9 i
     -> inv'4 b
     -> inv'5 f
     -> inv'6 e2
     -> inv'6 e1
     -> inv'7 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  let rec preservation'0 (iter:i) (func:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  use C05Map_Map_Type as C05Map_Map_Type
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv'10 func
     -> inv'11 iter  -> completed'1 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'2 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  let rec invariant'2 (self:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : C05Map_Map_Type.t_map i b f)
  let rec inv'2 (_x:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : C05Map_Map_Type.t_map i b f . inv'2 x
  = (invariant'2 x
  /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'1 (self : Core_Option_Option_Type.t_option b)
  let rec invariant'1 (self:Core_Option_Option_Type.t_option b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Core_Option_Option_Type.t_option b)
  let rec inv'1 (_x:Core_Option_Option_Type.t_option b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Core_Option_Option_Type.t_option b . inv'1 x = true
  predicate invariant'0 (self : borrowed (C05Map_Map_Type.t_map i b f))
  let rec invariant'0 (self:borrowed (C05Map_Map_Type.t_map i b f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed (C05Map_Map_Type.t_map i b f))
  let rec inv'0 (_x:borrowed (C05Map_Map_Type.t_map i b f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed (C05Map_Map_Type.t_map i b f) . inv'0 x = (inv'2 ( * x) /\ inv'2 ( ^ x))
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 42 8 53 9] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'7 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'8 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C05Map_Map_Type.map_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C05Map_Map_Type.map_func self) ( * Seq.get fs i)
    /\ precondition'0 ( * Seq.get fs i) (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  let rec produces'0 (self:C05Map_Map_Type.t_map i b f) (visited:Seq.seq b) (succ:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited succ} (! return' {result}) ]
    
  use seq.Seq
  predicate produces_one'0 [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 118 8 123 9] exists f : borrowed f . inv'5 f
    /\  * f = C05Map_Map_Type.map_func self
    /\  ^ f = C05Map_Map_Type.map_func succ
    /\ (exists e : item'0 . inv'6 e
    /\ produces'1 (C05Map_Map_Type.map_iter self) (Seq.singleton e) (C05Map_Map_Type.map_iter succ)
    /\ precondition'0 ( * f) (e) /\ postcondition_mut'0 f (e) visited)
  let rec produces_one'0 (self:C05Map_Map_Type.t_map i b f) (visited:b) (succ:C05Map_Map_Type.t_map i b f) (return'  (ret:bool))= {[@expl:precondition] [#"../05_map.rs" 117 38 117 42] inv'2 succ}
    {[@expl:precondition] [#"../05_map.rs" 117 26 117 33] inv'4 visited}
    {[@expl:precondition] [#"../05_map.rs" 117 20 117 24] inv'2 self}
    any [ return' (result:bool)-> {result = produces_one'0 self visited succ} (! return' {result}) ] 
  axiom produces_one'0_spec : forall self : C05Map_Map_Type.t_map i b f, visited : b, succ : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 117 20 117 24] inv'2 self)
   -> ([#"../05_map.rs" 117 26 117 33] inv'4 visited)
   -> ([#"../05_map.rs" 117 38 117 42] inv'2 succ)
   -> ([#"../05_map.rs" 116 14 116 68] produces_one'0 self visited succ = produces'0 self (Seq.singleton visited) succ)
  predicate completed'0 [#"../05_map.rs" 22 4 22 35] (self : borrowed (C05Map_Map_Type.t_map i b f)) =
    [#"../05_map.rs" 23 8 23 75] completed'1 (Borrow.borrow_logic (C05Map_Map_Type.map_iter ( * self)) (C05Map_Map_Type.map_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C05Map_Map_Type.map_func ( * self) = C05Map_Map_Type.map_func ( ^ self)
  let rec completed'0 (self:borrowed (C05Map_Map_Type.t_map i b f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  goal next_refn : [#"../05_map.rs" 60 4 60 44] forall self : borrowed (C05Map_Map_Type.t_map i b f) . inv'0 self
   -> inv'0 self
  /\ (forall result : Core_Option_Option_Type.t_option b . inv'1 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces_one'0 ( * self) v ( ^ self)
    end
   -> inv'1 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_trans_refn : [#"../05_map.rs" 36 4 36 90] forall a : C05Map_Map_Type.t_map i b f . forall ab : Seq.seq b . forall b : C05Map_Map_Type.t_map i b f . forall bc : Seq.seq b . forall c : C05Map_Map_Type.t_map i b f . inv'2 c
  /\ inv'3 bc /\ inv'2 b /\ inv'3 ab /\ inv'2 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'2 c
  /\ inv'3 bc
  /\ inv'2 b
  /\ inv'3 ab
  /\ inv'2 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  goal produces_refl_refn : [#"../05_map.rs" 29 4 29 26] forall self : C05Map_Map_Type.t_map i b f . inv'2 self
   -> inv'2 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq b) self
   -> produces'0 self (Seq.empty  : Seq.seq b) self)
end
module C05Map_Impl2
  type i
  type b
  type f
end
