
module C05Map_Map_Type
  type t_map 'i 'b 'f =
    | C_Map 'i 'f
  
  function any_l (_ : 'b) : 'a
  
  let rec t_map < 'i > < 'b > < 'f > (input:t_map 'i 'b 'f) (ret  (iter:'i) (func:'f))= any
    [ good (iter:'i) (func:'f)-> {C_Map iter func = input} (! ret {iter} {func})
    | bad (iter:'i) (func:'f)-> {C_Map iter func <> input} {false} any ]
    
  
  function map_iter [@inline:trivial] (self : t_map 'i 'b 'f) : 'i =
    match self with
      | C_Map a _ -> a
      end
  
  function map_func [@inline:trivial] (self : t_map 'i 'b 'f) : 'f =
    match self with
      | C_Map _ a -> a
      end
end
module CreusotContracts_Logic_Seq2_Seq_Type
  use seq.Seq
  
  type t_seq 't =
    | C_Seq (Seq.seq 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_seq < 't > (input:t_seq 't) (ret  (field_0:Seq.seq 't))= any
    [ good (field_0:Seq.seq 't)-> {C_Seq field_0 = input} (! ret {field_0})
    | bad (field_0:Seq.seq 't)-> {C_Seq field_0 <> input} {false} any ]
    
  
  function seq_0 [@inline:trivial] (self : t_seq 't) : Seq.seq 't =
    match self with
      | C_Seq a -> a
      end
end
module C05Map_Impl0_ProducesRefl_Impl
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 29 21 29 25
  
  let%span s05_map1 = "../05_map.rs" 28 14 28 45
  
  let%span span2 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span12 = "../common.rs" 18 15 18 32
  
  let%span span13 = "../common.rs" 19 15 19 32
  
  let%span span14 = "../common.rs" 21 22 21 23
  
  let%span span15 = "../common.rs" 21 31 21 33
  
  let%span span16 = "../common.rs" 21 52 21 53
  
  let%span span17 = "../common.rs" 21 61 21 63
  
  let%span span18 = "../common.rs" 21 82 21 83
  
  let%span span19 = "../common.rs" 20 14 20 42
  
  let%span span20 = "../common.rs" 15 21 15 25
  
  let%span span21 = "../common.rs" 14 14 14 45
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span26 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span31 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span32 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span33 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span34 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span35 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span36 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span37 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span38 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span39 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span40 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span41 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span42 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span43 = "../05_map.rs" 75 8 77 9
  
  let%span span44 = "../../../../../creusot-contracts/src/logic/seq2.rs" 99 8 99 39
  
  let%span span45 = "../05_map.rs" 82 8 89 9
  
  let%span span46 = "../05_map.rs" 94 8 98 9
  
  let%span span47 = "../05_map.rs" 133 12 135 57
  
  let%span span48 = "../05_map.rs" 42 8 53 9
  
  type item'0
  
  predicate invariant'10 (self : item'0)
  
  predicate inv'10 (_x : item'0)
  
  axiom inv'10 : forall x : item'0 . inv'10 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'9 (self : borrowed i)
  
  predicate inv'9 (_x : borrowed i)
  
  axiom inv'9 : forall x : borrowed i . inv'9 x = true
  
  predicate invariant'8 (self : b)
  
  predicate inv'8 (_x : b)
  
  axiom inv'8 : forall x : b . inv'8 x = true
  
  predicate invariant'7 (self : item'0)
  
  predicate inv'7 (_x : item'0)
  
  axiom inv'7 : forall x : item'0 . inv'7 x = true
  
  predicate invariant'6 (self : borrowed f)
  
  predicate inv'6 (_x : borrowed f)
  
  axiom inv'6 : forall x : borrowed f . inv'6 x = true
  
  predicate invariant'5 (self : f)
  
  predicate inv'5 (_x : f)
  
  axiom inv'5 : forall x : f . inv'5 x = true
  
  predicate invariant'4 (self : i)
  
  predicate inv'4 (_x : i)
  
  axiom inv'4 : forall x : i . inv'4 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate inv'3 (_x : Seq'0.t_seq (borrowed f))
  
  function len'2 (self : Seq'0.t_seq (borrowed f)) : int
  
  axiom len'2_spec : forall self : Seq'0.t_seq (borrowed f) . ([%#span2] inv'3 self)  -> ([%#span3] len'2 self >= 0)
  
  constant empty'2 : Seq'0.t_seq (borrowed f) = [%#span4] ()
  
  function empty_len'2 (_1 : ()) : () =
    [%#span6] ()
  
  axiom empty_len'2_spec : forall _1 : () . [%#span5] len'2 (empty'2 : Seq'0.t_seq (borrowed f)) = 0
  
  predicate invariant'3 (self : Seq'0.t_seq (borrowed f))
  
  axiom inv'3 : forall x : Seq'0.t_seq (borrowed f) . inv'3 x = true
  
  use seq.Seq
  
  predicate inv'2 (_x : Seq'0.t_seq item'0)
  
  function len'0 (self : Seq'0.t_seq item'0) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq item'0 . ([%#span2] inv'2 self)  -> ([%#span3] len'0 self >= 0)
  
  constant empty'1 : Seq'0.t_seq item'0 = [%#span4] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span6] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span5] len'0 (empty'1 : Seq'0.t_seq item'0) = 0
  
  predicate invariant'2 (self : Seq'0.t_seq item'0)
  
  axiom inv'2 : forall x : Seq'0.t_seq item'0 . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq item'0) (x : int) : item'0
  
  function concat'0 (self : Seq'0.t_seq item'0) (other : Seq'0.t_seq item'0) : Seq'0.t_seq item'0
  
  axiom concat'0_spec : forall self : Seq'0.t_seq item'0, other : Seq'0.t_seq item'0 . ([%#span7] inv'2 self)
   -> ([%#span8] inv'2 other)
   -> ([%#span11] inv'2 (concat'0 self other))
  && ([%#span10] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'1 (concat'0 self other) i
  = (if i < len'0 self then index_logic'1 self i else index_logic'1 other (i - len'0 self)))
  && ([%#span9] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq'0.t_seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq'0.t_seq item'0) (b : i) (bc : Seq'0.t_seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq'0.t_seq item'0, b : i, bc : Seq'0.t_seq item'0, c : i . ([%#span12] produces'1 a ab b)
   -> ([%#span13] produces'1 b bc c)
   -> ([%#span14] inv'4 a)
   -> ([%#span15] inv'2 ab)
   -> ([%#span16] inv'4 b)
   -> ([%#span17] inv'2 bc)  -> ([%#span18] inv'4 c)  -> ([%#span19] produces'1 a (concat'0 ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span20] inv'4 self)
   -> ([%#span21] produces'1 self (empty'1 : Seq'0.t_seq item'0) self)
  
  predicate resolve'0 (self : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([%#span22] inv'5 self)
   -> ([%#span23] inv'7 args)
   -> ([%#span24] inv'8 res)
   -> ([%#span25] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'6 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span26] unnest'0 self b)
   -> ([%#span27] unnest'0 b c)
   -> ([%#span28] inv'5 self)  -> ([%#span29] inv'5 b)  -> ([%#span30] inv'5 c)  -> ([%#span31] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span32] inv'5 self)  -> ([%#span33] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([%#span34] postcondition_mut'0 self args res)
   -> ([%#span35] inv'6 self)
   -> ([%#span36] inv'7 args)  -> ([%#span37] inv'8 res)  -> ([%#span38] unnest'0 ( * self) ( ^ self))
  
  predicate invariant'1 (self : Seq'0.t_seq b)
  
  predicate inv'1 (_x : Seq'0.t_seq b)
  
  axiom inv'1 : forall x : Seq'0.t_seq b . inv'1 x = true
  
  use seq.Seq
  
  function len'1 (self : Seq'0.t_seq b) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq b . ([%#span2] inv'1 self)  -> ([%#span3] len'1 self >= 0)
  
  constant empty'0 : Seq'0.t_seq b = [%#span4] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span6] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span5] len'1 (empty'0 : Seq'0.t_seq b) = 0
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  use seq.Seq
  
  function singleton'0 (v : item'0) : Seq'0.t_seq item'0
  
  axiom singleton'0_spec : forall v : item'0 . ([%#span39] inv'10 v)
   -> ([%#span42] inv'2 (singleton'0 v))
  && ([%#span41] index_logic'1 (singleton'0 v) 0 = v) && ([%#span40] len'0 (singleton'0 v) = 1)
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span43] forall i : i . forall e : item'0 . inv'4 i
     -> inv'10 e  -> produces'1 iter (singleton'0 e) i  -> precondition'0 func (e)
  
  function push'0 [@inline:trivial] (self : Seq'0.t_seq item'0) (v : item'0) : Seq'0.t_seq item'0 =
    [%#span44] concat'0 self (singleton'0 v)
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span45] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq'0.t_seq item'0 . inv'4 i
     -> inv'8 b
     -> inv'6 f
     -> inv'10 e2
     -> inv'10 e1
     -> inv'2 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (push'0 (push'0 s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span46] forall func : f . forall iter : borrowed i . inv'5 func
     -> inv'9 iter  -> completed'0 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  
  use C05Map_Map_Type as Map'0
  
  predicate invariant'0 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span47] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  predicate inv'0 (_x : Map'0.t_map i b f)
  
  axiom inv'0 : forall x : Map'0.t_map i b f . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  use seq.Seq
  
  function index_logic'2 (self : Seq'0.t_seq b) (x : int) : b
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq (borrowed f)) (x : int) : borrowed f
  
  predicate produces'0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : Map'0.t_map i b f) (visited : Seq'0.t_seq b) (succ : Map'0.t_map i b f)
    
   =
    [%#span48] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq'0.t_seq item'0 . inv'2 s
    /\ len'0 s = len'1 visited
    /\ produces'1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq'0.t_seq (borrowed f) . inv'3 fs
    /\ len'2 fs = len'1 visited
    /\ (forall i : int . 1 <= i /\ i < len'2 fs  ->  ^ index_logic'0 fs (i - 1) =  * index_logic'0 fs i)
    /\ (if len'1 visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * index_logic'0 fs 0 = C05Map_Map_Type.map_func self
      /\  ^ index_logic'0 fs (len'1 visited - 1) = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < len'1 visited
     -> unnest'0 (C05Map_Map_Type.map_func self) ( * index_logic'0 fs i)
    /\ precondition'0 ( * index_logic'0 fs i) (index_logic'1 s i)
    /\ postcondition_mut'0 (index_logic'0 fs i) (index_logic'1 s i) (index_logic'2 visited i))))
  
  constant self  : Map'0.t_map i b f
  
  function produces_refl [#"../05_map.rs" 29 4 29 26] (self : Map'0.t_map i b f) : ()
  
  goal vc_produces_refl : ([%#s05_map0] inv'0 self)  -> ([%#s05_map1] produces'0 self (empty'0 : Seq'0.t_seq b) self)
end
module C05Map_Impl0_ProducesTrans_Impl
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 33 15 33 32
  
  let%span s05_map1 = "../05_map.rs" 34 15 34 32
  
  let%span s05_map2 = "../05_map.rs" 36 22 36 23
  
  let%span s05_map3 = "../05_map.rs" 36 31 36 33
  
  let%span s05_map4 = "../05_map.rs" 36 52 36 53
  
  let%span s05_map5 = "../05_map.rs" 36 61 36 63
  
  let%span s05_map6 = "../05_map.rs" 36 82 36 83
  
  let%span s05_map7 = "../05_map.rs" 35 14 35 42
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span18 = "../common.rs" 18 15 18 32
  
  let%span span19 = "../common.rs" 19 15 19 32
  
  let%span span20 = "../common.rs" 21 22 21 23
  
  let%span span21 = "../common.rs" 21 31 21 33
  
  let%span span22 = "../common.rs" 21 52 21 53
  
  let%span span23 = "../common.rs" 21 61 21 63
  
  let%span span24 = "../common.rs" 21 82 21 83
  
  let%span span25 = "../common.rs" 20 14 20 42
  
  let%span span26 = "../common.rs" 15 21 15 25
  
  let%span span27 = "../common.rs" 14 14 14 45
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span31 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span32 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span33 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span34 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span35 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span36 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span37 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span38 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span39 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span40 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span41 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span42 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span43 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span44 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span45 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span46 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span47 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span48 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span49 = "../05_map.rs" 75 8 77 9
  
  let%span span50 = "../../../../../creusot-contracts/src/logic/seq2.rs" 99 8 99 39
  
  let%span span51 = "../05_map.rs" 82 8 89 9
  
  let%span span52 = "../05_map.rs" 94 8 98 9
  
  let%span span53 = "../05_map.rs" 133 12 135 57
  
  let%span span54 = "../05_map.rs" 42 8 53 9
  
  type item'0
  
  predicate invariant'10 (self : item'0)
  
  predicate inv'10 (_x : item'0)
  
  axiom inv'10 : forall x : item'0 . inv'10 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'9 (self : borrowed i)
  
  predicate inv'9 (_x : borrowed i)
  
  axiom inv'9 : forall x : borrowed i . inv'9 x = true
  
  predicate invariant'8 (self : b)
  
  predicate inv'8 (_x : b)
  
  axiom inv'8 : forall x : b . inv'8 x = true
  
  predicate invariant'7 (self : item'0)
  
  predicate inv'7 (_x : item'0)
  
  axiom inv'7 : forall x : item'0 . inv'7 x = true
  
  predicate invariant'6 (self : borrowed f)
  
  predicate inv'6 (_x : borrowed f)
  
  axiom inv'6 : forall x : borrowed f . inv'6 x = true
  
  predicate invariant'5 (self : f)
  
  predicate inv'5 (_x : f)
  
  axiom inv'5 : forall x : f . inv'5 x = true
  
  predicate invariant'4 (self : i)
  
  predicate inv'4 (_x : i)
  
  axiom inv'4 : forall x : i . inv'4 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate inv'3 (_x : Seq'0.t_seq (borrowed f))
  
  function len'2 (self : Seq'0.t_seq (borrowed f)) : int
  
  axiom len'2_spec : forall self : Seq'0.t_seq (borrowed f) . ([%#span8] inv'3 self)  -> ([%#span9] len'2 self >= 0)
  
  constant empty'2 : Seq'0.t_seq (borrowed f) = [%#span10] ()
  
  function empty_len'2 (_1 : ()) : () =
    [%#span12] ()
  
  axiom empty_len'2_spec : forall _1 : () . [%#span11] len'2 (empty'2 : Seq'0.t_seq (borrowed f)) = 0
  
  predicate invariant'3 (self : Seq'0.t_seq (borrowed f))
  
  axiom inv'3 : forall x : Seq'0.t_seq (borrowed f) . inv'3 x = true
  
  use seq.Seq
  
  predicate inv'2 (_x : Seq'0.t_seq item'0)
  
  function len'0 (self : Seq'0.t_seq item'0) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq item'0 . ([%#span8] inv'2 self)  -> ([%#span9] len'0 self >= 0)
  
  constant empty'1 : Seq'0.t_seq item'0 = [%#span10] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span12] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span11] len'0 (empty'1 : Seq'0.t_seq item'0) = 0
  
  predicate invariant'2 (self : Seq'0.t_seq item'0)
  
  axiom inv'2 : forall x : Seq'0.t_seq item'0 . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq item'0) (x : int) : item'0
  
  function concat'1 (self : Seq'0.t_seq item'0) (other : Seq'0.t_seq item'0) : Seq'0.t_seq item'0
  
  axiom concat'1_spec : forall self : Seq'0.t_seq item'0, other : Seq'0.t_seq item'0 . ([%#span13] inv'2 self)
   -> ([%#span14] inv'2 other)
   -> ([%#span17] inv'2 (concat'1 self other))
  && ([%#span16] forall i : int . 0 <= i /\ i < len'0 (concat'1 self other)
   -> index_logic'1 (concat'1 self other) i
  = (if i < len'0 self then index_logic'1 self i else index_logic'1 other (i - len'0 self)))
  && ([%#span15] len'0 (concat'1 self other) = len'0 self + len'0 other)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq'0.t_seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq'0.t_seq item'0) (b : i) (bc : Seq'0.t_seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq'0.t_seq item'0, b : i, bc : Seq'0.t_seq item'0, c : i . ([%#span18] produces'1 a ab b)
   -> ([%#span19] produces'1 b bc c)
   -> ([%#span20] inv'4 a)
   -> ([%#span21] inv'2 ab)
   -> ([%#span22] inv'4 b)
   -> ([%#span23] inv'2 bc)  -> ([%#span24] inv'4 c)  -> ([%#span25] produces'1 a (concat'1 ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span26] inv'4 self)
   -> ([%#span27] produces'1 self (empty'1 : Seq'0.t_seq item'0) self)
  
  predicate resolve'0 (self : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([%#span28] inv'5 self)
   -> ([%#span29] inv'7 args)
   -> ([%#span30] inv'8 res)
   -> ([%#span31] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'6 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span32] unnest'0 self b)
   -> ([%#span33] unnest'0 b c)
   -> ([%#span34] inv'5 self)  -> ([%#span35] inv'5 b)  -> ([%#span36] inv'5 c)  -> ([%#span37] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span38] inv'5 self)  -> ([%#span39] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([%#span40] postcondition_mut'0 self args res)
   -> ([%#span41] inv'6 self)
   -> ([%#span42] inv'7 args)  -> ([%#span43] inv'8 res)  -> ([%#span44] unnest'0 ( * self) ( ^ self))
  
  use seq.Seq
  
  predicate inv'1 (_x : Seq'0.t_seq b)
  
  function len'1 (self : Seq'0.t_seq b) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq b . ([%#span8] inv'1 self)  -> ([%#span9] len'1 self >= 0)
  
  constant empty'0 : Seq'0.t_seq b = [%#span10] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span12] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span11] len'1 (empty'0 : Seq'0.t_seq b) = 0
  
  predicate invariant'1 (self : Seq'0.t_seq b)
  
  axiom inv'1 : forall x : Seq'0.t_seq b . inv'1 x = true
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  use seq.Seq
  
  function singleton'0 (v : item'0) : Seq'0.t_seq item'0
  
  axiom singleton'0_spec : forall v : item'0 . ([%#span45] inv'10 v)
   -> ([%#span48] inv'2 (singleton'0 v))
  && ([%#span47] index_logic'1 (singleton'0 v) 0 = v) && ([%#span46] len'0 (singleton'0 v) = 1)
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span49] forall i : i . forall e : item'0 . inv'4 i
     -> inv'10 e  -> produces'1 iter (singleton'0 e) i  -> precondition'0 func (e)
  
  function push'0 [@inline:trivial] (self : Seq'0.t_seq item'0) (v : item'0) : Seq'0.t_seq item'0 =
    [%#span50] concat'1 self (singleton'0 v)
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span51] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq'0.t_seq item'0 . inv'4 i
     -> inv'8 b
     -> inv'6 f
     -> inv'10 e2
     -> inv'10 e1
     -> inv'2 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (push'0 (push'0 s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span52] forall func : f . forall iter : borrowed i . inv'5 func
     -> inv'9 iter  -> completed'0 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  
  use C05Map_Map_Type as Map'0
  
  predicate invariant'0 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span53] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  predicate inv'0 (_x : Map'0.t_map i b f)
  
  axiom inv'0 : forall x : Map'0.t_map i b f . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'2 (self : Seq'0.t_seq b) (x : int) : b
  
  function concat'0 (self : Seq'0.t_seq b) (other : Seq'0.t_seq b) : Seq'0.t_seq b
  
  axiom concat'0_spec : forall self : Seq'0.t_seq b, other : Seq'0.t_seq b . ([%#span13] inv'1 self)
   -> ([%#span14] inv'1 other)
   -> ([%#span17] inv'1 (concat'0 self other))
  && ([%#span16] forall i : int . 0 <= i /\ i < len'1 (concat'0 self other)
   -> index_logic'2 (concat'0 self other) i
  = (if i < len'1 self then index_logic'2 self i else index_logic'2 other (i - len'1 self)))
  && ([%#span15] len'1 (concat'0 self other) = len'1 self + len'1 other)
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq (borrowed f)) (x : int) : borrowed f
  
  predicate produces'0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : Map'0.t_map i b f) (visited : Seq'0.t_seq b) (succ : Map'0.t_map i b f)
    
   =
    [%#span54] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq'0.t_seq item'0 . inv'2 s
    /\ len'0 s = len'1 visited
    /\ produces'1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq'0.t_seq (borrowed f) . inv'3 fs
    /\ len'2 fs = len'1 visited
    /\ (forall i : int . 1 <= i /\ i < len'2 fs  ->  ^ index_logic'0 fs (i - 1) =  * index_logic'0 fs i)
    /\ (if len'1 visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * index_logic'0 fs 0 = C05Map_Map_Type.map_func self
      /\  ^ index_logic'0 fs (len'1 visited - 1) = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < len'1 visited
     -> unnest'0 (C05Map_Map_Type.map_func self) ( * index_logic'0 fs i)
    /\ precondition'0 ( * index_logic'0 fs i) (index_logic'1 s i)
    /\ postcondition_mut'0 (index_logic'0 fs i) (index_logic'1 s i) (index_logic'2 visited i))))
  
  constant a  : Map'0.t_map i b f
  
  constant ab  : Seq'0.t_seq b
  
  constant b  : Map'0.t_map i b f
  
  constant bc  : Seq'0.t_seq b
  
  constant c  : Map'0.t_map i b f
  
  function produces_trans [#"../05_map.rs" 36 4 36 90] (a : Map'0.t_map i b f) (ab : Seq'0.t_seq b) (b : Map'0.t_map i b f) (bc : Seq'0.t_seq b) (c : Map'0.t_map i b f) : ()
    
  
  goal vc_produces_trans : ([%#s05_map6] inv'0 c)
   -> ([%#s05_map5] inv'1 bc)
   -> ([%#s05_map4] inv'0 b)
   -> ([%#s05_map3] inv'1 ab)
   -> ([%#s05_map2] inv'0 a)
   -> ([%#s05_map1] produces'0 b bc c)
   -> ([%#s05_map0] produces'0 a ab b)  -> ([%#s05_map7] produces'0 a (concat'0 ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module CreusotContracts_Snapshot_Snapshot_Type
  type t_snapshot 't
end
module C05Map_Impl1_ProducesOne_Impl
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 117 20 117 24
  
  let%span s05_map1 = "../05_map.rs" 117 26 117 33
  
  let%span s05_map2 = "../05_map.rs" 117 38 117 42
  
  let%span s05_map3 = "../05_map.rs" 116 14 116 68
  
  let%span sseq24 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span sseq25 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span sseq26 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span sseq27 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span s05_map8 = "../05_map.rs" 118 8 123 9
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span26 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span31 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span32 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span33 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span34 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span35 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span36 = "../common.rs" 18 15 18 32
  
  let%span span37 = "../common.rs" 19 15 19 32
  
  let%span span38 = "../common.rs" 21 22 21 23
  
  let%span span39 = "../common.rs" 21 31 21 33
  
  let%span span40 = "../common.rs" 21 52 21 53
  
  let%span span41 = "../common.rs" 21 61 21 63
  
  let%span span42 = "../common.rs" 21 82 21 83
  
  let%span span43 = "../common.rs" 20 14 20 42
  
  let%span span44 = "../common.rs" 15 21 15 25
  
  let%span span45 = "../common.rs" 14 14 14 45
  
  let%span span46 = "../05_map.rs" 42 8 53 9
  
  let%span span47 = "../05_map.rs" 33 15 33 32
  
  let%span span48 = "../05_map.rs" 34 15 34 32
  
  let%span span49 = "../05_map.rs" 36 22 36 23
  
  let%span span50 = "../05_map.rs" 36 31 36 33
  
  let%span span51 = "../05_map.rs" 36 52 36 53
  
  let%span span52 = "../05_map.rs" 36 61 36 63
  
  let%span span53 = "../05_map.rs" 36 82 36 83
  
  let%span span54 = "../05_map.rs" 35 14 35 42
  
  let%span span55 = "../05_map.rs" 31 4 31 10
  
  let%span span56 = "../05_map.rs" 29 21 29 25
  
  let%span span57 = "../05_map.rs" 28 14 28 45
  
  let%span span58 = "../05_map.rs" 26 4 26 10
  
  let%span span59 = "../05_map.rs" 75 8 77 9
  
  let%span span60 = "../../../../../creusot-contracts/src/logic/seq2.rs" 99 8 99 39
  
  let%span span61 = "../05_map.rs" 82 8 89 9
  
  let%span span62 = "../05_map.rs" 94 8 98 9
  
  let%span span63 = "../05_map.rs" 133 12 135 57
  
  use prelude.prelude.Borrow
  
  predicate invariant'10 (self : borrowed i)
  
  predicate inv'10 (_x : borrowed i)
  
  axiom inv'10 : forall x : borrowed i . inv'10 x = true
  
  type item'0
  
  predicate invariant'9 (self : item'0)
  
  predicate inv'9 (_x : item'0)
  
  axiom inv'9 : forall x : item'0 . inv'9 x = true
  
  predicate invariant'8 (self : f)
  
  predicate inv'8 (_x : f)
  
  axiom inv'8 : forall x : f . inv'8 x = true
  
  predicate invariant'7 (self : i)
  
  predicate inv'7 (_x : i)
  
  axiom inv'7 : forall x : i . inv'7 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate inv'6 (_x : Seq'0.t_seq (borrowed f))
  
  function len'2 (self : Seq'0.t_seq (borrowed f)) : int
  
  axiom len'2_spec : forall self : Seq'0.t_seq (borrowed f) . ([%#span9] inv'6 self)  -> ([%#span10] len'2 self >= 0)
  
  constant empty'2 : Seq'0.t_seq (borrowed f) = [%#span11] ()
  
  function empty_len'2 (_1 : ()) : () =
    [%#span13] ()
  
  axiom empty_len'2_spec : forall _1 : () . [%#span12] len'2 (empty'2 : Seq'0.t_seq (borrowed f)) = 0
  
  predicate invariant'6 (self : Seq'0.t_seq (borrowed f))
  
  axiom inv'6 : forall x : Seq'0.t_seq (borrowed f) . inv'6 x = true
  
  predicate invariant'5 (self : Seq'0.t_seq b)
  
  predicate inv'5 (_x : Seq'0.t_seq b)
  
  axiom inv'5 : forall x : Seq'0.t_seq b . inv'5 x = true
  
  predicate resolve'0 (self : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  predicate inv'2 (_x : borrowed f)
  
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  
  predicate inv'1 (_x : b)
  
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([%#span14] inv'8 self)
   -> ([%#span15] inv'9 args)
   -> ([%#span16] inv'1 res)
   -> ([%#span17] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'2 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span18] unnest'0 self b)
   -> ([%#span19] unnest'0 b c)
   -> ([%#span20] inv'8 self)  -> ([%#span21] inv'8 b)  -> ([%#span22] inv'8 c)  -> ([%#span23] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span24] inv'8 self)  -> ([%#span25] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([%#span26] postcondition_mut'0 self args res)
   -> ([%#span27] inv'2 self)
   -> ([%#span28] inv'9 args)  -> ([%#span29] inv'1 res)  -> ([%#span30] unnest'0 ( * self) ( ^ self))
  
  predicate invariant'4 (self : Seq'0.t_seq item'0)
  
  predicate inv'4 (_x : Seq'0.t_seq item'0)
  
  axiom inv'4 : forall x : Seq'0.t_seq item'0 . inv'4 x = true
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq item'0) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq item'0 . ([%#span9] inv'4 self)  -> ([%#span10] len'0 self >= 0)
  
  constant empty'1 : Seq'0.t_seq item'0 = [%#span11] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span13] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span12] len'0 (empty'1 : Seq'0.t_seq item'0) = 0
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq item'0) (x : int) : item'0
  
  function concat'1 (self : Seq'0.t_seq item'0) (other : Seq'0.t_seq item'0) : Seq'0.t_seq item'0
  
  axiom concat'1_spec : forall self : Seq'0.t_seq item'0, other : Seq'0.t_seq item'0 . ([%#span31] inv'4 self)
   -> ([%#span32] inv'4 other)
   -> ([%#span35] inv'4 (concat'1 self other))
  && ([%#span34] forall i : int . 0 <= i /\ i < len'0 (concat'1 self other)
   -> index_logic'0 (concat'1 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span33] len'0 (concat'1 self other) = len'0 self + len'0 other)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq'0.t_seq item'0) (o : i)
  
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq'0.t_seq item'0) (b : i) (bc : Seq'0.t_seq item'0) (c : i) : ()
    
  
  axiom produces_trans'1_spec : forall a : i, ab : Seq'0.t_seq item'0, b : i, bc : Seq'0.t_seq item'0, c : i . ([%#span36] produces'1 a ab b)
   -> ([%#span37] produces'1 b bc c)
   -> ([%#span38] inv'7 a)
   -> ([%#span39] inv'4 ab)
   -> ([%#span40] inv'7 b)
   -> ([%#span41] inv'4 bc)  -> ([%#span42] inv'7 c)  -> ([%#span43] produces'1 a (concat'1 ab bc) c)
  
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'1_spec : forall self : i . ([%#span44] inv'7 self)
   -> ([%#span45] produces'1 self (empty'1 : Seq'0.t_seq item'0) self)
  
  predicate invariant'3 (self : item'0)
  
  predicate inv'3 (_x : item'0)
  
  axiom inv'3 : forall x : item'0 . inv'3 x = true
  
  predicate invariant'2 (self : borrowed f)
  
  axiom inv'2 : forall x : borrowed f . inv'2 x = true
  
  use C05Map_Map_Type as Map'0
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq b) (x : int) : b
  
  use seq.Seq
  
  function len'1 (self : Seq'0.t_seq b) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq b . ([%#span9] inv'5 self)  -> ([%#span10] len'1 self >= 0)
  
  function concat'0 (self : Seq'0.t_seq b) (other : Seq'0.t_seq b) : Seq'0.t_seq b
  
  axiom concat'0_spec : forall self : Seq'0.t_seq b, other : Seq'0.t_seq b . ([%#span31] inv'5 self)
   -> ([%#span32] inv'5 other)
   -> ([%#span35] inv'5 (concat'0 self other))
  && ([%#span34] forall i : int . 0 <= i /\ i < len'1 (concat'0 self other)
   -> index_logic'1 (concat'0 self other) i
  = (if i < len'1 self then index_logic'1 self i else index_logic'1 other (i - len'1 self)))
  && ([%#span33] len'1 (concat'0 self other) = len'1 self + len'1 other)
  
  predicate inv'0 (_x : Map'0.t_map i b f)
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  use seq.Seq
  
  function index_logic'2 (self : Seq'0.t_seq (borrowed f)) (x : int) : borrowed f
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate produces'0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : Map'0.t_map i b f) (visited : Seq'0.t_seq b) (succ : Map'0.t_map i b f)
    
   =
    [%#span46] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq'0.t_seq item'0 . inv'4 s
    /\ len'0 s = len'1 visited
    /\ produces'1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq'0.t_seq (borrowed f) . inv'6 fs
    /\ len'2 fs = len'1 visited
    /\ (forall i : int . 1 <= i /\ i < len'2 fs  ->  ^ index_logic'2 fs (i - 1) =  * index_logic'2 fs i)
    /\ (if len'1 visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * index_logic'2 fs 0 = C05Map_Map_Type.map_func self
      /\  ^ index_logic'2 fs (len'1 visited - 1) = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < len'1 visited
     -> unnest'0 (C05Map_Map_Type.map_func self) ( * index_logic'2 fs i)
    /\ precondition'0 ( * index_logic'2 fs i) (index_logic'0 s i)
    /\ postcondition_mut'0 (index_logic'2 fs i) (index_logic'0 s i) (index_logic'1 visited i))))
  
  function produces_trans'0 [#"../05_map.rs" 36 4 36 90] (a : Map'0.t_map i b f) (ab : Seq'0.t_seq b) (b : Map'0.t_map i b f) (bc : Seq'0.t_seq b) (c : Map'0.t_map i b f) : ()
    
   =
    [%#span55] ()
  
  axiom produces_trans'0_spec : forall a : Map'0.t_map i b f, ab : Seq'0.t_seq b, b : Map'0.t_map i b f, bc : Seq'0.t_seq b, c : Map'0.t_map i b f . ([%#span47] produces'0 a ab b)
   -> ([%#span48] produces'0 b bc c)
   -> ([%#span49] inv'0 a)
   -> ([%#span50] inv'5 ab)
   -> ([%#span51] inv'0 b)
   -> ([%#span52] inv'5 bc)  -> ([%#span53] inv'0 c)  -> ([%#span54] produces'0 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq b = [%#span11] ()
  
  function produces_refl'0 [#"../05_map.rs" 29 4 29 26] (self : Map'0.t_map i b f) : () =
    [%#span58] ()
  
  axiom produces_refl'0_spec : forall self : Map'0.t_map i b f . ([%#span56] inv'0 self)
   -> ([%#span57] produces'0 self (empty'0 : Seq'0.t_seq b) self)
  
  function empty_len'0 (_1 : ()) : () =
    [%#span13] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span12] len'1 (empty'0 : Seq'0.t_seq b) = 0
  
  predicate invariant'1 (self : b)
  
  axiom inv'1 : forall x : b . inv'1 x = true
  
  use seq.Seq
  
  function singleton'1 (v : item'0) : Seq'0.t_seq item'0
  
  axiom singleton'1_spec : forall v : item'0 . ([%#sseq24] inv'3 v)
   -> ([%#sseq27] inv'4 (singleton'1 v))
  && ([%#sseq26] index_logic'0 (singleton'1 v) 0 = v) && ([%#sseq25] len'0 (singleton'1 v) = 1)
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span59] forall i : i . forall e : item'0 . inv'7 i
     -> inv'3 e  -> produces'1 iter (singleton'1 e) i  -> precondition'0 func (e)
  
  function push'0 [@inline:trivial] (self : Seq'0.t_seq item'0) (v : item'0) : Seq'0.t_seq item'0 =
    [%#span60] concat'1 self (singleton'1 v)
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span61] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq'0.t_seq item'0 . inv'7 i
     -> inv'1 b
     -> inv'2 f
     -> inv'3 e2
     -> inv'3 e1
     -> inv'4 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (push'0 (push'0 s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span62] forall func : f . forall iter : borrowed i . inv'8 func
     -> inv'10 iter  -> completed'0 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  
  predicate invariant'0 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span63] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  axiom inv'0 : forall x : Map'0.t_map i b f . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  use seq.Seq
  
  function singleton'0 (v : b) : Seq'0.t_seq b
  
  axiom singleton'0_spec : forall v : b . ([%#sseq24] inv'1 v)
   -> ([%#sseq27] inv'5 (singleton'0 v))
  && ([%#sseq26] index_logic'1 (singleton'0 v) 0 = v) && ([%#sseq25] len'1 (singleton'0 v) = 1)
  
  constant self  : Map'0.t_map i b f
  
  constant visited  : b
  
  constant succ  : Map'0.t_map i b f
  
  predicate produces_one [#"../05_map.rs" 117 4 117 57] (self : Map'0.t_map i b f) (visited : b) (succ : Map'0.t_map i b f)
    
  
  goal vc_produces_one : ([%#s05_map2] inv'0 succ)
   -> ([%#s05_map1] inv'1 visited)
   -> ([%#s05_map0] inv'0 self)
   -> (forall f : borrowed f . if inv'2 f then
    if  * f = C05Map_Map_Type.map_func self then
      if  ^ f = C05Map_Map_Type.map_func succ then
        forall e : item'0 . if inv'3 e then [%#sseq24] inv'3 e else true
      else
        true
      
    else
      true
    
  else
    true
  )
  /\ ([%#s05_map3] ([%#s05_map8] exists f : borrowed f . inv'2 f
  /\  * f = C05Map_Map_Type.map_func self
  /\  ^ f = C05Map_Map_Type.map_func succ
  /\ (exists e : item'0 . inv'3 e
  /\ produces'1 (C05Map_Map_Type.map_iter self) (singleton'1 e) (C05Map_Map_Type.map_iter succ)
  /\ precondition'0 ( * f) (e) /\ postcondition_mut'0 f (e) visited))
  = produces'0 self (singleton'0 visited) succ)
end
module C05Map_Impl1_ProducesOneInvariant_Impl
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 102 4 102 60
  
  let%span s05_map1 = "../05_map.rs" 103 15 103 30
  
  let%span s05_map2 = "../05_map.rs" 104 15 104 43
  
  let%span s05_map3 = "../05_map.rs" 107 30 107 34
  
  let%span s05_map4 = "../05_map.rs" 107 36 107 37
  
  let%span s05_map5 = "../05_map.rs" 107 48 107 49
  
  let%span s05_map6 = "../05_map.rs" 107 54 107 55
  
  let%span s05_map7 = "../05_map.rs" 107 65 107 69
  
  let%span s05_map8 = "../05_map.rs" 105 14 105 42
  
  let%span s05_map9 = "../05_map.rs" 106 14 106 47
  
  let%span sseq210 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span sseq211 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span sseq212 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span sseq213 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span sseq214 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span sseq215 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span sseq216 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span sseq217 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span sseq218 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span s05_map19 = "../05_map.rs" 101 4 101 12
  
  let%span span20 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span21 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span22 = "../05_map.rs" 75 8 77 9
  
  let%span span23 = "../../../../../creusot-contracts/src/logic/seq2.rs" 99 8 99 39
  
  let%span span24 = "../05_map.rs" 82 8 89 9
  
  let%span span25 = "../05_map.rs" 94 8 98 9
  
  let%span span26 = "../05_map.rs" 133 12 135 57
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span31 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span32 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span33 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span34 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span35 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span36 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span37 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span38 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span39 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span40 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span41 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span42 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span43 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span44 = "../common.rs" 18 15 18 32
  
  let%span span45 = "../common.rs" 19 15 19 32
  
  let%span span46 = "../common.rs" 21 22 21 23
  
  let%span span47 = "../common.rs" 21 31 21 33
  
  let%span span48 = "../common.rs" 21 52 21 53
  
  let%span span49 = "../common.rs" 21 61 21 63
  
  let%span span50 = "../common.rs" 21 82 21 83
  
  let%span span51 = "../common.rs" 20 14 20 42
  
  let%span span52 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span53 = "../common.rs" 15 21 15 25
  
  let%span span54 = "../common.rs" 14 14 14 45
  
  let%span span55 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span56 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  use prelude.prelude.Borrow
  
  predicate invariant'8 (self : borrowed i)
  
  predicate inv'8 (_x : borrowed i)
  
  axiom inv'8 : forall x : borrowed i . inv'8 x = true
  
  predicate invariant'7 (self : f)
  
  predicate inv'7 (_x : f)
  
  axiom inv'7 : forall x : f . inv'7 x = true
  
  type item'0
  
  predicate invariant'6 (self : item'0)
  
  predicate inv'6 (_x : item'0)
  
  axiom inv'6 : forall x : item'0 . inv'6 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'5 (self : Seq'0.t_seq item'0)
  
  predicate inv'5 (_x : Seq'0.t_seq item'0)
  
  axiom inv'5 : forall x : Seq'0.t_seq item'0 . inv'5 x = true
  
  predicate invariant'4 (self : i)
  
  predicate inv'4 (_x : i)
  
  axiom inv'4 : forall x : i . inv'4 x = true
  
  predicate invariant'3 (self : borrowed f)
  
  predicate inv'3 (_x : borrowed f)
  
  axiom inv'3 : forall x : borrowed f . inv'3 x = true
  
  predicate invariant'2 (self : b)
  
  predicate inv'2 (_x : b)
  
  axiom inv'2 : forall x : b . inv'2 x = true
  
  predicate invariant'1 (self : item'0)
  
  predicate inv'1 (_x : item'0)
  
  axiom inv'1 : forall x : item'0 . inv'1 x = true
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq'0.t_seq item'0) (o : i)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function index_logic'0 (self : Seq'0.t_seq item'0) (x : int) : item'0
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq item'0) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq item'0 . ([%#span20] inv'5 self)  -> ([%#span21] len'0 self >= 0)
  
  function singleton'0 (v : item'0) : Seq'0.t_seq item'0
  
  axiom singleton'0_spec : forall v : item'0 . ([%#sseq210] inv'1 v)
   -> ([%#sseq213] inv'5 (singleton'0 v))
  && ([%#sseq212] index_logic'0 (singleton'0 v) 0 = v) && ([%#sseq211] len'0 (singleton'0 v) = 1)
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span22] forall i : i . forall e : item'0 . inv'4 i
     -> inv'1 e  -> produces'0 iter (singleton'0 e) i  -> precondition'0 func (e)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  use seq.Seq
  
  function concat'0 (self : Seq'0.t_seq item'0) (other : Seq'0.t_seq item'0) : Seq'0.t_seq item'0
  
  axiom concat'0_spec : forall self : Seq'0.t_seq item'0, other : Seq'0.t_seq item'0 . ([%#sseq214] inv'5 self)
   -> ([%#sseq215] inv'5 other)
   -> ([%#sseq218] inv'5 (concat'0 self other))
  && ([%#sseq217] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#sseq216] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  function push'0 [@inline:trivial] (self : Seq'0.t_seq item'0) (v : item'0) : Seq'0.t_seq item'0 =
    [%#span23] concat'0 self (singleton'0 v)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span24] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq'0.t_seq item'0 . inv'4 i
     -> inv'2 b
     -> inv'3 f
     -> inv'1 e2
     -> inv'1 e1
     -> inv'5 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (push'0 (push'0 s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span25] forall func : f . forall iter : borrowed i . inv'7 func
     -> inv'8 iter  -> completed'0 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  
  use C05Map_Map_Type as Map'0
  
  predicate invariant'0 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span26] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  predicate inv'0 (_x : Map'0.t_map i b f)
  
  axiom inv'0 : forall x : Map'0.t_map i b f . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  predicate resolve'0 (self : f)
  
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([%#span27] inv'7 self)
   -> ([%#span28] inv'6 args)
   -> ([%#span29] inv'2 res)
   -> ([%#span30] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'3 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span31] unnest'0 self b)
   -> ([%#span32] unnest'0 b c)
   -> ([%#span33] inv'7 self)  -> ([%#span34] inv'7 b)  -> ([%#span35] inv'7 c)  -> ([%#span36] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span37] inv'7 self)  -> ([%#span38] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([%#span39] postcondition_mut'0 self args res)
   -> ([%#span40] inv'3 self)
   -> ([%#span41] inv'6 args)  -> ([%#span42] inv'2 res)  -> ([%#span43] unnest'0 ( * self) ( ^ self))
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq'0.t_seq item'0) (b : i) (bc : Seq'0.t_seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq'0.t_seq item'0, b : i, bc : Seq'0.t_seq item'0, c : i . ([%#span44] produces'0 a ab b)
   -> ([%#span45] produces'0 b bc c)
   -> ([%#span46] inv'4 a)
   -> ([%#span47] inv'5 ab)
   -> ([%#span48] inv'4 b)
   -> ([%#span49] inv'5 bc)  -> ([%#span50] inv'4 c)  -> ([%#span51] produces'0 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq item'0 = [%#span52] ()
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span53] inv'4 self)
   -> ([%#span54] produces'0 self (empty'0 : Seq'0.t_seq item'0) self)
  
  function empty_len'0 (_1 : ()) : () =
    [%#span56] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span55] len'0 (empty'0 : Seq'0.t_seq item'0) = 0
  
  constant self  : Map'0.t_map i b f
  
  constant e  : item'0
  
  constant r  : b
  
  constant f  : borrowed f
  
  constant iter  : i
  
  function produces_one_invariant [#"../05_map.rs" 107 4 107 73] (self : Map'0.t_map i b f) (e : item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  
  goal vc_produces_one_invariant : ([%#s05_map7] inv'4 iter)
   -> ([%#s05_map6] inv'3 f)
   -> ([%#s05_map5] inv'2 r)
   -> ([%#s05_map4] inv'1 e)
   -> ([%#s05_map3] inv'0 self)
   -> ([%#s05_map2] postcondition_mut'0 f (e) r)
   -> ([%#s05_map1]  * f = C05Map_Map_Type.map_func self)
   -> ([%#s05_map0] produces'0 (C05Map_Map_Type.map_iter self) (singleton'0 e) iter)
   -> (forall i : i . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq'0.t_seq item'0 . if inv'4 i then
    if inv'1 e2 then
      if inv'1 e1 then
        if inv'5 s then
          if produces'0 iter (push'0 (push'0 s e1) e2) i then
            ([%#sseq210] inv'1 e)
            /\ (([%#sseq213] inv'5 (singleton'0 e))
            && ([%#sseq212] index_logic'0 (singleton'0 e) 0 = e) && ([%#sseq211] len'0 (singleton'0 e) = 1)
             -> ([%#sseq215] inv'5 s) && ([%#sseq214] inv'5 (singleton'0 e)))
          else
            true
          
        else
          true
        
      else
        true
      
    else
      true
    
  else
    true
  )
  /\ ([%#s05_map19] forall i : i . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq'0.t_seq item'0 . inv'4 i
   -> inv'1 e2
   -> inv'1 e1
   -> inv'5 s
   -> produces'0 iter (push'0 (push'0 s e1) e2) i
   -> produces'0 (C05Map_Map_Type.map_iter self) (push'0 (push'0 (concat'0 (singleton'0 e) s) e1) e2) i)
  && (let _ = () in ([%#s05_map9] next_precondition'0 iter ( ^ f)) && ([%#s05_map8] preservation'0 iter ( ^ f)))
end
module C05Map_Impl0_Next
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 61 14 61 30
  
  let%span s05_map1 = "../05_map.rs" 63 16 63 62
  
  let%span s05_map2 = "../05_map.rs" 64 16 64 58
  
  let%span s05_map3 = "../05_map.rs" 60 17 60 21
  
  let%span s05_map4 = "../05_map.rs" 56 14 59 5
  
  let%span s05_map5 = "../05_map.rs" 60 26 60 44
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span15 = "../05_map.rs" 75 8 77 9
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span18 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span19 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span20 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span21 = "../../../../../creusot-contracts/src/logic/seq2.rs" 99 8 99 39
  
  let%span span22 = "../05_map.rs" 82 8 89 9
  
  let%span span23 = "../05_map.rs" 94 8 98 9
  
  let%span span24 = "../05_map.rs" 133 12 135 57
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span26 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span31 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span32 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span33 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span34 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span35 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span36 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span37 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span38 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span39 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span40 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span41 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span42 = "../common.rs" 18 15 18 32
  
  let%span span43 = "../common.rs" 19 15 19 32
  
  let%span span44 = "../common.rs" 21 22 21 23
  
  let%span span45 = "../common.rs" 21 31 21 33
  
  let%span span46 = "../common.rs" 21 52 21 53
  
  let%span span47 = "../common.rs" 21 61 21 63
  
  let%span span48 = "../common.rs" 21 82 21 83
  
  let%span span49 = "../common.rs" 20 14 20 42
  
  let%span span50 = "../common.rs" 15 21 15 25
  
  let%span span51 = "../common.rs" 14 14 14 45
  
  let%span span52 = "../05_map.rs" 42 8 53 9
  
  let%span span53 = "../05_map.rs" 117 20 117 24
  
  let%span span54 = "../05_map.rs" 117 26 117 33
  
  let%span span55 = "../05_map.rs" 117 38 117 42
  
  let%span span56 = "../05_map.rs" 116 14 116 68
  
  let%span span57 = "../05_map.rs" 118 8 123 9
  
  let%span span58 = "../05_map.rs" 23 8 23 75
  
  let%span span59 = "../../../../../creusot-contracts/src/std/ops.rs" 160 27 160 52
  
  let%span span60 = "" 0 0 0 0
  
  let%span span61 = "" 0 0 0 0
  
  let%span span62 = "../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1
  
  let%span span63 = "" 0 0 0 0
  
  let%span span64 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span65 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span66 = "../05_map.rs" 102 4 102 60
  
  let%span span67 = "../05_map.rs" 103 15 103 30
  
  let%span span68 = "../05_map.rs" 104 15 104 43
  
  let%span span69 = "../05_map.rs" 107 30 107 34
  
  let%span span70 = "../05_map.rs" 107 36 107 37
  
  let%span span71 = "../05_map.rs" 107 48 107 49
  
  let%span span72 = "../05_map.rs" 107 54 107 55
  
  let%span span73 = "../05_map.rs" 107 65 107 69
  
  let%span span74 = "../05_map.rs" 105 14 105 42
  
  let%span span75 = "../05_map.rs" 106 14 106 47
  
  let%span span76 = "../05_map.rs" 101 4 101 12
  
  let%span span77 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span78 = "../common.rs" 27 17 27 21
  
  let%span span79 = "../common.rs" 23 14 26 5
  
  let%span span80 = "../common.rs" 27 26 27 44
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate inv'14 (_x : Seq'0.t_seq (borrowed f))
  
  function len'2 (self : Seq'0.t_seq (borrowed f)) : int
  
  axiom len'2_spec : forall self : Seq'0.t_seq (borrowed f) . ([%#span6] inv'14 self)  -> ([%#span7] len'2 self >= 0)
  
  constant empty'2 : Seq'0.t_seq (borrowed f) = [%#span8] ()
  
  function empty_len'2 (_1 : ()) : () =
    [%#span10] ()
  
  axiom empty_len'2_spec : forall _1 : () . [%#span9] len'2 (empty'2 : Seq'0.t_seq (borrowed f)) = 0
  
  predicate invariant'14 (self : Seq'0.t_seq (borrowed f))
  
  axiom inv'14 : forall x : Seq'0.t_seq (borrowed f) . inv'14 x = true
  
  predicate invariant'13 (self : Seq'0.t_seq b)
  
  predicate inv'13 (_x : Seq'0.t_seq b)
  
  axiom inv'13 : forall x : Seq'0.t_seq b . inv'13 x = true
  
  use seq.Seq
  
  function len'1 (self : Seq'0.t_seq b) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq b . ([%#span6] inv'13 self)  -> ([%#span7] len'1 self >= 0)
  
  constant empty'1 : Seq'0.t_seq b = [%#span8] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span10] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span9] len'1 (empty'1 : Seq'0.t_seq b) = 0
  
  type item'0
  
  predicate invariant'12 (self : item'0)
  
  predicate inv'12 (_x : item'0)
  
  axiom inv'12 : forall x : item'0 . inv'12 x = true
  
  predicate invariant'11 (self : ())
  
  predicate inv'11 (_x : ())
  
  axiom inv'11 : forall x : () . inv'11 x = true
  
  predicate invariant'10 (self : Seq'0.t_seq item'0)
  
  predicate inv'10 (_x : Seq'0.t_seq item'0)
  
  axiom inv'10 : forall x : Seq'0.t_seq item'0 . inv'10 x = true
  
  predicate invariant'9 (self : borrowed f)
  
  predicate inv'9 (_x : borrowed f)
  
  axiom inv'9 : forall x : borrowed f . inv'9 x = true
  
  predicate invariant'8 (self : b)
  
  predicate inv'8 (_x : b)
  
  axiom inv'8 : forall x : b . inv'8 x = true
  
  predicate invariant'7 (self : item'0)
  
  predicate inv'7 (_x : item'0)
  
  axiom inv'7 : forall x : item'0 . inv'7 x = true
  
  predicate inv'3 (_x : f)
  
  predicate inv'0 (_x : i)
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq'0.t_seq item'0) (o : i)
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq item'0) (x : int) : item'0
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq item'0) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq item'0 . ([%#span6] inv'10 self)  -> ([%#span7] len'0 self >= 0)
  
  function singleton'0 (v : item'0) : Seq'0.t_seq item'0
  
  axiom singleton'0_spec : forall v : item'0 . ([%#span11] inv'7 v)
   -> ([%#span14] inv'10 (singleton'0 v))
  && ([%#span13] index_logic'0 (singleton'0 v) 0 = v) && ([%#span12] len'0 (singleton'0 v) = 1)
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span15] forall i : i . forall e : item'0 . inv'0 i
     -> inv'7 e  -> produces'0 iter (singleton'0 e) i  -> precondition'0 func (e)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  use seq.Seq
  
  function concat'0 (self : Seq'0.t_seq item'0) (other : Seq'0.t_seq item'0) : Seq'0.t_seq item'0
  
  axiom concat'0_spec : forall self : Seq'0.t_seq item'0, other : Seq'0.t_seq item'0 . ([%#span16] inv'10 self)
   -> ([%#span17] inv'10 other)
   -> ([%#span20] inv'10 (concat'0 self other))
  && ([%#span19] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span18] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  function push'0 [@inline:trivial] (self : Seq'0.t_seq item'0) (v : item'0) : Seq'0.t_seq item'0 =
    [%#span21] concat'0 self (singleton'0 v)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span22] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq'0.t_seq item'0 . inv'0 i
     -> inv'8 b
     -> inv'9 f
     -> inv'7 e2
     -> inv'7 e1
     -> inv'10 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (push'0 (push'0 s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate inv'5 (_x : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span23] forall func : f . forall iter : borrowed i . inv'3 func
     -> inv'5 iter  -> completed'1 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  
  use C05Map_Map_Type as Map'0
  
  predicate invariant'6 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span24] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  predicate inv'6 (_x : Map'0.t_map i b f)
  
  axiom inv'6 : forall x : Map'0.t_map i b f . inv'6 x
  = (invariant'6 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  predicate resolve'3 (self : f)
  
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([%#span25] inv'3 self)
   -> ([%#span26] inv'12 args)
   -> ([%#span27] inv'8 res)
   -> ([%#span28] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'9 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'3 ( ^ s)))
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span29] unnest'0 self b)
   -> ([%#span30] unnest'0 b c)
   -> ([%#span31] inv'3 self)  -> ([%#span32] inv'3 b)  -> ([%#span33] inv'3 c)  -> ([%#span34] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span35] inv'3 self)  -> ([%#span36] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([%#span37] postcondition_mut'0 self args res)
   -> ([%#span38] inv'9 self)
   -> ([%#span39] inv'12 args)  -> ([%#span40] inv'8 res)  -> ([%#span41] unnest'0 ( * self) ( ^ self))
  
  constant empty'0 : Seq'0.t_seq item'0 = [%#span8] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span10] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span9] len'0 (empty'0 : Seq'0.t_seq item'0) = 0
  
  predicate invariant'5 (self : borrowed i)
  
  axiom inv'5 : forall x : borrowed i . inv'5 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'4 (self : Option'0.t_option b)
  
  predicate inv'4 (_x : Option'0.t_option b)
  
  axiom inv'4 : forall x : Option'0.t_option b . inv'4 x = true
  
  predicate invariant'3 (self : f)
  
  axiom inv'3 : forall x : f . inv'3 x = true
  
  predicate invariant'2 (self : Option'0.t_option item'0)
  
  predicate inv'2 (_x : Option'0.t_option item'0)
  
  axiom inv'2 : forall x : Option'0.t_option item'0 . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (Map'0.t_map i b f))
  
  predicate inv'1 (_x : borrowed (Map'0.t_map i b f))
  
  axiom inv'1 : forall x : borrowed (Map'0.t_map i b f) . inv'1 x = (inv'6 ( * x) /\ inv'6 ( ^ x))
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq'0.t_seq item'0) (b : i) (bc : Seq'0.t_seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq'0.t_seq item'0, b : i, bc : Seq'0.t_seq item'0, c : i . ([%#span42] produces'0 a ab b)
   -> ([%#span43] produces'0 b bc c)
   -> ([%#span44] inv'0 a)
   -> ([%#span45] inv'10 ab)
   -> ([%#span46] inv'0 b)
   -> ([%#span47] inv'10 bc)  -> ([%#span48] inv'0 c)  -> ([%#span49] produces'0 a (concat'0 ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span50] inv'0 self)
   -> ([%#span51] produces'0 self (empty'0 : Seq'0.t_seq item'0) self)
  
  predicate invariant'0 (self : i)
  
  axiom inv'0 : forall x : i . inv'0 x = true
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq b) (x : int) : b
  
  use seq.Seq
  
  function index_logic'2 (self : Seq'0.t_seq (borrowed f)) (x : int) : borrowed f
  
  predicate produces'1 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : Map'0.t_map i b f) (visited : Seq'0.t_seq b) (succ : Map'0.t_map i b f)
    
   =
    [%#span52] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq'0.t_seq item'0 . inv'10 s
    /\ len'0 s = len'1 visited
    /\ produces'0 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq'0.t_seq (borrowed f) . inv'14 fs
    /\ len'2 fs = len'1 visited
    /\ (forall i : int . 1 <= i /\ i < len'2 fs  ->  ^ index_logic'2 fs (i - 1) =  * index_logic'2 fs i)
    /\ (if len'1 visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * index_logic'2 fs 0 = C05Map_Map_Type.map_func self
      /\  ^ index_logic'2 fs (len'1 visited - 1) = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < len'1 visited
     -> unnest'0 (C05Map_Map_Type.map_func self) ( * index_logic'2 fs i)
    /\ precondition'0 ( * index_logic'2 fs i) (index_logic'0 s i)
    /\ postcondition_mut'0 (index_logic'2 fs i) (index_logic'0 s i) (index_logic'1 visited i))))
  
  use seq.Seq
  
  function singleton'1 (v : b) : Seq'0.t_seq b
  
  axiom singleton'1_spec : forall v : b . ([%#span11] inv'8 v)
   -> ([%#span14] inv'13 (singleton'1 v))
  && ([%#span13] index_logic'1 (singleton'1 v) 0 = v) && ([%#span12] len'1 (singleton'1 v) = 1)
  
  predicate produces_one'0 [#"../05_map.rs" 117 4 117 57] (self : Map'0.t_map i b f) (visited : b) (succ : Map'0.t_map i b f)
    
   =
    [%#span57] exists f : borrowed f . inv'9 f
    /\  * f = C05Map_Map_Type.map_func self
    /\  ^ f = C05Map_Map_Type.map_func succ
    /\ (exists e : item'0 . inv'7 e
    /\ produces'0 (C05Map_Map_Type.map_iter self) (singleton'0 e) (C05Map_Map_Type.map_iter succ)
    /\ precondition'0 ( * f) (e) /\ postcondition_mut'0 f (e) visited)
  
  axiom produces_one'0_spec : forall self : Map'0.t_map i b f, visited : b, succ : Map'0.t_map i b f . ([%#span53] inv'6 self)
   -> ([%#span54] inv'8 visited)
   -> ([%#span55] inv'6 succ)
   -> ([%#span56] produces_one'0 self visited succ = produces'1 self (singleton'1 visited) succ)
  
  predicate completed'0 [#"../05_map.rs" 22 4 22 35] (self : borrowed (Map'0.t_map i b f)) =
    [%#span58] completed'1 (Borrow.borrow_logic (C05Map_Map_Type.map_iter ( * self)) (C05Map_Map_Type.map_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C05Map_Map_Type.map_func ( * self) = C05Map_Map_Type.map_func ( ^ self)
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  let rec call_mut'0 (self:borrowed f) (args:item'0) (return'  (ret:b))= {[@expl:precondition] [%#span61] inv'12 args}
    {[@expl:precondition] [%#span60] inv'9 self}
    {[@expl:precondition] [%#span59] precondition'0 ( * self) args}
    any
    [ return' (result:b)-> {[%#span63] inv'8 result}
      {[%#span62] postcondition_mut'0 self args result}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : Snapshot'0.t_snapshot ())
  
  function deref'0 (self : Snapshot'0.t_snapshot ()) : ()
  
  function new'0 (x : ()) : Snapshot'0.t_snapshot ()
  
  axiom new'0_spec : forall x : () . ([%#span64] inv'11 x)  -> ([%#span65] deref'0 (new'0 x) = x)
  
  function produces_one_invariant'0 [#"../05_map.rs" 107 4 107 73] (self : Map'0.t_map i b f) (e : item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  
  axiom produces_one_invariant'0_spec : forall self : Map'0.t_map i b f, e : item'0, r : b, f : borrowed f, iter : i . ([%#span66] produces'0 (C05Map_Map_Type.map_iter self) (singleton'0 e) iter)
   -> ([%#span67]  * f = C05Map_Map_Type.map_func self)
   -> ([%#span68] postcondition_mut'0 f (e) r)
   -> ([%#span69] inv'6 self)
   -> ([%#span70] inv'7 e)
   -> ([%#span71] inv'8 r)
   -> ([%#span72] inv'9 f)
   -> ([%#span73] inv'0 iter)
   -> ([%#span75] next_precondition'0 iter ( ^ f)) && ([%#span74] preservation'0 iter ( ^ f))
  
  predicate resolve'1 (self : Option'0.t_option item'0)
  
  predicate resolve'0 (self : borrowed (Map'0.t_map i b f)) =
    [%#span77]  ^ self =  * self
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_option item'0))= {[@expl:precondition] [%#span78] inv'5 self}
    any
    [ return' (result:Option'0.t_option item'0)-> {[%#span80] inv'2 result}
      {[%#span79] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  let rec next (self:borrowed (Map'0.t_map i b f)) (return'  (ret:Option'0.t_option b))= {[%#s05_map3] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Map'0.t_map <i> <b> <f> { * self}
          (fun (riter'0:i) (rfunc'0:f) ->
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                Map'0.t_map <i> <b> <f> { * self}
                  (fun (l_iter'0:i) (l_func'0:f) ->
                     [ &self <- { self with current = Map'0.C_Map ( ^ _4) l_func'0 ; } ] 
                    s1)))
      | s1 = -{inv'0 ( ^ _4)}- s2
      | s2 = next'0 {_4} (fun (_ret':Option'0.t_option item'0) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = any [ br0 -> {_3 = Option'0.C_None } (! bb4) | br1 (a:item'0)-> {_3 = Option'0.C_Some a} (! bb3) ] 
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[@expl:type invariant] inv'2 _3} s3
      | s3 = -{resolve'1 _3}- s4
      | s4 = {[%#s05_map0] false} any ]
      
    | bb3 = bb5
    | bb5 = s0
      [ s0 = Option'0.some <item'0> {_3}
          (fun (r0'0:item'0) ->
             [ &v <- r0'0 ] 
            (any
            [ any_ (_any:item'0)-> (! Option'0.some <item'0> {_3}
                (fun (l_0'0:item'0) ->  [ &_3 <- Option'0.C_Some _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 _3} s2
      | s2 = -{resolve'1 _3}- s3
      | s3 = {[@expl:assertion] [%#s05_map1] precondition'0 (C05Map_Map_Type.map_func ( * self)) (v)} s4
      | s4 = bb6 ]
      
    | bb6 = s0 [ s0 =  [ &_9 <- [%#s05_map2] new'0 () ] s1 | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = -{resolve'2 _9}- s1
      | s1 = Map'0.t_map <i> <b> <f> { * self}
          (fun (riter'0:i) (rfunc'0:f) ->
            Borrow.borrow_final <f> {rfunc'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed f) ->
                 [ &_12 <- _ret' ] 
                Map'0.t_map <i> <b> <f> { * self}
                  (fun (l_iter'0:i) (l_func'0:f) ->
                     [ &self <- { self with current = Map'0.C_Map l_iter'0 ( ^ _12) ; } ] 
                    s2)))
      | s2 = -{inv'3 ( ^ _12)}- s3
      | s3 =  [ &_13 <- (v) ] (any [ any_ (_any:item'0)-> (!  [ &v <- _any ] s4) ] )
      | s4 = call_mut'0 {_12} {_13} (fun (_ret':b) ->  [ &_11 <- _ret' ] s5)
      | s5 = bb8 ]
      
    | bb8 = bb9
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 =  [ &_0 <- Option'0.C_Some _11 ] (any [ any_ (_any:b)-> (!  [ &_11 <- _any ] s3) ] )
      | s3 = bb10 ]
      
    | bb10 = bb11
    | bb11 = bb12
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'2 _3} s1
      | s1 = -{resolve'1 _3}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'0 self}- s4
      | s4 =  [ &_0 <- Option'0.C_None ] s5
      | s5 = bb12 ]
      
    | bb12 = bb13
    | bb13 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option b = any_l ()
    | & self : borrowed (Map'0.t_map i b f) = self
    | & _3 : Option'0.t_option item'0 = any_l ()
    | & _4 : borrowed i = any_l ()
    | & v : item'0 = any_l ()
    | & _9 : Snapshot'0.t_snapshot () = any_l ()
    | & _11 : b = any_l ()
    | & _12 : borrowed f = any_l ()
    | & _13 : item'0 = any_l () ]
    
    [ return' (result:Option'0.t_option b)-> {[@expl:postcondition] [%#s05_map5] inv'4 result}
      {[@expl:postcondition] [%#s05_map4] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces_one'0 ( * self) v ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C05Map_Map
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 140 0 140 105
  
  let%span s05_map1 = "../05_map.rs" 141 11 141 41
  
  let%span s05_map2 = "../05_map.rs" 142 11 142 51
  
  let%span s05_map3 = "../05_map.rs" 144 51 144 55
  
  let%span s05_map4 = "../05_map.rs" 144 60 144 64
  
  let%span s05_map5 = "../05_map.rs" 143 10 143 38
  
  let%span s05_map6 = "../05_map.rs" 144 72 144 84
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span24 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span25 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span26 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span27 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span28 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span29 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span30 = "../05_map.rs" 75 8 77 9
  
  let%span span31 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span32 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span33 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span34 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span35 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span36 = "../../../../../creusot-contracts/src/logic/seq2.rs" 99 8 99 39
  
  let%span span37 = "../05_map.rs" 82 8 89 9
  
  let%span span38 = "../05_map.rs" 94 8 98 9
  
  let%span span39 = "../05_map.rs" 133 12 135 57
  
  let%span span40 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span41 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span42 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span43 = "../common.rs" 18 15 18 32
  
  let%span span44 = "../common.rs" 19 15 19 32
  
  let%span span45 = "../common.rs" 21 22 21 23
  
  let%span span46 = "../common.rs" 21 31 21 33
  
  let%span span47 = "../common.rs" 21 52 21 53
  
  let%span span48 = "../common.rs" 21 61 21 63
  
  let%span span49 = "../common.rs" 21 82 21 83
  
  let%span span50 = "../common.rs" 20 14 20 42
  
  let%span span51 = "../common.rs" 15 21 15 25
  
  let%span span52 = "../common.rs" 14 14 14 45
  
  type item'0
  
  predicate invariant'8 (self : item'0)
  
  predicate inv'8 (_x : item'0)
  
  axiom inv'8 : forall x : item'0 . inv'8 x = true
  
  predicate resolve'0 (self : f)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  predicate inv'7 (_x : borrowed f)
  
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  
  predicate inv'6 (_x : b)
  
  predicate inv'2 (_x : f)
  
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([%#span7] inv'2 self)
   -> ([%#span8] inv'8 args)
   -> ([%#span9] inv'6 res)
   -> ([%#span10] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'7 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span11] unnest'0 self b)
   -> ([%#span12] unnest'0 b c)
   -> ([%#span13] inv'2 self)  -> ([%#span14] inv'2 b)  -> ([%#span15] inv'2 c)  -> ([%#span16] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span17] inv'2 self)  -> ([%#span18] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([%#span19] postcondition_mut'0 self args res)
   -> ([%#span20] inv'7 self)
   -> ([%#span21] inv'8 args)  -> ([%#span22] inv'6 res)  -> ([%#span23] unnest'0 ( * self) ( ^ self))
  
  predicate invariant'7 (self : borrowed f)
  
  axiom inv'7 : forall x : borrowed f . inv'7 x = true
  
  predicate invariant'6 (self : b)
  
  axiom inv'6 : forall x : b . inv'6 x = true
  
  predicate invariant'5 (self : borrowed i)
  
  predicate inv'5 (_x : borrowed i)
  
  axiom inv'5 : forall x : borrowed i . inv'5 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'4 (self : Seq'0.t_seq item'0)
  
  predicate inv'4 (_x : Seq'0.t_seq item'0)
  
  axiom inv'4 : forall x : Seq'0.t_seq item'0 . inv'4 x = true
  
  predicate inv'0 (_x : i)
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq'0.t_seq item'0) (o : i)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function index_logic'0 (self : Seq'0.t_seq item'0) (x : int) : item'0
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq item'0) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq item'0 . ([%#span24] inv'4 self)  -> ([%#span25] len'0 self >= 0)
  
  predicate inv'1 (_x : item'0)
  
  function singleton'0 (v : item'0) : Seq'0.t_seq item'0
  
  axiom singleton'0_spec : forall v : item'0 . ([%#span26] inv'1 v)
   -> ([%#span29] inv'4 (singleton'0 v))
  && ([%#span28] index_logic'0 (singleton'0 v) 0 = v) && ([%#span27] len'0 (singleton'0 v) = 1)
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span30] forall i : i . forall e : item'0 . inv'0 i
     -> inv'1 e  -> produces'0 iter (singleton'0 e) i  -> precondition'0 func (e)
  
  use seq.Seq
  
  function concat'0 (self : Seq'0.t_seq item'0) (other : Seq'0.t_seq item'0) : Seq'0.t_seq item'0
  
  axiom concat'0_spec : forall self : Seq'0.t_seq item'0, other : Seq'0.t_seq item'0 . ([%#span31] inv'4 self)
   -> ([%#span32] inv'4 other)
   -> ([%#span35] inv'4 (concat'0 self other))
  && ([%#span34] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span33] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  function push'0 [@inline:trivial] (self : Seq'0.t_seq item'0) (v : item'0) : Seq'0.t_seq item'0 =
    [%#span36] concat'0 self (singleton'0 v)
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span37] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq'0.t_seq item'0 . inv'0 i
     -> inv'6 b
     -> inv'7 f
     -> inv'1 e2
     -> inv'1 e1
     -> inv'4 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (push'0 (push'0 s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span38] forall func : f . forall iter : borrowed i . inv'2 func
     -> inv'5 iter  -> completed'0 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  
  use C05Map_Map_Type as Map'0
  
  predicate invariant'3 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span39] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  predicate inv'3 (_x : Map'0.t_map i b f)
  
  axiom inv'3 : forall x : Map'0.t_map i b f . inv'3 x
  = (invariant'3 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  predicate invariant'2 (self : f)
  
  axiom inv'2 : forall x : f . inv'2 x = true
  
  constant empty'0 : Seq'0.t_seq item'0 = [%#span40] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span42] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span41] len'0 (empty'0 : Seq'0.t_seq item'0) = 0
  
  predicate invariant'1 (self : item'0)
  
  axiom inv'1 : forall x : item'0 . inv'1 x = true
  
  predicate invariant'0 (self : i)
  
  axiom inv'0 : forall x : i . inv'0 x = true
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq'0.t_seq item'0) (b : i) (bc : Seq'0.t_seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq'0.t_seq item'0, b : i, bc : Seq'0.t_seq item'0, c : i . ([%#span43] produces'0 a ab b)
   -> ([%#span44] produces'0 b bc c)
   -> ([%#span45] inv'0 a)
   -> ([%#span46] inv'4 ab)
   -> ([%#span47] inv'0 b)
   -> ([%#span48] inv'4 bc)  -> ([%#span49] inv'0 c)  -> ([%#span50] produces'0 a (concat'0 ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span51] inv'0 self)
   -> ([%#span52] produces'0 self (empty'0 : Seq'0.t_seq item'0) self)
  
  use prelude.prelude.Intrinsic
  
  let rec map (iter:i) (func:f) (return'  (ret:Map'0.t_map i b f))= {[%#s05_map4] inv'2 func}
    {[%#s05_map3] inv'0 iter}
    {[%#s05_map2] preservation'0 iter func}
    {[%#s05_map1] reinitialize'0 ()}
    {[%#s05_map0] forall i2 : i . forall e : item'0 . inv'0 i2
     -> inv'1 e  -> produces'0 iter (singleton'0 e) i2  -> precondition'0 func (e)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = s0
      [ s0 =  [ &_0 <- Map'0.C_Map iter func ] 
        (any [ any_ (_any:i)-> (!  [ &iter <- _any ] (any [ any_ (_any:f)-> (!  [ &func <- _any ] s1) ] )) ] )
      | s1 = bb4 ]
      
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = return' {_0} ]
    ) [ & _0 : Map'0.t_map i b f = any_l () | & iter : i = iter | & func : f = func ] 
    [ return' (result:Map'0.t_map i b f)-> {[@expl:postcondition] [%#s05_map6] inv'3 result}
      {[@expl:postcondition] [%#s05_map5] result = Map'0.C_Map iter func}
      (! return' {result}) ]
    
end
module C05Map_Impl0
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 60 4 60 44
  
  let%span s05_map1 = "../05_map.rs" 36 4 36 90
  
  let%span s05_map2 = "../05_map.rs" 29 4 29 26
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span9 = "../05_map.rs" 75 8 77 9
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 99 8 99 39
  
  let%span span16 = "../05_map.rs" 82 8 89 9
  
  let%span span17 = "../05_map.rs" 94 8 98 9
  
  let%span span18 = "../05_map.rs" 133 12 135 57
  
  let%span span19 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span20 = "../05_map.rs" 42 8 53 9
  
  let%span span21 = "../05_map.rs" 117 20 117 24
  
  let%span span22 = "../05_map.rs" 117 26 117 33
  
  let%span span23 = "../05_map.rs" 117 38 117 42
  
  let%span span24 = "../05_map.rs" 116 14 116 68
  
  let%span span25 = "../05_map.rs" 118 8 123 9
  
  let%span span26 = "../05_map.rs" 23 8 23 75
  
  use prelude.prelude.Borrow
  
  predicate invariant'11 (self : borrowed i)
  
  predicate inv'11 (_x : borrowed i)
  
  axiom inv'11 : forall x : borrowed i . inv'11 x = true
  
  predicate invariant'10 (self : f)
  
  predicate inv'10 (_x : f)
  
  axiom inv'10 : forall x : f . inv'10 x = true
  
  predicate invariant'9 (self : i)
  
  predicate inv'9 (_x : i)
  
  axiom inv'9 : forall x : i . inv'9 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'8 (self : Seq'0.t_seq (borrowed f))
  
  predicate inv'8 (_x : Seq'0.t_seq (borrowed f))
  
  axiom inv'8 : forall x : Seq'0.t_seq (borrowed f) . inv'8 x = true
  
  type item'0
  
  predicate invariant'7 (self : Seq'0.t_seq item'0)
  
  predicate inv'7 (_x : Seq'0.t_seq item'0)
  
  axiom inv'7 : forall x : Seq'0.t_seq item'0 . inv'7 x = true
  
  predicate invariant'6 (self : item'0)
  
  predicate inv'6 (_x : item'0)
  
  axiom inv'6 : forall x : item'0 . inv'6 x = true
  
  predicate invariant'5 (self : borrowed f)
  
  predicate inv'5 (_x : borrowed f)
  
  axiom inv'5 : forall x : borrowed f . inv'5 x = true
  
  predicate invariant'4 (self : b)
  
  predicate inv'4 (_x : b)
  
  axiom inv'4 : forall x : b . inv'4 x = true
  
  predicate invariant'3 (self : Seq'0.t_seq b)
  
  predicate inv'3 (_x : Seq'0.t_seq b)
  
  axiom inv'3 : forall x : Seq'0.t_seq b . inv'3 x = true
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq'0.t_seq item'0) (o : i)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function index_logic'2 (self : Seq'0.t_seq item'0) (x : int) : item'0
  
  use seq.Seq
  
  function len'1 (self : Seq'0.t_seq item'0) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq item'0 . ([%#span3] inv'7 self)  -> ([%#span4] len'1 self >= 0)
  
  function singleton'1 (v : item'0) : Seq'0.t_seq item'0
  
  axiom singleton'1_spec : forall v : item'0 . ([%#span5] inv'6 v)
   -> ([%#span8] inv'7 (singleton'1 v))
  && ([%#span7] index_logic'2 (singleton'1 v) 0 = v) && ([%#span6] len'1 (singleton'1 v) = 1)
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span9] forall i : i . forall e : item'0 . inv'9 i
     -> inv'6 e  -> produces'1 iter (singleton'1 e) i  -> precondition'0 func (e)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  use seq.Seq
  
  function concat'1 (self : Seq'0.t_seq item'0) (other : Seq'0.t_seq item'0) : Seq'0.t_seq item'0
  
  axiom concat'1_spec : forall self : Seq'0.t_seq item'0, other : Seq'0.t_seq item'0 . ([%#span10] inv'7 self)
   -> ([%#span11] inv'7 other)
   -> ([%#span14] inv'7 (concat'1 self other))
  && ([%#span13] forall i : int . 0 <= i /\ i < len'1 (concat'1 self other)
   -> index_logic'2 (concat'1 self other) i
  = (if i < len'1 self then index_logic'2 self i else index_logic'2 other (i - len'1 self)))
  && ([%#span12] len'1 (concat'1 self other) = len'1 self + len'1 other)
  
  function push'0 [@inline:trivial] (self : Seq'0.t_seq item'0) (v : item'0) : Seq'0.t_seq item'0 =
    [%#span15] concat'1 self (singleton'1 v)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span16] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item'0 . forall e1 : item'0 . forall s : Seq'0.t_seq item'0 . inv'9 i
     -> inv'4 b
     -> inv'5 f
     -> inv'6 e2
     -> inv'6 e1
     -> inv'7 s
     -> unnest'0 func ( * f)
     -> produces'1 iter (push'0 (push'0 s e1) e2) i
     -> precondition'0 ( * f) (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 ( ^ f) (e2)
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span17] forall func : f . forall iter : borrowed i . inv'10 func
     -> inv'11 iter  -> completed'1 iter  -> next_precondition'0 ( ^ iter) func /\ preservation'0 ( ^ iter) func
  
  use C05Map_Map_Type as Map'0
  
  predicate invariant'2 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span18] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  predicate inv'2 (_x : Map'0.t_map i b f)
  
  axiom inv'2 : forall x : Map'0.t_map i b f . inv'2 x
  = (invariant'2 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'1 (self : Option'0.t_option b)
  
  predicate inv'1 (_x : Option'0.t_option b)
  
  axiom inv'1 : forall x : Option'0.t_option b . inv'1 x = true
  
  predicate invariant'0 (self : borrowed (Map'0.t_map i b f))
  
  predicate inv'0 (_x : borrowed (Map'0.t_map i b f))
  
  axiom inv'0 : forall x : borrowed (Map'0.t_map i b f) . inv'0 x = (inv'2 ( * x) /\ inv'2 ( ^ x))
  
  constant empty'0 : Seq'0.t_seq b = [%#span19] ()
  
  constant empty'0 : Seq'0.t_seq b = [%#span19] ()
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq b) (x : int) : b
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq b) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq b . ([%#span3] inv'3 self)  -> ([%#span4] len'0 self >= 0)
  
  function concat'0 (self : Seq'0.t_seq b) (other : Seq'0.t_seq b) : Seq'0.t_seq b
  
  axiom concat'0_spec : forall self : Seq'0.t_seq b, other : Seq'0.t_seq b . ([%#span10] inv'3 self)
   -> ([%#span11] inv'3 other)
   -> ([%#span14] inv'3 (concat'0 self other))
  && ([%#span13] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span12] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq (borrowed f)) (x : int) : borrowed f
  
  use seq.Seq
  
  function len'2 (self : Seq'0.t_seq (borrowed f)) : int
  
  axiom len'2_spec : forall self : Seq'0.t_seq (borrowed f) . ([%#span3] inv'8 self)  -> ([%#span4] len'2 self >= 0)
  
  predicate produces'0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : Map'0.t_map i b f) (visited : Seq'0.t_seq b) (succ : Map'0.t_map i b f)
    
   =
    [%#span20] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq'0.t_seq item'0 . inv'7 s
    /\ len'1 s = len'0 visited
    /\ produces'1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq'0.t_seq (borrowed f) . inv'8 fs
    /\ len'2 fs = len'0 visited
    /\ (forall i : int . 1 <= i /\ i < len'2 fs  ->  ^ index_logic'1 fs (i - 1) =  * index_logic'1 fs i)
    /\ (if len'0 visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * index_logic'1 fs 0 = C05Map_Map_Type.map_func self
      /\  ^ index_logic'1 fs (len'0 visited - 1) = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < len'0 visited
     -> unnest'0 (C05Map_Map_Type.map_func self) ( * index_logic'1 fs i)
    /\ precondition'0 ( * index_logic'1 fs i) (index_logic'2 s i)
    /\ postcondition_mut'0 (index_logic'1 fs i) (index_logic'2 s i) (index_logic'0 visited i))))
  
  use seq.Seq
  
  function singleton'0 (v : b) : Seq'0.t_seq b
  
  axiom singleton'0_spec : forall v : b . ([%#span5] inv'4 v)
   -> ([%#span8] inv'3 (singleton'0 v))
  && ([%#span7] index_logic'0 (singleton'0 v) 0 = v) && ([%#span6] len'0 (singleton'0 v) = 1)
  
  predicate produces_one'0 [#"../05_map.rs" 117 4 117 57] (self : Map'0.t_map i b f) (visited : b) (succ : Map'0.t_map i b f)
    
   =
    [%#span25] exists f : borrowed f . inv'5 f
    /\  * f = C05Map_Map_Type.map_func self
    /\  ^ f = C05Map_Map_Type.map_func succ
    /\ (exists e : item'0 . inv'6 e
    /\ produces'1 (C05Map_Map_Type.map_iter self) (singleton'1 e) (C05Map_Map_Type.map_iter succ)
    /\ precondition'0 ( * f) (e) /\ postcondition_mut'0 f (e) visited)
  
  axiom produces_one'0_spec : forall self : Map'0.t_map i b f, visited : b, succ : Map'0.t_map i b f . ([%#span21] inv'2 self)
   -> ([%#span22] inv'4 visited)
   -> ([%#span23] inv'2 succ)
   -> ([%#span24] produces_one'0 self visited succ = produces'0 self (singleton'0 visited) succ)
  
  predicate completed'0 [#"../05_map.rs" 22 4 22 35] (self : borrowed (Map'0.t_map i b f)) =
    [%#span26] completed'1 (Borrow.borrow_logic (C05Map_Map_Type.map_iter ( * self)) (C05Map_Map_Type.map_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C05Map_Map_Type.map_func ( * self) = C05Map_Map_Type.map_func ( ^ self)
  
  goal next_refn : [%#s05_map0] forall self : borrowed (Map'0.t_map i b f) . inv'0 self
   -> inv'0 self
  /\ (forall result : Option'0.t_option b . inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces_one'0 ( * self) v ( ^ self)
    end
   -> inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
    end)
  
  goal produces_trans_refn : [%#s05_map1] forall a : Map'0.t_map i b f . forall ab : Seq'0.t_seq b . forall b : Map'0.t_map i b f . forall bc : Seq'0.t_seq b . forall c : Map'0.t_map i b f . inv'2 c
  /\ inv'3 bc /\ inv'2 b /\ inv'3 ab /\ inv'2 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'2 c
  /\ inv'3 bc
  /\ inv'2 b
  /\ inv'3 ab
  /\ inv'2 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (concat'0 ab bc) c  -> produces'0 a (concat'0 ab bc) c)
  
  goal produces_refl_refn : [%#s05_map2] forall self : Map'0.t_map i b f . inv'2 self
   -> inv'2 self
  /\ (forall result : () . produces'0 self (empty'0 : Seq'0.t_seq b) self
   -> produces'0 self (empty'1 : Seq'0.t_seq b) self)
end
module C05Map_Impl2
  type i
  
  type b
  
  type f
end
