<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.6.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.12.4" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="coma" proved="true">
<path name=".."/><path name="03_std_iterators.coma"/>
<theory name="M_03_std_iterators__slice_iter" proved="true">
 <goal name="vc_slice_iter&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.278196" steps="2183"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__vec_iter" proved="true">
 <goal name="vc_vec_iter&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.280195" steps="2100"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__all_zero" proved="true">
 <goal name="vc_all_zero&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.288786" steps="1991"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__skip_take" proved="true">
 <goal name="vc_skip_take&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.040673" steps="274"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__counter" proved="true">
 <goal name="vc_closure0&#39;0" proved="true">
 <proof prover="5" timelimit="5"><result status="valid" time="0.025980" steps="22553"/></proof>
 </goal>
 <goal name="vc_counter&#39;0" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_counter&#39;0.0" expl="deref &#39;self&#39; type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.071451" steps="57790"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.1" expl="iter &#39;self&#39; type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.058705" steps="5729"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.2" expl="map_inv &#39;self&#39; type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.027072" steps="63559"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.3" expl="map_inv &#39;func&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.015260" steps="13"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.4" expl="map_inv requires #0" proved="true">
  <proof prover="2"><result status="valid" time="0.017393" steps="46"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.5" expl="map_inv requires #1" proved="true">
  <proof prover="2"><result status="valid" time="0.013632" steps="452"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.6" expl="map_inv requires #2" proved="true">
  <proof prover="2"><result status="valid" time="0.013694" steps="203"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.7" expl="collect &#39;self&#39; type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.088457" steps="5633"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.663910" steps="483"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.9" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.120575" steps="207805"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.10" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.110145" steps="228509"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_03_std_iterators__sum_range" proved="true">
 <goal name="vc_sum_range&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.197514" steps="1181"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__enumerate_range" proved="true">
 <goal name="vc_enumerate_range&#39;0" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_enumerate_range&#39;0.0" expl="enumerate &#39;self&#39; type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.039798" steps="4057"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.1" expl="enumerate requires #0" proved="true">
  <proof prover="4"><result status="valid" time="0.018426" steps="7990"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.2" expl="enumerate requires #1" proved="true">
  <proof prover="4"><result status="valid" time="0.036495" steps="8221"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.3" expl="into_iter &#39;self&#39; type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.014045" steps="3280"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.4" expl="into_iter requires" proved="true">
  <proof prover="4"><result status="valid" time="0.014189" steps="3279"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.5" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.022592" steps="4250"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.6" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.033681" steps="3372"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.7" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.032130" steps="5078"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.8" expl="loop invariant" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.010382" steps="37"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.9" proved="true">
  <proof prover="1"><result status="valid" time="0.051974" steps="7892"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.10" proved="true">
  <proof prover="4" timelimit="5"><result status="valid" time="0.057671" steps="4441"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.11" expl="next &#39;self&#39; type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.034465" steps="8826"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.12" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.044430" steps="12503"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.13" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.021874" steps="6744"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.14" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.030398" steps="4977"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.15" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.030215" steps="8036"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.16" expl="loop invariant" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.136406" steps="755"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.17" proved="true">
  <proof prover="4"><result status="valid" time="0.027799" steps="5412"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_03_std_iterators__my_reverse" proved="true">
 <goal name="vc_my_reverse&#39;0" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_my_reverse&#39;0.0" expl="len &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.026958" steps="11"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.1" expl="division by zero" proved="true">
  <proof prover="2"><result status="valid" time="0.020352" steps="12"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.2" expl="division by zero" proved="true">
  <proof prover="5"><result status="valid" time="0.012192" steps="8763"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.3" expl="integer overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.021821" steps="32"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.4" expl="division by zero" proved="true">
  <proof prover="2"><result status="valid" time="0.022519" steps="19"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.5" expl="division by zero" proved="true">
  <proof prover="5"><result status="valid" time="0.012041" steps="9426"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.6" expl="integer overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.022492" steps="33"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.7" expl="zip &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.022901" steps="39"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.8" expl="zip &#39;other&#39; type invariant" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.011733" steps="43"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.9" expl="zip requires" proved="true">
  <proof prover="2"><result status="valid" time="0.021634" steps="26"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.10" expl="into_iter &#39;self&#39; type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.060152" steps="25657"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.11" expl="into_iter requires" proved="true">
  <proof prover="2"><result status="valid" time="0.020027" steps="27"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.12" expl="mut invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.025686" steps="47"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.13" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.029814" steps="51"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.14" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.037229" steps="35"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.15" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.027823" steps="55"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.16" expl="loop invariant #0" proved="true">
  <proof prover="1"><result status="valid" time="0.070140" steps="26777"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.17" expl="loop invariant #1" proved="true">
  <proof prover="4" timelimit="5"><result status="valid" time="0.283063" steps="27179"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.18" expl="loop invariant #2" proved="true">
  <proof prover="1"><result status="valid" time="0.222316" steps="36077"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.19" expl="loop invariant #3" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.016614" steps="128"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.20" expl="next &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.014470" steps="66"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.21" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.434929" steps="2967"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.22" expl="my_reverse ensures" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.466779" steps="3360"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.23" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.647021" steps="4883"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.24" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.049307" steps="241486"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.25" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.055993" steps="241852"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.26" expl="swap &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.022920" steps="105"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.27" expl="swap requires #0" proved="true">
  <proof prover="5"><result status="valid" time="0.029755" steps="249669"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.28" expl="swap requires #1" proved="true">
  <proof prover="2"><result status="valid" time="0.020454" steps="139"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.29" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.477752" steps="72208"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.30" expl="mut invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.087417" steps="68"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.31" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.032337" steps="119"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.32" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.024318" steps="121"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.33" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.145202" steps="410"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.34" expl="loop invariant #0" proved="true">
  <proof prover="2"><result status="valid" time="0.023344" steps="135"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.35" expl="loop invariant #1" proved="true">
  <proof prover="1"><result status="valid" time="0.563155" steps="120625"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.36" expl="loop invariant #2" proved="true">
  <proof prover="1"><result status="valid" time="1.728201" steps="672396"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.37" expl="loop invariant #3" proved="true">
  <proof prover="1"><result status="valid" time="1.262998" steps="381062"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.38" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.028494" steps="74"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
