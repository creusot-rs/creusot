<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="2" name="Alt-Ergo" version="2.6.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.12.4" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="coma" proved="true">
<path name=".."/><path name="03_std_iterators.coma"/>
<theory name="M_03_std_iterators__slice_iter" proved="true">
 <goal name="vc_slice_iter&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.062677" steps="333"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__vec_iter" proved="true">
 <goal name="vc_vec_iter&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.079181" steps="473"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__all_zero" proved="true">
 <goal name="vc_all_zero&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.079224" steps="465"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__skip_take" proved="true">
 <goal name="vc_skip_take&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.040673" steps="326"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__counter" proved="true">
 <goal name="vc_closure0&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.050066" steps="193"/></proof>
 </goal>
 <goal name="vc_counter&#39;0" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_counter&#39;0.0" expl="deref &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.038972" steps="37"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.1" expl="iter &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.036601" steps="24"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.2" expl="map_inv &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.041890" steps="41"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.3" expl="map_inv &#39;func&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.015260" steps="46"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.4" expl="map_inv requires #0" proved="true">
  <proof prover="2"><result status="valid" time="0.017393" steps="116"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.5" expl="map_inv requires #1" proved="true">
  <proof prover="2"><result status="valid" time="0.013632" steps="157"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.6" expl="map_inv requires #2" proved="true">
  <proof prover="2"><result status="valid" time="0.013694" steps="299"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.7" expl="collect &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.047977" steps="34"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.906988" steps="539"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.984409" steps="1041"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.994833" steps="1046"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_03_std_iterators__sum_range" proved="true">
 <goal name="vc_sum_range&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="1.358613" steps="13356"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__enumerate_range" proved="true">
 <goal name="vc_enumerate_range&#39;0" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_enumerate_range&#39;0.0" expl="enumerate &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.037096" steps="29"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.1" expl="enumerate requires #0" proved="true">
  <proof prover="2"><result status="valid" time="0.049398" steps="140"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.2" expl="enumerate requires #1" proved="true">
  <proof prover="2"><result status="valid" time="0.042369" steps="55"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.3" expl="into_iter &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.037024" steps="24"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.4" expl="into_iter requires" proved="true">
  <proof prover="2"><result status="valid" time="0.038526" steps="24"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.5" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.040847" steps="36"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.6" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.038586" steps="28"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.7" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.041617" steps="42"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.8" expl="loop invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.010382" steps="55"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.9" proved="true">
  <proof prover="2"><result status="valid" time="0.037224" steps="30"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.10" proved="true">
  <proof prover="2"><result status="valid" time="0.037545" steps="32"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.11" expl="next &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.041842" steps="52"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.12" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.042840" steps="53"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.13" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.043639" steps="65"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.14" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.038118" steps="48"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.15" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.047617" steps="170"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.16" expl="loop invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.136406" steps="761"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.17" proved="true">
  <proof prover="2"><result status="valid" time="0.043611" steps="58"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_03_std_iterators__my_reverse" proved="true">
 <goal name="vc_my_reverse&#39;0" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_my_reverse&#39;0.0" expl="len &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.026958" steps="46"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.1" expl="division by zero" proved="true">
  <proof prover="2"><result status="valid" time="0.020352" steps="25"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.2" expl="division by zero" proved="true">
  <proof prover="2"><result status="valid" time="0.044066" steps="27"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.3" expl="division by zero" proved="true">
  <proof prover="2"><result status="valid" time="0.022519" steps="30"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.4" expl="division by zero" proved="true">
  <proof prover="2"><result status="valid" time="0.049971" steps="31"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.5" expl="zip &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.022901" steps="72"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.6" expl="zip &#39;other&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.011733" steps="34"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.7" expl="zip requires" proved="true">
  <proof prover="2"><result status="valid" time="0.021634" steps="34"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.8" expl="into_iter &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.045135" steps="36"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.9" expl="into_iter requires" proved="true">
  <proof prover="2"><result status="valid" time="0.020027" steps="36"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.10" expl="mut invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.025686" steps="77"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.11" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.029814" steps="82"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.12" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.037229" steps="44"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.13" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.145202" steps="88"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.14" expl="loop invariant #0" proved="true">
  <proof prover="2"><result status="valid" time="0.023344" steps="91"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.15" expl="loop invariant #1" proved="true">
  <proof prover="2"><result status="valid" time="0.045119" steps="152"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.16" expl="loop invariant #2" proved="true">
  <proof prover="2"><result status="valid" time="0.046006" steps="156"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.17" expl="loop invariant #3" proved="true">
  <proof prover="2"><result status="valid" time="0.016614" steps="160"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.18" expl="next &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.014470" steps="98"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.19" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.282047" steps="1895"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.20" expl="my_reverse ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.303272" steps="1777"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.21" proved="true">
  <proof prover="2"><result status="valid" time="0.244510" steps="1610"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.22" expl="arithmetic overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.298690" steps="1774"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.23" expl="arithmetic overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.328481" steps="2175"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.24" expl="swap &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.022920" steps="159"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.25" expl="swap requires #0" proved="true">
  <proof prover="2"><result status="valid" time="0.731837" steps="3910"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.26" expl="swap requires #1" proved="true">
  <proof prover="2"><result status="valid" time="0.693930" steps="3547"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.27" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.156558" steps="221426"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.28" expl="mut invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.087417" steps="80"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.29" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.032337" steps="183"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.30" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.024318" steps="186"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.31" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.196134" steps="841"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.32" expl="loop invariant #0" proved="true">
  <proof prover="2"><result status="valid" time="0.084388" steps="204"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.33" expl="loop invariant #1" proved="true">
  <proof prover="2"><result status="valid" time="0.726275" steps="3740"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.34" expl="loop invariant #2" proved="true">
  <proof prover="5"><result status="valid" time="0.142610" steps="223813"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.35" expl="loop invariant #3" proved="true">
  <proof prover="5"><result status="valid" time="0.139739" steps="224310"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.36" proved="true">
  <proof prover="2"><result status="valid" time="0.028494" steps="103"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
