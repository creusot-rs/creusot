<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.6.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.12.4" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="coma" proved="true">
<path name=".."/><path name="03_std_iterators.coma"/>
<theory name="M_03_std_iterators__slice_iter" proved="true">
 <goal name="vc_slice_iter&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.278196" steps="2183"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__vec_iter" proved="true">
 <goal name="vc_vec_iter&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.280195" steps="2100"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__all_zero" proved="true">
 <goal name="vc_all_zero&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.288786" steps="1718"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__skip_take" proved="true">
 <goal name="vc_skip_take&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.040673" steps="246"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__counter" proved="true">
 <goal name="vc_closure0&#39;0" proved="true">
 <proof prover="5" timelimit="5"><result status="valid" time="0.025980" steps="22553"/></proof>
 </goal>
 <goal name="vc_counter&#39;0" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_counter&#39;0.0" expl="deref &#39;self&#39; type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.071451" steps="53600"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.1" expl="iter &#39;self&#39; type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.058705" steps="5372"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.2" expl="map_inv &#39;self&#39; type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.027072" steps="59010"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.3" expl="map_inv &#39;func&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.015260" steps="13"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.4" expl="map_inv requires #0" proved="true">
  <proof prover="2"><result status="valid" time="0.017393" steps="43"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.5" expl="map_inv requires #1" proved="true">
  <proof prover="2"><result status="valid" time="0.126074" steps="431"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.6" expl="map_inv requires #2" proved="true">
  <proof prover="2"><result status="valid" time="0.013694" steps="200"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.7" expl="collect &#39;self&#39; type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.088457" steps="5276"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.107377" steps="489"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.9" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.120575" steps="202372"/></proof>
  </goal>
  <goal name="vc_counter&#39;0.10" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.268166" steps="221618"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_03_std_iterators__sum_range" proved="true">
 <goal name="vc_sum_range&#39;0" proved="true">
 <proof prover="2"><result status="valid" time="0.197514" steps="947"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__enumerate_range" proved="true">
 <goal name="vc_enumerate_range&#39;0" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_enumerate_range&#39;0.0" expl="enumerate &#39;self&#39; type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.039798" steps="3879"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.1" expl="enumerate requires #0" proved="true">
  <proof prover="4"><result status="valid" time="0.148213" steps="7332"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.2" expl="enumerate requires #1" proved="true">
  <proof prover="4"><result status="valid" time="0.156897" steps="7758"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.3" expl="into_iter &#39;self&#39; type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.014045" steps="3144"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.4" expl="into_iter requires" proved="true">
  <proof prover="4"><result status="valid" time="0.014189" steps="3143"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.5" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.022592" steps="4072"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.6" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.033681" steps="3236"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.7" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.032130" steps="4864"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.8" expl="loop invariant" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.010382" steps="34"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.9" proved="true">
  <proof prover="4" timelimit="5"><result status="valid" time="0.057671" steps="4300"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.10" proved="true">
  <proof prover="1"><result status="valid" time="0.051974" steps="7694"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.11" expl="next &#39;self&#39; type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.158179" steps="8227"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.12" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.154868" steps="11783"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.13" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.021874" steps="6519"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.14" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.030398" steps="4831"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.15" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.030215" steps="7717"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.16" expl="loop invariant" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.136406" steps="540"/></proof>
  </goal>
  <goal name="vc_enumerate_range&#39;0.17" proved="true">
  <proof prover="4"><result status="valid" time="0.027799" steps="5264"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_03_std_iterators__my_reverse" proved="true">
 <goal name="vc_my_reverse&#39;0" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_my_reverse&#39;0.0" expl="len &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.026958" steps="11"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.1" expl="division by zero" proved="true">
  <proof prover="2"><result status="valid" time="0.020352" steps="12"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.2" expl="division by zero" proved="true">
  <proof prover="5"><result status="valid" time="0.012192" steps="8657"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.3" expl="integer overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.021821" steps="34"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.4" expl="division by zero" proved="true">
  <proof prover="2"><result status="valid" time="0.022519" steps="19"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.5" expl="division by zero" proved="true">
  <proof prover="5"><result status="valid" time="0.012041" steps="9320"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.6" expl="integer overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.022492" steps="33"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.7" expl="zip &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.022901" steps="39"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.8" expl="zip &#39;other&#39; type invariant" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.011733" steps="43"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.9" expl="zip requires" proved="true">
  <proof prover="2"><result status="valid" time="0.021634" steps="26"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.10" expl="into_iter &#39;self&#39; type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.060152" steps="25431"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.11" expl="into_iter requires" proved="true">
  <proof prover="2"><result status="valid" time="0.020027" steps="27"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.12" expl="mut invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.025686" steps="47"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.13" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.029814" steps="51"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.14" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.037229" steps="35"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.15" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.027823" steps="111"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.16" expl="loop invariant #0" proved="true">
  <proof prover="1"><result status="valid" time="0.070140" steps="26549"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.17" expl="loop invariant #1" proved="true">
  <proof prover="4" timelimit="5"><result status="valid" time="0.283063" steps="26586"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.18" expl="loop invariant #2" proved="true">
  <proof prover="1"><result status="valid" time="0.365853" steps="35860"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.19" expl="loop invariant #3" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.016614" steps="126"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.20" expl="next &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.014470" steps="66"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.21" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.434929" steps="1886"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.22" expl="my_reverse ensures" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.466779" steps="1409"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.23" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.423570" steps="1557"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.24" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.215423" steps="246010"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.25" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.180692" steps="246786"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.26" expl="swap &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.022920" steps="105"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.27" expl="swap requires #0" proved="true">
  <proof prover="5"><result status="valid" time="0.138991" steps="242233"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.28" expl="swap requires #1" proved="true">
  <proof prover="2"><result status="valid" time="0.020454" steps="139"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.29" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.165940" steps="265406"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.30" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.544236" steps="57899"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.31" expl="assertion" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.142825" steps="551"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.32" expl="mut invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.087417" steps="75"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.33" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.032337" steps="126"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.34" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.024318" steps="128"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.35" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.145202" steps="394"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.36" expl="loop invariant #0" proved="true">
  <proof prover="2"><result status="valid" time="0.023344" steps="138"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.37" expl="loop invariant #1" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.871091" steps="2295863"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.38" expl="loop invariant #2" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_my_reverse&#39;0.38.0" expl="loop invariant #2" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="vc_my_reverse&#39;0.38.0.0" expl="loop invariant #2" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="vc_my_reverse&#39;0.38.0.0.0" expl="loop invariant #2" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="vc_my_reverse&#39;0.38.0.0.0.0" expl="loop invariant #2" proved="true">
      <proof prover="1"><result status="valid" time="1.311244" steps="148639"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="vc_my_reverse&#39;0.39" expl="loop invariant #3" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.596964" steps="2392"/></proof>
  </goal>
  <goal name="vc_my_reverse&#39;0.40" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.028494" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
