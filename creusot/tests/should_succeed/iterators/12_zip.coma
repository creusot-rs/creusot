
module T_12_zip__Zip
  type t_Zip 'a 'b =
    | C_Zip 'a 'b
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Zip < 'a > < 'b > (input:t_Zip 'a 'b) (ret  (a:'a) (b:'b))= any
    [ good (a:'a) (b:'b)-> {C_Zip a b = input} (! ret {a} {b}) | bad (a:'a) (b:'b)-> {C_Zip a b <> input} {false} any ]
    
  
  function t_Zip__a (self : t_Zip 'a 'b) : 'a =
    match self with
      | C_Zip a _ -> a
      end
  
  function t_Zip__b (self : t_Zip 'a 'b) : 'b =
    match self with
      | C_Zip _ a -> a
      end
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module T_alloc__boxed__Box
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_Box 't 'a =
    | C_Box (Unique'0.t_Unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module M_12_zip__qy123zimplqy35z0qy125z__produces_refl__Impl
  type a
  
  type b
  
  let%span s12_zip0 = "../12_zip.rs" 41 15 41 24
  
  let%span s12_zip1 = "../12_zip.rs" 42 14 42 45
  
  let%span span2 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span4 = "../common.rs" 19 15 19 21
  
  let%span span5 = "../common.rs" 20 15 20 21
  
  let%span span6 = "../common.rs" 21 15 21 21
  
  let%span span7 = "../common.rs" 22 15 22 32
  
  let%span span8 = "../common.rs" 23 15 23 32
  
  let%span span9 = "../common.rs" 24 14 24 42
  
  let%span span10 = "../common.rs" 14 15 14 24
  
  let%span span11 = "../common.rs" 15 14 15 45
  
  let%span span12 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span13 = "../12_zip.rs" 30 8 36 9
  
  type t_Item'1
  
  predicate invariant'8 (self : t_Item'1)
  
  predicate inv'8 (_1 : t_Item'1)
  
  axiom inv'8 : forall x : t_Item'1 . inv'8 x = true
  
  type t_Item'0
  
  predicate invariant'7 (self : t_Item'0)
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv'7 : forall x : t_Item'0 . inv'7 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'6 (self : t_Item'1) =
    [%#span2] inv'8 self
  
  predicate inv'6 (_1 : t_Item'1)
  
  axiom inv'6 : forall x : t_Item'1 . inv'6 x = true
  
  predicate invariant'5 (self : t_Item'0) =
    [%#span2] inv'7 self
  
  predicate inv'5 (_1 : t_Item'0)
  
  axiom inv'5 : forall x : t_Item'0 . inv'5 x = true
  
  predicate invariant'4 (self : b)
  
  predicate inv'4 (_1 : b)
  
  axiom inv'4 : forall x : b . inv'4 x = true
  
  predicate invariant'3 (self : a)
  
  predicate inv'3 (_1 : a)
  
  axiom inv'3 : forall x : a . inv'3 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t_Item'1) =
    [%#span3] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'1)
  
  axiom inv'2 : forall x : Seq.seq t_Item'1 . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#span3] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv'1 : forall x : Seq.seq t_Item'0 . inv'1 x = true
  
  use seq.Seq
  
  predicate produces'2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq t_Item'1) (o : b)
  
  function produces_trans'1 [#"../common.rs" 25 4 25 91] (a : b) (ab : Seq.seq t_Item'1) (b : b) (bc : Seq.seq t_Item'1) (c : b) : ()
    
  
  axiom produces_trans'1_spec : forall a : b, ab : Seq.seq t_Item'1, b : b, bc : Seq.seq t_Item'1, c : b . ([%#span4] inv'4 a)
   -> ([%#span5] inv'4 b)
   -> ([%#span6] inv'4 c)
   -> ([%#span7] produces'2 a ab b)  -> ([%#span8] produces'2 b bc c)  -> ([%#span9] produces'2 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"../common.rs" 16 4 16 27] (self : b) : ()
  
  axiom produces_refl'1_spec : forall self : b . ([%#span10] inv'4 self)
   -> ([%#span11] produces'2 self (Seq.empty  : Seq.seq t_Item'1) self)
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq t_Item'0) (o : a)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : a) (ab : Seq.seq t_Item'0) (b : a) (bc : Seq.seq t_Item'0) (c : a) : ()
    
  
  axiom produces_trans'0_spec : forall a : a, ab : Seq.seq t_Item'0, b : a, bc : Seq.seq t_Item'0, c : a . ([%#span4] inv'3 a)
   -> ([%#span5] inv'3 b)
   -> ([%#span6] inv'3 c)
   -> ([%#span7] produces'1 a ab b)  -> ([%#span8] produces'1 b bc c)  -> ([%#span9] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : a) : ()
  
  axiom produces_refl'0_spec : forall self : a . ([%#span10] inv'3 self)
   -> ([%#span11] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use T_12_zip__Zip as Zip'0
  
  predicate invariant'0 (self : Zip'0.t_Zip a b) =
    [%#span12] true
  
  predicate inv'0 (_1 : Zip'0.t_Zip a b)
  
  axiom inv'0 : forall x : Zip'0.t_Zip a b . inv'0 x = true
  
  use T_12_zip__Zip as T_12_zip__Zip
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../12_zip.rs" 29 4 29 65] (self : Zip'0.t_Zip a b) (visited : Seq.seq (t_Item'0, t_Item'1)) (tl : Zip'0.t_Zip a b)
    
   =
    [%#span13] exists p1 : Seq.seq t_Item'0, p2 : Seq.seq t_Item'1 . inv'1 p1
    /\ inv'2 p2
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 (T_12_zip__Zip.t_Zip__a self) p1 (T_12_zip__Zip.t_Zip__a tl)
    /\ produces'2 (T_12_zip__Zip.t_Zip__b self) p2 (T_12_zip__Zip.t_Zip__b tl)
  
  use seq.Seq
  
  constant self  : Zip'0.t_Zip a b
  
  function produces_refl [#"../12_zip.rs" 43 4 43 26] (self : Zip'0.t_Zip a b) : ()
  
  goal vc_produces_refl : ([%#s12_zip0] inv'0 self)
   -> ([%#s12_zip1] produces'0 self (Seq.empty  : Seq.seq (t_Item'0, t_Item'1)) self)
end
module M_12_zip__qy123zimplqy35z0qy125z__produces_trans__Impl
  type a
  
  type b
  
  let%span s12_zip0 = "../12_zip.rs" 47 15 47 21
  
  let%span s12_zip1 = "../12_zip.rs" 48 15 48 21
  
  let%span s12_zip2 = "../12_zip.rs" 49 15 49 21
  
  let%span s12_zip3 = "../12_zip.rs" 50 15 50 32
  
  let%span s12_zip4 = "../12_zip.rs" 51 15 51 32
  
  let%span s12_zip5 = "../12_zip.rs" 52 14 52 42
  
  let%span span6 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span8 = "../common.rs" 19 15 19 21
  
  let%span span9 = "../common.rs" 20 15 20 21
  
  let%span span10 = "../common.rs" 21 15 21 21
  
  let%span span11 = "../common.rs" 22 15 22 32
  
  let%span span12 = "../common.rs" 23 15 23 32
  
  let%span span13 = "../common.rs" 24 14 24 42
  
  let%span span14 = "../common.rs" 14 15 14 24
  
  let%span span15 = "../common.rs" 15 14 15 45
  
  let%span span16 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span17 = "../12_zip.rs" 30 8 36 9
  
  type t_Item'1
  
  predicate invariant'8 (self : t_Item'1)
  
  predicate inv'8 (_1 : t_Item'1)
  
  axiom inv'8 : forall x : t_Item'1 . inv'8 x = true
  
  type t_Item'0
  
  predicate invariant'7 (self : t_Item'0)
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv'7 : forall x : t_Item'0 . inv'7 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'6 (self : t_Item'1) =
    [%#span6] inv'8 self
  
  predicate inv'6 (_1 : t_Item'1)
  
  axiom inv'6 : forall x : t_Item'1 . inv'6 x = true
  
  predicate invariant'5 (self : t_Item'0) =
    [%#span6] inv'7 self
  
  predicate inv'5 (_1 : t_Item'0)
  
  axiom inv'5 : forall x : t_Item'0 . inv'5 x = true
  
  predicate invariant'4 (self : b)
  
  predicate inv'4 (_1 : b)
  
  axiom inv'4 : forall x : b . inv'4 x = true
  
  predicate invariant'3 (self : a)
  
  predicate inv'3 (_1 : a)
  
  axiom inv'3 : forall x : a . inv'3 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t_Item'1) =
    [%#span7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'1)
  
  axiom inv'2 : forall x : Seq.seq t_Item'1 . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#span7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv'1 : forall x : Seq.seq t_Item'0 . inv'1 x = true
  
  use seq.Seq
  
  predicate produces'2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq t_Item'1) (o : b)
  
  function produces_trans'1 [#"../common.rs" 25 4 25 91] (a : b) (ab : Seq.seq t_Item'1) (b : b) (bc : Seq.seq t_Item'1) (c : b) : ()
    
  
  axiom produces_trans'1_spec : forall a : b, ab : Seq.seq t_Item'1, b : b, bc : Seq.seq t_Item'1, c : b . ([%#span8] inv'4 a)
   -> ([%#span9] inv'4 b)
   -> ([%#span10] inv'4 c)
   -> ([%#span11] produces'2 a ab b)  -> ([%#span12] produces'2 b bc c)  -> ([%#span13] produces'2 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"../common.rs" 16 4 16 27] (self : b) : ()
  
  axiom produces_refl'1_spec : forall self : b . ([%#span14] inv'4 self)
   -> ([%#span15] produces'2 self (Seq.empty  : Seq.seq t_Item'1) self)
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq t_Item'0) (o : a)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : a) (ab : Seq.seq t_Item'0) (b : a) (bc : Seq.seq t_Item'0) (c : a) : ()
    
  
  axiom produces_trans'0_spec : forall a : a, ab : Seq.seq t_Item'0, b : a, bc : Seq.seq t_Item'0, c : a . ([%#span8] inv'3 a)
   -> ([%#span9] inv'3 b)
   -> ([%#span10] inv'3 c)
   -> ([%#span11] produces'1 a ab b)  -> ([%#span12] produces'1 b bc c)  -> ([%#span13] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : a) : ()
  
  axiom produces_refl'0_spec : forall self : a . ([%#span14] inv'3 self)
   -> ([%#span15] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use T_12_zip__Zip as Zip'0
  
  predicate invariant'0 (self : Zip'0.t_Zip a b) =
    [%#span16] true
  
  predicate inv'0 (_1 : Zip'0.t_Zip a b)
  
  axiom inv'0 : forall x : Zip'0.t_Zip a b . inv'0 x = true
  
  use seq.Seq
  
  use T_12_zip__Zip as T_12_zip__Zip
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../12_zip.rs" 29 4 29 65] (self : Zip'0.t_Zip a b) (visited : Seq.seq (t_Item'0, t_Item'1)) (tl : Zip'0.t_Zip a b)
    
   =
    [%#span17] exists p1 : Seq.seq t_Item'0, p2 : Seq.seq t_Item'1 . inv'1 p1
    /\ inv'2 p2
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 (T_12_zip__Zip.t_Zip__a self) p1 (T_12_zip__Zip.t_Zip__a tl)
    /\ produces'2 (T_12_zip__Zip.t_Zip__b self) p2 (T_12_zip__Zip.t_Zip__b tl)
  
  constant a  : Zip'0.t_Zip a b
  
  constant ab  : Seq.seq (t_Item'0, t_Item'1)
  
  constant b  : Zip'0.t_Zip a b
  
  constant bc  : Seq.seq (t_Item'0, t_Item'1)
  
  constant c  : Zip'0.t_Zip a b
  
  function produces_trans [#"../12_zip.rs" 53 4 53 90] (a : Zip'0.t_Zip a b) (ab : Seq.seq (t_Item'0, t_Item'1)) (b : Zip'0.t_Zip a b) (bc : Seq.seq (t_Item'0, t_Item'1)) (c : Zip'0.t_Zip a b) : ()
    
  
  goal vc_produces_trans : ([%#s12_zip4] produces'0 b bc c)
   -> ([%#s12_zip3] produces'0 a ab b)
   -> ([%#s12_zip2] inv'0 c)
   -> ([%#s12_zip1] inv'0 b)  -> ([%#s12_zip0] inv'0 a)  -> ([%#s12_zip5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module M_12_zip__qy123zimplqy35z0qy125z__next
  type a
  
  type b
  
  let%span s12_zip0 = "../12_zip.rs" 59 17 59 21
  
  let%span s12_zip1 = "../12_zip.rs" 55 14 58 5
  
  let%span s12_zip2 = "../12_zip.rs" 59 26 59 44
  
  let%span span3 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span7 = "../common.rs" 19 15 19 21
  
  let%span span8 = "../common.rs" 20 15 20 21
  
  let%span span9 = "../common.rs" 21 15 21 21
  
  let%span span10 = "../common.rs" 22 15 22 32
  
  let%span span11 = "../common.rs" 23 15 23 32
  
  let%span span12 = "../common.rs" 24 14 24 42
  
  let%span span13 = "../common.rs" 14 15 14 24
  
  let%span span14 = "../common.rs" 15 14 15 45
  
  let%span span15 = "../12_zip.rs" 30 8 36 9
  
  let%span span16 = "../12_zip.rs" 21 13 23 67
  
  let%span span17 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span18 = "../common.rs" 31 17 31 21
  
  let%span span19 = "../common.rs" 27 14 30 5
  
  let%span span20 = "../common.rs" 31 26 31 44
  
  type t_Item'1
  
  predicate invariant'14 (self : t_Item'1)
  
  predicate inv'14 (_1 : t_Item'1)
  
  axiom inv'14 : forall x : t_Item'1 . inv'14 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'13 (self : t_Item'1) =
    [%#span3] inv'14 self
  
  predicate inv'13 (_1 : t_Item'1)
  
  axiom inv'13 : forall x : t_Item'1 . inv'13 x = true
  
  type t_Item'0
  
  predicate inv'3 (_1 : t_Item'0)
  
  predicate invariant'12 (self : t_Item'0) =
    [%#span3] inv'3 self
  
  predicate inv'12 (_1 : t_Item'0)
  
  axiom inv'12 : forall x : t_Item'0 . inv'12 x = true
  
  use T_12_zip__Zip as Zip'0
  
  predicate invariant'11 (self : Zip'0.t_Zip a b) =
    [%#span4] true
  
  predicate inv'11 (_1 : Zip'0.t_Zip a b)
  
  axiom inv'11 : forall x : Zip'0.t_Zip a b . inv'11 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'10 (self : Seq.seq t_Item'1) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'13 (Seq.get self i)
  
  predicate inv'10 (_1 : Seq.seq t_Item'1)
  
  axiom inv'10 : forall x : Seq.seq t_Item'1 . inv'10 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'9 (self : Seq.seq t_Item'0) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'12 (Seq.get self i)
  
  predicate inv'9 (_1 : Seq.seq t_Item'0)
  
  axiom inv'9 : forall x : Seq.seq t_Item'0 . inv'9 x = true
  
  use T_core__option__Option as Option'0
  
  predicate invariant'8 (self : Option'0.t_Option t_Item'1) =
    [%#span4] true
  
  predicate inv'8 (_1 : Option'0.t_Option t_Item'1)
  
  axiom inv'8 : forall x : Option'0.t_Option t_Item'1 . inv'8 x = true
  
  predicate inv'1 (_1 : b)
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : borrowed b) =
    [%#span6] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'7 (_1 : borrowed b)
  
  axiom inv'7 : forall x : borrowed b . inv'7 x = true
  
  predicate invariant'6 (self : Option'0.t_Option t_Item'0) =
    [%#span4] true
  
  predicate inv'6 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv'6 : forall x : Option'0.t_Option t_Item'0 . inv'6 x = true
  
  predicate inv'0 (_1 : a)
  
  predicate invariant'5 (self : borrowed a) =
    [%#span6] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'5 (_1 : borrowed a)
  
  axiom inv'5 : forall x : borrowed a . inv'5 x = true
  
  predicate invariant'4 (self : Option'0.t_Option (t_Item'0, t_Item'1)) =
    [%#span4] true
  
  predicate inv'4 (_1 : Option'0.t_Option (t_Item'0, t_Item'1))
  
  axiom inv'4 : forall x : Option'0.t_Option (t_Item'0, t_Item'1) . inv'4 x = true
  
  predicate invariant'3 (self : t_Item'0)
  
  axiom inv'3 : forall x : t_Item'0 . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Zip'0.t_Zip a b)) =
    [%#span6] inv'11 self.current /\ inv'11 self.final
  
  predicate inv'2 (_1 : borrowed (Zip'0.t_Zip a b))
  
  axiom inv'2 : forall x : borrowed (Zip'0.t_Zip a b) . inv'2 x = true
  
  use seq.Seq
  
  predicate produces'2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq t_Item'1) (o : b)
  
  function produces_trans'1 [#"../common.rs" 25 4 25 91] (a : b) (ab : Seq.seq t_Item'1) (b : b) (bc : Seq.seq t_Item'1) (c : b) : ()
    
  
  axiom produces_trans'1_spec : forall a : b, ab : Seq.seq t_Item'1, b : b, bc : Seq.seq t_Item'1, c : b . ([%#span7] inv'1 a)
   -> ([%#span8] inv'1 b)
   -> ([%#span9] inv'1 c)
   -> ([%#span10] produces'2 a ab b)  -> ([%#span11] produces'2 b bc c)  -> ([%#span12] produces'2 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"../common.rs" 16 4 16 27] (self : b) : ()
  
  axiom produces_refl'1_spec : forall self : b . ([%#span13] inv'1 self)
   -> ([%#span14] produces'2 self (Seq.empty  : Seq.seq t_Item'1) self)
  
  predicate invariant'1 (self : b)
  
  axiom inv'1 : forall x : b . inv'1 x = true
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq t_Item'0) (o : a)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : a) (ab : Seq.seq t_Item'0) (b : a) (bc : Seq.seq t_Item'0) (c : a) : ()
    
  
  axiom produces_trans'0_spec : forall a : a, ab : Seq.seq t_Item'0, b : a, bc : Seq.seq t_Item'0, c : a . ([%#span7] inv'0 a)
   -> ([%#span8] inv'0 b)
   -> ([%#span9] inv'0 c)
   -> ([%#span10] produces'1 a ab b)  -> ([%#span11] produces'1 b bc c)  -> ([%#span12] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : a) : ()
  
  axiom produces_refl'0_spec : forall self : a . ([%#span13] inv'0 self)
   -> ([%#span14] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate invariant'0 (self : a)
  
  axiom inv'0 : forall x : a . inv'0 x = true
  
  use T_12_zip__Zip as T_12_zip__Zip
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../12_zip.rs" 29 4 29 65] (self : Zip'0.t_Zip a b) (visited : Seq.seq (t_Item'0, t_Item'1)) (tl : Zip'0.t_Zip a b)
    
   =
    [%#span15] exists p1 : Seq.seq t_Item'0, p2 : Seq.seq t_Item'1 . inv'9 p1
    /\ inv'10 p2
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 (T_12_zip__Zip.t_Zip__a self) p1 (T_12_zip__Zip.t_Zip__a tl)
    /\ produces'2 (T_12_zip__Zip.t_Zip__b self) p2 (T_12_zip__Zip.t_Zip__b tl)
  
  use seq.Seq
  
  predicate completed'2 [#"../common.rs" 11 4 11 36] (self : borrowed b)
  
  predicate resolve'1 (self : t_Item'0)
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed a)
  
  predicate completed'0 [#"../12_zip.rs" 19 4 19 35] (self : borrowed (Zip'0.t_Zip a b)) =
    [%#span16] completed'1 (Borrow.borrow_logic (T_12_zip__Zip.t_Zip__a self.current) (T_12_zip__Zip.t_Zip__a self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ T_12_zip__Zip.t_Zip__b self.current = T_12_zip__Zip.t_Zip__b self.final
    \/ (exists x : t_Item'0 . inv'3 x
    /\ produces'1 (T_12_zip__Zip.t_Zip__a self.current) (Seq.singleton x) (T_12_zip__Zip.t_Zip__a self.final)
    /\ resolve'1 x
    /\ completed'2 (Borrow.borrow_logic (T_12_zip__Zip.t_Zip__b self.current) (T_12_zip__Zip.t_Zip__b self.final) (Borrow.inherit_id (Borrow.get_id self) 2)))
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (Zip'0.t_Zip a b)) =
    [%#span17] self.final = self.current
  
  use seq.Seq
  
  let rec next'1 (self:borrowed b) (return'  (ret:Option'0.t_Option t_Item'1))= {[@expl:precondition] [%#span18] inv'7 self}
    any
    [ return' (result:Option'0.t_Option t_Item'1)-> {[%#span20] inv'8 result}
      {[%#span19] match result with
        | Option'0.C_None -> completed'2 self
        | Option'0.C_Some v -> produces'2 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  let rec next'0 (self:borrowed a) (return'  (ret:Option'0.t_Option t_Item'0))= {[@expl:precondition] [%#span18] inv'5 self}
    any
    [ return' (result:Option'0.t_Option t_Item'0)-> {[%#span20] inv'6 result}
      {[%#span19] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  let rec next (self:borrowed (Zip'0.t_Zip a b)) (return'  (ret:Option'0.t_Option (t_Item'0, t_Item'1)))= {[%#s12_zip0] inv'2 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Zip'0.t_Zip <a> <b> {self.current}
          (fun (ra'0:a) (rb'0:b) ->
            Borrow.borrow_final <a> {ra'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed a) ->
                 [ &_5 <- _ret' ] 
                Zip'0.t_Zip <a> <b> {self.current}
                  (fun (l_a'0:a) (l_b'0:b) ->  [ &self <- { self with current = Zip'0.C_Zip _5.final l_b'0 ; } ] s1)))
      | s1 = -{inv'0 _5.final}- s2
      | s2 = next'0 {_5} (fun (_ret':Option'0.t_Option t_Item'0) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = any [ br0 -> {_4 = Option'0.C_None } (! bb3) | br1 (a:t_Item'0)-> {_4 = Option'0.C_Some a} (! bb4) ] 
    | bb4 = s0
      [ s0 = Option'0.v_Some <t_Item'0> {_4} (fun (r0'0:t_Item'0) ->  [ &x1 <- r0'0 ] s1)
      | s1 =  [ &x <- x1 ] s2
      | s2 = bb6 ]
      
    | bb6 = bb7
    | bb7 = s0
      [ s0 = Zip'0.t_Zip <a> <b> {self.current}
          (fun (ra'0:a) (rb'0:b) ->
            Borrow.borrow_final <b> {rb'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed b) ->
                 [ &_11 <- _ret' ] 
                Zip'0.t_Zip <a> <b> {self.current}
                  (fun (l_a'0:a) (l_b'0:b) ->  [ &self <- { self with current = Zip'0.C_Zip l_a'0 _11.final ; } ] s1)))
      | s1 = -{inv'1 _11.final}- s2
      | s2 = next'1 {_11} (fun (_ret':Option'0.t_Option t_Item'1) ->  [ &_10 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'2 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = any [ br0 -> {_10 = Option'0.C_None } (! bb10) | br1 (a:t_Item'1)-> {_10 = Option'0.C_Some a} (! bb11) ]  ]
      
    | bb11 = s0
      [ s0 = Option'0.v_Some <t_Item'1> {_10} (fun (r0'0:t_Item'1) ->  [ &y1 <- r0'0 ] s1)
      | s1 =  [ &y <- y1 ] s2
      | s2 = bb13 ]
      
    | bb13 = bb14
    | bb14 = s0 [ s0 =  [ &_15 <- (x, y) ] s1 | s1 = bb15 ] 
    | bb15 = bb16
    | bb16 = s0 [ s0 =  [ &_0 <- Option'0.C_Some _15 ] s1 | s1 = bb17 ] 
    | bb17 = bb18
    | bb18 = bb19
    | bb19 = bb23
    | bb10 = s0 [ s0 = {[@expl:type invariant] inv'3 x} s1 | s1 = -{resolve'1 x}- s2 | s2 = bb12 ] 
    | bb12 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb20 ] 
    | bb20 = bb22
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'2 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb21 ] 
    | bb21 = bb22
    | bb22 = bb23
    | bb23 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option (t_Item'0, t_Item'1) = any_l ()
    | & self : borrowed (Zip'0.t_Zip a b) = self
    | & x : t_Item'0 = any_l ()
    | & _4 : Option'0.t_Option t_Item'0 = any_l ()
    | & _5 : borrowed a = any_l ()
    | & x1 : t_Item'0 = any_l ()
    | & y : t_Item'1 = any_l ()
    | & _10 : Option'0.t_Option t_Item'1 = any_l ()
    | & _11 : borrowed b = any_l ()
    | & y1 : t_Item'1 = any_l ()
    | & _15 : (t_Item'0, t_Item'1) = any_l () ]
    
    [ return' (result:Option'0.t_Option (t_Item'0, t_Item'1))-> {[@expl:postcondition] [%#s12_zip2] inv'4 result}
      {[@expl:postcondition] [%#s12_zip1] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_12_zip__qy123zimplqy35z0qy125z
  type a
  
  type b
  
  let%span s12_zip0 = "../12_zip.rs" 59 4 59 44
  
  let%span s12_zip1 = "../12_zip.rs" 43 4 43 26
  
  let%span s12_zip2 = "../12_zip.rs" 53 4 53 90
  
  let%span span3 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span7 = "../12_zip.rs" 30 8 36 9
  
  let%span span8 = "../12_zip.rs" 21 13 23 67
  
  type t_Item'1
  
  predicate invariant'8 (self : t_Item'1)
  
  predicate inv'8 (_1 : t_Item'1)
  
  axiom inv'8 : forall x : t_Item'1 . inv'8 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'7 (self : t_Item'1) =
    [%#span3] inv'8 self
  
  predicate inv'7 (_1 : t_Item'1)
  
  axiom inv'7 : forall x : t_Item'1 . inv'7 x = true
  
  type t_Item'0
  
  predicate inv'3 (_1 : t_Item'0)
  
  predicate invariant'6 (self : t_Item'0) =
    [%#span3] inv'3 self
  
  predicate inv'6 (_1 : t_Item'0)
  
  axiom inv'6 : forall x : t_Item'0 . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq t_Item'1) =
    [%#span4] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_Item'1)
  
  axiom inv'5 : forall x : Seq.seq t_Item'1 . inv'5 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq t_Item'0) =
    [%#span4] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'4 (_1 : Seq.seq t_Item'0)
  
  axiom inv'4 : forall x : Seq.seq t_Item'0 . inv'4 x = true
  
  predicate invariant'3 (self : t_Item'0)
  
  axiom inv'3 : forall x : t_Item'0 . inv'3 x = true
  
  use T_12_zip__Zip as Zip'0
  
  predicate invariant'2 (self : Zip'0.t_Zip a b) =
    [%#span5] true
  
  predicate inv'2 (_1 : Zip'0.t_Zip a b)
  
  axiom inv'2 : forall x : Zip'0.t_Zip a b . inv'2 x = true
  
  use T_core__option__Option as Option'0
  
  predicate invariant'1 (self : Option'0.t_Option (t_Item'0, t_Item'1)) =
    [%#span5] true
  
  predicate inv'1 (_1 : Option'0.t_Option (t_Item'0, t_Item'1))
  
  axiom inv'1 : forall x : Option'0.t_Option (t_Item'0, t_Item'1) . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Zip'0.t_Zip a b)) =
    [%#span6] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'0 (_1 : borrowed (Zip'0.t_Zip a b))
  
  axiom inv'0 : forall x : borrowed (Zip'0.t_Zip a b) . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq t_Item'1) (o : b)
  
  use T_12_zip__Zip as T_12_zip__Zip
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq t_Item'0) (o : a)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../12_zip.rs" 29 4 29 65] (self : Zip'0.t_Zip a b) (visited : Seq.seq (t_Item'0, t_Item'1)) (tl : Zip'0.t_Zip a b)
    
   =
    [%#span7] exists p1 : Seq.seq t_Item'0, p2 : Seq.seq t_Item'1 . inv'4 p1
    /\ inv'5 p2
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 (T_12_zip__Zip.t_Zip__a self) p1 (T_12_zip__Zip.t_Zip__a tl)
    /\ produces'2 (T_12_zip__Zip.t_Zip__b self) p2 (T_12_zip__Zip.t_Zip__b tl)
  
  use seq.Seq
  
  predicate completed'2 [#"../common.rs" 11 4 11 36] (self : borrowed b)
  
  predicate resolve'0 (self : t_Item'0)
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed a)
  
  predicate completed'0 [#"../12_zip.rs" 19 4 19 35] (self : borrowed (Zip'0.t_Zip a b)) =
    [%#span8] completed'1 (Borrow.borrow_logic (T_12_zip__Zip.t_Zip__a self.current) (T_12_zip__Zip.t_Zip__a self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ T_12_zip__Zip.t_Zip__b self.current = T_12_zip__Zip.t_Zip__b self.final
    \/ (exists x : t_Item'0 . inv'3 x
    /\ produces'1 (T_12_zip__Zip.t_Zip__a self.current) (Seq.singleton x) (T_12_zip__Zip.t_Zip__a self.final)
    /\ resolve'0 x
    /\ completed'2 (Borrow.borrow_logic (T_12_zip__Zip.t_Zip__b self.current) (T_12_zip__Zip.t_Zip__b self.final) (Borrow.inherit_id (Borrow.get_id self) 2)))
  
  goal next_refn : [%#s12_zip0] forall self : borrowed (Zip'0.t_Zip a b) . inv'0 self
   -> inv'0 self
  /\ (forall result : Option'0.t_Option (t_Item'0, t_Item'1) . inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_refl_refn : [%#s12_zip1] forall self : Zip'0.t_Zip a b . inv'2 self
   -> inv'2 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq (t_Item'0, t_Item'1)) self
   -> produces'0 self (Seq.empty  : Seq.seq (t_Item'0, t_Item'1)) self)
  
  goal produces_trans_refn : [%#s12_zip2] forall a : Zip'0.t_Zip a b . forall ab : Seq.seq (t_Item'0, t_Item'1) . forall b : Zip'0.t_Zip a b . forall bc : Seq.seq (t_Item'0, t_Item'1) . forall c : Zip'0.t_Zip a b . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'2 c /\ inv'2 b /\ inv'2 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'2 c
  /\ inv'2 b /\ inv'2 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
