module M_12_zip__qyi11945968049747852488__resolve_coherence [#"12_zip.rs" 9 9 9 16] (* <Zip<A, B> as creusot_contracts::Resolve> *)
  let%span s12_zip0 = "12_zip.rs" 9 9 9 16
  let%span s12_zip1 = "12_zip.rs" 9 9 9 16
  let%span s12_zip2 = "12_zip.rs" 11 4 12 8
  
  use prelude.prelude.Borrow
  
  type t_A'0
  
  type t_B'0
  
  type t_Zip'0  =
    { t_Zip__a'0: t_A'0; t_Zip__b'0: t_B'0 }
  
  predicate resolve'1 (_1 : t_B'0)
  
  predicate resolve'2 (_1 : t_A'0)
  
  predicate structural_resolve'0 (_1 : t_Zip'0) =
    match _1 with
      | {t_Zip__a'0 = x0 ; t_Zip__b'0 = x1} -> resolve'1 x1 /\ resolve'2 x0
      end
  
  predicate resolve'0 [#"12_zip.rs" 9 9 9 16] (self : t_Zip'0) =
    [%#s12_zip2] resolve'2 self.t_Zip__a'0 /\ resolve'1 self.t_Zip__b'0
  
  constant self  : t_Zip'0
  
  function resolve_coherence'0 [#"12_zip.rs" 9 9 9 16] (self : t_Zip'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#s12_zip0] structural_resolve'0 self)  -> ([%#s12_zip0] resolve'0 self)
end
module M_12_zip__qyi1592645166739554830__produces_refl [#"12_zip.rs" 43 4 43 26] (* <Zip<A, B> as common::Iterator> *)
  let%span s12_zip0 = "12_zip.rs" 42 14 42 45
  let%span s12_zip1 = "12_zip.rs" 40 4 40 10
  let%span s12_zip2 = "12_zip.rs" 33 12 36 73
  let%span scommon3 = "common.rs" 14 14 14 45
  let%span scommon4 = "common.rs" 18 15 18 32
  let%span scommon5 = "common.rs" 19 15 19 32
  let%span scommon6 = "common.rs" 20 14 20 42
  
  use seq.Seq
  
  type t_A'0
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_A'0) (visited : Seq.seq t_Item'0) (o : t_A'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_A'0) (ab : Seq.seq t_Item'0) (b : t_A'0) (bc : Seq.seq t_Item'0) (c : t_A'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_A'0, ab : Seq.seq t_Item'0, b : t_A'0, bc : Seq.seq t_Item'0, c : t_A'0 . ([%#scommon4] produces'1 a ab b)
   -> ([%#scommon5] produces'1 b bc c)  -> ([%#scommon6] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_A'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_A'0 . [%#scommon3] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  type t_B'0
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'1
  
  use seq.Seq
  
  predicate produces'2 [#"common.rs" 8 4 8 65] (self : t_B'0) (visited : Seq.seq t_Item'1) (o : t_B'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_B'0) (ab : Seq.seq t_Item'1) (b : t_B'0) (bc : Seq.seq t_Item'1) (c : t_B'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_B'0, ab : Seq.seq t_Item'1, b : t_B'0, bc : Seq.seq t_Item'1, c : t_B'0 . ([%#scommon4] produces'2 a ab b)
   -> ([%#scommon5] produces'2 b bc c)  -> ([%#scommon6] produces'2 a (Seq.(++) ab bc) c)
  
  function produces_refl'2 [#"common.rs" 15 4 15 27] (self : t_B'0) : ()
  
  axiom produces_refl'2_spec : forall self : t_B'0 . [%#scommon3] produces'2 self (Seq.empty  : Seq.seq t_Item'1) self
  
  use seq.Seq
  
  type t_Zip'0  =
    { t_Zip__a'0: t_A'0; t_Zip__b'0: t_B'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"12_zip.rs" 30 4 30 65] (self : t_Zip'0) (visited : Seq.seq (t_Item'0, t_Item'1)) (tl : t_Zip'0)
    
   =
    [%#s12_zip2] exists p1 : Seq.seq t_Item'0, p2 : Seq.seq t_Item'1 . Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 self.t_Zip__a'0 p1 tl.t_Zip__a'0 /\ produces'2 self.t_Zip__b'0 p2 tl.t_Zip__b'0
  
  constant self  : t_Zip'0
  
  function produces_refl'0 [#"12_zip.rs" 43 4 43 26] (self : t_Zip'0) : ()
  
  goal vc_produces_refl'0 : [%#s12_zip0] produces'0 self (Seq.empty  : Seq.seq (t_Item'0, t_Item'1)) self
end
module M_12_zip__qyi1592645166739554830__produces_trans [#"12_zip.rs" 50 4 50 90] (* <Zip<A, B> as common::Iterator> *)
  let%span s12_zip0 = "12_zip.rs" 47 15 47 32
  let%span s12_zip1 = "12_zip.rs" 48 15 48 32
  let%span s12_zip2 = "12_zip.rs" 49 14 49 42
  let%span s12_zip3 = "12_zip.rs" 45 4 45 10
  let%span s12_zip4 = "12_zip.rs" 33 12 36 73
  let%span scommon5 = "common.rs" 14 14 14 45
  let%span scommon6 = "common.rs" 18 15 18 32
  let%span scommon7 = "common.rs" 19 15 19 32
  let%span scommon8 = "common.rs" 20 14 20 42
  
  type t_A'0
  
  type t_B'0
  
  type t_Zip'0  =
    { t_Zip__a'0: t_A'0; t_Zip__b'0: t_B'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_A'0) (visited : Seq.seq t_Item'0) (o : t_A'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_A'0) (ab : Seq.seq t_Item'0) (b : t_A'0) (bc : Seq.seq t_Item'0) (c : t_A'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_A'0, ab : Seq.seq t_Item'0, b : t_A'0, bc : Seq.seq t_Item'0, c : t_A'0 . ([%#scommon6] produces'1 a ab b)
   -> ([%#scommon7] produces'1 b bc c)  -> ([%#scommon8] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_A'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_A'0 . [%#scommon5] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'1
  
  use seq.Seq
  
  predicate produces'2 [#"common.rs" 8 4 8 65] (self : t_B'0) (visited : Seq.seq t_Item'1) (o : t_B'0)
  
  function produces_trans'2 [#"common.rs" 21 4 21 91] (a : t_B'0) (ab : Seq.seq t_Item'1) (b : t_B'0) (bc : Seq.seq t_Item'1) (c : t_B'0) : ()
    
  
  axiom produces_trans'2_spec : forall a : t_B'0, ab : Seq.seq t_Item'1, b : t_B'0, bc : Seq.seq t_Item'1, c : t_B'0 . ([%#scommon6] produces'2 a ab b)
   -> ([%#scommon7] produces'2 b bc c)  -> ([%#scommon8] produces'2 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_B'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_B'0 . [%#scommon5] produces'2 self (Seq.empty  : Seq.seq t_Item'1) self
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"12_zip.rs" 30 4 30 65] (self : t_Zip'0) (visited : Seq.seq (t_Item'0, t_Item'1)) (tl : t_Zip'0)
    
   =
    [%#s12_zip4] exists p1 : Seq.seq t_Item'0, p2 : Seq.seq t_Item'1 . Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 self.t_Zip__a'0 p1 tl.t_Zip__a'0 /\ produces'2 self.t_Zip__b'0 p2 tl.t_Zip__b'0
  
  use seq.Seq
  
  constant a  : t_Zip'0
  
  constant ab  : Seq.seq (t_Item'0, t_Item'1)
  
  constant b  : t_Zip'0
  
  constant bc  : Seq.seq (t_Item'0, t_Item'1)
  
  constant c  : t_Zip'0
  
  function produces_trans'0 [#"12_zip.rs" 50 4 50 90] (a : t_Zip'0) (ab : Seq.seq (t_Item'0, t_Item'1)) (b : t_Zip'0) (bc : Seq.seq (t_Item'0, t_Item'1)) (c : t_Zip'0) : ()
    
  
  goal vc_produces_trans'0 : ([%#s12_zip1] produces'0 b bc c)
   -> ([%#s12_zip0] produces'0 a ab b)  -> ([%#s12_zip2] produces'0 a (Seq.(++) ab bc) c)
end
module M_12_zip__qyi1592645166739554830__next [#"12_zip.rs" 56 4 56 44] (* <Zip<A, B> as common::Iterator> *)
  let%span s12_zip0 = "12_zip.rs" 56 17 56 21
  let%span s12_zip1 = "12_zip.rs" 56 26 56 44
  let%span s12_zip2 = "12_zip.rs" 52 14 55 5
  let%span scommon3 = "common.rs" 27 17 27 21
  let%span scommon4 = "common.rs" 27 26 27 44
  let%span scommon5 = "common.rs" 23 14 26 5
  let%span s12_zip6 = "12_zip.rs" 22 13 24 67
  let%span s12_zip7 = "12_zip.rs" 33 12 36 73
  let%span scommon8 = "common.rs" 14 14 14 45
  let%span scommon9 = "common.rs" 18 15 18 32
  let%span scommon10 = "common.rs" 19 15 19 32
  let%span scommon11 = "common.rs" 20 14 20 42
  let%span sresolve12 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant13 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use prelude.prelude.Borrow
  
  type t_A'0
  
  predicate inv'0 (_1 : t_A'0)
  
  type t_B'0
  
  type t_Zip'0  =
    { t_Zip__a'0: t_A'0; t_Zip__b'0: t_B'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_A'0) (visited : Seq.seq t_Item'0) (o : t_A'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_A'0) (ab : Seq.seq t_Item'0) (b : t_A'0) (bc : Seq.seq t_Item'0) (c : t_A'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_A'0, ab : Seq.seq t_Item'0, b : t_A'0, bc : Seq.seq t_Item'0, c : t_A'0 . ([%#scommon9] produces'1 a ab b)
   -> ([%#scommon10] produces'1 b bc c)  -> ([%#scommon11] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_A'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_A'0 . [%#scommon8] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  predicate invariant'1 (self : borrowed t_A'0) =
    [%#sinvariant13] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'5 (_1 : borrowed t_A'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_A'0 [inv'5 x] . inv'5 x = invariant'1 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_Item'0
  
  predicate inv'3 (_1 : t_Item'0)
  
  predicate inv'6 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'6 x] . inv'6 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'3 a_0
    end
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_A'0)
  
  use seq.Seq
  
  let rec next'1 (self:borrowed t_A'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] [%#scommon3] inv'5 self}
    any
    [ return' (result:t_Option'0)-> {[%#scommon4] inv'6 result}
      {[%#scommon5] match result with
        | C_None'0 -> completed'1 self
        | C_Some'0 v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_Item'0))= any
    [ good (field_0:t_Item'0)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_Item'0 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'1 (_1 : t_B'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'1
  
  use seq.Seq
  
  predicate produces'2 [#"common.rs" 8 4 8 65] (self : t_B'0) (visited : Seq.seq t_Item'1) (o : t_B'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_B'0) (ab : Seq.seq t_Item'1) (b : t_B'0) (bc : Seq.seq t_Item'1) (c : t_B'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_B'0, ab : Seq.seq t_Item'1, b : t_B'0, bc : Seq.seq t_Item'1, c : t_B'0 . ([%#scommon9] produces'2 a ab b)
   -> ([%#scommon10] produces'2 b bc c)  -> ([%#scommon11] produces'2 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_B'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_B'0 . [%#scommon8] produces'2 self (Seq.empty  : Seq.seq t_Item'1) self
  
  predicate invariant'2 (self : borrowed t_B'0) =
    [%#sinvariant13] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'7 (_1 : borrowed t_B'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed t_B'0 [inv'7 x] . inv'7 x = invariant'2 x
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 t_Item'1
  
  predicate inv'10 (_1 : t_Item'1)
  
  predicate inv'8 (_1 : t_Option'1)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Option'1 [inv'8 x] . inv'8 x
  = match x with
    | C_None'1 -> true
    | C_Some'1 a_0 -> inv'10 a_0
    end
  
  predicate completed'2 [#"common.rs" 11 4 11 36] (self : borrowed t_B'0)
  
  use seq.Seq
  
  let rec next'2 (self:borrowed t_B'0) (return'  (ret:t_Option'1))= {[@expl:next 'self' type invariant] [%#scommon3] inv'7 self}
    any
    [ return' (result:t_Option'1)-> {[%#scommon4] inv'8 result}
      {[%#scommon5] match result with
        | C_None'1 -> completed'2 self
        | C_Some'1 v -> produces'2 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate inv'11 (_1 : t_Zip'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Zip'0 [inv'11 x] . inv'11 x
  = match x with
    | {t_Zip__a'0 = a ; t_Zip__b'0 = b} -> inv'0 a /\ inv'1 b
    end
  
  predicate invariant'0 (self : borrowed (t_Zip'0)) =
    [%#sinvariant13] inv'11 self.current /\ inv'11 self.final
  
  predicate inv'2 (_1 : borrowed (t_Zip'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Zip'0) [inv'2 x] . inv'2 x = invariant'0 x
  
  predicate resolve'2 (self : borrowed (t_Zip'0)) =
    [%#sresolve12] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Zip'0)) =
    resolve'2 _1
  
  let rec v_Some'1 (input:t_Option'1) (ret  (field_0:t_Item'1))= any
    [ good (field_0:t_Item'1)-> {C_Some'1 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_Item'1 [C_Some'1 field_0 : t_Option'1] . C_Some'1 field_0 <> input} (! {false} any) ]
    
  
  type t_Option'2  =
    | C_None'2
    | C_Some'2 (t_Item'0, t_Item'1)
  
  predicate resolve'1 (_1 : t_Item'0)
  
  use prelude.prelude.Intrinsic
  
  predicate inv'9 (_1 : (t_Item'0, t_Item'1))
  
  axiom inv_axiom'6 [@rewrite] : forall x : (t_Item'0, t_Item'1) [inv'9 x] . inv'9 x
  = (let (x0, x1) = x in inv'3 x0 /\ inv'10 x1)
  
  predicate inv'4 (_1 : t_Option'2)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'2 [inv'4 x] . inv'4 x
  = match x with
    | C_None'2 -> true
    | C_Some'2 a_0 -> inv'9 a_0
    end
  
  predicate completed'0 [#"12_zip.rs" 20 4 20 35] (self : borrowed (t_Zip'0)) =
    [%#s12_zip6] completed'1 (Borrow.borrow_logic (self.current).t_Zip__a'0 (self.final).t_Zip__a'0 (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ (self.current).t_Zip__b'0 = (self.final).t_Zip__b'0
    \/ (exists x : t_Item'0 . produces'1 (self.current).t_Zip__a'0 (Seq.singleton x) (self.final).t_Zip__a'0
    /\ resolve'1 x
    /\ completed'2 (Borrow.borrow_logic (self.current).t_Zip__b'0 (self.final).t_Zip__b'0 (Borrow.inherit_id (Borrow.get_id self) 2)))
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"12_zip.rs" 30 4 30 65] (self : t_Zip'0) (visited : Seq.seq (t_Item'0, t_Item'1)) (tl : t_Zip'0)
    
   =
    [%#s12_zip7] exists p1 : Seq.seq t_Item'0, p2 : Seq.seq t_Item'1 . Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 self.t_Zip__a'0 p1 tl.t_Zip__a'0 /\ produces'2 self.t_Zip__b'0 p2 tl.t_Zip__b'0
  
  meta "compute_max_steps" 1000000
  
  let rec next'0 (self:borrowed (t_Zip'0)) (return'  (ret:t_Option'2))= {[@expl:next 'self' type invariant] [%#s12_zip0] inv'2 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 (self.current).t_Zip__a'0}
        Borrow.borrow_final <t_A'0> {(self.current).t_Zip__a'0} {Borrow.inherit_id (Borrow.get_id self) 1}
          (fun (_ret':borrowed t_A'0) ->
             [ &_5 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { self.current with t_Zip__a'0 = _ret'.final } } ] 
            s1)
      | s1 = next'1 {_5} (fun (_ret':t_Option'0) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = any [ br0 -> {_4 = C_None'0 } (! bb3) | br1 (x0:t_Item'0)-> {_4 = C_Some'0 x0} (! bb4) ] 
    | bb4 = s0 [ s0 = v_Some'0 {_4} (fun (r0'0:t_Item'0) ->  [ &x1 <- r0'0 ] s1) | s1 =  [ &x <- x1 ] s2 | s2 = bb6 ] 
    | bb6 = bb7
    | bb7 = s0
      [ s0 = {inv'1 (self.current).t_Zip__b'0}
        Borrow.borrow_final <t_B'0> {(self.current).t_Zip__b'0} {Borrow.inherit_id (Borrow.get_id self) 2}
          (fun (_ret':borrowed t_B'0) ->
             [ &_11 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &self <- { self with current = { self.current with t_Zip__b'0 = _ret'.final } } ] 
            s1)
      | s1 = next'2 {_11} (fun (_ret':t_Option'1) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'2 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = any [ br0 -> {_10 = C_None'1 } (! bb10) | br1 (x0:t_Item'1)-> {_10 = C_Some'1 x0} (! bb11) ]  ]
      
    | bb11 = s0
      [ s0 = v_Some'1 {_10} (fun (r0'0:t_Item'1) ->  [ &y1 <- r0'0 ] s1) | s1 =  [ &y <- y1 ] s2 | s2 = bb13 ]
      
    | bb13 = bb14
    | bb14 = s0 [ s0 =  [ &_15 <- (x, y) ] s1 | s1 = bb15 ] 
    | bb15 = bb16
    | bb16 = s0 [ s0 =  [ &_0 <- C_Some'2 _15 ] s1 | s1 = bb17 ] 
    | bb17 = bb18
    | bb18 = bb19
    | bb19 = bb23
    | bb10 = s0 [ s0 = {[@expl:type invariant] inv'3 x} s1 | s1 = -{resolve'1 x}- s2 | s2 = bb12 ] 
    | bb12 = s0 [ s0 =  [ &_0 <- C_None'2 ] s1 | s1 = bb20 ] 
    | bb20 = bb22
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'2 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &_0 <- C_None'2 ] s1 | s1 = bb21 ] 
    | bb21 = bb22
    | bb22 = bb23
    | bb23 = return' {_0} ]
    )
    [ & _0 : t_Option'2 = any_l ()
    | & self : borrowed (t_Zip'0) = self
    | & x : t_Item'0 = any_l ()
    | & _4 : t_Option'0 = any_l ()
    | & _5 : borrowed t_A'0 = any_l ()
    | & x1 : t_Item'0 = any_l ()
    | & y : t_Item'1 = any_l ()
    | & _10 : t_Option'1 = any_l ()
    | & _11 : borrowed t_B'0 = any_l ()
    | & y1 : t_Item'1 = any_l ()
    | & _15 : (t_Item'0, t_Item'1) = any_l () ]
    
    [ return' (result:t_Option'2)-> {[@expl:next result type invariant] [%#s12_zip1] inv'4 result}
      {[@expl:next ensures] [%#s12_zip2] match result with
        | C_None'2 -> completed'0 self
        | C_Some'2 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_12_zip__qyi11945968049747852488__resolve_coherence__refines [#"12_zip.rs" 9 9 9 16] (* <Zip<A, B> as creusot_contracts::Resolve> *)
  let%span s12_zip0 = "12_zip.rs" 9 9 9 16
  let%span s12_zip1 = "12_zip.rs" 11 4 12 8
  let%span sinvariant2 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_A'0
  
  type t_B'0
  
  type t_Zip'0  =
    { t_Zip__a'0: t_A'0; t_Zip__b'0: t_B'0 }
  
  predicate resolve'1 (_1 : t_B'0)
  
  predicate resolve'2 (_1 : t_A'0)
  
  predicate structural_resolve'0 (_1 : t_Zip'0) =
    match _1 with
      | {t_Zip__a'0 = x0 ; t_Zip__b'0 = x1} -> resolve'1 x1 /\ resolve'2 x0
      end
  
  predicate inv'2 (_1 : t_A'0)
  
  predicate inv'3 (_1 : t_B'0)
  
  predicate inv'1 (_1 : t_Zip'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Zip'0 [inv'1 x] . inv'1 x
  = match x with
    | {t_Zip__a'0 = a ; t_Zip__b'0 = b} -> inv'2 a /\ inv'3 b
    end
  
  predicate invariant'0 (self : t_Zip'0) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : t_Zip'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Zip'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'0 [#"12_zip.rs" 9 9 9 16] (self : t_Zip'0) =
    [%#s12_zip1] resolve'2 self.t_Zip__a'0 /\ resolve'1 self.t_Zip__b'0
  
  goal refines : [%#s12_zip0] forall self : t_Zip'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
module M_12_zip__qyi1592645166739554830__next__refines [#"12_zip.rs" 56 4 56 44] (* <Zip<A, B> as common::Iterator> *)
  let%span s12_zip0 = "12_zip.rs" 56 4 56 44
  let%span s12_zip1 = "12_zip.rs" 22 13 24 67
  let%span s12_zip2 = "12_zip.rs" 33 12 36 73
  let%span sinvariant3 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span scommon4 = "common.rs" 14 14 14 45
  let%span scommon5 = "common.rs" 18 15 18 32
  let%span scommon6 = "common.rs" 19 15 19 32
  let%span scommon7 = "common.rs" 20 14 20 42
  
  use prelude.prelude.Borrow
  
  type t_A'0
  
  type t_B'0
  
  type t_Zip'0  =
    { t_Zip__a'0: t_A'0; t_Zip__b'0: t_B'0 }
  
  predicate inv'6 (_1 : t_A'0)
  
  predicate inv'7 (_1 : t_B'0)
  
  predicate inv'3 (_1 : t_Zip'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Zip'0 [inv'3 x] . inv'3 x
  = match x with
    | {t_Zip__a'0 = a ; t_Zip__b'0 = b} -> inv'6 a /\ inv'7 b
    end
  
  predicate invariant'0 (self : borrowed (t_Zip'0)) =
    [%#sinvariant3] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'0 (_1 : borrowed (t_Zip'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Zip'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_A'0) (visited : Seq.seq t_Item'0) (o : t_A'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_A'0) (ab : Seq.seq t_Item'0) (b : t_A'0) (bc : Seq.seq t_Item'0) (c : t_A'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_A'0, ab : Seq.seq t_Item'0, b : t_A'0, bc : Seq.seq t_Item'0, c : t_A'0 . ([%#scommon5] produces'1 a ab b)
   -> ([%#scommon6] produces'1 b bc c)  -> ([%#scommon7] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_A'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_A'0 . [%#scommon4] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'1
  
  use seq.Seq
  
  predicate produces'2 [#"common.rs" 8 4 8 65] (self : t_B'0) (visited : Seq.seq t_Item'1) (o : t_B'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_B'0) (ab : Seq.seq t_Item'1) (b : t_B'0) (bc : Seq.seq t_Item'1) (c : t_B'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_B'0, ab : Seq.seq t_Item'1, b : t_B'0, bc : Seq.seq t_Item'1, c : t_B'0 . ([%#scommon5] produces'2 a ab b)
   -> ([%#scommon6] produces'2 b bc c)  -> ([%#scommon7] produces'2 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_B'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_B'0 . [%#scommon4] produces'2 self (Seq.empty  : Seq.seq t_Item'1) self
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 (t_Item'0, t_Item'1)
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_A'0)
  
  use seq.Seq
  
  predicate resolve'0 (_1 : t_Item'0)
  
  predicate completed'2 [#"common.rs" 11 4 11 36] (self : borrowed t_B'0)
  
  predicate completed'0 [#"12_zip.rs" 20 4 20 35] (self : borrowed (t_Zip'0)) =
    [%#s12_zip1] completed'1 (Borrow.borrow_logic (self.current).t_Zip__a'0 (self.final).t_Zip__a'0 (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ (self.current).t_Zip__b'0 = (self.final).t_Zip__b'0
    \/ (exists x : t_Item'0 . produces'1 (self.current).t_Zip__a'0 (Seq.singleton x) (self.final).t_Zip__a'0
    /\ resolve'0 x
    /\ completed'2 (Borrow.borrow_logic (self.current).t_Zip__b'0 (self.final).t_Zip__b'0 (Borrow.inherit_id (Borrow.get_id self) 2)))
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"12_zip.rs" 30 4 30 65] (self : t_Zip'0) (visited : Seq.seq (t_Item'0, t_Item'1)) (tl : t_Zip'0)
    
   =
    [%#s12_zip2] exists p1 : Seq.seq t_Item'0, p2 : Seq.seq t_Item'1 . Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 self.t_Zip__a'0 p1 tl.t_Zip__a'0 /\ produces'2 self.t_Zip__b'0 p2 tl.t_Zip__b'0
  
  predicate inv'4 (_1 : t_Item'0)
  
  predicate inv'5 (_1 : t_Item'1)
  
  predicate inv'2 (_1 : (t_Item'0, t_Item'1))
  
  axiom inv_axiom'2 [@rewrite] : forall x : (t_Item'0, t_Item'1) [inv'2 x] . inv'2 x
  = (let (x0, x1) = x in inv'4 x0 /\ inv'5 x1)
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'2 a_0
    end
  
  goal refines : [%#s12_zip0] forall self : borrowed (t_Zip'0) . inv'0 self
   -> inv'0 self
  /\ (forall result : t_Option'0 . match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result
   -> match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result)
end
module M_12_zip__qyi1592645166739554830__produces_trans__refines [#"12_zip.rs" 50 4 50 90] (* <Zip<A, B> as common::Iterator> *)
  let%span s12_zip0 = "12_zip.rs" 50 4 50 90
  let%span s12_zip1 = "12_zip.rs" 33 12 36 73
  let%span scommon2 = "common.rs" 14 14 14 45
  let%span scommon3 = "common.rs" 18 15 18 32
  let%span scommon4 = "common.rs" 19 15 19 32
  let%span scommon5 = "common.rs" 20 14 20 42
  
  type t_A'0
  
  type t_B'0
  
  type t_Zip'0  =
    { t_Zip__a'0: t_A'0; t_Zip__b'0: t_B'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_A'0) (visited : Seq.seq t_Item'0) (o : t_A'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_A'0) (ab : Seq.seq t_Item'0) (b : t_A'0) (bc : Seq.seq t_Item'0) (c : t_A'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_A'0, ab : Seq.seq t_Item'0, b : t_A'0, bc : Seq.seq t_Item'0, c : t_A'0 . ([%#scommon3] produces'1 a ab b)
   -> ([%#scommon4] produces'1 b bc c)  -> ([%#scommon5] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_A'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_A'0 . [%#scommon2] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'1
  
  use seq.Seq
  
  predicate produces'2 [#"common.rs" 8 4 8 65] (self : t_B'0) (visited : Seq.seq t_Item'1) (o : t_B'0)
  
  function produces_trans'2 [#"common.rs" 21 4 21 91] (a : t_B'0) (ab : Seq.seq t_Item'1) (b : t_B'0) (bc : Seq.seq t_Item'1) (c : t_B'0) : ()
    
  
  axiom produces_trans'2_spec : forall a : t_B'0, ab : Seq.seq t_Item'1, b : t_B'0, bc : Seq.seq t_Item'1, c : t_B'0 . ([%#scommon3] produces'2 a ab b)
   -> ([%#scommon4] produces'2 b bc c)  -> ([%#scommon5] produces'2 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_B'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_B'0 . [%#scommon2] produces'2 self (Seq.empty  : Seq.seq t_Item'1) self
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"12_zip.rs" 30 4 30 65] (self : t_Zip'0) (visited : Seq.seq (t_Item'0, t_Item'1)) (tl : t_Zip'0)
    
   =
    [%#s12_zip1] exists p1 : Seq.seq t_Item'0, p2 : Seq.seq t_Item'1 . Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 self.t_Zip__a'0 p1 tl.t_Zip__a'0 /\ produces'2 self.t_Zip__b'0 p2 tl.t_Zip__b'0
  
  use seq.Seq
  
  goal refines : [%#s12_zip0] forall a : t_Zip'0 . forall ab : Seq.seq (t_Item'0, t_Item'1) . forall b : t_Zip'0 . forall bc : Seq.seq (t_Item'0, t_Item'1) . forall c : t_Zip'0 . produces'0 b bc c
  /\ produces'0 a ab b
   -> produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
module M_12_zip__qyi1592645166739554830__produces_refl__refines [#"12_zip.rs" 43 4 43 26] (* <Zip<A, B> as common::Iterator> *)
  let%span s12_zip0 = "12_zip.rs" 43 4 43 26
  let%span s12_zip1 = "12_zip.rs" 33 12 36 73
  let%span scommon2 = "common.rs" 14 14 14 45
  let%span scommon3 = "common.rs" 18 15 18 32
  let%span scommon4 = "common.rs" 19 15 19 32
  let%span scommon5 = "common.rs" 20 14 20 42
  
  type t_A'0
  
  type t_B'0
  
  type t_Zip'0  =
    { t_Zip__a'0: t_A'0; t_Zip__b'0: t_B'0 }
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_A'0) (visited : Seq.seq t_Item'0) (o : t_A'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_A'0) (ab : Seq.seq t_Item'0) (b : t_A'0) (bc : Seq.seq t_Item'0) (c : t_A'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_A'0, ab : Seq.seq t_Item'0, b : t_A'0, bc : Seq.seq t_Item'0, c : t_A'0 . ([%#scommon3] produces'1 a ab b)
   -> ([%#scommon4] produces'1 b bc c)  -> ([%#scommon5] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_A'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_A'0 . [%#scommon2] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'1
  
  use seq.Seq
  
  predicate produces'2 [#"common.rs" 8 4 8 65] (self : t_B'0) (visited : Seq.seq t_Item'1) (o : t_B'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_B'0) (ab : Seq.seq t_Item'1) (b : t_B'0) (bc : Seq.seq t_Item'1) (c : t_B'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_B'0, ab : Seq.seq t_Item'1, b : t_B'0, bc : Seq.seq t_Item'1, c : t_B'0 . ([%#scommon3] produces'2 a ab b)
   -> ([%#scommon4] produces'2 b bc c)  -> ([%#scommon5] produces'2 a (Seq.(++) ab bc) c)
  
  function produces_refl'2 [#"common.rs" 15 4 15 27] (self : t_B'0) : ()
  
  axiom produces_refl'2_spec : forall self : t_B'0 . [%#scommon2] produces'2 self (Seq.empty  : Seq.seq t_Item'1) self
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"12_zip.rs" 30 4 30 65] (self : t_Zip'0) (visited : Seq.seq (t_Item'0, t_Item'1)) (tl : t_Zip'0)
    
   =
    [%#s12_zip1] exists p1 : Seq.seq t_Item'0, p2 : Seq.seq t_Item'1 . Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 self.t_Zip__a'0 p1 tl.t_Zip__a'0 /\ produces'2 self.t_Zip__b'0 p2 tl.t_Zip__b'0
  
  goal refines : [%#s12_zip0] forall self : t_Zip'0 . forall result : () . produces'0 self (Seq.empty  : Seq.seq (t_Item'0, t_Item'1)) self
   -> produces'0 self (Seq.empty  : Seq.seq (t_Item'0, t_Item'1)) self
end
