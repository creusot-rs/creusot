
module C12Zip_Zip_Type
  type t_zip 'a 'b =
    | C_Zip 'a 'b
  
  function any_l (_ : 'b) : 'a
  
  let rec t_zip < 'a > < 'b > (input:t_zip 'a 'b) (ret  (a:'a) (b:'b))= any
    [ good (a:'a) (b:'b)-> {C_Zip a b = input} (! ret {a} {b}) | bad (a:'a) (b:'b)-> {C_Zip a b <> input} {false} any ]
    
  
  function zip_a (self : t_zip 'a 'b) : 'a =
    match self with
      | C_Zip a _ -> a
      end
  
  function zip_b (self : t_zip 'a 'b) : 'b =
    match self with
      | C_Zip _ a -> a
      end
end
module C12Zip_Impl0_ProducesRefl_Impl
  type a
  
  type b
  
  let%span s12_zip0 = "../12_zip.rs" 42 21 42 25
  
  let%span s12_zip1 = "../12_zip.rs" 41 14 41 45
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../common.rs" 18 15 18 32
  
  let%span span4 = "../common.rs" 19 15 19 32
  
  let%span span5 = "../common.rs" 21 22 21 23
  
  let%span span6 = "../common.rs" 21 31 21 33
  
  let%span span7 = "../common.rs" 21 52 21 53
  
  let%span span8 = "../common.rs" 21 61 21 63
  
  let%span span9 = "../common.rs" 21 82 21 83
  
  let%span span10 = "../common.rs" 20 14 20 42
  
  let%span span11 = "../common.rs" 15 21 15 25
  
  let%span span12 = "../common.rs" 14 14 14 45
  
  let%span span13 = "../12_zip.rs" 30 8 36 9
  
  predicate invariant'4 (self : b)
  
  predicate inv'4 (_x : b)
  
  axiom inv'4 : forall x : b . inv'4 x = true
  
  predicate invariant'3 (self : a)
  
  predicate inv'3 (_x : a)
  
  axiom inv'3 : forall x : a . inv'3 x = true
  
  type item'0
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq item'0) =
    [%#span2] true
  
  predicate inv'2 (_x : Seq.seq item'0)
  
  axiom inv'2 : forall x : Seq.seq item'0 . inv'2 x = true
  
  type item'1
  
  predicate invariant'1 (self : Seq.seq item'1) =
    [%#span2] true
  
  predicate inv'1 (_x : Seq.seq item'1)
  
  axiom inv'1 : forall x : Seq.seq item'1 . inv'1 x = true
  
  use seq.Seq
  
  predicate produces'2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item'1) (o : b)
  
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : b) (ab : Seq.seq item'1) (b : b) (bc : Seq.seq item'1) (c : b) : ()
    
  
  axiom produces_trans'1_spec : forall a : b, ab : Seq.seq item'1, b : b, bc : Seq.seq item'1, c : b . ([%#span3] produces'2 a ab b)
   -> ([%#span4] produces'2 b bc c)
   -> ([%#span5] inv'4 a)
   -> ([%#span6] inv'1 ab)
   -> ([%#span7] inv'4 b)
   -> ([%#span8] inv'1 bc)  -> ([%#span9] inv'4 c)  -> ([%#span10] produces'2 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : b) : ()
  
  axiom produces_refl'1_spec : forall self : b . ([%#span11] inv'4 self)
   -> ([%#span12] produces'2 self (Seq.empty  : Seq.seq item'1) self)
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item'0) (o : a)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : a) (ab : Seq.seq item'0) (b : a) (bc : Seq.seq item'0) (c : a) : ()
    
  
  axiom produces_trans'0_spec : forall a : a, ab : Seq.seq item'0, b : a, bc : Seq.seq item'0, c : a . ([%#span3] produces'1 a ab b)
   -> ([%#span4] produces'1 b bc c)
   -> ([%#span5] inv'3 a)
   -> ([%#span6] inv'2 ab)
   -> ([%#span7] inv'3 b)
   -> ([%#span8] inv'2 bc)  -> ([%#span9] inv'3 c)  -> ([%#span10] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : a) : ()
  
  axiom produces_refl'0_spec : forall self : a . ([%#span11] inv'3 self)
   -> ([%#span12] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  use C12Zip_Zip_Type as Zip'0
  
  predicate invariant'0 (self : Zip'0.t_zip a b) =
    [%#span2] true
  
  predicate inv'0 (_x : Zip'0.t_zip a b)
  
  axiom inv'0 : forall x : Zip'0.t_zip a b . inv'0 x = true
  
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../12_zip.rs" 29 4 29 65] (self : Zip'0.t_zip a b) (visited : Seq.seq (item'0, item'1)) (tl : Zip'0.t_zip a b)
    
   =
    [%#span13] exists p2 : Seq.seq item'1 . exists p1 : Seq.seq item'0 . inv'1 p2
    /\ inv'2 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 (C12Zip_Zip_Type.zip_a self) p1 (C12Zip_Zip_Type.zip_a tl)
    /\ produces'2 (C12Zip_Zip_Type.zip_b self) p2 (C12Zip_Zip_Type.zip_b tl)
  
  use seq.Seq
  
  constant self  : Zip'0.t_zip a b
  
  function produces_refl [#"../12_zip.rs" 42 4 42 26] (self : Zip'0.t_zip a b) : ()
  
  goal vc_produces_refl : ([%#s12_zip0] inv'0 self)
   -> ([%#s12_zip1] produces'0 self (Seq.empty  : Seq.seq (item'0, item'1)) self)
end
module C12Zip_Impl0_ProducesTrans_Impl
  type a
  
  type b
  
  let%span s12_zip0 = "../12_zip.rs" 46 15 46 32
  
  let%span s12_zip1 = "../12_zip.rs" 47 15 47 32
  
  let%span s12_zip2 = "../12_zip.rs" 49 22 49 23
  
  let%span s12_zip3 = "../12_zip.rs" 49 31 49 33
  
  let%span s12_zip4 = "../12_zip.rs" 49 52 49 53
  
  let%span s12_zip5 = "../12_zip.rs" 49 61 49 63
  
  let%span s12_zip6 = "../12_zip.rs" 49 82 49 83
  
  let%span s12_zip7 = "../12_zip.rs" 48 14 48 42
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "../common.rs" 18 15 18 32
  
  let%span span10 = "../common.rs" 19 15 19 32
  
  let%span span11 = "../common.rs" 21 22 21 23
  
  let%span span12 = "../common.rs" 21 31 21 33
  
  let%span span13 = "../common.rs" 21 52 21 53
  
  let%span span14 = "../common.rs" 21 61 21 63
  
  let%span span15 = "../common.rs" 21 82 21 83
  
  let%span span16 = "../common.rs" 20 14 20 42
  
  let%span span17 = "../common.rs" 15 21 15 25
  
  let%span span18 = "../common.rs" 14 14 14 45
  
  let%span span19 = "../12_zip.rs" 30 8 36 9
  
  predicate invariant'5 (self : b)
  
  predicate inv'5 (_x : b)
  
  axiom inv'5 : forall x : b . inv'5 x = true
  
  predicate invariant'4 (self : a)
  
  predicate inv'4 (_x : a)
  
  axiom inv'4 : forall x : a . inv'4 x = true
  
  type item'0
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq item'0) =
    [%#span8] true
  
  predicate inv'3 (_x : Seq.seq item'0)
  
  axiom inv'3 : forall x : Seq.seq item'0 . inv'3 x = true
  
  type item'1
  
  predicate invariant'2 (self : Seq.seq item'1) =
    [%#span8] true
  
  predicate inv'2 (_x : Seq.seq item'1)
  
  axiom inv'2 : forall x : Seq.seq item'1 . inv'2 x = true
  
  use seq.Seq
  
  predicate produces'2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item'1) (o : b)
  
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : b) (ab : Seq.seq item'1) (b : b) (bc : Seq.seq item'1) (c : b) : ()
    
  
  axiom produces_trans'1_spec : forall a : b, ab : Seq.seq item'1, b : b, bc : Seq.seq item'1, c : b . ([%#span9] produces'2 a ab b)
   -> ([%#span10] produces'2 b bc c)
   -> ([%#span11] inv'5 a)
   -> ([%#span12] inv'2 ab)
   -> ([%#span13] inv'5 b)
   -> ([%#span14] inv'2 bc)  -> ([%#span15] inv'5 c)  -> ([%#span16] produces'2 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : b) : ()
  
  axiom produces_refl'1_spec : forall self : b . ([%#span17] inv'5 self)
   -> ([%#span18] produces'2 self (Seq.empty  : Seq.seq item'1) self)
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item'0) (o : a)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : a) (ab : Seq.seq item'0) (b : a) (bc : Seq.seq item'0) (c : a) : ()
    
  
  axiom produces_trans'0_spec : forall a : a, ab : Seq.seq item'0, b : a, bc : Seq.seq item'0, c : a . ([%#span9] produces'1 a ab b)
   -> ([%#span10] produces'1 b bc c)
   -> ([%#span11] inv'4 a)
   -> ([%#span12] inv'3 ab)
   -> ([%#span13] inv'4 b)
   -> ([%#span14] inv'3 bc)  -> ([%#span15] inv'4 c)  -> ([%#span16] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : a) : ()
  
  axiom produces_refl'0_spec : forall self : a . ([%#span17] inv'4 self)
   -> ([%#span18] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate invariant'1 (self : Seq.seq (item'0, item'1)) =
    [%#span8] true
  
  predicate inv'1 (_x : Seq.seq (item'0, item'1))
  
  axiom inv'1 : forall x : Seq.seq (item'0, item'1) . inv'1 x = true
  
  use C12Zip_Zip_Type as Zip'0
  
  predicate invariant'0 (self : Zip'0.t_zip a b) =
    [%#span8] true
  
  predicate inv'0 (_x : Zip'0.t_zip a b)
  
  axiom inv'0 : forall x : Zip'0.t_zip a b . inv'0 x = true
  
  use seq.Seq
  
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../12_zip.rs" 29 4 29 65] (self : Zip'0.t_zip a b) (visited : Seq.seq (item'0, item'1)) (tl : Zip'0.t_zip a b)
    
   =
    [%#span19] exists p2 : Seq.seq item'1 . exists p1 : Seq.seq item'0 . inv'2 p2
    /\ inv'3 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 (C12Zip_Zip_Type.zip_a self) p1 (C12Zip_Zip_Type.zip_a tl)
    /\ produces'2 (C12Zip_Zip_Type.zip_b self) p2 (C12Zip_Zip_Type.zip_b tl)
  
  constant a  : Zip'0.t_zip a b
  
  constant ab  : Seq.seq (item'0, item'1)
  
  constant b  : Zip'0.t_zip a b
  
  constant bc  : Seq.seq (item'0, item'1)
  
  constant c  : Zip'0.t_zip a b
  
  function produces_trans [#"../12_zip.rs" 49 4 49 90] (a : Zip'0.t_zip a b) (ab : Seq.seq (item'0, item'1)) (b : Zip'0.t_zip a b) (bc : Seq.seq (item'0, item'1)) (c : Zip'0.t_zip a b) : ()
    
  
  goal vc_produces_trans : ([%#s12_zip6] inv'0 c)
   -> ([%#s12_zip5] inv'1 bc)
   -> ([%#s12_zip4] inv'0 b)
   -> ([%#s12_zip3] inv'1 ab)
   -> ([%#s12_zip2] inv'0 a)
   -> ([%#s12_zip1] produces'0 b bc c)
   -> ([%#s12_zip0] produces'0 a ab b)  -> ([%#s12_zip7] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C12Zip_Impl0_Next
  type a
  
  type b
  
  let%span s12_zip0 = "../12_zip.rs" 56 22 56 35
  
  let%span s12_zip1 = "../12_zip.rs" 60 22 60 35
  
  let%span s12_zip2 = "../12_zip.rs" 55 17 55 21
  
  let%span s12_zip3 = "../12_zip.rs" 51 14 54 5
  
  let%span s12_zip4 = "../12_zip.rs" 55 26 55 44
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../common.rs" 18 15 18 32
  
  let%span span7 = "../common.rs" 19 15 19 32
  
  let%span span8 = "../common.rs" 21 22 21 23
  
  let%span span9 = "../common.rs" 21 31 21 33
  
  let%span span10 = "../common.rs" 21 52 21 53
  
  let%span span11 = "../common.rs" 21 61 21 63
  
  let%span span12 = "../common.rs" 21 82 21 83
  
  let%span span13 = "../common.rs" 20 14 20 42
  
  let%span span14 = "../common.rs" 15 21 15 25
  
  let%span span15 = "../common.rs" 14 14 14 45
  
  let%span span16 = "../12_zip.rs" 30 8 36 9
  
  let%span span17 = "../12_zip.rs" 21 13 23 67
  
  let%span span18 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span19 = "../common.rs" 27 17 27 21
  
  let%span span20 = "../common.rs" 23 14 26 5
  
  let%span span21 = "../common.rs" 27 26 27 44
  
  let%span span22 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  type item'0
  
  use seq.Seq
  
  predicate invariant'10 (self : Seq.seq item'0) =
    [%#span5] true
  
  predicate inv'10 (_x : Seq.seq item'0)
  
  axiom inv'10 : forall x : Seq.seq item'0 . inv'10 x = true
  
  type item'1
  
  predicate invariant'9 (self : Seq.seq item'1) =
    [%#span5] true
  
  predicate inv'9 (_x : Seq.seq item'1)
  
  axiom inv'9 : forall x : Seq.seq item'1 . inv'9 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'8 (self : borrowed b)
  
  predicate inv'8 (_x : borrowed b)
  
  axiom inv'8 : forall x : borrowed b . inv'8 x = true
  
  predicate invariant'7 (self : borrowed a)
  
  predicate inv'7 (_x : borrowed a)
  
  axiom inv'7 : forall x : borrowed a . inv'7 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'6 (self : Option'0.t_option (item'0, item'1)) =
    [%#span5] true
  
  predicate inv'6 (_x : Option'0.t_option (item'0, item'1))
  
  axiom inv'6 : forall x : Option'0.t_option (item'0, item'1) . inv'6 x = true
  
  predicate invariant'5 (self : Option'0.t_option item'1) =
    [%#span5] true
  
  predicate inv'5 (_x : Option'0.t_option item'1)
  
  axiom inv'5 : forall x : Option'0.t_option item'1 . inv'5 x = true
  
  predicate invariant'4 (self : item'0)
  
  predicate inv'4 (_x : item'0)
  
  axiom inv'4 : forall x : item'0 . inv'4 x = true
  
  use seq.Seq
  
  predicate inv'3 (_x : b)
  
  predicate produces'2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item'1) (o : b)
  
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : b) (ab : Seq.seq item'1) (b : b) (bc : Seq.seq item'1) (c : b) : ()
    
  
  axiom produces_trans'1_spec : forall a : b, ab : Seq.seq item'1, b : b, bc : Seq.seq item'1, c : b . ([%#span6] produces'2 a ab b)
   -> ([%#span7] produces'2 b bc c)
   -> ([%#span8] inv'3 a)
   -> ([%#span9] inv'9 ab)
   -> ([%#span10] inv'3 b)
   -> ([%#span11] inv'9 bc)  -> ([%#span12] inv'3 c)  -> ([%#span13] produces'2 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : b) : ()
  
  axiom produces_refl'1_spec : forall self : b . ([%#span14] inv'3 self)
   -> ([%#span15] produces'2 self (Seq.empty  : Seq.seq item'1) self)
  
  predicate invariant'3 (self : b)
  
  axiom inv'3 : forall x : b . inv'3 x = true
  
  predicate invariant'2 (self : Option'0.t_option item'0) =
    [%#span5] true
  
  predicate inv'2 (_x : Option'0.t_option item'0)
  
  axiom inv'2 : forall x : Option'0.t_option item'0 . inv'2 x = true
  
  use C12Zip_Zip_Type as Zip'0
  
  predicate invariant'1 (self : borrowed (Zip'0.t_zip a b)) =
    [%#span5] true
  
  predicate inv'1 (_x : borrowed (Zip'0.t_zip a b))
  
  axiom inv'1 : forall x : borrowed (Zip'0.t_zip a b) . inv'1 x = true
  
  use seq.Seq
  
  predicate inv'0 (_x : a)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item'0) (o : a)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : a) (ab : Seq.seq item'0) (b : a) (bc : Seq.seq item'0) (c : a) : ()
    
  
  axiom produces_trans'0_spec : forall a : a, ab : Seq.seq item'0, b : a, bc : Seq.seq item'0, c : a . ([%#span6] produces'1 a ab b)
   -> ([%#span7] produces'1 b bc c)
   -> ([%#span8] inv'0 a)
   -> ([%#span9] inv'10 ab)
   -> ([%#span10] inv'0 b)
   -> ([%#span11] inv'10 bc)  -> ([%#span12] inv'0 c)  -> ([%#span13] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : a) : ()
  
  axiom produces_refl'0_spec : forall self : a . ([%#span14] inv'0 self)
   -> ([%#span15] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate invariant'0 (self : a)
  
  axiom inv'0 : forall x : a . inv'0 x = true
  
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../12_zip.rs" 29 4 29 65] (self : Zip'0.t_zip a b) (visited : Seq.seq (item'0, item'1)) (tl : Zip'0.t_zip a b)
    
   =
    [%#span16] exists p2 : Seq.seq item'1 . exists p1 : Seq.seq item'0 . inv'9 p2
    /\ inv'10 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 (C12Zip_Zip_Type.zip_a self) p1 (C12Zip_Zip_Type.zip_a tl)
    /\ produces'2 (C12Zip_Zip_Type.zip_b self) p2 (C12Zip_Zip_Type.zip_b tl)
  
  use seq.Seq
  
  predicate completed'2 [#"../common.rs" 11 4 11 36] (self : borrowed b)
  
  predicate resolve'2 (self : item'0)
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed a)
  
  predicate completed'0 [#"../12_zip.rs" 19 4 19 35] (self : borrowed (Zip'0.t_zip a b)) =
    [%#span17] completed'1 (Borrow.borrow_logic (C12Zip_Zip_Type.zip_a ( * self)) (C12Zip_Zip_Type.zip_a ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C12Zip_Zip_Type.zip_b ( * self) = C12Zip_Zip_Type.zip_b ( ^ self)
    \/ (exists x : item'0 . inv'4 x
    /\ produces'1 (C12Zip_Zip_Type.zip_a ( * self)) (Seq.singleton x) (C12Zip_Zip_Type.zip_a ( ^ self))
    /\ resolve'2 x
    /\ completed'2 (Borrow.borrow_logic (C12Zip_Zip_Type.zip_b ( * self)) (C12Zip_Zip_Type.zip_b ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 2)))
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : Option'0.t_option item'1) =
    [%#span18] true
  
  use seq.Seq
  
  let rec next'1 (self:borrowed b) (return'  (ret:Option'0.t_option item'1))= {[@expl:precondition] [%#span19] inv'8 self}
    any
    [ return' (result:Option'0.t_option item'1)-> {[%#span21] inv'5 result}
      {[%#span20] match result with
        | Option'0.C_None -> completed'2 self
        | Option'0.C_Some v -> produces'2 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : Option'0.t_option item'0) =
    [%#span18] true
  
  predicate resolve'0 (self : borrowed (Zip'0.t_zip a b)) =
    [%#span22]  ^ self =  * self
  
  let rec next'0 (self:borrowed a) (return'  (ret:Option'0.t_option item'0))= {[@expl:precondition] [%#span19] inv'7 self}
    any
    [ return' (result:Option'0.t_option item'0)-> {[%#span21] inv'2 result}
      {[%#span20] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  let rec next (self:borrowed (Zip'0.t_zip a b)) (return'  (ret:Option'0.t_option (item'0, item'1)))= {[%#s12_zip2] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Zip'0.t_zip <a> <b> { * self}
          (fun (ra'0:a) (rb'0:b) ->
            Borrow.borrow_final <a> {ra'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed a) ->
                 [ &_5 <- _ret' ] 
                Zip'0.t_zip <a> <b> { * self}
                  (fun (l_a'0:a) (l_b'0:b) ->  [ &self <- { self with current = Zip'0.C_Zip ( ^ _5) l_b'0 ; } ] s1)))
      | s1 = -{inv'0 ( ^ _5)}- s2
      | s2 = next'0 {_5} (fun (_ret':Option'0.t_option item'0) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = any [ br0 -> {_4 = Option'0.C_None } (! bb3) | br1 (a:item'0)-> {_4 = Option'0.C_Some a} (! bb4) ] 
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[@expl:type invariant] inv'2 _4} s3
      | s3 = -{resolve'1 _4}- s4
      | s4 = {[%#s12_zip0] false} any ]
      
    | bb4 = s0
      [ s0 = Option'0.some <item'0> {_4}
          (fun (r0'0:item'0) ->
             [ &x1 <- r0'0 ] 
            (any
            [ any_ (_any:item'0)-> (! Option'0.some <item'0> {_4}
                (fun (l_0'0:item'0) ->  [ &_4 <- Option'0.C_Some _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 _4} s2
      | s2 = -{resolve'1 _4}- s3
      | s3 =  [ &x <- x1 ] (any [ any_ (_any:item'0)-> (!  [ &x1 <- _any ] s4) ] )
      | s4 = bb6 ]
      
    | bb6 = bb7
    | bb7 = s0
      [ s0 = Zip'0.t_zip <a> <b> { * self}
          (fun (ra'0:a) (rb'0:b) ->
            Borrow.borrow_final <b> {rb'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed b) ->
                 [ &_11 <- _ret' ] 
                Zip'0.t_zip <a> <b> { * self}
                  (fun (l_a'0:a) (l_b'0:b) ->  [ &self <- { self with current = Zip'0.C_Zip l_a'0 ( ^ _11) ; } ] s1)))
      | s1 = -{inv'3 ( ^ _11)}- s2
      | s2 = next'1 {_11} (fun (_ret':Option'0.t_option item'1) ->  [ &_10 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = any [ br0 -> {_10 = Option'0.C_None } (! bb10) | br1 (a:item'1)-> {_10 = Option'0.C_Some a} (! bb11) ]  ]
      
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'4 x} s1
      | s1 = -{resolve'2 x}- s2
      | s2 = {[@expl:type invariant] inv'5 _10} s3
      | s3 = -{resolve'3 _10}- s4
      | s4 = {[%#s12_zip1] false} any ]
      
    | bb11 = s0
      [ s0 = Option'0.some <item'1> {_10}
          (fun (r0'0:item'1) ->
             [ &y1 <- r0'0 ] 
            (any
            [ any_ (_any:item'1)-> (! Option'0.some <item'1> {_10}
                (fun (l_0'0:item'1) ->  [ &_10 <- Option'0.C_Some _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'5 _10} s2
      | s2 = -{resolve'3 _10}- s3
      | s3 =  [ &y <- y1 ] (any [ any_ (_any:item'1)-> (!  [ &y1 <- _any ] s4) ] )
      | s4 = bb13 ]
      
    | bb13 = bb14
    | bb14 = s0
      [ s0 =  [ &_15 <- (x, y) ] 
        (any [ any_ (_any:item'0)-> (!  [ &x <- _any ] (any [ any_ (_any:item'1)-> (!  [ &y <- _any ] s1) ] )) ] )
      | s1 = bb15 ]
      
    | bb15 = bb16
    | bb16 = s0
      [ s0 =  [ &_0 <- Option'0.C_Some _15 ] (any [ any_ (_any:(item'0, item'1))-> (!  [ &_15 <- _any ] s1) ] )
      | s1 = bb17 ]
      
    | bb17 = bb18
    | bb18 = bb19
    | bb19 = bb23
    | bb10 = bb12
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv'5 _10} s1
      | s1 = -{resolve'3 _10}- s2
      | s2 = {[@expl:type invariant] inv'4 x} s3
      | s3 = -{resolve'2 x}- s4
      | s4 =  [ &_0 <- Option'0.C_None ] s5
      | s5 = bb20 ]
      
    | bb20 = bb22
    | bb3 = bb5
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'2 _4} s1
      | s1 = -{resolve'1 _4}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'0 self}- s4
      | s4 =  [ &_0 <- Option'0.C_None ] s5
      | s5 = bb21 ]
      
    | bb21 = bb22
    | bb22 = bb23
    | bb23 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option (item'0, item'1) = any_l ()
    | & self : borrowed (Zip'0.t_zip a b) = self
    | & x : item'0 = any_l ()
    | & _4 : Option'0.t_option item'0 = any_l ()
    | & _5 : borrowed a = any_l ()
    | & x1 : item'0 = any_l ()
    | & y : item'1 = any_l ()
    | & _10 : Option'0.t_option item'1 = any_l ()
    | & _11 : borrowed b = any_l ()
    | & y1 : item'1 = any_l ()
    | & _15 : (item'0, item'1) = any_l () ]
    
    [ return' (result:Option'0.t_option (item'0, item'1))-> {[@expl:postcondition] [%#s12_zip4] inv'6 result}
      {[@expl:postcondition] [%#s12_zip3] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C12Zip_Impl0
  type a
  
  type b
  
  let%span s12_zip0 = "../12_zip.rs" 55 4 55 44
  
  let%span s12_zip1 = "../12_zip.rs" 42 4 42 26
  
  let%span s12_zip2 = "../12_zip.rs" 49 4 49 90
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../12_zip.rs" 30 8 36 9
  
  let%span span5 = "../12_zip.rs" 21 13 23 67
  
  type item'0
  
  use seq.Seq
  
  predicate invariant'6 (self : Seq.seq item'0) =
    [%#span3] true
  
  predicate inv'6 (_x : Seq.seq item'0)
  
  axiom inv'6 : forall x : Seq.seq item'0 . inv'6 x = true
  
  type item'1
  
  predicate invariant'5 (self : Seq.seq item'1) =
    [%#span3] true
  
  predicate inv'5 (_x : Seq.seq item'1)
  
  axiom inv'5 : forall x : Seq.seq item'1 . inv'5 x = true
  
  predicate invariant'4 (self : item'0)
  
  predicate inv'4 (_x : item'0)
  
  axiom inv'4 : forall x : item'0 . inv'4 x = true
  
  predicate invariant'3 (self : Seq.seq (item'0, item'1)) =
    [%#span3] true
  
  predicate inv'3 (_x : Seq.seq (item'0, item'1))
  
  axiom inv'3 : forall x : Seq.seq (item'0, item'1) . inv'3 x = true
  
  use C12Zip_Zip_Type as Zip'0
  
  predicate invariant'2 (self : Zip'0.t_zip a b) =
    [%#span3] true
  
  predicate inv'2 (_x : Zip'0.t_zip a b)
  
  axiom inv'2 : forall x : Zip'0.t_zip a b . inv'2 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'1 (self : Option'0.t_option (item'0, item'1)) =
    [%#span3] true
  
  predicate inv'1 (_x : Option'0.t_option (item'0, item'1))
  
  axiom inv'1 : forall x : Option'0.t_option (item'0, item'1) . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Zip'0.t_zip a b)) =
    [%#span3] true
  
  predicate inv'0 (_x : borrowed (Zip'0.t_zip a b))
  
  axiom inv'0 : forall x : borrowed (Zip'0.t_zip a b) . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item'1) (o : b)
  
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item'0) (o : a)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../12_zip.rs" 29 4 29 65] (self : Zip'0.t_zip a b) (visited : Seq.seq (item'0, item'1)) (tl : Zip'0.t_zip a b)
    
   =
    [%#span4] exists p2 : Seq.seq item'1 . exists p1 : Seq.seq item'0 . inv'5 p2
    /\ inv'6 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 (C12Zip_Zip_Type.zip_a self) p1 (C12Zip_Zip_Type.zip_a tl)
    /\ produces'2 (C12Zip_Zip_Type.zip_b self) p2 (C12Zip_Zip_Type.zip_b tl)
  
  use seq.Seq
  
  predicate completed'2 [#"../common.rs" 11 4 11 36] (self : borrowed b)
  
  predicate resolve'0 (self : item'0)
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed a)
  
  predicate completed'0 [#"../12_zip.rs" 19 4 19 35] (self : borrowed (Zip'0.t_zip a b)) =
    [%#span5] completed'1 (Borrow.borrow_logic (C12Zip_Zip_Type.zip_a ( * self)) (C12Zip_Zip_Type.zip_a ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C12Zip_Zip_Type.zip_b ( * self) = C12Zip_Zip_Type.zip_b ( ^ self)
    \/ (exists x : item'0 . inv'4 x
    /\ produces'1 (C12Zip_Zip_Type.zip_a ( * self)) (Seq.singleton x) (C12Zip_Zip_Type.zip_a ( ^ self))
    /\ resolve'0 x
    /\ completed'2 (Borrow.borrow_logic (C12Zip_Zip_Type.zip_b ( * self)) (C12Zip_Zip_Type.zip_b ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 2)))
  
  goal next_refn : [%#s12_zip0] forall self : borrowed (Zip'0.t_zip a b) . inv'0 self
   -> inv'0 self
  /\ (forall result : Option'0.t_option (item'0, item'1) . inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  
  goal produces_refl_refn : [%#s12_zip1] forall self : Zip'0.t_zip a b . inv'2 self
   -> inv'2 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq (item'0, item'1)) self
   -> produces'0 self (Seq.empty  : Seq.seq (item'0, item'1)) self)
  
  goal produces_trans_refn : [%#s12_zip2] forall a : Zip'0.t_zip a b . forall ab : Seq.seq (item'0, item'1) . forall b : Zip'0.t_zip a b . forall bc : Seq.seq (item'0, item'1) . forall c : Zip'0.t_zip a b . inv'2 c
  /\ inv'3 bc /\ inv'2 b /\ inv'3 ab /\ inv'2 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'2 c
  /\ inv'3 bc
  /\ inv'2 b
  /\ inv'3 ab
  /\ inv'2 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
