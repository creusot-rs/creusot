
module C12Zip_Zip_Type
  type t_zip 'a 'b =
    | C_Zip 'a 'b
    
  function any_l (_ : 'b) : 'a
  let rec t_zip < 'a > < 'b > (input:t_zip 'a 'b) (ret  (a:'a) (b:'b))= any
    [ good (a:'a) (b:'b)-> {C_Zip a b = input} (! ret {a} {b}) | bad (a:'a) (b:'b)-> {C_Zip a b <> input} {false} any ]
    
  function zip_a (self : t_zip 'a 'b) : 'a =
    match self with
      | C_Zip a _ -> a
      end
  function zip_b (self : t_zip 'a 'b) : 'b =
    match self with
      | C_Zip _ a -> a
      end
end
module C12Zip_Impl0_ProducesRefl_Impl
  type a
  type b
  predicate invariant'4 (self : b)
  let rec invariant'4 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : b)
  let rec inv'4 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : b . inv'4 x = true
  predicate invariant'3 (self : a)
  let rec invariant'3 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : a)
  let rec inv'3 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : a . inv'3 x = true
  type item'0
  use seq.Seq
  predicate invariant'2 (self : Seq.seq item'0)
  let rec invariant'2 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Seq.seq item'0)
  let rec inv'2 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Seq.seq item'0 . inv'2 x = true
  type item'1
  predicate invariant'1 (self : Seq.seq item'1)
  let rec invariant'1 (self:Seq.seq item'1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq item'1)
  let rec inv'1 (_x:Seq.seq item'1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq item'1 . inv'1 x = true
  use seq.Seq
  predicate produces'2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item'1) (o : b)
  let rec produces'2 (self:b) (visited:Seq.seq item'1) (o:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'2 self visited o} (! return' {result}) ]
    
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : b) (ab : Seq.seq item'1) (b : b) (bc : Seq.seq item'1) (c : b) : ()
    
  let rec produces_trans'1 (a:b) (ab:Seq.seq item'1) (b:b) (bc:Seq.seq item'1) (c:b) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'4 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'1 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'4 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'1 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'4 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'2 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'2 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : b, ab : Seq.seq item'1, b : b, bc : Seq.seq item'1, c : b . ([#"../common.rs" 18 15 18 32] produces'2 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'2 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'4 a)
   -> ([#"../common.rs" 21 31 21 33] inv'1 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'4 b)
   -> ([#"../common.rs" 21 61 21 63] inv'1 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'4 c)  -> ([#"../common.rs" 20 14 20 42] produces'2 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : b) : ()
  let rec produces_refl'1 (self:b) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'4 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : b . ([#"../common.rs" 15 21 15 25] inv'4 self)
   -> ([#"../common.rs" 14 14 14 45] produces'2 self (Seq.empty  : Seq.seq item'1) self)
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item'0) (o : a)
  let rec produces'1 (self:a) (visited:Seq.seq item'0) (o:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : a) (ab : Seq.seq item'0) (b : a) (bc : Seq.seq item'0) (c : a) : ()
    
  let rec produces_trans'0 (a:a) (ab:Seq.seq item'0) (b:a) (bc:Seq.seq item'0) (c:a) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'3 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'2 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'3 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'2 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'3 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : a, ab : Seq.seq item'0, b : a, bc : Seq.seq item'0, c : a . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'3 a)
   -> ([#"../common.rs" 21 31 21 33] inv'2 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'3 b)
   -> ([#"../common.rs" 21 61 21 63] inv'2 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'3 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : a) : ()
  let rec produces_refl'0 (self:a) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'3 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : a . ([#"../common.rs" 15 21 15 25] inv'3 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate invariant'0 (self : C12Zip_Zip_Type.t_zip a b)
  let rec invariant'0 (self:C12Zip_Zip_Type.t_zip a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C12Zip_Zip_Type.t_zip a b)
  let rec inv'0 (_x:C12Zip_Zip_Type.t_zip a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C12Zip_Zip_Type.t_zip a b . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (item'0, item'1)) (tl : C12Zip_Zip_Type.t_zip a b)
    
   =
    [#"../12_zip.rs" 29 8 35 9] exists p2 : Seq.seq item'1 . exists p1 : Seq.seq item'0 . inv'1 p2
    /\ inv'2 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 (C12Zip_Zip_Type.zip_a self) p1 (C12Zip_Zip_Type.zip_a tl)
    /\ produces'2 (C12Zip_Zip_Type.zip_b self) p2 (C12Zip_Zip_Type.zip_b tl)
  let rec produces'0 (self:C12Zip_Zip_Type.t_zip a b) (visited:Seq.seq (item'0, item'1)) (tl:C12Zip_Zip_Type.t_zip a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  use seq.Seq
  constant self  : C12Zip_Zip_Type.t_zip a b
  function produces_refl [#"../12_zip.rs" 41 4 41 26] (self : C12Zip_Zip_Type.t_zip a b) : ()
  goal vc_produces_refl : ([#"../12_zip.rs" 41 21 41 25] inv'0 self)
   -> ([#"../12_zip.rs" 40 14 40 45] produces'0 self (Seq.empty  : Seq.seq (item'0, item'1)) self)
end
module C12Zip_Impl0_ProducesTrans_Impl
  type a
  type b
  predicate invariant'5 (self : b)
  let rec invariant'5 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : b)
  let rec inv'5 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ] 
  axiom inv'5 : forall x : b . inv'5 x = true
  predicate invariant'4 (self : a)
  let rec invariant'4 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : a)
  let rec inv'4 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : a . inv'4 x = true
  type item'0
  use seq.Seq
  predicate invariant'3 (self : Seq.seq item'0)
  let rec invariant'3 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq item'0)
  let rec inv'3 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq item'0 . inv'3 x = true
  type item'1
  predicate invariant'2 (self : Seq.seq item'1)
  let rec invariant'2 (self:Seq.seq item'1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Seq.seq item'1)
  let rec inv'2 (_x:Seq.seq item'1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Seq.seq item'1 . inv'2 x = true
  use seq.Seq
  predicate produces'2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item'1) (o : b)
  let rec produces'2 (self:b) (visited:Seq.seq item'1) (o:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'2 self visited o} (! return' {result}) ]
    
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : b) (ab : Seq.seq item'1) (b : b) (bc : Seq.seq item'1) (c : b) : ()
    
  let rec produces_trans'1 (a:b) (ab:Seq.seq item'1) (b:b) (bc:Seq.seq item'1) (c:b) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'5 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'2 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'5 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'2 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'5 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'2 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'2 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : b, ab : Seq.seq item'1, b : b, bc : Seq.seq item'1, c : b . ([#"../common.rs" 18 15 18 32] produces'2 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'2 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'5 a)
   -> ([#"../common.rs" 21 31 21 33] inv'2 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'5 b)
   -> ([#"../common.rs" 21 61 21 63] inv'2 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'5 c)  -> ([#"../common.rs" 20 14 20 42] produces'2 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : b) : ()
  let rec produces_refl'1 (self:b) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'5 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : b . ([#"../common.rs" 15 21 15 25] inv'5 self)
   -> ([#"../common.rs" 14 14 14 45] produces'2 self (Seq.empty  : Seq.seq item'1) self)
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item'0) (o : a)
  let rec produces'1 (self:a) (visited:Seq.seq item'0) (o:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : a) (ab : Seq.seq item'0) (b : a) (bc : Seq.seq item'0) (c : a) : ()
    
  let rec produces_trans'0 (a:a) (ab:Seq.seq item'0) (b:a) (bc:Seq.seq item'0) (c:a) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'4 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'3 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'4 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'3 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'4 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : a, ab : Seq.seq item'0, b : a, bc : Seq.seq item'0, c : a . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'4 a)
   -> ([#"../common.rs" 21 31 21 33] inv'3 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'4 b)
   -> ([#"../common.rs" 21 61 21 63] inv'3 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'4 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : a) : ()
  let rec produces_refl'0 (self:a) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'4 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : a . ([#"../common.rs" 15 21 15 25] inv'4 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'1 (self : Seq.seq (item'0, item'1))
  let rec invariant'1 (self:Seq.seq (item'0, item'1)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq (item'0, item'1))
  let rec inv'1 (_x:Seq.seq (item'0, item'1)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq (item'0, item'1) . inv'1 x = true
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate invariant'0 (self : C12Zip_Zip_Type.t_zip a b)
  let rec invariant'0 (self:C12Zip_Zip_Type.t_zip a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C12Zip_Zip_Type.t_zip a b)
  let rec inv'0 (_x:C12Zip_Zip_Type.t_zip a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C12Zip_Zip_Type.t_zip a b . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (item'0, item'1)) (tl : C12Zip_Zip_Type.t_zip a b)
    
   =
    [#"../12_zip.rs" 29 8 35 9] exists p2 : Seq.seq item'1 . exists p1 : Seq.seq item'0 . inv'2 p2
    /\ inv'3 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 (C12Zip_Zip_Type.zip_a self) p1 (C12Zip_Zip_Type.zip_a tl)
    /\ produces'2 (C12Zip_Zip_Type.zip_b self) p2 (C12Zip_Zip_Type.zip_b tl)
  let rec produces'0 (self:C12Zip_Zip_Type.t_zip a b) (visited:Seq.seq (item'0, item'1)) (tl:C12Zip_Zip_Type.t_zip a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  constant a  : C12Zip_Zip_Type.t_zip a b
  constant ab  : Seq.seq (item'0, item'1)
  constant b  : C12Zip_Zip_Type.t_zip a b
  constant bc  : Seq.seq (item'0, item'1)
  constant c  : C12Zip_Zip_Type.t_zip a b
  function produces_trans [#"../12_zip.rs" 48 4 48 90] (a : C12Zip_Zip_Type.t_zip a b) (ab : Seq.seq (item'0, item'1)) (b : C12Zip_Zip_Type.t_zip a b) (bc : Seq.seq (item'0, item'1)) (c : C12Zip_Zip_Type.t_zip a b) : ()
    
  goal vc_produces_trans : ([#"../12_zip.rs" 48 82 48 83] inv'0 c)
   -> ([#"../12_zip.rs" 48 61 48 63] inv'1 bc)
   -> ([#"../12_zip.rs" 48 52 48 53] inv'0 b)
   -> ([#"../12_zip.rs" 48 31 48 33] inv'1 ab)
   -> ([#"../12_zip.rs" 48 22 48 23] inv'0 a)
   -> ([#"../12_zip.rs" 46 15 46 32] produces'0 b bc c)
   -> ([#"../12_zip.rs" 45 15 45 32] produces'0 a ab b)
   -> ([#"../12_zip.rs" 47 14 47 42] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C12Zip_Impl0_Next
  type a
  type b
  type item'0
  use seq.Seq
  predicate invariant'10 (self : Seq.seq item'0)
  let rec invariant'10 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : Seq.seq item'0)
  let rec inv'10 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : Seq.seq item'0 . inv'10 x = true
  type item'1
  predicate invariant'9 (self : Seq.seq item'1)
  let rec invariant'9 (self:Seq.seq item'1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : Seq.seq item'1)
  let rec inv'9 (_x:Seq.seq item'1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : Seq.seq item'1 . inv'9 x = true
  use prelude.Borrow
  predicate invariant'8 (self : borrowed b)
  let rec invariant'8 (self:borrowed b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : borrowed b)
  let rec inv'8 (_x:borrowed b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : borrowed b . inv'8 x = true
  predicate invariant'7 (self : borrowed a)
  let rec invariant'7 (self:borrowed a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : borrowed a)
  let rec inv'7 (_x:borrowed a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : borrowed a . inv'7 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'6 (self : Core_Option_Option_Type.t_option (item'0, item'1))
  let rec invariant'6 (self:Core_Option_Option_Type.t_option (item'0, item'1)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Core_Option_Option_Type.t_option (item'0, item'1))
  let rec inv'6 (_x:Core_Option_Option_Type.t_option (item'0, item'1)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Core_Option_Option_Type.t_option (item'0, item'1) . inv'6 x = true
  predicate invariant'5 (self : Core_Option_Option_Type.t_option item'1)
  let rec invariant'5 (self:Core_Option_Option_Type.t_option item'1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Core_Option_Option_Type.t_option item'1)
  let rec inv'5 (_x:Core_Option_Option_Type.t_option item'1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Core_Option_Option_Type.t_option item'1 . inv'5 x = true
  predicate invariant'4 (self : item'0)
  let rec invariant'4 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : item'0)
  let rec inv'4 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : item'0 . inv'4 x = true
  use seq.Seq
  predicate inv'3 (_x : b)
  let rec inv'3 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  predicate produces'2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item'1) (o : b)
  let rec produces'2 (self:b) (visited:Seq.seq item'1) (o:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'2 self visited o} (! return' {result}) ]
    
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : b) (ab : Seq.seq item'1) (b : b) (bc : Seq.seq item'1) (c : b) : ()
    
  let rec produces_trans'1 (a:b) (ab:Seq.seq item'1) (b:b) (bc:Seq.seq item'1) (c:b) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'3 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'9 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'3 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'9 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'3 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'2 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'2 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : b, ab : Seq.seq item'1, b : b, bc : Seq.seq item'1, c : b . ([#"../common.rs" 18 15 18 32] produces'2 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'2 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'3 a)
   -> ([#"../common.rs" 21 31 21 33] inv'9 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'3 b)
   -> ([#"../common.rs" 21 61 21 63] inv'9 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'3 c)  -> ([#"../common.rs" 20 14 20 42] produces'2 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : b) : ()
  let rec produces_refl'1 (self:b) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'3 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : b . ([#"../common.rs" 15 21 15 25] inv'3 self)
   -> ([#"../common.rs" 14 14 14 45] produces'2 self (Seq.empty  : Seq.seq item'1) self)
  predicate invariant'3 (self : b)
  let rec invariant'3 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : b . inv'3 x = true
  predicate invariant'2 (self : Core_Option_Option_Type.t_option item'0)
  let rec invariant'2 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option item'0)
  let rec inv'2 (_x:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option item'0 . inv'2 x = true
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate invariant'1 (self : borrowed (C12Zip_Zip_Type.t_zip a b))
  let rec invariant'1 (self:borrowed (C12Zip_Zip_Type.t_zip a b)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (C12Zip_Zip_Type.t_zip a b))
  let rec inv'1 (_x:borrowed (C12Zip_Zip_Type.t_zip a b)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (C12Zip_Zip_Type.t_zip a b) . inv'1 x = true
  use seq.Seq
  predicate inv'0 (_x : a)
  let rec inv'0 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item'0) (o : a)
  let rec produces'1 (self:a) (visited:Seq.seq item'0) (o:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : a) (ab : Seq.seq item'0) (b : a) (bc : Seq.seq item'0) (c : a) : ()
    
  let rec produces_trans'0 (a:a) (ab:Seq.seq item'0) (b:a) (bc:Seq.seq item'0) (c:a) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'0 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'10 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'0 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'10 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'0 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : a, ab : Seq.seq item'0, b : a, bc : Seq.seq item'0, c : a . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'0 a)
   -> ([#"../common.rs" 21 31 21 33] inv'10 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'0 b)
   -> ([#"../common.rs" 21 61 21 63] inv'10 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'0 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : a) : ()
  let rec produces_refl'0 (self:a) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : a . ([#"../common.rs" 15 21 15 25] inv'0 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'0 (self : a)
  let rec invariant'0 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : a . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (item'0, item'1)) (tl : C12Zip_Zip_Type.t_zip a b)
    
   =
    [#"../12_zip.rs" 29 8 35 9] exists p2 : Seq.seq item'1 . exists p1 : Seq.seq item'0 . inv'9 p2
    /\ inv'10 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 (C12Zip_Zip_Type.zip_a self) p1 (C12Zip_Zip_Type.zip_a tl)
    /\ produces'2 (C12Zip_Zip_Type.zip_b self) p2 (C12Zip_Zip_Type.zip_b tl)
  let rec produces'0 (self:C12Zip_Zip_Type.t_zip a b) (visited:Seq.seq (item'0, item'1)) (tl:C12Zip_Zip_Type.t_zip a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  use seq.Seq
  predicate completed'2 [#"../common.rs" 11 4 11 36] (self : borrowed b)
  let rec completed'2 (self:borrowed b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'2 self} (! return' {result}) ]
    
  predicate resolve'2 (self : item'0)
  let rec resolve'2 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use seq.Seq
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed a)
  let rec completed'1 (self:borrowed a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate completed'0 [#"../12_zip.rs" 18 4 18 35] (self : borrowed (C12Zip_Zip_Type.t_zip a b)) =
    [#"../12_zip.rs" 20 13 22 67] completed'1 (Borrow.borrow_logic (C12Zip_Zip_Type.zip_a ( * self)) (C12Zip_Zip_Type.zip_a ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C12Zip_Zip_Type.zip_b ( * self) = C12Zip_Zip_Type.zip_b ( ^ self)
    \/ (exists x : item'0 . inv'4 x
    /\ produces'1 (C12Zip_Zip_Type.zip_a ( * self)) (Seq.singleton x) (C12Zip_Zip_Type.zip_a ( ^ self))
    /\ resolve'2 x
    /\ completed'2 (Borrow.borrow_logic (C12Zip_Zip_Type.zip_b ( * self)) (C12Zip_Zip_Type.zip_b ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 2)))
  let rec completed'0 (self:borrowed (C12Zip_Zip_Type.t_zip a b)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'3 (self : Core_Option_Option_Type.t_option item'1)
  let rec resolve'3 (self:Core_Option_Option_Type.t_option item'1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  use seq.Seq
  let rec next'1 (self:borrowed b) (return'  (ret:Core_Option_Option_Type.t_option item'1))= {[@expl:precondition] [#"../common.rs" 27 17 27 21] inv'8 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option item'1)-> {[#"../common.rs" 27 26 27 44] inv'5 result}
      {[#"../common.rs" 23 14 26 5] match result with
        | Core_Option_Option_Type.C_None -> completed'2 self
        | Core_Option_Option_Type.C_Some v -> produces'2 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  predicate resolve'1 (self : Core_Option_Option_Type.t_option item'0)
  let rec resolve'1 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (C12Zip_Zip_Type.t_zip a b)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C12Zip_Zip_Type.t_zip a b)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed a) (return'  (ret:Core_Option_Option_Type.t_option item'0))= {[@expl:precondition] [#"../common.rs" 27 17 27 21] inv'7 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option item'0)-> {[#"../common.rs" 27 26 27 44] inv'2 result}
      {[#"../common.rs" 23 14 26 5] match result with
        | Core_Option_Option_Type.C_None -> completed'1 self
        | Core_Option_Option_Type.C_Some v -> produces'1 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  let rec next (self:borrowed (C12Zip_Zip_Type.t_zip a b)) (return'  (ret:Core_Option_Option_Type.t_option (item'0, item'1)))= {[#"../12_zip.rs" 54 17 54 21] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = C12Zip_Zip_Type.t_zip <a> <b> { * self}
          (fun (ra'0:a) (rb'0:b) ->
            Borrow.borrow_final <a> {ra'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed a) ->
                 [ &_5 <- _ret' ] 
                C12Zip_Zip_Type.t_zip <a> <b> { * self}
                  (fun (l_a'0:a) (l_b'0:b) ->
                    
                    [ &self <- { self with current = (C12Zip_Zip_Type.C_Zip ( ^ _5) l_b'0 : C12Zip_Zip_Type.t_zip a b) ; } ]
                    
                    s1)))
      | s1 = -{inv'0 ( ^ _5)}- s2
      | s2 = next'0 {_5} (fun (_ret':Core_Option_Option_Type.t_option item'0) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = any
        [ br0 -> {_4 = Core_Option_Option_Type.C_None } (! bb3)
        | br1 (a:item'0)-> {_4 = Core_Option_Option_Type.C_Some a} (! bb4) ]
         ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[@expl:type invariant] inv'2 _4} s3
      | s3 = -{resolve'1 _4}- s4
      | s4 = {[#"../12_zip.rs" 55 22 55 35] false} any ]
      
    | bb4 = s0
      [ s0 = Core_Option_Option_Type.some <item'0> {_4}
          (fun (r0'0:item'0) ->
             [ &x1 <- r0'0 ] 
            (any
            [ any_ (_any:item'0)-> (! Core_Option_Option_Type.some <item'0> {_4}
                (fun (l_0'0:item'0) ->
                   [ &_4 <- Core_Option_Option_Type.C_Some _any : Core_Option_Option_Type.t_option item'0 ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 _4} s2
      | s2 = -{resolve'1 _4}- s3
      | s3 =  [ &x <- x1 ] (any [ any_ (_any:item'0)-> (!  [ &x1 <- _any ] s4) ] )
      | s4 = bb6 ]
      
    | bb6 = s0 [ s0 = bb7 ] 
    | bb7 = s0
      [ s0 = C12Zip_Zip_Type.t_zip <a> <b> { * self}
          (fun (ra'0:a) (rb'0:b) ->
            Borrow.borrow_final <b> {rb'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed b) ->
                 [ &_11 <- _ret' ] 
                C12Zip_Zip_Type.t_zip <a> <b> { * self}
                  (fun (l_a'0:a) (l_b'0:b) ->
                    
                    [ &self <- { self with current = (C12Zip_Zip_Type.C_Zip l_a'0 ( ^ _11) : C12Zip_Zip_Type.t_zip a b) ; } ]
                    
                    s1)))
      | s1 = -{inv'3 ( ^ _11)}- s2
      | s2 = next'1 {_11} (fun (_ret':Core_Option_Option_Type.t_option item'1) ->  [ &_10 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = any
        [ br0 -> {_10 = Core_Option_Option_Type.C_None } (! bb10)
        | br1 (a:item'1)-> {_10 = Core_Option_Option_Type.C_Some a} (! bb11) ]
         ]
      
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'4 x} s1
      | s1 = -{resolve'2 x}- s2
      | s2 = {[@expl:type invariant] inv'5 _10} s3
      | s3 = -{resolve'3 _10}- s4
      | s4 = {[#"../12_zip.rs" 59 22 59 35] false} any ]
      
    | bb11 = s0
      [ s0 = Core_Option_Option_Type.some <item'1> {_10}
          (fun (r0'0:item'1) ->
             [ &y1 <- r0'0 ] 
            (any
            [ any_ (_any:item'1)-> (! Core_Option_Option_Type.some <item'1> {_10}
                (fun (l_0'0:item'1) ->
                   [ &_10 <- Core_Option_Option_Type.C_Some _any : Core_Option_Option_Type.t_option item'1 ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'5 _10} s2
      | s2 = -{resolve'3 _10}- s3
      | s3 =  [ &y <- y1 ] (any [ any_ (_any:item'1)-> (!  [ &y1 <- _any ] s4) ] )
      | s4 = bb13 ]
      
    | bb13 = s0 [ s0 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &_15 <- (x, y) ] 
        (any [ any_ (_any:item'0)-> (!  [ &x <- _any ] (any [ any_ (_any:item'1)-> (!  [ &y <- _any ] s1) ] )) ] )
      | s1 = bb15 ]
      
    | bb15 = s0 [ s0 = bb16 ] 
    | bb16 = s0
      [ s0 =  [ &_0 <- Core_Option_Option_Type.C_Some _15 : Core_Option_Option_Type.t_option (item'0, item'1) ] 
        (any [ any_ (_any:(item'0, item'1))-> (!  [ &_15 <- _any ] s1) ] )
      | s1 = bb17 ]
      
    | bb17 = s0 [ s0 = bb18 ] 
    | bb18 = s0 [ s0 = bb19 ] 
    | bb19 = s0 [ s0 = bb23 ] 
    | bb10 = s0 [ s0 = bb12 ] 
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv'5 _10} s1
      | s1 = -{resolve'3 _10}- s2
      | s2 = {[@expl:type invariant] inv'4 x} s3
      | s3 = -{resolve'2 x}- s4
      | s4 =  [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option (item'0, item'1) ] s5
      | s5 = bb20 ]
      
    | bb20 = s0 [ s0 = bb22 ] 
    | bb3 = s0 [ s0 = bb5 ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'2 _4} s1
      | s1 = -{resolve'1 _4}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'0 self}- s4
      | s4 =  [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option (item'0, item'1) ] s5
      | s5 = bb21 ]
      
    | bb21 = s0 [ s0 = bb22 ] 
    | bb22 = s0 [ s0 = bb23 ] 
    | bb23 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option (item'0, item'1) = any_l () : Core_Option_Option_Type.t_option (item'0, item'1)
    | & self : borrowed (C12Zip_Zip_Type.t_zip a b) = self
    | & x : item'0 = any_l () : item'0
    | & _4 : Core_Option_Option_Type.t_option item'0 = any_l () : Core_Option_Option_Type.t_option item'0
    | & _5 : borrowed a = any_l () : borrowed a
    | & x1 : item'0 = any_l () : item'0
    | & y : item'1 = any_l () : item'1
    | & _10 : Core_Option_Option_Type.t_option item'1 = any_l () : Core_Option_Option_Type.t_option item'1
    | & _11 : borrowed b = any_l () : borrowed b
    | & y1 : item'1 = any_l () : item'1
    | & _15 : (item'0, item'1) = any_l () : (item'0, item'1) ]
    
    [ return' (result:Core_Option_Option_Type.t_option (item'0, item'1))-> {[@expl:postcondition] [#"../12_zip.rs" 54 26 54 44] inv'6 result}
      {[@expl:postcondition] [#"../12_zip.rs" 50 14 53 5] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C12Zip_Impl0
  type a
  type b
  type item'0
  use seq.Seq
  predicate invariant'6 (self : Seq.seq item'0)
  let rec invariant'6 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq item'0)
  let rec inv'6 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq item'0 . inv'6 x = true
  type item'1
  predicate invariant'5 (self : Seq.seq item'1)
  let rec invariant'5 (self:Seq.seq item'1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq item'1)
  let rec inv'5 (_x:Seq.seq item'1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq item'1 . inv'5 x = true
  predicate invariant'4 (self : item'0)
  let rec invariant'4 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : item'0)
  let rec inv'4 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : item'0 . inv'4 x = true
  predicate invariant'3 (self : Seq.seq (item'0, item'1))
  let rec invariant'3 (self:Seq.seq (item'0, item'1)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq (item'0, item'1))
  let rec inv'3 (_x:Seq.seq (item'0, item'1)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq (item'0, item'1) . inv'3 x = true
  use C12Zip_Zip_Type as C12Zip_Zip_Type
  predicate invariant'2 (self : C12Zip_Zip_Type.t_zip a b)
  let rec invariant'2 (self:C12Zip_Zip_Type.t_zip a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : C12Zip_Zip_Type.t_zip a b)
  let rec inv'2 (_x:C12Zip_Zip_Type.t_zip a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : C12Zip_Zip_Type.t_zip a b . inv'2 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'1 (self : Core_Option_Option_Type.t_option (item'0, item'1))
  let rec invariant'1 (self:Core_Option_Option_Type.t_option (item'0, item'1)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Core_Option_Option_Type.t_option (item'0, item'1))
  let rec inv'1 (_x:Core_Option_Option_Type.t_option (item'0, item'1)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Core_Option_Option_Type.t_option (item'0, item'1) . inv'1 x = true
  use prelude.Borrow
  predicate invariant'0 (self : borrowed (C12Zip_Zip_Type.t_zip a b))
  let rec invariant'0 (self:borrowed (C12Zip_Zip_Type.t_zip a b)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed (C12Zip_Zip_Type.t_zip a b))
  let rec inv'0 (_x:borrowed (C12Zip_Zip_Type.t_zip a b)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed (C12Zip_Zip_Type.t_zip a b) . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'2 [#"../common.rs" 8 4 8 65] (self : b) (visited : Seq.seq item'1) (o : b)
  let rec produces'2 (self:b) (visited:Seq.seq item'1) (o:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'2 self visited o} (! return' {result}) ]
    
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : a) (visited : Seq.seq item'0) (o : a)
  let rec produces'1 (self:a) (visited:Seq.seq item'0) (o:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [#"../12_zip.rs" 28 4 28 65] (self : C12Zip_Zip_Type.t_zip a b) (visited : Seq.seq (item'0, item'1)) (tl : C12Zip_Zip_Type.t_zip a b)
    
   =
    [#"../12_zip.rs" 29 8 35 9] exists p2 : Seq.seq item'1 . exists p1 : Seq.seq item'0 . inv'5 p2
    /\ inv'6 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces'1 (C12Zip_Zip_Type.zip_a self) p1 (C12Zip_Zip_Type.zip_a tl)
    /\ produces'2 (C12Zip_Zip_Type.zip_b self) p2 (C12Zip_Zip_Type.zip_b tl)
  let rec produces'0 (self:C12Zip_Zip_Type.t_zip a b) (visited:Seq.seq (item'0, item'1)) (tl:C12Zip_Zip_Type.t_zip a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  use seq.Seq
  predicate completed'2 [#"../common.rs" 11 4 11 36] (self : borrowed b)
  let rec completed'2 (self:borrowed b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'2 self} (! return' {result}) ]
    
  predicate resolve'0 (self : item'0)
  let rec resolve'0 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use seq.Seq
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed a)
  let rec completed'1 (self:borrowed a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate completed'0 [#"../12_zip.rs" 18 4 18 35] (self : borrowed (C12Zip_Zip_Type.t_zip a b)) =
    [#"../12_zip.rs" 20 13 22 67] completed'1 (Borrow.borrow_logic (C12Zip_Zip_Type.zip_a ( * self)) (C12Zip_Zip_Type.zip_a ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C12Zip_Zip_Type.zip_b ( * self) = C12Zip_Zip_Type.zip_b ( ^ self)
    \/ (exists x : item'0 . inv'4 x
    /\ produces'1 (C12Zip_Zip_Type.zip_a ( * self)) (Seq.singleton x) (C12Zip_Zip_Type.zip_a ( ^ self))
    /\ resolve'0 x
    /\ completed'2 (Borrow.borrow_logic (C12Zip_Zip_Type.zip_b ( * self)) (C12Zip_Zip_Type.zip_b ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 2)))
  let rec completed'0 (self:borrowed (C12Zip_Zip_Type.t_zip a b)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  goal next_refn : [#"../12_zip.rs" 54 4 54 44] forall self : borrowed (C12Zip_Zip_Type.t_zip a b) . inv'0 self
   -> inv'0 self
  /\ (forall result : Core_Option_Option_Type.t_option (item'0, item'1) . inv'1 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv'1 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_refl_refn : [#"../12_zip.rs" 41 4 41 26] forall self : C12Zip_Zip_Type.t_zip a b . inv'2 self
   -> inv'2 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq (item'0, item'1)) self
   -> produces'0 self (Seq.empty  : Seq.seq (item'0, item'1)) self)
  goal produces_trans_refn : [#"../12_zip.rs" 48 4 48 90] forall a : C12Zip_Zip_Type.t_zip a b . forall ab : Seq.seq (item'0, item'1) . forall b : C12Zip_Zip_Type.t_zip a b . forall bc : Seq.seq (item'0, item'1) . forall c : C12Zip_Zip_Type.t_zip a b . inv'2 c
  /\ inv'3 bc /\ inv'2 b /\ inv'3 ab /\ inv'2 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'2 c
  /\ inv'3 bc
  /\ inv'2 b
  /\ inv'3 ab
  /\ inv'2 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
