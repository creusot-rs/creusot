
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 9 8 9 12] true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Impl1_Invariant_Stub
  type t
  use prelude.Borrow
  predicate invariant' (self : borrowed t)
end
module CreusotContracts_Invariant_Impl1_Invariant_Interface
  type t
  use prelude.Borrow
  predicate invariant' (self : borrowed t)
  val invariant' (self : borrowed t) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Impl1_Invariant
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  predicate invariant' (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 38 20 38 39] Invariant0.invariant' ( * self)
  val invariant' (self : borrowed t) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 58 8 58 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 40 8 40 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/ghost.rs" 26 20 26 48] ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Interface
  type self
  predicate into_iter_pre (self : self)
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  predicate into_iter_pre (self : self) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 57 20 57 24] true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Interface
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = i,
    type IntoIter0.intoIter = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = i
  val into_iter (self : i) : i
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 83 0 151 1] IntoIterPre0.into_iter_pre self}
    requires {Invariant0.invariant' self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 83 0 151 1] IntoIterPost0.into_iter_post self result }
    ensures { Invariant0.invariant' result }
    
end
module Core_Iter_Traits_Iterator_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant1 with
    type self = self
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Impl1_Invariant_Stub as Invariant0 with
    type t = self
  val next (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {Invariant0.invariant' self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 26 92 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { Invariant1.invariant' ( ^ self) }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 69 26 69 51] ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
  val is_inhabited (_1' : ()) : bool
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x }
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] result }
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] is_inhabited _1') && ([#"../../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool =
    [#"../../../../../creusot-contracts/src/invariant.rs" 20 8 20 12] true
  val is_inhabited (_1' : ()) : bool
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x }
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] result }
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] is_inhabited _1') && ([#"../../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl (a : self) : ()
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl (a : self) : ()
  val produces_refl (a : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 31 21 31 22] Invariant0.invariant' a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 30 14 30 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../../../../../creusot-contracts/src/std/iter.rs" 31 21 31 22] Invariant0.invariant' a) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 30 14 30 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl (a : self) : ()
  val produces_refl (a : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 31 21 31 22] Invariant0.invariant' a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 30 14 30 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../../../../../creusot-contracts/src/std/iter.rs" 31 21 31 22] Invariant0.invariant' a) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 30 14 30 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
  val produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 34 15 34 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 35 15 35 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 37 22 37 23] Invariant0.invariant' a}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 37 52 37 53] Invariant0.invariant' b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 37 82 37 83] Invariant0.invariant' c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 36 14 36 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../../../../../creusot-contracts/src/std/iter.rs" 34 15 34 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 35 15 35 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 37 22 37 23] Invariant0.invariant' a) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 37 52 37 53] Invariant0.invariant' b) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 37 82 37 83] Invariant0.invariant' c) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 36 14 36 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
  val produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 34 15 34 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 35 15 35 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 37 22 37 23] Invariant0.invariant' a}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 37 52 37 53] Invariant0.invariant' b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 37 82 37 83] Invariant0.invariant' c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 36 14 36 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../../../../../creusot-contracts/src/std/iter.rs" 34 15 34 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 35 15 35 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 37 22 37 23] Invariant0.invariant' a) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 37 52 37 53] Invariant0.invariant' b) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 37 82 37 83] Invariant0.invariant' c) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 36 14 36 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Interface
  type i
  predicate into_iter_pre (self : i)
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate into_iter_pre (self : i) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 68 8 68 24] Invariant0.invariant' self
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Interface
  type i
  predicate into_iter_post (self : i) (res : i)
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  predicate into_iter_post (self : i) (res : i) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 8 74 19] self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module C08CollectExtend_Extend_Interface
  type t
  type i
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = t
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Impl1_Invariant_Stub as Invariant1 with
    type t = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  val extend [#"../08_collect_extend.rs" 26 0 26 78] (vec : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (iter : i) : ()
    requires {[#"../08_collect_extend.rs" 26 70 26 74] Invariant0.invariant' iter}
    ensures { [#"../08_collect_extend.rs" 22 0 25 2] exists prod : Seq.seq t . exists done_ : borrowed i . Invariant1.invariant' done_ /\ Completed0.completed done_ /\ Produces0.produces iter prod ( * done_) /\ ShallowModel0.shallow_model ( ^ vec) = Seq.(++) (ShallowModel1.shallow_model vec) prod }
    
end
module C08CollectExtend_Extend
  type t
  type i
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  use prelude.Ghost
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = i,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = t
  clone CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = t,
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = t,
    axiom .
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve6 with
    type self = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = i
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = i
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant1 with
    type t = i,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Core_Iter_Traits_Iterator_Iterator_Next_Interface as Next0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = t,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Invariant1.invariant' = Invariant0.invariant'
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel2 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty (Seq.seq t)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Ghost.ghost_ty i
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = i,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec cfg extend [#"../08_collect_extend.rs" 26 0 26 78] [@cfg:stackify] [@cfg:subregion_analysis] (vec : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (iter : i) : ()
    requires {[#"../08_collect_extend.rs" 26 70 26 74] Invariant0.invariant' iter}
    ensures { [#"../08_collect_extend.rs" 22 0 25 2] exists prod : Seq.seq t . exists done_ : borrowed i . Invariant1.invariant' done_ /\ Completed0.completed done_ /\ Produces0.produces iter prod ( * done_) /\ ShallowModel0.shallow_model ( ^ vec) = Seq.(++) (ShallowModel1.shallow_model vec) prod }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var vec_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var iter_2 : i;
  var old_vec_4 : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var iter_6 : i;
  var _7 : i;
  var iter_old_8 : Ghost.ghost_ty i;
  var produced_10 : Ghost.ghost_ty (Seq.seq t);
  var _17 : ();
  var _18 : Core_Option_Option_Type.t_option t;
  var _19 : borrowed i;
  var _20 : borrowed i;
  var _21 : isize;
  var __creusot_proc_iter_elem_22 : t;
  var _23 : Ghost.ghost_ty (Seq.seq t);
  var x_25 : t;
  var _26 : ();
  var _27 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _28 : t;
  var _29 : ();
  {
    vec_1 <- vec;
    iter_2 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    old_vec_4 <- ([#"../08_collect_extend.rs" 27 18 27 32] Ghost.new vec_1);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve old_vec_4 };
    _7 <- iter_2;
    iter_2 <- any i;
    iter_6 <- ([#"../08_collect_extend.rs" 28 4 28 34] IntoIter0.into_iter _7);
    goto BB3
  }
  BB3 {
    iter_old_8 <- ([#"../08_collect_extend.rs" 28 4 28 34] Ghost.new iter_6);
    goto BB4
  }
  BB4 {
    assume { Resolve1.resolve iter_old_8 };
    produced_10 <- ([#"../08_collect_extend.rs" 28 4 28 34] Ghost.new (Seq.empty ));
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve produced_10 };
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    invariant { [#"../08_collect_extend.rs" 28 4 28 34] Invariant0.invariant' iter_6 };
    invariant { [#"../08_collect_extend.rs" 28 4 28 34] Produces0.produces (Ghost.inner iter_old_8) (Ghost.inner produced_10) iter_6 };
    invariant { [#"../08_collect_extend.rs" 28 16 28 32] Invariant0.invariant' iter_6 };
    invariant { [#"../08_collect_extend.rs" 29 16 29 33]  ^ Ghost.inner old_vec_4 =  ^ vec_1 };
    invariant { [#"../08_collect_extend.rs" 28 4 28 34] Seq.(==) (ShallowModel1.shallow_model vec_1) (Seq.(++) (ShallowModel2.shallow_model old_vec_4) (Ghost.inner produced_10)) };
    goto BB10
  }
  BB10 {
    _20 <- borrow_mut iter_6;
    iter_6 <-  ^ _20;
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    _18 <- ([#"../08_collect_extend.rs" 28 4 28 34] Next0.next _19);
    goto BB11
  }
  BB11 {
    assume { Resolve3.resolve _20 };
    switch (_18)
      | Core_Option_Option_Type.C_None -> goto BB12
      | Core_Option_Option_Type.C_Some _ -> goto BB13
      end
  }
  BB12 {
    assume { Resolve4.resolve vec_1 };
    assume { Resolve5.resolve iter_6 };
    assume { Resolve6.resolve _18 };
    _0 <- ();
    goto BB21
  }
  BB13 {
    goto BB15
  }
  BB14 {
    assume { Resolve4.resolve vec_1 };
    assume { Resolve5.resolve iter_6 };
    assume { Resolve6.resolve _18 };
    absurd
  }
  BB15 {
    __creusot_proc_iter_elem_22 <- Core_Option_Option_Type.some_0 _18;
    _18 <- (let Core_Option_Option_Type.C_Some a = _18 in Core_Option_Option_Type.C_Some (any t));
    assume { Resolve6.resolve _18 };
    _23 <- ([#"../08_collect_extend.rs" 28 4 28 34] Ghost.new (Seq.(++) (Ghost.inner produced_10) (Seq.singleton __creusot_proc_iter_elem_22)));
    goto BB16
  }
  BB16 {
    produced_10 <- _23;
    _23 <- any Ghost.ghost_ty (Seq.seq t);
    assume { Resolve2.resolve produced_10 };
    x_25 <- __creusot_proc_iter_elem_22;
    __creusot_proc_iter_elem_22 <- any t;
    _27 <- borrow_mut ( * vec_1);
    vec_1 <- { vec_1 with current = ( ^ _27) };
    _28 <- x_25;
    x_25 <- any t;
    _26 <- ([#"../08_collect_extend.rs" 32 8 32 19] Push0.push _27 _28);
    goto BB17
  }
  BB17 {
    _17 <- ();
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB9
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    return _0
  }
  
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type s
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = s,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function index_logic [@inline:trivial] (self : s) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 17 8 17 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve
  type t
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (IndexLogic0.index_logic self i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val new (_1' : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 59 26 59 44] Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module C08CollectExtend_Collect_Interface
  type i
  use seq.Seq
  use prelude.Borrow
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Item0.item,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Impl1_Invariant_Stub as Invariant1 with
    type t = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  val collect [#"../08_collect_extend.rs" 44 0 44 52] (iter : i) : Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../08_collect_extend.rs" 44 28 44 32] Invariant0.invariant' iter}
    ensures { [#"../08_collect_extend.rs" 40 0 43 2] exists prod : Seq.seq Item0.item . exists done_ : borrowed i . Invariant1.invariant' done_ /\ Completed0.completed done_ /\ Produces0.produces iter prod ( * done_) /\ ShallowModel0.shallow_model result = prod }
    
end
module C08CollectExtend_Collect
  type i
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Item0.item,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq Item0.item,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve6 with
    type self = Item0.item
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Item0.item,
    type s = Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use prelude.Ghost
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = i,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = Item0.item,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = i
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve3 with
    type t = Item0.item,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Resolve0.resolve = Resolve6.resolve,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = i
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant1 with
    type t = i,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Core_Iter_Traits_Iterator_Iterator_Next_Interface as Next0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Invariant1.invariant' = Invariant0.invariant'
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Ghost.ghost_ty (Seq.seq Item0.item)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty i
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = i,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  clone Alloc_Vec_Impl0_New_Interface as New0 with
    type t = Item0.item,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg collect [#"../08_collect_extend.rs" 44 0 44 52] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) : Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../08_collect_extend.rs" 44 28 44 32] Invariant0.invariant' iter}
    ensures { [#"../08_collect_extend.rs" 40 0 43 2] exists prod : Seq.seq Item0.item . exists done_ : borrowed i . Invariant1.invariant' done_ /\ Completed0.completed done_ /\ Produces0.produces iter prod ( * done_) /\ ShallowModel0.shallow_model result = prod }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global);
  var iter_1 : i;
  var res_3 : Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global);
  var _4 : ();
  var iter_5 : i;
  var _6 : i;
  var iter_old_7 : Ghost.ghost_ty i;
  var produced_9 : Ghost.ghost_ty (Seq.seq Item0.item);
  var _15 : ();
  var _16 : Core_Option_Option_Type.t_option Item0.item;
  var _17 : borrowed i;
  var _18 : borrowed i;
  var _19 : isize;
  var __creusot_proc_iter_elem_20 : Item0.item;
  var _21 : Ghost.ghost_ty (Seq.seq Item0.item);
  var x_23 : Item0.item;
  var _24 : ();
  var _25 : borrowed (Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global));
  var _26 : Item0.item;
  var _27 : ();
  {
    iter_1 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    res_3 <- ([#"../08_collect_extend.rs" 45 18 45 28] New0.new ());
    goto BB2
  }
  BB2 {
    _6 <- iter_1;
    iter_1 <- any i;
    iter_5 <- ([#"../08_collect_extend.rs" 47 4 47 34] IntoIter0.into_iter _6);
    goto BB3
  }
  BB3 {
    iter_old_7 <- ([#"../08_collect_extend.rs" 47 4 47 34] Ghost.new iter_5);
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve iter_old_7 };
    produced_9 <- ([#"../08_collect_extend.rs" 47 4 47 34] Ghost.new (Seq.empty ));
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve produced_9 };
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant { [#"../08_collect_extend.rs" 47 4 47 34] Invariant0.invariant' iter_5 };
    invariant { [#"../08_collect_extend.rs" 47 4 47 34] Produces0.produces (Ghost.inner iter_old_7) (Ghost.inner produced_9) iter_5 };
    invariant { [#"../08_collect_extend.rs" 47 16 47 32] Invariant0.invariant' iter_5 };
    invariant { [#"../08_collect_extend.rs" 47 4 47 34] Seq.(==) (ShallowModel0.shallow_model res_3) (Ghost.inner produced_9) };
    goto BB11
  }
  BB11 {
    _18 <- borrow_mut iter_5;
    iter_5 <-  ^ _18;
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _16 <- ([#"../08_collect_extend.rs" 47 4 47 34] Next0.next _17);
    goto BB12
  }
  BB12 {
    assume { Resolve2.resolve _18 };
    switch (_16)
      | Core_Option_Option_Type.C_None -> goto BB13
      | Core_Option_Option_Type.C_Some _ -> goto BB14
      end
  }
  BB13 {
    assume { Resolve4.resolve iter_5 };
    assume { Resolve5.resolve _16 };
    _4 <- ();
    goto BB22
  }
  BB14 {
    goto BB16
  }
  BB15 {
    assume { Resolve3.resolve res_3 };
    assume { Resolve4.resolve iter_5 };
    assume { Resolve5.resolve _16 };
    absurd
  }
  BB16 {
    __creusot_proc_iter_elem_20 <- Core_Option_Option_Type.some_0 _16;
    _16 <- (let Core_Option_Option_Type.C_Some a = _16 in Core_Option_Option_Type.C_Some (any Item0.item));
    assume { Resolve5.resolve _16 };
    _21 <- ([#"../08_collect_extend.rs" 47 4 47 34] Ghost.new (Seq.(++) (Ghost.inner produced_9) (Seq.singleton __creusot_proc_iter_elem_20)));
    goto BB17
  }
  BB17 {
    produced_9 <- _21;
    _21 <- any Ghost.ghost_ty (Seq.seq Item0.item);
    assume { Resolve1.resolve produced_9 };
    x_23 <- __creusot_proc_iter_elem_20;
    __creusot_proc_iter_elem_20 <- any Item0.item;
    _25 <- borrow_mut res_3;
    res_3 <-  ^ _25;
    _26 <- x_23;
    x_23 <- any Item0.item;
    _24 <- ([#"../08_collect_extend.rs" 50 8 50 19] Push0.push _25 _26);
    goto BB18
  }
  BB18 {
    _15 <- ();
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    goto BB10
  }
  BB22 {
    goto BB23
  }
  BB23 {
    _0 <- res_3;
    res_3 <- any Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global);
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_intoiter 't 'a =
    | C_IntoIter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) opaque_ptr opaque_ptr
    
end
module Alloc_Vec_Impl9_Deref_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val deref (self : Alloc_Vec_Vec_Type.t_vec t a) : slice t
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 137 26 137 42] ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPre_Stub
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPre_Interface
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPre
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 158 20 158 24] true
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl6_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl6_ShallowModel
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPost_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPost_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPost
  type t
  type a
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 164 20 164 33] ShallowModel0.shallow_model self = ShallowModel1.shallow_model res
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = into_iter_post self res }
    
end
module Alloc_Vec_Impl16_IntoIter_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPre_Stub as IntoIterPre0 with
    type t = t,
    type a = a
  val into_iter (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 83 0 151 1] IntoIterPre0.into_iter_pre self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 83 0 151 1] IntoIterPost0.into_iter_post self result }
    ensures { Invariant0.invariant' result }
    
end
module CreusotContracts_Std1_Vec_Impl8_Completed_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl8_Completed_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
  val completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Completed
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 222 20 222 57] Resolve0.resolve self /\ ShallowModel0.shallow_model self = Seq.empty 
  val completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
  val produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = produces self visited rhs }
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 229 12 229 41] ShallowModel0.shallow_model self = Seq.(++) visited (ShallowModel0.shallow_model rhs)
  val produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = produces self visited rhs }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
  val produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 235 14 235 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . [#"../../../../../creusot-contracts/src/std/vec.rs" 235 14 235 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : () =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 233 4 233 10] ()
  val produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 235 14 235 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . [#"../../../../../creusot-contracts/src/std/vec.rs" 235 14 235 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
  val produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 240 15 240 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 241 15 241 32] Produces0.produces b bc c}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 242 14 242 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 240 15 240 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 241 15 241 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 242 14 242 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 238 4 238 10] ()
  val produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 240 15 240 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 241 15 241 32] Produces0.produces b bc c}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 242 14 242 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 240 15 240 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 241 15 241 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 242 14 242 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C08CollectExtend_ExtendIndex_Interface
  use prelude.Int
  use prelude.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val extend_index [#"../08_collect_extend.rs" 55 0 55 51] (v1 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (v2 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : ()
    
end
module C08CollectExtend_ExtendIndex
  use prelude.Int
  use prelude.UInt32
  use prelude.Ghost
  use prelude.Slice
  use prelude.Borrow
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel_Interface as ShallowModel6 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global
  use seq.Seq
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel7 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter uint32 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter uint32 (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl8_Produces as Produces0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Std1_Vec_Impl8_ProducesTrans as ProducesTrans0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl8_ProducesRefl as ProducesRefl0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant0 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter uint32 (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter uint32 (Alloc_Alloc_Global_Type.t_global),
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel5 with
    type t = uint32,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve2 with
    type t = uint32
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = uint32,
    type s = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Vec_Impl8_Completed as Completed0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Resolve0.resolve = Resolve3.resolve,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant1 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter uint32 (Alloc_Alloc_Global_Type.t_global),
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPost as IntoIterPost0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel6.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPre as IntoIterPre0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel1 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Resolve0.resolve = Resolve2.resolve,
    val Max0.mAX' = Max0.mAX'
  clone C08CollectExtend_Extend_Interface as Extend0 with
    type t = uint32,
    type i = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter uint32 (Alloc_Alloc_Global_Type.t_global),
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl16_IntoIter_Interface as IntoIter1 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Alloc_Vec_Impl9_Deref_Interface as Deref0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  let rec cfg extend_index [#"../08_collect_extend.rs" 55 0 55 51] [@cfg:stackify] [@cfg:subregion_analysis] (v1 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (v2 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v1_1 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var v2_2 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var oldv1_3 : Ghost.ghost_ty (slice uint32);
  var oldv2_5 : Ghost.ghost_ty (slice uint32);
  var _7 : ();
  var _8 : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global));
  var _9 : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global));
  var _10 : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter uint32 (Alloc_Alloc_Global_Type.t_global);
  var _11 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var _12 : ();
  {
    v1_1 <- v1;
    v2_2 <- v2;
    goto BB0
  }
  BB0 {
    oldv1_3 <- ([#"../08_collect_extend.rs" 56 16 56 30] Ghost.new (Deref0.deref v1_1));
    goto BB1
  }
  BB1 {
    oldv2_5 <- ([#"../08_collect_extend.rs" 57 16 57 30] Ghost.new (Deref0.deref v2_2));
    goto BB2
  }
  BB2 {
    _9 <- borrow_mut v1_1;
    v1_1 <-  ^ _9;
    _8 <- borrow_mut ( * _9);
    _9 <- { _9 with current = ( ^ _8) };
    _11 <- v2_2;
    v2_2 <- any Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
    _10 <- ([#"../08_collect_extend.rs" 58 20 58 34] IntoIter1.into_iter _11);
    goto BB3
  }
  BB3 {
    _7 <- ([#"../08_collect_extend.rs" 58 4 58 35] Extend0.extend _8 _10);
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve v1_1 };
    assume { Resolve1.resolve _9 };
    assert { [@expl:assertion] [#"../08_collect_extend.rs" 60 4 60 55] Seq.(==) (ShallowModel0.shallow_model v1_1) (Seq.(++) (ShallowModel1.shallow_model oldv1_3) (ShallowModel1.shallow_model oldv2_5)) };
    goto BB5
  }
  BB5 {
    _12 <- ();
    _0 <- ();
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module C08CollectExtend_CollectExample_Interface
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = uint32
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  val collect_example [#"../08_collect_extend.rs" 64 0 64 56] (iter : i) : ()
    requires {[#"../08_collect_extend.rs" 63 0 63 130] forall fin : i . Invariant0.invariant' fin -> (forall prod : Seq.seq uint32 . Produces0.produces iter prod fin -> (forall i : int . 0 <= i /\ i < Seq.length prod -> UInt32.to_int (Seq.get prod i) = i))}
    requires {[#"../08_collect_extend.rs" 64 48 64 52] Invariant0.invariant' iter}
    
end
module C08CollectExtend_CollectExample
  type i
  use prelude.Int
  use prelude.UInt32
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = uint32
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = i
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant1 with
    type t = i,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = uint32
  clone CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = uint32,
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = uint32,
    axiom .
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = uint32,
    type s = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Resolve0.resolve = Resolve1.resolve,
    val Max0.mAX' = Max0.mAX'
  clone C08CollectExtend_Collect_Interface as Collect0 with
    type i = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = uint32,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg collect_example [#"../08_collect_extend.rs" 64 0 64 56] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) : ()
    requires {[#"../08_collect_extend.rs" 63 0 63 130] forall fin : i . Invariant0.invariant' fin -> (forall prod : Seq.seq uint32 . Produces0.produces iter prod fin -> (forall i : int . 0 <= i /\ i < Seq.length prod -> UInt32.to_int (Seq.get prod i) = i))}
    requires {[#"../08_collect_extend.rs" 64 48 64 52] Invariant0.invariant' iter}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter_1 : i;
  var v_3 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var _4 : i;
  var _5 : ();
  {
    iter_1 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _4 <- iter_1;
    iter_1 <- any i;
    v_3 <- ([#"../08_collect_extend.rs" 65 22 65 35] Collect0.collect _4);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve v_3 };
    assert { [@expl:assertion] [#"../08_collect_extend.rs" 67 4 67 75] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model v_3) -> UInt32.to_int (IndexLogic0.index_logic v_3 i) = i };
    goto BB3
  }
  BB3 {
    _5 <- ();
    _0 <- ();
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
