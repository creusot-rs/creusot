
module C16Take_Take_Type
  use prelude.UIntSize
  use prelude.Int
  type t_take 'i =
    | C_Take 'i usize
    
  let function take_n (self : t_take 'i) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Take _ a -> a
      end
  let function take_iter (self : t_take 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Take a _ -> a
      end
end
module C16Take_Impl0_ProducesRefl_Impl
  type i
  type item0
  use seq.Seq
  predicate invariant2 (self : Seq.seq item0)
  val invariant2 (self : Seq.seq item0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Seq.seq item0)
  val inv2 (_x : Seq.seq item0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Seq.seq item0 . inv2 x = true
  predicate invariant1 (self : i)
  val invariant1 (self : i) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : i)
  val inv1 (_x : i) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : i . inv1 x = true
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item0) (o : i)
  val produces1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item0) (o : i) : bool
    ensures { result = produces1 self visited o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv1 a}
    requires {[#"../common.rs" 21 31 21 33] inv2 ab}
    requires {[#"../common.rs" 21 52 21 53] inv1 b}
    requires {[#"../common.rs" 21 61 21 63] inv2 bc}
    requires {[#"../common.rs" 21 82 21 83] inv1 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv1 a)
   -> ([#"../common.rs" 21 31 21 33] inv2 ab)
   -> ([#"../common.rs" 21 52 21 53] inv1 b)
   -> ([#"../common.rs" 21 61 21 63] inv2 bc)
   -> ([#"../common.rs" 21 82 21 83] inv1 c)  -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 27] (self : i) : ()
    requires {[#"../common.rs" 15 21 15 25] inv1 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv1 self)
   -> ([#"../common.rs" 14 14 14 45] produces1 self (Seq.empty ) self)
  use C16Take_Take_Type as C16Take_Take_Type
  predicate invariant0 (self : C16Take_Take_Type.t_take i)
  val invariant0 (self : C16Take_Take_Type.t_take i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C16Take_Take_Type.t_take i)
  val inv0 (_x : C16Take_Take_Type.t_take i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C16Take_Take_Type.t_take i . inv0 x = true
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  predicate produces0 [#"../16_take.rs" 31 4 31 64] (self : C16Take_Take_Type.t_take i) (visited : Seq.seq item0) (o : C16Take_Take_Type.t_take i)
    
   =
    [#"../16_take.rs" 32 8 34 9] UIntSize.to_int (C16Take_Take_Type.take_n self)
    = UIntSize.to_int (C16Take_Take_Type.take_n o) + Seq.length visited
    /\ produces1 (C16Take_Take_Type.take_iter self) visited (C16Take_Take_Type.take_iter o)
  val produces0 [#"../16_take.rs" 31 4 31 64] (self : C16Take_Take_Type.t_take i) (visited : Seq.seq item0) (o : C16Take_Take_Type.t_take i) : bool
    ensures { result = produces0 self visited o }
    
  constant self  : C16Take_Take_Type.t_take i
  function produces_refl [#"../16_take.rs" 40 4 40 26] (self : C16Take_Take_Type.t_take i) : ()
  goal vc_produces_refl : ([#"../16_take.rs" 40 21 40 25] inv0 self)
   -> ([#"../16_take.rs" 39 14 39 45] produces0 self (Seq.empty ) self)
end
module C16Take_Impl0_ProducesTrans_Impl
  type i
  predicate invariant2 (self : i)
  val invariant2 (self : i) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : i)
  val inv2 (_x : i) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : i . inv2 x = true
  type item0
  use seq.Seq
  use seq.Seq
  predicate inv1 (_x : Seq.seq item0)
  val inv1 (_x : Seq.seq item0) : bool
    ensures { result = inv1 _x }
    
  predicate produces1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item0) (o : i)
  val produces1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item0) (o : i) : bool
    ensures { result = produces1 self visited o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv2 a}
    requires {[#"../common.rs" 21 31 21 33] inv1 ab}
    requires {[#"../common.rs" 21 52 21 53] inv2 b}
    requires {[#"../common.rs" 21 61 21 63] inv1 bc}
    requires {[#"../common.rs" 21 82 21 83] inv2 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv2 a)
   -> ([#"../common.rs" 21 31 21 33] inv1 ab)
   -> ([#"../common.rs" 21 52 21 53] inv2 b)
   -> ([#"../common.rs" 21 61 21 63] inv1 bc)
   -> ([#"../common.rs" 21 82 21 83] inv2 c)  -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 27] (self : i) : ()
    requires {[#"../common.rs" 15 21 15 25] inv2 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv2 self)
   -> ([#"../common.rs" 14 14 14 45] produces1 self (Seq.empty ) self)
  predicate invariant1 (self : Seq.seq item0)
  val invariant1 (self : Seq.seq item0) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : Seq.seq item0 . inv1 x = true
  use C16Take_Take_Type as C16Take_Take_Type
  predicate invariant0 (self : C16Take_Take_Type.t_take i)
  val invariant0 (self : C16Take_Take_Type.t_take i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C16Take_Take_Type.t_take i)
  val inv0 (_x : C16Take_Take_Type.t_take i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C16Take_Take_Type.t_take i . inv0 x = true
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  predicate produces0 [#"../16_take.rs" 31 4 31 64] (self : C16Take_Take_Type.t_take i) (visited : Seq.seq item0) (o : C16Take_Take_Type.t_take i)
    
   =
    [#"../16_take.rs" 32 8 34 9] UIntSize.to_int (C16Take_Take_Type.take_n self)
    = UIntSize.to_int (C16Take_Take_Type.take_n o) + Seq.length visited
    /\ produces1 (C16Take_Take_Type.take_iter self) visited (C16Take_Take_Type.take_iter o)
  val produces0 [#"../16_take.rs" 31 4 31 64] (self : C16Take_Take_Type.t_take i) (visited : Seq.seq item0) (o : C16Take_Take_Type.t_take i) : bool
    ensures { result = produces0 self visited o }
    
  constant a  : C16Take_Take_Type.t_take i
  constant ab  : Seq.seq item0
  constant b  : C16Take_Take_Type.t_take i
  constant bc  : Seq.seq item0
  constant c  : C16Take_Take_Type.t_take i
  function produces_trans [#"../16_take.rs" 47 4 47 90] (a : C16Take_Take_Type.t_take i) (ab : Seq.seq item0) (b : C16Take_Take_Type.t_take i) (bc : Seq.seq item0) (c : C16Take_Take_Type.t_take i) : ()
    
  goal vc_produces_trans : ([#"../16_take.rs" 47 82 47 83] inv0 c)
   -> ([#"../16_take.rs" 47 61 47 63] inv1 bc)
   -> ([#"../16_take.rs" 47 52 47 53] inv0 b)
   -> ([#"../16_take.rs" 47 31 47 33] inv1 ab)
   -> ([#"../16_take.rs" 47 22 47 23] inv0 a)
   -> ([#"../16_take.rs" 45 15 45 32] produces0 b bc c)
   -> ([#"../16_take.rs" 44 15 44 32] produces0 a ab b)
   -> ([#"../16_take.rs" 46 14 46 42] produces0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module C16Take_Impl0_Next
  type i
  type item0
  use seq.Seq
  predicate invariant4 (self : Seq.seq item0)
  val invariant4 (self : Seq.seq item0) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Seq.seq item0)
  val inv4 (_x : Seq.seq item0) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq item0 . inv4 x = true
  use prelude.Borrow
  predicate invariant3 (self : borrowed i)
  val invariant3 (self : borrowed i) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed i)
  val inv3 (_x : borrowed i) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed i . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : Core_Option_Option_Type.t_option item0)
  val invariant2 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option item0)
  val inv2 (_x : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option item0 . inv2 x = true
  use seq.Seq
  predicate inv1 (_x : i)
  val inv1 (_x : i) : bool
    ensures { result = inv1 _x }
    
  predicate produces1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item0) (o : i)
  val produces1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item0) (o : i) : bool
    ensures { result = produces1 self visited o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv1 a}
    requires {[#"../common.rs" 21 31 21 33] inv4 ab}
    requires {[#"../common.rs" 21 52 21 53] inv1 b}
    requires {[#"../common.rs" 21 61 21 63] inv4 bc}
    requires {[#"../common.rs" 21 82 21 83] inv1 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv1 a)
   -> ([#"../common.rs" 21 31 21 33] inv4 ab)
   -> ([#"../common.rs" 21 52 21 53] inv1 b)
   -> ([#"../common.rs" 21 61 21 63] inv4 bc)
   -> ([#"../common.rs" 21 82 21 83] inv1 c)  -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 27] (self : i) : ()
    requires {[#"../common.rs" 15 21 15 25] inv1 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv1 self)
   -> ([#"../common.rs" 14 14 14 45] produces1 self (Seq.empty ) self)
  predicate invariant1 (self : i)
  val invariant1 (self : i) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : i . inv1 x = true
  use C16Take_Take_Type as C16Take_Take_Type
  predicate invariant0 (self : borrowed (C16Take_Take_Type.t_take i))
  val invariant0 (self : borrowed (C16Take_Take_Type.t_take i)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed (C16Take_Take_Type.t_take i))
  val inv0 (_x : borrowed (C16Take_Take_Type.t_take i)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed (C16Take_Take_Type.t_take i) . inv0 x = true
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  predicate produces0 [#"../16_take.rs" 31 4 31 64] (self : C16Take_Take_Type.t_take i) (visited : Seq.seq item0) (o : C16Take_Take_Type.t_take i)
    
   =
    [#"../16_take.rs" 32 8 34 9] UIntSize.to_int (C16Take_Take_Type.take_n self)
    = UIntSize.to_int (C16Take_Take_Type.take_n o) + Seq.length visited
    /\ produces1 (C16Take_Take_Type.take_iter self) visited (C16Take_Take_Type.take_iter o)
  val produces0 [#"../16_take.rs" 31 4 31 64] (self : C16Take_Take_Type.t_take i) (visited : Seq.seq item0) (o : C16Take_Take_Type.t_take i) : bool
    ensures { result = produces0 self visited o }
    
  use seq.Seq
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  predicate resolve0 (self : borrowed (C16Take_Take_Type.t_take i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (C16Take_Take_Type.t_take i)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 [#"../16_take.rs" 22 4 22 35] (self : borrowed (C16Take_Take_Type.t_take i)) =
    [#"../16_take.rs" 23 8 26 9] UIntSize.to_int (C16Take_Take_Type.take_n ( * self)) = 0 /\ resolve0 self
    \/ UIntSize.to_int (C16Take_Take_Type.take_n ( * self)) > 0
    /\ UIntSize.to_int (C16Take_Take_Type.take_n ( * self)) = UIntSize.to_int (C16Take_Take_Type.take_n ( ^ self)) + 1
    /\ completed1 (Borrow.borrow_logic (C16Take_Take_Type.take_iter ( * self)) (C16Take_Take_Type.take_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
  val completed0 [#"../16_take.rs" 22 4 22 35] (self : borrowed (C16Take_Take_Type.t_take i)) : bool
    ensures { result = completed0 self }
    
  val next0 [#"../common.rs" 27 4 27 45] (self : borrowed i) : Core_Option_Option_Type.t_option item0
    requires {[#"../common.rs" 27 17 27 21] inv3 self}
    ensures { [#"../common.rs" 23 14 26 5] match result with
      | Core_Option_Option_Type.C_None -> completed1 self
      | Core_Option_Option_Type.C_Some v -> produces1 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 26 27 44] inv2 result }
    
  use prelude.UIntSize
  let rec cfg next [#"../16_take.rs" 53 4 53 41] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C16Take_Take_Type.t_take i)) : Core_Option_Option_Type.t_option item0
    requires {[#"../16_take.rs" 53 17 53 21] inv0 self}
    ensures { [#"../16_take.rs" 49 14 52 5] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../16_take.rs" 53 26 53 41] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option item0;
  var self : borrowed (C16Take_Take_Type.t_take i) = self;
  var _3 : bool;
  var _5 : borrowed i;
  {
    goto BB0
  }
  BB0 {
    [#"../16_take.rs" 54 11 54 22] _3 <- C16Take_Take_Type.take_n ( * self)
    <> ([#"../16_take.rs" 54 21 54 22] (0 : usize));
    switch (_3)
      | False -> goto BB3
      | True -> goto BB1
      end
  }
  BB1 {
    [#"../16_take.rs" 55 12 55 23] self <- { self with current = (let C16Take_Take_Type.C_Take x0 x1 =  * self in C16Take_Take_Type.C_Take x0 (C16Take_Take_Type.take_n ( * self)
    - ([#"../16_take.rs" 55 22 55 23] (1 : usize)))) ; };
    [#"../16_take.rs" 56 12 56 21] _5 <- Borrow.borrow_final (C16Take_Take_Type.take_iter ( * self)) (Borrow.inherit_id (Borrow.get_id self) 1);
    [#"../16_take.rs" 56 12 56 21] self <- { self with current = (let C16Take_Take_Type.C_Take x0 x1 =  * self in C16Take_Take_Type.C_Take ( ^ _5) x1) ; };
    assume { inv1 ( ^ _5) };
    [#"../16_take.rs" 56 12 56 28] _0 <- ([#"../16_take.rs" 56 12 56 28] next0 _5);
    _5 <- any borrowed i;
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    goto BB4
  }
  BB3 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../16_take.rs" 58 12 58 16] _0 <- Core_Option_Option_Type.C_None;
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module C16Take_Impl0
  type i
  type item0
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option item0)
  val invariant3 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option item0)
  val inv3 (_x : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option item0 . inv3 x = true
  use C16Take_Take_Type as C16Take_Take_Type
  use prelude.Borrow
  predicate invariant2 (self : borrowed (C16Take_Take_Type.t_take i))
  val invariant2 (self : borrowed (C16Take_Take_Type.t_take i)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (C16Take_Take_Type.t_take i))
  val inv2 (_x : borrowed (C16Take_Take_Type.t_take i)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (C16Take_Take_Type.t_take i) . inv2 x = true
  use seq.Seq
  predicate invariant1 (self : Seq.seq item0)
  val invariant1 (self : Seq.seq item0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq item0)
  val inv1 (_x : Seq.seq item0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq item0 . inv1 x = true
  predicate invariant0 (self : C16Take_Take_Type.t_take i)
  val invariant0 (self : C16Take_Take_Type.t_take i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C16Take_Take_Type.t_take i)
  val inv0 (_x : C16Take_Take_Type.t_take i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C16Take_Take_Type.t_take i . inv0 x = true
  use seq.Seq
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  use prelude.Int
  predicate resolve0 (self : borrowed (C16Take_Take_Type.t_take i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (C16Take_Take_Type.t_take i)) : bool
    ensures { result = resolve0 self }
    
  use prelude.UIntSize
  predicate completed0 [#"../16_take.rs" 22 4 22 35] (self : borrowed (C16Take_Take_Type.t_take i)) =
    [#"../16_take.rs" 23 8 26 9] UIntSize.to_int (C16Take_Take_Type.take_n ( * self)) = 0 /\ resolve0 self
    \/ UIntSize.to_int (C16Take_Take_Type.take_n ( * self)) > 0
    /\ UIntSize.to_int (C16Take_Take_Type.take_n ( * self)) = UIntSize.to_int (C16Take_Take_Type.take_n ( ^ self)) + 1
    /\ completed1 (Borrow.borrow_logic (C16Take_Take_Type.take_iter ( * self)) (C16Take_Take_Type.take_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
  val completed0 [#"../16_take.rs" 22 4 22 35] (self : borrowed (C16Take_Take_Type.t_take i)) : bool
    ensures { result = completed0 self }
    
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item0) (o : i)
  val produces1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item0) (o : i) : bool
    ensures { result = produces1 self visited o }
    
  use seq.Seq
  predicate produces0 [#"../16_take.rs" 31 4 31 64] (self : C16Take_Take_Type.t_take i) (visited : Seq.seq item0) (o : C16Take_Take_Type.t_take i)
    
   =
    [#"../16_take.rs" 32 8 34 9] UIntSize.to_int (C16Take_Take_Type.take_n self)
    = UIntSize.to_int (C16Take_Take_Type.take_n o) + Seq.length visited
    /\ produces1 (C16Take_Take_Type.take_iter self) visited (C16Take_Take_Type.take_iter o)
  val produces0 [#"../16_take.rs" 31 4 31 64] (self : C16Take_Take_Type.t_take i) (visited : Seq.seq item0) (o : C16Take_Take_Type.t_take i) : bool
    ensures { result = produces0 self visited o }
    
  goal produces_trans_refn : [#"../16_take.rs" 47 4 47 90] forall a : C16Take_Take_Type.t_take i . forall ab : Seq.seq item0 . forall b : C16Take_Take_Type.t_take i . forall bc : Seq.seq item0 . forall c : C16Take_Take_Type.t_take i . inv0 c
  /\ inv1 bc /\ inv0 b /\ inv1 ab /\ inv0 a /\ produces0 b bc c /\ produces0 a ab b
   -> inv0 c
  /\ inv1 bc
  /\ inv0 b
  /\ inv1 ab
  /\ inv0 a
  /\ produces0 b bc c
  /\ produces0 a ab b /\ (forall result : () . produces0 a (Seq.(++) ab bc) c  -> produces0 a (Seq.(++) ab bc) c)
  goal produces_refl_refn : [#"../16_take.rs" 40 4 40 26] forall self : C16Take_Take_Type.t_take i . inv0 self
   -> inv0 self /\ (forall result : () . produces0 self (Seq.empty ) self  -> produces0 self (Seq.empty ) self)
  goal next_refn : [#"../16_take.rs" 53 4 53 41] forall self : borrowed (C16Take_Take_Type.t_take i) . inv2 self
   -> inv2 self
  /\ (forall result : Core_Option_Option_Type.t_option item0 . inv3 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv3 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end)
end
