
module C13Cloned_Cloned_Type
  type t_cloned 'i =
    | C_Cloned 'i
    
  function any_l (_ : 'b) : 'a
  let rec t_cloned < 'i > (input:t_cloned 'i) (ret  (iter:'i))= any
    [ good (iter:'i)-> {C_Cloned iter = input} (! ret {iter}) | bad (iter:'i)-> {C_Cloned iter <> input} {false} any ]
    
  function cloned_iter (self : t_cloned 'i) : 'i =
    match self with
      | C_Cloned a -> a
      end
end
module C13Cloned_Impl0_ProducesRefl_Impl
  type i
  type t
  predicate invariant'2 (self : i)
  let rec invariant'2 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : i)
  let rec inv'2 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : i . inv'2 x = true
  use seq.Seq
  use seq.Seq
  predicate inv'1 (_x : Seq.seq t)
  let rec inv'1 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq t) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  let rec produces_trans'0 (a:i) (ab:Seq.seq t) (b:i) (bc:Seq.seq t) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'2 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'1 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'2 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'1 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'2 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'2 a)
   -> ([#"../common.rs" 21 31 21 33] inv'1 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'2 b)
   -> ([#"../common.rs" 21 61 21 63] inv'1 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'2 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'2 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'2 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq t) self)
  predicate invariant'1 (self : Seq.seq t)
  let rec invariant'1 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq t . inv'1 x = true
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  predicate invariant'0 (self : C13Cloned_Cloned_Type.t_cloned i)
  let rec invariant'0 (self:C13Cloned_Cloned_Type.t_cloned i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C13Cloned_Cloned_Type.t_cloned i)
  let rec inv'0 (_x:C13Cloned_Cloned_Type.t_cloned i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C13Cloned_Cloned_Type.t_cloned i . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Borrow
  predicate produces'0 [#"../13_cloned.rs" 28 4 28 64] (self : C13Cloned_Cloned_Type.t_cloned i) (visited : Seq.seq t) (o : C13Cloned_Cloned_Type.t_cloned i)
    
   =
    [#"../13_cloned.rs" 29 8 33 9] exists s : Seq.seq t . inv'1 s
    /\ produces'1 (C13Cloned_Cloned_Type.cloned_iter self) s (C13Cloned_Cloned_Type.cloned_iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  let rec produces'0 (self:C13Cloned_Cloned_Type.t_cloned i) (visited:Seq.seq t) (o:C13Cloned_Cloned_Type.t_cloned i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  constant self  : C13Cloned_Cloned_Type.t_cloned i
  function produces_refl [#"../13_cloned.rs" 39 4 39 26] (self : C13Cloned_Cloned_Type.t_cloned i) : ()
  goal vc_produces_refl : ([#"../13_cloned.rs" 39 21 39 25] inv'0 self)
   -> ([#"../13_cloned.rs" 38 14 38 45] produces'0 self (Seq.empty  : Seq.seq t) self)
end
module C13Cloned_Impl0_ProducesTrans_Impl
  type i
  type t
  predicate invariant'3 (self : i)
  let rec invariant'3 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : i)
  let rec inv'3 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : i . inv'3 x = true
  use seq.Seq
  use seq.Seq
  predicate inv'2 (_x : Seq.seq t)
  let rec inv'2 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq t) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  let rec produces_trans'0 (a:i) (ab:Seq.seq t) (b:i) (bc:Seq.seq t) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'3 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'2 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'3 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'2 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'3 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'3 a)
   -> ([#"../common.rs" 21 31 21 33] inv'2 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'3 b)
   -> ([#"../common.rs" 21 61 21 63] inv'2 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'3 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'3 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'3 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq t) self)
  predicate invariant'2 (self : Seq.seq t)
  let rec invariant'2 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : Seq.seq t . inv'2 x = true
  predicate invariant'1 (self : Seq.seq t)
  let rec invariant'1 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq t)
  let rec inv'1 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq t . inv'1 x = true
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  predicate invariant'0 (self : C13Cloned_Cloned_Type.t_cloned i)
  let rec invariant'0 (self:C13Cloned_Cloned_Type.t_cloned i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C13Cloned_Cloned_Type.t_cloned i)
  let rec inv'0 (_x:C13Cloned_Cloned_Type.t_cloned i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C13Cloned_Cloned_Type.t_cloned i . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Borrow
  predicate produces'0 [#"../13_cloned.rs" 28 4 28 64] (self : C13Cloned_Cloned_Type.t_cloned i) (visited : Seq.seq t) (o : C13Cloned_Cloned_Type.t_cloned i)
    
   =
    [#"../13_cloned.rs" 29 8 33 9] exists s : Seq.seq t . inv'2 s
    /\ produces'1 (C13Cloned_Cloned_Type.cloned_iter self) s (C13Cloned_Cloned_Type.cloned_iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  let rec produces'0 (self:C13Cloned_Cloned_Type.t_cloned i) (visited:Seq.seq t) (o:C13Cloned_Cloned_Type.t_cloned i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  constant a  : C13Cloned_Cloned_Type.t_cloned i
  constant ab  : Seq.seq t
  constant b  : C13Cloned_Cloned_Type.t_cloned i
  constant bc  : Seq.seq t
  constant c  : C13Cloned_Cloned_Type.t_cloned i
  function produces_trans [#"../13_cloned.rs" 46 4 46 90] (a : C13Cloned_Cloned_Type.t_cloned i) (ab : Seq.seq t) (b : C13Cloned_Cloned_Type.t_cloned i) (bc : Seq.seq t) (c : C13Cloned_Cloned_Type.t_cloned i) : ()
    
  goal vc_produces_trans : ([#"../13_cloned.rs" 46 82 46 83] inv'0 c)
   -> ([#"../13_cloned.rs" 46 61 46 63] inv'1 bc)
   -> ([#"../13_cloned.rs" 46 52 46 53] inv'0 b)
   -> ([#"../13_cloned.rs" 46 31 46 33] inv'1 ab)
   -> ([#"../13_cloned.rs" 46 22 46 23] inv'0 a)
   -> ([#"../13_cloned.rs" 44 15 44 32] produces'0 b bc c)
   -> ([#"../13_cloned.rs" 43 15 43 32] produces'0 a ab b)
   -> ([#"../13_cloned.rs" 45 14 45 42] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C13Cloned_Impl0_Next
  type i
  type t
  use seq.Seq
  predicate invariant'6 (self : Seq.seq t)
  let rec invariant'6 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq t)
  let rec inv'6 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq t . inv'6 x = true
  predicate invariant'5 (self : t)
  let rec invariant'5 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : t)
  let rec inv'5 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ] 
  axiom inv'5 : forall x : t . inv'5 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'4 (self : Core_Option_Option_Type.t_option t)
  let rec invariant'4 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Core_Option_Option_Type.t_option t)
  let rec inv'4 (_x:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Core_Option_Option_Type.t_option t . inv'4 x = true
  use prelude.Borrow
  predicate invariant'3 (self : borrowed i)
  let rec invariant'3 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed i)
  let rec inv'3 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed i . inv'3 x = true
  predicate invariant'2 (self : Core_Option_Option_Type.t_option t)
  let rec invariant'2 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option t)
  let rec inv'2 (_x:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option t . inv'2 x = true
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  predicate invariant'1 (self : borrowed (C13Cloned_Cloned_Type.t_cloned i))
  let rec invariant'1 (self:borrowed (C13Cloned_Cloned_Type.t_cloned i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (C13Cloned_Cloned_Type.t_cloned i))
  let rec inv'1 (_x:borrowed (C13Cloned_Cloned_Type.t_cloned i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (C13Cloned_Cloned_Type.t_cloned i) . inv'1 x = true
  use seq.Seq
  predicate inv'0 (_x : i)
  let rec inv'0 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq t) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  let rec produces_trans'0 (a:i) (ab:Seq.seq t) (b:i) (bc:Seq.seq t) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'0 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'6 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'0 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'6 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'0 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'0 a)
   -> ([#"../common.rs" 21 31 21 33] inv'6 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'0 b)
   -> ([#"../common.rs" 21 61 21 63] inv'6 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'0 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'0 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq t) self)
  predicate invariant'0 (self : i)
  let rec invariant'0 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : i . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  predicate produces'0 [#"../13_cloned.rs" 28 4 28 64] (self : C13Cloned_Cloned_Type.t_cloned i) (visited : Seq.seq t) (o : C13Cloned_Cloned_Type.t_cloned i)
    
   =
    [#"../13_cloned.rs" 29 8 33 9] exists s : Seq.seq t . inv'6 s
    /\ produces'1 (C13Cloned_Cloned_Type.cloned_iter self) s (C13Cloned_Cloned_Type.cloned_iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  let rec produces'0 (self:C13Cloned_Cloned_Type.t_cloned i) (visited:Seq.seq t) (o:C13Cloned_Cloned_Type.t_cloned i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate completed'0 [#"../13_cloned.rs" 22 4 22 35] (self : borrowed (C13Cloned_Cloned_Type.t_cloned i)) =
    [#"../13_cloned.rs" 23 8 23 43] completed'1 (Borrow.borrow_logic (C13Cloned_Cloned_Type.cloned_iter ( * self)) (C13Cloned_Cloned_Type.cloned_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
  let rec completed'0 (self:borrowed (C13Cloned_Cloned_Type.t_cloned i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec cloned'0 (self:Core_Option_Option_Type.t_option t) (return'  (ret:Core_Option_Option_Type.t_option t))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option t)-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/option.rs" 29 0 140 1] self = Core_Option_Option_Type.C_None
      \/ (exists t : t . inv'5 t
      /\ self = Core_Option_Option_Type.C_Some t /\ result = Core_Option_Option_Type.C_Some t)}
      {[#"../../../../../creusot-contracts/src/std/option.rs" 104 16 104 59] self = Core_Option_Option_Type.C_None
       -> result = Core_Option_Option_Type.C_None}
      (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (C13Cloned_Cloned_Type.t_cloned i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C13Cloned_Cloned_Type.t_cloned i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use seq.Seq
  let rec next'0 (self:borrowed i) (return'  (ret:Core_Option_Option_Type.t_option t))= {[@expl:precondition] [#"../common.rs" 27 17 27 21] inv'3 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option t)-> {[#"../common.rs" 27 26 27 44] inv'4 result}
      {[#"../common.rs" 23 14 26 5] match result with
        | Core_Option_Option_Type.C_None -> completed'1 self
        | Core_Option_Option_Type.C_Some v -> produces'1 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  let rec next (self:borrowed (C13Cloned_Cloned_Type.t_cloned i)) (return'  (ret:Core_Option_Option_Type.t_option t))= {[#"../13_cloned.rs" 52 17 52 21] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = C13Cloned_Cloned_Type.t_cloned <i> { * self}
          (fun (riter'0:i) ->
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                C13Cloned_Cloned_Type.t_cloned <i> { * self}
                  (fun (l_iter'0:i) ->
                    
                    [ &self <- { self with current = (C13Cloned_Cloned_Type.C_Cloned ( ^ _4) : C13Cloned_Cloned_Type.t_cloned i) ; } ]
                    
                    s1)))
      | s1 = -{inv'0 ( ^ _4)}- s2
      | s2 = next'0 {_4} (fun (_ret':Core_Option_Option_Type.t_option t) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = cloned'0 {_3} (fun (_ret':Core_Option_Option_Type.t_option t) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option t = any_l () : Core_Option_Option_Type.t_option t
    | & self : borrowed (C13Cloned_Cloned_Type.t_cloned i) = self
    | & _3 : Core_Option_Option_Type.t_option t = any_l () : Core_Option_Option_Type.t_option t
    | & _4 : borrowed i = any_l () : borrowed i ]
    
    [ return' (result:Core_Option_Option_Type.t_option t)-> {[@expl:postcondition] [#"../13_cloned.rs" 52 26 52 35] inv'2 result}
      {[@expl:postcondition] [#"../13_cloned.rs" 48 14 51 5] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C13Cloned_Impl0
  type i
  type t
  use seq.Seq
  predicate invariant'4 (self : Seq.seq t)
  let rec invariant'4 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Seq.seq t)
  let rec inv'4 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Seq.seq t . inv'4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option t)
  let rec invariant'3 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option t)
  let rec inv'3 (_x:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option t . inv'3 x = true
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  use prelude.Borrow
  predicate invariant'2 (self : borrowed (C13Cloned_Cloned_Type.t_cloned i))
  let rec invariant'2 (self:borrowed (C13Cloned_Cloned_Type.t_cloned i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (C13Cloned_Cloned_Type.t_cloned i))
  let rec inv'2 (_x:borrowed (C13Cloned_Cloned_Type.t_cloned i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (C13Cloned_Cloned_Type.t_cloned i) . inv'2 x = true
  predicate invariant'1 (self : Seq.seq t)
  let rec invariant'1 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq t)
  let rec inv'1 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq t . inv'1 x = true
  predicate invariant'0 (self : C13Cloned_Cloned_Type.t_cloned i)
  let rec invariant'0 (self:C13Cloned_Cloned_Type.t_cloned i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C13Cloned_Cloned_Type.t_cloned i)
  let rec inv'0 (_x:C13Cloned_Cloned_Type.t_cloned i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C13Cloned_Cloned_Type.t_cloned i . inv'0 x = true
  use seq.Seq
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate completed'0 [#"../13_cloned.rs" 22 4 22 35] (self : borrowed (C13Cloned_Cloned_Type.t_cloned i)) =
    [#"../13_cloned.rs" 23 8 23 43] completed'1 (Borrow.borrow_logic (C13Cloned_Cloned_Type.cloned_iter ( * self)) (C13Cloned_Cloned_Type.cloned_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
  let rec completed'0 (self:borrowed (C13Cloned_Cloned_Type.t_cloned i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq t) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  predicate produces'0 [#"../13_cloned.rs" 28 4 28 64] (self : C13Cloned_Cloned_Type.t_cloned i) (visited : Seq.seq t) (o : C13Cloned_Cloned_Type.t_cloned i)
    
   =
    [#"../13_cloned.rs" 29 8 33 9] exists s : Seq.seq t . inv'4 s
    /\ produces'1 (C13Cloned_Cloned_Type.cloned_iter self) s (C13Cloned_Cloned_Type.cloned_iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  let rec produces'0 (self:C13Cloned_Cloned_Type.t_cloned i) (visited:Seq.seq t) (o:C13Cloned_Cloned_Type.t_cloned i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  goal produces_trans_refn : [#"../13_cloned.rs" 46 4 46 90] forall a : C13Cloned_Cloned_Type.t_cloned i . forall ab : Seq.seq t . forall b : C13Cloned_Cloned_Type.t_cloned i . forall bc : Seq.seq t . forall c : C13Cloned_Cloned_Type.t_cloned i . inv'0 c
  /\ inv'1 bc /\ inv'0 b /\ inv'1 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'0 c
  /\ inv'1 bc
  /\ inv'0 b
  /\ inv'1 ab
  /\ inv'0 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  goal produces_refl_refn : [#"../13_cloned.rs" 39 4 39 26] forall self : C13Cloned_Cloned_Type.t_cloned i . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t) self
   -> produces'0 self (Seq.empty  : Seq.seq t) self)
  goal next_refn : [#"../13_cloned.rs" 52 4 52 35] forall self : borrowed (C13Cloned_Cloned_Type.t_cloned i) . inv'2 self
   -> inv'2 self
  /\ (forall result : Core_Option_Option_Type.t_option t . inv'3 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv'3 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
end
