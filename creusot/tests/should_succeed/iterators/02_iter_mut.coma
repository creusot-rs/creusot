
module C02IterMut_IterMut_Type
  use prelude.Slice
  use prelude.Borrow
  type t_itermut 't =
    | C_IterMut (borrowed (slice 't))
    
  function any_l (_ : 'b) : 'a
  let rec t_itermut < 't > (input:t_itermut 't) (ret  (inner:borrowed (slice 't)))= any
    [ good (inner:borrowed (slice 't))-> {C_IterMut inner = input} (! ret {inner})
    | bad (inner:borrowed (slice 't))-> {C_IterMut inner <> input} {false} any ]
    
  function itermut_inner (self : t_itermut 't) : borrowed (slice 't) =
    match self with
      | C_IterMut a -> a
      end
end
module C02IterMut_Impl1_ProducesRefl_Impl
  type t
  use seq.Seq
  predicate invariant'4 (self : Seq.seq t)
  let rec invariant'4 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Seq.seq t)
  let rec inv'4 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Seq.seq t . inv'4 x = true
  use prelude.Slice
  predicate invariant'3 (self : slice t)
  let rec invariant'3 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : slice t)
  let rec inv'3 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : slice t . inv'3 x = true
  use prelude.Borrow
  predicate invariant'2 (self : Seq.seq (borrowed t))
  let rec invariant'2 (self:Seq.seq (borrowed t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Seq.seq (borrowed t))
  let rec inv'2 (_x:Seq.seq (borrowed t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Seq.seq (borrowed t) . inv'2 x = true
  predicate invariant'1 (self : borrowed (slice t))
  let rec invariant'1 (self:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (slice t))
  let rec inv'1 (_x:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (slice t) . inv'1 x = true
  use seq.Seq
  use prelude.Slice
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  function shallow_model'1 (self : slice t) : Seq.seq t
  let rec shallow_model'1 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'3 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'1 self} (! return' {result}) ] 
  axiom shallow_model'1_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'4 (shallow_model'1 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'1 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (max'0 : usize))
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant'0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model'1 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'1 ( * C02IterMut_IterMut_Type.itermut_inner self))
  let rec invariant'0 (self:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C02IterMut_IterMut_Type.t_itermut t)
  let rec inv'0 (_x:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C02IterMut_IterMut_Type.t_itermut t . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'1 self) ix
  let rec index_logic'0 (self:slice t) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  function shallow_model'0 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'1 ( * self)
  let rec shallow_model'0 (self:borrowed (slice t)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use seq.Seq
  function to_mut_seq'0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
  let rec to_mut_seq'0 (self:borrowed (slice t)) (return'  (ret:Seq.seq (borrowed t)))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv'1 self}
    any [ return' (result:Seq.seq (borrowed t))-> {result = to_mut_seq'0 self} (! return' {result}) ] 
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43] inv'2 (to_mut_seq'0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)  ->  ^ Seq.get (to_mut_seq'0 self) i = index_logic'0 ( ^ self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)  ->  * Seq.get (to_mut_seq'0 self) i = index_logic'0 ( * self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41] Seq.length (to_mut_seq'0 self)
  = Seq.length (shallow_model'0 self))
  predicate produces'0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
   =
    [#"../02_iter_mut.rs" 39 12 43 13] Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length visited + Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner self))
     ->  * Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  * Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i
    /\  ^ Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  ^ Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i)
  let rec produces'0 (self:C02IterMut_IterMut_Type.t_itermut t) (visited:Seq.seq (borrowed t)) (tl:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  use seq.Seq
  constant self  : C02IterMut_IterMut_Type.t_itermut t
  function produces_refl [#"../02_iter_mut.rs" 50 4 50 26] (self : C02IterMut_IterMut_Type.t_itermut t) : ()
  goal vc_produces_refl : ([#"../02_iter_mut.rs" 50 21 50 25] inv'0 self)
   -> ([#"../02_iter_mut.rs" 49 14 49 45] produces'0 self (Seq.empty  : Seq.seq (borrowed t)) self)
end
module C02IterMut_Impl1_ProducesTrans_Impl
  type t
  use seq.Seq
  predicate invariant'4 (self : Seq.seq t)
  let rec invariant'4 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Seq.seq t)
  let rec inv'4 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Seq.seq t . inv'4 x = true
  use prelude.Slice
  predicate invariant'3 (self : slice t)
  let rec invariant'3 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : slice t)
  let rec inv'3 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : slice t . inv'3 x = true
  use prelude.Borrow
  predicate invariant'2 (self : borrowed (slice t))
  let rec invariant'2 (self:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (slice t))
  let rec inv'2 (_x:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (slice t) . inv'2 x = true
  predicate invariant'1 (self : Seq.seq (borrowed t))
  let rec invariant'1 (self:Seq.seq (borrowed t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq (borrowed t))
  let rec inv'1 (_x:Seq.seq (borrowed t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq (borrowed t) . inv'1 x = true
  use seq.Seq
  use prelude.Slice
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  function shallow_model'1 (self : slice t) : Seq.seq t
  let rec shallow_model'1 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'3 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'1 self} (! return' {result}) ] 
  axiom shallow_model'1_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'4 (shallow_model'1 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'1 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (max'0 : usize))
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant'0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model'1 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'1 ( * C02IterMut_IterMut_Type.itermut_inner self))
  let rec invariant'0 (self:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C02IterMut_IterMut_Type.t_itermut t)
  let rec inv'0 (_x:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C02IterMut_IterMut_Type.t_itermut t . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'1 self) ix
  let rec index_logic'0 (self:slice t) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  function shallow_model'0 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'1 ( * self)
  let rec shallow_model'0 (self:borrowed (slice t)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use seq.Seq
  function to_mut_seq'0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
  let rec to_mut_seq'0 (self:borrowed (slice t)) (return'  (ret:Seq.seq (borrowed t)))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv'2 self}
    any [ return' (result:Seq.seq (borrowed t))-> {result = to_mut_seq'0 self} (! return' {result}) ] 
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43] inv'1 (to_mut_seq'0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)  ->  ^ Seq.get (to_mut_seq'0 self) i = index_logic'0 ( ^ self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)  ->  * Seq.get (to_mut_seq'0 self) i = index_logic'0 ( * self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41] Seq.length (to_mut_seq'0 self)
  = Seq.length (shallow_model'0 self))
  predicate produces'0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
   =
    [#"../02_iter_mut.rs" 39 12 43 13] Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length visited + Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner self))
     ->  * Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  * Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i
    /\  ^ Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  ^ Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i)
  let rec produces'0 (self:C02IterMut_IterMut_Type.t_itermut t) (visited:Seq.seq (borrowed t)) (tl:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  constant a  : C02IterMut_IterMut_Type.t_itermut t
  constant ab  : Seq.seq (borrowed t)
  constant b  : C02IterMut_IterMut_Type.t_itermut t
  constant bc  : Seq.seq (borrowed t)
  constant c  : C02IterMut_IterMut_Type.t_itermut t
  function produces_trans [#"../02_iter_mut.rs" 57 4 57 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    
  goal vc_produces_trans : ([#"../02_iter_mut.rs" 57 82 57 83] inv'0 c)
   -> ([#"../02_iter_mut.rs" 57 61 57 63] inv'1 bc)
   -> ([#"../02_iter_mut.rs" 57 52 57 53] inv'0 b)
   -> ([#"../02_iter_mut.rs" 57 31 57 33] inv'1 ab)
   -> ([#"../02_iter_mut.rs" 57 22 57 23] inv'0 a)
   -> ([#"../02_iter_mut.rs" 55 15 55 32] produces'0 b bc c)
   -> ([#"../02_iter_mut.rs" 54 15 54 32] produces'0 a ab b)
   -> ([#"../02_iter_mut.rs" 56 14 56 42] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C02IterMut_Impl1_Next
  type t
  use prelude.Borrow
  use seq.Seq
  predicate invariant'7 (self : Seq.seq (borrowed t))
  let rec invariant'7 (self:Seq.seq (borrowed t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Seq.seq (borrowed t))
  let rec inv'7 (_x:Seq.seq (borrowed t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Seq.seq (borrowed t) . inv'7 x = true
  use prelude.Slice
  predicate inv'0 (_x : borrowed (slice t))
  let rec inv'0 (_x:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  use seq.Seq
  predicate inv'5 (_x : Seq.seq t)
  let rec inv'5 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  use prelude.Slice
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  predicate inv'4 (_x : slice t)
  let rec inv'4 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  function shallow_model'0 (self : slice t) : Seq.seq t
  let rec shallow_model'0 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'4 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ] 
  axiom shallow_model'0_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'5 (shallow_model'0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'0 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize))
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant'6 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model'0 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'0 ( * C02IterMut_IterMut_Type.itermut_inner self))
  let rec invariant'6 (self:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : C02IterMut_IterMut_Type.t_itermut t)
  let rec inv'6 (_x:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : C02IterMut_IterMut_Type.t_itermut t . inv'6 x
  = (invariant'6 x
  /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  predicate invariant'5 (self : Seq.seq t)
  let rec invariant'5 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq t . inv'5 x = true
  predicate invariant'4 (self : slice t)
  let rec invariant'4 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : slice t . inv'4 x = true
  predicate invariant'3 (self : borrowed (borrowed (slice t)))
  let rec invariant'3 (self:borrowed (borrowed (slice t))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed (borrowed (slice t)))
  let rec inv'3 (_x:borrowed (borrowed (slice t))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed (borrowed (slice t)) . inv'3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'2 (self : Core_Option_Option_Type.t_option (borrowed t))
  let rec invariant'2 (self:Core_Option_Option_Type.t_option (borrowed t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option (borrowed t))
  let rec inv'2 (_x:Core_Option_Option_Type.t_option (borrowed t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option (borrowed t) . inv'2 x = true
  predicate invariant'1 (self : borrowed (C02IterMut_IterMut_Type.t_itermut t))
  let rec invariant'1 (self:borrowed (C02IterMut_IterMut_Type.t_itermut t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (C02IterMut_IterMut_Type.t_itermut t))
  let rec inv'1 (_x:borrowed (C02IterMut_IterMut_Type.t_itermut t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (C02IterMut_IterMut_Type.t_itermut t) . inv'1 x = (inv'6 ( * x) /\ inv'6 ( ^ x))
  predicate invariant'0 (self : borrowed (slice t))
  let rec invariant'0 (self:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed (slice t) . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'0 self) ix
  let rec index_logic'0 (self:slice t) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  function shallow_model'1 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'0 ( * self)
  let rec shallow_model'1 (self:borrowed (slice t)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  use seq.Seq
  function to_mut_seq'0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
  let rec to_mut_seq'0 (self:borrowed (slice t)) (return'  (ret:Seq.seq (borrowed t)))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv'0 self}
    any [ return' (result:Seq.seq (borrowed t))-> {result = to_mut_seq'0 self} (! return' {result}) ] 
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43] inv'7 (to_mut_seq'0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)  ->  ^ Seq.get (to_mut_seq'0 self) i = index_logic'0 ( ^ self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)  ->  * Seq.get (to_mut_seq'0 self) i = index_logic'0 ( * self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41] Seq.length (to_mut_seq'0 self)
  = Seq.length (shallow_model'1 self))
  predicate produces'0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
   =
    [#"../02_iter_mut.rs" 39 12 43 13] Seq.length (shallow_model'1 (C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length visited + Seq.length (shallow_model'1 (C02IterMut_IterMut_Type.itermut_inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'1 (C02IterMut_IterMut_Type.itermut_inner self))
     ->  * Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  * Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i
    /\  ^ Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  ^ Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i)
  let rec produces'0 (self:C02IterMut_IterMut_Type.t_itermut t) (visited:Seq.seq (borrowed t)) (tl:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate resolve'1 (self : borrowed (slice t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate completed'0 [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) =
    [#"../02_iter_mut.rs" 32 8 32 76] resolve'1 (C02IterMut_IterMut_Type.itermut_inner ( * self))
    /\ Seq.(==) (shallow_model'1 (C02IterMut_IterMut_Type.itermut_inner ( * self))) (Seq.empty  : Seq.seq t)
  let rec completed'0 (self:borrowed (C02IterMut_IterMut_Type.t_itermut t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'0 (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C02IterMut_IterMut_Type.t_itermut t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use seq_ext.SeqExt
  function tail'0 (self : Seq.seq t) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/logic/seq.rs" 52 8 52 39] SeqExt.subsequence self 1 (Seq.length self)
  let rec tail'0 (self:Seq.seq t) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = tail'0 self} (! return' {result}) ]
    
  let rec take_first_mut'0 (self:borrowed (borrowed (slice t))) (return'  (ret:Core_Option_Option_Type.t_option (borrowed t)))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option (borrowed t))-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/slice.rs" 284 18 291 9] match result with
        | Core_Option_Option_Type.C_Some r ->  * r = index_logic'0 ( *  * self) 0
        /\  ^ r = index_logic'0 ( ^  * self) 0
        /\ Seq.length (shallow_model'0 ( *  * self)) > 0
        /\ Seq.length (shallow_model'0 ( ^  * self)) > 0
        /\ shallow_model'0 ( *  ^ self) = tail'0 (shallow_model'0 ( *  * self))
        /\ shallow_model'0 ( ^  ^ self) = tail'0 (shallow_model'0 ( ^  * self))
        | Core_Option_Option_Type.C_None -> shallow_model'0 ( *  ^ self) = (Seq.empty  : Seq.seq t)
        /\ shallow_model'0 ( ^  * self) = (Seq.empty  : Seq.seq t)
        /\ shallow_model'0 ( *  * self) = (Seq.empty  : Seq.seq t)
        /\ shallow_model'0 ( ^  ^ self) = (Seq.empty  : Seq.seq t)
        end}
      (! return' {result}) ]
    
  let rec next (self:borrowed (C02IterMut_IterMut_Type.t_itermut t)) (return'  (ret:Core_Option_Option_Type.t_option (borrowed t)))= {[#"../02_iter_mut.rs" 63 17 63 21] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = C02IterMut_IterMut_Type.t_itermut <t> { * self}
          (fun (rinner'0:borrowed (slice t)) ->
            Borrow.borrow_final <borrowed (slice t)> {rinner'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (borrowed (slice t))) ->
                 [ &_3 <- _ret' ] 
                C02IterMut_IterMut_Type.t_itermut <t> { * self}
                  (fun (l_inner'0:borrowed (slice t)) ->
                    
                    [ &self <- { self with current = (C02IterMut_IterMut_Type.C_IterMut ( ^ _3) : C02IterMut_IterMut_Type.t_itermut t) ; } ]
                    
                    s1)))
      | s1 = -{inv'0 ( ^ _3)}- s2
      | s2 = take_first_mut'0 {_3} (fun (_ret':Core_Option_Option_Type.t_option (borrowed t)) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option (borrowed t) = any_l () : Core_Option_Option_Type.t_option (borrowed t)
    | & self : borrowed (C02IterMut_IterMut_Type.t_itermut t) = self
    | & _3 : borrowed (borrowed (slice t)) = any_l () : borrowed (borrowed (slice t)) ]
    
    [ return' (result:Core_Option_Option_Type.t_option (borrowed t))-> {[@expl:postcondition] [#"../02_iter_mut.rs" 63 26 63 44] inv'2 result}
      {[@expl:postcondition] [#"../02_iter_mut.rs" 59 14 62 5] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C02IterMut_Impl2_IntoIter
  type t
  use seq.Seq
  predicate invariant'3 (self : Seq.seq t)
  let rec invariant'3 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq t)
  let rec inv'3 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq t . inv'3 x = true
  use prelude.Slice
  predicate invariant'2 (self : slice t)
  let rec invariant'2 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : slice t)
  let rec inv'2 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : slice t . inv'2 x = true
  use prelude.Borrow
  predicate invariant'1 (self : borrowed (slice t))
  let rec invariant'1 (self:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (slice t))
  let rec inv'1 (_x:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (slice t) . inv'1 x = true
  use seq.Seq
  use prelude.Slice
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  function shallow_model'0 (self : slice t) : Seq.seq t
  let rec shallow_model'0 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'2 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ] 
  axiom shallow_model'0_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'3 (shallow_model'0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'0 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize))
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant'0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model'0 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'0 ( * C02IterMut_IterMut_Type.itermut_inner self))
  let rec invariant'0 (self:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C02IterMut_IterMut_Type.t_itermut t)
  let rec inv'0 (_x:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C02IterMut_IterMut_Type.t_itermut t . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  use prelude.Intrinsic
  let rec into_iter (self:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:C02IterMut_IterMut_Type.t_itermut t))= {[#"../02_iter_mut.rs" 70 17 70 21] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- self ] (any [ any_ (_any:C02IterMut_IterMut_Type.t_itermut t)-> (!  [ &self <- _any ] s1) ] )
      | s1 = return' {_0} ]
       ]
    )
    [ & _0 : C02IterMut_IterMut_Type.t_itermut t = any_l () : C02IterMut_IterMut_Type.t_itermut t
    | & self : C02IterMut_IterMut_Type.t_itermut t = self ]
    
    [ return' (result:C02IterMut_IterMut_Type.t_itermut t)-> {[@expl:postcondition] [#"../02_iter_mut.rs" 70 26 70 30] inv'0 result}
      {[@expl:postcondition] [#"../02_iter_mut.rs" 69 14 69 28] result = self}
      (! return' {result}) ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Core_Ops_Range_RangeFull_Type
  type t_rangefull  =
    | C_RangeFull
    
  function any_l (_ : 'b) : 'a
  let rec t_rangefull (input:t_rangefull) (ret  )= any
    [ good -> {C_RangeFull  = input} (! ret) | bad -> {C_RangeFull  <> input} {false} any ]
    
end
module C02IterMut_IterMut
  type t
  use seq.Seq
  predicate invariant'6 (self : Seq.seq t)
  let rec invariant'6 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq t)
  let rec inv'6 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq t . inv'6 x = true
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate invariant'5 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:Core_Ops_Range_RangeFull_Type.t_rangefull) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Core_Ops_Range_RangeFull_Type.t_rangefull)
  let rec inv'5 (_x:Core_Ops_Range_RangeFull_Type.t_rangefull) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Core_Ops_Range_RangeFull_Type.t_rangefull . inv'5 x = true
  use prelude.Slice
  use prelude.Borrow
  predicate inv'2 (_x : borrowed (slice t))
  let rec inv'2 (_x:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  use seq.Seq
  use prelude.Slice
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  predicate inv'1 (_x : slice t)
  let rec inv'1 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  function shallow_model'2 (self : slice t) : Seq.seq t
  let rec shallow_model'2 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'1 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'2 self} (! return' {result}) ] 
  axiom shallow_model'2_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'6 (shallow_model'2 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'2 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant'4 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model'2 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'2 ( * C02IterMut_IterMut_Type.itermut_inner self))
  let rec invariant'4 (self:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : C02IterMut_IterMut_Type.t_itermut t)
  let rec inv'4 (_x:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : C02IterMut_IterMut_Type.t_itermut t . inv'4 x
  = (invariant'4 x
  /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant'3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec invariant'3 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'3 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv'3 x = true
  predicate invariant'2 (self : borrowed (slice t))
  let rec invariant'2 (self:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (slice t) . inv'2 x = true
  predicate invariant'1 (self : slice t)
  let rec invariant'1 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : slice t . inv'1 x = true
  predicate inv'0 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'0 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  function shallow_model'3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  let rec shallow_model'3 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'0 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'3 self} (! return' {result}) ] 
  axiom shallow_model'3_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'6 (shallow_model'3 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'6 (shallow_model'3 self)
  let rec invariant'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'0 x = true
  function shallow_model'1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'3 ( * self)
  let rec shallow_model'1 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  function shallow_model'0 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'2 ( * self)
  let rec shallow_model'0 (self:borrowed (slice t)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (slice t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate resolve_elswhere'0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t)
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 214 20 214 24] true
  let rec resolve_elswhere'0 (self:Core_Ops_Range_RangeFull_Type.t_rangefull) (_old:Seq.seq t) (_fin:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve_elswhere'0 self _old _fin} (! return' {result}) ]
    
  predicate has_value'0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : slice t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 208 20 208 31] seq = shallow_model'2 out
  let rec has_value'0 (self:Core_Ops_Range_RangeFull_Type.t_rangefull) (seq:Seq.seq t) (out:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = has_value'0 self seq out} (! return' {result}) ]
    
  predicate in_bounds'0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 202 20 202 24] true
  let rec in_bounds'0 (self:Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'0 self _seq} (! return' {result}) ]
    
  let rec index_mut'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (index:Core_Ops_Range_RangeFull_Type.t_rangefull) (return'  (ret:borrowed (slice t)))= {[@expl:precondition] inv'5 index}
    {[@expl:precondition] inv'3 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46] in_bounds'0 index (shallow_model'1 self)}
    any
    [ return' (result:borrowed (slice t))-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55] Seq.length (shallow_model'3 ( ^ self))
      = Seq.length (shallow_model'1 self)}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62] resolve_elswhere'0 index (shallow_model'1 self) (shallow_model'3 ( ^ self))}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57] has_value'0 index (shallow_model'3 ( ^ self)) ( ^ result)}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54] has_value'0 index (shallow_model'1 self) ( * result)}
      (! return' {result}) ]
    
  let rec iter_mut (v:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:C02IterMut_IterMut_Type.t_itermut t))= {[#"../02_iter_mut.rs" 78 19 78 20] inv'3 v}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final
          <Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)>
          { * v}
          {Borrow.get_id v}
          (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) ->
             [ &_8 <- _ret' ] 
             [ &v <- { v with current = ( ^ _8) ; } ] 
            s1)
      | s1 = -{inv'0 ( ^ _8)}- s2
      | s2 =  [ &_9 <- Core_Ops_Range_RangeFull_Type.C_RangeFull ] s3
      | s3 = index_mut'0 {_8} {_9} (fun (_ret':borrowed (slice t)) ->  [ &_7 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <slice t> { * _7} {Borrow.get_id _7}
          (fun (_ret':borrowed (slice t)) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = ( ^ _6) ; } ] s1)
      | s1 = -{inv'1 ( ^ _6)}- s2
      | s2 = Borrow.borrow_final <slice t> { * _6} {Borrow.get_id _6}
          (fun (_ret':borrowed (slice t)) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = ( ^ _5) ; } ] s3)
      | s3 = -{inv'1 ( ^ _5)}- s4
      | s4 =  [ &_0 <- C02IterMut_IterMut_Type.C_IterMut _5 : C02IterMut_IterMut_Type.t_itermut t ] 
        (any [ any_ (_any:borrowed (slice t))-> (!  [ &_5 <- _any ] s5) ] )
      | s5 = {[@expl:type invariant] inv'2 _7} s6
      | s6 = -{resolve'0 _7}- s7
      | s7 = {[@expl:type invariant] inv'2 _6} s8
      | s8 = -{resolve'0 _6}- s9
      | s9 = {[@expl:type invariant] inv'3 v} s10
      | s10 = -{resolve'1 v}- s11
      | s11 = return' {_0} ]
       ]
    )
    [ & _0 : C02IterMut_IterMut_Type.t_itermut t = any_l () : C02IterMut_IterMut_Type.t_itermut t
    | & v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = v
    | & _5 : borrowed (slice t) = any_l () : borrowed (slice t)
    | & _6 : borrowed (slice t) = any_l () : borrowed (slice t)
    | & _7 : borrowed (slice t) = any_l () : borrowed (slice t)
    | & _8 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
    | & _9 : Core_Ops_Range_RangeFull_Type.t_rangefull = any_l () : Core_Ops_Range_RangeFull_Type.t_rangefull ]
    
    [ return' (result:C02IterMut_IterMut_Type.t_itermut t)-> {[@expl:postcondition] [#"../02_iter_mut.rs" 78 41 78 55] inv'4 result}
      {[@expl:postcondition] [#"../02_iter_mut.rs" 77 10 77 33] Seq.length (shallow_model'3 ( ^ v))
      = Seq.length (shallow_model'1 v)}
      {[@expl:postcondition] [#"../02_iter_mut.rs" 76 10 76 35] shallow_model'2 ( ^ C02IterMut_IterMut_Type.itermut_inner result)
      = shallow_model'3 ( ^ v)}
      {[@expl:postcondition] [#"../02_iter_mut.rs" 75 10 75 29] shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner result)
      = shallow_model'1 v}
      (! return' {result}) ]
    
end
module C02IterMut_AllZero
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  predicate invariant'8 (self : Seq.seq (borrowed usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'8 (self:Seq.seq (borrowed usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Seq.seq (borrowed usize))
  let rec inv'8 (_x:Seq.seq (borrowed usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Seq.seq (borrowed usize) . inv'8 x = true
  use prelude.Slice
  predicate invariant'7 (self : borrowed (slice usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:borrowed (slice usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : borrowed (slice usize))
  let rec inv'7 (_x:borrowed (slice usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : borrowed (slice usize) . inv'7 x = true
  predicate invariant'6 (self : slice usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:slice usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : slice usize)
  let rec inv'6 (_x:slice usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : slice usize . inv'6 x = true
  predicate invariant'5 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq usize)
  let rec inv'5 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq usize . inv'5 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'4 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'4 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'4 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'0 self} (! return' {result}) ] 
  axiom shallow_model'0_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'5 (shallow_model'0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'5 (shallow_model'0 self)
  let rec invariant'4 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option (borrowed usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Core_Option_Option_Type.t_option (borrowed usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option (borrowed usize))
  let rec inv'3 (_x:Core_Option_Option_Type.t_option (borrowed usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option (borrowed usize) . inv'3 x = true
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant'2 (self : borrowed (C02IterMut_IterMut_Type.t_itermut usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:borrowed (C02IterMut_IterMut_Type.t_itermut usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C02IterMut_IterMut_Type.t_itermut usize)
  let rec inv'0 (_x:C02IterMut_IterMut_Type.t_itermut usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (C02IterMut_IterMut_Type.t_itermut usize))
  let rec inv'2 (_x:borrowed (C02IterMut_IterMut_Type.t_itermut usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (C02IterMut_IterMut_Type.t_itermut usize) . inv'2 x = (inv'0 ( * x) /\ inv'0 ( ^ x))
  predicate invariant'1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'1 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv'1 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Slice
  function shallow_model'3 (self : slice usize) : Seq.seq usize
  let rec shallow_model'3 (self:slice usize) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'6 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'3 self} (! return' {result}) ] 
  axiom shallow_model'3_spec : forall self : slice usize . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'5 (shallow_model'3 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'3 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (max'0 : usize))
  function index_logic'2 [@inline:trivial] (self : slice usize) (ix : int) : usize =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'3 self) ix
  let rec index_logic'2 (self:slice usize) (ix:int) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = index_logic'2 self ix} (! return' {result}) ]
    
  function shallow_model'2 (self : borrowed (slice usize)) : Seq.seq usize =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'3 ( * self)
  let rec shallow_model'2 (self:borrowed (slice usize)) (return'  (ret:Seq.seq usize))= any
    [ return' (result:Seq.seq usize)-> {result = shallow_model'2 self} (! return' {result}) ]
    
  use seq.Seq
  function to_mut_seq'0 (self : borrowed (slice usize)) : Seq.seq (borrowed usize)
  let rec to_mut_seq'0 (self:borrowed (slice usize)) (return'  (ret:Seq.seq (borrowed usize)))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv'7 self}
    any [ return' (result:Seq.seq (borrowed usize))-> {result = to_mut_seq'0 self} (! return' {result}) ] 
  axiom to_mut_seq'0_spec : forall self : borrowed (slice usize) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43] inv'8 (to_mut_seq'0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)  ->  ^ Seq.get (to_mut_seq'0 self) i = index_logic'2 ( ^ self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)  ->  * Seq.get (to_mut_seq'0 self) i = index_logic'2 ( * self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41] Seq.length (to_mut_seq'0 self)
  = Seq.length (shallow_model'2 self))
  predicate produces'0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut usize) (visited : Seq.seq (borrowed usize)) (tl : C02IterMut_IterMut_Type.t_itermut usize)
    
   =
    [#"../02_iter_mut.rs" 39 12 43 13] Seq.length (shallow_model'2 (C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length visited + Seq.length (shallow_model'2 (C02IterMut_IterMut_Type.itermut_inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'2 (C02IterMut_IterMut_Type.itermut_inner self))
     ->  * Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  * Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i
    /\  ^ Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  ^ Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i)
  let rec produces'0 (self:C02IterMut_IterMut_Type.t_itermut usize) (visited:Seq.seq (borrowed usize)) (tl:C02IterMut_IterMut_Type.t_itermut usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  function produces_trans'0 [#"../02_iter_mut.rs" 57 4 57 90] (a : C02IterMut_IterMut_Type.t_itermut usize) (ab : Seq.seq (borrowed usize)) (b : C02IterMut_IterMut_Type.t_itermut usize) (bc : Seq.seq (borrowed usize)) (c : C02IterMut_IterMut_Type.t_itermut usize) : ()
    
   =
    [#"../02_iter_mut.rs" 52 4 52 10] ()
  let rec produces_trans'0 (a:C02IterMut_IterMut_Type.t_itermut usize) (ab:Seq.seq (borrowed usize)) (b:C02IterMut_IterMut_Type.t_itermut usize) (bc:Seq.seq (borrowed usize)) (c:C02IterMut_IterMut_Type.t_itermut usize) (return'  (ret:()))= {[@expl:precondition] [#"../02_iter_mut.rs" 57 82 57 83] inv'0 c}
    {[@expl:precondition] [#"../02_iter_mut.rs" 57 61 57 63] inv'8 bc}
    {[@expl:precondition] [#"../02_iter_mut.rs" 57 52 57 53] inv'0 b}
    {[@expl:precondition] [#"../02_iter_mut.rs" 57 31 57 33] inv'8 ab}
    {[@expl:precondition] [#"../02_iter_mut.rs" 57 22 57 23] inv'0 a}
    {[@expl:precondition] [#"../02_iter_mut.rs" 55 15 55 32] produces'0 b bc c}
    {[@expl:precondition] [#"../02_iter_mut.rs" 54 15 54 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : C02IterMut_IterMut_Type.t_itermut usize, ab : Seq.seq (borrowed usize), b : C02IterMut_IterMut_Type.t_itermut usize, bc : Seq.seq (borrowed usize), c : C02IterMut_IterMut_Type.t_itermut usize . ([#"../02_iter_mut.rs" 54 15 54 32] produces'0 a ab b)
   -> ([#"../02_iter_mut.rs" 55 15 55 32] produces'0 b bc c)
   -> ([#"../02_iter_mut.rs" 57 22 57 23] inv'0 a)
   -> ([#"../02_iter_mut.rs" 57 31 57 33] inv'8 ab)
   -> ([#"../02_iter_mut.rs" 57 52 57 53] inv'0 b)
   -> ([#"../02_iter_mut.rs" 57 61 57 63] inv'8 bc)
   -> ([#"../02_iter_mut.rs" 57 82 57 83] inv'0 c)
   -> ([#"../02_iter_mut.rs" 56 14 56 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../02_iter_mut.rs" 50 4 50 26] (self : C02IterMut_IterMut_Type.t_itermut usize) : () =
    [#"../02_iter_mut.rs" 47 4 47 10] ()
  let rec produces_refl'0 (self:C02IterMut_IterMut_Type.t_itermut usize) (return'  (ret:()))= {[@expl:precondition] [#"../02_iter_mut.rs" 50 21 50 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : C02IterMut_IterMut_Type.t_itermut usize . ([#"../02_iter_mut.rs" 50 21 50 25] inv'0 self)
   -> ([#"../02_iter_mut.rs" 49 14 49 45] produces'0 self (Seq.empty  : Seq.seq (borrowed usize)) self)
  predicate invariant'0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut usize) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model'3 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'3 ( * C02IterMut_IterMut_Type.itermut_inner self))
  let rec invariant'0 (self:C02IterMut_IterMut_Type.t_itermut usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : C02IterMut_IterMut_Type.t_itermut usize . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  function index_logic'1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'0 self) ix
  let rec index_logic'1 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = index_logic'1 self ix} (! return' {result}) ]
    
  function shallow_model'1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'0 ( * self)
  let rec shallow_model'1 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq usize))= any
    [ return' (result:Seq.seq usize)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate resolve'2 (self : borrowed (slice usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed (slice usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate completed'0 [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut usize)) =
    [#"../02_iter_mut.rs" 32 8 32 76] resolve'2 (C02IterMut_IterMut_Type.itermut_inner ( * self))
    /\ Seq.(==) (shallow_model'2 (C02IterMut_IterMut_Type.itermut_inner ( * self))) (Seq.empty  : Seq.seq usize)
  let rec completed'0 (self:borrowed (C02IterMut_IterMut_Type.t_itermut usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (C02IterMut_IterMut_Type.t_itermut usize)) (return'  (ret:Core_Option_Option_Type.t_option (borrowed usize)))= {[@expl:precondition] [#"../02_iter_mut.rs" 63 17 63 21] inv'2 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option (borrowed usize))-> {[#"../02_iter_mut.rs" 63 26 63 44] inv'3 result}
      {[#"../02_iter_mut.rs" 59 14 62 5] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq (borrowed usize))) (ix : int) : borrowed usize
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33] Seq.get (Snapshot.inner self) ix
  let rec index_logic'0 (self:Snapshot.snap_ty (Seq.seq (borrowed usize))) (ix:int) (return'  (ret:borrowed usize))= any
    [ return' (result:borrowed usize)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  let rec into_iter'0 (self:C02IterMut_IterMut_Type.t_itermut usize) (return'  (ret:C02IterMut_IterMut_Type.t_itermut usize))= {[@expl:precondition] [#"../02_iter_mut.rs" 70 17 70 21] inv'0 self}
    any
    [ return' (result:C02IterMut_IterMut_Type.t_itermut usize)-> {[#"../02_iter_mut.rs" 70 26 70 30] inv'0 result}
      {[#"../02_iter_mut.rs" 69 14 69 28] result = self}
      (! return' {result}) ]
    
  let rec iter_mut'0 (v:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:C02IterMut_IterMut_Type.t_itermut usize))= {[@expl:precondition] [#"../02_iter_mut.rs" 78 19 78 20] inv'1 v}
    any
    [ return' (result:C02IterMut_IterMut_Type.t_itermut usize)-> {[#"../02_iter_mut.rs" 78 41 78 55] inv'0 result}
      {[#"../02_iter_mut.rs" 77 10 77 33] Seq.length (shallow_model'0 ( ^ v)) = Seq.length (shallow_model'1 v)}
      {[#"../02_iter_mut.rs" 76 10 76 35] shallow_model'3 ( ^ C02IterMut_IterMut_Type.itermut_inner result)
      = shallow_model'0 ( ^ v)}
      {[#"../02_iter_mut.rs" 75 10 75 29] shallow_model'2 (C02IterMut_IterMut_Type.itermut_inner result)
      = shallow_model'1 v}
      (! return' {result}) ]
    
  let rec all_zero (v:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final
          <Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)>
          { * v}
          {Borrow.get_id v}
          (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) ->
             [ &_6 <- _ret' ] 
             [ &v <- { v with current = ( ^ _6) ; } ] 
            s1)
      | s1 = iter_mut'0 {_6} (fun (_ret':C02IterMut_IterMut_Type.t_itermut usize) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = into_iter'0 {_5} (fun (_ret':C02IterMut_IterMut_Type.t_itermut usize) ->  [ &it <- _ret' ] s1) | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = 
        [ &iter_old <- ([#"../02_iter_mut.rs" 86 19 86 35] Snapshot.new it) : Snapshot.snap_ty (C02IterMut_IterMut_Type.t_itermut usize) ]
        
        s1
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = 
        [ &produced <- ([#"../02_iter_mut.rs" 87 23 87 47] Snapshot.new (Seq.empty  : Seq.seq (borrowed usize))) : Snapshot.snap_ty (Seq.seq (borrowed usize)) ]
        
        s1
      | s1 = bb4 ]
      
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [#"../02_iter_mut.rs" 88 4 88 25] forall i : int . 0 <= i
        /\ i < Seq.length (Snapshot.inner produced)  -> UIntSize.to_int ( ^ index_logic'0 produced i) = 0}
        {[@expl:loop invariant] [#"../02_iter_mut.rs" 89 16 89 55] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) it}
        {[@expl:loop invariant] [#"../02_iter_mut.rs" 88 16 88 23] inv'0 it}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = Borrow.borrow_mut <C02IterMut_IterMut_Type.t_itermut usize> {it}
              (fun (_ret':borrowed (C02IterMut_IterMut_Type.t_itermut usize)) ->
                 [ &_16 <- _ret' ] 
                 [ &it <-  ^ _16 ] 
                s1)
          | s1 = -{inv'0 ( ^ _16)}- s2
          | s2 = next'0 {_16} (fun (_ret':Core_Option_Option_Type.t_option (borrowed usize)) ->  [ &_15 <- _ret' ] s3)
          | s3 = bb7 ]
          
        | bb7 = s0
          [ s0 = any
            [ br0 -> {_15 = Core_Option_Option_Type.C_None } (! bb10)
            | br1 (a:borrowed usize)-> {_15 = Core_Option_Option_Type.C_Some a} (! bb9) ]
             ]
          
        | bb9 = s0 [ s0 = bb11 ] 
        | bb11 = s0
          [ s0 = Core_Option_Option_Type.some <borrowed usize> {_15}
              (fun (r0'0:borrowed usize) ->
                 [ &x <- r0'0 ] 
                (any
                [ any_ (_any:borrowed usize)-> (! Core_Option_Option_Type.some <borrowed usize> {_15}
                    (fun (l_0'0:borrowed usize) ->
                      
                      [ &_15 <- Core_Option_Option_Type.C_Some _any : Core_Option_Option_Type.t_option (borrowed usize) ]
                      
                      s1)) ]
                ))
          | s1 = 
            [ &_19 <- ([#"../02_iter_mut.rs" 94 27 94 75] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton x))) : Snapshot.snap_ty (Seq.seq (borrowed usize)) ]
            
            s2
          | s2 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &produced <- _19 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq (borrowed usize)))-> (!  [ &_19 <- _any ] s1) ] )
          | s1 =  [ &x <- { x with current = ([#"../02_iter_mut.rs" 95 21 95 22] (0 : usize)) ; } ] s2
          | s2 = -{resolve'0 x}- s3
          | s3 = bb5 ]
           ]
         ]
      
    | bb8 = s0 [ s0 = -{resolve'1 v}- s1 | s1 = {[#"../02_iter_mut.rs" 92 14 92 23] false} any ] 
    | bb10 = s0
      [ s0 =  [ &_0 <- [#"../02_iter_mut.rs" 97 20 97 25] () ] s1 | s1 = -{resolve'1 v}- s2 | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) = v
    | & it : C02IterMut_IterMut_Type.t_itermut usize = any_l () : C02IterMut_IterMut_Type.t_itermut usize
    | & _5 : C02IterMut_IterMut_Type.t_itermut usize = any_l () : C02IterMut_IterMut_Type.t_itermut usize
    | & _6 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    | & iter_old : Snapshot.snap_ty (C02IterMut_IterMut_Type.t_itermut usize) = any_l () : Snapshot.snap_ty (C02IterMut_IterMut_Type.t_itermut usize)
    | & produced : Snapshot.snap_ty (Seq.seq (borrowed usize)) = any_l () : Snapshot.snap_ty (Seq.seq (borrowed usize))
    | & _15 : Core_Option_Option_Type.t_option (borrowed usize) = any_l () : Core_Option_Option_Type.t_option (borrowed usize)
    | & _16 : borrowed (C02IterMut_IterMut_Type.t_itermut usize) = any_l () : borrowed (C02IterMut_IterMut_Type.t_itermut usize)
    | & x : borrowed usize = any_l () : borrowed usize
    | & _19 : Snapshot.snap_ty (Seq.seq (borrowed usize)) = any_l () : Snapshot.snap_ty (Seq.seq (borrowed usize)) ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../02_iter_mut.rs" 83 0 83 66] forall i : int . 0 <= i
      /\ i < Seq.length (shallow_model'1 v)  -> UIntSize.to_int (index_logic'1 ( ^ v) i) = 0}
      {[@expl:postcondition] [#"../02_iter_mut.rs" 82 10 82 33] Seq.length (shallow_model'0 ( ^ v))
      = Seq.length (shallow_model'1 v)}
      (! return' {result}) ]
    
end
module C02IterMut_Impl0
  type t
end
module C02IterMut_Impl1
  type t
  use seq.Seq
  predicate invariant'6 (self : Seq.seq t)
  let rec invariant'6 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq t)
  let rec inv'6 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq t . inv'6 x = true
  use prelude.Slice
  predicate invariant'5 (self : slice t)
  let rec invariant'5 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : slice t)
  let rec inv'5 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : slice t . inv'5 x = true
  use prelude.Borrow
  predicate invariant'4 (self : borrowed (slice t))
  let rec invariant'4 (self:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed (slice t))
  let rec inv'4 (_x:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed (slice t) . inv'4 x = true
  predicate invariant'3 (self : Seq.seq (borrowed t))
  let rec invariant'3 (self:Seq.seq (borrowed t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq (borrowed t))
  let rec inv'3 (_x:Seq.seq (borrowed t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq (borrowed t) . inv'3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'2 (self : Core_Option_Option_Type.t_option (borrowed t))
  let rec invariant'2 (self:Core_Option_Option_Type.t_option (borrowed t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option (borrowed t))
  let rec inv'2 (_x:Core_Option_Option_Type.t_option (borrowed t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option (borrowed t) . inv'2 x = true
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant'1 (self : borrowed (C02IterMut_IterMut_Type.t_itermut t))
  let rec invariant'1 (self:borrowed (C02IterMut_IterMut_Type.t_itermut t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C02IterMut_IterMut_Type.t_itermut t)
  let rec inv'0 (_x:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (C02IterMut_IterMut_Type.t_itermut t))
  let rec inv'1 (_x:borrowed (C02IterMut_IterMut_Type.t_itermut t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (C02IterMut_IterMut_Type.t_itermut t) . inv'1 x = (inv'0 ( * x) /\ inv'0 ( ^ x))
  use seq.Seq
  use prelude.Slice
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  function shallow_model'1 (self : slice t) : Seq.seq t
  let rec shallow_model'1 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'5 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'1 self} (! return' {result}) ] 
  axiom shallow_model'1_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'6 (shallow_model'1 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'1 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model'1 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'1 ( * C02IterMut_IterMut_Type.itermut_inner self))
  let rec invariant'0 (self:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : C02IterMut_IterMut_Type.t_itermut t . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  function shallow_model'0 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'1 ( * self)
  let rec shallow_model'0 (self:borrowed (slice t)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (slice t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) =
    [#"../02_iter_mut.rs" 32 8 32 76] resolve'0 (C02IterMut_IterMut_Type.itermut_inner ( * self))
    /\ Seq.(==) (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner ( * self))) (Seq.empty  : Seq.seq t)
  let rec completed'0 (self:borrowed (C02IterMut_IterMut_Type.t_itermut t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'1 self) ix
  let rec index_logic'0 (self:slice t) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use seq.Seq
  function to_mut_seq'0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
  let rec to_mut_seq'0 (self:borrowed (slice t)) (return'  (ret:Seq.seq (borrowed t)))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv'4 self}
    any [ return' (result:Seq.seq (borrowed t))-> {result = to_mut_seq'0 self} (! return' {result}) ] 
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43] inv'3 (to_mut_seq'0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)  ->  ^ Seq.get (to_mut_seq'0 self) i = index_logic'0 ( ^ self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)  ->  * Seq.get (to_mut_seq'0 self) i = index_logic'0 ( * self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41] Seq.length (to_mut_seq'0 self)
  = Seq.length (shallow_model'0 self))
  predicate produces'0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
   =
    [#"../02_iter_mut.rs" 39 12 43 13] Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length visited + Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner self))
     ->  * Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  * Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i
    /\  ^ Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  ^ Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i)
  let rec produces'0 (self:C02IterMut_IterMut_Type.t_itermut t) (visited:Seq.seq (borrowed t)) (tl:C02IterMut_IterMut_Type.t_itermut t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  use seq.Seq
  goal produces_refl_refn : [#"../02_iter_mut.rs" 50 4 50 26] forall self : C02IterMut_IterMut_Type.t_itermut t . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq (borrowed t)) self
   -> produces'0 self (Seq.empty  : Seq.seq (borrowed t)) self)
  goal next_refn : [#"../02_iter_mut.rs" 63 4 63 44] forall self : borrowed (C02IterMut_IterMut_Type.t_itermut t) . inv'1 self
   -> inv'1 self
  /\ (forall result : Core_Option_Option_Type.t_option (borrowed t) . inv'2 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv'2 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_trans_refn : [#"../02_iter_mut.rs" 57 4 57 90] forall a : C02IterMut_IterMut_Type.t_itermut t . forall ab : Seq.seq (borrowed t) . forall b : C02IterMut_IterMut_Type.t_itermut t . forall bc : Seq.seq (borrowed t) . forall c : C02IterMut_IterMut_Type.t_itermut t . inv'0 c
  /\ inv'3 bc /\ inv'0 b /\ inv'3 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'0 c
  /\ inv'3 bc
  /\ inv'0 b
  /\ inv'3 ab
  /\ inv'0 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
