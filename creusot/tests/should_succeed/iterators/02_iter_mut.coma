
module C02IterMut_IterMut_Type
  use prelude.prelude.Slice
  
  use prelude.prelude.Borrow
  
  type t_itermut 't =
    | C_IterMut (borrowed (slice 't))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_itermut < 't > (input:t_itermut 't) (ret  (inner:borrowed (slice 't)))= any
    [ good (inner:borrowed (slice 't))-> {C_IterMut inner = input} (! ret {inner})
    | bad (inner:borrowed (slice 't))-> {C_IterMut inner <> input} {false} any ]
    
  
  function itermut_inner (self : t_itermut 't) : borrowed (slice 't) =
    match self with
      | C_IterMut a -> a
      end
end
module C02IterMut_Impl1_ProducesRefl_Impl
  type t
  
  let%span s02_iter_mut0 = "../02_iter_mut.rs" 50 21 50 25
  
  let%span s02_iter_mut1 = "../02_iter_mut.rs" 49 14 49 45
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "" 0 0 0 0
  
  let%span span4 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span5 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span6 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span7 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span8 = "../02_iter_mut.rs" 22 20 22 64
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span10 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span11 = "../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27
  
  let%span span12 = "../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41
  
  let%span span13 = "../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82
  
  let%span span14 = "../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85
  
  let%span span15 = "../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43
  
  let%span span16 = "../02_iter_mut.rs" 39 12 43 13
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq t) =
    [%#span2] true
  
  predicate inv'4 (_x : Seq.seq t)
  
  axiom inv'4 : forall x : Seq.seq t . inv'4 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'3 (self : slice t) =
    [%#span2] true
  
  predicate inv'3 (_x : slice t)
  
  axiom inv'3 : forall x : slice t . inv'3 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : Seq.seq (borrowed t)) =
    [%#span2] true
  
  predicate inv'2 (_x : Seq.seq (borrowed t))
  
  axiom inv'2 : forall x : Seq.seq (borrowed t) . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (slice t)) =
    [%#span2] true
  
  predicate inv'1 (_x : borrowed (slice t))
  
  axiom inv'1 : forall x : borrowed (slice t) . inv'1 x = true
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span3] (18446744073709551615 : usize)
  
  function shallow_model'1 (self : slice t) : Seq.seq t
  
  axiom shallow_model'1_spec : forall self : slice t . ([%#span4] inv'3 self)
   -> ([%#span7] inv'4 (shallow_model'1 self))
  && ([%#span6] shallow_model'1 self = Slice.id self)
  && ([%#span5] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  
  use C02IterMut_IterMut_Type as IterMut'0
  
  predicate invariant'0 [#"../02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_itermut t) =
    [%#span8] Seq.length (shallow_model'1 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'1 ( * C02IterMut_IterMut_Type.itermut_inner self))
  
  predicate inv'0 (_x : IterMut'0.t_itermut t)
  
  axiom inv'0 : forall x : IterMut'0.t_itermut t . inv'0 x
  = (invariant'0 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#span9] Seq.get (shallow_model'1 self) ix
  
  function shallow_model'0 (self : borrowed (slice t)) : Seq.seq t =
    [%#span10] shallow_model'1 ( * self)
  
  use seq.Seq
  
  function to_mut_seq'0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t) . ([%#span11] inv'1 self)
   -> ([%#span15] inv'2 (to_mut_seq'0 self))
  && ([%#span14] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq'0 self)
   ->  ^ Seq.get (to_mut_seq'0 self) i = index_logic'0 ( ^ self) i)
  && ([%#span13] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq'0 self)
   ->  * Seq.get (to_mut_seq'0 self) i = index_logic'0 ( * self) i)
  && ([%#span12] Seq.length (to_mut_seq'0 self) = Seq.length (shallow_model'0 self))
  
  predicate produces'0 [#"../02_iter_mut.rs" 37 4 37 65] (self : IterMut'0.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : IterMut'0.t_itermut t)
    
   =
    [%#span16] Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length visited + Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner self))
     ->  * Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  * Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i
    /\  ^ Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  ^ Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i)
  
  use seq.Seq
  
  constant self  : IterMut'0.t_itermut t
  
  function produces_refl [#"../02_iter_mut.rs" 50 4 50 26] (self : IterMut'0.t_itermut t) : ()
  
  goal vc_produces_refl : ([%#s02_iter_mut0] inv'0 self)
   -> ([%#s02_iter_mut1] produces'0 self (Seq.empty  : Seq.seq (borrowed t)) self)
end
module C02IterMut_Impl1_ProducesTrans_Impl
  type t
  
  let%span s02_iter_mut0 = "../02_iter_mut.rs" 54 15 54 32
  
  let%span s02_iter_mut1 = "../02_iter_mut.rs" 55 15 55 32
  
  let%span s02_iter_mut2 = "../02_iter_mut.rs" 57 22 57 23
  
  let%span s02_iter_mut3 = "../02_iter_mut.rs" 57 31 57 33
  
  let%span s02_iter_mut4 = "../02_iter_mut.rs" 57 52 57 53
  
  let%span s02_iter_mut5 = "../02_iter_mut.rs" 57 61 57 63
  
  let%span s02_iter_mut6 = "../02_iter_mut.rs" 57 82 57 83
  
  let%span s02_iter_mut7 = "../02_iter_mut.rs" 56 14 56 42
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "" 0 0 0 0
  
  let%span span10 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span11 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span12 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span13 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span14 = "../02_iter_mut.rs" 22 20 22 64
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span16 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span17 = "../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27
  
  let%span span18 = "../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41
  
  let%span span19 = "../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82
  
  let%span span20 = "../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85
  
  let%span span21 = "../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43
  
  let%span span22 = "../02_iter_mut.rs" 39 12 43 13
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq t) =
    [%#span8] true
  
  predicate inv'4 (_x : Seq.seq t)
  
  axiom inv'4 : forall x : Seq.seq t . inv'4 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'3 (self : slice t) =
    [%#span8] true
  
  predicate inv'3 (_x : slice t)
  
  axiom inv'3 : forall x : slice t . inv'3 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (slice t)) =
    [%#span8] true
  
  predicate inv'2 (_x : borrowed (slice t))
  
  axiom inv'2 : forall x : borrowed (slice t) . inv'2 x = true
  
  predicate invariant'1 (self : Seq.seq (borrowed t)) =
    [%#span8] true
  
  predicate inv'1 (_x : Seq.seq (borrowed t))
  
  axiom inv'1 : forall x : Seq.seq (borrowed t) . inv'1 x = true
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span9] (18446744073709551615 : usize)
  
  function shallow_model'1 (self : slice t) : Seq.seq t
  
  axiom shallow_model'1_spec : forall self : slice t . ([%#span10] inv'3 self)
   -> ([%#span13] inv'4 (shallow_model'1 self))
  && ([%#span12] shallow_model'1 self = Slice.id self)
  && ([%#span11] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  
  use C02IterMut_IterMut_Type as IterMut'0
  
  predicate invariant'0 [#"../02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_itermut t) =
    [%#span14] Seq.length (shallow_model'1 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'1 ( * C02IterMut_IterMut_Type.itermut_inner self))
  
  predicate inv'0 (_x : IterMut'0.t_itermut t)
  
  axiom inv'0 : forall x : IterMut'0.t_itermut t . inv'0 x
  = (invariant'0 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#span15] Seq.get (shallow_model'1 self) ix
  
  function shallow_model'0 (self : borrowed (slice t)) : Seq.seq t =
    [%#span16] shallow_model'1 ( * self)
  
  use seq.Seq
  
  function to_mut_seq'0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t) . ([%#span17] inv'2 self)
   -> ([%#span21] inv'1 (to_mut_seq'0 self))
  && ([%#span20] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq'0 self)
   ->  ^ Seq.get (to_mut_seq'0 self) i = index_logic'0 ( ^ self) i)
  && ([%#span19] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq'0 self)
   ->  * Seq.get (to_mut_seq'0 self) i = index_logic'0 ( * self) i)
  && ([%#span18] Seq.length (to_mut_seq'0 self) = Seq.length (shallow_model'0 self))
  
  predicate produces'0 [#"../02_iter_mut.rs" 37 4 37 65] (self : IterMut'0.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : IterMut'0.t_itermut t)
    
   =
    [%#span22] Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length visited + Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner self))
     ->  * Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  * Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i
    /\  ^ Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  ^ Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i)
  
  constant a  : IterMut'0.t_itermut t
  
  constant ab  : Seq.seq (borrowed t)
  
  constant b  : IterMut'0.t_itermut t
  
  constant bc  : Seq.seq (borrowed t)
  
  constant c  : IterMut'0.t_itermut t
  
  function produces_trans [#"../02_iter_mut.rs" 57 4 57 90] (a : IterMut'0.t_itermut t) (ab : Seq.seq (borrowed t)) (b : IterMut'0.t_itermut t) (bc : Seq.seq (borrowed t)) (c : IterMut'0.t_itermut t) : ()
    
  
  goal vc_produces_trans : ([%#s02_iter_mut6] inv'0 c)
   -> ([%#s02_iter_mut5] inv'1 bc)
   -> ([%#s02_iter_mut4] inv'0 b)
   -> ([%#s02_iter_mut3] inv'1 ab)
   -> ([%#s02_iter_mut2] inv'0 a)
   -> ([%#s02_iter_mut1] produces'0 b bc c)
   -> ([%#s02_iter_mut0] produces'0 a ab b)  -> ([%#s02_iter_mut7] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C02IterMut_Impl1_Next
  type t
  
  let%span s02_iter_mut0 = "../02_iter_mut.rs" 63 17 63 21
  
  let%span s02_iter_mut1 = "../02_iter_mut.rs" 59 14 62 5
  
  let%span s02_iter_mut2 = "../02_iter_mut.rs" 63 26 63 44
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "" 0 0 0 0
  
  let%span span5 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span6 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span7 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span8 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span9 = "../02_iter_mut.rs" 22 20 22 64
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span11 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span12 = "../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27
  
  let%span span13 = "../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41
  
  let%span span14 = "../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82
  
  let%span span15 = "../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85
  
  let%span span16 = "../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43
  
  let%span span17 = "../02_iter_mut.rs" 39 12 43 13
  
  let%span span18 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span19 = "../02_iter_mut.rs" 32 8 32 76
  
  let%span span20 = "../../../../../creusot-contracts/src/logic/seq.rs" 52 8 52 39
  
  let%span span21 = "" 0 0 0 0
  
  let%span span22 = "../../../../../creusot-contracts/src/std/slice.rs" 284 18 291 9
  
  let%span span23 = "" 0 0 0 0
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq (borrowed t)) =
    [%#span3] true
  
  predicate inv'7 (_x : Seq.seq (borrowed t))
  
  axiom inv'7 : forall x : Seq.seq (borrowed t) . inv'7 x = true
  
  use prelude.prelude.Slice
  
  predicate inv'0 (_x : borrowed (slice t))
  
  use seq.Seq
  
  predicate inv'5 (_x : Seq.seq t)
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span4] (18446744073709551615 : usize)
  
  predicate inv'4 (_x : slice t)
  
  function shallow_model'0 (self : slice t) : Seq.seq t
  
  axiom shallow_model'0_spec : forall self : slice t . ([%#span5] inv'4 self)
   -> ([%#span8] inv'5 (shallow_model'0 self))
  && ([%#span7] shallow_model'0 self = Slice.id self)
  && ([%#span6] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  
  use C02IterMut_IterMut_Type as IterMut'0
  
  predicate invariant'6 [#"../02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_itermut t) =
    [%#span9] Seq.length (shallow_model'0 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'0 ( * C02IterMut_IterMut_Type.itermut_inner self))
  
  predicate inv'6 (_x : IterMut'0.t_itermut t)
  
  axiom inv'6 : forall x : IterMut'0.t_itermut t . inv'6 x
  = (invariant'6 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> true
    end)
  
  predicate invariant'5 (self : Seq.seq t) =
    [%#span3] true
  
  axiom inv'5 : forall x : Seq.seq t . inv'5 x = true
  
  predicate invariant'4 (self : slice t) =
    [%#span3] true
  
  axiom inv'4 : forall x : slice t . inv'4 x = true
  
  predicate invariant'3 (self : borrowed (borrowed (slice t))) =
    [%#span3] true
  
  predicate inv'3 (_x : borrowed (borrowed (slice t)))
  
  axiom inv'3 : forall x : borrowed (borrowed (slice t)) . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : Option'0.t_option (borrowed t)) =
    [%#span3] true
  
  predicate inv'2 (_x : Option'0.t_option (borrowed t))
  
  axiom inv'2 : forall x : Option'0.t_option (borrowed t) . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (IterMut'0.t_itermut t)) =
    [%#span3] true
  
  predicate inv'1 (_x : borrowed (IterMut'0.t_itermut t))
  
  axiom inv'1 : forall x : borrowed (IterMut'0.t_itermut t) . inv'1 x = (inv'6 ( * x) /\ inv'6 ( ^ x))
  
  predicate invariant'0 (self : borrowed (slice t)) =
    [%#span3] true
  
  axiom inv'0 : forall x : borrowed (slice t) . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#span10] Seq.get (shallow_model'0 self) ix
  
  function shallow_model'1 (self : borrowed (slice t)) : Seq.seq t =
    [%#span11] shallow_model'0 ( * self)
  
  use seq.Seq
  
  function to_mut_seq'0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t) . ([%#span12] inv'0 self)
   -> ([%#span16] inv'7 (to_mut_seq'0 self))
  && ([%#span15] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq'0 self)
   ->  ^ Seq.get (to_mut_seq'0 self) i = index_logic'0 ( ^ self) i)
  && ([%#span14] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq'0 self)
   ->  * Seq.get (to_mut_seq'0 self) i = index_logic'0 ( * self) i)
  && ([%#span13] Seq.length (to_mut_seq'0 self) = Seq.length (shallow_model'1 self))
  
  predicate produces'0 [#"../02_iter_mut.rs" 37 4 37 65] (self : IterMut'0.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : IterMut'0.t_itermut t)
    
   =
    [%#span17] Seq.length (shallow_model'1 (C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length visited + Seq.length (shallow_model'1 (C02IterMut_IterMut_Type.itermut_inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'1 (C02IterMut_IterMut_Type.itermut_inner self))
     ->  * Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  * Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i
    /\  ^ Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  ^ Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate resolve'1 (self : borrowed (slice t)) =
    [%#span18]  ^ self =  * self
  
  predicate completed'0 [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (IterMut'0.t_itermut t)) =
    [%#span19] resolve'1 (C02IterMut_IterMut_Type.itermut_inner ( * self))
    /\ Seq.(==) (shallow_model'1 (C02IterMut_IterMut_Type.itermut_inner ( * self))) (Seq.empty  : Seq.seq t)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (IterMut'0.t_itermut t)) =
    [%#span18]  ^ self =  * self
  
  use prelude.seq_ext.SeqExt
  
  function tail'0 (self : Seq.seq t) : Seq.seq t =
    [%#span20] SeqExt.subsequence self 1 (Seq.length self)
  
  let rec take_first_mut'0 (self:borrowed (borrowed (slice t))) (return'  (ret:Option'0.t_option (borrowed t)))= {[@expl:precondition] [%#span21] inv'3 self}
    any
    [ return' (result:Option'0.t_option (borrowed t))-> {[%#span23] inv'2 result}
      {[%#span22] match result with
        | Option'0.C_Some r ->  * r = index_logic'0 ( *  * self) 0
        /\  ^ r = index_logic'0 ( ^  * self) 0
        /\ Seq.length (shallow_model'0 ( *  * self)) > 0
        /\ Seq.length (shallow_model'0 ( ^  * self)) > 0
        /\ shallow_model'0 ( *  ^ self) = tail'0 (shallow_model'0 ( *  * self))
        /\ shallow_model'0 ( ^  ^ self) = tail'0 (shallow_model'0 ( ^  * self))
        | Option'0.C_None -> shallow_model'0 ( *  ^ self) = (Seq.empty  : Seq.seq t)
        /\ shallow_model'0 ( ^  * self) = (Seq.empty  : Seq.seq t)
        /\ shallow_model'0 ( *  * self) = (Seq.empty  : Seq.seq t)
        /\ shallow_model'0 ( ^  ^ self) = (Seq.empty  : Seq.seq t)
        end}
      (! return' {result}) ]
    
  
  let rec next (self:borrowed (IterMut'0.t_itermut t)) (return'  (ret:Option'0.t_option (borrowed t)))= {[%#s02_iter_mut0] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = IterMut'0.t_itermut <t> { * self}
          (fun (rinner'0:borrowed (slice t)) ->
            Borrow.borrow_final <borrowed (slice t)> {rinner'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (borrowed (slice t))) ->
                 [ &_3 <- _ret' ] 
                IterMut'0.t_itermut <t> { * self}
                  (fun (l_inner'0:borrowed (slice t)) ->
                     [ &self <- { self with current = IterMut'0.C_IterMut ( ^ _3) ; } ] 
                    s1)))
      | s1 = -{inv'0 ( ^ _3)}- s2
      | s2 = take_first_mut'0 {_3} (fun (_ret':Option'0.t_option (borrowed t)) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : Option'0.t_option (borrowed t) = any_l ()
    | & self : borrowed (IterMut'0.t_itermut t) = self
    | & _3 : borrowed (borrowed (slice t)) = any_l () ]
    
    [ return' (result:Option'0.t_option (borrowed t))-> {[@expl:postcondition] [%#s02_iter_mut2] inv'2 result}
      {[@expl:postcondition] [%#s02_iter_mut1] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C02IterMut_Impl2_IntoIter
  type t
  
  let%span s02_iter_mut0 = "../02_iter_mut.rs" 70 17 70 21
  
  let%span s02_iter_mut1 = "../02_iter_mut.rs" 69 14 69 28
  
  let%span s02_iter_mut2 = "../02_iter_mut.rs" 70 26 70 30
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "" 0 0 0 0
  
  let%span span5 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span6 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span7 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span8 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span9 = "../02_iter_mut.rs" 22 20 22 64
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t) =
    [%#span3] true
  
  predicate inv'3 (_x : Seq.seq t)
  
  axiom inv'3 : forall x : Seq.seq t . inv'3 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'2 (self : slice t) =
    [%#span3] true
  
  predicate inv'2 (_x : slice t)
  
  axiom inv'2 : forall x : slice t . inv'2 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (slice t)) =
    [%#span3] true
  
  predicate inv'1 (_x : borrowed (slice t))
  
  axiom inv'1 : forall x : borrowed (slice t) . inv'1 x = true
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span4] (18446744073709551615 : usize)
  
  function shallow_model'0 (self : slice t) : Seq.seq t
  
  axiom shallow_model'0_spec : forall self : slice t . ([%#span5] inv'2 self)
   -> ([%#span8] inv'3 (shallow_model'0 self))
  && ([%#span7] shallow_model'0 self = Slice.id self)
  && ([%#span6] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  
  use C02IterMut_IterMut_Type as IterMut'0
  
  predicate invariant'0 [#"../02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_itermut t) =
    [%#span9] Seq.length (shallow_model'0 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'0 ( * C02IterMut_IterMut_Type.itermut_inner self))
  
  predicate inv'0 (_x : IterMut'0.t_itermut t)
  
  axiom inv'0 : forall x : IterMut'0.t_itermut t . inv'0 x
  = (invariant'0 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> true
    end)
  
  use prelude.prelude.Intrinsic
  
  let rec into_iter (self:IterMut'0.t_itermut t) (return'  (ret:IterMut'0.t_itermut t))= {[%#s02_iter_mut0] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- self ] (any [ any_ (_any:IterMut'0.t_itermut t)-> (!  [ &self <- _any ] s1) ] )
      | s1 = return' {_0} ]
       ]
    ) [ & _0 : IterMut'0.t_itermut t = any_l () | & self : IterMut'0.t_itermut t = self ] 
    [ return' (result:IterMut'0.t_itermut t)-> {[@expl:postcondition] [%#s02_iter_mut2] inv'0 result}
      {[@expl:postcondition] [%#s02_iter_mut1] result = self}
      (! return' {result}) ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Core_Ops_Range_RangeFull_Type
  type t_rangefull  =
    | C_RangeFull
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rangefull (input:t_rangefull) (ret  )= any
    [ good -> {C_RangeFull  = input} (! ret) | bad -> {C_RangeFull  <> input} {false} any ]
    
end
module C02IterMut_IterMut
  type t
  
  let%span s02_iter_mut0 = "../02_iter_mut.rs" 78 19 78 20
  
  let%span s02_iter_mut1 = "../02_iter_mut.rs" 75 10 75 29
  
  let%span s02_iter_mut2 = "../02_iter_mut.rs" 76 10 76 35
  
  let%span s02_iter_mut3 = "../02_iter_mut.rs" 77 10 77 33
  
  let%span s02_iter_mut4 = "../02_iter_mut.rs" 78 41 78 55
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span8 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span9 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span10 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span11 = "../02_iter_mut.rs" 22 20 22 64
  
  let%span span12 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span14 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span15 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span16 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span17 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span18 = "../../../../../creusot-contracts/src/std/slice.rs" 214 20 214 24
  
  let%span span19 = "../../../../../creusot-contracts/src/std/slice.rs" 208 20 208 31
  
  let%span span20 = "../../../../../creusot-contracts/src/std/slice.rs" 202 20 202 24
  
  let%span span21 = "../../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46
  
  let%span span22 = "" 0 0 0 0
  
  let%span span23 = "" 0 0 0 0
  
  let%span span24 = "../../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54
  
  let%span span25 = "../../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57
  
  let%span span26 = "../../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62
  
  let%span span27 = "../../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55
  
  let%span span28 = "" 0 0 0 0
  
  use seq.Seq
  
  predicate invariant'6 (self : Seq.seq t) =
    [%#span5] true
  
  predicate inv'6 (_x : Seq.seq t)
  
  axiom inv'6 : forall x : Seq.seq t . inv'6 x = true
  
  use Core_Ops_Range_RangeFull_Type as RangeFull'0
  
  predicate invariant'5 (self : RangeFull'0.t_rangefull) =
    [%#span5] true
  
  predicate inv'5 (_x : RangeFull'0.t_rangefull)
  
  axiom inv'5 : forall x : RangeFull'0.t_rangefull . inv'5 x = true
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Borrow
  
  predicate inv'2 (_x : borrowed (slice t))
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span6] (18446744073709551615 : usize)
  
  predicate inv'1 (_x : slice t)
  
  function shallow_model'2 (self : slice t) : Seq.seq t
  
  axiom shallow_model'2_spec : forall self : slice t . ([%#span7] inv'1 self)
   -> ([%#span10] inv'6 (shallow_model'2 self))
  && ([%#span9] shallow_model'2 self = Slice.id self)
  && ([%#span8] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  
  use C02IterMut_IterMut_Type as IterMut'0
  
  predicate invariant'4 [#"../02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_itermut t) =
    [%#span11] Seq.length (shallow_model'2 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'2 ( * C02IterMut_IterMut_Type.itermut_inner self))
  
  predicate inv'4 (_x : IterMut'0.t_itermut t)
  
  axiom inv'4 : forall x : IterMut'0.t_itermut t . inv'4 x
  = (invariant'4 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> true
    end)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate invariant'3 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span5] true
  
  predicate inv'3 (_x : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  axiom inv'3 : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (slice t)) =
    [%#span5] true
  
  axiom inv'2 : forall x : borrowed (slice t) . inv'2 x = true
  
  predicate invariant'1 (self : slice t) =
    [%#span5] true
  
  axiom inv'1 : forall x : slice t . inv'1 x = true
  
  predicate inv'0 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'3 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span12] inv'0 self)
   -> ([%#span14] inv'6 (shallow_model'3 self))
  && ([%#span13] Seq.length (shallow_model'3 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span15] inv'6 (shallow_model'3 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'0 x = true
  
  function shallow_model'1 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq t =
    [%#span16] shallow_model'3 ( * self)
  
  function shallow_model'0 (self : borrowed (slice t)) : Seq.seq t =
    [%#span16] shallow_model'2 ( * self)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span17]  ^ self =  * self
  
  predicate resolve'0 (self : borrowed (slice t)) =
    [%#span17]  ^ self =  * self
  
  predicate resolve_elswhere'0 (self : RangeFull'0.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t) =
    [%#span18] true
  
  predicate has_value'0 (self : RangeFull'0.t_rangefull) (seq : Seq.seq t) (out : slice t) =
    [%#span19] seq = shallow_model'2 out
  
  predicate in_bounds'0 (self : RangeFull'0.t_rangefull) (_seq : Seq.seq t) =
    [%#span20] true
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (index:RangeFull'0.t_rangefull) (return'  (ret:borrowed (slice t)))= {[@expl:precondition] [%#span23] inv'5 index}
    {[@expl:precondition] [%#span22] inv'3 self}
    {[@expl:precondition] [%#span21] in_bounds'0 index (shallow_model'1 self)}
    any
    [ return' (result:borrowed (slice t))-> {[%#span28] inv'2 result}
      {[%#span27] Seq.length (shallow_model'3 ( ^ self)) = Seq.length (shallow_model'1 self)}
      {[%#span26] resolve_elswhere'0 index (shallow_model'1 self) (shallow_model'3 ( ^ self))}
      {[%#span25] has_value'0 index (shallow_model'3 ( ^ self)) ( ^ result)}
      {[%#span24] has_value'0 index (shallow_model'1 self) ( * result)}
      (! return' {result}) ]
    
  
  let rec iter_mut (v:borrowed (Vec'0.t_vec t (Global'0.t_global))) (return'  (ret:IterMut'0.t_itermut t))= {[%#s02_iter_mut0] inv'3 v}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <Vec'0.t_vec t (Global'0.t_global)> { * v} {Borrow.get_id v}
          (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
             [ &_8 <- _ret' ] 
             [ &v <- { v with current = ( ^ _8) ; } ] 
            s1)
      | s1 = -{inv'0 ( ^ _8)}- s2
      | s2 =  [ &_9 <- RangeFull'0.C_RangeFull ] s3
      | s3 = index_mut'0 {_8} {_9} (fun (_ret':borrowed (slice t)) ->  [ &_7 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <slice t> { * _7} {Borrow.get_id _7}
          (fun (_ret':borrowed (slice t)) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = ( ^ _6) ; } ] s1)
      | s1 = -{inv'1 ( ^ _6)}- s2
      | s2 = Borrow.borrow_final <slice t> { * _6} {Borrow.get_id _6}
          (fun (_ret':borrowed (slice t)) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = ( ^ _5) ; } ] s3)
      | s3 = -{inv'1 ( ^ _5)}- s4
      | s4 =  [ &_0 <- IterMut'0.C_IterMut _5 ] (any [ any_ (_any:borrowed (slice t))-> (!  [ &_5 <- _any ] s5) ] )
      | s5 = {[@expl:type invariant] inv'2 _7} s6
      | s6 = -{resolve'0 _7}- s7
      | s7 = {[@expl:type invariant] inv'2 _6} s8
      | s8 = -{resolve'0 _6}- s9
      | s9 = {[@expl:type invariant] inv'3 v} s10
      | s10 = -{resolve'1 v}- s11
      | s11 = return' {_0} ]
       ]
    )
    [ & _0 : IterMut'0.t_itermut t = any_l ()
    | & v : borrowed (Vec'0.t_vec t (Global'0.t_global)) = v
    | & _5 : borrowed (slice t) = any_l ()
    | & _6 : borrowed (slice t) = any_l ()
    | & _7 : borrowed (slice t) = any_l ()
    | & _8 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & _9 : RangeFull'0.t_rangefull = any_l () ]
    
    [ return' (result:IterMut'0.t_itermut t)-> {[@expl:postcondition] [%#s02_iter_mut4] inv'4 result}
      {[@expl:postcondition] [%#s02_iter_mut3] Seq.length (shallow_model'3 ( ^ v)) = Seq.length (shallow_model'1 v)}
      {[@expl:postcondition] [%#s02_iter_mut2] shallow_model'2 ( ^ C02IterMut_IterMut_Type.itermut_inner result)
      = shallow_model'3 ( ^ v)}
      {[@expl:postcondition] [%#s02_iter_mut1] shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner result)
      = shallow_model'1 v}
      (! return' {result}) ]
    
end
module C02IterMut_AllZero
  let%span s02_iter_mut0 = "../02_iter_mut.rs" 86 19 86 35
  
  let%span s02_iter_mut1 = "../02_iter_mut.rs" 87 23 87 47
  
  let%span s02_iter_mut2 = "../02_iter_mut.rs" 88 16 88 23
  
  let%span s02_iter_mut3 = "../02_iter_mut.rs" 89 16 89 55
  
  let%span s02_iter_mut4 = "../02_iter_mut.rs" 88 4 88 25
  
  let%span s02_iter_mut5 = "../02_iter_mut.rs" 94 27 94 75
  
  let%span s02_iter_mut6 = "../02_iter_mut.rs" 95 21 95 22
  
  let%span s02_iter_mut7 = "../02_iter_mut.rs" 92 14 92 23
  
  let%span s02_iter_mut8 = "../02_iter_mut.rs" 82 10 82 33
  
  let%span s02_iter_mut9 = "../02_iter_mut.rs" 83 0 83 66
  
  let%span span10 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span11 = "" 0 0 0 0
  
  let%span span12 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span14 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span15 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span16 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span17 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span18 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span19 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span20 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span21 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span22 = "../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27
  
  let%span span23 = "../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41
  
  let%span span24 = "../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82
  
  let%span span25 = "../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85
  
  let%span span26 = "../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43
  
  let%span span27 = "../02_iter_mut.rs" 39 12 43 13
  
  let%span span28 = "../02_iter_mut.rs" 54 15 54 32
  
  let%span span29 = "../02_iter_mut.rs" 55 15 55 32
  
  let%span span30 = "../02_iter_mut.rs" 57 22 57 23
  
  let%span span31 = "../02_iter_mut.rs" 57 31 57 33
  
  let%span span32 = "../02_iter_mut.rs" 57 52 57 53
  
  let%span span33 = "../02_iter_mut.rs" 57 61 57 63
  
  let%span span34 = "../02_iter_mut.rs" 57 82 57 83
  
  let%span span35 = "../02_iter_mut.rs" 56 14 56 42
  
  let%span span36 = "../02_iter_mut.rs" 52 4 52 10
  
  let%span span37 = "../02_iter_mut.rs" 50 21 50 25
  
  let%span span38 = "../02_iter_mut.rs" 49 14 49 45
  
  let%span span39 = "../02_iter_mut.rs" 47 4 47 10
  
  let%span span40 = "../02_iter_mut.rs" 22 20 22 64
  
  let%span span41 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span42 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span43 = "../02_iter_mut.rs" 32 8 32 76
  
  let%span span44 = "../02_iter_mut.rs" 63 17 63 21
  
  let%span span45 = "../02_iter_mut.rs" 59 14 62 5
  
  let%span span46 = "../02_iter_mut.rs" 63 26 63 44
  
  let%span span47 = "../../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33
  
  let%span span48 = "../02_iter_mut.rs" 70 17 70 21
  
  let%span span49 = "../02_iter_mut.rs" 69 14 69 28
  
  let%span span50 = "../02_iter_mut.rs" 70 26 70 30
  
  let%span span51 = "../02_iter_mut.rs" 78 19 78 20
  
  let%span span52 = "../02_iter_mut.rs" 75 10 75 29
  
  let%span span53 = "../02_iter_mut.rs" 76 10 76 35
  
  let%span span54 = "../02_iter_mut.rs" 77 10 77 33
  
  let%span span55 = "../02_iter_mut.rs" 78 41 78 55
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  predicate invariant'8 (self : Seq.seq (borrowed usize)) =
    [%#span10] true
  
  predicate inv'8 (_x : Seq.seq (borrowed usize))
  
  axiom inv'8 : forall x : Seq.seq (borrowed usize) . inv'8 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'7 (self : borrowed (slice usize)) =
    [%#span10] true
  
  predicate inv'7 (_x : borrowed (slice usize))
  
  axiom inv'7 : forall x : borrowed (slice usize) . inv'7 x = true
  
  predicate invariant'6 (self : slice usize) =
    [%#span10] true
  
  predicate inv'6 (_x : slice usize)
  
  axiom inv'6 : forall x : slice usize . inv'6 x = true
  
  predicate invariant'5 (self : Seq.seq usize) =
    [%#span10] true
  
  predicate inv'5 (_x : Seq.seq usize)
  
  axiom inv'5 : forall x : Seq.seq usize . inv'5 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span11] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'4 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span12] inv'4 self)
   -> ([%#span14] inv'5 (shallow_model'0 self))
  && ([%#span13] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'4 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span15] inv'5 (shallow_model'0 self)
  
  axiom inv'4 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'4 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option (borrowed usize)) =
    [%#span10] true
  
  predicate inv'3 (_x : Option'0.t_option (borrowed usize))
  
  axiom inv'3 : forall x : Option'0.t_option (borrowed usize) . inv'3 x = true
  
  use C02IterMut_IterMut_Type as IterMut'0
  
  predicate invariant'2 (self : borrowed (IterMut'0.t_itermut usize)) =
    [%#span10] true
  
  predicate inv'0 (_x : IterMut'0.t_itermut usize)
  
  predicate inv'2 (_x : borrowed (IterMut'0.t_itermut usize))
  
  axiom inv'2 : forall x : borrowed (IterMut'0.t_itermut usize) . inv'2 x = (inv'0 ( * x) /\ inv'0 ( ^ x))
  
  predicate invariant'1 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span10] true
  
  predicate inv'1 (_x : borrowed (Vec'0.t_vec usize (Global'0.t_global)))
  
  axiom inv'1 : forall x : borrowed (Vec'0.t_vec usize (Global'0.t_global)) . inv'1 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  function shallow_model'3 (self : slice usize) : Seq.seq usize
  
  axiom shallow_model'3_spec : forall self : slice usize . ([%#span16] inv'6 self)
   -> ([%#span19] inv'5 (shallow_model'3 self))
  && ([%#span18] shallow_model'3 self = Slice.id self)
  && ([%#span17] Seq.length (shallow_model'3 self) <= UIntSize.to_int (max'0 : usize))
  
  function index_logic'2 [@inline:trivial] (self : slice usize) (ix : int) : usize =
    [%#span20] Seq.get (shallow_model'3 self) ix
  
  function shallow_model'2 (self : borrowed (slice usize)) : Seq.seq usize =
    [%#span21] shallow_model'3 ( * self)
  
  use seq.Seq
  
  function to_mut_seq'0 (self : borrowed (slice usize)) : Seq.seq (borrowed usize)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice usize) . ([%#span22] inv'7 self)
   -> ([%#span26] inv'8 (to_mut_seq'0 self))
  && ([%#span25] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq'0 self)
   ->  ^ Seq.get (to_mut_seq'0 self) i = index_logic'2 ( ^ self) i)
  && ([%#span24] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq'0 self)
   ->  * Seq.get (to_mut_seq'0 self) i = index_logic'2 ( * self) i)
  && ([%#span23] Seq.length (to_mut_seq'0 self) = Seq.length (shallow_model'2 self))
  
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  
  predicate produces'0 [#"../02_iter_mut.rs" 37 4 37 65] (self : IterMut'0.t_itermut usize) (visited : Seq.seq (borrowed usize)) (tl : IterMut'0.t_itermut usize)
    
   =
    [%#span27] Seq.length (shallow_model'2 (C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length visited + Seq.length (shallow_model'2 (C02IterMut_IterMut_Type.itermut_inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'2 (C02IterMut_IterMut_Type.itermut_inner self))
     ->  * Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  * Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i
    /\  ^ Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  ^ Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i)
  
  function produces_trans'0 [#"../02_iter_mut.rs" 57 4 57 90] (a : IterMut'0.t_itermut usize) (ab : Seq.seq (borrowed usize)) (b : IterMut'0.t_itermut usize) (bc : Seq.seq (borrowed usize)) (c : IterMut'0.t_itermut usize) : ()
    
   =
    [%#span36] ()
  
  axiom produces_trans'0_spec : forall a : IterMut'0.t_itermut usize, ab : Seq.seq (borrowed usize), b : IterMut'0.t_itermut usize, bc : Seq.seq (borrowed usize), c : IterMut'0.t_itermut usize . ([%#span28] produces'0 a ab b)
   -> ([%#span29] produces'0 b bc c)
   -> ([%#span30] inv'0 a)
   -> ([%#span31] inv'8 ab)
   -> ([%#span32] inv'0 b)
   -> ([%#span33] inv'8 bc)  -> ([%#span34] inv'0 c)  -> ([%#span35] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../02_iter_mut.rs" 50 4 50 26] (self : IterMut'0.t_itermut usize) : () =
    [%#span39] ()
  
  axiom produces_refl'0_spec : forall self : IterMut'0.t_itermut usize . ([%#span37] inv'0 self)
   -> ([%#span38] produces'0 self (Seq.empty  : Seq.seq (borrowed usize)) self)
  
  predicate invariant'0 [#"../02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_itermut usize) =
    [%#span40] Seq.length (shallow_model'3 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'3 ( * C02IterMut_IterMut_Type.itermut_inner self))
  
  axiom inv'0 : forall x : IterMut'0.t_itermut usize . inv'0 x
  = (invariant'0 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> true
    end)
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : int) : usize =
    [%#span41] Seq.get (shallow_model'0 self) ix
  
  function shallow_model'1 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) : Seq.seq usize =
    [%#span21] shallow_model'0 ( * self)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span42]  ^ self =  * self
  
  predicate resolve'0 (self : borrowed usize) =
    [%#span42]  ^ self =  * self
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate resolve'2 (self : borrowed (slice usize)) =
    [%#span42]  ^ self =  * self
  
  predicate completed'0 [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (IterMut'0.t_itermut usize)) =
    [%#span43] resolve'2 (C02IterMut_IterMut_Type.itermut_inner ( * self))
    /\ Seq.(==) (shallow_model'2 (C02IterMut_IterMut_Type.itermut_inner ( * self))) (Seq.empty  : Seq.seq usize)
  
  let rec next'0 (self:borrowed (IterMut'0.t_itermut usize)) (return'  (ret:Option'0.t_option (borrowed usize)))= {[@expl:precondition] [%#span44] inv'2 self}
    any
    [ return' (result:Option'0.t_option (borrowed usize))-> {[%#span46] inv'3 result}
      {[%#span45] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq (borrowed usize))) (ix : int) : borrowed usize
    
   =
    [%#span47] Seq.get (Snapshot.inner self) ix
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  let rec into_iter'0 (self:IterMut'0.t_itermut usize) (return'  (ret:IterMut'0.t_itermut usize))= {[@expl:precondition] [%#span48] inv'0 self}
    any
    [ return' (result:IterMut'0.t_itermut usize)-> {[%#span50] inv'0 result}
      {[%#span49] result = self}
      (! return' {result}) ]
    
  
  let rec iter_mut'0 (v:borrowed (Vec'0.t_vec usize (Global'0.t_global))) (return'  (ret:IterMut'0.t_itermut usize))= {[@expl:precondition] [%#span51] inv'1 v}
    any
    [ return' (result:IterMut'0.t_itermut usize)-> {[%#span55] inv'0 result}
      {[%#span54] Seq.length (shallow_model'0 ( ^ v)) = Seq.length (shallow_model'1 v)}
      {[%#span53] shallow_model'3 ( ^ C02IterMut_IterMut_Type.itermut_inner result) = shallow_model'0 ( ^ v)}
      {[%#span52] shallow_model'2 (C02IterMut_IterMut_Type.itermut_inner result) = shallow_model'1 v}
      (! return' {result}) ]
    
  
  let rec all_zero (v:borrowed (Vec'0.t_vec usize (Global'0.t_global))) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <Vec'0.t_vec usize (Global'0.t_global)> { * v} {Borrow.get_id v}
          (fun (_ret':borrowed (Vec'0.t_vec usize (Global'0.t_global))) ->
             [ &_6 <- _ret' ] 
             [ &v <- { v with current = ( ^ _6) ; } ] 
            s1)
      | s1 = iter_mut'0 {_6} (fun (_ret':IterMut'0.t_itermut usize) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = into_iter'0 {_5} (fun (_ret':IterMut'0.t_itermut usize) ->  [ &it <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#s02_iter_mut0] Snapshot.new it ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &produced <- [%#s02_iter_mut1] Snapshot.new (Seq.empty  : Seq.seq (borrowed usize)) ] s1 | s1 = bb4 ]
      
    | bb4 = bb5
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [%#s02_iter_mut4] forall i : int . 0 <= i
        /\ i < Seq.length (Snapshot.inner produced)  -> UIntSize.to_int ( ^ index_logic'0 produced i) = 0}
        {[@expl:loop invariant] [%#s02_iter_mut3] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) it}
        {[@expl:loop invariant] [%#s02_iter_mut2] inv'0 it}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = Borrow.borrow_mut <IterMut'0.t_itermut usize> {it}
              (fun (_ret':borrowed (IterMut'0.t_itermut usize)) ->  [ &_16 <- _ret' ]  [ &it <-  ^ _16 ] s1)
          | s1 = -{inv'0 ( ^ _16)}- s2
          | s2 = next'0 {_16} (fun (_ret':Option'0.t_option (borrowed usize)) ->  [ &_15 <- _ret' ] s3)
          | s3 = bb7 ]
          
        | bb7 = any
          [ br0 -> {_15 = Option'0.C_None } (! bb10) | br1 (a:borrowed usize)-> {_15 = Option'0.C_Some a} (! bb9) ]
          
        | bb9 = bb11
        | bb11 = s0
          [ s0 = Option'0.some <borrowed usize> {_15}
              (fun (r0'0:borrowed usize) ->
                 [ &x <- r0'0 ] 
                (any
                [ any_ (_any:borrowed usize)-> (! Option'0.some <borrowed usize> {_15}
                    (fun (l_0'0:borrowed usize) ->  [ &_15 <- Option'0.C_Some _any ] s1)) ]
                ))
          | s1 =  [ &_19 <- [%#s02_iter_mut5] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton x)) ] s2
          | s2 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &produced <- _19 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq (borrowed usize)))-> (!  [ &_19 <- _any ] s1) ] )
          | s1 =  [ &x <- { x with current = ([%#s02_iter_mut6] (0 : usize)) ; } ] s2
          | s2 = -{resolve'0 x}- s3
          | s3 = bb5 ]
           ]
         ]
      
    | bb8 = s0 [ s0 = -{resolve'1 v}- s1 | s1 = {[%#s02_iter_mut7] false} any ] 
    | bb10 = s0 [ s0 = -{resolve'1 v}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_vec usize (Global'0.t_global)) = v
    | & it : IterMut'0.t_itermut usize = any_l ()
    | & _5 : IterMut'0.t_itermut usize = any_l ()
    | & _6 : borrowed (Vec'0.t_vec usize (Global'0.t_global)) = any_l ()
    | & iter_old : Snapshot.snap_ty (IterMut'0.t_itermut usize) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq (borrowed usize)) = any_l ()
    | & _15 : Option'0.t_option (borrowed usize) = any_l ()
    | & _16 : borrowed (IterMut'0.t_itermut usize) = any_l ()
    | & x : borrowed usize = any_l ()
    | & _19 : Snapshot.snap_ty (Seq.seq (borrowed usize)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s02_iter_mut9] forall i : int . 0 <= i
      /\ i < Seq.length (shallow_model'1 v)  -> UIntSize.to_int (index_logic'1 ( ^ v) i) = 0}
      {[@expl:postcondition] [%#s02_iter_mut8] Seq.length (shallow_model'0 ( ^ v)) = Seq.length (shallow_model'1 v)}
      (! return' {result}) ]
    
end
module C02IterMut_Impl0
  type t
end
module C02IterMut_Impl1
  type t
  
  let%span s02_iter_mut0 = "../02_iter_mut.rs" 57 4 57 90
  
  let%span s02_iter_mut1 = "../02_iter_mut.rs" 50 4 50 26
  
  let%span s02_iter_mut2 = "../02_iter_mut.rs" 63 4 63 44
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "" 0 0 0 0
  
  let%span span5 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span6 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span7 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span8 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span9 = "../02_iter_mut.rs" 22 20 22 64
  
  let%span span10 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span11 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span12 = "../02_iter_mut.rs" 32 8 32 76
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span14 = "../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27
  
  let%span span15 = "../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41
  
  let%span span16 = "../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82
  
  let%span span17 = "../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85
  
  let%span span18 = "../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43
  
  let%span span19 = "../02_iter_mut.rs" 39 12 43 13
  
  use seq.Seq
  
  predicate invariant'6 (self : Seq.seq t) =
    [%#span3] true
  
  predicate inv'6 (_x : Seq.seq t)
  
  axiom inv'6 : forall x : Seq.seq t . inv'6 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'5 (self : slice t) =
    [%#span3] true
  
  predicate inv'5 (_x : slice t)
  
  axiom inv'5 : forall x : slice t . inv'5 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed (slice t)) =
    [%#span3] true
  
  predicate inv'4 (_x : borrowed (slice t))
  
  axiom inv'4 : forall x : borrowed (slice t) . inv'4 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option (borrowed t)) =
    [%#span3] true
  
  predicate inv'3 (_x : Option'0.t_option (borrowed t))
  
  axiom inv'3 : forall x : Option'0.t_option (borrowed t) . inv'3 x = true
  
  use C02IterMut_IterMut_Type as IterMut'0
  
  predicate invariant'2 (self : borrowed (IterMut'0.t_itermut t)) =
    [%#span3] true
  
  predicate inv'0 (_x : IterMut'0.t_itermut t)
  
  predicate inv'2 (_x : borrowed (IterMut'0.t_itermut t))
  
  axiom inv'2 : forall x : borrowed (IterMut'0.t_itermut t) . inv'2 x = (inv'0 ( * x) /\ inv'0 ( ^ x))
  
  predicate invariant'1 (self : Seq.seq (borrowed t)) =
    [%#span3] true
  
  predicate inv'1 (_x : Seq.seq (borrowed t))
  
  axiom inv'1 : forall x : Seq.seq (borrowed t) . inv'1 x = true
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span4] (18446744073709551615 : usize)
  
  function shallow_model'1 (self : slice t) : Seq.seq t
  
  axiom shallow_model'1_spec : forall self : slice t . ([%#span5] inv'5 self)
   -> ([%#span8] inv'6 (shallow_model'1 self))
  && ([%#span7] shallow_model'1 self = Slice.id self)
  && ([%#span6] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  
  predicate invariant'0 [#"../02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_itermut t) =
    [%#span9] Seq.length (shallow_model'1 ( ^ C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length (shallow_model'1 ( * C02IterMut_IterMut_Type.itermut_inner self))
  
  axiom inv'0 : forall x : IterMut'0.t_itermut t . inv'0 x
  = (invariant'0 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function shallow_model'0 (self : borrowed (slice t)) : Seq.seq t =
    [%#span10] shallow_model'1 ( * self)
  
  predicate resolve'0 (self : borrowed (slice t)) =
    [%#span11]  ^ self =  * self
  
  predicate completed'0 [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (IterMut'0.t_itermut t)) =
    [%#span12] resolve'0 (C02IterMut_IterMut_Type.itermut_inner ( * self))
    /\ Seq.(==) (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner ( * self))) (Seq.empty  : Seq.seq t)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#span13] Seq.get (shallow_model'1 self) ix
  
  use seq.Seq
  
  function to_mut_seq'0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t) . ([%#span14] inv'4 self)
   -> ([%#span18] inv'1 (to_mut_seq'0 self))
  && ([%#span17] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq'0 self)
   ->  ^ Seq.get (to_mut_seq'0 self) i = index_logic'0 ( ^ self) i)
  && ([%#span16] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq'0 self)
   ->  * Seq.get (to_mut_seq'0 self) i = index_logic'0 ( * self) i)
  && ([%#span15] Seq.length (to_mut_seq'0 self) = Seq.length (shallow_model'0 self))
  
  predicate produces'0 [#"../02_iter_mut.rs" 37 4 37 65] (self : IterMut'0.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : IterMut'0.t_itermut t)
    
   =
    [%#span19] Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner self))
    = Seq.length visited + Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 (C02IterMut_IterMut_Type.itermut_inner self))
     ->  * Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  * Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i
    /\  ^ Seq.get (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner self)) i
    =  ^ Seq.get (Seq.(++) visited (to_mut_seq'0 (C02IterMut_IterMut_Type.itermut_inner tl))) i)
  
  goal produces_trans_refn : [%#s02_iter_mut0] forall a : IterMut'0.t_itermut t . forall ab : Seq.seq (borrowed t) . forall b : IterMut'0.t_itermut t . forall bc : Seq.seq (borrowed t) . forall c : IterMut'0.t_itermut t . inv'0 c
  /\ inv'1 bc /\ inv'0 b /\ inv'1 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'0 c
  /\ inv'1 bc
  /\ inv'0 b
  /\ inv'1 ab
  /\ inv'0 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal produces_refl_refn : [%#s02_iter_mut1] forall self : IterMut'0.t_itermut t . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq (borrowed t)) self
   -> produces'0 self (Seq.empty  : Seq.seq (borrowed t)) self)
  
  goal next_refn : [%#s02_iter_mut2] forall self : borrowed (IterMut'0.t_itermut t) . inv'2 self
   -> inv'2 self
  /\ (forall result : Option'0.t_option (borrowed t) . inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
end
