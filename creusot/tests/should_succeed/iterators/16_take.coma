
module T_16_take__Take
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Take 'i =
    | C_Take 'i usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Take < 'i > (input:t_Take 'i) (ret  (iter:'i) (n:usize))= any
    [ good (iter:'i) (n:usize)-> {C_Take iter n = input} (! ret {iter} {n})
    | bad (iter:'i) (n:usize)-> {C_Take iter n <> input} {false} any ]
    
  
  function t_Take__n (self : t_Take 'i) : usize =
    match self with
      | C_Take _ a -> a
      end
  
  function t_Take__iter (self : t_Take 'i) : 'i =
    match self with
      | C_Take a _ -> a
      end
end
module M_16_take__qy123zimplqy35z0qy125z__produces_refl__Impl
  type i
  
  let%span s16_take0 = "../16_take.rs" 39 15 39 24
  
  let%span s16_take1 = "../16_take.rs" 40 14 40 45
  
  let%span span2 = "../common.rs" 19 15 19 21
  
  let%span span3 = "../common.rs" 20 15 20 21
  
  let%span span4 = "../common.rs" 21 15 21 21
  
  let%span span5 = "../common.rs" 22 15 22 32
  
  let%span span6 = "../common.rs" 23 15 23 32
  
  let%span span7 = "../common.rs" 24 14 24 42
  
  let%span span8 = "../common.rs" 14 15 14 24
  
  let%span span9 = "../common.rs" 15 14 15 45
  
  let%span span10 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span11 = "../16_take.rs" 32 8 34 9
  
  predicate invariant'1 (self : i)
  
  predicate inv'1 (_1 : i)
  
  axiom inv'1 : forall x : i . inv'1 x = true
  
  type t_Item'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span2] inv'1 a)
   -> ([%#span3] inv'1 b)
   -> ([%#span4] inv'1 c)
   -> ([%#span5] produces'1 a ab b)  -> ([%#span6] produces'1 b bc c)  -> ([%#span7] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span8] inv'1 self)
   -> ([%#span9] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use T_16_take__Take as Take'0
  
  predicate invariant'0 (self : Take'0.t_Take i) =
    [%#span10] true
  
  predicate inv'0 (_1 : Take'0.t_Take i)
  
  axiom inv'0 : forall x : Take'0.t_Take i . inv'0 x = true
  
  use T_16_take__Take as T_16_take__Take
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  predicate produces'0 [#"../16_take.rs" 31 4 31 64] (self : Take'0.t_Take i) (visited : Seq.seq t_Item'0) (o : Take'0.t_Take i)
    
   =
    [%#span11] UIntSize.to_int (T_16_take__Take.t_Take__n self)
    = UIntSize.to_int (T_16_take__Take.t_Take__n o) + Seq.length visited
    /\ produces'1 (T_16_take__Take.t_Take__iter self) visited (T_16_take__Take.t_Take__iter o)
  
  constant self  : Take'0.t_Take i
  
  function produces_refl [#"../16_take.rs" 41 4 41 26] (self : Take'0.t_Take i) : ()
  
  goal vc_produces_refl : ([%#s16_take0] inv'0 self)
   -> ([%#s16_take1] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
end
module M_16_take__qy123zimplqy35z0qy125z__produces_trans__Impl
  type i
  
  let%span s16_take0 = "../16_take.rs" 45 15 45 21
  
  let%span s16_take1 = "../16_take.rs" 46 15 46 21
  
  let%span s16_take2 = "../16_take.rs" 47 15 47 21
  
  let%span s16_take3 = "../16_take.rs" 48 15 48 32
  
  let%span s16_take4 = "../16_take.rs" 49 15 49 32
  
  let%span s16_take5 = "../16_take.rs" 50 14 50 42
  
  let%span span6 = "../common.rs" 19 15 19 21
  
  let%span span7 = "../common.rs" 20 15 20 21
  
  let%span span8 = "../common.rs" 21 15 21 21
  
  let%span span9 = "../common.rs" 22 15 22 32
  
  let%span span10 = "../common.rs" 23 15 23 32
  
  let%span span11 = "../common.rs" 24 14 24 42
  
  let%span span12 = "../common.rs" 14 15 14 24
  
  let%span span13 = "../common.rs" 15 14 15 45
  
  let%span span14 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span15 = "../16_take.rs" 32 8 34 9
  
  predicate invariant'1 (self : i)
  
  predicate inv'1 (_1 : i)
  
  axiom inv'1 : forall x : i . inv'1 x = true
  
  type t_Item'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span6] inv'1 a)
   -> ([%#span7] inv'1 b)
   -> ([%#span8] inv'1 c)
   -> ([%#span9] produces'1 a ab b)  -> ([%#span10] produces'1 b bc c)  -> ([%#span11] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span12] inv'1 self)
   -> ([%#span13] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use T_16_take__Take as Take'0
  
  predicate invariant'0 (self : Take'0.t_Take i) =
    [%#span14] true
  
  predicate inv'0 (_1 : Take'0.t_Take i)
  
  axiom inv'0 : forall x : Take'0.t_Take i . inv'0 x = true
  
  use T_16_take__Take as T_16_take__Take
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  predicate produces'0 [#"../16_take.rs" 31 4 31 64] (self : Take'0.t_Take i) (visited : Seq.seq t_Item'0) (o : Take'0.t_Take i)
    
   =
    [%#span15] UIntSize.to_int (T_16_take__Take.t_Take__n self)
    = UIntSize.to_int (T_16_take__Take.t_Take__n o) + Seq.length visited
    /\ produces'1 (T_16_take__Take.t_Take__iter self) visited (T_16_take__Take.t_Take__iter o)
  
  constant a  : Take'0.t_Take i
  
  constant ab  : Seq.seq t_Item'0
  
  constant b  : Take'0.t_Take i
  
  constant bc  : Seq.seq t_Item'0
  
  constant c  : Take'0.t_Take i
  
  function produces_trans [#"../16_take.rs" 51 4 51 90] (a : Take'0.t_Take i) (ab : Seq.seq t_Item'0) (b : Take'0.t_Take i) (bc : Seq.seq t_Item'0) (c : Take'0.t_Take i) : ()
    
  
  goal vc_produces_trans : ([%#s16_take4] produces'0 b bc c)
   -> ([%#s16_take3] produces'0 a ab b)
   -> ([%#s16_take2] inv'0 c)
   -> ([%#s16_take1] inv'0 b)  -> ([%#s16_take0] inv'0 a)  -> ([%#s16_take5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module M_16_take__qy123zimplqy35z0qy125z__next
  type i
  
  let%span s16_take0 = "../16_take.rs" 58 21 58 22
  
  let%span s16_take1 = "../16_take.rs" 59 22 59 23
  
  let%span s16_take2 = "../16_take.rs" 57 17 57 21
  
  let%span s16_take3 = "../16_take.rs" 53 14 56 5
  
  let%span s16_take4 = "../16_take.rs" 57 26 57 41
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span7 = "../common.rs" 19 15 19 21
  
  let%span span8 = "../common.rs" 20 15 20 21
  
  let%span span9 = "../common.rs" 21 15 21 21
  
  let%span span10 = "../common.rs" 22 15 22 32
  
  let%span span11 = "../common.rs" 23 15 23 32
  
  let%span span12 = "../common.rs" 24 14 24 42
  
  let%span span13 = "../common.rs" 14 15 14 24
  
  let%span span14 = "../common.rs" 15 14 15 45
  
  let%span span15 = "../16_take.rs" 32 8 34 9
  
  let%span span16 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span17 = "../16_take.rs" 23 8 26 9
  
  let%span span18 = "../common.rs" 31 17 31 21
  
  let%span span19 = "../common.rs" 27 14 30 5
  
  let%span span20 = "../common.rs" 31 26 31 44
  
  use T_16_take__Take as Take'0
  
  predicate invariant'4 (self : Take'0.t_Take i) =
    [%#span5] true
  
  predicate inv'4 (_1 : Take'0.t_Take i)
  
  axiom inv'4 : forall x : Take'0.t_Take i . inv'4 x = true
  
  predicate inv'0 (_1 : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed i) =
    [%#span6] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed i)
  
  axiom inv'3 : forall x : borrowed i . inv'3 x = true
  
  type t_Item'0
  
  use T_core__option__Option as Option'0
  
  predicate invariant'2 (self : Option'0.t_Option t_Item'0) =
    [%#span5] true
  
  predicate inv'2 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv'2 : forall x : Option'0.t_Option t_Item'0 . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (Take'0.t_Take i)) =
    [%#span6] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'1 (_1 : borrowed (Take'0.t_Take i))
  
  axiom inv'1 : forall x : borrowed (Take'0.t_Take i) . inv'1 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span7] inv'0 a)
   -> ([%#span8] inv'0 b)
   -> ([%#span9] inv'0 c)
   -> ([%#span10] produces'1 a ab b)  -> ([%#span11] produces'1 b bc c)  -> ([%#span12] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span13] inv'0 self)
   -> ([%#span14] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate invariant'0 (self : i)
  
  axiom inv'0 : forall x : i . inv'0 x = true
  
  use T_16_take__Take as T_16_take__Take
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  predicate produces'0 [#"../16_take.rs" 31 4 31 64] (self : Take'0.t_Take i) (visited : Seq.seq t_Item'0) (o : Take'0.t_Take i)
    
   =
    [%#span15] UIntSize.to_int (T_16_take__Take.t_Take__n self)
    = UIntSize.to_int (T_16_take__Take.t_Take__n o) + Seq.length visited
    /\ produces'1 (T_16_take__Take.t_Take__iter self) visited (T_16_take__Take.t_Take__iter o)
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate resolve'0 (self : borrowed (Take'0.t_Take i)) =
    [%#span16] self.final = self.current
  
  predicate completed'0 [#"../16_take.rs" 22 4 22 35] (self : borrowed (Take'0.t_Take i)) =
    [%#span17] UIntSize.to_int (T_16_take__Take.t_Take__n self.current) = 0 /\ resolve'0 self
    \/ UIntSize.to_int (T_16_take__Take.t_Take__n self.current) > 0
    /\ UIntSize.to_int (T_16_take__Take.t_Take__n self.current)
    = UIntSize.to_int (T_16_take__Take.t_Take__n self.final) + 1
    /\ completed'1 (Borrow.borrow_logic (T_16_take__Take.t_Take__iter self.current) (T_16_take__Take.t_Take__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  use prelude.prelude.Intrinsic
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option t_Item'0))= {[@expl:precondition] [%#span18] inv'3 self}
    any
    [ return' (result:Option'0.t_Option t_Item'0)-> {[%#span20] inv'2 result}
      {[%#span19] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.UIntSize
  
  let rec next (self:borrowed (Take'0.t_Take i)) (return'  (ret:Option'0.t_Option t_Item'0))= {[%#s16_take2] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Take'0.t_Take <i> {self.current}
          (fun (riter'0:i) (rn'0:usize) ->
            UIntSize.ne {rn'0} {[%#s16_take0] (0 : usize)} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1))
      | s1 = any [ br0 -> {_3 = false} (! bb3) | br1 -> {_3} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = Take'0.t_Take <i> {self.current}
          (fun (riter'0:i) (rn'0:usize) ->
            UIntSize.sub {rn'0} {[%#s16_take1] (1 : usize)}
              (fun (_ret':usize) ->
                Take'0.t_Take <i> {self.current}
                  (fun (l_iter'0:i) (l_n'0:usize) ->
                     [ &self <- { self with current = Take'0.C_Take l_iter'0 _ret' ; } ] 
                    s1)))
      | s1 = Take'0.t_Take <i> {self.current}
          (fun (riter'1:i) (rn'1:usize) ->
            Borrow.borrow_final <i> {riter'1} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_5 <- _ret' ] 
                Take'0.t_Take <i> {self.current}
                  (fun (l_iter'1:i) (l_n'1:usize) ->
                     [ &self <- { self with current = Take'0.C_Take _5.final l_n'1 ; } ] 
                    s2)))
      | s2 = -{inv'0 _5.final}- s3
      | s3 = next'0 {_5} (fun (_ret':Option'0.t_Option t_Item'0) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb4 ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 =  [ &_0 <- Option'0.C_None ] s3
      | s3 = bb4 ]
      
    | bb4 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option t_Item'0 = any_l ()
    | & self : borrowed (Take'0.t_Take i) = self
    | & _3 : bool = any_l ()
    | & _5 : borrowed i = any_l () ]
    
    [ return' (result:Option'0.t_Option t_Item'0)-> {[@expl:postcondition] [%#s16_take4] inv'2 result}
      {[@expl:postcondition] [%#s16_take3] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_16_take__qy123zimplqy35z0qy125z
  type i
  
  let%span s16_take0 = "../16_take.rs" 57 4 57 41
  
  let%span s16_take1 = "../16_take.rs" 51 4 51 90
  
  let%span s16_take2 = "../16_take.rs" 41 4 41 26
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span5 = "../16_take.rs" 32 8 34 9
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span7 = "../16_take.rs" 23 8 26 9
  
  use T_16_take__Take as Take'0
  
  predicate invariant'2 (self : Take'0.t_Take i) =
    [%#span3] true
  
  predicate inv'2 (_1 : Take'0.t_Take i)
  
  axiom inv'2 : forall x : Take'0.t_Take i . inv'2 x = true
  
  type t_Item'0
  
  use T_core__option__Option as Option'0
  
  predicate invariant'1 (self : Option'0.t_Option t_Item'0) =
    [%#span3] true
  
  predicate inv'1 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv'1 : forall x : Option'0.t_Option t_Item'0 . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Take'0.t_Take i)) =
    [%#span4] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'0 (_1 : borrowed (Take'0.t_Take i))
  
  axiom inv'0 : forall x : borrowed (Take'0.t_Take i) . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use T_16_take__Take as T_16_take__Take
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  predicate produces'0 [#"../16_take.rs" 31 4 31 64] (self : Take'0.t_Take i) (visited : Seq.seq t_Item'0) (o : Take'0.t_Take i)
    
   =
    [%#span5] UIntSize.to_int (T_16_take__Take.t_Take__n self)
    = UIntSize.to_int (T_16_take__Take.t_Take__n o) + Seq.length visited
    /\ produces'1 (T_16_take__Take.t_Take__iter self) visited (T_16_take__Take.t_Take__iter o)
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate resolve'0 (self : borrowed (Take'0.t_Take i)) =
    [%#span6] self.final = self.current
  
  predicate completed'0 [#"../16_take.rs" 22 4 22 35] (self : borrowed (Take'0.t_Take i)) =
    [%#span7] UIntSize.to_int (T_16_take__Take.t_Take__n self.current) = 0 /\ resolve'0 self
    \/ UIntSize.to_int (T_16_take__Take.t_Take__n self.current) > 0
    /\ UIntSize.to_int (T_16_take__Take.t_Take__n self.current)
    = UIntSize.to_int (T_16_take__Take.t_Take__n self.final) + 1
    /\ completed'1 (Borrow.borrow_logic (T_16_take__Take.t_Take__iter self.current) (T_16_take__Take.t_Take__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  goal next_refn : [%#s16_take0] forall self : borrowed (Take'0.t_Take i) . inv'0 self
   -> inv'0 self
  /\ (forall result : Option'0.t_Option t_Item'0 . inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_trans_refn : [%#s16_take1] forall a : Take'0.t_Take i . forall ab : Seq.seq t_Item'0 . forall b : Take'0.t_Take i . forall bc : Seq.seq t_Item'0 . forall c : Take'0.t_Take i . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'2 c /\ inv'2 b /\ inv'2 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'2 c
  /\ inv'2 b /\ inv'2 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal produces_refl_refn : [%#s16_take2] forall self : Take'0.t_Take i . inv'2 self
   -> inv'2 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
end
