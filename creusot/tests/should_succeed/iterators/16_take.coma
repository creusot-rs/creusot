module T_16_take__Take [#"16_take.rs" 9 0 9 28]
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Take 'i =
    | C_Take 'i usize
  
  let rec t_Take < 'i > (input:t_Take 'i) (ret  (iter:'i) (n:usize))= any
    [ good (iter:'i) (n:usize)-> {C_Take iter n = input} (! ret {iter} {n}) ]
    
  
  function t_Take__n (self : t_Take 'i) : usize =
    match self with
      | C_Take _ a -> a
      end
  
  function t_Take__iter (self : t_Take 'i) : 'i =
    match self with
      | C_Take a _ -> a
      end
end
module M_16_take__qyi16574350389265959367__produces_refl [#"16_take.rs" 41 4 41 26] (* <Take<I> as common::Iterator> *)
  type i
  
  let%span s16_take0 = "16_take.rs" 39 15 39 24
  let%span s16_take1 = "16_take.rs" 40 14 40 45
  let%span s16_take2 = "16_take.rs" 32 8 34 9
  let%span scommon3 = "common.rs" 14 15 14 24
  let%span scommon4 = "common.rs" 15 14 15 45
  let%span scommon5 = "common.rs" 19 15 19 21
  let%span scommon6 = "common.rs" 20 15 20 21
  let%span scommon7 = "common.rs" 21 15 21 21
  let%span scommon8 = "common.rs" 22 15 22 32
  let%span scommon9 = "common.rs" 23 15 23 32
  let%span scommon10 = "common.rs" 24 14 24 42
  
  type t_Item'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  predicate inv'1 (_1 : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon5] inv'1 a)
   -> ([%#scommon6] inv'1 b)
   -> ([%#scommon7] inv'1 c)
   -> ([%#scommon8] produces'1 a ab b)
   -> ([%#scommon9] produces'1 b bc c)  -> ([%#scommon10] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon3] inv'1 self)
   -> ([%#scommon4] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use T_16_take__Take as Take'0
  
  predicate inv'0 (_1 : Take'0.t_Take i)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Take'0.t_Take i [inv'0 x] . inv'0 x
  = match x with
    | Take'0.C_Take iter n -> inv'1 iter
    end
  
  use T_16_take__Take as T_16_take__Take
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use T_16_take__Take as T_16_take__Take
  
  predicate produces'0 [#"16_take.rs" 31 4 31 64] (self : Take'0.t_Take i) (visited : Seq.seq t_Item'0) (o : Take'0.t_Take i)
    
   =
    [%#s16_take2] UIntSize.to_int (T_16_take__Take.t_Take__n self)
    = UIntSize.to_int (T_16_take__Take.t_Take__n o) + Seq.length visited
    /\ produces'1 (T_16_take__Take.t_Take__iter self) visited (T_16_take__Take.t_Take__iter o)
  
  constant self  : Take'0.t_Take i
  
  function produces_refl [#"16_take.rs" 41 4 41 26] (self : Take'0.t_Take i) : ()
  
  goal vc_produces_refl : ([%#s16_take0] inv'0 self)
   -> ([%#s16_take1] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
end
module M_16_take__qyi16574350389265959367__produces_trans [#"16_take.rs" 51 4 51 90] (* <Take<I> as common::Iterator> *)
  type i
  
  let%span s16_take0 = "16_take.rs" 45 15 45 21
  let%span s16_take1 = "16_take.rs" 46 15 46 21
  let%span s16_take2 = "16_take.rs" 47 15 47 21
  let%span s16_take3 = "16_take.rs" 48 15 48 32
  let%span s16_take4 = "16_take.rs" 49 15 49 32
  let%span s16_take5 = "16_take.rs" 50 14 50 42
  let%span s16_take6 = "16_take.rs" 32 8 34 9
  let%span scommon7 = "common.rs" 14 15 14 24
  let%span scommon8 = "common.rs" 15 14 15 45
  let%span scommon9 = "common.rs" 19 15 19 21
  let%span scommon10 = "common.rs" 20 15 20 21
  let%span scommon11 = "common.rs" 21 15 21 21
  let%span scommon12 = "common.rs" 22 15 22 32
  let%span scommon13 = "common.rs" 23 15 23 32
  let%span scommon14 = "common.rs" 24 14 24 42
  
  type t_Item'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  predicate inv'1 (_1 : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon9] inv'1 a)
   -> ([%#scommon10] inv'1 b)
   -> ([%#scommon11] inv'1 c)
   -> ([%#scommon12] produces'1 a ab b)
   -> ([%#scommon13] produces'1 b bc c)  -> ([%#scommon14] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon7] inv'1 self)
   -> ([%#scommon8] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use T_16_take__Take as Take'0
  
  predicate inv'0 (_1 : Take'0.t_Take i)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Take'0.t_Take i [inv'0 x] . inv'0 x
  = match x with
    | Take'0.C_Take iter n -> inv'1 iter
    end
  
  use T_16_take__Take as T_16_take__Take
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use T_16_take__Take as T_16_take__Take
  
  predicate produces'0 [#"16_take.rs" 31 4 31 64] (self : Take'0.t_Take i) (visited : Seq.seq t_Item'0) (o : Take'0.t_Take i)
    
   =
    [%#s16_take6] UIntSize.to_int (T_16_take__Take.t_Take__n self)
    = UIntSize.to_int (T_16_take__Take.t_Take__n o) + Seq.length visited
    /\ produces'1 (T_16_take__Take.t_Take__iter self) visited (T_16_take__Take.t_Take__iter o)
  
  constant a  : Take'0.t_Take i
  
  constant ab  : Seq.seq t_Item'0
  
  constant b  : Take'0.t_Take i
  
  constant bc  : Seq.seq t_Item'0
  
  constant c  : Take'0.t_Take i
  
  function produces_trans [#"16_take.rs" 51 4 51 90] (a : Take'0.t_Take i) (ab : Seq.seq t_Item'0) (b : Take'0.t_Take i) (bc : Seq.seq t_Item'0) (c : Take'0.t_Take i) : ()
    
  
  goal vc_produces_trans : ([%#s16_take4] produces'0 b bc c)
   -> ([%#s16_take3] produces'0 a ab b)
   -> ([%#s16_take2] inv'0 c)
   -> ([%#s16_take1] inv'0 b)  -> ([%#s16_take0] inv'0 a)  -> ([%#s16_take5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_16_take__qyi16574350389265959367__next [#"16_take.rs" 57 4 57 41] (* <Take<I> as common::Iterator> *)
  type i
  
  let%span s16_take0 = "16_take.rs" 58 21 58 22
  let%span s16_take1 = "16_take.rs" 59 22 59 23
  let%span s16_take2 = "16_take.rs" 57 17 57 21
  let%span s16_take3 = "16_take.rs" 53 14 56 5
  let%span s16_take4 = "16_take.rs" 57 26 57 41
  let%span scommon5 = "common.rs" 31 17 31 21
  let%span scommon6 = "common.rs" 27 14 30 5
  let%span scommon7 = "common.rs" 31 26 31 44
  let%span s16_take8 = "16_take.rs" 23 8 26 9
  let%span s16_take9 = "16_take.rs" 32 8 34 9
  let%span scommon10 = "common.rs" 14 15 14 24
  let%span scommon11 = "common.rs" 15 14 15 45
  let%span scommon12 = "common.rs" 19 15 19 21
  let%span scommon13 = "common.rs" 20 15 20 21
  let%span scommon14 = "common.rs" 21 15 21 21
  let%span scommon15 = "common.rs" 22 15 22 32
  let%span scommon16 = "common.rs" 23 15 23 32
  let%span scommon17 = "common.rs" 24 14 24 42
  let%span sresolve18 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant19 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  predicate inv'0 (_1 : i)
  
  use T_16_take__Take as Take'0
  
  predicate inv'5 (_1 : Take'0.t_Take i)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Take'0.t_Take i [inv'5 x] . inv'5 x
  = match x with
    | Take'0.C_Take iter n -> inv'0 iter
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed i) =
    [%#sinvariant19] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed i)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed i [inv'3 x] . inv'3 x = invariant'1 x
  
  type t_Item'0
  
  predicate inv'4 (_1 : t_Item'0)
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'4 a_0
    end
  
  predicate invariant'0 (self : borrowed (Take'0.t_Take i)) =
    [%#sinvariant19] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'1 (_1 : borrowed (Take'0.t_Take i))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (Take'0.t_Take i) [inv'1 x] . inv'1 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon12] inv'0 a)
   -> ([%#scommon13] inv'0 b)
   -> ([%#scommon14] inv'0 c)
   -> ([%#scommon15] produces'1 a ab b)
   -> ([%#scommon16] produces'1 b bc c)  -> ([%#scommon17] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon10] inv'0 self)
   -> ([%#scommon11] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use T_16_take__Take as T_16_take__Take
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use T_16_take__Take as T_16_take__Take
  
  predicate produces'0 [#"16_take.rs" 31 4 31 64] (self : Take'0.t_Take i) (visited : Seq.seq t_Item'0) (o : Take'0.t_Take i)
    
   =
    [%#s16_take9] UIntSize.to_int (T_16_take__Take.t_Take__n self)
    = UIntSize.to_int (T_16_take__Take.t_Take__n o) + Seq.length visited
    /\ produces'1 (T_16_take__Take.t_Take__iter self) visited (T_16_take__Take.t_Take__iter o)
  
  use seq.Seq
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate resolve'1 (self : borrowed (Take'0.t_Take i)) =
    [%#sresolve18] self.final = self.current
  
  predicate completed'0 [#"16_take.rs" 22 4 22 35] (self : borrowed (Take'0.t_Take i)) =
    [%#s16_take8] UIntSize.to_int (T_16_take__Take.t_Take__n self.current) = 0 /\ resolve'1 self
    \/ UIntSize.to_int (T_16_take__Take.t_Take__n self.current) > 0
    /\ UIntSize.to_int (T_16_take__Take.t_Take__n self.current)
    = UIntSize.to_int (T_16_take__Take.t_Take__n self.final) + 1
    /\ completed'1 (Borrow.borrow_logic (T_16_take__Take.t_Take__iter self.current) (T_16_take__Take.t_Take__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (_1 : borrowed (Take'0.t_Take i)) =
    resolve'1 _1
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option t_Item'0))= {[@expl:precondition] [%#scommon5] inv'3 self}
    any
    [ return' (result:Option'0.t_Option t_Item'0)-> {[%#scommon7] inv'2 result}
      {[%#scommon6] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.UIntSize
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (Take'0.t_Take i)) (return'  (ret:Option'0.t_Option t_Item'0))= {[%#s16_take2] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Take'0.t_Take <i> {self.current}
          (fun (riter'0:i) (rn'0:usize) ->
            UIntSize.ne {rn'0} {[%#s16_take0] (0 : usize)} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1))
      | s1 = any [ br0 -> {_3 = false} (! bb3) | br1 -> {_3} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = Take'0.t_Take <i> {self.current}
          (fun (riter'0:i) (rn'0:usize) ->
            UIntSize.sub {rn'0} {[%#s16_take1] (1 : usize)}
              (fun (_ret':usize) ->
                Take'0.t_Take <i> {self.current}
                  (fun (riter'1:i) (rn'1:usize) ->
                     [ &self <- { self with current = Take'0.C_Take riter'1 _ret' ; } ] 
                    s1)))
      | s1 = Take'0.t_Take <i> {self.current}
          (fun (riter'2:i) (rn'2:usize) ->
            {inv'0 riter'2}
            Borrow.borrow_final <i> {riter'2} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_5 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &self <- { self with current = Take'0.C_Take _ret'.final rn'2 ; } ] 
                s2))
      | s2 = next'0 {_5} (fun (_ret':Option'0.t_Option t_Item'0) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb4 ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 =  [ &_0 <- Option'0.C_None ] s3
      | s3 = bb4 ]
      
    | bb4 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option t_Item'0 = any_l ()
    | & self : borrowed (Take'0.t_Take i) = self
    | & _3 : bool = any_l ()
    | & _5 : borrowed i = any_l () ]
    
    [ return' (result:Option'0.t_Option t_Item'0)-> {[@expl:postcondition] [%#s16_take4] inv'2 result}
      {[@expl:postcondition] [%#s16_take3] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_16_take__qyi16574350389265959367 [#"16_take.rs" 14 0 16 16] (* <Take<I> as common::Iterator> *)
  type i
  
  let%span s16_take0 = "16_take.rs" 57 4 57 41
  let%span s16_take1 = "16_take.rs" 51 4 51 90
  let%span s16_take2 = "16_take.rs" 41 4 41 26
  let%span s16_take3 = "16_take.rs" 23 8 26 9
  let%span s16_take4 = "16_take.rs" 32 8 34 9
  let%span sresolve5 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant6 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  predicate inv'4 (_1 : i)
  
  use T_16_take__Take as Take'0
  
  predicate inv'2 (_1 : Take'0.t_Take i)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Take'0.t_Take i [inv'2 x] . inv'2 x
  = match x with
    | Take'0.C_Take iter n -> inv'4 iter
    end
  
  type t_Item'0
  
  predicate inv'3 (_1 : t_Item'0)
  
  use T_core__option__Option as Option'0
  
  predicate inv'1 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'1 x] . inv'1 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Take'0.t_Take i)) =
    [%#sinvariant6] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'0 (_1 : borrowed (Take'0.t_Take i))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (Take'0.t_Take i) [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use T_16_take__Take as T_16_take__Take
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use T_16_take__Take as T_16_take__Take
  
  predicate produces'0 [#"16_take.rs" 31 4 31 64] (self : Take'0.t_Take i) (visited : Seq.seq t_Item'0) (o : Take'0.t_Take i)
    
   =
    [%#s16_take4] UIntSize.to_int (T_16_take__Take.t_Take__n self)
    = UIntSize.to_int (T_16_take__Take.t_Take__n o) + Seq.length visited
    /\ produces'1 (T_16_take__Take.t_Take__iter self) visited (T_16_take__Take.t_Take__iter o)
  
  use seq.Seq
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate resolve'0 (self : borrowed (Take'0.t_Take i)) =
    [%#sresolve5] self.final = self.current
  
  predicate completed'0 [#"16_take.rs" 22 4 22 35] (self : borrowed (Take'0.t_Take i)) =
    [%#s16_take3] UIntSize.to_int (T_16_take__Take.t_Take__n self.current) = 0 /\ resolve'0 self
    \/ UIntSize.to_int (T_16_take__Take.t_Take__n self.current) > 0
    /\ UIntSize.to_int (T_16_take__Take.t_Take__n self.current)
    = UIntSize.to_int (T_16_take__Take.t_Take__n self.final) + 1
    /\ completed'1 (Borrow.borrow_logic (T_16_take__Take.t_Take__iter self.current) (T_16_take__Take.t_Take__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  goal next_refn : [%#s16_take0] forall self : borrowed (Take'0.t_Take i) . inv'0 self
   -> inv'0 self
  /\ (forall result : Option'0.t_Option t_Item'0 . inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_trans_refn : [%#s16_take1] forall a : Take'0.t_Take i . forall ab : Seq.seq t_Item'0 . forall b : Take'0.t_Take i . forall bc : Seq.seq t_Item'0 . forall c : Take'0.t_Take i . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'2 c /\ inv'2 b /\ inv'2 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'2 c
  /\ inv'2 b /\ inv'2 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal produces_refl_refn : [%#s16_take2] forall self : Take'0.t_Take i . inv'2 self
   -> inv'2 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
end
