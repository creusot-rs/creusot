
module C04Skip_Skip_Type
  use prelude.UIntSize
  use prelude.Int
  type t_skip 'i =
    | C_Skip 'i usize
    
  let function skip_n (self : t_skip 'i) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Skip _ a -> a
      end
  let function skip_iter (self : t_skip 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Skip a _ -> a
      end
end
module C04Skip_Impl0_ProducesRefl_Impl
  type i
  predicate invariant2 (self : i)
  val invariant2 (self : i) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : i)
  val inv2 (_x : i) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : i . inv2 x = true
  type item0
  use seq.Seq
  predicate invariant1 (self : Seq.seq item0)
  val invariant1 (self : Seq.seq item0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq item0)
  val inv1 (_x : Seq.seq item0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq item0 . inv1 x = true
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv2 a}
    requires {[#"../common.rs" 21 31 21 33] inv1 ab}
    requires {[#"../common.rs" 21 52 21 53] inv2 b}
    requires {[#"../common.rs" 21 61 21 63] inv1 bc}
    requires {[#"../common.rs" 21 82 21 83] inv2 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv2 a) -> ([#"../common.rs" 21 31 21 33] inv1 ab) -> ([#"../common.rs" 21 52 21 53] inv2 b) -> ([#"../common.rs" 21 61 21 63] inv1 bc) -> ([#"../common.rs" 21 82 21 83] inv2 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv2 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv2 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate invariant0 (self : C04Skip_Skip_Type.t_skip i)
  val invariant0 (self : C04Skip_Skip_Type.t_skip i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C04Skip_Skip_Type.t_skip i)
  val inv0 (_x : C04Skip_Skip_Type.t_skip i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C04Skip_Skip_Type.t_skip i . inv0 x = true
  predicate resolve0 (self : item0)
  val resolve0 (self : item0) : bool
    ensures { result = resolve0 self }
    
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  predicate produces0 [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq item0) (o : C04Skip_Skip_Type.t_skip i)
    
   =
    [#"../04_skip.rs" 37 8 44 9] visited = Seq.empty  /\ self = o \/ UIntSize.to_int (C04Skip_Skip_Type.skip_n o) = 0 /\ Seq.length visited > 0 /\ (exists s : Seq.seq item0 . inv1 s /\ Seq.length s = UIntSize.to_int (C04Skip_Skip_Type.skip_n self) /\ produces1 (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o) /\ (forall i : int . 0 <= i /\ i < Seq.length s -> resolve0 (Seq.get s i)))
  val produces0 [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq item0) (o : C04Skip_Skip_Type.t_skip i) : bool
    ensures { result = produces0 self visited o }
    
  let rec ghost function produces_refl [#"../04_skip.rs" 50 4 50 29] (a : C04Skip_Skip_Type.t_skip i) : ()
    requires {[#"../04_skip.rs" 50 21 50 22] inv0 a}
    ensures { [#"../04_skip.rs" 49 14 49 39] produces0 a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../04_skip.rs" 47 4 47 10] ()
end
module C04Skip_Impl0_ProducesTrans_Impl
  type i
  predicate invariant2 (self : i)
  val invariant2 (self : i) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : i)
  val inv2 (_x : i) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : i . inv2 x = true
  type item0
  use seq.Seq
  use seq.Seq
  predicate inv1 (_x : Seq.seq item0)
  val inv1 (_x : Seq.seq item0) : bool
    ensures { result = inv1 _x }
    
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv2 a}
    requires {[#"../common.rs" 21 31 21 33] inv1 ab}
    requires {[#"../common.rs" 21 52 21 53] inv2 b}
    requires {[#"../common.rs" 21 61 21 63] inv1 bc}
    requires {[#"../common.rs" 21 82 21 83] inv2 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv2 a) -> ([#"../common.rs" 21 31 21 33] inv1 ab) -> ([#"../common.rs" 21 52 21 53] inv2 b) -> ([#"../common.rs" 21 61 21 63] inv1 bc) -> ([#"../common.rs" 21 82 21 83] inv2 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv2 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv2 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  predicate invariant1 (self : Seq.seq item0)
  val invariant1 (self : Seq.seq item0) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : Seq.seq item0 . inv1 x = true
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate invariant0 (self : C04Skip_Skip_Type.t_skip i)
  val invariant0 (self : C04Skip_Skip_Type.t_skip i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C04Skip_Skip_Type.t_skip i)
  val inv0 (_x : C04Skip_Skip_Type.t_skip i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C04Skip_Skip_Type.t_skip i . inv0 x = true
  predicate resolve0 (self : item0)
  val resolve0 (self : item0) : bool
    ensures { result = resolve0 self }
    
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  predicate produces0 [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq item0) (o : C04Skip_Skip_Type.t_skip i)
    
   =
    [#"../04_skip.rs" 37 8 44 9] visited = Seq.empty  /\ self = o \/ UIntSize.to_int (C04Skip_Skip_Type.skip_n o) = 0 /\ Seq.length visited > 0 /\ (exists s : Seq.seq item0 . inv1 s /\ Seq.length s = UIntSize.to_int (C04Skip_Skip_Type.skip_n self) /\ produces1 (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o) /\ (forall i : int . 0 <= i /\ i < Seq.length s -> resolve0 (Seq.get s i)))
  val produces0 [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq item0) (o : C04Skip_Skip_Type.t_skip i) : bool
    ensures { result = produces0 self visited o }
    
  let rec ghost function produces_trans [#"../04_skip.rs" 57 4 57 90] (a : C04Skip_Skip_Type.t_skip i) (ab : Seq.seq item0) (b : C04Skip_Skip_Type.t_skip i) (bc : Seq.seq item0) (c : C04Skip_Skip_Type.t_skip i) : ()
    requires {[#"../04_skip.rs" 54 15 54 32] produces0 a ab b}
    requires {[#"../04_skip.rs" 55 15 55 32] produces0 b bc c}
    requires {[#"../04_skip.rs" 57 22 57 23] inv0 a}
    requires {[#"../04_skip.rs" 57 31 57 33] inv1 ab}
    requires {[#"../04_skip.rs" 57 52 57 53] inv0 b}
    requires {[#"../04_skip.rs" 57 61 57 63] inv1 bc}
    requires {[#"../04_skip.rs" 57 82 57 83] inv0 c}
    ensures { [#"../04_skip.rs" 56 14 56 42] produces0 a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../04_skip.rs" 52 4 52 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C04Skip_Impl0_Next
  type i
  type item0
  use seq.Seq
  predicate invariant9 (self : Seq.seq item0)
  val invariant9 (self : Seq.seq item0) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : Seq.seq item0)
  val inv9 (_x : Seq.seq item0) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Seq.seq item0 . inv9 x = true
  use prelude.Borrow
  predicate invariant8 (self : borrowed i)
  val invariant8 (self : borrowed i) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : borrowed i)
  val inv8 (_x : borrowed i) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : borrowed i . inv8 x = true
  use prelude.UIntSize
  predicate invariant7 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : usize) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : usize)
  val inv7 (_x : usize) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : usize . inv7 x = true
  predicate invariant6 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : borrowed usize) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed usize)
  val inv6 (_x : borrowed usize) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed usize . inv6 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant5 (self : Core_Option_Option_Type.t_option item0)
  val invariant5 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Core_Option_Option_Type.t_option item0)
  val inv5 (_x : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Core_Option_Option_Type.t_option item0 . inv5 x = true
  predicate invariant4 (self : item0)
  val invariant4 (self : item0) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : item0)
  val inv4 (_x : item0) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : item0 . inv4 x = true
  predicate invariant3 (self : i)
  val invariant3 (self : i) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : i)
  val inv3 (_x : i) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : i . inv3 x = true
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate invariant2 (self : borrowed (C04Skip_Skip_Type.t_skip i))
  val invariant2 (self : borrowed (C04Skip_Skip_Type.t_skip i)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (C04Skip_Skip_Type.t_skip i))
  val inv2 (_x : borrowed (C04Skip_Skip_Type.t_skip i)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (C04Skip_Skip_Type.t_skip i) . inv2 x = true
  use seq.Seq
  predicate produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces0 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces0 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces0 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv3 a}
    requires {[#"../common.rs" 21 31 21 33] inv9 ab}
    requires {[#"../common.rs" 21 52 21 53] inv3 b}
    requires {[#"../common.rs" 21 61 21 63] inv9 bc}
    requires {[#"../common.rs" 21 82 21 83] inv3 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces0 a ab b) -> ([#"../common.rs" 19 15 19 32] produces0 b bc c) -> ([#"../common.rs" 21 22 21 23] inv3 a) -> ([#"../common.rs" 21 31 21 33] inv9 ab) -> ([#"../common.rs" 21 52 21 53] inv3 b) -> ([#"../common.rs" 21 61 21 63] inv9 bc) -> ([#"../common.rs" 21 82 21 83] inv3 c) -> ([#"../common.rs" 20 14 20 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv3 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv3 a) -> ([#"../common.rs" 14 14 14 39] produces0 a (Seq.empty ) a)
  use prelude.Ghost
  predicate invariant1 (self : Ghost.ghost_ty (Seq.seq item0))
  val invariant1 (self : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Ghost.ghost_ty (Seq.seq item0))
  val inv1 (_x : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Ghost.ghost_ty (Seq.seq item0) . inv1 x = true
  predicate invariant0 (self : Ghost.ghost_ty (borrowed (C04Skip_Skip_Type.t_skip i)))
  val invariant0 (self : Ghost.ghost_ty (borrowed (C04Skip_Skip_Type.t_skip i))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Ghost.ghost_ty (borrowed (C04Skip_Skip_Type.t_skip i)))
  val inv0 (_x : Ghost.ghost_ty (borrowed (C04Skip_Skip_Type.t_skip i))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Ghost.ghost_ty (borrowed (C04Skip_Skip_Type.t_skip i)) . inv0 x = true
  predicate resolve3 (self : item0)
  val resolve3 (self : item0) : bool
    ensures { result = resolve3 self }
    
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  predicate produces1 [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq item0) (o : C04Skip_Skip_Type.t_skip i)
    
   =
    [#"../04_skip.rs" 37 8 44 9] visited = Seq.empty  /\ self = o \/ UIntSize.to_int (C04Skip_Skip_Type.skip_n o) = 0 /\ Seq.length visited > 0 /\ (exists s : Seq.seq item0 . inv9 s /\ Seq.length s = UIntSize.to_int (C04Skip_Skip_Type.skip_n self) /\ produces0 (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o) /\ (forall i : int . 0 <= i /\ i < Seq.length s -> resolve3 (Seq.get s i)))
  val produces1 [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq item0) (o : C04Skip_Skip_Type.t_skip i) : bool
    ensures { result = produces1 self visited o }
    
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  predicate completed0 [#"../04_skip.rs" 22 4 22 35] (self : borrowed (C04Skip_Skip_Type.t_skip i)) =
    [#"../04_skip.rs" 23 8 31 9] UIntSize.to_int (C04Skip_Skip_Type.skip_n ( ^ self)) = 0 /\ (exists i : borrowed i . exists s : Seq.seq item0 . inv8 i /\ inv9 s /\ Seq.length s <= UIntSize.to_int (C04Skip_Skip_Type.skip_n ( * self)) /\ produces0 (C04Skip_Skip_Type.skip_iter ( * self)) s ( * i) /\ (forall i : int . 0 <= i /\ i < Seq.length s -> resolve3 (Seq.get s i)) /\ completed1 i /\  ^ i = C04Skip_Skip_Type.skip_iter ( ^ self))
  val completed0 [#"../04_skip.rs" 22 4 22 35] (self : borrowed (C04Skip_Skip_Type.t_skip i)) : bool
    ensures { result = completed0 self }
    
  predicate resolve5 (self : borrowed (C04Skip_Skip_Type.t_skip i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve5 (self : borrowed (C04Skip_Skip_Type.t_skip i)) : bool
    ensures { result = resolve5 self }
    
  use seq.Seq
  predicate resolve4 (self : Core_Option_Option_Type.t_option item0)
  val resolve4 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = resolve4 self }
    
  val next0 [#"../common.rs" 27 4 27 45] (self : borrowed i) : Core_Option_Option_Type.t_option item0
    requires {[#"../common.rs" 27 17 27 21] inv8 self}
    ensures { [#"../common.rs" 23 14 26 5] match result with
      | Core_Option_Option_Type.C_None -> completed1 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 26 27 44] inv5 result }
    
  use prelude.Ghost
  function index_logic0 [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq item0)) (ix : int) : item0 =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33] Seq.get (Ghost.inner self) ix
  val index_logic0 [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq item0)) (ix : int) : item0
    ensures { result = index_logic0 self ix }
    
  use prelude.Ghost
  use prelude.Ghost
  predicate resolve2 (self : Ghost.ghost_ty (Seq.seq item0))
  val resolve2 (self : Ghost.ghost_ty (Seq.seq item0)) : bool
    ensures { result = resolve2 self }
    
  use prelude.Ghost
  predicate resolve1 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed usize) : bool
    ensures { result = resolve1 self }
    
  predicate is_default0 (self : usize) =
    [#"../../../../../creusot-contracts/src/std/num.rs" 30 28 30 32] self = (0 : usize)
  val is_default0 (self : usize) : bool
    ensures { result = is_default0 self }
    
  val take0 (dest : borrowed usize) : usize
    requires {inv6 dest}
    ensures { [#"../../../../../creusot-contracts/src/std/mem.rs" 15 22 15 37] result =  * dest }
    ensures { [#"../../../../../creusot-contracts/src/std/mem.rs" 16 22 16 42] is_default0 ( ^ dest) }
    ensures { inv7 result }
    
  predicate resolve0 (self : Ghost.ghost_ty (borrowed (C04Skip_Skip_Type.t_skip i)))
  val resolve0 (self : Ghost.ghost_ty (borrowed (C04Skip_Skip_Type.t_skip i))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Ghost
  let rec cfg next [#"../04_skip.rs" 63 4 63 41] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C04Skip_Skip_Type.t_skip i)) : Core_Option_Option_Type.t_option item0
    requires {[#"../04_skip.rs" 63 17 63 21] inv2 self}
    ensures { [#"../04_skip.rs" 59 14 62 5] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces1 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../04_skip.rs" 63 26 63 41] inv5 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option item0;
  var self : borrowed (C04Skip_Skip_Type.t_skip i) = self;
  var old_self : Ghost.ghost_ty (borrowed (C04Skip_Skip_Type.t_skip i));
  var n : usize;
  var _6 : borrowed usize;
  var _7 : borrowed usize;
  var skipped : Ghost.ghost_ty (Seq.seq item0);
  var r : Core_Option_Option_Type.t_option item0;
  var _18 : borrowed i;
  var x : item0;
  var _25 : Ghost.ghost_ty (Seq.seq item0);
  {
    goto BB0
  }
  BB0 {
    [#"../04_skip.rs" 64 23 64 35] old_self <- ([#"../04_skip.rs" 64 23 64 35] Ghost.new self);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 old_self };
    assume { resolve0 old_self };
    [#"../04_skip.rs" 65 35 65 46] _7 <- Borrow.borrow_mut (C04Skip_Skip_Type.skip_n ( * self));
    [#"../04_skip.rs" 65 35 65 46] self <- { self with current = (let C04Skip_Skip_Type.C_Skip x0 x1 =  * self in C04Skip_Skip_Type.C_Skip x0 ( ^ _7)) };
    [#"../04_skip.rs" 65 35 65 46] _6 <- Borrow.borrow_mut ( * _7);
    [#"../04_skip.rs" 65 35 65 46] _7 <- { _7 with current =  ^ _6 };
    [#"../04_skip.rs" 65 20 65 47] n <- ([#"../04_skip.rs" 65 20 65 47] take0 _6);
    _6 <- any borrowed usize;
    goto BB2
  }
  BB2 {
    assume { resolve1 _7 };
    [#"../04_skip.rs" 66 26 66 44] skipped <- ([#"../04_skip.rs" 66 26 66 44] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    assert { [@expl:type invariant] inv1 skipped };
    assume { resolve2 skipped };
    goto BB4
  }
  BB4 {
    invariant { [#"../04_skip.rs" 67 20 67 53] Seq.length (Ghost.inner skipped) + UIntSize.to_int n = UIntSize.to_int (C04Skip_Skip_Type.skip_n ( * Ghost.inner old_self)) };
    invariant { [#"../04_skip.rs" 67 8 67 55] produces0 (C04Skip_Skip_Type.skip_iter ( * Ghost.inner old_self)) (Ghost.inner skipped) (C04Skip_Skip_Type.skip_iter ( * self)) };
    invariant { [#"../04_skip.rs" 67 8 67 55] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner skipped) -> resolve3 (index_logic0 skipped i) };
    invariant { [#"../04_skip.rs" 70 20 70 35] UIntSize.to_int (C04Skip_Skip_Type.skip_n ( * self)) = 0 };
    invariant { [#"../04_skip.rs" 71 20 71 29] inv2 self };
    goto BB5
  }
  BB5 {
    [#"../04_skip.rs" 73 20 73 36] _18 <- Borrow.borrow_mut (C04Skip_Skip_Type.skip_iter ( * self));
    [#"../04_skip.rs" 73 20 73 36] self <- { self with current = (let C04Skip_Skip_Type.C_Skip x0 x1 =  * self in C04Skip_Skip_Type.C_Skip ( ^ _18) x1) };
    assume { inv3 ( ^ _18) };
    [#"../04_skip.rs" 73 20 73 36] r <- ([#"../04_skip.rs" 73 20 73 36] next0 _18);
    _18 <- any borrowed i;
    goto BB6
  }
  BB6 {
    switch ([#"../04_skip.rs" 74 15 74 21] ([#"../04_skip.rs" 74 15 74 16] n) = ([#"../04_skip.rs" 74 20 74 21] [#"../04_skip.rs" 74 20 74 21] (0 : usize)))
      | False -> goto BB8
      | True -> goto BB7
      end
  }
  BB7 {
    assert { [@expl:type invariant] inv2 self };
    assume { resolve5 self };
    [#"../04_skip.rs" 75 23 75 24] _0 <- ([#"../04_skip.rs" 75 23 75 24] r);
    [#"../04_skip.rs" 75 23 75 24] r <- any Core_Option_Option_Type.t_option item0;
    goto BB15
  }
  BB8 {
    switch (r)
      | Core_Option_Option_Type.C_Some _ -> goto BB10
      | _ -> goto BB9
      end
  }
  BB9 {
    assert { [@expl:type invariant] inv2 self };
    assume { resolve5 self };
    [#"../04_skip.rs" 81 23 81 24] _0 <- ([#"../04_skip.rs" 81 23 81 24] r);
    [#"../04_skip.rs" 81 23 81 24] r <- any Core_Option_Option_Type.t_option item0;
    goto BB15
  }
  BB10 {
    goto BB11
  }
  BB11 {
    [#"../04_skip.rs" 77 24 77 25] x <- ([#"../04_skip.rs" 77 24 77 25] Core_Option_Option_Type.some_0 r);
    [#"../04_skip.rs" 77 24 77 25] r <- (let Core_Option_Option_Type.C_Some x0 = r in Core_Option_Option_Type.C_Some (any item0));
    assert { [@expl:type invariant] inv4 x };
    assume { resolve3 x };
    assert { [@expl:type invariant] inv5 r };
    assume { resolve4 r };
    [#"../04_skip.rs" 78 26 78 67] _25 <- ([#"../04_skip.rs" 78 26 78 67] Ghost.new (Seq.(++) (Ghost.inner skipped) (Seq.singleton x)));
    goto BB12
  }
  BB12 {
    [#"../04_skip.rs" 78 16 78 67] skipped <- ([#"../04_skip.rs" 78 16 78 67] _25);
    [#"../04_skip.rs" 78 16 78 67] _25 <- any Ghost.ghost_ty (Seq.seq item0);
    assert { [@expl:type invariant] inv1 skipped };
    assume { resolve2 skipped };
    [#"../04_skip.rs" 79 16 79 22] n <- ([#"../04_skip.rs" 79 16 79 22] n - ([#"../04_skip.rs" 79 21 79 22] [#"../04_skip.rs" 79 21 79 22] (1 : usize)));
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB4
  }
  BB15 {
    goto BB16
  }
  BB16 {
    return _0
  }
  
end
module C04Skip_Impl0
  type i
  use prelude.Borrow
  predicate invariant4 (self : borrowed i)
  val invariant4 (self : borrowed i) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed i)
  val inv4 (_x : borrowed i) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed i . inv4 x = true
  type item0
  use seq.Seq
  predicate invariant3 (self : Seq.seq item0)
  val invariant3 (self : Seq.seq item0) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq item0)
  val inv3 (_x : Seq.seq item0) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq item0 . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : Core_Option_Option_Type.t_option item0)
  val invariant2 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option item0)
  val inv2 (_x : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option item0 . inv2 x = true
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate invariant1 (self : borrowed (C04Skip_Skip_Type.t_skip i))
  val invariant1 (self : borrowed (C04Skip_Skip_Type.t_skip i)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (C04Skip_Skip_Type.t_skip i))
  val inv1 (_x : borrowed (C04Skip_Skip_Type.t_skip i)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (C04Skip_Skip_Type.t_skip i) . inv1 x = true
  predicate invariant0 (self : C04Skip_Skip_Type.t_skip i)
  val invariant0 (self : C04Skip_Skip_Type.t_skip i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C04Skip_Skip_Type.t_skip i)
  val inv0 (_x : C04Skip_Skip_Type.t_skip i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C04Skip_Skip_Type.t_skip i . inv0 x = true
  use seq.Seq
  use seq.Seq
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  predicate resolve0 (self : item0)
  val resolve0 (self : item0) : bool
    ensures { result = resolve0 self }
    
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  predicate completed0 [#"../04_skip.rs" 22 4 22 35] (self : borrowed (C04Skip_Skip_Type.t_skip i)) =
    [#"../04_skip.rs" 23 8 31 9] UIntSize.to_int (C04Skip_Skip_Type.skip_n ( ^ self)) = 0 /\ (exists i : borrowed i . exists s : Seq.seq item0 . inv4 i /\ inv3 s /\ Seq.length s <= UIntSize.to_int (C04Skip_Skip_Type.skip_n ( * self)) /\ produces1 (C04Skip_Skip_Type.skip_iter ( * self)) s ( * i) /\ (forall i : int . 0 <= i /\ i < Seq.length s -> resolve0 (Seq.get s i)) /\ completed1 i /\  ^ i = C04Skip_Skip_Type.skip_iter ( ^ self))
  val completed0 [#"../04_skip.rs" 22 4 22 35] (self : borrowed (C04Skip_Skip_Type.t_skip i)) : bool
    ensures { result = completed0 self }
    
  use seq.Seq
  use seq.Seq
  predicate produces0 [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq item0) (o : C04Skip_Skip_Type.t_skip i)
    
   =
    [#"../04_skip.rs" 37 8 44 9] visited = Seq.empty  /\ self = o \/ UIntSize.to_int (C04Skip_Skip_Type.skip_n o) = 0 /\ Seq.length visited > 0 /\ (exists s : Seq.seq item0 . inv3 s /\ Seq.length s = UIntSize.to_int (C04Skip_Skip_Type.skip_n self) /\ produces1 (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o) /\ (forall i : int . 0 <= i /\ i < Seq.length s -> resolve0 (Seq.get s i)))
  val produces0 [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq item0) (o : C04Skip_Skip_Type.t_skip i) : bool
    ensures { result = produces0 self visited o }
    
  goal produces_refl_refn : [#"../04_skip.rs" 50 4 50 29] forall a : C04Skip_Skip_Type.t_skip i . inv0 a -> inv0 a /\ (forall result : () . produces0 a (Seq.empty ) a -> produces0 a (Seq.empty ) a)
  goal next_refn : [#"../04_skip.rs" 63 4 63 41] forall self : borrowed (C04Skip_Skip_Type.t_skip i) . inv1 self -> inv1 self /\ (forall result : Core_Option_Option_Type.t_option item0 . inv2 result /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end -> inv2 result /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_trans_refn : [#"../04_skip.rs" 57 4 57 90] forall a : C04Skip_Skip_Type.t_skip i . forall ab : Seq.seq item0 . forall b : C04Skip_Skip_Type.t_skip i . forall bc : Seq.seq item0 . forall c : C04Skip_Skip_Type.t_skip i . inv0 c /\ inv3 bc /\ inv0 b /\ inv3 ab /\ inv0 a /\ produces0 b bc c /\ produces0 a ab b -> inv0 c /\ inv3 bc /\ inv0 b /\ inv3 ab /\ inv0 a /\ produces0 b bc c /\ produces0 a ab b /\ (forall result : () . produces0 a (Seq.(++) ab bc) c -> produces0 a (Seq.(++) ab bc) c)
end
