
module C04Skip_Common_Iterator_Invariant_Stub
  type self
  val ghost predicate invariant' (self : self)
end
module C04Skip_Common_Iterator_Invariant_Interface
  type self
  val ghost predicate invariant' (self : self)
end
module C04Skip_Common_Iterator_Invariant
  type self
  let rec ghost predicate invariant' [#"../common.rs" 28 4 28 30] (self : self) = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../common.rs" 29 8 29 12] true
end
module C04Skip_Skip_Type
  use mach.int.Int
  use prelude.UIntSize
  type t_skip 'i =
    | C_Skip 'i usize
    
  let function skip_n (self : t_skip 'i) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Skip _ a -> a
      end
  let function skip_iter (self : t_skip 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Skip a _ -> a
      end
end
module C04Skip_Common_Iterator_Item_Type
  type self
  type item
end
module C04Skip_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C04Skip_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C04Skip_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C04Skip_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  val ghost predicate completed (self : borrowed self)
end
module C04Skip_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  val ghost predicate completed (self : borrowed self)
end
module C04Skip_Common_Iterator_Completed
  type self
  use prelude.Borrow
  val ghost predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C04Skip_Impl0_Completed_Stub
  type i
  use prelude.Borrow
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  val ghost predicate completed (self : borrowed (C04Skip_Skip_Type.t_skip i))
end
module C04Skip_Impl0_Completed_Interface
  type i
  use prelude.Borrow
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  val ghost predicate completed (self : borrowed (C04Skip_Skip_Type.t_skip i))
end
module C04Skip_Impl0_Completed
  type i
  use prelude.Borrow
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  clone C04Skip_Common_Iterator_Completed_Stub as Completed0 with type self = i
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with type self = i, type Item0.item = Item0.item
  let rec ghost predicate completed [#"../04_skip.rs" 21 4 21 35] (self : borrowed (C04Skip_Skip_Type.t_skip i))
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../04_skip.rs" 22 8 29 9] pure {UInt64.to_int (C04Skip_Skip_Type.skip_n ( ^ self)) = 0} && pure {exists i : borrowed i . exists s : Seq.seq Item0.item . Seq.length s <= UInt64.to_int (C04Skip_Skip_Type.skip_n ( * self)) /\ Produces0.produces (C04Skip_Skip_Type.skip_iter ( * self)) s ( * i) /\ Completed0.completed i /\  ^ i = C04Skip_Skip_Type.skip_iter ( ^ self)}
end
module C04Skip_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = self
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl (a : self) : ()
end
module C04Skip_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = self
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl (a : self) : ()
    requires {[#"../common.rs" 14 15 14 28] Invariant0.invariant' a}
    ensures { [#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a }
    
end
module C04Skip_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = self
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C04Skip_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = self
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C04Skip_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = self
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 19 15 19 28] Invariant0.invariant' a}
    requires {[#"../common.rs" 20 15 20 28] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 15 21 28] Invariant0.invariant' c}
    requires {[#"../common.rs" 22 15 22 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 23 15 23 32] Produces0.produces b bc c}
    ensures { [#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c }
    
end
module C04Skip_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = self
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C04Skip_Impl0_Produces_Stub
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  val ghost predicate produces (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : C04Skip_Skip_Type.t_skip i)
    
end
module C04Skip_Impl0_Produces_Interface
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  val ghost predicate produces (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : C04Skip_Skip_Type.t_skip i)
    
end
module C04Skip_Impl0_Produces
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  use mach.int.UInt64
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with type self = i, type Item0.item = Item0.item
  let rec ghost predicate produces [#"../04_skip.rs" 33 4 33 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : C04Skip_Skip_Type.t_skip i)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../04_skip.rs" 34 8 40 9] pure {visited = Seq.empty } && pure {self = o} || pure {UInt64.to_int (C04Skip_Skip_Type.skip_n o) = 0} && pure {exists s : Seq.seq Item0.item . Seq.length s = UInt64.to_int (C04Skip_Skip_Type.skip_n self) /\ Produces0.produces (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o)}
end
module C04Skip_Impl0_Invariant_Stub
  type i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  val ghost predicate invariant' (self : C04Skip_Skip_Type.t_skip i)
end
module C04Skip_Impl0_Invariant_Interface
  type i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  val ghost predicate invariant' (self : C04Skip_Skip_Type.t_skip i)
end
module C04Skip_Impl0_Invariant
  type i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Common_Iterator_Invariant_Stub as Invariant0 with type self = i
  let rec ghost predicate invariant' [#"../04_skip.rs" 58 4 58 30] (self : C04Skip_Skip_Type.t_skip i)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../04_skip.rs" 57 4 57 16] Invariant0.invariant' (C04Skip_Skip_Type.skip_iter self)
end
module C04Skip_Impl0_ProducesRefl_Stub
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Impl0_Produces_Stub as Produces0 with type i = i, type Item0.item = Item0.item
  clone C04Skip_Impl0_Invariant_Stub as Invariant0 with type i = i
  val ghost function produces_refl (a : C04Skip_Skip_Type.t_skip i) : ()
end
module C04Skip_Impl0_ProducesRefl_Interface
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Impl0_Produces_Stub as Produces0 with type i = i, type Item0.item = Item0.item
  clone C04Skip_Impl0_Invariant_Stub as Invariant0 with type i = i
  val ghost function produces_refl (a : C04Skip_Skip_Type.t_skip i) : ()
    requires {[#"../04_skip.rs" 44 15 44 28] Invariant0.invariant' a}
    ensures { [#"../04_skip.rs" 45 14 45 39] Produces0.produces a (Seq.empty ) a }
    
end
module C04Skip_Impl0_ProducesRefl
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Impl0_Produces_Stub as Produces0 with type i = i, type Item0.item = Item0.item
  clone C04Skip_Impl0_Invariant_Stub as Invariant0 with type i = i
  let rec ghost function produces_refl [#"../04_skip.rs" 46 4 46 29] (a : C04Skip_Skip_Type.t_skip i) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../04_skip.rs" 43 4 43 10] ()
  axiom produces_refl_spec : forall a : C04Skip_Skip_Type.t_skip i . ([#"../04_skip.rs" 44 15 44 28] Invariant0.invariant' a) -> ([#"../04_skip.rs" 45 14 45 39] Produces0.produces a (Seq.empty ) a)
end
module C04Skip_Impl0_ProducesRefl_Impl
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  clone C04Skip_Common_Iterator_Produces_Interface as Produces1 with type self = i, type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_Invariant_Interface as Invariant1 with type self = i
  clone C04Skip_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C04Skip_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Impl0_Produces as Produces0 with type i = i, type Item0.item = Item0.item,
    val Produces0.produces = Produces1.produces
  clone C04Skip_Impl0_Invariant as Invariant0 with type i = i, val Invariant0.invariant' = Invariant1.invariant'
  let rec ghost function produces_refl (a : C04Skip_Skip_Type.t_skip i) : ()
    requires {[#"../04_skip.rs" 44 15 44 28] Invariant0.invariant' a}
    ensures { [#"../04_skip.rs" 45 14 45 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../04_skip.rs" 43 4 43 10] ()
end
module C04Skip_Impl0_ProducesTrans_Stub
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Impl0_Produces_Stub as Produces0 with type i = i, type Item0.item = Item0.item
  clone C04Skip_Impl0_Invariant_Stub as Invariant0 with type i = i
  val ghost function produces_trans (a : C04Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : C04Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : C04Skip_Skip_Type.t_skip i) : ()
    
end
module C04Skip_Impl0_ProducesTrans_Interface
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Impl0_Produces_Stub as Produces0 with type i = i, type Item0.item = Item0.item
  clone C04Skip_Impl0_Invariant_Stub as Invariant0 with type i = i
  val ghost function produces_trans (a : C04Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : C04Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : C04Skip_Skip_Type.t_skip i) : ()
    requires {[#"../04_skip.rs" 49 15 49 28] Invariant0.invariant' a}
    requires {[#"../04_skip.rs" 50 15 50 28] Invariant0.invariant' b}
    requires {[#"../04_skip.rs" 51 15 51 28] Invariant0.invariant' c}
    requires {[#"../04_skip.rs" 52 15 52 32] Produces0.produces a ab b}
    requires {[#"../04_skip.rs" 53 15 53 32] Produces0.produces b bc c}
    ensures { [#"../04_skip.rs" 54 14 54 42] Produces0.produces a (Seq.(++) ab bc) c }
    
end
module C04Skip_Impl0_ProducesTrans
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Impl0_Produces_Stub as Produces0 with type i = i, type Item0.item = Item0.item
  clone C04Skip_Impl0_Invariant_Stub as Invariant0 with type i = i
  let rec ghost function produces_trans [#"../04_skip.rs" 55 4 55 90] (a : C04Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : C04Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : C04Skip_Skip_Type.t_skip i) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../04_skip.rs" 48 4 48 10] ()
  axiom produces_trans_spec : forall a : C04Skip_Skip_Type.t_skip i, ab : Seq.seq Item0.item, b : C04Skip_Skip_Type.t_skip i, bc : Seq.seq Item0.item, c : C04Skip_Skip_Type.t_skip i . ([#"../04_skip.rs" 49 15 49 28] Invariant0.invariant' a) -> ([#"../04_skip.rs" 50 15 50 28] Invariant0.invariant' b) -> ([#"../04_skip.rs" 51 15 51 28] Invariant0.invariant' c) -> ([#"../04_skip.rs" 52 15 52 32] Produces0.produces a ab b) -> ([#"../04_skip.rs" 53 15 53 32] Produces0.produces b bc c) -> ([#"../04_skip.rs" 54 14 54 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C04Skip_Impl0_ProducesTrans_Impl
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  clone C04Skip_Common_Iterator_Produces_Interface as Produces1 with type self = i, type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_Invariant_Interface as Invariant1 with type self = i
  clone C04Skip_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C04Skip_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Impl0_Produces as Produces0 with type i = i, type Item0.item = Item0.item,
    val Produces0.produces = Produces1.produces
  clone C04Skip_Impl0_Invariant as Invariant0 with type i = i, val Invariant0.invariant' = Invariant1.invariant'
  let rec ghost function produces_trans (a : C04Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : C04Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : C04Skip_Skip_Type.t_skip i) : ()
    requires {[#"../04_skip.rs" 49 15 49 28] Invariant0.invariant' a}
    requires {[#"../04_skip.rs" 50 15 50 28] Invariant0.invariant' b}
    requires {[#"../04_skip.rs" 51 15 51 28] Invariant0.invariant' c}
    requires {[#"../04_skip.rs" 52 15 52 32] Produces0.produces a ab b}
    requires {[#"../04_skip.rs" 53 15 53 32] Produces0.produces b bc c}
    ensures { [#"../04_skip.rs" 54 14 54 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../04_skip.rs" 48 4 48 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Stub
  type self
  val ghost function default_log (_ : ()) : self
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface
  type self
  val ghost function default_log (_ : ()) : self
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog
  type self
  val ghost function default_log (_ : ()) : self
end
module Core_Mem_Take_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Stub as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = DefaultLog0.default_log () }
    
end
module Core_Mem_Take
  type t
  use prelude.Borrow
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = DefaultLog0.default_log () }
    
end
module C04Skip_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = self
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_Completed_Stub as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C04Skip_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C04Skip_Common_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = self
  clone C04Skip_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_Completed_Interface as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C04Skip_Common_Iterator_Invariant_Interface as Invariant0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Option_Impl0_IsNone_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val is_none [@cfg:stackify] (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = (self = Core_Option_Option_Type.C_None) }
    
end
module Core_Option_Impl0_IsNone
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val is_none [@cfg:stackify] (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = (self = Core_Option_Option_Type.C_None) }
    
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
  let function ghost_0 (self : t_ghost 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ghost a -> a
      end
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Logic_Ghost_Impl1_Inner_Stub
  type t
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  val ghost function inner (self : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl1_Inner_Interface
  type t
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  val ghost function inner (self : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl1_Inner
  type t
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  let rec ghost function inner (self : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost t) : t
   = [@vc:do_not_keep_trace] [@vc:sp]
    CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 self
end
module CreusotContracts_Std1_Default_Impl2_DefaultLog_Stub
  use mach.int.Int
  use prelude.UIntSize
  val ghost function default_log (_ : ()) : usize
end
module CreusotContracts_Std1_Default_Impl2_DefaultLog_Interface
  use mach.int.Int
  use prelude.UIntSize
  val ghost function default_log (_ : ()) : usize
end
module CreusotContracts_Std1_Default_Impl2_DefaultLog
  use mach.int.Int
  use prelude.UIntSize
  let rec ghost function default_log (_ : ()) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (0 : usize)
end
module C04Skip_Impl0_Next_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  clone C04Skip_Impl0_Produces_Stub as Produces0 with type i = i, type Item0.item = Item0.item
  clone C04Skip_Impl0_Completed_Stub as Completed0 with type i = i
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C04Skip_Impl0_Invariant_Stub as Invariant0 with type i = i
  val next [@cfg:stackify] (self : borrowed (C04Skip_Skip_Type.t_skip i)) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../04_skip.rs" 62 4 62 40] Invariant0.invariant' ( * self)}
    ensures { [#"../04_skip.rs" 62 4 62 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../04_skip.rs" 63 14 66 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C04Skip_Impl0_Next
  type i
  use prelude.Borrow
  use seq.Seq
  clone C04Skip_Common_Iterator_Completed_Interface as Completed1 with type self = i
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  clone C04Skip_Common_Iterator_Produces_Interface as Produces1 with type self = i, type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_Invariant_Interface as Invariant1 with type self = i
  clone C04Skip_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C04Skip_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Impl0_Produces as Produces0 with type i = i, type Item0.item = Item0.item,
    val Produces0.produces = Produces1.produces
  clone C04Skip_Impl0_Completed as Completed0 with type i = i, type Item0.item = Item0.item,
    val Produces0.produces = Produces1.produces, val Completed0.completed = Completed1.completed
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C04Skip_Impl0_Invariant as Invariant0 with type i = i, val Invariant0.invariant' = Invariant1.invariant'
  use mach.int.Int
  use prelude.UIntSize
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Default_Impl2_DefaultLog as DefaultLog0
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = C04Skip_Skip_Type.t_skip i
  clone Core_Option_Impl0_IsNone_Interface as IsNone0 with type t = Item0.item
  clone C04Skip_Common_Iterator_Next_Interface as Next0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', type Item0.item = Item0.item,
    val Completed0.completed = Completed1.completed, val Produces0.produces = Produces1.produces
  clone CreusotContracts_Logic_Ghost_Impl1_Inner as Inner0 with type t = borrowed (C04Skip_Skip_Type.t_skip i)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = usize
  clone Core_Mem_Take_Interface as Take0 with type t = usize, val DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (C04Skip_Skip_Type.t_skip i))
  let rec cfg next [@cfg:stackify] [#"../04_skip.rs" 67 4 67 41] (self : borrowed (C04Skip_Skip_Type.t_skip i)) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../04_skip.rs" 62 4 62 40] Invariant0.invariant' ( * self)}
    ensures { [#"../04_skip.rs" 62 4 62 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../04_skip.rs" 63 14 66 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option Item0.item;
  var self_1 : borrowed (C04Skip_Skip_Type.t_skip i);
  var old_self_5 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (C04Skip_Skip_Type.t_skip i));
  var _7 : ();
  var n_8 : usize;
  var _9 : borrowed usize;
  var _10 : borrowed usize;
  var _15 : ();
  var _16 : ();
  var r_17 : Core_Option_Option_Type.t_option Item0.item;
  var _18 : borrowed i;
  var _19 : ();
  var _20 : bool;
  var _21 : bool;
  var _22 : usize;
  var _23 : bool;
  var _24 : Core_Option_Option_Type.t_option Item0.item;
  var _25 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _7 <- ();
    old_self_5 <- ([#"../04_skip.rs" 68 23 68 38] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_5 };
    _10 <- borrow_mut (C04Skip_Skip_Type.skip_n ( * self_1));
    self_1 <- { self_1 with current = (let C04Skip_Skip_Type.C_Skip a b =  * self_1 in C04Skip_Skip_Type.C_Skip a ( ^ _10)) };
    _9 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _9) };
    n_8 <- ([#"../04_skip.rs" 69 20 69 47] Take0.take _9);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _10 };
    goto BB3
  }
  BB3 {
    invariant proph_const { [#"../04_skip.rs" 70 33 70 59]  ^ self_1 =  ^ Inner0.inner old_self_5 };
    invariant produces { [#"../04_skip.rs" 70 8 70 61] exists s : Seq.seq Item0.item . Seq.length s + UInt64.to_int n_8 = UInt64.to_int (C04Skip_Skip_Type.skip_n ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_5)) /\ Produces1.produces (C04Skip_Skip_Type.skip_iter ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_5)) s (C04Skip_Skip_Type.skip_iter ( * self_1)) };
    invariant n_0 { [#"../04_skip.rs" 73 25 73 40] UInt64.to_int (C04Skip_Skip_Type.skip_n ( * self_1)) = 0 };
    invariant inv { [#"../04_skip.rs" 74 25 74 41] Invariant0.invariant' ( * self_1) };
    _18 <- borrow_mut (C04Skip_Skip_Type.skip_iter ( * self_1));
    self_1 <- { self_1 with current = (let C04Skip_Skip_Type.C_Skip a b =  * self_1 in C04Skip_Skip_Type.C_Skip ( ^ _18) b) };
    r_17 <- ([#"../04_skip.rs" 76 20 76 36] Next0.next _18);
    goto BB4
  }
  BB4 {
    _22 <- n_8;
    _21 <- ([#"../04_skip.rs" 77 15 77 21] _22 = (0 : usize));
    switch (_21)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    _20 <- true;
    goto BB7
  }
  BB6 {
    _24 <- r_17;
    _23 <- ([#"../04_skip.rs" 77 25 77 36] IsNone0.is_none _24);
    goto BB8
  }
  BB7 {
    switch (_20)
      | False -> goto BB10
      | True -> goto BB9
      end
  }
  BB8 {
    _20 <- _23;
    _23 <- any bool;
    goto BB7
  }
  BB9 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve3.resolve _0 };
    _0 <- r_17;
    r_17 <- any Core_Option_Option_Type.t_option Item0.item;
    goto BB12
  }
  BB10 {
    _19 <- ();
    n_8 <- ([#"../04_skip.rs" 80 12 80 18] n_8 - (1 : usize));
    _16 <- ();
    goto BB11
  }
  BB11 {
    assume { Resolve3.resolve r_17 };
    goto BB3
  }
  BB12 {
    return _0
  }
  
end
module C04Skip_Impl0_Item_Type
  type i
  clone C04Skip_Common_Iterator_Item_Type as Item0 with type self = i
  type item  =
    Item0.item
end
module C04Skip_Impl0
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Invariant_Interface as Invariant1 with type self = i
  clone C04Skip_Common_Iterator_Completed_Interface as Completed2 with type self = i
  clone C04Skip_Common_Iterator_Item_Type as Item2 with type self = i
  clone C04Skip_Common_Iterator_Produces_Interface as Produces2 with type self = i, type Item0.item = Item2.item
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Impl0_Invariant as Invariant0 with type i = i, val Invariant0.invariant' = Invariant1.invariant'
  clone C04Skip_Impl0_Item_Type as Item0 with type i = i, type Item0.item = Item2.item
  clone C04Skip_Impl0_Produces as Produces0 with type i = i, type Item0.item = Item2.item,
    val Produces0.produces = Produces2.produces
  clone C04Skip_Impl0_ProducesRefl as ProducesRefl0 with type i = i, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, type Item0.item = Item2.item, axiom .
  clone C04Skip_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with type self = C04Skip_Skip_Type.t_skip i,
    val produces_refl = ProducesRefl0.produces_refl, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, type Item0.item = Item0.item, axiom .
  clone C04Skip_Impl0_Completed as Completed0 with type i = i, type Item0.item = Item2.item,
    val Produces0.produces = Produces2.produces, val Completed0.completed = Completed2.completed
  clone C04Skip_Common_Iterator_Completed_Interface as Completed1 with type self = C04Skip_Skip_Type.t_skip i,
    val completed = Completed0.completed
  clone C04Skip_Common_Iterator_Produces_Interface as Produces1 with type self = C04Skip_Skip_Type.t_skip i,
    val produces = Produces0.produces, type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_Item_Type as Item1 with type self = C04Skip_Skip_Type.t_skip i, type item = Item0.item
  goal produces_refl_spec : forall a : C04Skip_Skip_Type.t_skip i . (([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../04_skip.rs" 44 15 44 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../04_skip.rs" 45 14 45 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a))
  clone C04Skip_Impl0_ProducesTrans as ProducesTrans0 with type i = i,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces,
    type Item0.item = Item2.item, axiom .
  clone C04Skip_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with type self = C04Skip_Skip_Type.t_skip i,
    val produces_trans = ProducesTrans0.produces_trans, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, type Item0.item = Item0.item, axiom .
  goal produces_trans_spec : forall a : C04Skip_Skip_Type.t_skip i, ab : Seq.seq Item2.item, b : C04Skip_Skip_Type.t_skip i, bc : Seq.seq Item2.item, c : C04Skip_Skip_Type.t_skip i . (([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) && ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) && ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) && ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) && ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../04_skip.rs" 53 15 53 32] Produces0.produces b bc c) && ([#"../04_skip.rs" 52 15 52 32] Produces0.produces a ab b) && ([#"../04_skip.rs" 51 15 51 28] Invariant0.invariant' c) && ([#"../04_skip.rs" 50 15 50 28] Invariant0.invariant' b) && ([#"../04_skip.rs" 49 15 49 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../04_skip.rs" 54 14 54 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c))
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C04Skip_Impl0_Next_Interface as Next0 with type i = i, val Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item2.item, val Completed0.completed = Completed0.completed,
    val Produces0.produces = Produces0.produces
  clone C04Skip_Common_Iterator_Next_Interface as Next1 with type self = C04Skip_Skip_Type.t_skip i,
    val next = Next0.next, val Invariant0.invariant' = Invariant0.invariant', type Item0.item = Item0.item,
    val Completed0.completed = Completed0.completed, val Produces0.produces = Produces0.produces
  clone C04Skip_Common_Iterator_Invariant_Interface as Invariant2 with type self = C04Skip_Skip_Type.t_skip i,
    val invariant' = Invariant0.invariant'
end
