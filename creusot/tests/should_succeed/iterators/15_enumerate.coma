
module T_15_enumerate__Enumerate
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Enumerate 'i =
    | C_Enumerate 'i usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Enumerate < 'i > (input:t_Enumerate 'i) (ret  (iter:'i) (count:usize))= any
    [ good (iter:'i) (count:usize)-> {C_Enumerate iter count = input} (! ret {iter} {count})
    | bad (iter:'i) (count:usize)-> {C_Enumerate iter count <> input} {false} any ]
    
  
  function t_Enumerate__iter (self : t_Enumerate 'i) : 'i =
    match self with
      | C_Enumerate a _ -> a
      end
  
  function t_Enumerate__count (self : t_Enumerate 'i) : usize =
    match self with
      | C_Enumerate _ a -> a
      end
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module T_alloc__boxed__Box
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_Box 't 'a =
    | C_Box (Unique'0.t_Unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module M_15_enumerate__qy123zimplqy35z0qy125z__produces_refl__Impl
  type i
  
  let%span s15_enumerate0 = "../15_enumerate.rs" 43 15 43 24
  
  let%span s15_enumerate1 = "../15_enumerate.rs" 44 14 44 45
  
  let%span span2 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span4 = "../common.rs" 19 15 19 21
  
  let%span span5 = "../common.rs" 20 15 20 21
  
  let%span span6 = "../common.rs" 21 15 21 21
  
  let%span span7 = "../common.rs" 22 15 22 32
  
  let%span span8 = "../common.rs" 23 15 23 32
  
  let%span span9 = "../common.rs" 24 14 24 42
  
  let%span span10 = "../common.rs" 14 15 14 24
  
  let%span span11 = "../common.rs" 15 14 15 45
  
  let%span span12 = "" 0 0 0 0
  
  let%span span13 = "../15_enumerate.rs" 81 12 82 79
  
  let%span span14 = "../15_enumerate.rs" 32 8 38 9
  
  type t_Item'0
  
  predicate invariant'4 (self : t_Item'0)
  
  predicate inv'4 (_1 : t_Item'0)
  
  axiom inv'4 : forall x : t_Item'0 . inv'4 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'3 (self : t_Item'0) =
    [%#span2] inv'4 self
  
  predicate inv'3 (_1 : t_Item'0)
  
  axiom inv'3 : forall x : t_Item'0 . inv'3 x = true
  
  predicate invariant'2 (self : i)
  
  predicate inv'2 (_1 : i)
  
  axiom inv'2 : forall x : i . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#span3] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv'1 : forall x : Seq.seq t_Item'0 . inv'1 x = true
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span4] inv'2 a)
   -> ([%#span5] inv'2 b)
   -> ([%#span6] inv'2 c)
   -> ([%#span7] produces'1 a ab b)  -> ([%#span8] produces'1 b bc c)  -> ([%#span9] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span10] inv'2 self)
   -> ([%#span11] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Borrow
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  constant v_MAX'0 : usize = [%#span12] (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  use T_15_enumerate__Enumerate as Enumerate'0
  
  predicate invariant'0 [#"../15_enumerate.rs" 79 4 79 30] (self : Enumerate'0.t_Enumerate i) =
    [%#span13] (forall s : Seq.seq t_Item'0, i : i . produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i
     -> UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed i . completed'0 i  -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'0 (_1 : Enumerate'0.t_Enumerate i)
  
  axiom inv'0 : forall x : Enumerate'0.t_Enumerate i . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../15_enumerate.rs" 31 4 31 64] (self : Enumerate'0.t_Enumerate i) (visited : Seq.seq (usize, t_Item'0)) (o : Enumerate'0.t_Enumerate i)
    
   =
    [%#span14] Seq.length visited
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count o)
    - UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self)
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s (T_15_enumerate__Enumerate.t_Enumerate__iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a)
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  use seq.Seq
  
  constant self  : Enumerate'0.t_Enumerate i
  
  function produces_refl [#"../15_enumerate.rs" 45 4 45 26] (self : Enumerate'0.t_Enumerate i) : ()
  
  goal vc_produces_refl : ([%#s15_enumerate0] inv'0 self)
   -> ([%#s15_enumerate1] produces'0 self (Seq.empty  : Seq.seq (usize, t_Item'0)) self)
end
module M_15_enumerate__qy123zimplqy35z0qy125z__produces_trans__Impl
  type i
  
  let%span s15_enumerate0 = "../15_enumerate.rs" 49 15 49 21
  
  let%span s15_enumerate1 = "../15_enumerate.rs" 50 15 50 21
  
  let%span s15_enumerate2 = "../15_enumerate.rs" 51 15 51 21
  
  let%span s15_enumerate3 = "../15_enumerate.rs" 52 15 52 32
  
  let%span s15_enumerate4 = "../15_enumerate.rs" 53 15 53 32
  
  let%span s15_enumerate5 = "../15_enumerate.rs" 54 14 54 42
  
  let%span span6 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span8 = "../common.rs" 19 15 19 21
  
  let%span span9 = "../common.rs" 20 15 20 21
  
  let%span span10 = "../common.rs" 21 15 21 21
  
  let%span span11 = "../common.rs" 22 15 22 32
  
  let%span span12 = "../common.rs" 23 15 23 32
  
  let%span span13 = "../common.rs" 24 14 24 42
  
  let%span span14 = "../common.rs" 14 15 14 24
  
  let%span span15 = "../common.rs" 15 14 15 45
  
  let%span span16 = "" 0 0 0 0
  
  let%span span17 = "../15_enumerate.rs" 81 12 82 79
  
  let%span span18 = "../15_enumerate.rs" 32 8 38 9
  
  type t_Item'0
  
  predicate invariant'4 (self : t_Item'0)
  
  predicate inv'4 (_1 : t_Item'0)
  
  axiom inv'4 : forall x : t_Item'0 . inv'4 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'3 (self : t_Item'0) =
    [%#span6] inv'4 self
  
  predicate inv'3 (_1 : t_Item'0)
  
  axiom inv'3 : forall x : t_Item'0 . inv'3 x = true
  
  predicate invariant'2 (self : i)
  
  predicate inv'2 (_1 : i)
  
  axiom inv'2 : forall x : i . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#span7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv'1 : forall x : Seq.seq t_Item'0 . inv'1 x = true
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span8] inv'2 a)
   -> ([%#span9] inv'2 b)
   -> ([%#span10] inv'2 c)
   -> ([%#span11] produces'1 a ab b)  -> ([%#span12] produces'1 b bc c)  -> ([%#span13] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span14] inv'2 self)
   -> ([%#span15] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Borrow
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  constant v_MAX'0 : usize = [%#span16] (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  use T_15_enumerate__Enumerate as Enumerate'0
  
  predicate invariant'0 [#"../15_enumerate.rs" 79 4 79 30] (self : Enumerate'0.t_Enumerate i) =
    [%#span17] (forall s : Seq.seq t_Item'0, i : i . produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i
     -> UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed i . completed'0 i  -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'0 (_1 : Enumerate'0.t_Enumerate i)
  
  axiom inv'0 : forall x : Enumerate'0.t_Enumerate i . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../15_enumerate.rs" 31 4 31 64] (self : Enumerate'0.t_Enumerate i) (visited : Seq.seq (usize, t_Item'0)) (o : Enumerate'0.t_Enumerate i)
    
   =
    [%#span18] Seq.length visited
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count o)
    - UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self)
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s (T_15_enumerate__Enumerate.t_Enumerate__iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a)
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  constant a  : Enumerate'0.t_Enumerate i
  
  constant ab  : Seq.seq (usize, t_Item'0)
  
  constant b  : Enumerate'0.t_Enumerate i
  
  constant bc  : Seq.seq (usize, t_Item'0)
  
  constant c  : Enumerate'0.t_Enumerate i
  
  function produces_trans [#"../15_enumerate.rs" 55 4 55 90] (a : Enumerate'0.t_Enumerate i) (ab : Seq.seq (usize, t_Item'0)) (b : Enumerate'0.t_Enumerate i) (bc : Seq.seq (usize, t_Item'0)) (c : Enumerate'0.t_Enumerate i) : ()
    
  
  goal vc_produces_trans : ([%#s15_enumerate4] produces'0 b bc c)
   -> ([%#s15_enumerate3] produces'0 a ab b)
   -> ([%#s15_enumerate2] inv'0 c)
   -> ([%#s15_enumerate1] inv'0 b)
   -> ([%#s15_enumerate0] inv'0 a)  -> ([%#s15_enumerate5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module M_15_enumerate__qy123zimplqy35z0qy125z__next
  type i
  
  let%span s15_enumerate0 = "../15_enumerate.rs" 66 30 66 31
  
  let%span s15_enumerate1 = "../15_enumerate.rs" 61 17 61 21
  
  let%span s15_enumerate2 = "../15_enumerate.rs" 57 14 60 5
  
  let%span s15_enumerate3 = "../15_enumerate.rs" 61 26 61 44
  
  let%span span4 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "../15_enumerate.rs" 81 12 82 79
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span10 = "../common.rs" 19 15 19 21
  
  let%span span11 = "../common.rs" 20 15 20 21
  
  let%span span12 = "../common.rs" 21 15 21 21
  
  let%span span13 = "../common.rs" 22 15 22 32
  
  let%span span14 = "../common.rs" 23 15 23 32
  
  let%span span15 = "../common.rs" 24 14 24 42
  
  let%span span16 = "../common.rs" 14 15 14 24
  
  let%span span17 = "../common.rs" 15 14 15 45
  
  let%span span18 = "../15_enumerate.rs" 32 8 38 9
  
  let%span span19 = "../15_enumerate.rs" 26 8 26 43
  
  let%span span20 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span21 = "../common.rs" 31 17 31 21
  
  let%span span22 = "../common.rs" 27 14 30 5
  
  let%span span23 = "../common.rs" 31 26 31 44
  
  type t_Item'0
  
  predicate invariant'8 (self : t_Item'0)
  
  predicate inv'8 (_1 : t_Item'0)
  
  axiom inv'8 : forall x : t_Item'0 . inv'8 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'7 (self : t_Item'0) =
    [%#span4] inv'8 self
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv'7 : forall x : t_Item'0 . inv'7 x = true
  
  predicate inv'0 (_1 : i)
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = [%#span5] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use T_15_enumerate__Enumerate as Enumerate'0
  
  predicate invariant'6 [#"../15_enumerate.rs" 79 4 79 30] (self : Enumerate'0.t_Enumerate i) =
    [%#span6] (forall s : Seq.seq t_Item'0, i : i . produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i
     -> UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed i . completed'1 i  -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'6 (_1 : Enumerate'0.t_Enumerate i)
  
  axiom inv'6 : forall x : Enumerate'0.t_Enumerate i . inv'6 x
  = (invariant'6 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> true
    end)
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq t_Item'0) =
    [%#span7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_Item'0)
  
  axiom inv'5 : forall x : Seq.seq t_Item'0 . inv'5 x = true
  
  use T_core__option__Option as Option'0
  
  predicate invariant'4 (self : Option'0.t_Option t_Item'0) =
    [%#span8] true
  
  predicate inv'4 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv'4 : forall x : Option'0.t_Option t_Item'0 . inv'4 x = true
  
  predicate invariant'3 (self : borrowed i) =
    [%#span9] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed i)
  
  axiom inv'3 : forall x : borrowed i . inv'3 x = true
  
  predicate invariant'2 (self : Option'0.t_Option (usize, t_Item'0)) =
    [%#span8] true
  
  predicate inv'2 (_1 : Option'0.t_Option (usize, t_Item'0))
  
  axiom inv'2 : forall x : Option'0.t_Option (usize, t_Item'0) . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (Enumerate'0.t_Enumerate i)) =
    [%#span9] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'1 (_1 : borrowed (Enumerate'0.t_Enumerate i))
  
  axiom inv'1 : forall x : borrowed (Enumerate'0.t_Enumerate i) . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span10] inv'0 a)
   -> ([%#span11] inv'0 b)
   -> ([%#span12] inv'0 c)
   -> ([%#span13] produces'1 a ab b)  -> ([%#span14] produces'1 b bc c)  -> ([%#span15] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span16] inv'0 self)
   -> ([%#span17] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate invariant'0 (self : i)
  
  axiom inv'0 : forall x : i . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../15_enumerate.rs" 31 4 31 64] (self : Enumerate'0.t_Enumerate i) (visited : Seq.seq (usize, t_Item'0)) (o : Enumerate'0.t_Enumerate i)
    
   =
    [%#span18] Seq.length visited
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count o)
    - UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self)
    /\ (exists s : Seq.seq t_Item'0 . inv'5 s
    /\ produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s (T_15_enumerate__Enumerate.t_Enumerate__iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a)
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  use seq.Seq
  
  predicate completed'0 [#"../15_enumerate.rs" 25 4 25 35] (self : borrowed (Enumerate'0.t_Enumerate i)) =
    [%#span19] completed'1 (Borrow.borrow_logic (T_15_enumerate__Enumerate.t_Enumerate__iter self.current) (T_15_enumerate__Enumerate.t_Enumerate__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (Enumerate'0.t_Enumerate i)) =
    [%#span20] self.final = self.current
  
  use seq.Seq
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option t_Item'0))= {[@expl:precondition] [%#span21] inv'3 self}
    any
    [ return' (result:Option'0.t_Option t_Item'0)-> {[%#span23] inv'4 result}
      {[%#span22] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  let rec next (self:borrowed (Enumerate'0.t_Enumerate i)) (return'  (ret:Option'0.t_Option (usize, t_Item'0)))= {[%#s15_enumerate1] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Enumerate'0.t_Enumerate <i> {self.current}
          (fun (riter'0:i) (rcount'0:usize) ->
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                Enumerate'0.t_Enumerate <i> {self.current}
                  (fun (l_iter'0:i) (l_count'0:usize) ->
                     [ &self <- { self with current = Enumerate'0.C_Enumerate _4.final l_count'0 ; } ] 
                    s1)))
      | s1 = -{inv'0 _4.final}- s2
      | s2 = next'0 {_4} (fun (_ret':Option'0.t_Option t_Item'0) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = any [ br0 -> {_3 = Option'0.C_None } (! bb3) | br1 (a:t_Item'0)-> {_3 = Option'0.C_Some a} (! bb4) ] 
    | bb4 = s0
      [ s0 = Option'0.v_Some <t_Item'0> {_3} (fun (r0'0:t_Item'0) ->  [ &x <- r0'0 ] s1)
      | s1 = Enumerate'0.t_Enumerate <i> {self.current} (fun (riter'0:i) (rcount'0:usize) ->  [ &n <- rcount'0 ] s2)
      | s2 = Enumerate'0.t_Enumerate <i> {self.current}
          (fun (riter'1:i) (rcount'1:usize) ->
            UIntSize.add {rcount'1} {[%#s15_enumerate0] (1 : usize)}
              (fun (_ret':usize) ->
                Enumerate'0.t_Enumerate <i> {self.current}
                  (fun (l_iter'0:i) (l_count'0:usize) ->
                     [ &self <- { self with current = Enumerate'0.C_Enumerate l_iter'0 _ret' ; } ] 
                    s3)))
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 =  [ &_8 <- (n, x) ] s6
      | s6 = bb6 ]
      
    | bb6 = s0 [ s0 =  [ &_0 <- Option'0.C_Some _8 ] s1 | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb9 ] 
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option (usize, t_Item'0) = any_l ()
    | & self : borrowed (Enumerate'0.t_Enumerate i) = self
    | & _3 : Option'0.t_Option t_Item'0 = any_l ()
    | & _4 : borrowed i = any_l ()
    | & x : t_Item'0 = any_l ()
    | & n : usize = any_l ()
    | & _8 : (usize, t_Item'0) = any_l () ]
    
    [ return' (result:Option'0.t_Option (usize, t_Item'0))-> {[@expl:postcondition] [%#s15_enumerate3] inv'2 result}
      {[@expl:postcondition] [%#s15_enumerate2] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_15_enumerate__enumerate
  type i
  
  let%span s15_enumerate0 = "../15_enumerate.rs" 90 29 90 30
  
  let%span s15_enumerate1 = "../15_enumerate.rs" 87 0 87 75
  
  let%span s15_enumerate2 = "../15_enumerate.rs" 88 0 88 93
  
  let%span s15_enumerate3 = "../15_enumerate.rs" 89 30 89 34
  
  let%span s15_enumerate4 = "../15_enumerate.rs" 89 42 89 54
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "../15_enumerate.rs" 81 12 82 79
  
  let%span span7 = "../common.rs" 19 15 19 21
  
  let%span span8 = "../common.rs" 20 15 20 21
  
  let%span span9 = "../common.rs" 21 15 21 21
  
  let%span span10 = "../common.rs" 22 15 22 32
  
  let%span span11 = "../common.rs" 23 15 23 32
  
  let%span span12 = "../common.rs" 24 14 24 42
  
  let%span span13 = "../common.rs" 14 15 14 24
  
  let%span span14 = "../common.rs" 15 14 15 45
  
  predicate inv'0 (_1 : i)
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = [%#span5] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use T_15_enumerate__Enumerate as Enumerate'0
  
  predicate invariant'1 [#"../15_enumerate.rs" 79 4 79 30] (self : Enumerate'0.t_Enumerate i) =
    [%#span6] (forall s : Seq.seq t_Item'0, i : i . produces'0 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i
     -> UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed i . completed'0 i  -> produces'0 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'1 (_1 : Enumerate'0.t_Enumerate i)
  
  axiom inv'1 : forall x : Enumerate'0.t_Enumerate i . inv'1 x
  = (invariant'1 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> true
    end)
  
  predicate invariant'0 (self : i)
  
  axiom inv'0 : forall x : i . inv'0 x = true
  
  use seq.Seq
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span7] inv'0 a)
   -> ([%#span8] inv'0 b)
   -> ([%#span9] inv'0 c)
   -> ([%#span10] produces'0 a ab b)  -> ([%#span11] produces'0 b bc c)  -> ([%#span12] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span13] inv'0 self)
   -> ([%#span14] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.Intrinsic
  
  let rec enumerate (iter:i) (return'  (ret:Enumerate'0.t_Enumerate i))= {[%#s15_enumerate3] inv'0 iter}
    {[%#s15_enumerate2] forall s : Seq.seq t_Item'0, i : i . produces'0 iter s i
     -> Seq.length s < UIntSize.to_int v_MAX'0}
    {[%#s15_enumerate1] forall i : borrowed i . completed'0 i
     -> produces'0 i.current (Seq.empty  : Seq.seq t_Item'0) i.final}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 =  [ &_0 <- Enumerate'0.C_Enumerate iter ([%#s15_enumerate0] (0 : usize)) ] s1 | s1 = bb2 ] 
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : Enumerate'0.t_Enumerate i = any_l () | & iter : i = iter ] 
    [ return' (result:Enumerate'0.t_Enumerate i)-> {[@expl:postcondition] [%#s15_enumerate4] inv'1 result}
      (! return' {result}) ]
    
end
module M_15_enumerate__qy123zimplqy35z0qy125z
  type i
  
  let%span s15_enumerate0 = "../15_enumerate.rs" 45 4 45 26
  
  let%span s15_enumerate1 = "../15_enumerate.rs" 61 4 61 44
  
  let%span s15_enumerate2 = "../15_enumerate.rs" 55 4 55 90
  
  let%span span3 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "../15_enumerate.rs" 81 12 82 79
  
  let%span span9 = "../15_enumerate.rs" 26 8 26 43
  
  let%span span10 = "../15_enumerate.rs" 32 8 38 9
  
  type t_Item'0
  
  predicate invariant'6 (self : t_Item'0)
  
  predicate inv'6 (_1 : t_Item'0)
  
  axiom inv'6 : forall x : t_Item'0 . inv'6 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'5 (self : t_Item'0) =
    [%#span3] inv'6 self
  
  predicate inv'5 (_1 : t_Item'0)
  
  axiom inv'5 : forall x : t_Item'0 . inv'5 x = true
  
  predicate invariant'4 (self : i)
  
  predicate inv'4 (_1 : i)
  
  axiom inv'4 : forall x : i . inv'4 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t_Item'0) =
    [%#span4] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t_Item'0)
  
  axiom inv'3 : forall x : Seq.seq t_Item'0 . inv'3 x = true
  
  use prelude.prelude.UIntSize
  
  use T_core__option__Option as Option'0
  
  predicate invariant'2 (self : Option'0.t_Option (usize, t_Item'0)) =
    [%#span5] true
  
  predicate inv'2 (_1 : Option'0.t_Option (usize, t_Item'0))
  
  axiom inv'2 : forall x : Option'0.t_Option (usize, t_Item'0) . inv'2 x = true
  
  use T_15_enumerate__Enumerate as Enumerate'0
  
  predicate inv'0 (_1 : Enumerate'0.t_Enumerate i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (Enumerate'0.t_Enumerate i)) =
    [%#span6] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Enumerate'0.t_Enumerate i))
  
  axiom inv'1 : forall x : borrowed (Enumerate'0.t_Enumerate i) . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  constant v_MAX'0 : usize = [%#span7] (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  predicate invariant'0 [#"../15_enumerate.rs" 79 4 79 30] (self : Enumerate'0.t_Enumerate i) =
    [%#span8] (forall s : Seq.seq t_Item'0, i : i . produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i
     -> UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed i . completed'1 i  -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  axiom inv'0 : forall x : Enumerate'0.t_Enumerate i . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate completed'0 [#"../15_enumerate.rs" 25 4 25 35] (self : borrowed (Enumerate'0.t_Enumerate i)) =
    [%#span9] completed'1 (Borrow.borrow_logic (T_15_enumerate__Enumerate.t_Enumerate__iter self.current) (T_15_enumerate__Enumerate.t_Enumerate__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../15_enumerate.rs" 31 4 31 64] (self : Enumerate'0.t_Enumerate i) (visited : Seq.seq (usize, t_Item'0)) (o : Enumerate'0.t_Enumerate i)
    
   =
    [%#span10] Seq.length visited
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count o)
    - UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self)
    /\ (exists s : Seq.seq t_Item'0 . inv'3 s
    /\ produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s (T_15_enumerate__Enumerate.t_Enumerate__iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a)
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  use seq.Seq
  
  goal produces_refl_refn : [%#s15_enumerate0] forall self : Enumerate'0.t_Enumerate i . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq (usize, t_Item'0)) self
   -> produces'0 self (Seq.empty  : Seq.seq (usize, t_Item'0)) self)
  
  goal next_refn : [%#s15_enumerate1] forall self : borrowed (Enumerate'0.t_Enumerate i) . inv'1 self
   -> inv'1 self
  /\ (forall result : Option'0.t_Option (usize, t_Item'0) . inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_trans_refn : [%#s15_enumerate2] forall a : Enumerate'0.t_Enumerate i . forall ab : Seq.seq (usize, t_Item'0) . forall b : Enumerate'0.t_Enumerate i . forall bc : Seq.seq (usize, t_Item'0) . forall c : Enumerate'0.t_Enumerate i . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
module M_15_enumerate__qy123zimplqy35z1qy125z
  type i
end
