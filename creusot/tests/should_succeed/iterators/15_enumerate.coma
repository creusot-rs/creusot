module M_15_enumerate__qyi17057287782225696128__produces_refl [#"15_enumerate.rs" 45 4 45 26] (* <Enumerate<I> as common::Iterator> *)
  let%span s15_enumerate0 = "15_enumerate.rs" 43 15 43 24
  let%span s15_enumerate1 = "15_enumerate.rs" 44 14 44 45
  let%span s15_enumerate2 = "15_enumerate.rs" 41 4 41 10
  let%span s15_enumerate3 = "15_enumerate.rs" 33 12 37 116
  let%span scommon4 = "common.rs" 14 15 14 24
  let%span scommon5 = "common.rs" 15 14 15 45
  let%span scommon6 = "common.rs" 19 15 19 21
  let%span scommon7 = "common.rs" 20 15 20 21
  let%span scommon8 = "common.rs" 21 15 21 21
  let%span scommon9 = "common.rs" 22 15 22 32
  let%span scommon10 = "common.rs" 23 15 23 32
  let%span scommon11 = "common.rs" 24 14 24 42
  let%span s15_enumerate12 = "15_enumerate.rs" 81 12 86 43
  let%span sseq13 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sinvariant14 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed15 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_I'0
  
  use prelude.prelude.UIntSize
  
  type t_Enumerate'0  =
    { t_Enumerate__iter'0: t_I'0; t_Enumerate__count'0: usize }
  
  predicate inv'2 (_1 : t_I'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon6] inv'2 a)
   -> ([%#scommon7] inv'2 b)
   -> ([%#scommon8] inv'2 c)
   -> ([%#scommon9] produces'1 a ab b)
   -> ([%#scommon10] produces'1 b bc c)  -> ([%#scommon11] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . ([%#scommon4] inv'2 self)
   -> ([%#scommon5] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'5 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed15] inv'5 self
  
  predicate inv'4 (_1 : t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Item'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#sseq13] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed t_I'0) =
    [%#sinvariant14] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_I'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate invariant'0 [#"15_enumerate.rs" 79 4 79 30] (self : t_Enumerate'0) =
    [%#s15_enumerate12] (forall s : Seq.seq t_Item'0, i : t_I'0 [produces'1 self.t_Enumerate__iter'0 s i] . inv'1 s
    /\ inv'2 i /\ produces'1 self.t_Enumerate__iter'0 s i
     -> UIntSize.to_int self.t_Enumerate__count'0 + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed t_I'0 . inv'3 i /\ completed'0 i
     -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'0 (_1 : t_Enumerate'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Enumerate'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Enumerate__iter'0 = iter ; t_Enumerate__count'0 = count} -> inv'2 iter
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"15_enumerate.rs" 31 4 31 64] (self : t_Enumerate'0) (visited : Seq.seq (usize, t_Item'0)) (o : t_Enumerate'0)
    
   =
    [%#s15_enumerate3] Seq.length visited
    = UIntSize.to_int o.t_Enumerate__count'0 - UIntSize.to_int self.t_Enumerate__count'0
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ produces'1 self.t_Enumerate__iter'0 s o.t_Enumerate__iter'0
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a) = UIntSize.to_int self.t_Enumerate__count'0 + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  constant self  : t_Enumerate'0
  
  function produces_refl'0 [#"15_enumerate.rs" 45 4 45 26] (self : t_Enumerate'0) : ()
  
  goal vc_produces_refl'0 : ([%#s15_enumerate0] inv'0 self)
   -> ([%#s15_enumerate1] produces'0 self (Seq.empty  : Seq.seq (usize, t_Item'0)) self)
end
module M_15_enumerate__qyi17057287782225696128__produces_trans [#"15_enumerate.rs" 55 4 55 90] (* <Enumerate<I> as common::Iterator> *)
  let%span s15_enumerate0 = "15_enumerate.rs" 49 15 49 21
  let%span s15_enumerate1 = "15_enumerate.rs" 50 15 50 21
  let%span s15_enumerate2 = "15_enumerate.rs" 51 15 51 21
  let%span s15_enumerate3 = "15_enumerate.rs" 52 15 52 32
  let%span s15_enumerate4 = "15_enumerate.rs" 53 15 53 32
  let%span s15_enumerate5 = "15_enumerate.rs" 54 14 54 42
  let%span s15_enumerate6 = "15_enumerate.rs" 47 4 47 10
  let%span s15_enumerate7 = "15_enumerate.rs" 33 12 37 116
  let%span scommon8 = "common.rs" 14 15 14 24
  let%span scommon9 = "common.rs" 15 14 15 45
  let%span scommon10 = "common.rs" 19 15 19 21
  let%span scommon11 = "common.rs" 20 15 20 21
  let%span scommon12 = "common.rs" 21 15 21 21
  let%span scommon13 = "common.rs" 22 15 22 32
  let%span scommon14 = "common.rs" 23 15 23 32
  let%span scommon15 = "common.rs" 24 14 24 42
  let%span s15_enumerate16 = "15_enumerate.rs" 81 12 86 43
  let%span sseq17 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sinvariant18 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed19 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_I'0
  
  use prelude.prelude.UIntSize
  
  type t_Enumerate'0  =
    { t_Enumerate__iter'0: t_I'0; t_Enumerate__count'0: usize }
  
  predicate inv'2 (_1 : t_I'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon10] inv'2 a)
   -> ([%#scommon11] inv'2 b)
   -> ([%#scommon12] inv'2 c)
   -> ([%#scommon13] produces'1 a ab b)
   -> ([%#scommon14] produces'1 b bc c)  -> ([%#scommon15] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon8] inv'2 self)
   -> ([%#scommon9] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'5 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed19] inv'5 self
  
  predicate inv'4 (_1 : t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Item'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#sseq17] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed t_I'0) =
    [%#sinvariant18] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_I'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate invariant'0 [#"15_enumerate.rs" 79 4 79 30] (self : t_Enumerate'0) =
    [%#s15_enumerate16] (forall s : Seq.seq t_Item'0, i : t_I'0 [produces'1 self.t_Enumerate__iter'0 s i] . inv'1 s
    /\ inv'2 i /\ produces'1 self.t_Enumerate__iter'0 s i
     -> UIntSize.to_int self.t_Enumerate__count'0 + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed t_I'0 . inv'3 i /\ completed'0 i
     -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'0 (_1 : t_Enumerate'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Enumerate'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Enumerate__iter'0 = iter ; t_Enumerate__count'0 = count} -> inv'2 iter
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"15_enumerate.rs" 31 4 31 64] (self : t_Enumerate'0) (visited : Seq.seq (usize, t_Item'0)) (o : t_Enumerate'0)
    
   =
    [%#s15_enumerate7] Seq.length visited
    = UIntSize.to_int o.t_Enumerate__count'0 - UIntSize.to_int self.t_Enumerate__count'0
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ produces'1 self.t_Enumerate__iter'0 s o.t_Enumerate__iter'0
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a) = UIntSize.to_int self.t_Enumerate__count'0 + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  use seq.Seq
  
  constant a  : t_Enumerate'0
  
  constant ab  : Seq.seq (usize, t_Item'0)
  
  constant b  : t_Enumerate'0
  
  constant bc  : Seq.seq (usize, t_Item'0)
  
  constant c  : t_Enumerate'0
  
  function produces_trans'0 [#"15_enumerate.rs" 55 4 55 90] (a : t_Enumerate'0) (ab : Seq.seq (usize, t_Item'0)) (b : t_Enumerate'0) (bc : Seq.seq (usize, t_Item'0)) (c : t_Enumerate'0) : ()
    
  
  goal vc_produces_trans'0 : ([%#s15_enumerate4] produces'0 b bc c)
   -> ([%#s15_enumerate3] produces'0 a ab b)
   -> ([%#s15_enumerate2] inv'0 c)
   -> ([%#s15_enumerate1] inv'0 b)
   -> ([%#s15_enumerate0] inv'0 a)  -> ([%#s15_enumerate5] produces'0 a (Seq.(++) ab bc) c)
end
module M_15_enumerate__qyi17057287782225696128__next [#"15_enumerate.rs" 61 4 61 44] (* <Enumerate<I> as common::Iterator> *)
  let%span s15_enumerate0 = "15_enumerate.rs" 66 30 66 31
  let%span s15_enumerate1 = "15_enumerate.rs" 61 17 61 21
  let%span s15_enumerate2 = "15_enumerate.rs" 61 26 61 44
  let%span s15_enumerate3 = "15_enumerate.rs" 57 14 60 5
  let%span scommon4 = "common.rs" 31 17 31 21
  let%span scommon5 = "common.rs" 31 26 31 44
  let%span scommon6 = "common.rs" 27 14 30 5
  let%span s15_enumerate7 = "15_enumerate.rs" 26 8 26 74
  let%span s15_enumerate8 = "15_enumerate.rs" 33 12 37 116
  let%span scommon9 = "common.rs" 14 15 14 24
  let%span scommon10 = "common.rs" 15 14 15 45
  let%span scommon11 = "common.rs" 19 15 19 21
  let%span scommon12 = "common.rs" 20 15 20 21
  let%span scommon13 = "common.rs" 21 15 21 21
  let%span scommon14 = "common.rs" 22 15 22 32
  let%span scommon15 = "common.rs" 23 15 23 32
  let%span scommon16 = "common.rs" 24 14 24 42
  let%span sresolve17 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant18 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq19 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span s15_enumerate20 = "15_enumerate.rs" 81 12 86 43
  let%span sboxed21 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  predicate inv'0 (_1 : t_I'0)
  
  use prelude.prelude.UIntSize
  
  type t_Enumerate'0  =
    { t_Enumerate__iter'0: t_I'0; t_Enumerate__count'0: usize }
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon11] inv'0 a)
   -> ([%#scommon12] inv'0 b)
   -> ([%#scommon13] inv'0 c)
   -> ([%#scommon14] produces'1 a ab b)
   -> ([%#scommon15] produces'1 b bc c)  -> ([%#scommon16] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon9] inv'0 self)
   -> ([%#scommon10] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate invariant'1 (self : borrowed t_I'0) =
    [%#sinvariant18] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_I'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_Item'0
  
  predicate inv'7 (_1 : t_Item'0)
  
  predicate inv'4 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'4 x] . inv'4 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'7 a_0
    end
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  use seq.Seq
  
  let rec next'1 (self:borrowed t_I'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] [%#scommon4] inv'3 self}
    any
    [ return' (result:t_Option'0)-> {[%#scommon5] inv'4 result}
      {[%#scommon6] match result with
        | C_None'0 -> completed'1 self
        | C_Some'0 v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_Item'0))= any
    [ good (field_0:t_Item'0)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_Item'0 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'4 (self : t_Item'0) =
    [%#sboxed21] inv'7 self
  
  predicate inv'9 (_1 : t_Item'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Item'0 [inv'9 x] . inv'9 x = invariant'4 x
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq19] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  predicate invariant'3 [#"15_enumerate.rs" 79 4 79 30] (self : t_Enumerate'0) =
    [%#s15_enumerate20] (forall s : Seq.seq t_Item'0, i : t_I'0 [produces'1 self.t_Enumerate__iter'0 s i] . inv'5 s
    /\ inv'0 i /\ produces'1 self.t_Enumerate__iter'0 s i
     -> UIntSize.to_int self.t_Enumerate__count'0 + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed t_I'0 . inv'3 i /\ completed'1 i
     -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'8 (_1 : t_Enumerate'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Enumerate'0 [inv'8 x] . inv'8 x
  = (invariant'3 x
  /\ match x with
    | {t_Enumerate__iter'0 = iter ; t_Enumerate__count'0 = count} -> inv'0 iter
    end)
  
  predicate invariant'0 (self : borrowed (t_Enumerate'0)) =
    [%#sinvariant18] inv'8 self.current /\ inv'8 self.final
  
  predicate inv'1 (_1 : borrowed (t_Enumerate'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Enumerate'0) [inv'1 x] . inv'1 x = invariant'0 x
  
  predicate resolve'1 (self : borrowed (t_Enumerate'0)) =
    [%#sresolve17] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Enumerate'0)) =
    resolve'1 _1
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 (usize, t_Item'0)
  
  use prelude.prelude.Intrinsic
  
  predicate inv'6 (_1 : (usize, t_Item'0))
  
  axiom inv_axiom'5 [@rewrite] : forall x : (usize, t_Item'0) [inv'6 x] . inv'6 x = (let (x0, x1) = x in inv'7 x1)
  
  predicate inv'2 (_1 : t_Option'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'1 [inv'2 x] . inv'2 x
  = match x with
    | C_None'1 -> true
    | C_Some'1 a_0 -> inv'6 a_0
    end
  
  predicate resolve'2 (self : borrowed usize) =
    [%#sresolve17] self.final = self.current
  
  predicate completed'0 [#"15_enumerate.rs" 25 4 25 35] (self : borrowed (t_Enumerate'0)) =
    [%#s15_enumerate7] completed'1 (Borrow.borrow_logic (self.current).t_Enumerate__iter'0 (self.final).t_Enumerate__iter'0 (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ resolve'2 (Borrow.borrow_logic (self.current).t_Enumerate__count'0 (self.final).t_Enumerate__count'0 (Borrow.inherit_id (Borrow.get_id self) 2))
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"15_enumerate.rs" 31 4 31 64] (self : t_Enumerate'0) (visited : Seq.seq (usize, t_Item'0)) (o : t_Enumerate'0)
    
   =
    [%#s15_enumerate8] Seq.length visited
    = UIntSize.to_int o.t_Enumerate__count'0 - UIntSize.to_int self.t_Enumerate__count'0
    /\ (exists s : Seq.seq t_Item'0 . inv'5 s
    /\ produces'1 self.t_Enumerate__iter'0 s o.t_Enumerate__iter'0
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a) = UIntSize.to_int self.t_Enumerate__count'0 + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  meta "compute_max_steps" 1000000
  
  let rec next'0 (self:borrowed (t_Enumerate'0)) (return'  (ret:t_Option'1))= {[@expl:next 'self' type invariant] [%#s15_enumerate1] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 (self.current).t_Enumerate__iter'0}
        Borrow.borrow_final <t_I'0> {(self.current).t_Enumerate__iter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
          (fun (_ret':borrowed t_I'0) ->
             [ &_4 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { self.current with t_Enumerate__iter'0 = _ret'.final } } ] 
            s1)
      | s1 = next'1 {_4} (fun (_ret':t_Option'0) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = any [ br0 -> {_3 = C_None'0 } (! bb3) | br1 (x0:t_Item'0)-> {_3 = C_Some'0 x0} (! bb4) ] 
    | bb4 = s0
      [ s0 = v_Some'0 {_3} (fun (r0'0:t_Item'0) ->  [ &x <- r0'0 ] s1)
      | s1 =  [ &n <- (self.current).t_Enumerate__count'0 ] s2
      | s2 = UIntSize.add {(self.current).t_Enumerate__count'0} {[%#s15_enumerate0] (1 : usize)}
          (fun (_ret':usize) ->
             [ &self <- { self with current = { self.current with t_Enumerate__count'0 = _ret' } } ] 
            s3)
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 =  [ &_8 <- (n, x) ] s6
      | s6 = bb6 ]
      
    | bb6 = s0 [ s0 =  [ &_0 <- C_Some'1 _8 ] s1 | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &_0 <- C_None'1 ] s1 | s1 = bb9 ] 
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : t_Option'1 = any_l ()
    | & self : borrowed (t_Enumerate'0) = self
    | & _3 : t_Option'0 = any_l ()
    | & _4 : borrowed t_I'0 = any_l ()
    | & x : t_Item'0 = any_l ()
    | & n : usize = any_l ()
    | & _8 : (usize, t_Item'0) = any_l () ]
    
    [ return' (result:t_Option'1)-> {[@expl:next result type invariant] [%#s15_enumerate2] inv'2 result}
      {[@expl:next ensures] [%#s15_enumerate3] match result with
        | C_None'1 -> completed'0 self
        | C_Some'1 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_15_enumerate__enumerate [#"15_enumerate.rs" 96 0 96 54]
  let%span s15_enumerate0 = "15_enumerate.rs" 97 29 97 30
  let%span s15_enumerate1 = "15_enumerate.rs" 96 30 96 34
  let%span s15_enumerate2 = "15_enumerate.rs" 92 11 92 83
  let%span s15_enumerate3 = "15_enumerate.rs" 93 11 94 38
  let%span s15_enumerate4 = "15_enumerate.rs" 96 42 96 54
  let%span s15_enumerate5 = "15_enumerate.rs" 95 10 95 51
  let%span scommon6 = "common.rs" 14 15 14 24
  let%span scommon7 = "common.rs" 15 14 15 45
  let%span scommon8 = "common.rs" 19 15 19 21
  let%span scommon9 = "common.rs" 20 15 20 21
  let%span scommon10 = "common.rs" 21 15 21 21
  let%span scommon11 = "common.rs" 22 15 22 32
  let%span scommon12 = "common.rs" 23 15 23 32
  let%span scommon13 = "common.rs" 24 14 24 42
  let%span sinvariant14 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq15 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span s15_enumerate16 = "15_enumerate.rs" 81 12 86 43
  let%span sboxed17 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.UIntSize
  
  type t_I'0
  
  type t_Enumerate'0  =
    { t_Enumerate__iter'0: t_I'0; t_Enumerate__count'0: usize }
  
  use prelude.prelude.Intrinsic
  
  predicate inv'0 (_1 : t_I'0)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed t_I'0) =
    [%#sinvariant14] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed t_I'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon8] inv'0 a)
   -> ([%#scommon9] inv'0 b)
   -> ([%#scommon10] inv'0 c)
   -> ([%#scommon11] produces'0 a ab b)
   -> ([%#scommon12] produces'0 b bc c)  -> ([%#scommon13] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon6] inv'0 self)
   -> ([%#scommon7] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'5 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed17] inv'5 self
  
  predicate inv'4 (_1 : t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Item'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#sseq15] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  predicate invariant'2 [#"15_enumerate.rs" 79 4 79 30] (self : t_Enumerate'0) =
    [%#s15_enumerate16] (forall s : Seq.seq t_Item'0, i : t_I'0 [produces'0 self.t_Enumerate__iter'0 s i] . inv'2 s
    /\ inv'0 i /\ produces'0 self.t_Enumerate__iter'0 s i
     -> UIntSize.to_int self.t_Enumerate__count'0 + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed t_I'0 . inv'1 i /\ completed'0 i
     -> produces'0 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'3 (_1 : t_Enumerate'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Enumerate'0 [inv'3 x] . inv'3 x
  = (invariant'2 x
  /\ match x with
    | {t_Enumerate__iter'0 = iter ; t_Enumerate__count'0 = count} -> inv'0 iter
    end)
  
  meta "compute_max_steps" 1000000
  
  let rec enumerate'0 (iter:t_I'0) (return'  (ret:t_Enumerate'0))= {[@expl:enumerate 'iter' type invariant] [%#s15_enumerate1] inv'0 iter}
    {[@expl:enumerate requires #0] [%#s15_enumerate2] forall i : borrowed t_I'0 . inv'1 i /\ completed'0 i
     -> produces'0 i.current (Seq.empty  : Seq.seq t_Item'0) i.final}
    {[@expl:enumerate requires #1] [%#s15_enumerate3] forall s : Seq.seq t_Item'0, i : t_I'0 . inv'2 s
    /\ inv'0 i /\ produces'0 iter s i  -> Seq.length s < UIntSize.to_int v_MAX'0}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0
      [ s0 =  [ &_0 <- { t_Enumerate__iter'0 = iter; t_Enumerate__count'0 = ([%#s15_enumerate0] (0 : usize)) } ] s1
      | s1 = bb3 ]
      
    | bb3 = bb4
    | bb4 = return' {_0} ]
    ) [ & _0 : t_Enumerate'0 = any_l () | & iter : t_I'0 = iter ] 
    [ return' (result:t_Enumerate'0)-> {[@expl:enumerate result type invariant] [%#s15_enumerate4] inv'3 result}
      {[@expl:enumerate ensures] [%#s15_enumerate5] result.t_Enumerate__iter'0 = iter
      /\ UIntSize.to_int result.t_Enumerate__count'0 = 0}
      (! return' {result}) ]
    
end
module M_15_enumerate__qyi17057287782225696128__next__refines [#"15_enumerate.rs" 61 4 61 44] (* <Enumerate<I> as common::Iterator> *)
  let%span s15_enumerate0 = "15_enumerate.rs" 61 4 61 44
  let%span s15_enumerate1 = "15_enumerate.rs" 26 8 26 74
  let%span s15_enumerate2 = "15_enumerate.rs" 33 12 37 116
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant4 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span scommon5 = "common.rs" 14 15 14 24
  let%span scommon6 = "common.rs" 15 14 15 45
  let%span scommon7 = "common.rs" 19 15 19 21
  let%span scommon8 = "common.rs" 20 15 20 21
  let%span scommon9 = "common.rs" 21 15 21 21
  let%span scommon10 = "common.rs" 22 15 22 32
  let%span scommon11 = "common.rs" 23 15 23 32
  let%span scommon12 = "common.rs" 24 14 24 42
  let%span sseq13 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span s15_enumerate14 = "15_enumerate.rs" 81 12 86 43
  let%span sboxed15 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  use prelude.prelude.UIntSize
  
  type t_Enumerate'0  =
    { t_Enumerate__iter'0: t_I'0; t_Enumerate__count'0: usize }
  
  predicate inv'5 (_1 : t_I'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon7] inv'5 a)
   -> ([%#scommon8] inv'5 b)
   -> ([%#scommon9] inv'5 c)
   -> ([%#scommon10] produces'1 a ab b)
   -> ([%#scommon11] produces'1 b bc c)  -> ([%#scommon12] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon5] inv'5 self)
   -> ([%#scommon6] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'7 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed15] inv'7 self
  
  predicate inv'6 (_1 : t_Item'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Item'0 [inv'6 x] . inv'6 x = invariant'3 x
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#sseq13] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  predicate invariant'4 (self : borrowed t_I'0) =
    [%#sinvariant4] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'8 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed t_I'0 [inv'8 x] . inv'8 x = invariant'4 x
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate invariant'2 [#"15_enumerate.rs" 79 4 79 30] (self : t_Enumerate'0) =
    [%#s15_enumerate14] (forall s : Seq.seq t_Item'0, i : t_I'0 [produces'1 self.t_Enumerate__iter'0 s i] . inv'2 s
    /\ inv'5 i /\ produces'1 self.t_Enumerate__iter'0 s i
     -> UIntSize.to_int self.t_Enumerate__count'0 + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed t_I'0 . inv'8 i /\ completed'1 i
     -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'4 (_1 : t_Enumerate'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Enumerate'0 [inv'4 x] . inv'4 x
  = (invariant'2 x
  /\ match x with
    | {t_Enumerate__iter'0 = iter ; t_Enumerate__count'0 = count} -> inv'5 iter
    end)
  
  predicate invariant'0 (self : borrowed (t_Enumerate'0)) =
    [%#sinvariant4] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'0 (_1 : borrowed (t_Enumerate'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Enumerate'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 (usize, t_Item'0)
  
  predicate resolve'0 (self : borrowed usize) =
    [%#sresolve3] self.final = self.current
  
  predicate completed'0 [#"15_enumerate.rs" 25 4 25 35] (self : borrowed (t_Enumerate'0)) =
    [%#s15_enumerate1] completed'1 (Borrow.borrow_logic (self.current).t_Enumerate__iter'0 (self.final).t_Enumerate__iter'0 (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ resolve'0 (Borrow.borrow_logic (self.current).t_Enumerate__count'0 (self.final).t_Enumerate__count'0 (Borrow.inherit_id (Borrow.get_id self) 2))
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"15_enumerate.rs" 31 4 31 64] (self : t_Enumerate'0) (visited : Seq.seq (usize, t_Item'0)) (o : t_Enumerate'0)
    
   =
    [%#s15_enumerate2] Seq.length visited
    = UIntSize.to_int o.t_Enumerate__count'0 - UIntSize.to_int self.t_Enumerate__count'0
    /\ (exists s : Seq.seq t_Item'0 . inv'2 s
    /\ produces'1 self.t_Enumerate__iter'0 s o.t_Enumerate__iter'0
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a) = UIntSize.to_int self.t_Enumerate__count'0 + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  predicate inv'3 (_1 : (usize, t_Item'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : (usize, t_Item'0) [inv'3 x] . inv'3 x = (let (x0, x1) = x in inv'7 x1)
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'3 a_0
    end
  
  goal refines : [%#s15_enumerate0] forall self : borrowed (t_Enumerate'0) . inv'0 self
   -> inv'0 self
  /\ (forall result : t_Option'0 . match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result
   -> match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result)
end
module M_15_enumerate__qyi17057287782225696128__produces_trans__refines [#"15_enumerate.rs" 55 4 55 90] (* <Enumerate<I> as common::Iterator> *)
  let%span s15_enumerate0 = "15_enumerate.rs" 55 4 55 90
  let%span s15_enumerate1 = "15_enumerate.rs" 33 12 37 116
  let%span scommon2 = "common.rs" 14 15 14 24
  let%span scommon3 = "common.rs" 15 14 15 45
  let%span scommon4 = "common.rs" 19 15 19 21
  let%span scommon5 = "common.rs" 20 15 20 21
  let%span scommon6 = "common.rs" 21 15 21 21
  let%span scommon7 = "common.rs" 22 15 22 32
  let%span scommon8 = "common.rs" 23 15 23 32
  let%span scommon9 = "common.rs" 24 14 24 42
  let%span s15_enumerate10 = "15_enumerate.rs" 81 12 86 43
  let%span sseq11 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sinvariant12 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed13 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_I'0
  
  use prelude.prelude.UIntSize
  
  type t_Enumerate'0  =
    { t_Enumerate__iter'0: t_I'0; t_Enumerate__count'0: usize }
  
  predicate inv'2 (_1 : t_I'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon4] inv'2 a)
   -> ([%#scommon5] inv'2 b)
   -> ([%#scommon6] inv'2 c)
   -> ([%#scommon7] produces'1 a ab b)
   -> ([%#scommon8] produces'1 b bc c)  -> ([%#scommon9] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon2] inv'2 self)
   -> ([%#scommon3] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'5 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed13] inv'5 self
  
  predicate inv'4 (_1 : t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Item'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#sseq11] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"15_enumerate.rs" 31 4 31 64] (self : t_Enumerate'0) (visited : Seq.seq (usize, t_Item'0)) (o : t_Enumerate'0)
    
   =
    [%#s15_enumerate1] Seq.length visited
    = UIntSize.to_int o.t_Enumerate__count'0 - UIntSize.to_int self.t_Enumerate__count'0
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ produces'1 self.t_Enumerate__iter'0 s o.t_Enumerate__iter'0
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a) = UIntSize.to_int self.t_Enumerate__count'0 + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed t_I'0) =
    [%#sinvariant12] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_I'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate invariant'0 [#"15_enumerate.rs" 79 4 79 30] (self : t_Enumerate'0) =
    [%#s15_enumerate10] (forall s : Seq.seq t_Item'0, i : t_I'0 [produces'1 self.t_Enumerate__iter'0 s i] . inv'1 s
    /\ inv'2 i /\ produces'1 self.t_Enumerate__iter'0 s i
     -> UIntSize.to_int self.t_Enumerate__count'0 + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed t_I'0 . inv'3 i /\ completed'0 i
     -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'0 (_1 : t_Enumerate'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Enumerate'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Enumerate__iter'0 = iter ; t_Enumerate__count'0 = count} -> inv'2 iter
    end)
  
  use seq.Seq
  
  goal refines : [%#s15_enumerate0] forall a : t_Enumerate'0 . forall ab : Seq.seq (usize, t_Item'0) . forall b : t_Enumerate'0 . forall bc : Seq.seq (usize, t_Item'0) . forall c : t_Enumerate'0 . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
module M_15_enumerate__qyi17057287782225696128__produces_refl__refines [#"15_enumerate.rs" 45 4 45 26] (* <Enumerate<I> as common::Iterator> *)
  let%span s15_enumerate0 = "15_enumerate.rs" 45 4 45 26
  let%span s15_enumerate1 = "15_enumerate.rs" 33 12 37 116
  let%span scommon2 = "common.rs" 14 15 14 24
  let%span scommon3 = "common.rs" 15 14 15 45
  let%span scommon4 = "common.rs" 19 15 19 21
  let%span scommon5 = "common.rs" 20 15 20 21
  let%span scommon6 = "common.rs" 21 15 21 21
  let%span scommon7 = "common.rs" 22 15 22 32
  let%span scommon8 = "common.rs" 23 15 23 32
  let%span scommon9 = "common.rs" 24 14 24 42
  let%span s15_enumerate10 = "15_enumerate.rs" 81 12 86 43
  let%span sseq11 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sinvariant12 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed13 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_I'0
  
  use prelude.prelude.UIntSize
  
  type t_Enumerate'0  =
    { t_Enumerate__iter'0: t_I'0; t_Enumerate__count'0: usize }
  
  predicate inv'2 (_1 : t_I'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon4] inv'2 a)
   -> ([%#scommon5] inv'2 b)
   -> ([%#scommon6] inv'2 c)
   -> ([%#scommon7] produces'1 a ab b)
   -> ([%#scommon8] produces'1 b bc c)  -> ([%#scommon9] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . ([%#scommon2] inv'2 self)
   -> ([%#scommon3] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'5 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed13] inv'5 self
  
  predicate inv'4 (_1 : t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Item'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#sseq11] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed t_I'0) =
    [%#sinvariant12] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_I'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate invariant'0 [#"15_enumerate.rs" 79 4 79 30] (self : t_Enumerate'0) =
    [%#s15_enumerate10] (forall s : Seq.seq t_Item'0, i : t_I'0 [produces'1 self.t_Enumerate__iter'0 s i] . inv'1 s
    /\ inv'2 i /\ produces'1 self.t_Enumerate__iter'0 s i
     -> UIntSize.to_int self.t_Enumerate__count'0 + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed t_I'0 . inv'3 i /\ completed'0 i
     -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'0 (_1 : t_Enumerate'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Enumerate'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Enumerate__iter'0 = iter ; t_Enumerate__count'0 = count} -> inv'2 iter
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"15_enumerate.rs" 31 4 31 64] (self : t_Enumerate'0) (visited : Seq.seq (usize, t_Item'0)) (o : t_Enumerate'0)
    
   =
    [%#s15_enumerate1] Seq.length visited
    = UIntSize.to_int o.t_Enumerate__count'0 - UIntSize.to_int self.t_Enumerate__count'0
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ produces'1 self.t_Enumerate__iter'0 s o.t_Enumerate__iter'0
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a) = UIntSize.to_int self.t_Enumerate__count'0 + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  goal refines : [%#s15_enumerate0] forall self : t_Enumerate'0 . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq (usize, t_Item'0)) self
   -> produces'0 self (Seq.empty  : Seq.seq (usize, t_Item'0)) self)
end
