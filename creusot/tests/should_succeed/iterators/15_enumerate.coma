
module C15Enumerate_Enumerate_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_enumerate 'i =
    | C_Enumerate 'i usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_enumerate < 'i > (input:t_enumerate 'i) (ret  (iter:'i) (count:usize))= any
    [ good (iter:'i) (count:usize)-> {C_Enumerate iter count = input} (! ret {iter} {count})
    | bad (iter:'i) (count:usize)-> {C_Enumerate iter count <> input} {false} any ]
    
  
  function enumerate_iter [@inline:trivial] (self : t_enumerate 'i) : 'i =
    match self with
      | C_Enumerate a _ -> a
      end
  
  function enumerate_count [@inline:trivial] (self : t_enumerate 'i) : usize =
    match self with
      | C_Enumerate _ a -> a
      end
end
module CreusotContracts_Logic_Seq2_Seq_Type
  use seq.Seq
  
  type t_seq 't =
    | C_Seq (Seq.seq 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_seq < 't > (input:t_seq 't) (ret  (field_0:Seq.seq 't))= any
    [ good (field_0:Seq.seq 't)-> {C_Seq field_0 = input} (! ret {field_0})
    | bad (field_0:Seq.seq 't)-> {C_Seq field_0 <> input} {false} any ]
    
  
  function seq_0 [@inline:trivial] (self : t_seq 't) : Seq.seq 't =
    match self with
      | C_Seq a -> a
      end
end
module C15Enumerate_Impl0_ProducesRefl_Impl
  type i
  
  let%span s15_enumerate0 = "../15_enumerate.rs" 40 21 40 25
  
  let%span s15_enumerate1 = "../15_enumerate.rs" 39 14 39 45
  
  let%span span2 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span12 = "../common.rs" 18 15 18 32
  
  let%span span13 = "../common.rs" 19 15 19 32
  
  let%span span14 = "../common.rs" 21 22 21 23
  
  let%span span15 = "../common.rs" 21 31 21 33
  
  let%span span16 = "../common.rs" 21 52 21 53
  
  let%span span17 = "../common.rs" 21 61 21 63
  
  let%span span18 = "../common.rs" 21 82 21 83
  
  let%span span19 = "../common.rs" 20 14 20 42
  
  let%span span20 = "../common.rs" 15 21 15 25
  
  let%span span21 = "../common.rs" 14 14 14 45
  
  let%span span22 = "" 0 0 0 0
  
  let%span span23 = "../15_enumerate.rs" 73 12 74 79
  
  let%span span24 = "../15_enumerate.rs" 29 8 34 9
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed i)
  
  predicate inv'4 (_x : borrowed i)
  
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  
  predicate invariant'3 (self : i)
  
  predicate inv'3 (_x : i)
  
  axiom inv'3 : forall x : i . inv'3 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  type item'0
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate inv'2 (_x : Seq'0.t_seq item'0)
  
  function len'1 (self : Seq'0.t_seq item'0) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq item'0 . ([%#span2] inv'2 self)  -> ([%#span3] len'1 self >= 0)
  
  constant empty'1 : Seq'0.t_seq item'0 = [%#span4] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span6] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span5] len'1 (empty'1 : Seq'0.t_seq item'0) = 0
  
  predicate invariant'2 (self : Seq'0.t_seq item'0)
  
  axiom inv'2 : forall x : Seq'0.t_seq item'0 . inv'2 x = true
  
  use prelude.prelude.UIntSize
  
  predicate invariant'1 (self : Seq'0.t_seq (usize, item'0))
  
  predicate inv'1 (_x : Seq'0.t_seq (usize, item'0))
  
  axiom inv'1 : forall x : Seq'0.t_seq (usize, item'0) . inv'1 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq item'0) (x : int) : item'0
  
  function concat'0 (self : Seq'0.t_seq item'0) (other : Seq'0.t_seq item'0) : Seq'0.t_seq item'0
  
  axiom concat'0_spec : forall self : Seq'0.t_seq item'0, other : Seq'0.t_seq item'0 . ([%#span7] inv'2 self)
   -> ([%#span8] inv'2 other)
   -> ([%#span11] inv'2 (concat'0 self other))
  && ([%#span10] forall i : int . 0 <= i /\ i < len'1 (concat'0 self other)
   -> index_logic'1 (concat'0 self other) i
  = (if i < len'1 self then index_logic'1 self i else index_logic'1 other (i - len'1 self)))
  && ([%#span9] len'1 (concat'0 self other) = len'1 self + len'1 other)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq'0.t_seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq'0.t_seq item'0) (b : i) (bc : Seq'0.t_seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq'0.t_seq item'0, b : i, bc : Seq'0.t_seq item'0, c : i . ([%#span12] produces'1 a ab b)
   -> ([%#span13] produces'1 b bc c)
   -> ([%#span14] inv'3 a)
   -> ([%#span15] inv'2 ab)
   -> ([%#span16] inv'3 b)
   -> ([%#span17] inv'2 bc)  -> ([%#span18] inv'3 c)  -> ([%#span19] produces'1 a (concat'0 ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span20] inv'3 self)
   -> ([%#span21] produces'1 self (empty'1 : Seq'0.t_seq item'0) self)
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq (usize, item'0)) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq (usize, item'0) . ([%#span2] inv'1 self)  -> ([%#span3] len'0 self >= 0)
  
  constant empty'0 : Seq'0.t_seq (usize, item'0) = [%#span4] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span6] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span5] len'0 (empty'0 : Seq'0.t_seq (usize, item'0)) = 0
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  constant max'0 : usize = [%#span22] (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  
  use C15Enumerate_Enumerate_Type as Enumerate'0
  
  predicate invariant'0 [#"../15_enumerate.rs" 71 4 71 30] (self : Enumerate'0.t_enumerate i) =
    [%#span23] (forall i : i . forall s : Seq'0.t_seq item'0 . inv'3 i
     -> inv'2 s
     -> produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s i
     -> UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + len'1 s < UIntSize.to_int max'0)
    /\ (forall i : borrowed i . inv'4 i  -> completed'0 i  -> produces'1 ( * i) (empty'1 : Seq'0.t_seq item'0) ( ^ i))
  
  predicate inv'0 (_x : Enumerate'0.t_enumerate i)
  
  axiom inv'0 : forall x : Enumerate'0.t_enumerate i . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> true
    end)
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq (usize, item'0)) (x : int) : (usize, item'0)
  
  predicate produces'0 [#"../15_enumerate.rs" 28 4 28 64] (self : Enumerate'0.t_enumerate i) (visited : Seq'0.t_seq (usize, item'0)) (o : Enumerate'0.t_enumerate i)
    
   =
    [%#span24] len'0 visited
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count o)
    - UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self)
    /\ (exists s : Seq'0.t_seq item'0 . inv'2 s
    /\ produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s (C15Enumerate_Enumerate_Type.enumerate_iter o)
    /\ len'0 visited = len'1 s
    /\ (forall i : int . 0 <= i /\ i < len'1 s
     -> UIntSize.to_int (let (a, _) = index_logic'0 visited i in a)
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + i
    /\ (let (_, a) = index_logic'0 visited i in a) = index_logic'1 s i))
  
  constant self  : Enumerate'0.t_enumerate i
  
  function produces_refl [#"../15_enumerate.rs" 40 4 40 26] (self : Enumerate'0.t_enumerate i) : ()
  
  goal vc_produces_refl : ([%#s15_enumerate0] inv'0 self)
   -> ([%#s15_enumerate1] produces'0 self (empty'0 : Seq'0.t_seq (usize, item'0)) self)
end
module C15Enumerate_Impl0_ProducesTrans_Impl
  type i
  
  let%span s15_enumerate0 = "../15_enumerate.rs" 44 15 44 32
  
  let%span s15_enumerate1 = "../15_enumerate.rs" 45 15 45 32
  
  let%span s15_enumerate2 = "../15_enumerate.rs" 47 22 47 23
  
  let%span s15_enumerate3 = "../15_enumerate.rs" 47 31 47 33
  
  let%span s15_enumerate4 = "../15_enumerate.rs" 47 52 47 53
  
  let%span s15_enumerate5 = "../15_enumerate.rs" 47 61 47 63
  
  let%span s15_enumerate6 = "../15_enumerate.rs" 47 82 47 83
  
  let%span s15_enumerate7 = "../15_enumerate.rs" 46 14 46 42
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span18 = "../common.rs" 18 15 18 32
  
  let%span span19 = "../common.rs" 19 15 19 32
  
  let%span span20 = "../common.rs" 21 22 21 23
  
  let%span span21 = "../common.rs" 21 31 21 33
  
  let%span span22 = "../common.rs" 21 52 21 53
  
  let%span span23 = "../common.rs" 21 61 21 63
  
  let%span span24 = "../common.rs" 21 82 21 83
  
  let%span span25 = "../common.rs" 20 14 20 42
  
  let%span span26 = "../common.rs" 15 21 15 25
  
  let%span span27 = "../common.rs" 14 14 14 45
  
  let%span span28 = "" 0 0 0 0
  
  let%span span29 = "../15_enumerate.rs" 73 12 74 79
  
  let%span span30 = "../15_enumerate.rs" 29 8 34 9
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed i)
  
  predicate inv'4 (_x : borrowed i)
  
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  
  predicate invariant'3 (self : i)
  
  predicate inv'3 (_x : i)
  
  axiom inv'3 : forall x : i . inv'3 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  type item'0
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate inv'2 (_x : Seq'0.t_seq item'0)
  
  function len'1 (self : Seq'0.t_seq item'0) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq item'0 . ([%#span8] inv'2 self)  -> ([%#span9] len'1 self >= 0)
  
  constant empty'1 : Seq'0.t_seq item'0 = [%#span10] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span12] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span11] len'1 (empty'1 : Seq'0.t_seq item'0) = 0
  
  predicate invariant'2 (self : Seq'0.t_seq item'0)
  
  axiom inv'2 : forall x : Seq'0.t_seq item'0 . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq item'0) (x : int) : item'0
  
  function concat'1 (self : Seq'0.t_seq item'0) (other : Seq'0.t_seq item'0) : Seq'0.t_seq item'0
  
  axiom concat'1_spec : forall self : Seq'0.t_seq item'0, other : Seq'0.t_seq item'0 . ([%#span13] inv'2 self)
   -> ([%#span14] inv'2 other)
   -> ([%#span17] inv'2 (concat'1 self other))
  && ([%#span16] forall i : int . 0 <= i /\ i < len'1 (concat'1 self other)
   -> index_logic'1 (concat'1 self other) i
  = (if i < len'1 self then index_logic'1 self i else index_logic'1 other (i - len'1 self)))
  && ([%#span15] len'1 (concat'1 self other) = len'1 self + len'1 other)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq'0.t_seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq'0.t_seq item'0) (b : i) (bc : Seq'0.t_seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq'0.t_seq item'0, b : i, bc : Seq'0.t_seq item'0, c : i . ([%#span18] produces'1 a ab b)
   -> ([%#span19] produces'1 b bc c)
   -> ([%#span20] inv'3 a)
   -> ([%#span21] inv'2 ab)
   -> ([%#span22] inv'3 b)
   -> ([%#span23] inv'2 bc)  -> ([%#span24] inv'3 c)  -> ([%#span25] produces'1 a (concat'1 ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span26] inv'3 self)
   -> ([%#span27] produces'1 self (empty'1 : Seq'0.t_seq item'0) self)
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  predicate inv'1 (_x : Seq'0.t_seq (usize, item'0))
  
  function len'0 (self : Seq'0.t_seq (usize, item'0)) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq (usize, item'0) . ([%#span8] inv'1 self)  -> ([%#span9] len'0 self >= 0)
  
  constant empty'0 : Seq'0.t_seq (usize, item'0) = [%#span10] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span12] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span11] len'0 (empty'0 : Seq'0.t_seq (usize, item'0)) = 0
  
  predicate invariant'1 (self : Seq'0.t_seq (usize, item'0))
  
  axiom inv'1 : forall x : Seq'0.t_seq (usize, item'0) . inv'1 x = true
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  constant max'0 : usize = [%#span28] (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  
  use C15Enumerate_Enumerate_Type as Enumerate'0
  
  predicate invariant'0 [#"../15_enumerate.rs" 71 4 71 30] (self : Enumerate'0.t_enumerate i) =
    [%#span29] (forall i : i . forall s : Seq'0.t_seq item'0 . inv'3 i
     -> inv'2 s
     -> produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s i
     -> UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + len'1 s < UIntSize.to_int max'0)
    /\ (forall i : borrowed i . inv'4 i  -> completed'0 i  -> produces'1 ( * i) (empty'1 : Seq'0.t_seq item'0) ( ^ i))
  
  predicate inv'0 (_x : Enumerate'0.t_enumerate i)
  
  axiom inv'0 : forall x : Enumerate'0.t_enumerate i . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq (usize, item'0)) (x : int) : (usize, item'0)
  
  function concat'0 (self : Seq'0.t_seq (usize, item'0)) (other : Seq'0.t_seq (usize, item'0)) : Seq'0.t_seq (usize, item'0)
    
  
  axiom concat'0_spec : forall self : Seq'0.t_seq (usize, item'0), other : Seq'0.t_seq (usize, item'0) . ([%#span13] inv'1 self)
   -> ([%#span14] inv'1 other)
   -> ([%#span17] inv'1 (concat'0 self other))
  && ([%#span16] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span15] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  predicate produces'0 [#"../15_enumerate.rs" 28 4 28 64] (self : Enumerate'0.t_enumerate i) (visited : Seq'0.t_seq (usize, item'0)) (o : Enumerate'0.t_enumerate i)
    
   =
    [%#span30] len'0 visited
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count o)
    - UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self)
    /\ (exists s : Seq'0.t_seq item'0 . inv'2 s
    /\ produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s (C15Enumerate_Enumerate_Type.enumerate_iter o)
    /\ len'0 visited = len'1 s
    /\ (forall i : int . 0 <= i /\ i < len'1 s
     -> UIntSize.to_int (let (a, _) = index_logic'0 visited i in a)
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + i
    /\ (let (_, a) = index_logic'0 visited i in a) = index_logic'1 s i))
  
  constant a  : Enumerate'0.t_enumerate i
  
  constant ab  : Seq'0.t_seq (usize, item'0)
  
  constant b  : Enumerate'0.t_enumerate i
  
  constant bc  : Seq'0.t_seq (usize, item'0)
  
  constant c  : Enumerate'0.t_enumerate i
  
  function produces_trans [#"../15_enumerate.rs" 47 4 47 90] (a : Enumerate'0.t_enumerate i) (ab : Seq'0.t_seq (usize, item'0)) (b : Enumerate'0.t_enumerate i) (bc : Seq'0.t_seq (usize, item'0)) (c : Enumerate'0.t_enumerate i) : ()
    
  
  goal vc_produces_trans : ([%#s15_enumerate6] inv'0 c)
   -> ([%#s15_enumerate5] inv'1 bc)
   -> ([%#s15_enumerate4] inv'0 b)
   -> ([%#s15_enumerate3] inv'1 ab)
   -> ([%#s15_enumerate2] inv'0 a)
   -> ([%#s15_enumerate1] produces'0 b bc c)
   -> ([%#s15_enumerate0] produces'0 a ab b)  -> ([%#s15_enumerate7] produces'0 a (concat'0 ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C15Enumerate_Impl0_Next
  type i
  
  let%span s15_enumerate0 = "../15_enumerate.rs" 54 14 54 30
  
  let%span s15_enumerate1 = "../15_enumerate.rs" 58 30 58 31
  
  let%span s15_enumerate2 = "../15_enumerate.rs" 53 17 53 21
  
  let%span s15_enumerate3 = "../15_enumerate.rs" 49 14 52 5
  
  let%span s15_enumerate4 = "../15_enumerate.rs" 53 26 53 44
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span9 = "../15_enumerate.rs" 73 12 74 79
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span17 = "../common.rs" 18 15 18 32
  
  let%span span18 = "../common.rs" 19 15 19 32
  
  let%span span19 = "../common.rs" 21 22 21 23
  
  let%span span20 = "../common.rs" 21 31 21 33
  
  let%span span21 = "../common.rs" 21 52 21 53
  
  let%span span22 = "../common.rs" 21 61 21 63
  
  let%span span23 = "../common.rs" 21 82 21 83
  
  let%span span24 = "../common.rs" 20 14 20 42
  
  let%span span25 = "../common.rs" 15 21 15 25
  
  let%span span26 = "../common.rs" 14 14 14 45
  
  let%span span27 = "../15_enumerate.rs" 29 8 34 9
  
  let%span span28 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span29 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span30 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span31 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span32 = "../15_enumerate.rs" 23 8 23 43
  
  let%span span33 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span34 = "../common.rs" 27 17 27 21
  
  let%span span35 = "../common.rs" 23 14 26 5
  
  let%span span36 = "../common.rs" 27 26 27 44
  
  predicate inv'0 (_x : i)
  
  use prelude.prelude.UIntSize
  
  type item'0
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate inv'7 (_x : Seq'0.t_seq item'0)
  
  constant empty'0 : Seq'0.t_seq item'0 = [%#span5] ()
  
  use prelude.prelude.Borrow
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate inv'4 (_x : borrowed i)
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span6] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'1 (self : Seq'0.t_seq item'0) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq item'0 . ([%#span7] inv'7 self)  -> ([%#span8] len'1 self >= 0)
  
  use prelude.prelude.UIntSize
  
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq'0.t_seq item'0) (o : i)
  
  use C15Enumerate_Enumerate_Type as Enumerate'0
  
  predicate invariant'9 [#"../15_enumerate.rs" 71 4 71 30] (self : Enumerate'0.t_enumerate i) =
    [%#span9] (forall i : i . forall s : Seq'0.t_seq item'0 . inv'0 i
     -> inv'7 s
     -> produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s i
     -> UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + len'1 s < UIntSize.to_int max'0)
    /\ (forall i : borrowed i . inv'4 i  -> completed'1 i  -> produces'1 ( * i) (empty'0 : Seq'0.t_seq item'0) ( ^ i))
  
  predicate inv'9 (_x : Enumerate'0.t_enumerate i)
  
  axiom inv'9 : forall x : Enumerate'0.t_enumerate i . inv'9 x
  = (invariant'9 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> true
    end)
  
  predicate invariant'8 (self : item'0)
  
  predicate inv'8 (_x : item'0)
  
  axiom inv'8 : forall x : item'0 . inv'8 x = true
  
  predicate invariant'7 (self : Seq'0.t_seq item'0)
  
  axiom inv'7 : forall x : Seq'0.t_seq item'0 . inv'7 x = true
  
  predicate invariant'6 (self : Seq'0.t_seq (usize, item'0))
  
  predicate inv'6 (_x : Seq'0.t_seq (usize, item'0))
  
  axiom inv'6 : forall x : Seq'0.t_seq (usize, item'0) . inv'6 x = true
  
  predicate invariant'5 (self : (usize, item'0))
  
  predicate inv'5 (_x : (usize, item'0))
  
  axiom inv'5 : forall x : (usize, item'0) . inv'5 x = true
  
  function empty_len'1 (_1 : ()) : () =
    [%#span11] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span10] len'1 (empty'0 : Seq'0.t_seq item'0) = 0
  
  predicate invariant'4 (self : borrowed i)
  
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option (usize, item'0))
  
  predicate inv'3 (_x : Option'0.t_option (usize, item'0))
  
  axiom inv'3 : forall x : Option'0.t_option (usize, item'0) . inv'3 x = true
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq (usize, item'0)) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq (usize, item'0) . ([%#span7] inv'6 self)  -> ([%#span8] len'0 self >= 0)
  
  constant empty'1 : Seq'0.t_seq (usize, item'0) = [%#span5] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span11] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span10] len'0 (empty'1 : Seq'0.t_seq (usize, item'0)) = 0
  
  predicate invariant'2 (self : Option'0.t_option item'0)
  
  predicate inv'2 (_x : Option'0.t_option item'0)
  
  axiom inv'2 : forall x : Option'0.t_option item'0 . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (Enumerate'0.t_enumerate i))
  
  predicate inv'1 (_x : borrowed (Enumerate'0.t_enumerate i))
  
  axiom inv'1 : forall x : borrowed (Enumerate'0.t_enumerate i) . inv'1 x = (inv'9 ( * x) /\ inv'9 ( ^ x))
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq item'0) (x : int) : item'0
  
  function concat'0 (self : Seq'0.t_seq item'0) (other : Seq'0.t_seq item'0) : Seq'0.t_seq item'0
  
  axiom concat'0_spec : forall self : Seq'0.t_seq item'0, other : Seq'0.t_seq item'0 . ([%#span12] inv'7 self)
   -> ([%#span13] inv'7 other)
   -> ([%#span16] inv'7 (concat'0 self other))
  && ([%#span15] forall i : int . 0 <= i /\ i < len'1 (concat'0 self other)
   -> index_logic'1 (concat'0 self other) i
  = (if i < len'1 self then index_logic'1 self i else index_logic'1 other (i - len'1 self)))
  && ([%#span14] len'1 (concat'0 self other) = len'1 self + len'1 other)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq'0.t_seq item'0) (b : i) (bc : Seq'0.t_seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq'0.t_seq item'0, b : i, bc : Seq'0.t_seq item'0, c : i . ([%#span17] produces'1 a ab b)
   -> ([%#span18] produces'1 b bc c)
   -> ([%#span19] inv'0 a)
   -> ([%#span20] inv'7 ab)
   -> ([%#span21] inv'0 b)
   -> ([%#span22] inv'7 bc)  -> ([%#span23] inv'0 c)  -> ([%#span24] produces'1 a (concat'0 ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span25] inv'0 self)
   -> ([%#span26] produces'1 self (empty'0 : Seq'0.t_seq item'0) self)
  
  predicate invariant'0 (self : i)
  
  axiom inv'0 : forall x : i . inv'0 x = true
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq (usize, item'0)) (x : int) : (usize, item'0)
  
  predicate produces'0 [#"../15_enumerate.rs" 28 4 28 64] (self : Enumerate'0.t_enumerate i) (visited : Seq'0.t_seq (usize, item'0)) (o : Enumerate'0.t_enumerate i)
    
   =
    [%#span27] len'0 visited
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count o)
    - UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self)
    /\ (exists s : Seq'0.t_seq item'0 . inv'7 s
    /\ produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s (C15Enumerate_Enumerate_Type.enumerate_iter o)
    /\ len'0 visited = len'1 s
    /\ (forall i : int . 0 <= i /\ i < len'1 s
     -> UIntSize.to_int (let (a, _) = index_logic'0 visited i in a)
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + i
    /\ (let (_, a) = index_logic'0 visited i in a) = index_logic'1 s i))
  
  use seq.Seq
  
  function singleton'0 (v : (usize, item'0)) : Seq'0.t_seq (usize, item'0)
  
  axiom singleton'0_spec : forall v : (usize, item'0) . ([%#span28] inv'5 v)
   -> ([%#span31] inv'6 (singleton'0 v))
  && ([%#span30] index_logic'0 (singleton'0 v) 0 = v) && ([%#span29] len'0 (singleton'0 v) = 1)
  
  predicate completed'0 [#"../15_enumerate.rs" 22 4 22 35] (self : borrowed (Enumerate'0.t_enumerate i)) =
    [%#span32] completed'1 (Borrow.borrow_logic (C15Enumerate_Enumerate_Type.enumerate_iter ( * self)) (C15Enumerate_Enumerate_Type.enumerate_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : Option'0.t_option item'0)
  
  predicate resolve'0 (self : borrowed (Enumerate'0.t_enumerate i)) =
    [%#span33]  ^ self =  * self
  
  use seq.Seq
  
  function singleton'1 (v : item'0) : Seq'0.t_seq item'0
  
  axiom singleton'1_spec : forall v : item'0 . ([%#span28] inv'8 v)
   -> ([%#span31] inv'7 (singleton'1 v))
  && ([%#span30] index_logic'1 (singleton'1 v) 0 = v) && ([%#span29] len'1 (singleton'1 v) = 1)
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_option item'0))= {[@expl:precondition] [%#span34] inv'4 self}
    any
    [ return' (result:Option'0.t_option item'0)-> {[%#span36] inv'2 result}
      {[%#span35] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 ( * self) (singleton'1 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  let rec next (self:borrowed (Enumerate'0.t_enumerate i)) (return'  (ret:Option'0.t_option (usize, item'0)))= {[%#s15_enumerate2] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Enumerate'0.t_enumerate <i> { * self}
          (fun (riter'0:i) (rcount'0:usize) ->
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                Enumerate'0.t_enumerate <i> { * self}
                  (fun (l_iter'0:i) (l_count'0:usize) ->
                     [ &self <- { self with current = Enumerate'0.C_Enumerate ( ^ _4) l_count'0 ; } ] 
                    s1)))
      | s1 = -{inv'0 ( ^ _4)}- s2
      | s2 = next'0 {_4} (fun (_ret':Option'0.t_option item'0) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = any [ br0 -> {_3 = Option'0.C_None } (! bb3) | br1 (a:item'0)-> {_3 = Option'0.C_Some a} (! bb4) ] 
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[@expl:type invariant] inv'2 _3} s3
      | s3 = -{resolve'1 _3}- s4
      | s4 = {[%#s15_enumerate0] false} any ]
      
    | bb4 = s0
      [ s0 = Option'0.some <item'0> {_3}
          (fun (r0'0:item'0) ->
             [ &x <- r0'0 ] 
            (any
            [ any_ (_any:item'0)-> (! Option'0.some <item'0> {_3}
                (fun (l_0'0:item'0) ->  [ &_3 <- Option'0.C_Some _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 _3} s2
      | s2 = -{resolve'1 _3}- s3
      | s3 = Enumerate'0.t_enumerate <i> { * self} (fun (riter'0:i) (rcount'0:usize) ->  [ &n <- rcount'0 ] s4)
      | s4 = Enumerate'0.t_enumerate <i> { * self}
          (fun (riter'1:i) (rcount'1:usize) ->
            UIntSize.add {rcount'1} {[%#s15_enumerate1] (1 : usize)}
              (fun (_ret':usize) ->
                Enumerate'0.t_enumerate <i> { * self}
                  (fun (l_iter'0:i) (l_count'0:usize) ->
                     [ &self <- { self with current = Enumerate'0.C_Enumerate l_iter'0 _ret' ; } ] 
                    s5)))
      | s5 = {[@expl:type invariant] inv'1 self} s6
      | s6 = -{resolve'0 self}- s7
      | s7 =  [ &_8 <- (n, x) ] (any [ any_ (_any:item'0)-> (!  [ &x <- _any ] s8) ] )
      | s8 = bb6 ]
      
    | bb6 = s0
      [ s0 =  [ &_0 <- Option'0.C_Some _8 ] (any [ any_ (_any:(usize, item'0))-> (!  [ &_8 <- _any ] s1) ] )
      | s1 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb9
    | bb3 = bb5
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'2 _3} s1
      | s1 = -{resolve'1 _3}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'0 self}- s4
      | s4 =  [ &_0 <- Option'0.C_None ] s5
      | s5 = bb9 ]
      
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option (usize, item'0) = any_l ()
    | & self : borrowed (Enumerate'0.t_enumerate i) = self
    | & _3 : Option'0.t_option item'0 = any_l ()
    | & _4 : borrowed i = any_l ()
    | & x : item'0 = any_l ()
    | & n : usize = any_l ()
    | & _8 : (usize, item'0) = any_l () ]
    
    [ return' (result:Option'0.t_option (usize, item'0))-> {[@expl:postcondition] [%#s15_enumerate4] inv'3 result}
      {[@expl:postcondition] [%#s15_enumerate3] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C15Enumerate_Enumerate
  type i
  
  let%span s15_enumerate0 = "../15_enumerate.rs" 82 29 82 30
  
  let%span s15_enumerate1 = "../15_enumerate.rs" 79 0 79 75
  
  let%span s15_enumerate2 = "../15_enumerate.rs" 80 0 80 93
  
  let%span s15_enumerate3 = "../15_enumerate.rs" 81 30 81 34
  
  let%span s15_enumerate4 = "../15_enumerate.rs" 81 42 81 54
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span9 = "../15_enumerate.rs" 73 12 74 79
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span17 = "../common.rs" 18 15 18 32
  
  let%span span18 = "../common.rs" 19 15 19 32
  
  let%span span19 = "../common.rs" 21 22 21 23
  
  let%span span20 = "../common.rs" 21 31 21 33
  
  let%span span21 = "../common.rs" 21 52 21 53
  
  let%span span22 = "../common.rs" 21 61 21 63
  
  let%span span23 = "../common.rs" 21 82 21 83
  
  let%span span24 = "../common.rs" 20 14 20 42
  
  let%span span25 = "../common.rs" 15 21 15 25
  
  let%span span26 = "../common.rs" 14 14 14 45
  
  predicate inv'1 (_x : i)
  
  use prelude.prelude.UIntSize
  
  type item'0
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate inv'2 (_x : Seq'0.t_seq item'0)
  
  constant empty'0 : Seq'0.t_seq item'0 = [%#span5] ()
  
  use prelude.prelude.Borrow
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate inv'0 (_x : borrowed i)
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span6] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'0 (self : Seq'0.t_seq item'0) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq item'0 . ([%#span7] inv'2 self)  -> ([%#span8] len'0 self >= 0)
  
  use prelude.prelude.UIntSize
  
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq'0.t_seq item'0) (o : i)
  
  use C15Enumerate_Enumerate_Type as Enumerate'0
  
  predicate invariant'3 [#"../15_enumerate.rs" 71 4 71 30] (self : Enumerate'0.t_enumerate i) =
    [%#span9] (forall i : i . forall s : Seq'0.t_seq item'0 . inv'1 i
     -> inv'2 s
     -> produces'0 (C15Enumerate_Enumerate_Type.enumerate_iter self) s i
     -> UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + len'0 s < UIntSize.to_int max'0)
    /\ (forall i : borrowed i . inv'0 i  -> completed'0 i  -> produces'0 ( * i) (empty'0 : Seq'0.t_seq item'0) ( ^ i))
  
  predicate inv'3 (_x : Enumerate'0.t_enumerate i)
  
  axiom inv'3 : forall x : Enumerate'0.t_enumerate i . inv'3 x
  = (invariant'3 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> true
    end)
  
  predicate invariant'2 (self : Seq'0.t_seq item'0)
  
  axiom inv'2 : forall x : Seq'0.t_seq item'0 . inv'2 x = true
  
  predicate invariant'1 (self : i)
  
  axiom inv'1 : forall x : i . inv'1 x = true
  
  function empty_len'0 (_1 : ()) : () =
    [%#span11] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span10] len'0 (empty'0 : Seq'0.t_seq item'0) = 0
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq item'0) (x : int) : item'0
  
  function concat'0 (self : Seq'0.t_seq item'0) (other : Seq'0.t_seq item'0) : Seq'0.t_seq item'0
  
  axiom concat'0_spec : forall self : Seq'0.t_seq item'0, other : Seq'0.t_seq item'0 . ([%#span12] inv'2 self)
   -> ([%#span13] inv'2 other)
   -> ([%#span16] inv'2 (concat'0 self other))
  && ([%#span15] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span14] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq'0.t_seq item'0) (b : i) (bc : Seq'0.t_seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq'0.t_seq item'0, b : i, bc : Seq'0.t_seq item'0, c : i . ([%#span17] produces'0 a ab b)
   -> ([%#span18] produces'0 b bc c)
   -> ([%#span19] inv'1 a)
   -> ([%#span20] inv'2 ab)
   -> ([%#span21] inv'1 b)
   -> ([%#span22] inv'2 bc)  -> ([%#span23] inv'1 c)  -> ([%#span24] produces'0 a (concat'0 ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span25] inv'1 self)
   -> ([%#span26] produces'0 self (empty'0 : Seq'0.t_seq item'0) self)
  
  predicate invariant'0 (self : borrowed i)
  
  axiom inv'0 : forall x : borrowed i . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  let rec enumerate (iter:i) (return'  (ret:Enumerate'0.t_enumerate i))= {[%#s15_enumerate3] inv'1 iter}
    {[%#s15_enumerate2] forall i : i . forall s : Seq'0.t_seq item'0 . inv'1 i
     -> inv'2 s  -> produces'0 iter s i  -> len'0 s < UIntSize.to_int max'0}
    {[%#s15_enumerate1] forall i : borrowed i . inv'0 i
     -> completed'0 i  -> produces'0 ( * i) (empty'0 : Seq'0.t_seq item'0) ( ^ i)}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 =  [ &_0 <- Enumerate'0.C_Enumerate iter ([%#s15_enumerate0] (0 : usize)) ] 
        (any [ any_ (_any:i)-> (!  [ &iter <- _any ] s1) ] )
      | s1 = bb2 ]
      
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : Enumerate'0.t_enumerate i = any_l () | & iter : i = iter ] 
    [ return' (result:Enumerate'0.t_enumerate i)-> {[@expl:postcondition] [%#s15_enumerate4] inv'3 result}
      (! return' {result}) ]
    
end
module C15Enumerate_Impl0
  type i
  
  let%span s15_enumerate0 = "../15_enumerate.rs" 40 4 40 26
  
  let%span s15_enumerate1 = "../15_enumerate.rs" 47 4 47 90
  
  let%span s15_enumerate2 = "../15_enumerate.rs" 53 4 53 44
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span4 = "" 0 0 0 0
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span7 = "../15_enumerate.rs" 73 12 74 79
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span12 = "../15_enumerate.rs" 23 8 23 43
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span18 = "../15_enumerate.rs" 29 8 34 9
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : borrowed i)
  
  predicate inv'7 (_x : borrowed i)
  
  axiom inv'7 : forall x : borrowed i . inv'7 x = true
  
  predicate invariant'6 (self : i)
  
  predicate inv'6 (_x : i)
  
  axiom inv'6 : forall x : i . inv'6 x = true
  
  type item'0
  
  use prelude.prelude.UIntSize
  
  predicate invariant'5 (self : (usize, item'0))
  
  predicate inv'5 (_x : (usize, item'0))
  
  axiom inv'5 : forall x : (usize, item'0) . inv'5 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'4 (self : Seq'0.t_seq item'0)
  
  predicate inv'4 (_x : Seq'0.t_seq item'0)
  
  axiom inv'4 : forall x : Seq'0.t_seq item'0 . inv'4 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option (usize, item'0))
  
  predicate inv'3 (_x : Option'0.t_option (usize, item'0))
  
  axiom inv'3 : forall x : Option'0.t_option (usize, item'0) . inv'3 x = true
  
  use C15Enumerate_Enumerate_Type as Enumerate'0
  
  predicate invariant'2 (self : borrowed (Enumerate'0.t_enumerate i))
  
  predicate inv'0 (_x : Enumerate'0.t_enumerate i)
  
  predicate inv'2 (_x : borrowed (Enumerate'0.t_enumerate i))
  
  axiom inv'2 : forall x : borrowed (Enumerate'0.t_enumerate i) . inv'2 x = (inv'0 ( * x) /\ inv'0 ( ^ x))
  
  predicate invariant'1 (self : Seq'0.t_seq (usize, item'0))
  
  predicate inv'1 (_x : Seq'0.t_seq (usize, item'0))
  
  axiom inv'1 : forall x : Seq'0.t_seq (usize, item'0) . inv'1 x = true
  
  constant empty'2 : Seq'0.t_seq item'0 = [%#span3] ()
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span4] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'1 (self : Seq'0.t_seq item'0) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq item'0 . ([%#span5] inv'4 self)  -> ([%#span6] len'1 self >= 0)
  
  use prelude.prelude.UIntSize
  
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq'0.t_seq item'0) (o : i)
  
  predicate invariant'0 [#"../15_enumerate.rs" 71 4 71 30] (self : Enumerate'0.t_enumerate i) =
    [%#span7] (forall i : i . forall s : Seq'0.t_seq item'0 . inv'6 i
     -> inv'4 s
     -> produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s i
     -> UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + len'1 s < UIntSize.to_int max'0)
    /\ (forall i : borrowed i . inv'7 i  -> completed'1 i  -> produces'1 ( * i) (empty'2 : Seq'0.t_seq item'0) ( ^ i))
  
  axiom inv'0 : forall x : Enumerate'0.t_enumerate i . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq (usize, item'0)) (x : int) : (usize, item'0)
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq (usize, item'0)) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq (usize, item'0) . ([%#span5] inv'1 self)  -> ([%#span6] len'0 self >= 0)
  
  function singleton'0 (v : (usize, item'0)) : Seq'0.t_seq (usize, item'0)
  
  axiom singleton'0_spec : forall v : (usize, item'0) . ([%#span8] inv'5 v)
   -> ([%#span11] inv'1 (singleton'0 v))
  && ([%#span10] index_logic'0 (singleton'0 v) 0 = v) && ([%#span9] len'0 (singleton'0 v) = 1)
  
  predicate completed'0 [#"../15_enumerate.rs" 22 4 22 35] (self : borrowed (Enumerate'0.t_enumerate i)) =
    [%#span12] completed'1 (Borrow.borrow_logic (C15Enumerate_Enumerate_Type.enumerate_iter ( * self)) (C15Enumerate_Enumerate_Type.enumerate_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  use seq.Seq
  
  function concat'0 (self : Seq'0.t_seq (usize, item'0)) (other : Seq'0.t_seq (usize, item'0)) : Seq'0.t_seq (usize, item'0)
    
  
  axiom concat'0_spec : forall self : Seq'0.t_seq (usize, item'0), other : Seq'0.t_seq (usize, item'0) . ([%#span13] inv'1 self)
   -> ([%#span14] inv'1 other)
   -> ([%#span17] inv'1 (concat'0 self other))
  && ([%#span16] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span15] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  constant empty'0 : Seq'0.t_seq (usize, item'0) = [%#span3] ()
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq item'0) (x : int) : item'0
  
  predicate produces'0 [#"../15_enumerate.rs" 28 4 28 64] (self : Enumerate'0.t_enumerate i) (visited : Seq'0.t_seq (usize, item'0)) (o : Enumerate'0.t_enumerate i)
    
   =
    [%#span18] len'0 visited
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count o)
    - UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self)
    /\ (exists s : Seq'0.t_seq item'0 . inv'4 s
    /\ produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s (C15Enumerate_Enumerate_Type.enumerate_iter o)
    /\ len'0 visited = len'1 s
    /\ (forall i : int . 0 <= i /\ i < len'1 s
     -> UIntSize.to_int (let (a, _) = index_logic'0 visited i in a)
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + i
    /\ (let (_, a) = index_logic'0 visited i in a) = index_logic'1 s i))
  
  constant empty'0 : Seq'0.t_seq (usize, item'0) = [%#span3] ()
  
  goal produces_refl_refn : [%#s15_enumerate0] forall self : Enumerate'0.t_enumerate i . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (empty'0 : Seq'0.t_seq (usize, item'0)) self
   -> produces'0 self (empty'1 : Seq'0.t_seq (usize, item'0)) self)
  
  goal produces_trans_refn : [%#s15_enumerate1] forall a : Enumerate'0.t_enumerate i . forall ab : Seq'0.t_seq (usize, item'0) . forall b : Enumerate'0.t_enumerate i . forall bc : Seq'0.t_seq (usize, item'0) . forall c : Enumerate'0.t_enumerate i . inv'0 c
  /\ inv'1 bc /\ inv'0 b /\ inv'1 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'0 c
  /\ inv'1 bc
  /\ inv'0 b
  /\ inv'1 ab
  /\ inv'0 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (concat'0 ab bc) c  -> produces'0 a (concat'0 ab bc) c)
  
  goal next_refn : [%#s15_enumerate2] forall self : borrowed (Enumerate'0.t_enumerate i) . inv'2 self
   -> inv'2 self
  /\ (forall result : Option'0.t_option (usize, item'0) . inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
    end
   -> inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
    end)
end
module C15Enumerate_Impl1
  type i
end
