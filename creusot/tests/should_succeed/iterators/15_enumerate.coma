module T_15_enumerate__Enumerate [#"15_enumerate.rs" 12 0 12 33]
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Enumerate 'i =
    | C_Enumerate 'i usize
  
  let rec t_Enumerate < 'i > (input:t_Enumerate 'i) (ret  (iter:'i) (count:usize))= any
    [ good (iter:'i) (count:usize)-> {C_Enumerate iter count = input} (! ret {iter} {count}) ]
    
  
  function t_Enumerate__count (self : t_Enumerate 'i) : usize =
    match self with
      | C_Enumerate _ a -> a
      end
  
  function t_Enumerate__iter (self : t_Enumerate 'i) : 'i =
    match self with
      | C_Enumerate a _ -> a
      end
end
module M_15_enumerate__qyi17057287782225696128__produces_refl [#"15_enumerate.rs" 45 4 45 26] (* <Enumerate<I> as common::Iterator> *)
  type i
  
  let%span s15_enumerate0 = "15_enumerate.rs" 43 15 43 24
  let%span s15_enumerate1 = "15_enumerate.rs" 44 14 44 45
  let%span s15_enumerate2 = "15_enumerate.rs" 32 8 38 9
  let%span scommon3 = "common.rs" 14 15 14 24
  let%span scommon4 = "common.rs" 15 14 15 45
  let%span scommon5 = "common.rs" 19 15 19 21
  let%span scommon6 = "common.rs" 20 15 20 21
  let%span scommon7 = "common.rs" 21 15 21 21
  let%span scommon8 = "common.rs" 22 15 22 32
  let%span scommon9 = "common.rs" 23 15 23 32
  let%span scommon10 = "common.rs" 24 14 24 42
  let%span s15_enumerate11 = "15_enumerate.rs" 81 12 86 43
  let%span sseq12 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sinvariant13 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed14 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'5 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed14] inv'5 self
  
  predicate inv'4 (_1 : t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Item'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate inv'2 (_1 : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed i) =
    [%#sinvariant13] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_1 : borrowed i)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed i [inv'3 x] . inv'3 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#sseq12] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon5] inv'2 a)
   -> ([%#scommon6] inv'2 b)
   -> ([%#scommon7] inv'2 c)
   -> ([%#scommon8] produces'1 a ab b)
   -> ([%#scommon9] produces'1 b bc c)  -> ([%#scommon10] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon3] inv'2 self)
   -> ([%#scommon4] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  use T_15_enumerate__Enumerate as Enumerate'0
  
  predicate invariant'0 [#"15_enumerate.rs" 79 4 79 30] (self : Enumerate'0.t_Enumerate i) =
    [%#s15_enumerate11] (forall s : Seq.seq t_Item'0, i : i [produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i] . inv'1 s
    /\ inv'2 i /\ produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i
     -> UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed i . inv'3 i /\ completed'0 i
     -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'0 (_1 : Enumerate'0.t_Enumerate i)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Enumerate'0.t_Enumerate i [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> inv'2 iter
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"15_enumerate.rs" 31 4 31 64] (self : Enumerate'0.t_Enumerate i) (visited : Seq.seq (usize, t_Item'0)) (o : Enumerate'0.t_Enumerate i)
    
   =
    [%#s15_enumerate2] Seq.length visited
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count o)
    - UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self)
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s (T_15_enumerate__Enumerate.t_Enumerate__iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a)
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  use seq.Seq
  
  constant self  : Enumerate'0.t_Enumerate i
  
  function produces_refl [#"15_enumerate.rs" 45 4 45 26] (self : Enumerate'0.t_Enumerate i) : ()
  
  goal vc_produces_refl : ([%#s15_enumerate0] inv'0 self)
   -> ([%#s15_enumerate1] produces'0 self (Seq.empty  : Seq.seq (usize, t_Item'0)) self)
end
module M_15_enumerate__qyi17057287782225696128__produces_trans [#"15_enumerate.rs" 55 4 55 90] (* <Enumerate<I> as common::Iterator> *)
  type i
  
  let%span s15_enumerate0 = "15_enumerate.rs" 49 15 49 21
  let%span s15_enumerate1 = "15_enumerate.rs" 50 15 50 21
  let%span s15_enumerate2 = "15_enumerate.rs" 51 15 51 21
  let%span s15_enumerate3 = "15_enumerate.rs" 52 15 52 32
  let%span s15_enumerate4 = "15_enumerate.rs" 53 15 53 32
  let%span s15_enumerate5 = "15_enumerate.rs" 54 14 54 42
  let%span s15_enumerate6 = "15_enumerate.rs" 32 8 38 9
  let%span scommon7 = "common.rs" 14 15 14 24
  let%span scommon8 = "common.rs" 15 14 15 45
  let%span scommon9 = "common.rs" 19 15 19 21
  let%span scommon10 = "common.rs" 20 15 20 21
  let%span scommon11 = "common.rs" 21 15 21 21
  let%span scommon12 = "common.rs" 22 15 22 32
  let%span scommon13 = "common.rs" 23 15 23 32
  let%span scommon14 = "common.rs" 24 14 24 42
  let%span s15_enumerate15 = "15_enumerate.rs" 81 12 86 43
  let%span sseq16 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sinvariant17 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed18 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'5 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed18] inv'5 self
  
  predicate inv'4 (_1 : t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Item'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate inv'2 (_1 : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed i) =
    [%#sinvariant17] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_1 : borrowed i)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed i [inv'3 x] . inv'3 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#sseq16] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon9] inv'2 a)
   -> ([%#scommon10] inv'2 b)
   -> ([%#scommon11] inv'2 c)
   -> ([%#scommon12] produces'1 a ab b)
   -> ([%#scommon13] produces'1 b bc c)  -> ([%#scommon14] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon7] inv'2 self)
   -> ([%#scommon8] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  use T_15_enumerate__Enumerate as Enumerate'0
  
  predicate invariant'0 [#"15_enumerate.rs" 79 4 79 30] (self : Enumerate'0.t_Enumerate i) =
    [%#s15_enumerate15] (forall s : Seq.seq t_Item'0, i : i [produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i] . inv'1 s
    /\ inv'2 i /\ produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i
     -> UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed i . inv'3 i /\ completed'0 i
     -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'0 (_1 : Enumerate'0.t_Enumerate i)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Enumerate'0.t_Enumerate i [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> inv'2 iter
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"15_enumerate.rs" 31 4 31 64] (self : Enumerate'0.t_Enumerate i) (visited : Seq.seq (usize, t_Item'0)) (o : Enumerate'0.t_Enumerate i)
    
   =
    [%#s15_enumerate6] Seq.length visited
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count o)
    - UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self)
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s (T_15_enumerate__Enumerate.t_Enumerate__iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a)
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  constant a  : Enumerate'0.t_Enumerate i
  
  constant ab  : Seq.seq (usize, t_Item'0)
  
  constant b  : Enumerate'0.t_Enumerate i
  
  constant bc  : Seq.seq (usize, t_Item'0)
  
  constant c  : Enumerate'0.t_Enumerate i
  
  function produces_trans [#"15_enumerate.rs" 55 4 55 90] (a : Enumerate'0.t_Enumerate i) (ab : Seq.seq (usize, t_Item'0)) (b : Enumerate'0.t_Enumerate i) (bc : Seq.seq (usize, t_Item'0)) (c : Enumerate'0.t_Enumerate i) : ()
    
  
  goal vc_produces_trans : ([%#s15_enumerate4] produces'0 b bc c)
   -> ([%#s15_enumerate3] produces'0 a ab b)
   -> ([%#s15_enumerate2] inv'0 c)
   -> ([%#s15_enumerate1] inv'0 b)
   -> ([%#s15_enumerate0] inv'0 a)  -> ([%#s15_enumerate5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_15_enumerate__qyi17057287782225696128__next [#"15_enumerate.rs" 61 4 61 44] (* <Enumerate<I> as common::Iterator> *)
  type i
  
  let%span s15_enumerate0 = "15_enumerate.rs" 66 30 66 31
  let%span s15_enumerate1 = "15_enumerate.rs" 61 17 61 21
  let%span s15_enumerate2 = "15_enumerate.rs" 57 14 60 5
  let%span s15_enumerate3 = "15_enumerate.rs" 61 26 61 44
  let%span scommon4 = "common.rs" 31 17 31 21
  let%span scommon5 = "common.rs" 27 14 30 5
  let%span scommon6 = "common.rs" 31 26 31 44
  let%span s15_enumerate7 = "15_enumerate.rs" 26 8 26 74
  let%span s15_enumerate8 = "15_enumerate.rs" 32 8 38 9
  let%span scommon9 = "common.rs" 14 15 14 24
  let%span scommon10 = "common.rs" 15 14 15 45
  let%span scommon11 = "common.rs" 19 15 19 21
  let%span scommon12 = "common.rs" 20 15 20 21
  let%span scommon13 = "common.rs" 21 15 21 21
  let%span scommon14 = "common.rs" 22 15 22 32
  let%span scommon15 = "common.rs" 23 15 23 32
  let%span scommon16 = "common.rs" 24 14 24 42
  let%span sresolve17 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant18 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq19 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span s15_enumerate20 = "15_enumerate.rs" 81 12 86 43
  let%span sboxed21 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'7 (_1 : t_Item'0)
  
  predicate invariant'4 (self : t_Item'0) =
    [%#sboxed21] inv'7 self
  
  predicate inv'9 (_1 : t_Item'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Item'0 [inv'9 x] . inv'9 x = invariant'4 x
  
  predicate inv'0 (_1 : i)
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate inv'3 (_1 : borrowed i)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  predicate inv'5 (_1 : Seq.seq t_Item'0)
  
  use T_15_enumerate__Enumerate as Enumerate'0
  
  predicate invariant'3 [#"15_enumerate.rs" 79 4 79 30] (self : Enumerate'0.t_Enumerate i) =
    [%#s15_enumerate20] (forall s : Seq.seq t_Item'0, i : i [produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i] . inv'5 s
    /\ inv'0 i /\ produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i
     -> UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed i . inv'3 i /\ completed'1 i
     -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'8 (_1 : Enumerate'0.t_Enumerate i)
  
  axiom inv_axiom'6 [@rewrite] : forall x : Enumerate'0.t_Enumerate i [inv'8 x] . inv'8 x
  = (invariant'3 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> inv'0 iter
    end)
  
  predicate inv'6 (_1 : (usize, t_Item'0))
  
  axiom inv_axiom'5 [@rewrite] : forall x : (usize, t_Item'0) [inv'6 x] . inv'6 x = (let (a, b) = x in inv'7 b)
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq19] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'4 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'4 x] . inv'4 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'7 a_0
    end
  
  predicate invariant'1 (self : borrowed i) =
    [%#sinvariant18] inv'0 self.current /\ inv'0 self.final
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed i [inv'3 x] . inv'3 x = invariant'1 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option (usize, t_Item'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option (usize, t_Item'0) [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'6 a_0
    end
  
  predicate invariant'0 (self : borrowed (Enumerate'0.t_Enumerate i)) =
    [%#sinvariant18] inv'8 self.current /\ inv'8 self.final
  
  predicate inv'1 (_1 : borrowed (Enumerate'0.t_Enumerate i))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (Enumerate'0.t_Enumerate i) [inv'1 x] . inv'1 x = invariant'0 x
  
  use seq.Seq
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon11] inv'0 a)
   -> ([%#scommon12] inv'0 b)
   -> ([%#scommon13] inv'0 c)
   -> ([%#scommon14] produces'1 a ab b)
   -> ([%#scommon15] produces'1 b bc c)  -> ([%#scommon16] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon9] inv'0 self)
   -> ([%#scommon10] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"15_enumerate.rs" 31 4 31 64] (self : Enumerate'0.t_Enumerate i) (visited : Seq.seq (usize, t_Item'0)) (o : Enumerate'0.t_Enumerate i)
    
   =
    [%#s15_enumerate8] Seq.length visited
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count o)
    - UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self)
    /\ (exists s : Seq.seq t_Item'0 . inv'5 s
    /\ produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s (T_15_enumerate__Enumerate.t_Enumerate__iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a)
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  use seq.Seq
  
  predicate resolve'2 (self : borrowed usize) =
    [%#sresolve17] self.final = self.current
  
  predicate completed'0 [#"15_enumerate.rs" 25 4 25 35] (self : borrowed (Enumerate'0.t_Enumerate i)) =
    [%#s15_enumerate7] completed'1 (Borrow.borrow_logic (T_15_enumerate__Enumerate.t_Enumerate__iter self.current) (T_15_enumerate__Enumerate.t_Enumerate__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ resolve'2 (Borrow.borrow_logic (T_15_enumerate__Enumerate.t_Enumerate__count self.current) (T_15_enumerate__Enumerate.t_Enumerate__count self.final) (Borrow.inherit_id (Borrow.get_id self) 2))
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Enumerate'0.t_Enumerate i)) =
    [%#sresolve17] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Enumerate'0.t_Enumerate i)) =
    resolve'1 _1
  
  use seq.Seq
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option t_Item'0))= {[@expl:precondition] [%#scommon4] inv'3 self}
    any
    [ return' (result:Option'0.t_Option t_Item'0)-> {[%#scommon6] inv'4 result}
      {[%#scommon5] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (Enumerate'0.t_Enumerate i)) (return'  (ret:Option'0.t_Option (usize, t_Item'0)))= {[%#s15_enumerate1] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Enumerate'0.t_Enumerate <i> {self.current}
          (fun (riter'0:i) (rcount'0:usize) ->
            {inv'0 riter'0}
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &self <- { self with current = Enumerate'0.C_Enumerate _ret'.final rcount'0 ; } ] 
                s1))
      | s1 = next'0 {_4} (fun (_ret':Option'0.t_Option t_Item'0) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = any [ br0 -> {_3 = Option'0.C_None } (! bb3) | br1 (a:t_Item'0)-> {_3 = Option'0.C_Some a} (! bb4) ] 
    | bb4 = s0
      [ s0 = Option'0.v_Some <t_Item'0> {_3} (fun (r0'0:t_Item'0) ->  [ &x <- r0'0 ] s1)
      | s1 = Enumerate'0.t_Enumerate <i> {self.current} (fun (riter'0:i) (rcount'0:usize) ->  [ &n <- rcount'0 ] s2)
      | s2 = Enumerate'0.t_Enumerate <i> {self.current}
          (fun (riter'1:i) (rcount'1:usize) ->
            UIntSize.add {rcount'1} {[%#s15_enumerate0] (1 : usize)}
              (fun (_ret':usize) ->
                Enumerate'0.t_Enumerate <i> {self.current}
                  (fun (riter'2:i) (rcount'2:usize) ->
                     [ &self <- { self with current = Enumerate'0.C_Enumerate riter'2 _ret' ; } ] 
                    s3)))
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 =  [ &_8 <- (n, x) ] s6
      | s6 = bb6 ]
      
    | bb6 = s0 [ s0 =  [ &_0 <- Option'0.C_Some _8 ] s1 | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb9 ] 
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option (usize, t_Item'0) = any_l ()
    | & self : borrowed (Enumerate'0.t_Enumerate i) = self
    | & _3 : Option'0.t_Option t_Item'0 = any_l ()
    | & _4 : borrowed i = any_l ()
    | & x : t_Item'0 = any_l ()
    | & n : usize = any_l ()
    | & _8 : (usize, t_Item'0) = any_l () ]
    
    [ return' (result:Option'0.t_Option (usize, t_Item'0))-> {[@expl:postcondition] [%#s15_enumerate3] inv'2 result}
      {[@expl:postcondition] [%#s15_enumerate2] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_15_enumerate__enumerate [#"15_enumerate.rs" 96 0 96 54]
  type i
  
  let%span s15_enumerate0 = "15_enumerate.rs" 97 29 97 30
  let%span s15_enumerate1 = "15_enumerate.rs" 92 0 92 85
  let%span s15_enumerate2 = "15_enumerate.rs" 93 0 94 40
  let%span s15_enumerate3 = "15_enumerate.rs" 96 30 96 34
  let%span s15_enumerate4 = "15_enumerate.rs" 95 10 95 51
  let%span s15_enumerate5 = "15_enumerate.rs" 96 42 96 54
  let%span scommon6 = "common.rs" 14 15 14 24
  let%span scommon7 = "common.rs" 15 14 15 45
  let%span scommon8 = "common.rs" 19 15 19 21
  let%span scommon9 = "common.rs" 20 15 20 21
  let%span scommon10 = "common.rs" 21 15 21 21
  let%span scommon11 = "common.rs" 22 15 22 32
  let%span scommon12 = "common.rs" 23 15 23 32
  let%span scommon13 = "common.rs" 24 14 24 42
  let%span sinvariant14 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq15 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span s15_enumerate16 = "15_enumerate.rs" 81 12 86 43
  let%span sboxed17 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'5 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed17] inv'5 self
  
  predicate inv'4 (_1 : t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Item'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate inv'2 (_1 : i)
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate inv'0 (_1 : borrowed i)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  use T_15_enumerate__Enumerate as Enumerate'0
  
  predicate invariant'2 [#"15_enumerate.rs" 79 4 79 30] (self : Enumerate'0.t_Enumerate i) =
    [%#s15_enumerate16] (forall s : Seq.seq t_Item'0, i : i [produces'0 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i] . inv'1 s
    /\ inv'2 i /\ produces'0 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i
     -> UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed i . inv'0 i /\ completed'0 i
     -> produces'0 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  predicate inv'3 (_1 : Enumerate'0.t_Enumerate i)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Enumerate'0.t_Enumerate i [inv'3 x] . inv'3 x
  = (invariant'2 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> inv'2 iter
    end)
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#sseq15] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon8] inv'2 a)
   -> ([%#scommon9] inv'2 b)
   -> ([%#scommon10] inv'2 c)
   -> ([%#scommon11] produces'0 a ab b)
   -> ([%#scommon12] produces'0 b bc c)  -> ([%#scommon13] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon6] inv'2 self)
   -> ([%#scommon7] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate invariant'0 (self : borrowed i) =
    [%#sinvariant14] inv'2 self.current /\ inv'2 self.final
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed i [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec enumerate (iter:i) (return'  (ret:Enumerate'0.t_Enumerate i))= {[%#s15_enumerate3] inv'2 iter}
    {[%#s15_enumerate2] forall s : Seq.seq t_Item'0, i : i . inv'1 s /\ inv'2 i /\ produces'0 iter s i
     -> Seq.length s < UIntSize.to_int v_MAX'0}
    {[%#s15_enumerate1] forall i : borrowed i . inv'0 i /\ completed'0 i
     -> produces'0 i.current (Seq.empty  : Seq.seq t_Item'0) i.final}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 =  [ &_0 <- Enumerate'0.C_Enumerate iter ([%#s15_enumerate0] (0 : usize)) ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = return' {_0} ]
    ) [ & _0 : Enumerate'0.t_Enumerate i = any_l () | & iter : i = iter ] 
    [ return' (result:Enumerate'0.t_Enumerate i)-> {[@expl:postcondition] [%#s15_enumerate5] inv'3 result}
      {[@expl:postcondition] [%#s15_enumerate4] T_15_enumerate__Enumerate.t_Enumerate__iter result = iter
      /\ UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count result) = 0}
      (! return' {result}) ]
    
end
module M_15_enumerate__qyi17057287782225696128 [#"15_enumerate.rs" 17 0 19 16] (* <Enumerate<I> as common::Iterator> *)
  type i
  
  let%span s15_enumerate0 = "15_enumerate.rs" 45 4 45 26
  let%span s15_enumerate1 = "15_enumerate.rs" 61 4 61 44
  let%span s15_enumerate2 = "15_enumerate.rs" 55 4 55 90
  let%span s15_enumerate3 = "15_enumerate.rs" 32 8 38 9
  let%span s15_enumerate4 = "15_enumerate.rs" 26 8 26 74
  let%span sresolve5 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span s15_enumerate6 = "15_enumerate.rs" 81 12 86 43
  let%span sinvariant7 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq8 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed9 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'8 (_1 : t_Item'0)
  
  predicate invariant'4 (self : t_Item'0) =
    [%#sboxed9] inv'8 self
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate inv'4 (_1 : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed i) =
    [%#sinvariant7] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'6 (_1 : borrowed i)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed i [inv'6 x] . inv'6 x = invariant'3 x
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  predicate inv'5 (_1 : (usize, t_Item'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : (usize, t_Item'0) [inv'5 x] . inv'5 x = (let (a, b) = x in inv'8 b)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t_Item'0) =
    [%#sseq8] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option (usize, t_Item'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : Option'0.t_Option (usize, t_Item'0) [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'5 a_0
    end
  
  use T_15_enumerate__Enumerate as Enumerate'0
  
  predicate inv'0 (_1 : Enumerate'0.t_Enumerate i)
  
  predicate invariant'1 (self : borrowed (Enumerate'0.t_Enumerate i)) =
    [%#sinvariant7] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Enumerate'0.t_Enumerate i))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Enumerate'0.t_Enumerate i) [inv'1 x] . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use T_15_enumerate__Enumerate as T_15_enumerate__Enumerate
  
  predicate invariant'0 [#"15_enumerate.rs" 79 4 79 30] (self : Enumerate'0.t_Enumerate i) =
    [%#s15_enumerate6] (forall s : Seq.seq t_Item'0, i : i [produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i] . inv'3 s
    /\ inv'4 i /\ produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s i
     -> UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + Seq.length s < UIntSize.to_int v_MAX'0)
    /\ (forall i : borrowed i . inv'6 i /\ completed'1 i
     -> produces'1 i.current (Seq.empty  : Seq.seq t_Item'0) i.final)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Enumerate'0.t_Enumerate i [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Enumerate'0.C_Enumerate iter count -> inv'4 iter
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate resolve'0 (self : borrowed usize) =
    [%#sresolve5] self.final = self.current
  
  predicate completed'0 [#"15_enumerate.rs" 25 4 25 35] (self : borrowed (Enumerate'0.t_Enumerate i)) =
    [%#s15_enumerate4] completed'1 (Borrow.borrow_logic (T_15_enumerate__Enumerate.t_Enumerate__iter self.current) (T_15_enumerate__Enumerate.t_Enumerate__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ resolve'0 (Borrow.borrow_logic (T_15_enumerate__Enumerate.t_Enumerate__count self.current) (T_15_enumerate__Enumerate.t_Enumerate__count self.final) (Borrow.inherit_id (Borrow.get_id self) 2))
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"15_enumerate.rs" 31 4 31 64] (self : Enumerate'0.t_Enumerate i) (visited : Seq.seq (usize, t_Item'0)) (o : Enumerate'0.t_Enumerate i)
    
   =
    [%#s15_enumerate3] Seq.length visited
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count o)
    - UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self)
    /\ (exists s : Seq.seq t_Item'0 . inv'3 s
    /\ produces'1 (T_15_enumerate__Enumerate.t_Enumerate__iter self) s (T_15_enumerate__Enumerate.t_Enumerate__iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a)
    = UIntSize.to_int (T_15_enumerate__Enumerate.t_Enumerate__count self) + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  
  use seq.Seq
  
  goal produces_refl_refn : [%#s15_enumerate0] forall self : Enumerate'0.t_Enumerate i . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq (usize, t_Item'0)) self
   -> produces'0 self (Seq.empty  : Seq.seq (usize, t_Item'0)) self)
  
  goal next_refn : [%#s15_enumerate1] forall self : borrowed (Enumerate'0.t_Enumerate i) . inv'1 self
   -> inv'1 self
  /\ (forall result : Option'0.t_Option (usize, t_Item'0) . inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_trans_refn : [%#s15_enumerate2] forall a : Enumerate'0.t_Enumerate i . forall ab : Seq.seq (usize, t_Item'0) . forall b : Enumerate'0.t_Enumerate i . forall bc : Seq.seq (usize, t_Item'0) . forall c : Enumerate'0.t_Enumerate i . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
module M_15_enumerate__qyi11282117276404066507 [#"15_enumerate.rs" 73 0 75 16] (* <Enumerate<I> as creusot_contracts::Invariant> *)
  type i
end
