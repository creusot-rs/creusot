
module C15Enumerate_Enumerate_Type
  use prelude.UIntSize
  use prelude.Int
  type t_enumerate 'i =
    | C_Enumerate 'i usize
    
  function any_l (_ : 'b) : 'a
  let rec t_enumerate < 'i > (input:t_enumerate 'i) (ret  (iter:'i) (count:usize))= any
    [ good (iter:'i) (count:usize)-> {C_Enumerate iter count = input} (! ret {iter} {count})
    | bad (iter:'i) (count:usize)-> {C_Enumerate iter count <> input} {false} any ]
    
  function enumerate_iter (self : t_enumerate 'i) : 'i =
    match self with
      | C_Enumerate a _ -> a
      end
  function enumerate_count (self : t_enumerate 'i) : usize =
    match self with
      | C_Enumerate _ a -> a
      end
end
module C15Enumerate_Impl0_ProducesRefl_Impl
  type i
  use prelude.Borrow
  predicate invariant'3 (self : borrowed i)
  let rec invariant'3 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed i)
  let rec inv'3 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed i . inv'3 x = true
  predicate invariant'2 (self : i)
  let rec invariant'2 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : i)
  let rec inv'2 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : i . inv'2 x = true
  type item'0
  use seq.Seq
  predicate invariant'1 (self : Seq.seq item'0)
  let rec invariant'1 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq item'0)
  let rec inv'1 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'2 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'1 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'2 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'1 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'2 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'2 a)
   -> ([#"../common.rs" 21 31 21 33] inv'1 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'2 b)
   -> ([#"../common.rs" 21 61 21 63] inv'1 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'2 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'2 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'2 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  use prelude.UIntSize
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  use prelude.UIntSize
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate invariant'0 [#"../15_enumerate.rs" 71 4 71 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i) =
    [#"../15_enumerate.rs" 73 12 74 79] (forall i : i . forall s : Seq.seq item'0 . inv'2 i
     -> inv'1 s
     -> produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s i
     -> UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + Seq.length s < UIntSize.to_int max'0)
    /\ (forall i : borrowed i . inv'3 i  -> completed'0 i  -> produces'1 ( * i) (Seq.empty  : Seq.seq item'0) ( ^ i))
  let rec invariant'0 (self:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C15Enumerate_Enumerate_Type.t_enumerate i)
  let rec inv'0 (_x:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C15Enumerate_Enumerate_Type.t_enumerate i . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C15Enumerate_Enumerate_Type.C_Enumerate iter count -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [#"../15_enumerate.rs" 28 4 28 64] (self : C15Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, item'0)) (o : C15Enumerate_Enumerate_Type.t_enumerate i)
    
   =
    [#"../15_enumerate.rs" 29 8 34 9] Seq.length visited
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count o)
    - UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self)
    /\ (exists s : Seq.seq item'0 . inv'1 s
    /\ produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s (C15Enumerate_Enumerate_Type.enumerate_iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a)
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  let rec produces'0 (self:C15Enumerate_Enumerate_Type.t_enumerate i) (visited:Seq.seq (usize, item'0)) (o:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  constant self  : C15Enumerate_Enumerate_Type.t_enumerate i
  function produces_refl [#"../15_enumerate.rs" 40 4 40 26] (self : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
  goal vc_produces_refl : ([#"../15_enumerate.rs" 40 21 40 25] inv'0 self)
   -> ([#"../15_enumerate.rs" 39 14 39 45] produces'0 self (Seq.empty  : Seq.seq (usize, item'0)) self)
end
module C15Enumerate_Impl0_ProducesTrans_Impl
  type i
  use prelude.Borrow
  predicate invariant'4 (self : borrowed i)
  let rec invariant'4 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed i)
  let rec inv'4 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  predicate invariant'3 (self : i)
  let rec invariant'3 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : i)
  let rec inv'3 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : i . inv'3 x = true
  type item'0
  use seq.Seq
  predicate invariant'2 (self : Seq.seq item'0)
  let rec invariant'2 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Seq.seq item'0)
  let rec inv'2 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Seq.seq item'0 . inv'2 x = true
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'3 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'2 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'3 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'2 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'3 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'3 a)
   -> ([#"../common.rs" 21 31 21 33] inv'2 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'3 b)
   -> ([#"../common.rs" 21 61 21 63] inv'2 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'3 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'3 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'3 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  use prelude.UIntSize
  predicate invariant'1 (self : Seq.seq (usize, item'0))
  let rec invariant'1 (self:Seq.seq (usize, item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq (usize, item'0))
  let rec inv'1 (_x:Seq.seq (usize, item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq (usize, item'0) . inv'1 x = true
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  use prelude.UIntSize
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate invariant'0 [#"../15_enumerate.rs" 71 4 71 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i) =
    [#"../15_enumerate.rs" 73 12 74 79] (forall i : i . forall s : Seq.seq item'0 . inv'3 i
     -> inv'2 s
     -> produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s i
     -> UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + Seq.length s < UIntSize.to_int max'0)
    /\ (forall i : borrowed i . inv'4 i  -> completed'0 i  -> produces'1 ( * i) (Seq.empty  : Seq.seq item'0) ( ^ i))
  let rec invariant'0 (self:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C15Enumerate_Enumerate_Type.t_enumerate i)
  let rec inv'0 (_x:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C15Enumerate_Enumerate_Type.t_enumerate i . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C15Enumerate_Enumerate_Type.C_Enumerate iter count -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [#"../15_enumerate.rs" 28 4 28 64] (self : C15Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, item'0)) (o : C15Enumerate_Enumerate_Type.t_enumerate i)
    
   =
    [#"../15_enumerate.rs" 29 8 34 9] Seq.length visited
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count o)
    - UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self)
    /\ (exists s : Seq.seq item'0 . inv'2 s
    /\ produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s (C15Enumerate_Enumerate_Type.enumerate_iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a)
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  let rec produces'0 (self:C15Enumerate_Enumerate_Type.t_enumerate i) (visited:Seq.seq (usize, item'0)) (o:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  constant a  : C15Enumerate_Enumerate_Type.t_enumerate i
  constant ab  : Seq.seq (usize, item'0)
  constant b  : C15Enumerate_Enumerate_Type.t_enumerate i
  constant bc  : Seq.seq (usize, item'0)
  constant c  : C15Enumerate_Enumerate_Type.t_enumerate i
  function produces_trans [#"../15_enumerate.rs" 47 4 47 90] (a : C15Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, item'0)) (b : C15Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, item'0)) (c : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    
  goal vc_produces_trans : ([#"../15_enumerate.rs" 47 82 47 83] inv'0 c)
   -> ([#"../15_enumerate.rs" 47 61 47 63] inv'1 bc)
   -> ([#"../15_enumerate.rs" 47 52 47 53] inv'0 b)
   -> ([#"../15_enumerate.rs" 47 31 47 33] inv'1 ab)
   -> ([#"../15_enumerate.rs" 47 22 47 23] inv'0 a)
   -> ([#"../15_enumerate.rs" 45 15 45 32] produces'0 b bc c)
   -> ([#"../15_enumerate.rs" 44 15 44 32] produces'0 a ab b)
   -> ([#"../15_enumerate.rs" 46 14 46 42] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C15Enumerate_Impl0_Next
  type i
  predicate inv'0 (_x : i)
  let rec inv'0 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed i)
  let rec inv'4 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  use prelude.UIntSize
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  type item'0
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq item'0)
  let rec inv'5 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  predicate invariant'6 [#"../15_enumerate.rs" 71 4 71 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i) =
    [#"../15_enumerate.rs" 73 12 74 79] (forall i : i . forall s : Seq.seq item'0 . inv'0 i
     -> inv'5 s
     -> produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s i
     -> UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + Seq.length s < UIntSize.to_int max'0)
    /\ (forall i : borrowed i . inv'4 i  -> completed'1 i  -> produces'1 ( * i) (Seq.empty  : Seq.seq item'0) ( ^ i))
  let rec invariant'6 (self:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : C15Enumerate_Enumerate_Type.t_enumerate i)
  let rec inv'6 (_x:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : C15Enumerate_Enumerate_Type.t_enumerate i . inv'6 x
  = (invariant'6 x
  /\ match x with
    | C15Enumerate_Enumerate_Type.C_Enumerate iter count -> true
    end)
  predicate invariant'5 (self : Seq.seq item'0)
  let rec invariant'5 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq item'0 . inv'5 x = true
  predicate invariant'4 (self : borrowed i)
  let rec invariant'4 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option (usize, item'0))
  let rec invariant'3 (self:Core_Option_Option_Type.t_option (usize, item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option (usize, item'0))
  let rec inv'3 (_x:Core_Option_Option_Type.t_option (usize, item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option (usize, item'0) . inv'3 x = true
  predicate invariant'2 (self : Core_Option_Option_Type.t_option item'0)
  let rec invariant'2 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option item'0)
  let rec inv'2 (_x:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option item'0 . inv'2 x = true
  predicate invariant'1 (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i))
  let rec invariant'1 (self:borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i))
  let rec inv'1 (_x:borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i) . inv'1 x
  = (inv'6 ( * x) /\ inv'6 ( ^ x))
  use seq.Seq
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'0 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'5 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'0 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'5 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'0 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'0 a)
   -> ([#"../common.rs" 21 31 21 33] inv'5 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'0 b)
   -> ([#"../common.rs" 21 61 21 63] inv'5 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'0 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'0 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'0 (self : i)
  let rec invariant'0 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : i . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [#"../15_enumerate.rs" 28 4 28 64] (self : C15Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, item'0)) (o : C15Enumerate_Enumerate_Type.t_enumerate i)
    
   =
    [#"../15_enumerate.rs" 29 8 34 9] Seq.length visited
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count o)
    - UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self)
    /\ (exists s : Seq.seq item'0 . inv'5 s
    /\ produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s (C15Enumerate_Enumerate_Type.enumerate_iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a)
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  let rec produces'0 (self:C15Enumerate_Enumerate_Type.t_enumerate i) (visited:Seq.seq (usize, item'0)) (o:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  predicate completed'0 [#"../15_enumerate.rs" 22 4 22 35] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i))
   =
    [#"../15_enumerate.rs" 23 8 23 43] completed'1 (Borrow.borrow_logic (C15Enumerate_Enumerate_Type.enumerate_iter ( * self)) (C15Enumerate_Enumerate_Type.enumerate_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
  let rec completed'0 (self:borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'1 (self : Core_Option_Option_Type.t_option item'0)
  let rec resolve'1 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use seq.Seq
  let rec next'0 (self:borrowed i) (return'  (ret:Core_Option_Option_Type.t_option item'0))= {[@expl:precondition] [#"../common.rs" 27 17 27 21] inv'4 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option item'0)-> {[#"../common.rs" 27 26 27 44] inv'2 result}
      {[#"../common.rs" 23 14 26 5] match result with
        | Core_Option_Option_Type.C_None -> completed'1 self
        | Core_Option_Option_Type.C_Some v -> produces'1 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  let rec next (self:borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) (return'  (ret:Core_Option_Option_Type.t_option (usize, item'0)))= {[#"../15_enumerate.rs" 53 17 53 21] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = C15Enumerate_Enumerate_Type.t_enumerate <i> { * self}
          (fun (riter'0:i) (rcount'0:usize) ->
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                C15Enumerate_Enumerate_Type.t_enumerate <i> { * self}
                  (fun (l_iter'0:i) (l_count'0:usize) ->
                    
                    [ &self <- { self with current = (C15Enumerate_Enumerate_Type.C_Enumerate ( ^ _4) l_count'0 : C15Enumerate_Enumerate_Type.t_enumerate i) ; } ]
                    
                    s1)))
      | s1 = -{inv'0 ( ^ _4)}- s2
      | s2 = next'0 {_4} (fun (_ret':Core_Option_Option_Type.t_option item'0) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = any
        [ br0 -> {_3 = Core_Option_Option_Type.C_None } (! bb3)
        | br1 (a:item'0)-> {_3 = Core_Option_Option_Type.C_Some a} (! bb4) ]
         ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[@expl:type invariant] inv'2 _3} s3
      | s3 = -{resolve'1 _3}- s4
      | s4 = {[#"../15_enumerate.rs" 54 14 54 30] false} any ]
      
    | bb4 = s0
      [ s0 = Core_Option_Option_Type.some <item'0> {_3}
          (fun (r0'0:item'0) ->
             [ &x <- r0'0 ] 
            (any
            [ any_ (_any:item'0)-> (! Core_Option_Option_Type.some <item'0> {_3}
                (fun (l_0'0:item'0) ->
                   [ &_3 <- Core_Option_Option_Type.C_Some _any : Core_Option_Option_Type.t_option item'0 ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 _3} s2
      | s2 = -{resolve'1 _3}- s3
      | s3 = C15Enumerate_Enumerate_Type.t_enumerate <i> { * self}
          (fun (riter'0:i) (rcount'0:usize) ->  [ &n <- rcount'0 ] s4)
      | s4 = C15Enumerate_Enumerate_Type.t_enumerate <i> { * self}
          (fun (riter'1:i) (rcount'1:usize) ->
            UIntSize.add {rcount'1} {[#"../15_enumerate.rs" 58 30 58 31] (1 : usize)}
              (fun (_ret':usize) ->
                C15Enumerate_Enumerate_Type.t_enumerate <i> { * self}
                  (fun (l_iter'0:i) (l_count'0:usize) ->
                    
                    [ &self <- { self with current = (C15Enumerate_Enumerate_Type.C_Enumerate l_iter'0 _ret' : C15Enumerate_Enumerate_Type.t_enumerate i) ; } ]
                    
                    s5)))
      | s5 = {[@expl:type invariant] inv'1 self} s6
      | s6 = -{resolve'0 self}- s7
      | s7 =  [ &_8 <- (n, x) ] (any [ any_ (_any:item'0)-> (!  [ &x <- _any ] s8) ] )
      | s8 = bb6 ]
      
    | bb6 = s0
      [ s0 =  [ &_0 <- Core_Option_Option_Type.C_Some _8 : Core_Option_Option_Type.t_option (usize, item'0) ] 
        (any [ any_ (_any:(usize, item'0))-> (!  [ &_8 <- _any ] s1) ] )
      | s1 = bb7 ]
      
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = bb9 ] 
    | bb3 = s0 [ s0 = bb5 ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'2 _3} s1
      | s1 = -{resolve'1 _3}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'0 self}- s4
      | s4 =  [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option (usize, item'0) ] s5
      | s5 = bb9 ]
      
    | bb9 = s0 [ s0 = bb10 ] 
    | bb10 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option (usize, item'0) = any_l () : Core_Option_Option_Type.t_option (usize, item'0)
    | & self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i) = self
    | & _3 : Core_Option_Option_Type.t_option item'0 = any_l () : Core_Option_Option_Type.t_option item'0
    | & _4 : borrowed i = any_l () : borrowed i
    | & x : item'0 = any_l () : item'0
    | & n : usize = any_l () : usize
    | & _8 : (usize, item'0) = any_l () : (usize, item'0) ]
    
    [ return' (result:Core_Option_Option_Type.t_option (usize, item'0))-> {[@expl:postcondition] [#"../15_enumerate.rs" 53 26 53 44] inv'3 result}
      {[@expl:postcondition] [#"../15_enumerate.rs" 49 14 52 5] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C15Enumerate_Enumerate
  type i
  predicate inv'1 (_x : i)
  let rec inv'1 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed i)
  let rec inv'0 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  use prelude.UIntSize
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  type item'0
  use seq.Seq
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'0 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  predicate inv'2 (_x : Seq.seq item'0)
  let rec inv'2 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  predicate invariant'3 [#"../15_enumerate.rs" 71 4 71 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i) =
    [#"../15_enumerate.rs" 73 12 74 79] (forall i : i . forall s : Seq.seq item'0 . inv'1 i
     -> inv'2 s
     -> produces'0 (C15Enumerate_Enumerate_Type.enumerate_iter self) s i
     -> UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + Seq.length s < UIntSize.to_int max'0)
    /\ (forall i : borrowed i . inv'0 i  -> completed'0 i  -> produces'0 ( * i) (Seq.empty  : Seq.seq item'0) ( ^ i))
  let rec invariant'3 (self:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : C15Enumerate_Enumerate_Type.t_enumerate i)
  let rec inv'3 (_x:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : C15Enumerate_Enumerate_Type.t_enumerate i . inv'3 x
  = (invariant'3 x
  /\ match x with
    | C15Enumerate_Enumerate_Type.C_Enumerate iter count -> true
    end)
  predicate invariant'2 (self : Seq.seq item'0)
  let rec invariant'2 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : Seq.seq item'0 . inv'2 x = true
  predicate invariant'1 (self : i)
  let rec invariant'1 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : i . inv'1 x = true
  use seq.Seq
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'1 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'2 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'1 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'2 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'1 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'0 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'0 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'0 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'1 a)
   -> ([#"../common.rs" 21 31 21 33] inv'2 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'1 b)
   -> ([#"../common.rs" 21 61 21 63] inv'2 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'1 c)  -> ([#"../common.rs" 20 14 20 42] produces'0 a (Seq.(++) ab bc) c)
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'1 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'1 self)
   -> ([#"../common.rs" 14 14 14 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'0 (self : borrowed i)
  let rec invariant'0 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed i . inv'0 x = true
  use prelude.Intrinsic
  let rec enumerate (iter:i) (return'  (ret:C15Enumerate_Enumerate_Type.t_enumerate i))= {[#"../15_enumerate.rs" 81 30 81 34] inv'1 iter}
    {[#"../15_enumerate.rs" 80 0 80 93] forall i : i . forall s : Seq.seq item'0 . inv'1 i
     -> inv'2 s  -> produces'0 iter s i  -> Seq.length s < UIntSize.to_int max'0}
    {[#"../15_enumerate.rs" 79 0 79 75] forall i : borrowed i . inv'0 i
     -> completed'0 i  -> produces'0 ( * i) (Seq.empty  : Seq.seq item'0) ( ^ i)}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0
      [ s0 = 
        [ &_0 <- C15Enumerate_Enumerate_Type.C_Enumerate iter ([#"../15_enumerate.rs" 82 29 82 30] (0 : usize)) : C15Enumerate_Enumerate_Type.t_enumerate i ]
        
        (any [ any_ (_any:i)-> (!  [ &iter <- _any ] s1) ] )
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : C15Enumerate_Enumerate_Type.t_enumerate i = any_l () : C15Enumerate_Enumerate_Type.t_enumerate i
    | & iter : i = iter ]
    
    [ return' (result:C15Enumerate_Enumerate_Type.t_enumerate i)-> {[@expl:postcondition] [#"../15_enumerate.rs" 81 42 81 54] inv'3 result}
      (! return' {result}) ]
    
end
module C15Enumerate_Impl0
  type i
  use prelude.Borrow
  predicate invariant'6 (self : borrowed i)
  let rec invariant'6 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : borrowed i)
  let rec inv'6 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : borrowed i . inv'6 x = true
  predicate invariant'5 (self : i)
  let rec invariant'5 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : i)
  let rec inv'5 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ] 
  axiom inv'5 : forall x : i . inv'5 x = true
  type item'0
  use seq.Seq
  predicate invariant'4 (self : Seq.seq item'0)
  let rec invariant'4 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Seq.seq item'0)
  let rec inv'4 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Seq.seq item'0 . inv'4 x = true
  use prelude.UIntSize
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option (usize, item'0))
  let rec invariant'3 (self:Core_Option_Option_Type.t_option (usize, item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option (usize, item'0))
  let rec inv'3 (_x:Core_Option_Option_Type.t_option (usize, item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option (usize, item'0) . inv'3 x = true
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate invariant'2 (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i))
  let rec invariant'2 (self:borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C15Enumerate_Enumerate_Type.t_enumerate i)
  let rec inv'0 (_x:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i))
  let rec inv'2 (_x:borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i) . inv'2 x
  = (inv'0 ( * x) /\ inv'0 ( ^ x))
  predicate invariant'1 (self : Seq.seq (usize, item'0))
  let rec invariant'1 (self:Seq.seq (usize, item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq (usize, item'0))
  let rec inv'1 (_x:Seq.seq (usize, item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq (usize, item'0) . inv'1 x = true
  use seq.Seq
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  use prelude.UIntSize
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  predicate invariant'0 [#"../15_enumerate.rs" 71 4 71 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i) =
    [#"../15_enumerate.rs" 73 12 74 79] (forall i : i . forall s : Seq.seq item'0 . inv'5 i
     -> inv'4 s
     -> produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s i
     -> UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + Seq.length s < UIntSize.to_int max'0)
    /\ (forall i : borrowed i . inv'6 i  -> completed'1 i  -> produces'1 ( * i) (Seq.empty  : Seq.seq item'0) ( ^ i))
  let rec invariant'0 (self:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : C15Enumerate_Enumerate_Type.t_enumerate i . inv'0 x
  = (invariant'0 x
  /\ match x with
    | C15Enumerate_Enumerate_Type.C_Enumerate iter count -> true
    end)
  use seq.Seq
  predicate completed'0 [#"../15_enumerate.rs" 22 4 22 35] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i))
   =
    [#"../15_enumerate.rs" 23 8 23 43] completed'1 (Borrow.borrow_logic (C15Enumerate_Enumerate_Type.enumerate_iter ( * self)) (C15Enumerate_Enumerate_Type.enumerate_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
  let rec completed'0 (self:borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [#"../15_enumerate.rs" 28 4 28 64] (self : C15Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, item'0)) (o : C15Enumerate_Enumerate_Type.t_enumerate i)
    
   =
    [#"../15_enumerate.rs" 29 8 34 9] Seq.length visited
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count o)
    - UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self)
    /\ (exists s : Seq.seq item'0 . inv'4 s
    /\ produces'1 (C15Enumerate_Enumerate_Type.enumerate_iter self) s (C15Enumerate_Enumerate_Type.enumerate_iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a)
    = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  let rec produces'0 (self:C15Enumerate_Enumerate_Type.t_enumerate i) (visited:Seq.seq (usize, item'0)) (o:C15Enumerate_Enumerate_Type.t_enumerate i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  goal produces_refl_refn : [#"../15_enumerate.rs" 40 4 40 26] forall self : C15Enumerate_Enumerate_Type.t_enumerate i . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq (usize, item'0)) self
   -> produces'0 self (Seq.empty  : Seq.seq (usize, item'0)) self)
  goal produces_trans_refn : [#"../15_enumerate.rs" 47 4 47 90] forall a : C15Enumerate_Enumerate_Type.t_enumerate i . forall ab : Seq.seq (usize, item'0) . forall b : C15Enumerate_Enumerate_Type.t_enumerate i . forall bc : Seq.seq (usize, item'0) . forall c : C15Enumerate_Enumerate_Type.t_enumerate i . inv'0 c
  /\ inv'1 bc /\ inv'0 b /\ inv'1 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'0 c
  /\ inv'1 bc
  /\ inv'0 b
  /\ inv'1 ab
  /\ inv'0 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  goal next_refn : [#"../15_enumerate.rs" 53 4 53 44] forall self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i) . inv'2 self
   -> inv'2 self
  /\ (forall result : Core_Option_Option_Type.t_option (usize, item'0) . inv'3 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv'3 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
end
module C15Enumerate_Impl1
  type i
end
