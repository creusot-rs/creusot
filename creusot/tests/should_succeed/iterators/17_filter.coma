module T_17_filter__Filter [#"17_filter.rs" 13 0 13 58]
  type t_Filter 'i 'f =
    | C_Filter 'i 'f
  
  let rec t_Filter < 'i > < 'f > (input:t_Filter 'i 'f) (ret  (iter:'i) (func:'f))= any
    [ good (iter:'i) (func:'f)-> {C_Filter iter func = input} (! ret {iter} {func}) ]
    
  
  function t_Filter__func (self : t_Filter 'i 'f) : 'f =
    match self with
      | C_Filter _ a -> a
      end
  
  function t_Filter__iter (self : t_Filter 'i 'f) : 'i =
    match self with
      | C_Filter a _ -> a
      end
end
module M_17_filter__qyi17392541228996028033__produces_refl [#"17_filter.rs" 55 4 55 26] (* <Filter<I, F> as common::Iterator> *)
  type i
  
  type f
  
  let%span s17_filter0 = "17_filter.rs" 53 15 53 24
  let%span s17_filter1 = "17_filter.rs" 54 14 54 45
  let%span s17_filter2 = "17_filter.rs" 72 8 85 9
  let%span scommon3 = "common.rs" 14 15 14 24
  let%span scommon4 = "common.rs" 15 14 15 45
  let%span scommon5 = "common.rs" 19 15 19 21
  let%span scommon6 = "common.rs" 20 15 20 21
  let%span scommon7 = "common.rs" 21 15 21 21
  let%span scommon8 = "common.rs" 22 15 22 32
  let%span scommon9 = "common.rs" 23 15 23 32
  let%span scommon10 = "common.rs" 24 14 24 42
  let%span s17_filter11 = "17_filter.rs" 22 8 34 9
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  
  type t_Item'0
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : bool)
  
  predicate postcondition_once'0 (self : f) (_2 : t_Item'0) (_3 : bool)
  
  function fn_mut_once'0 (self : f) (args : t_Item'0) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : t_Item'0, res : bool . [%#sops18] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops15] unnest'0 self b)
   -> ([%#sops16] unnest'0 b c)  -> ([%#sops17] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops14] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : t_Item'0) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : t_Item'0, res : bool . ([%#sops12] postcondition_mut'0 self args res)
   -> ([%#sops13] unnest'0 self.current self.final)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  predicate inv'1 (_1 : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon5] inv'1 a)
   -> ([%#scommon6] inv'1 b)
   -> ([%#scommon7] inv'1 c)
   -> ([%#scommon8] produces'1 a ab b)
   -> ([%#scommon9] produces'1 b bc c)  -> ([%#scommon10] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon3] inv'1 self)
   -> ([%#scommon4] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate inv'2 (_1 : f)
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  use T_17_filter__Filter as Filter'0
  
  predicate invariant'0 [#"17_filter.rs" 21 4 21 30] (self : Filter'0.t_Filter i f) =
    [%#s17_filter11] forall f : f, i : t_Item'0 . precondition'0 f (i)
    /\ (forall f : f, g : f . unnest'0 f g  -> f = g)
    /\ (forall f : borrowed f, g : borrowed f, i : t_Item'0, b : bool . f.current = g.current /\ f.final = g.final
     -> postcondition_mut'0 f (i) b = postcondition_mut'0 g (i) b)
    /\ (forall f : borrowed f, i : t_Item'0 . not (postcondition_mut'0 f (i) true /\ postcondition_mut'0 f (i) false))
  
  predicate inv'0 (_1 : Filter'0.t_Filter i f)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Filter'0.t_Filter i f [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Filter'0.C_Filter iter func -> inv'1 iter /\ inv'2 func
    end)
  
  use seq.Seq
  
  use map.Map
  
  use seq.Seq
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  use prelude.prelude.Int
  
  use map.Map
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  predicate produces'0 [#"17_filter.rs" 71 4 71 67] (self : Filter'0.t_Filter i f) (visited : Seq.seq t_Item'0) (succ : Filter'0.t_Filter i f)
    
   =
    [%#s17_filter2] unnest'0 (T_17_filter__Filter.t_Filter__func self) (T_17_filter__Filter.t_Filter__func succ)
    /\ (exists s : Seq.seq t_Item'0, f : Map.map int int . produces'1 (T_17_filter__Filter.t_Filter__iter self) s (T_17_filter__Filter.t_Filter__iter succ)
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited
     -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall bor_f : borrowed f, i : int . bor_f.current = T_17_filter__Filter.t_Filter__func self
    /\ bor_f.final = T_17_filter__Filter.t_Filter__func self
     -> 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
    = postcondition_mut'0 bor_f (Seq.get s i) true))
  
  constant self  : Filter'0.t_Filter i f
  
  function produces_refl [#"17_filter.rs" 55 4 55 26] (self : Filter'0.t_Filter i f) : ()
  
  goal vc_produces_refl : ([%#s17_filter0] inv'0 self)
   -> ([%#s17_filter1] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
end
module M_17_filter__qyi17392541228996028033__produces_trans [#"17_filter.rs" 65 4 65 90] (* <Filter<I, F> as common::Iterator> *)
  type i
  
  type f
  
  let%span s17_filter0 = "17_filter.rs" 59 15 59 21
  let%span s17_filter1 = "17_filter.rs" 60 15 60 21
  let%span s17_filter2 = "17_filter.rs" 61 15 61 21
  let%span s17_filter3 = "17_filter.rs" 62 15 62 32
  let%span s17_filter4 = "17_filter.rs" 63 15 63 32
  let%span s17_filter5 = "17_filter.rs" 64 14 64 42
  let%span s17_filter6 = "17_filter.rs" 72 8 85 9
  let%span scommon7 = "common.rs" 14 15 14 24
  let%span scommon8 = "common.rs" 15 14 15 45
  let%span scommon9 = "common.rs" 19 15 19 21
  let%span scommon10 = "common.rs" 20 15 20 21
  let%span scommon11 = "common.rs" 21 15 21 21
  let%span scommon12 = "common.rs" 22 15 22 32
  let%span scommon13 = "common.rs" 23 15 23 32
  let%span scommon14 = "common.rs" 24 14 24 42
  let%span s17_filter15 = "17_filter.rs" 22 8 34 9
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops21 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  
  type t_Item'0
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : bool)
  
  predicate postcondition_once'0 (self : f) (_2 : t_Item'0) (_3 : bool)
  
  function fn_mut_once'0 (self : f) (args : t_Item'0) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : t_Item'0, res : bool . [%#sops22] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops19] unnest'0 self b)
   -> ([%#sops20] unnest'0 b c)  -> ([%#sops21] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops18] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : t_Item'0) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : t_Item'0, res : bool . ([%#sops16] postcondition_mut'0 self args res)
   -> ([%#sops17] unnest'0 self.current self.final)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  predicate inv'1 (_1 : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon9] inv'1 a)
   -> ([%#scommon10] inv'1 b)
   -> ([%#scommon11] inv'1 c)
   -> ([%#scommon12] produces'1 a ab b)
   -> ([%#scommon13] produces'1 b bc c)  -> ([%#scommon14] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon7] inv'1 self)
   -> ([%#scommon8] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate inv'2 (_1 : f)
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  use T_17_filter__Filter as Filter'0
  
  predicate invariant'0 [#"17_filter.rs" 21 4 21 30] (self : Filter'0.t_Filter i f) =
    [%#s17_filter15] forall f : f, i : t_Item'0 . precondition'0 f (i)
    /\ (forall f : f, g : f . unnest'0 f g  -> f = g)
    /\ (forall f : borrowed f, g : borrowed f, i : t_Item'0, b : bool . f.current = g.current /\ f.final = g.final
     -> postcondition_mut'0 f (i) b = postcondition_mut'0 g (i) b)
    /\ (forall f : borrowed f, i : t_Item'0 . not (postcondition_mut'0 f (i) true /\ postcondition_mut'0 f (i) false))
  
  predicate inv'0 (_1 : Filter'0.t_Filter i f)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Filter'0.t_Filter i f [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Filter'0.C_Filter iter func -> inv'1 iter /\ inv'2 func
    end)
  
  use seq.Seq
  
  use map.Map
  
  use seq.Seq
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  use prelude.prelude.Int
  
  use map.Map
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  predicate produces'0 [#"17_filter.rs" 71 4 71 67] (self : Filter'0.t_Filter i f) (visited : Seq.seq t_Item'0) (succ : Filter'0.t_Filter i f)
    
   =
    [%#s17_filter6] unnest'0 (T_17_filter__Filter.t_Filter__func self) (T_17_filter__Filter.t_Filter__func succ)
    /\ (exists s : Seq.seq t_Item'0, f : Map.map int int . produces'1 (T_17_filter__Filter.t_Filter__iter self) s (T_17_filter__Filter.t_Filter__iter succ)
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited
     -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall bor_f : borrowed f, i : int . bor_f.current = T_17_filter__Filter.t_Filter__func self
    /\ bor_f.final = T_17_filter__Filter.t_Filter__func self
     -> 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
    = postcondition_mut'0 bor_f (Seq.get s i) true))
  
  constant a  : Filter'0.t_Filter i f
  
  constant ab  : Seq.seq t_Item'0
  
  constant b  : Filter'0.t_Filter i f
  
  constant bc  : Seq.seq t_Item'0
  
  constant c  : Filter'0.t_Filter i f
  
  function produces_trans [#"17_filter.rs" 65 4 65 90] (a : Filter'0.t_Filter i f) (ab : Seq.seq t_Item'0) (b : Filter'0.t_Filter i f) (bc : Seq.seq t_Item'0) (c : Filter'0.t_Filter i f) : ()
    
  
  goal vc_produces_trans : ([%#s17_filter4] produces'0 b bc c)
   -> ([%#s17_filter3] produces'0 a ab b)
   -> ([%#s17_filter2] inv'0 c)
   -> ([%#s17_filter1] inv'0 b)  -> ([%#s17_filter0] inv'0 a)  -> ([%#s17_filter5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_17_filter__qyi17392541228996028033__next [#"17_filter.rs" 93 4 93 41] (* <Filter<I, F> as common::Iterator> *)
  type i
  
  type f
  
  let%span s17_filter0 = "17_filter.rs" 94 23 94 40
  let%span s17_filter1 = "17_filter.rs" 95 27 95 51
  let%span s17_filter2 = "17_filter.rs" 97 20 97 29
  let%span s17_filter3 = "17_filter.rs" 98 20 98 46
  let%span s17_filter4 = "17_filter.rs" 97 8 97 31
  let%span s17_filter5 = "17_filter.rs" 104 23 104 53
  let%span s17_filter6 = "17_filter.rs" 105 12 105 71
  let%span s17_filter7 = "17_filter.rs" 88 15 88 24
  let%span s17_filter8 = "17_filter.rs" 93 17 93 21
  let%span s17_filter9 = "17_filter.rs" 89 14 92 5
  let%span s17_filter10 = "17_filter.rs" 93 26 93 41
  let%span sops11 = "../../../../creusot-contracts/src/logic/ops.rs" 86 8 86 33
  let%span scommon12 = "common.rs" 31 17 31 21
  let%span scommon13 = "common.rs" 27 14 30 5
  let%span scommon14 = "common.rs" 31 26 31 44
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 163 27 163 52
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 151 0 175 1
  let%span s17_filter17 = "17_filter.rs" 45 12 47 43
  let%span s17_filter18 = "17_filter.rs" 72 8 85 9
  let%span scommon19 = "common.rs" 14 15 14 24
  let%span scommon20 = "common.rs" 15 14 15 45
  let%span scommon21 = "common.rs" 19 15 19 21
  let%span scommon22 = "common.rs" 20 15 20 21
  let%span scommon23 = "common.rs" 21 15 21 21
  let%span scommon24 = "common.rs" 22 15 22 32
  let%span scommon25 = "common.rs" 23 15 23 32
  let%span scommon26 = "common.rs" 24 14 24 42
  let%span sops27 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops28 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops29 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops30 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops31 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops32 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops33 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span sresolve34 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant35 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span s17_filter36 = "17_filter.rs" 22 8 34 9
  let%span sinvariant37 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  type t_Item'0
  
  predicate inv'3 (_1 : t_Item'0)
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : t_Item'0) =
    [%#sinvariant37] inv'3 self
  
  predicate inv'10 (_1 : t_Item'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Item'0 [inv'10 x] . inv'10 x = invariant'4 x
  
  predicate inv'2 (_1 : f)
  
  predicate inv'1 (_1 : i)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : bool)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  use T_17_filter__Filter as Filter'0
  
  predicate invariant'3 [#"17_filter.rs" 21 4 21 30] (self : Filter'0.t_Filter i f) =
    [%#s17_filter36] forall f : f, i : t_Item'0 . precondition'0 f (i)
    /\ (forall f : f, g : f . unnest'0 f g  -> f = g)
    /\ (forall f : borrowed f, g : borrowed f, i : t_Item'0, b : bool . f.current = g.current /\ f.final = g.final
     -> postcondition_mut'0 f (i) b = postcondition_mut'0 g (i) b)
    /\ (forall f : borrowed f, i : t_Item'0 . not (postcondition_mut'0 f (i) true /\ postcondition_mut'0 f (i) false))
  
  predicate inv'9 (_1 : Filter'0.t_Filter i f)
  
  axiom inv_axiom'6 [@rewrite] : forall x : Filter'0.t_Filter i f [inv'9 x] . inv'9 x
  = (invariant'3 x
  /\ match x with
    | Filter'0.C_Filter iter func -> inv'1 iter /\ inv'2 func
    end)
  
  predicate inv'8 (_1 : bool)
  
  axiom inv_axiom'5 [@rewrite] : forall x : bool [inv'8 x] . inv'8 x = true
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = (let (a) = x in inv'10 a)
  
  predicate invariant'2 (self : borrowed f) =
    [%#sinvariant35] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'6 (_1 : borrowed f)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed f [inv'6 x] . inv'6 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed i) =
    [%#sinvariant35] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'5 (_1 : borrowed i)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed i [inv'5 x] . inv'5 x = invariant'1 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'4 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'4 x] . inv'4 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  predicate resolve'3 (_1 : f)
  
  predicate postcondition_once'0 (self : f) (_2 : t_Item'0) (_3 : bool)
  
  function fn_mut_once'0 (self : f) (args : t_Item'0) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : t_Item'0, res : bool . [%#sops33] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'3 s.final)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops30] unnest'0 self b)
   -> ([%#sops31] unnest'0 b c)  -> ([%#sops32] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops29] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : t_Item'0) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : t_Item'0, res : bool . ([%#sops27] postcondition_mut'0 self args res)
   -> ([%#sops28] unnest'0 self.current self.final)
  
  predicate invariant'0 (self : borrowed (Filter'0.t_Filter i f)) =
    [%#sinvariant35] inv'9 self.current /\ inv'9 self.final
  
  predicate inv'0 (_1 : borrowed (Filter'0.t_Filter i f))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (Filter'0.t_Filter i f) [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon21] inv'1 a)
   -> ([%#scommon22] inv'1 b)
   -> ([%#scommon23] inv'1 c)
   -> ([%#scommon24] produces'0 a ab b)
   -> ([%#scommon25] produces'0 b bc c)  -> ([%#scommon26] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon19] inv'1 self)
   -> ([%#scommon20] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use seq.Seq
  
  use map.Map
  
  use seq.Seq
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  use prelude.prelude.Int
  
  use map.Map
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  predicate produces'1 [#"17_filter.rs" 71 4 71 67] (self : Filter'0.t_Filter i f) (visited : Seq.seq t_Item'0) (succ : Filter'0.t_Filter i f)
    
   =
    [%#s17_filter18] unnest'0 (T_17_filter__Filter.t_Filter__func self) (T_17_filter__Filter.t_Filter__func succ)
    /\ (exists s : Seq.seq t_Item'0, f : Map.map int int . produces'0 (T_17_filter__Filter.t_Filter__iter self) s (T_17_filter__Filter.t_Filter__iter succ)
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited
     -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall bor_f : borrowed f, i : int . bor_f.current = T_17_filter__Filter.t_Filter__func self
    /\ bor_f.final = T_17_filter__Filter.t_Filter__func self
     -> 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
    = postcondition_mut'0 bor_f (Seq.get s i) true))
  
  use seq.Seq
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate completed'0 [#"17_filter.rs" 43 4 43 35] (self : borrowed (Filter'0.t_Filter i f)) =
    [%#s17_filter17] (exists s : Seq.seq t_Item'0, e : borrowed i . produces'0 (T_17_filter__Filter.t_Filter__iter self.current) s e.current
    /\ completed'1 e
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> postcondition_mut'0 (Borrow.borrow_logic (T_17_filter__Filter.t_Filter__func self.current) (T_17_filter__Filter.t_Filter__func self.final) (Borrow.inherit_id (Borrow.get_id self) 2)) (Seq.get s i) false))
    /\ T_17_filter__Filter.t_Filter__func self.current = T_17_filter__Filter.t_Filter__func self.final
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed (Filter'0.t_Filter i f)) =
    [%#sresolve34] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Filter'0.t_Filter i f)) =
    resolve'2 _1
  
  predicate resolve'0 (_1 : t_Item'0)
  
  let rec call_mut'0 (self:borrowed f) (args:t_Item'0) (return'  (ret:bool))= {[@expl:precondition] inv'7 args}
    {[@expl:precondition] inv'6 self}
    {[@expl:precondition] [%#sops15] precondition'0 self.current args}
    any
    [ return' (result:bool)-> {inv'8 result} {[%#sops16] postcondition_mut'0 self args result} (! return' {result}) ]
    
  
  use seq.Seq
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option t_Item'0))= {[@expl:precondition] [%#scommon12] inv'5 self}
    any
    [ return' (result:Option'0.t_Option t_Item'0)-> {[%#scommon14] inv'4 result}
      {[%#scommon13] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq t_Item'0)) (ix : int) : t_Item'0 =
    [%#sops11] Seq.get (Snapshot.inner self) ix
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (Filter'0.t_Filter i f)) (return'  (ret:Option'0.t_Option t_Item'0))= {[%#s17_filter8] inv'0 self}
    {[%#s17_filter7] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#s17_filter0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &produced <- [%#s17_filter1] Snapshot.new (Seq.empty  : Seq.seq t_Item'0) ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &old_3_0 <- Snapshot.new self ] s1 | s1 = bb3 ] 
    | bb3 = bb3
      [ bb3 = {[@expl:loop invariant] (Snapshot.inner old_3_0).final = self.final}
        {[@expl:loop invariant] [%#s17_filter4] unnest'0 (T_17_filter__Filter.t_Filter__func (Snapshot.inner old_self).current) (T_17_filter__Filter.t_Filter__func self.current)}
        {[@expl:loop invariant] [%#s17_filter4] produces'0 (T_17_filter__Filter.t_Filter__iter (Snapshot.inner old_self).current) (Snapshot.inner produced) (T_17_filter__Filter.t_Filter__iter self.current)}
        {[@expl:loop invariant] [%#s17_filter4] forall bor_f : borrowed f . bor_f.current
        = T_17_filter__Filter.t_Filter__func self.current
        /\ bor_f.final = T_17_filter__Filter.t_Filter__func self.current
         -> (forall i : int . 0 <= i /\ i < Seq.length (Snapshot.inner produced)
         -> postcondition_mut'0 bor_f (index_logic'0 produced i) false)}
        {[@expl:loop invariant] [%#s17_filter3] T_17_filter__Filter.t_Filter__func self.current
        = T_17_filter__Filter.t_Filter__func (Snapshot.inner old_self).current}
        {[@expl:loop invariant] [%#s17_filter2] inv'0 self}
        (! s0) [ s0 = bb4 ] 
        [ bb4 = s0
          [ s0 = Filter'0.t_Filter <i> <f> {self.current}
              (fun (riter'0:i) (rfunc'0:f) ->
                {inv'1 riter'0}
                Borrow.borrow_mut <i> {riter'0}
                  (fun (_ret':borrowed i) ->
                     [ &_16 <- _ret' ] 
                    -{inv'1 _ret'.final}-
                     [ &self <- { self with current = Filter'0.C_Filter _ret'.final rfunc'0 ; } ] 
                    s1))
          | s1 = next'0 {_16} (fun (_ret':Option'0.t_Option t_Item'0) ->  [ &_15 <- _ret' ] s2)
          | s2 = bb5 ]
          
        | bb5 = any [ br0 -> {_15 = Option'0.C_None } (! bb13) | br1 (a:t_Item'0)-> {_15 = Option'0.C_Some a} (! bb6) ] 
        | bb6 = bb7
        | bb7 = s0
          [ s0 = Option'0.v_Some <t_Item'0> {_15} (fun (r0'0:t_Item'0) ->  [ &n <- r0'0 ] s1)
          | s1 =  [ &_19 <- [%#s17_filter5] Snapshot.new (Seq.snoc (Snapshot.inner produced) n) ] s2
          | s2 = bb8 ]
          
        | bb8 = s0
          [ s0 =  [ &produced <- _19 ] s1
          | s1 = {[@expl:assertion] [%#s17_filter6] produces'0 (T_17_filter__Filter.t_Filter__iter (Snapshot.inner old_self).current) (Snapshot.inner produced) (T_17_filter__Filter.t_Filter__iter self.current)}
            s2
          | s2 = Filter'0.t_Filter <i> <f> {self.current}
              (fun (riter'0:i) (rfunc'0:f) ->
                {inv'2 rfunc'0}
                Borrow.borrow_mut <f> {rfunc'0}
                  (fun (_ret':borrowed f) ->
                     [ &_24 <- _ret' ] 
                    -{inv'2 _ret'.final}-
                     [ &self <- { self with current = Filter'0.C_Filter riter'0 _ret'.final ; } ] 
                    s3))
          | s3 =  [ &_27 <- n ] s4
          | s4 =  [ &_25 <- (_27) ] s5
          | s5 = call_mut'0 {_24} {_25} (fun (_ret':bool) ->  [ &_23 <- _ret' ] s6)
          | s6 = bb9 ]
          
        | bb9 = any [ br0 -> {_23 = false} (! bb12) | br1 -> {_23} (! bb10) ] 
        | bb12 = s0 [ s0 = {[@expl:type invariant] inv'3 n} s1 | s1 = -{resolve'0 n}- s2 | s2 = bb14 ] 
        | bb14 = bb15
        | bb15 = bb3 ]
         ]
      
    | bb13 = s0
      [ s0 = {[@expl:type invariant] match _15 with
          | Option'0.C_Some x'0 -> inv'3 x'0
          | _ -> true
          end}
        s1
      | s1 = -{match _15 with
          | Option'0.C_Some x'1 -> resolve'0 x'1
          | _ -> true
          end}-
        s2
      | s2 = {[@expl:type invariant] inv'0 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = bb16 ]
      
    | bb16 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb19 ] 
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'1 self}- s2
      | s2 =  [ &_0 <- Option'0.C_Some n ] s3
      | s3 = bb11 ]
      
    | bb11 = bb17
    | bb17 = bb18
    | bb18 = bb19
    | bb19 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option t_Item'0 = any_l ()
    | & self : borrowed (Filter'0.t_Filter i f) = self
    | & old_self : Snapshot.snap_ty (borrowed (Filter'0.t_Filter i f)) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & _15 : Option'0.t_Option t_Item'0 = any_l ()
    | & _16 : borrowed i = any_l ()
    | & n : t_Item'0 = any_l ()
    | & _19 : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & _23 : bool = any_l ()
    | & _24 : borrowed f = any_l ()
    | & _25 : t_Item'0 = any_l ()
    | & _27 : t_Item'0 = any_l ()
    | & old_3_0 : Snapshot.snap_ty (borrowed (Filter'0.t_Filter i f)) = any_l () ]
    
    [ return' (result:Option'0.t_Option t_Item'0)-> {[@expl:postcondition] [%#s17_filter10] inv'4 result}
      {[@expl:postcondition] [%#s17_filter9] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_17_filter__filter [#"17_filter.rs" 121 0 123 39]
  type i
  
  type p
  
  let%span s17_filter0 = "17_filter.rs" 116 11 116 23
  let%span s17_filter1 = "17_filter.rs" 117 11 117 29
  let%span s17_filter2 = "17_filter.rs" 118 11 118 19
  let%span s17_filter3 = "17_filter.rs" 119 11 119 21
  let%span s17_filter4 = "17_filter.rs" 121 30 121 34
  let%span s17_filter5 = "17_filter.rs" 121 39 121 40
  let%span s17_filter6 = "17_filter.rs" 120 10 120 49
  let%span s17_filter7 = "17_filter.rs" 121 48 121 60
  let%span s17_filter8 = "17_filter.rs" 148 4 148 61
  let%span s17_filter9 = "17_filter.rs" 142 4 142 59
  let%span s17_filter10 = "17_filter.rs" 154 4 154 146
  let%span s17_filter11 = "17_filter.rs" 160 4 160 114
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  let%span scommon19 = "common.rs" 14 15 14 24
  let%span scommon20 = "common.rs" 15 14 15 45
  let%span scommon21 = "common.rs" 19 15 19 21
  let%span scommon22 = "common.rs" 20 15 20 21
  let%span scommon23 = "common.rs" 21 15 21 21
  let%span scommon24 = "common.rs" 22 15 22 32
  let%span scommon25 = "common.rs" 23 15 23 32
  let%span scommon26 = "common.rs" 24 14 24 42
  let%span s17_filter27 = "17_filter.rs" 22 8 34 9
  
  type t_Item'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  predicate inv'0 (_1 : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon21] inv'0 a)
   -> ([%#scommon22] inv'0 b)
   -> ([%#scommon23] inv'0 c)
   -> ([%#scommon24] produces'0 a ab b)
   -> ([%#scommon25] produces'0 b bc c)  -> ([%#scommon26] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon19] inv'0 self)
   -> ([%#scommon20] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : p)
  
  predicate postcondition_mut'0 (self : borrowed p) (_2 : t_Item'0) (_3 : bool)
  
  predicate postcondition_once'0 (self : p) (_2 : t_Item'0) (_3 : bool)
  
  function fn_mut_once'0 (self : p) (args : t_Item'0) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : p, args : t_Item'0, res : bool . [%#sops18] postcondition_once'0 self args res
  = (exists s : borrowed p . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : p) (_2 : p)
  
  function unnest_trans'0 (self : p) (b : p) (c : p) : ()
  
  axiom unnest_trans'0_spec : forall self : p, b : p, c : p . ([%#sops15] unnest'0 self b)
   -> ([%#sops16] unnest'0 b c)  -> ([%#sops17] unnest'0 self c)
  
  function unnest_refl'0 (self : p) : ()
  
  axiom unnest_refl'0_spec : forall self : p . [%#sops14] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed p) (args : t_Item'0) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed p, args : t_Item'0, res : bool . ([%#sops12] postcondition_mut'0 self args res)
   -> ([%#sops13] unnest'0 self.current self.final)
  
  predicate inv'1 (_1 : p)
  
  predicate precondition'0 (self : p) (_2 : t_Item'0)
  
  use T_17_filter__Filter as Filter'0
  
  predicate invariant'0 [#"17_filter.rs" 21 4 21 30] (self : Filter'0.t_Filter i p) =
    [%#s17_filter27] forall f : p, i : t_Item'0 . precondition'0 f (i)
    /\ (forall f : p, g : p . unnest'0 f g  -> f = g)
    /\ (forall f : borrowed p, g : borrowed p, i : t_Item'0, b : bool . f.current = g.current /\ f.final = g.final
     -> postcondition_mut'0 f (i) b = postcondition_mut'0 g (i) b)
    /\ (forall f : borrowed p, i : t_Item'0 . not (postcondition_mut'0 f (i) true /\ postcondition_mut'0 f (i) false))
  
  predicate inv'2 (_1 : Filter'0.t_Filter i p)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Filter'0.t_Filter i p [inv'2 x] . inv'2 x
  = (invariant'0 x
  /\ match x with
    | Filter'0.C_Filter iter func -> inv'0 iter /\ inv'1 func
    end)
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  predicate precise'0 [#"17_filter.rs" 159 0 159 52] (_1 : p) =
    [%#s17_filter11] forall f : borrowed p, i : t_Item'0 . not (postcondition_mut'0 f (i) true
    /\ postcondition_mut'0 f (i) false)
  
  predicate plain'0 [#"17_filter.rs" 153 0 153 50] (_1 : p) =
    [%#s17_filter10] forall f : borrowed p, g : borrowed p, i : t_Item'0, b : bool . f.current = g.current
    /\ f.final = g.final  -> postcondition_mut'0 f (i) b = postcondition_mut'0 g (i) b
  
  predicate no_precondition'0 [#"17_filter.rs" 141 0 141 60] (_1 : p) =
    [%#s17_filter9] forall f : p, i : t_Item'0 . precondition'0 f (i)
  
  predicate immutable'0 [#"17_filter.rs" 147 0 147 54] (_1 : p) =
    [%#s17_filter8] forall f : p, g : p . unnest'0 f g  -> f = g
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec filter (iter:i) (f:p) (return'  (ret:Filter'0.t_Filter i p))= {[%#s17_filter5] inv'1 f}
    {[%#s17_filter4] inv'0 iter}
    {[%#s17_filter3] precise'0 f}
    {[%#s17_filter2] plain'0 f}
    {[%#s17_filter1] no_precondition'0 f}
    {[%#s17_filter0] immutable'0 f}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = s0 [ s0 =  [ &_0 <- Filter'0.C_Filter iter f ] s1 | s1 = bb6 ] 
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = return' {_0} ]
    ) [ & _0 : Filter'0.t_Filter i p = any_l () | & iter : i = iter | & f : p = f ] 
    [ return' (result:Filter'0.t_Filter i p)-> {[@expl:postcondition] [%#s17_filter7] inv'2 result}
      {[@expl:postcondition] [%#s17_filter6] T_17_filter__Filter.t_Filter__iter result = iter
      /\ T_17_filter__Filter.t_Filter__func result = f}
      (! return' {result}) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__mem__manually_drop__ManuallyDrop
  type t_ManuallyDrop 't =
    | C_ManuallyDrop 't
  
  let rec t_ManuallyDrop < 't > (input:t_ManuallyDrop 't) (ret  (value:'t))= any
    [ good (value:'t)-> {C_ManuallyDrop value = input} (! ret {value}) ]
    
end
module T_alloc__vec__into_iter__IntoIter
  use prelude.prelude.Opaque
  
  use T_core__mem__manually_drop__ManuallyDrop as ManuallyDrop'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_IntoIter 't 'a =
    | C_IntoIter (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't) usize (ManuallyDrop'0.t_ManuallyDrop 'a) (NonNull'0.t_NonNull 't) opaque_ptr
  
  let rec t_IntoIter < 't > < 'a > (input:t_IntoIter 't 'a) (ret  (buf:NonNull'0.t_NonNull 't) (phantom:PhantomData'0.t_PhantomData 't) (cap:usize) (alloc:ManuallyDrop'0.t_ManuallyDrop 'a) (ptr:NonNull'0.t_NonNull 't) (end':opaque_ptr))= any
    [ good (buf:NonNull'0.t_NonNull 't) (phantom:PhantomData'0.t_PhantomData 't) (cap:usize) (alloc:ManuallyDrop'0.t_ManuallyDrop 'a) (ptr:NonNull'0.t_NonNull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      = input}
      (! ret {buf} {phantom} {cap} {alloc} {ptr} {end'}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module T_core__iter__adapters__filter__Filter
  type t_Filter 'i 'p =
    | C_Filter 'i 'p
  
  let rec t_Filter < 'i > < 'p > (input:t_Filter 'i 'p) (ret  (iter:'i) (predicate':'p))= any
    [ good (iter:'i) (predicate':'p)-> {C_Filter iter predicate' = input} (! ret {iter} {predicate'}) ]
    
end
module T_17_filter__less_than__qyClosure2 [#"17_filter.rs" 133 12 133 42]
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_17_filter__less_than__qyClosure2  =
    | M_17_filter__less_than__qyClosure2 uint32
  
  let rec m_17_filter__less_than__qyClosure2 (input:m_17_filter__less_than__qyClosure2) (ret  (n:uint32))= any
    [ good (n:uint32)-> {M_17_filter__less_than__qyClosure2 n = input} (! ret {n}) ]
    
end
module M_17_filter__less_than__qyClosure2 [#"17_filter.rs" 133 12 133 42]
  let%span s17_filter0 = "17_filter.rs" 133 22 133 40
  let%span sresolve1 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use T_17_filter__less_than__qyClosure2 as Closure'0
  
  function field_0'0 [#"17_filter.rs" 133 12 133 42] (self : Closure'0.m_17_filter__less_than__qyClosure2) : uint32 =
    let Closure'0.M_17_filter__less_than__qyClosure2 a = self in a
  
  predicate unnest'0 [#"17_filter.rs" 133 12 133 42] (self : Closure'0.m_17_filter__less_than__qyClosure2) (_2 : Closure'0.m_17_filter__less_than__qyClosure2)
    
   =
    field_0'0 _2 = field_0'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed Closure'0.m_17_filter__less_than__qyClosure2) =
    [%#sresolve1] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed Closure'0.m_17_filter__less_than__qyClosure2) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec m_17_filter__less_than__qyClosure2 (_1:borrowed Closure'0.m_17_filter__less_than__qyClosure2) (i:uint32) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 = Closure'0.m_17_filter__less_than__qyClosure2 {_1.current}
          (fun (r'0:uint32) -> UInt32.lt {i} {r'0} (fun (_ret':bool) ->  [ &res <- _ret' ] s2))
      | s2 =  [ &_0 <- res ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : bool = any_l ()
    | & _1 : borrowed Closure'0.m_17_filter__less_than__qyClosure2 = _1
    | & i : uint32 = i
    | & res : bool = any_l () ]
    
    [ return' (result:bool)-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s17_filter0] result = (i < field_0'0 _1.final)}
      (! return' {result}) ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module M_17_filter__less_than [#"17_filter.rs" 130 0 130 49]
  let%span s17_filter0 = "17_filter.rs" 128 0 128 72
  let%span s17_filter1 = "17_filter.rs" 129 0 129 81
  let%span siter2 = "../../../../creusot-contracts/src/std/iter.rs" 101 0 214 1
  let%span siter3 = "../../../../creusot-contracts/src/std/iter.rs" 144 27 144 47
  let%span siter4 = "../../../../creusot-contracts/src/std/iter.rs" 145 27 145 53
  let%span siter5 = "../../../../creusot-contracts/src/std/iter.rs" 146 27 146 43
  let%span siter6 = "../../../../creusot-contracts/src/std/iter.rs" 147 27 147 45
  let%span siter7 = "../../../../creusot-contracts/src/std/iter.rs" 173 16 175 83
  let%span svec8 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sops9 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span sseq10 = "../../../../creusot-contracts/src/logic/seq.rs" 145 8 145 79
  let%span svec11 = "../../../../creusot-contracts/src/std/vec.rs" 194 20 194 24
  let%span svec12 = "../../../../creusot-contracts/src/std/vec.rs" 200 20 200 33
  let%span sfilter13 = "../../../../creusot-contracts/src/std/iter/filter.rs" 75 4 75 61
  let%span sfilter14 = "../../../../creusot-contracts/src/std/iter/filter.rs" 67 4 67 59
  let%span sfilter15 = "../../../../creusot-contracts/src/std/iter/filter.rs" 83 4 83 146
  let%span sfilter16 = "../../../../creusot-contracts/src/std/iter/filter.rs" 90 4 90 114
  let%span sfilter17 = "../../../../creusot-contracts/src/std/iter/filter.rs" 19 4 19 41
  let%span sfilter18 = "../../../../creusot-contracts/src/std/iter/filter.rs" 27 4 27 41
  let%span sfilter19 = "../../../../creusot-contracts/src/std/iter/filter.rs" 102 12 104 47
  let%span sfilter20 = "../../../../creusot-contracts/src/std/iter/filter.rs" 111 8 124 9
  let%span svec21 = "../../../../creusot-contracts/src/std/vec.rs" 292 20 292 32
  let%span sfilter22 = "../../../../creusot-contracts/src/std/iter/filter.rs" 129 15 129 24
  let%span sfilter23 = "../../../../creusot-contracts/src/std/iter/filter.rs" 130 14 130 45
  let%span sfilter24 = "../../../../creusot-contracts/src/std/iter/filter.rs" 137 15 137 21
  let%span sfilter25 = "../../../../creusot-contracts/src/std/iter/filter.rs" 138 15 138 21
  let%span sfilter26 = "../../../../creusot-contracts/src/std/iter/filter.rs" 139 15 139 21
  let%span sfilter27 = "../../../../creusot-contracts/src/std/iter/filter.rs" 140 15 140 32
  let%span sfilter28 = "../../../../creusot-contracts/src/std/iter/filter.rs" 141 15 141 32
  let%span sfilter29 = "../../../../creusot-contracts/src/std/iter/filter.rs" 142 14 142 42
  let%span svec30 = "../../../../creusot-contracts/src/std/vec.rs" 269 12 269 41
  let%span svec31 = "../../../../creusot-contracts/src/std/vec.rs" 262 20 262 57
  let%span sfilter32 = "../../../../creusot-contracts/src/std/iter/filter.rs" 35 4 35 41
  let%span sfilter33 = "../../../../creusot-contracts/src/std/iter/filter.rs" 36 14 36 68
  let%span sinvariant34 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span svec35 = "../../../../creusot-contracts/src/std/vec.rs" 275 14 275 45
  let%span svec36 = "../../../../creusot-contracts/src/std/vec.rs" 273 4 273 10
  let%span svec37 = "../../../../creusot-contracts/src/std/vec.rs" 282 15 282 32
  let%span svec38 = "../../../../creusot-contracts/src/std/vec.rs" 283 15 283 32
  let%span svec39 = "../../../../creusot-contracts/src/std/vec.rs" 284 14 284 42
  let%span svec40 = "../../../../creusot-contracts/src/std/vec.rs" 280 4 280 10
  let%span sresolve41 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span smodel42 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  
  use T_17_filter__less_than__qyClosure2 as Closure'0
  
  use prelude.prelude.Borrow
  
  predicate inv'6 (_1 : borrowed Closure'0.m_17_filter__less_than__qyClosure2)
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed Closure'0.m_17_filter__less_than__qyClosure2 [inv'6 x] . inv'6 x
  = true
  
  use seq.Seq
  
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_alloc__vec__into_iter__IntoIter as IntoIter'0
  
  use seq.Seq
  
  function view'1 (self : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) : Seq.seq uint32
  
  predicate produces'1 (self : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) (visited : Seq.seq uint32) (rhs : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))
    
   =
    [%#svec30] view'1 self = Seq.(++) visited (view'1 rhs)
  
  function produces_trans'1 (a : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) (ab : Seq.seq uint32) (b : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) (bc : Seq.seq uint32) (c : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) : ()
    
   =
    [%#svec40] ()
  
  axiom produces_trans'1_spec : forall a : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global), ab : Seq.seq uint32, b : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global), bc : Seq.seq uint32, c : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global) . ([%#svec37] produces'1 a ab b)
   -> ([%#svec38] produces'1 b bc c)  -> ([%#svec39] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 (self : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) : () =
    [%#svec36] ()
  
  axiom produces_refl'1_spec : forall self : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global) . [%#svec35] produces'1 self (Seq.empty  : Seq.seq uint32) self
  
  use T_core__iter__adapters__filter__Filter as Filter'0
  
  function field_0'0 [#"17_filter.rs" 133 12 133 42] (self : Closure'0.m_17_filter__less_than__qyClosure2) : uint32 =
    let Closure'0.M_17_filter__less_than__qyClosure2 a = self in a
  
  predicate unnest'0 [#"17_filter.rs" 133 12 133 42] (self : Closure'0.m_17_filter__less_than__qyClosure2) (_2 : Closure'0.m_17_filter__less_than__qyClosure2)
    
   =
    field_0'0 _2 = field_0'0 self
  
  predicate postcondition_mut'0 [#"17_filter.rs" 133 12 133 42] (self : borrowed Closure'0.m_17_filter__less_than__qyClosure2) (args : uint32) (result : bool)
    
   =
    (let (i) = args in result = (i < field_0'0 self.final)) /\ unnest'0 self.current self.final
  
  use seq.Seq
  
  use map.Map
  
  use seq.Seq
  
  predicate inv'1 (_1 : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))
  
  predicate inv'3 (_1 : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2)
    
  
  function iter'0 (self : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2) : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)
    
  
  axiom iter'0_spec : forall self : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2 . [%#sfilter17] inv'3 self
   -> inv'1 (iter'0 self)
  
  use map.Map
  
  predicate inv'2 (_1 : Closure'0.m_17_filter__less_than__qyClosure2)
  
  function func'0 (self : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2) : Closure'0.m_17_filter__less_than__qyClosure2
    
  
  axiom func'0_spec : forall self : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2 . [%#sfilter18] inv'3 self
   -> inv'2 (func'0 self)
  
  predicate produces'0 (self : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2) (visited : Seq.seq uint32) (succ : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2)
    
   =
    [%#sfilter20] unnest'0 (func'0 self) (func'0 succ)
    /\ (exists s : Seq.seq uint32, f : Map.map int int . produces'1 (iter'0 self) s (iter'0 succ)
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited
     -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall bor_f : borrowed Closure'0.m_17_filter__less_than__qyClosure2, i : int . bor_f.current = func'0 self
    /\ bor_f.final = func'0 self
     -> 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
    = postcondition_mut'0 bor_f (Seq.get s i) true))
  
  function produces_trans'0 (a : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2) (ab : Seq.seq uint32) (b : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2) (bc : Seq.seq uint32) (c : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2) : ()
    
  
  axiom produces_trans'0_spec : forall a : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2, ab : Seq.seq uint32, b : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2, bc : Seq.seq uint32, c : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2 . ([%#sfilter24] inv'3 a)
   -> ([%#sfilter25] inv'3 b)
   -> ([%#sfilter26] inv'3 c)
   -> ([%#sfilter27] produces'0 a ab b)
   -> ([%#sfilter28] produces'0 b bc c)  -> ([%#sfilter29] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2) : ()
    
  
  axiom produces_refl'0_spec : forall self : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2 . ([%#sfilter22] inv'3 self)
   -> ([%#sfilter23] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  
  predicate inv'5 (_1 : Seq.seq uint32)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Seq.seq uint32 [inv'5 x] . inv'5 x = true
  
  predicate invariant'1 (self : borrowed (Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2))
    
   =
    [%#sinvariant34] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_1 : borrowed (Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2))
    
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2) [inv'4 x] . inv'4 x
  = invariant'1 x
  
  predicate invariant'0 (self : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2)
    
  
  axiom inv_axiom'3 [@rewrite] : forall x : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2 [inv'3 x] . inv'3 x
  = (invariant'0 x
  /\ match x with
    | Filter'0.C_Filter iter predicate' -> true
    end)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Closure'0.m_17_filter__less_than__qyClosure2 [inv'2 x] . inv'2 x = true
  
  axiom inv_axiom'1 [@rewrite] : forall x : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global) [inv'1 x] . inv'1 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec uint32 (Global'0.t_Global))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec uint32 (Global'0.t_Global) [inv'0 x] . inv'0 x = true
  
  predicate contains'0 (self : Seq.seq uint32) (e : uint32) =
    [%#sseq10] exists i : int . 0 <= i /\ i < Seq.length self /\ Seq.get self i = e
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'0 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) : Seq.seq uint32
  
  axiom view'0_spec : forall self : Vec'0.t_Vec uint32 (Global'0.t_Global) . [%#svec8] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) (ix : int) : uint32 =
    [%#sops9] Seq.get (view'0 self) ix
  
  use prelude.prelude.Intrinsic
  
  predicate from_iter_post'0 (prod : Seq.seq uint32) (res : Vec'0.t_Vec uint32 (Global'0.t_Global)) =
    [%#svec21] prod = view'0 res
  
  function func_mut'0 (self : borrowed (Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2)) : borrowed Closure'0.m_17_filter__less_than__qyClosure2
    
  
  axiom func_mut'0_spec : forall self : borrowed (Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2) . ([%#sfilter33] func'0 self.current
  = (func_mut'0 self).current
  /\ func'0 self.final = (func_mut'0 self).final)
  && ([%#sfilter32] inv'4 self  -> inv'6 (func_mut'0 self))
  
  function view'2 (self : borrowed (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))) : Seq.seq uint32 =
    [%#smodel42] view'1 self.current
  
  predicate resolve'1 (self : borrowed (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))) =
    [%#sresolve41] self.final = self.current
  
  predicate completed'1 (self : borrowed (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))) =
    [%#svec31] resolve'1 self /\ view'2 self = (Seq.empty  : Seq.seq uint32)
  
  predicate completed'0 (self : borrowed (Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2))
    
   =
    [%#sfilter19] (exists s : Seq.seq uint32, e : borrowed (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) . produces'1 (iter'0 self.current) s e.current
    /\ completed'1 e
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> postcondition_mut'0 (func_mut'0 self) (Seq.get s i) false))
    /\ func'0 self.current = func'0 self.final
  
  predicate resolve'0 (_1 : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2)
    
   =
    true
  
  let rec collect'0 (self:Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2) (return'  (ret:Vec'0.t_Vec uint32 (Global'0.t_Global)))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:Vec'0.t_Vec uint32 (Global'0.t_Global))-> {inv'0 result}
      {[%#siter7] exists done' : borrowed (Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2), prod : Seq.seq uint32 . inv'4 done'
      /\ inv'5 prod
      /\ resolve'0 done'.final
      /\ completed'0 done' /\ produces'0 self prod done'.current /\ from_iter_post'0 prod result}
      (! return' {result}) ]
    
  
  predicate precise'0 (_1 : Closure'0.m_17_filter__less_than__qyClosure2) =
    [%#sfilter16] forall f : borrowed Closure'0.m_17_filter__less_than__qyClosure2, i : uint32 . not (postcondition_mut'0 f (i) true
    /\ postcondition_mut'0 f (i) false)
  
  predicate plain'0 (_1 : Closure'0.m_17_filter__less_than__qyClosure2) =
    [%#sfilter15] forall f : borrowed Closure'0.m_17_filter__less_than__qyClosure2, g : borrowed Closure'0.m_17_filter__less_than__qyClosure2, i : uint32, b : bool . f.current
    = g.current
    /\ f.final = g.final  -> postcondition_mut'0 f (i) b = postcondition_mut'0 g (i) b
  
  predicate precondition'0 [#"17_filter.rs" 133 12 133 42] (self : Closure'0.m_17_filter__less_than__qyClosure2) (args : uint32)
    
   =
    let (i) = args in true
  
  predicate no_precondition'0 (_1 : Closure'0.m_17_filter__less_than__qyClosure2) =
    [%#sfilter14] forall f : Closure'0.m_17_filter__less_than__qyClosure2, i : uint32 . precondition'0 f (i)
  
  predicate immutable'0 (_1 : Closure'0.m_17_filter__less_than__qyClosure2) =
    [%#sfilter13] forall f : Closure'0.m_17_filter__less_than__qyClosure2, g : Closure'0.m_17_filter__less_than__qyClosure2 . unnest'0 f g
     -> f = g
  
  let rec filter'0 (self:IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) (predicate':Closure'0.m_17_filter__less_than__qyClosure2) (return'  (ret:Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2))= {[@expl:precondition] inv'2 predicate'}
    {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [%#siter6] precise'0 predicate'}
    {[@expl:precondition] [%#siter5] plain'0 predicate'}
    {[@expl:precondition] [%#siter4] no_precondition'0 predicate'}
    {[@expl:precondition] [%#siter3] immutable'0 predicate'}
    any
    [ return' (result:Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2)-> {inv'3 result}
      {[%#siter2] iter'0 result = self /\ func'0 result = predicate'}
      (! return' {result}) ]
    
  
  predicate into_iter_post'0 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) (res : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))
    
   =
    [%#svec12] view'0 self = view'1 res
  
  predicate into_iter_pre'0 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) =
    [%#svec11] true
  
  let rec into_iter'0 (self:Vec'0.t_Vec uint32 (Global'0.t_Global)) (return'  (ret:IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)))= {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [%#siter2] into_iter_pre'0 self}
    any
    [ return' (result:IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))-> {inv'1 result}
      {[%#siter2] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec less_than (v:Vec'0.t_Vec uint32 (Global'0.t_Global)) (n:uint32) (return'  (ret:Vec'0.t_Vec uint32 (Global'0.t_Global)))= (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 = into_iter'0 {v} (fun (_ret':IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) ->  [ &_6 <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_8 <- Closure'0.M_17_filter__less_than__qyClosure2 n ] s1
      | s1 = filter'0 {_6} {_8}
          (fun (_ret':Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2) ->
             [ &_5 <- _ret' ] 
            s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = collect'0 {_5} (fun (_ret':Vec'0.t_Vec uint32 (Global'0.t_Global)) ->  [ &_0 <- _ret' ] s1) | s1 = bb4 ]
      
    | bb4 = bb5
    | bb5 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_Vec uint32 (Global'0.t_Global) = any_l ()
    | & v : Vec'0.t_Vec uint32 (Global'0.t_Global) = v
    | & n : uint32 = n
    | & _5 : Filter'0.t_Filter (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) Closure'0.m_17_filter__less_than__qyClosure2 = any_l ()
    | & _6 : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global) = any_l ()
    | & _8 : Closure'0.m_17_filter__less_than__qyClosure2 = any_l () ]
    
    [ return' (result:Vec'0.t_Vec uint32 (Global'0.t_Global))-> {[@expl:postcondition] [%#s17_filter1] forall i : int . 0
      <= i
      /\ i < Seq.length (view'0 result)  -> contains'0 (view'0 v) (index_logic'0 result i)}
      {[@expl:postcondition] [%#s17_filter0] forall i : int . 0 <= i /\ i < Seq.length (view'0 result)
       -> index_logic'0 result i < n}
      (! return' {result}) ]
    
end
module M_17_filter__qyi7327926061906560282 [#"17_filter.rs" 18 0 18 72] (* <Filter<I, F> as creusot_contracts::Invariant> *)
  type i
  
  type f
end
module M_17_filter__qyi17392541228996028033 [#"17_filter.rs" 38 0 38 71] (* <Filter<I, F> as common::Iterator> *)
  type i
  
  type f
  
  let%span s17_filter0 = "17_filter.rs" 55 4 55 26
  let%span s17_filter1 = "17_filter.rs" 93 4 93 41
  let%span s17_filter2 = "17_filter.rs" 65 4 65 90
  let%span s17_filter3 = "17_filter.rs" 72 8 85 9
  let%span s17_filter4 = "17_filter.rs" 45 12 47 43
  let%span s17_filter5 = "17_filter.rs" 22 8 34 9
  let%span sinvariant6 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  type t_Item'0
  
  predicate inv'5 (_1 : t_Item'0)
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'5 a_0
    end
  
  use T_17_filter__Filter as Filter'0
  
  predicate inv'0 (_1 : Filter'0.t_Filter i f)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (Filter'0.t_Filter i f)) =
    [%#sinvariant6] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Filter'0.t_Filter i f))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Filter'0.t_Filter i f) [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate inv'4 (_1 : f)
  
  predicate inv'3 (_1 : i)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : bool)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  predicate invariant'0 [#"17_filter.rs" 21 4 21 30] (self : Filter'0.t_Filter i f) =
    [%#s17_filter5] forall f : f, i : t_Item'0 . precondition'0 f (i)
    /\ (forall f : f, g : f . unnest'0 f g  -> f = g)
    /\ (forall f : borrowed f, g : borrowed f, i : t_Item'0, b : bool . f.current = g.current /\ f.final = g.final
     -> postcondition_mut'0 f (i) b = postcondition_mut'0 g (i) b)
    /\ (forall f : borrowed f, i : t_Item'0 . not (postcondition_mut'0 f (i) true /\ postcondition_mut'0 f (i) false))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Filter'0.t_Filter i f [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Filter'0.C_Filter iter func -> inv'3 iter /\ inv'4 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  predicate completed'0 [#"17_filter.rs" 43 4 43 35] (self : borrowed (Filter'0.t_Filter i f)) =
    [%#s17_filter4] (exists s : Seq.seq t_Item'0, e : borrowed i . produces'1 (T_17_filter__Filter.t_Filter__iter self.current) s e.current
    /\ completed'1 e
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> postcondition_mut'0 (Borrow.borrow_logic (T_17_filter__Filter.t_Filter__func self.current) (T_17_filter__Filter.t_Filter__func self.final) (Borrow.inherit_id (Borrow.get_id self) 2)) (Seq.get s i) false))
    /\ T_17_filter__Filter.t_Filter__func self.current = T_17_filter__Filter.t_Filter__func self.final
  
  use map.Map
  
  use map.Map
  
  predicate produces'0 [#"17_filter.rs" 71 4 71 67] (self : Filter'0.t_Filter i f) (visited : Seq.seq t_Item'0) (succ : Filter'0.t_Filter i f)
    
   =
    [%#s17_filter3] unnest'0 (T_17_filter__Filter.t_Filter__func self) (T_17_filter__Filter.t_Filter__func succ)
    /\ (exists s : Seq.seq t_Item'0, f : Map.map int int . produces'1 (T_17_filter__Filter.t_Filter__iter self) s (T_17_filter__Filter.t_Filter__iter succ)
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited
     -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall bor_f : borrowed f, i : int . bor_f.current = T_17_filter__Filter.t_Filter__func self
    /\ bor_f.final = T_17_filter__Filter.t_Filter__func self
     -> 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
    = postcondition_mut'0 bor_f (Seq.get s i) true))
  
  use seq.Seq
  
  goal produces_refl_refn : [%#s17_filter0] forall self : Filter'0.t_Filter i f . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  goal next_refn : [%#s17_filter1] forall self : borrowed (Filter'0.t_Filter i f) . inv'1 self
   -> inv'1 self
  /\ inv'1 self
  /\ (forall result : Option'0.t_Option t_Item'0 . inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_trans_refn : [%#s17_filter2] forall a : Filter'0.t_Filter i f . forall ab : Seq.seq t_Item'0 . forall b : Filter'0.t_Filter i f . forall bc : Seq.seq t_Item'0 . forall c : Filter'0.t_Filter i f . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
