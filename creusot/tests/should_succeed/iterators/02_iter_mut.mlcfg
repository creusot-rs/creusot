
module C02IterMut_Common_Iterator_Invariant_Stub
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C02IterMut_Common_Iterator_Invariant_Interface
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C02IterMut_Common_Iterator_Invariant
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self) =
    [#"../common.rs" 29 8 29 12] true
  val invariant' [#"../common.rs" 28 4 28 30] (self : self) : bool
    ensures { result = invariant' self }
    
end
module C02IterMut_IterMut_Type
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  type t_itermut 't =
    | C_IterMut (borrowed (seq 't))
    
  let function itermut_inner (self : t_itermut 't) : borrowed (seq 't) = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IterMut a -> a
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type
  type t
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module C02IterMut_Impl0_Completed_Stub
  type t
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate completed [#"../02_iter_mut.rs" 20 4 20 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t))
end
module C02IterMut_Impl0_Completed_Interface
  type t
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate completed [#"../02_iter_mut.rs" 20 4 20 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t))
end
module C02IterMut_Impl0_Completed
  type t
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = C02IterMut_IterMut_Type.t_itermut t
  predicate completed [#"../02_iter_mut.rs" 20 4 20 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) =
    [#"../02_iter_mut.rs" 21 20 21 70] Resolve0.resolve self /\ Seq.(==) (ShallowModel0.shallow_model (C02IterMut_IterMut_Type.itermut_inner ( * self))) (Seq.empty )
  val completed [#"../02_iter_mut.rs" 20 4 20 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : bool
    ensures { result = completed self }
    
end
module Core_Num_Impl12_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  val shallow_model (self : seq t) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Stub
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function to_mut_seq (self : borrowed (seq t)) : Seq.seq (borrowed t)
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function to_mut_seq (self : borrowed (seq t)) : Seq.seq (borrowed t)
  axiom to_mut_seq_spec : forall self : borrowed (seq t) . (forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  ^ Seq.get (to_mut_seq self) i = Seq.get (ShallowModel1.shallow_model ( ^ self)) i) && (forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  * Seq.get (to_mut_seq self) i = Seq.get (ShallowModel0.shallow_model self) i) && Seq.length (to_mut_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function to_mut_seq (self : borrowed (seq t)) : Seq.seq (borrowed t)
  val to_mut_seq (self : borrowed (seq t)) : Seq.seq (borrowed t)
    ensures { result = to_mut_seq self }
    
  axiom to_mut_seq_spec : forall self : borrowed (seq t) . (forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  ^ Seq.get (to_mut_seq self) i = Seq.get (ShallowModel1.shallow_model ( ^ self)) i) && (forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  * Seq.get (to_mut_seq self) i = Seq.get (ShallowModel0.shallow_model self) i) && Seq.length (to_mut_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module C02IterMut_Impl0_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate produces [#"../02_iter_mut.rs" 25 4 25 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
end
module C02IterMut_Impl0_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate produces [#"../02_iter_mut.rs" 25 4 25 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
end
module C02IterMut_Impl0_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Stub as ToMutSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate produces [#"../02_iter_mut.rs" 25 4 25 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
   =
    [#"../02_iter_mut.rs" 24 4 24 16] Seq.(==) (ToMutSeq0.to_mut_seq (C02IterMut_IterMut_Type.itermut_inner self)) (Seq.(++) visited (ToMutSeq0.to_mut_seq (C02IterMut_IterMut_Type.itermut_inner tl)))
  val produces [#"../02_iter_mut.rs" 25 4 25 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = produces self visited tl }
    
end
module C02IterMut_Impl0_Invariant_Stub
  type t
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant' [#"../02_iter_mut.rs" 30 4 30 30] (self : C02IterMut_IterMut_Type.t_itermut t)
end
module C02IterMut_Impl0_Invariant_Interface
  type t
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant' [#"../02_iter_mut.rs" 30 4 30 30] (self : C02IterMut_IterMut_Type.t_itermut t)
end
module C02IterMut_Impl0_Invariant
  type t
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  use prelude.Borrow
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate invariant' [#"../02_iter_mut.rs" 30 4 30 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 32 20 32 64] Seq.length (ShallowModel0.shallow_model ( ^ C02IterMut_IterMut_Type.itermut_inner self)) = Seq.length (ShallowModel0.shallow_model ( * C02IterMut_IterMut_Type.itermut_inner self))
  val invariant' [#"../02_iter_mut.rs" 30 4 30 30] (self : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = invariant' self }
    
end
module C02IterMut_Impl0_ProducesRefl_Stub
  type t
  use seq.Seq
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_refl [#"../02_iter_mut.rs" 38 4 38 29] (a : C02IterMut_IterMut_Type.t_itermut t) : ()
end
module C02IterMut_Impl0_ProducesRefl_Interface
  type t
  use seq.Seq
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_refl [#"../02_iter_mut.rs" 38 4 38 29] (a : C02IterMut_IterMut_Type.t_itermut t) : ()
  axiom produces_refl_spec : forall a : C02IterMut_IterMut_Type.t_itermut t . ([#"../02_iter_mut.rs" 36 15 36 28] Invariant0.invariant' a) -> ([#"../02_iter_mut.rs" 37 14 37 39] Produces0.produces a (Seq.empty ) a)
end
module C02IterMut_Impl0_ProducesRefl
  type t
  use seq.Seq
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_refl [#"../02_iter_mut.rs" 38 4 38 29] (a : C02IterMut_IterMut_Type.t_itermut t) : () =
    [#"../02_iter_mut.rs" 35 4 35 10] ()
  val produces_refl [#"../02_iter_mut.rs" 38 4 38 29] (a : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 36 15 36 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C02IterMut_IterMut_Type.t_itermut t . ([#"../02_iter_mut.rs" 36 15 36 28] Invariant0.invariant' a) -> ([#"../02_iter_mut.rs" 37 14 37 39] Produces0.produces a (Seq.empty ) a)
end
module C02IterMut_Impl0_ProducesRefl_Impl
  type t
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq as ToMutSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces as Produces0 with
    type t = t,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone C02IterMut_Impl0_Invariant as Invariant0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec ghost function produces_refl [#"../02_iter_mut.rs" 38 4 38 29] (a : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 36 15 36 28] Invariant0.invariant' a}
    ensures { [#"../02_iter_mut.rs" 37 14 37 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_iter_mut.rs" 35 4 35 10] ()
end
module C02IterMut_Impl0_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_trans [#"../02_iter_mut.rs" 47 4 47 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    
end
module C02IterMut_Impl0_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_trans [#"../02_iter_mut.rs" 47 4 47 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    
  axiom produces_trans_spec : forall a : C02IterMut_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : C02IterMut_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : C02IterMut_IterMut_Type.t_itermut t . ([#"../02_iter_mut.rs" 41 15 41 28] Invariant0.invariant' a) -> ([#"../02_iter_mut.rs" 42 15 42 28] Invariant0.invariant' b) -> ([#"../02_iter_mut.rs" 43 15 43 28] Invariant0.invariant' c) -> ([#"../02_iter_mut.rs" 44 15 44 32] Produces0.produces a ab b) -> ([#"../02_iter_mut.rs" 45 15 45 32] Produces0.produces b bc c) -> ([#"../02_iter_mut.rs" 46 14 46 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C02IterMut_Impl0_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_trans [#"../02_iter_mut.rs" 47 4 47 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    
   =
    [#"../02_iter_mut.rs" 40 4 40 10] ()
  val produces_trans [#"../02_iter_mut.rs" 47 4 47 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 41 15 41 28] Invariant0.invariant' a}
    requires {[#"../02_iter_mut.rs" 42 15 42 28] Invariant0.invariant' b}
    requires {[#"../02_iter_mut.rs" 43 15 43 28] Invariant0.invariant' c}
    requires {[#"../02_iter_mut.rs" 44 15 44 32] Produces0.produces a ab b}
    requires {[#"../02_iter_mut.rs" 45 15 45 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C02IterMut_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : C02IterMut_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : C02IterMut_IterMut_Type.t_itermut t . ([#"../02_iter_mut.rs" 41 15 41 28] Invariant0.invariant' a) -> ([#"../02_iter_mut.rs" 42 15 42 28] Invariant0.invariant' b) -> ([#"../02_iter_mut.rs" 43 15 43 28] Invariant0.invariant' c) -> ([#"../02_iter_mut.rs" 44 15 44 32] Produces0.produces a ab b) -> ([#"../02_iter_mut.rs" 45 15 45 32] Produces0.produces b bc c) -> ([#"../02_iter_mut.rs" 46 14 46 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C02IterMut_Impl0_ProducesTrans_Impl
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq as ToMutSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces as Produces0 with
    type t = t,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone C02IterMut_Impl0_Invariant as Invariant0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec ghost function produces_trans [#"../02_iter_mut.rs" 47 4 47 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 41 15 41 28] Invariant0.invariant' a}
    requires {[#"../02_iter_mut.rs" 42 15 42 28] Invariant0.invariant' b}
    requires {[#"../02_iter_mut.rs" 43 15 43 28] Invariant0.invariant' c}
    requires {[#"../02_iter_mut.rs" 44 15 44 32] Produces0.produces a ab b}
    requires {[#"../02_iter_mut.rs" 45 15 45 32] Produces0.produces b bc c}
    ensures { [#"../02_iter_mut.rs" 46 14 46 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_iter_mut.rs" 40 4 40 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Logic_Seq_Impl0_Tail_Stub
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Tail_Interface
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Tail
  type t
  use seq.Seq
  use seq_ext.SeqExt
  function tail (self : Seq.seq t) : Seq.seq t =
    SeqExt.subsequence self 1 (Seq.length self)
  val tail (self : Seq.seq t) : Seq.seq t
    ensures { result = tail self }
    
end
module Core_Slice_Impl0_TakeFirstMut_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Stub as Tail0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  val take_first_mut [@cfg:stackify] (self : borrowed (borrowed (seq t))) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { match (result) with
      | Core_Option_Option_Type.C_Some r ->  * r = Seq.get (ShallowModel0.shallow_model ( *  * self)) 0 /\  ^ r = Seq.get (ShallowModel0.shallow_model ( ^  * self)) 0 /\ Seq.length (ShallowModel0.shallow_model ( *  * self)) > 0 /\ Seq.length (ShallowModel0.shallow_model ( ^  * self)) > 0 /\ Seq.(==) (ShallowModel0.shallow_model ( *  ^ self)) (Tail0.tail (ShallowModel0.shallow_model ( *  * self))) /\ Seq.(==) (ShallowModel0.shallow_model ( ^  ^ self)) (Tail0.tail (ShallowModel0.shallow_model ( ^  * self)))
      | Core_Option_Option_Type.C_None ->  ^ self =  * self /\ Seq.length (ShallowModel0.shallow_model ( *  * self)) = 0
      end }
    
end
module Core_Slice_Impl0_TakeFirstMut
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Interface as Tail0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  val take_first_mut [@cfg:stackify] (self : borrowed (borrowed (seq t))) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { match (result) with
      | Core_Option_Option_Type.C_Some r ->  * r = Seq.get (ShallowModel0.shallow_model ( *  * self)) 0 /\  ^ r = Seq.get (ShallowModel0.shallow_model ( ^  * self)) 0 /\ Seq.length (ShallowModel0.shallow_model ( *  * self)) > 0 /\ Seq.length (ShallowModel0.shallow_model ( ^  * self)) > 0 /\ Seq.(==) (ShallowModel0.shallow_model ( *  ^ self)) (Tail0.tail (ShallowModel0.shallow_model ( *  * self))) /\ Seq.(==) (ShallowModel0.shallow_model ( ^  ^ self)) (Tail0.tail (ShallowModel0.shallow_model ( ^  * self)))
      | Core_Option_Option_Type.C_None ->  ^ self =  * self /\ Seq.length (ShallowModel0.shallow_model ( *  * self)) = 0
      end }
    
end
module C02IterMut_Impl0_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with
    type t = t
  clone C02IterMut_Impl0_Completed_Stub as Completed0 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  val next [@cfg:stackify] [#"../02_iter_mut.rs" 54 4 54 44] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : Core_Option_Option_Type.t_option (borrowed t)
    requires {[#"../02_iter_mut.rs" 49 4 49 40] Invariant0.invariant' ( * self)}
    ensures { [#"../02_iter_mut.rs" 49 4 49 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../02_iter_mut.rs" 50 14 53 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C02IterMut_Impl0_Next
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl0_Tail as Tail0 with
    type t = t
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq as ToMutSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C02IterMut_IterMut_Type.t_itermut t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Slice_Impl0_TakeFirstMut_Interface as TakeFirstMut0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function Tail0.tail = Tail0.tail,
    val Max0.mAX' = Max0.mAX'
  clone C02IterMut_Impl0_Produces as Produces0 with
    type t = t,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone C02IterMut_Impl0_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve0.resolve,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone C02IterMut_Impl0_Invariant as Invariant0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg next [@cfg:stackify] [#"../02_iter_mut.rs" 54 4 54 44] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : Core_Option_Option_Type.t_option (borrowed t)
    requires {[#"../02_iter_mut.rs" 49 4 49 40] Invariant0.invariant' ( * self)}
    ensures { [#"../02_iter_mut.rs" 49 4 49 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../02_iter_mut.rs" 50 14 53 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (borrowed t);
  var self_1 : borrowed (C02IterMut_IterMut_Type.t_itermut t);
  var _5 : borrowed (borrowed (seq t));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- borrow_mut (C02IterMut_IterMut_Type.itermut_inner ( * self_1));
    self_1 <- { self_1 with current = (let C02IterMut_IterMut_Type.C_IterMut a =  * self_1 in C02IterMut_IterMut_Type.C_IterMut ( ^ _5)) };
    _0 <- ([#"../02_iter_mut.rs" 55 8 55 37] TakeFirstMut0.take_first_mut _5);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C02IterMut_Impl1_IntoIter_Interface
  type t
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  val into_iter [@cfg:stackify] [#"../02_iter_mut.rs" 61 4 61 30] (self : C02IterMut_IterMut_Type.t_itermut t) : C02IterMut_IterMut_Type.t_itermut t
    ensures { [#"../02_iter_mut.rs" 60 14 60 28] result = self }
    
end
module C02IterMut_Impl1_IntoIter
  type t
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = C02IterMut_IterMut_Type.t_itermut t
  let rec cfg into_iter [@cfg:stackify] [#"../02_iter_mut.rs" 61 4 61 30] (self : C02IterMut_IterMut_Type.t_itermut t) : C02IterMut_IterMut_Type.t_itermut t
    ensures { [#"../02_iter_mut.rs" 60 14 60 28] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C02IterMut_IterMut_Type.t_itermut t;
  var self_1 : C02IterMut_IterMut_Type.t_itermut t;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    self_1 <- any C02IterMut_IterMut_Type.t_itermut t;
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type
  type t
  type a
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Core_Ops_Range_RangeFull_Type
  type t_rangefull  =
    | C_RangeFull
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface as ResolveElswhere0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module CreusotContracts_Std1_Slice_Impl9_InBounds_Stub
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate in_bounds (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl9_InBounds_Interface
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate in_bounds (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl9_InBounds
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate in_bounds (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t) =
    true
  val in_bounds (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t) : bool
    ensures { result = in_bounds self _seq }
    
end
module CreusotContracts_Std1_Slice_Impl9_HasValue_Stub
  type t
  use seq.Seq
  use prelude.Slice
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate has_value (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : seq t)
end
module CreusotContracts_Std1_Slice_Impl9_HasValue_Interface
  type t
  use seq.Seq
  use prelude.Slice
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate has_value (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : seq t)
end
module CreusotContracts_Std1_Slice_Impl9_HasValue
  type t
  use seq.Seq
  use prelude.Slice
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate has_value (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : seq t) =
    seq = ShallowModel0.shallow_model out
  val has_value (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : seq t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl9_ResolveElswhere_Stub
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate resolve_elswhere (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl9_ResolveElswhere_Interface
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate resolve_elswhere (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl9_ResolveElswhere
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate resolve_elswhere (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t) =
    true
  val resolve_elswhere (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self _old _fin }
    
end
module Core_Slice_Index_Impl7_Output_Type
  type t
  use prelude.Slice
  use seq.Seq
  type output  =
    seq t
end
module C02IterMut_IterMut_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel3 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val iter_mut [@cfg:stackify] [#"../02_iter_mut.rs" 70 0 70 55] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : C02IterMut_IterMut_Type.t_itermut t
    ensures { [#"../02_iter_mut.rs" 66 10 66 29] ShallowModel0.shallow_model (C02IterMut_IterMut_Type.itermut_inner result) = ShallowModel1.shallow_model v }
    ensures { [#"../02_iter_mut.rs" 67 10 67 31] ShallowModel2.shallow_model ( ^ C02IterMut_IterMut_Type.itermut_inner result) = ShallowModel3.shallow_model ( ^ v) }
    ensures { [#"../02_iter_mut.rs" 68 10 68 35] Seq.length (ShallowModel3.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"../02_iter_mut.rs" 69 10 69 28] Invariant0.invariant' result }
    
end
module C02IterMut_IterMut
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel2 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq as ToMutSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces as Produces0 with
    type t = t,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Core_Slice_Index_Impl7_Output_Type as Output0 with
    type t = t
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  clone CreusotContracts_Std1_Slice_Impl9_ResolveElswhere as ResolveElswhere0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl9_HasValue as HasValue0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Slice_Impl9_InBounds as InBounds0 with
    type t = t
  clone C02IterMut_Impl0_Invariant as Invariant0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone C02IterMut_Impl0_ProducesTrans as ProducesTrans0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C02IterMut_Impl0_ProducesRefl as ProducesRefl0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with
    type t = t,
    type i = Core_Ops_Range_RangeFull_Type.t_rangefull,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    type Output0.output = Output0.output,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  let rec cfg iter_mut [@cfg:stackify] [#"../02_iter_mut.rs" 70 0 70 55] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : C02IterMut_IterMut_Type.t_itermut t
    ensures { [#"../02_iter_mut.rs" 66 10 66 29] ShallowModel0.shallow_model (C02IterMut_IterMut_Type.itermut_inner result) = ShallowModel1.shallow_model v }
    ensures { [#"../02_iter_mut.rs" 67 10 67 31] ShallowModel2.shallow_model ( ^ C02IterMut_IterMut_Type.itermut_inner result) = ShallowModel3.shallow_model ( ^ v) }
    ensures { [#"../02_iter_mut.rs" 68 10 68 35] Seq.length (ShallowModel3.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"../02_iter_mut.rs" 69 10 69 28] Invariant0.invariant' result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C02IterMut_IterMut_Type.t_itermut t;
  var v_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _6 : borrowed (seq t);
  var _7 : borrowed (seq t);
  var _8 : borrowed (seq t);
  var _9 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _10 : Core_Ops_Range_RangeFull_Type.t_rangefull;
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _9 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _9) };
    assume { Resolve0.resolve v_1 };
    _10 <- Core_Ops_Range_RangeFull_Type.C_RangeFull;
    _8 <- ([#"../02_iter_mut.rs" 71 26 71 31] IndexMut0.index_mut _9 _10);
    goto BB1
  }
  BB1 {
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    assume { Resolve1.resolve _8 };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    assume { Resolve1.resolve _7 };
    _0 <- C02IterMut_IterMut_Type.C_IterMut _6;
    return _0
  }
  
end
module C02IterMut_AllZero_Interface
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val all_zero [@cfg:stackify] [#"../02_iter_mut.rs" 76 0 76 35] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../02_iter_mut.rs" 74 10 74 35] Seq.length (ShallowModel0.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"../02_iter_mut.rs" 75 0 75 69] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model v) -> UInt64.to_int (Seq.get (ShallowModel0.shallow_model ( ^ v)) i) = 0 }
    
end
module C02IterMut_AllZero
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.IntSize
  use mach.int.UInt64
  use prelude.Slice
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = C02IterMut_IterMut_Type.t_itermut usize
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = usize
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel3 with
    type t = usize,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel2 with
    type t = seq usize,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone C02IterMut_Impl0_Completed as Completed0 with
    type t = usize,
    predicate Resolve0.resolve = Resolve2.resolve,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq as ToMutSeq0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone C02IterMut_Impl0_Produces as Produces0 with
    type t = usize,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone C02IterMut_Impl0_Invariant as Invariant0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone C02IterMut_Impl0_ProducesTrans as ProducesTrans0 with
    type t = usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C02IterMut_Impl0_ProducesRefl as ProducesRefl0 with
    type t = usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = usize
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C02IterMut_Impl0_Next_Interface as Next0 with
    type t = usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone C02IterMut_Impl1_IntoIter_Interface as IntoIter0 with
    type t = usize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone C02IterMut_IterMut_Interface as IterMut1 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant',
    val Max0.mAX' = Max0.mAX'
  let rec cfg all_zero [@cfg:stackify] [#"../02_iter_mut.rs" 76 0 76 35] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../02_iter_mut.rs" 74 10 74 35] Seq.length (ShallowModel0.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"../02_iter_mut.rs" 75 0 75 69] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model v) -> UInt64.to_int (Seq.get (ShallowModel0.shallow_model ( ^ v)) i) = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var it_4 : C02IterMut_IterMut_Type.t_itermut usize;
  var _5 : C02IterMut_IterMut_Type.t_itermut usize;
  var _6 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var iter_old_7 : Ghost.ghost_ty (C02IterMut_IterMut_Type.t_itermut usize);
  var _9 : ();
  var produced_10 : Ghost.ghost_ty (Seq.seq (borrowed usize));
  var _13 : ();
  var _17 : ();
  var _18 : Core_Option_Option_Type.t_option (borrowed usize);
  var _19 : borrowed (C02IterMut_IterMut_Type.t_itermut usize);
  var _20 : isize;
  var x_21 : borrowed usize;
  var _22 : Ghost.ghost_ty (Seq.seq (borrowed usize));
  var _25 : ();
  var _26 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _6) };
    _5 <- ([#"../02_iter_mut.rs" 77 17 77 28] IterMut1.iter_mut _6);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve v_1 };
    it_4 <- ([#"../02_iter_mut.rs" 77 17 77 40] IntoIter0.into_iter _5);
    goto BB2
  }
  BB2 {
    _9 <- ();
    iter_old_7 <- ([#"../02_iter_mut.rs" 78 19 78 32] Ghost.new it_4);
    goto BB3
  }
  BB3 {
    _13 <- ();
    produced_10 <- ([#"../02_iter_mut.rs" 79 23 79 44] Ghost.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant type_invariant { [#"../02_iter_mut.rs" 80 32 80 46] Invariant0.invariant' it_4 };
    invariant structural { [#"../02_iter_mut.rs" 81 28 81 67] Produces0.produces (Ghost.inner iter_old_7) (Ghost.inner produced_10) it_4 };
    invariant user { [#"../02_iter_mut.rs" 80 4 80 48] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner produced_10) -> UInt64.to_int ( ^ Seq.get (Ghost.inner produced_10) i) = 0 };
    _19 <- borrow_mut it_4;
    it_4 <-  ^ _19;
    _18 <- ([#"../02_iter_mut.rs" 84 14 84 23] Next0.next _19);
    goto BB6
  }
  BB6 {
    switch (_18)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB9
      end
  }
  BB7 {
    _0 <- ();
    return _0
  }
  BB8 {
    absurd
  }
  BB9 {
    assume { Resolve1.resolve x_21 };
    x_21 <- Core_Option_Option_Type.some_0 _18;
    _18 <- (let Core_Option_Option_Type.C_Some a = _18 in Core_Option_Option_Type.C_Some (any borrowed usize));
    _25 <- ();
    _22 <- ([#"../02_iter_mut.rs" 86 27 86 72] Ghost.new (Seq.(++) (Ghost.inner produced_10) (Seq.singleton x_21)));
    goto BB10
  }
  BB10 {
    produced_10 <- _22;
    _22 <- any Ghost.ghost_ty (Seq.seq (borrowed usize));
    x_21 <- { x_21 with current = ([#"../02_iter_mut.rs" 87 21 87 22] (0 : usize)) };
    assume { Resolve1.resolve x_21 };
    _17 <- ();
    goto BB5
  }
  
end
module C02IterMut_Common_Iterator_Item_Type
  type self
  type item
end
module C02IterMut_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C02IterMut_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C02IterMut_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module C02IterMut_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C02IterMut_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C02IterMut_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 19 15 19 28] Invariant0.invariant' a}
    requires {[#"../common.rs" 20 15 20 28] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 15 21 28] Invariant0.invariant' c}
    requires {[#"../common.rs" 22 15 22 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 23 15 23 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C02IterMut_Impl0_Item_Type
  type t
  use prelude.Borrow
  type item  =
    borrowed t
end
module C02IterMut_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C02IterMut_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C02IterMut_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C02IterMut_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  val next [@cfg:stackify] [#"../common.rs" 37 4 37 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C02IterMut_Common_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C02IterMut_Common_Iterator_Produces_Interface as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Completed_Interface as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C02IterMut_Common_Iterator_Invariant_Interface as Invariant0 with
    type self = self
  val next [@cfg:stackify] [#"../common.rs" 37 4 37 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C02IterMut_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
end
module C02IterMut_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C02IterMut_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  val produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
    requires {[#"../common.rs" 14 15 14 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C02IterMut_Impl0
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq as ToMutSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone C02IterMut_Impl0_Item_Type as Item0 with
    type t = t
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces as Produces0 with
    type t = t,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone C02IterMut_Impl0_Invariant as Invariant0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone C02IterMut_Impl0_ProducesTrans as ProducesTrans0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C02IterMut_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = C02IterMut_IterMut_Type.t_itermut t,
    function produces_trans = ProducesTrans0.produces_trans,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  goal produces_trans_spec : forall a : C02IterMut_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : C02IterMut_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : C02IterMut_IterMut_Type.t_itermut t . (([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) && ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) && ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) && ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) && ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../02_iter_mut.rs" 45 15 45 32] Produces0.produces b bc c) && ([#"../02_iter_mut.rs" 44 15 44 32] Produces0.produces a ab b) && ([#"../02_iter_mut.rs" 43 15 43 28] Invariant0.invariant' c) && ([#"../02_iter_mut.rs" 42 15 42 28] Invariant0.invariant' b) && ([#"../02_iter_mut.rs" 41 15 41 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../02_iter_mut.rs" 46 14 46 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c))
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C02IterMut_IterMut_Type.t_itermut t
  clone C02IterMut_Impl0_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve0.resolve,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C02IterMut_Impl0_ProducesRefl as ProducesRefl0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C02IterMut_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = C02IterMut_IterMut_Type.t_itermut t,
    function produces_refl = ProducesRefl0.produces_refl,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C02IterMut_Impl0_Next_Interface as Next0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone C02IterMut_Common_Iterator_Next_Interface as Next1 with
    type self = C02IterMut_IterMut_Type.t_itermut t,
    val next = Next0.next,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  goal produces_refl_spec : forall a : C02IterMut_IterMut_Type.t_itermut t . (([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../02_iter_mut.rs" 36 15 36 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../02_iter_mut.rs" 37 14 37 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a))
end
