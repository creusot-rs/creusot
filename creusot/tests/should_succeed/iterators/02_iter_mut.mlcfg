
module C02IterMut_IterMut_Type
  use prelude.Slice
  use prelude.Borrow
  type t_itermut 't =
    | C_IterMut (borrowed (slice 't))
    
  let function itermut_inner (self : t_itermut 't) : borrowed (slice 't) = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_IterMut a -> a
      end
end
module C02IterMut_Impl1_ProducesRefl_Impl
  type t
  use seq.Seq
  predicate invariant4 (self : Seq.seq t)
  val invariant4 (self : Seq.seq t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Seq.seq t)
  val inv4 (_x : Seq.seq t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq t . inv4 x = true
  use prelude.Slice
  predicate invariant3 (self : slice t)
  val invariant3 (self : slice t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : slice t)
  val inv3 (_x : slice t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : slice t . inv3 x = true
  use prelude.Borrow
  predicate invariant2 (self : Seq.seq (borrowed t))
  val invariant2 (self : Seq.seq (borrowed t)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Seq.seq (borrowed t))
  val inv2 (_x : Seq.seq (borrowed t)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Seq.seq (borrowed t) . inv2 x = true
  predicate invariant1 (self : borrowed (slice t))
  val invariant1 (self : borrowed (slice t)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (slice t))
  val inv1 (_x : borrowed (slice t)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (slice t) . inv1 x = true
  use seq.Seq
  use prelude.UIntSize
  use prelude.Slice
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  function shallow_model1 (self : slice t) : Seq.seq t
  val shallow_model1 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv3 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv3 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv4 (shallow_model1 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model1 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model1 self) <= UIntSize.to_int max0)
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model1 ( ^ C02IterMut_IterMut_Type.itermut_inner self)) = Seq.length (shallow_model1 ( * C02IterMut_IterMut_Type.itermut_inner self))
  val invariant0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C02IterMut_IterMut_Type.t_itermut t)
  val inv0 (_x : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C02IterMut_IterMut_Type.t_itermut t . inv0 x = (invariant0 x /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq.Seq
  function index_logic1 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model1 self) ix
  val index_logic1 [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic1 self ix }
    
  use seq.Seq
  function shallow_model0 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model1 ( * self)
  val shallow_model0 (self : borrowed (slice t)) : Seq.seq t
    ensures { result = shallow_model0 self }
    
  use seq.Seq
  function to_mut_seq0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
  val to_mut_seq0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv1 self}
    ensures { result = to_mut_seq0 self }
    
  axiom to_mut_seq0_spec : forall self : borrowed (slice t) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv1 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43] inv2 (to_mut_seq0 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq0 self) ->  ^ Seq.get (to_mut_seq0 self) i = index_logic1 ( ^ self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq0 self) ->  * Seq.get (to_mut_seq0 self) i = index_logic1 ( * self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41] Seq.length (to_mut_seq0 self) = Seq.length (shallow_model0 self))
  predicate produces0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
   =
    [#"../02_iter_mut.rs" 36 4 36 16] Seq.(==) (to_mut_seq0 (C02IterMut_IterMut_Type.itermut_inner self)) (Seq.(++) visited (to_mut_seq0 (C02IterMut_IterMut_Type.itermut_inner tl)))
  val produces0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = produces0 self visited tl }
    
  use seq.Seq
  let rec ghost function produces_refl [#"../02_iter_mut.rs" 44 4 44 29] (a : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 44 21 44 22] inv0 a}
    ensures { [#"../02_iter_mut.rs" 43 14 43 39] produces0 a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_iter_mut.rs" 41 4 41 10] ()
end
module C02IterMut_Impl1_ProducesTrans_Impl
  type t
  use seq.Seq
  predicate invariant4 (self : Seq.seq t)
  val invariant4 (self : Seq.seq t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Seq.seq t)
  val inv4 (_x : Seq.seq t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq t . inv4 x = true
  use prelude.Slice
  predicate invariant3 (self : slice t)
  val invariant3 (self : slice t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : slice t)
  val inv3 (_x : slice t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : slice t . inv3 x = true
  use prelude.Borrow
  predicate invariant2 (self : borrowed (slice t))
  val invariant2 (self : borrowed (slice t)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (slice t))
  val inv2 (_x : borrowed (slice t)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (slice t) . inv2 x = true
  predicate invariant1 (self : Seq.seq (borrowed t))
  val invariant1 (self : Seq.seq (borrowed t)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq (borrowed t))
  val inv1 (_x : Seq.seq (borrowed t)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq (borrowed t) . inv1 x = true
  use seq.Seq
  use prelude.UIntSize
  use prelude.Slice
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  function shallow_model1 (self : slice t) : Seq.seq t
  val shallow_model1 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv3 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv3 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv4 (shallow_model1 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model1 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model1 self) <= UIntSize.to_int max0)
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model1 ( ^ C02IterMut_IterMut_Type.itermut_inner self)) = Seq.length (shallow_model1 ( * C02IterMut_IterMut_Type.itermut_inner self))
  val invariant0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C02IterMut_IterMut_Type.t_itermut t)
  val inv0 (_x : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C02IterMut_IterMut_Type.t_itermut t . inv0 x = (invariant0 x /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq.Seq
  function index_logic1 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model1 self) ix
  val index_logic1 [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic1 self ix }
    
  use seq.Seq
  function shallow_model0 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model1 ( * self)
  val shallow_model0 (self : borrowed (slice t)) : Seq.seq t
    ensures { result = shallow_model0 self }
    
  use seq.Seq
  function to_mut_seq0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
  val to_mut_seq0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv2 self}
    ensures { result = to_mut_seq0 self }
    
  axiom to_mut_seq0_spec : forall self : borrowed (slice t) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43] inv1 (to_mut_seq0 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq0 self) ->  ^ Seq.get (to_mut_seq0 self) i = index_logic1 ( ^ self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq0 self) ->  * Seq.get (to_mut_seq0 self) i = index_logic1 ( * self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41] Seq.length (to_mut_seq0 self) = Seq.length (shallow_model0 self))
  predicate produces0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
   =
    [#"../02_iter_mut.rs" 36 4 36 16] Seq.(==) (to_mut_seq0 (C02IterMut_IterMut_Type.itermut_inner self)) (Seq.(++) visited (to_mut_seq0 (C02IterMut_IterMut_Type.itermut_inner tl)))
  val produces0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = produces0 self visited tl }
    
  let rec ghost function produces_trans [#"../02_iter_mut.rs" 51 4 51 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 48 15 48 32] produces0 a ab b}
    requires {[#"../02_iter_mut.rs" 49 15 49 32] produces0 b bc c}
    requires {[#"../02_iter_mut.rs" 51 22 51 23] inv0 a}
    requires {[#"../02_iter_mut.rs" 51 31 51 33] inv1 ab}
    requires {[#"../02_iter_mut.rs" 51 52 51 53] inv0 b}
    requires {[#"../02_iter_mut.rs" 51 61 51 63] inv1 bc}
    requires {[#"../02_iter_mut.rs" 51 82 51 83] inv0 c}
    ensures { [#"../02_iter_mut.rs" 50 14 50 42] produces0 a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_iter_mut.rs" 46 4 46 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C02IterMut_Impl1_Next
  type t
  use prelude.Borrow
  use seq.Seq
  predicate invariant7 (self : Seq.seq (borrowed t))
  val invariant7 (self : Seq.seq (borrowed t)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Seq.seq (borrowed t))
  val inv7 (_x : Seq.seq (borrowed t)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Seq.seq (borrowed t) . inv7 x = true
  use prelude.Slice
  predicate inv0 (_x : borrowed (slice t))
  val inv0 (_x : borrowed (slice t)) : bool
    ensures { result = inv0 _x }
    
  use seq.Seq
  use prelude.UIntSize
  predicate inv5 (_x : Seq.seq t)
  val inv5 (_x : Seq.seq t) : bool
    ensures { result = inv5 _x }
    
  use prelude.Slice
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  predicate inv4 (_x : slice t)
  val inv4 (_x : slice t) : bool
    ensures { result = inv4 _x }
    
  function shallow_model0 (self : slice t) : Seq.seq t
  val shallow_model0 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv4 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv4 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv5 (shallow_model0 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model0 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model0 self) <= UIntSize.to_int max0)
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant6 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model0 ( ^ C02IterMut_IterMut_Type.itermut_inner self)) = Seq.length (shallow_model0 ( * C02IterMut_IterMut_Type.itermut_inner self))
  val invariant6 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : C02IterMut_IterMut_Type.t_itermut t)
  val inv6 (_x : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : C02IterMut_IterMut_Type.t_itermut t . inv6 x = (invariant6 x /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  predicate invariant5 (self : Seq.seq t)
  val invariant5 (self : Seq.seq t) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : Seq.seq t . inv5 x = true
  predicate invariant4 (self : slice t)
  val invariant4 (self : slice t) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : slice t . inv4 x = true
  predicate invariant3 (self : borrowed (borrowed (slice t)))
  val invariant3 (self : borrowed (borrowed (slice t))) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed (borrowed (slice t)))
  val inv3 (_x : borrowed (borrowed (slice t))) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (borrowed (slice t)) . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : Core_Option_Option_Type.t_option (borrowed t))
  val invariant2 (self : Core_Option_Option_Type.t_option (borrowed t)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option (borrowed t))
  val inv2 (_x : Core_Option_Option_Type.t_option (borrowed t)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option (borrowed t) . inv2 x = true
  predicate invariant1 (self : borrowed (C02IterMut_IterMut_Type.t_itermut t))
  val invariant1 (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (C02IterMut_IterMut_Type.t_itermut t))
  val inv1 (_x : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (C02IterMut_IterMut_Type.t_itermut t) . inv1 x = (inv6 ( * x) /\ inv6 ( ^ x))
  predicate invariant0 (self : borrowed (slice t))
  val invariant0 (self : borrowed (slice t)) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : borrowed (slice t) . inv0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic0 self ix }
    
  use seq.Seq
  function shallow_model1 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model0 ( * self)
  val shallow_model1 (self : borrowed (slice t)) : Seq.seq t
    ensures { result = shallow_model1 self }
    
  use seq.Seq
  function to_mut_seq0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
  val to_mut_seq0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv0 self}
    ensures { result = to_mut_seq0 self }
    
  axiom to_mut_seq0_spec : forall self : borrowed (slice t) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43] inv7 (to_mut_seq0 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq0 self) ->  ^ Seq.get (to_mut_seq0 self) i = index_logic0 ( ^ self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq0 self) ->  * Seq.get (to_mut_seq0 self) i = index_logic0 ( * self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41] Seq.length (to_mut_seq0 self) = Seq.length (shallow_model1 self))
  predicate produces0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
   =
    [#"../02_iter_mut.rs" 36 4 36 16] Seq.(==) (to_mut_seq0 (C02IterMut_IterMut_Type.itermut_inner self)) (Seq.(++) visited (to_mut_seq0 (C02IterMut_IterMut_Type.itermut_inner tl)))
  val produces0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = produces0 self visited tl }
    
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate resolve0 (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) =
    [#"../02_iter_mut.rs" 32 8 32 70] resolve0 self /\ Seq.(==) (shallow_model1 (C02IterMut_IterMut_Type.itermut_inner ( * self))) (Seq.empty )
  val completed0 [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : bool
    ensures { result = completed0 self }
    
  use seq_ext.SeqExt
  function tail0 (self : Seq.seq t) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/logic/seq.rs" 52 8 52 39] SeqExt.subsequence self 1 (Seq.length self)
  val tail0 (self : Seq.seq t) : Seq.seq t
    ensures { result = tail0 self }
    
  val take_first_mut0 (self : borrowed (borrowed (slice t))) : Core_Option_Option_Type.t_option (borrowed t)
    requires {inv3 self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 278 18 285 9] match result with
      | Core_Option_Option_Type.C_Some r ->  * r = index_logic0 ( *  * self) 0 /\  ^ r = index_logic0 ( ^  * self) 0 /\ Seq.length (shallow_model0 ( *  * self)) > 0 /\ Seq.length (shallow_model0 ( ^  * self)) > 0 /\ shallow_model0 ( *  ^ self) = tail0 (shallow_model0 ( *  * self)) /\ shallow_model0 ( ^  ^ self) = tail0 (shallow_model0 ( ^  * self))
      | Core_Option_Option_Type.C_None ->  ^ self =  * self /\ Seq.length (shallow_model0 ( *  * self)) = 0
      end }
    ensures { inv2 result }
    
  let rec cfg next [#"../02_iter_mut.rs" 57 4 57 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : Core_Option_Option_Type.t_option (borrowed t)
    requires {[#"../02_iter_mut.rs" 57 17 57 21] inv1 self}
    ensures { [#"../02_iter_mut.rs" 53 14 56 5] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../02_iter_mut.rs" 57 26 57 44] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (borrowed t);
  var self : borrowed (C02IterMut_IterMut_Type.t_itermut t) = self;
  var _3 : borrowed (borrowed (slice t));
  {
    goto BB0
  }
  BB0 {
    [#"../02_iter_mut.rs" 58 8 58 37] _3 <- Borrow.borrow_mut (C02IterMut_IterMut_Type.itermut_inner ( * self));
    [#"../02_iter_mut.rs" 58 8 58 37] self <- { self with current = (let C02IterMut_IterMut_Type.C_IterMut x0 =  * self in C02IterMut_IterMut_Type.C_IterMut ( ^ _3)) };
    assume { inv0 ( ^ _3) };
    [#"../02_iter_mut.rs" 58 8 58 37] _0 <- ([#"../02_iter_mut.rs" 58 8 58 37] take_first_mut0 _3);
    _3 <- any borrowed (borrowed (slice t));
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv1 self };
    assume { resolve0 self };
    return _0
  }
  
end
module C02IterMut_Impl2_IntoIter
  type t
  use seq.Seq
  predicate invariant3 (self : Seq.seq t)
  val invariant3 (self : Seq.seq t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq t)
  val inv3 (_x : Seq.seq t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq t . inv3 x = true
  use prelude.Slice
  predicate invariant2 (self : slice t)
  val invariant2 (self : slice t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : slice t)
  val inv2 (_x : slice t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : slice t . inv2 x = true
  use prelude.Borrow
  predicate invariant1 (self : borrowed (slice t))
  val invariant1 (self : borrowed (slice t)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (slice t))
  val inv1 (_x : borrowed (slice t)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (slice t) . inv1 x = true
  use seq.Seq
  use prelude.UIntSize
  use prelude.Slice
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  function shallow_model0 (self : slice t) : Seq.seq t
  val shallow_model0 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv2 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv3 (shallow_model0 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model0 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model0 self) <= UIntSize.to_int max0)
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model0 ( ^ C02IterMut_IterMut_Type.itermut_inner self)) = Seq.length (shallow_model0 ( * C02IterMut_IterMut_Type.itermut_inner self))
  val invariant0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C02IterMut_IterMut_Type.t_itermut t)
  val inv0 (_x : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C02IterMut_IterMut_Type.t_itermut t . inv0 x = (invariant0 x /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  let rec cfg into_iter [#"../02_iter_mut.rs" 64 4 64 30] [@cfg:stackify] [@cfg:subregion_analysis] (self : C02IterMut_IterMut_Type.t_itermut t) : C02IterMut_IterMut_Type.t_itermut t
    requires {[#"../02_iter_mut.rs" 64 17 64 21] inv0 self}
    ensures { [#"../02_iter_mut.rs" 63 14 63 28] result = self }
    ensures { [#"../02_iter_mut.rs" 64 26 64 30] inv0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C02IterMut_IterMut_Type.t_itermut t;
  var self : C02IterMut_IterMut_Type.t_itermut t = self;
  {
    goto BB0
  }
  BB0 {
    [#"../02_iter_mut.rs" 65 8 65 12] _0 <- ([#"../02_iter_mut.rs" 65 8 65 12] self);
    [#"../02_iter_mut.rs" 65 8 65 12] self <- any C02IterMut_IterMut_Type.t_itermut t;
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.UIntSize
  use prelude.Int
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Core_Ops_Range_RangeFull_Type
  type t_rangefull  =
    | C_RangeFull
    
end
module C02IterMut_IterMut
  type t
  use seq.Seq
  predicate invariant6 (self : Seq.seq t)
  val invariant6 (self : Seq.seq t) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq t)
  val inv6 (_x : Seq.seq t) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq t . inv6 x = true
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate invariant5 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Core_Ops_Range_RangeFull_Type.t_rangefull)
  val inv5 (_x : Core_Ops_Range_RangeFull_Type.t_rangefull) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Core_Ops_Range_RangeFull_Type.t_rangefull . inv5 x = true
  use prelude.Slice
  use prelude.Borrow
  predicate inv2 (_x : borrowed (slice t))
  val inv2 (_x : borrowed (slice t)) : bool
    ensures { result = inv2 _x }
    
  use seq.Seq
  use prelude.UIntSize
  use prelude.Slice
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  predicate inv1 (_x : slice t)
  val inv1 (_x : slice t) : bool
    ensures { result = inv1 _x }
    
  function shallow_model2 (self : slice t) : Seq.seq t
  val shallow_model2 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv1 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv1 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv6 (shallow_model2 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model2 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model2 self) <= UIntSize.to_int max0)
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant4 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model2 ( ^ C02IterMut_IterMut_Type.itermut_inner self)) = Seq.length (shallow_model2 ( * C02IterMut_IterMut_Type.itermut_inner self))
  val invariant4 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : C02IterMut_IterMut_Type.t_itermut t)
  val inv4 (_x : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : C02IterMut_IterMut_Type.t_itermut t . inv4 x = (invariant4 x /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val invariant3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val inv3 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv3 x = true
  predicate invariant2 (self : borrowed (slice t))
  val invariant2 (self : borrowed (slice t)) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : borrowed (slice t) . inv2 x = true
  predicate invariant1 (self : slice t)
  val invariant1 (self : slice t) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : slice t . inv1 x = true
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv6 (shallow_model3 self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model3 self) <= UIntSize.to_int max0)
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv6 (shallow_model3 self)
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  function shallow_model1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model3 ( * self)
  val shallow_model1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
    ensures { result = shallow_model1 self }
    
  function shallow_model0 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model2 ( * self)
  val shallow_model0 (self : borrowed (slice t)) : Seq.seq t
    ensures { result = shallow_model0 self }
    
  predicate resolve1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed (slice t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (slice t)) : bool
    ensures { result = resolve0 self }
    
  predicate resolve_elswhere0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 214 20 214 24] true
  val resolve_elswhere0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere0 self _old _fin }
    
  predicate has_value0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : slice t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 208 20 208 31] seq = shallow_model2 out
  val has_value0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : slice t) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 202 20 202 24] true
  val in_bounds0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t) : bool
    ensures { result = in_bounds0 self _seq }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (index : Core_Ops_Range_RangeFull_Type.t_rangefull) : borrowed (slice t)
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds0 index (shallow_model1 self)}
    requires {inv3 self}
    requires {inv5 index}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value0 index (shallow_model1 self) ( * result) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value0 index (shallow_model3 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model1 self) (shallow_model3 ( ^ self)) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model3 ( ^ self)) = Seq.length (shallow_model1 self) }
    ensures { inv2 result }
    
  let rec cfg iter_mut [#"../02_iter_mut.rs" 72 0 72 55] [@cfg:stackify] [@cfg:subregion_analysis] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : C02IterMut_IterMut_Type.t_itermut t
    requires {[#"../02_iter_mut.rs" 72 19 72 20] inv3 v}
    ensures { [#"../02_iter_mut.rs" 69 10 69 29] shallow_model0 (C02IterMut_IterMut_Type.itermut_inner result) = shallow_model1 v }
    ensures { [#"../02_iter_mut.rs" 70 10 70 35] shallow_model2 ( ^ C02IterMut_IterMut_Type.itermut_inner result) = shallow_model3 ( ^ v) }
    ensures { [#"../02_iter_mut.rs" 71 10 71 33] Seq.length (shallow_model3 ( ^ v)) = Seq.length (shallow_model1 v) }
    ensures { [#"../02_iter_mut.rs" 72 41 72 55] inv4 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C02IterMut_IterMut_Type.t_itermut t;
  var v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = v;
  var _5 : borrowed (slice t);
  var _6 : borrowed (slice t);
  var _7 : borrowed (slice t);
  var _8 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  {
    goto BB0
  }
  BB0 {
    [#"../02_iter_mut.rs" 73 26 73 27] _8 <- Borrow.borrow_mut ( * v);
    [#"../02_iter_mut.rs" 73 26 73 27] v <- { v with current =  ^ _8 };
    assume { inv0 ( ^ _8) };
    [#"../02_iter_mut.rs" 73 26 73 31] _7 <- ([#"../02_iter_mut.rs" 73 26 73 31] index_mut0 _8 ([#"../02_iter_mut.rs" 73 28 73 30] Core_Ops_Range_RangeFull_Type.C_RangeFull));
    _8 <- any borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
    goto BB1
  }
  BB1 {
    [#"../02_iter_mut.rs" 73 21 73 31] _6 <- Borrow.borrow_mut ( * _7);
    [#"../02_iter_mut.rs" 73 21 73 31] _7 <- { _7 with current =  ^ _6 };
    assume { inv1 ( ^ _6) };
    [#"../02_iter_mut.rs" 73 21 73 31] _5 <- Borrow.borrow_mut ( * _6);
    [#"../02_iter_mut.rs" 73 21 73 31] _6 <- { _6 with current =  ^ _5 };
    assume { inv1 ( ^ _5) };
    [#"../02_iter_mut.rs" 73 4 73 33] _0 <- ([#"../02_iter_mut.rs" 73 4 73 33] C02IterMut_IterMut_Type.C_IterMut _5);
    _5 <- any borrowed (slice t);
    assert { [@expl:type invariant] inv2 _7 };
    assume { resolve0 _7 };
    assert { [@expl:type invariant] inv2 _6 };
    assume { resolve0 _6 };
    assert { [@expl:type invariant] inv3 v };
    assume { resolve1 v };
    return _0
  }
  
end
module C02IterMut_AllZero
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  predicate invariant8 (self : Seq.seq (borrowed usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : Seq.seq (borrowed usize)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Seq.seq (borrowed usize))
  val inv8 (_x : Seq.seq (borrowed usize)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Seq.seq (borrowed usize) . inv8 x = true
  use prelude.Slice
  predicate invariant7 (self : borrowed (slice usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : borrowed (slice usize)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed (slice usize))
  val inv7 (_x : borrowed (slice usize)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed (slice usize) . inv7 x = true
  predicate invariant6 (self : slice usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : slice usize) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : slice usize)
  val inv6 (_x : slice usize) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : slice usize . inv6 x = true
  predicate invariant5 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : Seq.seq usize) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq usize)
  val inv5 (_x : Seq.seq usize) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq usize . inv5 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv4 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv4 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv4 _x }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv5 (shallow_model1 self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model1 self) <= UIntSize.to_int max0)
  predicate invariant4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv5 (shallow_model1 self)
  val invariant4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option (borrowed usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Core_Option_Option_Type.t_option (borrowed usize)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option (borrowed usize))
  val inv3 (_x : Core_Option_Option_Type.t_option (borrowed usize)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option (borrowed usize) . inv3 x = true
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant2 (self : borrowed (C02IterMut_IterMut_Type.t_itermut usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : borrowed (C02IterMut_IterMut_Type.t_itermut usize)) : bool
    ensures { result = invariant2 self }
    
  predicate inv0 (_x : C02IterMut_IterMut_Type.t_itermut usize)
  val inv0 (_x : C02IterMut_IterMut_Type.t_itermut usize) : bool
    ensures { result = inv0 _x }
    
  predicate inv2 (_x : borrowed (C02IterMut_IterMut_Type.t_itermut usize))
  val inv2 (_x : borrowed (C02IterMut_IterMut_Type.t_itermut usize)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (C02IterMut_IterMut_Type.t_itermut usize) . inv2 x = (inv0 ( * x) /\ inv0 ( ^ x))
  predicate invariant1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv1 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv1 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Slice
  function shallow_model4 (self : slice usize) : Seq.seq usize
  val shallow_model4 (self : slice usize) : Seq.seq usize
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv6 self}
    ensures { result = shallow_model4 self }
    
  axiom shallow_model4_spec : forall self : slice usize . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv6 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv5 (shallow_model4 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model4 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model4 self) <= UIntSize.to_int max0)
  function index_logic4 [@inline:trivial] (self : slice usize) (ix : int) : usize =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model4 self) ix
  val index_logic4 [@inline:trivial] (self : slice usize) (ix : int) : usize
    ensures { result = index_logic4 self ix }
    
  use seq.Seq
  function shallow_model3 (self : borrowed (slice usize)) : Seq.seq usize =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model4 ( * self)
  val shallow_model3 (self : borrowed (slice usize)) : Seq.seq usize
    ensures { result = shallow_model3 self }
    
  use seq.Seq
  function to_mut_seq0 (self : borrowed (slice usize)) : Seq.seq (borrowed usize)
  val to_mut_seq0 (self : borrowed (slice usize)) : Seq.seq (borrowed usize)
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv7 self}
    ensures { result = to_mut_seq0 self }
    
  axiom to_mut_seq0_spec : forall self : borrowed (slice usize) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv7 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43] inv8 (to_mut_seq0 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq0 self) ->  ^ Seq.get (to_mut_seq0 self) i = index_logic4 ( ^ self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq0 self) ->  * Seq.get (to_mut_seq0 self) i = index_logic4 ( * self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41] Seq.length (to_mut_seq0 self) = Seq.length (shallow_model3 self))
  predicate produces0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut usize) (visited : Seq.seq (borrowed usize)) (tl : C02IterMut_IterMut_Type.t_itermut usize)
    
   =
    [#"../02_iter_mut.rs" 36 4 36 16] Seq.(==) (to_mut_seq0 (C02IterMut_IterMut_Type.itermut_inner self)) (Seq.(++) visited (to_mut_seq0 (C02IterMut_IterMut_Type.itermut_inner tl)))
  val produces0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut usize) (visited : Seq.seq (borrowed usize)) (tl : C02IterMut_IterMut_Type.t_itermut usize) : bool
    ensures { result = produces0 self visited tl }
    
  function produces_trans0 [#"../02_iter_mut.rs" 51 4 51 90] (a : C02IterMut_IterMut_Type.t_itermut usize) (ab : Seq.seq (borrowed usize)) (b : C02IterMut_IterMut_Type.t_itermut usize) (bc : Seq.seq (borrowed usize)) (c : C02IterMut_IterMut_Type.t_itermut usize) : ()
    
   =
    [#"../02_iter_mut.rs" 46 4 46 10] ()
  val produces_trans0 [#"../02_iter_mut.rs" 51 4 51 90] (a : C02IterMut_IterMut_Type.t_itermut usize) (ab : Seq.seq (borrowed usize)) (b : C02IterMut_IterMut_Type.t_itermut usize) (bc : Seq.seq (borrowed usize)) (c : C02IterMut_IterMut_Type.t_itermut usize) : ()
    requires {[#"../02_iter_mut.rs" 48 15 48 32] produces0 a ab b}
    requires {[#"../02_iter_mut.rs" 49 15 49 32] produces0 b bc c}
    requires {[#"../02_iter_mut.rs" 51 22 51 23] inv0 a}
    requires {[#"../02_iter_mut.rs" 51 31 51 33] inv8 ab}
    requires {[#"../02_iter_mut.rs" 51 52 51 53] inv0 b}
    requires {[#"../02_iter_mut.rs" 51 61 51 63] inv8 bc}
    requires {[#"../02_iter_mut.rs" 51 82 51 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : C02IterMut_IterMut_Type.t_itermut usize, ab : Seq.seq (borrowed usize), b : C02IterMut_IterMut_Type.t_itermut usize, bc : Seq.seq (borrowed usize), c : C02IterMut_IterMut_Type.t_itermut usize . ([#"../02_iter_mut.rs" 48 15 48 32] produces0 a ab b) -> ([#"../02_iter_mut.rs" 49 15 49 32] produces0 b bc c) -> ([#"../02_iter_mut.rs" 51 22 51 23] inv0 a) -> ([#"../02_iter_mut.rs" 51 31 51 33] inv8 ab) -> ([#"../02_iter_mut.rs" 51 52 51 53] inv0 b) -> ([#"../02_iter_mut.rs" 51 61 51 63] inv8 bc) -> ([#"../02_iter_mut.rs" 51 82 51 83] inv0 c) -> ([#"../02_iter_mut.rs" 50 14 50 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../02_iter_mut.rs" 44 4 44 29] (a : C02IterMut_IterMut_Type.t_itermut usize) : () =
    [#"../02_iter_mut.rs" 41 4 41 10] ()
  val produces_refl0 [#"../02_iter_mut.rs" 44 4 44 29] (a : C02IterMut_IterMut_Type.t_itermut usize) : ()
    requires {[#"../02_iter_mut.rs" 44 21 44 22] inv0 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : C02IterMut_IterMut_Type.t_itermut usize . ([#"../02_iter_mut.rs" 44 21 44 22] inv0 a) -> ([#"../02_iter_mut.rs" 43 14 43 39] produces0 a (Seq.empty ) a)
  predicate invariant0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut usize) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model4 ( ^ C02IterMut_IterMut_Type.itermut_inner self)) = Seq.length (shallow_model4 ( * C02IterMut_IterMut_Type.itermut_inner self))
  val invariant0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut usize) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : C02IterMut_IterMut_Type.t_itermut usize . inv0 x = (invariant0 x /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  function index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model1 self) ix
  val index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    ensures { result = index_logic1 self ix }
    
  function shallow_model2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model1 ( * self)
  val shallow_model2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    ensures { result = shallow_model2 self }
    
  use prelude.Ghost
  predicate resolve1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed usize) : bool
    ensures { result = resolve0 self }
    
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate resolve2 (self : borrowed (C02IterMut_IterMut_Type.t_itermut usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (C02IterMut_IterMut_Type.t_itermut usize)) : bool
    ensures { result = resolve2 self }
    
  predicate completed0 [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut usize)) =
    [#"../02_iter_mut.rs" 32 8 32 70] resolve2 self /\ Seq.(==) (shallow_model3 (C02IterMut_IterMut_Type.itermut_inner ( * self))) (Seq.empty )
  val completed0 [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut usize)) : bool
    ensures { result = completed0 self }
    
  val next0 [#"../02_iter_mut.rs" 57 4 57 44] (self : borrowed (C02IterMut_IterMut_Type.t_itermut usize)) : Core_Option_Option_Type.t_option (borrowed usize)
    requires {[#"../02_iter_mut.rs" 57 17 57 21] inv2 self}
    ensures { [#"../02_iter_mut.rs" 53 14 56 5] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../02_iter_mut.rs" 57 26 57 44] inv3 result }
    
  use prelude.Ghost
  function index_logic0 [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq (borrowed usize))) (ix : int) : borrowed usize
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33] Seq.get (Ghost.inner self) ix
  val index_logic0 [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq (borrowed usize))) (ix : int) : borrowed usize
    ensures { result = index_logic0 self ix }
    
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  val into_iter0 [#"../02_iter_mut.rs" 64 4 64 30] (self : C02IterMut_IterMut_Type.t_itermut usize) : C02IterMut_IterMut_Type.t_itermut usize
    requires {[#"../02_iter_mut.rs" 64 17 64 21] inv0 self}
    ensures { [#"../02_iter_mut.rs" 63 14 63 28] result = self }
    ensures { [#"../02_iter_mut.rs" 64 26 64 30] inv0 result }
    
  val iter_mut0 [#"../02_iter_mut.rs" 72 0 72 55] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : C02IterMut_IterMut_Type.t_itermut usize
    requires {[#"../02_iter_mut.rs" 72 19 72 20] inv1 v}
    ensures { [#"../02_iter_mut.rs" 69 10 69 29] shallow_model3 (C02IterMut_IterMut_Type.itermut_inner result) = shallow_model2 v }
    ensures { [#"../02_iter_mut.rs" 70 10 70 35] shallow_model4 ( ^ C02IterMut_IterMut_Type.itermut_inner result) = shallow_model1 ( ^ v) }
    ensures { [#"../02_iter_mut.rs" 71 10 71 33] Seq.length (shallow_model1 ( ^ v)) = Seq.length (shallow_model2 v) }
    ensures { [#"../02_iter_mut.rs" 72 41 72 55] inv0 result }
    
  let rec cfg all_zero [#"../02_iter_mut.rs" 78 0 78 35] [@cfg:stackify] [@cfg:subregion_analysis] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../02_iter_mut.rs" 76 10 76 33] Seq.length (shallow_model1 ( ^ v)) = Seq.length (shallow_model2 v) }
    ensures { [#"../02_iter_mut.rs" 77 0 77 66] forall i : int . 0 <= i /\ i < Seq.length (shallow_model2 v) -> UIntSize.to_int (index_logic1 ( ^ v) i) = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) = v;
  var it : C02IterMut_IterMut_Type.t_itermut usize;
  var _5 : C02IterMut_IterMut_Type.t_itermut usize;
  var _6 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var iter_old : Ghost.ghost_ty (C02IterMut_IterMut_Type.t_itermut usize);
  var produced : Ghost.ghost_ty (Seq.seq (borrowed usize));
  var _15 : Core_Option_Option_Type.t_option (borrowed usize);
  var _16 : borrowed (C02IterMut_IterMut_Type.t_itermut usize);
  var x : borrowed usize;
  var _19 : Ghost.ghost_ty (Seq.seq (borrowed usize));
  {
    goto BB0
  }
  BB0 {
    [#"../02_iter_mut.rs" 79 26 79 27] _6 <- Borrow.borrow_mut ( * v);
    [#"../02_iter_mut.rs" 79 26 79 27] v <- { v with current =  ^ _6 };
    [#"../02_iter_mut.rs" 79 17 79 28] _5 <- ([#"../02_iter_mut.rs" 79 17 79 28] iter_mut0 _6);
    _6 <- any borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
    goto BB1
  }
  BB1 {
    [#"../02_iter_mut.rs" 79 17 79 40] it <- ([#"../02_iter_mut.rs" 79 17 79 40] into_iter0 _5);
    _5 <- any C02IterMut_IterMut_Type.t_itermut usize;
    goto BB2
  }
  BB2 {
    [#"../02_iter_mut.rs" 80 19 80 29] iter_old <- ([#"../02_iter_mut.rs" 80 19 80 29] Ghost.new it);
    goto BB3
  }
  BB3 {
    [#"../02_iter_mut.rs" 81 23 81 41] produced <- ([#"../02_iter_mut.rs" 81 23 81 41] Ghost.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant { [#"../02_iter_mut.rs" 82 16 82 23] inv0 it };
    invariant { [#"../02_iter_mut.rs" 83 16 83 55] produces0 (Ghost.inner iter_old) (Ghost.inner produced) it };
    invariant { [#"../02_iter_mut.rs" 82 4 82 25] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner produced) -> UIntSize.to_int ( ^ index_logic0 produced i) = 0 };
    goto BB6
  }
  BB6 {
    [#"../02_iter_mut.rs" 86 14 86 23] _16 <- Borrow.borrow_mut it;
    [#"../02_iter_mut.rs" 86 14 86 23] it <-  ^ _16;
    assume { inv0 ( ^ _16) };
    [#"../02_iter_mut.rs" 86 14 86 23] _15 <- ([#"../02_iter_mut.rs" 86 14 86 23] next0 _16);
    _16 <- any borrowed (C02IterMut_IterMut_Type.t_itermut usize);
    goto BB7
  }
  BB7 {
    switch (_15)
      | Core_Option_Option_Type.C_None -> goto BB8
      | Core_Option_Option_Type.C_Some _ -> goto BB9
      end
  }
  BB8 {
    [#"../02_iter_mut.rs" 91 20 91 25] _0 <- ([#"../02_iter_mut.rs" 91 20 91 25] ());
    assume { resolve1 v };
    return _0
  }
  BB9 {
    goto BB11
  }
  BB10 {
    assume { resolve1 v };
    assert { [#"../02_iter_mut.rs" 86 14 86 23] false };
    absurd
  }
  BB11 {
    [#"../02_iter_mut.rs" 87 17 87 18] x <- ([#"../02_iter_mut.rs" 87 17 87 18] Core_Option_Option_Type.some_0 _15);
    [#"../02_iter_mut.rs" 87 17 87 18] _15 <- (let Core_Option_Option_Type.C_Some x0 = _15 in Core_Option_Option_Type.C_Some (any borrowed usize));
    [#"../02_iter_mut.rs" 88 27 88 69] _19 <- ([#"../02_iter_mut.rs" 88 27 88 69] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton x)));
    goto BB12
  }
  BB12 {
    [#"../02_iter_mut.rs" 88 16 88 69] produced <- ([#"../02_iter_mut.rs" 88 16 88 69] _19);
    [#"../02_iter_mut.rs" 88 16 88 69] _19 <- any Ghost.ghost_ty (Seq.seq (borrowed usize));
    [#"../02_iter_mut.rs" 89 16 89 22] x <- { x with current = ([#"../02_iter_mut.rs" 89 16 89 22] [#"../02_iter_mut.rs" 89 21 89 22] (0 : usize)) };
    assume { resolve0 x };
    goto BB5
  }
  
end
module C02IterMut_Impl0
  type t
end
module C02IterMut_Impl1
  type t
  use seq.Seq
  predicate invariant6 (self : Seq.seq t)
  val invariant6 (self : Seq.seq t) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq t)
  val inv6 (_x : Seq.seq t) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq t . inv6 x = true
  use prelude.Slice
  predicate invariant5 (self : slice t)
  val invariant5 (self : slice t) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : slice t)
  val inv5 (_x : slice t) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : slice t . inv5 x = true
  use prelude.Borrow
  predicate invariant4 (self : borrowed (slice t))
  val invariant4 (self : borrowed (slice t)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed (slice t))
  val inv4 (_x : borrowed (slice t)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (slice t) . inv4 x = true
  predicate invariant3 (self : Seq.seq (borrowed t))
  val invariant3 (self : Seq.seq (borrowed t)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq (borrowed t))
  val inv3 (_x : Seq.seq (borrowed t)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq (borrowed t) . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : Core_Option_Option_Type.t_option (borrowed t))
  val invariant2 (self : Core_Option_Option_Type.t_option (borrowed t)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option (borrowed t))
  val inv2 (_x : Core_Option_Option_Type.t_option (borrowed t)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option (borrowed t) . inv2 x = true
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant1 (self : borrowed (C02IterMut_IterMut_Type.t_itermut t))
  val invariant1 (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : bool
    ensures { result = invariant1 self }
    
  predicate inv0 (_x : C02IterMut_IterMut_Type.t_itermut t)
  val inv0 (_x : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = inv0 _x }
    
  predicate inv1 (_x : borrowed (C02IterMut_IterMut_Type.t_itermut t))
  val inv1 (_x : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (C02IterMut_IterMut_Type.t_itermut t) . inv1 x = (inv0 ( * x) /\ inv0 ( ^ x))
  use seq.Seq
  use prelude.UIntSize
  use prelude.Slice
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  function shallow_model1 (self : slice t) : Seq.seq t
  val shallow_model1 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv5 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv5 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv6 (shallow_model1 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model1 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model1 self) <= UIntSize.to_int max0)
  predicate invariant0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (shallow_model1 ( ^ C02IterMut_IterMut_Type.itermut_inner self)) = Seq.length (shallow_model1 ( * C02IterMut_IterMut_Type.itermut_inner self))
  val invariant0 [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : C02IterMut_IterMut_Type.t_itermut t . inv0 x = (invariant0 x /\ match x with
    | C02IterMut_IterMut_Type.C_IterMut inner -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  function shallow_model0 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model1 ( * self)
  val shallow_model0 (self : borrowed (slice t)) : Seq.seq t
    ensures { result = shallow_model0 self }
    
  predicate resolve0 (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) =
    [#"../02_iter_mut.rs" 32 8 32 70] resolve0 self /\ Seq.(==) (shallow_model0 (C02IterMut_IterMut_Type.itermut_inner ( * self))) (Seq.empty )
  val completed0 [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : bool
    ensures { result = completed0 self }
    
  use seq.Seq
  use seq.Seq
  use seq.Seq
  function index_logic1 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model1 self) ix
  val index_logic1 [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic1 self ix }
    
  use seq.Seq
  use seq.Seq
  function to_mut_seq0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
  val to_mut_seq0 (self : borrowed (slice t)) : Seq.seq (borrowed t)
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv4 self}
    ensures { result = to_mut_seq0 self }
    
  axiom to_mut_seq0_spec : forall self : borrowed (slice t) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv4 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43] inv3 (to_mut_seq0 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq0 self) ->  ^ Seq.get (to_mut_seq0 self) i = index_logic1 ( ^ self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq0 self) ->  * Seq.get (to_mut_seq0 self) i = index_logic1 ( * self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41] Seq.length (to_mut_seq0 self) = Seq.length (shallow_model0 self))
  predicate produces0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
   =
    [#"../02_iter_mut.rs" 36 4 36 16] Seq.(==) (to_mut_seq0 (C02IterMut_IterMut_Type.itermut_inner self)) (Seq.(++) visited (to_mut_seq0 (C02IterMut_IterMut_Type.itermut_inner tl)))
  val produces0 [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = produces0 self visited tl }
    
  use seq.Seq
  goal produces_refl_refn : [#"../02_iter_mut.rs" 44 4 44 29] forall a : C02IterMut_IterMut_Type.t_itermut t . inv0 a -> inv0 a /\ (forall result : () . produces0 a (Seq.empty ) a -> produces0 a (Seq.empty ) a)
  goal next_refn : [#"../02_iter_mut.rs" 57 4 57 44] forall self : borrowed (C02IterMut_IterMut_Type.t_itermut t) . inv1 self -> inv1 self /\ (forall result : Core_Option_Option_Type.t_option (borrowed t) . inv2 result /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end -> inv2 result /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_trans_refn : [#"../02_iter_mut.rs" 51 4 51 90] forall a : C02IterMut_IterMut_Type.t_itermut t . forall ab : Seq.seq (borrowed t) . forall b : C02IterMut_IterMut_Type.t_itermut t . forall bc : Seq.seq (borrowed t) . forall c : C02IterMut_IterMut_Type.t_itermut t . inv0 c /\ inv3 bc /\ inv0 b /\ inv3 ab /\ inv0 a /\ produces0 b bc c /\ produces0 a ab b -> inv0 c /\ inv3 bc /\ inv0 b /\ inv3 ab /\ inv0 a /\ produces0 b bc c /\ produces0 a ab b /\ (forall result : () . produces0 a (Seq.(++) ab bc) c -> produces0 a (Seq.(++) ab bc) c)
end
