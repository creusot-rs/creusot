
module C02IterMut_IterMut_Type
  use prelude.Borrow
  use prelude.Slice
  type t_itermut 't =
    | C_IterMut (borrowed (slice 't))
    
  let function itermut_inner (self : t_itermut 't) : borrowed (slice 't) = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IterMut a -> a
      end
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module C02IterMut_Impl0_Invariant_Stub
  type t
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant' [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t)
end
module C02IterMut_Impl0_Invariant_Interface
  type t
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant' [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t)
  val invariant' [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = invariant' self }
    
end
module C02IterMut_Impl0_Invariant
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate invariant' [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) =
    [#"../02_iter_mut.rs" 22 20 22 64] Seq.length (ShallowModel0.shallow_model ( ^ C02IterMut_IterMut_Type.itermut_inner self)) = Seq.length (ShallowModel0.shallow_model ( * C02IterMut_IterMut_Type.itermut_inner self))
  val invariant' [#"../02_iter_mut.rs" 20 4 20 30] (self : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 58 8 58 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module C02IterMut_Impl1_Completed_Stub
  type t
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate completed [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t))
end
module C02IterMut_Impl1_Completed_Interface
  type t
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate completed [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t))
  val completed [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : bool
    ensures { result = completed self }
    
end
module C02IterMut_Impl1_Completed
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = C02IterMut_IterMut_Type.t_itermut t
  predicate completed [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) =
    [#"../02_iter_mut.rs" 32 8 32 70] Resolve0.resolve self /\ Seq.(==) (ShallowModel0.shallow_model (C02IterMut_IterMut_Type.itermut_inner ( * self))) (Seq.empty )
  val completed [#"../02_iter_mut.rs" 31 4 31 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type s
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = s,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function index_logic [@inline:trivial] (self : s) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 17 8 17 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic1 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = borrowed (slice t)
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic1 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = borrowed (slice t)
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
  val to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 73 14 73 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 74 4 74 82] forall i : int . 0 <= i /\ i < Seq.length result ->  * Seq.get result i = IndexLogic0.index_logic self i }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 75 4 75 85] forall i : int . 0 <= i /\ i < Seq.length result ->  ^ Seq.get result i = IndexLogic1.index_logic ( ^ self) i }
    ensures { result = to_mut_seq self }
    
  axiom to_mut_seq_spec : forall self : borrowed (slice t) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 75 4 75 85] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  ^ Seq.get (to_mut_seq self) i = IndexLogic1.index_logic ( ^ self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 74 4 74 82] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  * Seq.get (to_mut_seq self) i = IndexLogic0.index_logic self i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 73 14 73 41] Seq.length (to_mut_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic1 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = borrowed (slice t)
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
  val to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 73 14 73 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 74 4 74 82] forall i : int . 0 <= i /\ i < Seq.length result ->  * Seq.get result i = IndexLogic0.index_logic self i }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 75 4 75 85] forall i : int . 0 <= i /\ i < Seq.length result ->  ^ Seq.get result i = IndexLogic1.index_logic ( ^ self) i }
    ensures { result = to_mut_seq self }
    
  axiom to_mut_seq_spec : forall self : borrowed (slice t) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 75 4 75 85] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  ^ Seq.get (to_mut_seq self) i = IndexLogic1.index_logic ( ^ self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 74 4 74 82] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  * Seq.get (to_mut_seq self) i = IndexLogic0.index_logic self i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 73 14 73 41] Seq.length (to_mut_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module C02IterMut_Impl1_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate produces [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
end
module C02IterMut_Impl1_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate produces [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
  val produces [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = produces self visited tl }
    
end
module C02IterMut_Impl1_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic1 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = borrowed (slice t)
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Stub as ToMutSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IndexLogic1.index_logic = IndexLogic1.index_logic,
    axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  predicate produces [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
   =
    [#"../02_iter_mut.rs" 36 4 36 16] Seq.(==) (ToMutSeq0.to_mut_seq (C02IterMut_IterMut_Type.itermut_inner self)) (Seq.(++) visited (ToMutSeq0.to_mut_seq (C02IterMut_IterMut_Type.itermut_inner tl)))
  val produces [#"../02_iter_mut.rs" 37 4 37 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t) : bool
    ensures { result = produces self visited tl }
    
end
module C02IterMut_Impl1_ProducesRefl_Stub
  type t
  use seq.Seq
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl1_Produces_Stub as Produces0 with
    type t = t
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_refl [#"../02_iter_mut.rs" 44 4 44 29] (a : C02IterMut_IterMut_Type.t_itermut t) : ()
end
module C02IterMut_Impl1_ProducesRefl_Interface
  type t
  use seq.Seq
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl1_Produces_Stub as Produces0 with
    type t = t
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_refl [#"../02_iter_mut.rs" 44 4 44 29] (a : C02IterMut_IterMut_Type.t_itermut t) : ()
  val produces_refl [#"../02_iter_mut.rs" 44 4 44 29] (a : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 44 21 44 22] Invariant0.invariant' a}
    ensures { [#"../02_iter_mut.rs" 43 14 43 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C02IterMut_IterMut_Type.t_itermut t . ([#"../02_iter_mut.rs" 44 21 44 22] Invariant0.invariant' a) -> ([#"../02_iter_mut.rs" 43 14 43 39] Produces0.produces a (Seq.empty ) a)
end
module C02IterMut_Impl1_ProducesRefl
  type t
  use seq.Seq
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl1_Produces_Stub as Produces0 with
    type t = t
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  function produces_refl [#"../02_iter_mut.rs" 44 4 44 29] (a : C02IterMut_IterMut_Type.t_itermut t) : () =
    [#"../02_iter_mut.rs" 41 4 41 10] ()
  val produces_refl [#"../02_iter_mut.rs" 44 4 44 29] (a : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 44 21 44 22] Invariant0.invariant' a}
    ensures { [#"../02_iter_mut.rs" 43 14 43 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C02IterMut_IterMut_Type.t_itermut t . ([#"../02_iter_mut.rs" 44 21 44 22] Invariant0.invariant' a) -> ([#"../02_iter_mut.rs" 43 14 43 39] Produces0.produces a (Seq.empty ) a)
end
module C02IterMut_Impl1_ProducesRefl_Impl
  type t
  use seq.Seq
  use prelude.Slice
  use prelude.Borrow
  use seq.Seq
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = t,
    type s = slice t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = t,
    type s = borrowed (slice t),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Interface as ToMutSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IndexLogic1.index_logic = IndexLogic1.index_logic,
    axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl1_Produces as Produces0 with
    type t = t,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IndexLogic1.index_logic = IndexLogic1.index_logic
  clone C02IterMut_Impl0_Invariant as Invariant0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec ghost function produces_refl [#"../02_iter_mut.rs" 44 4 44 29] (a : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 44 21 44 22] Invariant0.invariant' a}
    ensures { [#"../02_iter_mut.rs" 43 14 43 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_iter_mut.rs" 41 4 41 10] ()
end
module C02IterMut_Impl1_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  clone C02IterMut_Impl1_Produces_Stub as Produces0 with
    type t = t
  function produces_trans [#"../02_iter_mut.rs" 51 4 51 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    
end
module C02IterMut_Impl1_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  clone C02IterMut_Impl1_Produces_Stub as Produces0 with
    type t = t
  function produces_trans [#"../02_iter_mut.rs" 51 4 51 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    
  val produces_trans [#"../02_iter_mut.rs" 51 4 51 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 48 15 48 32] Produces0.produces a ab b}
    requires {[#"../02_iter_mut.rs" 49 15 49 32] Produces0.produces b bc c}
    requires {[#"../02_iter_mut.rs" 51 22 51 23] Invariant0.invariant' a}
    requires {[#"../02_iter_mut.rs" 51 52 51 53] Invariant0.invariant' b}
    requires {[#"../02_iter_mut.rs" 51 82 51 83] Invariant0.invariant' c}
    ensures { [#"../02_iter_mut.rs" 50 14 50 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C02IterMut_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : C02IterMut_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : C02IterMut_IterMut_Type.t_itermut t . ([#"../02_iter_mut.rs" 48 15 48 32] Produces0.produces a ab b) -> ([#"../02_iter_mut.rs" 49 15 49 32] Produces0.produces b bc c) -> ([#"../02_iter_mut.rs" 51 22 51 23] Invariant0.invariant' a) -> ([#"../02_iter_mut.rs" 51 52 51 53] Invariant0.invariant' b) -> ([#"../02_iter_mut.rs" 51 82 51 83] Invariant0.invariant' c) -> ([#"../02_iter_mut.rs" 50 14 50 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C02IterMut_Impl1_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  clone C02IterMut_Impl1_Produces_Stub as Produces0 with
    type t = t
  function produces_trans [#"../02_iter_mut.rs" 51 4 51 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    
   =
    [#"../02_iter_mut.rs" 46 4 46 10] ()
  val produces_trans [#"../02_iter_mut.rs" 51 4 51 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 48 15 48 32] Produces0.produces a ab b}
    requires {[#"../02_iter_mut.rs" 49 15 49 32] Produces0.produces b bc c}
    requires {[#"../02_iter_mut.rs" 51 22 51 23] Invariant0.invariant' a}
    requires {[#"../02_iter_mut.rs" 51 52 51 53] Invariant0.invariant' b}
    requires {[#"../02_iter_mut.rs" 51 82 51 83] Invariant0.invariant' c}
    ensures { [#"../02_iter_mut.rs" 50 14 50 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C02IterMut_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : C02IterMut_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : C02IterMut_IterMut_Type.t_itermut t . ([#"../02_iter_mut.rs" 48 15 48 32] Produces0.produces a ab b) -> ([#"../02_iter_mut.rs" 49 15 49 32] Produces0.produces b bc c) -> ([#"../02_iter_mut.rs" 51 22 51 23] Invariant0.invariant' a) -> ([#"../02_iter_mut.rs" 51 52 51 53] Invariant0.invariant' b) -> ([#"../02_iter_mut.rs" 51 82 51 83] Invariant0.invariant' c) -> ([#"../02_iter_mut.rs" 50 14 50 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C02IterMut_Impl1_ProducesTrans_Impl
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = t,
    type s = slice t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = t,
    type s = borrowed (slice t),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Interface as ToMutSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IndexLogic1.index_logic = IndexLogic1.index_logic,
    axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Invariant as Invariant0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone C02IterMut_Impl1_Produces as Produces0 with
    type t = t,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IndexLogic1.index_logic = IndexLogic1.index_logic
  let rec ghost function produces_trans [#"../02_iter_mut.rs" 51 4 51 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 48 15 48 32] Produces0.produces a ab b}
    requires {[#"../02_iter_mut.rs" 49 15 49 32] Produces0.produces b bc c}
    requires {[#"../02_iter_mut.rs" 51 22 51 23] Invariant0.invariant' a}
    requires {[#"../02_iter_mut.rs" 51 52 51 53] Invariant0.invariant' b}
    requires {[#"../02_iter_mut.rs" 51 82 51 83] Invariant0.invariant' c}
    ensures { [#"../02_iter_mut.rs" 50 14 50 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_iter_mut.rs" 46 4 46 10] ()
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 9 8 9 12] true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Impl1_Invariant_Stub
  type t
  use prelude.Borrow
  predicate invariant' (self : borrowed t)
end
module CreusotContracts_Invariant_Impl1_Invariant_Interface
  type t
  use prelude.Borrow
  predicate invariant' (self : borrowed t)
  val invariant' (self : borrowed t) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Impl1_Invariant
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  predicate invariant' (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 38 20 38 39] Invariant0.invariant' ( * self)
  val invariant' (self : borrowed t) : bool
    ensures { result = invariant' self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Logic_Seq_Impl0_Tail_Stub
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Tail_Interface
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
  val tail (self : Seq.seq t) : Seq.seq t
    ensures { result = tail self }
    
end
module CreusotContracts_Logic_Seq_Impl0_Tail
  type t
  use seq.Seq
  use seq_ext.SeqExt
  function tail (self : Seq.seq t) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/logic/seq.rs" 47 8 47 39] SeqExt.subsequence self 1 (Seq.length self)
  val tail (self : Seq.seq t) : Seq.seq t
    ensures { result = tail self }
    
end
module Core_Slice_Impl0_TakeFirstMut_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Stub as Tail0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val take_first_mut (self : borrowed (borrowed (slice t))) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 266 18 275 9] match (result) with
      | Core_Option_Option_Type.C_Some r ->  * r = IndexLogic0.index_logic ( *  * self) 0 /\  ^ r = IndexLogic0.index_logic ( ^  * self) 0 /\ Seq.length (ShallowModel0.shallow_model ( *  * self)) > 0 /\ Seq.length (ShallowModel0.shallow_model ( ^  * self)) > 0 /\ Seq.(==) (ShallowModel0.shallow_model ( *  ^ self)) (Tail0.tail (ShallowModel0.shallow_model ( *  * self))) /\ Seq.(==) (ShallowModel0.shallow_model ( ^  ^ self)) (Tail0.tail (ShallowModel0.shallow_model ( ^  * self)))
      | Core_Option_Option_Type.C_None ->  ^ self =  * self /\ Seq.length (ShallowModel0.shallow_model ( *  * self)) = 0
      end }
    
end
module C02IterMut_Impl1_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Invariant_Stub as Invariant1 with
    type t = t
  clone C02IterMut_Impl1_Produces_Stub as Produces0 with
    type t = t
  clone C02IterMut_Impl1_Completed_Stub as Completed0 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Impl1_Invariant_Stub as Invariant0 with
    type t = C02IterMut_IterMut_Type.t_itermut t
  val next [#"../02_iter_mut.rs" 57 4 57 44] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : Core_Option_Option_Type.t_option (borrowed t)
    requires {[#"../02_iter_mut.rs" 57 17 57 21] Invariant0.invariant' self}
    ensures { [#"../02_iter_mut.rs" 53 14 56 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../02_iter_mut.rs" 57 17 57 21] Invariant1.invariant' ( ^ self) }
    
end
module C02IterMut_Impl1_Next
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl0_Tail as Tail0 with
    type t = t
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = t,
    type s = slice t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = t,
    type s = borrowed (slice t),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Interface as ToMutSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IndexLogic1.index_logic = IndexLogic1.index_logic,
    axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C02IterMut_IterMut_Type.t_itermut t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Slice_Impl0_TakeFirstMut_Interface as TakeFirstMut0 with
    type t = t,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function Tail0.tail = Tail0.tail,
    val Max0.mAX' = Max0.mAX'
  clone C02IterMut_Impl0_Invariant as Invariant1 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone C02IterMut_Impl1_Produces as Produces0 with
    type t = t,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IndexLogic1.index_logic = IndexLogic1.index_logic
  clone C02IterMut_Impl1_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve0.resolve,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant0 with
    type t = C02IterMut_IterMut_Type.t_itermut t,
    predicate Invariant0.invariant' = Invariant1.invariant'
  let rec cfg next [#"../02_iter_mut.rs" 57 4 57 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : Core_Option_Option_Type.t_option (borrowed t)
    requires {[#"../02_iter_mut.rs" 57 17 57 21] Invariant0.invariant' self}
    ensures { [#"../02_iter_mut.rs" 53 14 56 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../02_iter_mut.rs" 57 17 57 21] Invariant1.invariant' ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (borrowed t);
  var self_1 : borrowed (C02IterMut_IterMut_Type.t_itermut t);
  var _3 : borrowed (borrowed (slice t));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut (C02IterMut_IterMut_Type.itermut_inner ( * self_1));
    self_1 <- { self_1 with current = (let C02IterMut_IterMut_Type.C_IterMut a =  * self_1 in C02IterMut_IterMut_Type.C_IterMut ( ^ _3)) };
    _0 <- ([#"../02_iter_mut.rs" 58 8 58 37] TakeFirstMut0.take_first_mut _3);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module C02IterMut_Impl2_IntoIter_Interface
  type t
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  val into_iter [#"../02_iter_mut.rs" 64 4 64 30] (self : C02IterMut_IterMut_Type.t_itermut t) : C02IterMut_IterMut_Type.t_itermut t
    requires {[#"../02_iter_mut.rs" 64 17 64 21] Invariant0.invariant' self}
    ensures { [#"../02_iter_mut.rs" 63 14 63 28] result = self }
    ensures { [#"../02_iter_mut.rs" 64 26 64 30] Invariant0.invariant' result }
    
end
module C02IterMut_Impl2_IntoIter
  type t
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Invariant as Invariant0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg into_iter [#"../02_iter_mut.rs" 64 4 64 30] [@cfg:stackify] [@cfg:subregion_analysis] (self : C02IterMut_IterMut_Type.t_itermut t) : C02IterMut_IterMut_Type.t_itermut t
    requires {[#"../02_iter_mut.rs" 64 17 64 21] Invariant0.invariant' self}
    ensures { [#"../02_iter_mut.rs" 63 14 63 28] result = self }
    ensures { [#"../02_iter_mut.rs" 64 26 64 30] Invariant0.invariant' result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C02IterMut_IterMut_Type.t_itermut t;
  var self_1 : C02IterMut_IterMut_Type.t_itermut t;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    self_1 <- any C02IterMut_IterMut_Type.t_itermut t;
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Core_Ops_Range_RangeFull_Type
  type t_rangefull  =
    | C_RangeFull
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl14_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 122 27 122 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 123 26 123 54] HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 124 26 124 57] HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 125 26 125 62] ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 126 26 126 55] Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module CreusotContracts_Std1_Slice_Impl9_InBounds_Stub
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate in_bounds (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl9_InBounds_Interface
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate in_bounds (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t)
  val in_bounds (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t) : bool
    ensures { result = in_bounds self _seq }
    
end
module CreusotContracts_Std1_Slice_Impl9_InBounds
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate in_bounds (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 196 20 196 24] true
  val in_bounds (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t) : bool
    ensures { result = in_bounds self _seq }
    
end
module CreusotContracts_Std1_Slice_Impl9_HasValue_Stub
  type t
  use seq.Seq
  use prelude.Slice
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate has_value (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : slice t)
end
module CreusotContracts_Std1_Slice_Impl9_HasValue_Interface
  type t
  use seq.Seq
  use prelude.Slice
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate has_value (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : slice t)
  val has_value (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : slice t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl9_HasValue
  type t
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate has_value (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : slice t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 202 20 202 31] seq = ShallowModel0.shallow_model out
  val has_value (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : slice t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl9_ResolveElswhere_Stub
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate resolve_elswhere (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl9_ResolveElswhere_Interface
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate resolve_elswhere (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t)
  val resolve_elswhere (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self _old _fin }
    
end
module CreusotContracts_Std1_Slice_Impl9_ResolveElswhere
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate resolve_elswhere (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 208 20 208 24] true
  val resolve_elswhere (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self _old _fin }
    
end
module C02IterMut_IterMut_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Invariant_Stub as Invariant0 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel3 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val iter_mut [#"../02_iter_mut.rs" 72 0 72 55] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : C02IterMut_IterMut_Type.t_itermut t
    ensures { [#"../02_iter_mut.rs" 69 10 69 29] ShallowModel0.shallow_model (C02IterMut_IterMut_Type.itermut_inner result) = ShallowModel1.shallow_model v }
    ensures { [#"../02_iter_mut.rs" 70 10 70 35] ShallowModel2.shallow_model ( ^ C02IterMut_IterMut_Type.itermut_inner result) = ShallowModel3.shallow_model ( ^ v) }
    ensures { [#"../02_iter_mut.rs" 71 10 71 33] Seq.length (ShallowModel3.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"../02_iter_mut.rs" 72 41 72 55] Invariant0.invariant' result }
    
end
module C02IterMut_IterMut
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  clone CreusotContracts_Std1_Slice_Impl9_ResolveElswhere as ResolveElswhere0 with
    type t = t
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl9_HasValue as HasValue0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Slice_Impl9_InBounds as InBounds0 with
    type t = t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = slice t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Alloc_Vec_Impl14_IndexMut_Interface as IndexMut0 with
    type t = t,
    type i = Core_Ops_Range_RangeFull_Type.t_rangefull,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    type Output0.output = slice t,
    val Max0.mAX' = Max0.mAX'
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Invariant as Invariant0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  let rec cfg iter_mut [#"../02_iter_mut.rs" 72 0 72 55] [@cfg:stackify] [@cfg:subregion_analysis] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : C02IterMut_IterMut_Type.t_itermut t
    ensures { [#"../02_iter_mut.rs" 69 10 69 29] ShallowModel0.shallow_model (C02IterMut_IterMut_Type.itermut_inner result) = ShallowModel1.shallow_model v }
    ensures { [#"../02_iter_mut.rs" 70 10 70 35] ShallowModel2.shallow_model ( ^ C02IterMut_IterMut_Type.itermut_inner result) = ShallowModel3.shallow_model ( ^ v) }
    ensures { [#"../02_iter_mut.rs" 71 10 71 33] Seq.length (ShallowModel3.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"../02_iter_mut.rs" 72 41 72 55] Invariant0.invariant' result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C02IterMut_IterMut_Type.t_itermut t;
  var v_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _5 : borrowed (slice t);
  var _6 : borrowed (slice t);
  var _7 : borrowed (slice t);
  var _8 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _9 : Core_Ops_Range_RangeFull_Type.t_rangefull;
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _8) };
    _9 <- Core_Ops_Range_RangeFull_Type.C_RangeFull;
    _7 <- ([#"../02_iter_mut.rs" 73 26 73 31] IndexMut0.index_mut _8 _9);
    goto BB1
  }
  BB1 {
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _5 <- borrow_mut ( * _6);
    _6 <- { _6 with current = ( ^ _5) };
    _0 <- C02IterMut_IterMut_Type.C_IterMut _5;
    assume { Resolve0.resolve _7 };
    assume { Resolve0.resolve _6 };
    assume { Resolve1.resolve v_1 };
    return _0
  }
  
end
module C02IterMut_AllZero_Interface
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = usize,
    type s = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq usize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val all_zero [#"../02_iter_mut.rs" 78 0 78 35] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../02_iter_mut.rs" 76 10 76 33] Seq.length (ShallowModel0.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"../02_iter_mut.rs" 77 0 77 66] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model v) -> UIntSize.to_int (IndexLogic0.index_logic ( ^ v) i) = 0 }
    
end
module C02IterMut_AllZero
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.IntSize
  use prelude.Slice
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = C02IterMut_IterMut_Type.t_itermut usize
  use seq.Seq
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = usize,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel2 with
    type t = slice usize,
    type ShallowModelTy0.shallowModelTy = Seq.seq usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone C02IterMut_Impl1_Completed as Completed0 with
    type t = usize,
    predicate Resolve0.resolve = Resolve2.resolve,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone C02IterMut_Impl0_Invariant as Invariant0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant1 with
    type t = C02IterMut_IterMut_Type.t_itermut usize,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = usize,
    type s = slice usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = usize,
    type s = borrowed (slice usize),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Interface as ToMutSeq0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function IndexLogic1.index_logic = IndexLogic2.index_logic,
    axiom .
  clone C02IterMut_Impl1_Produces as Produces0 with
    type t = usize,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function IndexLogic1.index_logic = IndexLogic2.index_logic
  clone C02IterMut_Impl1_ProducesTrans as ProducesTrans0 with
    type t = usize,
    predicate Produces0.produces = Produces0.produces,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone C02IterMut_Impl1_ProducesRefl as ProducesRefl0 with
    type t = usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = usize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C02IterMut_Impl1_Next_Interface as Next0 with
    type t = usize,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Invariant1.invariant' = Invariant0.invariant'
  clone C02IterMut_Impl2_IntoIter_Interface as IntoIter0 with
    type t = usize,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq usize,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone C02IterMut_IterMut_Interface as IterMut1 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant',
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = usize,
    type s = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec cfg all_zero [#"../02_iter_mut.rs" 78 0 78 35] [@cfg:stackify] [@cfg:subregion_analysis] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../02_iter_mut.rs" 76 10 76 33] Seq.length (ShallowModel0.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"../02_iter_mut.rs" 77 0 77 66] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model v) -> UIntSize.to_int (IndexLogic0.index_logic ( ^ v) i) = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var it_4 : C02IterMut_IterMut_Type.t_itermut usize;
  var _5 : C02IterMut_IterMut_Type.t_itermut usize;
  var _6 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var iter_old_7 : Ghost.ghost_ty (C02IterMut_IterMut_Type.t_itermut usize);
  var produced_9 : Ghost.ghost_ty (Seq.seq (borrowed usize));
  var _14 : ();
  var _15 : Core_Option_Option_Type.t_option (borrowed usize);
  var _16 : borrowed (C02IterMut_IterMut_Type.t_itermut usize);
  var _17 : isize;
  var x_18 : borrowed usize;
  var _19 : Ghost.ghost_ty (Seq.seq (borrowed usize));
  var _21 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _6) };
    _5 <- ([#"../02_iter_mut.rs" 79 17 79 28] IterMut1.iter_mut _6);
    goto BB1
  }
  BB1 {
    it_4 <- ([#"../02_iter_mut.rs" 79 17 79 40] IntoIter0.into_iter _5);
    goto BB2
  }
  BB2 {
    iter_old_7 <- ([#"../02_iter_mut.rs" 80 19 80 32] Ghost.new it_4);
    goto BB3
  }
  BB3 {
    produced_9 <- ([#"../02_iter_mut.rs" 81 23 81 44] Ghost.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant { [#"../02_iter_mut.rs" 82 16 82 30] Invariant0.invariant' it_4 };
    invariant { [#"../02_iter_mut.rs" 83 16 83 55] Produces0.produces (Ghost.inner iter_old_7) (Ghost.inner produced_9) it_4 };
    invariant { [#"../02_iter_mut.rs" 82 4 82 32] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner produced_9) -> UIntSize.to_int ( ^ Seq.get produced_9 i) = 0 };
    goto BB6
  }
  BB6 {
    _16 <- borrow_mut it_4;
    it_4 <-  ^ _16;
    _15 <- ([#"../02_iter_mut.rs" 86 14 86 23] Next0.next _16);
    goto BB7
  }
  BB7 {
    switch (_15)
      | Core_Option_Option_Type.C_None -> goto BB8
      | Core_Option_Option_Type.C_Some _ -> goto BB9
      end
  }
  BB8 {
    _0 <- ();
    assume { Resolve0.resolve v_1 };
    return _0
  }
  BB9 {
    goto BB11
  }
  BB10 {
    assume { Resolve0.resolve v_1 };
    absurd
  }
  BB11 {
    x_18 <- Core_Option_Option_Type.some_0 _15;
    _15 <- (let Core_Option_Option_Type.C_Some a = _15 in Core_Option_Option_Type.C_Some (any borrowed usize));
    _19 <- ([#"../02_iter_mut.rs" 88 27 88 72] Ghost.new (Seq.(++) (Ghost.inner produced_9) (Seq.singleton x_18)));
    goto BB12
  }
  BB12 {
    produced_9 <- _19;
    _19 <- any Ghost.ghost_ty (Seq.seq (borrowed usize));
    x_18 <- { x_18 with current = ([#"../02_iter_mut.rs" 89 21 89 22] (0 : usize)) };
    assume { Resolve1.resolve x_18 };
    _14 <- ();
    goto BB5
  }
  
end
module C02IterMut_Impl0
  type t
end
module C02IterMut_Common_Iterator_Item_Type
  type self
  type item
end
module C02IterMut_Impl1
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C02IterMut_IterMut_Type.t_itermut t
  use seq.Seq
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = t,
    type s = slice t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = t,
    type s = borrowed (slice t),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Interface as ToMutSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IndexLogic1.index_logic = IndexLogic1.index_logic,
    axiom .
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with
    type self = C02IterMut_IterMut_Type.t_itermut t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C02IterMut_Impl1_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve0.resolve,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone C02IterMut_Impl0_Invariant as Invariant0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant1 with
    type t = C02IterMut_IterMut_Type.t_itermut t,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone C02IterMut_Impl1_Produces as Produces0 with
    type t = t,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IndexLogic1.index_logic = IndexLogic1.index_logic
  goal produces_refl_refn : [#"../02_iter_mut.rs" 44 4 44 29] forall a : C02IterMut_IterMut_Type.t_itermut t . Invariant0.invariant' a -> Invariant0.invariant' a /\ (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
  goal next_refn : [#"../02_iter_mut.rs" 57 4 57 44] forall self : borrowed (C02IterMut_IterMut_Type.t_itermut t) . Invariant1.invariant' self -> Invariant1.invariant' self /\ (forall result : Core_Option_Option_Type.t_option (borrowed t) . Invariant0.invariant' ( ^ self) /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end -> Invariant0.invariant' ( ^ self) /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_trans_refn : [#"../02_iter_mut.rs" 51 4 51 90] forall a : C02IterMut_IterMut_Type.t_itermut t . forall ab : Seq.seq (borrowed t) . forall b : C02IterMut_IterMut_Type.t_itermut t . forall bc : Seq.seq (borrowed t) . forall c : C02IterMut_IterMut_Type.t_itermut t . Invariant0.invariant' c /\ Invariant0.invariant' b /\ Invariant0.invariant' a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Invariant0.invariant' c /\ Invariant0.invariant' b /\ Invariant0.invariant' a /\ Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
end
