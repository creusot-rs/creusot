
module C02IterMut_Common_Iterator_Invariant_Stub
  type self
  val ghost predicate invariant' (self : self)
end
module C02IterMut_Common_Iterator_Invariant_Interface
  type self
  val ghost predicate invariant' (self : self)
end
module C02IterMut_Common_Iterator_Invariant
  type self
  let rec ghost predicate invariant' [#"../common.rs" 28 4 28 30] (self : self) = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../common.rs" 29 8 29 12] true
end
module C02IterMut_IterMut_Type
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  type t_itermut 't =
    | C_IterMut (borrowed (seq 't))
    
  let function itermut_inner (self : t_itermut 't) : borrowed (seq 't) = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IterMut a -> a
      end
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : borrowed t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model ( * self)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module C02IterMut_Impl0_Completed_Stub
  type t
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  val ghost predicate completed (self : borrowed (C02IterMut_IterMut_Type.t_itermut t))
end
module C02IterMut_Impl0_Completed_Interface
  type t
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  val ghost predicate completed (self : borrowed (C02IterMut_IterMut_Type.t_itermut t))
end
module C02IterMut_Impl0_Completed
  type t
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Stub as Model0 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub as Resolve0 with type t = C02IterMut_IterMut_Type.t_itermut t
  let rec ghost predicate completed [#"../02_iter_mut.rs" 17 4 17 35] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t))
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_iter_mut.rs" 18 20 18 70] Resolve0.resolve self && (let a' = Model0.model (C02IterMut_IterMut_Type.itermut_inner ( * self)) in Seq.(==) a' (Seq.empty ))
end
module CreusotContracts_Std1_Slice_Impl0_Model_Stub
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Slice
  val ghost function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Slice
  val ghost function model (self : seq t) : Seq.seq t
    ensures { Seq.length result <= UInt64.to_int (18446744073709551615 : usize) }
    ensures { result = Slice.id self }
    
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Slice
  val ghost function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Slice.id self && Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module C02IterMut_Impl0_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  val ghost predicate produces (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
end
module C02IterMut_Impl0_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  val ghost predicate produces (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
end
module C02IterMut_Impl0_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  use mach.int.Int
  use seq_ext.SeqExt
  clone CreusotContracts_Std1_Slice_Impl0_Model_Stub as Model0 with type t = t, axiom .
  let rec ghost predicate produces [#"../02_iter_mut.rs" 22 4 22 65] (self : C02IterMut_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : C02IterMut_IterMut_Type.t_itermut t)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_iter_mut.rs" 24 12 29 85] (let b = Seq.length visited + (let a' = Model0.model ( * C02IterMut_IterMut_Type.itermut_inner tl) in Seq.length a') in let a = let a' = Model0.model ( * C02IterMut_IterMut_Type.itermut_inner self) in Seq.length a' in pure {a = b}) && (let b = Seq.length visited + (let a' = Model0.model ( ^ C02IterMut_IterMut_Type.itermut_inner tl) in Seq.length a') in let a = let a' = Model0.model ( ^ C02IterMut_IterMut_Type.itermut_inner self) in Seq.length a' in pure {a = b}) && (let a' = let a' = Model0.model ( * C02IterMut_IterMut_Type.itermut_inner self) in let c' = let a' = Model0.model ( * C02IterMut_IterMut_Type.itermut_inner self) in Seq.length a' in SeqExt.subsequence a' (Seq.length visited) c' in let b' = Model0.model ( * C02IterMut_IterMut_Type.itermut_inner tl) in Seq.(==) a' b') && (let a' = let a' = Model0.model ( ^ C02IterMut_IterMut_Type.itermut_inner self) in let c' = let a' = Model0.model ( ^ C02IterMut_IterMut_Type.itermut_inner self) in Seq.length a' in SeqExt.subsequence a' (Seq.length visited) c' in let b' = Model0.model ( ^ C02IterMut_IterMut_Type.itermut_inner tl) in Seq.(==) a' b') && pure {forall i : int . 0 <= i /\ i < Seq.length visited -> Seq.get (Model0.model ( * C02IterMut_IterMut_Type.itermut_inner self)) i =  * Seq.get visited i /\ Seq.get (Model0.model ( ^ C02IterMut_IterMut_Type.itermut_inner self)) i =  ^ Seq.get visited i}
end
module C02IterMut_Impl0_ProducesRefl_Stub
  type t
  use seq.Seq
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with type t = t
  val ghost function produces_refl (a : C02IterMut_IterMut_Type.t_itermut t) : ()
end
module C02IterMut_Impl0_ProducesRefl_Interface
  type t
  use seq.Seq
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with type t = t
  val ghost function produces_refl (a : C02IterMut_IterMut_Type.t_itermut t) : ()
    ensures { [#"../02_iter_mut.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a }
    
end
module C02IterMut_Impl0_ProducesRefl
  type t
  use seq.Seq
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with type t = t
  let rec ghost function produces_refl [#"../02_iter_mut.rs" 35 4 35 29] (a : C02IterMut_IterMut_Type.t_itermut t) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_iter_mut.rs" 33 4 33 10] ()
  axiom produces_refl_spec : forall a : C02IterMut_IterMut_Type.t_itermut t . [#"../02_iter_mut.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a
end
module C02IterMut_Impl0_ProducesRefl_Impl
  type t
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model0 with type t = t, axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces as Produces0 with type t = t, val Model0.model = Model0.model
  let rec ghost function produces_refl (a : C02IterMut_IterMut_Type.t_itermut t) : ()
    ensures { [#"../02_iter_mut.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_iter_mut.rs" 33 4 33 10] ()
end
module C02IterMut_Impl0_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with type t = t
  val ghost function produces_trans (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    
end
module C02IterMut_Impl0_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with type t = t
  val ghost function produces_trans (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 38 15 38 32] Produces0.produces a ab b}
    requires {[#"../02_iter_mut.rs" 39 15 39 32] Produces0.produces b bc c}
    ensures { [#"../02_iter_mut.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c }
    
end
module C02IterMut_Impl0_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with type t = t
  let rec ghost function produces_trans [#"../02_iter_mut.rs" 41 4 41 90] (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_iter_mut.rs" 37 4 37 10] ()
  axiom produces_trans_spec : forall a : C02IterMut_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : C02IterMut_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : C02IterMut_IterMut_Type.t_itermut t . ([#"../02_iter_mut.rs" 38 15 38 32] Produces0.produces a ab b) -> ([#"../02_iter_mut.rs" 39 15 39 32] Produces0.produces b bc c) -> ([#"../02_iter_mut.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C02IterMut_Impl0_ProducesTrans_Impl
  type t
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model0 with type t = t, axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces as Produces0 with type t = t, val Model0.model = Model0.model
  let rec ghost function produces_trans (a : C02IterMut_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : C02IterMut_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : C02IterMut_IterMut_Type.t_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 38 15 38 32] Produces0.produces a ab b}
    requires {[#"../02_iter_mut.rs" 39 15 39 32] Produces0.produces b bc c}
    ensures { [#"../02_iter_mut.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_iter_mut.rs" 37 4 37 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Logic_Seq_Impl2_Tail_Stub
  type t
  use seq.Seq
  val ghost function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl2_Tail_Interface
  type t
  use seq.Seq
  val ghost function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl2_Tail
  type t
  use seq.Seq
  use seq_ext.SeqExt
  let rec ghost function tail (self : Seq.seq t) : Seq.seq t = [@vc:do_not_keep_trace] [@vc:sp]
    SeqExt.subsequence self 1 (Seq.length self)
end
module Core_Slice_Impl0_TakeFirstMut_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use prelude.Slice
  clone CreusotContracts_Logic_Seq_Impl2_Tail_Stub as Tail0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Stub as Model0 with type t = t, axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  val take_first_mut [@cfg:stackify] (self : borrowed (borrowed (seq t))) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { match (result) with
      | Core_Option_Option_Type.C_Some r ->  * r = Seq.get (Model0.model ( *  * self)) 0 /\  ^ r = Seq.get (Model0.model ( ^  * self)) 0 /\ Seq.length (Model0.model ( *  * self)) > 0 /\ Seq.length (Model0.model ( ^  * self)) > 0 /\ Seq.(==) (Model0.model ( *  ^ self)) (Tail0.tail (Model0.model ( *  * self))) /\ Seq.(==) (Model0.model ( ^  ^ self)) (Tail0.tail (Model0.model ( ^  * self)))
      | Core_Option_Option_Type.C_None ->  ^ self =  * self /\ Seq.length (Model0.model ( *  * self)) = 0
      end }
    
end
module Core_Slice_Impl0_TakeFirstMut
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use prelude.Slice
  clone CreusotContracts_Logic_Seq_Impl2_Tail_Interface as Tail0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  val take_first_mut [@cfg:stackify] (self : borrowed (borrowed (seq t))) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { match (result) with
      | Core_Option_Option_Type.C_Some r ->  * r = Seq.get (Model0.model ( *  * self)) 0 /\  ^ r = Seq.get (Model0.model ( ^  * self)) 0 /\ Seq.length (Model0.model ( *  * self)) > 0 /\ Seq.length (Model0.model ( ^  * self)) > 0 /\ Seq.(==) (Model0.model ( *  ^ self)) (Tail0.tail (Model0.model ( *  * self))) /\ Seq.(==) (Model0.model ( ^  ^ self)) (Tail0.tail (Model0.model ( ^  * self)))
      | Core_Option_Option_Type.C_None ->  ^ self =  * self /\ Seq.length (Model0.model ( *  * self)) = 0
      end }
    
end
module C02IterMut_Impl0_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone C02IterMut_Impl0_Produces_Stub as Produces0 with type t = t
  clone C02IterMut_Impl0_Completed_Stub as Completed0 with type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { [#"../02_iter_mut.rs" 43 14 46 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C02IterMut_Impl0_Next
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model1 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = C02IterMut_IterMut_Type.t_itermut t
  clone C02IterMut_Impl0_Produces as Produces0 with type t = t, val Model0.model = Model1.model
  clone C02IterMut_Impl0_Completed as Completed0 with type t = t, val Resolve0.resolve = Resolve0.resolve,
    val Model0.model = Model0.model
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Seq_Impl2_Tail as Tail0 with type t = t
  clone Core_Slice_Impl0_TakeFirstMut_Interface as TakeFirstMut0 with type t = t, val Model0.model = Model1.model,
    val Tail0.tail = Tail0.tail
  let rec cfg next [@cfg:stackify] [#"../02_iter_mut.rs" 47 4 47 44] (self : borrowed (C02IterMut_IterMut_Type.t_itermut t)) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { [#"../02_iter_mut.rs" 43 14 46 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (borrowed t);
  var self_1 : borrowed (C02IterMut_IterMut_Type.t_itermut t);
  var _3 : borrowed (borrowed (seq t));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut (C02IterMut_IterMut_Type.itermut_inner ( * self_1));
    self_1 <- { self_1 with current = (let C02IterMut_IterMut_Type.C_IterMut a =  * self_1 in C02IterMut_IterMut_Type.C_IterMut ( ^ _3)) };
    _0 <- ([#"../02_iter_mut.rs" 48 8 48 37] TakeFirstMut0.take_first_mut _3);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module C02IterMut_Impl1_IntoIter_Interface
  type t
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  val into_iter [@cfg:stackify] (self : C02IterMut_IterMut_Type.t_itermut t) : C02IterMut_IterMut_Type.t_itermut t
    ensures { [#"../02_iter_mut.rs" 53 14 53 28] result = self }
    
end
module C02IterMut_Impl1_IntoIter
  type t
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = C02IterMut_IterMut_Type.t_itermut t
  let rec cfg into_iter [@cfg:stackify] [#"../02_iter_mut.rs" 54 4 54 30] (self : C02IterMut_IterMut_Type.t_itermut t) : C02IterMut_IterMut_Type.t_itermut t
    ensures { [#"../02_iter_mut.rs" 53 14 53 28] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C02IterMut_IterMut_Type.t_itermut t;
  var self_1 : C02IterMut_IterMut_Type.t_itermut t;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    self_1 <- any C02IterMut_IterMut_Type.t_itermut t;
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Stub
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { Seq.length result <= UInt64.to_int (18446744073709551615 : usize) }
    
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy_Type
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Core_Ops_Range_RangeFull_Type
  type t_rangefull  =
    | C_RangeFull
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Stub as ResolveElswhere0 with type self = i,
    type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
    type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module CreusotContracts_Std1_Slice_Impl7_InBounds_Stub
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  val ghost predicate in_bounds (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl7_InBounds_Interface
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  val ghost predicate in_bounds (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl7_InBounds
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  let rec ghost predicate in_bounds (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    true
end
module CreusotContracts_Std1_Slice_Impl7_HasValue_Stub
  type t
  use seq.Seq
  use prelude.Slice
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  val ghost predicate has_value (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : seq t)
end
module CreusotContracts_Std1_Slice_Impl7_HasValue_Interface
  type t
  use seq.Seq
  use prelude.Slice
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  val ghost predicate has_value (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : seq t)
end
module CreusotContracts_Std1_Slice_Impl7_HasValue
  type t
  use seq.Seq
  use prelude.Slice
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  clone CreusotContracts_Std1_Slice_Impl0_Model_Stub as Model0 with type t = t, axiom .
  let rec ghost predicate has_value (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq t) (out : seq t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    let b = Model0.model out in pure {seq = b}
end
module CreusotContracts_Std1_Slice_Impl7_ResolveElswhere_Stub
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  val ghost predicate resolve_elswhere (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t)
    
end
module CreusotContracts_Std1_Slice_Impl7_ResolveElswhere_Interface
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  val ghost predicate resolve_elswhere (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t)
    
end
module CreusotContracts_Std1_Slice_Impl7_ResolveElswhere
  type t
  use seq.Seq
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  let rec ghost predicate resolve_elswhere (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq t) (_fin : Seq.seq t)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    true
end
module Core_Slice_Index_Impl6_Output_Type
  type t
  use prelude.Slice
  use seq.Seq
  type output  =
    seq t
end
module C02IterMut_IterMut_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Stub as Model2 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model1 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Stub as Model0 with type t = t, axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  val iter_mut [@cfg:stackify] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : C02IterMut_IterMut_Type.t_itermut t
    ensures { [#"../02_iter_mut.rs" 59 10 59 31] Model0.model ( * C02IterMut_IterMut_Type.itermut_inner result) = Model1.model ( * v) }
    ensures { [#"../02_iter_mut.rs" 60 10 60 31] Model0.model ( ^ C02IterMut_IterMut_Type.itermut_inner result) = Model1.model ( ^ v) }
    ensures { [#"../02_iter_mut.rs" 61 10 61 35] Seq.length (Model1.model ( ^ v)) = Seq.length (Model2.model v) }
    
end
module C02IterMut_IterMut
  type t
  use prelude.Borrow
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model2 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model0 with type t = t, axiom .
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  use prelude.Slice
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = t
  clone Core_Slice_Index_Impl6_Output_Type as Output0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl7_ResolveElswhere as ResolveElswhere0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl7_HasValue as HasValue0 with type t = t, val Model0.model = Model0.model
  clone CreusotContracts_Std1_Slice_Impl7_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = seq t
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = t,
    type i = Core_Ops_Range_RangeFull_Type.t_rangefull, type a = Alloc_Alloc_Global_Type.t_global,
    val Model0.model = Model1.model, val InBounds0.in_bounds = InBounds0.in_bounds,
    val HasValue0.has_value = HasValue0.has_value,
    val ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  let rec cfg iter_mut [@cfg:stackify] [#"../02_iter_mut.rs" 62 0 62 55] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : C02IterMut_IterMut_Type.t_itermut t
    ensures { [#"../02_iter_mut.rs" 59 10 59 31] Model0.model ( * C02IterMut_IterMut_Type.itermut_inner result) = Model1.model ( * v) }
    ensures { [#"../02_iter_mut.rs" 60 10 60 31] Model0.model ( ^ C02IterMut_IterMut_Type.itermut_inner result) = Model1.model ( ^ v) }
    ensures { [#"../02_iter_mut.rs" 61 10 61 35] Seq.length (Model1.model ( ^ v)) = Seq.length (Model2.model v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C02IterMut_IterMut_Type.t_itermut t;
  var v_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _5 : borrowed (seq t);
  var _6 : borrowed (seq t);
  var _7 : borrowed (seq t);
  var _8 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _9 : Core_Ops_Range_RangeFull_Type.t_rangefull;
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _8) };
    assume { Resolve0.resolve v_1 };
    _9 <- Core_Ops_Range_RangeFull_Type.C_RangeFull;
    _7 <- ([#"../02_iter_mut.rs" 63 26 63 31] IndexMut0.index_mut _8 _9);
    goto BB1
  }
  BB1 {
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    assume { Resolve1.resolve _7 };
    _5 <- borrow_mut ( * _6);
    _6 <- { _6 with current = ( ^ _5) };
    assume { Resolve1.resolve _6 };
    _0 <- C02IterMut_IterMut_Type.C_IterMut _5;
    return _0
  }
  
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
  let function ghost_0 (self : t_ghost 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ghost a -> a
      end
end
module C02IterMut_AllZero_Interface
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Stub as Model1 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val all_zero [@cfg:stackify] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../02_iter_mut.rs" 66 10 66 35] Seq.length (Model0.model ( ^ v)) = Seq.length (Model1.model v) }
    ensures { [#"../02_iter_mut.rs" 67 0 67 69] forall i : int . 0 <= i /\ i < Seq.length (Model1.model v) -> UInt64.to_int (Seq.get (Model0.model ( ^ v)) i) = 0 }
    
end
module C02IterMut_AllZero
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model0.model
  use prelude.IntSize
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model2 with type t = usize, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = seq usize,
    type ModelTy0.modelTy = ModelTy1.modelTy, val Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = C02IterMut_IterMut_Type.t_itermut usize
  clone C02IterMut_Impl0_Completed as Completed0 with type t = usize, val Resolve0.resolve = Resolve2.resolve,
    val Model0.model = Model3.model
  clone C02IterMut_Impl0_Produces as Produces0 with type t = usize, val Model0.model = Model2.model
  clone C02IterMut_Impl0_ProducesTrans as ProducesTrans0 with type t = usize,
    val Produces0.produces = Produces0.produces, axiom .
  clone C02IterMut_Impl0_ProducesRefl as ProducesRefl0 with type t = usize, val Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = usize
  clone C02IterMut_Impl0_Next_Interface as Next0 with type t = usize, val Completed0.completed = Completed0.completed,
    val Produces0.produces = Produces0.produces
  clone C02IterMut_Impl1_IntoIter_Interface as IntoIter0 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone C02IterMut_IterMut_Interface as IterMut1 with type t = usize, val Model0.model = Model2.model,
    val Model1.model = Model0.model, val Model2.model = Model1.model
  let rec cfg all_zero [@cfg:stackify] [#"../02_iter_mut.rs" 68 0 68 35] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../02_iter_mut.rs" 66 10 66 35] Seq.length (Model0.model ( ^ v)) = Seq.length (Model1.model v) }
    ensures { [#"../02_iter_mut.rs" 67 0 67 69] forall i : int . 0 <= i /\ i < Seq.length (Model1.model v) -> UInt64.to_int (Seq.get (Model0.model ( ^ v)) i) = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var iter_4 : C02IterMut_IterMut_Type.t_itermut usize;
  var _5 : C02IterMut_IterMut_Type.t_itermut usize;
  var _6 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var iter_old_7 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (C02IterMut_IterMut_Type.t_itermut usize);
  var _9 : ();
  var produced_10 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq (borrowed usize));
  var _13 : ();
  var _16 : ();
  var _17 : Core_Option_Option_Type.t_option (borrowed usize);
  var _18 : borrowed (C02IterMut_IterMut_Type.t_itermut usize);
  var _19 : isize;
  var i_20 : borrowed usize;
  var _21 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq (borrowed usize));
  var _24 : ();
  var x_25 : borrowed usize;
  var _26 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _6) };
    _5 <- ([#"../02_iter_mut.rs" 70 13 70 24] IterMut1.iter_mut _6);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve v_1 };
    iter_4 <- ([#"../02_iter_mut.rs" 69 4 69 91] IntoIter0.into_iter _5);
    goto BB2
  }
  BB2 {
    _9 <- ();
    iter_old_7 <- ([#"../02_iter_mut.rs" 69 4 69 91] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter_4);
    goto BB3
  }
  BB3 {
    _13 <- ();
    produced_10 <- ([#"../02_iter_mut.rs" 69 4 69 91] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant structural { [#"../02_iter_mut.rs" 69 4 69 91] Produces0.produces (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 iter_old_7) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_10) iter_4 };
    invariant user { [#"../02_iter_mut.rs" 69 4 69 91] forall i : int . 0 <= i /\ i < Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_10) -> UInt64.to_int ( ^ Seq.get (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_10) i) = 0 };
    _18 <- borrow_mut iter_4;
    iter_4 <-  ^ _18;
    _17 <- ([#"../02_iter_mut.rs" 69 4 69 91] Next0.next _18);
    goto BB6
  }
  BB6 {
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB9
      end
  }
  BB7 {
    _0 <- ();
    return _0
  }
  BB8 {
    absurd
  }
  BB9 {
    assume { Resolve1.resolve i_20 };
    i_20 <- Core_Option_Option_Type.some_0 _17;
    _17 <- (let Core_Option_Option_Type.C_Some a = _17 in Core_Option_Option_Type.C_Some (any borrowed usize));
    _24 <- ();
    _21 <- ([#"../02_iter_mut.rs" 69 4 69 91] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.snoc (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_10) i_20));
    goto BB10
  }
  BB10 {
    produced_10 <- _21;
    _21 <- any CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq (borrowed usize));
    assume { Resolve1.resolve x_25 };
    x_25 <- i_20;
    i_20 <- any borrowed usize;
    x_25 <- { x_25 with current = (0 : usize) };
    assume { Resolve1.resolve x_25 };
    _16 <- ();
    goto BB5
  }
  
end
module C02IterMut_Impl0_Item_Type
  type t
  use prelude.Borrow
  type item  =
    borrowed t
end
module C02IterMut_Common_Iterator_Item_Type
  type self
  type item
end
module C02IterMut_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C02IterMut_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C02IterMut_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C02IterMut_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  val ghost predicate completed (self : borrowed self)
end
module C02IterMut_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  val ghost predicate completed (self : borrowed self)
end
module C02IterMut_Common_Iterator_Completed
  type self
  use prelude.Borrow
  val ghost predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C02IterMut_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl (a : self) : ()
end
module C02IterMut_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl (a : self) : ()
    requires {[#"../common.rs" 14 15 14 28] Invariant0.invariant' a}
    ensures { [#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a }
    
end
module C02IterMut_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C02IterMut_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C02IterMut_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 19 15 19 28] Invariant0.invariant' a}
    requires {[#"../common.rs" 20 15 20 28] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 15 21 28] Invariant0.invariant' c}
    requires {[#"../common.rs" 22 15 22 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 23 15 23 32] Produces0.produces b bc c}
    ensures { [#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c }
    
end
module C02IterMut_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C02IterMut_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Completed_Stub as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C02IterMut_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C02IterMut_Common_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item_Type as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Completed_Interface as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C02IterMut_Common_Iterator_Invariant_Interface as Invariant0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C02IterMut_Impl0
  type t
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model0 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model0.model
  use C02IterMut_IterMut_Type as C02IterMut_IterMut_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = C02IterMut_IterMut_Type.t_itermut t
  clone C02IterMut_Common_Iterator_Invariant as Invariant0 with type self = C02IterMut_IterMut_Type.t_itermut t
  clone C02IterMut_Impl0_Item_Type as Item0 with type t = t
  clone C02IterMut_Impl0_Produces as Produces0 with type t = t, val Model0.model = Model0.model
  clone C02IterMut_Impl0_ProducesRefl as ProducesRefl0 with type t = t, val Produces0.produces = Produces0.produces,
    axiom .
  clone C02IterMut_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with type self = C02IterMut_IterMut_Type.t_itermut t,
    val produces_refl = ProducesRefl0.produces_refl, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, type Item0.item = Item0.item, axiom .
  clone C02IterMut_Impl0_Completed as Completed0 with type t = t, val Resolve0.resolve = Resolve0.resolve,
    val Model0.model = Model1.model
  clone C02IterMut_Common_Iterator_Completed_Interface as Completed1 with type self = C02IterMut_IterMut_Type.t_itermut t,
    val completed = Completed0.completed
  clone C02IterMut_Common_Iterator_Produces_Interface as Produces1 with type self = C02IterMut_IterMut_Type.t_itermut t,
    val produces = Produces0.produces, type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Item_Type as Item1 with type self = C02IterMut_IterMut_Type.t_itermut t,
    type item = Item0.item
  goal produces_refl_spec : forall a : C02IterMut_IterMut_Type.t_itermut t . (([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> true) /\ (forall result : () . ([#"../02_iter_mut.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a))
  use prelude.Borrow
  clone C02IterMut_Impl0_ProducesTrans as ProducesTrans0 with type t = t, val Produces0.produces = Produces0.produces,
    axiom .
  clone C02IterMut_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with type self = C02IterMut_IterMut_Type.t_itermut t,
    val produces_trans = ProducesTrans0.produces_trans, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, type Item0.item = Item0.item, axiom .
  goal produces_trans_spec : forall a : C02IterMut_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : C02IterMut_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : C02IterMut_IterMut_Type.t_itermut t . (([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) && ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) && ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) && ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) && ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../02_iter_mut.rs" 39 15 39 32] Produces0.produces b bc c) && ([#"../02_iter_mut.rs" 38 15 38 32] Produces0.produces a ab b)) /\ (forall result : () . ([#"../02_iter_mut.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c))
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C02IterMut_Impl0_Next_Interface as Next0 with type t = t, val Completed0.completed = Completed0.completed,
    val Produces0.produces = Produces0.produces
  clone C02IterMut_Common_Iterator_Next_Interface as Next1 with type self = C02IterMut_IterMut_Type.t_itermut t,
    val next = Next0.next, val Invariant0.invariant' = Invariant0.invariant', type Item0.item = Item0.item,
    val Completed0.completed = Completed0.completed, val Produces0.produces = Produces0.produces
end
