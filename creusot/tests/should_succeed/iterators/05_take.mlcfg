
module C05Take_Common_Iterator_Invariant_Stub
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C05Take_Common_Iterator_Invariant_Interface
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C05Take_Common_Iterator_Invariant
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self) =
    [#"../common.rs" 29 8 29 12] true
  val invariant' [#"../common.rs" 28 4 28 30] (self : self) : bool
    ensures { result = invariant' self }
    
end
module C05Take_Take_Type
  use mach.int.Int
  use prelude.UIntSize
  type t_take 'i =
    | C_Take 'i usize
    
  let function take_n (self : t_take 'i) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Take _ a -> a
      end
  let function take_iter (self : t_take 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Take a _ -> a
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C05Take_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C05Take_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C05Take_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C05Take_Impl0_Completed_Stub
  type i
  use prelude.Borrow
  use C05Take_Take_Type as C05Take_Take_Type
  predicate completed [#"../05_take.rs" 21 4 21 35] (self : borrowed (C05Take_Take_Type.t_take i))
end
module C05Take_Impl0_Completed_Interface
  type i
  use prelude.Borrow
  use C05Take_Take_Type as C05Take_Take_Type
  predicate completed [#"../05_take.rs" 21 4 21 35] (self : borrowed (C05Take_Take_Type.t_take i))
end
module C05Take_Impl0_Completed
  type i
  use prelude.Borrow
  use C05Take_Take_Type as C05Take_Take_Type
  use mach.int.UInt64
  use mach.int.Int
  clone C05Take_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = C05Take_Take_Type.t_take i
  predicate completed [#"../05_take.rs" 21 4 21 35] (self : borrowed (C05Take_Take_Type.t_take i)) =
    [#"../05_take.rs" 22 8 25 9] UInt64.to_int (C05Take_Take_Type.take_n ( * self)) = 0 /\ Resolve0.resolve self \/ UInt64.to_int (C05Take_Take_Type.take_n ( * self)) > 0 /\ UInt64.to_int (C05Take_Take_Type.take_n ( * self)) = UInt64.to_int (C05Take_Take_Type.take_n ( ^ self)) + 1 /\ Completed0.completed {current = C05Take_Take_Type.take_iter ( * self); final = C05Take_Take_Type.take_iter ( ^ self)}
  val completed [#"../05_take.rs" 21 4 21 35] (self : borrowed (C05Take_Take_Type.t_take i)) : bool
    ensures { result = completed self }
    
end
module C05Take_Common_Iterator_Item_Type
  type self
  type item
end
module C05Take_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C05Take_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C05Take_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module C05Take_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Take_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C05Take_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
end
module C05Take_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Take_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C05Take_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C05Take_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Take_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C05Take_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  val produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
    requires {[#"../common.rs" 14 15 14 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C05Take_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Take_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C05Take_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C05Take_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Take_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C05Take_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C05Take_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Take_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C05Take_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 19 15 19 28] Invariant0.invariant' a}
    requires {[#"../common.rs" 20 15 20 28] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 15 21 28] Invariant0.invariant' c}
    requires {[#"../common.rs" 22 15 22 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 23 15 23 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C05Take_Impl0_Produces_Stub
  type i
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C05Take_Take_Type as C05Take_Take_Type
  predicate produces [#"../05_take.rs" 29 4 29 64] (self : C05Take_Take_Type.t_take i) (visited : Seq.seq Item0.item) (o : C05Take_Take_Type.t_take i)
    
end
module C05Take_Impl0_Produces_Interface
  type i
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C05Take_Take_Type as C05Take_Take_Type
  predicate produces [#"../05_take.rs" 29 4 29 64] (self : C05Take_Take_Type.t_take i) (visited : Seq.seq Item0.item) (o : C05Take_Take_Type.t_take i)
    
end
module C05Take_Impl0_Produces
  type i
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C05Take_Take_Type as C05Take_Take_Type
  use mach.int.UInt64
  use mach.int.Int
  clone C05Take_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  predicate produces [#"../05_take.rs" 29 4 29 64] (self : C05Take_Take_Type.t_take i) (visited : Seq.seq Item0.item) (o : C05Take_Take_Type.t_take i)
    
   =
    [#"../05_take.rs" 30 8 32 9] UInt64.to_int (C05Take_Take_Type.take_n self) = UInt64.to_int (C05Take_Take_Type.take_n o) + Seq.length visited /\ Produces0.produces (C05Take_Take_Type.take_iter self) visited (C05Take_Take_Type.take_iter o)
  val produces [#"../05_take.rs" 29 4 29 64] (self : C05Take_Take_Type.t_take i) (visited : Seq.seq Item0.item) (o : C05Take_Take_Type.t_take i) : bool
    ensures { result = produces self visited o }
    
end
module C05Take_Impl0_Invariant_Stub
  type i
  use C05Take_Take_Type as C05Take_Take_Type
  predicate invariant' [#"../05_take.rs" 36 4 36 30] (self : C05Take_Take_Type.t_take i)
end
module C05Take_Impl0_Invariant_Interface
  type i
  use C05Take_Take_Type as C05Take_Take_Type
  predicate invariant' [#"../05_take.rs" 36 4 36 30] (self : C05Take_Take_Type.t_take i)
end
module C05Take_Impl0_Invariant
  type i
  use C05Take_Take_Type as C05Take_Take_Type
  clone C05Take_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = i
  predicate invariant' [#"../05_take.rs" 36 4 36 30] (self : C05Take_Take_Type.t_take i) =
    [#"../05_take.rs" 37 8 39 9] Invariant0.invariant' (C05Take_Take_Type.take_iter self)
  val invariant' [#"../05_take.rs" 36 4 36 30] (self : C05Take_Take_Type.t_take i) : bool
    ensures { result = invariant' self }
    
end
module C05Take_Impl0_ProducesRefl_Stub
  type i
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C05Take_Take_Type as C05Take_Take_Type
  clone C05Take_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C05Take_Impl0_Invariant_Stub as Invariant0 with
    type i = i
  function produces_refl [#"../05_take.rs" 45 4 45 29] (a : C05Take_Take_Type.t_take i) : ()
end
module C05Take_Impl0_ProducesRefl_Interface
  type i
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C05Take_Take_Type as C05Take_Take_Type
  clone C05Take_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C05Take_Impl0_Invariant_Stub as Invariant0 with
    type i = i
  function produces_refl [#"../05_take.rs" 45 4 45 29] (a : C05Take_Take_Type.t_take i) : ()
  axiom produces_refl_spec : forall a : C05Take_Take_Type.t_take i . ([#"../05_take.rs" 43 15 43 28] Invariant0.invariant' a) -> ([#"../05_take.rs" 44 14 44 39] Produces0.produces a (Seq.empty ) a)
end
module C05Take_Impl0_ProducesRefl
  type i
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C05Take_Take_Type as C05Take_Take_Type
  clone C05Take_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C05Take_Impl0_Invariant_Stub as Invariant0 with
    type i = i
  function produces_refl [#"../05_take.rs" 45 4 45 29] (a : C05Take_Take_Type.t_take i) : () =
    [#"../05_take.rs" 42 4 42 10] ()
  val produces_refl [#"../05_take.rs" 45 4 45 29] (a : C05Take_Take_Type.t_take i) : ()
    requires {[#"../05_take.rs" 43 15 43 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C05Take_Take_Type.t_take i . ([#"../05_take.rs" 43 15 43 28] Invariant0.invariant' a) -> ([#"../05_take.rs" 44 14 44 39] Produces0.produces a (Seq.empty ) a)
end
module C05Take_Impl0_ProducesRefl_Impl
  type i
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C05Take_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C05Take_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  clone C05Take_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C05Take_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  use C05Take_Take_Type as C05Take_Take_Type
  clone C05Take_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces
  clone C05Take_Impl0_Invariant as Invariant0 with
    type i = i,
    predicate Invariant0.invariant' = Invariant1.invariant'
  let rec ghost function produces_refl [#"../05_take.rs" 45 4 45 29] (a : C05Take_Take_Type.t_take i) : ()
    requires {[#"../05_take.rs" 43 15 43 28] Invariant0.invariant' a}
    ensures { [#"../05_take.rs" 44 14 44 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_take.rs" 42 4 42 10] ()
end
module C05Take_Impl0_ProducesTrans_Stub
  type i
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C05Take_Take_Type as C05Take_Take_Type
  clone C05Take_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C05Take_Impl0_Invariant_Stub as Invariant0 with
    type i = i
  function produces_trans [#"../05_take.rs" 54 4 54 90] (a : C05Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : C05Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : C05Take_Take_Type.t_take i) : ()
    
end
module C05Take_Impl0_ProducesTrans_Interface
  type i
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C05Take_Take_Type as C05Take_Take_Type
  clone C05Take_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C05Take_Impl0_Invariant_Stub as Invariant0 with
    type i = i
  function produces_trans [#"../05_take.rs" 54 4 54 90] (a : C05Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : C05Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : C05Take_Take_Type.t_take i) : ()
    
  axiom produces_trans_spec : forall a : C05Take_Take_Type.t_take i, ab : Seq.seq Item0.item, b : C05Take_Take_Type.t_take i, bc : Seq.seq Item0.item, c : C05Take_Take_Type.t_take i . ([#"../05_take.rs" 48 15 48 28] Invariant0.invariant' a) -> ([#"../05_take.rs" 49 15 49 28] Invariant0.invariant' b) -> ([#"../05_take.rs" 50 15 50 28] Invariant0.invariant' c) -> ([#"../05_take.rs" 51 15 51 32] Produces0.produces a ab b) -> ([#"../05_take.rs" 52 15 52 32] Produces0.produces b bc c) -> ([#"../05_take.rs" 53 14 53 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C05Take_Impl0_ProducesTrans
  type i
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C05Take_Take_Type as C05Take_Take_Type
  clone C05Take_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C05Take_Impl0_Invariant_Stub as Invariant0 with
    type i = i
  function produces_trans [#"../05_take.rs" 54 4 54 90] (a : C05Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : C05Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : C05Take_Take_Type.t_take i) : ()
    
   =
    [#"../05_take.rs" 47 4 47 10] ()
  val produces_trans [#"../05_take.rs" 54 4 54 90] (a : C05Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : C05Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : C05Take_Take_Type.t_take i) : ()
    requires {[#"../05_take.rs" 48 15 48 28] Invariant0.invariant' a}
    requires {[#"../05_take.rs" 49 15 49 28] Invariant0.invariant' b}
    requires {[#"../05_take.rs" 50 15 50 28] Invariant0.invariant' c}
    requires {[#"../05_take.rs" 51 15 51 32] Produces0.produces a ab b}
    requires {[#"../05_take.rs" 52 15 52 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C05Take_Take_Type.t_take i, ab : Seq.seq Item0.item, b : C05Take_Take_Type.t_take i, bc : Seq.seq Item0.item, c : C05Take_Take_Type.t_take i . ([#"../05_take.rs" 48 15 48 28] Invariant0.invariant' a) -> ([#"../05_take.rs" 49 15 49 28] Invariant0.invariant' b) -> ([#"../05_take.rs" 50 15 50 28] Invariant0.invariant' c) -> ([#"../05_take.rs" 51 15 51 32] Produces0.produces a ab b) -> ([#"../05_take.rs" 52 15 52 32] Produces0.produces b bc c) -> ([#"../05_take.rs" 53 14 53 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C05Take_Impl0_ProducesTrans_Impl
  type i
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C05Take_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C05Take_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  clone C05Take_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C05Take_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  use C05Take_Take_Type as C05Take_Take_Type
  clone C05Take_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces
  clone C05Take_Impl0_Invariant as Invariant0 with
    type i = i,
    predicate Invariant0.invariant' = Invariant1.invariant'
  let rec ghost function produces_trans [#"../05_take.rs" 54 4 54 90] (a : C05Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : C05Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : C05Take_Take_Type.t_take i) : ()
    requires {[#"../05_take.rs" 48 15 48 28] Invariant0.invariant' a}
    requires {[#"../05_take.rs" 49 15 49 28] Invariant0.invariant' b}
    requires {[#"../05_take.rs" 50 15 50 28] Invariant0.invariant' c}
    requires {[#"../05_take.rs" 51 15 51 32] Produces0.produces a ab b}
    requires {[#"../05_take.rs" 52 15 52 32] Produces0.produces b bc c}
    ensures { [#"../05_take.rs" 53 14 53 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_take.rs" 47 4 47 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module C05Take_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Take_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C05Take_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C05Take_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  val next [@cfg:stackify] [#"../common.rs" 37 4 37 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C05Take_Common_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Take_Common_Iterator_Produces_Interface as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C05Take_Common_Iterator_Completed_Interface as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C05Take_Common_Iterator_Invariant_Interface as Invariant0 with
    type self = self
  val next [@cfg:stackify] [#"../common.rs" 37 4 37 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C05Take_Impl0_Next_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  use C05Take_Take_Type as C05Take_Take_Type
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C05Take_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C05Take_Impl0_Completed_Stub as Completed0 with
    type i = i
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C05Take_Impl0_Invariant_Stub as Invariant0 with
    type i = i
  val next [@cfg:stackify] [#"../05_take.rs" 61 4 61 41] (self : borrowed (C05Take_Take_Type.t_take i)) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../05_take.rs" 56 4 56 40] Invariant0.invariant' ( * self)}
    ensures { [#"../05_take.rs" 56 4 56 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../05_take.rs" 57 14 60 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C05Take_Impl0_Next
  type i
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C05Take_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C05Take_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C05Take_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  clone C05Take_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C05Take_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  use C05Take_Take_Type as C05Take_Take_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C05Take_Take_Type.t_take i
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C05Take_Common_Iterator_Next_Interface as Next0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces
  clone C05Take_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces
  clone C05Take_Impl0_Completed as Completed0 with
    type i = i,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Completed0.completed = Completed1.completed
  clone C05Take_Impl0_Invariant as Invariant0 with
    type i = i,
    predicate Invariant0.invariant' = Invariant1.invariant'
  let rec cfg next [@cfg:stackify] [#"../05_take.rs" 61 4 61 41] (self : borrowed (C05Take_Take_Type.t_take i)) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../05_take.rs" 56 4 56 40] Invariant0.invariant' ( * self)}
    ensures { [#"../05_take.rs" 56 4 56 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../05_take.rs" 57 14 60 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option Item0.item;
  var self_1 : borrowed (C05Take_Take_Type.t_take i);
  var _5 : bool;
  var _6 : usize;
  var _7 : borrowed i;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _6 <- C05Take_Take_Type.take_n ( * self_1);
    _5 <- ([#"../05_take.rs" 62 11 62 22] _6 <> ([#"../05_take.rs" 62 21 62 22] (0 : usize)));
    switch (_5)
      | False -> goto BB3
      | True -> goto BB1
      end
  }
  BB1 {
    self_1 <- { self_1 with current = (let C05Take_Take_Type.C_Take a b =  * self_1 in C05Take_Take_Type.C_Take a ([#"../05_take.rs" 63 12 63 23] C05Take_Take_Type.take_n ( * self_1) - ([#"../05_take.rs" 63 22 63 23] (1 : usize)))) };
    _7 <- borrow_mut (C05Take_Take_Type.take_iter ( * self_1));
    self_1 <- { self_1 with current = (let C05Take_Take_Type.C_Take a b =  * self_1 in C05Take_Take_Type.C_Take ( ^ _7) b) };
    _0 <- ([#"../05_take.rs" 64 12 64 28] Next0.next _7);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    goto BB4
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module C05Take_Impl0_Item_Type
  type i
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  type item  =
    Item0.item
end
module C05Take_Impl0
  type i
  use seq.Seq
  clone C05Take_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C05Take_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C05Take_Common_Iterator_Invariant_Interface as Invariant1 with
    type self = i
  clone C05Take_Impl0_Item_Type as Item1 with
    type i = i,
    type Item0.item = Item0.item
  use C05Take_Take_Type as C05Take_Take_Type
  clone C05Take_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces
  clone C05Take_Impl0_Invariant as Invariant0 with
    type i = i,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone C05Take_Impl0_ProducesRefl as ProducesRefl0 with
    type i = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C05Take_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = C05Take_Take_Type.t_take i,
    function produces_refl = ProducesRefl0.produces_refl,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item1.item,
    axiom .
  goal produces_refl_spec : forall a : C05Take_Take_Type.t_take i . (([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../05_take.rs" 43 15 43 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../05_take.rs" 44 14 44 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a))
  clone C05Take_Impl0_ProducesTrans as ProducesTrans0 with
    type i = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C05Take_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = C05Take_Take_Type.t_take i,
    function produces_trans = ProducesTrans0.produces_trans,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item1.item,
    axiom .
  goal produces_trans_spec : forall a : C05Take_Take_Type.t_take i, ab : Seq.seq Item0.item, b : C05Take_Take_Type.t_take i, bc : Seq.seq Item0.item, c : C05Take_Take_Type.t_take i . (([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) && ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) && ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) && ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) && ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../05_take.rs" 52 15 52 32] Produces0.produces b bc c) && ([#"../05_take.rs" 51 15 51 32] Produces0.produces a ab b) && ([#"../05_take.rs" 50 15 50 28] Invariant0.invariant' c) && ([#"../05_take.rs" 49 15 49 28] Invariant0.invariant' b) && ([#"../05_take.rs" 48 15 48 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../05_take.rs" 53 14 53 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c))
  clone C05Take_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C05Take_Take_Type.t_take i
  clone C05Take_Impl0_Completed as Completed0 with
    type i = i,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Completed0.completed = Completed1.completed
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C05Take_Impl0_Next_Interface as Next0 with
    type i = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone C05Take_Common_Iterator_Next_Interface as Next1 with
    type self = C05Take_Take_Type.t_take i,
    val next = Next0.next,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item1.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
end
