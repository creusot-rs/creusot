<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.12.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="06_map_precond.mlcfg"/>
<theory name="C06MapPrecond_Impl1_PreservationInv_Impl" proved="true">
 <goal name="preservation_inv&#39;vc" expl="VC for preservation_inv" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="preservation_inv&#39;vc.0" expl="VC for preservation_inv" proved="true">
  <proof prover="0" timelimit="5" memlimit="2000"><result status="valid" time="3.462646" steps="39815"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_ProducesRefl_Impl" proved="true">
 <goal name="produces_refl&#39;vc" expl="VC for produces_refl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_refl&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="produces_refl&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="produces_refl&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.110000" steps="26101"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_ProducesTrans_Impl" proved="true">
 <goal name="produces_trans&#39;vc" expl="VC for produces_trans" proved="true">
 <transf name="unfold" proved="true" arg1="produces">
  <goal name="produces_trans&#39;vc.0" expl="VC for produces_trans" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="produces_trans&#39;vc.0.0" expl="VC for produces_trans" proved="true">
   <proof prover="0"><result status="valid" time="0.010000" steps="47"/></proof>
   </goal>
   <goal name="produces_trans&#39;vc.0.1" expl="VC for produces_trans" proved="true">
   <transf name="exists" proved="true" arg1="(s1 ++ s)">
    <goal name="produces_trans&#39;vc.0.1.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="produces_trans&#39;vc.0.1.0.0" proved="true">
     <proof prover="0" timelimit="5"><result status="valid" time="0.010000" steps="42"/></proof>
     </goal>
     <goal name="produces_trans&#39;vc.0.1.0.1" proved="true">
     <proof prover="0" timelimit="5"><result status="valid" time="0.010000" steps="36"/></proof>
     </goal>
     <goal name="produces_trans&#39;vc.0.1.0.2" proved="true">
     <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
      <goal name="produces_trans&#39;vc.0.1.0.2.0" proved="true">
      <proof prover="0" timelimit="5"><result status="valid" time="0.010000" steps="41"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="produces_trans&#39;vc.0.1.0.3" proved="true">
     <transf name="exists" proved="true" arg1="(fs1++fs)">
      <goal name="produces_trans&#39;vc.0.1.0.3.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="produces_trans&#39;vc.0.1.0.3.0.0" proved="true">
       <proof prover="0"><result status="valid" time="0.010000" steps="42"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.1" proved="true">
       <proof prover="0"><result status="valid" time="0.040000" steps="479"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.2" proved="true">
       <proof prover="0"><result status="valid" time="0.010000" steps="69"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.3" proved="true">
       <proof prover="0"><result status="valid" time="0.030000" steps="217"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.4" proved="true">
       <proof prover="0"><result status="valid" time="0.020000" steps="182"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.5" proved="true">
       <proof prover="0" timelimit="5"><result status="valid" time="0.030000" steps="523"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.6" proved="true">
       <transf name="instantiate" proved="true" arg1="H2" arg2="(i-length ab)">
        <goal name="produces_trans&#39;vc.0.1.0.3.0.6.0" proved="true">
        <transf name="instantiate" proved="true" arg1="H10" arg2="i">
         <goal name="produces_trans&#39;vc.0.1.0.3.0.6.0.0" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_trans&#39;vc.0.1.0.3.0.6.0.0.0" proved="true">
          <proof prover="0" timelimit="5"><result status="valid" time="1.159738" steps="5929"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.7" proved="true">
       <transf name="instantiate" proved="true" arg1="H2" arg2="(i-length ab)">
        <goal name="produces_trans&#39;vc.0.1.0.3.0.7.0" proved="true">
        <transf name="instantiate" proved="true" arg1="H10" arg2="i">
         <goal name="produces_trans&#39;vc.0.1.0.3.0.7.0.0" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_trans&#39;vc.0.1.0.3.0.7.0.0.0" proved="true">
          <proof prover="0" timelimit="5"><result status="valid" time="1.080000" steps="6067"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl1_ProducesOne_Impl" proved="true">
 <goal name="produces_one&#39;vc" expl="VC for produces_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="produces_one&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="produces">
    <goal name="produces_one&#39;vc.0.0.0" expl="VC for produces_one" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="produces_one&#39;vc.0.0.0.0" expl="VC for produces_one" proved="true">
     <proof prover="0"><result status="valid" time="0.010000" steps="15"/></proof>
     </goal>
     <goal name="produces_one&#39;vc.0.0.0.1" expl="VC for produces_one" proved="true">
     <transf name="exists" proved="true" arg1="(singleton e)">
      <goal name="produces_one&#39;vc.0.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="produces_one&#39;vc.0.0.0.1.0.0" proved="true">
       <proof prover="0"><result status="valid" time="0.010000" steps="20"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.1" proved="true">
       <proof prover="0"><result status="valid" time="0.010000" steps="12"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.2" proved="true">
       <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
        <goal name="produces_one&#39;vc.0.0.0.1.0.2.0" proved="true">
        <proof prover="0"><result status="valid" time="0.010000" steps="15"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.3" proved="true">
       <transf name="exists" proved="true" arg1="(singleton f)">
        <goal name="produces_one&#39;vc.0.0.0.1.0.3.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.0" proved="true">
         <proof prover="0"><result status="valid" time="0.010000" steps="21"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.1" proved="true">
         <proof prover="0"><result status="valid" time="0.010000" steps="20"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.2" proved="true">
         <proof prover="0"><result status="valid" time="0.010000" steps="17"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.3" proved="true">
         <proof prover="0"><result status="valid" time="0.010000" steps="18"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.4" proved="true">
         <proof prover="0"><result status="valid" time="0.010000" steps="21"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.5" proved="true">
         <proof prover="0"><result status="valid" time="0.010000" steps="71"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.6" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.6.0" proved="true">
          <proof prover="0" timelimit="5"><result status="valid" time="0.030000" steps="483"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.7" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.7.0" proved="true">
          <proof prover="0"><result status="valid" time="0.030000" steps="487"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="produces_one&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="produces_one&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.230000" steps="295235"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl1_ProducesOneInvariant_Impl" proved="true">
 <goal name="produces_one_invariant&#39;vc" expl="VC for produces_one_invariant" proved="true">
 <transf name="rewrite" proved="true" arg1="inv_t_map">
  <goal name="produces_one_invariant&#39;vc.0" expl="VC for produces_one_invariant" proved="true">
  <transf name="rewrite" proved="true" arg1="inv_t_map">
   <goal name="produces_one_invariant&#39;vc.0.0" expl="VC for produces_one_invariant" proved="true">
   <transf name="unfold" proved="true" arg1="invariant&#39;">
    <goal name="produces_one_invariant&#39;vc.0.0.0" expl="VC for produces_one_invariant" proved="true">
    <transf name="unfold" proved="true" arg1="next_precondition">
     <goal name="produces_one_invariant&#39;vc.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
     <transf name="unfold" proved="true" arg1="preservation_inv">
      <goal name="produces_one_invariant&#39;vc.0.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
      <transf name="unfold" proved="true" arg1="produces_one">
       <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
        <proof prover="0"><result status="valid" time="0.010000" steps="18"/></proof>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1" expl="VC for produces_one_invariant" proved="true">
        <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
         <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0" expl="VC for produces_one_invariant" proved="true">
         <proof prover="2"><result status="valid" time="0.677980" steps="824890"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.2" expl="VC for produces_one_invariant" proved="true">
        <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
         <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.2.0" expl="VC for produces_one_invariant" proved="true">
         <proof prover="3"><result status="valid" time="0.560437" steps="56077"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.3" expl="VC for produces_one_invariant" proved="true">
        <proof prover="0"><result status="valid" time="0.010000" steps="18"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_Next" proved="true">
 <goal name="next&#39;vc" expl="VC for next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="next&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.010000" steps="18"/></proof>
  </goal>
  <goal name="next&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.020000" steps="210"/></proof>
  </goal>
  <goal name="next&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.010000" steps="67"/></proof>
  </goal>
  <goal name="next&#39;vc.3" expl="unreachable point" proved="true">
  <proof prover="0"><result status="valid" time="0.010000" steps="26"/></proof>
  </goal>
  <goal name="next&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="next&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.4.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.020000" steps="104"/></proof>
    </goal>
    <goal name="next&#39;vc.4.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.010000" steps="200"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="next&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.4.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.010000" steps="67"/></proof>
    </goal>
    <goal name="next&#39;vc.4.1.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.030000" steps="563"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="next&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="next&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.010000" steps="178"/></proof>
   </goal>
   <goal name="next&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.020000" steps="297"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="next&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.090000" steps="7236"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Map" proved="true">
 <goal name="map&#39;vc" expl="VC for map" proved="true">
 <proof prover="0"><result status="valid" time="0.010000" steps="93"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Identity" proved="true">
 <goal name="identity&#39;vc" expl="VC for identity" proved="true">
 <proof prover="0"><result status="valid" time="0.020000" steps="284"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Increment_Closure2" proved="true">
 <goal name="c06MapPrecond_Increment_Closure2&#39;vc" expl="VC for c06MapPrecond_Increment_Closure2" proved="true">
 <proof prover="0"><result status="valid" time="0.010000" steps="12"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Increment" proved="true">
 <goal name="increment&#39;vc" expl="VC for increment" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="increment&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.010000" steps="53"/></proof>
  </goal>
  <goal name="increment&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.040000" steps="432"/></proof>
  </goal>
  <goal name="increment&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.010000" steps="126"/></proof>
  </goal>
  <goal name="increment&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.010000" steps="8"/></proof>
  </goal>
  <goal name="increment&#39;vc.4" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.300000" steps="52754"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Counter_Closure2" proved="true">
 <goal name="c06MapPrecond_Counter_Closure2&#39;vc" expl="VC for c06MapPrecond_Counter_Closure2" proved="true">
 <proof prover="0"><result status="valid" time="0.020000" steps="117"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Counter" proved="true">
 <goal name="counter&#39;vc" expl="VC for counter" proved="true">
 <proof prover="0"><result status="valid" time="0.080000" steps="877"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0" proved="true">
 <goal name="next_refn" proved="true">
 <proof prover="0"><result status="valid" time="0.250000" steps="1856"/></proof>
 </goal>
 <goal name="produces_refl_refn" proved="true">
 <proof prover="0"><result status="valid" time="0.000000" steps="0"/></proof>
 </goal>
 <goal name="produces_trans_refn" proved="true">
 <proof prover="0"><result status="valid" time="0.000000" steps="0"/></proof>
 </goal>
</theory>
</file>
</why3session>
