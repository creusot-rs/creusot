<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.11.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.12.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="06_map_precond.mlcfg"/>
<theory name="C06MapPrecond_Impl1_PreservationInv_Impl" proved="true">
 <goal name="preservation_inv&#39;vc" expl="VC for preservation_inv" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="preservation_inv&#39;vc.0" expl="VC for preservation_inv" proved="true">
  <proof prover="0" timelimit="5" memlimit="2000"><result status="valid" time="1.52" steps="41486"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_ProducesRefl_Impl" proved="true">
 <goal name="produces_refl&#39;vc" expl="VC for produces_refl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_refl&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="produces_refl&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="produces_refl&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.11" steps="26233"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_ProducesTrans_Impl" proved="true">
 <goal name="produces_trans&#39;vc" expl="VC for produces_trans" proved="true">
 <transf name="unfold" proved="true" arg1="produces">
  <goal name="produces_trans&#39;vc.0" expl="VC for produces_trans" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="produces_trans&#39;vc.0.0" expl="VC for produces_trans" proved="true">
   <proof prover="0"><result status="valid" time="0.01" steps="47"/></proof>
   </goal>
   <goal name="produces_trans&#39;vc.0.1" expl="VC for produces_trans" proved="true">
   <transf name="exists" proved="true" arg1="(s1 ++ s)">
    <goal name="produces_trans&#39;vc.0.1.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="produces_trans&#39;vc.0.1.0.0" proved="true">
     <proof prover="0" timelimit="5"><result status="valid" time="0.01" steps="45"/></proof>
     </goal>
     <goal name="produces_trans&#39;vc.0.1.0.1" proved="true">
     <proof prover="0" timelimit="5"><result status="valid" time="0.01" steps="38"/></proof>
     </goal>
     <goal name="produces_trans&#39;vc.0.1.0.2" proved="true">
     <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
      <goal name="produces_trans&#39;vc.0.1.0.2.0" proved="true">
      <proof prover="0" timelimit="5"><result status="valid" time="0.01" steps="44"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="produces_trans&#39;vc.0.1.0.3" proved="true">
     <transf name="exists" proved="true" arg1="(fs1++fs)">
      <goal name="produces_trans&#39;vc.0.1.0.3.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="produces_trans&#39;vc.0.1.0.3.0.0" proved="true">
       <proof prover="0"><result status="valid" time="0.01" steps="45"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.1" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="534"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.2" proved="true">
       <proof prover="0"><result status="valid" time="0.01" steps="76"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.3" proved="true">
       <proof prover="0"><result status="valid" time="0.03" steps="246"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.4" proved="true">
       <proof prover="0"><result status="valid" time="0.02" steps="206"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.5" proved="true">
       <proof prover="0" timelimit="5"><result status="valid" time="0.03" steps="607"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.6" proved="true">
       <transf name="instantiate" proved="true" arg1="H2" arg2="(i-length ab)">
        <goal name="produces_trans&#39;vc.0.1.0.3.0.6.0" proved="true">
        <transf name="instantiate" proved="true" arg1="H10" arg2="i">
         <goal name="produces_trans&#39;vc.0.1.0.3.0.6.0.0" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_trans&#39;vc.0.1.0.3.0.6.0.0.0" proved="true">
          <proof prover="0" timelimit="5"><result status="valid" time="0.36" steps="6085"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.7" proved="true">
       <transf name="instantiate" proved="true" arg1="H2" arg2="(i-length ab)">
        <goal name="produces_trans&#39;vc.0.1.0.3.0.7.0" proved="true">
        <transf name="instantiate" proved="true" arg1="H10" arg2="i">
         <goal name="produces_trans&#39;vc.0.1.0.3.0.7.0.0" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_trans&#39;vc.0.1.0.3.0.7.0.0.0" proved="true">
          <proof prover="0" timelimit="5"><result status="valid" time="0.36" steps="6116"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl1_ProducesOne_Impl" proved="true">
 <goal name="produces_one&#39;vc" expl="VC for produces_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="produces_one&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="produces">
    <goal name="produces_one&#39;vc.0.0.0" expl="VC for produces_one" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="produces_one&#39;vc.0.0.0.0" expl="VC for produces_one" proved="true">
     <proof prover="0"><result status="valid" time="0.01" steps="18"/></proof>
     </goal>
     <goal name="produces_one&#39;vc.0.0.0.1" expl="VC for produces_one" proved="true">
     <transf name="exists" proved="true" arg1="(singleton e)">
      <goal name="produces_one&#39;vc.0.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="produces_one&#39;vc.0.0.0.1.0.0" proved="true">
       <proof prover="0"><result status="valid" time="0.01" steps="21"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.1" proved="true">
       <proof prover="0"><result status="valid" time="0.01" steps="16"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.2" proved="true">
       <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
        <goal name="produces_one&#39;vc.0.0.0.1.0.2.0" proved="true">
        <proof prover="0"><result status="valid" time="0.01" steps="18"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.3" proved="true">
       <transf name="exists" proved="true" arg1="(singleton f)">
        <goal name="produces_one&#39;vc.0.0.0.1.0.3.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.0" proved="true">
         <proof prover="0"><result status="valid" time="0.01" steps="23"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.1" proved="true">
         <proof prover="0"><result status="valid" time="0.01" steps="22"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.2" proved="true">
         <proof prover="0"><result status="valid" time="0.01" steps="20"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.3" proved="true">
         <proof prover="0"><result status="valid" time="0.01" steps="20"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.4" proved="true">
         <proof prover="0"><result status="valid" time="0.01" steps="23"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.5" proved="true">
         <proof prover="0"><result status="valid" time="0.01" steps="75"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.6" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.6.0" proved="true">
          <proof prover="0" timelimit="5"><result status="valid" time="0.03" steps="466"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.7" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.7.0" proved="true">
          <proof prover="0"><result status="valid" time="0.03" steps="471"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="produces_one&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="produces_one&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.07" steps="307146"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl1_ProducesOneInvariant_Impl" proved="true">
 <goal name="produces_one_invariant&#39;vc" expl="VC for produces_one_invariant" proved="true">
 <transf name="unfold" proved="true" arg1="invariant&#39;">
  <goal name="produces_one_invariant&#39;vc.0" expl="VC for produces_one_invariant" proved="true">
  <transf name="unfold" proved="true" arg1="next_precondition">
   <goal name="produces_one_invariant&#39;vc.0.0" expl="VC for produces_one_invariant" proved="true">
   <transf name="unfold" proved="true" arg1="preservation_inv">
    <goal name="produces_one_invariant&#39;vc.0.0.0" expl="VC for produces_one_invariant" proved="true">
    <transf name="unfold" proved="true" arg1="produces_one">
     <goal name="produces_one_invariant&#39;vc.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="produces_one_invariant&#39;vc.0.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
      <proof prover="0"><result status="valid" time="0.00" steps="22"/></proof>
      </goal>
      <goal name="produces_one_invariant&#39;vc.0.0.0.0.1" expl="VC for produces_one_invariant" proved="true">
      <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
       <goal name="produces_one_invariant&#39;vc.0.0.0.0.1.0" expl="VC for produces_one_invariant" proved="true">
       <transf name="replace" proved="true" arg1="(inner (map_produced other) ++ s)" arg2="(inner (map_produced self) ++ (cons e s))">
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.1.0.0" expl="VC for produces_one_invariant" proved="true">
        <proof prover="4"><result status="valid" time="0.30" steps="72851"/></proof>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0" timelimit="5"><result status="valid" time="0.02" steps="177"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="produces_one_invariant&#39;vc.0.0.0.0.2" expl="VC for produces_one_invariant" proved="true">
      <proof prover="0"><result status="valid" time="0.00" steps="22"/></proof>
      </goal>
      <goal name="produces_one_invariant&#39;vc.0.0.0.0.3" expl="VC for produces_one_invariant" proved="true">
      <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
       <goal name="produces_one_invariant&#39;vc.0.0.0.0.3.0" expl="VC for produces_one_invariant" proved="true">
       <proof prover="4"><result status="valid" time="0.18" steps="46293"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_Next" proved="true">
 <goal name="next&#39;vc" expl="VC for next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="next&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
  <goal name="next&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="140"/></proof>
  </goal>
  <goal name="next&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="73"/></proof>
  </goal>
  <goal name="next&#39;vc.3" expl="unreachable point" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="30"/></proof>
  </goal>
  <goal name="next&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="next&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.4.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.02" steps="100"/></proof>
    </goal>
    <goal name="next&#39;vc.4.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.01" steps="214"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="next&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.4.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.01" steps="72"/></proof>
    </goal>
    <goal name="next&#39;vc.4.1.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.03" steps="497"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="next&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="next&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.01" steps="179"/></proof>
   </goal>
   <goal name="next&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.02" steps="353"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Map" proved="true">
 <goal name="map&#39;vc" expl="VC for map" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="105"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Identity" proved="true">
 <goal name="identity&#39;vc" expl="VC for identity" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="274"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Increment_Closure3" proved="true">
 <goal name="c06MapPrecond_Increment_Closure3&#39;vc" expl="VC for c06MapPrecond_Increment_Closure3" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.01" steps="55"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Increment" proved="true">
 <goal name="increment&#39;vc" expl="VC for increment" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="increment&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="65"/></proof>
  </goal>
  <goal name="increment&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="392"/></proof>
  </goal>
  <goal name="increment&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="increment&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="135"/></proof>
  </goal>
  <goal name="increment&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.00" steps="17"/></proof>
  </goal>
  <goal name="increment&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.08" steps="1495093"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Counter_Closure3" proved="true">
 <goal name="c06MapPrecond_Counter_Closure3&#39;vc" expl="VC for c06MapPrecond_Counter_Closure3" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="122"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Counter" proved="true">
 <goal name="counter&#39;vc" expl="VC for counter" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="831"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0" proved="true">
 <goal name="next_refn" proved="true">
 <proof prover="0"><result status="valid" time="0.07" steps="1124"/></proof>
 </goal>
 <goal name="produces_refl_refn" proved="true">
 <proof prover="0"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
 <goal name="produces_trans_refn" proved="true">
 <proof prover="0"><result status="valid" time="0.00" steps="424"/></proof>
 </goal>
</theory>
</file>
</why3session>
