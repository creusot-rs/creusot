module M_08_collect_extend__extend [#"08_collect_extend.rs" 26 0 26 66]
  let%span s08_collect_extend0 = "08_collect_extend.rs" 27 18 27 35
  let%span s08_collect_extend1 = "08_collect_extend.rs" 31 4 31 7
  let%span s08_collect_extend2 = "08_collect_extend.rs" 31 4 31 7
  let%span s08_collect_extend3 = "08_collect_extend.rs" 30 16 30 55
  let%span s08_collect_extend4 = "08_collect_extend.rs" 29 16 29 24
  let%span s08_collect_extend5 = "08_collect_extend.rs" 31 4 31 7
  let%span s08_collect_extend6 = "08_collect_extend.rs" 31 4 31 7
  let%span s08_collect_extend7 = "08_collect_extend.rs" 26 40 26 43
  let%span s08_collect_extend8 = "08_collect_extend.rs" 26 58 26 62
  let%span s08_collect_extend9 = "08_collect_extend.rs" 23 2 24 82
  let%span siter10 = "../../../../creusot-contracts/src/std/iter.rs" 97 0 205 1
  let%span smodel11 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span ssnapshot12 = "../../../../creusot-contracts/src/snapshot.rs" 52 20 52 39
  let%span siter13 = "../../../../creusot-contracts/src/std/iter.rs" 103 26 106 17
  let%span svec14 = "../../../../creusot-contracts/src/std/vec.rs" 87 26 87 56
  let%span svec15 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span siter16 = "../../../../creusot-contracts/src/std/iter.rs" 82 20 82 24
  let%span siter17 = "../../../../creusot-contracts/src/std/iter.rs" 88 8 88 19
  let%span smodel18 = "../../../../creusot-contracts/src/model.rs" 92 8 92 22
  let%span siter19 = "../../../../creusot-contracts/src/std/iter.rs" 38 14 38 45
  let%span siter20 = "../../../../creusot-contracts/src/std/iter.rs" 42 15 42 32
  let%span siter21 = "../../../../creusot-contracts/src/std/iter.rs" 43 15 43 32
  let%span siter22 = "../../../../creusot-contracts/src/std/iter.rs" 44 14 44 42
  let%span sresolve23 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant24 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq25 = "../../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span svec26 = "../../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sboxed27 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Snapshot
  
  type t_I'0
  
  predicate inv'1 (_1 : t_I'0)
  
  predicate into_iter_pre'0 (self : t_I'0) =
    [%#siter16] true
  
  predicate into_iter_post'0 (self : t_I'0) (res : t_I'0) =
    [%#siter17] self = res
  
  let rec into_iter'0 (self:t_I'0) (return'  (ret:t_I'0))= {[@expl:into_iter 'self' type invariant] inv'1 self}
    {[@expl:into_iter requires] [%#siter10] into_iter_pre'0 self}
    any [ return' (result:t_I'0)-> {inv'1 result} {[%#siter10] into_iter_post'0 self result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  type t_T'0
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  function view'2 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec15] Seq.length (view'2 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  function view'0 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel11] view'2 self.current
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function view'3 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel18] view'0 self
  
  function view'1 (self : Snapshot.snap_ty (borrowed (t_Vec'0))) : Seq.seq t_T'0 =
    [%#ssnapshot12] view'3 (Snapshot.inner self)
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'6 (_1 : t_T'0)
  
  predicate invariant'4 (self : t_T'0) =
    [%#sboxed27] inv'6 self
  
  predicate inv'7 (_1 : t_T'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_T'0 [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate invariant'1 (self : Seq.seq t_T'0) =
    [%#sseq25] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_T'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate invariant'3 (self : t_Vec'0) =
    [%#svec26] inv'2 (view'2 self)
  
  predicate inv'4 (_1 : t_Vec'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Vec'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate invariant'0 (self : borrowed (t_Vec'0)) =
    [%#sinvariant24] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'0 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate produces'0 (self : t_I'0) (visited : Seq.seq t_T'0) (o : t_I'0)
  
  function produces_trans'0 (a : t_I'0) (ab : Seq.seq t_T'0) (b : t_I'0) (bc : Seq.seq t_T'0) (c : t_I'0) : ()
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_T'0, b : t_I'0, bc : Seq.seq t_T'0, c : t_I'0 . ([%#siter20] produces'0 a ab b)
   -> ([%#siter21] produces'0 b bc c)  -> ([%#siter22] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#siter19] produces'0 self (Seq.empty  : Seq.seq t_T'0) self
  
  predicate invariant'2 (self : borrowed t_I'0) =
    [%#sinvariant24] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'3 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_I'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  predicate inv'5 (_1 : t_Option'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Option'0 [inv'5 x] . inv'5 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'6 a_0
    end
  
  predicate completed'0 (self : borrowed t_I'0)
  
  use seq.Seq
  
  let rec next'0 (self:borrowed t_I'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'3 self}
    any
    [ return' (result:t_Option'0)-> {inv'5 result}
      {[%#siter13] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'3 (self : borrowed t_I'0) =
    [%#sresolve23] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t_I'0) =
    resolve'3 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use seq.Seq
  
  let rec push'0 (self:borrowed (t_Vec'0)) (value:t_T'0) (return'  (ret:()))= {[@expl:push 'self' type invariant] inv'0 self}
    {[@expl:push 'value' type invariant] inv'6 value}
    any [ return' (result:())-> {[%#svec14] view'2 self.final = Seq.snoc (view'0 self) value} (! return' {result}) ] 
  
  predicate resolve'1 (_1 : t_I'0)
  
  predicate resolve'4 (self : borrowed (t_Vec'0)) =
    [%#sresolve23] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (t_Vec'0)) =
    resolve'4 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec extend'0 (vec:borrowed (t_Vec'0)) (iter:t_I'0) (return'  (ret:()))= {[@expl:extend 'vec' type invariant] [%#s08_collect_extend7] inv'0 vec}
    {[@expl:extend 'iter' type invariant] [%#s08_collect_extend8] inv'1 iter}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 =  [ &old_vec <- [%#s08_collect_extend0] Snapshot.new vec ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = into_iter'0 {iter} (fun (_ret':t_I'0) ->  [ &iter1 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#s08_collect_extend1] Snapshot.new iter1 ] s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &produced <- [%#s08_collect_extend2] Snapshot.new (Seq.empty  : Seq.seq t_T'0) ] s1 | s1 = bb5 ]
      
    | bb5 = s0 [ s0 =  [ &old_6_0 <- Snapshot.new vec ] s1 | s1 = bb6 ] 
    | bb6 = bb6
      [ bb6 = {[@expl:mut invariant] (Snapshot.inner old_6_0).final = vec.final}
        {[@expl:for invariant] [%#s08_collect_extend5] inv'2 (Snapshot.inner produced)}
        {[@expl:for invariant] [%#s08_collect_extend5] inv'1 iter1}
        {[@expl:for invariant] [%#s08_collect_extend5] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter1}
        {[@expl:loop invariant #0] [%#s08_collect_extend4] inv'0 vec}
        {[@expl:loop invariant #1] [%#s08_collect_extend3] Seq.(==) (view'0 vec) (Seq.(++) (view'1 old_vec) (Snapshot.inner produced))}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = bb8
        | bb8 = bb9
        | bb9 = s0
          [ s0 = {inv'1 iter1}
            Borrow.borrow_mut <t_I'0> {iter1}
              (fun (_ret':borrowed t_I'0) ->  [ &_21 <- _ret' ] -{inv'1 _ret'.final}-  [ &iter1 <- _ret'.final ] s1)
          | s1 = {inv'1 _21.current}
            Borrow.borrow_final <t_I'0> {_21.current} {Borrow.get_id _21}
              (fun (_ret':borrowed t_I'0) ->
                 [ &_20 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &_21 <- { _21 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_20} (fun (_ret':t_Option'0) ->  [ &_19 <- _ret' ] s3)
          | s3 = bb10 ]
          
        | bb10 = s0
          [ s0 = {[@expl:type invariant] inv'3 _21} s1
          | s1 = -{resolve'0 _21}- s2
          | s2 = any [ br0 -> {_19 = C_None'0 } (! bb13) | br1 (x0:t_T'0)-> {_19 = C_Some'0 x0} (! bb12) ]  ]
          
        | bb12 = bb14
        | bb14 = s0
          [ s0 = v_Some'0 {_19} (fun (r0'0:t_T'0) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_24 <- [%#s08_collect_extend6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb15 ]
          
        | bb15 = s0
          [ s0 =  [ &produced <- _24 ] s1
          | s1 =  [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = {inv'4 vec.current}
            Borrow.borrow_mut <t_Vec'0> {vec.current}
              (fun (_ret':borrowed (t_Vec'0)) ->
                 [ &_28 <- _ret' ] 
                -{inv'4 _ret'.final}-
                 [ &vec <- { vec with current = _ret'.final } ] 
                s3)
          | s3 = push'0 {_28} {x} (fun (_ret':()) ->  [ &_27 <- _ret' ] s4)
          | s4 = bb16 ]
          
        | bb16 = bb17
        | bb17 = bb18
        | bb18 = bb19
        | bb19 = bb6 ]
         ]
      
    | bb13 = s0
      [ s0 = {[@expl:type invariant] inv'1 iter1} s1
      | s1 = -{resolve'1 iter1}- s2
      | s2 = {[@expl:type invariant] inv'0 vec} s3
      | s3 = -{resolve'2 vec}- s4
      | s4 = bb20 ]
      
    | bb20 = bb21
    | bb21 = bb22
    | bb22 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & vec : borrowed (t_Vec'0) = vec
    | & iter : t_I'0 = iter
    | & old_vec : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l ()
    | & iter1 : t_I'0 = any_l ()
    | & iter_old : Snapshot.snap_ty t_I'0 = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq t_T'0) = any_l ()
    | & _19 : t_Option'0 = any_l ()
    | & _20 : borrowed t_I'0 = any_l ()
    | & _21 : borrowed t_I'0 = any_l ()
    | & __creusot_proc_iter_elem : t_T'0 = any_l ()
    | & _24 : Snapshot.snap_ty (Seq.seq t_T'0) = any_l ()
    | & x : t_T'0 = any_l ()
    | & _27 : () = any_l ()
    | & _28 : borrowed (t_Vec'0) = any_l ()
    | & old_6_0 : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l () ]
    
    [ return' (result:())-> {[@expl:extend ensures] [%#s08_collect_extend9] exists done' : borrowed t_I'0, prod : Seq.seq t_T'0 . completed'0 done'
      /\ produces'0 iter prod done'.current /\ view'2 vec.final = Seq.(++) (view'0 vec) prod}
      (! return' {result}) ]
    
end
module M_08_collect_extend__collect [#"08_collect_extend.rs" 44 0 44 52]
  let%span s08_collect_extend0 = "08_collect_extend.rs" 45 18 45 28
  let%span s08_collect_extend1 = "08_collect_extend.rs" 49 4 49 7
  let%span s08_collect_extend2 = "08_collect_extend.rs" 49 4 49 7
  let%span s08_collect_extend3 = "08_collect_extend.rs" 48 16 48 38
  let%span s08_collect_extend4 = "08_collect_extend.rs" 47 16 47 24
  let%span s08_collect_extend5 = "08_collect_extend.rs" 49 4 49 7
  let%span s08_collect_extend6 = "08_collect_extend.rs" 49 4 49 7
  let%span s08_collect_extend7 = "08_collect_extend.rs" 44 28 44 32
  let%span s08_collect_extend8 = "08_collect_extend.rs" 44 40 44 52
  let%span s08_collect_extend9 = "08_collect_extend.rs" 41 2 42 88
  let%span svec10 = "../../../../creusot-contracts/src/std/vec.rs" 74 26 74 44
  let%span siter11 = "../../../../creusot-contracts/src/std/iter.rs" 97 0 205 1
  let%span svec12 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span siter13 = "../../../../creusot-contracts/src/std/iter.rs" 103 26 106 17
  let%span svec14 = "../../../../creusot-contracts/src/std/vec.rs" 87 26 87 56
  let%span siter15 = "../../../../creusot-contracts/src/std/iter.rs" 82 20 82 24
  let%span siter16 = "../../../../creusot-contracts/src/std/iter.rs" 88 8 88 19
  let%span siter17 = "../../../../creusot-contracts/src/std/iter.rs" 38 14 38 45
  let%span siter18 = "../../../../creusot-contracts/src/std/iter.rs" 42 15 42 32
  let%span siter19 = "../../../../creusot-contracts/src/std/iter.rs" 43 15 43 32
  let%span siter20 = "../../../../creusot-contracts/src/std/iter.rs" 44 14 44 42
  let%span sresolve21 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel22 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span svec23 = "../../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sseq24 = "../../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sinvariant25 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed26 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Item'0
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq t_Item'0
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec12] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  predicate inv'6 (_1 : t_Item'0)
  
  predicate invariant'4 (self : t_Item'0) =
    [%#sboxed26] inv'6 self
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#sseq24] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec23] inv'2 (view'0 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  let rec new'0 (_1:()) (return'  (ret:t_Vec'0))= any
    [ return' (result:t_Vec'0)-> {inv'0 result} {[%#svec10] Seq.length (view'0 result) = 0} (! return' {result}) ]
    
  
  type t_I'0
  
  predicate inv'1 (_1 : t_I'0)
  
  predicate into_iter_pre'0 (self : t_I'0) =
    [%#siter15] true
  
  predicate into_iter_post'0 (self : t_I'0) (res : t_I'0) =
    [%#siter16] self = res
  
  let rec into_iter'0 (self:t_I'0) (return'  (ret:t_I'0))= {[@expl:into_iter 'self' type invariant] inv'1 self}
    {[@expl:into_iter requires] [%#siter11] into_iter_pre'0 self}
    any [ return' (result:t_I'0)-> {inv'1 result} {[%#siter11] into_iter_post'0 self result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate produces'0 (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#siter18] produces'0 a ab b)
   -> ([%#siter19] produces'0 b bc c)  -> ([%#siter20] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#siter17] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed t_I'0) =
    [%#sinvariant25] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'3 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_I'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_Item'0
  
  predicate inv'4 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'4 x] . inv'4 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'6 a_0
    end
  
  predicate completed'0 (self : borrowed t_I'0)
  
  use seq.Seq
  
  let rec next'0 (self:borrowed t_I'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'3 self}
    any
    [ return' (result:t_Option'0)-> {inv'4 result}
      {[%#siter13] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed t_I'0) =
    [%#sresolve21] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t_I'0) =
    resolve'2 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_Item'0))= any
    [ good (field_0:t_Item'0)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_Item'0 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  predicate invariant'3 (self : borrowed (t_Vec'0)) =
    [%#sinvariant25] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'5 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'5 x] . inv'5 x = invariant'3 x
  
  function view'1 (self : borrowed (t_Vec'0)) : Seq.seq t_Item'0 =
    [%#smodel22] view'0 self.current
  
  use seq.Seq
  
  let rec push'0 (self:borrowed (t_Vec'0)) (value:t_Item'0) (return'  (ret:()))= {[@expl:push 'self' type invariant] inv'5 self}
    {[@expl:push 'value' type invariant] inv'6 value}
    any [ return' (result:())-> {[%#svec14] view'0 self.final = Seq.snoc (view'1 self) value} (! return' {result}) ] 
  
  predicate resolve'1 (_1 : t_I'0)
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec collect'0 (iter:t_I'0) (return'  (ret:t_Vec'0))= {[@expl:collect 'iter' type invariant] [%#s08_collect_extend7] inv'1 iter}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = new'0 {[%#s08_collect_extend0] ()} (fun (_ret':t_Vec'0) ->  [ &res <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = into_iter'0 {iter} (fun (_ret':t_I'0) ->  [ &iter1 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#s08_collect_extend1] Snapshot.new iter1 ] s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &produced <- [%#s08_collect_extend2] Snapshot.new (Seq.empty  : Seq.seq t_Item'0) ] s1 | s1 = bb5 ]
      
    | bb5 = bb6
    | bb6 = bb6
      [ bb6 = {[@expl:for invariant] [%#s08_collect_extend5] inv'2 (Snapshot.inner produced)}
        {[@expl:for invariant] [%#s08_collect_extend5] inv'1 iter1}
        {[@expl:for invariant] [%#s08_collect_extend5] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter1}
        {[@expl:loop invariant #0] [%#s08_collect_extend4] inv'0 res}
        {[@expl:loop invariant #1] [%#s08_collect_extend3] Seq.(==) (view'0 res) (Snapshot.inner produced)}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = bb8
        | bb8 = bb9
        | bb9 = bb10
        | bb10 = bb11
        | bb11 = s0
          [ s0 = {inv'1 iter1}
            Borrow.borrow_mut <t_I'0> {iter1}
              (fun (_ret':borrowed t_I'0) ->  [ &_20 <- _ret' ] -{inv'1 _ret'.final}-  [ &iter1 <- _ret'.final ] s1)
          | s1 = {inv'1 _20.current}
            Borrow.borrow_final <t_I'0> {_20.current} {Borrow.get_id _20}
              (fun (_ret':borrowed t_I'0) ->
                 [ &_19 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &_20 <- { _20 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_19} (fun (_ret':t_Option'0) ->  [ &_18 <- _ret' ] s3)
          | s3 = bb12 ]
          
        | bb12 = s0
          [ s0 = {[@expl:type invariant] inv'3 _20} s1
          | s1 = -{resolve'0 _20}- s2
          | s2 = any [ br0 -> {_18 = C_None'0 } (! bb15) | br1 (x0:t_Item'0)-> {_18 = C_Some'0 x0} (! bb14) ]  ]
          
        | bb14 = bb16
        | bb16 = s0
          [ s0 = v_Some'0 {_18} (fun (r0'0:t_Item'0) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_23 <- [%#s08_collect_extend6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb17 ]
          
        | bb17 = s0
          [ s0 =  [ &produced <- _23 ] s1
          | s1 =  [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = {inv'0 res}
            Borrow.borrow_mut <t_Vec'0> {res}
              (fun (_ret':borrowed (t_Vec'0)) ->  [ &_27 <- _ret' ] -{inv'0 _ret'.final}-  [ &res <- _ret'.final ] s3)
          | s3 = push'0 {_27} {x} (fun (_ret':()) ->  [ &_26 <- _ret' ] s4)
          | s4 = bb18 ]
          
        | bb18 = bb19
        | bb19 = bb20
        | bb20 = bb21
        | bb21 = bb6 ]
         ]
      
    | bb15 = s0 [ s0 = {[@expl:type invariant] inv'1 iter1} s1 | s1 = -{resolve'1 iter1}- s2 | s2 = bb22 ] 
    | bb22 = bb23
    | bb23 = s0 [ s0 =  [ &_0 <- res ] s1 | s1 = bb24 ] 
    | bb24 = bb25
    | bb25 = return' {_0} ]
    )
    [ & _0 : t_Vec'0 = any_l ()
    | & iter : t_I'0 = iter
    | & res : t_Vec'0 = any_l ()
    | & iter1 : t_I'0 = any_l ()
    | & iter_old : Snapshot.snap_ty t_I'0 = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & _18 : t_Option'0 = any_l ()
    | & _19 : borrowed t_I'0 = any_l ()
    | & _20 : borrowed t_I'0 = any_l ()
    | & __creusot_proc_iter_elem : t_Item'0 = any_l ()
    | & _23 : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & x : t_Item'0 = any_l ()
    | & _26 : () = any_l ()
    | & _27 : borrowed (t_Vec'0) = any_l () ]
    
    [ return' (result:t_Vec'0)-> {[@expl:collect result type invariant] [%#s08_collect_extend8] inv'0 result}
      {[@expl:collect ensures] [%#s08_collect_extend9] exists done' : borrowed t_I'0, prod : Seq.seq t_Item'0 . resolve'1 done'.final
      /\ completed'0 done' /\ produces'0 iter prod done'.current /\ view'0 result = prod}
      (! return' {result}) ]
    
end
module M_08_collect_extend__extend_index [#"08_collect_extend.rs" 55 0 55 51]
  let%span s08_collect_extend0 = "08_collect_extend.rs" 56 16 56 32
  let%span s08_collect_extend1 = "08_collect_extend.rs" 57 16 57 32
  let%span s08_collect_extend2 = "08_collect_extend.rs" 60 20 60 53
  let%span siter3 = "../../../../creusot-contracts/src/std/iter.rs" 97 0 205 1
  let%span s08_collect_extend4 = "08_collect_extend.rs" 26 40 26 43
  let%span s08_collect_extend5 = "08_collect_extend.rs" 26 58 26 62
  let%span s08_collect_extend6 = "08_collect_extend.rs" 23 2 24 82
  let%span svec7 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span ssnapshot8 = "../../../../creusot-contracts/src/snapshot.rs" 52 20 52 39
  let%span svec9 = "../../../../creusot-contracts/src/std/vec.rs" 191 20 191 24
  let%span svec10 = "../../../../creusot-contracts/src/std/vec.rs" 197 20 197 33
  let%span svec11 = "../../../../creusot-contracts/src/std/vec.rs" 257 20 257 57
  let%span svec12 = "../../../../creusot-contracts/src/std/vec.rs" 264 12 264 41
  let%span smodel13 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span sresolve14 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel15 = "../../../../creusot-contracts/src/model.rs" 92 8 92 22
  let%span svec16 = "../../../../creusot-contracts/src/std/vec.rs" 270 14 270 45
  let%span svec17 = "../../../../creusot-contracts/src/std/vec.rs" 268 4 268 10
  let%span svec18 = "../../../../creusot-contracts/src/std/vec.rs" 275 15 275 32
  let%span svec19 = "../../../../creusot-contracts/src/std/vec.rs" 276 15 276 32
  let%span svec20 = "../../../../creusot-contracts/src/std/vec.rs" 277 14 277 42
  let%span svec21 = "../../../../creusot-contracts/src/std/vec.rs" 273 4 273 10
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = true
  
  predicate into_iter_pre'0 (self : t_Vec'0) =
    [%#svec9] true
  
  type t_ManuallyDrop'0  =
    { t_ManuallyDrop__value'0: () }
  
  type t_IntoIter'0  =
    { t_IntoIter__buf'0: t_NonNull'0;
      t_IntoIter__phantom'0: ();
      t_IntoIter__cap'0: usize;
      t_IntoIter__alloc'0: t_ManuallyDrop'0;
      t_IntoIter__ptr'0: t_NonNull'0;
      t_IntoIter__end'0: opaque_ptr }
  
  predicate inv'1 (_1 : t_IntoIter'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_IntoIter'0 [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq uint32
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec7] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  function view'4 (self : t_IntoIter'0) : Seq.seq uint32
  
  predicate into_iter_post'0 (self : t_Vec'0) (res : t_IntoIter'0) =
    [%#svec10] view'0 self = view'4 res
  
  let rec into_iter'0 (self:t_Vec'0) (return'  (ret:t_IntoIter'0))= {[@expl:into_iter 'self' type invariant] inv'0 self}
    {[@expl:into_iter requires] [%#siter3] into_iter_pre'0 self}
    any
    [ return' (result:t_IntoIter'0)-> {inv'1 result} {[%#siter3] into_iter_post'0 self result} (! return' {result}) ]
    
  
  predicate inv'2 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 (self : t_IntoIter'0) (visited : Seq.seq uint32) (rhs : t_IntoIter'0) =
    [%#svec12] view'4 self = Seq.(++) visited (view'4 rhs)
  
  function produces_trans'0 (a : t_IntoIter'0) (ab : Seq.seq uint32) (b : t_IntoIter'0) (bc : Seq.seq uint32) (c : t_IntoIter'0) : ()
    
   =
    [%#svec21] ()
  
  axiom produces_trans'0_spec : forall a : t_IntoIter'0, ab : Seq.seq uint32, b : t_IntoIter'0, bc : Seq.seq uint32, c : t_IntoIter'0 . ([%#svec18] produces'0 a ab b)
   -> ([%#svec19] produces'0 b bc c)  -> ([%#svec20] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_IntoIter'0) : () =
    [%#svec17] ()
  
  axiom produces_refl'0_spec : forall self : t_IntoIter'0 . [%#svec16] produces'0 self (Seq.empty  : Seq.seq uint32) self
  
  predicate resolve'2 (self : borrowed (t_IntoIter'0)) =
    [%#sresolve14] self.final = self.current
  
  function view'5 (self : borrowed (t_IntoIter'0)) : Seq.seq uint32 =
    [%#smodel13] view'4 self.current
  
  predicate completed'0 (self : borrowed (t_IntoIter'0)) =
    [%#svec11] resolve'2 self /\ view'5 self = (Seq.empty  : Seq.seq uint32)
  
  function view'2 (self : borrowed (t_Vec'0)) : Seq.seq uint32 =
    [%#smodel13] view'0 self.current
  
  let rec extend'0 (vec:borrowed (t_Vec'0)) (iter:t_IntoIter'0) (return'  (ret:()))= {[@expl:extend 'vec' type invariant] [%#s08_collect_extend4] inv'2 vec}
    {[@expl:extend 'iter' type invariant] [%#s08_collect_extend5] inv'1 iter}
    any
    [ return' (result:())-> {[%#s08_collect_extend6] exists done' : borrowed (t_IntoIter'0), prod : Seq.seq uint32 . completed'0 done'
      /\ produces'0 iter prod done'.current /\ view'0 vec.final = Seq.(++) (view'2 vec) prod}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed (t_Vec'0)) =
    [%#sresolve14] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Vec'0)) =
    resolve'1 _1
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function view'3 (self : t_Vec'0) : Seq.seq uint32 =
    [%#smodel15] view'0 self
  
  function view'1 (self : Snapshot.snap_ty (t_Vec'0)) : Seq.seq uint32 =
    [%#ssnapshot8] view'3 (Snapshot.inner self)
  
  use seq.Seq
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec extend_index'0 (v1:t_Vec'0) (v2:t_Vec'0) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &oldv1 <- [%#s08_collect_extend0] Snapshot.new v1 ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &oldv2 <- [%#s08_collect_extend1] Snapshot.new v2 ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <t_Vec'0> {v1}
          (fun (_ret':borrowed (t_Vec'0)) ->  [ &_9 <- _ret' ]  [ &v1 <- _ret'.final ] s1)
      | s1 = Borrow.borrow_final <t_Vec'0> {_9.current} {Borrow.get_id _9}
          (fun (_ret':borrowed (t_Vec'0)) ->  [ &_8 <- _ret' ]  [ &_9 <- { _9 with current = _ret'.final } ] s2)
      | s2 = into_iter'0 {v2} (fun (_ret':t_IntoIter'0) ->  [ &_10 <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0 [ s0 = extend'0 {_8} {_10} (fun (_ret':()) ->  [ &_7 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = -{resolve'0 _9}- s1
      | s1 = {[@expl:assertion] [%#s08_collect_extend2] Seq.(==) (view'0 v1) (Seq.(++) (view'1 oldv1) (view'1 oldv2))}
        s2
      | s2 = bb5 ]
      
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v1 : t_Vec'0 = v1
    | & v2 : t_Vec'0 = v2
    | & oldv1 : Snapshot.snap_ty (t_Vec'0) = any_l ()
    | & oldv2 : Snapshot.snap_ty (t_Vec'0) = any_l ()
    | & _7 : () = any_l ()
    | & _8 : borrowed (t_Vec'0) = any_l ()
    | & _9 : borrowed (t_Vec'0) = any_l ()
    | & _10 : t_IntoIter'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_08_collect_extend__collect_example [#"08_collect_extend.rs" 65 0 65 56]
  let%span s08_collect_extend0 = "08_collect_extend.rs" 68 20 68 73
  let%span s08_collect_extend1 = "08_collect_extend.rs" 65 48 65 52
  let%span s08_collect_extend2 = "08_collect_extend.rs" 63 11 64 68
  let%span s08_collect_extend3 = "08_collect_extend.rs" 44 28 44 32
  let%span s08_collect_extend4 = "08_collect_extend.rs" 44 40 44 52
  let%span s08_collect_extend5 = "08_collect_extend.rs" 41 2 42 88
  let%span svec6 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sindex7 = "../../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span siter8 = "../../../../creusot-contracts/src/std/iter.rs" 38 14 38 45
  let%span siter9 = "../../../../creusot-contracts/src/std/iter.rs" 42 15 42 32
  let%span siter10 = "../../../../creusot-contracts/src/std/iter.rs" 43 15 43 32
  let%span siter11 = "../../../../creusot-contracts/src/std/iter.rs" 44 14 44 42
  
  type t_I'0
  
  predicate inv'0 (_1 : t_I'0)
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  predicate inv'1 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  predicate resolve'0 (_1 : t_I'0)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 (self : t_I'0) (visited : Seq.seq uint32) (o : t_I'0)
  
  function produces_trans'0 (a : t_I'0) (ab : Seq.seq uint32) (b : t_I'0) (bc : Seq.seq uint32) (c : t_I'0) : ()
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq uint32, b : t_I'0, bc : Seq.seq uint32, c : t_I'0 . ([%#siter9] produces'0 a ab b)
   -> ([%#siter10] produces'0 b bc c)  -> ([%#siter11] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#siter8] produces'0 self (Seq.empty  : Seq.seq uint32) self
  
  predicate completed'0 (self : borrowed t_I'0)
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  function view'0 (self : t_Vec'0) : Seq.seq uint32
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec6] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  let rec collect'0 (iter:t_I'0) (return'  (ret:t_Vec'0))= {[@expl:collect 'iter' type invariant] [%#s08_collect_extend3] inv'0 iter}
    any
    [ return' (result:t_Vec'0)-> {[%#s08_collect_extend4] inv'1 result}
      {[%#s08_collect_extend5] exists done' : borrowed t_I'0, prod : Seq.seq uint32 . resolve'0 done'.final
      /\ completed'0 done' /\ produces'0 iter prod done'.current /\ view'0 result = prod}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : uint32 =
    [%#sindex7] Seq.get (view'0 self) ix
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec collect_example'0 (iter:t_I'0) (return'  (ret:()))= {[@expl:collect_example 'iter' type invariant] [%#s08_collect_extend1] inv'0 iter}
    {[@expl:collect_example requires] [%#s08_collect_extend2] forall prod : Seq.seq uint32, fin : t_I'0 . produces'0 iter prod fin
     -> (forall i : int . 0 <= i /\ i < Seq.length prod  -> UInt32.to_int (Seq.get prod i) = i)}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = collect'0 {iter} (fun (_ret':t_Vec'0) ->  [ &v <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#s08_collect_extend0] forall i : int . 0 <= i /\ i < Seq.length (view'0 v)
         -> UInt32.to_int (index_logic'0 v i) = i}
        s1
      | s1 = bb3 ]
      
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : () = any_l () | & iter : t_I'0 = iter | & v : t_Vec'0 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
