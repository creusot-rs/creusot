
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C08CollectExtend_Extend
  type t
  
  type i
  
  let%span s08_collect_extend0 = "../08_collect_extend.rs" 26 18 26 35
  
  let%span s08_collect_extend1 = "../08_collect_extend.rs" 27 4 27 35
  
  let%span s08_collect_extend2 = "../08_collect_extend.rs" 27 4 27 35
  
  let%span s08_collect_extend3 = "../08_collect_extend.rs" 27 4 27 35
  
  let%span s08_collect_extend4 = "../08_collect_extend.rs" 27 16 27 33
  
  let%span s08_collect_extend5 = "../08_collect_extend.rs" 27 4 27 35
  
  let%span s08_collect_extend6 = "../08_collect_extend.rs" 25 40 25 43
  
  let%span s08_collect_extend7 = "../08_collect_extend.rs" 25 58 25 62
  
  let%span s08_collect_extend8 = "../08_collect_extend.rs" 21 0 24 2
  
  let%span span9 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span10 = "" 0 0 0 0
  
  let%span span11 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span12 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span14 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span15 = "../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32
  
  let%span span16 = "../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32
  
  let%span span17 = "../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23
  
  let%span span18 = "../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33
  
  let%span span19 = "../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53
  
  let%span span20 = "../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63
  
  let%span span21 = "../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83
  
  let%span span22 = "../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42
  
  let%span span23 = "../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25
  
  let%span span24 = "../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 45
  
  let%span span25 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span26 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span27 = "" 0 0 0 0
  
  let%span span28 = "" 0 0 0 0
  
  let%span span29 = "../../../../../creusot-contracts/src/std/vec.rs" 82 26 82 51
  
  let%span span30 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span31 = "" 0 0 0 0
  
  let%span span32 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span33 = "" 0 0 0 0
  
  let%span span34 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span35 = "../../../../../creusot-contracts/src/snapshot.rs" 28 20 28 48
  
  let%span span36 = "../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span37 = "../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span38 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span39 = "" 0 0 0 0
  
  let%span span40 = "" 0 0 0 0
  
  predicate invariant'9 (self : t)
  
  predicate inv'9 (_x : t)
  
  axiom inv'9 : forall x : t . inv'9 x = true
  
  use seq.Seq
  
  predicate invariant'8 (self : Seq.seq t) =
    [%#span9] true
  
  predicate inv'8 (_x : Seq.seq t)
  
  axiom inv'8 : forall x : Seq.seq t . inv'8 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span9] true
  
  predicate inv'7 (_x : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  axiom inv'7 : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . inv'7 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span10] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'6 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span11] inv'6 self)
   -> ([%#span13] inv'8 (shallow_model'2 self))
  && ([%#span12] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'6 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span14] inv'8 (shallow_model'2 self)
  
  axiom inv'6 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'6 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'5 (self : Option'0.t_option t) =
    [%#span9] true
  
  predicate inv'5 (_x : Option'0.t_option t)
  
  axiom inv'5 : forall x : Option'0.t_option t . inv'5 x = true
  
  predicate invariant'4 (self : borrowed i)
  
  predicate inv'4 (_x : borrowed i)
  
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  
  use seq.Seq
  
  predicate inv'3 (_x : i)
  
  predicate produces'0 (self : i) (visited : Seq.seq t) (o : i)
  
  function produces_trans'0 (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([%#span15] produces'0 a ab b)
   -> ([%#span16] produces'0 b bc c)
   -> ([%#span17] inv'3 a)
   -> ([%#span18] inv'8 ab)
   -> ([%#span19] inv'3 b)
   -> ([%#span20] inv'8 bc)  -> ([%#span21] inv'3 c)  -> ([%#span22] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span23] inv'3 self)
   -> ([%#span24] produces'0 self (Seq.empty  : Seq.seq t) self)
  
  predicate invariant'3 (self : i)
  
  axiom inv'3 : forall x : i . inv'3 x = true
  
  use prelude.prelude.Snapshot
  
  predicate invariant'2 (self : Snapshot.snap_ty (Seq.seq t)) =
    [%#span9] true
  
  predicate inv'2 (_x : Snapshot.snap_ty (Seq.seq t))
  
  axiom inv'2 : forall x : Snapshot.snap_ty (Seq.seq t) . inv'2 x = true
  
  predicate invariant'1 (self : Snapshot.snap_ty i) =
    [%#span9] true
  
  predicate inv'1 (_x : Snapshot.snap_ty i)
  
  axiom inv'1 : forall x : Snapshot.snap_ty i . inv'1 x = true
  
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global)))) =
    [%#span9] true
  
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))))
  
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))) . inv'0 x = true
  
  predicate completed'0 (self : borrowed i)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'6 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span25]  ^ self =  * self
  
  predicate resolve'5 (self : i)
  
  use seq.Seq
  
  function shallow_model'0 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq t =
    [%#span26] shallow_model'2 ( * self)
  
  let rec push'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (value:t) (return'  (ret:()))= {[@expl:precondition] [%#span28] inv'9 value}
    {[@expl:precondition] [%#span27] inv'7 self}
    any
    [ return' (result:())-> {[%#span29] shallow_model'2 ( ^ self) = Seq.snoc (shallow_model'0 self) value}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'4 (self : Option'0.t_option t) =
    [%#span30] true
  
  predicate resolve'3 (self : borrowed i) =
    [%#span25]  ^ self =  * self
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_option t))= {[@expl:precondition] [%#span31] inv'4 self}
    any
    [ return' (result:Option'0.t_option t)-> {[%#span33] inv'5 result}
      {[%#span32] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  function shallow_model'3 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq t =
    [%#span34] shallow_model'0 self
  
  use prelude.prelude.Snapshot
  
  function shallow_model'1 (self : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global)))) : Seq.seq t =
    [%#span35] shallow_model'3 (Snapshot.inner self)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate resolve'2 (self : Snapshot.snap_ty (Seq.seq t)) =
    [%#span30] true
  
  use prelude.prelude.Snapshot
  
  predicate resolve'1 (self : Snapshot.snap_ty i) =
    [%#span30] true
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : i) (res : i) =
    [%#span36] self = res
  
  predicate into_iter_pre'0 (self : i) =
    [%#span37] true
  
  let rec into_iter'0 (self:i) (return'  (ret:i))= {[@expl:precondition] [%#span39] inv'3 self}
    {[@expl:precondition] [%#span38] into_iter_pre'0 self}
    any
    [ return' (result:i)-> {[%#span40] inv'3 result} {[%#span38] into_iter_post'0 self result} (! return' {result}) ]
    
  
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global)))) =
    [%#span30] true
  
  use prelude.prelude.Snapshot
  
  let rec extend (vec:borrowed (Vec'0.t_vec t (Global'0.t_global))) (iter:i) (return'  (ret:()))= {[%#s08_collect_extend7] inv'3 iter}
    {[%#s08_collect_extend6] inv'7 vec}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 =  [ &old_vec <- [%#s08_collect_extend0] Snapshot.new vec ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_vec} s1
      | s1 = -{resolve'0 old_vec}- s2
      | s2 = into_iter'0 {iter} (fun (_ret':i) ->  [ &iter1 <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#s08_collect_extend1] Snapshot.new iter1 ] s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'1 iter_old} s1
      | s1 = -{resolve'1 iter_old}- s2
      | s2 =  [ &produced <- [%#s08_collect_extend2] Snapshot.new (Seq.empty  : Seq.seq t) ] s3
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = {[@expl:type invariant] inv'2 produced} s1 | s1 = -{resolve'2 produced}- s2 | s2 = bb6 ] 
    | bb6 = bb7
    | bb7 = s0 [ s0 =  [ &old_8_0 <- Snapshot.new vec ] s1 | s1 = bb8 ] 
    | bb8 = bb8
      [ bb8 = {[@expl:loop invariant]  ^ Snapshot.inner old_8_0 =  ^ vec}
        {[@expl:loop invariant] [%#s08_collect_extend3] Seq.(==) (shallow_model'0 vec) (Seq.(++) (shallow_model'1 old_vec) (Snapshot.inner produced))}
        {[@expl:loop invariant] [%#s08_collect_extend4]  ^ Snapshot.inner old_vec =  ^ vec}
        {[@expl:loop invariant] [%#s08_collect_extend3] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter1}
        {[@expl:loop invariant] [%#s08_collect_extend3] inv'3 iter1}
        (! s0) [ s0 = bb9 ] 
        [ bb9 = s0
          [ s0 = Borrow.borrow_mut <i> {iter1} (fun (_ret':borrowed i) ->  [ &_19 <- _ret' ]  [ &iter1 <-  ^ _19 ] s1)
          | s1 = -{inv'3 ( ^ _19)}- s2
          | s2 = Borrow.borrow_final <i> { * _19} {Borrow.get_id _19}
              (fun (_ret':borrowed i) ->  [ &_18 <- _ret' ]  [ &_19 <- { _19 with current = ( ^ _18) ; } ] s3)
          | s3 = -{inv'3 ( ^ _18)}- s4
          | s4 = next'0 {_18} (fun (_ret':Option'0.t_option t) ->  [ &_17 <- _ret' ] s5)
          | s5 = bb10 ]
          
        | bb10 = s0
          [ s0 = {[@expl:type invariant] inv'4 _19} s1
          | s1 = -{resolve'3 _19}- s2
          | s2 = any [ br0 -> {_17 = Option'0.C_None } (! bb13) | br1 (a:t)-> {_17 = Option'0.C_Some a} (! bb12) ]  ]
          
        | bb12 = bb14
        | bb14 = s0
          [ s0 = Option'0.some <t> {_17}
              (fun (r0'0:t) ->
                 [ &__creusot_proc_iter_elem <- r0'0 ] 
                (any
                [ any_ (_any:t)-> (! Option'0.some <t> {_17} (fun (l_0'0:t) ->  [ &_17 <- Option'0.C_Some _any ] s1)) ]
                ))
          | s1 = {[@expl:type invariant] inv'5 _17} s2
          | s2 = -{resolve'4 _17}- s3
          | s3 = 
            [ &_22 <- [%#s08_collect_extend5] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s4
          | s4 = bb15 ]
          
        | bb15 = s0
          [ s0 =  [ &produced <- _22 ] (any [ any_ (_any:Snapshot.snap_ty (Seq.seq t))-> (!  [ &_22 <- _any ] s1) ] )
          | s1 = {[@expl:type invariant] inv'2 produced} s2
          | s2 = -{resolve'2 produced}- s3
          | s3 =  [ &x <- __creusot_proc_iter_elem ] 
            (any [ any_ (_any:t)-> (!  [ &__creusot_proc_iter_elem <- _any ] s4) ] )
          | s4 = Borrow.borrow_mut <Vec'0.t_vec t (Global'0.t_global)> { * vec}
              (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
                 [ &_26 <- _ret' ] 
                 [ &vec <- { vec with current = ( ^ _26) ; } ] 
                s5)
          | s5 = -{inv'6 ( ^ _26)}- s6
          | s6 = push'0 {_26} {x} (fun (_ret':()) ->  [ &_25 <- _ret' ] s7)
          | s7 = bb16 ]
          
        | bb16 = bb17
        | bb17 = bb18
        | bb18 = bb19
        | bb19 = bb8 ]
         ]
      
    | bb11 = s0
      [ s0 = {[@expl:type invariant] inv'3 iter1} s1
      | s1 = -{resolve'5 iter1}- s2
      | s2 = {[@expl:type invariant] inv'7 vec} s3
      | s3 = -{resolve'6 vec}- s4
      | s4 = {[@expl:type invariant] inv'5 _17} s5
      | s5 = -{resolve'4 _17}- s6
      | s6 = {[%#s08_collect_extend3] false} any ]
      
    | bb13 = s0
      [ s0 = {[@expl:type invariant] inv'5 _17} s1
      | s1 = -{resolve'4 _17}- s2
      | s2 = {[@expl:type invariant] inv'3 iter1} s3
      | s3 = -{resolve'5 iter1}- s4
      | s4 = {[@expl:type invariant] inv'7 vec} s5
      | s5 = -{resolve'6 vec}- s6
      | s6 = bb20 ]
      
    | bb20 = bb21
    | bb21 = bb22
    | bb22 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & vec : borrowed (Vec'0.t_vec t (Global'0.t_global)) = vec
    | & iter : i = iter
    | & old_vec : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l ()
    | & iter1 : i = any_l ()
    | & iter_old : Snapshot.snap_ty i = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq t) = any_l ()
    | & _17 : Option'0.t_option t = any_l ()
    | & _18 : borrowed i = any_l ()
    | & _19 : borrowed i = any_l ()
    | & __creusot_proc_iter_elem : t = any_l ()
    | & _22 : Snapshot.snap_ty (Seq.seq t) = any_l ()
    | & x : t = any_l ()
    | & _25 : () = any_l ()
    | & _26 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & old_8_0 : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s08_collect_extend8] exists prod : Seq.seq t . exists done' : borrowed i . inv'8 prod
      /\ inv'4 done'
      /\ completed'0 done'
      /\ produces'0 iter prod ( * done') /\ shallow_model'2 ( ^ vec) = Seq.(++) (shallow_model'0 vec) prod}
      (! return' {result}) ]
    
end
module C08CollectExtend_Collect
  type i
  
  let%span s08_collect_extend0 = "../08_collect_extend.rs" 43 18 43 28
  
  let%span s08_collect_extend1 = "../08_collect_extend.rs" 45 4 45 40
  
  let%span s08_collect_extend2 = "../08_collect_extend.rs" 45 4 45 40
  
  let%span s08_collect_extend3 = "../08_collect_extend.rs" 45 4 45 40
  
  let%span s08_collect_extend4 = "../08_collect_extend.rs" 45 4 45 40
  
  let%span s08_collect_extend5 = "../08_collect_extend.rs" 42 28 42 32
  
  let%span s08_collect_extend6 = "../08_collect_extend.rs" 38 0 41 2
  
  let%span s08_collect_extend7 = "../08_collect_extend.rs" 42 40 42 52
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "" 0 0 0 0
  
  let%span span10 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span11 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span12 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span14 = "../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32
  
  let%span span15 = "../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32
  
  let%span span16 = "../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23
  
  let%span span17 = "../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33
  
  let%span span18 = "../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53
  
  let%span span19 = "../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63
  
  let%span span20 = "../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83
  
  let%span span21 = "../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42
  
  let%span span22 = "../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25
  
  let%span span23 = "../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 45
  
  let%span span24 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span25 = "../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  
  let%span span26 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span27 = "" 0 0 0 0
  
  let%span span28 = "" 0 0 0 0
  
  let%span span29 = "../../../../../creusot-contracts/src/std/vec.rs" 82 26 82 51
  
  let%span span30 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span31 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span32 = "" 0 0 0 0
  
  let%span span33 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span34 = "" 0 0 0 0
  
  let%span span35 = "../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span36 = "../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span37 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span38 = "" 0 0 0 0
  
  let%span span39 = "" 0 0 0 0
  
  let%span span40 = "../../../../../creusot-contracts/src/std/vec.rs" 69 26 69 44
  
  let%span span41 = "" 0 0 0 0
  
  type item'0
  
  predicate invariant'8 (self : item'0)
  
  predicate inv'8 (_x : item'0)
  
  axiom inv'8 : forall x : item'0 . inv'8 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : borrowed (Vec'0.t_vec item'0 (Global'0.t_global))) =
    [%#span8] true
  
  predicate inv'7 (_x : borrowed (Vec'0.t_vec item'0 (Global'0.t_global)))
  
  axiom inv'7 : forall x : borrowed (Vec'0.t_vec item'0 (Global'0.t_global)) . inv'7 x = true
  
  use seq.Seq
  
  predicate invariant'6 (self : Seq.seq item'0) =
    [%#span8] true
  
  predicate inv'6 (_x : Seq.seq item'0)
  
  axiom inv'6 : forall x : Seq.seq item'0 . inv'6 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span9] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'5 (_x : Vec'0.t_vec item'0 (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec item'0 (Global'0.t_global)) : Seq.seq item'0
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec item'0 (Global'0.t_global) . ([%#span10] inv'5 self)
   -> ([%#span12] inv'6 (shallow_model'0 self))
  && ([%#span11] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'5 (self : Vec'0.t_vec item'0 (Global'0.t_global)) =
    [%#span13] inv'6 (shallow_model'0 self)
  
  axiom inv'5 : forall x : Vec'0.t_vec item'0 (Global'0.t_global) . inv'5 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'4 (self : Option'0.t_option item'0) =
    [%#span8] true
  
  predicate inv'4 (_x : Option'0.t_option item'0)
  
  axiom inv'4 : forall x : Option'0.t_option item'0 . inv'4 x = true
  
  predicate invariant'3 (self : borrowed i)
  
  predicate inv'3 (_x : borrowed i)
  
  axiom inv'3 : forall x : borrowed i . inv'3 x = true
  
  use seq.Seq
  
  predicate inv'2 (_x : i)
  
  predicate produces'0 (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span14] produces'0 a ab b)
   -> ([%#span15] produces'0 b bc c)
   -> ([%#span16] inv'2 a)
   -> ([%#span17] inv'6 ab)
   -> ([%#span18] inv'2 b)
   -> ([%#span19] inv'6 bc)  -> ([%#span20] inv'2 c)  -> ([%#span21] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span22] inv'2 self)
   -> ([%#span23] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate invariant'2 (self : i)
  
  axiom inv'2 : forall x : i . inv'2 x = true
  
  use prelude.prelude.Snapshot
  
  predicate invariant'1 (self : Snapshot.snap_ty (Seq.seq item'0)) =
    [%#span8] true
  
  predicate inv'1 (_x : Snapshot.snap_ty (Seq.seq item'0))
  
  axiom inv'1 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'1 x = true
  
  predicate invariant'0 (self : Snapshot.snap_ty i) =
    [%#span8] true
  
  predicate inv'0 (_x : Snapshot.snap_ty i)
  
  axiom inv'0 : forall x : Snapshot.snap_ty i . inv'0 x = true
  
  predicate completed'0 (self : borrowed i)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'6 (self : item'0)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec item'0 (Global'0.t_global)) (ix : int) : item'0 =
    [%#span24] Seq.get (shallow_model'0 self) ix
  
  predicate resolve'5 (self : Vec'0.t_vec item'0 (Global'0.t_global)) =
    [%#span25] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 self)  -> resolve'6 (index_logic'0 self i)
  
  predicate resolve'4 (self : i)
  
  use seq.Seq
  
  function shallow_model'1 (self : borrowed (Vec'0.t_vec item'0 (Global'0.t_global))) : Seq.seq item'0 =
    [%#span26] shallow_model'0 ( * self)
  
  let rec push'0 (self:borrowed (Vec'0.t_vec item'0 (Global'0.t_global))) (value:item'0) (return'  (ret:()))= {[@expl:precondition] [%#span28] inv'8 value}
    {[@expl:precondition] [%#span27] inv'7 self}
    any
    [ return' (result:())-> {[%#span29] shallow_model'0 ( ^ self) = Seq.snoc (shallow_model'1 self) value}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'3 (self : Option'0.t_option item'0) =
    [%#span30] true
  
  predicate resolve'2 (self : borrowed i) =
    [%#span31]  ^ self =  * self
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_option item'0))= {[@expl:precondition] [%#span32] inv'3 self}
    any
    [ return' (result:Option'0.t_option item'0)-> {[%#span34] inv'4 result}
      {[%#span33] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate resolve'1 (self : Snapshot.snap_ty (Seq.seq item'0)) =
    [%#span30] true
  
  use prelude.prelude.Snapshot
  
  predicate resolve'0 (self : Snapshot.snap_ty i) =
    [%#span30] true
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : i) (res : i) =
    [%#span35] self = res
  
  predicate into_iter_pre'0 (self : i) =
    [%#span36] true
  
  let rec into_iter'0 (self:i) (return'  (ret:i))= {[@expl:precondition] [%#span38] inv'2 self}
    {[@expl:precondition] [%#span37] into_iter_pre'0 self}
    any
    [ return' (result:i)-> {[%#span39] inv'2 result} {[%#span37] into_iter_post'0 self result} (! return' {result}) ]
    
  
  let rec new'0 (_1:()) (return'  (ret:Vec'0.t_vec item'0 (Global'0.t_global)))= any
    [ return' (result:Vec'0.t_vec item'0 (Global'0.t_global))-> {[%#span41] inv'5 result}
      {[%#span40] Seq.length (shallow_model'0 result) = 0}
      (! return' {result}) ]
    
  
  let rec collect (iter:i) (return'  (ret:Vec'0.t_vec item'0 (Global'0.t_global)))= {[%#s08_collect_extend5] inv'2 iter}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 = new'0 {[%#s08_collect_extend0] ()}
          (fun (_ret':Vec'0.t_vec item'0 (Global'0.t_global)) ->  [ &res <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 = into_iter'0 {iter} (fun (_ret':i) ->  [ &iter1 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#s08_collect_extend1] Snapshot.new iter1 ] s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'0 iter_old} s1
      | s1 = -{resolve'0 iter_old}- s2
      | s2 =  [ &produced <- [%#s08_collect_extend2] Snapshot.new (Seq.empty  : Seq.seq item'0) ] s3
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = {[@expl:type invariant] inv'1 produced} s1 | s1 = -{resolve'1 produced}- s2 | s2 = bb6 ] 
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb9
      [ bb9 = {[@expl:loop invariant] [%#s08_collect_extend3] Seq.(==) (shallow_model'0 res) (Snapshot.inner produced)}
        {[@expl:loop invariant] [%#s08_collect_extend3] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter1}
        {[@expl:loop invariant] [%#s08_collect_extend3] inv'2 iter1}
        (! s0) [ s0 = bb10 ] 
        [ bb10 = s0
          [ s0 = Borrow.borrow_mut <i> {iter1} (fun (_ret':borrowed i) ->  [ &_17 <- _ret' ]  [ &iter1 <-  ^ _17 ] s1)
          | s1 = -{inv'2 ( ^ _17)}- s2
          | s2 = Borrow.borrow_final <i> { * _17} {Borrow.get_id _17}
              (fun (_ret':borrowed i) ->  [ &_16 <- _ret' ]  [ &_17 <- { _17 with current = ( ^ _16) ; } ] s3)
          | s3 = -{inv'2 ( ^ _16)}- s4
          | s4 = next'0 {_16} (fun (_ret':Option'0.t_option item'0) ->  [ &_15 <- _ret' ] s5)
          | s5 = bb11 ]
          
        | bb11 = s0
          [ s0 = {[@expl:type invariant] inv'3 _17} s1
          | s1 = -{resolve'2 _17}- s2
          | s2 = any
            [ br0 -> {_15 = Option'0.C_None } (! bb14) | br1 (a:item'0)-> {_15 = Option'0.C_Some a} (! bb13) ]
             ]
          
        | bb13 = bb15
        | bb15 = s0
          [ s0 = Option'0.some <item'0> {_15}
              (fun (r0'0:item'0) ->
                 [ &__creusot_proc_iter_elem <- r0'0 ] 
                (any
                [ any_ (_any:item'0)-> (! Option'0.some <item'0> {_15}
                    (fun (l_0'0:item'0) ->  [ &_15 <- Option'0.C_Some _any ] s1)) ]
                ))
          | s1 = {[@expl:type invariant] inv'4 _15} s2
          | s2 = -{resolve'3 _15}- s3
          | s3 = 
            [ &_20 <- [%#s08_collect_extend4] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s4
          | s4 = bb16 ]
          
        | bb16 = s0
          [ s0 =  [ &produced <- _20 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq item'0))-> (!  [ &_20 <- _any ] s1) ] )
          | s1 = {[@expl:type invariant] inv'1 produced} s2
          | s2 = -{resolve'1 produced}- s3
          | s3 =  [ &x <- __creusot_proc_iter_elem ] 
            (any [ any_ (_any:item'0)-> (!  [ &__creusot_proc_iter_elem <- _any ] s4) ] )
          | s4 = Borrow.borrow_mut <Vec'0.t_vec item'0 (Global'0.t_global)> {res}
              (fun (_ret':borrowed (Vec'0.t_vec item'0 (Global'0.t_global))) ->
                 [ &_24 <- _ret' ] 
                 [ &res <-  ^ _24 ] 
                s5)
          | s5 = -{inv'5 ( ^ _24)}- s6
          | s6 = push'0 {_24} {x} (fun (_ret':()) ->  [ &_23 <- _ret' ] s7)
          | s7 = bb17 ]
          
        | bb17 = bb18
        | bb18 = bb19
        | bb19 = bb20
        | bb20 = bb9 ]
         ]
      
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv'2 iter1} s1
      | s1 = -{resolve'4 iter1}- s2
      | s2 = {[@expl:type invariant] inv'5 res} s3
      | s3 = -{resolve'5 res}- s4
      | s4 = {[@expl:type invariant] inv'4 _15} s5
      | s5 = -{resolve'3 _15}- s6
      | s6 = {[%#s08_collect_extend3] false} any ]
      
    | bb14 = s0
      [ s0 = {[@expl:type invariant] inv'4 _15} s1
      | s1 = -{resolve'3 _15}- s2
      | s2 = {[@expl:type invariant] inv'2 iter1} s3
      | s3 = -{resolve'4 iter1}- s4
      | s4 = bb21 ]
      
    | bb21 = bb22
    | bb22 = s0
      [ s0 =  [ &_0 <- res ] (any [ any_ (_any:Vec'0.t_vec item'0 (Global'0.t_global))-> (!  [ &res <- _any ] s1) ] )
      | s1 = bb23 ]
      
    | bb23 = bb24
    | bb24 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_vec item'0 (Global'0.t_global) = any_l ()
    | & iter : i = iter
    | & res : Vec'0.t_vec item'0 (Global'0.t_global) = any_l ()
    | & iter1 : i = any_l ()
    | & iter_old : Snapshot.snap_ty i = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq item'0) = any_l ()
    | & _15 : Option'0.t_option item'0 = any_l ()
    | & _16 : borrowed i = any_l ()
    | & _17 : borrowed i = any_l ()
    | & __creusot_proc_iter_elem : item'0 = any_l ()
    | & _20 : Snapshot.snap_ty (Seq.seq item'0) = any_l ()
    | & x : item'0 = any_l ()
    | & _23 : () = any_l ()
    | & _24 : borrowed (Vec'0.t_vec item'0 (Global'0.t_global)) = any_l () ]
    
    [ return' (result:Vec'0.t_vec item'0 (Global'0.t_global))-> {[@expl:postcondition] [%#s08_collect_extend7] inv'5 result}
      {[@expl:postcondition] [%#s08_collect_extend6] exists prod : Seq.seq item'0 . exists done' : borrowed i . inv'6 prod
      /\ inv'3 done' /\ completed'0 done' /\ produces'0 iter prod ( * done') /\ shallow_model'0 result = prod}
      (! return' {result}) ]
    
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
  
  function any_l (_ : 'b) : 'a
  
  let rec t_manuallydrop < 't > (input:t_manuallydrop 't) (ret  (value:'t))= any
    [ good (value:'t)-> {C_ManuallyDrop value = input} (! ret {value})
    | bad (value:'t)-> {C_ManuallyDrop value <> input} {false} any ]
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.prelude.Opaque
  
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as ManuallyDrop'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_intoiter 't 'a =
    | C_IntoIter (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't) usize (ManuallyDrop'0.t_manuallydrop 'a) (NonNull'0.t_nonnull 't) opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_intoiter < 't > < 'a > (input:t_intoiter 't 'a) (ret  (buf:NonNull'0.t_nonnull 't) (phantom:PhantomData'0.t_phantomdata 't) (cap:usize) (alloc:ManuallyDrop'0.t_manuallydrop 'a) (ptr:NonNull'0.t_nonnull 't) (end':opaque_ptr))= any
    [ good (buf:NonNull'0.t_nonnull 't) (phantom:PhantomData'0.t_phantomdata 't) (cap:usize) (alloc:ManuallyDrop'0.t_manuallydrop 'a) (ptr:NonNull'0.t_nonnull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      = input}
      (! ret {buf} {phantom} {cap} {alloc} {ptr} {end'})
    | bad (buf:NonNull'0.t_nonnull 't) (phantom:PhantomData'0.t_phantomdata 't) (cap:usize) (alloc:ManuallyDrop'0.t_manuallydrop 'a) (ptr:NonNull'0.t_nonnull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      <> input}
      {false}
      any ]
    
end
module C08CollectExtend_ExtendIndex
  let%span s08_collect_extend0 = "../08_collect_extend.rs" 53 16 53 32
  
  let%span s08_collect_extend1 = "../08_collect_extend.rs" 54 16 54 32
  
  let%span s08_collect_extend2 = "../08_collect_extend.rs" 57 4 57 55
  
  let%span span3 = "../../../../../creusot-contracts/src/std/vec.rs" 254 12 254 41
  
  let%span span4 = "../../../../../creusot-contracts/src/std/vec.rs" 265 15 265 32
  
  let%span span5 = "../../../../../creusot-contracts/src/std/vec.rs" 266 15 266 32
  
  let%span span6 = "../../../../../creusot-contracts/src/std/vec.rs" 268 22 268 23
  
  let%span span7 = "../../../../../creusot-contracts/src/std/vec.rs" 268 31 268 33
  
  let%span span8 = "../../../../../creusot-contracts/src/std/vec.rs" 268 43 268 44
  
  let%span span9 = "../../../../../creusot-contracts/src/std/vec.rs" 268 52 268 54
  
  let%span span10 = "../../../../../creusot-contracts/src/std/vec.rs" 268 64 268 65
  
  let%span span11 = "../../../../../creusot-contracts/src/std/vec.rs" 267 14 267 42
  
  let%span span12 = "../../../../../creusot-contracts/src/std/vec.rs" 263 4 263 10
  
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 261 21 261 25
  
  let%span span14 = "../../../../../creusot-contracts/src/std/vec.rs" 260 14 260 45
  
  let%span span15 = "../../../../../creusot-contracts/src/std/vec.rs" 258 4 258 10
  
  let%span span16 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span17 = "" 0 0 0 0
  
  let%span span18 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span19 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span20 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span21 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span22 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span23 = "../../../../../creusot-contracts/src/snapshot.rs" 28 20 28 48
  
  let%span span24 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span25 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span26 = "../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  
  let%span span27 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span28 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span29 = "../../../../../creusot-contracts/src/std/vec.rs" 247 20 247 57
  
  let%span span30 = "../08_collect_extend.rs" 25 40 25 43
  
  let%span span31 = "../08_collect_extend.rs" 25 58 25 62
  
  let%span span32 = "../08_collect_extend.rs" 21 0 24 2
  
  let%span span33 = "../../../../../creusot-contracts/src/std/vec.rs" 191 20 191 33
  
  let%span span34 = "../../../../../creusot-contracts/src/std/vec.rs" 185 20 185 24
  
  let%span span35 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span36 = "" 0 0 0 0
  
  let%span span37 = "" 0 0 0 0
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_IntoIter_IntoIter_Type as IntoIter'0
  
  use seq.Seq
  
  predicate inv'3 (_x : Seq.seq uint32)
  
  predicate inv'1 (_x : IntoIter'0.t_intoiter uint32 (Global'0.t_global))
  
  function shallow_model'4 (self : IntoIter'0.t_intoiter uint32 (Global'0.t_global)) : Seq.seq uint32
  
  predicate produces'0 (self : IntoIter'0.t_intoiter uint32 (Global'0.t_global)) (visited : Seq.seq uint32) (rhs : IntoIter'0.t_intoiter uint32 (Global'0.t_global))
    
   =
    [%#span3] shallow_model'4 self = Seq.(++) visited (shallow_model'4 rhs)
  
  function produces_trans'0 (a : IntoIter'0.t_intoiter uint32 (Global'0.t_global)) (ab : Seq.seq uint32) (b : IntoIter'0.t_intoiter uint32 (Global'0.t_global)) (bc : Seq.seq uint32) (c : IntoIter'0.t_intoiter uint32 (Global'0.t_global)) : ()
    
   =
    [%#span12] ()
  
  axiom produces_trans'0_spec : forall a : IntoIter'0.t_intoiter uint32 (Global'0.t_global), ab : Seq.seq uint32, b : IntoIter'0.t_intoiter uint32 (Global'0.t_global), bc : Seq.seq uint32, c : IntoIter'0.t_intoiter uint32 (Global'0.t_global) . ([%#span4] produces'0 a ab b)
   -> ([%#span5] produces'0 b bc c)
   -> ([%#span6] inv'1 a)
   -> ([%#span7] inv'3 ab)
   -> ([%#span8] inv'1 b)
   -> ([%#span9] inv'3 bc)  -> ([%#span10] inv'1 c)  -> ([%#span11] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : IntoIter'0.t_intoiter uint32 (Global'0.t_global)) : () =
    [%#span15] ()
  
  axiom produces_refl'0_spec : forall self : IntoIter'0.t_intoiter uint32 (Global'0.t_global) . ([%#span13] inv'1 self)
   -> ([%#span14] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed (IntoIter'0.t_intoiter uint32 (Global'0.t_global))) =
    [%#span16] true
  
  predicate inv'4 (_x : borrowed (IntoIter'0.t_intoiter uint32 (Global'0.t_global)))
  
  axiom inv'4 : forall x : borrowed (IntoIter'0.t_intoiter uint32 (Global'0.t_global)) . inv'4 x = true
  
  predicate invariant'3 (self : Seq.seq uint32) =
    [%#span16] true
  
  axiom inv'3 : forall x : Seq.seq uint32 . inv'3 x = true
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate invariant'2 (self : borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) =
    [%#span16] true
  
  predicate inv'2 (_x : borrowed (Vec'0.t_vec uint32 (Global'0.t_global)))
  
  axiom inv'2 : forall x : borrowed (Vec'0.t_vec uint32 (Global'0.t_global)) . inv'2 x = true
  
  predicate invariant'1 (self : IntoIter'0.t_intoiter uint32 (Global'0.t_global)) =
    [%#span16] true
  
  axiom inv'1 : forall x : IntoIter'0.t_intoiter uint32 (Global'0.t_global) . inv'1 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span17] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'0 (_x : Vec'0.t_vec uint32 (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) : Seq.seq uint32
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec uint32 (Global'0.t_global) . ([%#span18] inv'0 self)
   -> ([%#span20] inv'3 (shallow_model'0 self))
  && ([%#span19] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span21] inv'3 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec uint32 (Global'0.t_global) . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  function shallow_model'3 (self : Vec'0.t_vec uint32 (Global'0.t_global)) : Seq.seq uint32 =
    [%#span22] shallow_model'0 self
  
  use prelude.prelude.Snapshot
  
  function shallow_model'1 (self : Snapshot.snap_ty (Vec'0.t_vec uint32 (Global'0.t_global))) : Seq.seq uint32 =
    [%#span23] shallow_model'3 (Snapshot.inner self)
  
  predicate resolve'2 (self : uint32) =
    [%#span24] true
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec uint32 (Global'0.t_global)) (ix : int) : uint32 =
    [%#span25] Seq.get (shallow_model'0 self) ix
  
  predicate resolve'1 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span26] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 self)  -> resolve'2 (index_logic'0 self i)
  
  predicate resolve'0 (self : borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) =
    [%#span27]  ^ self =  * self
  
  function shallow_model'2 (self : borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) : Seq.seq uint32 =
    [%#span28] shallow_model'0 ( * self)
  
  function shallow_model'5 (self : borrowed (IntoIter'0.t_intoiter uint32 (Global'0.t_global))) : Seq.seq uint32 =
    [%#span28] shallow_model'4 ( * self)
  
  predicate resolve'3 (self : borrowed (IntoIter'0.t_intoiter uint32 (Global'0.t_global))) =
    [%#span27]  ^ self =  * self
  
  predicate completed'0 (self : borrowed (IntoIter'0.t_intoiter uint32 (Global'0.t_global))) =
    [%#span29] resolve'3 self /\ shallow_model'5 self = (Seq.empty  : Seq.seq uint32)
  
  let rec extend'0 (vec:borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) (iter:IntoIter'0.t_intoiter uint32 (Global'0.t_global)) (return'  (ret:()))= {[@expl:precondition] [%#span31] inv'1 iter}
    {[@expl:precondition] [%#span30] inv'2 vec}
    any
    [ return' (result:())-> {[%#span32] exists prod : Seq.seq uint32 . exists done' : borrowed (IntoIter'0.t_intoiter uint32 (Global'0.t_global)) . inv'3 prod
      /\ inv'4 done'
      /\ completed'0 done'
      /\ produces'0 iter prod ( * done') /\ shallow_model'0 ( ^ vec) = Seq.(++) (shallow_model'2 vec) prod}
      (! return' {result}) ]
    
  
  predicate into_iter_post'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) (res : IntoIter'0.t_intoiter uint32 (Global'0.t_global))
    
   =
    [%#span33] shallow_model'0 self = shallow_model'4 res
  
  predicate into_iter_pre'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span34] true
  
  let rec into_iter'0 (self:Vec'0.t_vec uint32 (Global'0.t_global)) (return'  (ret:IntoIter'0.t_intoiter uint32 (Global'0.t_global)))= {[@expl:precondition] [%#span36] inv'0 self}
    {[@expl:precondition] [%#span35] into_iter_pre'0 self}
    any
    [ return' (result:IntoIter'0.t_intoiter uint32 (Global'0.t_global))-> {[%#span37] inv'1 result}
      {[%#span35] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  let rec extend_index (v1:Vec'0.t_vec uint32 (Global'0.t_global)) (v2:Vec'0.t_vec uint32 (Global'0.t_global)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &oldv1 <- [%#s08_collect_extend0] Snapshot.new v1 ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &oldv2 <- [%#s08_collect_extend1] Snapshot.new v2 ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <Vec'0.t_vec uint32 (Global'0.t_global)> {v1}
          (fun (_ret':borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) ->  [ &_9 <- _ret' ]  [ &v1 <-  ^ _9 ] s1)
      | s1 = Borrow.borrow_final <Vec'0.t_vec uint32 (Global'0.t_global)> { * _9} {Borrow.get_id _9}
          (fun (_ret':borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) ->
             [ &_8 <- _ret' ] 
             [ &_9 <- { _9 with current = ( ^ _8) ; } ] 
            s2)
      | s2 = into_iter'0 {v2} (fun (_ret':IntoIter'0.t_intoiter uint32 (Global'0.t_global)) ->  [ &_10 <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0 [ s0 = extend'0 {_8} {_10} (fun (_ret':()) ->  [ &_7 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = -{resolve'0 _9}- s1
      | s1 = -{resolve'1 v1}- s2
      | s2 = {[@expl:assertion] [%#s08_collect_extend2] Seq.(==) (shallow_model'0 v1) (Seq.(++) (shallow_model'1 oldv1) (shallow_model'1 oldv2))}
        s3
      | s3 = bb5 ]
      
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v1 : Vec'0.t_vec uint32 (Global'0.t_global) = v1
    | & v2 : Vec'0.t_vec uint32 (Global'0.t_global) = v2
    | & oldv1 : Snapshot.snap_ty (Vec'0.t_vec uint32 (Global'0.t_global)) = any_l ()
    | & oldv2 : Snapshot.snap_ty (Vec'0.t_vec uint32 (Global'0.t_global)) = any_l ()
    | & _7 : () = any_l ()
    | & _8 : borrowed (Vec'0.t_vec uint32 (Global'0.t_global)) = any_l ()
    | & _9 : borrowed (Vec'0.t_vec uint32 (Global'0.t_global)) = any_l ()
    | & _10 : IntoIter'0.t_intoiter uint32 (Global'0.t_global) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C08CollectExtend_CollectExample
  type i
  
  let%span s08_collect_extend0 = "../08_collect_extend.rs" 64 4 64 75
  
  let%span s08_collect_extend1 = "../08_collect_extend.rs" 60 0 60 130
  
  let%span s08_collect_extend2 = "../08_collect_extend.rs" 61 48 61 52
  
  let%span span3 = "" 0 0 0 0
  
  let%span span4 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span5 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span6 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span7 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32
  
  let%span span10 = "../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32
  
  let%span span11 = "../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23
  
  let%span span12 = "../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33
  
  let%span span13 = "../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53
  
  let%span span14 = "../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63
  
  let%span span15 = "../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83
  
  let%span span16 = "../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42
  
  let%span span17 = "../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25
  
  let%span span18 = "../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 45
  
  let%span span19 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span20 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span21 = "../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  
  let%span span22 = "../08_collect_extend.rs" 42 28 42 32
  
  let%span span23 = "../08_collect_extend.rs" 38 0 41 2
  
  let%span span24 = "../08_collect_extend.rs" 42 40 42 52
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  predicate inv'1 (_x : Seq.seq uint32)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span3] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'3 (_x : Vec'0.t_vec uint32 (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) : Seq.seq uint32
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec uint32 (Global'0.t_global) . ([%#span4] inv'3 self)
   -> ([%#span6] inv'1 (shallow_model'0 self))
  && ([%#span5] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'3 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span7] inv'1 (shallow_model'0 self)
  
  axiom inv'3 : forall x : Vec'0.t_vec uint32 (Global'0.t_global) . inv'3 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed i)
  
  predicate inv'2 (_x : borrowed i)
  
  axiom inv'2 : forall x : borrowed i . inv'2 x = true
  
  predicate invariant'1 (self : Seq.seq uint32) =
    [%#span8] true
  
  axiom inv'1 : forall x : Seq.seq uint32 . inv'1 x = true
  
  use seq.Seq
  
  predicate inv'0 (_x : i)
  
  predicate produces'0 (self : i) (visited : Seq.seq uint32) (o : i)
  
  function produces_trans'0 (a : i) (ab : Seq.seq uint32) (b : i) (bc : Seq.seq uint32) (c : i) : ()
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq uint32, b : i, bc : Seq.seq uint32, c : i . ([%#span9] produces'0 a ab b)
   -> ([%#span10] produces'0 b bc c)
   -> ([%#span11] inv'0 a)
   -> ([%#span12] inv'1 ab)
   -> ([%#span13] inv'0 b)
   -> ([%#span14] inv'1 bc)  -> ([%#span15] inv'0 c)  -> ([%#span16] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span17] inv'0 self)
   -> ([%#span18] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  
  predicate invariant'0 (self : i)
  
  axiom inv'0 : forall x : i . inv'0 x = true
  
  use seq.Seq
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec uint32 (Global'0.t_global)) (ix : int) : uint32 =
    [%#span19] Seq.get (shallow_model'0 self) ix
  
  predicate resolve'1 (self : uint32) =
    [%#span20] true
  
  predicate resolve'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span21] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 self)  -> resolve'1 (index_logic'0 self i)
  
  predicate completed'0 (self : borrowed i)
  
  let rec collect'0 (iter:i) (return'  (ret:Vec'0.t_vec uint32 (Global'0.t_global)))= {[@expl:precondition] [%#span22] inv'0 iter}
    any
    [ return' (result:Vec'0.t_vec uint32 (Global'0.t_global))-> {[%#span24] inv'3 result}
      {[%#span23] exists prod : Seq.seq uint32 . exists done' : borrowed i . inv'1 prod
      /\ inv'2 done' /\ completed'0 done' /\ produces'0 iter prod ( * done') /\ shallow_model'0 result = prod}
      (! return' {result}) ]
    
  
  let rec collect_example (iter:i) (return'  (ret:()))= {[%#s08_collect_extend2] inv'0 iter}
    {[%#s08_collect_extend1] forall fin : i . forall prod : Seq.seq uint32 . inv'0 fin
     -> produces'0 iter prod fin
     -> (forall i : int . 0 <= i /\ i < Seq.length prod  -> UInt32.to_int (Seq.get prod i) = i)}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 = collect'0 {iter} (fun (_ret':Vec'0.t_vec uint32 (Global'0.t_global)) ->  [ &v <- _ret' ] s1) | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 v}- s1
      | s1 = {[@expl:assertion] [%#s08_collect_extend0] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 v)
         -> UInt32.to_int (index_logic'0 v i) = i}
        s2
      | s2 = bb3 ]
      
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : () = any_l () | & iter : i = iter | & v : Vec'0.t_vec uint32 (Global'0.t_global) = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
