module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_08_collect_extend__extend [#"08_collect_extend.rs" 27 0 27 66]
  type t
  
  type i
  
  let%span s08_collect_extend0 = "08_collect_extend.rs" 28 18 28 35
  let%span s08_collect_extend1 = "08_collect_extend.rs" 30 4 30 26
  let%span s08_collect_extend2 = "08_collect_extend.rs" 30 4 30 26
  let%span s08_collect_extend3 = "08_collect_extend.rs" 30 4 30 26
  let%span s08_collect_extend4 = "08_collect_extend.rs" 30 16 30 24
  let%span s08_collect_extend5 = "08_collect_extend.rs" 30 4 30 26
  let%span s08_collect_extend6 = "08_collect_extend.rs" 27 40 27 43
  let%span s08_collect_extend7 = "08_collect_extend.rs" 27 58 27 62
  let%span s08_collect_extend8 = "08_collect_extend.rs" 22 0 26 2
  let%span siter9 = "../../../../creusot-contracts/src/std/iter.rs" 101 0 214 1
  let%span smodel10 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span ssnapshot11 = "../../../../creusot-contracts/src/snapshot.rs" 27 20 27 39
  let%span siter12 = "../../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span svec13 = "../../../../creusot-contracts/src/std/vec.rs" 90 26 90 51
  let%span svec14 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span siter15 = "../../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter16 = "../../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span siter17 = "../../../../creusot-contracts/src/std/iter.rs" 38 15 38 24
  let%span siter18 = "../../../../creusot-contracts/src/std/iter.rs" 39 14 39 45
  let%span siter19 = "../../../../creusot-contracts/src/std/iter.rs" 43 15 43 21
  let%span siter20 = "../../../../creusot-contracts/src/std/iter.rs" 44 15 44 21
  let%span siter21 = "../../../../creusot-contracts/src/std/iter.rs" 45 15 45 21
  let%span siter22 = "../../../../creusot-contracts/src/std/iter.rs" 46 15 46 32
  let%span siter23 = "../../../../creusot-contracts/src/std/iter.rs" 47 15 47 32
  let%span siter24 = "../../../../creusot-contracts/src/std/iter.rs" 48 14 48 42
  let%span smodel25 = "../../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span sresolve26 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sseq27 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sinvariant28 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span svec29 = "../../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span sboxed30 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'6 (_1 : t)
  
  predicate invariant'4 (self : t) =
    [%#sboxed30] inv'6 self
  
  predicate inv'7 (_1 : t)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t [inv'7 x] . inv'7 x = invariant'4 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'5 (_1 : Option'0.t_Option t)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Option'0.t_Option t [inv'5 x] . inv'5 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'6 a_0
    end
  
  use seq.Seq
  
  predicate inv'0 (_1 : Seq.seq t)
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'2 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t
  
  axiom view'2_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . [%#svec14] Seq.length (view'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'3 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#svec29] inv'0 (view'2 self)
  
  predicate inv'4 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  axiom inv_axiom'3 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate inv'1 (_1 : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed i) =
    [%#sinvariant28] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'3 (_1 : borrowed i)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed i [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sinvariant28] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'2 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) [inv'2 x] . inv'2 x
  = invariant'1 x
  
  use seq.Seq
  
  predicate produces'0 (self : i) (visited : Seq.seq t) (o : i)
  
  function produces_trans'0 (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([%#siter19] inv'1 a)
   -> ([%#siter20] inv'1 b)
   -> ([%#siter21] inv'1 c)
   -> ([%#siter22] produces'0 a ab b)
   -> ([%#siter23] produces'0 b bc c)  -> ([%#siter24] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#siter17] inv'1 self)
   -> ([%#siter18] produces'0 self (Seq.empty  : Seq.seq t) self)
  
  use seq.Seq
  
  predicate invariant'0 (self : Seq.seq t) =
    [%#sseq27] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq t [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate completed'0 (self : borrowed i)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'4 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sresolve26] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    resolve'4 _1
  
  predicate resolve'1 (_1 : i)
  
  use seq.Seq
  
  function view'0 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t =
    [%#smodel10] view'2 self.current
  
  let rec push'0 (self:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (value:t) (return'  (ret:()))= {[@expl:precondition] inv'6 value}
    {[@expl:precondition] inv'2 self}
    any [ return' (result:())-> {[%#svec13] view'2 self.final = Seq.snoc (view'0 self) value} (! return' {result}) ] 
  
  use seq.Seq
  
  predicate resolve'3 (self : borrowed i) =
    [%#sresolve26] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed i) =
    resolve'3 _1
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option t))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:Option'0.t_Option t)-> {inv'5 result}
      {[%#siter12] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  function view'3 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t =
    [%#smodel25] view'0 self
  
  function view'1 (self : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global)))) : Seq.seq t =
    [%#ssnapshot11] view'3 (Snapshot.inner self)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : i) (res : i) =
    [%#siter16] self = res
  
  predicate into_iter_pre'0 (self : i) =
    [%#siter15] true
  
  let rec into_iter'0 (self:i) (return'  (ret:i))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [%#siter9] into_iter_pre'0 self}
    any [ return' (result:i)-> {inv'1 result} {[%#siter9] into_iter_post'0 self result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec extend (vec:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (iter:i) (return'  (ret:()))= {[%#s08_collect_extend7] inv'1 iter}
    {[%#s08_collect_extend6] inv'2 vec}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 =  [ &old_vec <- [%#s08_collect_extend0] Snapshot.new vec ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = into_iter'0 {iter} (fun (_ret':i) ->  [ &iter1 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#s08_collect_extend1] Snapshot.new iter1 ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &produced <- [%#s08_collect_extend2] Snapshot.new (Seq.empty  : Seq.seq t) ] s1 | s1 = bb5 ] 
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = s0 [ s0 =  [ &old_8_0 <- Snapshot.new vec ] s1 | s1 = bb8 ] 
    | bb8 = bb8
      [ bb8 = {[@expl:loop invariant] (Snapshot.inner old_8_0).final = vec.final}
        {[@expl:loop invariant] [%#s08_collect_extend3] Seq.(==) (view'0 vec) (Seq.(++) (view'1 old_vec) (Snapshot.inner produced))}
        {[@expl:loop invariant] [%#s08_collect_extend4] inv'2 vec}
        {[@expl:loop invariant] [%#s08_collect_extend3] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter1}
        {[@expl:loop invariant] [%#s08_collect_extend3] inv'1 iter1}
        {[@expl:loop invariant] [%#s08_collect_extend3] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb9 ] 
        [ bb9 = s0
          [ s0 = {inv'1 iter1}
            Borrow.borrow_mut <i> {iter1}
              (fun (_ret':borrowed i) ->  [ &_20 <- _ret' ] -{inv'1 _ret'.final}-  [ &iter1 <- _ret'.final ] s1)
          | s1 = {inv'1 _20.current}
            Borrow.borrow_final <i> {_20.current} {Borrow.get_id _20}
              (fun (_ret':borrowed i) ->
                 [ &_19 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &_20 <- { _20 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'0 {_19} (fun (_ret':Option'0.t_Option t) ->  [ &_18 <- _ret' ] s3)
          | s3 = bb10 ]
          
        | bb10 = s0
          [ s0 = {[@expl:type invariant] inv'3 _20} s1
          | s1 = -{resolve'0 _20}- s2
          | s2 = any [ br0 -> {_18 = Option'0.C_None } (! bb13) | br1 (a:t)-> {_18 = Option'0.C_Some a} (! bb12) ]  ]
          
        | bb12 = bb14
        | bb14 = s0
          [ s0 = Option'0.v_Some <t> {_18} (fun (r0'0:t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_23 <- [%#s08_collect_extend5] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb15 ]
          
        | bb15 = s0
          [ s0 =  [ &produced <- _23 ] s1
          | s1 =  [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = {inv'4 vec.current}
            Borrow.borrow_mut <Vec'0.t_Vec t (Global'0.t_Global)> {vec.current}
              (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
                 [ &_27 <- _ret' ] 
                -{inv'4 _ret'.final}-
                 [ &vec <- { vec with current = _ret'.final ; } ] 
                s3)
          | s3 = push'0 {_27} {x} (fun (_ret':()) ->  [ &_26 <- _ret' ] s4)
          | s4 = bb16 ]
          
        | bb16 = bb17
        | bb17 = bb18
        | bb18 = bb19
        | bb19 = bb8 ]
         ]
      
    | bb13 = s0
      [ s0 = {[@expl:type invariant] inv'1 iter1} s1
      | s1 = -{resolve'1 iter1}- s2
      | s2 = {[@expl:type invariant] inv'2 vec} s3
      | s3 = -{resolve'2 vec}- s4
      | s4 = bb20 ]
      
    | bb20 = bb21
    | bb21 = bb22
    | bb22 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & vec : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = vec
    | & iter : i = iter
    | & old_vec : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global))) = any_l ()
    | & iter1 : i = any_l ()
    | & iter_old : Snapshot.snap_ty i = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq t) = any_l ()
    | & _18 : Option'0.t_Option t = any_l ()
    | & _19 : borrowed i = any_l ()
    | & _20 : borrowed i = any_l ()
    | & __creusot_proc_iter_elem : t = any_l ()
    | & _23 : Snapshot.snap_ty (Seq.seq t) = any_l ()
    | & x : t = any_l ()
    | & _26 : () = any_l ()
    | & _27 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l ()
    | & old_8_0 : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global))) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s08_collect_extend8] exists done' : borrowed i, prod : Seq.seq t . inv'3 done'
      /\ inv'0 prod
      /\ completed'0 done' /\ produces'0 iter prod done'.current /\ view'2 vec.final = Seq.(++) (view'0 vec) prod}
      (! return' {result}) ]
    
end
module M_08_collect_extend__collect [#"08_collect_extend.rs" 46 0 46 52]
  type i
  
  let%span s08_collect_extend0 = "08_collect_extend.rs" 47 18 47 28
  let%span s08_collect_extend1 = "08_collect_extend.rs" 49 4 49 26
  let%span s08_collect_extend2 = "08_collect_extend.rs" 49 4 49 26
  let%span s08_collect_extend3 = "08_collect_extend.rs" 49 4 49 26
  let%span s08_collect_extend4 = "08_collect_extend.rs" 49 16 49 24
  let%span s08_collect_extend5 = "08_collect_extend.rs" 49 4 49 26
  let%span s08_collect_extend6 = "08_collect_extend.rs" 46 28 46 32
  let%span s08_collect_extend7 = "08_collect_extend.rs" 41 0 45 2
  let%span s08_collect_extend8 = "08_collect_extend.rs" 46 40 46 52
  let%span svec9 = "../../../../creusot-contracts/src/std/vec.rs" 77 26 77 44
  let%span siter10 = "../../../../creusot-contracts/src/std/iter.rs" 101 0 214 1
  let%span svec11 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span siter12 = "../../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span svec13 = "../../../../creusot-contracts/src/std/vec.rs" 90 26 90 51
  let%span siter14 = "../../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter15 = "../../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span siter16 = "../../../../creusot-contracts/src/std/iter.rs" 38 15 38 24
  let%span siter17 = "../../../../creusot-contracts/src/std/iter.rs" 39 14 39 45
  let%span siter18 = "../../../../creusot-contracts/src/std/iter.rs" 43 15 43 21
  let%span siter19 = "../../../../creusot-contracts/src/std/iter.rs" 44 15 44 21
  let%span siter20 = "../../../../creusot-contracts/src/std/iter.rs" 45 15 45 21
  let%span siter21 = "../../../../creusot-contracts/src/std/iter.rs" 46 15 46 32
  let%span siter22 = "../../../../creusot-contracts/src/std/iter.rs" 47 15 47 32
  let%span siter23 = "../../../../creusot-contracts/src/std/iter.rs" 48 14 48 42
  let%span sresolve24 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span smodel25 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sseq26 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span svec27 = "../../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span sinvariant28 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed29 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'6 (_1 : t_Item'0)
  
  predicate invariant'4 (self : t_Item'0) =
    [%#sboxed29] inv'6 self
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = invariant'4 x
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'2 (_1 : Vec'0.t_Vec t_Item'0 (Global'0.t_Global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed (Vec'0.t_Vec t_Item'0 (Global'0.t_Global))) =
    [%#sinvariant28] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'5 (_1 : borrowed (Vec'0.t_Vec t_Item'0 (Global'0.t_Global)))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (Vec'0.t_Vec t_Item'0 (Global'0.t_Global)) [inv'5 x] . inv'5 x
  = invariant'3 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'4 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'4 x] . inv'4 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'6 a_0
    end
  
  predicate inv'1 (_1 : i)
  
  predicate invariant'2 (self : borrowed i) =
    [%#sinvariant28] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'3 (_1 : borrowed i)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed i [inv'3 x] . inv'3 x = invariant'2 x
  
  use seq.Seq
  
  predicate inv'0 (_1 : Seq.seq t_Item'0)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'0 (self : Vec'0.t_Vec t_Item'0 (Global'0.t_Global)) : Seq.seq t_Item'0
  
  axiom view'0_spec : forall self : Vec'0.t_Vec t_Item'0 (Global'0.t_Global) . [%#svec11] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'1 (self : Vec'0.t_Vec t_Item'0 (Global'0.t_Global)) =
    [%#svec27] inv'0 (view'0 self)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Vec'0.t_Vec t_Item'0 (Global'0.t_Global) [inv'2 x] . inv'2 x = invariant'1 x
  
  use seq.Seq
  
  predicate produces'0 (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#siter18] inv'1 a)
   -> ([%#siter19] inv'1 b)
   -> ([%#siter20] inv'1 c)
   -> ([%#siter21] produces'0 a ab b)
   -> ([%#siter22] produces'0 b bc c)  -> ([%#siter23] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#siter16] inv'1 self)
   -> ([%#siter17] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use seq.Seq
  
  predicate invariant'0 (self : Seq.seq t_Item'0) =
    [%#sseq26] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate completed'0 (self : borrowed i)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (_1 : i)
  
  use seq.Seq
  
  function view'1 (self : borrowed (Vec'0.t_Vec t_Item'0 (Global'0.t_Global))) : Seq.seq t_Item'0 =
    [%#smodel25] view'0 self.current
  
  let rec push'0 (self:borrowed (Vec'0.t_Vec t_Item'0 (Global'0.t_Global))) (value:t_Item'0) (return'  (ret:()))= {[@expl:precondition] inv'6 value}
    {[@expl:precondition] inv'5 self}
    any [ return' (result:())-> {[%#svec13] view'0 self.final = Seq.snoc (view'1 self) value} (! return' {result}) ] 
  
  use seq.Seq
  
  predicate resolve'2 (self : borrowed i) =
    [%#sresolve24] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed i) =
    resolve'2 _1
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option t_Item'0))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:Option'0.t_Option t_Item'0)-> {inv'4 result}
      {[%#siter12] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : i) (res : i) =
    [%#siter15] self = res
  
  predicate into_iter_pre'0 (self : i) =
    [%#siter14] true
  
  let rec into_iter'0 (self:i) (return'  (ret:i))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [%#siter10] into_iter_pre'0 self}
    any [ return' (result:i)-> {inv'1 result} {[%#siter10] into_iter_post'0 self result} (! return' {result}) ] 
  
  let rec new'0 (_1:()) (return'  (ret:Vec'0.t_Vec t_Item'0 (Global'0.t_Global)))= any
    [ return' (result:Vec'0.t_Vec t_Item'0 (Global'0.t_Global))-> {inv'2 result}
      {[%#svec9] Seq.length (view'0 result) = 0}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec collect (iter:i) (return'  (ret:Vec'0.t_Vec t_Item'0 (Global'0.t_Global)))= {[%#s08_collect_extend6] inv'1 iter}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 = new'0 {[%#s08_collect_extend0] ()}
          (fun (_ret':Vec'0.t_Vec t_Item'0 (Global'0.t_Global)) ->  [ &res <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 = into_iter'0 {iter} (fun (_ret':i) ->  [ &iter1 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#s08_collect_extend1] Snapshot.new iter1 ] s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &produced <- [%#s08_collect_extend2] Snapshot.new (Seq.empty  : Seq.seq t_Item'0) ] s1 | s1 = bb5 ]
      
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb10
      [ bb10 = {[@expl:loop invariant] [%#s08_collect_extend3] Seq.(==) (view'0 res) (Snapshot.inner produced)}
        {[@expl:loop invariant] [%#s08_collect_extend4] inv'2 res}
        {[@expl:loop invariant] [%#s08_collect_extend3] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter1}
        {[@expl:loop invariant] [%#s08_collect_extend3] inv'1 iter1}
        {[@expl:loop invariant] [%#s08_collect_extend3] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb11 ] 
        [ bb11 = s0
          [ s0 = {inv'1 iter1}
            Borrow.borrow_mut <i> {iter1}
              (fun (_ret':borrowed i) ->  [ &_19 <- _ret' ] -{inv'1 _ret'.final}-  [ &iter1 <- _ret'.final ] s1)
          | s1 = {inv'1 _19.current}
            Borrow.borrow_final <i> {_19.current} {Borrow.get_id _19}
              (fun (_ret':borrowed i) ->
                 [ &_18 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &_19 <- { _19 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'0 {_18} (fun (_ret':Option'0.t_Option t_Item'0) ->  [ &_17 <- _ret' ] s3)
          | s3 = bb12 ]
          
        | bb12 = s0
          [ s0 = {[@expl:type invariant] inv'3 _19} s1
          | s1 = -{resolve'0 _19}- s2
          | s2 = any
            [ br0 -> {_17 = Option'0.C_None } (! bb15) | br1 (a:t_Item'0)-> {_17 = Option'0.C_Some a} (! bb14) ]
             ]
          
        | bb14 = bb16
        | bb16 = s0
          [ s0 = Option'0.v_Some <t_Item'0> {_17} (fun (r0'0:t_Item'0) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_22 <- [%#s08_collect_extend5] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb17 ]
          
        | bb17 = s0
          [ s0 =  [ &produced <- _22 ] s1
          | s1 =  [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = {inv'2 res}
            Borrow.borrow_mut <Vec'0.t_Vec t_Item'0 (Global'0.t_Global)> {res}
              (fun (_ret':borrowed (Vec'0.t_Vec t_Item'0 (Global'0.t_Global))) ->
                 [ &_26 <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &res <- _ret'.final ] 
                s3)
          | s3 = push'0 {_26} {x} (fun (_ret':()) ->  [ &_25 <- _ret' ] s4)
          | s4 = bb18 ]
          
        | bb18 = bb19
        | bb19 = bb20
        | bb20 = bb21
        | bb21 = bb10 ]
         ]
      
    | bb15 = s0 [ s0 = {[@expl:type invariant] inv'1 iter1} s1 | s1 = -{resolve'1 iter1}- s2 | s2 = bb22 ] 
    | bb22 = bb23
    | bb23 = s0 [ s0 =  [ &_0 <- res ] s1 | s1 = bb24 ] 
    | bb24 = bb25
    | bb25 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_Vec t_Item'0 (Global'0.t_Global) = any_l ()
    | & iter : i = iter
    | & res : Vec'0.t_Vec t_Item'0 (Global'0.t_Global) = any_l ()
    | & iter1 : i = any_l ()
    | & iter_old : Snapshot.snap_ty i = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & _17 : Option'0.t_Option t_Item'0 = any_l ()
    | & _18 : borrowed i = any_l ()
    | & _19 : borrowed i = any_l ()
    | & __creusot_proc_iter_elem : t_Item'0 = any_l ()
    | & _22 : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & x : t_Item'0 = any_l ()
    | & _25 : () = any_l ()
    | & _26 : borrowed (Vec'0.t_Vec t_Item'0 (Global'0.t_Global)) = any_l () ]
    
    [ return' (result:Vec'0.t_Vec t_Item'0 (Global'0.t_Global))-> {[@expl:postcondition] [%#s08_collect_extend8] inv'2 result}
      {[@expl:postcondition] [%#s08_collect_extend7] exists done' : borrowed i, prod : Seq.seq t_Item'0 . inv'3 done'
      /\ inv'0 prod /\ completed'0 done' /\ produces'0 iter prod done'.current /\ view'0 result = prod}
      (! return' {result}) ]
    
end
module T_core__mem__manually_drop__ManuallyDrop
  type t_ManuallyDrop 't =
    | C_ManuallyDrop 't
  
  let rec t_ManuallyDrop < 't > (input:t_ManuallyDrop 't) (ret  (value:'t))= any
    [ good (value:'t)-> {C_ManuallyDrop value = input} (! ret {value}) ]
    
end
module T_alloc__vec__into_iter__IntoIter
  use prelude.prelude.Opaque
  
  use T_core__mem__manually_drop__ManuallyDrop as ManuallyDrop'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_IntoIter 't 'a =
    | C_IntoIter (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't) usize (ManuallyDrop'0.t_ManuallyDrop 'a) (NonNull'0.t_NonNull 't) opaque_ptr
  
  let rec t_IntoIter < 't > < 'a > (input:t_IntoIter 't 'a) (ret  (buf:NonNull'0.t_NonNull 't) (phantom:PhantomData'0.t_PhantomData 't) (cap:usize) (alloc:ManuallyDrop'0.t_ManuallyDrop 'a) (ptr:NonNull'0.t_NonNull 't) (end':opaque_ptr))= any
    [ good (buf:NonNull'0.t_NonNull 't) (phantom:PhantomData'0.t_PhantomData 't) (cap:usize) (alloc:ManuallyDrop'0.t_ManuallyDrop 'a) (ptr:NonNull'0.t_NonNull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      = input}
      (! ret {buf} {phantom} {cap} {alloc} {ptr} {end'}) ]
    
end
module M_08_collect_extend__extend_index [#"08_collect_extend.rs" 57 0 57 51]
  let%span s08_collect_extend0 = "08_collect_extend.rs" 58 16 58 32
  let%span s08_collect_extend1 = "08_collect_extend.rs" 59 16 59 32
  let%span s08_collect_extend2 = "08_collect_extend.rs" 62 4 62 55
  let%span siter3 = "../../../../creusot-contracts/src/std/iter.rs" 101 0 214 1
  let%span s08_collect_extend4 = "08_collect_extend.rs" 27 40 27 43
  let%span s08_collect_extend5 = "08_collect_extend.rs" 27 58 27 62
  let%span s08_collect_extend6 = "08_collect_extend.rs" 22 0 26 2
  let%span svec7 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span ssnapshot8 = "../../../../creusot-contracts/src/snapshot.rs" 27 20 27 39
  let%span svec9 = "../../../../creusot-contracts/src/std/vec.rs" 194 20 194 24
  let%span svec10 = "../../../../creusot-contracts/src/std/vec.rs" 200 20 200 33
  let%span svec11 = "../../../../creusot-contracts/src/std/vec.rs" 262 20 262 57
  let%span svec12 = "../../../../creusot-contracts/src/std/vec.rs" 269 12 269 41
  let%span smodel13 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve14 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span smodel15 = "../../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span svec16 = "../../../../creusot-contracts/src/std/vec.rs" 275 14 275 45
  let%span svec17 = "../../../../creusot-contracts/src/std/vec.rs" 273 4 273 10
  let%span svec18 = "../../../../creusot-contracts/src/std/vec.rs" 282 15 282 32
  let%span svec19 = "../../../../creusot-contracts/src/std/vec.rs" 283 15 283 32
  let%span svec20 = "../../../../creusot-contracts/src/std/vec.rs" 284 14 284 42
  let%span svec21 = "../../../../creusot-contracts/src/std/vec.rs" 280 4 280 10
  
  use seq.Seq
  
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_alloc__vec__into_iter__IntoIter as IntoIter'0
  
  use seq.Seq
  
  function view'4 (self : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) : Seq.seq uint32
  
  predicate produces'0 (self : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) (visited : Seq.seq uint32) (rhs : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))
    
   =
    [%#svec12] view'4 self = Seq.(++) visited (view'4 rhs)
  
  function produces_trans'0 (a : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) (ab : Seq.seq uint32) (b : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) (bc : Seq.seq uint32) (c : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) : ()
    
   =
    [%#svec21] ()
  
  axiom produces_trans'0_spec : forall a : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global), ab : Seq.seq uint32, b : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global), bc : Seq.seq uint32, c : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global) . ([%#svec18] produces'0 a ab b)
   -> ([%#svec19] produces'0 b bc c)  -> ([%#svec20] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) : () =
    [%#svec17] ()
  
  axiom produces_refl'0_spec : forall self : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global) . [%#svec16] produces'0 self (Seq.empty  : Seq.seq uint32) self
  
  predicate inv'4 (_1 : Seq.seq uint32)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Seq.seq uint32 [inv'4 x] . inv'4 x = true
  
  use prelude.prelude.Borrow
  
  predicate inv'3 (_1 : borrowed (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) [inv'3 x] . inv'3 x
  = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'2 (_1 : borrowed (Vec'0.t_Vec uint32 (Global'0.t_Global)))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (Vec'0.t_Vec uint32 (Global'0.t_Global)) [inv'2 x] . inv'2 x = true
  
  predicate inv'1 (_1 : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))
  
  axiom inv_axiom'1 [@rewrite] : forall x : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : Vec'0.t_Vec uint32 (Global'0.t_Global))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec uint32 (Global'0.t_Global) [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'0 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) : Seq.seq uint32
  
  axiom view'0_spec : forall self : Vec'0.t_Vec uint32 (Global'0.t_Global) . [%#svec7] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function view'3 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) : Seq.seq uint32 =
    [%#smodel15] view'0 self
  
  use prelude.prelude.Snapshot
  
  function view'1 (self : Snapshot.snap_ty (Vec'0.t_Vec uint32 (Global'0.t_Global))) : Seq.seq uint32 =
    [%#ssnapshot8] view'3 (Snapshot.inner self)
  
  predicate resolve'1 (self : borrowed (Vec'0.t_Vec uint32 (Global'0.t_Global))) =
    [%#sresolve14] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Vec'0.t_Vec uint32 (Global'0.t_Global))) =
    resolve'1 _1
  
  function view'2 (self : borrowed (Vec'0.t_Vec uint32 (Global'0.t_Global))) : Seq.seq uint32 =
    [%#smodel13] view'0 self.current
  
  function view'5 (self : borrowed (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))) : Seq.seq uint32 =
    [%#smodel13] view'4 self.current
  
  predicate resolve'2 (self : borrowed (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))) =
    [%#sresolve14] self.final = self.current
  
  predicate completed'0 (self : borrowed (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))) =
    [%#svec11] resolve'2 self /\ view'5 self = (Seq.empty  : Seq.seq uint32)
  
  let rec extend'0 (vec:borrowed (Vec'0.t_Vec uint32 (Global'0.t_Global))) (iter:IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) (return'  (ret:()))= {[@expl:precondition] [%#s08_collect_extend5] inv'1 iter}
    {[@expl:precondition] [%#s08_collect_extend4] inv'2 vec}
    any
    [ return' (result:())-> {[%#s08_collect_extend6] exists done' : borrowed (IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)), prod : Seq.seq uint32 . inv'3 done'
      /\ inv'4 prod
      /\ completed'0 done' /\ produces'0 iter prod done'.current /\ view'0 vec.final = Seq.(++) (view'2 vec) prod}
      (! return' {result}) ]
    
  
  predicate into_iter_post'0 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) (res : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))
    
   =
    [%#svec10] view'0 self = view'4 res
  
  predicate into_iter_pre'0 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) =
    [%#svec9] true
  
  let rec into_iter'0 (self:Vec'0.t_Vec uint32 (Global'0.t_Global)) (return'  (ret:IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)))= {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [%#siter3] into_iter_pre'0 self}
    any
    [ return' (result:IntoIter'0.t_IntoIter uint32 (Global'0.t_Global))-> {inv'1 result}
      {[%#siter3] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec extend_index (v1:Vec'0.t_Vec uint32 (Global'0.t_Global)) (v2:Vec'0.t_Vec uint32 (Global'0.t_Global)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &oldv1 <- [%#s08_collect_extend0] Snapshot.new v1 ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &oldv2 <- [%#s08_collect_extend1] Snapshot.new v2 ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <Vec'0.t_Vec uint32 (Global'0.t_Global)> {v1}
          (fun (_ret':borrowed (Vec'0.t_Vec uint32 (Global'0.t_Global))) ->
             [ &_9 <- _ret' ] 
             [ &v1 <- _ret'.final ] 
            s1)
      | s1 = Borrow.borrow_final <Vec'0.t_Vec uint32 (Global'0.t_Global)> {_9.current} {Borrow.get_id _9}
          (fun (_ret':borrowed (Vec'0.t_Vec uint32 (Global'0.t_Global))) ->
             [ &_8 <- _ret' ] 
             [ &_9 <- { _9 with current = _ret'.final ; } ] 
            s2)
      | s2 = into_iter'0 {v2} (fun (_ret':IntoIter'0.t_IntoIter uint32 (Global'0.t_Global)) ->  [ &_10 <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0 [ s0 = extend'0 {_8} {_10} (fun (_ret':()) ->  [ &_7 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = -{resolve'0 _9}- s1
      | s1 = {[@expl:assertion] [%#s08_collect_extend2] Seq.(==) (view'0 v1) (Seq.(++) (view'1 oldv1) (view'1 oldv2))}
        s2
      | s2 = bb5 ]
      
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v1 : Vec'0.t_Vec uint32 (Global'0.t_Global) = v1
    | & v2 : Vec'0.t_Vec uint32 (Global'0.t_Global) = v2
    | & oldv1 : Snapshot.snap_ty (Vec'0.t_Vec uint32 (Global'0.t_Global)) = any_l ()
    | & oldv2 : Snapshot.snap_ty (Vec'0.t_Vec uint32 (Global'0.t_Global)) = any_l ()
    | & _7 : () = any_l ()
    | & _8 : borrowed (Vec'0.t_Vec uint32 (Global'0.t_Global)) = any_l ()
    | & _9 : borrowed (Vec'0.t_Vec uint32 (Global'0.t_Global)) = any_l ()
    | & _10 : IntoIter'0.t_IntoIter uint32 (Global'0.t_Global) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_08_collect_extend__collect_example [#"08_collect_extend.rs" 67 0 67 56]
  type i
  
  let%span s08_collect_extend0 = "08_collect_extend.rs" 70 4 70 75
  let%span s08_collect_extend1 = "08_collect_extend.rs" 65 0 66 70
  let%span s08_collect_extend2 = "08_collect_extend.rs" 67 48 67 52
  let%span s08_collect_extend3 = "08_collect_extend.rs" 46 28 46 32
  let%span s08_collect_extend4 = "08_collect_extend.rs" 41 0 45 2
  let%span s08_collect_extend5 = "08_collect_extend.rs" 46 40 46 52
  let%span svec6 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sops7 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span siter8 = "../../../../creusot-contracts/src/std/iter.rs" 38 15 38 24
  let%span siter9 = "../../../../creusot-contracts/src/std/iter.rs" 39 14 39 45
  let%span siter10 = "../../../../creusot-contracts/src/std/iter.rs" 43 15 43 21
  let%span siter11 = "../../../../creusot-contracts/src/std/iter.rs" 44 15 44 21
  let%span siter12 = "../../../../creusot-contracts/src/std/iter.rs" 45 15 45 21
  let%span siter13 = "../../../../creusot-contracts/src/std/iter.rs" 46 15 46 32
  let%span siter14 = "../../../../creusot-contracts/src/std/iter.rs" 47 15 47 32
  let%span siter15 = "../../../../creusot-contracts/src/std/iter.rs" 48 14 48 42
  let%span sinvariant16 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'3 (_1 : Vec'0.t_Vec uint32 (Global'0.t_Global))
  
  axiom inv_axiom'2 [@rewrite] : forall x : Vec'0.t_Vec uint32 (Global'0.t_Global) [inv'3 x] . inv'3 x = true
  
  use seq.Seq
  
  predicate inv'2 (_1 : Seq.seq uint32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq uint32 [inv'2 x] . inv'2 x = true
  
  predicate inv'0 (_1 : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed i) =
    [%#sinvariant16] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed i)
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed i [inv'1 x] . inv'1 x = invariant'0 x
  
  use seq.Seq
  
  predicate produces'0 (self : i) (visited : Seq.seq uint32) (o : i)
  
  function produces_trans'0 (a : i) (ab : Seq.seq uint32) (b : i) (bc : Seq.seq uint32) (c : i) : ()
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq uint32, b : i, bc : Seq.seq uint32, c : i . ([%#siter10] inv'0 a)
   -> ([%#siter11] inv'0 b)
   -> ([%#siter12] inv'0 c)
   -> ([%#siter13] produces'0 a ab b)
   -> ([%#siter14] produces'0 b bc c)  -> ([%#siter15] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#siter8] inv'0 self)
   -> ([%#siter9] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  
  use seq.Seq
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'0 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) : Seq.seq uint32
  
  axiom view'0_spec : forall self : Vec'0.t_Vec uint32 (Global'0.t_Global) . [%#svec6] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) (ix : int) : uint32 =
    [%#sops7] Seq.get (view'0 self) ix
  
  predicate completed'0 (self : borrowed i)
  
  let rec collect'0 (iter:i) (return'  (ret:Vec'0.t_Vec uint32 (Global'0.t_Global)))= {[@expl:precondition] [%#s08_collect_extend3] inv'0 iter}
    any
    [ return' (result:Vec'0.t_Vec uint32 (Global'0.t_Global))-> {[%#s08_collect_extend5] inv'3 result}
      {[%#s08_collect_extend4] exists done' : borrowed i, prod : Seq.seq uint32 . inv'1 done'
      /\ inv'2 prod /\ completed'0 done' /\ produces'0 iter prod done'.current /\ view'0 result = prod}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec collect_example (iter:i) (return'  (ret:()))= {[%#s08_collect_extend2] inv'0 iter}
    {[%#s08_collect_extend1] forall prod : Seq.seq uint32, fin : i . inv'0 fin /\ produces'0 iter prod fin
     -> (forall i : int . 0 <= i /\ i < Seq.length prod  -> UInt32.to_int (Seq.get prod i) = i)}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 = collect'0 {iter} (fun (_ret':Vec'0.t_Vec uint32 (Global'0.t_Global)) ->  [ &v <- _ret' ] s1) | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#s08_collect_extend0] forall i : int . 0 <= i /\ i < Seq.length (view'0 v)
         -> UInt32.to_int (index_logic'0 v i) = i}
        s1
      | s1 = bb3 ]
      
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : () = any_l () | & iter : i = iter | & v : Vec'0.t_Vec uint32 (Global'0.t_Global) = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
