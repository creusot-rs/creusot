
module C05Map_Map_Type
  type t_map 'i 'f =
    | C_Map 'i 'f
    
  let function map_iter (self : t_map 'i 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map a _ -> a
      end
  let function map_func (self : t_map 'i 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ a -> a
      end
end
module C05Map_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C05Map_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C05Map_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C05Map_Impl0_Completed_Stub
  type i
  type b
  type f
  use prelude.Borrow
  use C05Map_Map_Type as C05Map_Map_Type
  predicate completed [#"../05_map.rs" 21 4 21 35] (self : borrowed (C05Map_Map_Type.t_map i f))
end
module C05Map_Impl0_Completed_Interface
  type i
  type b
  type f
  use prelude.Borrow
  use C05Map_Map_Type as C05Map_Map_Type
  predicate completed [#"../05_map.rs" 21 4 21 35] (self : borrowed (C05Map_Map_Type.t_map i f))
  val completed [#"../05_map.rs" 21 4 21 35] (self : borrowed (C05Map_Map_Type.t_map i f)) : bool
    ensures { result = completed self }
    
end
module C05Map_Impl0_Completed
  type i
  type b
  type f
  use prelude.Borrow
  clone C05Map_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  use C05Map_Map_Type as C05Map_Map_Type
  predicate completed [#"../05_map.rs" 21 4 21 35] (self : borrowed (C05Map_Map_Type.t_map i f)) =
    [#"../05_map.rs" 22 8 22 72] Completed0.completed {current = C05Map_Map_Type.map_iter ( * self); final = C05Map_Map_Type.map_iter ( ^ self)} /\ C05Map_Map_Type.map_func ( * self) = C05Map_Map_Type.map_func ( ^ self)
  val completed [#"../05_map.rs" 21 4 21 35] (self : borrowed (C05Map_Map_Type.t_map i f)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 9 8 9 12] true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module C05Map_Common_Iterator_Item_Type
  type self
  type item
end
module C05Map_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module C05Map_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module C05Map_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2' : args)
  val precondition (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2' : args)
  val precondition (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module C05Map_Impl1_NextPrecondition_Stub
  type i
  type b
  type f
  use C05Map_Map_Type as C05Map_Map_Type
  predicate next_precondition [#"../05_map.rs" 79 4 79 38] (self : C05Map_Map_Type.t_map i f)
end
module C05Map_Impl1_NextPrecondition_Interface
  type i
  type b
  type f
  use C05Map_Map_Type as C05Map_Map_Type
  predicate next_precondition [#"../05_map.rs" 79 4 79 38] (self : C05Map_Map_Type.t_map i f)
  val next_precondition [#"../05_map.rs" 79 4 79 38] (self : C05Map_Map_Type.t_map i f) : bool
    ensures { result = next_precondition self }
    
end
module C05Map_Impl1_NextPrecondition
  type i
  type b
  type f
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  use C05Map_Map_Type as C05Map_Map_Type
  predicate next_precondition [#"../05_map.rs" 79 4 79 38] (self : C05Map_Map_Type.t_map i f) =
    [#"../05_map.rs" 80 8 83 9] forall i : i . Invariant0.invariant' i -> (forall e : Item0.item . Invariant0.invariant' i -> Produces0.produces (C05Map_Map_Type.map_iter self) (Seq.singleton e) i -> Precondition0.precondition (C05Map_Map_Type.map_func self) (e))
  val next_precondition [#"../05_map.rs" 79 4 79 38] (self : C05Map_Map_Type.t_map i f) : bool
    ensures { result = next_precondition self }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module C05Map_Impl1_Preservation_Stub
  type i
  type b
  type f
  predicate preservation [#"../05_map.rs" 109 4 109 45] (iter : i) (func : f)
end
module C05Map_Impl1_Preservation_Interface
  type i
  type b
  type f
  predicate preservation [#"../05_map.rs" 109 4 109 45] (iter : i) (func : f)
  val preservation [#"../05_map.rs" 109 4 109 45] (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module C05Map_Impl1_Preservation
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate preservation [#"../05_map.rs" 109 4 109 45] (iter : i) (func : f) =
    [#"../05_map.rs" 110 8 118 9] forall i : i . Invariant0.invariant' i -> (forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Invariant0.invariant' i -> Unnest0.unnest func ( * f) -> Produces0.produces iter (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1) -> PostconditionMut0.postcondition_mut f (e1) b -> Precondition0.precondition ( ^ f) (e2))
  val preservation [#"../05_map.rs" 109 4 109 45] (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module C05Map_Impl1_Reinitialize_Stub
  type i
  type b
  type f
  predicate reinitialize [#"../05_map.rs" 87 4 87 29] (_1' : ())
end
module C05Map_Impl1_Reinitialize_Interface
  type i
  type b
  type f
  predicate reinitialize [#"../05_map.rs" 87 4 87 29] (_1' : ())
  val reinitialize [#"../05_map.rs" 87 4 87 29] (_1' : ()) : bool
    ensures { result = reinitialize _1' }
    
end
module C05Map_Impl1_Reinitialize
  type i
  type b
  type f
  use prelude.Borrow
  clone C05Map_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl0_Completed_Stub as Completed0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate reinitialize [#"../05_map.rs" 87 4 87 29] (_1' : ()) =
    [#"../05_map.rs" 88 8 91 9] forall reset : borrowed (C05Map_Map_Type.t_map i f) . Invariant0.invariant' (C05Map_Map_Type.map_iter ( ^ reset)) -> Completed0.completed reset -> NextPrecondition0.next_precondition ( ^ reset) /\ Preservation0.preservation (C05Map_Map_Type.map_iter ( ^ reset)) (C05Map_Map_Type.map_func ( ^ reset))
  val reinitialize [#"../05_map.rs" 87 4 87 29] (_1' : ()) : bool
    ensures { result = reinitialize _1' }
    
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
  val is_inhabited (_1' : ()) : bool
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x }
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] result }
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] is_inhabited _1') && ([#"../../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool =
    [#"../../../../../creusot-contracts/src/invariant.rs" 20 8 20 12] true
  val is_inhabited (_1' : ()) : bool
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x }
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] result }
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] is_inhabited _1') && ([#"../../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module C05Map_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
end
module C05Map_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Invariant0.invariant' a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Invariant0.invariant' a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C05Map_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Invariant0.invariant' a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Invariant0.invariant' a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C05Map_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C05Map_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Invariant0.invariant' a}
    requires {[#"../common.rs" 21 52 21 53] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 82 21 83] Invariant0.invariant' c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Invariant0.invariant' a) -> ([#"../common.rs" 21 52 21 53] Invariant0.invariant' b) -> ([#"../common.rs" 21 82 21 83] Invariant0.invariant' c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C05Map_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Invariant0.invariant' a}
    requires {[#"../common.rs" 21 52 21 53] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 82 21 83] Invariant0.invariant' c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Invariant0.invariant' a) -> ([#"../common.rs" 21 52 21 53] Invariant0.invariant' b) -> ([#"../common.rs" 21 82 21 83] Invariant0.invariant' c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 101 4 101 10] ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : ()
  val unnest_refl (self : f) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 107 4 107 10] ()
  val unnest_refl (self : f) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 112 4 112 10] ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
  val postcondition_once (self : f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_once self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
  val postcondition_once (self : f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_once self _2' _3' }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module C05Map_Impl1_PreservationInv_Stub
  type i
  type b
  type f
  clone C05Map_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use C05Map_Map_Type as C05Map_Map_Type
  predicate preservation_inv [#"../05_map.rs" 96 4 96 37] (self : C05Map_Map_Type.t_map i f)
end
module C05Map_Impl1_PreservationInv_Interface
  type i
  type b
  type f
  clone C05Map_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use C05Map_Map_Type as C05Map_Map_Type
  predicate preservation_inv [#"../05_map.rs" 96 4 96 37] (self : C05Map_Map_Type.t_map i f)
  val preservation_inv [#"../05_map.rs" 96 4 96 37] (self : C05Map_Map_Type.t_map i f) : bool
    ensures { [#"../05_map.rs" 95 14 95 64] result = Preservation0.preservation (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self) }
    ensures { result = preservation_inv self }
    
  axiom preservation_inv_spec : forall self : C05Map_Map_Type.t_map i f . [#"../05_map.rs" 95 14 95 64] preservation_inv self = Preservation0.preservation (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
end
module C05Map_Impl1_PreservationInv
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone C05Map_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use C05Map_Map_Type as C05Map_Map_Type
  predicate preservation_inv [#"../05_map.rs" 96 4 96 37] (self : C05Map_Map_Type.t_map i f) =
    [#"../05_map.rs" 97 8 105 9] forall i : i . Invariant0.invariant' i -> (forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Invariant0.invariant' i -> Unnest0.unnest (C05Map_Map_Type.map_func self) ( * f) -> Produces0.produces (C05Map_Map_Type.map_iter self) (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1) -> PostconditionMut0.postcondition_mut f (e1) b -> Precondition0.precondition ( ^ f) (e2))
  val preservation_inv [#"../05_map.rs" 96 4 96 37] (self : C05Map_Map_Type.t_map i f) : bool
    ensures { [#"../05_map.rs" 95 14 95 64] result = Preservation0.preservation (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self) }
    ensures { result = preservation_inv self }
    
  axiom preservation_inv_spec : forall self : C05Map_Map_Type.t_map i f . [#"../05_map.rs" 95 14 95 64] preservation_inv self = Preservation0.preservation (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
end
module C05Map_Impl1_PreservationInv_Impl
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = i
  clone C05Map_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  use C05Map_Map_Type as C05Map_Map_Type
  let rec ghost predicate preservation_inv [#"../05_map.rs" 96 4 96 37] (self : C05Map_Map_Type.t_map i f)
    ensures { [#"../05_map.rs" 95 14 95 64] result = Preservation0.preservation (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 97 8 105 9] pure {forall i : i . Invariant0.invariant' i -> (forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Invariant0.invariant' i -> Unnest0.unnest (C05Map_Map_Type.map_func self) ( * f) -> Produces0.produces (C05Map_Map_Type.map_iter self) (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1) -> PostconditionMut0.postcondition_mut f (e1) b -> Precondition0.precondition ( ^ f) (e2))}
end
module C05Map_Impl2_Invariant_Stub
  type i
  type b
  type f
  use C05Map_Map_Type as C05Map_Map_Type
  predicate invariant' [#"../05_map.rs" 145 4 145 30] (self : C05Map_Map_Type.t_map i f)
end
module C05Map_Impl2_Invariant_Interface
  type i
  type b
  type f
  use C05Map_Map_Type as C05Map_Map_Type
  predicate invariant' [#"../05_map.rs" 145 4 145 30] (self : C05Map_Map_Type.t_map i f)
  val invariant' [#"../05_map.rs" 145 4 145 30] (self : C05Map_Map_Type.t_map i f) : bool
    ensures { result = invariant' self }
    
end
module C05Map_Impl2_Invariant
  type i
  type b
  type f
  clone C05Map_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone C05Map_Impl1_PreservationInv_Stub as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    axiom .
  clone C05Map_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  predicate invariant' [#"../05_map.rs" 145 4 145 30] (self : C05Map_Map_Type.t_map i f) =
    [#"../05_map.rs" 146 8 151 9] Reinitialize0.reinitialize () /\ PreservationInv0.preservation_inv self /\ Invariant0.invariant' (C05Map_Map_Type.map_iter self) /\ NextPrecondition0.next_precondition self
  val invariant' [#"../05_map.rs" 145 4 145 30] (self : C05Map_Map_Type.t_map i f) : bool
    ensures { result = invariant' self }
    
end
module C05Map_Impl0_Produces_Stub
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  predicate produces [@inline:trivial] [#"../05_map.rs" 44 4 44 67] (self : C05Map_Map_Type.t_map i f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i f)
    
end
module C05Map_Impl0_Produces_Interface
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  predicate produces [@inline:trivial] [#"../05_map.rs" 44 4 44 67] (self : C05Map_Map_Type.t_map i f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i f)
    
  val produces [@inline:trivial] [#"../05_map.rs" 44 4 44 67] (self : C05Map_Map_Type.t_map i f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i f) : bool
    ensures { result = produces self visited succ }
    
end
module C05Map_Impl0_Produces
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = Item0.item,
    type f = f
  use C05Map_Map_Type as C05Map_Map_Type
  predicate produces [@inline:trivial] [#"../05_map.rs" 44 4 44 67] (self : C05Map_Map_Type.t_map i f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i f)
    
   =
    [#"../05_map.rs" 45 8 56 9] Unnest0.unnest (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ) /\ (exists s : Seq.seq Item0.item . Seq.length s = Seq.length visited /\ Produces0.produces (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ) /\ (exists fs : Seq.seq (borrowed f) . Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C05Map_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C05Map_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Unnest0.unnest (C05Map_Map_Type.map_func self) ( * Seq.get fs i) /\ Precondition0.precondition ( * Seq.get fs i) (Seq.get s i) /\ PostconditionMut0.postcondition_mut (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  val produces [@inline:trivial] [#"../05_map.rs" 44 4 44 67] (self : C05Map_Map_Type.t_map i f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i f) : bool
    ensures { result = produces self visited succ }
    
end
module C05Map_Impl0_ProducesRefl_Stub
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl2_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f
  function produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i f) : ()
end
module C05Map_Impl0_ProducesRefl_Interface
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl2_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f
  function produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i f) : ()
  val produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i f) : ()
    requires {[#"../05_map.rs" 27 15 27 28] Invariant0.invariant' a}
    ensures { [#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C05Map_Map_Type.t_map i f . ([#"../05_map.rs" 27 15 27 28] Invariant0.invariant' a) -> ([#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a)
end
module C05Map_Impl0_ProducesRefl
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl2_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f
  function produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i f) : () =
    [#"../05_map.rs" 25 4 25 10] ()
  val produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i f) : ()
    requires {[#"../05_map.rs" 27 15 27 28] Invariant0.invariant' a}
    ensures { [#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C05Map_Map_Type.t_map i f . ([#"../05_map.rs" 27 15 27 28] Invariant0.invariant' a) -> ([#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a)
end
module C05Map_Impl0_ProducesRefl_Impl
  type i
  type b
  type f
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone C05Map_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = i
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C05Map_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C05Map_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  let rec ghost function produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i f) : ()
    requires {[#"../05_map.rs" 27 15 27 28] Invariant0.invariant' a}
    ensures { [#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 25 4 25 10] ()
end
module C05Map_Impl0_ProducesTrans_Stub
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl2_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f
  function produces_trans [#"../05_map.rs" 39 4 39 90] (a : C05Map_Map_Type.t_map i f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i f) : ()
    
end
module C05Map_Impl0_ProducesTrans_Interface
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl2_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f
  function produces_trans [#"../05_map.rs" 39 4 39 90] (a : C05Map_Map_Type.t_map i f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i f) : ()
    
  val produces_trans [#"../05_map.rs" 39 4 39 90] (a : C05Map_Map_Type.t_map i f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i f) : ()
    requires {[#"../05_map.rs" 33 15 33 28] Invariant0.invariant' a}
    requires {[#"../05_map.rs" 34 15 34 28] Invariant0.invariant' b}
    requires {[#"../05_map.rs" 35 15 35 28] Invariant0.invariant' c}
    requires {[#"../05_map.rs" 36 15 36 32] Produces0.produces a ab b}
    requires {[#"../05_map.rs" 37 15 37 32] Produces0.produces b bc c}
    ensures { [#"../05_map.rs" 38 14 38 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C05Map_Map_Type.t_map i f, ab : Seq.seq b, b : C05Map_Map_Type.t_map i f, bc : Seq.seq b, c : C05Map_Map_Type.t_map i f . ([#"../05_map.rs" 33 15 33 28] Invariant0.invariant' a) -> ([#"../05_map.rs" 34 15 34 28] Invariant0.invariant' b) -> ([#"../05_map.rs" 35 15 35 28] Invariant0.invariant' c) -> ([#"../05_map.rs" 36 15 36 32] Produces0.produces a ab b) -> ([#"../05_map.rs" 37 15 37 32] Produces0.produces b bc c) -> ([#"../05_map.rs" 38 14 38 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C05Map_Impl0_ProducesTrans
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl2_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f
  function produces_trans [#"../05_map.rs" 39 4 39 90] (a : C05Map_Map_Type.t_map i f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i f) : ()
    
   =
    [#"../05_map.rs" 31 4 31 10] ()
  val produces_trans [#"../05_map.rs" 39 4 39 90] (a : C05Map_Map_Type.t_map i f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i f) : ()
    requires {[#"../05_map.rs" 33 15 33 28] Invariant0.invariant' a}
    requires {[#"../05_map.rs" 34 15 34 28] Invariant0.invariant' b}
    requires {[#"../05_map.rs" 35 15 35 28] Invariant0.invariant' c}
    requires {[#"../05_map.rs" 36 15 36 32] Produces0.produces a ab b}
    requires {[#"../05_map.rs" 37 15 37 32] Produces0.produces b bc c}
    ensures { [#"../05_map.rs" 38 14 38 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C05Map_Map_Type.t_map i f, ab : Seq.seq b, b : C05Map_Map_Type.t_map i f, bc : Seq.seq b, c : C05Map_Map_Type.t_map i f . ([#"../05_map.rs" 33 15 33 28] Invariant0.invariant' a) -> ([#"../05_map.rs" 34 15 34 28] Invariant0.invariant' b) -> ([#"../05_map.rs" 35 15 35 28] Invariant0.invariant' c) -> ([#"../05_map.rs" 36 15 36 32] Produces0.produces a ab b) -> ([#"../05_map.rs" 37 15 37 32] Produces0.produces b bc c) -> ([#"../05_map.rs" 38 14 38 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C05Map_Impl0_ProducesTrans_Impl
  type i
  type b
  type f
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone C05Map_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = i
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C05Map_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C05Map_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  let rec ghost function produces_trans [#"../05_map.rs" 39 4 39 90] (a : C05Map_Map_Type.t_map i f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i f) : ()
    requires {[#"../05_map.rs" 33 15 33 28] Invariant0.invariant' a}
    requires {[#"../05_map.rs" 34 15 34 28] Invariant0.invariant' b}
    requires {[#"../05_map.rs" 35 15 35 28] Invariant0.invariant' c}
    requires {[#"../05_map.rs" 36 15 36 32] Produces0.produces a ab b}
    requires {[#"../05_map.rs" 37 15 37 32] Produces0.produces b bc c}
    ensures { [#"../05_map.rs" 38 14 38 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 31 4 31 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C05Map_Impl1_ProducesOne_Stub
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  predicate produces_one [#"../05_map.rs" 130 4 130 57] (self : C05Map_Map_Type.t_map i f) (visited : b) (succ : C05Map_Map_Type.t_map i f)
    
end
module C05Map_Impl1_ProducesOne_Interface
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  predicate produces_one [#"../05_map.rs" 130 4 130 57] (self : C05Map_Map_Type.t_map i f) (visited : b) (succ : C05Map_Map_Type.t_map i f)
    
  val produces_one [#"../05_map.rs" 130 4 130 57] (self : C05Map_Map_Type.t_map i f) (visited : b) (succ : C05Map_Map_Type.t_map i f) : bool
    ensures { [#"../05_map.rs" 129 14 129 68] result = Produces0.produces self (Seq.singleton visited) succ }
    ensures { result = produces_one self visited succ }
    
  axiom produces_one_spec : forall self : C05Map_Map_Type.t_map i f, visited : b, succ : C05Map_Map_Type.t_map i f . [#"../05_map.rs" 129 14 129 68] produces_one self visited succ = Produces0.produces self (Seq.singleton visited) succ
end
module C05Map_Impl1_ProducesOne
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  predicate produces_one [#"../05_map.rs" 130 4 130 57] (self : C05Map_Map_Type.t_map i f) (visited : b) (succ : C05Map_Map_Type.t_map i f)
    
   =
    [#"../05_map.rs" 131 8 136 9] exists f : borrowed f .  * f = C05Map_Map_Type.map_func self /\  ^ f = C05Map_Map_Type.map_func succ /\ (exists e : Item0.item . Produces1.produces (C05Map_Map_Type.map_iter self) (Seq.singleton e) (C05Map_Map_Type.map_iter succ) /\ Precondition0.precondition ( * f) (e) /\ PostconditionMut0.postcondition_mut f (e) visited)
  val produces_one [#"../05_map.rs" 130 4 130 57] (self : C05Map_Map_Type.t_map i f) (visited : b) (succ : C05Map_Map_Type.t_map i f) : bool
    ensures { [#"../05_map.rs" 129 14 129 68] result = Produces0.produces self (Seq.singleton visited) succ }
    ensures { result = produces_one self visited succ }
    
  axiom produces_one_spec : forall self : C05Map_Map_Type.t_map i f, visited : b, succ : C05Map_Map_Type.t_map i f . [#"../05_map.rs" 129 14 129 68] produces_one self visited succ = Produces0.produces self (Seq.singleton visited) succ
end
module C05Map_Impl1_ProducesOne_Impl
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone C05Map_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = i
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C05Map_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone C05Map_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl0_ProducesTrans as ProducesTrans0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C05Map_Impl0_ProducesRefl as ProducesRefl0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  let rec ghost predicate produces_one [#"../05_map.rs" 130 4 130 57] (self : C05Map_Map_Type.t_map i f) (visited : b) (succ : C05Map_Map_Type.t_map i f)
    ensures { [#"../05_map.rs" 129 14 129 68] result = Produces0.produces self (Seq.singleton visited) succ }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 131 8 136 9] pure {exists f : borrowed f .  * f = C05Map_Map_Type.map_func self /\  ^ f = C05Map_Map_Type.map_func succ /\ (exists e : Item0.item . Produces1.produces (C05Map_Map_Type.map_iter self) (Seq.singleton e) (C05Map_Map_Type.map_iter succ) /\ Precondition0.precondition ( * f) (e) /\ PostconditionMut0.postcondition_mut f (e) visited)}
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Invariant_Impl1_Invariant_Stub
  type t
  use prelude.Borrow
  predicate invariant' (self : borrowed t)
end
module CreusotContracts_Invariant_Impl1_Invariant_Interface
  type t
  use prelude.Borrow
  predicate invariant' (self : borrowed t)
  val invariant' (self : borrowed t) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Impl1_Invariant
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  predicate invariant' (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 38 20 38 39] Invariant0.invariant' ( * self)
  val invariant' (self : borrowed t) : bool
    ensures { result = invariant' self }
    
end
module C05Map_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant1 with
    type self = self
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Impl1_Invariant_Stub as Invariant0 with
    type t = self
  val next [#"../common.rs" 27 4 27 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 27 17 27 21] Invariant0.invariant' self}
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 17 27 21] Invariant1.invariant' ( ^ self) }
    
end
module C05Map_Impl1_ProducesOneInvariant_Stub
  type i
  type b
  type f
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant1 with
    type self = i
  clone C05Map_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C05Map_Impl2_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f
  function produces_one_invariant [#"../05_map.rs" 126 4 126 54] (self : C05Map_Map_Type.t_map i f) (e : b) (other : C05Map_Map_Type.t_map i f) : ()
    
end
module C05Map_Impl1_ProducesOneInvariant_Interface
  type i
  type b
  type f
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant1 with
    type self = i
  clone C05Map_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C05Map_Impl2_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f
  function produces_one_invariant [#"../05_map.rs" 126 4 126 54] (self : C05Map_Map_Type.t_map i f) (e : b) (other : C05Map_Map_Type.t_map i f) : ()
    
  val produces_one_invariant [#"../05_map.rs" 126 4 126 54] (self : C05Map_Map_Type.t_map i f) (e : b) (other : C05Map_Map_Type.t_map i f) : ()
    requires {[#"../05_map.rs" 122 15 122 31] Invariant0.invariant' self}
    requires {[#"../05_map.rs" 123 15 123 42] ProducesOne0.produces_one self e other}
    requires {[#"../05_map.rs" 124 4 124 39] Invariant1.invariant' (C05Map_Map_Type.map_iter other)}
    ensures { [#"../05_map.rs" 125 14 125 31] Invariant0.invariant' other }
    ensures { result = produces_one_invariant self e other }
    
  axiom produces_one_invariant_spec : forall self : C05Map_Map_Type.t_map i f, e : b, other : C05Map_Map_Type.t_map i f . ([#"../05_map.rs" 122 15 122 31] Invariant0.invariant' self) -> ([#"../05_map.rs" 123 15 123 42] ProducesOne0.produces_one self e other) -> ([#"../05_map.rs" 124 4 124 39] Invariant1.invariant' (C05Map_Map_Type.map_iter other)) -> ([#"../05_map.rs" 125 14 125 31] Invariant0.invariant' other)
end
module C05Map_Impl1_ProducesOneInvariant
  type i
  type b
  type f
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant1 with
    type self = i
  clone C05Map_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C05Map_Impl2_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f
  function produces_one_invariant [#"../05_map.rs" 126 4 126 54] (self : C05Map_Map_Type.t_map i f) (e : b) (other : C05Map_Map_Type.t_map i f) : ()
    
   =
    [#"../05_map.rs" 121 4 121 12] ()
  val produces_one_invariant [#"../05_map.rs" 126 4 126 54] (self : C05Map_Map_Type.t_map i f) (e : b) (other : C05Map_Map_Type.t_map i f) : ()
    requires {[#"../05_map.rs" 122 15 122 31] Invariant0.invariant' self}
    requires {[#"../05_map.rs" 123 15 123 42] ProducesOne0.produces_one self e other}
    requires {[#"../05_map.rs" 124 4 124 39] Invariant1.invariant' (C05Map_Map_Type.map_iter other)}
    ensures { [#"../05_map.rs" 125 14 125 31] Invariant0.invariant' other }
    ensures { result = produces_one_invariant self e other }
    
  axiom produces_one_invariant_spec : forall self : C05Map_Map_Type.t_map i f, e : b, other : C05Map_Map_Type.t_map i f . ([#"../05_map.rs" 122 15 122 31] Invariant0.invariant' self) -> ([#"../05_map.rs" 123 15 123 42] ProducesOne0.produces_one self e other) -> ([#"../05_map.rs" 124 4 124 39] Invariant1.invariant' (C05Map_Map_Type.map_iter other)) -> ([#"../05_map.rs" 125 14 125 31] Invariant0.invariant' other)
end
module C05Map_Impl1_ProducesOneInvariant_Impl
  type i
  type b
  type f
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone C05Map_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = i
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  use C05Map_Map_Type as C05Map_Map_Type
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C05Map_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C05Map_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed0.completed = Completed1.completed
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C05Map_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C05Map_Impl0_ProducesTrans as ProducesTrans0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C05Map_Impl0_ProducesRefl as ProducesRefl0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone C05Map_Impl1_ProducesOne as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  let rec ghost function produces_one_invariant [#"../05_map.rs" 126 4 126 54] (self : C05Map_Map_Type.t_map i f) (e : b) (other : C05Map_Map_Type.t_map i f) : ()
    requires {[#"../05_map.rs" 122 15 122 31] Invariant0.invariant' self}
    requires {[#"../05_map.rs" 123 15 123 42] ProducesOne0.produces_one self e other}
    requires {[#"../05_map.rs" 124 4 124 39] Invariant1.invariant' (C05Map_Map_Type.map_iter other)}
    ensures { [#"../05_map.rs" 125 14 125 31] Invariant0.invariant' other }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 121 4 121 12] ()
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module Core_Ops_Function_FnMut_CallMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = args,
    type f = self
  val call_mut (self : borrowed self) (args : args) : Output0.output
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 160 27 160 52] Precondition0.precondition ( * self) args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] PostconditionMut0.postcondition_mut self args result }
    
end
module C05Map_Impl0_Next_Interface
  type i
  type b
  type f
  use prelude.Borrow
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C05Map_Impl0_Completed_Stub as Completed0 with
    type i = i,
    type b = b,
    type f = f
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C05Map_Impl2_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f
  val next [#"../05_map.rs" 64 4 64 44] (self : borrowed (C05Map_Map_Type.t_map i f)) : Core_Option_Option_Type.t_option b
    requires {[#"../05_map.rs" 63 4 63 40] Invariant0.invariant' ( * self)}
    ensures { [#"../05_map.rs" 59 14 62 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> ProducesOne0.produces_one ( * self) v ( ^ self)
      end }
    ensures { [#"../05_map.rs" 63 4 63 40] Invariant0.invariant' ( ^ self) }
    
end
module C05Map_Impl0_Next
  type i
  type b
  type f
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use prelude.Ghost
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = f
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve3.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = i
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant2 with
    type t = i,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item0.item,
    type f = f
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C05Map_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C05Map_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed0.completed = Completed1.completed
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone Core_Ops_Function_FnMut_CallMut_Interface as CallMut0 with
    type self = f,
    type args = Item0.item,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    type Output0.output = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty ()
  clone C05Map_Impl1_ProducesOne as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C05Map_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C05Map_Impl1_ProducesOneInvariant as ProducesOneInvariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate ProducesOne0.produces_one = ProducesOne0.produces_one,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C05Map_Map_Type.t_map i f
  clone C05Map_Common_Iterator_Next_Interface as Next0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant2.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces,
    predicate Invariant1.invariant' = Invariant1.invariant'
  let rec cfg next [#"../05_map.rs" 64 4 64 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C05Map_Map_Type.t_map i f)) : Core_Option_Option_Type.t_option b
    requires {[#"../05_map.rs" 63 4 63 40] Invariant0.invariant' ( * self)}
    ensures { [#"../05_map.rs" 59 14 62 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> ProducesOne0.produces_one ( * self) v ( ^ self)
      end }
    ensures { [#"../05_map.rs" 63 4 63 40] Invariant0.invariant' ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option b;
  var self_1 : borrowed (C05Map_Map_Type.t_map i f);
  var _5 : Core_Option_Option_Type.t_option Item0.item;
  var _6 : borrowed i;
  var _7 : isize;
  var v_8 : Item0.item;
  var _9 : ();
  var _11 : Ghost.ghost_ty ();
  var _13 : b;
  var _14 : borrowed f;
  var _15 : Item0.item;
  var _16 : Item0.item;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut (C05Map_Map_Type.map_iter ( * self_1));
    self_1 <- { self_1 with current = (let C05Map_Map_Type.C_Map a b =  * self_1 in C05Map_Map_Type.C_Map ( ^ _6) b) };
    _5 <- ([#"../05_map.rs" 65 14 65 30] Next0.next _6);
    goto BB1
  }
  BB1 {
    switch (_5)
      | Core_Option_Option_Type.C_None -> goto BB2
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      end
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve _5 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB12
  }
  BB3 {
    goto BB5
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve _5 };
    absurd
  }
  BB5 {
    v_8 <- Core_Option_Option_Type.some_0 _5;
    _5 <- (let Core_Option_Option_Type.C_Some a = _5 in Core_Option_Option_Type.C_Some (any Item0.item));
    assume { Resolve1.resolve _5 };
    assert { [@expl:assertion] [#"../05_map.rs" 67 16 67 62] Precondition0.precondition (C05Map_Map_Type.map_func ( * self_1)) (v_8) };
    goto BB6
  }
  BB6 {
    _9 <- ();
    _11 <- ([#"../05_map.rs" 68 16 68 55] Ghost.new ());
    goto BB7
  }
  BB7 {
    assume { Resolve2.resolve _11 };
    _14 <- borrow_mut (C05Map_Map_Type.map_func ( * self_1));
    self_1 <- { self_1 with current = (let C05Map_Map_Type.C_Map a b =  * self_1 in C05Map_Map_Type.C_Map a ( ^ _14)) };
    _16 <- v_8;
    v_8 <- any Item0.item;
    _15 <- (_16);
    _13 <- ([#"../05_map.rs" 70 21 70 35] CallMut0.call_mut _14 _15);
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_Some _13;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module C05Map_Map_Interface
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl2_Invariant_Stub as Invariant1 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  val map [#"../05_map.rs" 161 0 161 81] (iter : i) (func : f) : C05Map_Map_Type.t_map i f
    requires {[#"../05_map.rs" 155 0 155 124] forall i2 : i . Invariant0.invariant' i2 -> (forall e : Item0.item . Invariant0.invariant' i2 -> Produces0.produces iter (Seq.singleton e) i2 -> Precondition0.precondition func (e))}
    requires {[#"../05_map.rs" 156 11 156 38] Reinitialize0.reinitialize ()}
    requires {[#"../05_map.rs" 157 11 157 27] Invariant0.invariant' iter}
    requires {[#"../05_map.rs" 158 11 158 48] Preservation0.preservation iter func}
    requires {[#"../05_map.rs" 161 51 161 55] Invariant0.invariant' iter}
    ensures { [#"../05_map.rs" 159 10 159 28] Invariant1.invariant' result }
    ensures { [#"../05_map.rs" 160 10 160 38] result = C05Map_Map_Type.C_Map iter func }
    
end
module C05Map_Map
  type i
  type b
  type f
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item0.item,
    type f = f
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces as Produces1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone C05Map_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = i
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C05Map_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C05Map_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed0.completed = Completed1.completed
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C05Map_Impl2_Invariant as Invariant1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C05Map_Impl0_ProducesTrans as ProducesTrans1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone C05Map_Impl0_ProducesRefl as ProducesRefl1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  let rec cfg map [#"../05_map.rs" 161 0 161 81] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) (func : f) : C05Map_Map_Type.t_map i f
    requires {[#"../05_map.rs" 155 0 155 124] forall i2 : i . Invariant0.invariant' i2 -> (forall e : Item0.item . Invariant0.invariant' i2 -> Produces0.produces iter (Seq.singleton e) i2 -> Precondition0.precondition func (e))}
    requires {[#"../05_map.rs" 156 11 156 38] Reinitialize0.reinitialize ()}
    requires {[#"../05_map.rs" 157 11 157 27] Invariant0.invariant' iter}
    requires {[#"../05_map.rs" 158 11 158 48] Preservation0.preservation iter func}
    requires {[#"../05_map.rs" 161 51 161 55] Invariant0.invariant' iter}
    ensures { [#"../05_map.rs" 159 10 159 28] Invariant1.invariant' result }
    ensures { [#"../05_map.rs" 160 10 160 38] result = C05Map_Map_Type.C_Map iter func }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C05Map_Map_Type.t_map i f;
  var iter_1 : i;
  var func_2 : f;
  var _9 : i;
  var _10 : f;
  {
    iter_1 <- iter;
    func_2 <- func;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _9 <- iter_1;
    iter_1 <- any i;
    _10 <- func_2;
    func_2 <- any f;
    _0 <- C05Map_Map_Type.C_Map _9 _10;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module C05Map_Impl0
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item1.item,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item1.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item1.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone C05Map_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant2 with
    type self = i
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant2.invariant',
    type Item0.item = Item1.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant2.invariant',
    type Item0.item = Item1.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C05Map_Impl1_PreservationInv as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Invariant0.invariant' = Invariant2.invariant',
    type Item0.item = Item1.item,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C05Map_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed0.completed = Completed1.completed
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone C05Map_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Item0.item = Item1.item,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = C05Map_Map_Type.t_map i f
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C05Map_Impl1_ProducesOne as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item1.item,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C05Map_Impl2_Invariant as Invariant1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant0 with
    type t = C05Map_Map_Type.t_map i f,
    predicate Invariant0.invariant' = Invariant1.invariant'
  goal next_refn : [#"../05_map.rs" 64 4 64 44] forall self : borrowed (C05Map_Map_Type.t_map i f) . Invariant0.invariant' self -> Invariant1.invariant' ( * self) /\ (forall result : Core_Option_Option_Type.t_option b . Invariant1.invariant' ( ^ self) /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> ProducesOne0.produces_one ( * self) v ( ^ self)
    end -> Invariant1.invariant' ( ^ self) /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_trans_refn : [#"../05_map.rs" 39 4 39 90] forall a : C05Map_Map_Type.t_map i f . forall ab : Seq.seq b . forall b : C05Map_Map_Type.t_map i f . forall bc : Seq.seq b . forall c : C05Map_Map_Type.t_map i f . Invariant1.invariant' c /\ Invariant1.invariant' b /\ Invariant1.invariant' a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Produces0.produces b bc c /\ Produces0.produces a ab b /\ Invariant1.invariant' c /\ Invariant1.invariant' b /\ Invariant1.invariant' a /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
  goal produces_refl_refn : [#"../05_map.rs" 29 4 29 29] forall a : C05Map_Map_Type.t_map i f . Invariant1.invariant' a -> Invariant1.invariant' a /\ (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
end
module C05Map_Impl2
  type i
  type b
  type f
end
