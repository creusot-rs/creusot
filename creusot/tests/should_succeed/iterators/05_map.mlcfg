
module C05Map_Map_Type
  type t_map 'i 'b 'f =
    | C_Map 'i 'f
    
  let function map_iter (self : t_map 'i 'b 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Map a _ -> a
      end
  let function map_func (self : t_map 'i 'b 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Map _ a -> a
      end
end
module C05Map_Impl0_ProducesRefl_Impl
  type i
  type b
  type f
  type item0
  predicate invariant9 (self : item0)
  val invariant9 (self : item0) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : item0)
  val inv9 (_x : item0) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : item0 . inv9 x = true
  use prelude.Borrow
  predicate invariant8 (self : borrowed i)
  val invariant8 (self : borrowed i) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : borrowed i)
  val inv8 (_x : borrowed i) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : borrowed i . inv8 x = true
  predicate invariant7 (self : b)
  val invariant7 (self : b) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : b)
  val inv7 (_x : b) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : b . inv7 x = true
  predicate invariant6 (self : item0)
  val invariant6 (self : item0) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : item0)
  val inv6 (_x : item0) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : item0 . inv6 x = true
  predicate invariant5 (self : borrowed f)
  val invariant5 (self : borrowed f) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed f)
  val inv5 (_x : borrowed f) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed f . inv5 x = true
  predicate invariant4 (self : f)
  val invariant4 (self : f) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : f)
  val inv4 (_x : f) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : f . inv4 x = true
  predicate invariant3 (self : i)
  val invariant3 (self : i) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : i)
  val inv3 (_x : i) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : i . inv3 x = true
  use seq.Seq
  predicate invariant2 (self : Seq.seq (borrowed f))
  val invariant2 (self : Seq.seq (borrowed f)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Seq.seq (borrowed f))
  val inv2 (_x : Seq.seq (borrowed f)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Seq.seq (borrowed f) . inv2 x = true
  predicate invariant1 (self : Seq.seq item0)
  val invariant1 (self : Seq.seq item0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq item0)
  val inv1 (_x : Seq.seq item0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq item0 . inv1 x = true
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv3 a}
    requires {[#"../common.rs" 21 31 21 33] inv1 ab}
    requires {[#"../common.rs" 21 52 21 53] inv3 b}
    requires {[#"../common.rs" 21 61 21 63] inv1 bc}
    requires {[#"../common.rs" 21 82 21 83] inv3 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv3 a) -> ([#"../common.rs" 21 31 21 33] inv1 ab) -> ([#"../common.rs" 21 52 21 53] inv3 b) -> ([#"../common.rs" 21 61 21 63] inv1 bc) -> ([#"../common.rs" 21 82 21 83] inv3 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv3 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv3 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  predicate postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate postcondition_once0 (self : f) (_2 : item0) (_3 : b)
  val postcondition_once0 (self : f) (_2 : item0) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  function fn_mut_once0 (self : f) (args : item0) (res : b) : ()
  val fn_mut_once0 (self : f) (args : item0) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv4 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv6 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv7 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : item0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv4 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv6 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv7 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv5 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv4 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv4 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv4 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv4 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv4 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv4 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv4 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv4 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : item0) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : item0) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv5 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv6 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv7 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : item0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv5 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv6 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv7 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate precondition0 (self : f) (_2 : item0)
  val precondition0 (self : f) (_2 : item0) : bool
    ensures { result = precondition0 self _2 }
    
  use seq.Seq
  predicate next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item0 . inv3 i -> inv9 e -> produces1 iter (Seq.singleton e) i -> precondition0 func (e)
  val next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) : bool
    ensures { result = next_precondition0 iter func }
    
  use seq.Seq
  predicate preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv3 i -> inv7 b -> inv5 f -> inv9 e2 -> inv9 e1 -> inv1 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1) -> postcondition_mut0 f (e1) b -> precondition0 ( ^ f) (e2)
  val preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  predicate completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed0 self }
    
  predicate reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv4 func -> inv8 iter -> completed0 iter -> next_precondition0 ( ^ iter) func /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  use C05Map_Map_Type as C05Map_Map_Type
  predicate invariant0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize0 () /\ preservation0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self) /\ next_precondition0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  val invariant0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C05Map_Map_Type.t_map i b f)
  val inv0 (_x : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C05Map_Map_Type.t_map i b f . inv0 x = (invariant0 x /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 42 8 53 9] unnest0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ) /\ (exists s : Seq.seq item0 . inv1 s /\ Seq.length s = Seq.length visited /\ produces1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ) /\ (exists fs : Seq.seq (borrowed f) . inv2 fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C05Map_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C05Map_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> unnest0 (C05Map_Map_Type.map_func self) ( * Seq.get fs i) /\ precondition0 ( * Seq.get fs i) (Seq.get s i) /\ postcondition_mut0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  val produces0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = produces0 self visited succ }
    
  use seq.Seq
  let rec ghost function produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i b f) : ()
    requires {[#"../05_map.rs" 29 21 29 22] inv0 a}
    ensures { [#"../05_map.rs" 28 14 28 39] produces0 a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 26 4 26 10] ()
end
module C05Map_Impl0_ProducesTrans_Impl
  type i
  type b
  type f
  type item0
  predicate invariant10 (self : item0)
  val invariant10 (self : item0) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : item0)
  val inv10 (_x : item0) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : item0 . inv10 x = true
  use prelude.Borrow
  predicate invariant9 (self : borrowed i)
  val invariant9 (self : borrowed i) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : borrowed i)
  val inv9 (_x : borrowed i) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : borrowed i . inv9 x = true
  predicate invariant8 (self : b)
  val invariant8 (self : b) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : b)
  val inv8 (_x : b) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : b . inv8 x = true
  predicate invariant7 (self : item0)
  val invariant7 (self : item0) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : item0)
  val inv7 (_x : item0) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : item0 . inv7 x = true
  predicate invariant6 (self : borrowed f)
  val invariant6 (self : borrowed f) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed f)
  val inv6 (_x : borrowed f) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed f . inv6 x = true
  predicate invariant5 (self : f)
  val invariant5 (self : f) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : f)
  val inv5 (_x : f) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : f . inv5 x = true
  predicate invariant4 (self : i)
  val invariant4 (self : i) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : i)
  val inv4 (_x : i) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : i . inv4 x = true
  use seq.Seq
  predicate invariant3 (self : Seq.seq (borrowed f))
  val invariant3 (self : Seq.seq (borrowed f)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq (borrowed f))
  val inv3 (_x : Seq.seq (borrowed f)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq (borrowed f) . inv3 x = true
  predicate invariant2 (self : Seq.seq item0)
  val invariant2 (self : Seq.seq item0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Seq.seq item0)
  val inv2 (_x : Seq.seq item0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Seq.seq item0 . inv2 x = true
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv4 a}
    requires {[#"../common.rs" 21 31 21 33] inv2 ab}
    requires {[#"../common.rs" 21 52 21 53] inv4 b}
    requires {[#"../common.rs" 21 61 21 63] inv2 bc}
    requires {[#"../common.rs" 21 82 21 83] inv4 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv4 a) -> ([#"../common.rs" 21 31 21 33] inv2 ab) -> ([#"../common.rs" 21 52 21 53] inv4 b) -> ([#"../common.rs" 21 61 21 63] inv2 bc) -> ([#"../common.rs" 21 82 21 83] inv4 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv4 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv4 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  predicate postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate postcondition_once0 (self : f) (_2 : item0) (_3 : b)
  val postcondition_once0 (self : f) (_2 : item0) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  function fn_mut_once0 (self : f) (args : item0) (res : b) : ()
  val fn_mut_once0 (self : f) (args : item0) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv5 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv7 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv8 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : item0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv5 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv7 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv8 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv6 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv5 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv5 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv5 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv5 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv5 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv5 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv5 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv5 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : item0) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : item0) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv6 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv7 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv8 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : item0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv6 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv7 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv8 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate invariant1 (self : Seq.seq b)
  val invariant1 (self : Seq.seq b) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq b)
  val inv1 (_x : Seq.seq b) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq b . inv1 x = true
  predicate precondition0 (self : f) (_2 : item0)
  val precondition0 (self : f) (_2 : item0) : bool
    ensures { result = precondition0 self _2 }
    
  use seq.Seq
  predicate next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item0 . inv4 i -> inv10 e -> produces1 iter (Seq.singleton e) i -> precondition0 func (e)
  val next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) : bool
    ensures { result = next_precondition0 iter func }
    
  use seq.Seq
  predicate preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv4 i -> inv8 b -> inv6 f -> inv10 e2 -> inv10 e1 -> inv2 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1) -> postcondition_mut0 f (e1) b -> precondition0 ( ^ f) (e2)
  val preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  predicate completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed0 self }
    
  predicate reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv5 func -> inv9 iter -> completed0 iter -> next_precondition0 ( ^ iter) func /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  use C05Map_Map_Type as C05Map_Map_Type
  predicate invariant0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize0 () /\ preservation0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self) /\ next_precondition0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  val invariant0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C05Map_Map_Type.t_map i b f)
  val inv0 (_x : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C05Map_Map_Type.t_map i b f . inv0 x = (invariant0 x /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 42 8 53 9] unnest0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ) /\ (exists s : Seq.seq item0 . inv2 s /\ Seq.length s = Seq.length visited /\ produces1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ) /\ (exists fs : Seq.seq (borrowed f) . inv3 fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C05Map_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C05Map_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> unnest0 (C05Map_Map_Type.map_func self) ( * Seq.get fs i) /\ precondition0 ( * Seq.get fs i) (Seq.get s i) /\ postcondition_mut0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  val produces0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = produces0 self visited succ }
    
  let rec ghost function produces_trans [#"../05_map.rs" 36 4 36 90] (a : C05Map_Map_Type.t_map i b f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i b f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i b f) : ()
    requires {[#"../05_map.rs" 33 15 33 32] produces0 a ab b}
    requires {[#"../05_map.rs" 34 15 34 32] produces0 b bc c}
    requires {[#"../05_map.rs" 36 22 36 23] inv0 a}
    requires {[#"../05_map.rs" 36 31 36 33] inv1 ab}
    requires {[#"../05_map.rs" 36 52 36 53] inv0 b}
    requires {[#"../05_map.rs" 36 61 36 63] inv1 bc}
    requires {[#"../05_map.rs" 36 82 36 83] inv0 c}
    ensures { [#"../05_map.rs" 35 14 35 42] produces0 a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 31 4 31 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C05Map_Impl1_ProducesOne_Impl
  type i
  type b
  type f
  use prelude.Borrow
  predicate invariant10 (self : borrowed i)
  val invariant10 (self : borrowed i) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : borrowed i)
  val inv10 (_x : borrowed i) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : borrowed i . inv10 x = true
  type item0
  predicate invariant9 (self : item0)
  val invariant9 (self : item0) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : item0)
  val inv9 (_x : item0) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : item0 . inv9 x = true
  use seq.Seq
  predicate invariant8 (self : Seq.seq b)
  val invariant8 (self : Seq.seq b) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Seq.seq b)
  val inv8 (_x : Seq.seq b) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Seq.seq b . inv8 x = true
  predicate invariant7 (self : f)
  val invariant7 (self : f) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : f)
  val inv7 (_x : f) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : f . inv7 x = true
  predicate invariant6 (self : i)
  val invariant6 (self : i) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : i)
  val inv6 (_x : i) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : i . inv6 x = true
  predicate invariant5 (self : Seq.seq (borrowed f))
  val invariant5 (self : Seq.seq (borrowed f)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq (borrowed f))
  val inv5 (_x : Seq.seq (borrowed f)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq (borrowed f) . inv5 x = true
  predicate invariant4 (self : Seq.seq item0)
  val invariant4 (self : Seq.seq item0) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Seq.seq item0)
  val inv4 (_x : Seq.seq item0) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq item0 . inv4 x = true
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  predicate postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate inv2 (_x : borrowed f)
  val inv2 (_x : borrowed f) : bool
    ensures { result = inv2 _x }
    
  predicate postcondition_once0 (self : f) (_2 : item0) (_3 : b)
  val postcondition_once0 (self : f) (_2 : item0) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  predicate inv1 (_x : b)
  val inv1 (_x : b) : bool
    ensures { result = inv1 _x }
    
  function fn_mut_once0 (self : f) (args : item0) (res : b) : ()
  val fn_mut_once0 (self : f) (args : item0) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv7 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv9 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv1 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : item0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv7 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv9 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv1 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv2 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv7 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv7 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv7 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv7 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv7 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv7 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv7 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv7 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : item0) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : item0) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv2 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv9 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv1 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : item0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv9 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv1 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate invariant3 (self : item0)
  val invariant3 (self : item0) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : item0)
  val inv3 (_x : item0) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : item0 . inv3 x = true
  use seq.Seq
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  function produces_trans1 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans1 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces1 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces1 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv6 a}
    requires {[#"../common.rs" 21 31 21 33] inv4 ab}
    requires {[#"../common.rs" 21 52 21 53] inv6 b}
    requires {[#"../common.rs" 21 61 21 63] inv4 bc}
    requires {[#"../common.rs" 21 82 21 83] inv6 c}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces1 a ab b) -> ([#"../common.rs" 19 15 19 32] produces1 b bc c) -> ([#"../common.rs" 21 22 21 23] inv6 a) -> ([#"../common.rs" 21 31 21 33] inv4 ab) -> ([#"../common.rs" 21 52 21 53] inv6 b) -> ([#"../common.rs" 21 61 21 63] inv4 bc) -> ([#"../common.rs" 21 82 21 83] inv6 c) -> ([#"../common.rs" 20 14 20 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl1 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl1 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv6 a}
    ensures { result = produces_refl1 a }
    
  axiom produces_refl1_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv6 a) -> ([#"../common.rs" 14 14 14 39] produces1 a (Seq.empty ) a)
  predicate invariant2 (self : borrowed f)
  val invariant2 (self : borrowed f) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : borrowed f . inv2 x = true
  use C05Map_Map_Type as C05Map_Map_Type
  use seq.Seq
  predicate inv0 (_x : C05Map_Map_Type.t_map i b f)
  val inv0 (_x : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = inv0 _x }
    
  use seq.Seq
  predicate precondition0 (self : f) (_2 : item0)
  val precondition0 (self : f) (_2 : item0) : bool
    ensures { result = precondition0 self _2 }
    
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 42 8 53 9] unnest0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ) /\ (exists s : Seq.seq item0 . inv4 s /\ Seq.length s = Seq.length visited /\ produces1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ) /\ (exists fs : Seq.seq (borrowed f) . inv5 fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C05Map_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C05Map_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> unnest0 (C05Map_Map_Type.map_func self) ( * Seq.get fs i) /\ precondition0 ( * Seq.get fs i) (Seq.get s i) /\ postcondition_mut0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  val produces0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = produces0 self visited succ }
    
  function produces_trans0 [#"../05_map.rs" 36 4 36 90] (a : C05Map_Map_Type.t_map i b f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i b f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i b f) : ()
    
   =
    [#"../05_map.rs" 31 4 31 10] ()
  val produces_trans0 [#"../05_map.rs" 36 4 36 90] (a : C05Map_Map_Type.t_map i b f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i b f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i b f) : ()
    requires {[#"../05_map.rs" 33 15 33 32] produces0 a ab b}
    requires {[#"../05_map.rs" 34 15 34 32] produces0 b bc c}
    requires {[#"../05_map.rs" 36 22 36 23] inv0 a}
    requires {[#"../05_map.rs" 36 31 36 33] inv8 ab}
    requires {[#"../05_map.rs" 36 52 36 53] inv0 b}
    requires {[#"../05_map.rs" 36 61 36 63] inv8 bc}
    requires {[#"../05_map.rs" 36 82 36 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : C05Map_Map_Type.t_map i b f, ab : Seq.seq b, b : C05Map_Map_Type.t_map i b f, bc : Seq.seq b, c : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 33 15 33 32] produces0 a ab b) -> ([#"../05_map.rs" 34 15 34 32] produces0 b bc c) -> ([#"../05_map.rs" 36 22 36 23] inv0 a) -> ([#"../05_map.rs" 36 31 36 33] inv8 ab) -> ([#"../05_map.rs" 36 52 36 53] inv0 b) -> ([#"../05_map.rs" 36 61 36 63] inv8 bc) -> ([#"../05_map.rs" 36 82 36 83] inv0 c) -> ([#"../05_map.rs" 35 14 35 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i b f) : () =
    [#"../05_map.rs" 26 4 26 10] ()
  val produces_refl0 [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i b f) : ()
    requires {[#"../05_map.rs" 29 21 29 22] inv0 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 29 21 29 22] inv0 a) -> ([#"../05_map.rs" 28 14 28 39] produces0 a (Seq.empty ) a)
  predicate invariant1 (self : b)
  val invariant1 (self : b) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : b . inv1 x = true
  use seq.Seq
  predicate next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item0 . inv6 i -> inv3 e -> produces1 iter (Seq.singleton e) i -> precondition0 func (e)
  val next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) : bool
    ensures { result = next_precondition0 iter func }
    
  use seq.Seq
  predicate preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv6 i -> inv1 b -> inv2 f -> inv3 e2 -> inv3 e1 -> inv4 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1) -> postcondition_mut0 f (e1) b -> precondition0 ( ^ f) (e2)
  val preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  predicate completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed0 self }
    
  predicate reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv7 func -> inv10 iter -> completed0 iter -> next_precondition0 ( ^ iter) func /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  predicate invariant0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize0 () /\ preservation0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self) /\ next_precondition0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  val invariant0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : C05Map_Map_Type.t_map i b f . inv0 x = (invariant0 x /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  use seq.Seq
  let rec ghost predicate produces_one [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f)
    requires {[#"../05_map.rs" 117 20 117 24] inv0 self}
    requires {[#"../05_map.rs" 117 26 117 33] inv1 visited}
    requires {[#"../05_map.rs" 117 38 117 42] inv0 succ}
    ensures { [#"../05_map.rs" 116 14 116 68] result = produces0 self (Seq.singleton visited) succ }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 118 8 123 9] pure {exists f : borrowed f . inv2 f /\  * f = C05Map_Map_Type.map_func self /\  ^ f = C05Map_Map_Type.map_func succ /\ (exists e : item0 . inv3 e /\ produces1 (C05Map_Map_Type.map_iter self) (Seq.singleton e) (C05Map_Map_Type.map_iter succ) /\ precondition0 ( * f) (e) /\ postcondition_mut0 f (e) visited)}
end
module C05Map_Impl1_ProducesOneInvariant_Impl
  type i
  type b
  type f
  use prelude.Borrow
  predicate invariant8 (self : borrowed i)
  val invariant8 (self : borrowed i) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : borrowed i)
  val inv8 (_x : borrowed i) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : borrowed i . inv8 x = true
  predicate invariant7 (self : f)
  val invariant7 (self : f) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : f)
  val inv7 (_x : f) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : f . inv7 x = true
  type item0
  predicate invariant6 (self : item0)
  val invariant6 (self : item0) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : item0)
  val inv6 (_x : item0) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : item0 . inv6 x = true
  use seq.Seq
  predicate invariant5 (self : Seq.seq item0)
  val invariant5 (self : Seq.seq item0) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq item0)
  val inv5 (_x : Seq.seq item0) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq item0 . inv5 x = true
  predicate invariant4 (self : i)
  val invariant4 (self : i) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : i)
  val inv4 (_x : i) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : i . inv4 x = true
  predicate invariant3 (self : borrowed f)
  val invariant3 (self : borrowed f) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed f)
  val inv3 (_x : borrowed f) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed f . inv3 x = true
  predicate invariant2 (self : b)
  val invariant2 (self : b) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : b)
  val inv2 (_x : b) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : b . inv2 x = true
  predicate invariant1 (self : item0)
  val invariant1 (self : item0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : item0)
  val inv1 (_x : item0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : item0 . inv1 x = true
  predicate precondition0 (self : f) (_2 : item0)
  val precondition0 (self : f) (_2 : item0) : bool
    ensures { result = precondition0 self _2 }
    
  predicate produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces0 self visited _o }
    
  use seq.Seq
  predicate next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item0 . inv4 i -> inv1 e -> produces0 iter (Seq.singleton e) i -> precondition0 func (e)
  val next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) : bool
    ensures { result = next_precondition0 iter func }
    
  predicate postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  use seq.Seq
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  predicate preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv4 i -> inv2 b -> inv3 f -> inv1 e2 -> inv1 e1 -> inv5 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1) -> postcondition_mut0 f (e1) b -> precondition0 ( ^ f) (e2)
  val preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  predicate completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed0 self }
    
  predicate reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv7 func -> inv8 iter -> completed0 iter -> next_precondition0 ( ^ iter) func /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  use C05Map_Map_Type as C05Map_Map_Type
  predicate invariant0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize0 () /\ preservation0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self) /\ next_precondition0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  val invariant0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C05Map_Map_Type.t_map i b f)
  val inv0 (_x : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C05Map_Map_Type.t_map i b f . inv0 x = (invariant0 x /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  predicate postcondition_once0 (self : f) (_2 : item0) (_3 : b)
  val postcondition_once0 (self : f) (_2 : item0) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  function fn_mut_once0 (self : f) (args : item0) (res : b) : ()
  val fn_mut_once0 (self : f) (args : item0) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv7 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv6 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv2 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : item0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv7 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv6 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv3 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv7 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv7 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv7 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv7 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv7 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv7 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv7 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv7 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : item0) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : item0) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv3 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv6 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv2 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : item0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv3 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv6 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  use seq.Seq
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces0 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces0 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv4 a}
    requires {[#"../common.rs" 21 31 21 33] inv5 ab}
    requires {[#"../common.rs" 21 52 21 53] inv4 b}
    requires {[#"../common.rs" 21 61 21 63] inv5 bc}
    requires {[#"../common.rs" 21 82 21 83] inv4 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces0 a ab b) -> ([#"../common.rs" 19 15 19 32] produces0 b bc c) -> ([#"../common.rs" 21 22 21 23] inv4 a) -> ([#"../common.rs" 21 31 21 33] inv5 ab) -> ([#"../common.rs" 21 52 21 53] inv4 b) -> ([#"../common.rs" 21 61 21 63] inv5 bc) -> ([#"../common.rs" 21 82 21 83] inv4 c) -> ([#"../common.rs" 20 14 20 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv4 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv4 a) -> ([#"../common.rs" 14 14 14 39] produces0 a (Seq.empty ) a)
  let rec ghost function produces_one_invariant [#"../05_map.rs" 107 4 107 73] (self : C05Map_Map_Type.t_map i b f) (e : item0) (r : b) (f : borrowed f) (iter : i) : ()
    requires {[#"../05_map.rs" 102 4 102 60] produces0 (C05Map_Map_Type.map_iter self) (Seq.singleton e) iter}
    requires {[#"../05_map.rs" 103 15 103 30]  * f = C05Map_Map_Type.map_func self}
    requires {[#"../05_map.rs" 104 15 104 43] postcondition_mut0 f (e) r}
    requires {[#"../05_map.rs" 107 30 107 34] inv0 self}
    requires {[#"../05_map.rs" 107 36 107 37] inv1 e}
    requires {[#"../05_map.rs" 107 48 107 49] inv2 r}
    requires {[#"../05_map.rs" 107 54 107 55] inv3 f}
    requires {[#"../05_map.rs" 107 65 107 69] inv4 iter}
    ensures { [#"../05_map.rs" 105 14 105 42] preservation0 iter ( ^ f) }
    ensures { [#"../05_map.rs" 106 14 106 47] next_precondition0 iter ( ^ f) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 101 4 101 12] let _ = let a = pure {forall i : i . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv4 i -> inv1 e2 -> inv1 e1 -> inv5 s -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> produces0 (C05Map_Map_Type.map_iter self) (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i} in assert {a} in ()
end
module C05Map_Impl0_Next
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  predicate invariant12 (self : Seq.seq (borrowed f))
  val invariant12 (self : Seq.seq (borrowed f)) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : Seq.seq (borrowed f))
  val inv12 (_x : Seq.seq (borrowed f)) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : Seq.seq (borrowed f) . inv12 x = true
  type item0
  predicate invariant11 (self : item0)
  val invariant11 (self : item0) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : item0)
  val inv11 (_x : item0) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : item0 . inv11 x = true
  predicate invariant10 (self : Seq.seq item0)
  val invariant10 (self : Seq.seq item0) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : Seq.seq item0)
  val inv10 (_x : Seq.seq item0) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Seq.seq item0 . inv10 x = true
  predicate invariant9 (self : borrowed f)
  val invariant9 (self : borrowed f) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : borrowed f)
  val inv9 (_x : borrowed f) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : borrowed f . inv9 x = true
  predicate invariant8 (self : b)
  val invariant8 (self : b) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : b)
  val inv8 (_x : b) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : b . inv8 x = true
  predicate invariant7 (self : item0)
  val invariant7 (self : item0) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : item0)
  val inv7 (_x : item0) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : item0 . inv7 x = true
  predicate inv2 (_x : f)
  val inv2 (_x : f) : bool
    ensures { result = inv2 _x }
    
  predicate inv0 (_x : i)
  val inv0 (_x : i) : bool
    ensures { result = inv0 _x }
    
  predicate precondition0 (self : f) (_2 : item0)
  val precondition0 (self : f) (_2 : item0) : bool
    ensures { result = precondition0 self _2 }
    
  predicate produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces0 self visited _o }
    
  use seq.Seq
  predicate next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item0 . inv0 i -> inv7 e -> produces0 iter (Seq.singleton e) i -> precondition0 func (e)
  val next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) : bool
    ensures { result = next_precondition0 iter func }
    
  predicate postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  use seq.Seq
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  predicate preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv0 i -> inv8 b -> inv9 f -> inv7 e2 -> inv7 e1 -> inv10 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1) -> postcondition_mut0 f (e1) b -> precondition0 ( ^ f) (e2)
  val preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  predicate inv5 (_x : borrowed i)
  val inv5 (_x : borrowed i) : bool
    ensures { result = inv5 _x }
    
  predicate reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv2 func -> inv5 iter -> completed1 iter -> next_precondition0 ( ^ iter) func /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  use C05Map_Map_Type as C05Map_Map_Type
  predicate invariant6 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize0 () /\ preservation0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self) /\ next_precondition0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  val invariant6 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : C05Map_Map_Type.t_map i b f)
  val inv6 (_x : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : C05Map_Map_Type.t_map i b f . inv6 x = (invariant6 x /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  predicate resolve3 (self : f)
  val resolve3 (self : f) : bool
    ensures { result = resolve3 self }
    
  predicate postcondition_once0 (self : f) (_2 : item0) (_3 : b)
  val postcondition_once0 (self : f) (_2 : item0) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  function fn_mut_once0 (self : f) (args : item0) (res : b) : ()
  val fn_mut_once0 (self : f) (args : item0) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv2 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv11 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv8 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : item0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv11 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv8 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv9 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve3 ( ^ s)))
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv2 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv2 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv2 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv2 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv2 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv2 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : item0) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : item0) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv9 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv11 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv8 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : item0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv9 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv11 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv8 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate invariant5 (self : borrowed i)
  val invariant5 (self : borrowed i) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : borrowed i . inv5 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant4 (self : Core_Option_Option_Type.t_option b)
  val invariant4 (self : Core_Option_Option_Type.t_option b) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Core_Option_Option_Type.t_option b)
  val inv4 (_x : Core_Option_Option_Type.t_option b) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Core_Option_Option_Type.t_option b . inv4 x = true
  predicate invariant3 (self : borrowed (C05Map_Map_Type.t_map i b f))
  val invariant3 (self : borrowed (C05Map_Map_Type.t_map i b f)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed (C05Map_Map_Type.t_map i b f))
  val inv3 (_x : borrowed (C05Map_Map_Type.t_map i b f)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (C05Map_Map_Type.t_map i b f) . inv3 x = (inv6 ( * x) /\ inv6 ( ^ x))
  predicate invariant2 (self : f)
  val invariant2 (self : f) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : f . inv2 x = true
  predicate invariant1 (self : Core_Option_Option_Type.t_option item0)
  val invariant1 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option item0)
  val inv1 (_x : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option item0 . inv1 x = true
  use seq.Seq
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces0 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces0 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv0 a}
    requires {[#"../common.rs" 21 31 21 33] inv10 ab}
    requires {[#"../common.rs" 21 52 21 53] inv0 b}
    requires {[#"../common.rs" 21 61 21 63] inv10 bc}
    requires {[#"../common.rs" 21 82 21 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces0 a ab b) -> ([#"../common.rs" 19 15 19 32] produces0 b bc c) -> ([#"../common.rs" 21 22 21 23] inv0 a) -> ([#"../common.rs" 21 31 21 33] inv10 ab) -> ([#"../common.rs" 21 52 21 53] inv0 b) -> ([#"../common.rs" 21 61 21 63] inv10 bc) -> ([#"../common.rs" 21 82 21 83] inv0 c) -> ([#"../common.rs" 20 14 20 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv0 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv0 a) -> ([#"../common.rs" 14 14 14 39] produces0 a (Seq.empty ) a)
  predicate invariant0 (self : i)
  val invariant0 (self : i) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : i . inv0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces1 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 42 8 53 9] unnest0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ) /\ (exists s : Seq.seq item0 . inv10 s /\ Seq.length s = Seq.length visited /\ produces0 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ) /\ (exists fs : Seq.seq (borrowed f) . inv12 fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C05Map_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C05Map_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> unnest0 (C05Map_Map_Type.map_func self) ( * Seq.get fs i) /\ precondition0 ( * Seq.get fs i) (Seq.get s i) /\ postcondition_mut0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  val produces1 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = produces1 self visited succ }
    
  use seq.Seq
  predicate produces_one0 [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 118 8 123 9] exists f : borrowed f . inv9 f /\  * f = C05Map_Map_Type.map_func self /\  ^ f = C05Map_Map_Type.map_func succ /\ (exists e : item0 . inv7 e /\ produces0 (C05Map_Map_Type.map_iter self) (Seq.singleton e) (C05Map_Map_Type.map_iter succ) /\ precondition0 ( * f) (e) /\ postcondition_mut0 f (e) visited)
  val produces_one0 [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f) : bool
    requires {[#"../05_map.rs" 117 20 117 24] inv6 self}
    requires {[#"../05_map.rs" 117 26 117 33] inv8 visited}
    requires {[#"../05_map.rs" 117 38 117 42] inv6 succ}
    ensures { result = produces_one0 self visited succ }
    
  axiom produces_one0_spec : forall self : C05Map_Map_Type.t_map i b f, visited : b, succ : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 117 20 117 24] inv6 self) -> ([#"../05_map.rs" 117 26 117 33] inv8 visited) -> ([#"../05_map.rs" 117 38 117 42] inv6 succ) -> ([#"../05_map.rs" 116 14 116 68] produces_one0 self visited succ = produces1 self (Seq.singleton visited) succ)
  predicate completed0 [#"../05_map.rs" 22 4 22 35] (self : borrowed (C05Map_Map_Type.t_map i b f)) =
    [#"../05_map.rs" 23 8 23 75] completed1 {current = C05Map_Map_Type.map_iter ( * self); final = C05Map_Map_Type.map_iter ( ^ self)} /\ C05Map_Map_Type.map_func ( * self) = C05Map_Map_Type.map_func ( ^ self)
  val completed0 [#"../05_map.rs" 22 4 22 35] (self : borrowed (C05Map_Map_Type.t_map i b f)) : bool
    ensures { result = completed0 self }
    
  use prelude.Ghost
  predicate resolve2 (self : borrowed (C05Map_Map_Type.t_map i b f)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (C05Map_Map_Type.t_map i b f)) : bool
    ensures { result = resolve2 self }
    
  val call_mut0 (self : borrowed f) (args : item0) : b
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 160 27 160 52] precondition0 ( * self) args}
    requires {inv9 self}
    requires {inv11 args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition_mut0 self args result }
    ensures { inv8 result }
    
  predicate resolve1 (self : Ghost.ghost_ty ())
  val resolve1 (self : Ghost.ghost_ty ()) : bool
    ensures { result = resolve1 self }
    
  use prelude.Ghost
  function produces_one_invariant0 [#"../05_map.rs" 107 4 107 73] (self : C05Map_Map_Type.t_map i b f) (e : item0) (r : b) (f : borrowed f) (iter : i) : ()
    
  val produces_one_invariant0 [#"../05_map.rs" 107 4 107 73] (self : C05Map_Map_Type.t_map i b f) (e : item0) (r : b) (f : borrowed f) (iter : i) : ()
    requires {[#"../05_map.rs" 102 4 102 60] produces0 (C05Map_Map_Type.map_iter self) (Seq.singleton e) iter}
    requires {[#"../05_map.rs" 103 15 103 30]  * f = C05Map_Map_Type.map_func self}
    requires {[#"../05_map.rs" 104 15 104 43] postcondition_mut0 f (e) r}
    requires {[#"../05_map.rs" 107 30 107 34] inv6 self}
    requires {[#"../05_map.rs" 107 36 107 37] inv7 e}
    requires {[#"../05_map.rs" 107 48 107 49] inv8 r}
    requires {[#"../05_map.rs" 107 54 107 55] inv9 f}
    requires {[#"../05_map.rs" 107 65 107 69] inv0 iter}
    ensures { result = produces_one_invariant0 self e r f iter }
    
  axiom produces_one_invariant0_spec : forall self : C05Map_Map_Type.t_map i b f, e : item0, r : b, f : borrowed f, iter : i . ([#"../05_map.rs" 102 4 102 60] produces0 (C05Map_Map_Type.map_iter self) (Seq.singleton e) iter) -> ([#"../05_map.rs" 103 15 103 30]  * f = C05Map_Map_Type.map_func self) -> ([#"../05_map.rs" 104 15 104 43] postcondition_mut0 f (e) r) -> ([#"../05_map.rs" 107 30 107 34] inv6 self) -> ([#"../05_map.rs" 107 36 107 37] inv7 e) -> ([#"../05_map.rs" 107 48 107 49] inv8 r) -> ([#"../05_map.rs" 107 54 107 55] inv9 f) -> ([#"../05_map.rs" 107 65 107 69] inv0 iter) -> ([#"../05_map.rs" 106 14 106 47] next_precondition0 iter ( ^ f)) && ([#"../05_map.rs" 105 14 105 42] preservation0 iter ( ^ f))
  predicate resolve0 (self : Core_Option_Option_Type.t_option item0)
  val resolve0 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = resolve0 self }
    
  val next0 [#"../common.rs" 27 4 27 45] (self : borrowed i) : Core_Option_Option_Type.t_option item0
    requires {[#"../common.rs" 27 17 27 21] inv5 self}
    ensures { [#"../common.rs" 23 14 26 5] match result with
      | Core_Option_Option_Type.C_None -> completed1 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 26 27 44] inv1 result }
    
  let rec cfg next [#"../05_map.rs" 60 4 60 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C05Map_Map_Type.t_map i b f)) : Core_Option_Option_Type.t_option b
    requires {[#"../05_map.rs" 60 17 60 21] inv3 self}
    ensures { [#"../05_map.rs" 56 14 59 5] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces_one0 ( * self) v ( ^ self)
      end }
    ensures { [#"../05_map.rs" 60 26 60 44] inv4 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option b;
  var self : borrowed (C05Map_Map_Type.t_map i b f) = self;
  var _3 : Core_Option_Option_Type.t_option item0;
  var _4 : borrowed i;
  var v : item0;
  var _9 : Ghost.ghost_ty ();
  var _11 : b;
  var _12 : borrowed f;
  {
    goto BB0
  }
  BB0 {
    [#"../05_map.rs" 61 14 61 30] _4 <- Borrow.borrow_mut (C05Map_Map_Type.map_iter ( * self));
    [#"../05_map.rs" 61 14 61 30] self <- { self with current = (let C05Map_Map_Type.C_Map x0 x1 =  * self in C05Map_Map_Type.C_Map ( ^ _4) x1) };
    assume { inv0 ( ^ _4) };
    [#"../05_map.rs" 61 14 61 30] _3 <- ([#"../05_map.rs" 61 14 61 30] next0 _4);
    _4 <- any borrowed i;
    goto BB1
  }
  BB1 {
    switch (_3)
      | Core_Option_Option_Type.C_None -> goto BB2
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      end
  }
  BB2 {
    assert { [@expl:type invariant] inv1 _3 };
    assume { resolve0 _3 };
    assert { [@expl:type invariant] inv3 self };
    assume { resolve2 self };
    [#"../05_map.rs" 67 20 67 24] _0 <- ([#"../05_map.rs" 67 20 67 24] Core_Option_Option_Type.C_None);
    goto BB12
  }
  BB3 {
    goto BB5
  }
  BB4 {
    assert { [@expl:type invariant] inv1 _3 };
    assume { resolve0 _3 };
    assert { [@expl:type invariant] inv3 self };
    assume { resolve2 self };
    assert { [#"../05_map.rs" 61 14 61 30] false };
    absurd
  }
  BB5 {
    [#"../05_map.rs" 62 17 62 18] v <- ([#"../05_map.rs" 62 17 62 18] Core_Option_Option_Type.some_0 _3);
    [#"../05_map.rs" 62 17 62 18] _3 <- (let Core_Option_Option_Type.C_Some x0 = _3 in Core_Option_Option_Type.C_Some (any item0));
    assert { [@expl:type invariant] inv1 _3 };
    assume { resolve0 _3 };
    assert { [@expl:assertion] [#"../05_map.rs" 63 16 63 62] precondition0 (C05Map_Map_Type.map_func ( * self)) (v) };
    goto BB6
  }
  BB6 {
    [#"../05_map.rs" 64 16 64 52] _9 <- ([#"../05_map.rs" 64 16 64 52] Ghost.new ());
    goto BB7
  }
  BB7 {
    assume { resolve1 _9 };
    [#"../05_map.rs" 65 21 65 32] _12 <- Borrow.borrow_mut (C05Map_Map_Type.map_func ( * self));
    [#"../05_map.rs" 65 21 65 32] self <- { self with current = (let C05Map_Map_Type.C_Map x0 x1 =  * self in C05Map_Map_Type.C_Map x0 ( ^ _12)) };
    assume { inv2 ( ^ _12) };
    [#"../05_map.rs" 65 21 65 35] _11 <- ([#"../05_map.rs" 65 21 65 35] call_mut0 _12 ([#"../05_map.rs" 65 21 65 35] (([#"../05_map.rs" 65 33 65 34] v))));
    _12 <- any borrowed f;
    [#"../05_map.rs" 65 33 65 34] v <- any item0;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    assert { [@expl:type invariant] inv3 self };
    assume { resolve2 self };
    [#"../05_map.rs" 65 16 65 36] _0 <- ([#"../05_map.rs" 65 16 65 36] Core_Option_Option_Type.C_Some _11);
    _11 <- any b;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module C05Map_Map
  type i
  type b
  type f
  type item0
  predicate invariant8 (self : item0)
  val invariant8 (self : item0) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : item0)
  val inv8 (_x : item0) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : item0 . inv8 x = true
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  use prelude.Borrow
  predicate postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate inv6 (_x : borrowed f)
  val inv6 (_x : borrowed f) : bool
    ensures { result = inv6 _x }
    
  predicate postcondition_once0 (self : f) (_2 : item0) (_3 : b)
  val postcondition_once0 (self : f) (_2 : item0) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  predicate inv5 (_x : b)
  val inv5 (_x : b) : bool
    ensures { result = inv5 _x }
    
  predicate inv2 (_x : f)
  val inv2 (_x : f) : bool
    ensures { result = inv2 _x }
    
  function fn_mut_once0 (self : f) (args : item0) (res : b) : ()
  val fn_mut_once0 (self : f) (args : item0) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv2 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv8 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv5 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : item0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv8 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv5 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv6 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv2 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv2 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv2 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv2 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv2 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv2 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : item0) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : item0) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv6 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv8 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv5 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : item0, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv6 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv8 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv5 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  use seq.Seq
  predicate invariant7 (self : Seq.seq item0)
  val invariant7 (self : Seq.seq item0) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Seq.seq item0)
  val inv7 (_x : Seq.seq item0) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Seq.seq item0 . inv7 x = true
  predicate invariant6 (self : borrowed f)
  val invariant6 (self : borrowed f) : bool
    ensures { result = invariant6 self }
    
  axiom inv6 : forall x : borrowed f . inv6 x = true
  predicate invariant5 (self : b)
  val invariant5 (self : b) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : b . inv5 x = true
  predicate invariant4 (self : borrowed i)
  val invariant4 (self : borrowed i) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed i)
  val inv4 (_x : borrowed i) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed i . inv4 x = true
  predicate inv0 (_x : i)
  val inv0 (_x : i) : bool
    ensures { result = inv0 _x }
    
  predicate precondition0 (self : f) (_2 : item0)
  val precondition0 (self : f) (_2 : item0) : bool
    ensures { result = precondition0 self _2 }
    
  predicate produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces0 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces0 self visited _o }
    
  use seq.Seq
  predicate inv1 (_x : item0)
  val inv1 (_x : item0) : bool
    ensures { result = inv1 _x }
    
  predicate next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item0 . inv0 i -> inv1 e -> produces0 iter (Seq.singleton e) i -> precondition0 func (e)
  val next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) : bool
    ensures { result = next_precondition0 iter func }
    
  use seq.Seq
  predicate preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv0 i -> inv5 b -> inv6 f -> inv1 e2 -> inv1 e1 -> inv7 s -> unnest0 func ( * f) -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1) -> postcondition_mut0 f (e1) b -> precondition0 ( ^ f) (e2)
  val preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  predicate completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed0 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed0 self }
    
  predicate reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv2 func -> inv4 iter -> completed0 iter -> next_precondition0 ( ^ iter) func /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  use C05Map_Map_Type as C05Map_Map_Type
  predicate invariant3 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize0 () /\ preservation0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self) /\ next_precondition0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  val invariant3 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : C05Map_Map_Type.t_map i b f)
  val inv3 (_x : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : C05Map_Map_Type.t_map i b f . inv3 x = (invariant3 x /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  predicate invariant2 (self : f)
  val invariant2 (self : f) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : f . inv2 x = true
  predicate invariant1 (self : item0)
  val invariant1 (self : item0) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : item0 . inv1 x = true
  predicate invariant0 (self : i)
  val invariant0 (self : i) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : i . inv0 x = true
  use seq.Seq
  function produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    
  val produces_trans0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../common.rs" 18 15 18 32] produces0 a ab b}
    requires {[#"../common.rs" 19 15 19 32] produces0 b bc c}
    requires {[#"../common.rs" 21 22 21 23] inv0 a}
    requires {[#"../common.rs" 21 31 21 33] inv7 ab}
    requires {[#"../common.rs" 21 52 21 53] inv0 b}
    requires {[#"../common.rs" 21 61 21 63] inv7 bc}
    requires {[#"../common.rs" 21 82 21 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../common.rs" 18 15 18 32] produces0 a ab b) -> ([#"../common.rs" 19 15 19 32] produces0 b bc c) -> ([#"../common.rs" 21 22 21 23] inv0 a) -> ([#"../common.rs" 21 31 21 33] inv7 ab) -> ([#"../common.rs" 21 52 21 53] inv0 b) -> ([#"../common.rs" 21 61 21 63] inv7 bc) -> ([#"../common.rs" 21 82 21 83] inv0 c) -> ([#"../common.rs" 20 14 20 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
  val produces_refl0 [#"../common.rs" 15 4 15 30] (a : i) : ()
    requires {[#"../common.rs" 15 21 15 22] inv0 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : i . ([#"../common.rs" 15 21 15 22] inv0 a) -> ([#"../common.rs" 14 14 14 39] produces0 a (Seq.empty ) a)
  let rec cfg map [#"../05_map.rs" 144 0 144 84] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) (func : f) : C05Map_Map_Type.t_map i b f
    requires {[#"../05_map.rs" 140 0 140 105] forall i2 : i . forall e : item0 . inv0 i2 -> inv1 e -> produces0 iter (Seq.singleton e) i2 -> precondition0 func (e)}
    requires {[#"../05_map.rs" 141 11 141 41] reinitialize0 ()}
    requires {[#"../05_map.rs" 142 11 142 51] preservation0 iter func}
    requires {[#"../05_map.rs" 144 51 144 55] inv0 iter}
    requires {[#"../05_map.rs" 144 60 144 64] inv2 func}
    ensures { [#"../05_map.rs" 143 10 143 38] result = C05Map_Map_Type.C_Map iter func }
    ensures { [#"../05_map.rs" 144 72 144 84] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C05Map_Map_Type.t_map i b f;
  var iter : i = iter;
  var func : f = func;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    [#"../05_map.rs" 145 4 145 22] _0 <- ([#"../05_map.rs" 145 4 145 22] C05Map_Map_Type.C_Map ([#"../05_map.rs" 145 10 145 14] iter) ([#"../05_map.rs" 145 16 145 20] func));
    [#"../05_map.rs" 145 10 145 14] iter <- any i;
    [#"../05_map.rs" 145 16 145 20] func <- any f;
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module C05Map_Impl0
  type i
  type b
  type f
  use prelude.Borrow
  predicate invariant11 (self : borrowed i)
  val invariant11 (self : borrowed i) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : borrowed i)
  val inv11 (_x : borrowed i) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : borrowed i . inv11 x = true
  predicate invariant10 (self : f)
  val invariant10 (self : f) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : f)
  val inv10 (_x : f) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : f . inv10 x = true
  predicate invariant9 (self : i)
  val invariant9 (self : i) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : i)
  val inv9 (_x : i) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : i . inv9 x = true
  type item0
  predicate invariant8 (self : item0)
  val invariant8 (self : item0) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : item0)
  val inv8 (_x : item0) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : item0 . inv8 x = true
  predicate invariant7 (self : borrowed f)
  val invariant7 (self : borrowed f) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed f)
  val inv7 (_x : borrowed f) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed f . inv7 x = true
  predicate invariant6 (self : b)
  val invariant6 (self : b) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : b)
  val inv6 (_x : b) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : b . inv6 x = true
  use seq.Seq
  predicate invariant5 (self : Seq.seq (borrowed f))
  val invariant5 (self : Seq.seq (borrowed f)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq (borrowed f))
  val inv5 (_x : Seq.seq (borrowed f)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq (borrowed f) . inv5 x = true
  predicate invariant4 (self : Seq.seq item0)
  val invariant4 (self : Seq.seq item0) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Seq.seq item0)
  val inv4 (_x : Seq.seq item0) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq item0 . inv4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option b)
  val invariant3 (self : Core_Option_Option_Type.t_option b) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option b)
  val inv3 (_x : Core_Option_Option_Type.t_option b) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option b . inv3 x = true
  use C05Map_Map_Type as C05Map_Map_Type
  predicate invariant2 (self : borrowed (C05Map_Map_Type.t_map i b f))
  val invariant2 (self : borrowed (C05Map_Map_Type.t_map i b f)) : bool
    ensures { result = invariant2 self }
    
  predicate inv0 (_x : C05Map_Map_Type.t_map i b f)
  val inv0 (_x : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = inv0 _x }
    
  predicate inv2 (_x : borrowed (C05Map_Map_Type.t_map i b f))
  val inv2 (_x : borrowed (C05Map_Map_Type.t_map i b f)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (C05Map_Map_Type.t_map i b f) . inv2 x = (inv0 ( * x) /\ inv0 ( ^ x))
  predicate invariant1 (self : Seq.seq b)
  val invariant1 (self : Seq.seq b) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq b)
  val inv1 (_x : Seq.seq b) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq b . inv1 x = true
  predicate precondition0 (self : f) (_2 : item0)
  val precondition0 (self : f) (_2 : item0) : bool
    ensures { result = precondition0 self _2 }
    
  predicate produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i)
  val produces1 [#"../common.rs" 8 4 8 66] (self : i) (visited : Seq.seq item0) (_o : i) : bool
    ensures { result = produces1 self visited _o }
    
  use seq.Seq
  predicate next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : item0 . inv9 i -> inv8 e -> produces1 iter (Seq.singleton e) i -> precondition0 func (e)
  val next_precondition0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) : bool
    ensures { result = next_precondition0 iter func }
    
  predicate postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : item0) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  use seq.Seq
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  predicate preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : item0 . forall e1 : item0 . forall s : Seq.seq item0 . inv9 i -> inv6 b -> inv7 f -> inv8 e2 -> inv8 e1 -> inv4 s -> unnest0 func ( * f) -> produces1 iter (Seq.snoc (Seq.snoc s e1) e2) i -> precondition0 ( * f) (e1) -> postcondition_mut0 f (e1) b -> precondition0 ( ^ f) (e2)
  val preservation0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) : bool
    ensures { result = preservation0 iter func }
    
  predicate completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  val completed1 [#"../common.rs" 11 4 11 36] (self : borrowed i) : bool
    ensures { result = completed1 self }
    
  predicate reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . inv10 func -> inv11 iter -> completed1 iter -> next_precondition0 ( ^ iter) func /\ preservation0 ( ^ iter) func
  val reinitialize0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  predicate invariant0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] reinitialize0 () /\ preservation0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self) /\ next_precondition0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  val invariant0 [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : C05Map_Map_Type.t_map i b f . inv0 x = (invariant0 x /\ match x with
    | C05Map_Map_Type.C_Map iter func -> true
    end)
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 42 8 53 9] unnest0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ) /\ (exists s : Seq.seq item0 . inv4 s /\ Seq.length s = Seq.length visited /\ produces1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ) /\ (exists fs : Seq.seq (borrowed f) . inv5 fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C05Map_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C05Map_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> unnest0 (C05Map_Map_Type.map_func self) ( * Seq.get fs i) /\ precondition0 ( * Seq.get fs i) (Seq.get s i) /\ postcondition_mut0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  val produces0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = produces0 self visited succ }
    
  predicate produces_one0 [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 118 8 123 9] exists f : borrowed f . inv7 f /\  * f = C05Map_Map_Type.map_func self /\  ^ f = C05Map_Map_Type.map_func succ /\ (exists e : item0 . inv8 e /\ produces1 (C05Map_Map_Type.map_iter self) (Seq.singleton e) (C05Map_Map_Type.map_iter succ) /\ precondition0 ( * f) (e) /\ postcondition_mut0 f (e) visited)
  val produces_one0 [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f) : bool
    requires {[#"../05_map.rs" 117 20 117 24] inv0 self}
    requires {[#"../05_map.rs" 117 26 117 33] inv6 visited}
    requires {[#"../05_map.rs" 117 38 117 42] inv0 succ}
    ensures { result = produces_one0 self visited succ }
    
  axiom produces_one0_spec : forall self : C05Map_Map_Type.t_map i b f, visited : b, succ : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 117 20 117 24] inv0 self) -> ([#"../05_map.rs" 117 26 117 33] inv6 visited) -> ([#"../05_map.rs" 117 38 117 42] inv0 succ) -> ([#"../05_map.rs" 116 14 116 68] produces_one0 self visited succ = produces0 self (Seq.singleton visited) succ)
  predicate completed0 [#"../05_map.rs" 22 4 22 35] (self : borrowed (C05Map_Map_Type.t_map i b f)) =
    [#"../05_map.rs" 23 8 23 75] completed1 {current = C05Map_Map_Type.map_iter ( * self); final = C05Map_Map_Type.map_iter ( ^ self)} /\ C05Map_Map_Type.map_func ( * self) = C05Map_Map_Type.map_func ( ^ self)
  val completed0 [#"../05_map.rs" 22 4 22 35] (self : borrowed (C05Map_Map_Type.t_map i b f)) : bool
    ensures { result = completed0 self }
    
  use seq.Seq
  goal produces_trans_refn : [#"../05_map.rs" 36 4 36 90] forall a : C05Map_Map_Type.t_map i b f . forall ab : Seq.seq b . forall b : C05Map_Map_Type.t_map i b f . forall bc : Seq.seq b . forall c : C05Map_Map_Type.t_map i b f . inv0 c /\ inv1 bc /\ inv0 b /\ inv1 ab /\ inv0 a /\ produces0 b bc c /\ produces0 a ab b -> inv0 c /\ inv1 bc /\ inv0 b /\ inv1 ab /\ inv0 a /\ produces0 b bc c /\ produces0 a ab b /\ (forall result : () . produces0 a (Seq.(++) ab bc) c -> produces0 a (Seq.(++) ab bc) c)
  goal next_refn : [#"../05_map.rs" 60 4 60 44] forall self : borrowed (C05Map_Map_Type.t_map i b f) . inv2 self -> inv2 self /\ (forall result : Core_Option_Option_Type.t_option b . inv3 result /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces_one0 ( * self) v ( ^ self)
    end -> inv3 result /\ match result with
    | Core_Option_Option_Type.C_None -> completed0 self
    | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_refl_refn : [#"../05_map.rs" 29 4 29 29] forall a : C05Map_Map_Type.t_map i b f . inv0 a -> inv0 a /\ (forall result : () . produces0 a (Seq.empty ) a -> produces0 a (Seq.empty ) a)
end
module C05Map_Impl2
  type i
  type b
  type f
end
