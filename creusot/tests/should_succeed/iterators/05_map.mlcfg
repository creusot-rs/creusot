
module C05Map_Common_Iterator_Invariant_Stub
  type self
  val ghost predicate invariant' (self : self)
end
module C05Map_Common_Iterator_Invariant_Interface
  type self
  val ghost predicate invariant' (self : self)
end
module C05Map_Common_Iterator_Invariant
  type self
  let rec ghost predicate invariant' [#"../common.rs" 28 4 28 30] (self : self) = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../common.rs" 29 8 29 12] true
end
module C05Map_Map_Type
  type t_map 'i 'f =
    | C_Map 'i 'f
    
  let function map_iter (self : t_map 'i 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map a _ -> a
      end
  let function map_func (self : t_map 'i 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ a -> a
      end
end
module C05Map_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  val ghost predicate completed (self : borrowed self)
end
module C05Map_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  val ghost predicate completed (self : borrowed self)
end
module C05Map_Common_Iterator_Completed
  type self
  use prelude.Borrow
  val ghost predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C05Map_Impl0_Completed_Stub
  type i
  type b
  type f
  use prelude.Borrow
  use C05Map_Map_Type as C05Map_Map_Type
  val ghost predicate completed (self : borrowed (C05Map_Map_Type.t_map i f))
end
module C05Map_Impl0_Completed_Interface
  type i
  type b
  type f
  use prelude.Borrow
  use C05Map_Map_Type as C05Map_Map_Type
  val ghost predicate completed (self : borrowed (C05Map_Map_Type.t_map i f))
end
module C05Map_Impl0_Completed
  type i
  type b
  type f
  use prelude.Borrow
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Common_Iterator_Completed_Stub as Completed0 with type self = i
  let rec ghost predicate completed [#"../05_map.rs" 20 4 20 35] (self : borrowed (C05Map_Map_Type.t_map i f))
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 21 8 23 9] pure {exists iter : borrowed i .  * iter = C05Map_Map_Type.map_iter ( * self) /\  ^ iter = C05Map_Map_Type.map_iter ( ^ self) /\ Completed0.completed iter}
end
module CreusotContracts_Std1_Fun_Impl0_Precondition_Stub
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition_Interface
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module C05Map_Common_Iterator_Item_Type
  type self
  type item
end
module C05Map_Impl0_Invariant_Stub
  type i
  type b
  type f
  use C05Map_Map_Type as C05Map_Map_Type
  val ghost predicate invariant' (self : C05Map_Map_Type.t_map i f)
end
module C05Map_Impl0_Invariant_Interface
  type i
  type b
  type f
  use C05Map_Map_Type as C05Map_Map_Type
  val ghost predicate invariant' (self : C05Map_Map_Type.t_map i f)
end
module C05Map_Impl0_Invariant
  type i
  type b
  type f
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = i
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Stub as Precondition0 with type args = Item0.item, type f = f
  clone C05Map_Common_Iterator_Invariant_Stub as Invariant0 with type self = i
  let rec ghost predicate invariant' [#"../05_map.rs" 62 4 62 30] (self : C05Map_Map_Type.t_map i f)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 63 8 65 9] Invariant0.invariant' (C05Map_Map_Type.map_iter self) && pure {forall e : Item0.item . forall f : f . Precondition0.precondition f (e)}
end
module C05Map_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C05Map_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C05Map_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = self
  val ghost predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Fun_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module C05Map_Impl0_Produces_Stub
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  val ghost predicate produces (self : C05Map_Map_Type.t_map i f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i f)
    
end
module C05Map_Impl0_Produces_Interface
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  val ghost predicate produces (self : C05Map_Map_Type.t_map i f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i f)
    
end
module C05Map_Impl0_Produces
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  use prelude.Borrow
  use mach.int.Int
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = i
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut_Stub as PostconditionMut0 with type args = Item0.item,
    type f = f, type Output0.output = b
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with type self = i, type Item0.item = Item0.item
  let rec ghost predicate produces [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i f)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 42 8 58 9] pure {exists fs : Seq.seq (borrowed f) . exists items : Seq.seq Item0.item . Produces0.produces (C05Map_Map_Type.map_iter self) items (C05Map_Map_Type.map_iter succ) /\ Seq.length items = Seq.length fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (Seq.length visited > 0 ->  * Seq.get fs 0 = C05Map_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C05Map_Map_Type.map_func succ) /\ (Seq.length visited = 0 -> C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> PostconditionMut0.postcondition_mut (Seq.get fs i) (Seq.get items i) (Seq.get visited i))}
end
module C05Map_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl (a : self) : ()
end
module C05Map_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl (a : self) : ()
    requires {[#"../common.rs" 14 15 14 28] Invariant0.invariant' a}
    ensures { [#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a }
    
end
module C05Map_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C05Map_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C05Map_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 19 15 19 28] Invariant0.invariant' a}
    requires {[#"../common.rs" 20 15 20 28] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 15 21 28] Invariant0.invariant' c}
    requires {[#"../common.rs" 22 15 22 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 23 15 23 32] Produces0.produces b bc c}
    ensures { [#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c }
    
end
module C05Map_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val ghost function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Fun_Impl1_FnMutOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost function fn_mut_once (self : f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl1_FnMutOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost function fn_mut_once (self : f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl1_FnMutOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  let rec ghost function fn_mut_once (self : f) (_2' : args) (_3' : Output0.output) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module C05Map_Impl0_ProducesRefl_Stub
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f
  clone C05Map_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f
  val ghost function produces_refl (a : C05Map_Map_Type.t_map i f) : ()
end
module C05Map_Impl0_ProducesRefl_Interface
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f
  clone C05Map_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f
  val ghost function produces_refl (a : C05Map_Map_Type.t_map i f) : ()
    requires {[#"../05_map.rs" 27 15 27 28] Invariant0.invariant' a}
    ensures { [#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a }
    
end
module C05Map_Impl0_ProducesRefl
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f
  clone C05Map_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f
  let rec ghost function produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i f) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 26 4 26 10] ()
  axiom produces_refl_spec : forall a : C05Map_Map_Type.t_map i f . ([#"../05_map.rs" 27 15 27 28] Invariant0.invariant' a) -> ([#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a)
end
module C05Map_Impl0_ProducesRefl_Impl
  type i
  type b
  type f
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = i
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = Item0.item, type f = f,
    type Output0.output = b
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with type self = i, type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Invariant_Interface as Invariant1 with type self = i
  clone C05Map_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C05Map_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = Item0.item, type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = Item0.item, type f = f
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces as Produces0 with type i = i, type b = b, type f = f, type Item0.item = Item0.item,
    val Produces0.produces = Produces1.produces,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl0_Invariant as Invariant0 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant1.invariant', type Item0.item = Item0.item,
    val Precondition0.precondition = Precondition0.precondition
  let rec ghost function produces_refl (a : C05Map_Map_Type.t_map i f) : ()
    requires {[#"../05_map.rs" 27 15 27 28] Invariant0.invariant' a}
    ensures { [#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 26 4 26 10] ()
end
module C05Map_Impl0_ProducesTrans_Stub
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f
  clone C05Map_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f
  val ghost function produces_trans (a : C05Map_Map_Type.t_map i f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i f) : ()
    
end
module C05Map_Impl0_ProducesTrans_Interface
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f
  clone C05Map_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f
  val ghost function produces_trans (a : C05Map_Map_Type.t_map i f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i f) : ()
    requires {[#"../05_map.rs" 32 15 32 28] Invariant0.invariant' a}
    requires {[#"../05_map.rs" 33 15 33 28] Invariant0.invariant' b}
    requires {[#"../05_map.rs" 34 15 34 28] Invariant0.invariant' c}
    requires {[#"../05_map.rs" 35 15 35 32] Produces0.produces a ab b}
    requires {[#"../05_map.rs" 36 15 36 32] Produces0.produces b bc c}
    ensures { [#"../05_map.rs" 37 14 37 42] Produces0.produces a (Seq.(++) ab bc) c }
    
end
module C05Map_Impl0_ProducesTrans
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f
  clone C05Map_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f
  let rec ghost function produces_trans [#"../05_map.rs" 38 4 38 90] (a : C05Map_Map_Type.t_map i f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i f) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 31 4 31 10] ()
  axiom produces_trans_spec : forall a : C05Map_Map_Type.t_map i f, ab : Seq.seq b, b : C05Map_Map_Type.t_map i f, bc : Seq.seq b, c : C05Map_Map_Type.t_map i f . ([#"../05_map.rs" 32 15 32 28] Invariant0.invariant' a) -> ([#"../05_map.rs" 33 15 33 28] Invariant0.invariant' b) -> ([#"../05_map.rs" 34 15 34 28] Invariant0.invariant' c) -> ([#"../05_map.rs" 35 15 35 32] Produces0.produces a ab b) -> ([#"../05_map.rs" 36 15 36 32] Produces0.produces b bc c) -> ([#"../05_map.rs" 37 14 37 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C05Map_Impl0_ProducesTrans_Impl
  type i
  type b
  type f
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = i
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = Item0.item, type f = f,
    type Output0.output = b
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with type self = i, type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Invariant_Interface as Invariant1 with type self = i
  clone C05Map_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C05Map_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = Item0.item, type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = Item0.item, type f = f
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces as Produces0 with type i = i, type b = b, type f = f, type Item0.item = Item0.item,
    val Produces0.produces = Produces1.produces,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl0_Invariant as Invariant0 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant1.invariant', type Item0.item = Item0.item,
    val Precondition0.precondition = Precondition0.precondition
  let rec ghost function produces_trans (a : C05Map_Map_Type.t_map i f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i f) : ()
    requires {[#"../05_map.rs" 32 15 32 28] Invariant0.invariant' a}
    requires {[#"../05_map.rs" 33 15 33 28] Invariant0.invariant' b}
    requires {[#"../05_map.rs" 34 15 34 28] Invariant0.invariant' c}
    requires {[#"../05_map.rs" 35 15 35 32] Produces0.produces a ab b}
    requires {[#"../05_map.rs" 36 15 36 32] Produces0.produces b bc c}
    ensures { [#"../05_map.rs" 37 14 37 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 31 4 31 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C05Map_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with type self = self, type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Completed_Stub as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C05Map_Common_Iterator_Invariant_Stub as Invariant0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C05Map_Common_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = self
  clone C05Map_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Completed_Interface as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C05Map_Common_Iterator_Invariant_Interface as Invariant0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module Core_Ops_Function_FnMut_CallMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Stub as PostconditionMut0 with type self = self,
    type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Stub as Precondition0 with type args = args, type f = self
  val call_mut [@cfg:stackify] (self : borrowed self) (args : args) : Output0.output
    requires {Precondition0.precondition ( * self) args}
    ensures { PostconditionMut0.postcondition_mut self args result }
    
end
module Core_Ops_Function_FnMut_CallMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
    type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = args, type f = self
  val call_mut [@cfg:stackify] (self : borrowed self) (args : args) : Output0.output
    requires {Precondition0.precondition ( * self) args}
    ensures { PostconditionMut0.postcondition_mut self args result }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module C05Map_Impl0_Next_Interface
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with type i = i, type b = b, type f = f
  clone C05Map_Impl0_Completed_Stub as Completed0 with type i = i, type b = b, type f = f
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C05Map_Impl0_Invariant_Stub as Invariant0 with type i = i, type b = b, type f = f
  val next [@cfg:stackify] (self : borrowed (C05Map_Map_Type.t_map i f)) : Core_Option_Option_Type.t_option b
    requires {[#"../05_map.rs" 68 4 68 40] Invariant0.invariant' ( * self)}
    ensures { [#"../05_map.rs" 68 4 68 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../05_map.rs" 69 14 72 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C05Map_Impl0_Next
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with type self = i
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = Item0.item, type f = f,
    type Output0.output = b
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with type self = i, type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Invariant_Interface as Invariant1 with type self = i
  clone C05Map_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C05Map_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', val Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = Item0.item, type f = f,
    type Output0.output = b
  clone C05Map_Common_Iterator_Completed_Interface as Completed1 with type self = i
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = Item0.item, type f = f
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces as Produces0 with type i = i, type b = b, type f = f, type Item0.item = Item0.item,
    val Produces0.produces = Produces1.produces,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl0_Completed as Completed0 with type i = i, type b = b, type f = f,
    val Completed0.completed = Completed1.completed
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C05Map_Impl0_Invariant as Invariant0 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant1.invariant', type Item0.item = Item0.item,
    val Precondition0.precondition = Precondition0.precondition
  use mach.int.Int
  use prelude.IntSize
  clone Core_Ops_Function_FnMut_CallMut_Interface as CallMut0 with type self = f, type args = Item0.item,
    val Precondition0.precondition = Precondition0.precondition,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut, type Output0.output = b
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Item0.item
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = C05Map_Map_Type.t_map i f
  clone C05Map_Common_Iterator_Next_Interface as Next0 with type self = i,
    val Invariant0.invariant' = Invariant1.invariant', type Item0.item = Item0.item,
    val Completed0.completed = Completed1.completed, val Produces0.produces = Produces1.produces
  let rec cfg next [@cfg:stackify] [#"../05_map.rs" 73 4 73 44] (self : borrowed (C05Map_Map_Type.t_map i f)) : Core_Option_Option_Type.t_option b
    requires {[#"../05_map.rs" 68 4 68 40] Invariant0.invariant' ( * self)}
    ensures { [#"../05_map.rs" 68 4 68 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../05_map.rs" 69 14 72 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option b;
  var self_1 : borrowed (C05Map_Map_Type.t_map i f);
  var _5 : Core_Option_Option_Type.t_option Item0.item;
  var _6 : borrowed i;
  var _7 : isize;
  var v_8 : Item0.item;
  var _9 : b;
  var _10 : borrowed f;
  var _11 : Item0.item;
  var _12 : Item0.item;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut (C05Map_Map_Type.map_iter ( * self_1));
    self_1 <- { self_1 with current = (let C05Map_Map_Type.C_Map a b =  * self_1 in C05Map_Map_Type.C_Map ( ^ _6) b) };
    _5 <- ([#"../05_map.rs" 74 14 74 30] Next0.next _6);
    goto BB1
  }
  BB1 {
    switch (_5)
      | Core_Option_Option_Type.C_None -> goto BB2
      | Core_Option_Option_Type.C_Some _ -> goto BB4
      end
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB9
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve _5 };
    absurd
  }
  BB4 {
    assume { Resolve2.resolve v_8 };
    v_8 <- Core_Option_Option_Type.some_0 _5;
    _5 <- (let Core_Option_Option_Type.C_Some a = _5 in Core_Option_Option_Type.C_Some (any Item0.item));
    _10 <- borrow_mut (C05Map_Map_Type.map_func ( * self_1));
    self_1 <- { self_1 with current = (let C05Map_Map_Type.C_Map a b =  * self_1 in C05Map_Map_Type.C_Map a ( ^ _10)) };
    assume { Resolve0.resolve self_1 };
    assume { Resolve2.resolve _12 };
    _12 <- v_8;
    v_8 <- any Item0.item;
    _11 <- (_12);
    _9 <- ([#"../05_map.rs" 75 28 75 42] CallMut0.call_mut _10 _11);
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    _0 <- Core_Option_Option_Type.C_Some _9;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    assume { Resolve1.resolve _5 };
    return _0
  }
  
end
module C05Map_Impl0_Item_Type
  type i
  type b
  type f
  type item  =
    b
end
module C05Map_Impl0
  type i
  type b
  type f
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item2 with type self = i
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = Item2.item, type f = f
  clone C05Map_Common_Iterator_Invariant_Interface as Invariant1 with type self = i
  clone C05Map_Common_Iterator_Completed_Interface as Completed2 with type self = i
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = Item2.item, type f = f,
    type Output0.output = b
  clone C05Map_Common_Iterator_Produces_Interface as Produces2 with type self = i, type Item0.item = Item2.item
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Invariant as Invariant0 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant1.invariant', type Item0.item = Item2.item,
    val Precondition0.precondition = Precondition0.precondition
  clone C05Map_Impl0_Item_Type as Item0 with type i = i, type b = b, type f = f
  clone C05Map_Impl0_Produces as Produces0 with type i = i, type b = b, type f = f, type Item0.item = Item2.item,
    val Produces0.produces = Produces2.produces,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl0_ProducesRefl as ProducesRefl0 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces, axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with type self = C05Map_Map_Type.t_map i f,
    val produces_refl = ProducesRefl0.produces_refl, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, type Item0.item = Item0.item, axiom .
  clone C05Map_Impl0_Completed as Completed0 with type i = i, type b = b, type f = f,
    val Completed0.completed = Completed2.completed
  clone C05Map_Common_Iterator_Completed_Interface as Completed1 with type self = C05Map_Map_Type.t_map i f,
    val completed = Completed0.completed
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with type self = C05Map_Map_Type.t_map i f,
    val produces = Produces0.produces, type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Item_Type as Item1 with type self = C05Map_Map_Type.t_map i f, type item = Item0.item
  goal produces_refl_spec : forall a : C05Map_Map_Type.t_map i f . (([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../05_map.rs" 27 15 27 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a))
  clone C05Map_Impl0_ProducesTrans as ProducesTrans0 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant0.invariant', val Produces0.produces = Produces0.produces, axiom .
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with type self = C05Map_Map_Type.t_map i f,
    val produces_trans = ProducesTrans0.produces_trans, val Invariant0.invariant' = Invariant0.invariant',
    val Produces0.produces = Produces0.produces, type Item0.item = Item0.item, axiom .
  goal produces_trans_spec : forall a : C05Map_Map_Type.t_map i f, ab : Seq.seq b, b : C05Map_Map_Type.t_map i f, bc : Seq.seq b, c : C05Map_Map_Type.t_map i f . (([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) && ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) && ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) && ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) && ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../05_map.rs" 36 15 36 32] Produces0.produces b bc c) && ([#"../05_map.rs" 35 15 35 32] Produces0.produces a ab b) && ([#"../05_map.rs" 34 15 34 28] Invariant0.invariant' c) && ([#"../05_map.rs" 33 15 33 28] Invariant0.invariant' b) && ([#"../05_map.rs" 32 15 32 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../05_map.rs" 37 14 37 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c))
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C05Map_Impl0_Next_Interface as Next0 with type i = i, type b = b, type f = f,
    val Invariant0.invariant' = Invariant0.invariant', val Completed0.completed = Completed0.completed,
    val Produces0.produces = Produces0.produces
  clone C05Map_Common_Iterator_Next_Interface as Next1 with type self = C05Map_Map_Type.t_map i f,
    val next = Next0.next, val Invariant0.invariant' = Invariant0.invariant', type Item0.item = Item0.item,
    val Completed0.completed = Completed0.completed, val Produces0.produces = Produces0.produces
  clone C05Map_Common_Iterator_Invariant_Interface as Invariant2 with type self = C05Map_Map_Type.t_map i f,
    val invariant' = Invariant0.invariant'
end
