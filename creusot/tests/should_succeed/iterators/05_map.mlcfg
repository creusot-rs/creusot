
module C05Map_Map_Type
  type t_map 'i 'b 'f =
    | C_Map 'i 'f
    
  let function map_iter (self : t_map 'i 'b 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map a _ -> a
      end
  let function map_func (self : t_map 'i 'b 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ a -> a
      end
end
module C05Map_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C05Map_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C05Map_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C05Map_Impl0_Completed_Stub
  type i
  type b
  type f
  use prelude.Borrow
  use C05Map_Map_Type as C05Map_Map_Type
  predicate completed [#"../05_map.rs" 22 4 22 35] (self : borrowed (C05Map_Map_Type.t_map i b f))
end
module C05Map_Impl0_Completed_Interface
  type i
  type b
  type f
  use prelude.Borrow
  use C05Map_Map_Type as C05Map_Map_Type
  predicate completed [#"../05_map.rs" 22 4 22 35] (self : borrowed (C05Map_Map_Type.t_map i b f))
  val completed [#"../05_map.rs" 22 4 22 35] (self : borrowed (C05Map_Map_Type.t_map i b f)) : bool
    ensures { result = completed self }
    
end
module C05Map_Impl0_Completed
  type i
  type b
  type f
  use prelude.Borrow
  clone C05Map_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  use C05Map_Map_Type as C05Map_Map_Type
  predicate completed [#"../05_map.rs" 22 4 22 35] (self : borrowed (C05Map_Map_Type.t_map i b f)) =
    [#"../05_map.rs" 23 8 23 75] Completed0.completed {current = C05Map_Map_Type.map_iter ( * self); final = C05Map_Map_Type.map_iter ( ^ self)} /\ C05Map_Map_Type.map_func ( * self) = C05Map_Map_Type.map_func ( ^ self)
  val completed [#"../05_map.rs" 22 4 22 35] (self : borrowed (C05Map_Map_Type.t_map i b f)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2 : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module C05Map_Common_Iterator_Item_Type
  type self
  type item
end
module C05Map_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module C05Map_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module C05Map_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2 : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module C05Map_Impl0_Produces_Stub
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  predicate produces [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f)
    
end
module C05Map_Impl0_Produces_Interface
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  predicate produces [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f)
    
  val produces [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = produces self visited succ }
    
end
module C05Map_Impl0_Produces
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (borrowed f)
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = Item0.item,
    type f = f
  use C05Map_Map_Type as C05Map_Map_Type
  predicate produces [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 42 8 53 9] Unnest0.unnest (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ) /\ (exists s : Seq.seq Item0.item . Inv0.inv s /\ Seq.length s = Seq.length visited /\ Produces0.produces (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ) /\ (exists fs : Seq.seq (borrowed f) . Inv1.inv fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
       * Seq.get fs 0 = C05Map_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C05Map_Map_Type.map_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Unnest0.unnest (C05Map_Map_Type.map_func self) ( * Seq.get fs i) /\ Precondition0.precondition ( * Seq.get fs i) (Seq.get s i) /\ PostconditionMut0.postcondition_mut (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  val produces [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : C05Map_Map_Type.t_map i b f) (visited : Seq.seq b) (succ : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = produces self visited succ }
    
end
module C05Map_Impl1_NextPrecondition_Stub
  type i
  type b
  type f
  predicate next_precondition [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f)
end
module C05Map_Impl1_NextPrecondition_Interface
  type i
  type b
  type f
  predicate next_precondition [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f)
  val next_precondition [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) : bool
    ensures { result = next_precondition iter func }
    
end
module C05Map_Impl1_NextPrecondition
  type i
  type b
  type f
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  predicate next_precondition [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [#"../05_map.rs" 75 8 77 9] forall i : i . forall e : Item0.item . Inv0.inv i -> Inv1.inv e -> Produces0.produces iter (Seq.singleton e) i -> Precondition0.precondition func (e)
  val next_precondition [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) : bool
    ensures { result = next_precondition iter func }
    
end
module C05Map_Impl1_Preservation_Stub
  type i
  type b
  type f
  predicate preservation [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f)
end
module C05Map_Impl1_Preservation_Interface
  type i
  type b
  type f
  predicate preservation [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f)
  val preservation [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module C05Map_Impl1_Preservation
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv4 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  predicate preservation [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [#"../05_map.rs" 82 8 89 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Inv0.inv i -> Inv1.inv b -> Inv2.inv f -> Inv3.inv e2 -> Inv3.inv e1 -> Inv4.inv s -> Unnest0.unnest func ( * f) -> Produces0.produces iter (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1) -> PostconditionMut0.postcondition_mut f (e1) b -> Precondition0.precondition ( ^ f) (e2)
  val preservation [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module C05Map_Impl1_Reinitialize_Stub
  type i
  type b
  type f
  predicate reinitialize [#"../05_map.rs" 93 4 93 29] (_1 : ())
end
module C05Map_Impl1_Reinitialize_Interface
  type i
  type b
  type f
  predicate reinitialize [#"../05_map.rs" 93 4 93 29] (_1 : ())
  val reinitialize [#"../05_map.rs" 93 4 93 29] (_1 : ()) : bool
    ensures { result = reinitialize _1 }
    
end
module C05Map_Impl1_Reinitialize
  type i
  type b
  type f
  use prelude.Borrow
  clone C05Map_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  predicate reinitialize [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [#"../05_map.rs" 94 8 98 9] forall func : f . forall iter : borrowed i . Inv0.inv func -> Inv1.inv iter -> Completed0.completed iter -> NextPrecondition0.next_precondition ( ^ iter) func /\ Preservation0.preservation ( ^ iter) func
  val reinitialize [#"../05_map.rs" 93 4 93 29] (_1 : ()) : bool
    ensures { result = reinitialize _1 }
    
end
module C05Map_Impl2_Invariant_Stub
  type i
  type b
  type f
  use C05Map_Map_Type as C05Map_Map_Type
  predicate invariant' [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f)
end
module C05Map_Impl2_Invariant_Interface
  type i
  type b
  type f
  use C05Map_Map_Type as C05Map_Map_Type
  predicate invariant' [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f)
  val invariant' [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = invariant' self }
    
end
module C05Map_Impl2_Invariant
  type i
  type b
  type f
  clone C05Map_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  use C05Map_Map_Type as C05Map_Map_Type
  predicate invariant' [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) =
    [#"../05_map.rs" 133 12 135 57] Reinitialize0.reinitialize () /\ Preservation0.preservation (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self) /\ NextPrecondition0.next_precondition (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  val invariant' [#"../05_map.rs" 131 4 131 30] (self : C05Map_Map_Type.t_map i b f) : bool
    ensures { result = invariant' self }
    
end
module C05Map_Map_Type_Inv
  type i
  type b
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = f
  use C05Map_Map_Type as C05Map_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone C05Map_Impl2_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  axiom inv_t_map [@rewrite] : forall self : C05Map_Map_Type.t_map i b f . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv (C05Map_Map_Type.map_iter self) /\ Inv2.inv (C05Map_Map_Type.map_func self))
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 101 4 101 10] ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function unnest_refl (self : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function unnest_refl (self : f) : ()
  val unnest_refl (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function unnest_refl (self : f) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 107 4 107 10] ()
  val unnest_refl (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Stub
  type args
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface
  type args
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans
  type args
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 112 4 112 10] ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition_once (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_once self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition_once (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_once self _2 _3 }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)))
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)))
end
module C05Map_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
end
module C05Map_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Inv0.inv a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Inv0.inv a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C05Map_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Inv0.inv a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Inv0.inv a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C05Map_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C05Map_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Inv0.inv a}
    requires {[#"../common.rs" 21 31 21 33] Inv1.inv ab}
    requires {[#"../common.rs" 21 52 21 53] Inv0.inv b}
    requires {[#"../common.rs" 21 61 21 63] Inv1.inv bc}
    requires {[#"../common.rs" 21 82 21 83] Inv0.inv c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Inv0.inv a) -> ([#"../common.rs" 21 31 21 33] Inv1.inv ab) -> ([#"../common.rs" 21 52 21 53] Inv0.inv b) -> ([#"../common.rs" 21 61 21 63] Inv1.inv bc) -> ([#"../common.rs" 21 82 21 83] Inv0.inv c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C05Map_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Inv0.inv a}
    requires {[#"../common.rs" 21 31 21 33] Inv1.inv ab}
    requires {[#"../common.rs" 21 52 21 53] Inv0.inv b}
    requires {[#"../common.rs" 21 61 21 63] Inv1.inv bc}
    requires {[#"../common.rs" 21 82 21 83] Inv0.inv c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Inv0.inv a) -> ([#"../common.rs" 21 31 21 33] Inv1.inv ab) -> ([#"../common.rs" 21 52 21 53] Inv0.inv b) -> ([#"../common.rs" 21 61 21 63] Inv1.inv bc) -> ([#"../common.rs" 21 82 21 83] Inv0.inv c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C05Map_Impl0_ProducesRefl_Stub
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  function produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i b f) : ()
end
module C05Map_Impl0_ProducesRefl_Interface
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  function produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i b f) : ()
  val produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i b f) : ()
    requires {[#"../05_map.rs" 29 21 29 22] Inv0.inv a}
    ensures { [#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 29 21 29 22] Inv0.inv a) -> ([#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a)
end
module C05Map_Impl0_ProducesRefl
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  function produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i b f) : () =
    [#"../05_map.rs" 26 4 26 10] ()
  val produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i b f) : ()
    requires {[#"../05_map.rs" 29 21 29 22] Inv0.inv a}
    ensures { [#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 29 21 29 22] Inv0.inv a) -> ([#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a)
end
module C05Map_Impl0_ProducesRefl_Impl
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = Item0.item,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = borrowed i,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = b
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = b,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = borrowed f
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = borrowed f,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone C05Map_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = f
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = f,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = i,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv9.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  use seq.Seq
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq Item0.item
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv7.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Inv3.inv = Inv9.inv,
    predicate Inv4.inv = Inv1.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv8.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Seq.seq (borrowed f)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Seq.seq (borrowed f),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv1.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = Item0.item,
    type f = f,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv6.inv,
    predicate Inv2.inv = Inv7.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv5.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = Item0.item,
    type f = f,
    predicate Inv0.inv = Inv4.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv6.inv,
    predicate Inv2.inv = Inv7.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  clone C05Map_Map_Type_Inv as C05Map_Map_Type_Inv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv4.inv,
    axiom .
  clone C05Map_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv1.inv = Inv2.inv,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  let rec ghost function produces_refl [#"../05_map.rs" 29 4 29 29] (a : C05Map_Map_Type.t_map i b f) : ()
    requires {[#"../05_map.rs" 29 21 29 22] Inv0.inv a}
    ensures { [#"../05_map.rs" 28 14 28 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 26 4 26 10] ()
end
module C05Map_Impl0_ProducesTrans_Stub
  type i
  type b
  type f
  use seq.Seq
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  function produces_trans [#"../05_map.rs" 36 4 36 90] (a : C05Map_Map_Type.t_map i b f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i b f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i b f) : ()
    
end
module C05Map_Impl0_ProducesTrans_Interface
  type i
  type b
  type f
  use seq.Seq
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  function produces_trans [#"../05_map.rs" 36 4 36 90] (a : C05Map_Map_Type.t_map i b f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i b f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i b f) : ()
    
  val produces_trans [#"../05_map.rs" 36 4 36 90] (a : C05Map_Map_Type.t_map i b f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i b f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i b f) : ()
    requires {[#"../05_map.rs" 33 15 33 32] Produces0.produces a ab b}
    requires {[#"../05_map.rs" 34 15 34 32] Produces0.produces b bc c}
    requires {[#"../05_map.rs" 36 22 36 23] Inv0.inv a}
    requires {[#"../05_map.rs" 36 31 36 33] Inv1.inv ab}
    requires {[#"../05_map.rs" 36 52 36 53] Inv0.inv b}
    requires {[#"../05_map.rs" 36 61 36 63] Inv1.inv bc}
    requires {[#"../05_map.rs" 36 82 36 83] Inv0.inv c}
    ensures { [#"../05_map.rs" 35 14 35 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C05Map_Map_Type.t_map i b f, ab : Seq.seq b, b : C05Map_Map_Type.t_map i b f, bc : Seq.seq b, c : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 33 15 33 32] Produces0.produces a ab b) -> ([#"../05_map.rs" 34 15 34 32] Produces0.produces b bc c) -> ([#"../05_map.rs" 36 22 36 23] Inv0.inv a) -> ([#"../05_map.rs" 36 31 36 33] Inv1.inv ab) -> ([#"../05_map.rs" 36 52 36 53] Inv0.inv b) -> ([#"../05_map.rs" 36 61 36 63] Inv1.inv bc) -> ([#"../05_map.rs" 36 82 36 83] Inv0.inv c) -> ([#"../05_map.rs" 35 14 35 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C05Map_Impl0_ProducesTrans
  type i
  type b
  type f
  use seq.Seq
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  function produces_trans [#"../05_map.rs" 36 4 36 90] (a : C05Map_Map_Type.t_map i b f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i b f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i b f) : ()
    
   =
    [#"../05_map.rs" 31 4 31 10] ()
  val produces_trans [#"../05_map.rs" 36 4 36 90] (a : C05Map_Map_Type.t_map i b f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i b f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i b f) : ()
    requires {[#"../05_map.rs" 33 15 33 32] Produces0.produces a ab b}
    requires {[#"../05_map.rs" 34 15 34 32] Produces0.produces b bc c}
    requires {[#"../05_map.rs" 36 22 36 23] Inv0.inv a}
    requires {[#"../05_map.rs" 36 31 36 33] Inv1.inv ab}
    requires {[#"../05_map.rs" 36 52 36 53] Inv0.inv b}
    requires {[#"../05_map.rs" 36 61 36 63] Inv1.inv bc}
    requires {[#"../05_map.rs" 36 82 36 83] Inv0.inv c}
    ensures { [#"../05_map.rs" 35 14 35 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C05Map_Map_Type.t_map i b f, ab : Seq.seq b, b : C05Map_Map_Type.t_map i b f, bc : Seq.seq b, c : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 33 15 33 32] Produces0.produces a ab b) -> ([#"../05_map.rs" 34 15 34 32] Produces0.produces b bc c) -> ([#"../05_map.rs" 36 22 36 23] Inv0.inv a) -> ([#"../05_map.rs" 36 31 36 33] Inv1.inv ab) -> ([#"../05_map.rs" 36 52 36 53] Inv0.inv b) -> ([#"../05_map.rs" 36 61 36 63] Inv1.inv bc) -> ([#"../05_map.rs" 36 82 36 83] Inv0.inv c) -> ([#"../05_map.rs" 35 14 35 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C05Map_Impl0_ProducesTrans_Impl
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = Item0.item,
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = borrowed i,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone C05Map_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = b
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = b,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Item0.item,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = borrowed f
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = borrowed f,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = f
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = f,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = i,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv10.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  use seq.Seq
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Seq.seq Item0.item
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv8.inv,
    predicate Inv2.inv = Inv6.inv,
    predicate Inv3.inv = Inv10.inv,
    predicate Inv4.inv = Inv2.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv9.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Seq.seq (borrowed f)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Seq.seq (borrowed f),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv2.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv4.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = Item0.item,
    type f = f,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv7.inv,
    predicate Inv2.inv = Inv8.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv6.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = Item0.item,
    type f = f,
    predicate Inv0.inv = Inv5.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv7.inv,
    predicate Inv2.inv = Inv8.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq b
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Seq.seq b,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  clone C05Map_Map_Type_Inv as C05Map_Map_Type_Inv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv5.inv,
    axiom .
  clone C05Map_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv1.inv = Inv3.inv,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  let rec ghost function produces_trans [#"../05_map.rs" 36 4 36 90] (a : C05Map_Map_Type.t_map i b f) (ab : Seq.seq b) (b : C05Map_Map_Type.t_map i b f) (bc : Seq.seq b) (c : C05Map_Map_Type.t_map i b f) : ()
    requires {[#"../05_map.rs" 33 15 33 32] Produces0.produces a ab b}
    requires {[#"../05_map.rs" 34 15 34 32] Produces0.produces b bc c}
    requires {[#"../05_map.rs" 36 22 36 23] Inv0.inv a}
    requires {[#"../05_map.rs" 36 31 36 33] Inv1.inv ab}
    requires {[#"../05_map.rs" 36 52 36 53] Inv0.inv b}
    requires {[#"../05_map.rs" 36 61 36 63] Inv1.inv bc}
    requires {[#"../05_map.rs" 36 82 36 83] Inv0.inv c}
    ensures { [#"../05_map.rs" 35 14 35 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 31 4 31 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C05Map_Impl1_ProducesOne_Stub
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  predicate produces_one [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f)
    
end
module C05Map_Impl1_ProducesOne_Interface
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  predicate produces_one [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f)
    
  val produces_one [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f) : bool
    requires {[#"../05_map.rs" 117 20 117 24] Inv0.inv self}
    requires {[#"../05_map.rs" 117 26 117 33] Inv1.inv visited}
    requires {[#"../05_map.rs" 117 38 117 42] Inv0.inv succ}
    ensures { [#"../05_map.rs" 116 14 116 68] result = Produces0.produces self (Seq.singleton visited) succ }
    ensures { result = produces_one self visited succ }
    
  axiom produces_one_spec : forall self : C05Map_Map_Type.t_map i b f, visited : b, succ : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 117 20 117 24] Inv0.inv self) -> ([#"../05_map.rs" 117 26 117 33] Inv1.inv visited) -> ([#"../05_map.rs" 117 38 117 42] Inv0.inv succ) -> ([#"../05_map.rs" 116 14 116 68] produces_one self visited succ = Produces0.produces self (Seq.singleton visited) succ)
end
module C05Map_Impl1_ProducesOne
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Stub as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed f
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  predicate produces_one [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f)
    
   =
    [#"../05_map.rs" 118 8 123 9] exists f : borrowed f . Inv2.inv f /\  * f = C05Map_Map_Type.map_func self /\  ^ f = C05Map_Map_Type.map_func succ /\ (exists e : Item0.item . Inv3.inv e /\ Produces1.produces (C05Map_Map_Type.map_iter self) (Seq.singleton e) (C05Map_Map_Type.map_iter succ) /\ Precondition0.precondition ( * f) (e) /\ PostconditionMut0.postcondition_mut f (e) visited)
  val produces_one [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f) : bool
    requires {[#"../05_map.rs" 117 20 117 24] Inv0.inv self}
    requires {[#"../05_map.rs" 117 26 117 33] Inv1.inv visited}
    requires {[#"../05_map.rs" 117 38 117 42] Inv0.inv succ}
    ensures { [#"../05_map.rs" 116 14 116 68] result = Produces0.produces self (Seq.singleton visited) succ }
    ensures { result = produces_one self visited succ }
    
  axiom produces_one_spec : forall self : C05Map_Map_Type.t_map i b f, visited : b, succ : C05Map_Map_Type.t_map i b f . ([#"../05_map.rs" 117 20 117 24] Inv0.inv self) -> ([#"../05_map.rs" 117 26 117 33] Inv1.inv visited) -> ([#"../05_map.rs" 117 38 117 42] Inv0.inv succ) -> ([#"../05_map.rs" 116 14 116 68] produces_one self visited succ = Produces0.produces self (Seq.singleton visited) succ)
end
module C05Map_Impl1_ProducesOne_Impl
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = borrowed i,
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone C05Map_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = Item0.item,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Seq.seq b
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Seq.seq b,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = f
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = f,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = i,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Item0.item
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = b
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate Inv3.inv = Inv3.inv,
    predicate Inv4.inv = Inv4.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv7.inv,
    predicate Inv1.inv = Inv10.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Seq.seq (borrowed f)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Seq.seq (borrowed f),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = Item0.item,
    type f = f,
    predicate Inv0.inv = Inv7.inv,
    predicate Inv1.inv = Inv9.inv,
    predicate Inv2.inv = Inv1.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv2.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = Item0.item,
    type f = f,
    predicate Inv0.inv = Inv7.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv9.inv,
    predicate Inv2.inv = Inv1.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Item0.item,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv4.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = i,
    predicate Inv0.inv = Inv6.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed f,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  clone C05Map_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv4.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv1.inv = Inv5.inv,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl0_ProducesTrans as ProducesTrans0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone C05Map_Impl0_ProducesRefl as ProducesRefl0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = b,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone C05Map_Map_Type_Inv as C05Map_Map_Type_Inv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv6.inv,
    predicate Inv2.inv = Inv7.inv,
    axiom .
  let rec ghost predicate produces_one [#"../05_map.rs" 117 4 117 57] (self : C05Map_Map_Type.t_map i b f) (visited : b) (succ : C05Map_Map_Type.t_map i b f)
    requires {[#"../05_map.rs" 117 20 117 24] Inv0.inv self}
    requires {[#"../05_map.rs" 117 26 117 33] Inv1.inv visited}
    requires {[#"../05_map.rs" 117 38 117 42] Inv0.inv succ}
    ensures { [#"../05_map.rs" 116 14 116 68] result = Produces0.produces self (Seq.singleton visited) succ }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 118 8 123 9] pure {exists f : borrowed f . Inv2.inv f /\  * f = C05Map_Map_Type.map_func self /\  ^ f = C05Map_Map_Type.map_func succ /\ (exists e : Item0.item . Inv3.inv e /\ Produces1.produces (C05Map_Map_Type.map_iter self) (Seq.singleton e) (C05Map_Map_Type.map_iter succ) /\ Precondition0.precondition ( * f) (e) /\ PostconditionMut0.postcondition_mut f (e) visited)}
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C05Map_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C05Map_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  val next [#"../common.rs" 27 4 27 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 27 17 27 21] Inv0.inv self}
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 26 27 44] Inv1.inv result }
    
end
module C05Map_Impl1_ProducesOneInvariant_Stub
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C05Map_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv4 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Item0.item
  use C05Map_Map_Type as C05Map_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  function produces_one_invariant [#"../05_map.rs" 107 4 107 73] (self : C05Map_Map_Type.t_map i b f) (e : Item0.item) (r : b) (f : borrowed f) (iter : i) : ()
    
end
module C05Map_Impl1_ProducesOneInvariant_Interface
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C05Map_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv4 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Item0.item
  use C05Map_Map_Type as C05Map_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  function produces_one_invariant [#"../05_map.rs" 107 4 107 73] (self : C05Map_Map_Type.t_map i b f) (e : Item0.item) (r : b) (f : borrowed f) (iter : i) : ()
    
  val produces_one_invariant [#"../05_map.rs" 107 4 107 73] (self : C05Map_Map_Type.t_map i b f) (e : Item0.item) (r : b) (f : borrowed f) (iter : i) : ()
    requires {[#"../05_map.rs" 102 4 102 60] Produces0.produces (C05Map_Map_Type.map_iter self) (Seq.singleton e) iter}
    requires {[#"../05_map.rs" 103 15 103 30]  * f = C05Map_Map_Type.map_func self}
    requires {[#"../05_map.rs" 104 15 104 43] PostconditionMut0.postcondition_mut f (e) r}
    requires {[#"../05_map.rs" 107 30 107 34] Inv0.inv self}
    requires {[#"../05_map.rs" 107 36 107 37] Inv1.inv e}
    requires {[#"../05_map.rs" 107 48 107 49] Inv2.inv r}
    requires {[#"../05_map.rs" 107 54 107 55] Inv3.inv f}
    requires {[#"../05_map.rs" 107 65 107 69] Inv4.inv iter}
    ensures { [#"../05_map.rs" 105 14 105 42] Preservation0.preservation iter ( ^ f) }
    ensures { [#"../05_map.rs" 106 14 106 47] NextPrecondition0.next_precondition iter ( ^ f) }
    ensures { result = produces_one_invariant self e r f iter }
    
  axiom produces_one_invariant_spec : forall self : C05Map_Map_Type.t_map i b f, e : Item0.item, r : b, f : borrowed f, iter : i . ([#"../05_map.rs" 102 4 102 60] Produces0.produces (C05Map_Map_Type.map_iter self) (Seq.singleton e) iter) -> ([#"../05_map.rs" 103 15 103 30]  * f = C05Map_Map_Type.map_func self) -> ([#"../05_map.rs" 104 15 104 43] PostconditionMut0.postcondition_mut f (e) r) -> ([#"../05_map.rs" 107 30 107 34] Inv0.inv self) -> ([#"../05_map.rs" 107 36 107 37] Inv1.inv e) -> ([#"../05_map.rs" 107 48 107 49] Inv2.inv r) -> ([#"../05_map.rs" 107 54 107 55] Inv3.inv f) -> ([#"../05_map.rs" 107 65 107 69] Inv4.inv iter) -> ([#"../05_map.rs" 106 14 106 47] NextPrecondition0.next_precondition iter ( ^ f)) && ([#"../05_map.rs" 105 14 105 42] Preservation0.preservation iter ( ^ f))
end
module C05Map_Impl1_ProducesOneInvariant
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv5 with
    type t = Seq.seq Item0.item
  clone C05Map_Impl1_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv4 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Item0.item
  use C05Map_Map_Type as C05Map_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  function produces_one_invariant [#"../05_map.rs" 107 4 107 73] (self : C05Map_Map_Type.t_map i b f) (e : Item0.item) (r : b) (f : borrowed f) (iter : i) : ()
    
  val produces_one_invariant [#"../05_map.rs" 107 4 107 73] (self : C05Map_Map_Type.t_map i b f) (e : Item0.item) (r : b) (f : borrowed f) (iter : i) : ()
    requires {[#"../05_map.rs" 102 4 102 60] Produces0.produces (C05Map_Map_Type.map_iter self) (Seq.singleton e) iter}
    requires {[#"../05_map.rs" 103 15 103 30]  * f = C05Map_Map_Type.map_func self}
    requires {[#"../05_map.rs" 104 15 104 43] PostconditionMut0.postcondition_mut f (e) r}
    requires {[#"../05_map.rs" 107 30 107 34] Inv0.inv self}
    requires {[#"../05_map.rs" 107 36 107 37] Inv1.inv e}
    requires {[#"../05_map.rs" 107 48 107 49] Inv2.inv r}
    requires {[#"../05_map.rs" 107 54 107 55] Inv3.inv f}
    requires {[#"../05_map.rs" 107 65 107 69] Inv4.inv iter}
    ensures { [#"../05_map.rs" 105 14 105 42] Preservation0.preservation iter ( ^ f) }
    ensures { [#"../05_map.rs" 106 14 106 47] NextPrecondition0.next_precondition iter ( ^ f) }
    ensures { result = produces_one_invariant self e r f iter }
    
  axiom produces_one_invariant_spec : forall self : C05Map_Map_Type.t_map i b f, e : Item0.item, r : b, f : borrowed f, iter : i . ([#"../05_map.rs" 102 4 102 60] Produces0.produces (C05Map_Map_Type.map_iter self) (Seq.singleton e) iter) -> ([#"../05_map.rs" 103 15 103 30]  * f = C05Map_Map_Type.map_func self) -> ([#"../05_map.rs" 104 15 104 43] PostconditionMut0.postcondition_mut f (e) r) -> ([#"../05_map.rs" 107 30 107 34] Inv0.inv self) -> ([#"../05_map.rs" 107 36 107 37] Inv1.inv e) -> ([#"../05_map.rs" 107 48 107 49] Inv2.inv r) -> ([#"../05_map.rs" 107 54 107 55] Inv3.inv f) -> ([#"../05_map.rs" 107 65 107 69] Inv4.inv iter) -> ([#"../05_map.rs" 106 14 106 47] NextPrecondition0.next_precondition iter ( ^ f)) && ([#"../05_map.rs" 105 14 105 42] Preservation0.preservation iter ( ^ f))
end
module C05Map_Impl1_ProducesOneInvariant_Impl
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = borrowed i,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone C05Map_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = i
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Inv2.inv = Inv3.inv,
    predicate Inv3.inv = Inv1.inv,
    predicate Inv4.inv = Inv5.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = f
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv7.inv,
    predicate Inv1.inv = Inv8.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = f,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = i,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed f,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = b,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  clone C05Map_Map_Type_Inv as C05Map_Map_Type_Inv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = Item0.item,
    type f = f,
    predicate Inv0.inv = Inv7.inv,
    predicate Inv1.inv = Inv6.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv3.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = Item0.item,
    type f = f,
    predicate Inv0.inv = Inv7.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv6.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv5.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv4.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  let rec ghost function produces_one_invariant [#"../05_map.rs" 107 4 107 73] (self : C05Map_Map_Type.t_map i b f) (e : Item0.item) (r : b) (f : borrowed f) (iter : i) : ()
    requires {[#"../05_map.rs" 102 4 102 60] Produces0.produces (C05Map_Map_Type.map_iter self) (Seq.singleton e) iter}
    requires {[#"../05_map.rs" 103 15 103 30]  * f = C05Map_Map_Type.map_func self}
    requires {[#"../05_map.rs" 104 15 104 43] PostconditionMut0.postcondition_mut f (e) r}
    requires {[#"../05_map.rs" 107 30 107 34] Inv0.inv self}
    requires {[#"../05_map.rs" 107 36 107 37] Inv1.inv e}
    requires {[#"../05_map.rs" 107 48 107 49] Inv2.inv r}
    requires {[#"../05_map.rs" 107 54 107 55] Inv3.inv f}
    requires {[#"../05_map.rs" 107 65 107 69] Inv4.inv iter}
    ensures { [#"../05_map.rs" 105 14 105 42] Preservation0.preservation iter ( ^ f) }
    ensures { [#"../05_map.rs" 106 14 106 47] NextPrecondition0.next_precondition iter ( ^ f) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_map.rs" 101 4 101 12] let _ = let a = pure {forall i : i . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Inv4.inv i -> Inv1.inv e2 -> Inv1.inv e1 -> Inv5.inv s -> Produces0.produces iter (Seq.snoc (Seq.snoc s e1) e2) i -> Produces0.produces (C05Map_Map_Type.map_iter self) (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i} in assert {a} in ()
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module Core_Ops_Function_FnMut_CallMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = args,
    type f = self
  val call_mut (self : borrowed self) (args : args) : Output0.output
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 160 27 160 52] Precondition0.precondition ( * self) args}
    requires {Inv0.inv self}
    requires {Inv1.inv args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] PostconditionMut0.postcondition_mut self args result }
    ensures { Inv2.inv result }
    
end
module TyInv_Borrow
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  axiom inv_borrow [@rewrite] : forall self : borrowed t . Inv0.inv self = (Inv1.inv ( * self) /\ Inv1.inv ( ^ self))
end
module C05Map_Impl0_Next_Interface
  type i
  type b
  type f
  use prelude.Borrow
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = C05Map_Map_Type.t_map i b f
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option b
  clone C05Map_Impl1_ProducesOne_Stub as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C05Map_Impl0_Completed_Stub as Completed0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (C05Map_Map_Type.t_map i b f)
  val next [#"../05_map.rs" 60 4 60 44] (self : borrowed (C05Map_Map_Type.t_map i b f)) : Core_Option_Option_Type.t_option b
    requires {[#"../05_map.rs" 60 17 60 21] Inv0.inv self}
    ensures { [#"../05_map.rs" 56 14 59 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> ProducesOne0.produces_one ( * self) v ( ^ self)
      end }
    ensures { [#"../05_map.rs" 60 26 60 44] Inv1.inv result }
    
end
module C05Map_Impl0_Next
  type i
  type b
  type f
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = i
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv8.inv,
    predicate Inv2.inv = Inv9.inv,
    predicate Inv3.inv = Inv7.inv,
    predicate Inv4.inv = Inv10.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv7.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C05Map_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = borrowed i
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = f
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Completed0.completed = Completed1.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = Seq.seq (borrowed f)
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = Seq.seq (borrowed f),
    predicate Inv0.inv = Inv12.inv,
    axiom .
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = Item0.item,
    predicate Inv0.inv = Inv11.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = borrowed f,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = b,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Item0.item,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = C05Map_Map_Type.t_map i b f
  clone C05Map_Map_Type_Inv as C05Map_Map_Type_Inv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv6.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv0.inv,
    predicate Inv2.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = Item0.item,
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv11.inv,
    predicate Inv2.inv = Inv8.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv9.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve3.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = Item0.item,
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv9.inv,
    predicate Inv1.inv = Inv11.inv,
    predicate Inv2.inv = Inv8.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = borrowed i,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Core_Option_Option_Type.t_option b
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Core_Option_Option_Type.t_option b,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone C05Map_Impl0_Produces as Produces1 with
    type i = i,
    type b = b,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv10.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv12.inv,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed (C05Map_Map_Type.t_map i b f)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C05Map_Map_Type.t_map i b f,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = f,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Option_Option_Type.t_option Item0.item,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv10.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C05Map_Impl1_ProducesOne as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv8.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv2.inv = Inv9.inv,
    type Item0.item = Item0.item,
    predicate Inv3.inv = Inv7.inv,
    predicate Produces1.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C05Map_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = C05Map_Map_Type.t_map i b f
  clone Core_Ops_Function_FnMut_CallMut_Interface as CallMut0 with
    type self = f,
    type args = Item0.item,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate Inv0.inv = Inv9.inv,
    predicate Inv1.inv = Inv11.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv2.inv = Inv8.inv,
    type Output0.output = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Ghost.ghost_ty ()
  clone C05Map_Impl1_ProducesOneInvariant as ProducesOneInvariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Produces0.produces = Produces0.produces,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv7.inv,
    predicate Inv2.inv = Inv8.inv,
    predicate Inv3.inv = Inv9.inv,
    predicate Inv4.inv = Inv0.inv,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    type Item0.item = Item0.item,
    predicate Inv5.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone C05Map_Common_Iterator_Next_Interface as Next0 with
    type self = i,
    predicate Inv0.inv = Inv5.inv,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv1.inv
  let rec cfg next [#"../05_map.rs" 60 4 60 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C05Map_Map_Type.t_map i b f)) : Core_Option_Option_Type.t_option b
    requires {[#"../05_map.rs" 60 17 60 21] Inv3.inv self}
    ensures { [#"../05_map.rs" 56 14 59 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> ProducesOne0.produces_one ( * self) v ( ^ self)
      end }
    ensures { [#"../05_map.rs" 60 26 60 44] Inv4.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option b;
  var self : borrowed (C05Map_Map_Type.t_map i b f) = self;
  var _3 : Core_Option_Option_Type.t_option Item0.item;
  var _4 : borrowed i;
  var v : Item0.item;
  var _9 : Ghost.ghost_ty ();
  var _11 : b;
  var _12 : borrowed f;
  {
    goto BB0
  }
  BB0 {
    _4 <- Borrow.borrow_mut (C05Map_Map_Type.map_iter ( * self));
    self <- { self with current = (let C05Map_Map_Type.C_Map a b =  * self in C05Map_Map_Type.C_Map ( ^ _4) b) };
    assume { Inv0.inv ( ^ _4) };
    _3 <- ([#"../05_map.rs" 61 14 61 30] Next0.next _4);
    _4 <- any borrowed i;
    goto BB1
  }
  BB1 {
    switch (_3)
      | Core_Option_Option_Type.C_None -> goto BB2
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      end
  }
  BB2 {
    assert { [@expl:type invariant] Inv1.inv _3 };
    assume { Resolve0.resolve _3 };
    assert { [@expl:type invariant] Inv3.inv self };
    assume { Resolve2.resolve self };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB12
  }
  BB3 {
    goto BB5
  }
  BB4 {
    assert { [@expl:type invariant] Inv1.inv _3 };
    assume { Resolve0.resolve _3 };
    assert { [@expl:type invariant] Inv3.inv self };
    assume { Resolve2.resolve self };
    absurd
  }
  BB5 {
    v <- Core_Option_Option_Type.some_0 _3;
    _3 <- (let Core_Option_Option_Type.C_Some a = _3 in Core_Option_Option_Type.C_Some (any Item0.item));
    assert { [@expl:type invariant] Inv1.inv _3 };
    assume { Resolve0.resolve _3 };
    assert { [@expl:assertion] [#"../05_map.rs" 63 16 63 62] Precondition0.precondition (C05Map_Map_Type.map_func ( * self)) (v) };
    goto BB6
  }
  BB6 {
    _9 <- ([#"../05_map.rs" 64 16 64 52] Ghost.new ());
    goto BB7
  }
  BB7 {
    assume { Resolve1.resolve _9 };
    _12 <- Borrow.borrow_mut (C05Map_Map_Type.map_func ( * self));
    self <- { self with current = (let C05Map_Map_Type.C_Map a b =  * self in C05Map_Map_Type.C_Map a ( ^ _12)) };
    assume { Inv2.inv ( ^ _12) };
    _11 <- ([#"../05_map.rs" 65 21 65 35] CallMut0.call_mut _12 (v));
    _12 <- any borrowed f;
    v <- any Item0.item;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    assert { [@expl:type invariant] Inv3.inv self };
    assume { Resolve2.resolve self };
    _0 <- Core_Option_Option_Type.C_Some _11;
    _11 <- any b;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module C05Map_Map_Interface
  type i
  type b
  type f
  use seq.Seq
  use C05Map_Map_Type as C05Map_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = C05Map_Map_Type.t_map i b f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = f
  clone C05Map_Impl1_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Impl1_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  val map [#"../05_map.rs" 144 0 144 84] (iter : i) (func : f) : C05Map_Map_Type.t_map i b f
    requires {[#"../05_map.rs" 140 0 140 105] forall i2 : i . forall e : Item0.item . Inv0.inv i2 -> Inv1.inv e -> Produces0.produces iter (Seq.singleton e) i2 -> Precondition0.precondition func (e)}
    requires {[#"../05_map.rs" 141 11 141 41] Reinitialize0.reinitialize ()}
    requires {[#"../05_map.rs" 142 11 142 51] Preservation0.preservation iter func}
    requires {[#"../05_map.rs" 144 51 144 55] Inv0.inv iter}
    requires {[#"../05_map.rs" 144 60 144 64] Inv2.inv func}
    ensures { [#"../05_map.rs" 143 10 143 38] result = C05Map_Map_Type.C_Map iter func }
    ensures { [#"../05_map.rs" 144 72 144 84] Inv3.inv result }
    
end
module C05Map_Map
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Item0.item,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item0.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = i
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  use seq.Seq
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item0.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item0.item,
    type f = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = b
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Inv2.inv = Inv6.inv,
    predicate Inv3.inv = Inv1.inv,
    predicate Inv4.inv = Inv7.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = borrowed i
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = f
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = Item0.item,
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv8.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv6.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = Item0.item,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = Item0.item,
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = Item0.item,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv8.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = borrowed f,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = b,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed i,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = C05Map_Map_Type.t_map i b f
  clone C05Map_Map_Type_Inv as C05Map_Map_Type_Inv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv0.inv,
    predicate Inv2.inv = Inv2.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = f,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C05Map_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv7.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C05Map_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  let rec cfg map [#"../05_map.rs" 144 0 144 84] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) (func : f) : C05Map_Map_Type.t_map i b f
    requires {[#"../05_map.rs" 140 0 140 105] forall i2 : i . forall e : Item0.item . Inv0.inv i2 -> Inv1.inv e -> Produces0.produces iter (Seq.singleton e) i2 -> Precondition0.precondition func (e)}
    requires {[#"../05_map.rs" 141 11 141 41] Reinitialize0.reinitialize ()}
    requires {[#"../05_map.rs" 142 11 142 51] Preservation0.preservation iter func}
    requires {[#"../05_map.rs" 144 51 144 55] Inv0.inv iter}
    requires {[#"../05_map.rs" 144 60 144 64] Inv2.inv func}
    ensures { [#"../05_map.rs" 143 10 143 38] result = C05Map_Map_Type.C_Map iter func }
    ensures { [#"../05_map.rs" 144 72 144 84] Inv3.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C05Map_Map_Type.t_map i b f;
  var iter : i = iter;
  var func : f = func;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _0 <- C05Map_Map_Type.C_Map iter func;
    iter <- any i;
    func <- any f;
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module C05Map_Impl0
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = borrowed i,
    predicate Inv0.inv = Inv11.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = f
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = f,
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = i,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone C05Map_Common_Iterator_Item_Type as Item1 with
    type self = i
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = Item1.item,
    type f = f
  clone C05Map_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item1.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Item1.item
  clone C05Map_Impl1_NextPrecondition as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item1.item,
    predicate Inv0.inv = Inv9.inv,
    predicate Inv1.inv = Inv8.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  use seq.Seq
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = Item1.item,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = Item1.item,
    type f = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Seq.seq Item1.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = b
  clone C05Map_Impl1_Preservation as Preservation0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item1.item,
    predicate Inv0.inv = Inv9.inv,
    predicate Inv1.inv = Inv6.inv,
    predicate Inv2.inv = Inv7.inv,
    predicate Inv3.inv = Inv8.inv,
    predicate Inv4.inv = Inv4.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C05Map_Impl1_Reinitialize as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv10.inv,
    predicate Inv1.inv = Inv11.inv,
    predicate Completed0.completed = Completed1.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Item1.item,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = borrowed f,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = b,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Seq.seq (borrowed f)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Seq.seq (borrowed f),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Seq.seq Item1.item,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl2_Invariant as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Core_Option_Option_Type.t_option b
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Option_Option_Type.t_option b,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C05Map_Map_Type.t_map i b f
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (C05Map_Map_Type.t_map i b f)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C05Map_Map_Type.t_map i b f,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq b
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Seq.seq b,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone C05Map_Map_Type_Inv as C05Map_Map_Type_Inv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv9.inv,
    predicate Inv2.inv = Inv10.inv,
    axiom .
  clone C05Map_Common_Iterator_Item_Type as Item0 with
    type self = C05Map_Map_Type.t_map i b f
  clone C05Map_Impl0_Produces as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Item0.item = Item1.item,
    predicate Inv0.inv = Inv4.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv1.inv = Inv5.inv,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C05Map_Impl1_ProducesOne as ProducesOne0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv6.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv2.inv = Inv7.inv,
    type Item0.item = Item1.item,
    predicate Inv3.inv = Inv8.inv,
    predicate Produces1.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    axiom .
  clone C05Map_Impl0_Completed as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Completed0.completed = Completed1.completed
  goal produces_trans_refn : [#"../05_map.rs" 36 4 36 90] forall a : C05Map_Map_Type.t_map i b f . forall ab : Seq.seq b . forall b : C05Map_Map_Type.t_map i b f . forall bc : Seq.seq b . forall c : C05Map_Map_Type.t_map i b f . Inv0.inv c /\ Inv1.inv bc /\ Inv0.inv b /\ Inv1.inv ab /\ Inv0.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Inv0.inv c /\ Inv1.inv bc /\ Inv0.inv b /\ Inv1.inv ab /\ Inv0.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
  goal next_refn : [#"../05_map.rs" 60 4 60 44] forall self : borrowed (C05Map_Map_Type.t_map i b f) . Inv2.inv self -> Inv2.inv self /\ (forall result : Core_Option_Option_Type.t_option b . Inv3.inv result /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> ProducesOne0.produces_one ( * self) v ( ^ self)
    end -> Inv3.inv result /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_refl_refn : [#"../05_map.rs" 29 4 29 29] forall a : C05Map_Map_Type.t_map i b f . Inv0.inv a -> Inv0.inv a /\ (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
end
module C05Map_Impl2
  type i
  type b
  type f
end
