
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module T_10_once__Once
  use T_core__option__Option as Option'0
  
  type t_Once 't =
    | C_Once (Option'0.t_Option 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Once < 't > (input:t_Once 't) (ret  (field_0:Option'0.t_Option 't))= any
    [ good (field_0:Option'0.t_Option 't)-> {C_Once field_0 = input} (! ret {field_0})
    | bad (field_0:Option'0.t_Option 't)-> {C_Once field_0 <> input} {false} any ]
    
end
module M_10_once__qy123zimplqy35z0qy125z__produces_refl__Impl
  type t
  
  let%span s10_once0 = "../10_once.rs" 30 15 30 24
  
  let%span s10_once1 = "../10_once.rs" 31 14 31 45
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../10_once.rs" 22 8 25 9
  
  use T_10_once__Once as Once'0
  
  predicate invariant'0 (self : Once'0.t_Once t) =
    [%#span2] true
  
  predicate inv'0 (_1 : Once'0.t_Once t)
  
  axiom inv'0 : forall x : Once'0.t_Once t . inv'0 x = true
  
  use seq.Seq
  
  use T_core__option__Option as Option'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../10_once.rs" 21 4 21 64] (self : Once'0.t_Once t) (visited : Seq.seq t) (o : Once'0.t_Once t)
    
   =
    [%#span3] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . self = Once'0.C_Once (Option'0.C_Some e)
    /\ visited = Seq.singleton e /\ o = Once'0.C_Once (Option'0.C_None))
  
  constant self  : Once'0.t_Once t
  
  function produces_refl [#"../10_once.rs" 32 4 32 26] (self : Once'0.t_Once t) : ()
  
  goal vc_produces_refl : ([%#s10_once0] inv'0 self)  -> ([%#s10_once1] produces'0 self (Seq.empty  : Seq.seq t) self)
end
module M_10_once__qy123zimplqy35z0qy125z__produces_trans__Impl
  type t
  
  let%span s10_once0 = "../10_once.rs" 36 15 36 21
  
  let%span s10_once1 = "../10_once.rs" 37 15 37 21
  
  let%span s10_once2 = "../10_once.rs" 38 15 38 21
  
  let%span s10_once3 = "../10_once.rs" 39 15 39 32
  
  let%span s10_once4 = "../10_once.rs" 40 15 40 32
  
  let%span s10_once5 = "../10_once.rs" 41 14 41 42
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../10_once.rs" 22 8 25 9
  
  use T_10_once__Once as Once'0
  
  predicate invariant'0 (self : Once'0.t_Once t) =
    [%#span6] true
  
  predicate inv'0 (_1 : Once'0.t_Once t)
  
  axiom inv'0 : forall x : Once'0.t_Once t . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use T_core__option__Option as Option'0
  
  use seq.Seq
  
  predicate produces'0 [#"../10_once.rs" 21 4 21 64] (self : Once'0.t_Once t) (visited : Seq.seq t) (o : Once'0.t_Once t)
    
   =
    [%#span7] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . self = Once'0.C_Once (Option'0.C_Some e)
    /\ visited = Seq.singleton e /\ o = Once'0.C_Once (Option'0.C_None))
  
  constant a  : Once'0.t_Once t
  
  constant ab  : Seq.seq t
  
  constant b  : Once'0.t_Once t
  
  constant bc  : Seq.seq t
  
  constant c  : Once'0.t_Once t
  
  function produces_trans [#"../10_once.rs" 42 4 42 90] (a : Once'0.t_Once t) (ab : Seq.seq t) (b : Once'0.t_Once t) (bc : Seq.seq t) (c : Once'0.t_Once t) : ()
    
  
  goal vc_produces_trans : ([%#s10_once4] produces'0 b bc c)
   -> ([%#s10_once3] produces'0 a ab b)
   -> ([%#s10_once2] inv'0 c)
   -> ([%#s10_once1] inv'0 b)  -> ([%#s10_once0] inv'0 a)  -> ([%#s10_once5] produces'0 a (Seq.(++) ab bc) c)
end
module M_10_once__qy123zimplqy35z0qy125z__next
  type t
  
  let%span s10_once0 = "../10_once.rs" 48 17 48 21
  
  let%span s10_once1 = "../10_once.rs" 44 14 47 5
  
  let%span s10_once2 = "../10_once.rs" 48 26 48 35
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span5 = "../10_once.rs" 22 8 25 9
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span7 = "../10_once.rs" 16 20 16 57
  
  let%span span8 = "" 0 0 0 0
  
  let%span span9 = "../../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span10 = "" 0 0 0 0
  
  use T_10_once__Once as Once'0
  
  predicate invariant'3 (self : Once'0.t_Once t) =
    [%#span3] true
  
  predicate inv'3 (_1 : Once'0.t_Once t)
  
  axiom inv'3 : forall x : Once'0.t_Once t . inv'3 x = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'0 (_1 : Option'0.t_Option t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Option'0.t_Option t)) =
    [%#span4] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (Option'0.t_Option t))
  
  axiom inv'2 : forall x : borrowed (Option'0.t_Option t) . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (Once'0.t_Once t)) =
    [%#span4] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'1 (_1 : borrowed (Once'0.t_Once t))
  
  axiom inv'1 : forall x : borrowed (Once'0.t_Once t) . inv'1 x = true
  
  predicate invariant'0 (self : Option'0.t_Option t) =
    [%#span3] true
  
  axiom inv'0 : forall x : Option'0.t_Option t . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../10_once.rs" 21 4 21 64] (self : Once'0.t_Once t) (visited : Seq.seq t) (o : Once'0.t_Once t)
    
   =
    [%#span5] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . self = Once'0.C_Once (Option'0.C_Some e)
    /\ visited = Seq.singleton e /\ o = Once'0.C_Once (Option'0.C_None))
  
  predicate resolve'0 (self : borrowed (Once'0.t_Once t)) =
    [%#span6] self.final = self.current
  
  predicate completed'0 [#"../10_once.rs" 15 4 15 35] (self : borrowed (Once'0.t_Once t)) =
    [%#span7] self.current = Once'0.C_Once (Option'0.C_None) /\ resolve'0 self
  
  use prelude.prelude.Intrinsic
  
  let rec take'0 (self:borrowed (Option'0.t_Option t)) (return'  (ret:Option'0.t_Option t))= {[@expl:precondition] [%#span8] inv'2 self}
    any
    [ return' (result:Option'0.t_Option t)-> {[%#span10] inv'0 result}
      {[%#span9] result = self.current /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec next (self:borrowed (Once'0.t_Once t)) (return'  (ret:Option'0.t_Option t))= {[%#s10_once0] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Once'0.t_Once <t> {self.current}
          (fun (r0'0:Option'0.t_Option t) ->
            Borrow.borrow_final <Option'0.t_Option t> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_Option t)) ->
                 [ &_3 <- _ret' ] 
                Once'0.t_Once <t> {self.current}
                  (fun (l_0'0:Option'0.t_Option t) ->
                     [ &self <- { self with current = Once'0.C_Once _3.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _3.final}- s2
      | s2 = take'0 {_3} (fun (_ret':Option'0.t_Option t) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : Option'0.t_Option t = any_l ()
    | & self : borrowed (Once'0.t_Once t) = self
    | & _3 : borrowed (Option'0.t_Option t) = any_l () ]
    
    [ return' (result:Option'0.t_Option t)-> {[@expl:postcondition] [%#s10_once2] inv'0 result}
      {[@expl:postcondition] [%#s10_once1] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_10_once__qy123zimplqy35z0qy125z
  type t
  
  let%span s10_once0 = "../10_once.rs" 48 4 48 35
  
  let%span s10_once1 = "../10_once.rs" 42 4 42 90
  
  let%span s10_once2 = "../10_once.rs" 32 4 32 26
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span5 = "../10_once.rs" 22 8 25 9
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span7 = "../10_once.rs" 16 20 16 57
  
  use T_10_once__Once as Once'0
  
  predicate invariant'2 (self : Once'0.t_Once t) =
    [%#span3] true
  
  predicate inv'2 (_1 : Once'0.t_Once t)
  
  axiom inv'2 : forall x : Once'0.t_Once t . inv'2 x = true
  
  use T_core__option__Option as Option'0
  
  predicate invariant'1 (self : Option'0.t_Option t) =
    [%#span3] true
  
  predicate inv'1 (_1 : Option'0.t_Option t)
  
  axiom inv'1 : forall x : Option'0.t_Option t . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Once'0.t_Once t)) =
    [%#span4] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'0 (_1 : borrowed (Once'0.t_Once t))
  
  axiom inv'0 : forall x : borrowed (Once'0.t_Once t) . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../10_once.rs" 21 4 21 64] (self : Once'0.t_Once t) (visited : Seq.seq t) (o : Once'0.t_Once t)
    
   =
    [%#span5] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . self = Once'0.C_Once (Option'0.C_Some e)
    /\ visited = Seq.singleton e /\ o = Once'0.C_Once (Option'0.C_None))
  
  predicate resolve'0 (self : borrowed (Once'0.t_Once t)) =
    [%#span6] self.final = self.current
  
  predicate completed'0 [#"../10_once.rs" 15 4 15 35] (self : borrowed (Once'0.t_Once t)) =
    [%#span7] self.current = Once'0.C_Once (Option'0.C_None) /\ resolve'0 self
  
  goal next_refn : [%#s10_once0] forall self : borrowed (Once'0.t_Once t) . inv'0 self
   -> inv'0 self
  /\ (forall result : Option'0.t_Option t . inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_trans_refn : [%#s10_once1] forall a : Once'0.t_Once t . forall ab : Seq.seq t . forall b : Once'0.t_Once t . forall bc : Seq.seq t . forall c : Once'0.t_Once t . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'2 c /\ inv'2 b /\ inv'2 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'2 c
  /\ inv'2 b /\ inv'2 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal produces_refl_refn : [%#s10_once2] forall self : Once'0.t_Once t . inv'2 self
   -> inv'2 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t) self
   -> produces'0 self (Seq.empty  : Seq.seq t) self)
end
