
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C10Once_Once_Type
  use Core_Option_Option_Type as Option'0
  
  type t_once 't =
    | C_Once (Option'0.t_option 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_once < 't > (input:t_once 't) (ret  (field_0:Option'0.t_option 't))= any
    [ good (field_0:Option'0.t_option 't)-> {C_Once field_0 = input} (! ret {field_0})
    | bad (field_0:Option'0.t_option 't)-> {C_Once field_0 <> input} {false} any ]
    
end
module C10Once_Impl0_ProducesRefl_Impl
  type t
  
  let%span s10_once0 = "../10_once.rs" 31 21 31 25
  
  let%span s10_once1 = "../10_once.rs" 30 14 30 45
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../10_once.rs" 22 8 25 9
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  use C10Once_Once_Type as Once'0
  
  predicate invariant'0 (self : Once'0.t_once t) =
    [%#span2] true
  
  predicate inv'0 (_x : Once'0.t_once t)
  
  axiom inv'0 : forall x : Once'0.t_once t . inv'0 x = true
  
  use seq.Seq
  
  use Core_Option_Option_Type as Option'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../10_once.rs" 21 4 21 64] (self : Once'0.t_once t) (visited : Seq.seq t) (o : Once'0.t_once t)
    
   =
    [%#span3] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . inv'1 e
    /\ self = Once'0.C_Once (Option'0.C_Some e) /\ visited = Seq.singleton e /\ o = Once'0.C_Once (Option'0.C_None))
  
  constant self  : Once'0.t_once t
  
  function produces_refl [#"../10_once.rs" 31 4 31 26] (self : Once'0.t_once t) : ()
  
  goal vc_produces_refl : ([%#s10_once0] inv'0 self)  -> ([%#s10_once1] produces'0 self (Seq.empty  : Seq.seq t) self)
end
module C10Once_Impl0_ProducesTrans_Impl
  type t
  
  let%span s10_once0 = "../10_once.rs" 35 15 35 32
  
  let%span s10_once1 = "../10_once.rs" 36 15 36 32
  
  let%span s10_once2 = "../10_once.rs" 38 22 38 23
  
  let%span s10_once3 = "../10_once.rs" 38 31 38 33
  
  let%span s10_once4 = "../10_once.rs" 38 52 38 53
  
  let%span s10_once5 = "../10_once.rs" 38 61 38 63
  
  let%span s10_once6 = "../10_once.rs" 38 82 38 83
  
  let%span s10_once7 = "../10_once.rs" 37 14 37 42
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "../10_once.rs" 22 8 25 9
  
  predicate invariant'2 (self : t)
  
  predicate inv'2 (_x : t)
  
  axiom inv'2 : forall x : t . inv'2 x = true
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t) =
    [%#span8] true
  
  predicate inv'1 (_x : Seq.seq t)
  
  axiom inv'1 : forall x : Seq.seq t . inv'1 x = true
  
  use C10Once_Once_Type as Once'0
  
  predicate invariant'0 (self : Once'0.t_once t) =
    [%#span8] true
  
  predicate inv'0 (_x : Once'0.t_once t)
  
  axiom inv'0 : forall x : Once'0.t_once t . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use Core_Option_Option_Type as Option'0
  
  use seq.Seq
  
  predicate produces'0 [#"../10_once.rs" 21 4 21 64] (self : Once'0.t_once t) (visited : Seq.seq t) (o : Once'0.t_once t)
    
   =
    [%#span9] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . inv'2 e
    /\ self = Once'0.C_Once (Option'0.C_Some e) /\ visited = Seq.singleton e /\ o = Once'0.C_Once (Option'0.C_None))
  
  constant a  : Once'0.t_once t
  
  constant ab  : Seq.seq t
  
  constant b  : Once'0.t_once t
  
  constant bc  : Seq.seq t
  
  constant c  : Once'0.t_once t
  
  function produces_trans [#"../10_once.rs" 38 4 38 90] (a : Once'0.t_once t) (ab : Seq.seq t) (b : Once'0.t_once t) (bc : Seq.seq t) (c : Once'0.t_once t) : ()
    
  
  goal vc_produces_trans : ([%#s10_once6] inv'0 c)
   -> ([%#s10_once5] inv'1 bc)
   -> ([%#s10_once4] inv'0 b)
   -> ([%#s10_once3] inv'1 ab)
   -> ([%#s10_once2] inv'0 a)
   -> ([%#s10_once1] produces'0 b bc c)
   -> ([%#s10_once0] produces'0 a ab b)  -> ([%#s10_once7] produces'0 a (Seq.(++) ab bc) c)
end
module C10Once_Impl0_Next
  type t
  
  let%span s10_once0 = "../10_once.rs" 44 17 44 21
  
  let%span s10_once1 = "../10_once.rs" 40 14 43 5
  
  let%span s10_once2 = "../10_once.rs" 44 26 44 35
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../10_once.rs" 22 8 25 9
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span6 = "../10_once.rs" 16 20 16 57
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "../../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span9 = "" 0 0 0 0
  
  predicate invariant'3 (self : t)
  
  predicate inv'3 (_x : t)
  
  axiom inv'3 : forall x : t . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Option'0.t_option t)) =
    [%#span3] true
  
  predicate inv'2 (_x : borrowed (Option'0.t_option t))
  
  axiom inv'2 : forall x : borrowed (Option'0.t_option t) . inv'2 x = true
  
  use C10Once_Once_Type as Once'0
  
  predicate invariant'1 (self : borrowed (Once'0.t_once t)) =
    [%#span3] true
  
  predicate inv'1 (_x : borrowed (Once'0.t_once t))
  
  axiom inv'1 : forall x : borrowed (Once'0.t_once t) . inv'1 x = true
  
  predicate invariant'0 (self : Option'0.t_option t) =
    [%#span3] true
  
  predicate inv'0 (_x : Option'0.t_option t)
  
  axiom inv'0 : forall x : Option'0.t_option t . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../10_once.rs" 21 4 21 64] (self : Once'0.t_once t) (visited : Seq.seq t) (o : Once'0.t_once t)
    
   =
    [%#span4] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . inv'3 e
    /\ self = Once'0.C_Once (Option'0.C_Some e) /\ visited = Seq.singleton e /\ o = Once'0.C_Once (Option'0.C_None))
  
  predicate resolve'0 (self : borrowed (Once'0.t_once t)) =
    [%#span5] self.final = self.current
  
  predicate completed'0 [#"../10_once.rs" 15 4 15 35] (self : borrowed (Once'0.t_once t)) =
    [%#span6] self.current = Once'0.C_Once (Option'0.C_None) /\ resolve'0 self
  
  use prelude.prelude.Intrinsic
  
  let rec take'0 (self:borrowed (Option'0.t_option t)) (return'  (ret:Option'0.t_option t))= {[@expl:precondition] [%#span7] inv'2 self}
    any
    [ return' (result:Option'0.t_option t)-> {[%#span9] inv'0 result}
      {[%#span8] result = self.current /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec next (self:borrowed (Once'0.t_once t)) (return'  (ret:Option'0.t_option t))= {[%#s10_once0] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Once'0.t_once <t> {self.current}
          (fun (r0'0:Option'0.t_option t) ->
            Borrow.borrow_final <Option'0.t_option t> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_option t)) ->
                 [ &_3 <- _ret' ] 
                Once'0.t_once <t> {self.current}
                  (fun (l_0'0:Option'0.t_option t) ->
                     [ &self <- { self with current = Once'0.C_Once _3.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _3.final}- s2
      | s2 = take'0 {_3} (fun (_ret':Option'0.t_option t) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : Option'0.t_option t = any_l ()
    | & self : borrowed (Once'0.t_once t) = self
    | & _3 : borrowed (Option'0.t_option t) = any_l () ]
    
    [ return' (result:Option'0.t_option t)-> {[@expl:postcondition] [%#s10_once2] inv'0 result}
      {[@expl:postcondition] [%#s10_once1] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module C10Once_Impl0
  type t
  
  let%span s10_once0 = "../10_once.rs" 44 4 44 35
  
  let%span s10_once1 = "../10_once.rs" 38 4 38 90
  
  let%span s10_once2 = "../10_once.rs" 31 4 31 26
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../10_once.rs" 22 8 25 9
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span6 = "../10_once.rs" 16 20 16 57
  
  predicate invariant'4 (self : t)
  
  predicate inv'4 (_x : t)
  
  axiom inv'4 : forall x : t . inv'4 x = true
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t) =
    [%#span3] true
  
  predicate inv'3 (_x : Seq.seq t)
  
  axiom inv'3 : forall x : Seq.seq t . inv'3 x = true
  
  use C10Once_Once_Type as Once'0
  
  predicate invariant'2 (self : Once'0.t_once t) =
    [%#span3] true
  
  predicate inv'2 (_x : Once'0.t_once t)
  
  axiom inv'2 : forall x : Once'0.t_once t . inv'2 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'1 (self : Option'0.t_option t) =
    [%#span3] true
  
  predicate inv'1 (_x : Option'0.t_option t)
  
  axiom inv'1 : forall x : Option'0.t_option t . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Once'0.t_once t)) =
    [%#span3] true
  
  predicate inv'0 (_x : borrowed (Once'0.t_once t))
  
  axiom inv'0 : forall x : borrowed (Once'0.t_once t) . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../10_once.rs" 21 4 21 64] (self : Once'0.t_once t) (visited : Seq.seq t) (o : Once'0.t_once t)
    
   =
    [%#span4] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . inv'4 e
    /\ self = Once'0.C_Once (Option'0.C_Some e) /\ visited = Seq.singleton e /\ o = Once'0.C_Once (Option'0.C_None))
  
  predicate resolve'0 (self : borrowed (Once'0.t_once t)) =
    [%#span5] self.final = self.current
  
  predicate completed'0 [#"../10_once.rs" 15 4 15 35] (self : borrowed (Once'0.t_once t)) =
    [%#span6] self.current = Once'0.C_Once (Option'0.C_None) /\ resolve'0 self
  
  goal next_refn : [%#s10_once0] forall self : borrowed (Once'0.t_once t) . inv'0 self
   -> inv'0 self
  /\ (forall result : Option'0.t_option t . inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_trans_refn : [%#s10_once1] forall a : Once'0.t_once t . forall ab : Seq.seq t . forall b : Once'0.t_once t . forall bc : Seq.seq t . forall c : Once'0.t_once t . inv'2 c
  /\ inv'3 bc /\ inv'2 b /\ inv'3 ab /\ inv'2 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'2 c
  /\ inv'3 bc
  /\ inv'2 b
  /\ inv'3 ab
  /\ inv'2 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal produces_refl_refn : [%#s10_once2] forall self : Once'0.t_once t . inv'2 self
   -> inv'2 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t) self
   -> produces'0 self (Seq.empty  : Seq.seq t) self)
end
