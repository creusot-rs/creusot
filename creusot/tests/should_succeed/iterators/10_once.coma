module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_10_once__Once [#"10_once.rs" 8 0 8 18]
  use T_core__option__Option as Option'0
  
  type t_Once 't =
    | C_Once (Option'0.t_Option 't)
  
  let rec t_Once < 't > (input:t_Once 't) (ret  (field_0:Option'0.t_Option 't))= any
    [ good (field_0:Option'0.t_Option 't)-> {C_Once field_0 = input} (! ret {field_0}) ]
    
end
module M_10_once__qyi9558967427796228243__produces_refl [#"10_once.rs" 32 4 32 26] (* <Once<T> as common::Iterator> *)
  type t
  
  let%span s10_once0 = "10_once.rs" 30 15 30 24
  let%span s10_once1 = "10_once.rs" 31 14 31 45
  let%span s10_once2 = "10_once.rs" 22 8 25 9
  
  predicate inv'1 (_1 : t)
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option t [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'1 a_0
    end
  
  use T_10_once__Once as Once'0
  
  predicate inv'0 (_1 : Once'0.t_Once t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Once'0.t_Once t [inv'0 x] . inv'0 x
  = match x with
    | Once'0.C_Once a_0 -> inv'2 a_0
    end
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"10_once.rs" 21 4 21 64] (self : Once'0.t_Once t) (visited : Seq.seq t) (o : Once'0.t_Once t) =
    [%#s10_once2] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . inv'1 e
    /\ self = Once'0.C_Once (Option'0.C_Some e) /\ visited = Seq.singleton e /\ o = Once'0.C_Once (Option'0.C_None))
  
  constant self  : Once'0.t_Once t
  
  function produces_refl [#"10_once.rs" 32 4 32 26] (self : Once'0.t_Once t) : ()
  
  goal vc_produces_refl : ([%#s10_once0] inv'0 self)  -> ([%#s10_once1] produces'0 self (Seq.empty  : Seq.seq t) self)
end
module M_10_once__qyi9558967427796228243__produces_trans [#"10_once.rs" 42 4 42 90] (* <Once<T> as common::Iterator> *)
  type t
  
  let%span s10_once0 = "10_once.rs" 36 15 36 21
  let%span s10_once1 = "10_once.rs" 37 15 37 21
  let%span s10_once2 = "10_once.rs" 38 15 38 21
  let%span s10_once3 = "10_once.rs" 39 15 39 32
  let%span s10_once4 = "10_once.rs" 40 15 40 32
  let%span s10_once5 = "10_once.rs" 41 14 41 42
  let%span s10_once6 = "10_once.rs" 22 8 25 9
  
  predicate inv'1 (_1 : t)
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option t [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'1 a_0
    end
  
  use T_10_once__Once as Once'0
  
  predicate inv'0 (_1 : Once'0.t_Once t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Once'0.t_Once t [inv'0 x] . inv'0 x
  = match x with
    | Once'0.C_Once a_0 -> inv'2 a_0
    end
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"10_once.rs" 21 4 21 64] (self : Once'0.t_Once t) (visited : Seq.seq t) (o : Once'0.t_Once t) =
    [%#s10_once6] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . inv'1 e
    /\ self = Once'0.C_Once (Option'0.C_Some e) /\ visited = Seq.singleton e /\ o = Once'0.C_Once (Option'0.C_None))
  
  constant a  : Once'0.t_Once t
  
  constant ab  : Seq.seq t
  
  constant b  : Once'0.t_Once t
  
  constant bc  : Seq.seq t
  
  constant c  : Once'0.t_Once t
  
  function produces_trans [#"10_once.rs" 42 4 42 90] (a : Once'0.t_Once t) (ab : Seq.seq t) (b : Once'0.t_Once t) (bc : Seq.seq t) (c : Once'0.t_Once t) : ()
    
  
  goal vc_produces_trans : ([%#s10_once4] produces'0 b bc c)
   -> ([%#s10_once3] produces'0 a ab b)
   -> ([%#s10_once2] inv'0 c)
   -> ([%#s10_once1] inv'0 b)  -> ([%#s10_once0] inv'0 a)  -> ([%#s10_once5] produces'0 a (Seq.(++) ab bc) c)
end
module M_10_once__qyi9558967427796228243__next [#"10_once.rs" 48 4 48 35] (* <Once<T> as common::Iterator> *)
  type t
  
  let%span s10_once0 = "10_once.rs" 48 17 48 21
  let%span s10_once1 = "10_once.rs" 44 14 47 5
  let%span s10_once2 = "10_once.rs" 48 26 48 35
  let%span soption3 = "../../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span s10_once4 = "10_once.rs" 16 20 16 57
  let%span s10_once5 = "10_once.rs" 22 8 25 9
  let%span sresolve6 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant7 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use T_core__option__Option as Option'0
  
  predicate inv'0 (_1 : Option'0.t_Option t)
  
  use T_10_once__Once as Once'0
  
  predicate inv'4 (_1 : Once'0.t_Once t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Once'0.t_Once t [inv'4 x] . inv'4 x
  = match x with
    | Once'0.C_Once a_0 -> inv'0 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (Option'0.t_Option t)) =
    [%#sinvariant7] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (Option'0.t_Option t))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (Option'0.t_Option t) [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (Once'0.t_Once t)) =
    [%#sinvariant7] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'1 (_1 : borrowed (Once'0.t_Once t))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Once'0.t_Once t) [inv'1 x] . inv'1 x = invariant'0 x
  
  predicate inv'3 (_1 : t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Option'0.t_Option t [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"10_once.rs" 21 4 21 64] (self : Once'0.t_Once t) (visited : Seq.seq t) (o : Once'0.t_Once t) =
    [%#s10_once5] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . inv'3 e
    /\ self = Once'0.C_Once (Option'0.C_Some e) /\ visited = Seq.singleton e /\ o = Once'0.C_Once (Option'0.C_None))
  
  predicate resolve'1 (self : borrowed (Once'0.t_Once t)) =
    [%#sresolve6] self.final = self.current
  
  predicate completed'0 [#"10_once.rs" 15 4 15 35] (self : borrowed (Once'0.t_Once t)) =
    [%#s10_once4] self.current = Once'0.C_Once (Option'0.C_None) /\ resolve'1 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (_1 : borrowed (Once'0.t_Once t)) =
    resolve'1 _1
  
  let rec take'0 (self:borrowed (Option'0.t_Option t)) (return'  (ret:Option'0.t_Option t))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:Option'0.t_Option t)-> {inv'0 result}
      {[%#soption3] result = self.current /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (Once'0.t_Once t)) (return'  (ret:Option'0.t_Option t))= {[%#s10_once0] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Once'0.t_Once <t> {self.current}
          (fun (r0'0:Option'0.t_Option t) ->
            {inv'0 r0'0}
            Borrow.borrow_final <Option'0.t_Option t> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_Option t)) ->
                 [ &_3 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &self <- { self with current = Once'0.C_Once _ret'.final ; } ] 
                s1))
      | s1 = take'0 {_3} (fun (_ret':Option'0.t_Option t) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : Option'0.t_Option t = any_l ()
    | & self : borrowed (Once'0.t_Once t) = self
    | & _3 : borrowed (Option'0.t_Option t) = any_l () ]
    
    [ return' (result:Option'0.t_Option t)-> {[@expl:postcondition] [%#s10_once2] inv'0 result}
      {[@expl:postcondition] [%#s10_once1] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_10_once__qyi9558967427796228243 [#"10_once.rs" 10 0 10 28] (* <Once<T> as common::Iterator> *)
  type t
  
  let%span s10_once0 = "10_once.rs" 48 4 48 35
  let%span s10_once1 = "10_once.rs" 42 4 42 90
  let%span s10_once2 = "10_once.rs" 32 4 32 26
  let%span s10_once3 = "10_once.rs" 16 20 16 57
  let%span s10_once4 = "10_once.rs" 22 8 25 9
  let%span sresolve5 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant6 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use T_core__option__Option as Option'0
  
  predicate inv'1 (_1 : Option'0.t_Option t)
  
  use T_10_once__Once as Once'0
  
  predicate inv'2 (_1 : Once'0.t_Once t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Once'0.t_Once t [inv'2 x] . inv'2 x
  = match x with
    | Once'0.C_Once a_0 -> inv'1 a_0
    end
  
  predicate inv'3 (_1 : t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option t [inv'1 x] . inv'1 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Once'0.t_Once t)) =
    [%#sinvariant6] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'0 (_1 : borrowed (Once'0.t_Once t))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (Once'0.t_Once t) [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"10_once.rs" 21 4 21 64] (self : Once'0.t_Once t) (visited : Seq.seq t) (o : Once'0.t_Once t) =
    [%#s10_once4] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . inv'3 e
    /\ self = Once'0.C_Once (Option'0.C_Some e) /\ visited = Seq.singleton e /\ o = Once'0.C_Once (Option'0.C_None))
  
  predicate resolve'0 (self : borrowed (Once'0.t_Once t)) =
    [%#sresolve5] self.final = self.current
  
  predicate completed'0 [#"10_once.rs" 15 4 15 35] (self : borrowed (Once'0.t_Once t)) =
    [%#s10_once3] self.current = Once'0.C_Once (Option'0.C_None) /\ resolve'0 self
  
  goal next_refn : [%#s10_once0] forall self : borrowed (Once'0.t_Once t) . inv'0 self
   -> inv'0 self
  /\ (forall result : Option'0.t_Option t . inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_trans_refn : [%#s10_once1] forall a : Once'0.t_Once t . forall ab : Seq.seq t . forall b : Once'0.t_Once t . forall bc : Seq.seq t . forall c : Once'0.t_Once t . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'2 c /\ inv'2 b /\ inv'2 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'2 c
  /\ inv'2 b /\ inv'2 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal produces_refl_refn : [%#s10_once2] forall self : Once'0.t_Once t . inv'2 self
   -> inv'2 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t) self
   -> produces'0 self (Seq.empty  : Seq.seq t) self)
end
