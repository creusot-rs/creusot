
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C10Once_Once_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_once 't =
    | C_Once (Core_Option_Option_Type.t_option 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_once < 't > (input:t_once 't) (ret  (field_0:Core_Option_Option_Type.t_option 't))= any
    [ good (field_0:Core_Option_Option_Type.t_option 't)-> {C_Once field_0 = input} (! ret {field_0})
    | bad (field_0:Core_Option_Option_Type.t_option 't)-> {C_Once field_0 <> input} {false} any ]
    
end
module C10Once_Impl0_ProducesRefl_Impl
  type t
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  use C10Once_Once_Type as C10Once_Once_Type
  predicate invariant'0 (self : C10Once_Once_Type.t_once t)
  let rec invariant'0 (self:C10Once_Once_Type.t_once t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C10Once_Once_Type.t_once t)
  let rec inv'0 (_x:C10Once_Once_Type.t_once t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C10Once_Once_Type.t_once t . inv'0 x = true
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  use seq.Seq
  predicate produces'0 [#"../10_once.rs" 21 4 21 64] (self : C10Once_Once_Type.t_once t) (visited : Seq.seq t) (o : C10Once_Once_Type.t_once t)
    
   =
    [#"../10_once.rs" 22 8 25 9] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . inv'1 e
    /\ self = C10Once_Once_Type.C_Once (Core_Option_Option_Type.C_Some e)
    /\ visited = Seq.singleton e /\ o = C10Once_Once_Type.C_Once (Core_Option_Option_Type.C_None))
  let rec produces'0 (self:C10Once_Once_Type.t_once t) (visited:Seq.seq t) (o:C10Once_Once_Type.t_once t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  constant self  : C10Once_Once_Type.t_once t
  function produces_refl [#"../10_once.rs" 31 4 31 26] (self : C10Once_Once_Type.t_once t) : ()
  goal vc_produces_refl : ([#"../10_once.rs" 31 21 31 25] inv'0 self)
   -> ([#"../10_once.rs" 30 14 30 45] produces'0 self (Seq.empty  : Seq.seq t) self)
end
module C10Once_Impl0_ProducesTrans_Impl
  type t
  predicate invariant'2 (self : t)
  let rec invariant'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : t)
  let rec inv'2 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : t . inv'2 x = true
  use seq.Seq
  predicate invariant'1 (self : Seq.seq t)
  let rec invariant'1 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq t)
  let rec inv'1 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq t . inv'1 x = true
  use C10Once_Once_Type as C10Once_Once_Type
  predicate invariant'0 (self : C10Once_Once_Type.t_once t)
  let rec invariant'0 (self:C10Once_Once_Type.t_once t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C10Once_Once_Type.t_once t)
  let rec inv'0 (_x:C10Once_Once_Type.t_once t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C10Once_Once_Type.t_once t . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  predicate produces'0 [#"../10_once.rs" 21 4 21 64] (self : C10Once_Once_Type.t_once t) (visited : Seq.seq t) (o : C10Once_Once_Type.t_once t)
    
   =
    [#"../10_once.rs" 22 8 25 9] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . inv'2 e
    /\ self = C10Once_Once_Type.C_Once (Core_Option_Option_Type.C_Some e)
    /\ visited = Seq.singleton e /\ o = C10Once_Once_Type.C_Once (Core_Option_Option_Type.C_None))
  let rec produces'0 (self:C10Once_Once_Type.t_once t) (visited:Seq.seq t) (o:C10Once_Once_Type.t_once t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  constant a  : C10Once_Once_Type.t_once t
  constant ab  : Seq.seq t
  constant b  : C10Once_Once_Type.t_once t
  constant bc  : Seq.seq t
  constant c  : C10Once_Once_Type.t_once t
  function produces_trans [#"../10_once.rs" 38 4 38 90] (a : C10Once_Once_Type.t_once t) (ab : Seq.seq t) (b : C10Once_Once_Type.t_once t) (bc : Seq.seq t) (c : C10Once_Once_Type.t_once t) : ()
    
  goal vc_produces_trans : ([#"../10_once.rs" 38 82 38 83] inv'0 c)
   -> ([#"../10_once.rs" 38 61 38 63] inv'1 bc)
   -> ([#"../10_once.rs" 38 52 38 53] inv'0 b)
   -> ([#"../10_once.rs" 38 31 38 33] inv'1 ab)
   -> ([#"../10_once.rs" 38 22 38 23] inv'0 a)
   -> ([#"../10_once.rs" 36 15 36 32] produces'0 b bc c)
   -> ([#"../10_once.rs" 35 15 35 32] produces'0 a ab b)
   -> ([#"../10_once.rs" 37 14 37 42] produces'0 a (Seq.(++) ab bc) c)
end
module C10Once_Impl0_Next
  type t
  predicate invariant'3 (self : t)
  let rec invariant'3 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : t)
  let rec inv'3 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : t . inv'3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Borrow
  predicate invariant'2 (self : borrowed (Core_Option_Option_Type.t_option t))
  let rec invariant'2 (self:borrowed (Core_Option_Option_Type.t_option t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (Core_Option_Option_Type.t_option t))
  let rec inv'2 (_x:borrowed (Core_Option_Option_Type.t_option t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (Core_Option_Option_Type.t_option t) . inv'2 x = true
  use C10Once_Once_Type as C10Once_Once_Type
  predicate invariant'1 (self : borrowed (C10Once_Once_Type.t_once t))
  let rec invariant'1 (self:borrowed (C10Once_Once_Type.t_once t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (C10Once_Once_Type.t_once t))
  let rec inv'1 (_x:borrowed (C10Once_Once_Type.t_once t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (C10Once_Once_Type.t_once t) . inv'1 x = true
  predicate invariant'0 (self : Core_Option_Option_Type.t_option t)
  let rec invariant'0 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Core_Option_Option_Type.t_option t)
  let rec inv'0 (_x:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Option_Option_Type.t_option t . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [#"../10_once.rs" 21 4 21 64] (self : C10Once_Once_Type.t_once t) (visited : Seq.seq t) (o : C10Once_Once_Type.t_once t)
    
   =
    [#"../10_once.rs" 22 8 25 9] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . inv'3 e
    /\ self = C10Once_Once_Type.C_Once (Core_Option_Option_Type.C_Some e)
    /\ visited = Seq.singleton e /\ o = C10Once_Once_Type.C_Once (Core_Option_Option_Type.C_None))
  let rec produces'0 (self:C10Once_Once_Type.t_once t) (visited:Seq.seq t) (o:C10Once_Once_Type.t_once t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (C10Once_Once_Type.t_once t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C10Once_Once_Type.t_once t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 [#"../10_once.rs" 15 4 15 35] (self : borrowed (C10Once_Once_Type.t_once t)) =
    [#"../10_once.rs" 16 20 16 57]  * self = C10Once_Once_Type.C_Once (Core_Option_Option_Type.C_None) /\ resolve'0 self
  let rec completed'0 (self:borrowed (C10Once_Once_Type.t_once t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec take'0 (self:borrowed (Core_Option_Option_Type.t_option t)) (return'  (ret:Core_Option_Option_Type.t_option t))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option t)-> {inv'0 result}
      {[#"../../../../../creusot-contracts/src/std/option.rs" 29 0 140 1] result =  * self
      /\  ^ self = Core_Option_Option_Type.C_None}
      (! return' {result}) ]
    
  let rec next (self:borrowed (C10Once_Once_Type.t_once t)) (return'  (ret:Core_Option_Option_Type.t_option t))= {[#"../10_once.rs" 44 17 44 21] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = C10Once_Once_Type.t_once <t> { * self}
          (fun (r0'0:Core_Option_Option_Type.t_option t) ->
            Borrow.borrow_final <Core_Option_Option_Type.t_option t> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Core_Option_Option_Type.t_option t)) ->
                 [ &_3 <- _ret' ] 
                C10Once_Once_Type.t_once <t> { * self}
                  (fun (l_0'0:Core_Option_Option_Type.t_option t) ->
                    
                    [ &self <- { self with current = (C10Once_Once_Type.C_Once ( ^ _3) : C10Once_Once_Type.t_once t) ; } ]
                    
                    s1)))
      | s1 = -{inv'0 ( ^ _3)}- s2
      | s2 = take'0 {_3} (fun (_ret':Core_Option_Option_Type.t_option t) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option t = any_l () : Core_Option_Option_Type.t_option t
    | & self : borrowed (C10Once_Once_Type.t_once t) = self
    | & _3 : borrowed (Core_Option_Option_Type.t_option t) = any_l () : borrowed (Core_Option_Option_Type.t_option t) ]
    
    [ return' (result:Core_Option_Option_Type.t_option t)-> {[@expl:postcondition] [#"../10_once.rs" 44 26 44 35] inv'0 result}
      {[@expl:postcondition] [#"../10_once.rs" 40 14 43 5] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C10Once_Impl0
  type t
  predicate invariant'4 (self : t)
  let rec invariant'4 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : t)
  let rec inv'4 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : t . inv'4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option t)
  let rec invariant'3 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option t)
  let rec inv'3 (_x:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option t . inv'3 x = true
  use C10Once_Once_Type as C10Once_Once_Type
  use prelude.Borrow
  predicate invariant'2 (self : borrowed (C10Once_Once_Type.t_once t))
  let rec invariant'2 (self:borrowed (C10Once_Once_Type.t_once t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (C10Once_Once_Type.t_once t))
  let rec inv'2 (_x:borrowed (C10Once_Once_Type.t_once t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (C10Once_Once_Type.t_once t) . inv'2 x = true
  use seq.Seq
  predicate invariant'1 (self : Seq.seq t)
  let rec invariant'1 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq t)
  let rec inv'1 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq t . inv'1 x = true
  predicate invariant'0 (self : C10Once_Once_Type.t_once t)
  let rec invariant'0 (self:C10Once_Once_Type.t_once t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C10Once_Once_Type.t_once t)
  let rec inv'0 (_x:C10Once_Once_Type.t_once t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C10Once_Once_Type.t_once t . inv'0 x = true
  use seq.Seq
  predicate resolve'0 (self : borrowed (C10Once_Once_Type.t_once t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C10Once_Once_Type.t_once t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 [#"../10_once.rs" 15 4 15 35] (self : borrowed (C10Once_Once_Type.t_once t)) =
    [#"../10_once.rs" 16 20 16 57]  * self = C10Once_Once_Type.C_Once (Core_Option_Option_Type.C_None) /\ resolve'0 self
  let rec completed'0 (self:borrowed (C10Once_Once_Type.t_once t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate produces'0 [#"../10_once.rs" 21 4 21 64] (self : C10Once_Once_Type.t_once t) (visited : Seq.seq t) (o : C10Once_Once_Type.t_once t)
    
   =
    [#"../10_once.rs" 22 8 25 9] visited = (Seq.empty  : Seq.seq t) /\ self = o
    \/ (exists e : t . inv'4 e
    /\ self = C10Once_Once_Type.C_Once (Core_Option_Option_Type.C_Some e)
    /\ visited = Seq.singleton e /\ o = C10Once_Once_Type.C_Once (Core_Option_Option_Type.C_None))
  let rec produces'0 (self:C10Once_Once_Type.t_once t) (visited:Seq.seq t) (o:C10Once_Once_Type.t_once t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  goal produces_trans_refn : [#"../10_once.rs" 38 4 38 90] forall a : C10Once_Once_Type.t_once t . forall ab : Seq.seq t . forall b : C10Once_Once_Type.t_once t . forall bc : Seq.seq t . forall c : C10Once_Once_Type.t_once t . inv'0 c
  /\ inv'1 bc /\ inv'0 b /\ inv'1 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'0 c
  /\ inv'1 bc
  /\ inv'0 b
  /\ inv'1 ab
  /\ inv'0 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  goal produces_refl_refn : [#"../10_once.rs" 31 4 31 26] forall self : C10Once_Once_Type.t_once t . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t) self
   -> produces'0 self (Seq.empty  : Seq.seq t) self)
  goal next_refn : [#"../10_once.rs" 44 4 44 35] forall self : borrowed (C10Once_Once_Type.t_once t) . inv'2 self
   -> inv'2 self
  /\ (forall result : Core_Option_Option_Type.t_option t . inv'3 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv'3 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
end
