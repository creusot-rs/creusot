
module C04Skip_Skip_Type
  use prelude.UIntSize
  use prelude.Int
  type t_skip 'i =
    | C_Skip 'i usize
    
  function any_l (_ : 'b) : 'a
  let rec t_skip < 'i > (input:t_skip 'i) (ret  (iter:'i) (n:usize))= any
    [ good (iter:'i) (n:usize)-> {C_Skip iter n = input} (! ret {iter} {n})
    | bad (iter:'i) (n:usize)-> {C_Skip iter n <> input} {false} any ]
    
  function skip_n (self : t_skip 'i) : usize =
    match self with
      | C_Skip _ a -> a
      end
  function skip_iter (self : t_skip 'i) : 'i =
    match self with
      | C_Skip a _ -> a
      end
end
module C04Skip_Impl0_ProducesRefl_Impl
  type i
  predicate invariant'2 (self : i)
  let rec invariant'2 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : i)
  let rec inv'2 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : i . inv'2 x = true
  type item'0
  use seq.Seq
  predicate invariant'1 (self : Seq.seq item'0)
  let rec invariant'1 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq item'0)
  let rec inv'1 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'2 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'1 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'2 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'1 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'2 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'2 a)
   -> ([#"../common.rs" 21 31 21 33] inv'1 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'2 b)
   -> ([#"../common.rs" 21 61 21 63] inv'1 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'2 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'2 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'2 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate invariant'0 (self : C04Skip_Skip_Type.t_skip i)
  let rec invariant'0 (self:C04Skip_Skip_Type.t_skip i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C04Skip_Skip_Type.t_skip i)
  let rec inv'0 (_x:C04Skip_Skip_Type.t_skip i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C04Skip_Skip_Type.t_skip i . inv'0 x = true
  predicate resolve'0 (self : item'0)
  let rec resolve'0 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  predicate produces'0 [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq item'0) (o : C04Skip_Skip_Type.t_skip i)
    
   =
    [#"../04_skip.rs" 37 8 44 9] visited = (Seq.empty  : Seq.seq item'0) /\ self = o
    \/ UIntSize.to_int (C04Skip_Skip_Type.skip_n o) = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq item'0 . inv'1 s
    /\ Seq.length s = UIntSize.to_int (C04Skip_Skip_Type.skip_n self)
    /\ produces'1 (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  let rec produces'0 (self:C04Skip_Skip_Type.t_skip i) (visited:Seq.seq item'0) (o:C04Skip_Skip_Type.t_skip i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  constant self  : C04Skip_Skip_Type.t_skip i
  function produces_refl [#"../04_skip.rs" 50 4 50 26] (self : C04Skip_Skip_Type.t_skip i) : ()
  goal vc_produces_refl : ([#"../04_skip.rs" 50 21 50 25] inv'0 self)
   -> ([#"../04_skip.rs" 49 14 49 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
end
module C04Skip_Impl0_ProducesTrans_Impl
  type i
  predicate invariant'2 (self : i)
  let rec invariant'2 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : i)
  let rec inv'2 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : i . inv'2 x = true
  type item'0
  use seq.Seq
  use seq.Seq
  predicate inv'1 (_x : Seq.seq item'0)
  let rec inv'1 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'2 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'1 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'2 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'1 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'2 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'1 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'1 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'1 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'2 a)
   -> ([#"../common.rs" 21 31 21 33] inv'1 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'2 b)
   -> ([#"../common.rs" 21 61 21 63] inv'1 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'2 c)  -> ([#"../common.rs" 20 14 20 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'2 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'2 self)
   -> ([#"../common.rs" 14 14 14 45] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'1 (self : Seq.seq item'0)
  let rec invariant'1 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate invariant'0 (self : C04Skip_Skip_Type.t_skip i)
  let rec invariant'0 (self:C04Skip_Skip_Type.t_skip i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C04Skip_Skip_Type.t_skip i)
  let rec inv'0 (_x:C04Skip_Skip_Type.t_skip i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C04Skip_Skip_Type.t_skip i . inv'0 x = true
  predicate resolve'0 (self : item'0)
  let rec resolve'0 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  predicate produces'0 [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq item'0) (o : C04Skip_Skip_Type.t_skip i)
    
   =
    [#"../04_skip.rs" 37 8 44 9] visited = (Seq.empty  : Seq.seq item'0) /\ self = o
    \/ UIntSize.to_int (C04Skip_Skip_Type.skip_n o) = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq item'0 . inv'1 s
    /\ Seq.length s = UIntSize.to_int (C04Skip_Skip_Type.skip_n self)
    /\ produces'1 (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  let rec produces'0 (self:C04Skip_Skip_Type.t_skip i) (visited:Seq.seq item'0) (o:C04Skip_Skip_Type.t_skip i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  constant a  : C04Skip_Skip_Type.t_skip i
  constant ab  : Seq.seq item'0
  constant b  : C04Skip_Skip_Type.t_skip i
  constant bc  : Seq.seq item'0
  constant c  : C04Skip_Skip_Type.t_skip i
  function produces_trans [#"../04_skip.rs" 57 4 57 90] (a : C04Skip_Skip_Type.t_skip i) (ab : Seq.seq item'0) (b : C04Skip_Skip_Type.t_skip i) (bc : Seq.seq item'0) (c : C04Skip_Skip_Type.t_skip i) : ()
    
  goal vc_produces_trans : ([#"../04_skip.rs" 57 82 57 83] inv'0 c)
   -> ([#"../04_skip.rs" 57 61 57 63] inv'1 bc)
   -> ([#"../04_skip.rs" 57 52 57 53] inv'0 b)
   -> ([#"../04_skip.rs" 57 31 57 33] inv'1 ab)
   -> ([#"../04_skip.rs" 57 22 57 23] inv'0 a)
   -> ([#"../04_skip.rs" 55 15 55 32] produces'0 b bc c)
   -> ([#"../04_skip.rs" 54 15 54 32] produces'0 a ab b)
   -> ([#"../04_skip.rs" 56 14 56 42] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C04Skip_Impl0_Next
  type i
  type item'0
  use seq.Seq
  predicate invariant'9 (self : Seq.seq item'0)
  let rec invariant'9 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : Seq.seq item'0)
  let rec inv'9 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : Seq.seq item'0 . inv'9 x = true
  use prelude.Borrow
  predicate invariant'8 (self : borrowed i)
  let rec invariant'8 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : borrowed i)
  let rec inv'8 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : borrowed i . inv'8 x = true
  use prelude.UIntSize
  predicate invariant'7 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : usize)
  let rec inv'7 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : usize . inv'7 x = true
  predicate invariant'6 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:borrowed usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : borrowed usize)
  let rec inv'6 (_x:borrowed usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : borrowed usize . inv'6 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'5 (self : Core_Option_Option_Type.t_option item'0)
  let rec invariant'5 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Core_Option_Option_Type.t_option item'0)
  let rec inv'5 (_x:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Core_Option_Option_Type.t_option item'0 . inv'5 x = true
  predicate invariant'4 (self : item'0)
  let rec invariant'4 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : item'0)
  let rec inv'4 (_x:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : item'0 . inv'4 x = true
  predicate invariant'3 (self : i)
  let rec invariant'3 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : i)
  let rec inv'3 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : i . inv'3 x = true
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate invariant'2 (self : borrowed (C04Skip_Skip_Type.t_skip i))
  let rec invariant'2 (self:borrowed (C04Skip_Skip_Type.t_skip i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (C04Skip_Skip_Type.t_skip i))
  let rec inv'2 (_x:borrowed (C04Skip_Skip_Type.t_skip i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (C04Skip_Skip_Type.t_skip i) . inv'2 x = true
  use prelude.Snapshot
  predicate invariant'1 (self : Snapshot.snap_ty (Seq.seq item'0))
  let rec invariant'1 (self:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Snapshot.snap_ty (Seq.seq item'0))
  let rec inv'1 (_x:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'1 x = true
  use seq.Seq
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'0 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  let rec produces_trans'0 (a:i) (ab:Seq.seq item'0) (b:i) (bc:Seq.seq item'0) (c:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 21 82 21 83] inv'3 c}
    {[@expl:precondition] [#"../common.rs" 21 61 21 63] inv'9 bc}
    {[@expl:precondition] [#"../common.rs" 21 52 21 53] inv'3 b}
    {[@expl:precondition] [#"../common.rs" 21 31 21 33] inv'9 ab}
    {[@expl:precondition] [#"../common.rs" 21 22 21 23] inv'3 a}
    {[@expl:precondition] [#"../common.rs" 19 15 19 32] produces'0 b bc c}
    {[@expl:precondition] [#"../common.rs" 18 15 18 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([#"../common.rs" 18 15 18 32] produces'0 a ab b)
   -> ([#"../common.rs" 19 15 19 32] produces'0 b bc c)
   -> ([#"../common.rs" 21 22 21 23] inv'3 a)
   -> ([#"../common.rs" 21 31 21 33] inv'9 ab)
   -> ([#"../common.rs" 21 52 21 53] inv'3 b)
   -> ([#"../common.rs" 21 61 21 63] inv'9 bc)
   -> ([#"../common.rs" 21 82 21 83] inv'3 c)  -> ([#"../common.rs" 20 14 20 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  let rec produces_refl'0 (self:i) (return'  (ret:()))= {[@expl:precondition] [#"../common.rs" 15 21 15 25] inv'3 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : i . ([#"../common.rs" 15 21 15 25] inv'3 self)
   -> ([#"../common.rs" 14 14 14 45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (C04Skip_Skip_Type.t_skip i)))
  let rec invariant'0 (self:Snapshot.snap_ty (borrowed (C04Skip_Skip_Type.t_skip i))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (C04Skip_Skip_Type.t_skip i)))
  let rec inv'0 (_x:Snapshot.snap_ty (borrowed (C04Skip_Skip_Type.t_skip i))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (C04Skip_Skip_Type.t_skip i)) . inv'0 x = true
  predicate resolve'3 (self : item'0)
  let rec resolve'3 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  use seq.Seq
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  predicate produces'1 [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq item'0) (o : C04Skip_Skip_Type.t_skip i)
    
   =
    [#"../04_skip.rs" 37 8 44 9] visited = (Seq.empty  : Seq.seq item'0) /\ self = o
    \/ UIntSize.to_int (C04Skip_Skip_Type.skip_n o) = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq item'0 . inv'9 s
    /\ Seq.length s = UIntSize.to_int (C04Skip_Skip_Type.skip_n self)
    /\ produces'0 (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'3 (Seq.get s i)))
  let rec produces'1 (self:C04Skip_Skip_Type.t_skip i) (visited:Seq.seq item'0) (o:C04Skip_Skip_Type.t_skip i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate completed'0 [#"../04_skip.rs" 22 4 22 35] (self : borrowed (C04Skip_Skip_Type.t_skip i)) =
    [#"../04_skip.rs" 23 8 31 9] UIntSize.to_int (C04Skip_Skip_Type.skip_n ( ^ self)) = 0
    /\ (exists i : borrowed i . exists s : Seq.seq item'0 . inv'8 i
    /\ inv'9 s
    /\ Seq.length s <= UIntSize.to_int (C04Skip_Skip_Type.skip_n ( * self))
    /\ produces'0 (C04Skip_Skip_Type.skip_iter ( * self)) s ( * i)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'3 (Seq.get s i))
    /\ completed'1 i /\  ^ i = C04Skip_Skip_Type.skip_iter ( ^ self))
  let rec completed'0 (self:borrowed (C04Skip_Skip_Type.t_skip i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'5 (self : borrowed (C04Skip_Skip_Type.t_skip i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'5 (self:borrowed (C04Skip_Skip_Type.t_skip i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'5 self} (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'4 (self : Core_Option_Option_Type.t_option item'0)
  let rec resolve'4 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed i) (return'  (ret:Core_Option_Option_Type.t_option item'0))= {[@expl:precondition] [#"../common.rs" 27 17 27 21] inv'8 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option item'0)-> {[#"../common.rs" 27 26 27 44] inv'5 result}
      {[#"../common.rs" 23 14 26 5] match result with
        | Core_Option_Option_Type.C_None -> completed'1 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq item'0)) (ix : int) : item'0 =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33] Seq.get (Snapshot.inner self) ix
  let rec index_logic'0 (self:Snapshot.snap_ty (Seq.seq item'0)) (ix:int) (return'  (ret:item'0))= any
    [ return' (result:item'0)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  predicate resolve'2 (self : Snapshot.snap_ty (Seq.seq item'0))
  let rec resolve'2 (self:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use prelude.Snapshot
  predicate resolve'1 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate is_default'0 (self : usize) =
    [#"../../../../../creusot-contracts/src/std/num.rs" 30 28 30 32] self = (0 : usize)
  let rec is_default'0 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_default'0 self} (! return' {result}) ]
    
  let rec take'0 (dest:borrowed usize) (return'  (ret:usize))= {[@expl:precondition] inv'6 dest}
    any
    [ return' (result:usize)-> {inv'7 result}
      {[#"../../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42] is_default'0 ( ^ dest)}
      {[#"../../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37] result =  * dest}
      (! return' {result}) ]
    
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (C04Skip_Skip_Type.t_skip i)))
  let rec resolve'0 (self:Snapshot.snap_ty (borrowed (C04Skip_Skip_Type.t_skip i))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  let rec next (self:borrowed (C04Skip_Skip_Type.t_skip i)) (return'  (ret:Core_Option_Option_Type.t_option item'0))= {[#"../04_skip.rs" 63 17 63 21] inv'2 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [#"../04_skip.rs" 64 23 64 41] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_self} s1
      | s1 = -{resolve'0 old_self}- s2
      | s2 = C04Skip_Skip_Type.t_skip <i> { * self}
          (fun (riter'0:i) (rn'0:usize) ->
            Borrow.borrow_final <usize> {rn'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed usize) ->
                 [ &_7 <- _ret' ] 
                C04Skip_Skip_Type.t_skip <i> { * self}
                  (fun (l_iter'0:i) (l_n'0:usize) ->
                    
                    [ &self <- { self with current = (C04Skip_Skip_Type.C_Skip l_iter'0 ( ^ _7) : C04Skip_Skip_Type.t_skip i) ; } ]
                    
                    s3)))
      | s3 = Borrow.borrow_final <usize> { * _7} {Borrow.get_id _7}
          (fun (_ret':borrowed usize) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = ( ^ _6) ; } ] s4)
      | s4 = take'0 {_6} (fun (_ret':usize) ->  [ &n <- _ret' ] s5)
      | s5 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'1 _7}- s1
      | s1 = 
        [ &skipped <- ([#"../04_skip.rs" 66 26 66 50] Snapshot.new (Seq.empty  : Seq.seq item'0)) : Snapshot.snap_ty (Seq.seq item'0) ]
        
        s2
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'1 skipped} s1 | s1 = -{resolve'2 skipped}- s2 | s2 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [#"../04_skip.rs" 72 20 72 39]  ^ Snapshot.inner old_self =  ^ self}
        {[@expl:loop invariant] [#"../04_skip.rs" 71 20 71 29] inv'2 self}
        {[@expl:loop invariant] [#"../04_skip.rs" 70 20 70 35] UIntSize.to_int (C04Skip_Skip_Type.skip_n ( * self)) = 0}
        {[@expl:loop invariant] [#"../04_skip.rs" 67 8 67 55] forall i : int . 0 <= i
        /\ i < Seq.length (Snapshot.inner skipped)  -> resolve'3 (index_logic'0 skipped i)}
        {[@expl:loop invariant] [#"../04_skip.rs" 67 8 67 55] produces'0 (C04Skip_Skip_Type.skip_iter ( * Snapshot.inner old_self)) (Snapshot.inner skipped) (C04Skip_Skip_Type.skip_iter ( * self))}
        {[@expl:loop invariant] [#"../04_skip.rs" 67 20 67 53] Seq.length (Snapshot.inner skipped) + UIntSize.to_int n
        = UIntSize.to_int (C04Skip_Skip_Type.skip_n ( * Snapshot.inner old_self))}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = C04Skip_Skip_Type.t_skip <i> { * self}
              (fun (riter'0:i) (rn'0:usize) ->
                Borrow.borrow_mut <i> {riter'0}
                  (fun (_ret':borrowed i) ->
                     [ &_19 <- _ret' ] 
                    C04Skip_Skip_Type.t_skip <i> { * self}
                      (fun (l_iter'0:i) (l_n'0:usize) ->
                        
                        [ &self <- { self with current = (C04Skip_Skip_Type.C_Skip ( ^ _19) l_n'0 : C04Skip_Skip_Type.t_skip i) ; } ]
                        
                        s1)))
          | s1 = -{inv'3 ( ^ _19)}- s2
          | s2 = next'0 {_19} (fun (_ret':Core_Option_Option_Type.t_option item'0) ->  [ &r <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = UIntSize.eq {n} {[#"../04_skip.rs" 75 20 75 21] (0 : usize)}
              (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
          | s1 = any [ br0 -> {_21 = false} (! bb8) | br1 -> {_21} (! bb7) ]  ]
          
        | bb8 = s0
          [ s0 = any
            [ br0 -> {r = Core_Option_Option_Type.C_None } (! bb9)
            | br1 (a:item'0)-> {r = Core_Option_Option_Type.C_Some a} (! bb10) ]
             ]
          
        | bb10 = s0 [ s0 = bb11 ] 
        | bb11 = s0
          [ s0 = Core_Option_Option_Type.some <item'0> {r}
              (fun (r0'0:item'0) ->
                 [ &x <- r0'0 ] 
                (any
                [ any_ (_any:item'0)-> (! Core_Option_Option_Type.some <item'0> {r}
                    (fun (l_0'0:item'0) ->
                       [ &r <- Core_Option_Option_Type.C_Some _any : Core_Option_Option_Type.t_option item'0 ] 
                      s1)) ]
                ))
          | s1 = {[@expl:type invariant] inv'4 x} s2
          | s2 = -{resolve'3 x}- s3
          | s3 = {[@expl:type invariant] inv'5 r} s4
          | s4 = -{resolve'4 r}- s5
          | s5 = 
            [ &_26 <- ([#"../04_skip.rs" 79 26 79 73] Snapshot.new (Seq.(++) (Snapshot.inner skipped) (Seq.singleton x))) : Snapshot.snap_ty (Seq.seq item'0) ]
            
            s6
          | s6 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &skipped <- _26 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq item'0))-> (!  [ &_26 <- _any ] s1) ] )
          | s1 = {[@expl:type invariant] inv'1 skipped} s2
          | s2 = -{resolve'2 skipped}- s3
          | s3 = UIntSize.sub {n} {[#"../04_skip.rs" 80 21 80 22] (1 : usize)}
              (fun (_ret':usize) ->  [ &n <- _ret' ] s4)
          | s4 = bb13 ]
          
        | bb13 = s0 [ s0 = bb14 ] 
        | bb14 = s0 [ s0 = bb4 ]  ]
         ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'2 self} s1
      | s1 = -{resolve'5 self}- s2
      | s2 =  [ &_0 <- r ] (any [ any_ (_any:Core_Option_Option_Type.t_option item'0)-> (!  [ &r <- _any ] s3) ] )
      | s3 = bb15 ]
      
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'2 self} s1
      | s1 = -{resolve'5 self}- s2
      | s2 =  [ &_0 <- r ] (any [ any_ (_any:Core_Option_Option_Type.t_option item'0)-> (!  [ &r <- _any ] s3) ] )
      | s3 = bb15 ]
      
    | bb15 = s0 [ s0 = bb16 ] 
    | bb16 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option item'0 = any_l () : Core_Option_Option_Type.t_option item'0
    | & self : borrowed (C04Skip_Skip_Type.t_skip i) = self
    | & old_self : Snapshot.snap_ty (borrowed (C04Skip_Skip_Type.t_skip i)) = any_l () : Snapshot.snap_ty (borrowed (C04Skip_Skip_Type.t_skip i))
    | & n : usize = any_l () : usize
    | & _6 : borrowed usize = any_l () : borrowed usize
    | & _7 : borrowed usize = any_l () : borrowed usize
    | & skipped : Snapshot.snap_ty (Seq.seq item'0) = any_l () : Snapshot.snap_ty (Seq.seq item'0)
    | & r : Core_Option_Option_Type.t_option item'0 = any_l () : Core_Option_Option_Type.t_option item'0
    | & _19 : borrowed i = any_l () : borrowed i
    | & _21 : bool = any_l () : bool
    | & x : item'0 = any_l () : item'0
    | & _26 : Snapshot.snap_ty (Seq.seq item'0) = any_l () : Snapshot.snap_ty (Seq.seq item'0) ]
    
    [ return' (result:Core_Option_Option_Type.t_option item'0)-> {[@expl:postcondition] [#"../04_skip.rs" 63 26 63 41] inv'5 result}
      {[@expl:postcondition] [#"../04_skip.rs" 59 14 62 5] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'1 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C04Skip_Impl0
  type i
  use prelude.Borrow
  predicate invariant'4 (self : borrowed i)
  let rec invariant'4 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed i)
  let rec inv'4 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  type item'0
  use seq.Seq
  predicate invariant'3 (self : Seq.seq item'0)
  let rec invariant'3 (self:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq item'0)
  let rec inv'3 (_x:Seq.seq item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq item'0 . inv'3 x = true
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate invariant'2 (self : C04Skip_Skip_Type.t_skip i)
  let rec invariant'2 (self:C04Skip_Skip_Type.t_skip i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : C04Skip_Skip_Type.t_skip i)
  let rec inv'2 (_x:C04Skip_Skip_Type.t_skip i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : C04Skip_Skip_Type.t_skip i . inv'2 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'1 (self : Core_Option_Option_Type.t_option item'0)
  let rec invariant'1 (self:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Core_Option_Option_Type.t_option item'0)
  let rec inv'1 (_x:Core_Option_Option_Type.t_option item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Core_Option_Option_Type.t_option item'0 . inv'1 x = true
  predicate invariant'0 (self : borrowed (C04Skip_Skip_Type.t_skip i))
  let rec invariant'0 (self:borrowed (C04Skip_Skip_Type.t_skip i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed (C04Skip_Skip_Type.t_skip i))
  let rec inv'0 (_x:borrowed (C04Skip_Skip_Type.t_skip i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed (C04Skip_Skip_Type.t_skip i) . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use seq.Seq
  predicate resolve'0 (self : item'0)
  let rec resolve'0 (self:item'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use seq.Seq
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  let rec produces'1 (self:i) (visited:Seq.seq item'0) (o:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  predicate produces'0 [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq item'0) (o : C04Skip_Skip_Type.t_skip i)
    
   =
    [#"../04_skip.rs" 37 8 44 9] visited = (Seq.empty  : Seq.seq item'0) /\ self = o
    \/ UIntSize.to_int (C04Skip_Skip_Type.skip_n o) = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq item'0 . inv'3 s
    /\ Seq.length s = UIntSize.to_int (C04Skip_Skip_Type.skip_n self)
    /\ produces'1 (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  let rec produces'0 (self:C04Skip_Skip_Type.t_skip i) (visited:Seq.seq item'0) (o:C04Skip_Skip_Type.t_skip i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  let rec completed'1 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate completed'0 [#"../04_skip.rs" 22 4 22 35] (self : borrowed (C04Skip_Skip_Type.t_skip i)) =
    [#"../04_skip.rs" 23 8 31 9] UIntSize.to_int (C04Skip_Skip_Type.skip_n ( ^ self)) = 0
    /\ (exists i : borrowed i . exists s : Seq.seq item'0 . inv'4 i
    /\ inv'3 s
    /\ Seq.length s <= UIntSize.to_int (C04Skip_Skip_Type.skip_n ( * self))
    /\ produces'1 (C04Skip_Skip_Type.skip_iter ( * self)) s ( * i)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i))
    /\ completed'1 i /\  ^ i = C04Skip_Skip_Type.skip_iter ( ^ self))
  let rec completed'0 (self:borrowed (C04Skip_Skip_Type.t_skip i)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  goal next_refn : [#"../04_skip.rs" 63 4 63 41] forall self : borrowed (C04Skip_Skip_Type.t_skip i) . inv'0 self
   -> inv'0 self
  /\ (forall result : Core_Option_Option_Type.t_option item'0 . inv'1 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv'1 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_refl_refn : [#"../04_skip.rs" 50 4 50 26] forall self : C04Skip_Skip_Type.t_skip i . inv'2 self
   -> inv'2 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq item'0) self
   -> produces'0 self (Seq.empty  : Seq.seq item'0) self)
  goal produces_trans_refn : [#"../04_skip.rs" 57 4 57 90] forall a : C04Skip_Skip_Type.t_skip i . forall ab : Seq.seq item'0 . forall b : C04Skip_Skip_Type.t_skip i . forall bc : Seq.seq item'0 . forall c : C04Skip_Skip_Type.t_skip i . inv'2 c
  /\ inv'3 bc /\ inv'2 b /\ inv'3 ab /\ inv'2 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'2 c
  /\ inv'3 bc
  /\ inv'2 b
  /\ inv'3 ab
  /\ inv'2 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
