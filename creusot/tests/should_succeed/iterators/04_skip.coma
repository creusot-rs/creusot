module T_04_skip__Skip [#"04_skip.rs" 9 0 9 28]
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Skip 'i =
    | C_Skip 'i usize
  
  let rec t_Skip < 'i > (input:t_Skip 'i) (ret  (iter:'i) (n:usize))= any
    [ good (iter:'i) (n:usize)-> {C_Skip iter n = input} (! ret {iter} {n}) ]
    
  
  function t_Skip__n (self : t_Skip 'i) : usize =
    match self with
      | C_Skip _ a -> a
      end
  
  function t_Skip__iter (self : t_Skip 'i) : 'i =
    match self with
      | C_Skip a _ -> a
      end
end
module M_04_skip__qyi17349041008065389927__produces_refl [#"04_skip.rs" 51 4 51 26] (* <Skip<I> as common::Iterator> *)
  type i
  
  let%span s04_skip0 = "04_skip.rs" 49 15 49 24
  let%span s04_skip1 = "04_skip.rs" 50 14 50 45
  let%span s04_skip2 = "04_skip.rs" 37 8 44 9
  let%span scommon3 = "common.rs" 14 15 14 24
  let%span scommon4 = "common.rs" 15 14 15 45
  let%span scommon5 = "common.rs" 19 15 19 21
  let%span scommon6 = "common.rs" 20 15 20 21
  let%span scommon7 = "common.rs" 21 15 21 21
  let%span scommon8 = "common.rs" 22 15 22 32
  let%span scommon9 = "common.rs" 23 15 23 32
  let%span scommon10 = "common.rs" 24 14 24 42
  let%span sseq11 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed12 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'4 (_1 : t_Item'0)
  
  predicate invariant'1 (self : t_Item'0) =
    [%#sboxed12] inv'4 self
  
  predicate inv'3 (_1 : t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Item'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'0 (self : Seq.seq t_Item'0) =
    [%#sseq11] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  predicate inv'2 (_1 : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon5] inv'2 a)
   -> ([%#scommon6] inv'2 b)
   -> ([%#scommon7] inv'2 c)
   -> ([%#scommon8] produces'1 a ab b)
   -> ([%#scommon9] produces'1 b bc c)  -> ([%#scommon10] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon3] inv'2 self)
   -> ([%#scommon4] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use T_04_skip__Skip as Skip'0
  
  predicate inv'0 (_1 : Skip'0.t_Skip i)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Skip'0.t_Skip i [inv'0 x] . inv'0 x
  = match x with
    | Skip'0.C_Skip iter n -> inv'2 iter
    end
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_Item'0)
  
  use seq.Seq
  
  use T_04_skip__Skip as T_04_skip__Skip
  
  use prelude.prelude.UIntSize
  
  use T_04_skip__Skip as T_04_skip__Skip
  
  predicate produces'0 [#"04_skip.rs" 36 4 36 64] (self : Skip'0.t_Skip i) (visited : Seq.seq t_Item'0) (o : Skip'0.t_Skip i)
    
   =
    [%#s04_skip2] visited = (Seq.empty  : Seq.seq t_Item'0) /\ self = o
    \/ UIntSize.to_int (T_04_skip__Skip.t_Skip__n o) = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ Seq.length s = UIntSize.to_int (T_04_skip__Skip.t_Skip__n self)
    /\ produces'1 (T_04_skip__Skip.t_Skip__iter self) (Seq.(++) s visited) (T_04_skip__Skip.t_Skip__iter o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  
  constant self  : Skip'0.t_Skip i
  
  function produces_refl [#"04_skip.rs" 51 4 51 26] (self : Skip'0.t_Skip i) : ()
  
  goal vc_produces_refl : ([%#s04_skip0] inv'0 self)
   -> ([%#s04_skip1] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
end
module M_04_skip__qyi17349041008065389927__produces_trans [#"04_skip.rs" 61 4 61 90] (* <Skip<I> as common::Iterator> *)
  type i
  
  let%span s04_skip0 = "04_skip.rs" 55 15 55 21
  let%span s04_skip1 = "04_skip.rs" 56 15 56 21
  let%span s04_skip2 = "04_skip.rs" 57 15 57 21
  let%span s04_skip3 = "04_skip.rs" 58 15 58 32
  let%span s04_skip4 = "04_skip.rs" 59 15 59 32
  let%span s04_skip5 = "04_skip.rs" 60 14 60 42
  let%span s04_skip6 = "04_skip.rs" 37 8 44 9
  let%span scommon7 = "common.rs" 14 15 14 24
  let%span scommon8 = "common.rs" 15 14 15 45
  let%span scommon9 = "common.rs" 19 15 19 21
  let%span scommon10 = "common.rs" 20 15 20 21
  let%span scommon11 = "common.rs" 21 15 21 21
  let%span scommon12 = "common.rs" 22 15 22 32
  let%span scommon13 = "common.rs" 23 15 23 32
  let%span scommon14 = "common.rs" 24 14 24 42
  let%span sseq15 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed16 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'4 (_1 : t_Item'0)
  
  predicate invariant'1 (self : t_Item'0) =
    [%#sboxed16] inv'4 self
  
  predicate inv'3 (_1 : t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Item'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'0 (self : Seq.seq t_Item'0) =
    [%#sseq15] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  predicate inv'2 (_1 : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon9] inv'2 a)
   -> ([%#scommon10] inv'2 b)
   -> ([%#scommon11] inv'2 c)
   -> ([%#scommon12] produces'1 a ab b)
   -> ([%#scommon13] produces'1 b bc c)  -> ([%#scommon14] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon7] inv'2 self)
   -> ([%#scommon8] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use T_04_skip__Skip as Skip'0
  
  predicate inv'0 (_1 : Skip'0.t_Skip i)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Skip'0.t_Skip i [inv'0 x] . inv'0 x
  = match x with
    | Skip'0.C_Skip iter n -> inv'2 iter
    end
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_Item'0)
  
  use seq.Seq
  
  use T_04_skip__Skip as T_04_skip__Skip
  
  use prelude.prelude.UIntSize
  
  use T_04_skip__Skip as T_04_skip__Skip
  
  predicate produces'0 [#"04_skip.rs" 36 4 36 64] (self : Skip'0.t_Skip i) (visited : Seq.seq t_Item'0) (o : Skip'0.t_Skip i)
    
   =
    [%#s04_skip6] visited = (Seq.empty  : Seq.seq t_Item'0) /\ self = o
    \/ UIntSize.to_int (T_04_skip__Skip.t_Skip__n o) = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ Seq.length s = UIntSize.to_int (T_04_skip__Skip.t_Skip__n self)
    /\ produces'1 (T_04_skip__Skip.t_Skip__iter self) (Seq.(++) s visited) (T_04_skip__Skip.t_Skip__iter o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  
  constant a  : Skip'0.t_Skip i
  
  constant ab  : Seq.seq t_Item'0
  
  constant b  : Skip'0.t_Skip i
  
  constant bc  : Seq.seq t_Item'0
  
  constant c  : Skip'0.t_Skip i
  
  function produces_trans [#"04_skip.rs" 61 4 61 90] (a : Skip'0.t_Skip i) (ab : Seq.seq t_Item'0) (b : Skip'0.t_Skip i) (bc : Seq.seq t_Item'0) (c : Skip'0.t_Skip i) : ()
    
  
  goal vc_produces_trans : ([%#s04_skip4] produces'0 b bc c)
   -> ([%#s04_skip3] produces'0 a ab b)
   -> ([%#s04_skip2] inv'0 c)
   -> ([%#s04_skip1] inv'0 b)  -> ([%#s04_skip0] inv'0 a)  -> ([%#s04_skip5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_04_skip__qyi17349041008065389927__next [#"04_skip.rs" 67 4 67 41] (* <Skip<I> as common::Iterator> *)
  type i
  
  let%span s04_skip0 = "04_skip.rs" 68 23 68 41
  let%span s04_skip1 = "04_skip.rs" 70 26 70 50
  let%span s04_skip2 = "04_skip.rs" 72 20 72 29
  let%span s04_skip3 = "04_skip.rs" 73 20 73 33
  let%span s04_skip4 = "04_skip.rs" 74 20 74 53
  let%span s04_skip5 = "04_skip.rs" 72 8 72 31
  let%span s04_skip6 = "04_skip.rs" 77 20 77 35
  let%span s04_skip7 = "04_skip.rs" 80 20 80 21
  let%span s04_skip8 = "04_skip.rs" 84 26 84 73
  let%span s04_skip9 = "04_skip.rs" 85 21 85 22
  let%span s04_skip10 = "04_skip.rs" 67 17 67 21
  let%span s04_skip11 = "04_skip.rs" 63 14 66 5
  let%span s04_skip12 = "04_skip.rs" 67 26 67 41
  let%span smem13 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  let%span smem14 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  let%span sops15 = "../../../../creusot-contracts/src/logic/ops.rs" 86 8 86 33
  let%span scommon16 = "common.rs" 31 17 31 21
  let%span scommon17 = "common.rs" 27 14 30 5
  let%span scommon18 = "common.rs" 31 26 31 44
  let%span s04_skip19 = "04_skip.rs" 23 8 31 9
  let%span s04_skip20 = "04_skip.rs" 37 8 44 9
  let%span snum21 = "../../../../creusot-contracts/src/std/num.rs" 30 28 30 32
  let%span sresolve22 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span scommon23 = "common.rs" 14 15 14 24
  let%span scommon24 = "common.rs" 15 14 15 45
  let%span scommon25 = "common.rs" 19 15 19 21
  let%span scommon26 = "common.rs" 20 15 20 21
  let%span scommon27 = "common.rs" 21 15 21 21
  let%span scommon28 = "common.rs" 22 15 22 32
  let%span scommon29 = "common.rs" 23 15 23 32
  let%span scommon30 = "common.rs" 24 14 24 42
  let%span sinvariant31 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq32 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed33 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'3 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed33] inv'3 self
  
  predicate inv'9 (_1 : t_Item'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Item'0 [inv'9 x] . inv'9 x = invariant'3 x
  
  predicate inv'2 (_1 : i)
  
  use T_04_skip__Skip as Skip'0
  
  predicate inv'8 (_1 : Skip'0.t_Skip i)
  
  axiom inv_axiom'6 [@rewrite] : forall x : Skip'0.t_Skip i [inv'8 x] . inv'8 x
  = match x with
    | Skip'0.C_Skip iter n -> inv'2 iter
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed i) =
    [%#sinvariant31] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'7 (_1 : borrowed i)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed i [inv'7 x] . inv'7 x = invariant'2 x
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  predicate inv'6 (_1 : usize)
  
  axiom inv_axiom'4 [@rewrite] : forall x : usize [inv'6 x] . inv'6 x = true
  
  predicate inv'5 (_1 : borrowed usize)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed usize [inv'5 x] . inv'5 x = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'4 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'4 x] . inv'4 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#sseq32] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (Skip'0.t_Skip i)) =
    [%#sinvariant31] inv'8 self.current /\ inv'8 self.final
  
  predicate inv'0 (_1 : borrowed (Skip'0.t_Skip i))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (Skip'0.t_Skip i) [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#scommon25] inv'2 a)
   -> ([%#scommon26] inv'2 b)
   -> ([%#scommon27] inv'2 c)
   -> ([%#scommon28] produces'0 a ab b)
   -> ([%#scommon29] produces'0 b bc c)  -> ([%#scommon30] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#scommon23] inv'2 self)
   -> ([%#scommon24] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate resolve'1 (_1 : t_Item'0)
  
  use seq.Seq
  
  use T_04_skip__Skip as T_04_skip__Skip
  
  use prelude.prelude.UIntSize
  
  use T_04_skip__Skip as T_04_skip__Skip
  
  predicate produces'1 [#"04_skip.rs" 36 4 36 64] (self : Skip'0.t_Skip i) (visited : Seq.seq t_Item'0) (o : Skip'0.t_Skip i)
    
   =
    [%#s04_skip20] visited = (Seq.empty  : Seq.seq t_Item'0) /\ self = o
    \/ UIntSize.to_int (T_04_skip__Skip.t_Skip__n o) = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ Seq.length s = UIntSize.to_int (T_04_skip__Skip.t_Skip__n self)
    /\ produces'0 (T_04_skip__Skip.t_Skip__iter self) (Seq.(++) s visited) (T_04_skip__Skip.t_Skip__iter o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'1 (Seq.get s i)))
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate completed'0 [#"04_skip.rs" 22 4 22 35] (self : borrowed (Skip'0.t_Skip i)) =
    [%#s04_skip19] UIntSize.to_int (T_04_skip__Skip.t_Skip__n self.final) = 0
    /\ (exists s : Seq.seq t_Item'0, i : borrowed i . inv'1 s
    /\ inv'7 i
    /\ Seq.length s <= UIntSize.to_int (T_04_skip__Skip.t_Skip__n self.current)
    /\ produces'0 (T_04_skip__Skip.t_Skip__iter self.current) s i.current
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'1 (Seq.get s i))
    /\ completed'1 i /\ i.final = T_04_skip__Skip.t_Skip__iter self.final)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'4 (self : borrowed (Skip'0.t_Skip i)) =
    [%#sresolve22] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Skip'0.t_Skip i)) =
    resolve'4 _1
  
  use seq.Seq
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option t_Item'0))= {[@expl:precondition] [%#scommon16] inv'7 self}
    any
    [ return' (result:Option'0.t_Option t_Item'0)-> {[%#scommon18] inv'4 result}
      {[%#scommon17] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq t_Item'0)) (ix : int) : t_Item'0 =
    [%#sops15] Seq.get (Snapshot.inner self) ix
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate resolve'3 (self : borrowed usize) =
    [%#sresolve22] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed usize) =
    resolve'3 _1
  
  predicate is_default'0 (self : usize) =
    [%#snum21] self = (0 : usize)
  
  let rec take'0 (dest:borrowed usize) (return'  (ret:usize))= {[@expl:precondition] inv'5 dest}
    any
    [ return' (result:usize)-> {inv'6 result}
      {[%#smem14] is_default'0 dest.final}
      {[%#smem13] result = dest.current}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (Skip'0.t_Skip i)) (return'  (ret:Option'0.t_Option t_Item'0))= {[%#s04_skip10] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#s04_skip0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Skip'0.t_Skip <i> {self.current}
          (fun (riter'0:i) (rn'0:usize) ->
            Borrow.borrow_final <usize> {rn'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed usize) ->
                 [ &_7 <- _ret' ] 
                 [ &self <- { self with current = Skip'0.C_Skip riter'0 _ret'.final ; } ] 
                s1))
      | s1 = Borrow.borrow_final <usize> {_7.current} {Borrow.get_id _7}
          (fun (_ret':borrowed usize) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = _ret'.final ; } ] s2)
      | s2 = take'0 {_6} (fun (_ret':usize) ->  [ &n <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 =  [ &skipped <- [%#s04_skip1] Snapshot.new (Seq.empty  : Seq.seq t_Item'0) ] s2
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &old_4_0 <- Snapshot.new self ] s1 | s1 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] (Snapshot.inner old_4_0).final = self.final}
        {[@expl:loop invariant] [%#s04_skip6] UIntSize.to_int (T_04_skip__Skip.t_Skip__n self.current) = 0}
        {[@expl:loop invariant] [%#s04_skip5] forall i : int . 0 <= i /\ i < Seq.length (Snapshot.inner skipped)
         -> resolve'1 (index_logic'0 skipped i)}
        {[@expl:loop invariant] [%#s04_skip5] produces'0 (T_04_skip__Skip.t_Skip__iter (Snapshot.inner old_self).current) (Snapshot.inner skipped) (T_04_skip__Skip.t_Skip__iter self.current)}
        {[@expl:loop invariant] [%#s04_skip4] Seq.length (Snapshot.inner skipped) + UIntSize.to_int n
        = UIntSize.to_int (T_04_skip__Skip.t_Skip__n (Snapshot.inner old_self).current)}
        {[@expl:loop invariant] [%#s04_skip3] inv'1 (Snapshot.inner skipped)}
        {[@expl:loop invariant] [%#s04_skip2] inv'0 self}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Skip'0.t_Skip <i> {self.current}
              (fun (riter'0:i) (rn'0:usize) ->
                {inv'2 riter'0}
                Borrow.borrow_mut <i> {riter'0}
                  (fun (_ret':borrowed i) ->
                     [ &_19 <- _ret' ] 
                    -{inv'2 _ret'.final}-
                     [ &self <- { self with current = Skip'0.C_Skip _ret'.final rn'0 ; } ] 
                    s1))
          | s1 = next'0 {_19} (fun (_ret':Option'0.t_Option t_Item'0) ->  [ &r <- _ret' ] s2)
          | s2 = bb6 ]
          
        | bb6 = s0
          [ s0 = UIntSize.eq {n} {[%#s04_skip7] (0 : usize)} (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
          | s1 = any [ br0 -> {_21 = false} (! bb8) | br1 -> {_21} (! bb7) ]  ]
          
        | bb8 = any [ br0 -> {r = Option'0.C_None } (! bb9) | br1 (a:t_Item'0)-> {r = Option'0.C_Some a} (! bb10) ] 
        | bb10 = bb11
        | bb11 = s0
          [ s0 = Option'0.v_Some <t_Item'0> {r} (fun (r0'0:t_Item'0) ->  [ &x <- r0'0 ] s1)
          | s1 = {[@expl:type invariant] inv'3 x} s2
          | s2 = -{resolve'1 x}- s3
          | s3 =  [ &_26 <- [%#s04_skip8] Snapshot.new (Seq.(++) (Snapshot.inner skipped) (Seq.singleton x)) ] s4
          | s4 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &skipped <- _26 ] s1
          | s1 = UIntSize.sub {n} {[%#s04_skip9] (1 : usize)} (fun (_ret':usize) ->  [ &n <- _ret' ] s2)
          | s2 = bb13 ]
          
        | bb13 = bb14
        | bb14 = bb4 ]
         ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'2 self}- s2 | s2 =  [ &_0 <- r ] s3 | s3 = bb15 ]
      
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'2 self}- s2 | s2 =  [ &_0 <- r ] s3 | s3 = bb15 ]
      
    | bb15 = bb16
    | bb16 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option t_Item'0 = any_l ()
    | & self : borrowed (Skip'0.t_Skip i) = self
    | & old_self : Snapshot.snap_ty (borrowed (Skip'0.t_Skip i)) = any_l ()
    | & n : usize = any_l ()
    | & _6 : borrowed usize = any_l ()
    | & _7 : borrowed usize = any_l ()
    | & skipped : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & r : Option'0.t_Option t_Item'0 = any_l ()
    | & _19 : borrowed i = any_l ()
    | & _21 : bool = any_l ()
    | & x : t_Item'0 = any_l ()
    | & _26 : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & old_4_0 : Snapshot.snap_ty (borrowed (Skip'0.t_Skip i)) = any_l () ]
    
    [ return' (result:Option'0.t_Option t_Item'0)-> {[@expl:postcondition] [%#s04_skip12] inv'4 result}
      {[@expl:postcondition] [%#s04_skip11] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_04_skip__qyi17349041008065389927 [#"04_skip.rs" 14 0 16 16] (* <Skip<I> as common::Iterator> *)
  type i
  
  let%span s04_skip0 = "04_skip.rs" 61 4 61 90
  let%span s04_skip1 = "04_skip.rs" 51 4 51 26
  let%span s04_skip2 = "04_skip.rs" 67 4 67 41
  let%span s04_skip3 = "04_skip.rs" 37 8 44 9
  let%span s04_skip4 = "04_skip.rs" 23 8 31 9
  let%span sinvariant5 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq6 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed7 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_Item'0
  
  predicate inv'6 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed7] inv'6 self
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = invariant'3 x
  
  predicate inv'5 (_1 : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed i) =
    [%#sinvariant5] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'4 (_1 : borrowed i)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed i [inv'4 x] . inv'4 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#sseq6] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'6 a_0
    end
  
  use T_04_skip__Skip as Skip'0
  
  predicate inv'0 (_1 : Skip'0.t_Skip i)
  
  predicate invariant'0 (self : borrowed (Skip'0.t_Skip i)) =
    [%#sinvariant5] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Skip'0.t_Skip i))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Skip'0.t_Skip i) [inv'1 x] . inv'1 x = invariant'0 x
  
  axiom inv_axiom'0 [@rewrite] : forall x : Skip'0.t_Skip i [inv'0 x] . inv'0 x
  = match x with
    | Skip'0.C_Skip iter n -> inv'5 iter
    end
  
  use seq.Seq
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate resolve'0 (_1 : t_Item'0)
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use T_04_skip__Skip as T_04_skip__Skip
  
  use prelude.prelude.UIntSize
  
  use T_04_skip__Skip as T_04_skip__Skip
  
  predicate completed'0 [#"04_skip.rs" 22 4 22 35] (self : borrowed (Skip'0.t_Skip i)) =
    [%#s04_skip4] UIntSize.to_int (T_04_skip__Skip.t_Skip__n self.final) = 0
    /\ (exists s : Seq.seq t_Item'0, i : borrowed i . inv'3 s
    /\ inv'4 i
    /\ Seq.length s <= UIntSize.to_int (T_04_skip__Skip.t_Skip__n self.current)
    /\ produces'1 (T_04_skip__Skip.t_Skip__iter self.current) s i.current
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i))
    /\ completed'1 i /\ i.final = T_04_skip__Skip.t_Skip__iter self.final)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"04_skip.rs" 36 4 36 64] (self : Skip'0.t_Skip i) (visited : Seq.seq t_Item'0) (o : Skip'0.t_Skip i)
    
   =
    [%#s04_skip3] visited = (Seq.empty  : Seq.seq t_Item'0) /\ self = o
    \/ UIntSize.to_int (T_04_skip__Skip.t_Skip__n o) = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq t_Item'0 . inv'3 s
    /\ Seq.length s = UIntSize.to_int (T_04_skip__Skip.t_Skip__n self)
    /\ produces'1 (T_04_skip__Skip.t_Skip__iter self) (Seq.(++) s visited) (T_04_skip__Skip.t_Skip__iter o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  
  goal produces_trans_refn : [%#s04_skip0] forall a : Skip'0.t_Skip i . forall ab : Seq.seq t_Item'0 . forall b : Skip'0.t_Skip i . forall bc : Seq.seq t_Item'0 . forall c : Skip'0.t_Skip i . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal produces_refl_refn : [%#s04_skip1] forall self : Skip'0.t_Skip i . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  goal next_refn : [%#s04_skip2] forall self : borrowed (Skip'0.t_Skip i) . inv'1 self
   -> inv'1 self
  /\ (forall result : Option'0.t_Option t_Item'0 . inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
end
