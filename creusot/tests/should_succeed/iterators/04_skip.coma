
module C04Skip_Skip_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_skip 'i =
    | C_Skip 'i usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_skip < 'i > (input:t_skip 'i) (ret  (iter:'i) (n:usize))= any
    [ good (iter:'i) (n:usize)-> {C_Skip iter n = input} (! ret {iter} {n})
    | bad (iter:'i) (n:usize)-> {C_Skip iter n <> input} {false} any ]
    
  
  function skip_n (self : t_skip 'i) : usize =
    match self with
      | C_Skip _ a -> a
      end
  
  function skip_iter (self : t_skip 'i) : 'i =
    match self with
      | C_Skip a _ -> a
      end
end
module C04Skip_Impl0_ProducesRefl_Impl
  type i
  
  let%span s04_skip0 = "../04_skip.rs" 50 21 50 25
  
  let%span s04_skip1 = "../04_skip.rs" 49 14 49 45
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../common.rs" 18 15 18 32
  
  let%span span4 = "../common.rs" 19 15 19 32
  
  let%span span5 = "../common.rs" 21 22 21 23
  
  let%span span6 = "../common.rs" 21 31 21 33
  
  let%span span7 = "../common.rs" 21 52 21 53
  
  let%span span8 = "../common.rs" 21 61 21 63
  
  let%span span9 = "../common.rs" 21 82 21 83
  
  let%span span10 = "../common.rs" 20 14 20 42
  
  let%span span11 = "../common.rs" 15 21 15 25
  
  let%span span12 = "../common.rs" 14 14 14 45
  
  let%span span13 = "../04_skip.rs" 37 8 44 9
  
  predicate invariant'2 (self : i)
  
  predicate inv'2 (_x : i)
  
  axiom inv'2 : forall x : i . inv'2 x = true
  
  type item'0
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq item'0) =
    [%#span2] true
  
  predicate inv'1 (_x : Seq.seq item'0)
  
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span3] produces'1 a ab b)
   -> ([%#span4] produces'1 b bc c)
   -> ([%#span5] inv'2 a)
   -> ([%#span6] inv'1 ab)
   -> ([%#span7] inv'2 b)
   -> ([%#span8] inv'1 bc)  -> ([%#span9] inv'2 c)  -> ([%#span10] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span11] inv'2 self)
   -> ([%#span12] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  use C04Skip_Skip_Type as Skip'0
  
  predicate invariant'0 (self : Skip'0.t_skip i) =
    [%#span2] true
  
  predicate inv'0 (_x : Skip'0.t_skip i)
  
  axiom inv'0 : forall x : Skip'0.t_skip i . inv'0 x = true
  
  predicate resolve'0 (self : item'0)
  
  use seq.Seq
  
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  predicate produces'0 [#"../04_skip.rs" 36 4 36 64] (self : Skip'0.t_skip i) (visited : Seq.seq item'0) (o : Skip'0.t_skip i)
    
   =
    [%#span13] visited = (Seq.empty  : Seq.seq item'0) /\ self = o
    \/ UIntSize.to_int (C04Skip_Skip_Type.skip_n o) = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq item'0 . inv'1 s
    /\ Seq.length s = UIntSize.to_int (C04Skip_Skip_Type.skip_n self)
    /\ produces'1 (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  
  constant self  : Skip'0.t_skip i
  
  function produces_refl [#"../04_skip.rs" 50 4 50 26] (self : Skip'0.t_skip i) : ()
  
  goal vc_produces_refl : ([%#s04_skip0] inv'0 self)
   -> ([%#s04_skip1] produces'0 self (Seq.empty  : Seq.seq item'0) self)
end
module C04Skip_Impl0_ProducesTrans_Impl
  type i
  
  let%span s04_skip0 = "../04_skip.rs" 54 15 54 32
  
  let%span s04_skip1 = "../04_skip.rs" 55 15 55 32
  
  let%span s04_skip2 = "../04_skip.rs" 57 22 57 23
  
  let%span s04_skip3 = "../04_skip.rs" 57 31 57 33
  
  let%span s04_skip4 = "../04_skip.rs" 57 52 57 53
  
  let%span s04_skip5 = "../04_skip.rs" 57 61 57 63
  
  let%span s04_skip6 = "../04_skip.rs" 57 82 57 83
  
  let%span s04_skip7 = "../04_skip.rs" 56 14 56 42
  
  let%span span8 = "../common.rs" 18 15 18 32
  
  let%span span9 = "../common.rs" 19 15 19 32
  
  let%span span10 = "../common.rs" 21 22 21 23
  
  let%span span11 = "../common.rs" 21 31 21 33
  
  let%span span12 = "../common.rs" 21 52 21 53
  
  let%span span13 = "../common.rs" 21 61 21 63
  
  let%span span14 = "../common.rs" 21 82 21 83
  
  let%span span15 = "../common.rs" 20 14 20 42
  
  let%span span16 = "../common.rs" 15 21 15 25
  
  let%span span17 = "../common.rs" 14 14 14 45
  
  let%span span18 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span19 = "../04_skip.rs" 37 8 44 9
  
  predicate invariant'2 (self : i)
  
  predicate inv'2 (_x : i)
  
  axiom inv'2 : forall x : i . inv'2 x = true
  
  type item'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'1 (_x : Seq.seq item'0)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span8] produces'1 a ab b)
   -> ([%#span9] produces'1 b bc c)
   -> ([%#span10] inv'2 a)
   -> ([%#span11] inv'1 ab)
   -> ([%#span12] inv'2 b)
   -> ([%#span13] inv'1 bc)  -> ([%#span14] inv'2 c)  -> ([%#span15] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span16] inv'2 self)
   -> ([%#span17] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate invariant'1 (self : Seq.seq item'0) =
    [%#span18] true
  
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  
  use C04Skip_Skip_Type as Skip'0
  
  predicate invariant'0 (self : Skip'0.t_skip i) =
    [%#span18] true
  
  predicate inv'0 (_x : Skip'0.t_skip i)
  
  axiom inv'0 : forall x : Skip'0.t_skip i . inv'0 x = true
  
  predicate resolve'0 (self : item'0)
  
  use seq.Seq
  
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  predicate produces'0 [#"../04_skip.rs" 36 4 36 64] (self : Skip'0.t_skip i) (visited : Seq.seq item'0) (o : Skip'0.t_skip i)
    
   =
    [%#span19] visited = (Seq.empty  : Seq.seq item'0) /\ self = o
    \/ UIntSize.to_int (C04Skip_Skip_Type.skip_n o) = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq item'0 . inv'1 s
    /\ Seq.length s = UIntSize.to_int (C04Skip_Skip_Type.skip_n self)
    /\ produces'1 (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  
  constant a  : Skip'0.t_skip i
  
  constant ab  : Seq.seq item'0
  
  constant b  : Skip'0.t_skip i
  
  constant bc  : Seq.seq item'0
  
  constant c  : Skip'0.t_skip i
  
  function produces_trans [#"../04_skip.rs" 57 4 57 90] (a : Skip'0.t_skip i) (ab : Seq.seq item'0) (b : Skip'0.t_skip i) (bc : Seq.seq item'0) (c : Skip'0.t_skip i) : ()
    
  
  goal vc_produces_trans : ([%#s04_skip6] inv'0 c)
   -> ([%#s04_skip5] inv'1 bc)
   -> ([%#s04_skip4] inv'0 b)
   -> ([%#s04_skip3] inv'1 ab)
   -> ([%#s04_skip2] inv'0 a)
   -> ([%#s04_skip1] produces'0 b bc c)
   -> ([%#s04_skip0] produces'0 a ab b)  -> ([%#s04_skip7] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C04Skip_Impl0_Next
  type i
  
  let%span s04_skip0 = "../04_skip.rs" 64 23 64 41
  
  let%span s04_skip1 = "../04_skip.rs" 66 26 66 50
  
  let%span s04_skip2 = "../04_skip.rs" 67 20 67 53
  
  let%span s04_skip3 = "../04_skip.rs" 67 8 67 55
  
  let%span s04_skip4 = "../04_skip.rs" 70 20 70 35
  
  let%span s04_skip5 = "../04_skip.rs" 71 20 71 29
  
  let%span s04_skip6 = "../04_skip.rs" 72 20 72 39
  
  let%span s04_skip7 = "../04_skip.rs" 75 20 75 21
  
  let%span s04_skip8 = "../04_skip.rs" 79 26 79 73
  
  let%span s04_skip9 = "../04_skip.rs" 80 21 80 22
  
  let%span s04_skip10 = "../04_skip.rs" 63 17 63 21
  
  let%span s04_skip11 = "../04_skip.rs" 59 14 62 5
  
  let%span s04_skip12 = "../04_skip.rs" 63 26 63 41
  
  let%span span13 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span14 = "../common.rs" 18 15 18 32
  
  let%span span15 = "../common.rs" 19 15 19 32
  
  let%span span16 = "../common.rs" 21 22 21 23
  
  let%span span17 = "../common.rs" 21 31 21 33
  
  let%span span18 = "../common.rs" 21 52 21 53
  
  let%span span19 = "../common.rs" 21 61 21 63
  
  let%span span20 = "../common.rs" 21 82 21 83
  
  let%span span21 = "../common.rs" 20 14 20 42
  
  let%span span22 = "../common.rs" 15 21 15 25
  
  let%span span23 = "../common.rs" 14 14 14 45
  
  let%span span24 = "../04_skip.rs" 37 8 44 9
  
  let%span span25 = "../04_skip.rs" 23 8 31 9
  
  let%span span26 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span27 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span28 = "../common.rs" 27 17 27 21
  
  let%span span29 = "../common.rs" 23 14 26 5
  
  let%span span30 = "../common.rs" 27 26 27 44
  
  let%span span31 = "../../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33
  
  let%span span32 = "../../../../../creusot-contracts/src/std/num.rs" 30 28 30 32
  
  let%span span33 = "" 0 0 0 0
  
  let%span span34 = "../../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  
  let%span span35 = "../../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  
  let%span span36 = "" 0 0 0 0
  
  type item'0
  
  use seq.Seq
  
  predicate invariant'9 (self : Seq.seq item'0) =
    [%#span13] true
  
  predicate inv'9 (_x : Seq.seq item'0)
  
  axiom inv'9 : forall x : Seq.seq item'0 . inv'9 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'8 (self : borrowed i)
  
  predicate inv'8 (_x : borrowed i)
  
  axiom inv'8 : forall x : borrowed i . inv'8 x = true
  
  use prelude.prelude.UIntSize
  
  predicate invariant'7 (self : usize) =
    [%#span13] true
  
  predicate inv'7 (_x : usize)
  
  axiom inv'7 : forall x : usize . inv'7 x = true
  
  predicate invariant'6 (self : borrowed usize) =
    [%#span13] true
  
  predicate inv'6 (_x : borrowed usize)
  
  axiom inv'6 : forall x : borrowed usize . inv'6 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'5 (self : Option'0.t_option item'0) =
    [%#span13] true
  
  predicate inv'5 (_x : Option'0.t_option item'0)
  
  axiom inv'5 : forall x : Option'0.t_option item'0 . inv'5 x = true
  
  predicate invariant'4 (self : item'0)
  
  predicate inv'4 (_x : item'0)
  
  axiom inv'4 : forall x : item'0 . inv'4 x = true
  
  predicate invariant'3 (self : i)
  
  predicate inv'3 (_x : i)
  
  axiom inv'3 : forall x : i . inv'3 x = true
  
  use C04Skip_Skip_Type as Skip'0
  
  predicate invariant'2 (self : borrowed (Skip'0.t_skip i)) =
    [%#span13] true
  
  predicate inv'2 (_x : borrowed (Skip'0.t_skip i))
  
  axiom inv'2 : forall x : borrowed (Skip'0.t_skip i) . inv'2 x = true
  
  use prelude.prelude.Snapshot
  
  predicate invariant'1 (self : Snapshot.snap_ty (Seq.seq item'0)) =
    [%#span13] true
  
  predicate inv'1 (_x : Snapshot.snap_ty (Seq.seq item'0))
  
  axiom inv'1 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'1 x = true
  
  use seq.Seq
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span14] produces'0 a ab b)
   -> ([%#span15] produces'0 b bc c)
   -> ([%#span16] inv'3 a)
   -> ([%#span17] inv'9 ab)
   -> ([%#span18] inv'3 b)
   -> ([%#span19] inv'9 bc)  -> ([%#span20] inv'3 c)  -> ([%#span21] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span22] inv'3 self)
   -> ([%#span23] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (Skip'0.t_skip i))) =
    [%#span13] true
  
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (Skip'0.t_skip i)))
  
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (Skip'0.t_skip i)) . inv'0 x = true
  
  predicate resolve'3 (self : item'0)
  
  use seq.Seq
  
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  predicate produces'1 [#"../04_skip.rs" 36 4 36 64] (self : Skip'0.t_skip i) (visited : Seq.seq item'0) (o : Skip'0.t_skip i)
    
   =
    [%#span24] visited = (Seq.empty  : Seq.seq item'0) /\ self = o
    \/ UIntSize.to_int (C04Skip_Skip_Type.skip_n o) = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq item'0 . inv'9 s
    /\ Seq.length s = UIntSize.to_int (C04Skip_Skip_Type.skip_n self)
    /\ produces'0 (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'3 (Seq.get s i)))
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate completed'0 [#"../04_skip.rs" 22 4 22 35] (self : borrowed (Skip'0.t_skip i)) =
    [%#span25] UIntSize.to_int (C04Skip_Skip_Type.skip_n self.final) = 0
    /\ (exists i : borrowed i . exists s : Seq.seq item'0 . inv'8 i
    /\ inv'9 s
    /\ Seq.length s <= UIntSize.to_int (C04Skip_Skip_Type.skip_n self.current)
    /\ produces'0 (C04Skip_Skip_Type.skip_iter self.current) s i.current
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'3 (Seq.get s i))
    /\ completed'1 i /\ i.final = C04Skip_Skip_Type.skip_iter self.final)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'5 (self : borrowed (Skip'0.t_skip i)) =
    [%#span26] self.final = self.current
  
  use seq.Seq
  
  predicate resolve'4 (self : Option'0.t_option item'0) =
    [%#span27] true
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_option item'0))= {[@expl:precondition] [%#span28] inv'8 self}
    any
    [ return' (result:Option'0.t_option item'0)-> {[%#span30] inv'5 result}
      {[%#span29] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq item'0)) (ix : int) : item'0 =
    [%#span31] Seq.get (Snapshot.inner self) ix
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate resolve'2 (self : Snapshot.snap_ty (Seq.seq item'0)) =
    [%#span27] true
  
  use prelude.prelude.Snapshot
  
  predicate resolve'1 (self : borrowed usize) =
    [%#span26] self.final = self.current
  
  predicate is_default'0 (self : usize) =
    [%#span32] self = (0 : usize)
  
  let rec take'0 (dest:borrowed usize) (return'  (ret:usize))= {[@expl:precondition] [%#span33] inv'6 dest}
    any
    [ return' (result:usize)-> {[%#span36] inv'7 result}
      {[%#span35] is_default'0 dest.final}
      {[%#span34] result = dest.current}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (Skip'0.t_skip i))) =
    [%#span27] true
  
  use prelude.prelude.Snapshot
  
  let rec next (self:borrowed (Skip'0.t_skip i)) (return'  (ret:Option'0.t_option item'0))= {[%#s04_skip10] inv'2 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#s04_skip0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_self} s1
      | s1 = -{resolve'0 old_self}- s2
      | s2 = Skip'0.t_skip <i> {self.current}
          (fun (riter'0:i) (rn'0:usize) ->
            Borrow.borrow_final <usize> {rn'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed usize) ->
                 [ &_7 <- _ret' ] 
                Skip'0.t_skip <i> {self.current}
                  (fun (l_iter'0:i) (l_n'0:usize) ->
                     [ &self <- { self with current = Skip'0.C_Skip l_iter'0 _7.final ; } ] 
                    s3)))
      | s3 = Borrow.borrow_final <usize> {_7.current} {Borrow.get_id _7}
          (fun (_ret':borrowed usize) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = _6.final ; } ] s4)
      | s4 = take'0 {_6} (fun (_ret':usize) ->  [ &n <- _ret' ] s5)
      | s5 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'1 _7}- s1
      | s1 =  [ &skipped <- [%#s04_skip1] Snapshot.new (Seq.empty  : Seq.seq item'0) ] s2
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'1 skipped} s1
      | s1 = -{resolve'2 skipped}- s2
      | s2 =  [ &old_4_0 <- Snapshot.new self ] s3
      | s3 = bb4 ]
      
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] (Snapshot.inner old_4_0).final = self.final}
        {[@expl:loop invariant] [%#s04_skip6] (Snapshot.inner old_self).final = self.final}
        {[@expl:loop invariant] [%#s04_skip5] inv'2 self}
        {[@expl:loop invariant] [%#s04_skip4] UIntSize.to_int (C04Skip_Skip_Type.skip_n self.current) = 0}
        {[@expl:loop invariant] [%#s04_skip3] forall i : int . 0 <= i /\ i < Seq.length (Snapshot.inner skipped)
         -> resolve'3 (index_logic'0 skipped i)}
        {[@expl:loop invariant] [%#s04_skip3] produces'0 (C04Skip_Skip_Type.skip_iter (Snapshot.inner old_self).current) (Snapshot.inner skipped) (C04Skip_Skip_Type.skip_iter self.current)}
        {[@expl:loop invariant] [%#s04_skip2] Seq.length (Snapshot.inner skipped) + UIntSize.to_int n
        = UIntSize.to_int (C04Skip_Skip_Type.skip_n (Snapshot.inner old_self).current)}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Skip'0.t_skip <i> {self.current}
              (fun (riter'0:i) (rn'0:usize) ->
                Borrow.borrow_mut <i> {riter'0}
                  (fun (_ret':borrowed i) ->
                     [ &_19 <- _ret' ] 
                    Skip'0.t_skip <i> {self.current}
                      (fun (l_iter'0:i) (l_n'0:usize) ->
                         [ &self <- { self with current = Skip'0.C_Skip _19.final l_n'0 ; } ] 
                        s1)))
          | s1 = -{inv'3 _19.final}- s2
          | s2 = next'0 {_19} (fun (_ret':Option'0.t_option item'0) ->  [ &r <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = UIntSize.eq {n} {[%#s04_skip7] (0 : usize)} (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
          | s1 = any [ br0 -> {_21 = false} (! bb8) | br1 -> {_21} (! bb7) ]  ]
          
        | bb8 = any [ br0 -> {r = Option'0.C_None } (! bb9) | br1 (a:item'0)-> {r = Option'0.C_Some a} (! bb10) ] 
        | bb10 = bb11
        | bb11 = s0
          [ s0 = Option'0.some <item'0> {r}
              (fun (r0'0:item'0) ->
                 [ &x <- r0'0 ] 
                (any
                [ any_ (_any:item'0)-> (! Option'0.some <item'0> {r}
                    (fun (l_0'0:item'0) ->  [ &r <- Option'0.C_Some _any ] s1)) ]
                ))
          | s1 = {[@expl:type invariant] inv'4 x} s2
          | s2 = -{resolve'3 x}- s3
          | s3 = {[@expl:type invariant] inv'5 r} s4
          | s4 = -{resolve'4 r}- s5
          | s5 =  [ &_26 <- [%#s04_skip8] Snapshot.new (Seq.(++) (Snapshot.inner skipped) (Seq.singleton x)) ] s6
          | s6 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &skipped <- _26 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq item'0))-> (!  [ &_26 <- _any ] s1) ] )
          | s1 = {[@expl:type invariant] inv'1 skipped} s2
          | s2 = -{resolve'2 skipped}- s3
          | s3 = UIntSize.sub {n} {[%#s04_skip9] (1 : usize)} (fun (_ret':usize) ->  [ &n <- _ret' ] s4)
          | s4 = bb13 ]
          
        | bb13 = bb14
        | bb14 = bb4 ]
         ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'2 self} s1
      | s1 = -{resolve'5 self}- s2
      | s2 =  [ &_0 <- r ] (any [ any_ (_any:Option'0.t_option item'0)-> (!  [ &r <- _any ] s3) ] )
      | s3 = bb15 ]
      
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'2 self} s1
      | s1 = -{resolve'5 self}- s2
      | s2 =  [ &_0 <- r ] (any [ any_ (_any:Option'0.t_option item'0)-> (!  [ &r <- _any ] s3) ] )
      | s3 = bb15 ]
      
    | bb15 = bb16
    | bb16 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option item'0 = any_l ()
    | & self : borrowed (Skip'0.t_skip i) = self
    | & old_self : Snapshot.snap_ty (borrowed (Skip'0.t_skip i)) = any_l ()
    | & n : usize = any_l ()
    | & _6 : borrowed usize = any_l ()
    | & _7 : borrowed usize = any_l ()
    | & skipped : Snapshot.snap_ty (Seq.seq item'0) = any_l ()
    | & r : Option'0.t_option item'0 = any_l ()
    | & _19 : borrowed i = any_l ()
    | & _21 : bool = any_l ()
    | & x : item'0 = any_l ()
    | & _26 : Snapshot.snap_ty (Seq.seq item'0) = any_l ()
    | & old_4_0 : Snapshot.snap_ty (borrowed (Skip'0.t_skip i)) = any_l () ]
    
    [ return' (result:Option'0.t_option item'0)-> {[@expl:postcondition] [%#s04_skip12] inv'5 result}
      {[@expl:postcondition] [%#s04_skip11] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module C04Skip_Impl0
  type i
  
  let%span s04_skip0 = "../04_skip.rs" 57 4 57 90
  
  let%span s04_skip1 = "../04_skip.rs" 50 4 50 26
  
  let%span s04_skip2 = "../04_skip.rs" 63 4 63 41
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../04_skip.rs" 23 8 31 9
  
  let%span span5 = "../04_skip.rs" 37 8 44 9
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed i)
  
  predicate inv'4 (_x : borrowed i)
  
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  
  type item'0
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option item'0) =
    [%#span3] true
  
  predicate inv'3 (_x : Option'0.t_option item'0)
  
  axiom inv'3 : forall x : Option'0.t_option item'0 . inv'3 x = true
  
  use C04Skip_Skip_Type as Skip'0
  
  predicate invariant'2 (self : borrowed (Skip'0.t_skip i)) =
    [%#span3] true
  
  predicate inv'2 (_x : borrowed (Skip'0.t_skip i))
  
  axiom inv'2 : forall x : borrowed (Skip'0.t_skip i) . inv'2 x = true
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq item'0) =
    [%#span3] true
  
  predicate inv'1 (_x : Seq.seq item'0)
  
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  
  predicate invariant'0 (self : Skip'0.t_skip i) =
    [%#span3] true
  
  predicate inv'0 (_x : Skip'0.t_skip i)
  
  axiom inv'0 : forall x : Skip'0.t_skip i . inv'0 x = true
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate resolve'0 (self : item'0)
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  predicate completed'0 [#"../04_skip.rs" 22 4 22 35] (self : borrowed (Skip'0.t_skip i)) =
    [%#span4] UIntSize.to_int (C04Skip_Skip_Type.skip_n self.final) = 0
    /\ (exists i : borrowed i . exists s : Seq.seq item'0 . inv'4 i
    /\ inv'1 s
    /\ Seq.length s <= UIntSize.to_int (C04Skip_Skip_Type.skip_n self.current)
    /\ produces'1 (C04Skip_Skip_Type.skip_iter self.current) s i.current
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i))
    /\ completed'1 i /\ i.final = C04Skip_Skip_Type.skip_iter self.final)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../04_skip.rs" 36 4 36 64] (self : Skip'0.t_skip i) (visited : Seq.seq item'0) (o : Skip'0.t_skip i)
    
   =
    [%#span5] visited = (Seq.empty  : Seq.seq item'0) /\ self = o
    \/ UIntSize.to_int (C04Skip_Skip_Type.skip_n o) = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq item'0 . inv'1 s
    /\ Seq.length s = UIntSize.to_int (C04Skip_Skip_Type.skip_n self)
    /\ produces'1 (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  
  goal produces_trans_refn : [%#s04_skip0] forall a : Skip'0.t_skip i . forall ab : Seq.seq item'0 . forall b : Skip'0.t_skip i . forall bc : Seq.seq item'0 . forall c : Skip'0.t_skip i . inv'0 c
  /\ inv'1 bc /\ inv'0 b /\ inv'1 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'0 c
  /\ inv'1 bc
  /\ inv'0 b
  /\ inv'1 ab
  /\ inv'0 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal produces_refl_refn : [%#s04_skip1] forall self : Skip'0.t_skip i . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq item'0) self
   -> produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  goal next_refn : [%#s04_skip2] forall self : borrowed (Skip'0.t_skip i) . inv'2 self
   -> inv'2 self
  /\ (forall result : Option'0.t_option item'0 . inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
end
