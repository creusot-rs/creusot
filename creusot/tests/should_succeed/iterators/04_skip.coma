module M_04_skip__qyi17349041008065389927__produces_refl [#"04_skip.rs" 51 4 51 26] (* <Skip<I> as common::Iterator> *)
  let%span s04_skip0 = "04_skip.rs" 49 15 49 24
  let%span s04_skip1 = "04_skip.rs" 50 14 50 45
  let%span s04_skip2 = "04_skip.rs" 47 4 47 10
  let%span s04_skip3 = "04_skip.rs" 38 12 43 74
  let%span scommon4 = "common.rs" 14 15 14 24
  let%span scommon5 = "common.rs" 15 14 15 45
  let%span scommon6 = "common.rs" 19 15 19 21
  let%span scommon7 = "common.rs" 20 15 20 21
  let%span scommon8 = "common.rs" 21 15 21 21
  let%span scommon9 = "common.rs" 22 15 22 32
  let%span scommon10 = "common.rs" 23 15 23 32
  let%span scommon11 = "common.rs" 24 14 24 42
  let%span sseq12 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sboxed13 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_I'0
  
  use prelude.prelude.UIntSize
  
  type t_Skip'0  =
    { t_Skip__iter'0: t_I'0; t_Skip__n'0: usize }
  
  predicate inv'2 (_1 : t_I'0)
  
  predicate inv'0 (_1 : t_Skip'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Skip'0 [inv'0 x] . inv'0 x
  = match x with
    | {t_Skip__iter'0 = iter ; t_Skip__n'0 = n} -> inv'2 iter
    end
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon6] inv'2 a)
   -> ([%#scommon7] inv'2 b)
   -> ([%#scommon8] inv'2 c)
   -> ([%#scommon9] produces'1 a ab b)
   -> ([%#scommon10] produces'1 b bc c)  -> ([%#scommon11] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . ([%#scommon4] inv'2 self)
   -> ([%#scommon5] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate inv'4 (_1 : t_Item'0)
  
  predicate invariant'1 (self : t_Item'0) =
    [%#sboxed13] inv'4 self
  
  predicate inv'3 (_1 : t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Item'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate invariant'0 (self : Seq.seq t_Item'0) =
    [%#sseq12] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_Item'0)
  
  predicate produces'0 [#"04_skip.rs" 36 4 36 64] (self : t_Skip'0) (visited : Seq.seq t_Item'0) (o : t_Skip'0) =
    [%#s04_skip3] visited = (Seq.empty  : Seq.seq t_Item'0) /\ self = o
    \/ UIntSize.to_int o.t_Skip__n'0 = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ Seq.length s = UIntSize.to_int self.t_Skip__n'0
    /\ produces'1 self.t_Skip__iter'0 (Seq.(++) s visited) o.t_Skip__iter'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  
  constant self  : t_Skip'0
  
  function produces_refl'0 [#"04_skip.rs" 51 4 51 26] (self : t_Skip'0) : ()
  
  goal vc_produces_refl'0 : ([%#s04_skip0] inv'0 self)
   -> ([%#s04_skip1] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
end
module M_04_skip__qyi17349041008065389927__produces_trans [#"04_skip.rs" 61 4 61 90] (* <Skip<I> as common::Iterator> *)
  let%span s04_skip0 = "04_skip.rs" 55 15 55 21
  let%span s04_skip1 = "04_skip.rs" 56 15 56 21
  let%span s04_skip2 = "04_skip.rs" 57 15 57 21
  let%span s04_skip3 = "04_skip.rs" 58 15 58 32
  let%span s04_skip4 = "04_skip.rs" 59 15 59 32
  let%span s04_skip5 = "04_skip.rs" 60 14 60 42
  let%span s04_skip6 = "04_skip.rs" 53 4 53 10
  let%span s04_skip7 = "04_skip.rs" 38 12 43 74
  let%span scommon8 = "common.rs" 14 15 14 24
  let%span scommon9 = "common.rs" 15 14 15 45
  let%span scommon10 = "common.rs" 19 15 19 21
  let%span scommon11 = "common.rs" 20 15 20 21
  let%span scommon12 = "common.rs" 21 15 21 21
  let%span scommon13 = "common.rs" 22 15 22 32
  let%span scommon14 = "common.rs" 23 15 23 32
  let%span scommon15 = "common.rs" 24 14 24 42
  let%span sseq16 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sboxed17 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_I'0
  
  use prelude.prelude.UIntSize
  
  type t_Skip'0  =
    { t_Skip__iter'0: t_I'0; t_Skip__n'0: usize }
  
  predicate inv'2 (_1 : t_I'0)
  
  predicate inv'0 (_1 : t_Skip'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Skip'0 [inv'0 x] . inv'0 x
  = match x with
    | {t_Skip__iter'0 = iter ; t_Skip__n'0 = n} -> inv'2 iter
    end
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon10] inv'2 a)
   -> ([%#scommon11] inv'2 b)
   -> ([%#scommon12] inv'2 c)
   -> ([%#scommon13] produces'1 a ab b)
   -> ([%#scommon14] produces'1 b bc c)  -> ([%#scommon15] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon8] inv'2 self)
   -> ([%#scommon9] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate inv'4 (_1 : t_Item'0)
  
  predicate invariant'1 (self : t_Item'0) =
    [%#sboxed17] inv'4 self
  
  predicate inv'3 (_1 : t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Item'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate invariant'0 (self : Seq.seq t_Item'0) =
    [%#sseq16] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_Item'0)
  
  predicate produces'0 [#"04_skip.rs" 36 4 36 64] (self : t_Skip'0) (visited : Seq.seq t_Item'0) (o : t_Skip'0) =
    [%#s04_skip7] visited = (Seq.empty  : Seq.seq t_Item'0) /\ self = o
    \/ UIntSize.to_int o.t_Skip__n'0 = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ Seq.length s = UIntSize.to_int self.t_Skip__n'0
    /\ produces'1 self.t_Skip__iter'0 (Seq.(++) s visited) o.t_Skip__iter'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  
  constant a  : t_Skip'0
  
  constant ab  : Seq.seq t_Item'0
  
  constant b  : t_Skip'0
  
  constant bc  : Seq.seq t_Item'0
  
  constant c  : t_Skip'0
  
  function produces_trans'0 [#"04_skip.rs" 61 4 61 90] (a : t_Skip'0) (ab : Seq.seq t_Item'0) (b : t_Skip'0) (bc : Seq.seq t_Item'0) (c : t_Skip'0) : ()
    
  
  goal vc_produces_trans'0 : ([%#s04_skip4] produces'0 b bc c)
   -> ([%#s04_skip3] produces'0 a ab b)
   -> ([%#s04_skip2] inv'0 c)
   -> ([%#s04_skip1] inv'0 b)  -> ([%#s04_skip0] inv'0 a)  -> ([%#s04_skip5] produces'0 a (Seq.(++) ab bc) c)
end
module M_04_skip__qyi17349041008065389927__next [#"04_skip.rs" 67 4 67 41] (* <Skip<I> as common::Iterator> *)
  let%span s04_skip0 = "04_skip.rs" 68 23 68 41
  let%span s04_skip1 = "04_skip.rs" 70 26 70 50
  let%span s04_skip2 = "04_skip.rs" 77 20 77 35
  let%span s04_skip3 = "04_skip.rs" 76 20 76 87
  let%span s04_skip4 = "04_skip.rs" 72 8 72 31
  let%span s04_skip5 = "04_skip.rs" 74 20 74 53
  let%span s04_skip6 = "04_skip.rs" 73 20 73 33
  let%span s04_skip7 = "04_skip.rs" 72 20 72 29
  let%span s04_skip8 = "04_skip.rs" 80 20 80 21
  let%span s04_skip9 = "04_skip.rs" 84 26 84 73
  let%span s04_skip10 = "04_skip.rs" 85 21 85 22
  let%span s04_skip11 = "04_skip.rs" 67 17 67 21
  let%span s04_skip12 = "04_skip.rs" 67 26 67 41
  let%span s04_skip13 = "04_skip.rs" 63 14 66 5
  let%span smem14 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  let%span smem15 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  let%span sops16 = "../../../../creusot-contracts/src/logic/ops.rs" 86 8 86 33
  let%span scommon17 = "common.rs" 31 17 31 21
  let%span scommon18 = "common.rs" 31 26 31 44
  let%span scommon19 = "common.rs" 27 14 30 5
  let%span s04_skip20 = "04_skip.rs" 24 12 30 37
  let%span s04_skip21 = "04_skip.rs" 38 12 43 74
  let%span snum22 = "../../../../creusot-contracts/src/std/num.rs" 29 28 29 32
  let%span sresolve23 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span scommon24 = "common.rs" 14 15 14 24
  let%span scommon25 = "common.rs" 15 14 15 45
  let%span scommon26 = "common.rs" 19 15 19 21
  let%span scommon27 = "common.rs" 20 15 20 21
  let%span scommon28 = "common.rs" 21 15 21 21
  let%span scommon29 = "common.rs" 22 15 22 32
  let%span scommon30 = "common.rs" 23 15 23 32
  let%span scommon31 = "common.rs" 24 14 24 42
  let%span sseq32 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sinvariant33 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed34 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UIntSize
  
  type t_I'0
  
  type t_Skip'0  =
    { t_Skip__iter'0: t_I'0; t_Skip__n'0: usize }
  
  predicate inv'5 (_1 : borrowed usize)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed usize [inv'5 x] . inv'5 x = true
  
  predicate inv'6 (_1 : usize)
  
  axiom inv_axiom'4 [@rewrite] : forall x : usize [inv'6 x] . inv'6 x = true
  
  predicate is_default'0 (self : usize) =
    [%#snum22] self = (0 : usize)
  
  let rec take'0 (dest:borrowed usize) (return'  (ret:usize))= {[@expl:take 'dest' type invariant] inv'5 dest}
    any
    [ return' (result:usize)-> {inv'6 result}
      {[%#smem14] result = dest.current}
      {[%#smem15] is_default'0 dest.final}
      (! return' {result}) ]
    
  
  predicate resolve'3 (self : borrowed usize) =
    [%#sresolve23] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed usize) =
    resolve'3 _1
  
  use seq.Seq
  
  predicate inv'2 (_1 : t_I'0)
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon26] inv'2 a)
   -> ([%#scommon27] inv'2 b)
   -> ([%#scommon28] inv'2 c)
   -> ([%#scommon29] produces'0 a ab b)
   -> ([%#scommon30] produces'0 b bc c)  -> ([%#scommon31] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon24] inv'2 self)
   -> ([%#scommon25] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq t_Item'0)) (ix : int) : t_Item'0 =
    [%#sops16] Seq.get (Snapshot.inner self) ix
  
  predicate resolve'1 (_1 : t_Item'0)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate inv'3 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed34] inv'3 self
  
  predicate inv'8 (_1 : t_Item'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Item'0 [inv'8 x] . inv'8 x = invariant'3 x
  
  predicate invariant'0 (self : Seq.seq t_Item'0) =
    [%#sseq32] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'0 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate inv'9 (_1 : t_Skip'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Skip'0 [inv'9 x] . inv'9 x
  = match x with
    | {t_Skip__iter'0 = iter ; t_Skip__n'0 = n} -> inv'2 iter
    end
  
  predicate invariant'1 (self : borrowed (t_Skip'0)) =
    [%#sinvariant33] inv'9 self.current /\ inv'9 self.final
  
  predicate inv'1 (_1 : borrowed (t_Skip'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (t_Skip'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'2 (self : borrowed t_I'0) =
    [%#sinvariant33] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'7 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed t_I'0 [inv'7 x] . inv'7 x = invariant'2 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_Item'0
  
  predicate inv'4 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'4 x] . inv'4 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'3 a_0
    end
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  use seq.Seq
  
  let rec next'1 (self:borrowed t_I'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] [%#scommon17] inv'7 self}
    any
    [ return' (result:t_Option'0)-> {[%#scommon18] inv'4 result}
      {[%#scommon19] match result with
        | C_None'0 -> completed'1 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_Item'0))= any
    [ good (field_0:t_Item'0)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_Item'0 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  predicate resolve'4 (self : borrowed (t_Skip'0)) =
    [%#sresolve23] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (t_Skip'0)) =
    resolve'4 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  predicate completed'0 [#"04_skip.rs" 22 4 22 35] (self : borrowed (t_Skip'0)) =
    [%#s04_skip20] UIntSize.to_int (self.final).t_Skip__n'0 = 0
    /\ (exists s : Seq.seq t_Item'0, i : borrowed t_I'0 . inv'0 s
    /\ inv'7 i
    /\ Seq.length s <= UIntSize.to_int (self.current).t_Skip__n'0
    /\ produces'0 (self.current).t_Skip__iter'0 s i.current
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'1 (Seq.get s i))
    /\ completed'1 i /\ i.final = (self.final).t_Skip__iter'0)
  
  predicate produces'1 [#"04_skip.rs" 36 4 36 64] (self : t_Skip'0) (visited : Seq.seq t_Item'0) (o : t_Skip'0) =
    [%#s04_skip21] visited = (Seq.empty  : Seq.seq t_Item'0) /\ self = o
    \/ UIntSize.to_int o.t_Skip__n'0 = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq t_Item'0 . inv'0 s
    /\ Seq.length s = UIntSize.to_int self.t_Skip__n'0
    /\ produces'0 self.t_Skip__iter'0 (Seq.(++) s visited) o.t_Skip__iter'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'1 (Seq.get s i)))
  
  meta "compute_max_steps" 1000000
  
  let rec next'0 (self:borrowed (t_Skip'0)) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] [%#s04_skip11] inv'1 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#s04_skip0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Borrow.borrow_final <usize> {(self.current).t_Skip__n'0} {Borrow.inherit_id (Borrow.get_id self) 2}
          (fun (_ret':borrowed usize) ->
             [ &_7 <- _ret' ] 
             [ &self <- { self with current = { self.current with t_Skip__n'0 = _ret'.final } } ] 
            s1)
      | s1 = Borrow.borrow_final <usize> {_7.current} {Borrow.get_id _7}
          (fun (_ret':borrowed usize) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = _ret'.final } ] s2)
      | s2 = take'0 {_6} (fun (_ret':usize) ->  [ &n <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 =  [ &skipped <- [%#s04_skip1] Snapshot.new (Seq.empty  : Seq.seq t_Item'0) ] s2
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &old_4_0 <- Snapshot.new self ] s1 | s1 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:mut invariant] (Snapshot.inner old_4_0).final = self.final}
        {[@expl:loop invariant #0] [%#s04_skip7] inv'1 self}
        {[@expl:loop invariant #1] [%#s04_skip6] inv'0 (Snapshot.inner skipped)}
        {[@expl:loop invariant #2] [%#s04_skip5] Seq.length (Snapshot.inner skipped) + UIntSize.to_int n
        = UIntSize.to_int ((Snapshot.inner old_self).current).t_Skip__n'0}
        {[@expl:loop invariant #3] [%#s04_skip4] produces'0 ((Snapshot.inner old_self).current).t_Skip__iter'0 (Snapshot.inner skipped) (self.current).t_Skip__iter'0}
        {[@expl:loop invariant #4] [%#s04_skip3] forall i : int . 0 <= i /\ i < Seq.length (Snapshot.inner skipped)
         -> resolve'1 (index_logic'0 skipped i)}
        {[@expl:loop invariant #5] [%#s04_skip2] UIntSize.to_int (self.current).t_Skip__n'0 = 0}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = {inv'2 (self.current).t_Skip__iter'0}
            Borrow.borrow_mut <t_I'0> {(self.current).t_Skip__iter'0}
              (fun (_ret':borrowed t_I'0) ->
                 [ &_19 <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &self <- { self with current = { self.current with t_Skip__iter'0 = _ret'.final } } ] 
                s1)
          | s1 = next'1 {_19} (fun (_ret':t_Option'0) ->  [ &r <- _ret' ] s2)
          | s2 = bb6 ]
          
        | bb6 = s0
          [ s0 = UIntSize.eq {n} {[%#s04_skip8] (0 : usize)} (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
          | s1 = any [ br0 -> {_21 = false} (! bb8) | br1 -> {_21} (! bb7) ]  ]
          
        | bb8 = any [ br0 -> {r = C_None'0 } (! bb9) | br1 (x0:t_Item'0)-> {r = C_Some'0 x0} (! bb10) ] 
        | bb10 = bb11
        | bb11 = s0
          [ s0 = v_Some'0 {r} (fun (r0'0:t_Item'0) ->  [ &x <- r0'0 ] s1)
          | s1 = {[@expl:type invariant] inv'3 x} s2
          | s2 = -{resolve'1 x}- s3
          | s3 =  [ &_26 <- [%#s04_skip9] Snapshot.new (Seq.(++) (Snapshot.inner skipped) (Seq.singleton x)) ] s4
          | s4 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &skipped <- _26 ] s1
          | s1 = UIntSize.sub {n} {[%#s04_skip10] (1 : usize)} (fun (_ret':usize) ->  [ &n <- _ret' ] s2)
          | s2 = bb13 ]
          
        | bb13 = bb14
        | bb14 = bb4 ]
         ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'2 self}- s2 | s2 =  [ &_0 <- r ] s3 | s3 = bb15 ]
      
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'2 self}- s2 | s2 =  [ &_0 <- r ] s3 | s3 = bb15 ]
      
    | bb15 = bb16
    | bb16 = return' {_0} ]
    )
    [ & _0 : t_Option'0 = any_l ()
    | & self : borrowed (t_Skip'0) = self
    | & old_self : Snapshot.snap_ty (borrowed (t_Skip'0)) = any_l ()
    | & n : usize = any_l ()
    | & _6 : borrowed usize = any_l ()
    | & _7 : borrowed usize = any_l ()
    | & skipped : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & r : t_Option'0 = any_l ()
    | & _19 : borrowed t_I'0 = any_l ()
    | & _21 : bool = any_l ()
    | & x : t_Item'0 = any_l ()
    | & _26 : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & old_4_0 : Snapshot.snap_ty (borrowed (t_Skip'0)) = any_l () ]
    
    [ return' (result:t_Option'0)-> {[@expl:next result type invariant] [%#s04_skip12] inv'4 result}
      {[@expl:next ensures] [%#s04_skip13] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_04_skip__qyi17349041008065389927__next__refines [#"04_skip.rs" 67 4 67 41] (* <Skip<I> as common::Iterator> *)
  let%span s04_skip0 = "04_skip.rs" 67 4 67 41
  let%span s04_skip1 = "04_skip.rs" 24 12 30 37
  let%span s04_skip2 = "04_skip.rs" 38 12 43 74
  let%span sinvariant3 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span scommon4 = "common.rs" 14 15 14 24
  let%span scommon5 = "common.rs" 15 14 15 45
  let%span scommon6 = "common.rs" 19 15 19 21
  let%span scommon7 = "common.rs" 20 15 20 21
  let%span scommon8 = "common.rs" 21 15 21 21
  let%span scommon9 = "common.rs" 22 15 22 32
  let%span scommon10 = "common.rs" 23 15 23 32
  let%span scommon11 = "common.rs" 24 14 24 42
  let%span sseq12 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sboxed13 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  use prelude.prelude.UIntSize
  
  type t_Skip'0  =
    { t_Skip__iter'0: t_I'0; t_Skip__n'0: usize }
  
  predicate inv'6 (_1 : t_I'0)
  
  predicate inv'5 (_1 : t_Skip'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Skip'0 [inv'5 x] . inv'5 x
  = match x with
    | {t_Skip__iter'0 = iter ; t_Skip__n'0 = n} -> inv'6 iter
    end
  
  predicate invariant'0 (self : borrowed (t_Skip'0)) =
    [%#sinvariant3] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'0 (_1 : borrowed (t_Skip'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Skip'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon6] inv'6 a)
   -> ([%#scommon7] inv'6 b)
   -> ([%#scommon8] inv'6 c)
   -> ([%#scommon9] produces'1 a ab b)
   -> ([%#scommon10] produces'1 b bc c)  -> ([%#scommon11] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon4] inv'6 self)
   -> ([%#scommon5] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_Item'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'4 (_1 : t_Item'0)
  
  predicate invariant'3 (self : t_Item'0) =
    [%#sboxed13] inv'4 self
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = invariant'3 x
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#sseq12] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate invariant'2 (self : borrowed t_I'0) =
    [%#sinvariant3] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'3 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed t_I'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  use seq.Seq
  
  predicate resolve'0 (_1 : t_Item'0)
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate completed'0 [#"04_skip.rs" 22 4 22 35] (self : borrowed (t_Skip'0)) =
    [%#s04_skip1] UIntSize.to_int (self.final).t_Skip__n'0 = 0
    /\ (exists s : Seq.seq t_Item'0, i : borrowed t_I'0 . inv'2 s
    /\ inv'3 i
    /\ Seq.length s <= UIntSize.to_int (self.current).t_Skip__n'0
    /\ produces'1 (self.current).t_Skip__iter'0 s i.current
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i))
    /\ completed'1 i /\ i.final = (self.final).t_Skip__iter'0)
  
  use seq.Seq
  
  predicate produces'0 [#"04_skip.rs" 36 4 36 64] (self : t_Skip'0) (visited : Seq.seq t_Item'0) (o : t_Skip'0) =
    [%#s04_skip2] visited = (Seq.empty  : Seq.seq t_Item'0) /\ self = o
    \/ UIntSize.to_int o.t_Skip__n'0 = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq t_Item'0 . inv'2 s
    /\ Seq.length s = UIntSize.to_int self.t_Skip__n'0
    /\ produces'1 self.t_Skip__iter'0 (Seq.(++) s visited) o.t_Skip__iter'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'4 a_0
    end
  
  goal refines : [%#s04_skip0] forall self : borrowed (t_Skip'0) . inv'0 self
   -> inv'0 self
  /\ (forall result : t_Option'0 . match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result
   -> match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result)
end
module M_04_skip__qyi17349041008065389927__produces_refl__refines [#"04_skip.rs" 51 4 51 26] (* <Skip<I> as common::Iterator> *)
  let%span s04_skip0 = "04_skip.rs" 51 4 51 26
  let%span s04_skip1 = "04_skip.rs" 38 12 43 74
  let%span scommon2 = "common.rs" 14 15 14 24
  let%span scommon3 = "common.rs" 15 14 15 45
  let%span scommon4 = "common.rs" 19 15 19 21
  let%span scommon5 = "common.rs" 20 15 20 21
  let%span scommon6 = "common.rs" 21 15 21 21
  let%span scommon7 = "common.rs" 22 15 22 32
  let%span scommon8 = "common.rs" 23 15 23 32
  let%span scommon9 = "common.rs" 24 14 24 42
  let%span sseq10 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sboxed11 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_I'0
  
  use prelude.prelude.UIntSize
  
  type t_Skip'0  =
    { t_Skip__iter'0: t_I'0; t_Skip__n'0: usize }
  
  predicate inv'2 (_1 : t_I'0)
  
  predicate inv'0 (_1 : t_Skip'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Skip'0 [inv'0 x] . inv'0 x
  = match x with
    | {t_Skip__iter'0 = iter ; t_Skip__n'0 = n} -> inv'2 iter
    end
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon4] inv'2 a)
   -> ([%#scommon5] inv'2 b)
   -> ([%#scommon6] inv'2 c)
   -> ([%#scommon7] produces'1 a ab b)
   -> ([%#scommon8] produces'1 b bc c)  -> ([%#scommon9] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . ([%#scommon2] inv'2 self)
   -> ([%#scommon3] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate inv'4 (_1 : t_Item'0)
  
  predicate invariant'1 (self : t_Item'0) =
    [%#sboxed11] inv'4 self
  
  predicate inv'3 (_1 : t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Item'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate invariant'0 (self : Seq.seq t_Item'0) =
    [%#sseq10] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_Item'0)
  
  predicate produces'0 [#"04_skip.rs" 36 4 36 64] (self : t_Skip'0) (visited : Seq.seq t_Item'0) (o : t_Skip'0) =
    [%#s04_skip1] visited = (Seq.empty  : Seq.seq t_Item'0) /\ self = o
    \/ UIntSize.to_int o.t_Skip__n'0 = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ Seq.length s = UIntSize.to_int self.t_Skip__n'0
    /\ produces'1 self.t_Skip__iter'0 (Seq.(++) s visited) o.t_Skip__iter'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  
  goal refines : [%#s04_skip0] forall self : t_Skip'0 . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
end
module M_04_skip__qyi17349041008065389927__produces_trans__refines [#"04_skip.rs" 61 4 61 90] (* <Skip<I> as common::Iterator> *)
  let%span s04_skip0 = "04_skip.rs" 61 4 61 90
  let%span s04_skip1 = "04_skip.rs" 38 12 43 74
  let%span scommon2 = "common.rs" 14 15 14 24
  let%span scommon3 = "common.rs" 15 14 15 45
  let%span scommon4 = "common.rs" 19 15 19 21
  let%span scommon5 = "common.rs" 20 15 20 21
  let%span scommon6 = "common.rs" 21 15 21 21
  let%span scommon7 = "common.rs" 22 15 22 32
  let%span scommon8 = "common.rs" 23 15 23 32
  let%span scommon9 = "common.rs" 24 14 24 42
  let%span sseq10 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sboxed11 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_I'0
  
  use prelude.prelude.UIntSize
  
  type t_Skip'0  =
    { t_Skip__iter'0: t_I'0; t_Skip__n'0: usize }
  
  predicate inv'2 (_1 : t_I'0)
  
  use seq.Seq
  
  use seq.Seq
  
  type t_Item'0
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_Item'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 25 4 25 91] (a : t_I'0) (ab : Seq.seq t_Item'0) (b : t_I'0) (bc : Seq.seq t_Item'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_Item'0, b : t_I'0, bc : Seq.seq t_Item'0, c : t_I'0 . ([%#scommon4] inv'2 a)
   -> ([%#scommon5] inv'2 b)
   -> ([%#scommon6] inv'2 c)
   -> ([%#scommon7] produces'1 a ab b)
   -> ([%#scommon8] produces'1 b bc c)  -> ([%#scommon9] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 16 4 16 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . ([%#scommon2] inv'2 self)
   -> ([%#scommon3] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate inv'4 (_1 : t_Item'0)
  
  predicate invariant'1 (self : t_Item'0) =
    [%#sboxed11] inv'4 self
  
  predicate inv'3 (_1 : t_Item'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Item'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate invariant'0 (self : Seq.seq t_Item'0) =
    [%#sseq10] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_Item'0)
  
  predicate produces'0 [#"04_skip.rs" 36 4 36 64] (self : t_Skip'0) (visited : Seq.seq t_Item'0) (o : t_Skip'0) =
    [%#s04_skip1] visited = (Seq.empty  : Seq.seq t_Item'0) /\ self = o
    \/ UIntSize.to_int o.t_Skip__n'0 = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq t_Item'0 . inv'1 s
    /\ Seq.length s = UIntSize.to_int self.t_Skip__n'0
    /\ produces'1 self.t_Skip__iter'0 (Seq.(++) s visited) o.t_Skip__iter'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve'0 (Seq.get s i)))
  
  predicate inv'0 (_1 : t_Skip'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Skip'0 [inv'0 x] . inv'0 x
  = match x with
    | {t_Skip__iter'0 = iter ; t_Skip__n'0 = n} -> inv'2 iter
    end
  
  goal refines : [%#s04_skip0] forall a : t_Skip'0 . forall ab : Seq.seq t_Item'0 . forall b : t_Skip'0 . forall bc : Seq.seq t_Item'0 . forall c : t_Skip'0 . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
