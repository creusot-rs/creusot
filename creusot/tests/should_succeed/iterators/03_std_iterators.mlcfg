
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type
  type t
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module CreusotContracts_Std1_Slice_Impl11_ShallowModel_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
end
module CreusotContracts_Std1_Slice_Impl11_ShallowModel_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
end
module CreusotContracts_Std1_Slice_Impl11_ShallowModel
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl12_Invariant_Stub
  type t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate invariant' (self : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Slice_Impl12_Invariant_Interface
  type t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate invariant' (self : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Slice_Impl12_Invariant
  type t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate invariant' (self : Core_Slice_Iter_Iter_Type.t_iter t) =
    true
  val invariant' (self : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = invariant' self }
    
end
module Core_Slice_Impl0_Iter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl12_Invariant_Stub as Invariant0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModel_Stub as ShallowModel0 with
    type t = t
  val iter [@cfg:stackify] (self : seq t) : Core_Slice_Iter_Iter_Type.t_iter t
    ensures { ShallowModel0.shallow_model result = self }
    ensures { Invariant0.invariant' result }
    
end
module Core_Slice_Impl0_Iter
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl12_Invariant_Interface as Invariant0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModel_Interface as ShallowModel0 with
    type t = t
  val iter [@cfg:stackify] (self : seq t) : Core_Slice_Iter_Iter_Type.t_iter t
    ensures { ShallowModel0.shallow_model result = self }
    ensures { Invariant0.invariant' result }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Core_Num_Impl12_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  val shallow_model (self : seq t) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl11_ShallowModelTy_Type
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  type shallowModelTy  =
    seq t
end
module CreusotContracts_Std1_Slice_Impl13_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl13_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl13_Completed
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    Resolve0.resolve self /\ ShallowModel1.shallow_model (ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function to_ref_seq (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function to_ref_seq (self : seq t) : Seq.seq t
  axiom to_ref_seq_spec : forall self : seq t . (forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = Seq.get (ShallowModel0.shallow_model self) i) && Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function to_ref_seq (self : seq t) : Seq.seq t
  val to_ref_seq (self : seq t) : Seq.seq t
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : seq t . (forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = Seq.get (ShallowModel0.shallow_model self) i) && Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module CreusotContracts_Std1_Slice_Impl13_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl13_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl13_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub as ToRefSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModel_Stub as ShallowModel0 with
    type t = t
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module Core_Slice_Iter_Impl181_Item_Type
  type t
  use prelude.Borrow
  type item  =
    t
end
module Core_Slice_Iter_Impl181_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Slice_Iter_Impl181_Item_Type as Item1 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl13_Completed_Stub as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl12_Invariant_Stub as Invariant0 with
    type t = t
  val next [@cfg:stackify] (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Slice_Iter_Impl181_Next
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Slice_Iter_Impl181_Item_Type as Item1 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Interface as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl13_Completed_Interface as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl12_Invariant_Interface as Invariant0 with
    type t = t
  val next [@cfg:stackify] (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Slice_Impl13_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
end
module CreusotContracts_Std1_Slice_Impl13_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl13_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl13_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl13_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Slice_Impl13_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    ()
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module C03StdIterators_SliceIter_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val slice_iter [@cfg:stackify] [#"../03_std_iterators.rs" 6 0 6 42] (slice : seq t) : usize
    requires {[#"../03_std_iterators.rs" 4 11 4 32] Seq.length (ShallowModel0.shallow_model slice) < 1000}
    ensures { [#"../03_std_iterators.rs" 5 10 5 35] UInt64.to_int result = Seq.length (ShallowModel0.shallow_model slice) }
    
end
module C03StdIterators_SliceIter
  type t
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use prelude.Ghost
  use prelude.IntSize
  use mach.int.UInt64
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModel as ShallowModel2 with
    type t = t
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel3 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl13_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve3.resolve,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Core_Slice_Iter_Impl181_Item_Type as Item0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq as ToRefSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl13_Produces as Produces0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Slice_Impl13_ProducesTrans as ProducesTrans0 with
    type t = t,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl13_ProducesRefl as ProducesRefl0 with
    type t = t,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve6 with
    type self = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl12_Invariant as Invariant0 with
    type t = t
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty (Seq.seq t)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter t)
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter t
  clone Core_Slice_Impl0_Iter_Interface as Iter1 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = seq t
  let rec cfg slice_iter [@cfg:stackify] [#"../03_std_iterators.rs" 6 0 6 42] (slice : seq t) : usize
    requires {[#"../03_std_iterators.rs" 4 11 4 32] Seq.length (ShallowModel0.shallow_model slice) < 1000}
    ensures { [#"../03_std_iterators.rs" 5 10 5 35] UInt64.to_int result = Seq.length (ShallowModel0.shallow_model slice) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var slice_1 : seq t;
  var i_4 : usize;
  var _5 : ();
  var iter_6 : Core_Slice_Iter_Iter_Type.t_iter t;
  var _7 : Core_Slice_Iter_Iter_Type.t_iter t;
  var _8 : seq t;
  var iter_old_9 : Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter t);
  var _11 : ();
  var produced_12 : Ghost.ghost_ty (Seq.seq t);
  var _15 : ();
  var _19 : ();
  var _20 : Core_Option_Option_Type.t_option t;
  var _21 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var _22 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var _23 : isize;
  var i_24 : t;
  var _25 : Ghost.ghost_ty (Seq.seq t);
  var _27 : ();
  var _28 : ();
  {
    slice_1 <- slice;
    goto BB0
  }
  BB0 {
    i_4 <- ([#"../03_std_iterators.rs" 7 16 7 17] (0 : usize));
    _8 <- slice_1;
    assume { Resolve0.resolve slice_1 };
    _7 <- ([#"../03_std_iterators.rs" 9 13 9 25] Iter1.iter _8);
    goto BB1
  }
  BB1 {
    iter_6 <- ([#"../03_std_iterators.rs" 8 4 8 45] IntoIter0.into_iter _7);
    goto BB2
  }
  BB2 {
    _11 <- ();
    iter_old_9 <- ([#"../03_std_iterators.rs" 8 4 8 45] Ghost.new iter_6);
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve iter_old_9 };
    _15 <- ();
    produced_12 <- ([#"../03_std_iterators.rs" 8 4 8 45] Ghost.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve produced_12 };
    goto BB5
  }
  BB5 {
    invariant type_invariant { [#"../03_std_iterators.rs" 8 4 8 45] Invariant0.invariant' iter_6 };
    invariant structural { [#"../03_std_iterators.rs" 8 4 8 45] Produces0.produces (Ghost.inner iter_old_9) (Ghost.inner produced_12) iter_6 };
    invariant dummy { [#"../03_std_iterators.rs" 8 23 8 43] UInt64.to_int i_4 = Seq.length (Ghost.inner produced_12) };
    _22 <- borrow_mut iter_6;
    iter_6 <-  ^ _22;
    _21 <- borrow_mut ( * _22);
    _22 <- { _22 with current = ( ^ _21) };
    _20 <- ([#"../03_std_iterators.rs" 8 4 8 45] Next0.next _21);
    goto BB6
  }
  BB6 {
    assume { Resolve3.resolve _22 };
    switch (_20)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB9
      end
  }
  BB7 {
    assume { Resolve4.resolve iter_6 };
    assume { Resolve5.resolve _20 };
    _5 <- ();
    _0 <- i_4;
    return _0
  }
  BB8 {
    assume { Resolve4.resolve iter_6 };
    assume { Resolve5.resolve _20 };
    absurd
  }
  BB9 {
    assume { Resolve6.resolve i_24 };
    i_24 <- Core_Option_Option_Type.some_0 _20;
    assume { Resolve5.resolve _20 };
    assume { Resolve6.resolve i_24 };
    _27 <- ();
    _25 <- ([#"../03_std_iterators.rs" 8 4 8 45] Ghost.new (Seq.(++) (Ghost.inner produced_12) (Seq.singleton i_24)));
    goto BB10
  }
  BB10 {
    assume { Resolve2.resolve produced_12 };
    produced_12 <- _25;
    _25 <- any Ghost.ghost_ty (Seq.seq t);
    i_4 <- ([#"../03_std_iterators.rs" 10 8 10 14] i_4 + ([#"../03_std_iterators.rs" 10 13 10 14] (1 : usize)));
    _19 <- ();
    goto BB5
  }
  
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type
  type t
  type a
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl20_IntoIter_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_Impl12_Invariant_Stub as Invariant0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModel_Stub as ShallowModel0 with
    type t = t
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : Core_Slice_Iter_Iter_Type.t_iter t
    ensures { ShallowModel1.shallow_model (ShallowModel0.shallow_model result) = ShallowModel2.shallow_model self }
    ensures { Invariant0.invariant' result }
    
end
module Alloc_Vec_Impl20_IntoIter
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_Impl12_Invariant_Interface as Invariant0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel1 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModel_Interface as ShallowModel0 with
    type t = t
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : Core_Slice_Iter_Iter_Type.t_iter t
    ensures { ShallowModel1.shallow_model (ShallowModel0.shallow_model result) = ShallowModel2.shallow_model self }
    ensures { Invariant0.invariant' result }
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module C03StdIterators_VecIter_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val vec_iter [@cfg:stackify] [#"../03_std_iterators.rs" 17 0 17 41] (vec : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {[#"../03_std_iterators.rs" 15 11 15 30] Seq.length (ShallowModel0.shallow_model vec) < 1000}
    ensures { [#"../03_std_iterators.rs" 16 10 16 33] UInt64.to_int result = Seq.length (ShallowModel0.shallow_model vec) }
    
end
module C03StdIterators_VecIter
  type t
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use prelude.IntSize
  use mach.int.UInt64
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModelTy_Type as ShallowModelTy2 with
    type t = t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModel as ShallowModel2 with
    type t = t
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel5 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy2.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel4 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl13_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve3.resolve,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Core_Slice_Iter_Impl181_Item_Type as Item0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq as ToRefSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl13_Produces as Produces0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Slice_Impl13_ProducesTrans as ProducesTrans0 with
    type t = t,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl13_ProducesRefl as ProducesRefl0 with
    type t = t,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  use seq.Seq
  use prelude.Ghost
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve6 with
    type self = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl12_Invariant as Invariant0 with
    type t = t
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty (Seq.seq t)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter t)
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Alloc_Vec_Impl20_IntoIter_Interface as IntoIter0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  let rec cfg vec_iter [@cfg:stackify] [#"../03_std_iterators.rs" 17 0 17 41] (vec : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {[#"../03_std_iterators.rs" 15 11 15 30] Seq.length (ShallowModel0.shallow_model vec) < 1000}
    ensures { [#"../03_std_iterators.rs" 16 10 16 33] UInt64.to_int result = Seq.length (ShallowModel0.shallow_model vec) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var vec_1 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var i_4 : usize;
  var _5 : ();
  var iter_6 : Core_Slice_Iter_Iter_Type.t_iter t;
  var _7 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var iter_old_8 : Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter t);
  var _10 : ();
  var produced_11 : Ghost.ghost_ty (Seq.seq t);
  var _14 : ();
  var _18 : ();
  var _19 : Core_Option_Option_Type.t_option t;
  var _20 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var _21 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var _22 : isize;
  var i_23 : t;
  var _24 : Ghost.ghost_ty (Seq.seq t);
  var _26 : ();
  var _27 : ();
  {
    vec_1 <- vec;
    goto BB0
  }
  BB0 {
    i_4 <- ([#"../03_std_iterators.rs" 18 16 18 17] (0 : usize));
    assume { Resolve0.resolve _7 };
    _7 <- vec_1;
    assume { Resolve0.resolve vec_1 };
    iter_6 <- ([#"../03_std_iterators.rs" 19 4 19 45] IntoIter0.into_iter _7);
    goto BB1
  }
  BB1 {
    _10 <- ();
    iter_old_8 <- ([#"../03_std_iterators.rs" 19 4 19 45] Ghost.new iter_6);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve iter_old_8 };
    _14 <- ();
    produced_11 <- ([#"../03_std_iterators.rs" 19 4 19 45] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve produced_11 };
    goto BB4
  }
  BB4 {
    invariant type_invariant { [#"../03_std_iterators.rs" 19 4 19 45] Invariant0.invariant' iter_6 };
    invariant structural { [#"../03_std_iterators.rs" 19 4 19 45] Produces0.produces (Ghost.inner iter_old_8) (Ghost.inner produced_11) iter_6 };
    invariant dummy { [#"../03_std_iterators.rs" 19 23 19 43] UInt64.to_int i_4 = Seq.length (Ghost.inner produced_11) };
    _21 <- borrow_mut iter_6;
    iter_6 <-  ^ _21;
    _20 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    _19 <- ([#"../03_std_iterators.rs" 19 4 19 45] Next0.next _20);
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _21 };
    switch (_19)
      | Core_Option_Option_Type.C_None -> goto BB6
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB6 {
    assume { Resolve4.resolve iter_6 };
    assume { Resolve5.resolve _19 };
    _5 <- ();
    _0 <- i_4;
    return _0
  }
  BB7 {
    assume { Resolve4.resolve iter_6 };
    assume { Resolve5.resolve _19 };
    absurd
  }
  BB8 {
    assume { Resolve6.resolve i_23 };
    i_23 <- Core_Option_Option_Type.some_0 _19;
    assume { Resolve5.resolve _19 };
    assume { Resolve6.resolve i_23 };
    _26 <- ();
    _24 <- ([#"../03_std_iterators.rs" 19 4 19 45] Ghost.new (Seq.(++) (Ghost.inner produced_11) (Seq.singleton i_23)));
    goto BB9
  }
  BB9 {
    assume { Resolve2.resolve produced_11 };
    produced_11 <- _24;
    _24 <- any Ghost.ghost_ty (Seq.seq t);
    i_4 <- ([#"../03_std_iterators.rs" 21 8 21 14] i_4 + ([#"../03_std_iterators.rs" 21 13 21 14] (1 : usize)));
    _18 <- ();
    goto BB4
  }
  
end
module Alloc_Vec_Impl11_DerefMut_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel3 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : borrowed (seq t)
    ensures { ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    ensures { ShallowModel2.shallow_model ( ^ result) = ShallowModel3.shallow_model ( ^ self) }
    
end
module Alloc_Vec_Impl11_DerefMut
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Interface as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Interface as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : borrowed (seq t)
    ensures { ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    ensures { ShallowModel2.shallow_model ( ^ result) = ShallowModel3.shallow_model ( ^ self) }
    
end
module Core_Slice_Iter_IterMut_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_itermut 't =
    | C_IterMut (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata (borrowed 't))
    
end
module CreusotContracts_Std1_Slice_Impl14_ShallowModel_Stub
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (seq t)
end
module CreusotContracts_Std1_Slice_Impl14_ShallowModel_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (seq t)
  axiom shallow_model_spec : forall self : Core_Slice_Iter_IterMut_Type.t_itermut t . Seq.length (ShallowModel0.shallow_model ( ^ shallow_model self)) = Seq.length (ShallowModel0.shallow_model ( * shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl14_ShallowModel
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (seq t)
  val shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (seq t)
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Core_Slice_Iter_IterMut_Type.t_itermut t . Seq.length (ShallowModel0.shallow_model ( ^ shallow_model self)) = Seq.length (ShallowModel0.shallow_model ( * shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl15_Invariant_Stub
  type t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate invariant' (self : Core_Slice_Iter_IterMut_Type.t_itermut t)
end
module CreusotContracts_Std1_Slice_Impl15_Invariant_Interface
  type t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate invariant' (self : Core_Slice_Iter_IterMut_Type.t_itermut t)
end
module CreusotContracts_Std1_Slice_Impl15_Invariant
  type t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  use prelude.Borrow
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl14_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate invariant' (self : Core_Slice_Iter_IterMut_Type.t_itermut t) =
    Seq.length (ShallowModel1.shallow_model ( ^ ShallowModel0.shallow_model self)) = Seq.length (ShallowModel1.shallow_model ( * ShallowModel0.shallow_model self))
  val invariant' (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : bool
    ensures { result = invariant' self }
    
end
module Core_Slice_Impl0_IterMut_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl15_Invariant_Stub as Invariant0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl14_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val iter_mut [@cfg:stackify] (self : borrowed (seq t)) : Core_Slice_Iter_IterMut_Type.t_itermut t
    ensures { ShallowModel0.shallow_model result = self }
    ensures { Invariant0.invariant' result }
    
end
module Core_Slice_Impl0_IterMut
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl15_Invariant_Interface as Invariant0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl14_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val iter_mut [@cfg:stackify] (self : borrowed (seq t)) : Core_Slice_Iter_IterMut_Type.t_itermut t
    ensures { ShallowModel0.shallow_model result = self }
    ensures { Invariant0.invariant' result }
    
end
module CreusotContracts_Std1_Slice_Impl14_ShallowModelTy_Type
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  type shallowModelTy  =
    borrowed (seq t)
end
module CreusotContracts_Std1_Slice_Impl16_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t))
end
module CreusotContracts_Std1_Slice_Impl16_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t))
end
module CreusotContracts_Std1_Slice_Impl16_Completed
  type t
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl14_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut t
  predicate completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) =
    Resolve0.resolve self /\ ShallowModel1.shallow_model ( * ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Stub
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function to_mut_seq (self : borrowed (seq t)) : Seq.seq (borrowed t)
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function to_mut_seq (self : borrowed (seq t)) : Seq.seq (borrowed t)
  axiom to_mut_seq_spec : forall self : borrowed (seq t) . (forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  ^ Seq.get (to_mut_seq self) i = Seq.get (ShallowModel1.shallow_model ( ^ self)) i) && (forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  * Seq.get (to_mut_seq self) i = Seq.get (ShallowModel0.shallow_model self) i) && Seq.length (to_mut_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function to_mut_seq (self : borrowed (seq t)) : Seq.seq (borrowed t)
  val to_mut_seq (self : borrowed (seq t)) : Seq.seq (borrowed t)
    ensures { result = to_mut_seq self }
    
  axiom to_mut_seq_spec : forall self : borrowed (seq t) . (forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  ^ Seq.get (to_mut_seq self) i = Seq.get (ShallowModel1.shallow_model ( ^ self)) i) && (forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  * Seq.get (to_mut_seq self) i = Seq.get (ShallowModel0.shallow_model self) i) && Seq.length (to_mut_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module CreusotContracts_Std1_Slice_Impl16_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t)
    
end
module CreusotContracts_Std1_Slice_Impl16_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t)
    
end
module CreusotContracts_Std1_Slice_Impl16_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel2 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Stub as ToMutSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl14_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t)
    
   =
    ToMutSeq0.to_mut_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToMutSeq0.to_mut_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t) : bool
    ensures { result = produces self visited tl }
    
end
module Core_Slice_Iter_Impl187_Item_Type
  type t
  use prelude.Borrow
  type item  =
    borrowed t
end
module Core_Slice_Iter_Impl187_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Slice_Iter_Impl187_Item_Type as Item1 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl16_Completed_Stub as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_IterMut_Type.t_itermut t
  clone CreusotContracts_Std1_Slice_Impl15_Invariant_Stub as Invariant0 with
    type t = t
  val next [@cfg:stackify] (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) : Core_Option_Option_Type.t_option (borrowed t)
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Slice_Iter_Impl187_Next
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Slice_Iter_Impl187_Item_Type as Item1 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Interface as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl16_Completed_Interface as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_IterMut_Type.t_itermut t
  clone CreusotContracts_Std1_Slice_Impl15_Invariant_Interface as Invariant0 with
    type t = t
  val next [@cfg:stackify] (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) : Core_Option_Option_Type.t_option (borrowed t)
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Slice_Impl17_Resolve_Stub
  type t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t)
end
module CreusotContracts_Std1_Slice_Impl17_Resolve_Interface
  type t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t)
end
module CreusotContracts_Std1_Slice_Impl17_Resolve
  type t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  use prelude.Borrow
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl14_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t) =
     * ShallowModel0.shallow_model self =  ^ ShallowModel0.shallow_model self
  val resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Slice_Impl16_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
end
module CreusotContracts_Std1_Slice_Impl16_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
  axiom produces_refl_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl16_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : () =
    ()
  val produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl16_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl16_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : Core_Slice_Iter_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : Core_Slice_Iter_IterMut_Type.t_itermut t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Slice_Impl16_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    
   =
    ()
  val produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : Core_Slice_Iter_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : Core_Slice_Iter_IterMut_Type.t_itermut t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module C03StdIterators_AllZero_Interface
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val all_zero [@cfg:stackify] [#"../03_std_iterators.rs" 28 0 28 35] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../03_std_iterators.rs" 26 10 26 35] Seq.length (ShallowModel0.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"../03_std_iterators.rs" 27 0 27 69] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model v) -> UInt64.to_int (Seq.get (ShallowModel0.shallow_model ( ^ v)) i) = 0 }
    
end
module C03StdIterators_AllZero
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  use seq.Seq
  use prelude.Ghost
  use prelude.IntSize
  use mach.int.UInt64
  clone CreusotContracts_Std1_Slice_Impl14_ShallowModelTy_Type as ShallowModelTy2 with
    type t = usize
  clone Core_Num_Impl12_Max as Max0
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel3 with
    type t = usize,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl14_ShallowModel as ShallowModel4 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel5 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut usize,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy2.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut usize
  clone CreusotContracts_Std1_Slice_Impl16_Completed as Completed0 with
    type t = usize,
    predicate Resolve0.resolve = Resolve2.resolve,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Core_Slice_Iter_Impl187_Item_Type as Item0 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = usize
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel2 with
    type t = seq usize,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq as ToMutSeq0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl16_Produces as Produces0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX',
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Slice_Impl16_ProducesTrans as ProducesTrans0 with
    type t = usize,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl16_ProducesRefl as ProducesRefl0 with
    type t = usize,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl17_Resolve as Resolve3 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Std1_Slice_Impl15_Invariant as Invariant0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Core_Slice_Iter_Impl187_Next_Interface as Next0 with
    type t = usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Slice_Iter_IterMut_Type.t_itermut usize
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = seq usize
  clone Core_Slice_Impl0_IterMut_Interface as IterMut1 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant',
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  let rec cfg all_zero [@cfg:stackify] [#"../03_std_iterators.rs" 28 0 28 35] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../03_std_iterators.rs" 26 10 26 35] Seq.length (ShallowModel0.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"../03_std_iterators.rs" 27 0 27 69] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model v) -> UInt64.to_int (Seq.get (ShallowModel0.shallow_model ( ^ v)) i) = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var iter_4 : Core_Slice_Iter_IterMut_Type.t_itermut usize;
  var _5 : Core_Slice_Iter_IterMut_Type.t_itermut usize;
  var _6 : borrowed (seq usize);
  var _7 : borrowed (seq usize);
  var _8 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var iter_old_9 : Ghost.ghost_ty (Core_Slice_Iter_IterMut_Type.t_itermut usize);
  var _11 : ();
  var produced_12 : Ghost.ghost_ty (Seq.seq (borrowed usize));
  var _15 : ();
  var _19 : ();
  var _20 : Core_Option_Option_Type.t_option (borrowed usize);
  var _21 : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize);
  var _22 : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize);
  var _23 : isize;
  var i_24 : borrowed usize;
  var _25 : Ghost.ghost_ty (Seq.seq (borrowed usize));
  var _27 : ();
  var x_28 : borrowed usize;
  var _29 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _8) };
    assume { Resolve0.resolve v_1 };
    _7 <- ([#"../03_std_iterators.rs" 30 13 30 25] DerefMut0.deref_mut _8);
    goto BB1
  }
  BB1 {
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _5 <- ([#"../03_std_iterators.rs" 30 13 30 25] IterMut1.iter_mut _6);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _7 };
    iter_4 <- ([#"../03_std_iterators.rs" 29 4 29 91] IntoIter0.into_iter _5);
    goto BB3
  }
  BB3 {
    _11 <- ();
    iter_old_9 <- ([#"../03_std_iterators.rs" 29 4 29 91] Ghost.new iter_4);
    goto BB4
  }
  BB4 {
    _15 <- ();
    produced_12 <- ([#"../03_std_iterators.rs" 29 4 29 91] Ghost.new (Seq.empty ));
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant type_invariant { [#"../03_std_iterators.rs" 29 4 29 91] Invariant0.invariant' iter_4 };
    invariant structural { [#"../03_std_iterators.rs" 29 4 29 91] Produces0.produces (Ghost.inner iter_old_9) (Ghost.inner produced_12) iter_4 };
    invariant user { [#"../03_std_iterators.rs" 29 4 29 91] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner produced_12) -> UInt64.to_int ( ^ Seq.get (Ghost.inner produced_12) i) = 0 };
    _22 <- borrow_mut iter_4;
    iter_4 <-  ^ _22;
    _21 <- borrow_mut ( * _22);
    _22 <- { _22 with current = ( ^ _21) };
    _20 <- ([#"../03_std_iterators.rs" 29 4 29 91] Next0.next _21);
    goto BB7
  }
  BB7 {
    assume { Resolve2.resolve _22 };
    switch (_20)
      | Core_Option_Option_Type.C_None -> goto BB8
      | Core_Option_Option_Type.C_Some _ -> goto BB10
      end
  }
  BB8 {
    assume { Resolve3.resolve iter_4 };
    _0 <- ();
    return _0
  }
  BB9 {
    assume { Resolve3.resolve iter_4 };
    absurd
  }
  BB10 {
    assume { Resolve4.resolve i_24 };
    i_24 <- Core_Option_Option_Type.some_0 _20;
    _20 <- (let Core_Option_Option_Type.C_Some a = _20 in Core_Option_Option_Type.C_Some (any borrowed usize));
    _27 <- ();
    _25 <- ([#"../03_std_iterators.rs" 29 4 29 91] Ghost.new (Seq.(++) (Ghost.inner produced_12) (Seq.singleton i_24)));
    goto BB11
  }
  BB11 {
    produced_12 <- _25;
    _25 <- any Ghost.ghost_ty (Seq.seq (borrowed usize));
    assume { Resolve4.resolve x_28 };
    x_28 <- i_24;
    i_24 <- any borrowed usize;
    x_28 <- { x_28 with current = ([#"../03_std_iterators.rs" 31 13 31 14] (0 : usize)) };
    assume { Resolve4.resolve x_28 };
    _19 <- ();
    goto BB6
  }
  
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module Core_Iter_Adapters_Take_Take_Type
  use mach.int.Int
  use prelude.UIntSize
  type t_take 'i =
    | C_Take 'i usize
    
end
module CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  function iter (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : i
end
module CreusotContracts_Std1_Iter_Take_Impl0_Iter_Interface
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  function iter (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : i
end
module CreusotContracts_Std1_Iter_Take_Impl0_Iter
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  function iter (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : i
  val iter (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : i
    ensures { result = iter self }
    
end
module CreusotContracts_Std1_Iter_Take_Impl1_Invariant_Stub
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate invariant' (self : Core_Iter_Adapters_Take_Take_Type.t_take i)
end
module CreusotContracts_Std1_Iter_Take_Impl1_Invariant_Interface
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate invariant' (self : Core_Iter_Adapters_Take_Take_Type.t_take i)
end
module CreusotContracts_Std1_Iter_Take_Impl1_Invariant
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = i
  predicate invariant' (self : Core_Iter_Adapters_Take_Take_Type.t_take i) =
    Invariant0.invariant' (Iter0.iter self)
  val invariant' (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Std1_Iter_Take_Impl0_N_Stub
  type i
  use mach.int.Int
  use mach.int.UInt64
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function n (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : int
end
module CreusotContracts_Std1_Iter_Take_Impl0_N_Interface
  type i
  use mach.int.Int
  use mach.int.UInt64
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function n (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : int
  axiom n_spec : forall self : Core_Iter_Adapters_Take_Take_Type.t_take i . n self >= 0 /\ n self <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Iter_Take_Impl0_N
  type i
  use mach.int.Int
  use mach.int.UInt64
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function n (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : int
  val n (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : int
    ensures { result = n self }
    
  axiom n_spec : forall self : Core_Iter_Adapters_Take_Take_Type.t_take i . n self >= 0 /\ n self <= UInt64.to_int Max0.mAX'
end
module Core_Iter_Traits_Iterator_Iterator_Take_Interface
  type self
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl0_N_Stub as N0 with
    type i = self,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = self
  clone CreusotContracts_Std1_Iter_Take_Impl1_Invariant_Stub as Invariant1 with
    type i = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  val take [@cfg:stackify] (self : self) (n : usize) : Core_Iter_Adapters_Take_Take_Type.t_take self
    requires {Invariant0.invariant' self}
    ensures { Invariant1.invariant' result }
    ensures { Iter0.iter result = self /\ N0.n result = UInt64.to_int n }
    
end
module Core_Iter_Traits_Iterator_Iterator_Take
  type self
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl0_N_Interface as N0 with
    type i = self,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Interface as Iter0 with
    type i = self
  clone CreusotContracts_Std1_Iter_Take_Impl1_Invariant_Interface as Invariant1 with
    type i = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = self
  val take [@cfg:stackify] (self : self) (n : usize) : Core_Iter_Adapters_Take_Take_Type.t_take self
    requires {Invariant0.invariant' self}
    ensures { Invariant1.invariant' result }
    ensures { Iter0.iter result = self /\ N0.n result = UInt64.to_int n }
    
end
module Core_Iter_Adapters_Skip_Skip_Type
  use mach.int.Int
  use prelude.UIntSize
  type t_skip 'i =
    | C_Skip 'i usize
    
end
module CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Stub
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  function iter (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : i
end
module CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Interface
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  function iter (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : i
end
module CreusotContracts_Std1_Iter_Skip_Impl0_Iter
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  function iter (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : i
  val iter (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : i
    ensures { result = iter self }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl1_Invariant_Stub
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate invariant' (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i)
end
module CreusotContracts_Std1_Iter_Skip_Impl1_Invariant_Interface
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate invariant' (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i)
end
module CreusotContracts_Std1_Iter_Skip_Impl1_Invariant
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Stub as Iter0 with
    type i = i
  predicate invariant' (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) =
    Invariant0.invariant' (Iter0.iter self)
  val invariant' (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl0_N_Stub
  type i
  use mach.int.Int
  use mach.int.UInt64
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function n (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : int
end
module CreusotContracts_Std1_Iter_Skip_Impl0_N_Interface
  type i
  use mach.int.Int
  use mach.int.UInt64
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function n (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : int
  axiom n_spec : forall self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i . n self >= 0 /\ n self <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Iter_Skip_Impl0_N
  type i
  use mach.int.Int
  use mach.int.UInt64
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function n (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : int
  val n (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : int
    ensures { result = n self }
    
  axiom n_spec : forall self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i . n self >= 0 /\ n self <= UInt64.to_int Max0.mAX'
end
module Core_Iter_Traits_Iterator_Iterator_Skip_Interface
  type self
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Skip_Impl0_N_Stub as N0 with
    type i = self,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Stub as Iter0 with
    type i = self
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Invariant_Stub as Invariant1 with
    type i = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  val skip [@cfg:stackify] (self : self) (n : usize) : Core_Iter_Adapters_Skip_Skip_Type.t_skip self
    requires {Invariant0.invariant' self}
    ensures { Invariant1.invariant' result }
    ensures { Iter0.iter result = self /\ N0.n result = UInt64.to_int n }
    
end
module Core_Iter_Traits_Iterator_Iterator_Skip
  type self
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Skip_Impl0_N_Interface as N0 with
    type i = self,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Interface as Iter0 with
    type i = self
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Invariant_Interface as Invariant1 with
    type i = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = self
  val skip [@cfg:stackify] (self : self) (n : usize) : Core_Iter_Adapters_Skip_Skip_Type.t_skip self
    requires {Invariant0.invariant' self}
    ensures { Invariant1.invariant' result }
    ensures { Iter0.iter result = self /\ N0.n result = UInt64.to_int n }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module Core_Iter_Adapters_Skip_Impl1_Item_Type
  type i
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  type item  =
    Item0.item
end
module Core_Iter_Adapters_Skip_Impl1_Next_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = i
  clone Core_Iter_Adapters_Skip_Impl1_Item_Type as Item2 with
    type i = i,
    type Item0.item = Item1.item
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Iter_Adapters_Skip_Skip_Type.t_skip i,
    type Item0.item = Item2.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  val next [@cfg:stackify] (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip i)) : Core_Option_Option_Type.t_option Item1.item
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Iter_Adapters_Skip_Impl1_Next
  type i
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = i
  clone Core_Iter_Adapters_Skip_Impl1_Item_Type as Item2 with
    type i = i,
    type Item0.item = Item1.item
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = Core_Iter_Adapters_Skip_Skip_Type.t_skip i,
    type Item0.item = Item2.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed0 with
    type self = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  val next [@cfg:stackify] (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip i)) : Core_Option_Option_Type.t_option Item1.item
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl3_Resolve_Stub
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate resolve (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i)
end
module CreusotContracts_Std1_Iter_Skip_Impl3_Resolve_Interface
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate resolve (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i)
end
module CreusotContracts_Std1_Iter_Skip_Impl3_Resolve
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = i
  clone CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Stub as Iter0 with
    type i = i
  predicate resolve (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) =
    Resolve0.resolve (Iter0.iter self)
  val resolve (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl2_Completed_Stub
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate completed (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip i))
end
module CreusotContracts_Std1_Iter_Skip_Impl2_Completed_Interface
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate completed (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip i))
end
module CreusotContracts_Std1_Iter_Skip_Impl2_Completed
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  use seq.Seq
  use mach.int.Int
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Stub as Iter0 with
    type i = i
  clone CreusotContracts_Std1_Iter_Skip_Impl0_N_Stub as N0 with
    type i = i,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate completed (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip i)) =
    N0.n ( ^ self) = 0 /\ (exists i : borrowed i . exists s : Seq.seq Item0.item . Seq.length s <= N0.n ( * self) /\ Produces0.produces (Iter0.iter ( * self)) s ( * i) /\ (forall i : int . 0 <= i /\ i < Seq.length s -> Resolve0.resolve (Seq.get s i)) /\ Completed0.completed i /\  ^ i = Iter0.iter ( ^ self))
  val completed (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip i)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl2_Produces_Stub
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate produces (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Skip_Skip_Type.t_skip i)
    
end
module CreusotContracts_Std1_Iter_Skip_Impl2_Produces_Interface
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate produces (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Skip_Skip_Type.t_skip i)
    
end
module CreusotContracts_Std1_Iter_Skip_Impl2_Produces
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  use mach.int.Int
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Stub as Iter0 with
    type i = i
  clone CreusotContracts_Std1_Iter_Skip_Impl0_N_Stub as N0 with
    type i = i,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate produces (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Skip_Skip_Type.t_skip i)
    
   =
    visited = Seq.empty  /\ self = o \/ N0.n o = 0 /\ Seq.length visited > 0 /\ (exists s : Seq.seq Item0.item . Seq.length s = N0.n self /\ Produces0.produces (Iter0.iter self) (Seq.(++) s visited) (Iter0.iter o) /\ (forall i : int . 0 <= i /\ i < Seq.length s -> Resolve0.resolve (Seq.get s i)))
  val produces (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : bool
    ensures { result = produces self visited o }
    
end
module Core_Iter_Adapters_Take_Impl1_Item_Type
  type i
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  type item  =
    Item0.item
end
module CreusotContracts_Std1_Iter_Take_Impl3_Resolve_Stub
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate resolve (self : Core_Iter_Adapters_Take_Take_Type.t_take i)
end
module CreusotContracts_Std1_Iter_Take_Impl3_Resolve_Interface
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate resolve (self : Core_Iter_Adapters_Take_Take_Type.t_take i)
end
module CreusotContracts_Std1_Iter_Take_Impl3_Resolve
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = i
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = i
  predicate resolve (self : Core_Iter_Adapters_Take_Take_Type.t_take i) =
    Resolve0.resolve (Iter0.iter self)
  val resolve (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl2_ProducesRefl_Stub
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Skip_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_refl (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
end
module CreusotContracts_Std1_Iter_Skip_Impl2_ProducesRefl_Interface
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Skip_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_refl (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
  axiom produces_refl_spec : forall a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Skip_Impl2_ProducesRefl
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Skip_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_refl (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : () =
    ()
  val produces_refl (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Skip_Impl2_ProducesTrans_Stub
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Skip_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_trans (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
    
end
module CreusotContracts_Std1_Iter_Skip_Impl2_ProducesTrans_Interface
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Skip_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_trans (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
    
  axiom produces_trans_spec : forall a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i, ab : Seq.seq Item0.item, b : Core_Iter_Adapters_Skip_Skip_Type.t_skip i, bc : Seq.seq Item0.item, c : Core_Iter_Adapters_Skip_Skip_Type.t_skip i . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Skip_Impl2_ProducesTrans
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Skip_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_trans (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
    
   =
    ()
  val produces_trans (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i, ab : Seq.seq Item0.item, b : Core_Iter_Adapters_Skip_Skip_Type.t_skip i, bc : Seq.seq Item0.item, c : Core_Iter_Adapters_Skip_Skip_Type.t_skip i . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Take_Impl2_Produces_Stub
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate produces (self : Core_Iter_Adapters_Take_Take_Type.t_take i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Take_Take_Type.t_take i)
    
end
module CreusotContracts_Std1_Iter_Take_Impl2_Produces_Interface
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate produces (self : Core_Iter_Adapters_Take_Take_Type.t_take i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Take_Take_Type.t_take i)
    
end
module CreusotContracts_Std1_Iter_Take_Impl2_Produces
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  use mach.int.Int
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = i
  clone CreusotContracts_Std1_Iter_Take_Impl0_N_Stub as N0 with
    type i = i,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate produces (self : Core_Iter_Adapters_Take_Take_Type.t_take i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Take_Take_Type.t_take i)
    
   =
    N0.n self = N0.n o + Seq.length visited /\ Produces0.produces (Iter0.iter self) visited (Iter0.iter o)
  val produces (self : Core_Iter_Adapters_Take_Take_Type.t_take i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Take_Take_Type.t_take i) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Take_Impl0_IterMut_Stub
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = i
  function iter_mut (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : borrowed i
end
module CreusotContracts_Std1_Iter_Take_Impl0_IterMut_Interface
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = i
  function iter_mut (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : borrowed i
  axiom iter_mut_spec : forall self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i) . Iter0.iter ( * self) =  * iter_mut self /\ Iter0.iter ( ^ self) =  ^ iter_mut self
end
module CreusotContracts_Std1_Iter_Take_Impl0_IterMut
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = i
  function iter_mut (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : borrowed i
  val iter_mut (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : borrowed i
    ensures { result = iter_mut self }
    
  axiom iter_mut_spec : forall self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i) . Iter0.iter ( * self) =  * iter_mut self /\ Iter0.iter ( ^ self) =  ^ iter_mut self
end
module CreusotContracts_Std1_Iter_Take_Impl2_Completed_Stub
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate completed (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i))
end
module CreusotContracts_Std1_Iter_Take_Impl2_Completed_Interface
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate completed (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i))
end
module CreusotContracts_Std1_Iter_Take_Impl2_Completed
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  use mach.int.Int
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = i
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Std1_Iter_Take_Impl0_IterMut_Stub as IterMut0 with
    type i = i,
    function Iter0.iter = Iter0.iter,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  clone CreusotContracts_Std1_Iter_Take_Impl0_N_Stub as N0 with
    type i = i,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate completed (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) =
    N0.n ( * self) = 0 /\ Resolve0.resolve self \/ N0.n ( * self) > 0 /\ N0.n ( * self) = N0.n ( ^ self) + 1 /\ Completed0.completed (IterMut0.iter_mut self)
  val completed (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Take_Impl2_ProducesRefl_Stub
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Take_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_refl (a : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
end
module CreusotContracts_Std1_Iter_Take_Impl2_ProducesRefl_Interface
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Take_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_refl (a : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
  axiom produces_refl_spec : forall a : Core_Iter_Adapters_Take_Take_Type.t_take i . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Take_Impl2_ProducesRefl
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Take_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_refl (a : Core_Iter_Adapters_Take_Take_Type.t_take i) : () =
    ()
  val produces_refl (a : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Iter_Adapters_Take_Take_Type.t_take i . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Take_Impl2_ProducesTrans_Stub
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Take_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_trans (a : Core_Iter_Adapters_Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    
end
module CreusotContracts_Std1_Iter_Take_Impl2_ProducesTrans_Interface
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Take_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_trans (a : Core_Iter_Adapters_Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    
  axiom produces_trans_spec : forall a : Core_Iter_Adapters_Take_Take_Type.t_take i, ab : Seq.seq Item0.item, b : Core_Iter_Adapters_Take_Take_Type.t_take i, bc : Seq.seq Item0.item, c : Core_Iter_Adapters_Take_Take_Type.t_take i . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Take_Impl2_ProducesTrans
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Take_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_trans (a : Core_Iter_Adapters_Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    
   =
    ()
  val produces_trans (a : Core_Iter_Adapters_Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Iter_Adapters_Take_Take_Type.t_take i, ab : Seq.seq Item0.item, b : Core_Iter_Adapters_Take_Take_Type.t_take i, bc : Seq.seq Item0.item, c : Core_Iter_Adapters_Take_Take_Type.t_take i . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl (a : self) : ()
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl (a : self) : ()
  axiom produces_refl_spec : forall a : self . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl (a : self) : ()
  val produces_refl (a : self) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
  val produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module C03StdIterators_SkipTake_Interface
  type i
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  val skip_take [@cfg:stackify] [#"../03_std_iterators.rs" 36 0 36 48] (iter : i) (n : usize) : ()
    requires {[#"../03_std_iterators.rs" 35 11 35 27] Invariant0.invariant' iter}
    
end
module C03StdIterators_SkipTake
  type i
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces2 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Interface as ProducesTrans2 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces2.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Interface as ProducesRefl2 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces2.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed2 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter as Iter0 with
    type i = i
  clone CreusotContracts_Std1_Iter_Take_Impl0_IterMut as IterMut0 with
    type i = i,
    function Iter0.iter = Iter0.iter,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Iter_Take_Impl0_N as N0 with
    type i = i,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Iter_Take_Impl2_Produces as Produces1 with
    type i = i,
    type Item0.item = Item0.item,
    function N0.n = N0.n,
    function Iter0.iter = Iter0.iter,
    predicate Produces0.produces = Produces2.produces,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Iter_Take_Impl1_Invariant as Invariant1 with
    type i = i,
    function Iter0.iter = Iter0.iter,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreusotContracts_Std1_Iter_Take_Impl2_ProducesTrans as ProducesTrans1 with
    type i = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_Take_Impl2_ProducesRefl as ProducesRefl1 with
    type i = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_Take_Impl2_Completed as Completed1 with
    type i = i,
    function N0.n = N0.n,
    predicate Resolve0.resolve = Resolve5.resolve,
    function IterMut0.iter_mut = IterMut0.iter_mut,
    predicate Completed0.completed = Completed2.completed,
    val Max0.mAX' = Max0.mAX',
    function Iter0.iter = Iter0.iter
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = Item0.item
  clone Core_Iter_Adapters_Take_Impl1_Item_Type as Item2 with
    type i = i,
    type Item0.item = Item0.item
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Skip_Impl0_Iter as Iter1 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i
  clone CreusotContracts_Std1_Iter_Skip_Impl0_N as N1 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Iter_Skip_Impl2_Produces as Produces0 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    type Item0.item = Item2.item,
    function N0.n = N1.n,
    function Iter0.iter = Iter1.iter,
    predicate Produces0.produces = Produces1.produces,
    predicate Resolve0.resolve = Resolve4.resolve,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Invariant as Invariant2 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    function Iter0.iter = Iter1.iter,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreusotContracts_Std1_Iter_Skip_Impl2_ProducesTrans as ProducesTrans0 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item2.item,
    axiom .
  clone CreusotContracts_Std1_Iter_Skip_Impl2_ProducesRefl as ProducesRefl0 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item2.item,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = i
  clone CreusotContracts_Std1_Iter_Take_Impl3_Resolve as Resolve3 with
    type i = i,
    function Iter0.iter = Iter0.iter,
    predicate Resolve0.resolve = Resolve0.resolve
  clone CreusotContracts_Std1_Iter_Skip_Impl2_Completed as Completed0 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    function N0.n = N1.n,
    type Item0.item = Item2.item,
    function Iter0.iter = Iter1.iter,
    predicate Produces0.produces = Produces1.produces,
    predicate Resolve0.resolve = Resolve4.resolve,
    predicate Completed0.completed = Completed1.completed,
    val Max0.mAX' = Max0.mAX'
  clone Core_Iter_Adapters_Skip_Impl1_Item_Type as Item1 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    type Item0.item = Item2.item
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Std1_Iter_Skip_Impl3_Resolve as Resolve1 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    function Iter0.iter = Iter1.iter,
    predicate Resolve0.resolve = Resolve3.resolve
  clone Core_Iter_Adapters_Skip_Impl1_Next_Interface as Next0 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    predicate Invariant0.invariant' = Invariant2.invariant',
    type Item0.item = Item1.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    type Item1.item = Item2.item
  clone Core_Iter_Traits_Iterator_Iterator_Skip_Interface as Skip1 with
    type self = Core_Iter_Adapters_Take_Take_Type.t_take i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant2.invariant',
    function Iter0.iter = Iter1.iter,
    function N0.n = N1.n,
    val Max0.mAX' = Max0.mAX'
  clone Core_Iter_Traits_Iterator_Iterator_Take_Interface as Take1 with
    type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Invariant1.invariant' = Invariant1.invariant',
    function Iter0.iter = Iter0.iter,
    function N0.n = N0.n,
    val Max0.mAX' = Max0.mAX'
  let rec cfg skip_take [@cfg:stackify] [#"../03_std_iterators.rs" 36 0 36 48] (iter : i) (n : usize) : ()
    requires {[#"../03_std_iterators.rs" 35 11 35 27] Invariant0.invariant' iter}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter_1 : i;
  var n_2 : usize;
  var res_4 : Core_Option_Option_Type.t_option Item0.item;
  var _5 : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i));
  var _6 : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i);
  var _7 : Core_Iter_Adapters_Take_Take_Type.t_take i;
  var _8 : i;
  var _9 : usize;
  var _10 : usize;
  var _11 : ();
  {
    iter_1 <- iter;
    n_2 <- n;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _8 };
    _8 <- iter_1;
    iter_1 <- any i;
    _9 <- n_2;
    _7 <- ([#"../03_std_iterators.rs" 37 14 37 26] Take1.take _8 _9);
    goto BB2
  }
  BB2 {
    _10 <- n_2;
    _6 <- ([#"../03_std_iterators.rs" 37 14 37 34] Skip1.skip _7 _10);
    goto BB3
  }
  BB3 {
    _5 <- borrow_mut _6;
    _6 <-  ^ _5;
    res_4 <- ([#"../03_std_iterators.rs" 37 14 37 41] Next0.next _5);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve _6 };
    assert { [#"../03_std_iterators.rs" 39 20 39 31] res_4 = Core_Option_Option_Type.C_None };
    goto BB6
  }
  BB6 {
    _11 <- ();
    _0 <- ();
    goto BB7
  }
  BB7 {
    assume { Resolve2.resolve res_4 };
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Alloc_Vec_Impl10_Deref_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val deref [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : seq t
    ensures { ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    
end
module Alloc_Vec_Impl10_Deref
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val deref [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : seq t
    ensures { ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2' : args)
  val precondition (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use prelude.Ghost
  use seq.Seq
  type t_mapinv 'i 'b 'f =
    | C_MapInv 'i 'f (Ghost.ghost_ty (Seq.seq 'b))
    
  let function mapinv_produced (self : t_mapinv 'i 'b 'f) : Ghost.ghost_ty (Seq.seq 'b)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MapInv _ _ a -> a
      end
  let function mapinv_iter (self : t_mapinv 'i 'b 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MapInv a _ _ -> a
      end
  let function mapinv_func (self : t_mapinv 'i 'b 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MapInv _ a _ -> a
      end
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Completed_Stub
  type i
  type b
  type f
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f))
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Completed_Interface
  type i
  type b
  type f
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f))
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Completed
  type i
  type b
  type f
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use prelude.Ghost
  use seq.Seq
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = i
  predicate completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)) =
    Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced ( ^ self)) = Seq.empty  /\ Completed0.completed {current = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( * self); final = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( ^ self)} /\ CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( * self) = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( ^ self)
  val completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Stub
  type i
  type b
  type f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate next_precondition (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Interface
  type i
  type b
  type f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate next_precondition (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition
  type i
  type b
  type f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  use prelude.Ghost
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate next_precondition (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) =
    forall i : i . forall e : Item0.item . Invariant0.invariant' i -> Produces0.produces (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) (Seq.singleton e) i -> Precondition0.precondition (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) (e, CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)
  val next_precondition (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : bool
    ensures { result = next_precondition self }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub
  type i
  type b
  type f
  predicate preservation (iter : i) (func : f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Interface
  type i
  type b
  type f
  predicate preservation (iter : i) (func : f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate preservation (iter : i) (func : f) =
    forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Invariant0.invariant' i -> Unnest0.unnest func ( * f) -> Produces0.produces iter (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1, Ghost.new s) -> PostconditionMut0.postcondition_mut f (e1, Ghost.new s) b -> Precondition0.precondition ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Stub
  type i
  type b
  type f
  predicate reinitialize (_1' : ())
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Interface
  type i
  type b
  type f
  predicate reinitialize (_1' : ())
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize
  type i
  type b
  type f
  use prelude.Borrow
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Completed_Stub as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  predicate reinitialize (_1' : ()) =
    forall reset : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) . Completed0.completed reset -> Invariant0.invariant' (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( ^ reset)) -> NextPrecondition0.next_precondition ( ^ reset) /\ Preservation0.preservation (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( ^ reset)) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( ^ reset))
  val reinitialize (_1' : ()) : bool
    ensures { result = reinitialize _1' }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_PreservationInv_Stub
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate preservation_inv (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_PreservationInv_Interface
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate preservation_inv (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
  axiom preservation_inv_spec : forall self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self) = Seq.empty  -> preservation_inv self = Preservation0.preservation (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_PreservationInv
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate preservation_inv (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) =
    forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Invariant0.invariant' i -> Unnest0.unnest (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) ( * f) -> Produces0.produces (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1, Ghost.new (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s)) -> PostconditionMut0.postcondition_mut f (e1, Ghost.new (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s)) b -> Precondition0.precondition ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s) e1))
  val preservation_inv (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : bool
    ensures { result = preservation_inv self }
    
  axiom preservation_inv_spec : forall self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self) = Seq.empty  -> preservation_inv self = Preservation0.preservation (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
end
module CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub
  type i
  type b
  type f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate invariant' (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Interface
  type i
  type b
  type f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate invariant' (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant
  type i
  type b
  type f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_PreservationInv_Stub as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  predicate invariant' (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) =
    Reinitialize0.reinitialize () /\ PreservationInv0.preservation_inv self /\ Invariant0.invariant' (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) /\ NextPrecondition0.next_precondition self
  val invariant' (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Std1_Iter_Iterator_MapInv_Interface
  type self
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  use prelude.Ghost
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant1 with
    type i = self,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = self,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Stub as Reinitialize0 with
    type i = self,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  val map_inv [@cfg:stackify] (self : self) (func : f) : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv self Item0.item f
    requires {forall i2 : self . forall e : Item0.item . Invariant0.invariant' i2 -> Produces0.produces self (Seq.singleton e) i2 -> Precondition0.precondition func (e, Ghost.new (Seq.empty ))}
    requires {Reinitialize0.reinitialize ()}
    requires {Preservation0.preservation self func}
    requires {Invariant0.invariant' self}
    ensures { Invariant1.invariant' result }
    ensures { result = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv self func (Ghost.new (Seq.empty )) }
    
end
module CreusotContracts_Std1_Iter_Iterator_MapInv
  type self
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  use prelude.Ghost
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Interface as Invariant1 with
    type i = self,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Interface as Preservation0 with
    type i = self,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Interface as Reinitialize0 with
    type i = self,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = self
  val map_inv [@cfg:stackify] (self : self) (func : f) : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv self Item0.item f
    requires {forall i2 : self . forall e : Item0.item . Invariant0.invariant' i2 -> Produces0.produces self (Seq.singleton e) i2 -> Precondition0.precondition func (e, Ghost.new (Seq.empty ))}
    requires {Reinitialize0.reinitialize ()}
    requires {Preservation0.preservation self func}
    requires {Invariant0.invariant' self}
    ensures { Invariant1.invariant' result }
    ensures { result = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv self func (Ghost.new (Seq.empty )) }
    
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterLogic_Stub
  type self
  type a
  use seq.Seq
  predicate from_iter_logic (prod : Seq.seq a) (res : self)
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterLogic_Interface
  type self
  type a
  use seq.Seq
  predicate from_iter_logic (prod : Seq.seq a) (res : self)
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterLogic
  type self
  type a
  use seq.Seq
  predicate from_iter_logic (prod : Seq.seq a) (res : self)
  val from_iter_logic (prod : Seq.seq a) (res : self) : bool
    ensures { result = from_iter_logic prod res }
    
end
module Core_Iter_Traits_Iterator_Iterator_Collect_Interface
  type self
  type b
  use seq.Seq
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_FromIterator_FromIterLogic_Stub as FromIterLogic0 with
    type self = b,
    type a = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = self
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  val collect [@cfg:stackify] (self : self) : b
    requires {Invariant0.invariant' self}
    ensures { exists prod : Seq.seq Item0.item . exists done_ : borrowed self . Resolve0.resolve ( ^ done_) /\ Completed0.completed done_ /\ Produces0.produces self prod ( * done_) /\ FromIterLogic0.from_iter_logic prod result }
    
end
module Core_Iter_Traits_Iterator_Iterator_Collect
  type self
  type b
  use seq.Seq
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_FromIterator_FromIterLogic_Interface as FromIterLogic0 with
    type self = b,
    type a = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed0 with
    type self = self
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = self
  val collect [@cfg:stackify] (self : self) : b
    requires {Invariant0.invariant' self}
    ensures { exists prod : Seq.seq Item0.item . exists done_ : borrowed self . Resolve0.resolve ( ^ done_) /\ Completed0.completed done_ /\ Produces0.produces self prod ( * done_) /\ FromIterLogic0.from_iter_logic prod result }
    
end
module C03StdIterators_Counter_Closure0_Interface
  use prelude.Borrow
  use mach.int.UInt64
  use prelude.Ghost
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  type c03stditerators_counter_closure0  =
    | C03StdIterators_Counter_Closure0 (borrowed usize)
    
  let function c03stditerators_counter_closure0_0 (self : c03stditerators_counter_closure0) : borrowed usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C03StdIterators_Counter_Closure0 a -> a
      end
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = usize
  predicate precondition [@cfg:stackify] [#"../03_std_iterators.rs" 49 12 49 91] (self : c03stditerators_counter_closure0) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../03_std_iterators.rs" 48 23 48 65] let (x, _prod) = args in UInt64.to_int ( * c03stditerators_counter_closure0_0 self) = Seq.length (Ghost.inner _prod) /\  * c03stditerators_counter_closure0_0 self < Max0.mAX'
  predicate unnest (self : c03stditerators_counter_closure0) (_2' : c03stditerators_counter_closure0) =
     ^ c03stditerators_counter_closure0_0 _2' =  ^ c03stditerators_counter_closure0_0 self
  predicate postcondition_mut [@cfg:stackify] [#"../03_std_iterators.rs" 49 12 49 91] (self : borrowed c03stditerators_counter_closure0) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    ([#"../03_std_iterators.rs" 49 22 49 89] let (x, _prod) = args in UInt64.to_int ( * c03stditerators_counter_closure0_0 ( ^ self)) = UInt64.to_int ( * c03stditerators_counter_closure0_0 ( * self)) + 1 /\ UInt64.to_int ( * c03stditerators_counter_closure0_0 ( ^ self)) = Seq.length (Ghost.inner _prod) + 1 /\ result = x) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../03_std_iterators.rs" 49 12 49 91] (self : c03stditerators_counter_closure0) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../03_std_iterators.rs" 49 22 49 89] let (x, _prod) = args in UInt64.to_int ( * c03stditerators_counter_closure0_0 self) = UInt64.to_int ( * c03stditerators_counter_closure0_0 self) + 1 /\ UInt64.to_int ( * c03stditerators_counter_closure0_0 self) = Seq.length (Ghost.inner _prod) + 1 /\ result = x
  predicate resolve (_1' : c03stditerators_counter_closure0) =
    Resolve0.resolve (c03stditerators_counter_closure0_0 _1')
  val c03StdIterators_Counter_Closure0 [@cfg:stackify] [#"../03_std_iterators.rs" 49 12 49 91] (_1' : borrowed c03stditerators_counter_closure0) (x : uint32) (_prod : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../03_std_iterators.rs" 48 23 48 65] UInt64.to_int ( * c03stditerators_counter_closure0_0 ( * _1')) = Seq.length (Ghost.inner _prod) /\  * c03stditerators_counter_closure0_0 ( * _1') < Max0.mAX'}
    ensures { [#"../03_std_iterators.rs" 49 22 49 89] UInt64.to_int ( * c03stditerators_counter_closure0_0 ( ^ _1')) = UInt64.to_int ( * c03stditerators_counter_closure0_0 ( * _1')) + 1 /\ UInt64.to_int ( * c03stditerators_counter_closure0_0 ( ^ _1')) = Seq.length (Ghost.inner _prod) + 1 /\ result = x }
    ensures { unnest ( * _1') ( ^ _1') }
    
end
module C03StdIterators_Counter_Closure0
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  type c03stditerators_counter_closure0  =
    | C03StdIterators_Counter_Closure0 (borrowed usize)
    
  let function c03stditerators_counter_closure0_0 (self : c03stditerators_counter_closure0) : borrowed usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C03StdIterators_Counter_Closure0 a -> a
      end
  use mach.int.UInt32
  use prelude.Ghost
  use seq.Seq
  use mach.int.UInt64
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = usize
  clone Core_Num_Impl12_Max as Max0
  predicate precondition [@cfg:stackify] [#"../03_std_iterators.rs" 49 12 49 91] (self : c03stditerators_counter_closure0) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../03_std_iterators.rs" 48 23 48 65] let (x, _prod) = args in UInt64.to_int ( * c03stditerators_counter_closure0_0 self) = Seq.length (Ghost.inner _prod) /\  * c03stditerators_counter_closure0_0 self < Max0.mAX'
  predicate unnest (self : c03stditerators_counter_closure0) (_2' : c03stditerators_counter_closure0) =
     ^ c03stditerators_counter_closure0_0 _2' =  ^ c03stditerators_counter_closure0_0 self
  predicate postcondition_mut [@cfg:stackify] [#"../03_std_iterators.rs" 49 12 49 91] (self : borrowed c03stditerators_counter_closure0) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    ([#"../03_std_iterators.rs" 49 22 49 89] let (x, _prod) = args in UInt64.to_int ( * c03stditerators_counter_closure0_0 ( ^ self)) = UInt64.to_int ( * c03stditerators_counter_closure0_0 ( * self)) + 1 /\ UInt64.to_int ( * c03stditerators_counter_closure0_0 ( ^ self)) = Seq.length (Ghost.inner _prod) + 1 /\ result = x) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../03_std_iterators.rs" 49 12 49 91] (self : c03stditerators_counter_closure0) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../03_std_iterators.rs" 49 22 49 89] let (x, _prod) = args in UInt64.to_int ( * c03stditerators_counter_closure0_0 self) = UInt64.to_int ( * c03stditerators_counter_closure0_0 self) + 1 /\ UInt64.to_int ( * c03stditerators_counter_closure0_0 self) = Seq.length (Ghost.inner _prod) + 1 /\ result = x
  predicate resolve (_1' : c03stditerators_counter_closure0) =
    Resolve0.resolve (c03stditerators_counter_closure0_0 _1')
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = c03stditerators_counter_closure0
  let rec cfg c03StdIterators_Counter_Closure0 [@cfg:stackify] [#"../03_std_iterators.rs" 49 12 49 91] (_1' : borrowed c03stditerators_counter_closure0) (x : uint32) (_prod : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../03_std_iterators.rs" 48 23 48 65] UInt64.to_int ( * c03stditerators_counter_closure0_0 ( * _1')) = Seq.length (Ghost.inner _prod) /\  * c03stditerators_counter_closure0_0 ( * _1') < Max0.mAX'}
    ensures { [#"../03_std_iterators.rs" 49 22 49 89] UInt64.to_int ( * c03stditerators_counter_closure0_0 ( ^ _1')) = UInt64.to_int ( * c03stditerators_counter_closure0_0 ( * _1')) + 1 /\ UInt64.to_int ( * c03stditerators_counter_closure0_0 ( ^ _1')) = Seq.length (Ghost.inner _prod) + 1 /\ result = x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : borrowed c03stditerators_counter_closure0;
  var x_2 : uint32;
  var _prod_3 : Ghost.ghost_ty (Seq.seq uint32);
  var res_4 : uint32;
  var res_5 : uint32;
  {
    _1 <- _1';
    x_2 <- x;
    _prod_3 <- _prod;
    goto BB0
  }
  BB0 {
    _1 <- { _1 with current = (let C03StdIterators_Counter_Closure0 a =  * _1 in C03StdIterators_Counter_Closure0 ({ (c03stditerators_counter_closure0_0 ( * _1)) with current = ([#"../03_std_iterators.rs" 51 16 51 24]  * c03stditerators_counter_closure0_0 ( * _1) + ([#"../03_std_iterators.rs" 51 23 51 24] (1 : usize))) })) };
    assume { Resolve1.resolve _1 };
    res_5 <- x_2;
    res_4 <- res_5;
    _0 <- res_4;
    return _0
  }
  
end
module CreusotContracts_Std1_Vec_Impl6_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl6_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl6_Resolve
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use mach.int.Int
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl2_Item_Type
  type i
  type b
  type f
  type item  =
    b
end
module CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve_Stub
  type i
  type b
  type f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve_Interface
  type i
  type b
  type f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve
  type i
  type b
  type f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = f
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = i
  predicate resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f) =
    Resolve0.resolve (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) /\ Resolve1.resolve (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
  val resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Interface
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Produces
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use prelude.Ghost
  use prelude.Borrow
  use mach.int.Int
  use seq_ext.SeqExt
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  predicate produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
    
   =
    Unnest0.unnest (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ) /\ (exists s : Seq.seq Item0.item . Seq.length s = Seq.length visited /\ Produces0.produces (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) s (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter succ) /\ Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced succ) = Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s /\ (exists fs : Seq.seq (borrowed f) . Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    else
       * Seq.get fs 0 = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self /\  ^ Seq.get fs (Seq.length visited - 1) = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Unnest0.unnest (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) ( * Seq.get fs i) /\ Precondition0.precondition ( * Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i))) /\ PostconditionMut0.postcondition_mut (Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : bool
    ensures { result = produces self visited succ }
    
end
module CreusotContracts_Std1_Vec_Impl5_FromIterLogic_Stub
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate from_iter_logic (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl5_FromIterLogic_Interface
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate from_iter_logic (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl5_FromIterLogic
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate from_iter_logic (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    prod = ShallowModel0.shallow_model res
  val from_iter_logic (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = from_iter_logic prod res }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl_Stub
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl_Interface
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
  axiom produces_refl_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : () =
    ()
  val produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans_Stub
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans_Interface
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    
  axiom produces_trans_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, ab : Seq.seq b, b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, bc : Seq.seq b, c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    
   =
    ()
  val produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, ab : Seq.seq b, b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, bc : Seq.seq b, c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module C03StdIterators_Counter_Interface
  use mach.int.Int
  use mach.int.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val counter [@cfg:stackify] [#"../03_std_iterators.rs" 42 0 42 27] (v : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : ()
    
end
module C03StdIterators_Counter
  use mach.int.Int
  use mach.int.UInt32
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use mach.int.UInt64
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModelTy_Type as ShallowModelTy2 with
    type t = uint32
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModel as ShallowModel3 with
    type t = uint32
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel5 with
    type t = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy2.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = Core_Slice_Iter_Iter_Type.t_iter uint32
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel4 with
    type t = uint32,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl13_Completed as Completed1 with
    type t = uint32,
    predicate Resolve0.resolve = Resolve5.resolve,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Core_Slice_Iter_Impl181_Item_Type as Item0 with
    type t = uint32
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = usize
  clone C03StdIterators_Counter_Closure0_Interface as Closure00 with
    val Max0.mAX' = Max0.mAX',
    predicate Resolve0.resolve = Resolve1.resolve,
    axiom .
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = uint32
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = seq uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq as ToRefSeq0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl13_Produces as Produces0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces as Produces1 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Unnest0.unnest = Closure00.unnest,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure00.postcondition_mut,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Std1_Slice_Impl12_Invariant as Invariant0 with
    type t = uint32
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation as Preservation0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Unnest0.unnest = Closure00.unnest,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure00.postcondition_mut,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition as NextPrecondition0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Precondition0.precondition = Closure00.precondition,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_PreservationInv as PreservationInv0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Unnest0.unnest = Closure00.unnest,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure00.postcondition_mut,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Completed as Completed0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize as Reinitialize0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant as Invariant1 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans as ProducesTrans2 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl as ProducesRefl2 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve4 with
    type t = Core_Slice_Iter_Iter_Type.t_iter uint32
  clone CreusotContracts_Std1_Slice_Impl13_ProducesTrans as ProducesTrans1 with
    type t = uint32,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl13_ProducesRefl as ProducesRefl1 with
    type t = uint32,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve3 with
    type t = uint32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl5_FromIterLogic as FromIterLogic0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve as Resolve2 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Resolve1.resolve = Closure00.resolve,
    predicate Resolve0.resolve = Resolve4.resolve
  clone CreusotContracts_Std1_Iter_MapInv_Impl2_Item_Type as Item1 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0
  clone CreusotContracts_Std1_Iter_Iterator_ProducesTrans as ProducesTrans0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_ProducesRefl as ProducesRefl0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Vec_Impl6_Resolve as Resolve0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Resolve0.resolve = Resolve3.resolve,
    val Max0.mAX' = Max0.mAX'
  clone Core_Iter_Traits_Iterator_Iterator_Collect_Interface as Collect0 with
    type self = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 Closure00.c03stditerators_counter_closure0,
    type b = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item1.item,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces1.produces,
    predicate FromIterLogic0.from_iter_logic = FromIterLogic0.from_iter_logic
  clone CreusotContracts_Std1_Iter_Iterator_MapInv_Interface as MapInv1 with
    type self = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Precondition0.precondition = Closure00.precondition,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Invariant1.invariant' = Invariant1.invariant'
  clone Core_Slice_Impl0_Iter_Interface as Iter1 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Alloc_Vec_Impl10_Deref_Interface as Deref0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model
  let rec cfg counter [@cfg:stackify] [#"../03_std_iterators.rs" 42 0 42 27] (v : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var cnt_2 : usize;
  var x_3 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var _4 : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 Closure00.c03stditerators_counter_closure0;
  var _5 : Core_Slice_Iter_Iter_Type.t_iter uint32;
  var _6 : seq uint32;
  var _7 : seq uint32;
  var _8 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var _9 : Closure00.c03stditerators_counter_closure0;
  var _10 : borrowed usize;
  var _11 : ();
  var _13 : ();
  var _15 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    cnt_2 <- ([#"../03_std_iterators.rs" 43 18 43 19] (0 : usize));
    _8 <- v_1;
    _7 <- ([#"../03_std_iterators.rs" 45 22 46 15] Deref0.deref _8);
    goto BB1
  }
  BB1 {
    _6 <- _7;
    _5 <- ([#"../03_std_iterators.rs" 45 22 46 15] Iter1.iter _6);
    goto BB2
  }
  BB2 {
    _10 <- borrow_mut cnt_2;
    cnt_2 <-  ^ _10;
    _9 <- Closure00.C03StdIterators_Counter_Closure0 _10;
    _4 <- ([#"../03_std_iterators.rs" 45 22 54 9] MapInv1.map_inv _5 _9);
    goto BB3
  }
  BB3 {
    x_3 <- ([#"../03_std_iterators.rs" 45 22 55 18] Collect0.collect _4);
    goto BB4
  }
  BB4 {
    assert { [#"../03_std_iterators.rs" 57 20 57 44] Seq.length (ShallowModel0.shallow_model x_3) = Seq.length (ShallowModel0.shallow_model v_1) };
    goto BB5
  }
  BB5 {
    _11 <- ();
    assert { [#"../03_std_iterators.rs" 58 20 58 35] Seq.(==) (ShallowModel0.shallow_model x_3) (ShallowModel0.shallow_model v_1) };
    goto BB6
  }
  BB6 {
    _13 <- ();
    assert { [#"../03_std_iterators.rs" 59 20 59 38] UInt64.to_int cnt_2 = Seq.length (ShallowModel0.shallow_model x_3) };
    goto BB7
  }
  BB7 {
    _15 <- ();
    _0 <- ();
    goto BB8
  }
  BB8 {
    assume { Resolve0.resolve x_3 };
    goto BB9
  }
  BB9 {
    assume { Resolve0.resolve v_1 };
    return _0
  }
  
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
end
module CreusotContracts_Std1_Ops_Impl3_Invariant_Stub
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx)
end
module CreusotContracts_Std1_Ops_Impl3_Invariant_Interface
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx)
end
module CreusotContracts_Std1_Ops_Impl3_Invariant
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx) =
    true
  val invariant' (self : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = invariant' self }
    
end
module Core_Iter_Range_Impl3_Item_Type
  type a
  type item  =
    a
end
module Core_Iter_Range_Impl3_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Range_Impl3_Item_Type as Item1 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Iter_Range_Impl3_Next
  type a
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Range_Impl3_Item_Type as Item1 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Interface as Invariant0 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
   =
    Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) - DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : () =
    ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
   =
    ()
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Logic_Int_Impl30_DeepModel_Stub
  use mach.int.Int
  use prelude.IntSize
  function deep_model (self : isize) : int
end
module CreusotContracts_Logic_Int_Impl30_DeepModel_Interface
  use mach.int.Int
  use prelude.IntSize
  function deep_model (self : isize) : int
end
module CreusotContracts_Logic_Int_Impl30_DeepModel
  use mach.int.Int
  use prelude.IntSize
  use mach.int.Int64
  function deep_model (self : isize) : int =
    Int64.to_int self
  val deep_model (self : isize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) =
    Resolve0.resolve self /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start ( * self)) >= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module C03StdIterators_SumRange_Interface
  use mach.int.Int64
  use mach.int.Int
  use prelude.IntSize
  val sum_range [@cfg:stackify] [#"../03_std_iterators.rs" 64 0 64 35] (n : isize) : isize
    requires {[#"../03_std_iterators.rs" 62 11 62 18] Int64.to_int n >= 0}
    ensures { [#"../03_std_iterators.rs" 63 10 63 21] result = n }
    
end
module C03StdIterators_SumRange
  use mach.int.Int
  use prelude.IntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int64
  clone CreusotContracts_Logic_Int_Impl30_DeepModel as DeepModel0
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range isize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed0 with
    type idx = isize,
    predicate Resolve0.resolve = Resolve0.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Iter_Range_Impl3_Item_Type as Item0 with
    type a = isize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces0 with
    type idx = isize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Ops_Impl3_Invariant as Invariant0 with
    type idx = isize
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans as ProducesTrans0 with
    type idx = isize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl as ProducesRefl0 with
    type idx = isize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Iter_Range_Impl3_Next_Interface as Next0 with
    type a = isize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Ops_Range_Range_Type.t_range isize
  let rec cfg sum_range [@cfg:stackify] [#"../03_std_iterators.rs" 64 0 64 35] (n : isize) : isize
    requires {[#"../03_std_iterators.rs" 62 11 62 18] Int64.to_int n >= 0}
    ensures { [#"../03_std_iterators.rs" 63 10 63 21] result = n }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : isize;
  var n_1 : isize;
  var i_4 : isize;
  var _5 : ();
  var iter_6 : Core_Ops_Range_Range_Type.t_range isize;
  var _7 : Core_Ops_Range_Range_Type.t_range isize;
  var _8 : isize;
  var iter_old_9 : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range isize);
  var _11 : ();
  var produced_12 : Ghost.ghost_ty (Seq.seq isize);
  var _15 : ();
  var _19 : ();
  var _20 : Core_Option_Option_Type.t_option isize;
  var _21 : borrowed (Core_Ops_Range_Range_Type.t_range isize);
  var _22 : borrowed (Core_Ops_Range_Range_Type.t_range isize);
  var _23 : isize;
  var i_24 : isize;
  var _25 : Ghost.ghost_ty (Seq.seq isize);
  var _27 : ();
  var _28 : ();
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    i_4 <- ([#"../03_std_iterators.rs" 65 16 65 17] (0 : isize));
    _8 <- n_1;
    _7 <- Core_Ops_Range_Range_Type.C_Range ([#"../03_std_iterators.rs" 67 13 67 14] (0 : isize)) _8;
    iter_6 <- ([#"../03_std_iterators.rs" 66 4 66 54] IntoIter0.into_iter _7);
    goto BB1
  }
  BB1 {
    _11 <- ();
    iter_old_9 <- ([#"../03_std_iterators.rs" 66 4 66 54] Ghost.new iter_6);
    goto BB2
  }
  BB2 {
    _15 <- ();
    produced_12 <- ([#"../03_std_iterators.rs" 66 4 66 54] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant type_invariant { [#"../03_std_iterators.rs" 66 4 66 54] Invariant0.invariant' iter_6 };
    invariant structural { [#"../03_std_iterators.rs" 66 4 66 54] Produces0.produces (Ghost.inner iter_old_9) (Ghost.inner produced_12) iter_6 };
    invariant user { [#"../03_std_iterators.rs" 66 22 66 52] Int64.to_int i_4 = Seq.length (Ghost.inner produced_12) /\ i_4 <= n_1 };
    _22 <- borrow_mut iter_6;
    iter_6 <-  ^ _22;
    _21 <- borrow_mut ( * _22);
    _22 <- { _22 with current = ( ^ _21) };
    _20 <- ([#"../03_std_iterators.rs" 66 4 66 54] Next0.next _21);
    goto BB5
  }
  BB5 {
    assume { Resolve0.resolve _22 };
    switch (_20)
      | Core_Option_Option_Type.C_None -> goto BB6
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB6 {
    _5 <- ();
    _0 <- i_4;
    return _0
  }
  BB7 {
    absurd
  }
  BB8 {
    i_24 <- Core_Option_Option_Type.some_0 _20;
    _27 <- ();
    _25 <- ([#"../03_std_iterators.rs" 66 4 66 54] Ghost.new (Seq.(++) (Ghost.inner produced_12) (Seq.singleton i_24)));
    goto BB9
  }
  BB9 {
    produced_12 <- _25;
    _25 <- any Ghost.ghost_ty (Seq.seq isize);
    i_4 <- ([#"../03_std_iterators.rs" 68 8 68 14] i_4 + ([#"../03_std_iterators.rs" 68 13 68 14] (1 : isize)));
    _19 <- ();
    goto BB4
  }
  
end
