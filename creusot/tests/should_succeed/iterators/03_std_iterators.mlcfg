
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl5_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 83 8 83 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model self }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] result = Slice.id self }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] result = Slice.id self }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Interface
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic
  type t
  use prelude.Slice
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 41 8 41 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function to_ref_seq (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function to_ref_seq (self : slice t) : Seq.seq t
  val to_ref_seq (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 84 19 84 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 82 14 82 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 83 4 83 82] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = IndexLogic0.index_logic self i }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 84 4 84 35] Inv1.inv result }
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 84 19 84 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 84 4 84 35] Inv1.inv (to_ref_seq self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 83 4 83 82] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 14 82 41] Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function to_ref_seq (self : slice t) : Seq.seq t
  val to_ref_seq (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 84 19 84 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 82 14 82 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 83 4 83 82] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = IndexLogic0.index_logic self i }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 84 4 84 35] Inv1.inv result }
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 84 19 84 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 84 4 84 35] Inv1.inv (to_ref_seq self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 83 4 83 82] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 14 82 41] Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl14_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl14_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Std1_Slice_Impl14_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel1 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub as ToRefSeq0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Inv1.inv = Inv1.inv,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 379 12 379 66] ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module Core_Slice_Impl0_Iter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  val iter (self : slice t) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 231 0 327 1] ShallowModel0.shallow_model result = self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Interface
  type self
  predicate into_iter_pre (self : self)
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  predicate into_iter_pre (self : self) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 63 20 63 24] true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Interface
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = i,
    type IntoIter0.intoIter = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = i
  val into_iter (self : i) : i
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPre0.into_iter_pre self}
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPost0.into_iter_post self result }
    ensures { Inv0.inv result }
    
end
module CreusotContracts_Model_Impl7_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl7_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl14_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl14_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl14_Completed
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = slice t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 372 20 372 61] Resolve0.resolve self /\ ShallowModel1.shallow_model (ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module Core_Slice_Iter_Impl181_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl14_Completed_Stub as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  val next (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { Inv0.inv result }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Interface
  type i
  predicate into_iter_pre (self : i)
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  predicate into_iter_pre (self : i) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Interface
  type i
  predicate into_iter_post (self : i) (res : i)
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  predicate into_iter_post (self : i) (res : i) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Slice_Impl14_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
end
module CreusotContracts_Std1_Slice_Impl14_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . [#"../../../../../creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl14_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 383 4 383 10] ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . [#"../../../../../creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl14_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl14_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 393 31 393 33] Inv0.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 393 61 393 63] Inv0.inv bc}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 393 31 393 33] Inv0.inv ab) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 393 61 393 63] Inv0.inv bc) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Slice_Impl14_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 388 4 388 10] ()
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 393 31 393 33] Inv0.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 393 61 393 63] Inv0.inv bc}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 393 31 393 33] Inv0.inv ab) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 393 61 393 63] Inv0.inv bc) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C03StdIterators_SliceIter_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val slice_iter [#"../03_std_iterators.rs" 6 0 6 42] (slice : slice t) : usize
    requires {[#"../03_std_iterators.rs" 4 11 4 30] Seq.length (ShallowModel0.shallow_model slice) < 1000}
    requires {[#"../03_std_iterators.rs" 6 21 6 26] Inv0.inv slice}
    ensures { [#"../03_std_iterators.rs" 5 10 5 33] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model slice) }
    
end
module C03StdIterators_SliceIter
  type t
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Seq.seq t
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Seq.seq t,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = slice t
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = slice t,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface as ShallowModel1 with
    type t = t
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel3 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = slice t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Seq.seq t
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Seq.seq t,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = t,
    predicate Inv0.inv = Inv6.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = t
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = t,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Core_Option_Option_Type.t_option t
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Core_Option_Option_Type.t_option t,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl14_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve3.resolve,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate Inv0.inv = Inv6.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv7.inv
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic as IndexLogic0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Inv0.inv = Inv6.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv7.inv
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface as ToRefSeq0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Inv1.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl14_Produces as Produces0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Inv1.inv = Inv5.inv
  clone CreusotContracts_Std1_Slice_Impl14_ProducesTrans as ProducesTrans0 with
    type t = t,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl14_ProducesRefl as ProducesRefl0 with
    type t = t,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Ghost.ghost_ty (Seq.seq t)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Ghost.ghost_ty (Seq.seq t),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = slice t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve6 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = Core_Option_Option_Type.t_option t
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with
    type t = t,
    type Item0.item = t,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv3.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty (Seq.seq t)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter t)
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter t,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv2.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  clone Core_Slice_Impl0_Iter_Interface as Iter0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = slice t
  let rec cfg slice_iter [#"../03_std_iterators.rs" 6 0 6 42] [@cfg:stackify] [@cfg:subregion_analysis] (slice : slice t) : usize
    requires {[#"../03_std_iterators.rs" 4 11 4 30] Seq.length (ShallowModel0.shallow_model slice) < 1000}
    requires {[#"../03_std_iterators.rs" 6 21 6 26] Inv0.inv slice}
    ensures { [#"../03_std_iterators.rs" 5 10 5 33] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model slice) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var slice : slice t = slice;
  var i : usize;
  var iter : Core_Slice_Iter_Iter_Type.t_iter t;
  var _7 : Core_Slice_Iter_Iter_Type.t_iter t;
  var iter_old : Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter t);
  var produced : Ghost.ghost_ty (Seq.seq t);
  var _17 : Core_Option_Option_Type.t_option t;
  var _18 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var _19 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var __creusot_proc_iter_elem : t;
  var _22 : Ghost.ghost_ty (Seq.seq t);
  {
    goto BB0
  }
  BB0 {
    i <- ([#"../03_std_iterators.rs" 7 16 7 17] (0 : usize));
    assert { [@expl:type invariant] Inv0.inv slice };
    assume { Resolve0.resolve slice };
    _7 <- ([#"../03_std_iterators.rs" 9 13 9 25] Iter0.iter slice);
    goto BB1
  }
  BB1 {
    iter <- ([#"../03_std_iterators.rs" 8 4 8 38] IntoIter0.into_iter _7);
    _7 <- any Core_Slice_Iter_Iter_Type.t_iter t;
    goto BB2
  }
  BB2 {
    iter_old <- ([#"../03_std_iterators.rs" 8 4 8 38] Ghost.new iter);
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve iter_old };
    produced <- ([#"../03_std_iterators.rs" 8 4 8 38] Ghost.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    assert { [@expl:type invariant] Inv1.inv produced };
    assume { Resolve2.resolve produced };
    goto BB5
  }
  BB5 {
    invariant { [#"../03_std_iterators.rs" 8 4 8 38] Inv2.inv iter };
    invariant { [#"../03_std_iterators.rs" 8 4 8 38] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../03_std_iterators.rs" 8 16 8 36] UIntSize.to_int i = Seq.length (Ghost.inner produced) };
    goto BB6
  }
  BB6 {
    _19 <- Borrow.borrow_mut iter;
    iter <-  ^ _19;
    _18 <- Borrow.borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _17 <- ([#"../03_std_iterators.rs" 8 4 8 38] Next0.next _18);
    _18 <- any borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
    goto BB7
  }
  BB7 {
    assume { Resolve3.resolve _19 };
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB8
      | Core_Option_Option_Type.C_Some _ -> goto BB9
      end
  }
  BB8 {
    assert { [@expl:type invariant] Inv3.inv _17 };
    assume { Resolve4.resolve _17 };
    assume { Resolve6.resolve iter };
    _0 <- i;
    return _0
  }
  BB9 {
    goto BB11
  }
  BB10 {
    assert { [@expl:type invariant] Inv3.inv _17 };
    assume { Resolve4.resolve _17 };
    assume { Resolve6.resolve iter };
    absurd
  }
  BB11 {
    __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _17;
    assert { [@expl:type invariant] Inv3.inv _17 };
    assume { Resolve4.resolve _17 };
    _22 <- ([#"../03_std_iterators.rs" 8 4 8 38] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB12
  }
  BB12 {
    produced <- _22;
    _22 <- any Ghost.ghost_ty (Seq.seq t);
    assert { [@expl:type invariant] Inv1.inv produced };
    assume { Resolve2.resolve produced };
    assert { [@expl:type invariant] Inv4.inv __creusot_proc_iter_elem };
    assume { Resolve5.resolve __creusot_proc_iter_elem };
    i <- ([#"../03_std_iterators.rs" 10 8 10 14] i + ([#"../03_std_iterators.rs" 10 13 10 14] (1 : usize)));
    goto BB5
  }
  
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPre_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPre_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPre
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 182 20 182 24] true
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPost_Stub
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPost_Interface
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPost
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel2 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel1 with
    type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 188 20 188 34] ShallowModel0.shallow_model self = ShallowModel2.shallow_model (ShallowModel1.shallow_model res)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post self res }
    
end
module Alloc_Vec_Impl16_IntoIter_Interface
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl5_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl5_IntoIterPre_Stub as IntoIterPre0 with
    type t = t,
    type a = a
  val into_iter (self : Alloc_Vec_Vec_Type.t_vec t a) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPre0.into_iter_pre self}
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPost0.into_iter_post self result }
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module C03StdIterators_VecIter_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val vec_iter [#"../03_std_iterators.rs" 17 0 17 41] (vec : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {[#"../03_std_iterators.rs" 15 11 15 28] Seq.length (ShallowModel0.shallow_model vec) < 1000}
    requires {[#"../03_std_iterators.rs" 17 19 17 22] Inv0.inv vec}
    ensures { [#"../03_std_iterators.rs" 16 10 16 31] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model vec) }
    
end
module C03StdIterators_VecIter
  type t
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv9.inv,
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Seq.seq t
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = Seq.seq t,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = slice t
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = slice t,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface as ShallowModel1 with
    type t = t
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel5 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = slice t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Seq.seq t
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Seq.seq t,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel4 with
    type t = t,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = slice t
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = slice t,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv9.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = t
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = t,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Core_Option_Option_Type.t_option t
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Core_Option_Option_Type.t_option t,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl14_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve3.resolve,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic as IndexLogic0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel2 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface as ToRefSeq0 with
    type t = t,
    predicate Inv0.inv = Inv5.inv,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl14_Produces as Produces0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    predicate Inv0.inv = Inv5.inv,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Inv1.inv = Inv6.inv
  clone CreusotContracts_Std1_Slice_Impl14_ProducesTrans as ProducesTrans0 with
    type t = t,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl14_ProducesRefl as ProducesRefl0 with
    type t = t,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Ghost.ghost_ty (Seq.seq t)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Ghost.ghost_ty (Seq.seq t),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Vec_Impl5_IntoIterPost as IntoIterPost0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Vec_Impl5_IntoIterPre as IntoIterPre0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve6 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = Core_Option_Option_Type.t_option t
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with
    type t = t,
    type Item0.item = t,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv3.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty (Seq.seq t)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter t)
  clone Alloc_Vec_Impl16_IntoIter_Interface as IntoIter0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv0.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  let rec cfg vec_iter [#"../03_std_iterators.rs" 17 0 17 41] [@cfg:stackify] [@cfg:subregion_analysis] (vec : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {[#"../03_std_iterators.rs" 15 11 15 28] Seq.length (ShallowModel0.shallow_model vec) < 1000}
    requires {[#"../03_std_iterators.rs" 17 19 17 22] Inv0.inv vec}
    ensures { [#"../03_std_iterators.rs" 16 10 16 31] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model vec) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var vec : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) = vec;
  var i : usize;
  var iter : Core_Slice_Iter_Iter_Type.t_iter t;
  var iter_old : Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter t);
  var produced : Ghost.ghost_ty (Seq.seq t);
  var _16 : Core_Option_Option_Type.t_option t;
  var _17 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var _18 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var __creusot_proc_iter_elem : t;
  var _21 : Ghost.ghost_ty (Seq.seq t);
  {
    goto BB0
  }
  BB0 {
    i <- ([#"../03_std_iterators.rs" 18 16 18 17] (0 : usize));
    assert { [@expl:type invariant] Inv0.inv vec };
    assume { Resolve0.resolve vec };
    iter <- ([#"../03_std_iterators.rs" 19 4 19 38] IntoIter0.into_iter vec);
    goto BB1
  }
  BB1 {
    iter_old <- ([#"../03_std_iterators.rs" 19 4 19 38] Ghost.new iter);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve iter_old };
    produced <- ([#"../03_std_iterators.rs" 19 4 19 38] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    assert { [@expl:type invariant] Inv1.inv produced };
    assume { Resolve2.resolve produced };
    goto BB4
  }
  BB4 {
    invariant { [#"../03_std_iterators.rs" 19 4 19 38] Inv2.inv iter };
    invariant { [#"../03_std_iterators.rs" 19 4 19 38] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../03_std_iterators.rs" 19 16 19 36] UIntSize.to_int i = Seq.length (Ghost.inner produced) };
    goto BB5
  }
  BB5 {
    _18 <- Borrow.borrow_mut iter;
    iter <-  ^ _18;
    _17 <- Borrow.borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _16 <- ([#"../03_std_iterators.rs" 19 4 19 38] Next0.next _17);
    _17 <- any borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
    goto BB6
  }
  BB6 {
    assume { Resolve3.resolve _18 };
    switch (_16)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB7 {
    assert { [@expl:type invariant] Inv3.inv _16 };
    assume { Resolve4.resolve _16 };
    assume { Resolve6.resolve iter };
    _0 <- i;
    return _0
  }
  BB8 {
    goto BB10
  }
  BB9 {
    assert { [@expl:type invariant] Inv3.inv _16 };
    assume { Resolve4.resolve _16 };
    assume { Resolve6.resolve iter };
    absurd
  }
  BB10 {
    __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _16;
    assert { [@expl:type invariant] Inv3.inv _16 };
    assume { Resolve4.resolve _16 };
    _21 <- ([#"../03_std_iterators.rs" 19 4 19 38] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB11
  }
  BB11 {
    produced <- _21;
    _21 <- any Ghost.ghost_ty (Seq.seq t);
    assert { [@expl:type invariant] Inv1.inv produced };
    assume { Resolve2.resolve produced };
    assert { [@expl:type invariant] Inv4.inv __creusot_proc_iter_elem };
    assume { Resolve5.resolve __creusot_proc_iter_elem };
    i <- ([#"../03_std_iterators.rs" 21 8 21 14] i + ([#"../03_std_iterators.rs" 21 13 21 14] (1 : usize)));
    goto BB4
  }
  
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type a
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 19 8 19 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module Core_Slice_Iter_IterMut_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_itermut 't =
    | C_IterMut (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata (borrowed 't))
    
end
module CreusotContracts_Std1_Slice_Impl15_ShallowModel_Stub
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  function shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (slice t)
end
module CreusotContracts_Std1_Slice_Impl15_ShallowModel_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  function shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (slice t)
  val shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (slice t)
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 402 14 402 50] Seq.length (ShallowModel0.shallow_model ( ^ result)) = Seq.length (ShallowModel0.shallow_model ( * result)) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 403 4 403 50] Inv0.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Core_Slice_Iter_IterMut_Type.t_itermut t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 403 4 403 50] Inv0.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 402 14 402 50] Seq.length (ShallowModel0.shallow_model ( ^ shallow_model self)) = Seq.length (ShallowModel0.shallow_model ( * shallow_model self)))
end
module CreusotContracts_Std1_Slice_Impl15_ShallowModel
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  function shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (slice t)
  val shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (slice t)
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 402 14 402 50] Seq.length (ShallowModel0.shallow_model ( ^ result)) = Seq.length (ShallowModel0.shallow_model ( * result)) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 403 4 403 50] Inv0.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Core_Slice_Iter_IterMut_Type.t_itermut t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 403 4 403 50] Inv0.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 402 14 402 50] Seq.length (ShallowModel0.shallow_model ( ^ shallow_model self)) = Seq.length (ShallowModel0.shallow_model ( * shallow_model self)))
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  function to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  function to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
  val to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 75 23 75 27] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 72 14 72 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 73 4 73 82] forall i : int . 0 <= i /\ i < Seq.length result ->  * Seq.get result i = IndexLogic0.index_logic ( * self) i }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 74 4 74 85] forall i : int . 0 <= i /\ i < Seq.length result ->  ^ Seq.get result i = IndexLogic0.index_logic ( ^ self) i }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 75 4 75 43] Inv1.inv result }
    ensures { result = to_mut_seq self }
    
  axiom to_mut_seq_spec : forall self : borrowed (slice t) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 75 23 75 27] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 75 4 75 43] Inv1.inv (to_mut_seq self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 74 4 74 85] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  ^ Seq.get (to_mut_seq self) i = IndexLogic0.index_logic ( ^ self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 73 4 73 82] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  * Seq.get (to_mut_seq self) i = IndexLogic0.index_logic ( * self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 72 14 72 41] Seq.length (to_mut_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  function to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
  val to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 75 23 75 27] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 72 14 72 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 73 4 73 82] forall i : int . 0 <= i /\ i < Seq.length result ->  * Seq.get result i = IndexLogic0.index_logic ( * self) i }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 74 4 74 85] forall i : int . 0 <= i /\ i < Seq.length result ->  ^ Seq.get result i = IndexLogic0.index_logic ( ^ self) i }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 75 4 75 43] Inv1.inv result }
    ensures { result = to_mut_seq self }
    
  axiom to_mut_seq_spec : forall self : borrowed (slice t) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 75 23 75 27] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 75 4 75 43] Inv1.inv (to_mut_seq self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 74 4 74 85] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  ^ Seq.get (to_mut_seq self) i = IndexLogic0.index_logic ( ^ self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 73 4 73 82] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  * Seq.get (to_mut_seq self) i = IndexLogic0.index_logic ( * self) i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 72 14 72 41] Seq.length (to_mut_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl16_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t)
    
end
module CreusotContracts_Std1_Slice_Impl16_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t)
    
  val produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Std1_Slice_Impl16_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel2 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Stub as ToMutSeq0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl15_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv2.inv,
    axiom .
  predicate produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t)
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 428 12 428 66] ToMutSeq0.to_mut_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToMutSeq0.to_mut_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic_Stub
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic_Interface
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
  val index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 85 8 85 33] Seq.get (Ghost.inner self) ix
  val index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Std1_Slice_Impl17_Resolve_Stub
  type t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t)
end
module CreusotContracts_Std1_Slice_Impl17_Resolve_Interface
  type t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t)
  val resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Slice_Impl17_Resolve
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl15_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv2.inv,
    axiom .
  predicate resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 413 20 413 36]  * ShallowModel0.shallow_model self =  ^ ShallowModel0.shallow_model self
  val resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : bool
    ensures { result = resolve self }
    
end
module Alloc_Vec_Impl9_DerefMut_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv4 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = slice t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel3 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv4.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = t,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  val deref_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : borrowed (slice t)
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 152 26 152 42] ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 153 26 153 48] ShallowModel2.shallow_model ( ^ result) = ShallowModel3.shallow_model ( ^ self) }
    ensures { Inv1.inv result }
    
end
module Core_Slice_Impl0_IterMut_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Slice_Impl15_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv2.inv,
    axiom .
  val iter_mut (self : borrowed (slice t)) : Core_Slice_Iter_IterMut_Type.t_itermut t
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 231 0 327 1] ShallowModel0.shallow_model result = self }
    
end
module CreusotContracts_Std1_Slice_Impl16_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t))
end
module CreusotContracts_Std1_Slice_Impl16_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t))
  val completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl16_Completed
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut t,
    type ShallowModelTy0.shallowModelTy = borrowed (slice t)
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut t
  predicate completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 421 20 421 61] Resolve0.resolve self /\ ShallowModel1.shallow_model ( * ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) : bool
    ensures { result = completed self }
    
end
module Core_Slice_Iter_Impl189_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option (borrowed t)
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl16_Completed_Stub as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_IterMut_Type.t_itermut t
  val next (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { Inv0.inv result }
    
end
module CreusotContracts_Std1_Slice_Impl16_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
end
module CreusotContracts_Std1_Slice_Impl16_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
  val produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 434 14 434 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t . [#"../../../../../creusot-contracts/src/std/slice.rs" 434 14 434 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl16_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : () =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 432 4 432 10] ()
  val produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 434 14 434 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t . [#"../../../../../creusot-contracts/src/std/slice.rs" 434 14 434 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl16_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl16_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    
  val produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 439 15 439 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 440 15 440 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 442 31 442 33] Inv0.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 442 61 442 63] Inv0.inv bc}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 441 14 441 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : Core_Slice_Iter_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : Core_Slice_Iter_IterMut_Type.t_itermut t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 439 15 439 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 440 15 440 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 442 31 442 33] Inv0.inv ab) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 442 61 442 63] Inv0.inv bc) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 441 14 441 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Slice_Impl16_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 437 4 437 10] ()
  val produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 439 15 439 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 440 15 440 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 442 31 442 33] Inv0.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 442 61 442 63] Inv0.inv bc}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 441 14 441 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : Core_Slice_Iter_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : Core_Slice_Iter_IterMut_Type.t_itermut t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 439 15 439 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 440 15 440 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 442 31 442 33] Inv0.inv ab) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 442 61 442 63] Inv0.inv bc) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 441 14 441 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C03StdIterators_AllZero_Interface
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq usize
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq usize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  val all_zero [#"../03_std_iterators.rs" 28 0 28 35] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../03_std_iterators.rs" 26 10 26 33] Seq.length (ShallowModel0.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"../03_std_iterators.rs" 27 0 27 66] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model v) -> UIntSize.to_int (IndexLogic0.index_logic ( ^ v) i) = 0 }
    
end
module C03StdIterators_AllZero
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Slice
  use prelude.Ghost
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Core_Option_Option_Type.t_option (borrowed usize)
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Core_Option_Option_Type.t_option (borrowed usize),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Seq.seq usize
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = slice usize
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (slice usize)
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = usize,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_ShallowModel_Interface as ShallowModel4 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel5 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut usize,
    type ShallowModelTy0.shallowModelTy = borrowed (slice usize),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Seq.seq (borrowed usize)
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Seq.seq (borrowed usize),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = slice usize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (slice usize),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut usize
  clone CreusotContracts_Std1_Slice_Impl16_Completed as Completed0 with
    type t = usize,
    predicate Resolve0.resolve = Resolve1.resolve,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic as IndexLogic2 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel2 with
    type t = slice usize,
    type ShallowModelTy0.shallowModelTy = Seq.seq usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Interface as ToMutSeq0 with
    type t = usize,
    predicate Inv0.inv = Inv2.inv,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl16_Produces as Produces0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv4.inv,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    predicate Inv3.inv = Inv6.inv
  clone CreusotContracts_Std1_Slice_Impl16_ProducesTrans as ProducesTrans0 with
    type t = usize,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl16_ProducesRefl as ProducesRefl0 with
    type t = usize,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut usize
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut usize,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Slice_Iter_IterMut_Type.t_itermut usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Slice_Iter_IterMut_Type.t_itermut usize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq usize,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl17_Resolve as Resolve3 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv4.inv
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = usize
  clone Core_Slice_Iter_Impl189_Next_Interface as Next0 with
    type t = usize,
    type Item0.item = borrowed usize,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv7.inv
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic as IndexLogic0 with
    type t = borrowed usize
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = slice usize
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Slice_Iter_IterMut_Type.t_itermut usize,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv0.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  clone Core_Slice_Impl0_IterMut_Interface as IterMut0 with
    type t = usize,
    predicate Inv0.inv = Inv2.inv,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate Inv1.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv4.inv
  clone Alloc_Vec_Impl9_DerefMut_Interface as DerefMut0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel0.shallow_model,
    predicate Inv1.inv = Inv2.inv,
    predicate Inv2.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv3.inv = Inv4.inv,
    predicate Inv4.inv = Inv5.inv
  let rec cfg all_zero [#"../03_std_iterators.rs" 28 0 28 35] [@cfg:stackify] [@cfg:subregion_analysis] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../03_std_iterators.rs" 26 10 26 33] Seq.length (ShallowModel0.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"../03_std_iterators.rs" 27 0 27 66] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model v) -> UIntSize.to_int (IndexLogic1.index_logic ( ^ v) i) = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) = v;
  var iter : Core_Slice_Iter_IterMut_Type.t_itermut usize;
  var _5 : Core_Slice_Iter_IterMut_Type.t_itermut usize;
  var _6 : borrowed (slice usize);
  var _7 : borrowed (slice usize);
  var _8 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var iter_old : Ghost.ghost_ty (Core_Slice_Iter_IterMut_Type.t_itermut usize);
  var produced : Ghost.ghost_ty (Seq.seq (borrowed usize));
  var _17 : Core_Option_Option_Type.t_option (borrowed usize);
  var _18 : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize);
  var _19 : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize);
  var __creusot_proc_iter_elem : borrowed usize;
  var _22 : Ghost.ghost_ty (Seq.seq (borrowed usize));
  var x : borrowed usize;
  {
    goto BB0
  }
  BB0 {
    _8 <- Borrow.borrow_mut ( * v);
    v <- { v with current = ( ^ _8) };
    _7 <- ([#"../03_std_iterators.rs" 30 13 30 25] DerefMut0.deref_mut _8);
    _8 <- any borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
    goto BB1
  }
  BB1 {
    _6 <- Borrow.borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _5 <- ([#"../03_std_iterators.rs" 30 13 30 25] IterMut0.iter_mut _6);
    _6 <- any borrowed (slice usize);
    goto BB2
  }
  BB2 {
    iter <- ([#"../03_std_iterators.rs" 29 4 29 87] IntoIter0.into_iter _5);
    _5 <- any Core_Slice_Iter_IterMut_Type.t_itermut usize;
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _7 };
    iter_old <- ([#"../03_std_iterators.rs" 29 4 29 87] Ghost.new iter);
    goto BB4
  }
  BB4 {
    produced <- ([#"../03_std_iterators.rs" 29 4 29 87] Ghost.new (Seq.empty ));
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant { [#"../03_std_iterators.rs" 29 4 29 87] Inv0.inv iter };
    invariant { [#"../03_std_iterators.rs" 29 4 29 87] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../03_std_iterators.rs" 29 4 29 87] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner produced) -> UIntSize.to_int ( ^ IndexLogic0.index_logic produced i) = 0 };
    goto BB7
  }
  BB7 {
    _19 <- Borrow.borrow_mut iter;
    iter <-  ^ _19;
    _18 <- Borrow.borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _17 <- ([#"../03_std_iterators.rs" 29 4 29 87] Next0.next _18);
    _18 <- any borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize);
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve _19 };
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB9
      | Core_Option_Option_Type.C_Some _ -> goto BB10
      end
  }
  BB9 {
    assume { Resolve3.resolve iter };
    _0 <- ();
    assume { Resolve4.resolve v };
    return _0
  }
  BB10 {
    goto BB12
  }
  BB11 {
    assume { Resolve3.resolve iter };
    assume { Resolve4.resolve v };
    absurd
  }
  BB12 {
    __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _17;
    _17 <- (let Core_Option_Option_Type.C_Some a = _17 in Core_Option_Option_Type.C_Some (any borrowed usize));
    _22 <- ([#"../03_std_iterators.rs" 29 4 29 87] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB13
  }
  BB13 {
    produced <- _22;
    _22 <- any Ghost.ghost_ty (Seq.seq (borrowed usize));
    x <- __creusot_proc_iter_elem;
    __creusot_proc_iter_elem <- any borrowed usize;
    x <- { x with current = ([#"../03_std_iterators.rs" 31 13 31 14] (0 : usize)) };
    assume { Resolve2.resolve x };
    goto BB6
  }
  
end
module Core_Iter_Adapters_Take_Take_Type
  use prelude.Int
  use prelude.UIntSize
  type t_take 'i =
    | C_Take 'i usize
    
end
module Core_Iter_Adapters_Skip_Skip_Type
  use prelude.Int
  use prelude.UIntSize
  type t_skip 'i =
    | C_Skip 'i usize
    
end
module CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Stub
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  function iter (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : i
end
module CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Interface
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  function iter (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : i
  val iter (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : i
    ensures { result = iter self }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl0_Iter
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  function iter (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : i
  val iter (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : i
    ensures { result = iter self }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl2_Resolve_Stub
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate resolve (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i)
end
module CreusotContracts_Std1_Iter_Skip_Impl2_Resolve_Interface
  type i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate resolve (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i)
  val resolve (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl2_Resolve
  type i
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Stub as Iter0 with
    type i = i
  predicate resolve (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) =
    [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 34 12 34 33] Resolve0.resolve (Iter0.iter self)
  val resolve (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  function iter (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : i
end
module CreusotContracts_Std1_Iter_Take_Impl0_Iter_Interface
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  function iter (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : i
  val iter (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : i
    ensures { result = iter self }
    
end
module CreusotContracts_Std1_Iter_Take_Impl0_Iter
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  function iter (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : i
  val iter (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : i
    ensures { result = iter self }
    
end
module CreusotContracts_Std1_Iter_Take_Impl0_N_Stub
  type i
  use prelude.Int
  use prelude.UIntSize
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  function n (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : int
end
module CreusotContracts_Std1_Iter_Take_Impl0_N_Interface
  type i
  use prelude.Int
  use prelude.UIntSize
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  function n (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : int
  val n (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : int
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 34 9 34 13] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/take.rs" 33 14 33 50] result >= 0 /\ result <= UIntSize.to_int Max0.mAX' }
    ensures { result = n self }
    
  axiom n_spec : forall self : Core_Iter_Adapters_Take_Take_Type.t_take i . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 34 9 34 13] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 33 14 33 50] n self >= 0 /\ n self <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Iter_Take_Impl0_N
  type i
  use prelude.Int
  use prelude.UIntSize
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  function n (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : int
  val n (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : int
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 34 9 34 13] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/take.rs" 33 14 33 50] result >= 0 /\ result <= UIntSize.to_int Max0.mAX' }
    ensures { result = n self }
    
  axiom n_spec : forall self : Core_Iter_Adapters_Take_Take_Type.t_take i . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 34 9 34 13] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 33 14 33 50] n self >= 0 /\ n self <= UIntSize.to_int Max0.mAX')
end
module Core_Iter_Traits_Iterator_Iterator_Take_Interface
  type self
  use prelude.UIntSize
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take self
  clone CreusotContracts_Std1_Iter_Take_Impl0_N_Stub as N0 with
    type i = self,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val take (self : self) (n : usize) : Core_Iter_Adapters_Take_Take_Type.t_take self
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] Iter0.iter result = self /\ N0.n result = UIntSize.to_int n }
    ensures { Inv1.inv result }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl0_N_Stub
  type i
  use prelude.Int
  use prelude.UIntSize
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  function n (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : int
end
module CreusotContracts_Std1_Iter_Skip_Impl0_N_Interface
  type i
  use prelude.Int
  use prelude.UIntSize
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  function n (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : int
  val n (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : int
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 23 9 23 13] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 22 14 22 50] result >= 0 /\ result <= UIntSize.to_int Max0.mAX' }
    ensures { result = n self }
    
  axiom n_spec : forall self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i . ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 23 9 23 13] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 22 14 22 50] n self >= 0 /\ n self <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Iter_Skip_Impl0_N
  type i
  use prelude.Int
  use prelude.UIntSize
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  function n (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : int
  val n (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : int
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 23 9 23 13] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 22 14 22 50] result >= 0 /\ result <= UIntSize.to_int Max0.mAX' }
    ensures { result = n self }
    
  axiom n_spec : forall self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i . ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 23 9 23 13] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 22 14 22 50] n self >= 0 /\ n self <= UIntSize.to_int Max0.mAX')
end
module Core_Iter_Traits_Iterator_Iterator_Skip_Interface
  type self
  use prelude.UIntSize
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip self
  clone CreusotContracts_Std1_Iter_Skip_Impl0_N_Stub as N0 with
    type i = self,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Stub as Iter0 with
    type i = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val skip (self : self) (n : usize) : Core_Iter_Adapters_Skip_Skip_Type.t_skip self
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] Iter0.iter result = self /\ N0.n result = UIntSize.to_int n }
    ensures { Inv1.inv result }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module Core_Iter_Adapters_Skip_Impl1_Next_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = i
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Iter_Adapters_Skip_Skip_Type.t_skip i,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip i)
  val next (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip i)) : Core_Option_Option_Type.t_option Item1.item
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { Inv1.inv result }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl1_Completed_Stub
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate completed (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip i))
end
module CreusotContracts_Std1_Iter_Skip_Impl1_Completed_Interface
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate completed (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip i))
  val completed (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip i)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl1_Completed
  type i
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Stub as Iter0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed i
  clone CreusotContracts_Std1_Iter_Skip_Impl0_N_Stub as N0 with
    type i = i,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate completed (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip i)) =
    [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 43 8 51 9] N0.n ( ^ self) = 0 /\ (exists i : borrowed i . exists s : Seq.seq Item0.item . Inv0.inv i /\ Inv1.inv s /\ Seq.length s <= N0.n ( * self) /\ Produces0.produces (Iter0.iter ( * self)) s ( * i) /\ (forall i : int . 0 <= i /\ i < Seq.length s -> Resolve0.resolve (Seq.get s i)) /\ Completed0.completed i /\  ^ i = Iter0.iter ( ^ self))
  val completed (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip i)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl1_Produces_Stub
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate produces (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Skip_Skip_Type.t_skip i)
    
end
module CreusotContracts_Std1_Iter_Skip_Impl1_Produces_Interface
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate produces (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Skip_Skip_Type.t_skip i)
    
  val produces (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl1_Produces
  type i
  use seq.Seq
  use prelude.Int
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Stub as Iter0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Std1_Iter_Skip_Impl0_N_Stub as N0 with
    type i = i,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate produces (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Skip_Skip_Type.t_skip i)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 57 8 64 9] visited = Seq.empty  /\ self = o \/ N0.n o = 0 /\ Seq.length visited > 0 /\ (exists s : Seq.seq Item0.item . Inv0.inv s /\ Seq.length s = N0.n self /\ Produces0.produces (Iter0.iter self) (Seq.(++) s visited) (Iter0.iter o) /\ (forall i : int . 0 <= i /\ i < Seq.length s -> Resolve0.resolve (Seq.get s i)))
  val produces (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Take_Impl2_Resolve_Stub
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate resolve (self : Core_Iter_Adapters_Take_Take_Type.t_take i)
end
module CreusotContracts_Std1_Iter_Take_Impl2_Resolve_Interface
  type i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate resolve (self : Core_Iter_Adapters_Take_Take_Type.t_take i)
  val resolve (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_Take_Impl2_Resolve
  type i
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = i
  predicate resolve (self : Core_Iter_Adapters_Take_Take_Type.t_take i) =
    [#"../../../../../creusot-contracts/src/std/iter/take.rs" 45 12 45 33] Resolve0.resolve (Iter0.iter self)
  val resolve (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_Skip_Impl1_ProducesRefl_Stub
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  function produces_refl (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
end
module CreusotContracts_Std1_Iter_Skip_Impl1_ProducesRefl_Interface
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  function produces_refl (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
  val produces_refl (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 70 21 70 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 69 14 69 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i . ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 70 21 70 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 69 14 69 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Skip_Impl1_ProducesRefl
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  function produces_refl (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : () =
    [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 67 4 67 10] ()
  val produces_refl (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 70 21 70 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 69 14 69 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i . ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 70 21 70 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 69 14 69 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Skip_Impl1_ProducesTrans_Stub
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
    
end
module CreusotContracts_Std1_Iter_Skip_Impl1_ProducesTrans_Interface
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
    
  val produces_trans (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 74 15 74 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 75 15 75 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 22 77 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 31 77 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 52 77 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 61 77 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 82 77 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 76 14 76 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i, ab : Seq.seq Item0.item, b : Core_Iter_Adapters_Skip_Skip_Type.t_skip i, bc : Seq.seq Item0.item, c : Core_Iter_Adapters_Skip_Skip_Type.t_skip i . ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 74 15 74 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 75 15 75 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 22 77 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 31 77 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 52 77 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 61 77 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 82 77 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 76 14 76 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Skip_Impl1_ProducesTrans
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip i
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 72 4 72 10] ()
  val produces_trans (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Skip_Skip_Type.t_skip i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 74 15 74 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 75 15 75 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 22 77 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 31 77 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 52 77 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 61 77 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 82 77 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 76 14 76 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Iter_Adapters_Skip_Skip_Type.t_skip i, ab : Seq.seq Item0.item, b : Core_Iter_Adapters_Skip_Skip_Type.t_skip i, bc : Seq.seq Item0.item, c : Core_Iter_Adapters_Skip_Skip_Type.t_skip i . ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 74 15 74 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 75 15 75 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 22 77 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 31 77 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 52 77 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 61 77 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 82 77 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 76 14 76 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Take_Impl1_Produces_Stub
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate produces (self : Core_Iter_Adapters_Take_Take_Type.t_take i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Take_Take_Type.t_take i)
    
end
module CreusotContracts_Std1_Iter_Take_Impl1_Produces_Interface
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate produces (self : Core_Iter_Adapters_Take_Take_Type.t_take i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Take_Take_Type.t_take i)
    
  val produces (self : Core_Iter_Adapters_Take_Take_Type.t_take i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Take_Take_Type.t_take i) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Take_Impl1_Produces
  type i
  use seq.Seq
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = i
  clone CreusotContracts_Std1_Iter_Take_Impl0_N_Stub as N0 with
    type i = i,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate produces (self : Core_Iter_Adapters_Take_Take_Type.t_take i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Take_Take_Type.t_take i)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/take.rs" 64 12 64 88] N0.n self = N0.n o + Seq.length visited /\ Produces0.produces (Iter0.iter self) visited (Iter0.iter o)
  val produces (self : Core_Iter_Adapters_Take_Take_Type.t_take i) (visited : Seq.seq Item0.item) (o : Core_Iter_Adapters_Take_Take_Type.t_take i) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Take_Impl0_IterMut_Stub
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed i
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)
  function iter_mut (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : borrowed i
end
module CreusotContracts_Std1_Iter_Take_Impl0_IterMut_Interface
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed i
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)
  function iter_mut (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : borrowed i
  val iter_mut (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : borrowed i
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 21 26 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/take.rs" 25 14 25 68] Iter0.iter ( * self) =  * result /\ Iter0.iter ( ^ self) =  ^ result }
    ensures { [#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 4 26 36] Inv1.inv result }
    ensures { result = iter_mut self }
    
  axiom iter_mut_spec : forall self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i) . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 21 26 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 4 26 36] Inv1.inv (iter_mut self)) && ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 25 14 25 68] Iter0.iter ( * self) =  * iter_mut self /\ Iter0.iter ( ^ self) =  ^ iter_mut self)
end
module CreusotContracts_Std1_Iter_Take_Impl0_IterMut
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed i
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)
  function iter_mut (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : borrowed i
  val iter_mut (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : borrowed i
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 21 26 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/take.rs" 25 14 25 68] Iter0.iter ( * self) =  * result /\ Iter0.iter ( ^ self) =  ^ result }
    ensures { [#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 4 26 36] Inv1.inv result }
    ensures { result = iter_mut self }
    
  axiom iter_mut_spec : forall self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i) . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 21 26 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 4 26 36] Inv1.inv (iter_mut self)) && ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 25 14 25 68] Iter0.iter ( * self) =  * iter_mut self /\ Iter0.iter ( ^ self) =  ^ iter_mut self)
end
module CreusotContracts_Std1_Iter_Take_Impl1_Completed_Stub
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate completed (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i))
end
module CreusotContracts_Std1_Iter_Take_Impl1_Completed_Interface
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate completed (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i))
  val completed (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Take_Impl1_Completed
  type i
  use prelude.Borrow
  use prelude.Int
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Stub as Iter0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Std1_Iter_Take_Impl0_IterMut_Stub as IterMut0 with
    type i = i,
    predicate Inv0.inv = Inv1.inv,
    function Iter0.iter = Iter0.iter,
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  clone CreusotContracts_Std1_Iter_Take_Impl0_N_Stub as N0 with
    type i = i,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate completed (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) =
    [#"../../../../../creusot-contracts/src/std/iter/take.rs" 55 12 56 92] N0.n ( * self) = 0 /\ Resolve0.resolve self \/ N0.n ( * self) > 0 /\ N0.n ( * self) = N0.n ( ^ self) + 1 /\ Completed0.completed (IterMut0.iter_mut self)
  val completed (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Take_Impl1_ProducesRefl_Stub
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  function produces_refl (a : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
end
module CreusotContracts_Std1_Iter_Take_Impl1_ProducesRefl_Interface
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  function produces_refl (a : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
  val produces_refl (a : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 71 21 71 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/take.rs" 70 14 70 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Iter_Adapters_Take_Take_Type.t_take i . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 71 21 71 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 70 14 70 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Take_Impl1_ProducesRefl
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  function produces_refl (a : Core_Iter_Adapters_Take_Take_Type.t_take i) : () =
    [#"../../../../../creusot-contracts/src/std/iter/take.rs" 68 4 68 10] ()
  val produces_refl (a : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 71 21 71 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/take.rs" 70 14 70 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Iter_Adapters_Take_Take_Type.t_take i . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 71 21 71 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 70 14 70 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Take_Impl1_ProducesTrans_Stub
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  clone CreusotContracts_Std1_Iter_Take_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans (a : Core_Iter_Adapters_Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    
end
module CreusotContracts_Std1_Iter_Take_Impl1_ProducesTrans_Interface
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  clone CreusotContracts_Std1_Iter_Take_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans (a : Core_Iter_Adapters_Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    
  val produces_trans (a : Core_Iter_Adapters_Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 75 15 75 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 76 15 76 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 22 78 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 31 78 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 52 78 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 61 78 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 82 78 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/take.rs" 77 14 77 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Iter_Adapters_Take_Take_Type.t_take i, ab : Seq.seq Item0.item, b : Core_Iter_Adapters_Take_Take_Type.t_take i, bc : Seq.seq Item0.item, c : Core_Iter_Adapters_Take_Take_Type.t_take i . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 75 15 75 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 76 15 76 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 22 78 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 31 78 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 52 78 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 61 78 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 82 78 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 77 14 77 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Take_Impl1_ProducesTrans
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  clone CreusotContracts_Std1_Iter_Take_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans (a : Core_Iter_Adapters_Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/take.rs" 73 4 73 10] ()
  val produces_trans (a : Core_Iter_Adapters_Take_Take_Type.t_take i) (ab : Seq.seq Item0.item) (b : Core_Iter_Adapters_Take_Take_Type.t_take i) (bc : Seq.seq Item0.item) (c : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 75 15 75 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 76 15 76 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 22 78 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 31 78 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 52 78 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 61 78 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 82 78 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/take.rs" 77 14 77 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Iter_Adapters_Take_Take_Type.t_take i, ab : Seq.seq Item0.item, b : Core_Iter_Adapters_Take_Take_Type.t_take i, bc : Seq.seq Item0.item, c : Core_Iter_Adapters_Take_Take_Type.t_take i . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 75 15 75 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 76 15 76 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 22 78 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 31 78 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 52 78 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 61 78 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 82 78 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 77 14 77 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl (a : self) : ()
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl (a : self) : ()
  val produces_refl (a : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl (a : self) : ()
  val produces_refl (a : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
  val produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
  val produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C03StdIterators_SkipTake_Interface
  type i
  use prelude.Int
  use prelude.UIntSize
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  val skip_take [#"../03_std_iterators.rs" 35 0 35 48] (iter : i) (n : usize) : ()
    requires {[#"../03_std_iterators.rs" 35 30 35 34] Inv0.inv iter}
    
end
module C03StdIterators_SkipTake
  type i
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = borrowed i,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = i
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces2 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Interface as ProducesTrans2 with
    type self = i,
    predicate Produces0.produces = Produces2.produces,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv6.inv,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Interface as ProducesRefl2 with
    type self = i,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces2.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed2 with
    type self = i
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  clone CreusotContracts_Std1_Iter_Take_Impl0_Iter_Interface as Iter0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)
  clone CreusotContracts_Std1_Iter_Take_Impl0_IterMut_Interface as IterMut0 with
    type i = i,
    predicate Inv0.inv = Inv5.inv,
    function Iter0.iter = Iter0.iter,
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Iter_Take_Impl0_N_Interface as N0 with
    type i = i,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Iter_Take_Impl1_Produces as Produces1 with
    type i = i,
    type Item0.item = Item0.item,
    function N0.n = N0.n,
    function Iter0.iter = Iter0.iter,
    predicate Produces0.produces = Produces2.produces,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Iter_Take_Impl1_ProducesTrans_Interface as ProducesTrans1 with
    type i = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv6.inv,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_Take_Impl1_ProducesRefl_Interface as ProducesRefl1 with
    type i = i,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Seq.seq Item0.item,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = i
  clone CreusotContracts_Std1_Iter_Take_Impl1_Completed as Completed1 with
    type i = i,
    function N0.n = N0.n,
    predicate Resolve0.resolve = Resolve5.resolve,
    function IterMut0.iter_mut = IterMut0.iter_mut,
    predicate Completed0.completed = Completed2.completed,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv5.inv,
    function Iter0.iter = Iter0.iter,
    predicate Inv2.inv = Inv7.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = Item0.item
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)
  clone CreusotContracts_Std1_Iter_Skip_Impl0_Iter_Interface as Iter1 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i
  clone CreusotContracts_Std1_Iter_Skip_Impl0_N_Interface as N1 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Produces as Produces0 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    type Item0.item = Item0.item,
    function N0.n = N1.n,
    predicate Inv0.inv = Inv6.inv,
    function Iter0.iter = Iter1.iter,
    predicate Produces0.produces = Produces1.produces,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Inv1.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Iter_Skip_Impl1_ProducesTrans_Interface as ProducesTrans0 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv6.inv,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_Skip_Impl1_ProducesRefl_Interface as ProducesRefl0 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Core_Iter_Adapters_Take_Take_Type.t_take i,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = i,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Option_Option_Type.t_option Item0.item,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Take_Impl2_Resolve as Resolve2 with
    type i = i,
    function Iter0.iter = Iter0.iter,
    predicate Resolve0.resolve = Resolve4.resolve
  clone CreusotContracts_Std1_Iter_Skip_Impl1_Completed as Completed0 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    function N0.n = N1.n,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv6.inv,
    function Iter0.iter = Iter1.iter,
    predicate Produces0.produces = Produces1.produces,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Completed0.completed = Completed1.completed,
    predicate Inv2.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Std1_Iter_Skip_Impl2_Resolve as Resolve0 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    function Iter0.iter = Iter1.iter,
    predicate Resolve0.resolve = Resolve2.resolve
  clone Core_Iter_Adapters_Skip_Impl1_Next_Interface as Next0 with
    type i = Core_Iter_Adapters_Take_Take_Type.t_take i,
    predicate Inv0.inv = Inv4.inv,
    type Item0.item = Item0.item,
    type Item1.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv1.inv
  clone Core_Iter_Traits_Iterator_Iterator_Skip_Interface as Skip0 with
    type self = Core_Iter_Adapters_Take_Take_Type.t_take i,
    predicate Inv0.inv = Inv3.inv,
    function Iter0.iter = Iter1.iter,
    function N0.n = N1.n,
    predicate Inv1.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone Core_Iter_Traits_Iterator_Iterator_Take_Interface as Take0 with
    type self = i,
    predicate Inv0.inv = Inv2.inv,
    function Iter0.iter = Iter0.iter,
    function N0.n = N0.n,
    predicate Inv1.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX'
  let rec cfg skip_take [#"../03_std_iterators.rs" 35 0 35 48] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) (n : usize) : ()
    requires {[#"../03_std_iterators.rs" 35 30 35 34] Inv2.inv iter}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter : i = iter;
  var n : usize = n;
  var res : Core_Option_Option_Type.t_option Item0.item;
  var _4 : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i));
  var _5 : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i);
  var _6 : Core_Iter_Adapters_Take_Take_Type.t_take i;
  {
    goto BB0
  }
  BB0 {
    _6 <- ([#"../03_std_iterators.rs" 36 14 36 26] Take0.take iter n);
    iter <- any i;
    goto BB1
  }
  BB1 {
    _5 <- ([#"../03_std_iterators.rs" 36 14 36 34] Skip0.skip _6 n);
    _6 <- any Core_Iter_Adapters_Take_Take_Type.t_take i;
    goto BB2
  }
  BB2 {
    _4 <- Borrow.borrow_mut _5;
    _5 <-  ^ _4;
    assume { Inv0.inv ( ^ _4) };
    res <- ([#"../03_std_iterators.rs" 36 14 36 41] Next0.next _4);
    _4 <- any borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i));
    goto BB3
  }
  BB3 {
    assert { [@expl:type invariant] Inv0.inv _5 };
    assume { Resolve0.resolve _5 };
    assert { [@expl:type invariant] Inv1.inv res };
    assume { Resolve1.resolve res };
    goto BB4
  }
  BB4 {
    assert { [@expl:assertion] [#"../03_std_iterators.rs" 38 20 38 31] res = Core_Option_Option_Type.C_None };
    goto BB5
  }
  BB5 {
    _0 <- ();
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use prelude.Ghost
  use seq.Seq
  type t_mapinv 'i 'b 'f =
    | C_MapInv 'i 'f (Ghost.ghost_ty (Seq.seq 'b))
    
  let function mapinv_iter (self : t_mapinv 'i 'b 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MapInv a _ _ -> a
      end
  let function mapinv_func (self : t_mapinv 'i 'b 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MapInv _ a _ -> a
      end
  let function mapinv_produced (self : t_mapinv 'i 'b 'f) : Ghost.ghost_ty (Seq.seq 'b)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MapInv _ _ a -> a
      end
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2 : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module C03StdIterators_Counter_Closure0_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  type c03stditerators_counter_closure0  =
    | C03StdIterators_Counter_Closure0 (borrowed usize)
    
end
module C03StdIterators_Counter_Closure0_Interface
  use export C03StdIterators_Counter_Closure0_Type
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = usize
  clone Core_Num_Impl11_Max_Stub as Max0
  let function field_0 [#"../03_std_iterators.rs" 48 12 48 91] (self : c03stditerators_counter_closure0) : borrowed usize
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../03_std_iterators.rs" 1 0 1 0] let C03StdIterators_Counter_Closure0 a = self in a
  predicate resolve [#"../03_std_iterators.rs" 48 12 48 91] (_1 : c03stditerators_counter_closure0) =
    [#"../03_std_iterators.rs" 1 0 1 0] Resolve0.resolve (field_0 _1)
  predicate unnest [#"../03_std_iterators.rs" 48 12 48 91] (self : c03stditerators_counter_closure0) (_2 : c03stditerators_counter_closure0)
    
   =
    [#"../03_std_iterators.rs" 1 0 1 0]  ^ field_0 _2 =  ^ field_0 self
  predicate precondition [#"../03_std_iterators.rs" 48 12 48 91] (self : c03stditerators_counter_closure0) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../03_std_iterators.rs" 47 23 47 65] let (x, _prod) = args in UIntSize.to_int ( * field_0 self) = Seq.length (Ghost.inner _prod) /\  * field_0 self < Max0.mAX'
  predicate postcondition_once [#"../03_std_iterators.rs" 48 12 48 91] (self : c03stditerators_counter_closure0) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../03_std_iterators.rs" 48 22 48 89] let (x, _prod) = args in UIntSize.to_int ( ^ field_0 self) = UIntSize.to_int ( * field_0 self) + 1 /\ UIntSize.to_int ( ^ field_0 self) = Seq.length (Ghost.inner _prod) + 1 /\ result = x
  predicate postcondition_mut [#"../03_std_iterators.rs" 48 12 48 91] (self : borrowed c03stditerators_counter_closure0) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../03_std_iterators.rs" 1 0 1 0] (let (x, _prod) = args in UIntSize.to_int ( * field_0 ( ^ self)) = UIntSize.to_int ( * field_0 ( * self)) + 1 /\ UIntSize.to_int ( * field_0 ( ^ self)) = Seq.length (Ghost.inner _prod) + 1 /\ result = x) /\ unnest ( * self) ( ^ self)
  val c03StdIterators_Counter_Closure0 [#"../03_std_iterators.rs" 48 12 48 91] (_1 : borrowed c03stditerators_counter_closure0) (x : uint32) (_prod : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../03_std_iterators.rs" 47 23 47 65] UIntSize.to_int ( * field_0 ( * _1)) = Seq.length (Ghost.inner _prod) /\  * field_0 ( * _1) < Max0.mAX'}
    ensures { [#"../03_std_iterators.rs" 48 22 48 89] UIntSize.to_int ( * field_0 ( ^ _1)) = UIntSize.to_int ( * field_0 ( * _1)) + 1 /\ UIntSize.to_int ( * field_0 ( ^ _1)) = Seq.length (Ghost.inner _prod) + 1 /\ result = x }
    ensures { unnest ( * _1) ( ^ _1) }
    
end
module C03StdIterators_Counter_Closure0
  use export C03StdIterators_Counter_Closure0_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = usize
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = c03stditerators_counter_closure0
  let function field_0 [#"../03_std_iterators.rs" 48 12 48 91] (self : c03stditerators_counter_closure0) : borrowed usize
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../03_std_iterators.rs" 1 0 1 0] let C03StdIterators_Counter_Closure0 a = self in a
  predicate resolve [#"../03_std_iterators.rs" 48 12 48 91] (_1 : c03stditerators_counter_closure0) =
    [#"../03_std_iterators.rs" 1 0 1 0] Resolve1.resolve (field_0 _1)
  predicate unnest [#"../03_std_iterators.rs" 48 12 48 91] (self : c03stditerators_counter_closure0) (_2 : c03stditerators_counter_closure0)
    
   =
    [#"../03_std_iterators.rs" 1 0 1 0]  ^ field_0 _2 =  ^ field_0 self
  predicate precondition [#"../03_std_iterators.rs" 48 12 48 91] (self : c03stditerators_counter_closure0) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32)))
    
   =
    [#"../03_std_iterators.rs" 47 23 47 65] let (x, _prod) = args in UIntSize.to_int ( * field_0 self) = Seq.length (Ghost.inner _prod) /\  * field_0 self < Max0.mAX'
  predicate postcondition_once [#"../03_std_iterators.rs" 48 12 48 91] (self : c03stditerators_counter_closure0) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../03_std_iterators.rs" 48 22 48 89] let (x, _prod) = args in UIntSize.to_int ( ^ field_0 self) = UIntSize.to_int ( * field_0 self) + 1 /\ UIntSize.to_int ( ^ field_0 self) = Seq.length (Ghost.inner _prod) + 1 /\ result = x
  predicate postcondition_mut [#"../03_std_iterators.rs" 48 12 48 91] (self : borrowed c03stditerators_counter_closure0) (args : (uint32, Ghost.ghost_ty (Seq.seq uint32))) (result : uint32)
    
   =
    [#"../03_std_iterators.rs" 1 0 1 0] (let (x, _prod) = args in UIntSize.to_int ( * field_0 ( ^ self)) = UIntSize.to_int ( * field_0 ( * self)) + 1 /\ UIntSize.to_int ( * field_0 ( ^ self)) = Seq.length (Ghost.inner _prod) + 1 /\ result = x) /\ unnest ( * self) ( ^ self)
  let rec cfg c03StdIterators_Counter_Closure0 [#"../03_std_iterators.rs" 48 12 48 91] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed c03stditerators_counter_closure0) (x : uint32) (_prod : Ghost.ghost_ty (Seq.seq uint32)) : uint32
    requires {[#"../03_std_iterators.rs" 47 23 47 65] UIntSize.to_int ( * field_0 ( * _1)) = Seq.length (Ghost.inner _prod) /\  * field_0 ( * _1) < Max0.mAX'}
    ensures { [#"../03_std_iterators.rs" 48 22 48 89] UIntSize.to_int ( * field_0 ( ^ _1)) = UIntSize.to_int ( * field_0 ( * _1)) + 1 /\ UIntSize.to_int ( * field_0 ( ^ _1)) = Seq.length (Ghost.inner _prod) + 1 /\ result = x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : borrowed c03stditerators_counter_closure0 = _1;
  var x : uint32 = x;
  var res : uint32;
  var res1 : uint32;
  {
    goto BB0
  }
  BB0 {
    _1 <- { _1 with current = (let C03StdIterators_Counter_Closure0 a =  * _1 in C03StdIterators_Counter_Closure0 ({ (field_0 ( * _1)) with current = ([#"../03_std_iterators.rs" 50 16 50 24]  * field_0 ( * _1) + ([#"../03_std_iterators.rs" 50 23 50 24] (1 : usize))) })) };
    assume { Resolve0.resolve _1 };
    res1 <- x;
    res <- res1;
    _0 <- res;
    return _0
  }
  
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve
  type t
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (IndexLogic0.index_logic self i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module Alloc_Vec_Impl8_Deref_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  val deref (self : Alloc_Vec_Vec_Type.t_vec t a) : slice t
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 147 26 147 42] ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    ensures { Inv1.inv result }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2 : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Stub
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  predicate next_precondition (iter : i) (func : f) (produced : Seq.seq Item0.item)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Interface
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  predicate next_precondition (iter : i) (func : f) (produced : Seq.seq Item0.item)
  val next_precondition (iter : i) (func : f) (produced : Seq.seq Item0.item) : bool
    ensures { result = next_precondition iter func produced }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  predicate next_precondition (iter : i) (func : f) (produced : Seq.seq Item0.item) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 112 8 116 9] forall i : i . forall e : Item0.item . Inv0.inv i -> Inv1.inv e -> Produces0.produces iter (Seq.singleton e) i -> Precondition0.precondition func (e, Ghost.new produced)
  val next_precondition (iter : i) (func : f) (produced : Seq.seq Item0.item) : bool
    ensures { result = next_precondition iter func produced }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub
  type i
  type b
  type f
  predicate preservation (iter : i) (func : f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Interface
  type i
  type b
  type f
  predicate preservation (iter : i) (func : f)
  val preservation (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv4 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  predicate preservation (iter : i) (func : f) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 135 8 142 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Inv0.inv i -> Inv1.inv b -> Inv2.inv f -> Inv3.inv e2 -> Inv3.inv e1 -> Inv4.inv s -> Unnest0.unnest func ( * f) -> Produces0.produces iter (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1, Ghost.new s) -> PostconditionMut0.postcondition_mut f (e1, Ghost.new s) b -> Precondition0.precondition ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Stub
  type i
  type b
  type f
  predicate reinitialize (_1 : ())
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Interface
  type i
  type b
  type f
  predicate reinitialize (_1 : ())
  val reinitialize (_1 : ()) : bool
    ensures { result = reinitialize _1 }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  predicate reinitialize (_1 : ()) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 148 8 153 9] forall func : f . forall iter : borrowed i . Inv0.inv func -> Inv1.inv iter -> Completed0.completed iter -> NextPrecondition0.next_precondition ( ^ iter) func (Seq.empty ) /\ Preservation0.preservation ( ^ iter) func
  val reinitialize (_1 : ()) : bool
    ensures { result = reinitialize _1 }
    
end
module CreusotContracts_Std1_Iter_Iterator_MapInv_Interface
  type self
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  use prelude.Ghost
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv self Item0.item f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = f
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = self,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Stub as Reinitialize0 with
    type i = self,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val map_inv (self : self) (func : f) : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv self Item0.item f
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 43 4 43 138] forall i2 : self . forall e : Item0.item . Inv0.inv i2 -> Inv1.inv e -> Produces0.produces self (Seq.singleton e) i2 -> Precondition0.precondition func (e, Ghost.new (Seq.empty ))}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 44 15 44 51] Reinitialize0.reinitialize ()}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 45 15 45 70] Preservation0.preservation self func}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 47 21 47 25] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 47 27 47 31] Inv2.inv func}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 46 14 46 85] result = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv self func (Ghost.new (Seq.empty )) }
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 47 4 50 58] Inv3.inv result }
    
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterPost_Stub
  type self
  type a
  use seq.Seq
  predicate from_iter_post (prod : Seq.seq a) (res : self)
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterPost_Interface
  type self
  type a
  use seq.Seq
  predicate from_iter_post (prod : Seq.seq a) (res : self)
  val from_iter_post (prod : Seq.seq a) (res : self) : bool
    ensures { result = from_iter_post prod res }
    
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterPost
  type self
  type a
  use seq.Seq
  predicate from_iter_post (prod : Seq.seq a) (res : self)
  val from_iter_post (prod : Seq.seq a) (res : self) : bool
    ensures { result = from_iter_post prod res }
    
end
module Core_Iter_Traits_Iterator_Iterator_Collect_Interface
  type self
  type b
  use seq.Seq
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = b
  clone CreusotContracts_Std1_Iter_FromIterator_FromIterPost_Stub as FromIterPost0 with
    type self = b,
    type a = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = self
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed self
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val collect (self : self) : b
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 130 16 131 84] exists prod : Seq.seq Item0.item . exists done_ : borrowed self . Inv1.inv prod /\ Inv2.inv done_ /\ Resolve0.resolve ( ^ done_) /\ Completed0.completed done_ /\ Produces0.produces self prod ( * done_) /\ FromIterPost0.from_iter_post prod result }
    ensures { Inv3.inv result }
    
end
module CreusotContracts_Std1_Iter_MapInv_MapInv_Type_Inv
  type i
  type b
  type f
  use prelude.Ghost
  use prelude.Seq
  use prelude.Int
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f
  axiom inv_t_mapinv [@rewrite] : forall self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f . Inv0.inv self = ((Inv1.inv (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) /\ Inv2.inv (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)) /\ (forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) -> Inv3.inv (Seq.get (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) i)))
end
module TyInv_Borrow
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  axiom inv_borrow [@rewrite] : forall self : borrowed t . Inv0.inv self = (Inv1.inv ( * self) /\ Inv1.inv ( ^ self))
end
module CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve_Stub
  type i
  type b
  type f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve_Interface
  type i
  type b
  type f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f)
  val resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve
  type i
  type b
  type f
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = f
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 56 4 56 16] Resolve0.resolve (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) /\ Resolve1.resolve (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
  val resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Completed_Stub
  type i
  type b
  type f
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f))
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Completed_Interface
  type i
  type b
  type f
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f))
  val completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Completed
  type i
  type b
  type f
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 15 8 18 9] Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced ( ^ self)) = Seq.empty  /\ Completed0.completed {current = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( * self); final = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( ^ self)} /\ CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( * self) = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( ^ self)
  val completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Interface
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
    
  val produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : bool
    ensures { result = produces self visited succ }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Produces
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  use prelude.Borrow
  use prelude.Int
  use seq_ext.SeqExt
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (borrowed f)
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 37 8 49 9] Unnest0.unnest (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ) /\ (exists s : Seq.seq Item0.item . Inv0.inv s /\ Seq.length s = Seq.length visited /\ Produces0.produces (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) s (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter succ) /\ Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced succ) = Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s /\ (exists fs : Seq.seq (borrowed f) . Inv1.inv fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    else
       * Seq.get fs 0 = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self /\  ^ Seq.get fs (Seq.length visited - 1) = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Unnest0.unnest (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) ( * Seq.get fs i) /\ Precondition0.precondition ( * Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i))) /\ PostconditionMut0.postcondition_mut (Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : bool
    ensures { result = produces self visited succ }
    
end
module CreusotContracts_Std1_Vec_Impl9_FromIterPost_Stub
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl9_FromIterPost_Interface
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = from_iter_post prod res }
    
end
module CreusotContracts_Std1_Vec_Impl9_FromIterPost
  type t
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  predicate from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 258 20 258 32] prod = ShallowModel0.shallow_model res
  val from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = from_iter_post prod res }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl_Stub
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f
  function produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl_Interface
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f
  function produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
  val produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f
  function produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : () =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 21 4 21 10] ()
  val produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans_Stub
  type i
  type b
  type f
  use seq.Seq
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans_Interface
  type i
  type b
  type f
  use seq.Seq
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    
  val produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, ab : Seq.seq b, b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, bc : Seq.seq b, c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans
  type i
  type b
  type f
  use seq.Seq
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 26 4 26 10] ()
  val produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, ab : Seq.seq b, b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, bc : Seq.seq b, c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C03StdIterators_Counter_Interface
  use prelude.Int
  use prelude.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val counter [#"../03_std_iterators.rs" 41 0 41 27] (v : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : ()
    
end
module C03StdIterators_Counter
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt32
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Invariant_Inv_Interface as Inv14 with
    type t = slice uint32
  clone TyInv_Trivial as TyInv_Trivial12 with
    type t = slice uint32,
    predicate Inv0.inv = Inv14.inv,
    axiom .
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = usize
  clone Core_Num_Impl11_Max as Max0
  clone C03StdIterators_Counter_Closure0_Interface as Closure00 with
    val Max0.mAX' = Max0.mAX',
    predicate Resolve0.resolve = Resolve1.resolve
  clone CreusotContracts_Invariant_Inv_Interface as Inv13 with
    type t = Seq.seq (borrowed Closure00.c03stditerators_counter_closure0)
  clone TyInv_Trivial as TyInv_Trivial11 with
    type t = Seq.seq (borrowed Closure00.c03stditerators_counter_closure0),
    predicate Inv0.inv = Inv13.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = borrowed Closure00.c03stditerators_counter_closure0
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = borrowed Closure00.c03stditerators_counter_closure0,
    predicate Inv0.inv = Inv12.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = uint32
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = uint32,
    predicate Inv0.inv = Inv11.inv,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface as ShallowModel3 with
    type t = uint32
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel5 with
    type t = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type ShallowModelTy0.shallowModelTy = slice uint32,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = Core_Slice_Iter_Iter_Type.t_iter uint32
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32),
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Seq.seq uint32
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Seq.seq uint32,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv8.inv,
    axiom .
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Seq.seq uint32
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 Closure00.c03stditerators_counter_closure0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel4 with
    type t = uint32,
    predicate Inv0.inv = Inv14.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic as IndexLogic1 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Inv0.inv = Inv14.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel1 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = slice uint32
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface as ToRefSeq0 with
    type t = uint32,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Inv1.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl14_Produces as Produces0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Inv1.inv = Inv9.inv
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces as Produces1 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Unnest0.unnest = Closure00.unnest,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure00.postcondition_mut,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv9.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv13.inv
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans_Interface as ProducesTrans2 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv6.inv,
    type Item0.item = uint32,
    axiom .
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl_Interface as ProducesRefl2 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Inv0.inv = Inv5.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = uint32,
    axiom .
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve4 with
    type t = Core_Slice_Iter_Iter_Type.t_iter uint32
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 Closure00.c03stditerators_counter_closure0)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 Closure00.c03stditerators_counter_closure0,
    predicate Inv0.inv = Inv7.inv,
    predicate Inv1.inv = Inv5.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Seq.seq uint32,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = uint32
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Closure00.c03stditerators_counter_closure0
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Slice_Iter_Iter_Type.t_iter uint32
  clone CreusotContracts_Std1_Iter_MapInv_MapInv_Type_Inv as CreusotContracts_Std1_Iter_MapInv_MapInv_Type_Inv0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Inv2.inv = Inv4.inv,
    predicate Inv3.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Closure00.c03stditerators_counter_closure0,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition as NextPrecondition0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Precondition0.precondition = Closure00.precondition,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Std1_Slice_Impl14_Completed as Completed1 with
    type t = uint32,
    predicate Resolve0.resolve = Resolve5.resolve,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    predicate Inv0.inv = Inv14.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv
  clone CreusotContracts_Std1_Slice_Impl14_ProducesTrans as ProducesTrans1 with
    type t = uint32,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl14_ProducesRefl as ProducesRefl1 with
    type t = uint32,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = uint32,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Core_Slice_Iter_Iter_Type.t_iter uint32,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = slice uint32,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve3 with
    type t = uint32
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv8.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv8.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv
  clone CreusotContracts_Std1_Vec_Impl9_FromIterPost as FromIterPost0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv8.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Completed as Completed0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    type Item0.item = uint32,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve as Resolve2 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Resolve1.resolve = Closure00.resolve,
    predicate Resolve0.resolve = Resolve4.resolve
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation as Preservation0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Unnest0.unnest = Closure00.unnest,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure00.postcondition_mut,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv11.inv,
    predicate Inv2.inv = Inv12.inv,
    predicate Inv3.inv = Inv3.inv,
    predicate Inv4.inv = Inv9.inv,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize as Reinitialize0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv10.inv,
    predicate Completed0.completed = Completed1.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = uint32
  clone CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter uint32,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv9.inv,
    type Item0.item = uint32,
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = uint32,
    axiom .
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Inv0.inv = Inv8.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv
  clone Core_Iter_Traits_Iterator_Iterator_Collect_Interface as Collect0 with
    type self = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 Closure00.c03stditerators_counter_closure0,
    type b = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv5.inv,
    type Item0.item = uint32,
    predicate Inv1.inv = Inv6.inv,
    predicate Inv2.inv = Inv7.inv,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces1.produces,
    predicate FromIterPost0.from_iter_post = FromIterPost0.from_iter_post,
    predicate Inv3.inv = Inv8.inv
  clone CreusotContracts_Std1_Iter_Iterator_MapInv_Interface as MapInv0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type b = uint32,
    type f = Closure00.c03stditerators_counter_closure0,
    predicate Precondition0.precondition = Closure00.precondition,
    type Item0.item = uint32,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Inv2.inv = Inv4.inv,
    predicate Inv3.inv = Inv5.inv
  clone Core_Slice_Impl0_Iter_Interface as Iter0 with
    type t = uint32,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Alloc_Vec_Impl8_Deref_Interface as Deref0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate Inv1.inv = Inv1.inv
  let rec cfg counter [#"../03_std_iterators.rs" 41 0 41 27] [@cfg:stackify] [@cfg:subregion_analysis] (v : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) = v;
  var cnt : usize;
  var x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var _4 : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 Closure00.c03stditerators_counter_closure0;
  var _5 : Core_Slice_Iter_Iter_Type.t_iter uint32;
  var _7 : slice uint32;
  var _10 : borrowed usize;
  {
    goto BB0
  }
  BB0 {
    cnt <- ([#"../03_std_iterators.rs" 42 18 42 19] (0 : usize));
    _7 <- ([#"../03_std_iterators.rs" 44 22 45 15] Deref0.deref v);
    goto BB1
  }
  BB1 {
    _5 <- ([#"../03_std_iterators.rs" 44 22 45 15] Iter0.iter _7);
    goto BB2
  }
  BB2 {
    _10 <- Borrow.borrow_mut cnt;
    cnt <-  ^ _10;
    _4 <- ([#"../03_std_iterators.rs" 44 22 53 9] MapInv0.map_inv _5 (Closure00.C03StdIterators_Counter_Closure0 _10));
    _5 <- any Core_Slice_Iter_Iter_Type.t_iter uint32;
    _10 <- any borrowed usize;
    goto BB3
  }
  BB3 {
    x <- ([#"../03_std_iterators.rs" 44 22 54 18] Collect0.collect _4);
    _4 <- any CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 Closure00.c03stditerators_counter_closure0;
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve v };
    assume { Resolve0.resolve x };
    assert { [@expl:assertion] [#"../03_std_iterators.rs" 56 20 56 40] Seq.length (ShallowModel0.shallow_model x) = Seq.length (ShallowModel0.shallow_model v) };
    goto BB5
  }
  BB5 {
    assert { [@expl:assertion] [#"../03_std_iterators.rs" 57 4 57 35] Seq.(==) (ShallowModel0.shallow_model x) (ShallowModel0.shallow_model v) };
    goto BB6
  }
  BB6 {
    assert { [@expl:assertion] [#"../03_std_iterators.rs" 58 20 58 36] UIntSize.to_int cnt = Seq.length (ShallowModel0.shallow_model x) };
    goto BB7
  }
  BB7 {
    _0 <- ();
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use seq.Seq
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) - DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module Core_Iter_Range_Impl3_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option a
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = a
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range a)
  val next (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { Inv1.inv result }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : () =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 30 4 30 10] ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Stub
  type idx
  use seq.Seq
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface
  type idx
  use seq.Seq
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans
  type idx
  use seq.Seq
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 35 4 35 10] ()
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Num_Impl34_DeepModel_Stub
  use prelude.Int
  use prelude.IntSize
  function deep_model (self : isize) : int
end
module CreusotContracts_Std1_Num_Impl34_DeepModel_Interface
  use prelude.Int
  use prelude.IntSize
  function deep_model (self : isize) : int
  val deep_model (self : isize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl34_DeepModel
  use prelude.Int
  use prelude.IntSize
  function deep_model (self : isize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] IntSize.to_int self
  val deep_model (self : isize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] Resolve0.resolve self /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start ( * self)) >= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module C03StdIterators_SumRange_Interface
  use prelude.IntSize
  use prelude.Int
  val sum_range [#"../03_std_iterators.rs" 63 0 63 35] (n : isize) : isize
    requires {[#"../03_std_iterators.rs" 61 11 61 18] IntSize.to_int n >= 0}
    ensures { [#"../03_std_iterators.rs" 62 10 62 21] result = n }
    
end
module C03StdIterators_SumRange
  use prelude.Int
  use prelude.IntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Seq.seq isize
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Seq.seq isize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Option_Option_Type.t_option isize
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Core_Option_Option_Type.t_option isize,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range isize)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range isize),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use prelude.Int
  clone CreusotContracts_Std1_Num_Impl34_DeepModel as DeepModel0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range isize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed0 with
    type idx = isize,
    predicate Resolve0.resolve = Resolve0.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range isize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces0 with
    type idx = isize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface as ProducesTrans0 with
    type idx = isize,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface as ProducesRefl0 with
    type idx = isize,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Ops_Range_Range_Type.t_range isize,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Ops_Range_Range_Type.t_range isize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Ops_Range_Range_Type.t_range isize
  clone Core_Iter_Range_Impl3_Next_Interface as Next0 with
    type a = isize,
    predicate Inv0.inv = Inv1.inv,
    type Item0.item = isize,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv2.inv
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Ops_Range_Range_Type.t_range isize,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv0.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  let rec cfg sum_range [#"../03_std_iterators.rs" 63 0 63 35] [@cfg:stackify] [@cfg:subregion_analysis] (n : isize) : isize
    requires {[#"../03_std_iterators.rs" 61 11 61 18] IntSize.to_int n >= 0}
    ensures { [#"../03_std_iterators.rs" 62 10 62 21] result = n }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : isize;
  var n : isize = n;
  var i : isize;
  var iter : Core_Ops_Range_Range_Type.t_range isize;
  var iter_old : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range isize);
  var produced : Ghost.ghost_ty (Seq.seq isize);
  var _17 : Core_Option_Option_Type.t_option isize;
  var _18 : borrowed (Core_Ops_Range_Range_Type.t_range isize);
  var _19 : borrowed (Core_Ops_Range_Range_Type.t_range isize);
  var __creusot_proc_iter_elem : isize;
  var _22 : Ghost.ghost_ty (Seq.seq isize);
  {
    goto BB0
  }
  BB0 {
    i <- ([#"../03_std_iterators.rs" 64 16 64 17] (0 : isize));
    iter <- ([#"../03_std_iterators.rs" 65 4 65 48] IntoIter0.into_iter (Core_Ops_Range_Range_Type.C_Range ([#"../03_std_iterators.rs" 66 13 66 14] (0 : isize)) n));
    goto BB1
  }
  BB1 {
    iter_old <- ([#"../03_std_iterators.rs" 65 4 65 48] Ghost.new iter);
    goto BB2
  }
  BB2 {
    produced <- ([#"../03_std_iterators.rs" 65 4 65 48] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"../03_std_iterators.rs" 65 4 65 48] Inv0.inv iter };
    invariant { [#"../03_std_iterators.rs" 65 4 65 48] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../03_std_iterators.rs" 65 16 65 46] IntSize.to_int i = Seq.length (Ghost.inner produced) /\ i <= n };
    goto BB5
  }
  BB5 {
    _19 <- Borrow.borrow_mut iter;
    iter <-  ^ _19;
    _18 <- Borrow.borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _17 <- ([#"../03_std_iterators.rs" 65 4 65 48] Next0.next _18);
    _18 <- any borrowed (Core_Ops_Range_Range_Type.t_range isize);
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve _19 };
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB7 {
    _0 <- i;
    return _0
  }
  BB8 {
    goto BB10
  }
  BB9 {
    absurd
  }
  BB10 {
    __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _17;
    _22 <- ([#"../03_std_iterators.rs" 65 4 65 48] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB11
  }
  BB11 {
    produced <- _22;
    _22 <- any Ghost.ghost_ty (Seq.seq isize);
    i <- ([#"../03_std_iterators.rs" 67 8 67 14] i + ([#"../03_std_iterators.rs" 67 13 67 14] (1 : isize)));
    goto BB4
  }
  
end
module Core_Iter_Adapters_Enumerate_Enumerate_Type
  use prelude.Int
  use prelude.UIntSize
  type t_enumerate 'i =
    | C_Enumerate 'i usize
    
  let function enumerate_iter (self : t_enumerate 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Enumerate a _ -> a
      end
end
module CreusotContracts_Std1_Iter_Enumerate_Impl0_N_Stub
  type i
  use prelude.Int
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  function n (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : int
end
module CreusotContracts_Std1_Iter_Enumerate_Impl0_N_Interface
  type i
  use prelude.Int
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  function n (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : int
  val n (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : int
    ensures { result = n self }
    
end
module CreusotContracts_Std1_Iter_Enumerate_Impl0_N
  type i
  use prelude.Int
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  function n (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : int
  val n (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : int
    ensures { result = n self }
    
end
module CreusotContracts_Std1_Iter_Enumerate_Impl0_Iter_Stub
  type i
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  function iter (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : i
end
module CreusotContracts_Std1_Iter_Enumerate_Impl0_Iter_Interface
  type i
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  function iter (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : i
  val iter (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : i
    ensures { result = iter self }
    
end
module CreusotContracts_Std1_Iter_Enumerate_Impl0_Iter
  type i
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  function iter (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : i
  val iter (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : i
    ensures { result = iter self }
    
end
module CreusotContracts_Std1_Iter_Enumerate_Impl2_Produces_Stub
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  predicate produces (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i)
    
end
module CreusotContracts_Std1_Iter_Enumerate_Impl2_Produces_Interface
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  predicate produces (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i)
    
  val produces (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Enumerate_Impl2_Produces
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  clone CreusotContracts_Std1_Iter_Enumerate_Impl0_Iter_Stub as Iter0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Std1_Iter_Enumerate_Impl0_N_Stub as N0 with
    type i = i
  predicate produces (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 62 8 67 9] Seq.length visited = N0.n o - N0.n self /\ (exists s : Seq.seq Item0.item . Inv0.inv s /\ Produces0.produces (Iter0.iter self) s (Iter0.iter o) /\ Seq.length visited = Seq.length s /\ (forall i : int . 0 <= i /\ i < Seq.length s -> UIntSize.to_int (let (a, _) = Seq.get visited i in a) = N0.n self + i /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  val produces (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_Enumerate_Impl3_Resolve_Stub
  type i
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  predicate resolve (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i)
end
module CreusotContracts_Std1_Iter_Enumerate_Impl3_Resolve_Interface
  type i
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  predicate resolve (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i)
  val resolve (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_Enumerate_Impl3_Resolve
  type i
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = i
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  clone CreusotContracts_Std1_Iter_Enumerate_Impl0_Iter_Stub as Iter0 with
    type i = i
  predicate resolve (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) =
    [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 33 12 33 33] Resolve0.resolve (Iter0.iter self)
  val resolve (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : bool
    ensures { result = resolve self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Enumerate_Interface
  type self
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate self
  clone CreusotContracts_Std1_Iter_Enumerate_Impl0_N_Stub as N0 with
    type i = self
  clone CreusotContracts_Std1_Iter_Enumerate_Impl0_Iter_Stub as Iter0 with
    type i = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val enumerate (self : self) : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate self
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] Iter0.iter result = self /\ N0.n result = 0 }
    ensures { Inv1.inv result }
    
end
module Core_Iter_Adapters_Enumerate_Enumerate_Type_Inv
  type i
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i
  axiom inv_t_enumerate [@rewrite] : forall self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i . Inv0.inv self = Inv1.inv (Core_Iter_Adapters_Enumerate_Enumerate_Type.enumerate_iter self)
end
module Core_Iter_Adapters_Enumerate_Impl1_Next_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = i
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option (usize, Item1.item)
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i,
    type Item0.item = (usize, Item1.item)
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i)
  val next (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i)) : Core_Option_Option_Type.t_option (usize, Item1.item)
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { Inv1.inv result }
    
end
module CreusotContracts_Std1_Iter_Enumerate_Impl2_ProducesRefl_Stub
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  clone CreusotContracts_Std1_Iter_Enumerate_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i
  function produces_refl (a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : ()
end
module CreusotContracts_Std1_Iter_Enumerate_Impl2_ProducesRefl_Interface
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  clone CreusotContracts_Std1_Iter_Enumerate_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i
  function produces_refl (a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : ()
  val produces_refl (a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 73 21 73 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 72 14 72 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i . ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 73 21 73 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 72 14 72 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Enumerate_Impl2_ProducesRefl
  type i
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  clone CreusotContracts_Std1_Iter_Enumerate_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i
  function produces_refl (a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : () =
    [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 70 4 70 10] ()
  val produces_refl (a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 73 21 73 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 72 14 72 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i . ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 73 21 73 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 72 14 72 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Enumerate_Impl2_ProducesTrans_Stub
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (usize, Item0.item)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i
  clone CreusotContracts_Std1_Iter_Enumerate_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans (a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : ()
    
end
module CreusotContracts_Std1_Iter_Enumerate_Impl2_ProducesTrans_Interface
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (usize, Item0.item)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i
  clone CreusotContracts_Std1_Iter_Enumerate_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans (a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : ()
    
  val produces_trans (a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 77 15 77 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 78 15 78 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 22 80 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 31 80 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 52 80 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 61 80 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 82 80 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 79 14 79 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i, ab : Seq.seq (usize, Item0.item), b : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i, bc : Seq.seq (usize, Item0.item), c : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i . ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 77 15 77 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 78 15 78 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 22 80 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 31 80 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 52 80 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 61 80 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 82 80 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 79 14 79 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Enumerate_Impl2_ProducesTrans
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (usize, Item0.item)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i
  clone CreusotContracts_Std1_Iter_Enumerate_Impl2_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans (a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 75 4 75 10] ()
  val produces_trans (a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 77 15 77 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 78 15 78 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 22 80 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 31 80 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 52 80 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 61 80 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 82 80 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 79 14 79 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i, ab : Seq.seq (usize, Item0.item), b : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i, bc : Seq.seq (usize, Item0.item), c : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i . ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 77 15 77 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 78 15 78 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 22 80 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 31 80 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 52 80 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 61 80 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 82 80 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 79 14 79 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Enumerate_Impl2_Completed_Stub
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  predicate completed (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i))
end
module CreusotContracts_Std1_Iter_Enumerate_Impl2_Completed_Interface
  type i
  use prelude.Borrow
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  predicate completed (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i))
  val completed (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Enumerate_Impl2_Completed
  type i
  use prelude.Borrow
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = i
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  clone CreusotContracts_Std1_Iter_Enumerate_Impl0_Iter_Stub as Iter0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed i
  predicate completed (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i)) =
    [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 56 8 56 115] exists inner : borrowed i . Inv0.inv inner /\  * inner = Iter0.iter ( * self) /\  ^ inner = Iter0.iter ( ^ self) /\ Completed0.completed inner
  val completed (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate i)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module C03StdIterators_EnumerateRange_Interface
  val enumerate_range [#"../03_std_iterators.rs" 72 0 72 24] (_1 : ()) : ()
end
module C03StdIterators_EnumerateRange
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range usize)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range usize),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Seq.seq (usize, usize)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Seq.seq (usize, usize),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Core_Option_Option_Type.t_option (usize, usize)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Core_Option_Option_Type.t_option (usize, usize),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use prelude.Int
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed1 with
    type idx = usize,
    predicate Resolve0.resolve = Resolve5.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Seq.seq usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces1 with
    type idx = usize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface as ProducesTrans1 with
    type idx = usize,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface as ProducesRefl1 with
    type idx = usize,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve4 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve3 with
    type t = usize
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize),
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Enumerate_Impl0_Iter_Interface as Iter0 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Enumerate_Impl2_Completed as Completed0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv6.inv,
    function Iter0.iter = Iter0.iter,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Std1_Iter_Enumerate_Impl0_N_Interface as N0 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Enumerate_Impl2_Produces as Produces0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type Item0.item = usize,
    function N0.n = N0.n,
    predicate Inv0.inv = Inv3.inv,
    function Iter0.iter = Iter0.iter,
    predicate Produces0.produces = Produces1.produces
  clone CreusotContracts_Std1_Iter_Enumerate_Impl2_ProducesTrans_Interface as ProducesTrans0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv5.inv,
    type Item0.item = usize,
    axiom .
  clone CreusotContracts_Std1_Iter_Enumerate_Impl2_ProducesRefl_Interface as ProducesRefl0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = usize,
    axiom .
  clone Core_Iter_Adapters_Enumerate_Enumerate_Type_Inv as Core_Iter_Adapters_Enumerate_Enumerate_Type_Inv0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)
  clone CreusotContracts_Std1_Iter_Enumerate_Impl3_Resolve as Resolve2 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    function Iter0.iter = Iter0.iter,
    predicate Resolve0.resolve = Resolve4.resolve
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve1 with
    type t1 = usize,
    type t2 = usize,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)
  clone Core_Iter_Adapters_Enumerate_Impl1_Next_Interface as Next0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv1.inv,
    type Item0.item = (usize, usize),
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv4.inv,
    type Item1.item = usize
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic as IndexLogic0 with
    type t = (usize, usize)
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize),
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv0.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  clone Core_Iter_Traits_Iterator_Iterator_Enumerate_Interface as Enumerate0 with
    type self = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv2.inv,
    function Iter0.iter = Iter0.iter,
    function N0.n = N0.n,
    predicate Inv1.inv = Inv0.inv
  let rec cfg enumerate_range [#"../03_std_iterators.rs" 72 0 72 24] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize);
  var _2 : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize);
  var iter_old : Ghost.ghost_ty (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize));
  var produced : Ghost.ghost_ty (Seq.seq (usize, usize));
  var _12 : Core_Option_Option_Type.t_option (usize, usize);
  var _13 : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize));
  var _14 : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize));
  var __creusot_proc_iter_elem : (usize, usize);
  var _17 : Ghost.ghost_ty (Seq.seq (usize, usize));
  var ix : usize;
  var x : usize;
  var _21 : (usize, usize);
  {
    goto BB0
  }
  BB0 {
    _2 <- ([#"../03_std_iterators.rs" 74 19 74 38] Enumerate0.enumerate (Core_Ops_Range_Range_Type.C_Range ([#"../03_std_iterators.rs" 74 20 74 21] (0 : usize)) ([#"../03_std_iterators.rs" 74 23 74 25] (10 : usize))));
    goto BB1
  }
  BB1 {
    iter <- ([#"../03_std_iterators.rs" 73 4 73 96] IntoIter0.into_iter _2);
    _2 <- any Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize);
    goto BB2
  }
  BB2 {
    iter_old <- ([#"../03_std_iterators.rs" 73 4 73 96] Ghost.new iter);
    goto BB3
  }
  BB3 {
    produced <- ([#"../03_std_iterators.rs" 73 4 73 96] Ghost.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant { [#"../03_std_iterators.rs" 73 4 73 96] Inv0.inv iter };
    invariant { [#"../03_std_iterators.rs" 73 4 73 96] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../03_std_iterators.rs" 73 4 73 96] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner produced) -> (let (a, _) = IndexLogic0.index_logic produced i in a) = (let (_, a) = IndexLogic0.index_logic produced i in a) };
    goto BB6
  }
  BB6 {
    _14 <- Borrow.borrow_mut iter;
    iter <-  ^ _14;
    assume { Inv0.inv ( ^ _14) };
    _13 <- Borrow.borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    assume { Inv0.inv ( ^ _13) };
    _12 <- ([#"../03_std_iterators.rs" 73 4 73 96] Next0.next _13);
    _13 <- any borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize));
    goto BB7
  }
  BB7 {
    assert { [@expl:type invariant] Inv1.inv _14 };
    assume { Resolve0.resolve _14 };
    switch (_12)
      | Core_Option_Option_Type.C_None -> goto BB8
      | Core_Option_Option_Type.C_Some _ -> goto BB9
      end
  }
  BB8 {
    assert { [@expl:type invariant] Inv0.inv iter };
    assume { Resolve2.resolve iter };
    _0 <- ();
    return _0
  }
  BB9 {
    goto BB11
  }
  BB10 {
    assert { [@expl:type invariant] Inv0.inv iter };
    assume { Resolve2.resolve iter };
    absurd
  }
  BB11 {
    __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _12;
    _17 <- ([#"../03_std_iterators.rs" 73 4 73 96] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB12
  }
  BB12 {
    produced <- _17;
    _17 <- any Ghost.ghost_ty (Seq.seq (usize, usize));
    ix <- (let (a, _) = __creusot_proc_iter_elem in a);
    x <- (let (_, a) = __creusot_proc_iter_elem in a);
    assume { Resolve1.resolve __creusot_proc_iter_elem };
    _21 <- (ix, x);
    assume { Resolve1.resolve _21 };
    goto BB5
  }
  
end
module C03StdIterators_EquivRange_Stub
  type t
  use seq.Seq
  use prelude.Int
  predicate equiv_range [#"../03_std_iterators.rs" 80 0 80 65] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int)
end
module C03StdIterators_EquivRange_Interface
  type t
  use seq.Seq
  use prelude.Int
  predicate equiv_range [#"../03_std_iterators.rs" 80 0 80 65] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int)
  val equiv_range [#"../03_std_iterators.rs" 80 0 80 65] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) : bool
    ensures { result = equiv_range s1 s2 l u }
    
end
module C03StdIterators_EquivRange
  type t
  use seq.Seq
  use prelude.Int
  predicate equiv_range [#"../03_std_iterators.rs" 80 0 80 65] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) =
    [#"../03_std_iterators.rs" 81 4 83 5] forall i : int . l <= i /\ i < u -> Seq.get s1 i = Seq.get s2 i
  val equiv_range [#"../03_std_iterators.rs" 80 0 80 65] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) : bool
    ensures { result = equiv_range s1 s2 l u }
    
end
module C03StdIterators_EquivReverseRange_Stub
  type t
  use seq.Seq
  use prelude.Int
  predicate equiv_reverse_range [#"../03_std_iterators.rs" 87 0 87 81] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) (n : int)
    
end
module C03StdIterators_EquivReverseRange_Interface
  type t
  use seq.Seq
  use prelude.Int
  predicate equiv_reverse_range [#"../03_std_iterators.rs" 87 0 87 81] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) (n : int)
    
  val equiv_reverse_range [#"../03_std_iterators.rs" 87 0 87 81] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) (n : int) : bool
    ensures { result = equiv_reverse_range s1 s2 l u n }
    
end
module C03StdIterators_EquivReverseRange
  type t
  use seq.Seq
  use prelude.Int
  predicate equiv_reverse_range [#"../03_std_iterators.rs" 87 0 87 81] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) (n : int)
    
   =
    [#"../03_std_iterators.rs" 88 4 90 5] forall i : int . l <= i /\ i < u -> Seq.get s1 i = Seq.get s2 (n - i)
  val equiv_reverse_range [#"../03_std_iterators.rs" 87 0 87 81] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) (n : int) : bool
    ensures { result = equiv_reverse_range s1 s2 l u n }
    
end
module Core_Iter_Adapters_Zip_Zip_Type
  use prelude.Int
  use prelude.UIntSize
  type t_zip 'a 'b =
    | C_Zip 'a 'b usize usize usize
    
end
module CreusotContracts_Std1_Iter_Zip_Impl0_Itera_Stub
  type a
  type b
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  function itera (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : a
end
module CreusotContracts_Std1_Iter_Zip_Impl0_Itera_Interface
  type a
  type b
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  function itera (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : a
  val itera (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : a
    ensures { result = itera self }
    
end
module CreusotContracts_Std1_Iter_Zip_Impl0_Itera
  type a
  type b
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  function itera (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : a
  val itera (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : a
    ensures { result = itera self }
    
end
module CreusotContracts_Std1_Iter_Zip_Impl0_Iterb_Stub
  type a
  type b
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  function iterb (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : b
end
module CreusotContracts_Std1_Iter_Zip_Impl0_Iterb_Interface
  type a
  type b
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  function iterb (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : b
  val iterb (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : b
    ensures { result = iterb self }
    
end
module CreusotContracts_Std1_Iter_Zip_Impl0_Iterb
  type a
  type b
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  function iterb (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : b
  val iterb (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : b
    ensures { result = iterb self }
    
end
module CreusotContracts_Std1_Iter_Zip_Impl1_Produces_Stub
  type a
  type b
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = b
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = a
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  predicate produces (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (visited : Seq.seq (Item0.item, Item1.item)) (o : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b)
    
end
module CreusotContracts_Std1_Iter_Zip_Impl1_Produces_Interface
  type a
  type b
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = b
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = a
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  predicate produces (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (visited : Seq.seq (Item0.item, Item1.item)) (o : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b)
    
  val produces (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (visited : Seq.seq (Item0.item, Item1.item)) (o : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Zip_Impl1_Produces
  type a
  type b
  use seq.Seq
  use prelude.Int
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = a
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = b
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces1 with
    type self = b,
    type Item0.item = Item1.item
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  clone CreusotContracts_Std1_Iter_Zip_Impl0_Iterb_Stub as Iterb0 with
    type a = a,
    type b = b
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = a,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Zip_Impl0_Itera_Stub as Itera0 with
    type a = a,
    type b = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq Item1.item
  predicate produces (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (visited : Seq.seq (Item0.item, Item1.item)) (o : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 44 8 50 9] exists p2 : Seq.seq Item1.item . exists p1 : Seq.seq Item0.item . Inv0.inv p2 /\ Inv1.inv p1 /\ Seq.length p1 = Seq.length p2 /\ Seq.length p2 = Seq.length visited /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i)) /\ Produces0.produces (Itera0.itera self) p1 (Itera0.itera o) /\ Produces1.produces (Iterb0.iterb self) p2 (Iterb0.iterb o)
  val produces (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (visited : Seq.seq (Item0.item, Item1.item)) (o : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/ghost.rs" 26 20 26 48] ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  val len (self : slice t) : usize
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 231 0 327 1] Seq.length (ShallowModel0.shallow_model self) = UIntSize.to_int result }
    
end
module Core_Iter_Traits_Iterator_Iterator_Zip_Interface
  type self
  type u
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = u
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Core_Iter_Adapters_Zip_Zip_Type.t_zip self IntoIter0.intoIter
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = u,
    type IntoIter0.intoIter = IntoIter0.intoIter
  clone CreusotContracts_Std1_Iter_Zip_Impl0_Iterb_Stub as Iterb0 with
    type a = self,
    type b = IntoIter0.intoIter
  clone CreusotContracts_Std1_Iter_Zip_Impl0_Itera_Stub as Itera0 with
    type a = self,
    type b = IntoIter0.intoIter
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = u
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = u
  val zip (self : self) (other : u) : Core_Iter_Adapters_Zip_Zip_Type.t_zip self IntoIter0.intoIter
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 123 27 123 48] IntoIterPre0.into_iter_pre other}
    requires {Inv0.inv self}
    requires {Inv1.inv other}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] Itera0.itera result = self }
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 125 26 125 62] IntoIterPost0.into_iter_post other (Iterb0.iterb result) }
    ensures { Inv2.inv result }
    
end
module Core_Iter_Adapters_Zip_Impl1_Next_Interface
  type a
  type b
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item2 with
    type self = b
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option (Item1.item, Item2.item)
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Iter_Adapters_Zip_Zip_Type.t_zip a b,
    type Item0.item = (Item1.item, Item2.item)
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Iter_Adapters_Zip_Zip_Type.t_zip a b
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Iter_Adapters_Zip_Zip_Type.t_zip a b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip a b)
  val next (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip a b)) : Core_Option_Option_Type.t_option (Item1.item, Item2.item)
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { Inv1.inv result }
    
end
module Core_Slice_Impl0_Swap_Interface
  type t
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use seq.Permut
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val swap (self : borrowed (slice t)) (a : usize) (b : usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 240 19 240 35] UIntSize.to_int a < Seq.length (ShallowModel0.shallow_model self)}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 241 19 241 35] UIntSize.to_int b < Seq.length (ShallowModel0.shallow_model self)}
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 242 8 242 52] Permut.exchange (ShallowModel1.shallow_model ( ^ self)) (ShallowModel0.shallow_model self) (UIntSize.to_int a) (UIntSize.to_int b) }
    
end
module CreusotContracts_Std1_Iter_Zip_Impl1_ProducesRefl_Stub
  type a
  type b
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = b
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = a
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  clone CreusotContracts_Std1_Iter_Zip_Impl1_Produces_Stub as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Zip_Zip_Type.t_zip a b
  function produces_refl (a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : ()
end
module CreusotContracts_Std1_Iter_Zip_Impl1_ProducesRefl_Interface
  type a
  type b
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = b
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = a
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  clone CreusotContracts_Std1_Iter_Zip_Impl1_Produces_Stub as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Zip_Zip_Type.t_zip a b
  function produces_refl (a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : ()
  val produces_refl (a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 56 21 56 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 55 14 55 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b . ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 56 21 56 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 55 14 55 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Zip_Impl1_ProducesRefl
  type a
  type b
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = b
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = a
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  clone CreusotContracts_Std1_Iter_Zip_Impl1_Produces_Stub as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Zip_Zip_Type.t_zip a b
  function produces_refl (a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : () =
    [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 53 4 53 10] ()
  val produces_refl (a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 56 21 56 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 55 14 55 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b . ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 56 21 56 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 55 14 55 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Zip_Impl1_ProducesTrans_Stub
  type a
  type b
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = b
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = a
  use seq.Seq
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Item0.item, Item1.item)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Zip_Zip_Type.t_zip a b
  clone CreusotContracts_Std1_Iter_Zip_Impl1_Produces_Stub as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  function produces_trans (a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (ab : Seq.seq (Item0.item, Item1.item)) (b : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (bc : Seq.seq (Item0.item, Item1.item)) (c : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : ()
    
end
module CreusotContracts_Std1_Iter_Zip_Impl1_ProducesTrans_Interface
  type a
  type b
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = b
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = a
  use seq.Seq
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Item0.item, Item1.item)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Zip_Zip_Type.t_zip a b
  clone CreusotContracts_Std1_Iter_Zip_Impl1_Produces_Stub as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  function produces_trans (a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (ab : Seq.seq (Item0.item, Item1.item)) (b : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (bc : Seq.seq (Item0.item, Item1.item)) (c : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : ()
    
  val produces_trans (a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (ab : Seq.seq (Item0.item, Item1.item)) (b : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (bc : Seq.seq (Item0.item, Item1.item)) (c : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 60 15 60 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 61 15 61 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 22 63 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 31 63 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 52 63 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 61 63 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 82 63 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 62 14 62 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b, ab : Seq.seq (Item0.item, Item1.item), b : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b, bc : Seq.seq (Item0.item, Item1.item), c : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b . ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 60 15 60 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 61 15 61 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 22 63 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 31 63 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 52 63 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 61 63 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 82 63 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 62 14 62 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Zip_Impl1_ProducesTrans
  type a
  type b
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item1 with
    type self = b
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = a
  use seq.Seq
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Item0.item, Item1.item)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Iter_Adapters_Zip_Zip_Type.t_zip a b
  clone CreusotContracts_Std1_Iter_Zip_Impl1_Produces_Stub as Produces0 with
    type a = a,
    type b = b,
    type Item0.item = Item0.item,
    type Item1.item = Item1.item
  function produces_trans (a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (ab : Seq.seq (Item0.item, Item1.item)) (b : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (bc : Seq.seq (Item0.item, Item1.item)) (c : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 58 4 58 10] ()
  val produces_trans (a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (ab : Seq.seq (Item0.item, Item1.item)) (b : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) (bc : Seq.seq (Item0.item, Item1.item)) (c : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 60 15 60 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 61 15 61 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 22 63 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 31 63 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 52 63 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 61 63 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 82 63 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 62 14 62 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b, ab : Seq.seq (Item0.item, Item1.item), b : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b, bc : Seq.seq (Item0.item, Item1.item), c : Core_Iter_Adapters_Zip_Zip_Type.t_zip a b . ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 60 15 60 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 61 15 61 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 22 63 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 31 63 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 52 63 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 61 63 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 82 63 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 62 14 62 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Zip_Impl1_Completed_Stub
  type a
  type b
  use prelude.Borrow
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  predicate completed (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip a b))
end
module CreusotContracts_Std1_Iter_Zip_Impl1_Completed_Interface
  type a
  type b
  use prelude.Borrow
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  predicate completed (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip a b))
  val completed (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip a b)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Zip_Impl1_Completed
  type a
  type b
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed1 with
    type self = b
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = a,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Item0.item
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = b
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = a
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  clone CreusotContracts_Std1_Iter_Zip_Impl0_Iterb_Stub as Iterb0 with
    type a = a,
    type b = b
  clone CreusotContracts_Std1_Iter_Zip_Impl0_Itera_Stub as Itera0 with
    type a = a,
    type b = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed b
  predicate completed (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip a b)) =
    [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 31 8 38 9] exists b : borrowed b . exists a : borrowed a . Inv0.inv b /\ Inv1.inv a /\  * a = Itera0.itera ( * self) /\  * b = Iterb0.iterb ( * self) /\  ^ a = Itera0.itera ( ^ self) /\  ^ b = Iterb0.iterb ( ^ self) /\ (Completed0.completed a /\ Resolve0.resolve b \/ (exists x : Item0.item . Inv2.inv x /\ Produces0.produces ( * a) (Seq.singleton x) ( ^ a) /\ Resolve1.resolve x /\ Completed1.completed b))
  val completed (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip a b)) : bool
    ensures { result = completed self }
    
end
module C03StdIterators_MyReverse_Interface
  type t
  use prelude.Borrow
  use seq.Reverse
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  val my_reverse [#"../03_std_iterators.rs" 94 0 94 37] (slice : borrowed (slice t)) : ()
    requires {[#"../03_std_iterators.rs" 94 21 94 26] Inv0.inv slice}
    ensures { [#"../03_std_iterators.rs" 93 0 93 46] Seq.(==) (ShallowModel0.shallow_model ( ^ slice)) (Reverse.reverse (ShallowModel1.shallow_model slice)) }
    
end
module C03StdIterators_MyReverse
  type t
  use prelude.Ghost
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use seq.Reverse
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial12 with
    type t = usize,
    predicate Inv0.inv = Inv12.inv,
    axiom .
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range usize)
  clone TyInv_Trivial as TyInv_Trivial11 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range usize),
    predicate Inv0.inv = Inv11.inv,
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Seq.seq (usize, usize)
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = Seq.seq (usize, usize),
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Seq.seq t
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = Seq.seq t,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Core_Option_Option_Type.t_option (usize, usize)
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = Core_Option_Option_Type.t_option (usize, usize),
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  use prelude.Int
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed1 with
    type idx = usize,
    predicate Resolve0.resolve = Resolve5.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Seq.seq usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces1 with
    type idx = usize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface as ProducesTrans1 with
    type idx = usize,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface as ProducesRefl1 with
    type idx = usize,
    predicate Inv0.inv = Inv5.inv,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = slice t
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = slice t,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed (slice t)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed (slice t),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = slice t
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = slice t,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve4 with
    type t = usize
  clone CreusotContracts_Std1_Iter_Zip_Impl0_Iterb_Interface as Iterb0 with
    type a = Core_Ops_Range_Range_Type.t_range usize,
    type b = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Zip_Impl0_Itera_Interface as Itera0 with
    type a = Core_Ops_Range_Range_Type.t_range usize,
    type b = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Zip_Impl1_Completed as Completed0 with
    type a = Core_Ops_Range_Range_Type.t_range usize,
    type b = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv11.inv,
    predicate Inv1.inv = Inv11.inv,
    function Itera0.itera = Itera0.itera,
    function Iterb0.iterb = Iterb0.iterb,
    predicate Completed0.completed = Completed1.completed,
    predicate Completed1.completed = Completed1.completed,
    predicate Resolve0.resolve = Resolve5.resolve,
    type Item0.item = usize,
    predicate Inv2.inv = Inv12.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Resolve1.resolve = Resolve4.resolve
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = t,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel4 with
    type t = borrowed (slice t),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)
  clone CreusotContracts_Std1_Iter_Zip_Impl1_Produces as Produces0 with
    type a = Core_Ops_Range_Range_Type.t_range usize,
    type b = Core_Ops_Range_Range_Type.t_range usize,
    type Item0.item = usize,
    type Item1.item = usize,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv6.inv,
    function Itera0.itera = Itera0.itera,
    predicate Produces0.produces = Produces1.produces,
    predicate Produces1.produces = Produces1.produces,
    function Iterb0.iterb = Iterb0.iterb
  clone CreusotContracts_Std1_Iter_Zip_Impl1_ProducesTrans_Interface as ProducesTrans0 with
    type a = Core_Ops_Range_Range_Type.t_range usize,
    type b = Core_Ops_Range_Range_Type.t_range usize,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv10.inv,
    type Item0.item = usize,
    type Item1.item = usize,
    axiom .
  clone CreusotContracts_Std1_Iter_Zip_Impl1_ProducesRefl_Interface as ProducesRefl0 with
    type a = Core_Ops_Range_Range_Type.t_range usize,
    type b = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = usize,
    type Item1.item = usize,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost1 with
    type i = Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre1 with
    type i = Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Ghost.ghost_ty (borrowed (slice t))
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Ghost.ghost_ty (borrowed (slice t)),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel3 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = slice t
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv3.inv,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate Inv1.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv9.inv
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve2 with
    type t1 = usize,
    type t2 = usize,
    predicate Resolve0.resolve = Resolve4.resolve,
    predicate Resolve1.resolve = Resolve4.resolve
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)
  clone Core_Iter_Adapters_Zip_Impl1_Next_Interface as Next0 with
    type a = Core_Ops_Range_Range_Type.t_range usize,
    type b = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv7.inv,
    type Item0.item = (usize, usize),
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv8.inv,
    type Item1.item = usize,
    type Item2.item = usize
  clone C03StdIterators_EquivReverseRange as EquivReverseRange0 with
    type t = t
  clone C03StdIterators_EquivRange as EquivRange0 with
    type t = t
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel1 with
    type t = borrowed (slice t),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize),
    predicate IntoIterPre0.into_iter_pre = IntoIterPre1.into_iter_pre,
    predicate Inv0.inv = Inv1.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost1.into_iter_post
  clone Core_Iter_Traits_Iterator_Iterator_Zip_Interface as Zip0 with
    type self = Core_Ops_Range_Range_Type.t_range usize,
    type u = Core_Ops_Range_Range_Type.t_range usize,
    type IntoIter0.intoIter = Core_Ops_Range_Range_Type.t_range usize,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv5.inv,
    function Itera0.itera = Itera0.itera,
    function Iterb0.iterb = Iterb0.iterb,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post,
    predicate Inv2.inv = Inv1.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (slice t))
  clone Core_Slice_Impl0_Len_Interface as Len0 with
    type t = t,
    predicate Inv0.inv = Inv4.inv,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  let rec cfg my_reverse [#"../03_std_iterators.rs" 94 0 94 37] [@cfg:stackify] [@cfg:subregion_analysis] (slice : borrowed (slice t)) : ()
    requires {[#"../03_std_iterators.rs" 94 21 94 26] Inv3.inv slice}
    ensures { [#"../03_std_iterators.rs" 93 0 93 46] Seq.(==) (ShallowModel2.shallow_model ( ^ slice)) (Reverse.reverse (ShallowModel0.shallow_model slice)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var slice : borrowed (slice t) = slice;
  var n : usize;
  var old_v : Ghost.ghost_ty (borrowed (slice t));
  var iter : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize);
  var _8 : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize);
  var _12 : bool;
  var _16 : bool;
  var iter_old : Ghost.ghost_ty (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize));
  var produced : Ghost.ghost_ty (Seq.seq (usize, usize));
  var _28 : Core_Option_Option_Type.t_option (usize, usize);
  var _29 : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize));
  var _30 : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize));
  var __creusot_proc_iter_elem : (usize, usize);
  var _33 : Ghost.ghost_ty (Seq.seq (usize, usize));
  var i : usize;
  var j : usize;
  var _37 : ();
  var _38 : borrowed (slice t);
  {
    goto BB0
  }
  BB0 {
    n <- ([#"../03_std_iterators.rs" 95 12 95 23] Len0.len ( * slice));
    goto BB1
  }
  BB1 {
    old_v <- ([#"../03_std_iterators.rs" 96 33 96 46] Ghost.new slice);
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] Inv0.inv old_v };
    assume { Resolve0.resolve old_v };
    _12 <- ([#"../03_std_iterators.rs" 101 22 101 27] ([#"../03_std_iterators.rs" 101 26 101 27] (2 : usize)) = ([#"../03_std_iterators.rs" 101 22 101 27] (0 : usize)));
    assert { [@expl:division by zero] [#"../03_std_iterators.rs" 101 22 101 27] not _12 };
    goto BB3
  }
  BB3 {
    _16 <- ([#"../03_std_iterators.rs" 101 36 101 41] ([#"../03_std_iterators.rs" 101 40 101 41] (2 : usize)) = ([#"../03_std_iterators.rs" 101 36 101 41] (0 : usize)));
    assert { [@expl:division by zero] [#"../03_std_iterators.rs" 101 36 101 41] not _16 };
    goto BB4
  }
  BB4 {
    _8 <- ([#"../03_std_iterators.rs" 101 18 101 42] Zip0.zip (Core_Ops_Range_Range_Type.C_Range ([#"../03_std_iterators.rs" 101 19 101 20] (0 : usize)) ([#"../03_std_iterators.rs" 101 22 101 27] n / ([#"../03_std_iterators.rs" 101 26 101 27] (2 : usize)))) (Core_Ops_Range_Range_Type.C_Range ([#"../03_std_iterators.rs" 101 33 101 34] (0 : usize)) ([#"../03_std_iterators.rs" 101 36 101 41] n / ([#"../03_std_iterators.rs" 101 40 101 41] (2 : usize)))));
    goto BB5
  }
  BB5 {
    iter <- ([#"../03_std_iterators.rs" 97 4 97 36] IntoIter0.into_iter _8);
    _8 <- any Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize);
    goto BB6
  }
  BB6 {
    iter_old <- ([#"../03_std_iterators.rs" 97 4 97 36] Ghost.new iter);
    goto BB7
  }
  BB7 {
    produced <- ([#"../03_std_iterators.rs" 97 4 97 36] Ghost.new (Seq.empty ));
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    invariant { [#"../03_std_iterators.rs" 97 4 97 36] Inv1.inv iter };
    invariant { [#"../03_std_iterators.rs" 97 4 97 36] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../03_std_iterators.rs" 97 16 97 34] UIntSize.to_int n = Seq.length (ShallowModel0.shallow_model slice) };
    invariant { [#"../03_std_iterators.rs" 98 16 98 78] EquivRange0.equiv_range (ShallowModel0.shallow_model slice) (ShallowModel1.shallow_model old_v) (Seq.length (Ghost.inner produced)) (UIntSize.to_int n - Seq.length (Ghost.inner produced)) };
    invariant { [#"../03_std_iterators.rs" 99 16 99 76] EquivReverseRange0.equiv_reverse_range (ShallowModel0.shallow_model slice) (ShallowModel1.shallow_model old_v) 0 (Seq.length (Ghost.inner produced)) (UIntSize.to_int n - 1) };
    invariant { [#"../03_std_iterators.rs" 100 16 100 80] EquivReverseRange0.equiv_reverse_range (ShallowModel0.shallow_model slice) (ShallowModel1.shallow_model old_v) (UIntSize.to_int n - Seq.length (Ghost.inner produced)) (UIntSize.to_int n) (UIntSize.to_int n - 1) };
    goto BB10
  }
  BB10 {
    _30 <- Borrow.borrow_mut iter;
    iter <-  ^ _30;
    _29 <- Borrow.borrow_mut ( * _30);
    _30 <- { _30 with current = ( ^ _29) };
    _28 <- ([#"../03_std_iterators.rs" 97 4 97 36] Next0.next _29);
    _29 <- any borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize));
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve _30 };
    switch (_28)
      | Core_Option_Option_Type.C_None -> goto BB12
      | Core_Option_Option_Type.C_Some _ -> goto BB13
      end
  }
  BB12 {
    assert { [@expl:type invariant] Inv3.inv slice };
    assume { Resolve3.resolve slice };
    _0 <- ();
    return _0
  }
  BB13 {
    goto BB15
  }
  BB14 {
    assert { [@expl:type invariant] Inv3.inv slice };
    assume { Resolve3.resolve slice };
    absurd
  }
  BB15 {
    __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _28;
    _33 <- ([#"../03_std_iterators.rs" 97 4 97 36] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB16
  }
  BB16 {
    produced <- _33;
    _33 <- any Ghost.ghost_ty (Seq.seq (usize, usize));
    i <- (let (a, _) = __creusot_proc_iter_elem in a);
    j <- (let (_, a) = __creusot_proc_iter_elem in a);
    assume { Resolve2.resolve __creusot_proc_iter_elem };
    _38 <- Borrow.borrow_mut ( * slice);
    slice <- { slice with current = ( ^ _38) };
    assume { Inv2.inv ( ^ _38) };
    _37 <- ([#"../03_std_iterators.rs" 102 8 102 32] Swap0.swap _38 i ([#"../03_std_iterators.rs" 102 22 102 31] ([#"../03_std_iterators.rs" 102 22 102 27] n - j) - ([#"../03_std_iterators.rs" 102 30 102 31] (1 : usize))));
    _38 <- any borrowed (slice t);
    goto BB17
  }
  BB17 {
    goto BB9
  }
  
end
