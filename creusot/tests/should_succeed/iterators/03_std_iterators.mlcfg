
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C03StdIterators_SliceIter
  type t
  use seq.Seq
  predicate invariant7 (self : Seq.seq t)
  val invariant7 (self : Seq.seq t) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Seq.seq t)
  val inv7 (_x : Seq.seq t) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Seq.seq t . inv7 x = true
  use prelude.Slice
  predicate invariant6 (self : slice t)
  val invariant6 (self : slice t) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : slice t)
  val inv6 (_x : slice t) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : slice t . inv6 x = true
  predicate invariant5 (self : Seq.seq t)
  val invariant5 (self : Seq.seq t) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq t)
  val inv5 (_x : Seq.seq t) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq t . inv5 x = true
  predicate invariant4 (self : t)
  val invariant4 (self : t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : t)
  val inv4 (_x : t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : t . inv4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option t)
  val invariant3 (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option t)
  val inv3 (_x : Core_Option_Option_Type.t_option t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option t . inv3 x = true
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  use seq.Seq
  use prelude.UIntSize
  use prelude.Slice
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  function shallow_model2 (self : slice t) : Seq.seq t
  val shallow_model2 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv6 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv6 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv7 (shallow_model2 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model2 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model2 self)
  <= UIntSize.to_int max0)
  function index_logic0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model2 self) ix
  val index_logic0 [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic0 self ix }
    
  use seq.Seq
  function shallow_model0 (self : slice t) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model2 self
  val shallow_model0 (self : slice t) : Seq.seq t
    ensures { result = shallow_model0 self }
    
  use seq.Seq
  predicate inv0 (_x : slice t)
  val inv0 (_x : slice t) : bool
    ensures { result = inv0 _x }
    
  function to_ref_seq0 (self : slice t) : Seq.seq t
  val to_ref_seq0 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv0 self}
    ensures { result = to_ref_seq0 self }
    
  axiom to_ref_seq0_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 4 91 35] inv5 (to_ref_seq0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 90 4 90 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq0 self)  -> Seq.get (to_ref_seq0 self) i = index_logic0 self i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 89 14 89 41] Seq.length (to_ref_seq0 self)
  = Seq.length (shallow_model0 self))
  function shallow_model1 (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model1 (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model1 self }
    
  predicate produces0 (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 386 12 386 66] to_ref_seq0 (shallow_model1 self)
    = Seq.(++) visited (to_ref_seq0 (shallow_model1 tl))
  val produces0 (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces0 self visited tl }
    
  function produces_trans0 (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 395 4 395 10] ()
  val produces_trans0 (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 397 15 397 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 398 15 398 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 400 31 400 33] inv5 ab}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 400 61 400 63] inv5 bc}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 397 15 397 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 398 15 398 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 400 31 400 33] inv5 ab)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 400 61 400 63] inv5 bc)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 399 14 399 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (self : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 390 4 390 10] ()
  val produces_refl0 (self : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Slice_Iter_Iter_Type.t_iter t . [#"../../../../../creusot-contracts/src/std/slice.rs" 392 14 392 45] produces0 self (Seq.empty ) self
  predicate invariant2 (self : Core_Slice_Iter_Iter_Type.t_iter t)
  val invariant2 (self : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Slice_Iter_Iter_Type.t_iter t)
  val inv2 (_x : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Slice_Iter_Iter_Type.t_iter t . inv2 x = true
  use prelude.Snapshot
  predicate invariant1 (self : Snapshot.snap_ty (Seq.seq t))
  val invariant1 (self : Snapshot.snap_ty (Seq.seq t)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Snapshot.snap_ty (Seq.seq t))
  val inv1 (_x : Snapshot.snap_ty (Seq.seq t)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Snapshot.snap_ty (Seq.seq t) . inv1 x = true
  predicate invariant0 (self : slice t)
  val invariant0 (self : slice t) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : slice t . inv0 x = true
  predicate resolve6 (self : Core_Slice_Iter_Iter_Type.t_iter t)
  val resolve6 (self : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = resolve6 self }
    
  predicate resolve5 (self : t)
  val resolve5 (self : t) : bool
    ensures { result = resolve5 self }
    
  use seq.Seq
  predicate resolve4 (self : Core_Option_Option_Type.t_option t)
  val resolve4 (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = resolve4 self }
    
  predicate resolve3 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve3 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = resolve3 self }
    
  use seq.Seq
  function shallow_model3 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : slice t =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model1 ( * self)
  val shallow_model3 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : slice t
    ensures { result = shallow_model3 self }
    
  predicate completed0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 379 20 379 61] resolve3 self
    /\ shallow_model2 (shallow_model3 self) = Seq.empty 
  val completed0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv3 result }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate resolve2 (self : Snapshot.snap_ty (Seq.seq t))
  val resolve2 (self : Snapshot.snap_ty (Seq.seq t)) : bool
    ensures { result = resolve2 self }
    
  use prelude.Snapshot
  predicate resolve1 (self : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t))
  val resolve1 (self : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = resolve1 self }
    
  use prelude.Snapshot
  predicate into_iter_post0 (self : Core_Slice_Iter_Iter_Type.t_iter t) (res : Core_Slice_Iter_Iter_Type.t_iter t) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post0 (self : Core_Slice_Iter_Iter_Type.t_iter t) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Core_Slice_Iter_Iter_Type.t_iter t) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre0 (self : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Core_Slice_Iter_Iter_Type.t_iter t) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv2 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    ensures { inv2 result }
    
  val iter0 (self : slice t) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {inv0 self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 238 0 334 1] shallow_model1 result = self }
    
  predicate resolve0 (self : slice t)
  val resolve0 (self : slice t) : bool
    ensures { result = resolve0 self }
    
  let rec cfg slice_iter [#"../03_std_iterators.rs" 6 0 6 42] [@cfg:stackify] [@cfg:subregion_analysis] (slice : slice t) : usize
    requires {[#"../03_std_iterators.rs" 4 11 4 30] Seq.length (shallow_model0 slice) < 1000}
    requires {[#"../03_std_iterators.rs" 6 21 6 26] inv0 slice}
    ensures { [#"../03_std_iterators.rs" 5 10 5 33] UIntSize.to_int result = Seq.length (shallow_model0 slice) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var slice : slice t = slice;
  var i : usize;
  var iter : Core_Slice_Iter_Iter_Type.t_iter t;
  var _7 : Core_Slice_Iter_Iter_Type.t_iter t;
  var iter_old : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t);
  var produced : Snapshot.snap_ty (Seq.seq t);
  var _17 : Core_Option_Option_Type.t_option t;
  var _18 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var _19 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var __creusot_proc_iter_elem : t;
  var _22 : Snapshot.snap_ty (Seq.seq t);
  {
    goto BB0
  }
  BB0 {
    [#"../03_std_iterators.rs" 7 16 7 17] i <- ([#"../03_std_iterators.rs" 7 16 7 17] (0 : usize));
    assert { [@expl:type invariant] inv0 slice };
    assume { resolve0 slice };
    [#"../03_std_iterators.rs" 9 13 9 25] _7 <- ([#"../03_std_iterators.rs" 9 13 9 25] iter0 slice);
    goto BB1
  }
  BB1 {
    [#"../03_std_iterators.rs" 8 4 8 38] iter <- ([#"../03_std_iterators.rs" 8 4 8 38] into_iter0 _7);
    _7 <- any Core_Slice_Iter_Iter_Type.t_iter t;
    goto BB2
  }
  BB2 {
    [#"../03_std_iterators.rs" 8 4 8 38] iter_old <- ([#"../03_std_iterators.rs" 8 4 8 38] Snapshot.new iter);
    goto BB3
  }
  BB3 {
    assume { resolve1 iter_old };
    [#"../03_std_iterators.rs" 8 4 8 38] produced <- ([#"../03_std_iterators.rs" 8 4 8 38] Snapshot.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    assert { [@expl:type invariant] inv1 produced };
    assume { resolve2 produced };
    goto BB5
  }
  BB5 {
    invariant { [#"../03_std_iterators.rs" 8 4 8 38] inv2 iter };
    invariant { [#"../03_std_iterators.rs" 8 4 8 38] produces0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter };
    invariant { [#"../03_std_iterators.rs" 8 16 8 36] UIntSize.to_int i = Seq.length (Snapshot.inner produced) };
    goto BB6
  }
  BB6 {
    [#"../03_std_iterators.rs" 8 4 8 38] _19 <- Borrow.borrow_mut iter;
    [#"../03_std_iterators.rs" 8 4 8 38] iter <-  ^ _19;
    [#"../03_std_iterators.rs" 8 4 8 38] _18 <- Borrow.borrow_final ( * _19) (Borrow.get_id _19);
    [#"../03_std_iterators.rs" 8 4 8 38] _19 <- { _19 with current = ( ^ _18) ; };
    [#"../03_std_iterators.rs" 8 4 8 38] _17 <- ([#"../03_std_iterators.rs" 8 4 8 38] next0 _18);
    _18 <- any borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
    goto BB7
  }
  BB7 {
    assume { resolve3 _19 };
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB10
      | Core_Option_Option_Type.C_Some _ -> goto BB9
      end
  }
  BB8 {
    assume { resolve6 iter };
    assert { [@expl:type invariant] inv3 _17 };
    assume { resolve4 _17 };
    assert { [#"../03_std_iterators.rs" 8 4 8 38] false };
    absurd
  }
  BB9 {
    goto BB11
  }
  BB10 {
    assert { [@expl:type invariant] inv3 _17 };
    assume { resolve4 _17 };
    assume { resolve6 iter };
    [#"../03_std_iterators.rs" 12 4 12 5] _0 <- i;
    return _0
  }
  BB11 {
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _17;
    assert { [@expl:type invariant] inv3 _17 };
    assume { resolve4 _17 };
    [#"../03_std_iterators.rs" 8 4 8 38] _22 <- ([#"../03_std_iterators.rs" 8 4 8 38] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB12
  }
  BB12 {
    [#"../03_std_iterators.rs" 8 4 8 38] produced <- _22;
    _22 <- any Snapshot.snap_ty (Seq.seq t);
    assert { [@expl:type invariant] inv1 produced };
    assume { resolve2 produced };
    assert { [@expl:type invariant] inv4 __creusot_proc_iter_elem };
    assume { resolve5 __creusot_proc_iter_elem };
    [#"../03_std_iterators.rs" 10 8 10 14] i <- i + ([#"../03_std_iterators.rs" 10 13 10 14] (1 : usize));
    goto BB5
  }
  
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module C03StdIterators_VecIter
  type t
  use prelude.Slice
  predicate invariant9 (self : slice t)
  val invariant9 (self : slice t) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : slice t)
  val inv9 (_x : slice t) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : slice t . inv9 x = true
  use seq.Seq
  predicate invariant8 (self : Seq.seq t)
  val invariant8 (self : Seq.seq t) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Seq.seq t)
  val inv8 (_x : Seq.seq t) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Seq.seq t . inv8 x = true
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv7 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv7 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv7 _x }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv7 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv7 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv8 (shallow_model2 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model2 self)
  <= UIntSize.to_int max0)
  predicate invariant7 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv8 (shallow_model2 self)
  val invariant7 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant7 self }
    
  axiom inv7 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv7 x = true
  predicate invariant6 (self : slice t)
  val invariant6 (self : slice t) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : slice t)
  val inv6 (_x : slice t) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : slice t . inv6 x = true
  predicate invariant5 (self : Seq.seq t)
  val invariant5 (self : Seq.seq t) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq t)
  val inv5 (_x : Seq.seq t) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq t . inv5 x = true
  predicate invariant4 (self : t)
  val invariant4 (self : t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : t)
  val inv4 (_x : t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : t . inv4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option t)
  val invariant3 (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option t)
  val inv3 (_x : Core_Option_Option_Type.t_option t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option t . inv3 x = true
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  use seq.Seq
  use prelude.Slice
  function shallow_model5 (self : slice t) : Seq.seq t
  val shallow_model5 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv9 self}
    ensures { result = shallow_model5 self }
    
  axiom shallow_model5_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv9 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv8 (shallow_model5 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model5 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model5 self)
  <= UIntSize.to_int max0)
  function index_logic0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model5 self) ix
  val index_logic0 [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic0 self ix }
    
  use seq.Seq
  function shallow_model3 (self : slice t) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model5 self
  val shallow_model3 (self : slice t) : Seq.seq t
    ensures { result = shallow_model3 self }
    
  use seq.Seq
  function to_ref_seq0 (self : slice t) : Seq.seq t
  val to_ref_seq0 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv6 self}
    ensures { result = to_ref_seq0 self }
    
  axiom to_ref_seq0_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv6 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 4 91 35] inv5 (to_ref_seq0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 90 4 90 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq0 self)  -> Seq.get (to_ref_seq0 self) i = index_logic0 self i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 89 14 89 41] Seq.length (to_ref_seq0 self)
  = Seq.length (shallow_model3 self))
  function shallow_model1 (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model1 (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model1 self }
    
  predicate produces0 (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 386 12 386 66] to_ref_seq0 (shallow_model1 self)
    = Seq.(++) visited (to_ref_seq0 (shallow_model1 tl))
  val produces0 (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces0 self visited tl }
    
  function produces_trans0 (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 395 4 395 10] ()
  val produces_trans0 (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 397 15 397 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 398 15 398 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 400 31 400 33] inv5 ab}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 400 61 400 63] inv5 bc}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 397 15 397 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 398 15 398 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 400 31 400 33] inv5 ab)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 400 61 400 63] inv5 bc)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 399 14 399 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (self : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 390 4 390 10] ()
  val produces_refl0 (self : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Slice_Iter_Iter_Type.t_iter t . [#"../../../../../creusot-contracts/src/std/slice.rs" 392 14 392 45] produces0 self (Seq.empty ) self
  predicate invariant2 (self : Core_Slice_Iter_Iter_Type.t_iter t)
  val invariant2 (self : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Slice_Iter_Iter_Type.t_iter t)
  val inv2 (_x : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Slice_Iter_Iter_Type.t_iter t . inv2 x = true
  use prelude.Snapshot
  predicate invariant1 (self : Snapshot.snap_ty (Seq.seq t))
  val invariant1 (self : Snapshot.snap_ty (Seq.seq t)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Snapshot.snap_ty (Seq.seq t))
  val inv1 (_x : Snapshot.snap_ty (Seq.seq t)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Snapshot.snap_ty (Seq.seq t) . inv1 x = true
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model2 self
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    ensures { result = shallow_model0 self }
    
  predicate resolve6 (self : Core_Slice_Iter_Iter_Type.t_iter t)
  val resolve6 (self : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = resolve6 self }
    
  predicate resolve5 (self : t)
  val resolve5 (self : t) : bool
    ensures { result = resolve5 self }
    
  use seq.Seq
  predicate resolve4 (self : Core_Option_Option_Type.t_option t)
  val resolve4 (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = resolve4 self }
    
  predicate resolve3 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve3 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = resolve3 self }
    
  use seq.Seq
  function shallow_model4 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : slice t =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model1 ( * self)
  val shallow_model4 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : slice t
    ensures { result = shallow_model4 self }
    
  predicate completed0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 379 20 379 61] resolve3 self
    /\ shallow_model5 (shallow_model4 self) = Seq.empty 
  val completed0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv3 result }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate resolve2 (self : Snapshot.snap_ty (Seq.seq t))
  val resolve2 (self : Snapshot.snap_ty (Seq.seq t)) : bool
    ensures { result = resolve2 self }
    
  use prelude.Snapshot
  predicate resolve1 (self : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t))
  val resolve1 (self : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = resolve1 self }
    
  use prelude.Snapshot
  predicate into_iter_post0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (res : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 188 20 188 34] shallow_model0 self
    = shallow_model3 (shallow_model1 res)
  val into_iter_post0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 182 20 182 24] true
  val into_iter_pre0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv0 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    
  predicate resolve0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val resolve0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg vec_iter [#"../03_std_iterators.rs" 17 0 17 41] [@cfg:stackify] [@cfg:subregion_analysis] (vec : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {[#"../03_std_iterators.rs" 15 11 15 28] Seq.length (shallow_model0 vec) < 1000}
    requires {[#"../03_std_iterators.rs" 17 19 17 22] inv0 vec}
    ensures { [#"../03_std_iterators.rs" 16 10 16 31] UIntSize.to_int result = Seq.length (shallow_model0 vec) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var vec : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) = vec;
  var i : usize;
  var iter : Core_Slice_Iter_Iter_Type.t_iter t;
  var iter_old : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t);
  var produced : Snapshot.snap_ty (Seq.seq t);
  var _16 : Core_Option_Option_Type.t_option t;
  var _17 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var _18 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var __creusot_proc_iter_elem : t;
  var _21 : Snapshot.snap_ty (Seq.seq t);
  {
    goto BB0
  }
  BB0 {
    [#"../03_std_iterators.rs" 18 16 18 17] i <- ([#"../03_std_iterators.rs" 18 16 18 17] (0 : usize));
    assert { [@expl:type invariant] inv0 vec };
    assume { resolve0 vec };
    [#"../03_std_iterators.rs" 19 4 19 38] iter <- ([#"../03_std_iterators.rs" 19 4 19 38] into_iter0 vec);
    goto BB1
  }
  BB1 {
    [#"../03_std_iterators.rs" 19 4 19 38] iter_old <- ([#"../03_std_iterators.rs" 19 4 19 38] Snapshot.new iter);
    goto BB2
  }
  BB2 {
    assume { resolve1 iter_old };
    [#"../03_std_iterators.rs" 19 4 19 38] produced <- ([#"../03_std_iterators.rs" 19 4 19 38] Snapshot.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    assert { [@expl:type invariant] inv1 produced };
    assume { resolve2 produced };
    goto BB4
  }
  BB4 {
    invariant { [#"../03_std_iterators.rs" 19 4 19 38] inv2 iter };
    invariant { [#"../03_std_iterators.rs" 19 4 19 38] produces0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter };
    invariant { [#"../03_std_iterators.rs" 19 16 19 36] UIntSize.to_int i = Seq.length (Snapshot.inner produced) };
    goto BB5
  }
  BB5 {
    [#"../03_std_iterators.rs" 19 4 19 38] _18 <- Borrow.borrow_mut iter;
    [#"../03_std_iterators.rs" 19 4 19 38] iter <-  ^ _18;
    [#"../03_std_iterators.rs" 19 4 19 38] _17 <- Borrow.borrow_final ( * _18) (Borrow.get_id _18);
    [#"../03_std_iterators.rs" 19 4 19 38] _18 <- { _18 with current = ( ^ _17) ; };
    [#"../03_std_iterators.rs" 19 4 19 38] _16 <- ([#"../03_std_iterators.rs" 19 4 19 38] next0 _17);
    _17 <- any borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
    goto BB6
  }
  BB6 {
    assume { resolve3 _18 };
    switch (_16)
      | Core_Option_Option_Type.C_None -> goto BB9
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB7 {
    assume { resolve6 iter };
    assert { [@expl:type invariant] inv3 _16 };
    assume { resolve4 _16 };
    assert { [#"../03_std_iterators.rs" 19 4 19 38] false };
    absurd
  }
  BB8 {
    goto BB10
  }
  BB9 {
    assert { [@expl:type invariant] inv3 _16 };
    assume { resolve4 _16 };
    assume { resolve6 iter };
    [#"../03_std_iterators.rs" 23 4 23 5] _0 <- i;
    return _0
  }
  BB10 {
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _16;
    assert { [@expl:type invariant] inv3 _16 };
    assume { resolve4 _16 };
    [#"../03_std_iterators.rs" 19 4 19 38] _21 <- ([#"../03_std_iterators.rs" 19 4 19 38] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB11
  }
  BB11 {
    [#"../03_std_iterators.rs" 19 4 19 38] produced <- _21;
    _21 <- any Snapshot.snap_ty (Seq.seq t);
    assert { [@expl:type invariant] inv1 produced };
    assume { resolve2 produced };
    assert { [@expl:type invariant] inv4 __creusot_proc_iter_elem };
    assume { resolve5 __creusot_proc_iter_elem };
    [#"../03_std_iterators.rs" 21 8 21 14] i <- i + ([#"../03_std_iterators.rs" 21 13 21 14] (1 : usize));
    goto BB4
  }
  
end
module Core_Slice_Iter_IterMut_Type
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_itermut 't =
    | C_IterMut (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata (borrowed 't))
    
end
module C03StdIterators_AllZero
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  predicate invariant7 (self : Seq.seq (borrowed usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : Seq.seq (borrowed usize)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Seq.seq (borrowed usize))
  val inv7 (_x : Seq.seq (borrowed usize)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Seq.seq (borrowed usize) . inv7 x = true
  use prelude.Slice
  predicate invariant6 (self : slice usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : slice usize) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : slice usize)
  val inv6 (_x : slice usize) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : slice usize . inv6 x = true
  predicate invariant5 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : Seq.seq usize) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq usize)
  val inv5 (_x : Seq.seq usize) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq usize . inv5 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv4 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv4 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv4 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv5 (shallow_model0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv5 (shallow_model0 self)
  val invariant4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option (borrowed usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Core_Option_Option_Type.t_option (borrowed usize)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option (borrowed usize))
  val inv3 (_x : Core_Option_Option_Type.t_option (borrowed usize)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option (borrowed usize) . inv3 x = true
  predicate invariant2 (self : borrowed (slice usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : borrowed (slice usize)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (slice usize))
  val inv2 (_x : borrowed (slice usize)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (slice usize) . inv2 x = true
  predicate invariant1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv1 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv1 x = true
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  use seq.Seq
  use seq.Seq
  use prelude.Slice
  function shallow_model3 (self : slice usize) : Seq.seq usize
  val shallow_model3 (self : slice usize) : Seq.seq usize
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv6 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : slice usize . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv6 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv5 (shallow_model3 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model3 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model3 self)
  <= UIntSize.to_int max0)
  function index_logic2 [@inline:trivial] (self : slice usize) (ix : int) : usize =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model3 self) ix
  val index_logic2 [@inline:trivial] (self : slice usize) (ix : int) : usize
    ensures { result = index_logic2 self ix }
    
  use seq.Seq
  function shallow_model2 (self : borrowed (slice usize)) : Seq.seq usize =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model3 ( * self)
  val shallow_model2 (self : borrowed (slice usize)) : Seq.seq usize
    ensures { result = shallow_model2 self }
    
  use seq.Seq
  function to_mut_seq0 (self : borrowed (slice usize)) : Seq.seq (borrowed usize)
  val to_mut_seq0 (self : borrowed (slice usize)) : Seq.seq (borrowed usize)
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv2 self}
    ensures { result = to_mut_seq0 self }
    
  axiom to_mut_seq0_spec : forall self : borrowed (slice usize) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 23 82 27] inv2 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 4 82 43] inv7 (to_mut_seq0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 81 4 81 85] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq0 self)  ->  ^ Seq.get (to_mut_seq0 self) i = index_logic2 ( ^ self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 80 4 80 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq0 self)  ->  * Seq.get (to_mut_seq0 self) i = index_logic2 ( * self) i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 79 14 79 41] Seq.length (to_mut_seq0 self)
  = Seq.length (shallow_model2 self))
  function shallow_model4 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) : borrowed (slice usize)
  val shallow_model4 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) : borrowed (slice usize)
    ensures { result = shallow_model4 self }
    
  axiom shallow_model4_spec : forall self : Core_Slice_Iter_IterMut_Type.t_itermut usize . ([#"../../../../../creusot-contracts/src/std/slice.rs" 410 4 410 50] inv2 (shallow_model4 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 409 14 409 50] Seq.length (shallow_model3 ( ^ shallow_model4 self))
  = Seq.length (shallow_model3 ( * shallow_model4 self)))
  predicate produces0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) (visited : Seq.seq (borrowed usize)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 435 12 435 66] to_mut_seq0 (shallow_model4 self)
    = Seq.(++) visited (to_mut_seq0 (shallow_model4 tl))
  val produces0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) (visited : Seq.seq (borrowed usize)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut usize) : bool
    ensures { result = produces0 self visited tl }
    
  function produces_trans0 (a : Core_Slice_Iter_IterMut_Type.t_itermut usize) (ab : Seq.seq (borrowed usize)) (b : Core_Slice_Iter_IterMut_Type.t_itermut usize) (bc : Seq.seq (borrowed usize)) (c : Core_Slice_Iter_IterMut_Type.t_itermut usize) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 444 4 444 10] ()
  val produces_trans0 (a : Core_Slice_Iter_IterMut_Type.t_itermut usize) (ab : Seq.seq (borrowed usize)) (b : Core_Slice_Iter_IterMut_Type.t_itermut usize) (bc : Seq.seq (borrowed usize)) (c : Core_Slice_Iter_IterMut_Type.t_itermut usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 446 15 446 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 447 15 447 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 449 31 449 33] inv7 ab}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 449 61 449 63] inv7 bc}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut usize, ab : Seq.seq (borrowed usize), b : Core_Slice_Iter_IterMut_Type.t_itermut usize, bc : Seq.seq (borrowed usize), c : Core_Slice_Iter_IterMut_Type.t_itermut usize . ([#"../../../../../creusot-contracts/src/std/slice.rs" 446 15 446 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 447 15 447 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 449 31 449 33] inv7 ab)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 449 61 449 63] inv7 bc)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 448 14 448 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) : () =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 439 4 439 10] ()
  val produces_refl0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) : ()
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Slice_Iter_IterMut_Type.t_itermut usize . [#"../../../../../creusot-contracts/src/std/slice.rs" 441 14 441 45] produces0 self (Seq.empty ) self
  predicate invariant0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Core_Slice_Iter_IterMut_Type.t_itermut usize)
  val inv0 (_x : Core_Slice_Iter_IterMut_Type.t_itermut usize) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Core_Slice_Iter_IterMut_Type.t_itermut usize . inv0 x = true
  function index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    ensures { result = index_logic1 self ix }
    
  function shallow_model1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model0 ( * self)
  val shallow_model1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    ensures { result = shallow_model1 self }
    
  use prelude.Snapshot
  predicate resolve4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve4 self }
    
  predicate resolve3 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 420 20 420 36]  * shallow_model4 self =  ^ shallow_model4 self
  val resolve3 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve2 (self : borrowed usize) : bool
    ensures { result = resolve2 self }
    
  use seq.Seq
  predicate resolve1 (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) : bool
    ensures { result = resolve1 self }
    
  use seq.Seq
  function shallow_model5 (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) : borrowed (slice usize) =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model4 ( * self)
  val shallow_model5 (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) : borrowed (slice usize)
    ensures { result = shallow_model5 self }
    
  predicate completed0 (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 428 20 428 61] resolve1 self
    /\ shallow_model3 ( * shallow_model5 self) = Seq.empty 
  val completed0 (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize)) : Core_Option_Option_Type.t_option (borrowed usize)
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv3 result }
    
  use prelude.Snapshot
  function index_logic0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq (borrowed usize))) (ix : int) : borrowed usize
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33] Seq.get (Snapshot.inner self) ix
  val index_logic0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq (borrowed usize))) (ix : int) : borrowed usize
    ensures { result = index_logic0 self ix }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate resolve0 (self : borrowed (slice usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (slice usize)) : bool
    ensures { result = resolve0 self }
    
  predicate into_iter_post0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) (res : Core_Slice_Iter_IterMut_Type.t_itermut usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) (res : Core_Slice_Iter_IterMut_Type.t_itermut usize) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Core_Slice_Iter_IterMut_Type.t_itermut usize) : Core_Slice_Iter_IterMut_Type.t_itermut usize
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv0 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    ensures { inv0 result }
    
  val iter_mut0 (self : borrowed (slice usize)) : Core_Slice_Iter_IterMut_Type.t_itermut usize
    requires {inv2 self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 238 0 334 1] shallow_model4 result = self }
    
  val deref_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : borrowed (slice usize)
    requires {inv1 self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 152 26 152 42] shallow_model2 result
    = shallow_model1 self }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 153 26 153 48] shallow_model3 ( ^ result)
    = shallow_model0 ( ^ self) }
    ensures { inv2 result }
    
  let rec cfg all_zero [#"../03_std_iterators.rs" 28 0 28 35] [@cfg:stackify] [@cfg:subregion_analysis] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../03_std_iterators.rs" 26 10 26 33] Seq.length (shallow_model0 ( ^ v))
    = Seq.length (shallow_model1 v) }
    ensures { [#"../03_std_iterators.rs" 27 0 27 66] forall i : int . 0 <= i /\ i < Seq.length (shallow_model1 v)
     -> UIntSize.to_int (index_logic1 ( ^ v) i) = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) = v;
  var iter : Core_Slice_Iter_IterMut_Type.t_itermut usize;
  var _5 : Core_Slice_Iter_IterMut_Type.t_itermut usize;
  var _6 : borrowed (slice usize);
  var _7 : borrowed (slice usize);
  var _8 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var iter_old : Snapshot.snap_ty (Core_Slice_Iter_IterMut_Type.t_itermut usize);
  var produced : Snapshot.snap_ty (Seq.seq (borrowed usize));
  var _17 : Core_Option_Option_Type.t_option (borrowed usize);
  var _18 : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize);
  var _19 : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize);
  var __creusot_proc_iter_elem : borrowed usize;
  var _22 : Snapshot.snap_ty (Seq.seq (borrowed usize));
  var x : borrowed usize;
  {
    goto BB0
  }
  BB0 {
    [#"../03_std_iterators.rs" 30 13 30 14] _8 <- Borrow.borrow_final ( * v) (Borrow.get_id v);
    [#"../03_std_iterators.rs" 30 13 30 14] v <- { v with current = ( ^ _8) ; };
    [#"../03_std_iterators.rs" 30 13 30 25] _7 <- ([#"../03_std_iterators.rs" 30 13 30 25] deref_mut0 _8);
    _8 <- any borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
    goto BB1
  }
  BB1 {
    [#"../03_std_iterators.rs" 30 13 30 14] _6 <- Borrow.borrow_final ( * _7) (Borrow.get_id _7);
    [#"../03_std_iterators.rs" 30 13 30 14] _7 <- { _7 with current = ( ^ _6) ; };
    [#"../03_std_iterators.rs" 30 13 30 25] _5 <- ([#"../03_std_iterators.rs" 30 13 30 25] iter_mut0 _6);
    _6 <- any borrowed (slice usize);
    goto BB2
  }
  BB2 {
    [#"../03_std_iterators.rs" 29 4 29 87] iter <- ([#"../03_std_iterators.rs" 29 4 29 87] into_iter0 _5);
    _5 <- any Core_Slice_Iter_IterMut_Type.t_itermut usize;
    goto BB3
  }
  BB3 {
    assume { resolve0 _7 };
    [#"../03_std_iterators.rs" 29 4 29 87] iter_old <- ([#"../03_std_iterators.rs" 29 4 29 87] Snapshot.new iter);
    goto BB4
  }
  BB4 {
    [#"../03_std_iterators.rs" 29 4 29 87] produced <- ([#"../03_std_iterators.rs" 29 4 29 87] Snapshot.new (Seq.empty ));
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant { [#"../03_std_iterators.rs" 29 4 29 87] inv0 iter };
    invariant { [#"../03_std_iterators.rs" 29 4 29 87] produces0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter };
    invariant { [#"../03_std_iterators.rs" 29 4 29 87] forall i : int . 0 <= i
    /\ i < Seq.length (Snapshot.inner produced)  -> UIntSize.to_int ( ^ index_logic0 produced i) = 0 };
    goto BB7
  }
  BB7 {
    [#"../03_std_iterators.rs" 29 4 29 87] _19 <- Borrow.borrow_mut iter;
    [#"../03_std_iterators.rs" 29 4 29 87] iter <-  ^ _19;
    [#"../03_std_iterators.rs" 29 4 29 87] _18 <- Borrow.borrow_final ( * _19) (Borrow.get_id _19);
    [#"../03_std_iterators.rs" 29 4 29 87] _19 <- { _19 with current = ( ^ _18) ; };
    [#"../03_std_iterators.rs" 29 4 29 87] _17 <- ([#"../03_std_iterators.rs" 29 4 29 87] next0 _18);
    _18 <- any borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize);
    goto BB8
  }
  BB8 {
    assume { resolve1 _19 };
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB11
      | Core_Option_Option_Type.C_Some _ -> goto BB10
      end
  }
  BB9 {
    assume { resolve3 iter };
    assume { resolve4 v };
    assert { [#"../03_std_iterators.rs" 29 4 29 87] false };
    absurd
  }
  BB10 {
    goto BB12
  }
  BB11 {
    assume { resolve3 iter };
    [#"../03_std_iterators.rs" 29 4 29 87] _0 <- ([#"../03_std_iterators.rs" 29 4 29 87] ());
    assume { resolve4 v };
    return _0
  }
  BB12 {
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _17;
    _17 <- (let Core_Option_Option_Type.C_Some x0 = _17 in Core_Option_Option_Type.C_Some (any borrowed usize));
    [#"../03_std_iterators.rs" 29 4 29 87] _22 <- ([#"../03_std_iterators.rs" 29 4 29 87] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB13
  }
  BB13 {
    [#"../03_std_iterators.rs" 29 4 29 87] produced <- _22;
    _22 <- any Snapshot.snap_ty (Seq.seq (borrowed usize));
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] x <- __creusot_proc_iter_elem;
    __creusot_proc_iter_elem <- any borrowed usize;
    [#"../03_std_iterators.rs" 31 8 31 14] x <- { x with current = ([#"../03_std_iterators.rs" 31 13 31 14] (0 : usize)) ; };
    assume { resolve2 x };
    goto BB6
  }
  
end
module Core_Iter_Adapters_Take_Take_Type
  use prelude.UIntSize
  use prelude.Int
  type t_take 'i =
    | C_Take 'i usize
    
end
module Core_Iter_Adapters_Skip_Skip_Type
  use prelude.UIntSize
  use prelude.Int
  type t_skip 'i =
    | C_Skip 'i usize
    
end
module C03StdIterators_SkipTake
  type i
  use prelude.Borrow
  predicate invariant7 (self : borrowed i)
  val invariant7 (self : borrowed i) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed i)
  val inv7 (_x : borrowed i) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed i . inv7 x = true
  type item0
  use seq.Seq
  use seq.Seq
  predicate inv6 (_x : Seq.seq item0)
  val inv6 (_x : Seq.seq item0) : bool
    ensures { result = inv6 _x }
    
  predicate inv2 (_x : i)
  val inv2 (_x : i) : bool
    ensures { result = inv2 _x }
    
  predicate produces2 (self : i) (visited : Seq.seq item0) (o : i)
  val produces2 (self : i) (visited : Seq.seq item0) (o : i) : bool
    ensures { result = produces2 self visited o }
    
  function produces_trans2 (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
  val produces_trans2 (a : i) (ab : Seq.seq item0) (b : i) (bc : Seq.seq item0) (c : i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] produces2 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] produces2 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] inv2 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] inv6 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] inv2 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] inv6 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] inv2 c}
    ensures { result = produces_trans2 a ab b bc c }
    
  axiom produces_trans2_spec : forall a : i, ab : Seq.seq item0, b : i, bc : Seq.seq item0, c : i . ([#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] produces2 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] produces2 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] inv2 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] inv6 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] inv2 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] inv6 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] inv2 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] produces2 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl2 (self : i) : ()
  val produces_refl2 (self : i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25] inv2 self}
    ensures { result = produces_refl2 self }
    
  axiom produces_refl2_spec : forall self : i . ([#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25] inv2 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 45] produces2 self (Seq.empty ) self)
  use Core_Iter_Adapters_Take_Take_Type as Core_Iter_Adapters_Take_Take_Type
  predicate inv3 (_x : Core_Iter_Adapters_Take_Take_Type.t_take i)
  val inv3 (_x : Core_Iter_Adapters_Take_Take_Type.t_take i) : bool
    ensures { result = inv3 _x }
    
  function iter0 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : i
  val iter0 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : i
    ensures { result = iter0 self }
    
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  function n0 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : int
  val n0 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : int
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 34 9 34 13] inv3 self}
    ensures { result = n0 self }
    
  axiom n0_spec : forall self : Core_Iter_Adapters_Take_Take_Type.t_take i . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 34 9 34 13] inv3 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 33 14 33 50] n0 self >= 0
  /\ n0 self <= UIntSize.to_int max0)
  predicate produces1 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) (visited : Seq.seq item0) (o : Core_Iter_Adapters_Take_Take_Type.t_take i)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/take.rs" 64 12 64 88] n0 self = n0 o + Seq.length visited
    /\ produces2 (iter0 self) visited (iter0 o)
  val produces1 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) (visited : Seq.seq item0) (o : Core_Iter_Adapters_Take_Take_Type.t_take i) : bool
    ensures { result = produces1 self visited o }
    
  function produces_trans1 (a : Core_Iter_Adapters_Take_Take_Type.t_take i) (ab : Seq.seq item0) (b : Core_Iter_Adapters_Take_Take_Type.t_take i) (bc : Seq.seq item0) (c : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    
  val produces_trans1 (a : Core_Iter_Adapters_Take_Take_Type.t_take i) (ab : Seq.seq item0) (b : Core_Iter_Adapters_Take_Take_Type.t_take i) (bc : Seq.seq item0) (c : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 75 15 75 32] produces1 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 76 15 76 32] produces1 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 22 78 23] inv3 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 31 78 33] inv6 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 52 78 53] inv3 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 61 78 63] inv6 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 82 78 83] inv3 c}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : Core_Iter_Adapters_Take_Take_Type.t_take i, ab : Seq.seq item0, b : Core_Iter_Adapters_Take_Take_Type.t_take i, bc : Seq.seq item0, c : Core_Iter_Adapters_Take_Take_Type.t_take i . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 75 15 75 32] produces1 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 76 15 76 32] produces1 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 22 78 23] inv3 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 31 78 33] inv6 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 52 78 53] inv3 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 61 78 63] inv6 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 78 82 78 83] inv3 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 77 14 77 42] produces1 a (Seq.(++) ab bc) c)
  function produces_refl1 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
  val produces_refl1 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 71 21 71 25] inv3 self}
    ensures { result = produces_refl1 self }
    
  axiom produces_refl1_spec : forall self : Core_Iter_Adapters_Take_Take_Type.t_take i . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 71 21 71 25] inv3 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 70 14 70 45] produces1 self (Seq.empty ) self)
  predicate invariant6 (self : Seq.seq item0)
  val invariant6 (self : Seq.seq item0) : bool
    ensures { result = invariant6 self }
    
  axiom inv6 : forall x : Seq.seq item0 . inv6 x = true
  predicate invariant5 (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i))
  val invariant5 (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i))
  val inv5 (_x : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i) . inv5 x = true
  use Core_Iter_Adapters_Skip_Skip_Type as Core_Iter_Adapters_Skip_Skip_Type
  predicate inv0 (_x : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))
  val inv0 (_x : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : bool
    ensures { result = inv0 _x }
    
  predicate resolve3 (self : item0)
  val resolve3 (self : item0) : bool
    ensures { result = resolve3 self }
    
  use seq.Seq
  function iter1 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : Core_Iter_Adapters_Take_Take_Type.t_take i
    
  val iter1 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : Core_Iter_Adapters_Take_Take_Type.t_take i
    ensures { result = iter1 self }
    
  function n1 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : int
  val n1 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : int
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 23 9 23 13] inv0 self}
    ensures { result = n1 self }
    
  axiom n1_spec : forall self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i) . ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 23 9 23 13] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 22 14 22 50] n1 self >= 0
  /\ n1 self <= UIntSize.to_int max0)
  predicate produces0 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (visited : Seq.seq item0) (o : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 57 8 64 9] visited = Seq.empty  /\ self = o
    \/ n1 o = 0
    /\ Seq.length visited > 0
    /\ (exists s : Seq.seq item0 . inv6 s
    /\ Seq.length s = n1 self
    /\ produces1 (iter1 self) (Seq.(++) s visited) (iter1 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve3 (Seq.get s i)))
  val produces0 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (visited : Seq.seq item0) (o : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : bool
    ensures { result = produces0 self visited o }
    
  function produces_trans0 (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (ab : Seq.seq item0) (b : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (bc : Seq.seq item0) (c : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : ()
    
  val produces_trans0 (a : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (ab : Seq.seq item0) (b : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) (bc : Seq.seq item0) (c : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 74 15 74 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 75 15 75 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 22 77 23] inv0 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 31 77 33] inv6 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 52 77 53] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 61 77 63] inv6 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 82 77 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i), ab : Seq.seq item0, b : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i), bc : Seq.seq item0, c : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i) . ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 74 15 74 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 75 15 75 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 22 77 23] inv0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 31 77 33] inv6 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 52 77 53] inv0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 61 77 63] inv6 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 77 82 77 83] inv0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 76 14 76 42] produces0 a (Seq.(++) ab bc) c)
  function produces_refl0 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : ()
    
  val produces_refl0 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/skip.rs" 70 21 70 25] inv0 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i) . ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 70 21 70 25] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/skip.rs" 69 14 69 45] produces0 self (Seq.empty ) self)
  predicate invariant4 (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)))
    
  val invariant4 (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)))
  val inv4 (_x : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) . inv4 x
  = true
  predicate invariant3 (self : Core_Iter_Adapters_Take_Take_Type.t_take i)
  val invariant3 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : Core_Iter_Adapters_Take_Take_Type.t_take i . inv3 x = true
  predicate invariant2 (self : i)
  val invariant2 (self : i) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : i . inv2 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant1 (self : Core_Option_Option_Type.t_option item0)
  val invariant1 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option item0)
  val inv1 (_x : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option item0 . inv1 x = true
  predicate invariant0 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))
  val invariant0 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i) . inv0 x
  = true
  predicate resolve1 (self : Core_Option_Option_Type.t_option item0)
  val resolve1 (self : Core_Option_Option_Type.t_option item0) : bool
    ensures { result = resolve1 self }
    
  predicate resolve4 (self : i)
  val resolve4 (self : i) : bool
    ensures { result = resolve4 self }
    
  predicate resolve2 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) =
    [#"../../../../../creusot-contracts/src/std/iter/take.rs" 45 12 45 33] resolve4 (iter0 self)
  val resolve2 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) =
    [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 34 12 34 33] resolve2 (iter1 self)
  val resolve0 (self : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)) : bool
    ensures { result = resolve0 self }
    
  use seq.Seq
  predicate completed2 (self : borrowed i)
  val completed2 (self : borrowed i) : bool
    ensures { result = completed2 self }
    
  function iter_mut0 (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : borrowed i
  val iter_mut0 (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : borrowed i
    requires {[#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 21 26 25] inv5 self}
    ensures { result = iter_mut0 self }
    
  axiom iter_mut0_spec : forall self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i) . ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 21 26 25] inv5 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 26 4 26 36] inv7 (iter_mut0 self))
  && ([#"../../../../../creusot-contracts/src/std/iter/take.rs" 25 14 25 68] iter0 ( * self) =  * iter_mut0 self
  /\ iter0 ( ^ self) =  ^ iter_mut0 self)
  predicate resolve5 (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve5 (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : bool
    ensures { result = resolve5 self }
    
  predicate completed1 (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) =
    [#"../../../../../creusot-contracts/src/std/iter/take.rs" 55 12 56 92] n0 ( * self) = 0 /\ resolve5 self
    \/ n0 ( * self) > 0 /\ n0 ( * self) = n0 ( ^ self) + 1 /\ completed2 (iter_mut0 self)
  val completed1 (self : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i)) : bool
    ensures { result = completed1 self }
    
  predicate completed0 (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/skip.rs" 43 8 51 9] n1 ( ^ self) = 0
    /\ (exists i : borrowed (Core_Iter_Adapters_Take_Take_Type.t_take i) . exists s : Seq.seq item0 . inv5 i
    /\ inv6 s
    /\ Seq.length s <= n1 ( * self)
    /\ produces1 (iter1 ( * self)) s ( * i)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> resolve3 (Seq.get s i))
    /\ completed1 i /\  ^ i = iter1 ( ^ self))
  val completed0 (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i))) : Core_Option_Option_Type.t_option item0
    requires {inv4 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv1 result }
    
  val skip0 (self : Core_Iter_Adapters_Take_Take_Type.t_take i) (n : usize) : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i)
    requires {inv3 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] iter1 result = self
    /\ n1 result = UIntSize.to_int n }
    ensures { inv0 result }
    
  val take0 (self : i) (n : usize) : Core_Iter_Adapters_Take_Take_Type.t_take i
    requires {inv2 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] iter0 result = self
    /\ n0 result = UIntSize.to_int n }
    ensures { inv3 result }
    
  let rec cfg skip_take [#"../03_std_iterators.rs" 35 0 35 48] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) (n : usize) : ()
    requires {[#"../03_std_iterators.rs" 35 30 35 34] inv2 iter}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter : i = iter;
  var n : usize = n;
  var res : Core_Option_Option_Type.t_option item0;
  var _4 : borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i));
  var _5 : Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i);
  var _6 : Core_Iter_Adapters_Take_Take_Type.t_take i;
  {
    goto BB0
  }
  BB0 {
    [#"../03_std_iterators.rs" 36 14 36 26] _6 <- ([#"../03_std_iterators.rs" 36 14 36 26] take0 iter n);
    iter <- any i;
    goto BB1
  }
  BB1 {
    [#"../03_std_iterators.rs" 36 14 36 34] _5 <- ([#"../03_std_iterators.rs" 36 14 36 34] skip0 _6 n);
    _6 <- any Core_Iter_Adapters_Take_Take_Type.t_take i;
    goto BB2
  }
  BB2 {
    [#"../03_std_iterators.rs" 36 14 36 34] _4 <- Borrow.borrow_mut _5;
    [#"../03_std_iterators.rs" 36 14 36 34] _5 <-  ^ _4;
    assume { inv0 ( ^ _4) };
    [#"../03_std_iterators.rs" 36 14 36 41] res <- ([#"../03_std_iterators.rs" 36 14 36 41] next0 _4);
    _4 <- any borrowed (Core_Iter_Adapters_Skip_Skip_Type.t_skip (Core_Iter_Adapters_Take_Take_Type.t_take i));
    goto BB3
  }
  BB3 {
    assert { [@expl:type invariant] inv0 _5 };
    assume { resolve0 _5 };
    assert { [@expl:type invariant] inv1 res };
    assume { resolve1 res };
    goto BB4
  }
  BB4 {
    assert { [@expl:assertion] [#"../03_std_iterators.rs" 38 20 38 31] res = Core_Option_Option_Type.C_None };
    goto BB5
  }
  BB5 {
    [#"../03_std_iterators.rs" 35 49 39 1] _0 <- ([#"../03_std_iterators.rs" 35 49 39 1] ());
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module C03StdIterators_Counter_Closure0_Type
  use prelude.UInt32
  use seq.Seq
  use prelude.Snapshot
  use prelude.Int16
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  type c03stditerators_counter_closure0  =
    | C03stditerators_counter_closure0 (borrowed usize)
    
end
module C03StdIterators_Counter_Closure0
  use prelude.Int16
  use prelude.UInt32
  use seq.Seq
  use prelude.Snapshot
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use C03StdIterators_Counter_Closure0_Type as C03StdIterators_Counter_Closure0_Type
  function field_00 [#"../03_std_iterators.rs" 48 12 48 91] (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : borrowed usize
    
   =
    let C03StdIterators_Counter_Closure0_Type.C03stditerators_counter_closure0 a = self in a
  val field_00 [#"../03_std_iterators.rs" 48 12 48 91] (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : borrowed usize
    ensures { result = field_00 self }
    
  predicate unnest0 [#"../03_std_iterators.rs" 48 12 48 91] (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (_2 : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
   =
     ^ field_00 _2 =  ^ field_00 self
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  use prelude.Snapshot
  use prelude.UIntSize
  predicate resolve0 (self : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : bool
    ensures { result = resolve0 self }
    
  let rec cfg c03stditerators_counter_closure0 [#"../03_std_iterators.rs" 48 12 48 91] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (x : uint32) (_prod : Snapshot.snap_ty (Seq.seq uint32)) : uint32
    requires {[#"../03_std_iterators.rs" 47 23 47 65] UIntSize.to_int ( * field_00 ( * _1))
    = Seq.length (Snapshot.inner _prod)
    /\  * field_00 ( * _1) < max0}
    ensures { [#"../03_std_iterators.rs" 48 22 48 89] UIntSize.to_int ( * field_00 ( ^ _1))
    = UIntSize.to_int ( * field_00 ( * _1)) + 1
    /\ UIntSize.to_int ( * field_00 ( ^ _1)) = Seq.length (Snapshot.inner _prod) + 1 /\ result = x }
    ensures { unnest0 ( * _1) ( ^ _1) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 = _1;
  var x : uint32 = x;
  var res : uint32;
  var res1 : uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../03_std_iterators.rs" 50 16 50 24] _1 <- { _1 with current = (let C03StdIterators_Counter_Closure0_Type.C03stditerators_counter_closure0 x0 =  * _1 in C03StdIterators_Counter_Closure0_Type.C03stditerators_counter_closure0 ({ (field_00 ( * _1)) with current = ( * field_00 ( * _1)
    + ([#"../03_std_iterators.rs" 50 23 50 24] (1 : usize))) ; })) ; };
    assume { resolve0 _1 };
    [#"../03_std_iterators.rs" 51 16 51 18] res1 <- x;
    [#"../03_std_iterators.rs" 47 12 47 67] res <- res1;
    [#"../03_std_iterators.rs" 48 12 48 91] _0 <- res;
    return _0
  }
  
end
module CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  use prelude.Snapshot
  type t_mapinv 'i 'b 'f =
    | C_MapInv 'i 'f (Snapshot.snap_ty (Seq.seq 'b))
    
  let function mapinv_iter (self : t_mapinv 'i 'b 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_MapInv a _ _ -> a
      end
  let function mapinv_func (self : t_mapinv 'i 'b 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_MapInv _ a _ -> a
      end
  let function mapinv_produced (self : t_mapinv 'i 'b 'f) : Snapshot.snap_ty (Seq.seq 'b)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_MapInv _ _ a -> a
      end
end
module C03StdIterators_Counter
  use prelude.UInt32
  use seq.Seq
  use prelude.Snapshot
  predicate invariant15 (self : Snapshot.snap_ty (Seq.seq uint32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant15 (self : Snapshot.snap_ty (Seq.seq uint32)) : bool
    ensures { result = invariant15 self }
    
  predicate inv15 (_x : Snapshot.snap_ty (Seq.seq uint32))
  val inv15 (_x : Snapshot.snap_ty (Seq.seq uint32)) : bool
    ensures { result = inv15 _x }
    
  axiom inv15 : forall x : Snapshot.snap_ty (Seq.seq uint32) . inv15 x = true
  use prelude.Slice
  predicate invariant14 (self : slice uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant14 (self : slice uint32) : bool
    ensures { result = invariant14 self }
    
  predicate inv14 (_x : slice uint32)
  val inv14 (_x : slice uint32) : bool
    ensures { result = inv14 _x }
    
  axiom inv14 : forall x : slice uint32 . inv14 x = true
  use prelude.UIntSize
  use prelude.Int16
  use prelude.Borrow
  use C03StdIterators_Counter_Closure0_Type as C03StdIterators_Counter_Closure0_Type
  predicate invariant13 (self : Seq.seq (borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant13 (self : Seq.seq (borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)) : bool
    ensures { result = invariant13 self }
    
  predicate inv13 (_x : Seq.seq (borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0))
  val inv13 (_x : Seq.seq (borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)) : bool
    ensures { result = inv13 _x }
    
  axiom inv13 : forall x : Seq.seq (borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) . inv13 x
  = true
  predicate invariant12 (self : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant12 (self : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
  val inv12 (_x : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . inv12 x
  = true
  predicate invariant11 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant11 (self : uint32) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : uint32)
  val inv11 (_x : uint32) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : uint32 . inv11 x = true
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate invariant10 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant10 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32))
  val inv10 (_x : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32) . inv10 x = true
  predicate invariant9 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant9 (self : Seq.seq uint32) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : Seq.seq uint32)
  val inv9 (_x : Seq.seq uint32) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Seq.seq uint32 . inv9 x = true
  predicate inv6 (_x : Seq.seq uint32)
  val inv6 (_x : Seq.seq uint32) : bool
    ensures { result = inv6 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv8 (_x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
  val inv8 (_x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv8 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq uint32
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq uint32
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv8 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv8 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv6 (shallow_model0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant8 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv6 (shallow_model0 self)
  val invariant8 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant8 self }
    
  axiom inv8 : forall x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) . inv8 x = true
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  predicate inv5 (_x : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
  val inv5 (_x : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : bool
    ensures { result = inv5 _x }
    
  function field_00 [#"../03_std_iterators.rs" 48 12 48 91] (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : borrowed usize
    
   =
    let C03StdIterators_Counter_Closure0_Type.C03stditerators_counter_closure0 a = self in a
  val field_00 [#"../03_std_iterators.rs" 48 12 48 91] (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : borrowed usize
    ensures { result = field_00 self }
    
  predicate unnest0 [#"../03_std_iterators.rs" 48 12 48 91] (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (_2 : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
   =
     ^ field_00 _2 =  ^ field_00 self
  use seq.Seq
  use prelude.Snapshot
  predicate postcondition_mut0 [#"../03_std_iterators.rs" 48 12 48 91] (self : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (result : uint32)
    
   =
    (let (x, _prod) = args in UIntSize.to_int ( * field_00 ( ^ self)) = UIntSize.to_int ( * field_00 ( * self)) + 1
    /\ UIntSize.to_int ( * field_00 ( ^ self)) = Seq.length (Snapshot.inner _prod) + 1 /\ result = x)
    /\ unnest0 ( * self) ( ^ self)
  use seq.Seq
  predicate precondition0 [#"../03_std_iterators.rs" 48 12 48 91] (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32)))
    
   =
    [#"../03_std_iterators.rs" 47 23 47 65] let (x, _prod) = args in UIntSize.to_int ( * field_00 self)
    = Seq.length (Snapshot.inner _prod)
    /\  * field_00 self < max0
  use prelude.Snapshot
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Snapshot
  use prelude.Slice
  function shallow_model4 (self : slice uint32) : Seq.seq uint32
  val shallow_model4 (self : slice uint32) : Seq.seq uint32
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv14 self}
    ensures { result = shallow_model4 self }
    
  axiom shallow_model4_spec : forall self : slice uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv14 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv6 (shallow_model4 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model4 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model4 self)
  <= UIntSize.to_int max0)
  function index_logic1 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model4 self) ix
  val index_logic1 [@inline:trivial] (self : slice uint32) (ix : int) : uint32
    ensures { result = index_logic1 self ix }
    
  function shallow_model1 (self : slice uint32) : Seq.seq uint32 =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model4 self
  val shallow_model1 (self : slice uint32) : Seq.seq uint32
    ensures { result = shallow_model1 self }
    
  predicate inv1 (_x : slice uint32)
  val inv1 (_x : slice uint32) : bool
    ensures { result = inv1 _x }
    
  function to_ref_seq0 (self : slice uint32) : Seq.seq uint32
  val to_ref_seq0 (self : slice uint32) : Seq.seq uint32
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv1 self}
    ensures { result = to_ref_seq0 self }
    
  axiom to_ref_seq0_spec : forall self : slice uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv1 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 4 91 35] inv9 (to_ref_seq0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 90 4 90 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq0 self)  -> Seq.get (to_ref_seq0 self) i = index_logic1 self i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 89 14 89 41] Seq.length (to_ref_seq0 self)
  = Seq.length (shallow_model1 self))
  function shallow_model3 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) : slice uint32
  val shallow_model3 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) : slice uint32
    ensures { result = shallow_model3 self }
    
  predicate produces0 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) (visited : Seq.seq uint32) (tl : Core_Slice_Iter_Iter_Type.t_iter uint32)
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 386 12 386 66] to_ref_seq0 (shallow_model3 self)
    = Seq.(++) visited (to_ref_seq0 (shallow_model3 tl))
  val produces0 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) (visited : Seq.seq uint32) (tl : Core_Slice_Iter_Iter_Type.t_iter uint32) : bool
    ensures { result = produces0 self visited tl }
    
  predicate produces1 [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (visited : Seq.seq uint32) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 37 8 49 9] unnest0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ)
    /\ (exists s : Seq.seq uint32 . inv9 s
    /\ Seq.length s = Seq.length visited
    /\ produces0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) s (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter succ)
    /\ Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced succ)
    = Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s
    /\ (exists fs : Seq.seq (borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) . inv13 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self
      = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    else
       * Seq.get fs 0 = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) ( * Seq.get fs i)
    /\ precondition0 ( * Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces1 [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (visited : Seq.seq uint32) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : bool
    ensures { result = produces1 self visited succ }
    
  function produces_trans2 (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (ab : Seq.seq uint32) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (bc : Seq.seq uint32) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : ()
    
  val produces_trans2 (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (ab : Seq.seq uint32) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (bc : Seq.seq uint32) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] produces1 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] produces1 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] inv5 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] inv6 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] inv5 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] inv6 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] inv5 c}
    ensures { result = produces_trans2 a ab b bc c }
    
  axiom produces_trans2_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0, ab : Seq.seq uint32, b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0, bc : Seq.seq uint32, c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] produces1 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] produces1 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] inv5 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] inv6 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] inv5 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] inv6 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] inv5 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl2 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : ()
    
  val produces_refl2 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 25] inv5 self}
    ensures { result = produces_refl2 self }
    
  axiom produces_refl2_spec : forall self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 25] inv5 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 45] produces1 self (Seq.empty ) self)
  predicate invariant7 (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0))
    
  val inv7 (_x : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) . inv7 x
  = (inv5 ( * x) /\ inv5 ( ^ x))
  predicate invariant6 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : Seq.seq uint32) : bool
    ensures { result = invariant6 self }
    
  axiom inv6 : forall x : Seq.seq uint32 . inv6 x = true
  use seq.Seq
  predicate inv3 (_x : uint32)
  val inv3 (_x : uint32) : bool
    ensures { result = inv3 _x }
    
  predicate inv2 (_x : Core_Slice_Iter_Iter_Type.t_iter uint32)
  val inv2 (_x : Core_Slice_Iter_Iter_Type.t_iter uint32) : bool
    ensures { result = inv2 _x }
    
  predicate next_precondition0 (iter : Core_Slice_Iter_Iter_Type.t_iter uint32) (func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (produced : Seq.seq uint32)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 112 8 116 9] forall i : Core_Slice_Iter_Iter_Type.t_iter uint32 . forall e : uint32 . inv2 i
     -> inv3 e  -> produces0 iter (Seq.singleton e) i  -> precondition0 func (e, Snapshot.new produced)
  val next_precondition0 (iter : Core_Slice_Iter_Iter_Type.t_iter uint32) (func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (produced : Seq.seq uint32) : bool
    ensures { result = next_precondition0 iter func produced }
    
  use seq.Seq
  predicate preservation0 (iter : Core_Slice_Iter_Iter_Type.t_iter uint32) (func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 135 8 142 9] forall i : Core_Slice_Iter_Iter_Type.t_iter uint32 . forall b : uint32 . forall f : borrowed C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . forall e2 : uint32 . forall e1 : uint32 . forall s : Seq.seq uint32 . inv2 i
     -> inv11 b
     -> inv12 f
     -> inv3 e2
     -> inv3 e1
     -> inv9 s
     -> unnest0 func ( * f)
     -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut0 f (e1, Snapshot.new s) b  -> precondition0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  val preservation0 (iter : Core_Slice_Iter_Iter_Type.t_iter uint32) (func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : bool
    ensures { result = preservation0 iter func }
    
  use seq.Seq
  predicate inv4 (_x : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
  val inv4 (_x : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : bool
    ensures { result = inv4 _x }
    
  predicate preservation_inv0 (iter : Core_Slice_Iter_Iter_Type.t_iter uint32) (func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (produced : Seq.seq uint32)
    
  val preservation_inv0 (iter : Core_Slice_Iter_Iter_Type.t_iter uint32) (func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) (produced : Seq.seq uint32) : bool
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 24 121 28] inv2 iter}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 33 121 37] inv4 func}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 42 121 50] inv9 produced}
    ensures { result = preservation_inv0 iter func produced }
    
  axiom preservation_inv0_spec : forall iter : Core_Slice_Iter_Iter_Type.t_iter uint32, func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0, produced : Seq.seq uint32 . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 24 121 28] inv2 iter)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 33 121 37] inv4 func)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 42 121 50] inv9 produced)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 120 4 120 83] produced = Seq.empty 
   -> preservation_inv0 iter func produced = preservation0 iter func)
  function shallow_model5 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) : slice uint32 =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model3 ( * self)
  val shallow_model5 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) : slice uint32
    ensures { result = shallow_model5 self }
    
  predicate resolve5 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve5 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) : bool
    ensures { result = resolve5 self }
    
  predicate completed1 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 379 20 379 61] resolve5 self
    /\ shallow_model4 (shallow_model5 self) = Seq.empty 
  val completed1 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) : bool
    ensures { result = completed1 self }
    
  predicate reinitialize0 (_1 : ()) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 148 8 153 9] forall func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . forall iter : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32) . inv4 func
     -> inv10 iter
     -> completed1 iter  -> next_precondition0 ( ^ iter) func (Seq.empty ) /\ preservation0 ( ^ iter) func
  val reinitialize0 (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  predicate invariant5 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
  val invariant5 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . inv5 x
  = (invariant5 x
  /\ match x with
    | CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv iter func produced -> true
    end)
  predicate invariant4 (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0 . inv4 x = true
  function produces_trans1 (a : Core_Slice_Iter_Iter_Type.t_iter uint32) (ab : Seq.seq uint32) (b : Core_Slice_Iter_Iter_Type.t_iter uint32) (bc : Seq.seq uint32) (c : Core_Slice_Iter_Iter_Type.t_iter uint32) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 395 4 395 10] ()
  val produces_trans1 (a : Core_Slice_Iter_Iter_Type.t_iter uint32) (ab : Seq.seq uint32) (b : Core_Slice_Iter_Iter_Type.t_iter uint32) (bc : Seq.seq uint32) (c : Core_Slice_Iter_Iter_Type.t_iter uint32) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 397 15 397 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 398 15 398 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 400 31 400 33] inv9 ab}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 400 61 400 63] inv9 bc}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter uint32, ab : Seq.seq uint32, b : Core_Slice_Iter_Iter_Type.t_iter uint32, bc : Seq.seq uint32, c : Core_Slice_Iter_Iter_Type.t_iter uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 397 15 397 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 398 15 398 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 400 31 400 33] inv9 ab)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 400 61 400 63] inv9 bc)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 399 14 399 42] produces0 a (Seq.(++) ab bc) c)
  function produces_refl1 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) : () =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 390 4 390 10] ()
  val produces_refl1 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) : ()
    ensures { result = produces_refl1 self }
    
  axiom produces_refl1_spec : forall self : Core_Slice_Iter_Iter_Type.t_iter uint32 . [#"../../../../../creusot-contracts/src/std/slice.rs" 392 14 392 45] produces0 self (Seq.empty ) self
  predicate invariant3 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : uint32) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : uint32 . inv3 x = true
  predicate invariant2 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : Core_Slice_Iter_Iter_Type.t_iter uint32 . inv2 x = true
  predicate invariant1 (self : slice uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : slice uint32) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : slice uint32 . inv1 x = true
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  function produces_trans0 (a : Core_Slice_Iter_Iter_Type.t_iter uint32) (ab : Seq.seq uint32) (b : Core_Slice_Iter_Iter_Type.t_iter uint32) (bc : Seq.seq uint32) (c : Core_Slice_Iter_Iter_Type.t_iter uint32) : ()
    
  val produces_trans0 (a : Core_Slice_Iter_Iter_Type.t_iter uint32) (ab : Seq.seq uint32) (b : Core_Slice_Iter_Iter_Type.t_iter uint32) (bc : Seq.seq uint32) (c : Core_Slice_Iter_Iter_Type.t_iter uint32) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] inv2 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] inv9 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] inv2 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] inv9 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] inv2 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter uint32, ab : Seq.seq uint32, b : Core_Slice_Iter_Iter_Type.t_iter uint32, bc : Seq.seq uint32, c : Core_Slice_Iter_Iter_Type.t_iter uint32 . ([#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] inv2 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] inv9 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] inv2 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] inv9 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] inv2 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] produces0 a (Seq.(++) ab bc) c)
  function produces_refl0 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) : ()
  val produces_refl0 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25] inv2 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Slice_Iter_Iter_Type.t_iter uint32 . ([#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25] inv2 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 45] produces0 self (Seq.empty ) self)
  use seq.Seq
  predicate resolve2 (self : uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve2 (self : uint32) : bool
    ensures { result = resolve2 self }
    
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : uint32
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : uint32
    ensures { result = index_logic0 self ix }
    
  predicate resolve0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model0 self)  -> resolve2 (index_logic0 self i)
  val resolve0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve0 self }
    
  predicate from_iter_post0 (prod : Seq.seq uint32) (res : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 258 20 258 32] prod = shallow_model0 res
  val from_iter_post0 (prod : Seq.seq uint32) (res : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = from_iter_post0 prod res }
    
  predicate completed0 (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 15 8 18 9] Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced ( ^ self))
    = Seq.empty 
    /\ completed1 (Borrow.borrow_logic (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( * self)) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( * self)
    = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( ^ self)
  val completed0 (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)) : bool
    ensures { result = completed0 self }
    
  predicate resolve6 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve6 (self : borrowed usize) : bool
    ensures { result = resolve6 self }
    
  predicate resolve4 [#"../03_std_iterators.rs" 48 12 48 91] (_1 : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
   =
    resolve6 (field_00 _1)
  predicate resolve3 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve3 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) : bool
    ensures { result = resolve3 self }
    
  predicate resolve1 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 56 4 56 27] resolve3 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self)
    /\ resolve4 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
  val resolve1 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : bool
    ensures { result = resolve1 self }
    
  val collect0 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
    requires {inv5 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 130 16 131 83] exists prod : Seq.seq uint32 . exists done' : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) . inv6 prod
    /\ inv7 done'
    /\ resolve1 ( ^ done') /\ completed0 done' /\ produces1 self prod ( * done') /\ from_iter_post0 prod result }
    ensures { inv8 result }
    
  val map_inv0 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) (func : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0) : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 43 4 43 141] forall i2 : Core_Slice_Iter_Iter_Type.t_iter uint32 . forall e : uint32 . inv2 i2
     -> inv3 e  -> produces0 self (Seq.singleton e) i2  -> precondition0 func (e, Snapshot.new (Seq.empty ))}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 44 15 44 51] reinitialize0 ()}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 45 15 45 70] preservation0 self func}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 47 21 47 25] inv2 self}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 47 27 47 31] inv4 func}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 46 14 46 88] result
    = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv self func (Snapshot.new (Seq.empty )) }
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 47 4 50 61] inv5 result }
    
  val iter0 (self : slice uint32) : Core_Slice_Iter_Iter_Type.t_iter uint32
    requires {inv1 self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 238 0 334 1] shallow_model3 result = self }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq uint32 =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model0 self
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq uint32
    ensures { result = shallow_model2 self }
    
  val deref0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : slice uint32
    requires {inv0 self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 147 26 147 42] shallow_model1 result
    = shallow_model2 self }
    ensures { inv1 result }
    
  let rec cfg counter [#"../03_std_iterators.rs" 41 0 41 27] [@cfg:stackify] [@cfg:subregion_analysis] (v : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) = v;
  var cnt : usize;
  var x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var _4 : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0;
  var _5 : Core_Slice_Iter_Iter_Type.t_iter uint32;
  var _7 : slice uint32;
  var _9 : C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0;
  var _10 : borrowed usize;
  {
    goto BB0
  }
  BB0 {
    [#"../03_std_iterators.rs" 42 18 42 19] cnt <- ([#"../03_std_iterators.rs" 42 18 42 19] (0 : usize));
    [#"../03_std_iterators.rs" 44 22 45 15] _7 <- ([#"../03_std_iterators.rs" 44 22 45 15] deref0 v);
    goto BB1
  }
  BB1 {
    [#"../03_std_iterators.rs" 44 22 45 15] _5 <- ([#"../03_std_iterators.rs" 44 22 45 15] iter0 _7);
    goto BB2
  }
  BB2 {
    [#"../03_std_iterators.rs" 48 12 48 91] _10 <- Borrow.borrow_mut cnt;
    [#"../03_std_iterators.rs" 48 12 48 91] cnt <-  ^ _10;
    [#"../03_std_iterators.rs" 48 12 48 91] _9 <- C03StdIterators_Counter_Closure0_Type.C03stditerators_counter_closure0 _10;
    _10 <- any borrowed usize;
    [#"../03_std_iterators.rs" 44 22 53 9] _4 <- ([#"../03_std_iterators.rs" 44 22 53 9] map_inv0 _5 _9);
    _5 <- any Core_Slice_Iter_Iter_Type.t_iter uint32;
    _9 <- any C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0;
    goto BB3
  }
  BB3 {
    [#"../03_std_iterators.rs" 44 22 54 18] x <- ([#"../03_std_iterators.rs" 44 22 54 18] collect0 _4);
    _4 <- any CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Slice_Iter_Iter_Type.t_iter uint32) uint32 C03StdIterators_Counter_Closure0_Type.c03stditerators_counter_closure0;
    goto BB4
  }
  BB4 {
    assume { resolve0 v };
    assume { resolve0 x };
    assert { [@expl:assertion] [#"../03_std_iterators.rs" 56 20 56 40] Seq.length (shallow_model0 x)
    = Seq.length (shallow_model0 v) };
    goto BB5
  }
  BB5 {
    assert { [@expl:assertion] [#"../03_std_iterators.rs" 57 4 57 35] Seq.(==) (shallow_model0 x) (shallow_model0 v) };
    goto BB6
  }
  BB6 {
    assert { [@expl:assertion] [#"../03_std_iterators.rs" 58 20 58 36] UIntSize.to_int cnt
    = Seq.length (shallow_model0 x) };
    goto BB7
  }
  BB7 {
    [#"../03_std_iterators.rs" 41 28 59 1] _0 <- ([#"../03_std_iterators.rs" 41 28 59 1] ());
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range a _ -> a
      end
end
module C03StdIterators_SumRange
  use prelude.IntSize
  use seq.Seq
  predicate invariant3 (self : Seq.seq isize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Seq.seq isize) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq isize)
  val inv3 (_x : Seq.seq isize) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq isize . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : Core_Option_Option_Type.t_option isize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Core_Option_Option_Type.t_option isize) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option isize)
  val inv2 (_x : Core_Option_Option_Type.t_option isize) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option isize . inv2 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant1 (self : borrowed (Core_Ops_Range_Range_Type.t_range isize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : borrowed (Core_Ops_Range_Range_Type.t_range isize)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (Core_Ops_Range_Range_Type.t_range isize))
  val inv1 (_x : borrowed (Core_Ops_Range_Range_Type.t_range isize)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range isize) . inv1 x = true
  use seq.Seq
  predicate inv0 (_x : Core_Ops_Range_Range_Type.t_range isize)
  val inv0 (_x : Core_Ops_Range_Range_Type.t_range isize) : bool
    ensures { result = inv0 _x }
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  function deep_model0 (self : isize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] IntSize.to_int self
  val deep_model0 (self : isize) : int
    ensures { result = deep_model0 self }
    
  predicate produces0 (self : Core_Ops_Range_Range_Type.t_range isize) (visited : Seq.seq isize) (o : Core_Ops_Range_Range_Type.t_range isize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model0 (Core_Ops_Range_Range_Type.range_start self) <= deep_model0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model0 (Core_Ops_Range_Range_Type.range_start o) - deep_model0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model0 (Seq.get visited i) = deep_model0 (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces0 (self : Core_Ops_Range_Range_Type.t_range isize) (visited : Seq.seq isize) (o : Core_Ops_Range_Range_Type.t_range isize) : bool
    ensures { result = produces0 self visited o }
    
  function produces_trans0 (a : Core_Ops_Range_Range_Type.t_range isize) (ab : Seq.seq isize) (b : Core_Ops_Range_Range_Type.t_range isize) (bc : Seq.seq isize) (c : Core_Ops_Range_Range_Type.t_range isize) : ()
    
  val produces_trans0 (a : Core_Ops_Range_Range_Type.t_range isize) (ab : Seq.seq isize) (b : Core_Ops_Range_Range_Type.t_range isize) (bc : Seq.seq isize) (c : Core_Ops_Range_Range_Type.t_range isize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv3 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv3 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Ops_Range_Range_Type.t_range isize, ab : Seq.seq isize, b : Core_Ops_Range_Range_Type.t_range isize, bc : Seq.seq isize, c : Core_Ops_Range_Range_Type.t_range isize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv3 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv3 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (self : Core_Ops_Range_Range_Type.t_range isize) : ()
  val produces_refl0 (self : Core_Ops_Range_Range_Type.t_range isize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv0 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Ops_Range_Range_Type.t_range isize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces0 self (Seq.empty ) self)
  predicate invariant0 (self : Core_Ops_Range_Range_Type.t_range isize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Core_Ops_Range_Range_Type.t_range isize) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Core_Ops_Range_Range_Type.t_range isize . inv0 x = true
  use prelude.Snapshot
  use seq.Seq
  predicate resolve0 (self : borrowed (Core_Ops_Range_Range_Type.t_range isize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (Core_Ops_Range_Range_Type.t_range isize)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range isize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve0 self
    /\ deep_model0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model0 (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range isize)) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Ops_Range_Range_Type.t_range isize)) : Core_Option_Option_Type.t_option isize
    requires {inv1 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv2 result }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range isize) (res : Core_Ops_Range_Range_Type.t_range isize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range isize) (res : Core_Ops_Range_Range_Type.t_range isize) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range isize) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range isize) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Core_Ops_Range_Range_Type.t_range isize) : Core_Ops_Range_Range_Type.t_range isize
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv0 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    ensures { inv0 result }
    
  let rec cfg sum_range [#"../03_std_iterators.rs" 63 0 63 35] [@cfg:stackify] [@cfg:subregion_analysis] (n : isize) : isize
    requires {[#"../03_std_iterators.rs" 61 11 61 18] IntSize.to_int n >= 0}
    ensures { [#"../03_std_iterators.rs" 62 10 62 21] result = n }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : isize;
  var n : isize = n;
  var i : isize;
  var iter : Core_Ops_Range_Range_Type.t_range isize;
  var _7 : Core_Ops_Range_Range_Type.t_range isize;
  var iter_old : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range isize);
  var produced : Snapshot.snap_ty (Seq.seq isize);
  var _17 : Core_Option_Option_Type.t_option isize;
  var _18 : borrowed (Core_Ops_Range_Range_Type.t_range isize);
  var _19 : borrowed (Core_Ops_Range_Range_Type.t_range isize);
  var __creusot_proc_iter_elem : isize;
  var _22 : Snapshot.snap_ty (Seq.seq isize);
  {
    goto BB0
  }
  BB0 {
    [#"../03_std_iterators.rs" 64 16 64 17] i <- ([#"../03_std_iterators.rs" 64 16 64 17] (0 : isize));
    [#"../03_std_iterators.rs" 66 13 66 17] _7 <- Core_Ops_Range_Range_Type.C_Range ([#"../03_std_iterators.rs" 66 13 66 14] (0 : isize)) n;
    [#"../03_std_iterators.rs" 65 4 65 48] iter <- ([#"../03_std_iterators.rs" 65 4 65 48] into_iter0 _7);
    _7 <- any Core_Ops_Range_Range_Type.t_range isize;
    goto BB1
  }
  BB1 {
    [#"../03_std_iterators.rs" 65 4 65 48] iter_old <- ([#"../03_std_iterators.rs" 65 4 65 48] Snapshot.new iter);
    goto BB2
  }
  BB2 {
    [#"../03_std_iterators.rs" 65 4 65 48] produced <- ([#"../03_std_iterators.rs" 65 4 65 48] Snapshot.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"../03_std_iterators.rs" 65 4 65 48] inv0 iter };
    invariant { [#"../03_std_iterators.rs" 65 4 65 48] produces0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter };
    invariant { [#"../03_std_iterators.rs" 65 16 65 46] IntSize.to_int i = Seq.length (Snapshot.inner produced)
    /\ i <= n };
    goto BB5
  }
  BB5 {
    [#"../03_std_iterators.rs" 65 4 65 48] _19 <- Borrow.borrow_mut iter;
    [#"../03_std_iterators.rs" 65 4 65 48] iter <-  ^ _19;
    [#"../03_std_iterators.rs" 65 4 65 48] _18 <- Borrow.borrow_final ( * _19) (Borrow.get_id _19);
    [#"../03_std_iterators.rs" 65 4 65 48] _19 <- { _19 with current = ( ^ _18) ; };
    [#"../03_std_iterators.rs" 65 4 65 48] _17 <- ([#"../03_std_iterators.rs" 65 4 65 48] next0 _18);
    _18 <- any borrowed (Core_Ops_Range_Range_Type.t_range isize);
    goto BB6
  }
  BB6 {
    assume { resolve0 _19 };
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB9
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB7 {
    assert { [#"../03_std_iterators.rs" 65 4 65 48] false };
    absurd
  }
  BB8 {
    goto BB10
  }
  BB9 {
    [#"../03_std_iterators.rs" 69 4 69 5] _0 <- i;
    return _0
  }
  BB10 {
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _17;
    [#"../03_std_iterators.rs" 65 4 65 48] _22 <- ([#"../03_std_iterators.rs" 65 4 65 48] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB11
  }
  BB11 {
    [#"../03_std_iterators.rs" 65 4 65 48] produced <- _22;
    _22 <- any Snapshot.snap_ty (Seq.seq isize);
    [#"../03_std_iterators.rs" 67 8 67 14] i <- i + ([#"../03_std_iterators.rs" 67 13 67 14] (1 : isize));
    goto BB4
  }
  
end
module Core_Iter_Adapters_Enumerate_Enumerate_Type
  use prelude.UIntSize
  use prelude.Int
  type t_enumerate 'i =
    | C_Enumerate 'i usize
    
end
module C03StdIterators_EnumerateRange
  use prelude.UIntSize
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant6 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  val inv6 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv6 x = true
  use seq.Seq
  predicate invariant5 (self : Seq.seq (usize, usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : Seq.seq (usize, usize)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq (usize, usize))
  val inv5 (_x : Seq.seq (usize, usize)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq (usize, usize) . inv5 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant4 (self : Core_Option_Option_Type.t_option (usize, usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Core_Option_Option_Type.t_option (usize, usize)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Core_Option_Option_Type.t_option (usize, usize))
  val inv4 (_x : Core_Option_Option_Type.t_option (usize, usize)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Core_Option_Option_Type.t_option (usize, usize) . inv4 x = true
  use seq.Seq
  predicate inv3 (_x : Seq.seq usize)
  val inv3 (_x : Seq.seq usize) : bool
    ensures { result = inv3 _x }
    
  predicate inv2 (_x : Core_Ops_Range_Range_Type.t_range usize)
  val inv2 (_x : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = inv2 _x }
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  function deep_model0 (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model0 (self : usize) : int
    ensures { result = deep_model0 self }
    
  predicate produces1 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model0 (Core_Ops_Range_Range_Type.range_start self) <= deep_model0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model0 (Core_Ops_Range_Range_Type.range_start o) - deep_model0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model0 (Seq.get visited i) = deep_model0 (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces1 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = produces1 self visited o }
    
  function produces_trans1 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  val produces_trans1 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces1 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces1 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv2 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv3 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv2 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv3 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv2 c}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces1 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces1 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv2 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv3 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv2 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv3 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv2 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl1 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  val produces_refl1 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv2 self}
    ensures { result = produces_refl1 self }
    
  axiom produces_refl1_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv2 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces1 self (Seq.empty ) self)
  predicate invariant3 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Seq.seq usize) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : Seq.seq usize . inv3 x = true
  predicate invariant2 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv2 x = true
  use Core_Iter_Adapters_Enumerate_Enumerate_Type as Core_Iter_Adapters_Enumerate_Enumerate_Type
  predicate invariant1 (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))) : bool
    ensures { result = invariant1 self }
    
  predicate inv0 (_x : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    
  val inv0 (_x : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = inv0 _x }
    
  predicate inv1 (_x : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)))
    
  val inv1 (_x : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) . inv1 x
  = (inv0 ( * x) /\ inv0 ( ^ x))
  use seq.Seq
  use seq.Seq
  function iter0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : Core_Ops_Range_Range_Type.t_range usize
    
  val iter0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : Core_Ops_Range_Range_Type.t_range usize
    ensures { result = iter0 self }
    
  function n0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : int
    
  val n0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : int
    ensures { result = n0 self }
    
  use seq.Seq
  predicate produces0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (visited : Seq.seq (usize, usize)) (o : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 62 8 67 9] Seq.length visited = n0 o - n0 self
    /\ (exists s : Seq.seq usize . inv3 s
    /\ produces1 (iter0 self) s (iter0 o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> UIntSize.to_int (let (a, _) = Seq.get visited i in a) = n0 self + i
    /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  val produces0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (visited : Seq.seq (usize, usize)) (o : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = produces0 self visited o }
    
  function produces_trans0 (a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (ab : Seq.seq (usize, usize)) (b : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (bc : Seq.seq (usize, usize)) (c : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : ()
    
  val produces_trans0 (a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (ab : Seq.seq (usize, usize)) (b : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (bc : Seq.seq (usize, usize)) (c : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 77 15 77 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 78 15 78 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 22 80 23] inv0 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 31 80 33] inv5 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 52 80 53] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 61 80 63] inv5 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 82 80 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize), ab : Seq.seq (usize, usize), b : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize), bc : Seq.seq (usize, usize), c : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize) . ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 77 15 77 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 78 15 78 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 22 80 23] inv0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 31 80 33] inv5 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 52 80 53] inv0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 61 80 63] inv5 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 80 82 80 83] inv0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 79 14 79 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : ()
    
  val produces_refl0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 73 21 73 25] inv0 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize) . ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 73 21 73 25] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 72 14 72 45] produces0 self (Seq.empty ) self)
  predicate resolve5 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve5 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = resolve5 self }
    
  predicate completed1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve5 self
    /\ deep_model0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model0 (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = completed1 self }
    
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  predicate invariant0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    
  val invariant0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize) . inv0 x
  = (invariant0 x
  /\ match x with
    | Core_Iter_Adapters_Enumerate_Enumerate_Type.C_Enumerate iter count -> true
    end)
  use prelude.Snapshot
  predicate resolve4 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve4 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = resolve4 self }
    
  predicate resolve2 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 33 12 33 33] resolve4 (iter0 self)
  val resolve2 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve3 (self : usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve3 (self : usize) : bool
    ensures { result = resolve3 self }
    
  predicate resolve1 (self : (usize, usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve3 (let (a, _) = self in a)
    /\ resolve3 (let (_, a) = self in a)
  val resolve1 (self : (usize, usize)) : bool
    ensures { result = resolve1 self }
    
  use seq.Seq
  predicate resolve0 (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)))
    
   =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/enumerate.rs" 56 8 56 115] exists inner : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv6 inner
    /\  * inner = iter0 ( * self) /\  ^ inner = iter0 ( ^ self) /\ completed1 inner
  val completed0 (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))) : Core_Option_Option_Type.t_option (usize, usize)
    requires {inv1 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv4 result }
    
  use prelude.Snapshot
  function index_logic0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq (usize, usize))) (ix : int) : (usize, usize)
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33] Seq.get (Snapshot.inner self) ix
  val index_logic0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq (usize, usize))) (ix : int) : (usize, usize)
    ensures { result = index_logic0 self ix }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (res : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) (res : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)) : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv0 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    ensures { inv0 result }
    
  val enumerate0 (self : Core_Ops_Range_Range_Type.t_range usize) : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize)
    requires {inv2 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] iter0 result = self /\ n0 result = 0 }
    ensures { inv0 result }
    
  let rec cfg enumerate_range [#"../03_std_iterators.rs" 72 0 72 24] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize);
  var _2 : Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize);
  var _3 : Core_Ops_Range_Range_Type.t_range usize;
  var iter_old : Snapshot.snap_ty (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize));
  var produced : Snapshot.snap_ty (Seq.seq (usize, usize));
  var _12 : Core_Option_Option_Type.t_option (usize, usize);
  var _13 : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize));
  var _14 : borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize));
  var __creusot_proc_iter_elem : (usize, usize);
  var _17 : Snapshot.snap_ty (Seq.seq (usize, usize));
  var ix : usize;
  var x : usize;
  var _21 : (usize, usize);
  {
    goto BB0
  }
  BB0 {
    [#"../03_std_iterators.rs" 74 19 74 26] _3 <- Core_Ops_Range_Range_Type.C_Range ([#"../03_std_iterators.rs" 74 20 74 21] (0 : usize)) ([#"../03_std_iterators.rs" 74 23 74 25] (10 : usize));
    [#"../03_std_iterators.rs" 74 19 74 38] _2 <- ([#"../03_std_iterators.rs" 74 19 74 38] enumerate0 _3);
    _3 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB1
  }
  BB1 {
    [#"../03_std_iterators.rs" 73 4 73 96] iter <- ([#"../03_std_iterators.rs" 73 4 73 96] into_iter0 _2);
    _2 <- any Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize);
    goto BB2
  }
  BB2 {
    [#"../03_std_iterators.rs" 73 4 73 96] iter_old <- ([#"../03_std_iterators.rs" 73 4 73 96] Snapshot.new iter);
    goto BB3
  }
  BB3 {
    [#"../03_std_iterators.rs" 73 4 73 96] produced <- ([#"../03_std_iterators.rs" 73 4 73 96] Snapshot.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant { [#"../03_std_iterators.rs" 73 4 73 96] inv0 iter };
    invariant { [#"../03_std_iterators.rs" 73 4 73 96] produces0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter };
    invariant { [#"../03_std_iterators.rs" 73 4 73 96] forall i : int . 0 <= i
    /\ i < Seq.length (Snapshot.inner produced)
     -> (let (a, _) = index_logic0 produced i in a) = (let (_, a) = index_logic0 produced i in a) };
    goto BB6
  }
  BB6 {
    [#"../03_std_iterators.rs" 73 4 73 96] _14 <- Borrow.borrow_mut iter;
    [#"../03_std_iterators.rs" 73 4 73 96] iter <-  ^ _14;
    assume { inv0 ( ^ _14) };
    [#"../03_std_iterators.rs" 73 4 73 96] _13 <- Borrow.borrow_final ( * _14) (Borrow.get_id _14);
    [#"../03_std_iterators.rs" 73 4 73 96] _14 <- { _14 with current = ( ^ _13) ; };
    assume { inv0 ( ^ _13) };
    [#"../03_std_iterators.rs" 73 4 73 96] _12 <- ([#"../03_std_iterators.rs" 73 4 73 96] next0 _13);
    _13 <- any borrowed (Core_Iter_Adapters_Enumerate_Enumerate_Type.t_enumerate (Core_Ops_Range_Range_Type.t_range usize));
    goto BB7
  }
  BB7 {
    assert { [@expl:type invariant] inv1 _14 };
    assume { resolve0 _14 };
    switch (_12)
      | Core_Option_Option_Type.C_None -> goto BB10
      | Core_Option_Option_Type.C_Some _ -> goto BB9
      end
  }
  BB8 {
    assert { [@expl:type invariant] inv0 iter };
    assume { resolve2 iter };
    assert { [#"../03_std_iterators.rs" 73 4 73 96] false };
    absurd
  }
  BB9 {
    goto BB11
  }
  BB10 {
    assert { [@expl:type invariant] inv0 iter };
    assume { resolve2 iter };
    [#"../03_std_iterators.rs" 73 4 73 96] _0 <- ([#"../03_std_iterators.rs" 73 4 73 96] ());
    return _0
  }
  BB11 {
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _12;
    [#"../03_std_iterators.rs" 73 4 73 96] _17 <- ([#"../03_std_iterators.rs" 73 4 73 96] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB12
  }
  BB12 {
    [#"../03_std_iterators.rs" 73 4 73 96] produced <- _17;
    _17 <- any Snapshot.snap_ty (Seq.seq (usize, usize));
    [#"../03_std_iterators.rs" 74 9 74 11] ix <- (let (a, _) = __creusot_proc_iter_elem in a);
    [#"../03_std_iterators.rs" 74 13 74 14] x <- (let (_, a) = __creusot_proc_iter_elem in a);
    assume { resolve1 __creusot_proc_iter_elem };
    [#"../03_std_iterators.rs" 75 16 75 23] _21 <- (ix, x);
    assume { resolve1 _21 };
    goto BB5
  }
  
end
module Core_Iter_Adapters_Zip_Zip_Type
  use prelude.UIntSize
  use prelude.Int
  type t_zip 'a 'b =
    | C_Zip 'a 'b usize usize usize
    
end
module C03StdIterators_MyReverse
  type t
  use prelude.UIntSize
  predicate invariant12 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant12 (self : usize) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : usize)
  val inv12 (_x : usize) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : usize . inv12 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant11 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant11 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  val inv11 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv11 x = true
  use seq.Seq
  predicate invariant10 (self : Seq.seq (usize, usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant10 (self : Seq.seq (usize, usize)) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : Seq.seq (usize, usize))
  val inv10 (_x : Seq.seq (usize, usize)) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Seq.seq (usize, usize) . inv10 x = true
  predicate invariant9 (self : Seq.seq t)
  val invariant9 (self : Seq.seq t) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : Seq.seq t)
  val inv9 (_x : Seq.seq t) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Seq.seq t . inv9 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant8 (self : Core_Option_Option_Type.t_option (usize, usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : Core_Option_Option_Type.t_option (usize, usize)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Core_Option_Option_Type.t_option (usize, usize))
  val inv8 (_x : Core_Option_Option_Type.t_option (usize, usize)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Core_Option_Option_Type.t_option (usize, usize) . inv8 x = true
  use Core_Iter_Adapters_Zip_Zip_Type as Core_Iter_Adapters_Zip_Zip_Type
  predicate invariant7 (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)))
    
  val inv7 (_x : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) . inv7 x
  = true
  use seq.Seq
  predicate inv6 (_x : Seq.seq usize)
  val inv6 (_x : Seq.seq usize) : bool
    ensures { result = inv6 _x }
    
  predicate inv5 (_x : Core_Ops_Range_Range_Type.t_range usize)
  val inv5 (_x : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = inv5 _x }
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  function deep_model0 (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model0 (self : usize) : int
    ensures { result = deep_model0 self }
    
  predicate produces1 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model0 (Core_Ops_Range_Range_Type.range_start self) <= deep_model0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model0 (Core_Ops_Range_Range_Type.range_start o) - deep_model0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model0 (Seq.get visited i) = deep_model0 (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces1 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = produces1 self visited o }
    
  function produces_trans1 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  val produces_trans1 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces1 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces1 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv5 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv6 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv5 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv6 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv5 c}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces1 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces1 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv5 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv6 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv5 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv6 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv5 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl1 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  val produces_refl1 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv5 self}
    ensures { result = produces_refl1 self }
    
  axiom produces_refl1_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv5 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces1 self (Seq.empty ) self)
  predicate invariant6 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : Seq.seq usize) : bool
    ensures { result = invariant6 self }
    
  axiom inv6 : forall x : Seq.seq usize . inv6 x = true
  predicate invariant5 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv5 x = true
  use prelude.Slice
  predicate invariant4 (self : slice t)
  val invariant4 (self : slice t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : slice t)
  val inv4 (_x : slice t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : slice t . inv4 x = true
  predicate invariant3 (self : borrowed (slice t))
  val invariant3 (self : borrowed (slice t)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed (slice t))
  val inv3 (_x : borrowed (slice t)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (slice t) . inv3 x = true
  predicate invariant2 (self : slice t)
  val invariant2 (self : slice t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : slice t)
  val inv2 (_x : slice t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : slice t . inv2 x = true
  use seq.Seq
  predicate inv1 (_x : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
    
  val inv1 (_x : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = inv1 _x }
    
  function iterb0 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : Core_Ops_Range_Range_Type.t_range usize
    
  val iterb0 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : Core_Ops_Range_Range_Type.t_range usize
    ensures { result = iterb0 self }
    
  function itera0 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : Core_Ops_Range_Range_Type.t_range usize
    
  val itera0 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : Core_Ops_Range_Range_Type.t_range usize
    ensures { result = itera0 self }
    
  use seq.Seq
  use seq.Seq
  predicate produces0 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (visited : Seq.seq (usize, usize)) (o : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 44 8 50 9] exists p2 : Seq.seq usize . exists p1 : Seq.seq usize . inv6 p2
    /\ inv6 p1
    /\ Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = (Seq.get p1 i, Seq.get p2 i))
    /\ produces1 (itera0 self) p1 (itera0 o) /\ produces1 (iterb0 self) p2 (iterb0 o)
  val produces0 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (visited : Seq.seq (usize, usize)) (o : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = produces0 self visited o }
    
  function produces_trans0 (a : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (ab : Seq.seq (usize, usize)) (b : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (bc : Seq.seq (usize, usize)) (c : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : ()
    
  val produces_trans0 (a : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (ab : Seq.seq (usize, usize)) (b : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (bc : Seq.seq (usize, usize)) (c : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 60 15 60 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 61 15 61 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 22 63 23] inv1 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 31 63 33] inv10 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 52 63 53] inv1 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 61 63 63] inv10 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 82 63 83] inv1 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize), ab : Seq.seq (usize, usize), b : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize), bc : Seq.seq (usize, usize), c : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize) . ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 60 15 60 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 61 15 61 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 22 63 23] inv1 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 31 63 33] inv10 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 52 63 53] inv1 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 61 63 63] inv10 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 63 82 63 83] inv1 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 62 14 62 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : ()
    
  val produces_refl0 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/zip.rs" 56 21 56 25] inv1 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize) . ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 56 21 56 25] inv1 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/zip.rs" 55 14 55 45] produces0 self (Seq.empty ) self)
  predicate invariant1 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize) . inv1 x
  = true
  use prelude.Snapshot
  predicate invariant0 (self : Snapshot.snap_ty (borrowed (slice t)))
  val invariant0 (self : Snapshot.snap_ty (borrowed (slice t))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Snapshot.snap_ty (borrowed (slice t)))
  val inv0 (_x : Snapshot.snap_ty (borrowed (slice t))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Snapshot.snap_ty (borrowed (slice t)) . inv0 x = true
  use seq.Seq
  use seq.Reverse
  use prelude.Slice
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  function shallow_model2 (self : slice t) : Seq.seq t
  val shallow_model2 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv2 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv2 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv9 (shallow_model2 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model2 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model2 self)
  <= UIntSize.to_int max0)
  predicate resolve3 (self : borrowed (slice t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve3 (self : borrowed (slice t)) : bool
    ensures { result = resolve3 self }
    
  use seq.Permut
  function shallow_model0 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model2 ( * self)
  val shallow_model0 (self : borrowed (slice t)) : Seq.seq t
    ensures { result = shallow_model0 self }
    
  val swap0 (self : borrowed (slice t)) (a : usize) (b : usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 247 19 247 35] UIntSize.to_int a
    < Seq.length (shallow_model0 self)}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 248 19 248 35] UIntSize.to_int b
    < Seq.length (shallow_model0 self)}
    requires {inv3 self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 249 8 249 52] Permut.exchange (shallow_model2 ( ^ self)) (shallow_model0 self) (UIntSize.to_int a) (UIntSize.to_int b) }
    
  predicate resolve4 (self : usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve4 (self : usize) : bool
    ensures { result = resolve4 self }
    
  predicate resolve2 (self : (usize, usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve4 (let (a, _) = self in a)
    /\ resolve4 (let (_, a) = self in a)
  val resolve2 (self : (usize, usize)) : bool
    ensures { result = resolve2 self }
    
  use seq.Seq
  predicate resolve1 (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)))
    
   =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))) : bool
    ensures { result = resolve1 self }
    
  use seq.Seq
  predicate resolve5 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve5 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = resolve5 self }
    
  predicate completed1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve5 self
    /\ deep_model0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model0 (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = completed1 self }
    
  predicate completed0 (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/zip.rs" 31 8 38 9] exists b : borrowed (Core_Ops_Range_Range_Type.t_range usize) . exists a : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv11 b
    /\ inv11 a
    /\  * a = itera0 ( * self)
    /\  * b = iterb0 ( * self)
    /\  ^ a = itera0 ( ^ self)
    /\  ^ b = iterb0 ( ^ self)
    /\ (completed1 a /\ resolve5 b
    \/ (exists x : usize . inv12 x /\ produces1 ( * a) (Seq.singleton x) ( ^ a) /\ resolve4 x /\ completed1 b))
  val completed0 (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))) : Core_Option_Option_Type.t_option (usize, usize)
    requires {inv7 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv8 result }
    
  use seq.Seq
  predicate equiv_reverse_range0 [#"../03_std_iterators.rs" 87 0 87 81] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) (n : int)
    
   =
    [#"../03_std_iterators.rs" 88 4 90 5] forall i : int . l <= i /\ i < u  -> Seq.get s1 i = Seq.get s2 (n - i)
  val equiv_reverse_range0 [#"../03_std_iterators.rs" 87 0 87 81] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) (n : int) : bool
    ensures { result = equiv_reverse_range0 s1 s2 l u n }
    
  predicate equiv_range0 [#"../03_std_iterators.rs" 80 0 80 65] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) =
    [#"../03_std_iterators.rs" 81 4 83 5] forall i : int . l <= i /\ i < u  -> Seq.get s1 i = Seq.get s2 i
  val equiv_range0 [#"../03_std_iterators.rs" 80 0 80 65] (s1 : Seq.seq t) (s2 : Seq.seq t) (l : int) (u : int) : bool
    ensures { result = equiv_range0 s1 s2 l u }
    
  use prelude.Snapshot
  function shallow_model4 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model0 self
  val shallow_model4 (self : borrowed (slice t)) : Seq.seq t
    ensures { result = shallow_model4 self }
    
  use prelude.Snapshot
  function shallow_model1 (self : Snapshot.snap_ty (borrowed (slice t))) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model4 (Snapshot.inner self)
  val shallow_model1 (self : Snapshot.snap_ty (borrowed (slice t))) : Seq.seq t
    ensures { result = shallow_model1 self }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post1 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (res : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post1 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) (res : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = into_iter_post1 self res }
    
  predicate into_iter_pre1 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre1 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = into_iter_pre1 self }
    
  val into_iter0 (self : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)) : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre1 self}
    requires {inv1 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post1 self result }
    ensures { inv1 result }
    
  predicate into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = into_iter_pre0 self }
    
  val zip0 (self : Core_Ops_Range_Range_Type.t_range usize) (other : Core_Ops_Range_Range_Type.t_range usize) : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize)
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 123 27 123 48] into_iter_pre0 other}
    requires {inv5 self}
    requires {inv5 other}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] itera0 result = self }
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 125 26 125 62] into_iter_post0 other (iterb0 result) }
    ensures { inv1 result }
    
  predicate resolve0 (self : Snapshot.snap_ty (borrowed (slice t)))
  val resolve0 (self : Snapshot.snap_ty (borrowed (slice t))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Snapshot
  function shallow_model3 (self : slice t) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model2 self
  val shallow_model3 (self : slice t) : Seq.seq t
    ensures { result = shallow_model3 self }
    
  val len0 (self : slice t) : usize
    requires {inv4 self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 238 0 334 1] Seq.length (shallow_model3 self)
    = UIntSize.to_int result }
    
  let rec cfg my_reverse [#"../03_std_iterators.rs" 94 0 94 37] [@cfg:stackify] [@cfg:subregion_analysis] (slice : borrowed (slice t)) : ()
    requires {[#"../03_std_iterators.rs" 94 21 94 26] inv3 slice}
    ensures { [#"../03_std_iterators.rs" 93 0 93 46] Seq.(==) (shallow_model2 ( ^ slice)) (Reverse.reverse (shallow_model0 slice)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var slice : borrowed (slice t) = slice;
  var n : usize;
  var old_v : Snapshot.snap_ty (borrowed (slice t));
  var iter : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize);
  var _8 : Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize);
  var _9 : Core_Ops_Range_Range_Type.t_range usize;
  var _10 : usize;
  var _12 : bool;
  var _13 : Core_Ops_Range_Range_Type.t_range usize;
  var _14 : usize;
  var _16 : bool;
  var iter_old : Snapshot.snap_ty (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize));
  var produced : Snapshot.snap_ty (Seq.seq (usize, usize));
  var _28 : Core_Option_Option_Type.t_option (usize, usize);
  var _29 : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize));
  var _30 : borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize));
  var __creusot_proc_iter_elem : (usize, usize);
  var _33 : Snapshot.snap_ty (Seq.seq (usize, usize));
  var i : usize;
  var j : usize;
  var _37 : ();
  var _38 : borrowed (slice t);
  var _40 : usize;
  var _41 : usize;
  {
    goto BB0
  }
  BB0 {
    [#"../03_std_iterators.rs" 95 12 95 23] n <- ([#"../03_std_iterators.rs" 95 12 95 23] len0 ( * slice));
    goto BB1
  }
  BB1 {
    [#"../03_std_iterators.rs" 96 36 96 55] old_v <- ([#"../03_std_iterators.rs" 96 36 96 55] Snapshot.new slice);
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] inv0 old_v };
    assume { resolve0 old_v };
    [#"../03_std_iterators.rs" 101 22 101 27] _12 <- ([#"../03_std_iterators.rs" 101 26 101 27] (2 : usize))
    = ([#"../03_std_iterators.rs" 101 22 101 27] (0 : usize));
    assert { [@expl:division by zero] [#"../03_std_iterators.rs" 101 22 101 27] not _12 };
    goto BB3
  }
  BB3 {
    [#"../03_std_iterators.rs" 101 22 101 27] _10 <- n / ([#"../03_std_iterators.rs" 101 26 101 27] (2 : usize));
    [#"../03_std_iterators.rs" 101 18 101 28] _9 <- Core_Ops_Range_Range_Type.C_Range ([#"../03_std_iterators.rs" 101 19 101 20] (0 : usize)) _10;
    _10 <- any usize;
    [#"../03_std_iterators.rs" 101 36 101 41] _16 <- ([#"../03_std_iterators.rs" 101 40 101 41] (2 : usize))
    = ([#"../03_std_iterators.rs" 101 36 101 41] (0 : usize));
    assert { [@expl:division by zero] [#"../03_std_iterators.rs" 101 36 101 41] not _16 };
    goto BB4
  }
  BB4 {
    [#"../03_std_iterators.rs" 101 36 101 41] _14 <- n / ([#"../03_std_iterators.rs" 101 40 101 41] (2 : usize));
    [#"../03_std_iterators.rs" 101 33 101 41] _13 <- Core_Ops_Range_Range_Type.C_Range ([#"../03_std_iterators.rs" 101 33 101 34] (0 : usize)) _14;
    _14 <- any usize;
    [#"../03_std_iterators.rs" 101 18 101 42] _8 <- ([#"../03_std_iterators.rs" 101 18 101 42] zip0 _9 _13);
    _9 <- any Core_Ops_Range_Range_Type.t_range usize;
    _13 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB5
  }
  BB5 {
    [#"../03_std_iterators.rs" 97 4 97 36] iter <- ([#"../03_std_iterators.rs" 97 4 97 36] into_iter0 _8);
    _8 <- any Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize);
    goto BB6
  }
  BB6 {
    [#"../03_std_iterators.rs" 97 4 97 36] iter_old <- ([#"../03_std_iterators.rs" 97 4 97 36] Snapshot.new iter);
    goto BB7
  }
  BB7 {
    [#"../03_std_iterators.rs" 97 4 97 36] produced <- ([#"../03_std_iterators.rs" 97 4 97 36] Snapshot.new (Seq.empty ));
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    invariant { [#"../03_std_iterators.rs" 97 4 97 36] inv1 iter };
    invariant { [#"../03_std_iterators.rs" 97 4 97 36] produces0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter };
    invariant { [#"../03_std_iterators.rs" 97 16 97 34] UIntSize.to_int n = Seq.length (shallow_model0 slice) };
    invariant { [#"../03_std_iterators.rs" 98 16 98 78] equiv_range0 (shallow_model0 slice) (shallow_model1 old_v) (Seq.length (Snapshot.inner produced)) (UIntSize.to_int n
    - Seq.length (Snapshot.inner produced)) };
    invariant { [#"../03_std_iterators.rs" 99 16 99 76] equiv_reverse_range0 (shallow_model0 slice) (shallow_model1 old_v) 0 (Seq.length (Snapshot.inner produced)) (UIntSize.to_int n
    - 1) };
    invariant { [#"../03_std_iterators.rs" 100 16 100 80] equiv_reverse_range0 (shallow_model0 slice) (shallow_model1 old_v) (UIntSize.to_int n
    - Seq.length (Snapshot.inner produced)) (UIntSize.to_int n) (UIntSize.to_int n - 1) };
    goto BB10
  }
  BB10 {
    [#"../03_std_iterators.rs" 97 4 97 36] _30 <- Borrow.borrow_mut iter;
    [#"../03_std_iterators.rs" 97 4 97 36] iter <-  ^ _30;
    [#"../03_std_iterators.rs" 97 4 97 36] _29 <- Borrow.borrow_final ( * _30) (Borrow.get_id _30);
    [#"../03_std_iterators.rs" 97 4 97 36] _30 <- { _30 with current = ( ^ _29) ; };
    [#"../03_std_iterators.rs" 97 4 97 36] _28 <- ([#"../03_std_iterators.rs" 97 4 97 36] next0 _29);
    _29 <- any borrowed (Core_Iter_Adapters_Zip_Zip_Type.t_zip (Core_Ops_Range_Range_Type.t_range usize) (Core_Ops_Range_Range_Type.t_range usize));
    goto BB11
  }
  BB11 {
    assume { resolve1 _30 };
    switch (_28)
      | Core_Option_Option_Type.C_None -> goto BB14
      | Core_Option_Option_Type.C_Some _ -> goto BB13
      end
  }
  BB12 {
    assert { [@expl:type invariant] inv3 slice };
    assume { resolve3 slice };
    assert { [#"../03_std_iterators.rs" 97 4 97 36] false };
    absurd
  }
  BB13 {
    goto BB15
  }
  BB14 {
    assert { [@expl:type invariant] inv3 slice };
    assume { resolve3 slice };
    [#"../03_std_iterators.rs" 97 4 97 36] _0 <- ([#"../03_std_iterators.rs" 97 4 97 36] ());
    return _0
  }
  BB15 {
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _28;
    [#"../03_std_iterators.rs" 97 4 97 36] _33 <- ([#"../03_std_iterators.rs" 97 4 97 36] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB16
  }
  BB16 {
    [#"../03_std_iterators.rs" 97 4 97 36] produced <- _33;
    _33 <- any Snapshot.snap_ty (Seq.seq (usize, usize));
    [#"../03_std_iterators.rs" 101 9 101 10] i <- (let (a, _) = __creusot_proc_iter_elem in a);
    [#"../03_std_iterators.rs" 101 12 101 13] j <- (let (_, a) = __creusot_proc_iter_elem in a);
    assume { resolve2 __creusot_proc_iter_elem };
    [#"../03_std_iterators.rs" 102 8 102 13] _38 <- Borrow.borrow_mut ( * slice);
    [#"../03_std_iterators.rs" 102 8 102 13] slice <- { slice with current = ( ^ _38) ; };
    assume { inv2 ( ^ _38) };
    [#"../03_std_iterators.rs" 102 22 102 27] _41 <- n - j;
    [#"../03_std_iterators.rs" 102 22 102 31] _40 <- _41 - ([#"../03_std_iterators.rs" 102 30 102 31] (1 : usize));
    _41 <- any usize;
    [#"../03_std_iterators.rs" 102 8 102 32] _37 <- ([#"../03_std_iterators.rs" 102 8 102 32] swap0 _38 i _40);
    _38 <- any borrowed (slice t);
    _40 <- any usize;
    goto BB17
  }
  BB17 {
    goto BB9
  }
  
end
