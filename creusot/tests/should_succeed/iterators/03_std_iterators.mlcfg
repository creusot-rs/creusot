
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model self
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model_Stub
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Slice
  val ghost function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Slice
  val ghost function model (self : seq t) : Seq.seq t
    ensures { Seq.length result <= UInt64.to_int (18446744073709551615 : usize) }
    ensures { result = Slice.id self }
    
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Slice
  val ghost function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Slice.id self && Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module CreusotContracts_Std1_Slice_Impl9_Model_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  val ghost function model (self : Core_Slice_Iter_Iter_Type.t_iter t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl9_Model_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  val ghost function model (self : Core_Slice_Iter_Iter_Type.t_iter t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl9_Model
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  val ghost function model (self : Core_Slice_Iter_Iter_Type.t_iter t) : Seq.seq t
end
module Core_Slice_Impl0_Iter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model1 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl9_Model_Stub as Model0 with type t = t
  val iter [@cfg:stackify] (self : seq t) : Core_Slice_Iter_Iter_Type.t_iter t
    ensures { Model0.model result = Model1.model self }
    
end
module Core_Slice_Impl0_Iter
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl9_Model_Interface as Model0 with type t = t
  val iter [@cfg:stackify] (self : seq t) : Core_Slice_Iter_Iter_Type.t_iter t
    ensures { Model0.model result = Model1.model self }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Std1_Slice_Impl11_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  val ghost predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl11_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  val ghost predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl11_Completed
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl9_Model_Stub as Model0 with type t = t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub as Resolve0 with type t = Core_Slice_Iter_Iter_Type.t_iter t
  let rec ghost predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
   = [@vc:do_not_keep_trace] [@vc:sp]
    Resolve0.resolve self && (let a = Model0.model ( * self) in pure {a = Seq.empty })
end
module CreusotContracts_Std1_Slice_Impl11_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  val ghost predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (rhs : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl11_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  val ghost predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (rhs : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl11_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use mach.int.Int
  use seq_ext.SeqExt
  clone CreusotContracts_Std1_Slice_Impl9_Model_Stub as Model0 with type t = t
  let rec ghost predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (rhs : Core_Slice_Iter_Iter_Type.t_iter t)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    (let b = Seq.length visited + (let a' = Model0.model rhs in Seq.length a') in let a = let a' = Model0.model self in Seq.length a' in pure {a = b}) && (let a' = let a' = Model0.model self in let c' = let a' = Model0.model self in Seq.length a' in SeqExt.subsequence a' (Seq.length visited) c' in let b' = Model0.model rhs in Seq.(==) a' b') && pure {forall i : int . 0 <= i /\ i < Seq.length visited -> Seq.get (Model0.model self) i = Seq.get visited i}
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module Core_Slice_Iter_Impl181_Item_Type
  type t
  use prelude.Borrow
  type item  =
    t
end
module Core_Slice_Iter_Impl181_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Slice_Iter_Impl181_Item_Type as Item1 with type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl11_Produces_Stub as Produces0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl11_Completed_Stub as Completed0 with type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = Core_Slice_Iter_Iter_Type.t_iter t
  val next [@cfg:stackify] (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Slice_Iter_Impl181_Next
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Slice_Iter_Impl181_Item_Type as Item1 with type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl11_Produces_Interface as Produces0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl11_Completed_Interface as Completed0 with type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = Core_Slice_Iter_Iter_Type.t_iter t
  val next [@cfg:stackify] (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
  let function ghost_0 (self : t_ghost 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ghost a -> a
      end
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Std1_Slice_Impl11_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl11_Produces_Stub as Produces0 with type t = t
  val ghost function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
end
module CreusotContracts_Std1_Slice_Impl11_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl11_Produces_Stub as Produces0 with type t = t
  val ghost function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { Produces0.produces a (Seq.empty ) a }
    
end
module CreusotContracts_Std1_Slice_Impl11_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl11_Produces_Stub as Produces0 with type t = t
  let rec ghost function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : () = [@vc:do_not_keep_trace] [@vc:sp]
    ()
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl11_ProducesRefl_Impl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl9_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl11_Produces as Produces0 with type t = t, val Model0.model = Model0.model
  let rec ghost function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module CreusotContracts_Std1_Slice_Impl11_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl11_Produces_Stub as Produces0 with type t = t
  val ghost function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl11_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl11_Produces_Stub as Produces0 with type t = t
  val ghost function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { Produces0.produces a (Seq.(++) ab bc) c }
    
end
module CreusotContracts_Std1_Slice_Impl11_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl11_Produces_Stub as Produces0 with type t = t
  let rec ghost function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Slice_Impl11_ProducesTrans_Impl
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl9_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl11_Produces as Produces0 with type t = t, val Model0.model = Model0.model
  let rec ghost function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module C03StdIterators_SliceIter_Interface
  type t
  use mach.int.Int
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model0 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val slice_iter [@cfg:stackify] (slice : seq t) : usize
    requires {[#"../03_std_iterators.rs" 4 11 4 32] Seq.length (Model0.model slice) < 1000}
    ensures { [#"../03_std_iterators.rs" 5 10 5 35] UInt64.to_int result = Seq.length (Model0.model slice) }
    
end
module C03StdIterators_SliceIter
  type t
  use mach.int.Int
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model1 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  use prelude.IntSize
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl9_Model as Model2 with type t = t
  clone CreusotContracts_Std1_Slice_Impl11_Completed as Completed0 with type t = t,
    val Resolve0.resolve = Resolve6.resolve, val Model0.model = Model2.model
  clone Core_Slice_Iter_Impl181_Item_Type as Item0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl11_Produces as Produces0 with type t = t, val Model0.model = Model2.model
  clone CreusotContracts_Std1_Slice_Impl11_ProducesTrans as ProducesTrans0 with type t = t,
    val Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Std1_Slice_Impl11_ProducesRefl as ProducesRefl0 with type t = t,
    val Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with type t = t, type Item0.item = Item0.item,
    val Completed0.completed = Completed0.completed, val Produces0.produces = Produces0.produces
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq t)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Core_Slice_Iter_Iter_Type.t_iter t)
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with type i = Core_Slice_Iter_Iter_Type.t_iter t
  clone Core_Slice_Impl0_Iter_Interface as Iter1 with type t = t, val Model0.model = Model2.model,
    val Model1.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = seq t
  let rec cfg slice_iter [@cfg:stackify] [#"../03_std_iterators.rs" 6 0 6 42] (slice : seq t) : usize
    requires {[#"../03_std_iterators.rs" 4 11 4 32] Seq.length (Model0.model slice) < 1000}
    ensures { [#"../03_std_iterators.rs" 5 10 5 35] UInt64.to_int result = Seq.length (Model0.model slice) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var slice_1 : seq t;
  var i_4 : usize;
  var _5 : ();
  var iter_6 : Core_Slice_Iter_Iter_Type.t_iter t;
  var _7 : Core_Slice_Iter_Iter_Type.t_iter t;
  var _8 : seq t;
  var iter_old_9 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Core_Slice_Iter_Iter_Type.t_iter t);
  var _11 : ();
  var produced_12 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq t);
  var _15 : ();
  var _18 : ();
  var _19 : Core_Option_Option_Type.t_option t;
  var _20 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var _21 : isize;
  var i_22 : t;
  var _23 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq t);
  var _26 : ();
  var _27 : ();
  {
    slice_1 <- slice;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    _8 <- slice_1;
    assume { Resolve0.resolve slice_1 };
    _7 <- ([#"../03_std_iterators.rs" 9 13 9 25] Iter1.iter _8);
    goto BB1
  }
  BB1 {
    iter_6 <- ([#"../03_std_iterators.rs" 8 4 8 45] IntoIter0.into_iter _7);
    goto BB2
  }
  BB2 {
    _11 <- ();
    iter_old_9 <- ([#"../03_std_iterators.rs" 8 4 8 45] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter_6);
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve iter_old_9 };
    _15 <- ();
    produced_12 <- ([#"../03_std_iterators.rs" 8 4 8 45] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ));
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve produced_12 };
    goto BB5
  }
  BB5 {
    invariant structural { [#"../03_std_iterators.rs" 8 4 8 45] Produces0.produces (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 iter_old_9) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_12) iter_6 };
    invariant dummy { [#"../03_std_iterators.rs" 8 23 8 43] UInt64.to_int i_4 = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_12) };
    _20 <- borrow_mut iter_6;
    iter_6 <-  ^ _20;
    _19 <- ([#"../03_std_iterators.rs" 8 4 8 45] Next0.next _20);
    goto BB6
  }
  BB6 {
    switch (_19)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB9
      end
  }
  BB7 {
    assume { Resolve3.resolve iter_6 };
    assume { Resolve4.resolve _19 };
    _5 <- ();
    _0 <- i_4;
    return _0
  }
  BB8 {
    assume { Resolve3.resolve iter_6 };
    assume { Resolve4.resolve _19 };
    absurd
  }
  BB9 {
    assume { Resolve5.resolve i_22 };
    i_22 <- Core_Option_Option_Type.some_0 _19;
    assume { Resolve4.resolve _19 };
    assume { Resolve5.resolve i_22 };
    _26 <- ();
    _23 <- ([#"../03_std_iterators.rs" 8 4 8 45] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.snoc (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_12) i_22));
    goto BB10
  }
  BB10 {
    assume { Resolve2.resolve produced_12 };
    produced_12 <- _23;
    _23 <- any CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq t);
    i_4 <- ([#"../03_std_iterators.rs" 10 8 10 14] i_4 + (1 : usize));
    _18 <- ();
    goto BB5
  }
  
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy_Type
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Stub
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { Seq.length result <= UInt64.to_int (18446744073709551615 : usize) }
    
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module Alloc_Vec_Impl20_IntoIter_Interface
  type t
  type a
  use prelude.Borrow
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t, type a = a
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model1 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl9_Model_Stub as Model0 with type t = t
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : Core_Slice_Iter_Iter_Type.t_iter t
    ensures { Model0.model result = Model1.model self }
    
end
module Alloc_Vec_Impl20_IntoIter
  type t
  type a
  use prelude.Borrow
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t, type a = a
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl9_Model_Interface as Model0 with type t = t
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : Core_Slice_Iter_Iter_Type.t_iter t
    ensures { Model0.model result = Model1.model self }
    
end
module C03StdIterators_VecIter_Interface
  type t
  use mach.int.Int
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model0 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy
  val vec_iter [@cfg:stackify] (vec : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {[#"../03_std_iterators.rs" 15 11 15 30] Seq.length (Model0.model vec) < 1000}
    ensures { [#"../03_std_iterators.rs" 16 10 16 33] UInt64.to_int result = Seq.length (Model0.model vec) }
    
end
module C03StdIterators_VecIter
  type t
  use mach.int.Int
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  use prelude.IntSize
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl9_Model as Model2 with type t = t
  clone CreusotContracts_Std1_Slice_Impl11_Completed as Completed0 with type t = t,
    val Resolve0.resolve = Resolve6.resolve, val Model0.model = Model2.model
  clone Core_Slice_Iter_Impl181_Item_Type as Item0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl11_Produces as Produces0 with type t = t, val Model0.model = Model2.model
  clone CreusotContracts_Std1_Slice_Impl11_ProducesTrans as ProducesTrans0 with type t = t,
    val Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Std1_Slice_Impl11_ProducesRefl as ProducesRefl0 with type t = t,
    val Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with type t = t, type Item0.item = Item0.item,
    val Completed0.completed = Completed0.completed, val Produces0.produces = Produces0.produces
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq t)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Core_Slice_Iter_Iter_Type.t_iter t)
  clone Alloc_Vec_Impl20_IntoIter_Interface as IntoIter0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    val Model0.model = Model2.model, val Model1.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  let rec cfg vec_iter [@cfg:stackify] [#"../03_std_iterators.rs" 17 0 17 41] (vec : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {[#"../03_std_iterators.rs" 15 11 15 30] Seq.length (Model0.model vec) < 1000}
    ensures { [#"../03_std_iterators.rs" 16 10 16 33] UInt64.to_int result = Seq.length (Model0.model vec) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var vec_1 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var i_4 : usize;
  var _5 : ();
  var iter_6 : Core_Slice_Iter_Iter_Type.t_iter t;
  var _7 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var iter_old_8 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Core_Slice_Iter_Iter_Type.t_iter t);
  var _10 : ();
  var produced_11 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq t);
  var _14 : ();
  var _17 : ();
  var _18 : Core_Option_Option_Type.t_option t;
  var _19 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var _20 : isize;
  var i_21 : t;
  var _22 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq t);
  var _25 : ();
  var _26 : ();
  {
    vec_1 <- vec;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    _7 <- vec_1;
    assume { Resolve0.resolve vec_1 };
    iter_6 <- ([#"../03_std_iterators.rs" 19 4 19 45] IntoIter0.into_iter _7);
    goto BB1
  }
  BB1 {
    _10 <- ();
    iter_old_8 <- ([#"../03_std_iterators.rs" 19 4 19 45] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter_6);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve iter_old_8 };
    _14 <- ();
    produced_11 <- ([#"../03_std_iterators.rs" 19 4 19 45] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ));
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve produced_11 };
    goto BB4
  }
  BB4 {
    invariant structural { [#"../03_std_iterators.rs" 19 4 19 45] Produces0.produces (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 iter_old_8) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_11) iter_6 };
    invariant dummy { [#"../03_std_iterators.rs" 19 23 19 43] UInt64.to_int i_4 = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_11) };
    _19 <- borrow_mut iter_6;
    iter_6 <-  ^ _19;
    _18 <- ([#"../03_std_iterators.rs" 19 4 19 45] Next0.next _19);
    goto BB5
  }
  BB5 {
    switch (_18)
      | Core_Option_Option_Type.C_None -> goto BB6
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB6 {
    assume { Resolve3.resolve iter_6 };
    assume { Resolve4.resolve _18 };
    _5 <- ();
    _0 <- i_4;
    return _0
  }
  BB7 {
    assume { Resolve3.resolve iter_6 };
    assume { Resolve4.resolve _18 };
    absurd
  }
  BB8 {
    assume { Resolve5.resolve i_21 };
    i_21 <- Core_Option_Option_Type.some_0 _18;
    assume { Resolve4.resolve _18 };
    assume { Resolve5.resolve i_21 };
    _25 <- ();
    _22 <- ([#"../03_std_iterators.rs" 19 4 19 45] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.snoc (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_11) i_21));
    goto BB9
  }
  BB9 {
    assume { Resolve2.resolve produced_11 };
    produced_11 <- _22;
    _22 <- any CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq t);
    i_4 <- ([#"../03_std_iterators.rs" 21 8 21 14] i_4 + (1 : usize));
    _17 <- ();
    goto BB4
  }
  
end
module CreusotContracts_Logic_Model_Impl1_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : borrowed t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model ( * self)
end
module Alloc_Vec_Impl11_DerefMut_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Stub as Model0 with type t = t, axiom .
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : borrowed (seq t)
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    
end
module Alloc_Vec_Impl11_DerefMut
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : borrowed (seq t)
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    
end
module Core_Slice_Iter_IterMut_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_itermut 't =
    | C_IterMut (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata (borrowed 't))
    
end
module CreusotContracts_Std1_Slice_Impl10_Model_Stub
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  val ghost function model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl10_Model_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  val ghost function model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (Seq.seq t)
    ensures { Seq.length ( ^ result) = Seq.length ( * result) }
    
end
module CreusotContracts_Std1_Slice_Impl10_Model
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  val ghost function model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (Seq.seq t)
  axiom model_spec : forall self : Core_Slice_Iter_IterMut_Type.t_itermut t . Seq.length ( ^ model self) = Seq.length ( * model self)
end
module Core_Slice_Impl0_IterMut_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl0_Model_Stub as Model2 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model_Stub as Model1 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl10_Model_Stub as Model0 with type t = t, axiom .
  val iter_mut [@cfg:stackify] (self : borrowed (seq t)) : Core_Slice_Iter_IterMut_Type.t_itermut t
    ensures {  * Model0.model result = Model1.model self }
    ensures {  ^ Model0.model result = Model2.model ( ^ self) }
    ensures { Seq.length ( ^ Model0.model result) = Seq.length (Model1.model self) }
    
end
module Core_Slice_Impl0_IterMut
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model2 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl10_Model_Interface as Model0 with type t = t, axiom .
  val iter_mut [@cfg:stackify] (self : borrowed (seq t)) : Core_Slice_Iter_IterMut_Type.t_itermut t
    ensures {  * Model0.model result = Model1.model self }
    ensures {  ^ Model0.model result = Model2.model ( ^ self) }
    ensures { Seq.length ( ^ Model0.model result) = Seq.length (Model1.model self) }
    
end
module CreusotContracts_Std1_Slice_Impl12_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  val ghost predicate completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t))
end
module CreusotContracts_Std1_Slice_Impl12_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  val ghost predicate completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t))
end
module CreusotContracts_Std1_Slice_Impl12_Completed
  type t
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl10_Model_Stub as Model0 with type t = t, axiom .
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub as Resolve0 with type t = Core_Slice_Iter_IterMut_Type.t_itermut t
  let rec ghost predicate completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t))
   = [@vc:do_not_keep_trace] [@vc:sp]
    Resolve0.resolve self && (let a =  * Model0.model ( * self) in pure {a = Seq.empty })
end
module CreusotContracts_Std1_Slice_Impl12_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  val ghost predicate produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t)
    
end
module CreusotContracts_Std1_Slice_Impl12_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  val ghost predicate produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t)
    
end
module CreusotContracts_Std1_Slice_Impl12_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  use mach.int.Int
  use seq_ext.SeqExt
  clone CreusotContracts_Std1_Slice_Impl10_Model_Stub as Model0 with type t = t, axiom .
  let rec ghost predicate produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    (let b = Seq.length visited + (let a' =  * Model0.model tl in Seq.length a') in let a = let a' =  * Model0.model self in Seq.length a' in pure {a = b}) && (let b = Seq.length visited + (let a' =  ^ Model0.model tl in Seq.length a') in let a = let a' =  ^ Model0.model self in Seq.length a' in pure {a = b}) && (let a' = let a' =  * Model0.model self in let c' = let a' =  * Model0.model self in Seq.length a' in SeqExt.subsequence a' (Seq.length visited) c' in let b' =  * Model0.model tl in Seq.(==) a' b') && (let a' = let a' =  ^ Model0.model self in let c' = let a' =  ^ Model0.model self in Seq.length a' in SeqExt.subsequence a' (Seq.length visited) c' in let b' =  ^ Model0.model tl in Seq.(==) a' b') && pure {forall i : int . 0 <= i /\ i < Seq.length visited -> Seq.get ( * Model0.model self) i =  * Seq.get visited i /\ Seq.get ( ^ Model0.model self) i =  ^ Seq.get visited i}
end
module Core_Slice_Iter_Impl187_Item_Type
  type t
  use prelude.Borrow
  type item  =
    borrowed t
end
module Core_Slice_Iter_Impl187_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Slice_Iter_Impl187_Item_Type as Item1 with type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl12_Produces_Stub as Produces0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl12_Completed_Stub as Completed0 with type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = Core_Slice_Iter_IterMut_Type.t_itermut t
  val next [@cfg:stackify] (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Slice_Iter_Impl187_Next
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Slice_Iter_Impl187_Item_Type as Item1 with type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl12_Produces_Interface as Produces0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl12_Completed_Interface as Completed0 with type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = Core_Slice_Iter_IterMut_Type.t_itermut t
  val next [@cfg:stackify] (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Slice_Impl12_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl12_Produces_Stub as Produces0 with type t = t
  val ghost function produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
end
module CreusotContracts_Std1_Slice_Impl12_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl12_Produces_Stub as Produces0 with type t = t
  val ghost function produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    ensures { Produces0.produces a (Seq.empty ) a }
    
end
module CreusotContracts_Std1_Slice_Impl12_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl12_Produces_Stub as Produces0 with type t = t
  let rec ghost function produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
  axiom produces_refl_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl12_ProducesRefl_Impl
  type t
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl10_Model as Model0 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl12_Produces as Produces0 with type t = t, val Model0.model = Model0.model
  let rec ghost function produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    ensures { Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module CreusotContracts_Std1_Slice_Impl12_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl12_Produces_Stub as Produces0 with type t = t
  val ghost function produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl12_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl12_Produces_Stub as Produces0 with type t = t
  val ghost function produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { Produces0.produces a (Seq.(++) ab bc) c }
    
end
module CreusotContracts_Std1_Slice_Impl12_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl12_Produces_Stub as Produces0 with type t = t
  let rec ghost function produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
  axiom produces_trans_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : Core_Slice_Iter_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : Core_Slice_Iter_IterMut_Type.t_itermut t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Slice_Impl12_ProducesTrans_Impl
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl10_Model as Model0 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl12_Produces as Produces0 with type t = t, val Model0.model = Model0.model
  let rec ghost function produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module C03StdIterators_AllZero_Interface
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Stub as Model1 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val all_zero [@cfg:stackify] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../03_std_iterators.rs" 26 10 26 35] Seq.length (Model0.model ( ^ v)) = Seq.length (Model1.model v) }
    ensures { [#"../03_std_iterators.rs" 27 0 27 69] forall i : int . 0 <= i /\ i < Seq.length (Model1.model v) -> UInt64.to_int (Seq.get (Model0.model ( ^ v)) i) = 0 }
    
end
module C03StdIterators_AllZero
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model0.model
  use prelude.Slice
  use prelude.IntSize
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Core_Slice_Iter_IterMut_Type.t_itermut usize
  clone CreusotContracts_Std1_Slice_Impl10_Model as Model3 with type t = usize, axiom .
  clone CreusotContracts_Std1_Slice_Impl12_Completed as Completed0 with type t = usize,
    val Resolve0.resolve = Resolve3.resolve, val Model0.model = Model3.model
  clone Core_Slice_Iter_Impl187_Item_Type as Item0 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl12_Produces as Produces0 with type t = usize, val Model0.model = Model3.model
  clone CreusotContracts_Std1_Slice_Impl12_ProducesTrans as ProducesTrans0 with type t = usize,
    val Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Std1_Slice_Impl12_ProducesRefl as ProducesRefl0 with type t = usize,
    val Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model2 with type t = usize, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model4 with type t = seq usize,
    type ModelTy0.modelTy = ModelTy1.modelTy, val Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = usize
  clone Core_Slice_Iter_Impl187_Next_Interface as Next0 with type t = usize, type Item0.item = Item0.item,
    val Completed0.completed = Completed0.completed, val Produces0.produces = Produces0.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with type i = Core_Slice_Iter_IterMut_Type.t_itermut usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = seq usize
  clone Core_Slice_Impl0_IterMut_Interface as IterMut1 with type t = usize, val Model0.model = Model3.model,
    val Model1.model = Model4.model, val Model2.model = Model2.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = usize, type a = Alloc_Alloc_Global_Type.t_global,
    val Model0.model = Model2.model, val Model1.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  let rec cfg all_zero [@cfg:stackify] [#"../03_std_iterators.rs" 28 0 28 35] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../03_std_iterators.rs" 26 10 26 35] Seq.length (Model0.model ( ^ v)) = Seq.length (Model1.model v) }
    ensures { [#"../03_std_iterators.rs" 27 0 27 69] forall i : int . 0 <= i /\ i < Seq.length (Model1.model v) -> UInt64.to_int (Seq.get (Model0.model ( ^ v)) i) = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var iter_4 : Core_Slice_Iter_IterMut_Type.t_itermut usize;
  var _5 : Core_Slice_Iter_IterMut_Type.t_itermut usize;
  var _6 : borrowed (seq usize);
  var _7 : borrowed (seq usize);
  var _8 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var iter_old_9 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Core_Slice_Iter_IterMut_Type.t_itermut usize);
  var _11 : ();
  var produced_12 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq (borrowed usize));
  var _15 : ();
  var _18 : ();
  var _19 : Core_Option_Option_Type.t_option (borrowed usize);
  var _20 : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize);
  var _21 : isize;
  var i_22 : borrowed usize;
  var _23 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq (borrowed usize));
  var _26 : ();
  var x_27 : borrowed usize;
  var _28 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _8) };
    assume { Resolve0.resolve v_1 };
    _7 <- ([#"../03_std_iterators.rs" 30 13 30 25] DerefMut0.deref_mut _8);
    goto BB1
  }
  BB1 {
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _5 <- ([#"../03_std_iterators.rs" 30 13 30 25] IterMut1.iter_mut _6);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _7 };
    iter_4 <- ([#"../03_std_iterators.rs" 29 4 29 91] IntoIter0.into_iter _5);
    goto BB3
  }
  BB3 {
    _11 <- ();
    iter_old_9 <- ([#"../03_std_iterators.rs" 29 4 29 91] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter_4);
    goto BB4
  }
  BB4 {
    _15 <- ();
    produced_12 <- ([#"../03_std_iterators.rs" 29 4 29 91] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ));
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant structural { [#"../03_std_iterators.rs" 29 4 29 91] Produces0.produces (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 iter_old_9) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_12) iter_4 };
    invariant user { [#"../03_std_iterators.rs" 29 4 29 91] forall i : int . 0 <= i /\ i < Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_12) -> UInt64.to_int ( ^ Seq.get (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_12) i) = 0 };
    _20 <- borrow_mut iter_4;
    iter_4 <-  ^ _20;
    _19 <- ([#"../03_std_iterators.rs" 29 4 29 91] Next0.next _20);
    goto BB7
  }
  BB7 {
    switch (_19)
      | Core_Option_Option_Type.C_None -> goto BB8
      | Core_Option_Option_Type.C_Some _ -> goto BB10
      end
  }
  BB8 {
    _0 <- ();
    return _0
  }
  BB9 {
    absurd
  }
  BB10 {
    assume { Resolve2.resolve i_22 };
    i_22 <- Core_Option_Option_Type.some_0 _19;
    _19 <- (let Core_Option_Option_Type.C_Some a = _19 in Core_Option_Option_Type.C_Some (any borrowed usize));
    _26 <- ();
    _23 <- ([#"../03_std_iterators.rs" 29 4 29 91] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.snoc (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_12) i_22));
    goto BB11
  }
  BB11 {
    produced_12 <- _23;
    _23 <- any CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq (borrowed usize));
    assume { Resolve2.resolve x_27 };
    x_27 <- i_22;
    i_22 <- any borrowed usize;
    x_27 <- { x_27 with current = (0 : usize) };
    assume { Resolve2.resolve x_27 };
    _18 <- ();
    goto BB6
  }
  
end
