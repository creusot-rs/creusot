module M_01_range__qyi16572111325853806140__produces_refl [#"01_range.rs" 44 4 44 26] (* <Range as common::Iterator> *)
  let%span s01_range0 = "01_range.rs" 43 14 43 45
  let%span s01_range1 = "01_range.rs" 41 4 41 10
  let%span s01_range2 = "01_range.rs" 33 12 37 46
  
  use seq.Seq
  
  use prelude.prelude.IntSize
  
  use seq.Seq
  
  type t_Range'0  =
    { t_Range__start'0: isize; t_Range__end'0: isize }
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.IntSize
  
  use seq.Seq
  
  predicate produces'0 [#"01_range.rs" 31 4 31 64] (self : t_Range'0) (visited : Seq.seq isize) (o : t_Range'0) =
    [%#s01_range2] self.t_Range__end'0 = o.t_Range__end'0
    /\ self.t_Range__start'0 <= o.t_Range__start'0
    /\ (Seq.length visited > 0  -> o.t_Range__start'0 <= o.t_Range__end'0)
    /\ Seq.length visited = IntSize.to_int o.t_Range__start'0 - IntSize.to_int self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int self.t_Range__start'0 + i)
  
  constant self  : t_Range'0
  
  function produces_refl'0 [#"01_range.rs" 44 4 44 26] (self : t_Range'0) : ()
  
  goal vc_produces_refl'0 : [%#s01_range0] produces'0 self (Seq.empty  : Seq.seq isize) self
end
module M_01_range__qyi16572111325853806140__produces_trans [#"01_range.rs" 51 4 51 90] (* <Range as common::Iterator> *)
  let%span s01_range0 = "01_range.rs" 48 15 48 32
  let%span s01_range1 = "01_range.rs" 49 15 49 32
  let%span s01_range2 = "01_range.rs" 50 14 50 42
  let%span s01_range3 = "01_range.rs" 46 4 46 10
  let%span s01_range4 = "01_range.rs" 33 12 37 46
  
  use prelude.prelude.IntSize
  
  type t_Range'0  =
    { t_Range__start'0: isize; t_Range__end'0: isize }
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.IntSize
  
  use seq.Seq
  
  predicate produces'0 [#"01_range.rs" 31 4 31 64] (self : t_Range'0) (visited : Seq.seq isize) (o : t_Range'0) =
    [%#s01_range4] self.t_Range__end'0 = o.t_Range__end'0
    /\ self.t_Range__start'0 <= o.t_Range__start'0
    /\ (Seq.length visited > 0  -> o.t_Range__start'0 <= o.t_Range__end'0)
    /\ Seq.length visited = IntSize.to_int o.t_Range__start'0 - IntSize.to_int self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int self.t_Range__start'0 + i)
  
  use seq.Seq
  
  constant a  : t_Range'0
  
  constant ab  : Seq.seq isize
  
  constant b  : t_Range'0
  
  constant bc  : Seq.seq isize
  
  constant c  : t_Range'0
  
  function produces_trans'0 [#"01_range.rs" 51 4 51 90] (a : t_Range'0) (ab : Seq.seq isize) (b : t_Range'0) (bc : Seq.seq isize) (c : t_Range'0) : ()
    
  
  goal vc_produces_trans'0 : ([%#s01_range1] produces'0 b bc c)
   -> ([%#s01_range0] produces'0 a ab b)  -> ([%#s01_range2] produces'0 a (Seq.(++) ab bc) c)
end
module M_01_range__qyi16572111325853806140__next [#"01_range.rs" 57 4 57 39] (* <Range as common::Iterator> *)
  let%span s01_range0 = "01_range.rs" 62 26 62 27
  let%span s01_range1 = "01_range.rs" 53 14 56 5
  let%span s01_range2 = "01_range.rs" 25 12 25 52
  let%span s01_range3 = "01_range.rs" 33 12 37 46
  let%span sresolve4 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.IntSize
  
  type t_Range'0  =
    { t_Range__start'0: isize; t_Range__end'0: isize }
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed (t_Range'0)) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Range'0)) =
    resolve'1 _1
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 isize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  predicate completed'0 [#"01_range.rs" 23 4 23 35] (self : borrowed (t_Range'0)) =
    [%#s01_range2] resolve'1 self /\ (self.current).t_Range__start'0 >= (self.current).t_Range__end'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.IntSize
  
  use seq.Seq
  
  predicate produces'0 [#"01_range.rs" 31 4 31 64] (self : t_Range'0) (visited : Seq.seq isize) (o : t_Range'0) =
    [%#s01_range3] self.t_Range__end'0 = o.t_Range__end'0
    /\ self.t_Range__start'0 <= o.t_Range__start'0
    /\ (Seq.length visited > 0  -> o.t_Range__start'0 <= o.t_Range__end'0)
    /\ Seq.length visited = IntSize.to_int o.t_Range__start'0 - IntSize.to_int self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int self.t_Range__start'0 + i)
  
  meta "compute_max_steps" 1000000
  
  let rec next'0 (self:borrowed (t_Range'0)) (return'  (ret:t_Option'0))= (! bb0
    [ bb0 = s0
      [ s0 = IntSize.ge {(self.current).t_Range__start'0} {(self.current).t_Range__end'0}
          (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1)
      | s1 = any [ br0 -> {_3 = false} (! bb2) | br1 -> {_3} (! bb1) ]  ]
      
    | bb1 = s0 [ s0 = -{resolve'0 self}- s1 | s1 =  [ &_0 <- C_None'0 ] s2 | s2 = bb3 ] 
    | bb2 = s0
      [ s0 =  [ &r <- (self.current).t_Range__start'0 ] s1
      | s1 = IntSize.add {(self.current).t_Range__start'0} {[%#s01_range0] (1 : isize)}
          (fun (_ret':isize) ->  [ &self <- { self with current = { self.current with t_Range__start'0 = _ret' } } ] s2)
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- C_Some'0 r ] s4
      | s4 = bb3 ]
      
    | bb3 = return' {_0} ]
    )
    [ & _0 : t_Option'0 = any_l ()
    | & self : borrowed (t_Range'0) = self
    | & _3 : bool = any_l ()
    | & r : isize = any_l () ]
    
    [ return' (result:t_Option'0)-> {[@expl:next ensures] [%#s01_range1] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_01_range__qyi2180657552132013455__into_iter [#"01_range.rs" 70 4 70 34] (* Range *)
  let%span s01_range0 = "01_range.rs" 69 14 69 28
  
  use prelude.prelude.IntSize
  
  type t_Range'0  =
    { t_Range__start'0: isize; t_Range__end'0: isize }
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- self ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : t_Range'0 = any_l () | & self : t_Range'0 = self ] 
    [ return' (result:t_Range'0)-> {[@expl:into_iter ensures] [%#s01_range0] result = self} (! return' {result}) ]
    
end
module M_01_range__sum_range [#"01_range.rs" 77 0 77 35]
  let%span s01_range0 = "01_range.rs" 78 16 78 17
  let%span s01_range1 = "01_range.rs" 79 32 79 33
  let%span s01_range2 = "01_range.rs" 80 19 80 35
  let%span s01_range3 = "01_range.rs" 81 23 81 47
  let%span s01_range4 = "01_range.rs" 84 16 84 46
  let%span s01_range5 = "01_range.rs" 83 16 83 55
  let%span s01_range6 = "01_range.rs" 82 16 82 23
  let%span s01_range7 = "01_range.rs" 88 27 88 75
  let%span s01_range8 = "01_range.rs" 89 21 89 22
  let%span s01_range9 = "01_range.rs" 75 11 75 18
  let%span s01_range10 = "01_range.rs" 76 10 76 21
  let%span s01_range11 = "01_range.rs" 69 14 69 28
  let%span s01_range12 = "01_range.rs" 33 12 37 46
  let%span s01_range13 = "01_range.rs" 53 14 56 5
  let%span s01_range14 = "01_range.rs" 43 14 43 45
  let%span s01_range15 = "01_range.rs" 41 4 41 10
  let%span s01_range16 = "01_range.rs" 48 15 48 32
  let%span s01_range17 = "01_range.rs" 49 15 49 32
  let%span s01_range18 = "01_range.rs" 50 14 50 42
  let%span s01_range19 = "01_range.rs" 46 4 46 10
  let%span s01_range20 = "01_range.rs" 25 12 25 52
  let%span sresolve21 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.IntSize
  
  type t_Range'0  =
    { t_Range__start'0: isize; t_Range__end'0: isize }
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= any
    [ return' (result:t_Range'0)-> {[%#s01_range11] result = self} (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.IntSize
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"01_range.rs" 31 4 31 64] (self : t_Range'0) (visited : Seq.seq isize) (o : t_Range'0) =
    [%#s01_range12] self.t_Range__end'0 = o.t_Range__end'0
    /\ self.t_Range__start'0 <= o.t_Range__start'0
    /\ (Seq.length visited > 0  -> o.t_Range__start'0 <= o.t_Range__end'0)
    /\ Seq.length visited = IntSize.to_int o.t_Range__start'0 - IntSize.to_int self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int self.t_Range__start'0 + i)
  
  function produces_trans'0 [#"01_range.rs" 51 4 51 90] (a : t_Range'0) (ab : Seq.seq isize) (b : t_Range'0) (bc : Seq.seq isize) (c : t_Range'0) : ()
    
   =
    [%#s01_range19] ()
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq isize, b : t_Range'0, bc : Seq.seq isize, c : t_Range'0 . ([%#s01_range16] produces'0 a ab b)
   -> ([%#s01_range17] produces'0 b bc c)  -> ([%#s01_range18] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"01_range.rs" 44 4 44 26] (self : t_Range'0) : () =
    [%#s01_range15] ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . [%#s01_range14] produces'0 self (Seq.empty  : Seq.seq isize) self
  
  predicate inv'0 (_1 : t_Range'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Range'0 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 isize
  
  predicate resolve'0 (self : borrowed (t_Range'0)) =
    [%#sresolve21] self.final = self.current
  
  predicate completed'0 [#"01_range.rs" 23 4 23 35] (self : borrowed (t_Range'0)) =
    [%#s01_range20] resolve'0 self /\ (self.current).t_Range__start'0 >= (self.current).t_Range__end'0
  
  use seq.Seq
  
  let rec next'0 (self:borrowed (t_Range'0)) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {[%#s01_range13] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:isize))= any
    [ good (field_0:isize)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : isize [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec sum_range'0 (n:isize) (return'  (ret:isize))= {[@expl:sum_range requires] [%#s01_range9] IntSize.to_int n
    >= 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &i <- [%#s01_range0] (0 : isize) ] s1
      | s1 =  [ &_6 <- { t_Range__start'0 = ([%#s01_range1] (0 : isize)); t_Range__end'0 = n } ] s2
      | s2 = into_iter'0 {_6} (fun (_ret':t_Range'0) ->  [ &it <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#s01_range2] Snapshot.new it ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &produced <- [%#s01_range3] Snapshot.new (Seq.empty  : Seq.seq isize) ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant #0] [%#s01_range6] inv'0 it}
        {[@expl:loop invariant #1] [%#s01_range5] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) it}
        {[@expl:loop invariant #2] [%#s01_range4] IntSize.to_int i = Seq.length (Snapshot.inner produced) /\ i <= n}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <t_Range'0> {it}
              (fun (_ret':borrowed (t_Range'0)) ->  [ &_19 <- _ret' ]  [ &it <- _ret'.final ] s1)
          | s1 = next'0 {_19} (fun (_ret':t_Option'0) ->  [ &_18 <- _ret' ] s2)
          | s2 = bb6 ]
          
        | bb6 = any [ br0 -> {_18 = C_None'0 } (! bb9) | br1 (x0:isize)-> {_18 = C_Some'0 x0} (! bb8) ] 
        | bb8 = bb10
        | bb10 = s0
          [ s0 = v_Some'0 {_18} (fun (r0'0:isize) ->  [ &x <- r0'0 ] s1)
          | s1 =  [ &_22 <- [%#s01_range7] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton x)) ] s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _22 ] s1
          | s1 = IntSize.add {i} {[%#s01_range8] (1 : isize)} (fun (_ret':isize) ->  [ &i <- _ret' ] s2)
          | s2 = bb4 ]
           ]
         ]
      
    | bb9 = s0 [ s0 =  [ &_0 <- i ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : isize = any_l ()
    | & n : isize = n
    | & i : isize = any_l ()
    | & it : t_Range'0 = any_l ()
    | & _6 : t_Range'0 = any_l ()
    | & iter_old : Snapshot.snap_ty (t_Range'0) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq isize) = any_l ()
    | & _18 : t_Option'0 = any_l ()
    | & _19 : borrowed (t_Range'0) = any_l ()
    | & x : isize = any_l ()
    | & _22 : Snapshot.snap_ty (Seq.seq isize) = any_l () ]
     [ return' (result:isize)-> {[@expl:sum_range ensures] [%#s01_range10] result = n} (! return' {result}) ] 
end
module M_01_range__qyi16572111325853806140__produces_trans__refines [#"01_range.rs" 51 4 51 90] (* <Range as common::Iterator> *)
  let%span s01_range0 = "01_range.rs" 51 4 51 90
  let%span s01_range1 = "01_range.rs" 33 12 37 46
  
  use prelude.prelude.IntSize
  
  type t_Range'0  =
    { t_Range__start'0: isize; t_Range__end'0: isize }
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.IntSize
  
  use seq.Seq
  
  predicate produces'0 [#"01_range.rs" 31 4 31 64] (self : t_Range'0) (visited : Seq.seq isize) (o : t_Range'0) =
    [%#s01_range1] self.t_Range__end'0 = o.t_Range__end'0
    /\ self.t_Range__start'0 <= o.t_Range__start'0
    /\ (Seq.length visited > 0  -> o.t_Range__start'0 <= o.t_Range__end'0)
    /\ Seq.length visited = IntSize.to_int o.t_Range__start'0 - IntSize.to_int self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int self.t_Range__start'0 + i)
  
  use seq.Seq
  
  goal refines : [%#s01_range0] forall a : t_Range'0 . forall ab : Seq.seq isize . forall b : t_Range'0 . forall bc : Seq.seq isize . forall c : t_Range'0 . produces'0 b bc c
  /\ produces'0 a ab b
   -> produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
module M_01_range__qyi16572111325853806140__next__refines [#"01_range.rs" 57 4 57 39] (* <Range as common::Iterator> *)
  let%span s01_range0 = "01_range.rs" 57 4 57 39
  let%span s01_range1 = "01_range.rs" 25 12 25 52
  let%span s01_range2 = "01_range.rs" 33 12 37 46
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.IntSize
  
  type t_Range'0  =
    { t_Range__start'0: isize; t_Range__end'0: isize }
  
  predicate inv'0 (_1 : borrowed (t_Range'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Range'0) [inv'0 x] . inv'0 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 isize
  
  predicate resolve'0 (self : borrowed (t_Range'0)) =
    [%#sresolve3] self.final = self.current
  
  use prelude.prelude.Int
  
  predicate completed'0 [#"01_range.rs" 23 4 23 35] (self : borrowed (t_Range'0)) =
    [%#s01_range1] resolve'0 self /\ (self.current).t_Range__start'0 >= (self.current).t_Range__end'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.IntSize
  
  use seq.Seq
  
  predicate produces'0 [#"01_range.rs" 31 4 31 64] (self : t_Range'0) (visited : Seq.seq isize) (o : t_Range'0) =
    [%#s01_range2] self.t_Range__end'0 = o.t_Range__end'0
    /\ self.t_Range__start'0 <= o.t_Range__start'0
    /\ (Seq.length visited > 0  -> o.t_Range__start'0 <= o.t_Range__end'0)
    /\ Seq.length visited = IntSize.to_int o.t_Range__start'0 - IntSize.to_int self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int self.t_Range__start'0 + i)
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x = true
  
  goal refines : [%#s01_range0] forall self : borrowed (t_Range'0) . inv'0 self
   -> (forall result : t_Option'0 . match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result)
end
module M_01_range__qyi16572111325853806140__produces_refl__refines [#"01_range.rs" 44 4 44 26] (* <Range as common::Iterator> *)
  let%span s01_range0 = "01_range.rs" 44 4 44 26
  let%span s01_range1 = "01_range.rs" 33 12 37 46
  
  use prelude.prelude.IntSize
  
  type t_Range'0  =
    { t_Range__start'0: isize; t_Range__end'0: isize }
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.IntSize
  
  use seq.Seq
  
  predicate produces'0 [#"01_range.rs" 31 4 31 64] (self : t_Range'0) (visited : Seq.seq isize) (o : t_Range'0) =
    [%#s01_range1] self.t_Range__end'0 = o.t_Range__end'0
    /\ self.t_Range__start'0 <= o.t_Range__start'0
    /\ (Seq.length visited > 0  -> o.t_Range__start'0 <= o.t_Range__end'0)
    /\ Seq.length visited = IntSize.to_int o.t_Range__start'0 - IntSize.to_int self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int self.t_Range__start'0 + i)
  
  goal refines : [%#s01_range0] forall self : t_Range'0 . forall result : () . produces'0 self (Seq.empty  : Seq.seq isize) self
   -> produces'0 self (Seq.empty  : Seq.seq isize) self
end
