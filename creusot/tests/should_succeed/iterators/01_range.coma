
module C01Range_Range_Type
  use prelude.prelude.IntSize
  
  use prelude.prelude.Int
  
  type t_range  =
    | C_Range isize isize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_range (input:t_range) (ret  (start:isize) (end':isize))= any
    [ good (start:isize) (end':isize)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:isize) (end':isize)-> {C_Range start end' <> input} {false} any ]
    
  
  function range_start [@inline:trivial] (self : t_range) : isize =
    match self with
      | C_Range a _ -> a
      end
  
  function range_end [@inline:trivial] (self : t_range) : isize =
    match self with
      | C_Range _ a -> a
      end
end
module CreusotContracts_Logic_Seq2_Seq_Type
  type t_seq 't
end
module C01Range_Impl0_ProducesRefl_Impl
  let%span s01_range0 = "../01_range.rs" 43 14 43 45
  
  let%span span1 = "../../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span2 = "../../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  let%span span3 = "../01_range.rs" 32 8 38 9
  
  use prelude.prelude.Int
  
  use prelude.prelude.IntSize
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  function len'0 (self : Seq'0.t_seq isize) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq isize . [%#span1] len'0 self >= 0
  
  constant empty'0 : Seq'0.t_seq isize
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span2] len'0 (empty'0 : Seq'0.t_seq isize) = 0
  
  use C01Range_Range_Type as Range'0
  
  function index_logic'0 (self : Seq'0.t_seq isize) (_2 : int) : isize
  
  use prelude.prelude.IntSize
  
  use C01Range_Range_Type as C01Range_Range_Type
  
  predicate produces'0 [#"../01_range.rs" 31 4 31 64] (self : Range'0.t_range) (visited : Seq'0.t_seq isize) (o : Range'0.t_range)
    
   =
    [%#span3] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o
    /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o
    /\ (len'0 visited > 0  -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o)
    /\ len'0 visited
    = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < len'0 visited
     -> IntSize.to_int (index_logic'0 visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  
  constant self  : Range'0.t_range
  
  function produces_refl [#"../01_range.rs" 44 4 44 26] (self : Range'0.t_range) : ()
  
  goal vc_produces_refl : [%#s01_range0] produces'0 self (empty'0 : Seq'0.t_seq isize) self
end
module C01Range_Impl0_ProducesTrans_Impl
  let%span s01_range0 = "../01_range.rs" 48 15 48 32
  
  let%span s01_range1 = "../01_range.rs" 49 15 49 32
  
  let%span s01_range2 = "../01_range.rs" 50 14 50 42
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span7 = "../01_range.rs" 32 8 38 9
  
  use prelude.prelude.Int
  
  use prelude.prelude.IntSize
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  function len'0 (self : Seq'0.t_seq isize) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq isize . [%#span3] len'0 self >= 0
  
  constant empty'0 : Seq'0.t_seq isize
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span4] len'0 (empty'0 : Seq'0.t_seq isize) = 0
  
  use C01Range_Range_Type as Range'0
  
  function index_logic'0 (self : Seq'0.t_seq isize) (_2 : int) : isize
  
  function concat'0 (self : Seq'0.t_seq isize) (other : Seq'0.t_seq isize) : Seq'0.t_seq isize
  
  axiom concat'0_spec : forall self : Seq'0.t_seq isize, other : Seq'0.t_seq isize . ([%#span6] forall i : int . 0 <= i
  /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span5] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  use prelude.prelude.IntSize
  
  use C01Range_Range_Type as C01Range_Range_Type
  
  predicate produces'0 [#"../01_range.rs" 31 4 31 64] (self : Range'0.t_range) (visited : Seq'0.t_seq isize) (o : Range'0.t_range)
    
   =
    [%#span7] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o
    /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o
    /\ (len'0 visited > 0  -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o)
    /\ len'0 visited
    = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < len'0 visited
     -> IntSize.to_int (index_logic'0 visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  
  constant a  : Range'0.t_range
  
  constant ab  : Seq'0.t_seq isize
  
  constant b  : Range'0.t_range
  
  constant bc  : Seq'0.t_seq isize
  
  constant c  : Range'0.t_range
  
  function produces_trans [#"../01_range.rs" 51 4 51 90] (a : Range'0.t_range) (ab : Seq'0.t_seq isize) (b : Range'0.t_range) (bc : Seq'0.t_seq isize) (c : Range'0.t_range) : ()
    
  
  goal vc_produces_trans : ([%#s01_range1] produces'0 b bc c)
   -> ([%#s01_range0] produces'0 a ab b)  -> ([%#s01_range2] produces'0 a (concat'0 ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C01Range_Impl0_Next
  let%span s01_range0 = "../01_range.rs" 62 26 62 27
  
  let%span s01_range1 = "../01_range.rs" 53 14 56 5
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  let%span span5 = "../01_range.rs" 32 8 38 9
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 54 21 54 22
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 52 14 52 31
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 53 14 53 28
  
  let%span span9 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span10 = "../01_range.rs" 25 12 25 52
  
  use prelude.prelude.IntSize
  
  predicate invariant'0 (self : isize) =
    [%#span2] true
  
  predicate inv'0 (_x : isize)
  
  axiom inv'0 : forall x : isize . inv'0 x = true
  
  use prelude.prelude.Int
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  function len'0 (self : Seq'0.t_seq isize) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq isize . [%#span3] len'0 self >= 0
  
  constant empty'0 : Seq'0.t_seq isize
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span4] len'0 (empty'0 : Seq'0.t_seq isize) = 0
  
  function index_logic'0 (self : Seq'0.t_seq isize) (_2 : int) : isize
  
  use prelude.prelude.IntSize
  
  use C01Range_Range_Type as C01Range_Range_Type
  
  use C01Range_Range_Type as Range'0
  
  predicate produces'0 [#"../01_range.rs" 31 4 31 64] (self : Range'0.t_range) (visited : Seq'0.t_seq isize) (o : Range'0.t_range)
    
   =
    [%#span5] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o
    /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o
    /\ (len'0 visited > 0  -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o)
    /\ len'0 visited
    = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < len'0 visited
     -> IntSize.to_int (index_logic'0 visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  
  function singleton'0 (v : isize) : Seq'0.t_seq isize
  
  axiom singleton'0_spec : forall v : isize . ([%#span6] inv'0 v)
   -> ([%#span8] index_logic'0 (singleton'0 v) 0 = v) && ([%#span7] len'0 (singleton'0 v) = 1)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (self : borrowed (Range'0.t_range)) =
    [%#span9]  ^ self =  * self
  
  predicate completed'0 [#"../01_range.rs" 23 4 23 35] (self : borrowed (Range'0.t_range)) =
    [%#span10] resolve'0 self /\ C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self)
  
  use prelude.prelude.Intrinsic
  
  use Core_Option_Option_Type as Option'0
  
  let rec next (self:borrowed (Range'0.t_range)) (return'  (ret:Option'0.t_option isize))= (! bb0
    [ bb0 = s0
      [ s0 = Range'0.t_range { * self}
          (fun (rstart'0:isize) (rend'0:isize) ->
            Range'0.t_range { * self}
              (fun (rstart'1:isize) (rend'1:isize) ->
                IntSize.ge {rstart'0} {rend'1} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1)))
      | s1 = any [ br0 -> {_3 = false} (! bb2) | br1 -> {_3} (! bb1) ]  ]
      
    | bb1 = s0 [ s0 = -{resolve'0 self}- s1 | s1 =  [ &_0 <- Option'0.C_None ] s2 | s2 = bb3 ] 
    | bb2 = s0
      [ s0 = Range'0.t_range { * self} (fun (rstart'0:isize) (rend'0:isize) ->  [ &r <- rstart'0 ] s1)
      | s1 = Range'0.t_range { * self}
          (fun (rstart'1:isize) (rend'1:isize) ->
            IntSize.add {rstart'1} {[%#s01_range0] (1 : isize)}
              (fun (_ret':isize) ->
                Range'0.t_range { * self}
                  (fun (l_start'0:isize) (l_end'0:isize) ->
                     [ &self <- { self with current = Range'0.C_Range _ret' l_end'0 ; } ] 
                    s2)))
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- Option'0.C_Some r ] s4
      | s4 = bb3 ]
      
    | bb3 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option isize = any_l ()
    | & self : borrowed (Range'0.t_range) = self
    | & _3 : bool = any_l ()
    | & r : isize = any_l () ]
    
    [ return' (result:Option'0.t_option isize)-> {[@expl:postcondition] [%#s01_range1] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C01Range_Impl1_IntoIter
  let%span s01_range0 = "../01_range.rs" 69 14 69 28
  
  use prelude.prelude.Intrinsic
  
  use C01Range_Range_Type as Range'0
  
  let rec into_iter (self:Range'0.t_range) (return'  (ret:Range'0.t_range))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- self ] (any [ any_ (_any:Range'0.t_range)-> (!  [ &self <- _any ] s1) ] ) | s1 = return' {_0} ]
       ]
    ) [ & _0 : Range'0.t_range = any_l () | & self : Range'0.t_range = self ] 
    [ return' (result:Range'0.t_range)-> {[@expl:postcondition] [%#s01_range0] result = self} (! return' {result}) ]
    
end
module CreusotContracts_Snapshot_Snapshot_Type
  type t_snapshot 't
end
module C01Range_SumRange
  let%span s01_range0 = "../01_range.rs" 78 16 78 17
  
  let%span s01_range1 = "../01_range.rs" 79 32 79 33
  
  let%span s01_range2 = "../01_range.rs" 80 19 80 35
  
  let%span s01_range3 = "../01_range.rs" 81 23 81 47
  
  let%span s01_range4 = "../01_range.rs" 82 16 82 23
  
  let%span s01_range5 = "../01_range.rs" 83 16 83 55
  
  let%span s01_range6 = "../01_range.rs" 84 16 84 46
  
  let%span s01_range7 = "../01_range.rs" 88 27 88 75
  
  let%span s01_range8 = "../01_range.rs" 89 21 89 22
  
  let%span s01_range9 = "../01_range.rs" 86 14 86 23
  
  let%span s01_range10 = "../01_range.rs" 75 11 75 18
  
  let%span s01_range11 = "../01_range.rs" 76 10 76 21
  
  let%span span12 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span16 = "../01_range.rs" 32 8 38 9
  
  let%span span17 = "../01_range.rs" 48 15 48 32
  
  let%span span18 = "../01_range.rs" 49 15 49 32
  
  let%span span19 = "../01_range.rs" 50 14 50 42
  
  let%span span20 = "../01_range.rs" 46 4 46 10
  
  let%span span21 = "../01_range.rs" 43 14 43 45
  
  let%span span22 = "../01_range.rs" 41 4 41 10
  
  let%span span23 = "../../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  let%span span24 = "../../../../../creusot-contracts/src/logic/seq2.rs" 54 21 54 22
  
  let%span span25 = "../../../../../creusot-contracts/src/logic/seq2.rs" 52 14 52 31
  
  let%span span26 = "../../../../../creusot-contracts/src/logic/seq2.rs" 53 14 53 28
  
  let%span span27 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span28 = "../01_range.rs" 25 12 25 52
  
  let%span span29 = "../01_range.rs" 53 14 56 5
  
  let%span span30 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span31 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span32 = "../01_range.rs" 69 14 69 28
  
  use prelude.prelude.IntSize
  
  predicate invariant'2 (self : isize) =
    [%#span12] true
  
  predicate inv'2 (_x : isize)
  
  axiom inv'2 : forall x : isize . inv'2 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'1 (self : Seq'0.t_seq isize) =
    [%#span12] true
  
  predicate inv'1 (_x : Seq'0.t_seq isize)
  
  axiom inv'1 : forall x : Seq'0.t_seq isize . inv'1 x = true
  
  use prelude.prelude.Int
  
  use C01Range_Range_Type as Range'0
  
  function index_logic'0 (self : Seq'0.t_seq isize) (_2 : int) : isize
  
  function len'0 (self : Seq'0.t_seq isize) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq isize . [%#span13] len'0 self >= 0
  
  function concat'0 (self : Seq'0.t_seq isize) (other : Seq'0.t_seq isize) : Seq'0.t_seq isize
  
  axiom concat'0_spec : forall self : Seq'0.t_seq isize, other : Seq'0.t_seq isize . ([%#span15] forall i : int . 0 <= i
  /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span14] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  use prelude.prelude.IntSize
  
  use C01Range_Range_Type as C01Range_Range_Type
  
  predicate produces'0 [#"../01_range.rs" 31 4 31 64] (self : Range'0.t_range) (visited : Seq'0.t_seq isize) (o : Range'0.t_range)
    
   =
    [%#span16] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o
    /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o
    /\ (len'0 visited > 0  -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o)
    /\ len'0 visited
    = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < len'0 visited
     -> IntSize.to_int (index_logic'0 visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  
  function produces_trans'0 [#"../01_range.rs" 51 4 51 90] (a : Range'0.t_range) (ab : Seq'0.t_seq isize) (b : Range'0.t_range) (bc : Seq'0.t_seq isize) (c : Range'0.t_range) : ()
    
   =
    [%#span20] ()
  
  axiom produces_trans'0_spec : forall a : Range'0.t_range, ab : Seq'0.t_seq isize, b : Range'0.t_range, bc : Seq'0.t_seq isize, c : Range'0.t_range . ([%#span17] produces'0 a ab b)
   -> ([%#span18] produces'0 b bc c)  -> ([%#span19] produces'0 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq isize
  
  function produces_refl'0 [#"../01_range.rs" 44 4 44 26] (self : Range'0.t_range) : () =
    [%#span22] ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_range . [%#span21] produces'0 self (empty'0 : Seq'0.t_seq isize) self
  
  predicate invariant'0 (self : Range'0.t_range) =
    [%#span12] true
  
  predicate inv'0 (_x : Range'0.t_range)
  
  axiom inv'0 : forall x : Range'0.t_range . inv'0 x = true
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span23] len'0 (empty'0 : Seq'0.t_seq isize) = 0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  function singleton'0 (v : isize) : Seq'0.t_seq isize
  
  axiom singleton'0_spec : forall v : isize . ([%#span24] inv'2 v)
   -> ([%#span26] index_logic'0 (singleton'0 v) 0 = v) && ([%#span25] len'0 (singleton'0 v) = 1)
  
  use Core_Option_Option_Type as Option'0
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (self : borrowed (Range'0.t_range)) =
    [%#span27]  ^ self =  * self
  
  predicate completed'0 [#"../01_range.rs" 23 4 23 35] (self : borrowed (Range'0.t_range)) =
    [%#span28] resolve'0 self /\ C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self)
  
  let rec next'0 (self:borrowed (Range'0.t_range)) (return'  (ret:Option'0.t_option isize))= any
    [ return' (result:Option'0.t_option isize)-> {[%#span29] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function deref'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq isize)) : Seq'0.t_seq isize
  
  function inner'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq isize)) : Seq'0.t_seq isize
  
  function deref'0 (self : Snapshot'0.t_snapshot (Range'0.t_range)) : Range'0.t_range
  
  function new'1 (x : Seq'0.t_seq isize) : Snapshot'0.t_snapshot (Seq'0.t_seq isize)
  
  axiom new'1_spec : forall x : Seq'0.t_seq isize . ([%#span30] inv'1 x)  -> ([%#span31] deref'1 (new'1 x) = x)
  
  function new'0 (x : Range'0.t_range) : Snapshot'0.t_snapshot (Range'0.t_range)
  
  axiom new'0_spec : forall x : Range'0.t_range . ([%#span30] inv'0 x)  -> ([%#span31] deref'0 (new'0 x) = x)
  
  let rec into_iter'0 (self:Range'0.t_range) (return'  (ret:Range'0.t_range))= any
    [ return' (result:Range'0.t_range)-> {[%#span32] result = self} (! return' {result}) ]
    
  
  let rec sum_range (n:isize) (return'  (ret:isize))= {[%#s01_range10] IntSize.to_int n >= 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &i <- [%#s01_range0] (0 : isize) ] s1
      | s1 =  [ &_6 <- Range'0.C_Range ([%#s01_range1] (0 : isize)) n ] s2
      | s2 = into_iter'0 {_6} (fun (_ret':Range'0.t_range) ->  [ &it <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#s01_range2] new'0 it ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &produced <- [%#s01_range3] new'1 (empty'0 : Seq'0.t_seq isize) ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [%#s01_range6] IntSize.to_int i = len'0 (deref'1 produced) /\ i <= n}
        {[@expl:loop invariant] [%#s01_range5] produces'0 (deref'0 iter_old) (inner'0 produced) it}
        {[@expl:loop invariant] [%#s01_range4] inv'0 it}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_range> {it}
              (fun (_ret':borrowed (Range'0.t_range)) ->  [ &_18 <- _ret' ]  [ &it <-  ^ _18 ] s1)
          | s1 = next'0 {_18} (fun (_ret':Option'0.t_option isize) ->  [ &_17 <- _ret' ] s2)
          | s2 = bb6 ]
          
        | bb6 = any [ br0 -> {_17 = Option'0.C_None } (! bb9) | br1 (a:isize)-> {_17 = Option'0.C_Some a} (! bb8) ] 
        | bb8 = bb10
        | bb10 = s0
          [ s0 = Option'0.some <isize> {_17} (fun (r0'0:isize) ->  [ &x <- r0'0 ] s1)
          | s1 =  [ &_21 <- [%#s01_range7] new'1 (concat'0 (deref'1 produced) (singleton'0 x)) ] s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _21 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq isize))-> (!  [ &_21 <- _any ] s1) ] )
          | s1 = IntSize.add {i} {[%#s01_range8] (1 : isize)} (fun (_ret':isize) ->  [ &i <- _ret' ] s2)
          | s2 = bb4 ]
           ]
         ]
      
    | bb7 = {[%#s01_range9] false} any
    | bb9 = s0 [ s0 =  [ &_0 <- i ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : isize = any_l ()
    | & n : isize = n
    | & i : isize = any_l ()
    | & it : Range'0.t_range = any_l ()
    | & _6 : Range'0.t_range = any_l ()
    | & iter_old : Snapshot'0.t_snapshot (Range'0.t_range) = any_l ()
    | & produced : Snapshot'0.t_snapshot (Seq'0.t_seq isize) = any_l ()
    | & _17 : Option'0.t_option isize = any_l ()
    | & _18 : borrowed (Range'0.t_range) = any_l ()
    | & x : isize = any_l ()
    | & _21 : Snapshot'0.t_snapshot (Seq'0.t_seq isize) = any_l () ]
     [ return' (result:isize)-> {[@expl:postcondition] [%#s01_range11] result = n} (! return' {result}) ] 
end
module C01Range_Impl0
  let%span s01_range0 = "../01_range.rs" 44 4 44 26
  
  let%span s01_range1 = "../01_range.rs" 51 4 51 90
  
  let%span s01_range2 = "../01_range.rs" 57 4 57 39
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 54 21 54 22
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 52 14 52 31
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 53 14 53 28
  
  let%span span8 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span9 = "../01_range.rs" 25 12 25 52
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span12 = "../01_range.rs" 32 8 38 9
  
  use prelude.prelude.IntSize
  
  predicate invariant'3 (self : isize) =
    [%#span3] true
  
  predicate inv'3 (_x : isize)
  
  axiom inv'3 : forall x : isize . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : Option'0.t_option isize) =
    [%#span3] true
  
  predicate inv'2 (_x : Option'0.t_option isize)
  
  axiom inv'2 : forall x : Option'0.t_option isize . inv'2 x = true
  
  use C01Range_Range_Type as Range'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (Range'0.t_range)) =
    [%#span3] true
  
  predicate inv'1 (_x : borrowed (Range'0.t_range))
  
  axiom inv'1 : forall x : borrowed (Range'0.t_range) . inv'1 x = true
  
  predicate invariant'0 (self : Range'0.t_range) =
    [%#span3] true
  
  predicate inv'0 (_x : Range'0.t_range)
  
  axiom inv'0 : forall x : Range'0.t_range . inv'0 x = true
  
  use prelude.prelude.Int
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  function index_logic'0 (self : Seq'0.t_seq isize) (_2 : int) : isize
  
  function len'0 (self : Seq'0.t_seq isize) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq isize . [%#span4] len'0 self >= 0
  
  function singleton'0 (v : isize) : Seq'0.t_seq isize
  
  axiom singleton'0_spec : forall v : isize . ([%#span5] inv'3 v)
   -> ([%#span7] index_logic'0 (singleton'0 v) 0 = v) && ([%#span6] len'0 (singleton'0 v) = 1)
  
  use C01Range_Range_Type as C01Range_Range_Type
  
  predicate resolve'0 (self : borrowed (Range'0.t_range)) =
    [%#span8]  ^ self =  * self
  
  predicate completed'0 [#"../01_range.rs" 23 4 23 35] (self : borrowed (Range'0.t_range)) =
    [%#span9] resolve'0 self /\ C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self)
  
  function concat'0 (self : Seq'0.t_seq isize) (other : Seq'0.t_seq isize) : Seq'0.t_seq isize
  
  axiom concat'0_spec : forall self : Seq'0.t_seq isize, other : Seq'0.t_seq isize . ([%#span11] forall i : int . 0 <= i
  /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span10] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  constant empty'0 : Seq'0.t_seq isize
  
  use prelude.prelude.IntSize
  
  predicate produces'0 [#"../01_range.rs" 31 4 31 64] (self : Range'0.t_range) (visited : Seq'0.t_seq isize) (o : Range'0.t_range)
    
   =
    [%#span12] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o
    /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o
    /\ (len'0 visited > 0  -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o)
    /\ len'0 visited
    = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < len'0 visited
     -> IntSize.to_int (index_logic'0 visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  
  constant empty'0 : Seq'0.t_seq isize
  
  goal produces_refl_refn : [%#s01_range0] forall self : Range'0.t_range . inv'0 self
   -> (forall result : () . produces'0 self (empty'0 : Seq'0.t_seq isize) self
   -> produces'0 self (empty'1 : Seq'0.t_seq isize) self)
  
  goal produces_trans_refn : [%#s01_range1] forall a : Range'0.t_range . forall ab : Seq'0.t_seq isize . forall b : Range'0.t_range . forall bc : Seq'0.t_seq isize . forall c : Range'0.t_range . inv'0 c
  /\ inv'0 b /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (concat'0 ab bc) c  -> produces'0 a (concat'0 ab bc) c)
  
  goal next_refn : [%#s01_range2] forall self : borrowed (Range'0.t_range) . inv'1 self
   -> (forall result : Option'0.t_option isize . match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
    end
   -> inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
    end)
end
