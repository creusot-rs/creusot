
module C01Range_Range_Type
  use prelude.IntSize
  use prelude.Int
  type t_range  =
    | C_Range isize isize
    
  function any_l (_ : 'b) : 'a
  let rec t_range (input:t_range) (ret  (start:isize) (end':isize))= any
    [ good (start:isize) (end':isize)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:isize) (end':isize)-> {C_Range start end' <> input} {false} any ]
    
  function range_start (self : t_range) : isize =
    match self with
      | C_Range a _ -> a
      end
  function range_end (self : t_range) : isize =
    match self with
      | C_Range _ a -> a
      end
end
module C01Range_Impl0_ProducesRefl_Impl
  use C01Range_Range_Type as C01Range_Range_Type
  use seq.Seq
  use prelude.IntSize
  use seq.Seq
  use prelude.IntSize
  use prelude.Int
  use seq.Seq
  predicate produces'0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
   =
    [#"../01_range.rs" 32 8 38 9] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o
    /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o
    /\ (Seq.length visited > 0  -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o)
    /\ Seq.length visited
    = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  let rec produces'0 (self:C01Range_Range_Type.t_range) (visited:Seq.seq isize) (o:C01Range_Range_Type.t_range) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  constant self  : C01Range_Range_Type.t_range
  function produces_refl [#"../01_range.rs" 44 4 44 26] (self : C01Range_Range_Type.t_range) : ()
  goal vc_produces_refl : [#"../01_range.rs" 43 14 43 45] produces'0 self (Seq.empty  : Seq.seq isize) self
end
module C01Range_Impl0_ProducesTrans_Impl
  use prelude.IntSize
  use prelude.Int
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  use seq.Seq
  use seq.Seq
  use prelude.IntSize
  use seq.Seq
  predicate produces'0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
   =
    [#"../01_range.rs" 32 8 38 9] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o
    /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o
    /\ (Seq.length visited > 0  -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o)
    /\ Seq.length visited
    = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  let rec produces'0 (self:C01Range_Range_Type.t_range) (visited:Seq.seq isize) (o:C01Range_Range_Type.t_range) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  constant a  : C01Range_Range_Type.t_range
  constant ab  : Seq.seq isize
  constant b  : C01Range_Range_Type.t_range
  constant bc  : Seq.seq isize
  constant c  : C01Range_Range_Type.t_range
  function produces_trans [#"../01_range.rs" 51 4 51 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    
  goal vc_produces_trans : ([#"../01_range.rs" 49 15 49 32] produces'0 b bc c)
   -> ([#"../01_range.rs" 48 15 48 32] produces'0 a ab b)
   -> ([#"../01_range.rs" 50 14 50 42] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C01Range_Impl0_Next
  use seq.Seq
  use prelude.IntSize
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  use prelude.IntSize
  use prelude.Int
  use seq.Seq
  predicate produces'0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
   =
    [#"../01_range.rs" 32 8 38 9] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o
    /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o
    /\ (Seq.length visited > 0  -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o)
    /\ Seq.length visited
    = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  let rec produces'0 (self:C01Range_Range_Type.t_range) (visited:Seq.seq isize) (o:C01Range_Range_Type.t_range) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  use prelude.Borrow
  predicate resolve'0 (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C01Range_Range_Type.t_range)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 [#"../01_range.rs" 23 4 23 35] (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../01_range.rs" 25 12 25 52] resolve'0 self
    /\ C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self)
  let rec completed'0 (self:borrowed (C01Range_Range_Type.t_range)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec next (self:borrowed (C01Range_Range_Type.t_range)) (return'  (ret:Core_Option_Option_Type.t_option isize))= (! bb0
    [ bb0 = s0
      [ s0 = C01Range_Range_Type.t_range { * self}
          (fun (rstart'0:isize) (rend'0:isize) ->
            C01Range_Range_Type.t_range { * self}
              (fun (rstart'1:isize) (rend'1:isize) ->
                IntSize.ge {rstart'0} {rend'1} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1)))
      | s1 = any [ br0 -> {_3 = false} (! bb2) | br1 -> {_3} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 self}- s1
      | s1 =  [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option isize ] s2
      | s2 = bb3 ]
      
    | bb2 = s0
      [ s0 = C01Range_Range_Type.t_range { * self} (fun (rstart'0:isize) (rend'0:isize) ->  [ &r <- rstart'0 ] s1)
      | s1 = C01Range_Range_Type.t_range { * self}
          (fun (rstart'1:isize) (rend'1:isize) ->
            IntSize.add {rstart'1} {[#"../01_range.rs" 62 26 62 27] (1 : isize)}
              (fun (_ret':isize) ->
                C01Range_Range_Type.t_range { * self}
                  (fun (l_start'0:isize) (l_end'0:isize) ->
                    
                    [ &self <- { self with current = (C01Range_Range_Type.C_Range _ret' l_end'0 : C01Range_Range_Type.t_range) ; } ]
                    
                    s2)))
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- Core_Option_Option_Type.C_Some r : Core_Option_Option_Type.t_option isize ] s4
      | s4 = bb3 ]
      
    | bb3 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option isize = any_l () : Core_Option_Option_Type.t_option isize
    | & self : borrowed (C01Range_Range_Type.t_range) = self
    | & _3 : bool = any_l () : bool
    | & r : isize = any_l () : isize ]
    
    [ return' (result:Core_Option_Option_Type.t_option isize)-> {[@expl:postcondition] [#"../01_range.rs" 53 14 56 5] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C01Range_Impl1_IntoIter
  use prelude.Intrinsic
  use C01Range_Range_Type as C01Range_Range_Type
  let rec into_iter (self:C01Range_Range_Type.t_range) (return'  (ret:C01Range_Range_Type.t_range))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- self ] (any [ any_ (_any:C01Range_Range_Type.t_range)-> (!  [ &self <- _any ] s1) ] )
      | s1 = return' {_0} ]
       ]
    )
    [ & _0 : C01Range_Range_Type.t_range = any_l () : C01Range_Range_Type.t_range
    | & self : C01Range_Range_Type.t_range = self ]
    
    [ return' (result:C01Range_Range_Type.t_range)-> {[@expl:postcondition] [#"../01_range.rs" 69 14 69 28] result
      = self}
      (! return' {result}) ]
    
end
module C01Range_SumRange
  use prelude.IntSize
  use prelude.Int
  use seq.Seq
  use C01Range_Range_Type as C01Range_Range_Type
  use seq.Seq
  use seq.Seq
  use prelude.IntSize
  use seq.Seq
  predicate produces'0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
   =
    [#"../01_range.rs" 32 8 38 9] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o
    /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o
    /\ (Seq.length visited > 0  -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o)
    /\ Seq.length visited
    = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  let rec produces'0 (self:C01Range_Range_Type.t_range) (visited:Seq.seq isize) (o:C01Range_Range_Type.t_range) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 [#"../01_range.rs" 51 4 51 90] (a : C01Range_Range_Type.t_range) (ab : Seq.seq isize) (b : C01Range_Range_Type.t_range) (bc : Seq.seq isize) (c : C01Range_Range_Type.t_range) : ()
    
   =
    [#"../01_range.rs" 46 4 46 10] ()
  let rec produces_trans'0 (a:C01Range_Range_Type.t_range) (ab:Seq.seq isize) (b:C01Range_Range_Type.t_range) (bc:Seq.seq isize) (c:C01Range_Range_Type.t_range) (return'  (ret:()))= {[@expl:precondition] [#"../01_range.rs" 49 15 49 32] produces'0 b bc c}
    {[@expl:precondition] [#"../01_range.rs" 48 15 48 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : C01Range_Range_Type.t_range, ab : Seq.seq isize, b : C01Range_Range_Type.t_range, bc : Seq.seq isize, c : C01Range_Range_Type.t_range . ([#"../01_range.rs" 48 15 48 32] produces'0 a ab b)
   -> ([#"../01_range.rs" 49 15 49 32] produces'0 b bc c)
   -> ([#"../01_range.rs" 50 14 50 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 [#"../01_range.rs" 44 4 44 26] (self : C01Range_Range_Type.t_range) : () =
    [#"../01_range.rs" 41 4 41 10] ()
  let rec produces_refl'0 (self:C01Range_Range_Type.t_range) (return'  (ret:()))= any
    [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ]
    
  axiom produces_refl'0_spec : forall self : C01Range_Range_Type.t_range . [#"../01_range.rs" 43 14 43 45] produces'0 self (Seq.empty  : Seq.seq isize) self
  predicate invariant'0 (self : C01Range_Range_Type.t_range) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:C01Range_Range_Type.t_range) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C01Range_Range_Type.t_range)
  let rec inv'0 (_x:C01Range_Range_Type.t_range) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C01Range_Range_Type.t_range . inv'0 x = true
  use prelude.Snapshot
  use prelude.Intrinsic
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Borrow
  predicate resolve'0 (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C01Range_Range_Type.t_range)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 [#"../01_range.rs" 23 4 23 35] (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../01_range.rs" 25 12 25 52] resolve'0 self
    /\ C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self)
  let rec completed'0 (self:borrowed (C01Range_Range_Type.t_range)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (C01Range_Range_Type.t_range)) (return'  (ret:Core_Option_Option_Type.t_option isize))= any
    [ return' (result:Core_Option_Option_Type.t_option isize)-> {[#"../01_range.rs" 53 14 56 5] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  let rec into_iter'0 (self:C01Range_Range_Type.t_range) (return'  (ret:C01Range_Range_Type.t_range))= any
    [ return' (result:C01Range_Range_Type.t_range)-> {[#"../01_range.rs" 69 14 69 28] result = self}
      (! return' {result}) ]
    
  let rec sum_range (n:isize) (return'  (ret:isize))= {[#"../01_range.rs" 75 11 75 18] IntSize.to_int n >= 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &i <- [#"../01_range.rs" 78 16 78 17] (0 : isize) ] s1
      | s1 =  [ &_6 <- C01Range_Range_Type.C_Range ([#"../01_range.rs" 79 32 79 33] (0 : isize)) n ] s2
      | s2 = into_iter'0 {_6} (fun (_ret':C01Range_Range_Type.t_range) ->  [ &it <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [#"../01_range.rs" 80 19 80 35] Snapshot.new it ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = 
        [ &produced <- ([#"../01_range.rs" 81 23 81 47] Snapshot.new (Seq.empty  : Seq.seq isize)) : Snapshot.snap_ty (Seq.seq isize) ]
        
        s1
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [#"../01_range.rs" 84 16 84 46] IntSize.to_int i
        = Seq.length (Snapshot.inner produced)
        /\ i <= n}
        {[@expl:loop invariant] [#"../01_range.rs" 83 16 83 55] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) it}
        {[@expl:loop invariant] [#"../01_range.rs" 82 16 82 23] inv'0 it}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <C01Range_Range_Type.t_range> {it}
              (fun (_ret':borrowed (C01Range_Range_Type.t_range)) ->  [ &_18 <- _ret' ]  [ &it <-  ^ _18 ] s1)
          | s1 = next'0 {_18} (fun (_ret':Core_Option_Option_Type.t_option isize) ->  [ &_17 <- _ret' ] s2)
          | s2 = bb6 ]
          
        | bb6 = s0
          [ s0 = any
            [ br0 -> {_17 = Core_Option_Option_Type.C_None } (! bb9)
            | br1 (a:isize)-> {_17 = Core_Option_Option_Type.C_Some a} (! bb8) ]
             ]
          
        | bb8 = s0 [ s0 = bb10 ] 
        | bb10 = s0
          [ s0 = Core_Option_Option_Type.some <isize> {_17} (fun (r0'0:isize) ->  [ &x <- r0'0 ] s1)
          | s1 = 
            [ &_21 <- ([#"../01_range.rs" 88 27 88 75] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton x))) : Snapshot.snap_ty (Seq.seq isize) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _21 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq isize))-> (!  [ &_21 <- _any ] s1) ] )
          | s1 = IntSize.add {i} {[#"../01_range.rs" 89 21 89 22] (1 : isize)}
              (fun (_ret':isize) ->  [ &i <- _ret' ] s2)
          | s2 = bb4 ]
           ]
         ]
      
    | bb7 = s0 [ s0 = {[#"../01_range.rs" 86 14 86 23] false} any ] 
    | bb9 = s0 [ s0 =  [ &_0 <- i ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : isize = any_l () : isize
    | & n : isize = n
    | & i : isize = any_l () : isize
    | & it : C01Range_Range_Type.t_range = any_l () : C01Range_Range_Type.t_range
    | & _6 : C01Range_Range_Type.t_range = any_l () : C01Range_Range_Type.t_range
    | & iter_old : Snapshot.snap_ty (C01Range_Range_Type.t_range) = any_l () : Snapshot.snap_ty (C01Range_Range_Type.t_range)
    | & produced : Snapshot.snap_ty (Seq.seq isize) = any_l () : Snapshot.snap_ty (Seq.seq isize)
    | & _17 : Core_Option_Option_Type.t_option isize = any_l () : Core_Option_Option_Type.t_option isize
    | & _18 : borrowed (C01Range_Range_Type.t_range) = any_l () : borrowed (C01Range_Range_Type.t_range)
    | & x : isize = any_l () : isize
    | & _21 : Snapshot.snap_ty (Seq.seq isize) = any_l () : Snapshot.snap_ty (Seq.seq isize) ]
    
    [ return' (result:isize)-> {[@expl:postcondition] [#"../01_range.rs" 76 10 76 21] result = n} (! return' {result}) ]
    
end
module C01Range_Impl0
  use prelude.IntSize
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option isize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Core_Option_Option_Type.t_option isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option isize)
  let rec inv'3 (_x:Core_Option_Option_Type.t_option isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option isize . inv'3 x = true
  use C01Range_Range_Type as C01Range_Range_Type
  use prelude.Borrow
  predicate invariant'2 (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:borrowed (C01Range_Range_Type.t_range)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (C01Range_Range_Type.t_range))
  let rec inv'2 (_x:borrowed (C01Range_Range_Type.t_range)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (C01Range_Range_Type.t_range) . inv'2 x = true
  use seq.Seq
  predicate invariant'1 (self : Seq.seq isize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:Seq.seq isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq isize)
  let rec inv'1 (_x:Seq.seq isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq isize . inv'1 x = true
  predicate invariant'0 (self : C01Range_Range_Type.t_range) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:C01Range_Range_Type.t_range) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C01Range_Range_Type.t_range)
  let rec inv'0 (_x:C01Range_Range_Type.t_range) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C01Range_Range_Type.t_range . inv'0 x = true
  use seq.Seq
  use prelude.Int
  predicate resolve'0 (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C01Range_Range_Type.t_range)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 [#"../01_range.rs" 23 4 23 35] (self : borrowed (C01Range_Range_Type.t_range)) =
    [#"../01_range.rs" 25 12 25 52] resolve'0 self
    /\ C01Range_Range_Type.range_start ( * self) >= C01Range_Range_Type.range_end ( * self)
  let rec completed'0 (self:borrowed (C01Range_Range_Type.t_range)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.IntSize
  use seq.Seq
  predicate produces'0 [#"../01_range.rs" 31 4 31 64] (self : C01Range_Range_Type.t_range) (visited : Seq.seq isize) (o : C01Range_Range_Type.t_range)
    
   =
    [#"../01_range.rs" 32 8 38 9] C01Range_Range_Type.range_end self = C01Range_Range_Type.range_end o
    /\ C01Range_Range_Type.range_start self <= C01Range_Range_Type.range_start o
    /\ (Seq.length visited > 0  -> C01Range_Range_Type.range_start o <= C01Range_Range_Type.range_end o)
    /\ Seq.length visited
    = IntSize.to_int (C01Range_Range_Type.range_start o) - IntSize.to_int (C01Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> IntSize.to_int (Seq.get visited i) = IntSize.to_int (C01Range_Range_Type.range_start self) + i)
  let rec produces'0 (self:C01Range_Range_Type.t_range) (visited:Seq.seq isize) (o:C01Range_Range_Type.t_range) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  use seq.Seq
  goal produces_refl_refn : [#"../01_range.rs" 44 4 44 26] forall self : C01Range_Range_Type.t_range . inv'0 self
   -> (forall result : () . produces'0 self (Seq.empty  : Seq.seq isize) self
   -> produces'0 self (Seq.empty  : Seq.seq isize) self)
  goal produces_trans_refn : [#"../01_range.rs" 51 4 51 90] forall a : C01Range_Range_Type.t_range . forall ab : Seq.seq isize . forall b : C01Range_Range_Type.t_range . forall bc : Seq.seq isize . forall c : C01Range_Range_Type.t_range . inv'0 c
  /\ inv'1 bc /\ inv'0 b /\ inv'1 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  goal next_refn : [#"../01_range.rs" 57 4 57 39] forall self : borrowed (C01Range_Range_Type.t_range) . inv'2 self
   -> (forall result : Core_Option_Option_Type.t_option isize . match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv'3 result
  /\ match result with
    | Core_Option_Option_Type.C_None -> completed'0 self
    | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
end
