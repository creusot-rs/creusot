module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_replace__Something [#"replace.rs" 3 0 3 20]
  use T_core__option__Option as Option'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_Something  =
    | C_Something uint32 (Option'0.t_Option (t_Something))
  
  let rec t_Something (input:t_Something) (ret  (a:uint32) (b:Option'0.t_Option (t_Something)))= any
    [ good (a:uint32) (b:Option'0.t_Option (t_Something))-> {C_Something a b = input} (! ret {a} {b}) ]
    
end
module M_replace__test [#"replace.rs" 8 0 8 44]
  use T_replace__Something as Something'0
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test (_a:Something'0.t_Something) (b:Something'0.t_Something) (return'  (ret:()))= (! bb0
    [ bb0 = bb1 | bb1 = s0 [ s0 =  [ &_a <- b ] s1 | s1 = bb3 ]  | bb3 = bb4 | bb4 = bb5 | bb5 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _a : Something'0.t_Something = _a | & b : Something'0.t_Something = b ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
