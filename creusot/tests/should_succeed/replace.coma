
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Replace_Something_Type
  use Core_Option_Option_Type as Option'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_something  =
    | C_Something uint32 (Option'0.t_option (t_something))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_something (input:t_something) (ret  (a:uint32) (b:Option'0.t_option (t_something)))= any
    [ good (a:uint32) (b:Option'0.t_option (t_something))-> {C_Something a b = input} (! ret {a} {b})
    | bad (a:uint32) (b:Option'0.t_option (t_something))-> {C_Something a b <> input} {false} any ]
    
end
module Replace_Test
  use prelude.prelude.Intrinsic
  
  use Replace_Something_Type as Something'0
  
  let rec test (_a:Something'0.t_something) (b:Something'0.t_something) (return'  (ret:()))= (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 =  [ &_a <- b ] (any [ any_ (_any:Something'0.t_something)-> (!  [ &b <- _any ] s1) ] ) | s1 = bb3 ]
      
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _a : Something'0.t_something = _a | & b : Something'0.t_something = b ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
