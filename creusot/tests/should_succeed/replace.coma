
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Replace_Something_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.UInt32
  use prelude.Int
  type t_something  =
    | C_Something uint32 (Core_Option_Option_Type.t_option (t_something))
    
  function any_l (_ : 'b) : 'a
  let rec t_something (input:t_something) (ret  (a:uint32) (b:Core_Option_Option_Type.t_option (t_something)))= any
    [ good (a:uint32) (b:Core_Option_Option_Type.t_option (t_something))-> {C_Something a b = input} (! ret {a} {b})
    | bad (a:uint32) (b:Core_Option_Option_Type.t_option (t_something))-> {C_Something a b <> input} {false} any ]
    
end
module Replace_Test
  use prelude.Intrinsic
  use Replace_Something_Type as Replace_Something_Type
  let rec test (_a:Replace_Something_Type.t_something) (b:Replace_Something_Type.t_something) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &_a <- b ] (any [ any_ (_any:Replace_Something_Type.t_something)-> (!  [ &b <- _any ] s1) ] )
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &_0 <- [#"../replace.rs" 8 45 10 1] () ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & _a : Replace_Something_Type.t_something = _a
    | & b : Replace_Something_Type.t_something = b ]
     [ return' (result:())-> (! return' {result}) ] 
end
