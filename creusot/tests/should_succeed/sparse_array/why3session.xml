<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Z3" version="4.12.1" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="sparse_array.mlcfg"/>
<theory name="SparseArray_Impl1_Get" proved="true">
 <goal name="get&#39;vc" expl="VC for get" proved="true">
 <proof prover="1"><result status="valid" time="0.140000" steps="30945"/></proof>
 </goal>
</theory>
<theory name="SparseArray_Impl1_LemmaPermutation_Impl" proved="true">
 <goal name="lemma_permutation&#39;vc" expl="VC for lemma_permutation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_permutation&#39;vc.0" expl="postcondition" proved="true">
  <transf name="use_th" proved="true" arg1="map.MapInjection">
   <goal name="lemma_permutation&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="pose" proved="true" arg1="f" arg2="(fun k -&gt; to_int (get1 (shallow_model2 (sparse_back self)) k))">
    <goal name="lemma_permutation&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(surjective f (sparse_n self))">
     <goal name="lemma_permutation&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.170000" steps="26428"/></proof>
     </goal>
     <goal name="lemma_permutation&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(exists k. 0 &lt;= k &lt; sparse_n self /\ (f k) = i)">
      <goal name="lemma_permutation&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="10" memlimit="4000"><result status="valid" time="1.447123" steps="27397"/></proof>
      </goal>
      <goal name="lemma_permutation&#39;vc.0.0.0.1.1" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.050000" steps="222"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArray_Impl1_Set" proved="true">
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set&#39;vc.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.070000" steps="105228"/></proof>
  </goal>
  <goal name="set&#39;vc.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.040000" steps="131029"/></proof>
  </goal>
  <goal name="set&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.020000" steps="139"/></proof>
  </goal>
  <goal name="set&#39;vc.3" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.090000" steps="254925"/></proof>
  </goal>
  <goal name="set&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.130000" steps="22076"/></proof>
  </goal>
  <goal name="set&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.130000" steps="23445"/></proof>
  </goal>
  <goal name="set&#39;vc.6" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.110000" steps="295"/></proof>
  </goal>
  <goal name="set&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.299479" steps="670190"/></proof>
  </goal>
  <goal name="set&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.060000" steps="223671"/></proof>
  </goal>
  <goal name="set&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.367252" steps="920607"/></proof>
  </goal>
  <goal name="set&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.070000" steps="231610"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArray_Create" proved="true">
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="1"><result status="valid" time="0.150000" steps="31202"/></proof>
 </goal>
</theory>
<theory name="SparseArray_F" proved="true">
 <goal name="f&#39;vc" expl="VC for f" proved="true">
 <proof prover="0"><result status="valid" time="0.377879" steps="2771"/></proof>
 </goal>
</theory>
</file>
</why3session>
