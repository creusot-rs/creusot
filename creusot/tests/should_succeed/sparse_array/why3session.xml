<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.11.2" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="sparse_array.mlcfg"/>
<theory name="SparseArray_Impl1_Get" proved="true">
 <goal name="get&#39;vc" expl="VC for get" proved="true">
 <proof prover="1"><result status="valid" time="0.14" steps="34755"/></proof>
 </goal>
</theory>
<theory name="SparseArray_Impl1_LemmaPermutation_Impl" proved="true">
 <goal name="lemma_permutation&#39;vc" expl="VC for lemma_permutation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_permutation&#39;vc.0" expl="postcondition" proved="true">
  <transf name="use_th" proved="true" arg1="map.MapInjection">
   <goal name="lemma_permutation&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="pose" proved="true" arg1="f" arg2="(fun k -&gt; to_int (get1 (shallow_model2 (sparse_back self)) k))">
    <goal name="lemma_permutation&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(surjective f (sparse_n self))">
     <goal name="lemma_permutation&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.17" steps="26428"/></proof>
     </goal>
     <goal name="lemma_permutation&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(exists k. 0 &lt;= k &lt; sparse_n self /\ (f k) = i)">
      <goal name="lemma_permutation&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="10" memlimit="4000"><result status="valid" time="0.63" steps="27205"/></proof>
      </goal>
      <goal name="lemma_permutation&#39;vc.0.0.0.1.1" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.05" steps="222"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArray_Impl1_Set" proved="true">
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="49"/></proof>
  </goal>
  <goal name="set&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="126"/></proof>
  </goal>
  <goal name="set&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="196"/></proof>
  </goal>
  <goal name="set&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="283867"/></proof>
  </goal>
  <goal name="set&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="160794"/></proof>
  </goal>
  <goal name="set&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="165909"/></proof>
  </goal>
  <goal name="set&#39;vc.6" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="353"/></proof>
  </goal>
  <goal name="set&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.17" steps="1113088"/></proof>
  </goal>
  <goal name="set&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="241200"/></proof>
  </goal>
  <goal name="set&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="848032"/></proof>
  </goal>
  <goal name="set&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="251415"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArray_Create" proved="true">
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="1"><result status="valid" time="0.15" steps="33385"/></proof>
 </goal>
</theory>
<theory name="SparseArray_F" proved="true">
 <goal name="f&#39;vc" expl="VC for f" proved="true">
 <proof prover="0"><result status="valid" time="0.19" steps="2857"/></proof>
 </goal>
</theory>
</file>
</why3session>
