<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.12.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.4.3" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="sparse_array.mlcfg"/>
<theory name="SparseArray_Impl2_Get" proved="true">
 <goal name="get&#39;vc" expl="VC for get" proved="true">
 <proof prover="3"><result status="valid" time="0.119879" steps="27718"/></proof>
 </goal>
</theory>
<theory name="SparseArray_Impl2_LemmaPermutation_Impl" proved="true">
 <goal name="lemma_permutation&#39;vc" expl="VC for lemma_permutation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_permutation&#39;vc.0" expl="postcondition" proved="true">
  <transf name="use_th" proved="true" arg1="map.MapInjection">
   <goal name="lemma_permutation&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="pose" proved="true" arg1="f" arg2="(fun k -&gt; to_int (get1 (shallow_model1 (sparse_back self)) k))">
    <goal name="lemma_permutation&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(surjective f (sparse_n self))">
     <goal name="lemma_permutation&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.043523" steps="292028"/></proof>
     </goal>
     <goal name="lemma_permutation&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(exists k. 0 &lt;= k &lt; sparse_n self /\ (f k) = i)">
      <goal name="lemma_permutation&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="unfold" proved="true" arg1="surjective" arg2="in" arg3="h1">
       <goal name="lemma_permutation&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="0.650307" steps="11758"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="lemma_permutation&#39;vc.0.0.0.1.1" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.094333" steps="14986"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArray_Impl2_Set" proved="true">
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.163641" steps="21057"/></proof>
  </goal>
  <goal name="set&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.036540" steps="18591"/></proof>
  </goal>
  <goal name="set&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.160266" steps="18596"/></proof>
  </goal>
  <goal name="set&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.098301" steps="17501"/></proof>
  </goal>
  <goal name="set&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.126567" steps="18904"/></proof>
  </goal>
  <goal name="set&#39;vc.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.024183" steps="286"/></proof>
  </goal>
  <goal name="set&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.109230" steps="22244"/></proof>
  </goal>
  <goal name="set&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.048217" steps="22245"/></proof>
  </goal>
  <goal name="set&#39;vc.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.140696" steps="25878"/></proof>
  </goal>
  <goal name="set&#39;vc.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.142968" steps="22534"/></proof>
  </goal>
  <goal name="set&#39;vc.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.108040" steps="22540"/></proof>
  </goal>
  <goal name="set&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.331483" steps="1123847"/></proof>
  </goal>
  <goal name="set&#39;vc.12" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.224434" steps="33845"/></proof>
  </goal>
  <goal name="set&#39;vc.13" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.186530" steps="26882"/></proof>
  </goal>
  <goal name="set&#39;vc.14" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.166629" steps="23399"/></proof>
  </goal>
  <goal name="set&#39;vc.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.093846" steps="23404"/></proof>
  </goal>
  <goal name="set&#39;vc.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.189957" steps="28450"/></proof>
  </goal>
  <goal name="set&#39;vc.17" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.164054" steps="23927"/></proof>
  </goal>
  <goal name="set&#39;vc.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.109818" steps="23942"/></proof>
  </goal>
  <goal name="set&#39;vc.19" expl="integer overflow" proved="true">
  <proof prover="3"><result status="valid" time="0.235180" steps="34297"/></proof>
  </goal>
  <goal name="set&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.368720" steps="1153393"/></proof>
  </goal>
  <goal name="set&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.223042" steps="35925"/></proof>
  </goal>
  <goal name="set&#39;vc.22" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.22.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.309759" steps="49255"/></proof>
   </goal>
   <goal name="set&#39;vc.22.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.545486" steps="85295"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.23" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.094411" steps="548340"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArray_Create" proved="true">
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="3"><result status="valid" time="0.395662" steps="46908"/></proof>
 </goal>
</theory>
<theory name="SparseArray_F" proved="true">
 <goal name="f&#39;vc" expl="VC for f" proved="true">
 <proof prover="0"><result status="valid" time="0.084133" steps="422321"/></proof>
 </goal>
</theory>
</file>
</why3session>
