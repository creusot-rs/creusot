
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module Std_Sys_Pal_Unix_Time_Nanoseconds_Type
  use prelude.UInt32
  use prelude.Int
  type t_nanoseconds  =
    | C_Nanoseconds uint32
    
end
module Std_Sys_Pal_Unix_Time_Timespec_Type
  use Std_Sys_Pal_Unix_Time_Nanoseconds_Type as Std_Sys_Pal_Unix_Time_Nanoseconds_Type
  use prelude.Int64
  use prelude.Int
  type t_timespec  =
    | C_Timespec int64 (Std_Sys_Pal_Unix_Time_Nanoseconds_Type.t_nanoseconds)
    
end
module Std_Sys_Pal_Unix_Time_Instant_Type
  use Std_Sys_Pal_Unix_Time_Timespec_Type as Std_Sys_Pal_Unix_Time_Timespec_Type
  type t_instant  =
    | C_Instant (Std_Sys_Pal_Unix_Time_Timespec_Type.t_timespec)
    
end
module Std_Time_Instant_Type
  use Std_Sys_Pal_Unix_Time_Instant_Type as Std_Sys_Pal_Unix_Time_Instant_Type
  type t_instant  =
    | C_Instant (Std_Sys_Pal_Unix_Time_Instant_Type.t_instant)
    
end
module Core_Time_Nanoseconds_Type
  use prelude.UInt32
  use prelude.Int
  type t_nanoseconds  =
    | C_Nanoseconds uint32
    
end
module Core_Time_Duration_Type
  use Core_Time_Nanoseconds_Type as Core_Time_Nanoseconds_Type
  use prelude.UInt64
  use prelude.Int
  type t_duration  =
    | C_Duration uint64 (Core_Time_Nanoseconds_Type.t_nanoseconds)
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module Instant_TestInstant
  use prelude.Int
  function eq_cmp2 (_1 : int) (_2 : int) : ()
  val eq_cmp2 (_1 : int) (_2 : int) : ()
    ensures { result = eq_cmp2 _1 _2 }
    
  function antisym22 (_1 : int) (_2 : int) : ()
  val antisym22 (_1 : int) (_2 : int) : ()
    ensures { result = antisym22 _1 _2 }
    
  function antisym12 (_1 : int) (_2 : int) : ()
  val antisym12 (_1 : int) (_2 : int) : ()
    ensures { result = antisym12 _1 _2 }
    
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans2 (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans2 (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    ensures { result = trans2 _1 _2 _3 _4 }
    
  function refl2 (_1 : int) : ()
  val refl2 (_1 : int) : ()
    ensures { result = refl2 _1 }
    
  function cmp_gt_log2 (_1 : int) (_2 : int) : ()
  val cmp_gt_log2 (_1 : int) (_2 : int) : ()
    ensures { result = cmp_gt_log2 _1 _2 }
    
  function cmp_ge_log2 (_1 : int) (_2 : int) : ()
  val cmp_ge_log2 (_1 : int) (_2 : int) : ()
    ensures { result = cmp_ge_log2 _1 _2 }
    
  function cmp_lt_log2 (_1 : int) (_2 : int) : ()
  val cmp_lt_log2 (_1 : int) (_2 : int) : ()
    ensures { result = cmp_lt_log2 _1 _2 }
    
  function cmp_le_log2 (_1 : int) (_2 : int) : ()
  val cmp_le_log2 (_1 : int) (_2 : int) : ()
    ensures { result = cmp_le_log2 _1 _2 }
    
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant4 (self : Core_Option_Option_Type.t_option int) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Core_Option_Option_Type.t_option int) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Core_Option_Option_Type.t_option int)
  val inv4 (_x : Core_Option_Option_Type.t_option int) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Core_Option_Option_Type.t_option int . inv4 x = true
  function eq_cmp1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  val eq_cmp1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
    ensures { result = eq_cmp1 _1 _2 }
    
  function antisym21 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  val antisym21 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
    ensures { result = antisym21 _1 _2 }
    
  function antisym11 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  val antisym11 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
    ensures { result = antisym11 _1 _2 }
    
  function trans1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) (_3 : Core_Option_Option_Type.t_option int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) (_3 : Core_Option_Option_Type.t_option int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    ensures { result = trans1 _1 _2 _3 _4 }
    
  function refl1 (_1 : Core_Option_Option_Type.t_option int) : ()
  val refl1 (_1 : Core_Option_Option_Type.t_option int) : ()
    ensures { result = refl1 _1 }
    
  function cmp_gt_log1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  val cmp_gt_log1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
    ensures { result = cmp_gt_log1 _1 _2 }
    
  function cmp_ge_log1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  val cmp_ge_log1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
    ensures { result = cmp_ge_log1 _1 _2 }
    
  function cmp_lt_log1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  val cmp_lt_log1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
    ensures { result = cmp_lt_log1 _1 _2 }
    
  function cmp_le_log1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  val cmp_le_log1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
    ensures { result = cmp_le_log1 _1 _2 }
    
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration))
  val inv3 (_x : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration) . inv3 x = true
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  predicate invariant2 (self : Std_Time_Instant_Type.t_instant) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Std_Time_Instant_Type.t_instant) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Std_Time_Instant_Type.t_instant)
  val inv2 (_x : Std_Time_Instant_Type.t_instant) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Std_Time_Instant_Type.t_instant . inv2 x = true
  predicate invariant1 (self : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant))
  val inv1 (_x : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant) . inv1 x = true
  function cmp_log1 (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 140 16 146 17] if self < o then
      Core_Cmp_Ordering_Type.C_Less
    else
      if self = o then Core_Cmp_Ordering_Type.C_Equal else Core_Cmp_Ordering_Type.C_Greater
    
  val cmp_log1 (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log1 self o }
    
  function cmp_log0 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : Core_Cmp_Ordering_Type.t_ordering
    
   =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 262 8 267 9] match (self, o) with
      | (Core_Option_Option_Type.C_None, Core_Option_Option_Type.C_None) -> Core_Cmp_Ordering_Type.C_Equal
      | (Core_Option_Option_Type.C_None, Core_Option_Option_Type.C_Some _) -> Core_Cmp_Ordering_Type.C_Less
      | (Core_Option_Option_Type.C_Some _, Core_Option_Option_Type.C_None) -> Core_Cmp_Ordering_Type.C_Greater
      | (Core_Option_Option_Type.C_Some x, Core_Option_Option_Type.C_Some y) -> cmp_log1 x y
      end
  val cmp_log0 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self o }
    
  function eq_cmp0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  val eq_cmp0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv4 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv4 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  val antisym20 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv4 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv4 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  val antisym10 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv4 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv4 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) (z : Core_Option_Option_Type.t_option int) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) (z : Core_Option_Option_Type.t_option int) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv4 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv4 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv4 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int, z : Core_Option_Option_Type.t_option int, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv4 z)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : Core_Option_Option_Type.t_option int) : ()
  val refl0 (x : Core_Option_Option_Type.t_option int) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv4 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 41 20 41 56] cmp_log0 self o = Core_Cmp_Ordering_Type.C_Greater
  val gt_log0 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  val cmp_gt_log0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv4 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv4 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log1 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 31 20 31 53] cmp_log0 self o <> Core_Cmp_Ordering_Type.C_Less
  val ge_log1 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : bool
    ensures { result = ge_log1 self o }
    
  function cmp_ge_log0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  val cmp_ge_log0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv4 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv4 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log1 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 21 20 21 53] cmp_log0 self o = Core_Cmp_Ordering_Type.C_Less
  val lt_log0 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  val cmp_lt_log0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv4 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv4 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 11 20 11 56] cmp_log0 self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log0 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  val cmp_le_log0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv4 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv4 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant0 (self : Core_Time_Duration_Type.t_duration) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Core_Time_Duration_Type.t_duration) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Core_Time_Duration_Type.t_duration)
  val inv0 (_x : Core_Time_Duration_Type.t_duration) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Core_Time_Duration_Type.t_duration . inv0 x = true
  use prelude.Borrow
  use prelude.UInt64
  function secs_to_nanos0 (secs : int) : int
  val secs_to_nanos0 (secs : int) : int
    ensures { result = secs_to_nanos0 secs }
    
  use prelude.UInt64
  let constant max0  : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : uint64)
  function shallow_model1 (self : Core_Time_Duration_Type.t_duration) : int
  val shallow_model1 (self : Core_Time_Duration_Type.t_duration) : int
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : Core_Time_Duration_Type.t_duration . [#"../../../../creusot-contracts/src/std/time.rs" 13 14 13 77] shallow_model1 self >= 0 /\ shallow_model1 self <= secs_to_nanos0 (UInt64.to_int max0) + 999999999
  function shallow_model0 (self : Std_Time_Instant_Type.t_instant) : int
  val shallow_model0 (self : Std_Time_Instant_Type.t_instant) : int
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Std_Time_Instant_Type.t_instant . [#"../../../../creusot-contracts/src/std/time.rs" 57 14 57 25] shallow_model0 self >= 0
  function shallow_model3 (self : Std_Time_Instant_Type.t_instant) : int =
    [#"../../../../creusot-contracts/src/model.rs" 79 8 79 31] shallow_model0 self
  val shallow_model3 (self : Std_Time_Instant_Type.t_instant) : int
    ensures { result = shallow_model3 self }
    
  val saturating_duration_since0 (self : Std_Time_Instant_Type.t_instant) (earlier : Std_Time_Instant_Type.t_instant) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 157 16 157 60] shallow_model3 self > shallow_model0 earlier
     -> shallow_model1 result > 0 }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 158 16 158 62] shallow_model3 self <= shallow_model0 earlier
     -> shallow_model1 result = 0 }
    
  val is_none0 (self : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) : bool
    requires {inv3 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 36 26 36 51] result = (self = Core_Option_Option_Type.C_None) }
    
  val is_some0 (self : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) : bool
    requires {inv3 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 33 26 33 51] result = (self <> Core_Option_Option_Type.C_None) }
    
  val checked_duration_since0 (self : Std_Time_Instant_Type.t_instant) (earlier : Std_Time_Instant_Type.t_instant) : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 153 16 153 64] shallow_model3 self >= shallow_model0 earlier
     -> result <> Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 154 16 154 63] shallow_model3 self < shallow_model0 earlier
     -> result = Core_Option_Option_Type.C_None }
    
  val duration_since0 (self : Std_Time_Instant_Type.t_instant) (earlier : Std_Time_Instant_Type.t_instant) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 149 16 149 60] shallow_model3 self > shallow_model0 earlier
     -> shallow_model1 result > 0 }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 150 16 150 62] shallow_model3 self <= shallow_model0 earlier
     -> shallow_model1 result = 0 }
    
  use int.Int
  function deep_model3 (self : Core_Time_Duration_Type.t_duration) : int
  val deep_model3 (self : Core_Time_Duration_Type.t_duration) : int
    ensures { result = deep_model3 self }
    
  axiom deep_model3_spec : forall self : Core_Time_Duration_Type.t_duration . ([#"../../../../creusot-contracts/src/std/time.rs" 26 14 26 44] deep_model3 self = shallow_model1 self) && ([#"../../../../creusot-contracts/src/std/time.rs" 25 14 25 77] deep_model3 self >= 0 /\ deep_model3 self <= secs_to_nanos0 (UInt64.to_int max0) + 999999999)
  function deep_model0 (self : Core_Time_Duration_Type.t_duration) : int =
    [#"../../../../creusot-contracts/src/model.rs" 70 8 70 28] deep_model3 self
  val deep_model0 (self : Core_Time_Duration_Type.t_duration) : int
    ensures { result = deep_model0 self }
    
  val gt0 (self : Core_Time_Duration_Type.t_duration) (other : Core_Time_Duration_Type.t_duration) : bool
    requires {inv0 self}
    requires {inv0 other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 39 26 39 76] result = (deep_model0 self > deep_model0 other) }
    
  val eq1 (self : Core_Time_Duration_Type.t_duration) (other : Core_Time_Duration_Type.t_duration) : bool
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (deep_model0 self = deep_model0 other) }
    
  val sub1 (self : Std_Time_Instant_Type.t_instant) (other : Std_Time_Instant_Type.t_instant) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 199 8 199 50] shallow_model0 self > shallow_model0 other
     -> shallow_model1 result > 0 }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 200 8 200 52] shallow_model0 self <= shallow_model0 other
     -> shallow_model1 result = 0 }
    
  val sub0 (self : Std_Time_Instant_Type.t_instant) (other : Core_Time_Duration_Type.t_duration) : Std_Time_Instant_Type.t_instant
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 193 8 193 50] shallow_model1 other = 0
     -> shallow_model0 self = shallow_model0 result }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 194 8 194 48] shallow_model1 other > 0
     -> shallow_model0 self > shallow_model0 result }
    
  function deep_model4 (self : Std_Time_Instant_Type.t_instant) : int
  val deep_model4 (self : Std_Time_Instant_Type.t_instant) : int
    ensures { result = deep_model4 self }
    
  axiom deep_model4_spec : forall self : Std_Time_Instant_Type.t_instant . ([#"../../../../creusot-contracts/src/std/time.rs" 70 14 70 44] deep_model4 self = shallow_model0 self) && ([#"../../../../creusot-contracts/src/std/time.rs" 69 14 69 25] deep_model4 self >= 0)
  function deep_model1 (self : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) : Core_Option_Option_Type.t_option int
    
   =
    [#"../../../../creusot-contracts/src/std/option.rs" 10 8 13 9] match self with
      | Core_Option_Option_Type.C_Some t -> Core_Option_Option_Type.C_Some (deep_model4 t)
      | Core_Option_Option_Type.C_None -> Core_Option_Option_Type.C_None
      end
  val deep_model1 (self : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) : Core_Option_Option_Type.t_option int
    ensures { result = deep_model1 self }
    
  val checked_sub0 (self : Std_Time_Instant_Type.t_instant) (duration : Core_Time_Duration_Type.t_duration) : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 165 16 165 81] shallow_model1 duration = 0
     -> deep_model1 result = Core_Option_Option_Type.C_Some (shallow_model3 self) }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 166 16 166 97] shallow_model1 duration > 0 /\ result <> Core_Option_Option_Type.C_None
     -> gt_log0 (Core_Option_Option_Type.C_Some (shallow_model3 self)) (deep_model1 result) }
    
  val add0 (self : Std_Time_Instant_Type.t_instant) (other : Core_Time_Duration_Type.t_duration) : Std_Time_Instant_Type.t_instant
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 187 8 187 50] shallow_model1 other = 0
     -> shallow_model0 self = shallow_model0 result }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 188 8 188 48] shallow_model1 other > 0
     -> shallow_model0 self < shallow_model0 result }
    
  function deep_model2 (self : Std_Time_Instant_Type.t_instant) : int =
    [#"../../../../creusot-contracts/src/model.rs" 70 8 70 28] deep_model4 self
  val deep_model2 (self : Std_Time_Instant_Type.t_instant) : int
    ensures { result = deep_model2 self }
    
  val eq0 (self : Std_Time_Instant_Type.t_instant) (other : Std_Time_Instant_Type.t_instant) : bool
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (deep_model2 self = deep_model2 other) }
    
  val unwrap0 (self : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) : Std_Time_Instant_Type.t_instant
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 29 0 126 1] self <> Core_Option_Option_Type.C_None}
    requires {inv1 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 29 0 126 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv2 result }
    
  val checked_add0 (self : Std_Time_Instant_Type.t_instant) (duration : Core_Time_Duration_Type.t_duration) : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 161 16 161 81] shallow_model1 duration = 0
     -> deep_model1 result = Core_Option_Option_Type.C_Some (shallow_model3 self) }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 162 16 162 97] shallow_model1 duration > 0 /\ result <> Core_Option_Option_Type.C_None
     -> lt_log0 (Core_Option_Option_Type.C_Some (shallow_model3 self)) (deep_model1 result) }
    
  use int.Int
  val ge0 (self : Core_Time_Duration_Type.t_duration) (other : Core_Time_Duration_Type.t_duration) : bool
    requires {inv0 self}
    requires {inv0 other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 42 26 42 77] result = (deep_model0 self >= deep_model0 other) }
    
  val elapsed0 (self : Std_Time_Instant_Type.t_instant) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 146 26 146 38] shallow_model1 result >= 0 }
    
  val from_secs0 (secs : uint64) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 84 26 84 57] shallow_model1 result = secs_to_nanos0 (UInt64.to_int secs) }
    
  val now0 (_1 : ()) : Std_Time_Instant_Type.t_instant
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 143 26 143 38] shallow_model0 result >= 0 }
    
  let rec cfg test_instant [#"../instant.rs" 7 0 7 21] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var instant : Std_Time_Instant_Type.t_instant;
  var zero_dur : Core_Time_Duration_Type.t_duration;
  var _4 : bool;
  var _6 : Core_Time_Duration_Type.t_duration;
  var _11 : bool;
  var _13 : Std_Time_Instant_Type.t_instant;
  var _14 : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant);
  var _20 : bool;
  var _22 : Std_Time_Instant_Type.t_instant;
  var three_seconds : Core_Time_Duration_Type.t_duration;
  var greater_instant : Std_Time_Instant_Type.t_instant;
  var even_greater_instant : Std_Time_Instant_Type.t_instant;
  var _39 : bool;
  var _41 : Std_Time_Instant_Type.t_instant;
  var _42 : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant);
  var _48 : bool;
  var _50 : Std_Time_Instant_Type.t_instant;
  var lesser_instant : Std_Time_Instant_Type.t_instant;
  var _61 : bool;
  var _63 : Core_Time_Duration_Type.t_duration;
  var _69 : bool;
  var _71 : Core_Time_Duration_Type.t_duration;
  var _77 : bool;
  var _79 : Core_Time_Duration_Type.t_duration;
  var _85 : bool;
  var _87 : Core_Time_Duration_Type.t_duration;
  var _93 : bool;
  var _95 : Core_Time_Duration_Type.t_duration;
  var _101 : bool;
  var _103 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var _108 : bool;
  var _110 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var _115 : bool;
  var _117 : Core_Time_Duration_Type.t_duration;
  var _123 : bool;
  var _125 : Core_Time_Duration_Type.t_duration;
  {
    goto BB0
  }
  BB0 {
    [#"../instant.rs" 8 18 8 32] instant <- ([#"../instant.rs" 8 18 8 32] now0 ([#"../instant.rs" 8 18 8 32] ()));
    goto BB1
  }
  BB1 {
    [#"../instant.rs" 9 19 9 41] zero_dur <- ([#"../instant.rs" 9 19 9 41] from_secs0 ([#"../instant.rs" 9 39 9 40] (0 : uint64)));
    goto BB2
  }
  BB2 {
    [#"../instant.rs" 10 12 10 29] _6 <- ([#"../instant.rs" 10 12 10 29] elapsed0 instant);
    goto BB3
  }
  BB3 {
    [#"../instant.rs" 10 12 10 41] _4 <- ([#"../instant.rs" 10 12 10 41] ge0 _6 zero_dur);
    goto BB4
  }
  BB4 {
    switch (_4)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    [#"../instant.rs" 12 12 12 41] _14 <- ([#"../instant.rs" 12 12 12 41] checked_add0 instant zero_dur);
    goto BB7
  }
  BB6 {
    assert { [#"../instant.rs" 10 4 10 42] false };
    absurd
  }
  BB7 {
    [#"../instant.rs" 12 12 12 50] _13 <- ([#"../instant.rs" 12 12 12 50] unwrap0 _14);
    _14 <- any Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant);
    goto BB8
  }
  BB8 {
    [#"../instant.rs" 12 12 12 61] _11 <- ([#"../instant.rs" 12 12 12 61] eq0 _13 instant);
    goto BB9
  }
  BB9 {
    switch (_11)
      | False -> goto BB11
      | True -> goto BB10
      end
  }
  BB10 {
    [#"../instant.rs" 13 12 13 30] _22 <- ([#"../instant.rs" 13 12 13 30] add0 instant zero_dur);
    goto BB12
  }
  BB11 {
    assert { [#"../instant.rs" 12 4 12 62] false };
    absurd
  }
  BB12 {
    [#"../instant.rs" 13 12 13 41] _20 <- ([#"../instant.rs" 13 12 13 41] eq0 _22 instant);
    goto BB13
  }
  BB13 {
    switch (_20)
      | False -> goto BB15
      | True -> goto BB14
      end
  }
  BB14 {
    [#"../instant.rs" 14 24 14 46] three_seconds <- ([#"../instant.rs" 14 24 14 46] from_secs0 ([#"../instant.rs" 14 44 14 45] (3 : uint64)));
    goto BB16
  }
  BB15 {
    assert { [#"../instant.rs" 13 4 13 42] false };
    absurd
  }
  BB16 {
    [#"../instant.rs" 15 26 15 49] greater_instant <- ([#"../instant.rs" 15 26 15 49] add0 instant three_seconds);
    goto BB17
  }
  BB17 {
    assert { [@expl:assertion] [#"../instant.rs" 16 18 16 45] shallow_model0 instant < shallow_model0 greater_instant };
    [#"../instant.rs" 17 31 17 62] even_greater_instant <- ([#"../instant.rs" 17 31 17 62] add0 greater_instant three_seconds);
    goto BB18
  }
  BB18 {
    assert { [@expl:assertion] [#"../instant.rs" 18 18 18 50] shallow_model0 instant < shallow_model0 even_greater_instant };
    [#"../instant.rs" 20 12 20 41] _42 <- ([#"../instant.rs" 20 12 20 41] checked_sub0 instant zero_dur);
    goto BB19
  }
  BB19 {
    [#"../instant.rs" 20 12 20 50] _41 <- ([#"../instant.rs" 20 12 20 50] unwrap0 _42);
    _42 <- any Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant);
    goto BB20
  }
  BB20 {
    [#"../instant.rs" 20 12 20 61] _39 <- ([#"../instant.rs" 20 12 20 61] eq0 _41 instant);
    goto BB21
  }
  BB21 {
    switch (_39)
      | False -> goto BB23
      | True -> goto BB22
      end
  }
  BB22 {
    [#"../instant.rs" 21 12 21 30] _50 <- ([#"../instant.rs" 21 12 21 30] sub0 instant zero_dur);
    goto BB24
  }
  BB23 {
    assert { [#"../instant.rs" 20 4 20 62] false };
    absurd
  }
  BB24 {
    [#"../instant.rs" 21 12 21 41] _48 <- ([#"../instant.rs" 21 12 21 41] eq0 _50 instant);
    goto BB25
  }
  BB25 {
    switch (_48)
      | False -> goto BB27
      | True -> goto BB26
      end
  }
  BB26 {
    [#"../instant.rs" 22 25 22 48] lesser_instant <- ([#"../instant.rs" 22 25 22 48] sub0 instant three_seconds);
    goto BB28
  }
  BB27 {
    assert { [#"../instant.rs" 21 4 21 42] false };
    absurd
  }
  BB28 {
    assert { [@expl:assertion] [#"../instant.rs" 23 18 23 44] shallow_model0 instant > shallow_model0 lesser_instant };
    [#"../instant.rs" 24 12 24 29] _63 <- ([#"../instant.rs" 24 12 24 29] sub1 instant instant);
    goto BB29
  }
  BB29 {
    [#"../instant.rs" 24 12 24 41] _61 <- ([#"../instant.rs" 24 12 24 41] eq1 _63 zero_dur);
    goto BB30
  }
  BB30 {
    switch (_61)
      | False -> goto BB32
      | True -> goto BB31
      end
  }
  BB31 {
    [#"../instant.rs" 25 12 25 37] _71 <- ([#"../instant.rs" 25 12 25 37] sub1 instant greater_instant);
    goto BB33
  }
  BB32 {
    assert { [#"../instant.rs" 24 4 24 42] false };
    absurd
  }
  BB33 {
    [#"../instant.rs" 25 12 25 49] _69 <- ([#"../instant.rs" 25 12 25 49] eq1 _71 zero_dur);
    goto BB34
  }
  BB34 {
    switch (_69)
      | False -> goto BB36
      | True -> goto BB35
      end
  }
  BB35 {
    [#"../instant.rs" 26 12 26 37] _79 <- ([#"../instant.rs" 26 12 26 37] sub1 greater_instant instant);
    goto BB37
  }
  BB36 {
    assert { [#"../instant.rs" 25 4 25 50] false };
    absurd
  }
  BB37 {
    [#"../instant.rs" 26 12 26 48] _77 <- ([#"../instant.rs" 26 12 26 48] gt0 _79 zero_dur);
    goto BB38
  }
  BB38 {
    switch (_77)
      | False -> goto BB40
      | True -> goto BB39
      end
  }
  BB39 {
    [#"../instant.rs" 28 12 28 51] _87 <- ([#"../instant.rs" 28 12 28 51] duration_since0 greater_instant instant);
    goto BB41
  }
  BB40 {
    assert { [#"../instant.rs" 26 4 26 49] false };
    absurd
  }
  BB41 {
    [#"../instant.rs" 28 12 28 62] _85 <- ([#"../instant.rs" 28 12 28 62] gt0 _87 zero_dur);
    goto BB42
  }
  BB42 {
    switch (_85)
      | False -> goto BB44
      | True -> goto BB43
      end
  }
  BB43 {
    [#"../instant.rs" 29 12 29 51] _95 <- ([#"../instant.rs" 29 12 29 51] duration_since0 instant greater_instant);
    goto BB45
  }
  BB44 {
    assert { [#"../instant.rs" 28 4 28 63] false };
    absurd
  }
  BB45 {
    [#"../instant.rs" 29 12 29 63] _93 <- ([#"../instant.rs" 29 12 29 63] eq1 _95 zero_dur);
    goto BB46
  }
  BB46 {
    switch (_93)
      | False -> goto BB48
      | True -> goto BB47
      end
  }
  BB47 {
    [#"../instant.rs" 30 12 30 59] _103 <- ([#"../instant.rs" 30 12 30 59] checked_duration_since0 greater_instant instant);
    goto BB49
  }
  BB48 {
    assert { [#"../instant.rs" 29 4 29 64] false };
    absurd
  }
  BB49 {
    [#"../instant.rs" 30 12 30 69] _101 <- ([#"../instant.rs" 30 12 30 69] is_some0 _103);
    goto BB50
  }
  BB50 {
    switch (_101)
      | False -> goto BB52
      | True -> goto BB51
      end
  }
  BB51 {
    [#"../instant.rs" 31 12 31 59] _110 <- ([#"../instant.rs" 31 12 31 59] checked_duration_since0 instant greater_instant);
    goto BB53
  }
  BB52 {
    assert { [#"../instant.rs" 30 4 30 70] false };
    absurd
  }
  BB53 {
    [#"../instant.rs" 31 12 31 69] _108 <- ([#"../instant.rs" 31 12 31 69] is_none0 _110);
    goto BB54
  }
  BB54 {
    switch (_108)
      | False -> goto BB56
      | True -> goto BB55
      end
  }
  BB55 {
    [#"../instant.rs" 32 12 32 62] _117 <- ([#"../instant.rs" 32 12 32 62] saturating_duration_since0 greater_instant instant);
    goto BB57
  }
  BB56 {
    assert { [#"../instant.rs" 31 4 31 70] false };
    absurd
  }
  BB57 {
    [#"../instant.rs" 32 12 32 73] _115 <- ([#"../instant.rs" 32 12 32 73] gt0 _117 zero_dur);
    goto BB58
  }
  BB58 {
    switch (_115)
      | False -> goto BB60
      | True -> goto BB59
      end
  }
  BB59 {
    [#"../instant.rs" 33 12 33 62] _125 <- ([#"../instant.rs" 33 12 33 62] saturating_duration_since0 instant greater_instant);
    goto BB61
  }
  BB60 {
    assert { [#"../instant.rs" 32 4 32 74] false };
    absurd
  }
  BB61 {
    [#"../instant.rs" 33 12 33 74] _123 <- ([#"../instant.rs" 33 12 33 74] eq1 _125 zero_dur);
    goto BB62
  }
  BB62 {
    switch (_123)
      | False -> goto BB64
      | True -> goto BB63
      end
  }
  BB63 {
    [#"../instant.rs" 7 22 34 1] _0 <- ([#"../instant.rs" 7 22 34 1] ());
    return _0
  }
  BB64 {
    assert { [#"../instant.rs" 33 4 33 75] false };
    absurd
  }
  
end
