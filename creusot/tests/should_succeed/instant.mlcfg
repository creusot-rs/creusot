
module Std_Sys_Unix_Time_Nanoseconds_Type
  use prelude.Int
  use prelude.UInt32
  type t_nanoseconds  =
    | C_Nanoseconds uint32
    
end
module Std_Sys_Unix_Time_Timespec_Type
  use prelude.Int
  use prelude.Int64
  use Std_Sys_Unix_Time_Nanoseconds_Type as Std_Sys_Unix_Time_Nanoseconds_Type
  type t_timespec  =
    | C_Timespec int64 (Std_Sys_Unix_Time_Nanoseconds_Type.t_nanoseconds)
    
end
module Std_Sys_Unix_Time_Inner_Instant_Type
  use Std_Sys_Unix_Time_Timespec_Type as Std_Sys_Unix_Time_Timespec_Type
  type t_instant  =
    | C_Instant (Std_Sys_Unix_Time_Timespec_Type.t_timespec)
    
end
module Std_Time_Instant_Type
  use Std_Sys_Unix_Time_Inner_Instant_Type as Std_Sys_Unix_Time_Inner_Instant_Type
  type t_instant  =
    | C_Instant (Std_Sys_Unix_Time_Inner_Instant_Type.t_instant)
    
end
module Core_Time_Nanoseconds_Type
  use prelude.Int
  use prelude.UInt32
  type t_nanoseconds  =
    | C_Nanoseconds uint32
    
end
module Core_Time_Duration_Type
  use prelude.Int
  use prelude.UInt64
  use Core_Time_Nanoseconds_Type as Core_Time_Nanoseconds_Type
  type t_duration  =
    | C_Duration uint64 (Core_Time_Nanoseconds_Type.t_nanoseconds)
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Std1_Time_Impl2_ShallowModel_Stub
  use prelude.Int
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  function shallow_model (self : Std_Time_Instant_Type.t_instant) : int
end
module CreusotContracts_Std1_Time_Impl2_ShallowModel_Interface
  use prelude.Int
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  function shallow_model (self : Std_Time_Instant_Type.t_instant) : int
  val shallow_model (self : Std_Time_Instant_Type.t_instant) : int
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 57 14 57 25] result >= 0 }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Std_Time_Instant_Type.t_instant . [#"../../../../creusot-contracts/src/std/time.rs" 57 14 57 25] shallow_model self >= 0
end
module CreusotContracts_Std1_Time_Impl2_ShallowModel
  use prelude.Int
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  function shallow_model (self : Std_Time_Instant_Type.t_instant) : int
  val shallow_model (self : Std_Time_Instant_Type.t_instant) : int
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 57 14 57 25] result >= 0 }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Std_Time_Instant_Type.t_instant . [#"../../../../creusot-contracts/src/std/time.rs" 57 14 57 25] shallow_model self >= 0
end
module Std_Time_Impl0_Now_Interface
  use prelude.Int
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  clone CreusotContracts_Std1_Time_Impl2_ShallowModel_Stub as ShallowModel0 with
    axiom .
  val now (_1' : ()) : Std_Time_Instant_Type.t_instant
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 143 26 143 38] ShallowModel0.shallow_model result >= 0 }
    
end
module CreusotContracts_Std1_Time_SecsToNanos_Stub
  use prelude.Int
  function secs_to_nanos (secs : int) : int
end
module CreusotContracts_Std1_Time_SecsToNanos_Interface
  use prelude.Int
  function secs_to_nanos (secs : int) : int
  val secs_to_nanos (secs : int) : int
    ensures { result = secs_to_nanos secs }
    
end
module CreusotContracts_Std1_Time_SecsToNanos
  use prelude.Int
  function secs_to_nanos (secs : int) : int =
    [#"../../../../creusot-contracts/src/std/time.rs" 48 4 48 24] secs * 1000000000
  val secs_to_nanos (secs : int) : int
    ensures { result = secs_to_nanos secs }
    
end
module Core_Num_Impl9_Max_Stub
  use prelude.Int
  use prelude.UInt64
  val constant mAX'  : uint64
end
module Core_Num_Impl9_Max
  use prelude.Int
  use prelude.UInt64
  let constant mAX'  : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : uint64)
end
module CreusotContracts_Std1_Time_Impl0_ShallowModel_Stub
  use prelude.Int
  use prelude.UInt64
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  function shallow_model (self : Core_Time_Duration_Type.t_duration) : int
end
module CreusotContracts_Std1_Time_Impl0_ShallowModel_Interface
  use prelude.Int
  use prelude.UInt64
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  function shallow_model (self : Core_Time_Duration_Type.t_duration) : int
  val shallow_model (self : Core_Time_Duration_Type.t_duration) : int
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 13 14 13 77] result >= 0 /\ result <= SecsToNanos0.secs_to_nanos (UInt64.to_int Max0.mAX') + 999999999 }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Core_Time_Duration_Type.t_duration . [#"../../../../creusot-contracts/src/std/time.rs" 13 14 13 77] shallow_model self >= 0 /\ shallow_model self <= SecsToNanos0.secs_to_nanos (UInt64.to_int Max0.mAX') + 999999999
end
module CreusotContracts_Std1_Time_Impl0_ShallowModel
  use prelude.Int
  use prelude.UInt64
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  function shallow_model (self : Core_Time_Duration_Type.t_duration) : int
  val shallow_model (self : Core_Time_Duration_Type.t_duration) : int
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 13 14 13 77] result >= 0 /\ result <= SecsToNanos0.secs_to_nanos (UInt64.to_int Max0.mAX') + 999999999 }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Core_Time_Duration_Type.t_duration . [#"../../../../creusot-contracts/src/std/time.rs" 13 14 13 77] shallow_model self >= 0 /\ shallow_model self <= SecsToNanos0.secs_to_nanos (UInt64.to_int Max0.mAX') + 999999999
end
module Core_Time_Impl1_FromSecs_Interface
  use prelude.UInt64
  use prelude.Int
  clone Core_Num_Impl9_Max_Stub as Max0
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone CreusotContracts_Std1_Time_Impl0_ShallowModel_Stub as ShallowModel0 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    axiom .
  val from_secs (secs : uint64) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 84 26 84 57] ShallowModel0.shallow_model result = SecsToNanos0.secs_to_nanos (UInt64.to_int secs) }
    
end
module Std_Time_Impl0_Elapsed_Interface
  use prelude.Int
  use prelude.Borrow
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  clone CreusotContracts_Std1_Time_Impl0_ShallowModel_Stub as ShallowModel0 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    axiom .
  val elapsed (self : Std_Time_Instant_Type.t_instant) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 146 26 146 38] ShallowModel0.shallow_model result >= 0 }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl0_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl0_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 31 8 31 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate ge_log (self : self) (o : self) =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 31 20 31 53] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Less
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module Core_Cmp_PartialOrd_Ge_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel1 with
    type t = rhs,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val ge (self : self) (other : rhs) : bool
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 36 26 36 77] result = GeLog0.ge_log (DeepModel0.deep_model self) (DeepModel1.deep_model other) }
    
end
module CreusotContracts_Std1_Option_Impl0_DeepModel_Stub
  type t
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  function deep_model (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option DeepModelTy0.deepModelTy
    
end
module CreusotContracts_Std1_Option_Impl0_DeepModel_Interface
  type t
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  function deep_model (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option DeepModelTy0.deepModelTy
    
  val deep_model (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Option_Impl0_DeepModel
  type t
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  function deep_model (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option DeepModelTy0.deepModelTy
    
   =
    [#"../../../../creusot-contracts/src/std/option.rs" 10 8 13 9] match (self) with
      | Core_Option_Option_Type.C_Some t -> Core_Option_Option_Type.C_Some (DeepModel0.deep_model t)
      | Core_Option_Option_Type.C_None -> Core_Option_Option_Type.C_None
      end
  val deep_model (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 40 8 40 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate lt_log (self : self) (o : self) =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 21 20 21 53] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Less
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module Std_Time_Impl0_CheckedAdd_Interface
  use prelude.Int
  use prelude.Borrow
  use prelude.Int
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Core_Option_Option_Type.t_option int
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = Std_Time_Instant_Type.t_instant,
    type ShallowModelTy0.shallowModelTy = int
  clone CreusotContracts_Std1_Option_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Std_Time_Instant_Type.t_instant,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Time_Impl0_ShallowModel_Stub as ShallowModel0 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    axiom .
  val checked_add (self : Std_Time_Instant_Type.t_instant) (duration : Core_Time_Duration_Type.t_duration) : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 161 16 161 81] ShallowModel0.shallow_model duration = 0 -> DeepModel0.deep_model result = Core_Option_Option_Type.C_Some (ShallowModel1.shallow_model self) }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 162 16 162 97] ShallowModel0.shallow_model duration > 0 /\ result <> Core_Option_Option_Type.C_None -> LtLog0.lt_log (Core_Option_Option_Type.C_Some (ShallowModel1.shallow_model self)) (DeepModel0.deep_model result) }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val unwrap (self : Core_Option_Option_Type.t_option t) : t
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    
end
module Std_Time_Impl21_Eq_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Std_Time_Instant_Type.t_instant,
    type DeepModelTy0.deepModelTy = int
  val eq (self : Std_Time_Instant_Type.t_instant) (other : Std_Time_Instant_Type.t_instant) : bool
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module Std_Time_Impl1_Add_Interface
  use prelude.Int
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  clone CreusotContracts_Std1_Time_Impl2_ShallowModel_Stub as ShallowModel1 with
    axiom .
  clone CreusotContracts_Std1_Time_Impl0_ShallowModel_Stub as ShallowModel0 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    axiom .
  val add (self : Std_Time_Instant_Type.t_instant) (other : Core_Time_Duration_Type.t_duration) : Std_Time_Instant_Type.t_instant
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 187 8 187 50] ShallowModel0.shallow_model other = 0 -> ShallowModel1.shallow_model self = ShallowModel1.shallow_model result }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 188 8 188 48] ShallowModel0.shallow_model other > 0 -> ShallowModel1.shallow_model self < ShallowModel1.shallow_model result }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
  val gt_log (self : self) (o : self) : bool
    ensures { result = gt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate gt_log (self : self) (o : self) =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 41 20 41 56] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Greater
  val gt_log (self : self) (o : self) : bool
    ensures { result = gt_log self o }
    
end
module Std_Time_Impl0_CheckedSub_Interface
  use prelude.Int
  use prelude.Borrow
  use prelude.Int
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Core_Option_Option_Type.t_option int
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = Std_Time_Instant_Type.t_instant,
    type ShallowModelTy0.shallowModelTy = int
  clone CreusotContracts_Std1_Option_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Std_Time_Instant_Type.t_instant,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Time_Impl0_ShallowModel_Stub as ShallowModel0 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    axiom .
  val checked_sub (self : Std_Time_Instant_Type.t_instant) (duration : Core_Time_Duration_Type.t_duration) : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 165 16 165 81] ShallowModel0.shallow_model duration = 0 -> DeepModel0.deep_model result = Core_Option_Option_Type.C_Some (ShallowModel1.shallow_model self) }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 166 16 166 97] ShallowModel0.shallow_model duration > 0 /\ result <> Core_Option_Option_Type.C_None -> GtLog0.gt_log (Core_Option_Option_Type.C_Some (ShallowModel1.shallow_model self)) (DeepModel0.deep_model result) }
    
end
module Std_Time_Impl3_Sub_Interface
  use prelude.Int
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  clone CreusotContracts_Std1_Time_Impl2_ShallowModel_Stub as ShallowModel1 with
    axiom .
  clone CreusotContracts_Std1_Time_Impl0_ShallowModel_Stub as ShallowModel0 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    axiom .
  val sub (self : Std_Time_Instant_Type.t_instant) (other : Core_Time_Duration_Type.t_duration) : Std_Time_Instant_Type.t_instant
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 193 8 193 50] ShallowModel0.shallow_model other = 0 -> ShallowModel1.shallow_model self = ShallowModel1.shallow_model result }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 194 8 194 48] ShallowModel0.shallow_model other > 0 -> ShallowModel1.shallow_model self > ShallowModel1.shallow_model result }
    
end
module Std_Time_Impl5_Sub_Interface
  use prelude.Int
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  clone CreusotContracts_Std1_Time_Impl0_ShallowModel_Stub as ShallowModel1 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    axiom .
  clone CreusotContracts_Std1_Time_Impl2_ShallowModel_Stub as ShallowModel0 with
    axiom .
  val sub (self : Std_Time_Instant_Type.t_instant) (other : Std_Time_Instant_Type.t_instant) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 199 8 199 50] ShallowModel0.shallow_model self > ShallowModel0.shallow_model other -> ShallowModel1.shallow_model result > 0 }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 200 8 200 52] ShallowModel0.shallow_model self <= ShallowModel0.shallow_model other -> ShallowModel1.shallow_model result = 0 }
    
end
module Core_Time_Impl29_Eq_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Core_Time_Duration_Type.t_duration,
    type DeepModelTy0.deepModelTy = int
  val eq (self : Core_Time_Duration_Type.t_duration) (other : Core_Time_Duration_Type.t_duration) : bool
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module Core_Cmp_PartialOrd_Gt_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel1 with
    type t = rhs,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val gt (self : self) (other : rhs) : bool
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 33 26 33 76] result = GtLog0.gt_log (DeepModel0.deep_model self) (DeepModel1.deep_model other) }
    
end
module Std_Time_Impl0_DurationSince_Interface
  use prelude.Int
  use prelude.Borrow
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  use prelude.Int
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  clone CreusotContracts_Std1_Time_Impl0_ShallowModel_Stub as ShallowModel2 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    axiom .
  clone CreusotContracts_Std1_Time_Impl2_ShallowModel_Stub as ShallowModel1 with
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Std_Time_Instant_Type.t_instant,
    type ShallowModelTy0.shallowModelTy = int
  val duration_since (self : Std_Time_Instant_Type.t_instant) (earlier : Std_Time_Instant_Type.t_instant) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 149 16 149 60] ShallowModel0.shallow_model self > ShallowModel1.shallow_model earlier -> ShallowModel2.shallow_model result > 0 }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 150 16 150 62] ShallowModel0.shallow_model self <= ShallowModel1.shallow_model earlier -> ShallowModel2.shallow_model result = 0 }
    
end
module Std_Time_Impl0_CheckedDurationSince_Interface
  use prelude.Int
  use prelude.Borrow
  use prelude.Int
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Std1_Time_Impl2_ShallowModel_Stub as ShallowModel1 with
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Std_Time_Instant_Type.t_instant,
    type ShallowModelTy0.shallowModelTy = int
  val checked_duration_since (self : Std_Time_Instant_Type.t_instant) (earlier : Std_Time_Instant_Type.t_instant) : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 153 16 153 64] ShallowModel0.shallow_model self >= ShallowModel1.shallow_model earlier -> result <> Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 154 16 154 63] ShallowModel0.shallow_model self < ShallowModel1.shallow_model earlier -> result = Core_Option_Option_Type.C_None }
    
end
module Core_Option_Impl0_IsSome_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val is_some (self : Core_Option_Option_Type.t_option t) : bool
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 21 26 21 51] result = (self <> Core_Option_Option_Type.C_None) }
    
end
module Core_Option_Impl0_IsNone_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val is_none (self : Core_Option_Option_Type.t_option t) : bool
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 24 26 24 51] result = (self = Core_Option_Option_Type.C_None) }
    
end
module Std_Time_Impl0_SaturatingDurationSince_Interface
  use prelude.Int
  use prelude.Borrow
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  use prelude.Int
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  clone CreusotContracts_Std1_Time_Impl0_ShallowModel_Stub as ShallowModel2 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    axiom .
  clone CreusotContracts_Std1_Time_Impl2_ShallowModel_Stub as ShallowModel1 with
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Std_Time_Instant_Type.t_instant,
    type ShallowModelTy0.shallowModelTy = int
  val saturating_duration_since (self : Std_Time_Instant_Type.t_instant) (earlier : Std_Time_Instant_Type.t_instant) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 157 16 157 60] ShallowModel0.shallow_model self > ShallowModel1.shallow_model earlier -> ShallowModel2.shallow_model result > 0 }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 158 16 158 62] ShallowModel0.shallow_model self <= ShallowModel1.shallow_model earlier -> ShallowModel2.shallow_model result = 0 }
    
end
module CreusotContracts_Logic_Ord_Impl2_GeLog_Stub
  use prelude.Int
  predicate ge_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl2_GeLog_Interface
  use prelude.Int
  predicate ge_log (self : int) (_2' : int)
  val ge_log (self : int) (_2' : int) : bool
    ensures { result = ge_log self _2' }
    
end
module CreusotContracts_Logic_Ord_Impl2_GeLog
  use prelude.Int
  use int.Int
  predicate ge_log (self : int) (_2' : int) =
    Int.(>=) self _2'
  val ge_log (self : int) (_2' : int) : bool
    ensures { result = ge_log self _2' }
    
end
module CreusotContracts_Logic_Ord_Impl2_GtLog_Stub
  use prelude.Int
  predicate gt_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl2_GtLog_Interface
  use prelude.Int
  predicate gt_log (self : int) (_2' : int)
  val gt_log (self : int) (_2' : int) : bool
    ensures { result = gt_log self _2' }
    
end
module CreusotContracts_Logic_Ord_Impl2_GtLog
  use prelude.Int
  use int.Int
  predicate gt_log (self : int) (_2' : int) =
    Int.(>) self _2'
  val gt_log (self : int) (_2' : int) : bool
    ensures { result = gt_log self _2' }
    
end
module CreusotContracts_Std1_Time_Impl1_DeepModel_Stub
  use prelude.Int
  use prelude.UInt64
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  clone CreusotContracts_Std1_Time_Impl0_ShallowModel_Stub as ShallowModel0 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    axiom .
  function deep_model (self : Core_Time_Duration_Type.t_duration) : int
end
module CreusotContracts_Std1_Time_Impl1_DeepModel_Interface
  use prelude.Int
  use prelude.UInt64
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  clone CreusotContracts_Std1_Time_Impl0_ShallowModel_Stub as ShallowModel0 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    axiom .
  function deep_model (self : Core_Time_Duration_Type.t_duration) : int
  val deep_model (self : Core_Time_Duration_Type.t_duration) : int
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 25 14 25 77] result >= 0 /\ result <= SecsToNanos0.secs_to_nanos (UInt64.to_int Max0.mAX') + 999999999 }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 26 14 26 44] result = ShallowModel0.shallow_model self }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Core_Time_Duration_Type.t_duration . ([#"../../../../creusot-contracts/src/std/time.rs" 26 14 26 44] deep_model self = ShallowModel0.shallow_model self) && ([#"../../../../creusot-contracts/src/std/time.rs" 25 14 25 77] deep_model self >= 0 /\ deep_model self <= SecsToNanos0.secs_to_nanos (UInt64.to_int Max0.mAX') + 999999999)
end
module CreusotContracts_Std1_Time_Impl1_DeepModel
  use prelude.Int
  use prelude.UInt64
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  clone CreusotContracts_Std1_Time_SecsToNanos_Stub as SecsToNanos0
  clone Core_Num_Impl9_Max_Stub as Max0
  clone CreusotContracts_Std1_Time_Impl0_ShallowModel_Stub as ShallowModel0 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    axiom .
  function deep_model (self : Core_Time_Duration_Type.t_duration) : int
  val deep_model (self : Core_Time_Duration_Type.t_duration) : int
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 25 14 25 77] result >= 0 /\ result <= SecsToNanos0.secs_to_nanos (UInt64.to_int Max0.mAX') + 999999999 }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 26 14 26 44] result = ShallowModel0.shallow_model self }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Core_Time_Duration_Type.t_duration . ([#"../../../../creusot-contracts/src/std/time.rs" 26 14 26 44] deep_model self = ShallowModel0.shallow_model self) && ([#"../../../../creusot-contracts/src/std/time.rs" 25 14 25 77] deep_model self >= 0 /\ deep_model self <= SecsToNanos0.secs_to_nanos (UInt64.to_int Max0.mAX') + 999999999)
end
module CreusotContracts_Std1_Time_Impl3_DeepModel_Stub
  use prelude.Int
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  clone CreusotContracts_Std1_Time_Impl2_ShallowModel_Stub as ShallowModel0 with
    axiom .
  function deep_model (self : Std_Time_Instant_Type.t_instant) : int
end
module CreusotContracts_Std1_Time_Impl3_DeepModel_Interface
  use prelude.Int
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  clone CreusotContracts_Std1_Time_Impl2_ShallowModel_Stub as ShallowModel0 with
    axiom .
  function deep_model (self : Std_Time_Instant_Type.t_instant) : int
  val deep_model (self : Std_Time_Instant_Type.t_instant) : int
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 69 14 69 25] result >= 0 }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 70 14 70 44] result = ShallowModel0.shallow_model self }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Std_Time_Instant_Type.t_instant . ([#"../../../../creusot-contracts/src/std/time.rs" 70 14 70 44] deep_model self = ShallowModel0.shallow_model self) && ([#"../../../../creusot-contracts/src/std/time.rs" 69 14 69 25] deep_model self >= 0)
end
module CreusotContracts_Std1_Time_Impl3_DeepModel
  use prelude.Int
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  clone CreusotContracts_Std1_Time_Impl2_ShallowModel_Stub as ShallowModel0 with
    axiom .
  function deep_model (self : Std_Time_Instant_Type.t_instant) : int
  val deep_model (self : Std_Time_Instant_Type.t_instant) : int
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 69 14 69 25] result >= 0 }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 70 14 70 44] result = ShallowModel0.shallow_model self }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Std_Time_Instant_Type.t_instant . ([#"../../../../creusot-contracts/src/std/time.rs" 70 14 70 44] deep_model self = ShallowModel0.shallow_model self) && ([#"../../../../creusot-contracts/src/std/time.rs" 69 14 69 25] deep_model self >= 0)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate le_log (self : self) (o : self) =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 11 20 11 56] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
  val cmp_le_log (x : self) (y : self) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
  val cmp_le_log (x : self) (y : self) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  val cmp_lt_log (x : self) (y : self) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  val cmp_lt_log (x : self) (y : self) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  val cmp_ge_log (x : self) (y : self) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  val cmp_ge_log (x : self) (y : self) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  val cmp_gt_log (x : self) (y : self) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  val cmp_gt_log (x : self) (y : self) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
  val refl (x : self) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
  val refl (x : self) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  val antisym1 (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  val antisym1 (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  val antisym2 (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  val antisym2 (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
  val eq_cmp (x : self) (y : self) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
  val eq_cmp (x : self) (y : self) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub
  type t
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  function cmp_log (self : Core_Option_Option_Type.t_option t) (o : Core_Option_Option_Type.t_option t) : Core_Cmp_Ordering_Type.t_ordering
    
end
module CreusotContracts_Logic_Ord_Impl1_CmpLog_Interface
  type t
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  function cmp_log (self : Core_Option_Option_Type.t_option t) (o : Core_Option_Option_Type.t_option t) : Core_Cmp_Ordering_Type.t_ordering
    
  val cmp_log (self : Core_Option_Option_Type.t_option t) (o : Core_Option_Option_Type.t_option t) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl1_CmpLog
  type t
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  function cmp_log (self : Core_Option_Option_Type.t_option t) (o : Core_Option_Option_Type.t_option t) : Core_Cmp_Ordering_Type.t_ordering
    
   =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 272 8 277 9] match ((self, o)) with
      | (Core_Option_Option_Type.C_None, Core_Option_Option_Type.C_None) -> Core_Cmp_Ordering_Type.C_Equal
      | (Core_Option_Option_Type.C_None, Core_Option_Option_Type.C_Some _) -> Core_Cmp_Ordering_Type.C_Less
      | (Core_Option_Option_Type.C_Some _, Core_Option_Option_Type.C_None) -> Core_Cmp_Ordering_Type.C_Greater
      | (Core_Option_Option_Type.C_Some x, Core_Option_Option_Type.C_Some y) -> CmpLog0.cmp_log x y
      end
  val cmp_log (self : Core_Option_Option_Type.t_option t) (o : Core_Option_Option_Type.t_option t) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl1_CmpLeLog_Stub
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Core_Option_Option_Type.t_option t
  function cmp_le_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpLeLog_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Core_Option_Option_Type.t_option t
  function cmp_le_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
  val cmp_le_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 282 14 282 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . [#"../../../../creusot-contracts/src/logic/ord.rs" 282 14 282 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_Impl1_CmpLeLog
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Core_Option_Option_Type.t_option t
  function cmp_le_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 280 4 280 10] ()
  val cmp_le_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 282 14 282 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . [#"../../../../creusot-contracts/src/logic/ord.rs" 282 14 282 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_Impl1_CmpLtLog_Stub
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Core_Option_Option_Type.t_option t
  function cmp_lt_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpLtLog_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Core_Option_Option_Type.t_option t
  function cmp_lt_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
  val cmp_lt_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 287 14 287 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . [#"../../../../creusot-contracts/src/logic/ord.rs" 287 14 287 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_Impl1_CmpLtLog
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Core_Option_Option_Type.t_option t
  function cmp_lt_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 285 4 285 10] ()
  val cmp_lt_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 287 14 287 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . [#"../../../../creusot-contracts/src/logic/ord.rs" 287 14 287 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_Impl1_CmpGeLog_Stub
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Core_Option_Option_Type.t_option t
  function cmp_ge_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGeLog_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Core_Option_Option_Type.t_option t
  function cmp_ge_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
  val cmp_ge_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 292 14 292 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . [#"../../../../creusot-contracts/src/logic/ord.rs" 292 14 292 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_Impl1_CmpGeLog
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Core_Option_Option_Type.t_option t
  function cmp_ge_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 290 4 290 10] ()
  val cmp_ge_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 292 14 292 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . [#"../../../../creusot-contracts/src/logic/ord.rs" 292 14 292 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_Impl1_CmpGtLog_Stub
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Core_Option_Option_Type.t_option t
  function cmp_gt_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGtLog_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Core_Option_Option_Type.t_option t
  function cmp_gt_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
  val cmp_gt_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 297 14 297 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . [#"../../../../creusot-contracts/src/logic/ord.rs" 297 14 297 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_Impl1_CmpGtLog
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Core_Option_Option_Type.t_option t
  function cmp_gt_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 295 4 295 10] ()
  val cmp_gt_log (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 297 14 297 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . [#"../../../../creusot-contracts/src/logic/ord.rs" 297 14 297 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_Impl1_Refl_Stub
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function refl (x : Core_Option_Option_Type.t_option t) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Refl_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function refl (x : Core_Option_Option_Type.t_option t) : ()
  val refl (x : Core_Option_Option_Type.t_option t) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 302 14 302 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : Core_Option_Option_Type.t_option t . [#"../../../../creusot-contracts/src/logic/ord.rs" 302 14 302 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_Impl1_Refl
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function refl (x : Core_Option_Option_Type.t_option t) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 300 4 300 10] ()
  val refl (x : Core_Option_Option_Type.t_option t) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 302 14 302 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : Core_Option_Option_Type.t_option t . [#"../../../../creusot-contracts/src/logic/ord.rs" 302 14 302 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_Impl1_Trans_Stub
  type t
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function trans (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) (z : Core_Option_Option_Type.t_option t) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
end
module CreusotContracts_Logic_Ord_Impl1_Trans_Interface
  type t
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function trans (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) (z : Core_Option_Option_Type.t_option t) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) (z : Core_Option_Option_Type.t_option t) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 307 15 307 32] CmpLog0.cmp_log x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 308 15 308 32] CmpLog0.cmp_log y z = o}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 309 14 309 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t, z : Core_Option_Option_Type.t_option t, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 307 15 307 32] CmpLog0.cmp_log x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 308 15 308 32] CmpLog0.cmp_log y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 309 14 309 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_Impl1_Trans
  type t
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function trans (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) (z : Core_Option_Option_Type.t_option t) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
   =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 305 4 305 10] ()
  val trans (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) (z : Core_Option_Option_Type.t_option t) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 307 15 307 32] CmpLog0.cmp_log x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 308 15 308 32] CmpLog0.cmp_log y z = o}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 309 14 309 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t, z : Core_Option_Option_Type.t_option t, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 307 15 307 32] CmpLog0.cmp_log x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 308 15 308 32] CmpLog0.cmp_log y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 309 14 309 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_Impl1_Antisym1_Stub
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function antisym1 (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym1_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function antisym1 (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
  val antisym1 (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 314 15 314 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 315 14 315 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . ([#"../../../../creusot-contracts/src/logic/ord.rs" 314 15 314 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 315 14 315 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_Impl1_Antisym1
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function antisym1 (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 312 4 312 10] ()
  val antisym1 (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 314 15 314 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 315 14 315 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . ([#"../../../../creusot-contracts/src/logic/ord.rs" 314 15 314 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 315 14 315 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_Impl1_Antisym2_Stub
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function antisym2 (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym2_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function antisym2 (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
  val antisym2 (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 320 15 320 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 321 14 321 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . ([#"../../../../creusot-contracts/src/logic/ord.rs" 320 15 320 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 321 14 321 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_Impl1_Antisym2
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function antisym2 (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 318 4 318 10] ()
  val antisym2 (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 320 15 320 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 321 14 321 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . ([#"../../../../creusot-contracts/src/logic/ord.rs" 320 15 320 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 321 14 321 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_Impl1_EqCmp_Stub
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function eq_cmp (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
end
module CreusotContracts_Logic_Ord_Impl1_EqCmp_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function eq_cmp (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
  val eq_cmp (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 326 14 326 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . [#"../../../../creusot-contracts/src/logic/ord.rs" 326 14 326 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_Impl1_EqCmp
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Stub as CmpLog0 with
    type t = t
  function eq_cmp (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 324 4 324 10] ()
  val eq_cmp (x : Core_Option_Option_Type.t_option t) (y : Core_Option_Option_Type.t_option t) : ()
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 326 14 326 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : Core_Option_Option_Type.t_option t, y : Core_Option_Option_Type.t_option t . [#"../../../../creusot-contracts/src/logic/ord.rs" 326 14 326 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog_Stub
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog_Interface
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 76 12 85 17] if self < o then
      Core_Cmp_Ordering_Type.C_Less
    else
      if self = o then Core_Cmp_Ordering_Type.C_Equal else Core_Cmp_Ordering_Type.C_Greater
    
  val cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module Instant_TestInstant_Interface
  val test_instant [#"../instant.rs" 7 0 7 21] (_1' : ()) : ()
end
module Instant_TestInstant
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog as CmpLog1
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog as CmpLog0 with
    type t = int,
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_Impl1_EqCmp_Interface as EqCmp1 with
    type t = int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_Impl1_Antisym2_Interface as Antisym21 with
    type t = int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_Impl1_Antisym1_Interface as Antisym11 with
    type t = int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_Impl1_Trans_Interface as Trans1 with
    type t = int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_Impl1_Refl_Interface as Refl1 with
    type t = int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Core_Option_Option_Type.t_option int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_Impl1_CmpGtLog_Interface as CmpGtLog1 with
    type t = int,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog1 with
    type self = Core_Option_Option_Type.t_option int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_Impl1_CmpGeLog_Interface as CmpGeLog1 with
    type t = int,
    predicate GeLog0.ge_log = GeLog1.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Core_Option_Option_Type.t_option int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_Impl1_CmpLtLog_Interface as CmpLtLog1 with
    type t = int,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Core_Option_Option_Type.t_option int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_Impl1_CmpLeLog_Interface as CmpLeLog1 with
    type t = int,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = Core_Option_Option_Type.t_option int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = Core_Option_Option_Type.t_option int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = Core_Option_Option_Type.t_option int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = Core_Option_Option_Type.t_option int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = Core_Option_Option_Type.t_option int,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = Core_Option_Option_Type.t_option int,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = Core_Option_Option_Type.t_option int,
    predicate GeLog0.ge_log = GeLog1.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = Core_Option_Option_Type.t_option int,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = Core_Option_Option_Type.t_option int,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  clone CreusotContracts_Std1_Time_Impl2_ShallowModel_Interface as ShallowModel0 with
    axiom .
  clone CreusotContracts_Std1_Time_Impl3_DeepModel_Interface as DeepModel4 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    axiom .
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  clone CreusotContracts_Std1_Time_SecsToNanos_Interface as SecsToNanos0
  clone Core_Num_Impl9_Max as Max0
  clone CreusotContracts_Std1_Time_Impl0_ShallowModel_Interface as ShallowModel1 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    axiom .
  clone CreusotContracts_Std1_Time_Impl1_DeepModel_Interface as DeepModel3 with
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    axiom .
  clone CreusotContracts_Logic_Ord_Impl2_GtLog as GtLog1
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel2 with
    type t = Std_Time_Instant_Type.t_instant,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel4.deep_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Std_Time_Instant_Type.t_instant,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Option_Impl0_DeepModel as DeepModel1 with
    type t = Std_Time_Instant_Type.t_instant,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel4.deep_model
  clone CreusotContracts_Logic_Ord_Impl2_GeLog as GeLog0
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Core_Time_Duration_Type.t_duration,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone Std_Time_Impl0_SaturatingDurationSince_Interface as SaturatingDurationSince0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos
  clone Core_Option_Impl0_IsNone_Interface as IsNone0 with
    type t = Core_Time_Duration_Type.t_duration
  clone Core_Option_Impl0_IsSome_Interface as IsSome0 with
    type t = Core_Time_Duration_Type.t_duration
  clone Std_Time_Impl0_CheckedDurationSince_Interface as CheckedDurationSince0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model
  clone Std_Time_Impl0_DurationSince_Interface as DurationSince0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos
  clone Core_Cmp_PartialOrd_Gt_Interface as Gt0 with
    type self = Core_Time_Duration_Type.t_duration,
    type rhs = Core_Time_Duration_Type.t_duration,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function DeepModel1.deep_model = DeepModel0.deep_model,
    predicate GtLog0.gt_log = GtLog1.gt_log,
    type DeepModelTy0.deepModelTy = int
  clone Core_Time_Impl29_Eq_Interface as Eq1 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Std_Time_Impl5_Sub_Interface as Sub1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos
  clone Std_Time_Impl3_Sub_Interface as Sub0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos
  clone Std_Time_Impl0_CheckedSub_Interface as CheckedSub0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos
  clone Std_Time_Impl1_Add_Interface as Add0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos
  clone Std_Time_Impl21_Eq_Interface as Eq0 with
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = Std_Time_Instant_Type.t_instant
  clone Std_Time_Impl0_CheckedAdd_Interface as CheckedAdd0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos
  clone Core_Cmp_PartialOrd_Ge_Interface as Ge0 with
    type self = Core_Time_Duration_Type.t_duration,
    type rhs = Core_Time_Duration_Type.t_duration,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function DeepModel1.deep_model = DeepModel0.deep_model,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    type DeepModelTy0.deepModelTy = int
  clone Std_Time_Impl0_Elapsed_Interface as Elapsed0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX',
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos
  clone Core_Time_Impl1_FromSecs_Interface as FromSecs0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function SecsToNanos0.secs_to_nanos = SecsToNanos0.secs_to_nanos,
    val Max0.mAX' = Max0.mAX'
  clone Std_Time_Impl0_Now_Interface as Now0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec cfg test_instant [#"../instant.rs" 7 0 7 21] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var instant_1 : Std_Time_Instant_Type.t_instant;
  var zero_dur_2 : Core_Time_Duration_Type.t_duration;
  var _3 : ();
  var _4 : bool;
  var _5 : bool;
  var _6 : Core_Time_Duration_Type.t_duration;
  var _7 : Core_Time_Duration_Type.t_duration;
  var _8 : Std_Time_Instant_Type.t_instant;
  var _9 : Core_Time_Duration_Type.t_duration;
  var _10 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : Std_Time_Instant_Type.t_instant;
  var _15 : Std_Time_Instant_Type.t_instant;
  var _16 : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant);
  var _17 : Std_Time_Instant_Type.t_instant;
  var _18 : Core_Time_Duration_Type.t_duration;
  var _19 : Std_Time_Instant_Type.t_instant;
  var _20 : ();
  var _21 : ();
  var _22 : bool;
  var _23 : bool;
  var _24 : Std_Time_Instant_Type.t_instant;
  var _25 : Std_Time_Instant_Type.t_instant;
  var _26 : Std_Time_Instant_Type.t_instant;
  var _27 : Core_Time_Duration_Type.t_duration;
  var _28 : Std_Time_Instant_Type.t_instant;
  var _29 : ();
  var three_seconds_30 : Core_Time_Duration_Type.t_duration;
  var greater_instant_31 : Std_Time_Instant_Type.t_instant;
  var _32 : Std_Time_Instant_Type.t_instant;
  var _33 : Core_Time_Duration_Type.t_duration;
  var _34 : ();
  var even_greater_instant_36 : Std_Time_Instant_Type.t_instant;
  var _37 : Std_Time_Instant_Type.t_instant;
  var _38 : Core_Time_Duration_Type.t_duration;
  var _39 : ();
  var _41 : ();
  var _42 : bool;
  var _43 : bool;
  var _44 : Std_Time_Instant_Type.t_instant;
  var _45 : Std_Time_Instant_Type.t_instant;
  var _46 : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant);
  var _47 : Std_Time_Instant_Type.t_instant;
  var _48 : Core_Time_Duration_Type.t_duration;
  var _49 : Std_Time_Instant_Type.t_instant;
  var _50 : ();
  var _51 : ();
  var _52 : bool;
  var _53 : bool;
  var _54 : Std_Time_Instant_Type.t_instant;
  var _55 : Std_Time_Instant_Type.t_instant;
  var _56 : Std_Time_Instant_Type.t_instant;
  var _57 : Core_Time_Duration_Type.t_duration;
  var _58 : Std_Time_Instant_Type.t_instant;
  var _59 : ();
  var lesser_instant_60 : Std_Time_Instant_Type.t_instant;
  var _61 : Std_Time_Instant_Type.t_instant;
  var _62 : Core_Time_Duration_Type.t_duration;
  var _63 : ();
  var _65 : ();
  var _66 : bool;
  var _67 : bool;
  var _68 : Core_Time_Duration_Type.t_duration;
  var _69 : Core_Time_Duration_Type.t_duration;
  var _70 : Std_Time_Instant_Type.t_instant;
  var _71 : Std_Time_Instant_Type.t_instant;
  var _72 : Core_Time_Duration_Type.t_duration;
  var _73 : ();
  var _74 : ();
  var _75 : bool;
  var _76 : bool;
  var _77 : Core_Time_Duration_Type.t_duration;
  var _78 : Core_Time_Duration_Type.t_duration;
  var _79 : Std_Time_Instant_Type.t_instant;
  var _80 : Std_Time_Instant_Type.t_instant;
  var _81 : Core_Time_Duration_Type.t_duration;
  var _82 : ();
  var _83 : ();
  var _84 : bool;
  var _85 : bool;
  var _86 : Core_Time_Duration_Type.t_duration;
  var _87 : Core_Time_Duration_Type.t_duration;
  var _88 : Std_Time_Instant_Type.t_instant;
  var _89 : Std_Time_Instant_Type.t_instant;
  var _90 : Core_Time_Duration_Type.t_duration;
  var _91 : ();
  var _92 : ();
  var _93 : bool;
  var _94 : bool;
  var _95 : Core_Time_Duration_Type.t_duration;
  var _96 : Core_Time_Duration_Type.t_duration;
  var _97 : Std_Time_Instant_Type.t_instant;
  var _98 : Std_Time_Instant_Type.t_instant;
  var _99 : Core_Time_Duration_Type.t_duration;
  var _100 : ();
  var _101 : ();
  var _102 : bool;
  var _103 : bool;
  var _104 : Core_Time_Duration_Type.t_duration;
  var _105 : Core_Time_Duration_Type.t_duration;
  var _106 : Std_Time_Instant_Type.t_instant;
  var _107 : Std_Time_Instant_Type.t_instant;
  var _108 : Core_Time_Duration_Type.t_duration;
  var _109 : ();
  var _110 : ();
  var _111 : bool;
  var _112 : bool;
  var _113 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var _114 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var _115 : Std_Time_Instant_Type.t_instant;
  var _116 : Std_Time_Instant_Type.t_instant;
  var _117 : ();
  var _118 : ();
  var _119 : bool;
  var _120 : bool;
  var _121 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var _122 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var _123 : Std_Time_Instant_Type.t_instant;
  var _124 : Std_Time_Instant_Type.t_instant;
  var _125 : ();
  var _126 : ();
  var _127 : bool;
  var _128 : bool;
  var _129 : Core_Time_Duration_Type.t_duration;
  var _130 : Core_Time_Duration_Type.t_duration;
  var _131 : Std_Time_Instant_Type.t_instant;
  var _132 : Std_Time_Instant_Type.t_instant;
  var _133 : Core_Time_Duration_Type.t_duration;
  var _134 : ();
  var _135 : ();
  var _136 : bool;
  var _137 : bool;
  var _138 : Core_Time_Duration_Type.t_duration;
  var _139 : Core_Time_Duration_Type.t_duration;
  var _140 : Std_Time_Instant_Type.t_instant;
  var _141 : Std_Time_Instant_Type.t_instant;
  var _142 : Core_Time_Duration_Type.t_duration;
  var _143 : ();
  {
    goto BB0
  }
  BB0 {
    instant_1 <- ([#"../instant.rs" 8 18 8 32] Now0.now ());
    goto BB1
  }
  BB1 {
    zero_dur_2 <- ([#"../instant.rs" 9 19 9 41] FromSecs0.from_secs ([#"../instant.rs" 9 39 9 40] (0 : uint64)));
    goto BB2
  }
  BB2 {
    _8 <- instant_1;
    _7 <- ([#"../instant.rs" 10 12 10 29] Elapsed0.elapsed _8);
    goto BB3
  }
  BB3 {
    _6 <- _7;
    _9 <- zero_dur_2;
    _5 <- ([#"../instant.rs" 10 12 10 41] Ge0.ge _6 _9);
    goto BB4
  }
  BB4 {
    _4 <- not _5;
    switch (_4)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    absurd
  }
  BB6 {
    _3 <- ();
    _17 <- instant_1;
    _18 <- zero_dur_2;
    _16 <- ([#"../instant.rs" 12 12 12 41] CheckedAdd0.checked_add _17 _18);
    goto BB7
  }
  BB7 {
    _15 <- ([#"../instant.rs" 12 12 12 50] Unwrap0.unwrap _16);
    goto BB8
  }
  BB8 {
    _14 <- _15;
    _19 <- instant_1;
    _13 <- ([#"../instant.rs" 12 12 12 61] Eq0.eq _14 _19);
    goto BB9
  }
  BB9 {
    _12 <- not _13;
    switch (_12)
      | False -> goto BB11
      | True -> goto BB10
      end
  }
  BB10 {
    absurd
  }
  BB11 {
    _11 <- ();
    _26 <- instant_1;
    _27 <- zero_dur_2;
    _25 <- ([#"../instant.rs" 13 12 13 30] Add0.add _26 _27);
    goto BB12
  }
  BB12 {
    _24 <- _25;
    _28 <- instant_1;
    _23 <- ([#"../instant.rs" 13 12 13 41] Eq0.eq _24 _28);
    goto BB13
  }
  BB13 {
    _22 <- not _23;
    switch (_22)
      | False -> goto BB15
      | True -> goto BB14
      end
  }
  BB14 {
    absurd
  }
  BB15 {
    _21 <- ();
    three_seconds_30 <- ([#"../instant.rs" 14 24 14 46] FromSecs0.from_secs ([#"../instant.rs" 14 44 14 45] (3 : uint64)));
    goto BB16
  }
  BB16 {
    _32 <- instant_1;
    _33 <- three_seconds_30;
    greater_instant_31 <- ([#"../instant.rs" 15 26 15 49] Add0.add _32 _33);
    goto BB17
  }
  BB17 {
    assert { [@expl:assertion] [#"../instant.rs" 16 18 16 45] ShallowModel0.shallow_model instant_1 < ShallowModel0.shallow_model greater_instant_31 };
    _34 <- ();
    _37 <- greater_instant_31;
    _38 <- three_seconds_30;
    even_greater_instant_36 <- ([#"../instant.rs" 17 31 17 62] Add0.add _37 _38);
    goto BB18
  }
  BB18 {
    assert { [@expl:assertion] [#"../instant.rs" 18 18 18 50] ShallowModel0.shallow_model instant_1 < ShallowModel0.shallow_model even_greater_instant_36 };
    _39 <- ();
    _47 <- instant_1;
    _48 <- zero_dur_2;
    _46 <- ([#"../instant.rs" 20 12 20 41] CheckedSub0.checked_sub _47 _48);
    goto BB19
  }
  BB19 {
    _45 <- ([#"../instant.rs" 20 12 20 50] Unwrap0.unwrap _46);
    goto BB20
  }
  BB20 {
    _44 <- _45;
    _49 <- instant_1;
    _43 <- ([#"../instant.rs" 20 12 20 61] Eq0.eq _44 _49);
    goto BB21
  }
  BB21 {
    _42 <- not _43;
    switch (_42)
      | False -> goto BB23
      | True -> goto BB22
      end
  }
  BB22 {
    absurd
  }
  BB23 {
    _41 <- ();
    _56 <- instant_1;
    _57 <- zero_dur_2;
    _55 <- ([#"../instant.rs" 21 12 21 30] Sub0.sub _56 _57);
    goto BB24
  }
  BB24 {
    _54 <- _55;
    _58 <- instant_1;
    _53 <- ([#"../instant.rs" 21 12 21 41] Eq0.eq _54 _58);
    goto BB25
  }
  BB25 {
    _52 <- not _53;
    switch (_52)
      | False -> goto BB27
      | True -> goto BB26
      end
  }
  BB26 {
    absurd
  }
  BB27 {
    _51 <- ();
    _61 <- instant_1;
    _62 <- three_seconds_30;
    lesser_instant_60 <- ([#"../instant.rs" 22 25 22 48] Sub0.sub _61 _62);
    goto BB28
  }
  BB28 {
    assert { [@expl:assertion] [#"../instant.rs" 23 18 23 44] ShallowModel0.shallow_model instant_1 > ShallowModel0.shallow_model lesser_instant_60 };
    _63 <- ();
    _70 <- instant_1;
    _71 <- instant_1;
    _69 <- ([#"../instant.rs" 24 12 24 29] Sub1.sub _70 _71);
    goto BB29
  }
  BB29 {
    _68 <- _69;
    _72 <- zero_dur_2;
    _67 <- ([#"../instant.rs" 24 12 24 41] Eq1.eq _68 _72);
    goto BB30
  }
  BB30 {
    _66 <- not _67;
    switch (_66)
      | False -> goto BB32
      | True -> goto BB31
      end
  }
  BB31 {
    absurd
  }
  BB32 {
    _65 <- ();
    _79 <- instant_1;
    _80 <- greater_instant_31;
    _78 <- ([#"../instant.rs" 25 12 25 37] Sub1.sub _79 _80);
    goto BB33
  }
  BB33 {
    _77 <- _78;
    _81 <- zero_dur_2;
    _76 <- ([#"../instant.rs" 25 12 25 49] Eq1.eq _77 _81);
    goto BB34
  }
  BB34 {
    _75 <- not _76;
    switch (_75)
      | False -> goto BB36
      | True -> goto BB35
      end
  }
  BB35 {
    absurd
  }
  BB36 {
    _74 <- ();
    _88 <- greater_instant_31;
    _89 <- instant_1;
    _87 <- ([#"../instant.rs" 26 12 26 37] Sub1.sub _88 _89);
    goto BB37
  }
  BB37 {
    _86 <- _87;
    _90 <- zero_dur_2;
    _85 <- ([#"../instant.rs" 26 12 26 48] Gt0.gt _86 _90);
    goto BB38
  }
  BB38 {
    _84 <- not _85;
    switch (_84)
      | False -> goto BB40
      | True -> goto BB39
      end
  }
  BB39 {
    absurd
  }
  BB40 {
    _83 <- ();
    _97 <- greater_instant_31;
    _98 <- instant_1;
    _96 <- ([#"../instant.rs" 28 12 28 51] DurationSince0.duration_since _97 _98);
    goto BB41
  }
  BB41 {
    _95 <- _96;
    _99 <- zero_dur_2;
    _94 <- ([#"../instant.rs" 28 12 28 62] Gt0.gt _95 _99);
    goto BB42
  }
  BB42 {
    _93 <- not _94;
    switch (_93)
      | False -> goto BB44
      | True -> goto BB43
      end
  }
  BB43 {
    absurd
  }
  BB44 {
    _92 <- ();
    _106 <- instant_1;
    _107 <- greater_instant_31;
    _105 <- ([#"../instant.rs" 29 12 29 51] DurationSince0.duration_since _106 _107);
    goto BB45
  }
  BB45 {
    _104 <- _105;
    _108 <- zero_dur_2;
    _103 <- ([#"../instant.rs" 29 12 29 63] Eq1.eq _104 _108);
    goto BB46
  }
  BB46 {
    _102 <- not _103;
    switch (_102)
      | False -> goto BB48
      | True -> goto BB47
      end
  }
  BB47 {
    absurd
  }
  BB48 {
    _101 <- ();
    _115 <- greater_instant_31;
    _116 <- instant_1;
    _114 <- ([#"../instant.rs" 30 12 30 59] CheckedDurationSince0.checked_duration_since _115 _116);
    goto BB49
  }
  BB49 {
    _113 <- _114;
    _112 <- ([#"../instant.rs" 30 12 30 69] IsSome0.is_some _113);
    goto BB50
  }
  BB50 {
    _111 <- not _112;
    switch (_111)
      | False -> goto BB52
      | True -> goto BB51
      end
  }
  BB51 {
    absurd
  }
  BB52 {
    _110 <- ();
    _123 <- instant_1;
    _124 <- greater_instant_31;
    _122 <- ([#"../instant.rs" 31 12 31 59] CheckedDurationSince0.checked_duration_since _123 _124);
    goto BB53
  }
  BB53 {
    _121 <- _122;
    _120 <- ([#"../instant.rs" 31 12 31 69] IsNone0.is_none _121);
    goto BB54
  }
  BB54 {
    _119 <- not _120;
    switch (_119)
      | False -> goto BB56
      | True -> goto BB55
      end
  }
  BB55 {
    absurd
  }
  BB56 {
    _118 <- ();
    _131 <- greater_instant_31;
    _132 <- instant_1;
    _130 <- ([#"../instant.rs" 32 12 32 62] SaturatingDurationSince0.saturating_duration_since _131 _132);
    goto BB57
  }
  BB57 {
    _129 <- _130;
    _133 <- zero_dur_2;
    _128 <- ([#"../instant.rs" 32 12 32 73] Gt0.gt _129 _133);
    goto BB58
  }
  BB58 {
    _127 <- not _128;
    switch (_127)
      | False -> goto BB60
      | True -> goto BB59
      end
  }
  BB59 {
    absurd
  }
  BB60 {
    _126 <- ();
    _140 <- instant_1;
    _141 <- greater_instant_31;
    _139 <- ([#"../instant.rs" 33 12 33 62] SaturatingDurationSince0.saturating_duration_since _140 _141);
    goto BB61
  }
  BB61 {
    _138 <- _139;
    _142 <- zero_dur_2;
    _137 <- ([#"../instant.rs" 33 12 33 74] Eq1.eq _138 _142);
    goto BB62
  }
  BB62 {
    _136 <- not _137;
    switch (_136)
      | False -> goto BB64
      | True -> goto BB63
      end
  }
  BB63 {
    absurd
  }
  BB64 {
    _135 <- ();
    _0 <- ();
    return _0
  }
  
end
