module M_drop_pair__drop_pair [#"drop_pair.rs" 7 0 7 42]
  let%span sdrop_pair0 = "drop_pair.rs" 4 10 4 22
  let%span sdrop_pair1 = "drop_pair.rs" 5 10 5 24
  let%span sdrop_pair2 = "drop_pair.rs" 6 10 6 24
  let%span sresolve3 = "../../../creusot-contracts/src/resolve.rs" 27 8 27 44
  let%span sresolve4 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed uint32) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed uint32) =
    resolve'3 _1
  
  predicate resolve'1 (self : (borrowed uint32, borrowed uint32)) =
    [%#sresolve3] resolve'2 (let (a, _) = self in a) /\ resolve'2 (let (_, a) = self in a)
  
  predicate resolve'0 (_1 : (borrowed uint32, borrowed uint32)) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec drop_pair (_x:(borrowed uint32, borrowed uint32)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = -{resolve'0 _x}- s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () | & _x : (borrowed uint32, borrowed uint32) = _x ] 
    [ return' (result:())-> {[@expl:postcondition] [%#sdrop_pair2] (let (_, a) = _x in a).final
      = (let (_, a) = _x in a).current}
      {[@expl:postcondition] [%#sdrop_pair1] (let (a, _) = _x in a).final = (let (a, _) = _x in a).current}
      {[@expl:postcondition] [%#sdrop_pair0] resolve'0 _x}
      (! return' {result}) ]
    
end
module M_drop_pair__drop_pair2 [#"drop_pair.rs" 9 0 9 42]
  let%span sresolve0 = "../../../creusot-contracts/src/resolve.rs" 27 8 27 44
  let%span sresolve1 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed uint32) =
    [%#sresolve1] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed uint32) =
    resolve'3 _1
  
  predicate resolve'1 (self : (borrowed uint32, borrowed uint32)) =
    [%#sresolve0] resolve'2 (let (a, _) = self in a) /\ resolve'2 (let (_, a) = self in a)
  
  predicate resolve'0 (_1 : (borrowed uint32, borrowed uint32)) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec drop_pair2 (x:(borrowed uint32, borrowed uint32)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = -{resolve'0 x}- s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () | & x : (borrowed uint32, borrowed uint32) = x ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_drop_pair__drop [#"drop_pair.rs" 15 0 15 52]
  let%span sresolve0 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed uint32) =
    [%#sresolve0] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed uint32) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec drop (_x:borrowed uint32) (y:borrowed uint32) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _x}- s1
      | s1 = Borrow.borrow_final <uint32> {y.current} {Borrow.get_id y}
          (fun (_ret':borrowed uint32) ->  [ &_3 <- _ret' ]  [ &y <- { y with current = _ret'.final ; } ] s2)
      | s2 =  [ &_x <- _3 ] s3
      | s3 = -{resolve'0 _x}- s4
      | s4 = -{resolve'0 y}- s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & _x : borrowed uint32 = _x
    | & y : borrowed uint32 = y
    | & _3 : borrowed uint32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
