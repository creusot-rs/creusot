
module DropPair_DropPair
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : (borrowed uint32, borrowed uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'1 (let (a, _) = self in a)
    /\ resolve'1 (let (_, a) = self in a)
  let rec resolve'0 (self:(borrowed uint32, borrowed uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec drop_pair (_x:(borrowed uint32, borrowed uint32)) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _x}- s1 | s1 =  [ &_0 <- [#"../drop_pair.rs" 7 43 7 45] () ] s2 | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & _x : (borrowed uint32, borrowed uint32) = _x ] 
    [ return' (result:())-> {[@expl:postcondition] [#"../drop_pair.rs" 6 10 6 24]  ^ (let (_, a) = _x in a)
      =  * (let (_, a) = _x in a)}
      {[@expl:postcondition] [#"../drop_pair.rs" 5 10 5 24]  ^ (let (a, _) = _x in a) =  * (let (a, _) = _x in a)}
      {[@expl:postcondition] [#"../drop_pair.rs" 4 10 4 22] resolve'0 _x}
      (! return' {result}) ]
    
end
module DropPair_DropPair2
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : (borrowed uint32, borrowed uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'1 (let (a, _) = self in a)
    /\ resolve'1 (let (_, a) = self in a)
  let rec resolve'0 (self:(borrowed uint32, borrowed uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec drop_pair2 (x:(borrowed uint32, borrowed uint32)) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 x}- s1 | s1 =  [ &_0 <- [#"../drop_pair.rs" 9 43 11 1] () ] s2 | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & x : (borrowed uint32, borrowed uint32) = x ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module DropPair_Drop
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.UInt32
  use prelude.Int
  predicate resolve'0 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec drop (_x:borrowed uint32) (y:borrowed uint32) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _x}- s1
      | s1 = Borrow.borrow_final <uint32> { * y} {Borrow.get_id y}
          (fun (_ret':borrowed uint32) ->  [ &_3 <- _ret' ]  [ &y <- { y with current = ( ^ _3) ; } ] s2)
      | s2 =  [ &_x <- _3 ] (any [ any_ (_any:borrowed uint32)-> (!  [ &_3 <- _any ] s3) ] )
      | s3 = -{resolve'0 _x}- s4
      | s4 =  [ &_0 <- [#"../drop_pair.rs" 15 53 17 1] () ] s5
      | s5 = -{resolve'0 y}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & _x : borrowed uint32 = _x
    | & y : borrowed uint32 = y
    | & _3 : borrowed uint32 = any_l () : borrowed uint32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
