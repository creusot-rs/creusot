
module Logic_Simple_Stub
  type x
  function simple [#"../logic.rs" 5 0 5 27] (x : x) : x
end
module Logic_Simple_Interface
  type x
  function simple [#"../logic.rs" 5 0 5 27] (x : x) : x
end
module Logic_Simple
  type x
  function simple [#"../logic.rs" 5 0 5 27] (x : x) : x =
    [#"../logic.rs" 6 4 6 5] x
  val simple [#"../logic.rs" 5 0 5 27] (x : x) : x
    ensures { result = simple x }
    
end
module Logic_Unreachable_Stub
  type x
  use prelude.Borrow
  function unreachable [#"../logic.rs" 12 0 12 40] (_1' : ()) : borrowed x
end
module Logic_Unreachable_Interface
  type x
  use prelude.Borrow
  function unreachable [#"../logic.rs" 12 0 12 40] (_1' : ()) : borrowed x
end
module Logic_Unreachable
  type x
  use prelude.Borrow
  function unreachable [#"../logic.rs" 12 0 12 40] (_1' : ()) : borrowed x =
    [#"../logic.rs" 11 0 11 18] unreachable ()
  val unreachable [#"../logic.rs" 12 0 12 40] (_1' : ()) : borrowed x
    ensures { result = unreachable _1' }
    
end
module Logic_Cur_Stub
  type x
  use prelude.Borrow
  function cur [#"../logic.rs" 18 0 18 36] (x : borrowed x) : x
end
module Logic_Cur_Interface
  type x
  use prelude.Borrow
  function cur [#"../logic.rs" 18 0 18 36] (x : borrowed x) : x
  axiom cur_spec : forall x : borrowed x . [#"../logic.rs" 17 10 17 22] cur x =  * x
end
module Logic_Cur
  type x
  use prelude.Borrow
  function cur [#"../logic.rs" 18 0 18 36] (x : borrowed x) : x =
    [#"../logic.rs" 19 4 19 6]  * x
  val cur [#"../logic.rs" 18 0 18 36] (x : borrowed x) : x
    ensures { result = cur x }
    
  axiom cur_spec : forall x : borrowed x . [#"../logic.rs" 17 10 17 22] cur x =  * x
end
module Logic_Cur_Impl
  type x
  use prelude.Borrow
  let rec ghost function cur [#"../logic.rs" 18 0 18 36] (x : borrowed x) : x
    ensures { [#"../logic.rs" 17 10 17 22] result =  * x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../logic.rs" 19 4 19 6]  * x
end
module Logic_Fin_Stub
  type x
  use prelude.Borrow
  function fin [#"../logic.rs" 24 0 24 42] (x : borrowed x) : x
end
module Logic_Fin_Interface
  type x
  use prelude.Borrow
  function fin [#"../logic.rs" 24 0 24 42] (x : borrowed x) : x
  axiom fin_spec : forall x : borrowed x . [#"../logic.rs" 23 10 23 22] fin x =  ^ x
end
module Logic_Fin
  type x
  use prelude.Borrow
  function fin [#"../logic.rs" 24 0 24 42] (x : borrowed x) : x =
    [#"../logic.rs" 25 4 25 6]  ^ x
  val fin [#"../logic.rs" 24 0 24 42] (x : borrowed x) : x
    ensures { result = fin x }
    
  axiom fin_spec : forall x : borrowed x . [#"../logic.rs" 23 10 23 22] fin x =  ^ x
end
module Logic_Fin_Impl
  type x
  use prelude.Borrow
  let rec ghost function fin [#"../logic.rs" 24 0 24 42] (x : borrowed x) : x
    ensures { [#"../logic.rs" 23 10 23 22] result =  ^ x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../logic.rs" 25 4 25 6]  ^ x
end
module Logic_Expiry_Stub
  type x
  use prelude.Borrow
  function expiry [#"../logic.rs" 31 0 31 47] (x : borrowed x) : borrowed x
end
module Logic_Expiry_Interface
  type x
  use prelude.Borrow
  function expiry [#"../logic.rs" 31 0 31 47] (x : borrowed x) : borrowed x
  axiom expiry_spec : forall x : borrowed x . ([#"../logic.rs" 30 19 30 32]  ^ expiry x =  ^ x) && ([#"../logic.rs" 29 19 29 32]  * expiry x =  * x)
end
module Logic_Expiry
  type x
  use prelude.Borrow
  function expiry [#"../logic.rs" 31 0 31 47] (x : borrowed x) : borrowed x =
    [#"../logic.rs" 28 0 28 20] x
  val expiry [#"../logic.rs" 31 0 31 47] (x : borrowed x) : borrowed x
    ensures { result = expiry x }
    
  axiom expiry_spec : forall x : borrowed x . ([#"../logic.rs" 30 19 30 32]  ^ expiry x =  ^ x) && ([#"../logic.rs" 29 19 29 32]  * expiry x =  * x)
end
module Logic_Expiry_Impl
  type x
  use prelude.Borrow
  let rec ghost function expiry [#"../logic.rs" 31 0 31 47] (x : borrowed x) : borrowed x
    ensures { [#"../logic.rs" 29 19 29 32]  * result =  * x }
    ensures { [#"../logic.rs" 30 19 30 32]  ^ result =  ^ x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../logic.rs" 28 0 28 20] x
end
