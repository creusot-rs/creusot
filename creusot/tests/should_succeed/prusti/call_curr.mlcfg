
module CallCurr_Deref_Stub
  type x
  use prelude.Borrow
  function deref [#"../call_curr.rs" 7 0 7 34] (x : x) : x
end
module CallCurr_Deref_Interface
  type x
  use prelude.Borrow
  function deref [#"../call_curr.rs" 7 0 7 34] (x : x) : x
  val deref [#"../call_curr.rs" 7 0 7 34] (x : x) : x
    ensures { result = deref x }
    
end
module CallCurr_Deref
  type x
  use prelude.Borrow
  function deref [#"../call_curr.rs" 7 0 7 34] (x : x) : x =
    [#"../call_curr.rs" 8 5 8 6] x
  val deref [#"../call_curr.rs" 7 0 7 34] (x : x) : x
    ensures { result = deref x }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 27 4 27 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Alloc_Boxed_Impl12_Clone_Interface
  type t
  type a
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val clone' (self : t) : t
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { Inv1.inv result }
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module CallCurr_Test_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CallCurr_Deref_Stub as Deref0 with
    type x = uint32
  val test [#"../call_curr.rs" 12 0 12 44] (x : uint32) : uint32
    ensures { [#"../call_curr.rs" 11 10 11 28] Deref0.deref x = result }
    
end
module CallCurr_Test
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = uint32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = uint32,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = uint32
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = uint32,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CallCurr_Deref as Deref0 with
    type x = uint32
  clone Alloc_Boxed_Impl12_Clone_Interface as Clone0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv
  let rec cfg test [#"../call_curr.rs" 12 0 12 44] [@cfg:stackify] [@cfg:subregion_analysis] (x : uint32) : uint32
    ensures { [#"../call_curr.rs" 11 10 11 28] Deref0.deref x = result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x : uint32 = x;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../call_curr.rs" 13 4 13 13] Clone0.clone' x);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
