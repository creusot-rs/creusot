
module WithStatic_Id_Stub
  type x
  function id [#"../with_static.rs" 6 0 6 47] (x : x) : x
end
module WithStatic_Id_Interface
  type x
  function id [#"../with_static.rs" 6 0 6 47] (x : x) : x
  val id [#"../with_static.rs" 6 0 6 47] (x : x) : x
    ensures { result = id x }
    
end
module WithStatic_Id
  type x
  function id [#"../with_static.rs" 6 0 6 47] (x : x) : x =
    [#"../with_static.rs" 7 4 7 5] x
  val id [#"../with_static.rs" 6 0 6 47] (x : x) : x
    ensures { result = id x }
    
end
module CreusotContracts_Stubs_Snap_Stub
  type t
  function snap (t : t) : t
end
module CreusotContracts_Stubs_Snap_Interface
  type t
  function snap (t : t) : t
  val snap (t : t) : t
    ensures { result = snap t }
    
end
module CreusotContracts_Stubs_Snap
  type t
  function snap (t : t) : t =
    [#"../../../../../creusot-contracts/src/stubs.rs" 109 4 109 5] t
  val snap (t : t) : t
    ensures { result = snap t }
    
end
module WithStatic_UseSnap_Stub
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function use_snap [#"../with_static.rs" 12 0 12 47] (x : uint32) : uint32
end
module WithStatic_UseSnap_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function use_snap [#"../with_static.rs" 12 0 12 47] (x : uint32) : uint32
  val use_snap [#"../with_static.rs" 12 0 12 47] (x : uint32) : uint32
    ensures { result = use_snap x }
    
end
module WithStatic_UseSnap
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Stubs_Snap_Stub as Snap0 with
    type t = uint32
  function use_snap [#"../with_static.rs" 12 0 12 47] (x : uint32) : uint32 =
    [#"../with_static.rs" 13 4 13 11] Snap0.snap x
  val use_snap [#"../with_static.rs" 12 0 12 47] (x : uint32) : uint32
    ensures { result = use_snap x }
    
end
module WithStatic_Id2_Stub
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function id2 [#"../with_static.rs" 18 0 18 54] (x : uint32) : uint32
end
module WithStatic_Id2_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function id2 [#"../with_static.rs" 18 0 18 54] (x : uint32) : uint32
  val id2 [#"../with_static.rs" 18 0 18 54] (x : uint32) : uint32
    ensures { result = id2 x }
    
end
module WithStatic_Id2
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone WithStatic_Id_Stub as Id0 with
    type x = uint32
  function id2 [#"../with_static.rs" 18 0 18 54] (x : uint32) : uint32 =
    [#"../with_static.rs" 19 4 19 17] Id0.id x
  val id2 [#"../with_static.rs" 18 0 18 54] (x : uint32) : uint32
    ensures { result = id2 x }
    
end
module WithStatic_Test_Stub
  type x
  function test [#"../with_static.rs" 24 0 24 54] (x : (x, x)) : x
end
module WithStatic_Test_Interface
  type x
  function test [#"../with_static.rs" 24 0 24 54] (x : (x, x)) : x
  val test [#"../with_static.rs" 24 0 24 54] (x : (x, x)) : x
    ensures { result = test x }
    
end
module WithStatic_Test
  type x
  function test [#"../with_static.rs" 24 0 24 54] (x : (x, x)) : x =
    [#"../with_static.rs" 25 4 25 7] let (a, _) = x in a
  val test [#"../with_static.rs" 24 0 24 54] (x : (x, x)) : x
    ensures { result = test x }
    
end
