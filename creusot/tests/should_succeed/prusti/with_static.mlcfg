
module WithStatic_Id_Stub
  type x
  function id [#"../with_static.rs" 7 0 7 47] (x : x) : x
end
module WithStatic_Id_Interface
  type x
  function id [#"../with_static.rs" 7 0 7 47] (x : x) : x
  val id [#"../with_static.rs" 7 0 7 47] (x : x) : x
    ensures { result = id x }
    
end
module WithStatic_Id
  type x
  function id [#"../with_static.rs" 7 0 7 47] (x : x) : x =
    [#"../with_static.rs" 8 4 8 5] x
  val id [#"../with_static.rs" 7 0 7 47] (x : x) : x
    ensures { result = id x }
    
end
module WithStatic_Id2_Stub
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function id2 [#"../with_static.rs" 13 0 13 54] (x : uint32) : uint32
end
module WithStatic_Id2_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function id2 [#"../with_static.rs" 13 0 13 54] (x : uint32) : uint32
  val id2 [#"../with_static.rs" 13 0 13 54] (x : uint32) : uint32
    ensures { result = id2 x }
    
end
module WithStatic_Id2
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone WithStatic_Id_Stub as Id0 with
    type x = uint32
  function id2 [#"../with_static.rs" 13 0 13 54] (x : uint32) : uint32 =
    [#"../with_static.rs" 14 4 14 17] Id0.id x
  val id2 [#"../with_static.rs" 13 0 13 54] (x : uint32) : uint32
    ensures { result = id2 x }
    
end
module WithStatic_Test_Stub
  type x
  function test [#"../with_static.rs" 19 0 19 54] (x : (x, x)) : x
end
module WithStatic_Test_Interface
  type x
  function test [#"../with_static.rs" 19 0 19 54] (x : (x, x)) : x
  val test [#"../with_static.rs" 19 0 19 54] (x : (x, x)) : x
    ensures { result = test x }
    
end
module WithStatic_Test
  type x
  function test [#"../with_static.rs" 19 0 19 54] (x : (x, x)) : x =
    [#"../with_static.rs" 20 4 20 7] let (a, _) = x in a
  val test [#"../with_static.rs" 19 0 19 54] (x : (x, x)) : x
    ensures { result = test x }
    
end
