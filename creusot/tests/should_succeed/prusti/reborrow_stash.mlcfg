
module ReborrowStash_Test_Type
  use prelude.Int
  use prelude.UInt32
  type t_test  =
    | C_Test uint32
    
  let function test_x (self : t_test) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Test a -> a
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module ReborrowStash_Impl0_Test_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use ReborrowStash_Test_Type as ReborrowStash_Test_Type
  val test [#"../reborrow_stash.rs" 12 4 12 51] (self : borrowed (ReborrowStash_Test_Type.t_test)) (stash : borrowed uint32) : borrowed uint32
    ensures { [#"../reborrow_stash.rs" 9 14 9 35]  ^ stash = old(ReborrowStash_Test_Type.test_x ( * self)) }
    ensures { [#"../reborrow_stash.rs" 10 14 10 36]  * result = old(ReborrowStash_Test_Type.test_x ( * self)) }
    ensures { [#"../reborrow_stash.rs" 11 19 11 36] ReborrowStash_Test_Type.test_x ( ^ self) =  ^ result }
    
end
module ReborrowStash_Impl0_Test
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use ReborrowStash_Test_Type as ReborrowStash_Test_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = ReborrowStash_Test_Type.t_test
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  let rec cfg test [#"../reborrow_stash.rs" 12 4 12 51] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (ReborrowStash_Test_Type.t_test)) (stash : borrowed uint32) : borrowed uint32
    ensures { [#"../reborrow_stash.rs" 9 14 9 35]  ^ stash = old(ReborrowStash_Test_Type.test_x ( * self)) }
    ensures { [#"../reborrow_stash.rs" 10 14 10 36]  * result = old(ReborrowStash_Test_Type.test_x ( * self)) }
    ensures { [#"../reborrow_stash.rs" 11 19 11 36] ReborrowStash_Test_Type.test_x ( ^ self) =  ^ result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var self : borrowed (ReborrowStash_Test_Type.t_test) = self;
  var stash : borrowed uint32 = stash;
  var _3 : borrowed uint32;
  var _8 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    stash <- { stash with current = ReborrowStash_Test_Type.test_x ( * self) };
    assume { Resolve0.resolve stash };
    _8 <- Borrow.borrow_mut (ReborrowStash_Test_Type.test_x ( * self));
    self <- { self with current = (let ReborrowStash_Test_Type.C_Test a =  * self in ReborrowStash_Test_Type.C_Test ( ^ _8)) };
    _3 <- Borrow.borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _3) };
    _0 <- Borrow.borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _0) };
    assume { Resolve0.resolve _8 };
    assume { Resolve0.resolve _3 };
    assume { Resolve1.resolve self };
    return _0
  }
  
end
