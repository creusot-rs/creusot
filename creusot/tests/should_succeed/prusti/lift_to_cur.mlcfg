
module LiftToCur_Deref_Stub
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function deref [#"../lift_to_cur.rs" 5 0 5 29] (x : uint32) : uint32
end
module LiftToCur_Deref_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function deref [#"../lift_to_cur.rs" 5 0 5 29] (x : uint32) : uint32
  val deref [#"../lift_to_cur.rs" 5 0 5 29] (x : uint32) : uint32
    ensures { result = deref x }
    
end
module LiftToCur_Deref
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function deref [#"../lift_to_cur.rs" 5 0 5 29] (x : uint32) : uint32 =
    [#"../lift_to_cur.rs" 6 6 6 7] x
  val deref [#"../lift_to_cur.rs" 5 0 5 29] (x : uint32) : uint32
    ensures { result = deref x }
    
end
module LiftToCur_InLogic1_Stub
  type t
  use prelude.Borrow
  function in_logic1 [#"../lift_to_cur.rs" 11 0 11 42] (x : t) : t
end
module LiftToCur_InLogic1_Interface
  type t
  use prelude.Borrow
  function in_logic1 [#"../lift_to_cur.rs" 11 0 11 42] (x : t) : t
  val in_logic1 [#"../lift_to_cur.rs" 11 0 11 42] (x : t) : t
    ensures { result = in_logic1 x }
    
end
module LiftToCur_InLogic1
  type t
  use prelude.Borrow
  function in_logic1 [#"../lift_to_cur.rs" 11 0 11 42] (x : t) : t =
    [#"../lift_to_cur.rs" 12 4 12 5] x
  val in_logic1 [#"../lift_to_cur.rs" 11 0 11 42] (x : t) : t
    ensures { result = in_logic1 x }
    
end
module LiftToCur_InLogic2_Stub
  type t
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function in_logic2 [#"../lift_to_cur.rs" 17 0 17 59] (x : uint32) : uint32
end
module LiftToCur_InLogic2_Interface
  type t
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function in_logic2 [#"../lift_to_cur.rs" 17 0 17 59] (x : uint32) : uint32
  val in_logic2 [#"../lift_to_cur.rs" 17 0 17 59] (x : uint32) : uint32
    ensures { result = in_logic2 x }
    
end
module LiftToCur_InLogic2
  type t
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function in_logic2 [#"../lift_to_cur.rs" 17 0 17 59] (x : uint32) : uint32 =
    [#"../lift_to_cur.rs" 18 4 18 5] x
  val in_logic2 [#"../lift_to_cur.rs" 17 0 17 59] (x : uint32) : uint32
    ensures { result = in_logic2 x }
    
end
module LiftToCur_Test_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone LiftToCur_Deref_Stub as Deref0
  val test [#"../lift_to_cur.rs" 22 0 22 32] (x : uint32) : uint32
    ensures { [#"../lift_to_cur.rs" 21 10 21 28] result = Deref0.deref x }
    
end
module LiftToCur_Test
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone LiftToCur_Deref as Deref0
  let rec cfg test [#"../lift_to_cur.rs" 22 0 22 32] [@cfg:stackify] [@cfg:subregion_analysis] (x : uint32) : uint32
    ensures { [#"../lift_to_cur.rs" 21 10 21 28] result = Deref0.deref x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x : uint32 = x;
  {
    goto BB0
  }
  BB0 {
    _0 <- x;
    return _0
  }
  
end
module LiftToCur_MkRef_MkRef_Stub
  type self
  use prelude.Borrow
  function mk_ref [#"../lift_to_cur.rs" 29 4 29 29] (self : self) : self
end
module LiftToCur_MkRef_MkRef_Interface
  type self
  use prelude.Borrow
  function mk_ref [#"../lift_to_cur.rs" 29 4 29 29] (self : self) : self
  val mk_ref [#"../lift_to_cur.rs" 29 4 29 29] (self : self) : self
    ensures { result = mk_ref self }
    
end
module LiftToCur_MkRef_MkRef
  type self
  use prelude.Borrow
  function mk_ref [#"../lift_to_cur.rs" 29 4 29 29] (self : self) : self =
    [#"../lift_to_cur.rs" 30 8 30 12] self
  val mk_ref [#"../lift_to_cur.rs" 29 4 29 29] (self : self) : self
    ensures { result = mk_ref self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module LiftToCur_MkRef_Interface
  use prelude.Int
  use prelude.UInt32
  clone LiftToCur_MkRef_MkRef_Stub as MkRef0 with
    type self = (uint32, uint32)
  val mk_ref [#"../lift_to_cur.rs" 37 0 37 39] (x : (uint32, uint32)) : uint32
    ensures { [#"../lift_to_cur.rs" 36 0 36 47] let x = MkRef0.mk_ref x in (let (a, _) = x in a) = result }
    
end
module LiftToCur_MkRef
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = uint32
  clone LiftToCur_MkRef_MkRef as MkRef0 with
    type self = (uint32, uint32)
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = uint32,
    type t2 = uint32,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg mk_ref [#"../lift_to_cur.rs" 37 0 37 39] [@cfg:stackify] [@cfg:subregion_analysis] (x : (uint32, uint32)) : uint32
    ensures { [#"../lift_to_cur.rs" 36 0 36 47] let x = MkRef0.mk_ref x in (let (a, _) = x in a) = result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x : (uint32, uint32) = x;
  {
    goto BB0
  }
  BB0 {
    _0 <- (let (a, _) = x in a);
    assume { Resolve0.resolve x };
    return _0
  }
  
end
module LiftToCur_Impl0
  type t
end
