
module LiftToCur_Test
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  function deref0 [#"../lift_to_cur.rs" 6 0 6 29] (x : uint32) : uint32 =
    [#"../lift_to_cur.rs" 7 6 7 7] x
  val deref0 [#"../lift_to_cur.rs" 6 0 6 29] (x : uint32) : uint32
    ensures { result = deref0 x }
    
  let rec cfg test [#"../lift_to_cur.rs" 17 0 17 32] [@cfg:stackify] [@cfg:subregion_analysis] (x : uint32) : uint32
    ensures { [#"../lift_to_cur.rs" 16 10 16 28] result = deref0 x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x : uint32 = x;
  {
    goto BB0
  }
  BB0 {
    [#"../lift_to_cur.rs" 18 4 18 7] _0 <- x;
    return _0
  }
  
end
module LiftToCur_MkRef
  use prelude.Borrow
  use prelude.UInt32
  function mk_ref0 [#"../lift_to_cur.rs" 24 4 24 29] (self : (uint32, uint32)) : (uint32, uint32) =
    [#"../lift_to_cur.rs" 25 8 25 12] self
  val mk_ref0 [#"../lift_to_cur.rs" 24 4 24 29] (self : (uint32, uint32)) : (uint32, uint32)
    ensures { result = mk_ref0 self }
    
  use prelude.Int
  predicate resolve1 (self : uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 47 8 47 12] true
  val resolve1 (self : uint32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (uint32, uint32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 18 8 18 60] resolve1 (let (a, _) = self in a) /\ resolve1 (let (_, a) = self in a)
  val resolve0 (self : (uint32, uint32)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg mk_ref [#"../lift_to_cur.rs" 32 0 32 39] [@cfg:stackify] [@cfg:subregion_analysis] (x : (uint32, uint32)) : uint32
    ensures { [#"../lift_to_cur.rs" 31 0 31 47] let x = mk_ref0 x in (let (a, _) = x in a) = result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x : (uint32, uint32) = x;
  {
    goto BB0
  }
  BB0 {
    [#"../lift_to_cur.rs" 33 4 33 7] _0 <- (let (a, _) = x in a);
    assume { resolve0 x };
    return _0
  }
  
end
module LiftToCur_Impl0
  type t
end
