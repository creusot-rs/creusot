
module Deref_Deref1_Stub
  type t
  use prelude.Borrow
  function deref1 [#"../deref.rs" 7 0 7 44] (x : t) : t
end
module Deref_Deref1_Interface
  type t
  use prelude.Borrow
  function deref1 [#"../deref.rs" 7 0 7 44] (x : t) : t
  val deref1 [#"../deref.rs" 7 0 7 44] (x : t) : t
    ensures { result = deref1 x }
    
end
module Deref_Deref1
  type t
  use prelude.Borrow
  function deref1 [#"../deref.rs" 7 0 7 44] (x : t) : t =
    [#"../deref.rs" 8 5 8 6] x
  val deref1 [#"../deref.rs" 7 0 7 44] (x : t) : t
    ensures { result = deref1 x }
    
end
module Deref_Deref2_Stub
  type t
  use prelude.Borrow
  function deref2 [#"../deref.rs" 13 0 13 54] (x : t) : t
end
module Deref_Deref2_Interface
  type t
  use prelude.Borrow
  function deref2 [#"../deref.rs" 13 0 13 54] (x : t) : t
  val deref2 [#"../deref.rs" 13 0 13 54] (x : t) : t
    ensures { result = deref2 x }
    
end
module Deref_Deref2
  type t
  use prelude.Borrow
  function deref2 [#"../deref.rs" 13 0 13 54] (x : t) : t =
    [#"../deref.rs" 14 7 14 8] x
  val deref2 [#"../deref.rs" 13 0 13 54] (x : t) : t
    ensures { result = deref2 x }
    
end
module Deref_Deref3_Stub
  type t
  function deref3 [#"../deref.rs" 20 0 20 28] (_1 : ()) : t
end
module Deref_Deref3_Interface
  type t
  function deref3 [#"../deref.rs" 20 0 20 28] (_1 : ()) : t
  val deref3 [#"../deref.rs" 20 0 20 28] (_1 : ()) : t
    ensures { result = deref3 _1 }
    
end
module Deref_Deref3
  type t
  function deref3 [#"../deref.rs" 20 0 20 28] (_1 : ()) : t
  val deref3 [#"../deref.rs" 20 0 20 28] (_1 : ()) : t
    ensures { result = deref3 _1 }
    
end
module Deref_MkRef_MkRef_Stub
  type self
  use prelude.Borrow
  function mk_ref [#"../deref.rs" 28 4 28 29] (self : self) : self
end
module Deref_MkRef_MkRef_Interface
  type self
  use prelude.Borrow
  function mk_ref [#"../deref.rs" 28 4 28 29] (self : self) : self
  val mk_ref [#"../deref.rs" 28 4 28 29] (self : self) : self
    ensures { result = mk_ref self }
    
end
module Deref_MkRef_MkRef
  type self
  use prelude.Borrow
  function mk_ref [#"../deref.rs" 28 4 28 29] (self : self) : self =
    [#"../deref.rs" 29 8 29 12] self
  val mk_ref [#"../deref.rs" 28 4 28 29] (self : self) : self
    ensures { result = mk_ref self }
    
end
module Deref_Deref4_Stub
  type t
  use prelude.Borrow
  function deref4 [#"../deref.rs" 37 0 37 57] (x : t) : t
end
module Deref_Deref4_Interface
  type t
  use prelude.Borrow
  function deref4 [#"../deref.rs" 37 0 37 57] (x : t) : t
  val deref4 [#"../deref.rs" 37 0 37 57] (x : t) : t
    ensures { result = deref4 x }
    
end
module Deref_Deref4
  type t
  use prelude.Borrow
  clone Deref_MkRef_MkRef_Stub as MkRef0 with
    type self = t
  function deref4 [#"../deref.rs" 37 0 37 57] (x : t) : t =
    [#"../deref.rs" 38 4 38 19] MkRef0.mk_ref x
  val deref4 [#"../deref.rs" 37 0 37 57] (x : t) : t
    ensures { result = deref4 x }
    
end
module Deref_Deref5_Interface
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  val deref5 [#"../deref.rs" 42 0 42 62] (x : uint32) (y : uint32) : uint32
    ensures { [#"../deref.rs" 41 19 41 30] x = (0 : uint32) }
    
end
module Deref_Deref5
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  let rec cfg deref5 [#"../deref.rs" 42 0 42 62] [@cfg:stackify] [@cfg:subregion_analysis] (x : uint32) (y : uint32) : uint32
    ensures { [#"../deref.rs" 41 19 41 30] x = (0 : uint32) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x : uint32 = x;
  {
    goto BB0
  }
  BB0 {
    _0 <- x;
    return _0
  }
  
end
module Deref_Deref7_Stub
  type t
  use prelude.Borrow
  function deref7 [#"../deref.rs" 48 0 48 51] (x : borrowed t) : t
end
module Deref_Deref7_Interface
  type t
  use prelude.Borrow
  function deref7 [#"../deref.rs" 48 0 48 51] (x : borrowed t) : t
  val deref7 [#"../deref.rs" 48 0 48 51] (x : borrowed t) : t
    ensures { result = deref7 x }
    
end
module Deref_Deref7
  type t
  use prelude.Borrow
  clone Deref_MkRef_MkRef_Stub as MkRef0 with
    type self = borrowed t
  function deref7 [#"../deref.rs" 48 0 48 51] (x : borrowed t) : t =
    [#"../deref.rs" 49 4 49 14]  * MkRef0.mk_ref x
  val deref7 [#"../deref.rs" 48 0 48 51] (x : borrowed t) : t
    ensures { result = deref7 x }
    
end
module Deref_X_Type
  use prelude.Int
  use prelude.UInt32
  type t_x  =
    | C_X uint32 uint32
    
  let function x_0 (self : t_x) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_X a _ -> a
      end
end
module Deref_ProjectRef_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone Deref_MkRef_MkRef_Stub as MkRef0 with
    type self = uint32
  use Deref_X_Type as Deref_X_Type
  val project_ref [#"../deref.rs" 55 0 55 39] (x : Deref_X_Type.t_x) : uint32
    ensures { [#"../deref.rs" 54 10 54 38] result = old(MkRef0.mk_ref (Deref_X_Type.x_0 x)) }
    
end
module Deref_ProjectRef
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone Deref_MkRef_MkRef as MkRef0 with
    type self = uint32
  use Deref_X_Type as Deref_X_Type
  let rec cfg project_ref [#"../deref.rs" 55 0 55 39] [@cfg:stackify] [@cfg:subregion_analysis] (x : Deref_X_Type.t_x) : uint32
    ensures { [#"../deref.rs" 54 10 54 38] result = old(MkRef0.mk_ref (Deref_X_Type.x_0 x)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x : Deref_X_Type.t_x = x;
  {
    goto BB0
  }
  BB0 {
    _0 <- Deref_X_Type.x_0 x;
    return _0
  }
  
end
module Deref_ProjectTupleRef_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone Deref_MkRef_MkRef_Stub as MkRef0 with
    type self = uint32
  val project_tuple_ref [#"../deref.rs" 60 0 60 54] (x : (uint32, uint32)) : uint32
    ensures { [#"../deref.rs" 59 10 59 38] result = old(MkRef0.mk_ref (let (a, _) = x in a)) }
    
end
module Deref_ProjectTupleRef
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone Deref_MkRef_MkRef as MkRef0 with
    type self = uint32
  let rec cfg project_tuple_ref [#"../deref.rs" 60 0 60 54] [@cfg:stackify] [@cfg:subregion_analysis] (x : (uint32, uint32)) : uint32
    ensures { [#"../deref.rs" 59 10 59 38] result = old(MkRef0.mk_ref (let (a, _) = x in a)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x : (uint32, uint32) = x;
  {
    goto BB0
  }
  BB0 {
    _0 <- (let (a, _) = x in a);
    return _0
  }
  
end
module Deref_ProjectTupleBox_Interface
  use prelude.Int
  use prelude.UInt32
  val project_tuple_box [#"../deref.rs" 65 0 65 55] (x : (uint32, uint32)) : uint32
    ensures { [#"../deref.rs" 64 10 64 28] result = old(let (a, _) = x in a) }
    
end
module Deref_ProjectTupleBox
  use prelude.Int
  use prelude.UInt32
  let rec cfg project_tuple_box [#"../deref.rs" 65 0 65 55] [@cfg:stackify] [@cfg:subregion_analysis] (x : (uint32, uint32)) : uint32
    ensures { [#"../deref.rs" 64 10 64 28] result = old(let (a, _) = x in a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x : (uint32, uint32) = x;
  {
    goto BB0
  }
  BB0 {
    _0 <- (let (a, _) = x in a);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Deref_LetRef_Stub
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function let_ref [#"../deref.rs" 71 0 71 48] (x : (uint32, uint32)) : uint32
end
module Deref_LetRef_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function let_ref [#"../deref.rs" 71 0 71 48] (x : (uint32, uint32)) : uint32
  val let_ref [#"../deref.rs" 71 0 71 48] (x : (uint32, uint32)) : uint32
    ensures { result = let_ref x }
    
end
module Deref_LetRef
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function let_ref [#"../deref.rs" 71 0 71 48] (x : (uint32, uint32)) : uint32 =
    [#"../deref.rs" 70 0 70 8] let (x, _) = x in x
  val let_ref [#"../deref.rs" 71 0 71 48] (x : (uint32, uint32)) : uint32
    ensures { result = let_ref x }
    
end
module Deref_Impl0
  type t
end
