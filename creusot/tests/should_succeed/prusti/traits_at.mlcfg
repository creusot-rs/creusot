
module TraitsAt_Wrap_Type
  type t_wrap 't =
    | C_Wrap 't
    
  let function wrap_0 (self : t_wrap 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Wrap a -> a
      end
end
module TraitsAt_Impl4_Clone
  type t
  predicate invariant3 (self : t)
  val invariant3 (self : t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : t)
  val inv3 (_x : t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : t . inv3 x = true
  use TraitsAt_Wrap_Type as TraitsAt_Wrap_Type
  predicate invariant2 (self : TraitsAt_Wrap_Type.t_wrap t)
  val invariant2 (self : TraitsAt_Wrap_Type.t_wrap t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : TraitsAt_Wrap_Type.t_wrap t)
  val inv2 (_x : TraitsAt_Wrap_Type.t_wrap t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : TraitsAt_Wrap_Type.t_wrap t . inv2 x = true
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  predicate invariant0 (self : TraitsAt_Wrap_Type.t_wrap t)
  val invariant0 (self : TraitsAt_Wrap_Type.t_wrap t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : TraitsAt_Wrap_Type.t_wrap t)
  val inv0 (_x : TraitsAt_Wrap_Type.t_wrap t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : TraitsAt_Wrap_Type.t_wrap t . inv0 x = true
  use prelude.Borrow
  val clone0 (self : t) : t
    requires {inv1 self}
    ensures { [#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { inv3 result }
    
  predicate resolve1 (self : t)
  val resolve1 (self : t) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : TraitsAt_Wrap_Type.t_wrap t)
  val resolve0 (self : TraitsAt_Wrap_Type.t_wrap t) : bool
    ensures { result = resolve0 self }
    
  let rec cfg clone' [#"../traits_at.rs" 27 15 27 36] [@cfg:stackify] [@cfg:subregion_analysis] (self : TraitsAt_Wrap_Type.t_wrap t) : TraitsAt_Wrap_Type.t_wrap t
    requires {[#"../traits_at.rs" 27 15 27 36] inv0 self}
    ensures { [#"../traits_at.rs" 27 15 27 36] result = self }
    ensures { [#"../traits_at.rs" 27 15 27 36] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : TraitsAt_Wrap_Type.t_wrap t;
  var self : TraitsAt_Wrap_Type.t_wrap t = self;
  var _3 : t;
  var _5 : t;
  {
    goto BB0
  }
  BB0 {
    [#"../traits_at.rs" 27 15 27 36] _5 <- TraitsAt_Wrap_Type.wrap_0 self;
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [@expl:type invariant] inv1 _5 };
    assume { resolve1 _5 };
    [#"../traits_at.rs" 28 19 28 20] _3 <- ([#"../traits_at.rs" 28 19 28 20] clone0 _5);
    goto BB1
  }
  BB1 {
    [#"../traits_at.rs" 27 15 27 36] _0 <- TraitsAt_Wrap_Type.C_Wrap _3;
    _3 <- any t;
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module TraitsAt_Test
  function model0 [#"../traits_at.rs" 22 4 22 26] (self : bool) : bool =
    [#"../traits_at.rs" 23 8 23 12] self
  val model0 [#"../traits_at.rs" 22 4 22 26] (self : bool) : bool
    ensures { result = model0 self }
    
  use prelude.Borrow
  function model1 [#"../traits_at.rs" 14 4 14 35] (self : borrowed bool) : bool =
    [#"../traits_at.rs" 15 8 15 23] model0 ( * self)
  val model1 [#"../traits_at.rs" 14 4 14 35] (self : borrowed bool) : bool
    ensures { result = model1 self }
    
  predicate resolve0 (self : borrowed bool) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 27 20 27 34]  ^ self =  * self
  val resolve0 (self : borrowed bool) : bool
    ensures { result = resolve0 self }
    
  let rec cfg test [#"../traits_at.rs" 39 0 39 33] [@cfg:stackify] [@cfg:subregion_analysis] (x : borrowed bool) : bool
    ensures { [#"../traits_at.rs" 38 10 38 42] model0 result = old(model1 x) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x : borrowed bool = x;
  var res : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../traits_at.rs" 40 14 40 16] res <-  * x;
    [#"../traits_at.rs" 41 4 41 13] x <- { x with current = (not res) ; };
    assume { resolve0 x };
    [#"../traits_at.rs" 42 4 42 7] _0 <- res;
    return _0
  }
  
end
module TraitsAt_Test2
  use TraitsAt_Wrap_Type as TraitsAt_Wrap_Type
  function model0 [#"../traits_at.rs" 33 4 33 35] (self : TraitsAt_Wrap_Type.t_wrap bool) : bool =
    [#"../traits_at.rs" 34 8 34 14] TraitsAt_Wrap_Type.wrap_0 self
  val model0 [#"../traits_at.rs" 33 4 33 35] (self : TraitsAt_Wrap_Type.t_wrap bool) : bool
    ensures { result = model0 self }
    
  let rec cfg test2 [#"../traits_at.rs" 46 0 46 35] [@cfg:stackify] [@cfg:subregion_analysis] (x : TraitsAt_Wrap_Type.t_wrap bool) : bool
    ensures { [#"../traits_at.rs" 45 10 45 29] result = model0 x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x : TraitsAt_Wrap_Type.t_wrap bool = x;
  {
    goto BB0
  }
  BB0 {
    [#"../traits_at.rs" 47 4 47 7] _0 <- TraitsAt_Wrap_Type.wrap_0 x;
    return _0
  }
  
end
module TraitsAt_Impl0
  type x
end
module TraitsAt_Impl1
  
end
module TraitsAt_Impl2
  type t
end
module TraitsAt_Impl3
  type t
end
module TraitsAt_Impl4
  type t
  use TraitsAt_Wrap_Type as TraitsAt_Wrap_Type
  predicate invariant1 (self : TraitsAt_Wrap_Type.t_wrap t)
  val invariant1 (self : TraitsAt_Wrap_Type.t_wrap t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : TraitsAt_Wrap_Type.t_wrap t)
  val inv1 (_x : TraitsAt_Wrap_Type.t_wrap t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : TraitsAt_Wrap_Type.t_wrap t . inv1 x = true
  predicate invariant0 (self : TraitsAt_Wrap_Type.t_wrap t)
  val invariant0 (self : TraitsAt_Wrap_Type.t_wrap t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : TraitsAt_Wrap_Type.t_wrap t)
  val inv0 (_x : TraitsAt_Wrap_Type.t_wrap t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : TraitsAt_Wrap_Type.t_wrap t . inv0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../traits_at.rs" 27 15 27 36] forall self : TraitsAt_Wrap_Type.t_wrap t . inv0 self
   -> inv0 self /\ (forall result : TraitsAt_Wrap_Type.t_wrap t . inv1 result /\ result = self
   -> inv1 result /\ result = self)
end
