
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 27 4 27 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module MutMut_V1_Stub
  type x
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (borrowed x)
  function v1 [#"../mut_mut.rs" 7 0 7 76] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
end
module MutMut_V1_Interface
  type x
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (borrowed x)
  function v1 [#"../mut_mut.rs" 7 0 7 76] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
  val v1 [#"../mut_mut.rs" 7 0 7 76] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
    requires {[#"../mut_mut.rs" 7 25 7 26] Inv0.inv x}
    requires {[#"../mut_mut.rs" 7 47 7 48] Inv0.inv y}
    ensures { [#"../mut_mut.rs" 6 10 6 16] result }
    ensures { result = v1 x y }
    
  axiom v1_spec : forall x : borrowed (borrowed x), y : borrowed (borrowed x) . ([#"../mut_mut.rs" 7 25 7 26] Inv0.inv x) -> ([#"../mut_mut.rs" 7 47 7 48] Inv0.inv y) -> ([#"../mut_mut.rs" 6 10 6 16] v1 x y)
end
module MutMut_V1
  type x
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (borrowed x)
  function v1 [#"../mut_mut.rs" 7 0 7 76] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool =
    [#"../mut_mut.rs" 8 4 8 8] true
  val v1 [#"../mut_mut.rs" 7 0 7 76] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
    requires {[#"../mut_mut.rs" 7 25 7 26] Inv0.inv x}
    requires {[#"../mut_mut.rs" 7 47 7 48] Inv0.inv y}
    ensures { [#"../mut_mut.rs" 6 10 6 16] result }
    ensures { result = v1 x y }
    
  axiom v1_spec : forall x : borrowed (borrowed x), y : borrowed (borrowed x) . ([#"../mut_mut.rs" 7 25 7 26] Inv0.inv x) -> ([#"../mut_mut.rs" 7 47 7 48] Inv0.inv y) -> ([#"../mut_mut.rs" 6 10 6 16] v1 x y)
end
module MutMut_V1_Impl
  type x
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (borrowed x)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed (borrowed x),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  let rec ghost function v1 [#"../mut_mut.rs" 7 0 7 76] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
    requires {[#"../mut_mut.rs" 7 25 7 26] Inv0.inv x}
    requires {[#"../mut_mut.rs" 7 47 7 48] Inv0.inv y}
    ensures { [#"../mut_mut.rs" 6 10 6 16] result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../mut_mut.rs" 8 4 8 8] true
end
module MutMut_V2_Stub
  type x
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (borrowed x)
  function v2 [#"../mut_mut.rs" 14 0 14 80] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
end
module MutMut_V2_Interface
  type x
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (borrowed x)
  function v2 [#"../mut_mut.rs" 14 0 14 80] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
  val v2 [#"../mut_mut.rs" 14 0 14 80] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
    requires {[#"../mut_mut.rs" 14 29 14 30] Inv0.inv x}
    requires {[#"../mut_mut.rs" 14 51 14 52] Inv0.inv y}
    ensures { [#"../mut_mut.rs" 13 10 13 16] result }
    ensures { result = v2 x y }
    
  axiom v2_spec : forall x : borrowed (borrowed x), y : borrowed (borrowed x) . ([#"../mut_mut.rs" 14 29 14 30] Inv0.inv x) -> ([#"../mut_mut.rs" 14 51 14 52] Inv0.inv y) -> ([#"../mut_mut.rs" 13 10 13 16] v2 x y)
end
module MutMut_V2
  type x
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (borrowed x)
  clone MutMut_V1_Stub as V10 with
    type x = x,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  function v2 [#"../mut_mut.rs" 14 0 14 80] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool =
    [#"../mut_mut.rs" 15 4 15 46] V10.v1 x y
  val v2 [#"../mut_mut.rs" 14 0 14 80] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
    requires {[#"../mut_mut.rs" 14 29 14 30] Inv0.inv x}
    requires {[#"../mut_mut.rs" 14 51 14 52] Inv0.inv y}
    ensures { [#"../mut_mut.rs" 13 10 13 16] result }
    ensures { result = v2 x y }
    
  axiom v2_spec : forall x : borrowed (borrowed x), y : borrowed (borrowed x) . ([#"../mut_mut.rs" 14 29 14 30] Inv0.inv x) -> ([#"../mut_mut.rs" 14 51 14 52] Inv0.inv y) -> ([#"../mut_mut.rs" 13 10 13 16] v2 x y)
end
module MutMut_V2_Impl
  type x
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (borrowed x)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed (borrowed x),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone MutMut_V1 as V10 with
    type x = x,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  let rec ghost function v2 [#"../mut_mut.rs" 14 0 14 80] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
    requires {[#"../mut_mut.rs" 14 29 14 30] Inv0.inv x}
    requires {[#"../mut_mut.rs" 14 51 14 52] Inv0.inv y}
    ensures { [#"../mut_mut.rs" 13 10 13 16] result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../mut_mut.rs" 15 4 15 46] V10.v1 x y
end
