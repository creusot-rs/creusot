
module MutMut_V1_Stub
  type x
  use prelude.Borrow
  function v1 [#"../mut_mut.rs" 7 0 7 76] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
end
module MutMut_V1_Interface
  type x
  use prelude.Borrow
  function v1 [#"../mut_mut.rs" 7 0 7 76] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
  val v1 [#"../mut_mut.rs" 7 0 7 76] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
    ensures { [#"../mut_mut.rs" 6 10 6 16] result }
    ensures { result = v1 x y }
    
  axiom v1_spec : forall x : borrowed (borrowed x), y : borrowed (borrowed x) . [#"../mut_mut.rs" 6 10 6 16] v1 x y
end
module MutMut_V1
  type x
  use prelude.Borrow
  function v1 [#"../mut_mut.rs" 7 0 7 76] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool =
    [#"../mut_mut.rs" 8 4 8 8] true
  val v1 [#"../mut_mut.rs" 7 0 7 76] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
    ensures { [#"../mut_mut.rs" 6 10 6 16] result }
    ensures { result = v1 x y }
    
  axiom v1_spec : forall x : borrowed (borrowed x), y : borrowed (borrowed x) . [#"../mut_mut.rs" 6 10 6 16] v1 x y
end
module MutMut_V1_Impl
  type x
  use prelude.Borrow
  let rec ghost function v1 [#"../mut_mut.rs" 7 0 7 76] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
    ensures { [#"../mut_mut.rs" 6 10 6 16] result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../mut_mut.rs" 8 4 8 8] true
end
module MutMut_V2_Stub
  type x
  use prelude.Borrow
  function v2 [#"../mut_mut.rs" 14 0 14 72] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
end
module MutMut_V2_Interface
  type x
  use prelude.Borrow
  function v2 [#"../mut_mut.rs" 14 0 14 72] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
  val v2 [#"../mut_mut.rs" 14 0 14 72] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
    ensures { [#"../mut_mut.rs" 13 10 13 16] result }
    ensures { result = v2 x y }
    
  axiom v2_spec : forall x : borrowed (borrowed x), y : borrowed (borrowed x) . [#"../mut_mut.rs" 13 10 13 16] v2 x y
end
module MutMut_V2
  type x
  use prelude.Borrow
  clone MutMut_V1_Stub as V10 with
    type x = x,
    axiom .
  function v2 [#"../mut_mut.rs" 14 0 14 72] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool =
    [#"../mut_mut.rs" 15 4 15 12] V10.v1 x y
  val v2 [#"../mut_mut.rs" 14 0 14 72] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
    ensures { [#"../mut_mut.rs" 13 10 13 16] result }
    ensures { result = v2 x y }
    
  axiom v2_spec : forall x : borrowed (borrowed x), y : borrowed (borrowed x) . [#"../mut_mut.rs" 13 10 13 16] v2 x y
end
module MutMut_V2_Impl
  type x
  use prelude.Borrow
  clone MutMut_V1 as V10 with
    type x = x,
    axiom .
  let rec ghost function v2 [#"../mut_mut.rs" 14 0 14 72] (x : borrowed (borrowed x)) (y : borrowed (borrowed x)) : bool
    ensures { [#"../mut_mut.rs" 13 10 13 16] result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../mut_mut.rs" 15 4 15 12] V10.v1 x y
end
