
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module Match_Test1_Stub
  type x
  use prelude.Borrow
  use Core_Result_Result_Type as Core_Result_Result_Type
  function test1 [#"../match.rs" 5 0 5 65] (x : Core_Result_Result_Type.t_result (borrowed x) (borrowed x)) : borrowed x
end
module Match_Test1_Interface
  type x
  use prelude.Borrow
  use Core_Result_Result_Type as Core_Result_Result_Type
  function test1 [#"../match.rs" 5 0 5 65] (x : Core_Result_Result_Type.t_result (borrowed x) (borrowed x)) : borrowed x
end
module Match_Test1
  type x
  use prelude.Borrow
  use Core_Result_Result_Type as Core_Result_Result_Type
  function test1 [#"../match.rs" 5 0 5 65] (x : Core_Result_Result_Type.t_result (borrowed x) (borrowed x)) : borrowed x
   =
    [#"../match.rs" 4 0 4 20] match (x) with
      | Core_Result_Result_Type.C_Ok ok -> ok
      | Core_Result_Result_Type.C_Err err -> err
      end
  val test1 [#"../match.rs" 5 0 5 65] (x : Core_Result_Result_Type.t_result (borrowed x) (borrowed x)) : borrowed x
    ensures { result = test1 x }
    
end
module Match_TestCur_Stub
  type x
  use prelude.Borrow
  use Core_Result_Result_Type as Core_Result_Result_Type
  function test_cur [#"../match.rs" 13 0 13 57] (x : Core_Result_Result_Type.t_result (borrowed x) (borrowed x)) : x
end
module Match_TestCur_Interface
  type x
  use prelude.Borrow
  use Core_Result_Result_Type as Core_Result_Result_Type
  function test_cur [#"../match.rs" 13 0 13 57] (x : Core_Result_Result_Type.t_result (borrowed x) (borrowed x)) : x
end
module Match_TestCur
  type x
  use prelude.Borrow
  use Core_Result_Result_Type as Core_Result_Result_Type
  function test_cur [#"../match.rs" 13 0 13 57] (x : Core_Result_Result_Type.t_result (borrowed x) (borrowed x)) : x =
    [#"../match.rs" 12 0 12 26] let r = match (x) with
      | Core_Result_Result_Type.C_Ok ok -> ok
      | Core_Result_Result_Type.C_Err err -> err
      end in  * r
  val test_cur [#"../match.rs" 13 0 13 57] (x : Core_Result_Result_Type.t_result (borrowed x) (borrowed x)) : x
    ensures { result = test_cur x }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Match_TestProc_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  val test_proc [@cfg:stackify] [#"../match.rs" 22 0 22 60] (x : borrowed uint32) (b : bool) : borrowed uint32
    ensures { [#"../match.rs" 21 19 21 52]  ^ (if b then x else result) = (5 : uint32) }
    
end
module Match_TestProc
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  let rec cfg test_proc [@cfg:stackify] [#"../match.rs" 22 0 22 60] (x : borrowed uint32) (b : bool) : borrowed uint32
    ensures { [#"../match.rs" 21 19 21 52]  ^ (if b then x else result) = (5 : uint32) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var x_1 : borrowed uint32;
  var b_2 : bool;
  var _3 : borrowed uint32;
  {
    x_1 <- x;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut ( * x_1);
    x_1 <- { x_1 with current = ( ^ _3) };
    assume { Resolve0.resolve x_1 };
    _0 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _0) };
    assume { Resolve0.resolve _3 };
    return _0
  }
  
end
module Match_TestProcCur_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  val test_proc_cur [@cfg:stackify] [#"../match.rs" 27 0 27 69] (x : borrowed uint32) (y : borrowed uint32) (b : bool) : ()
    ensures { [#"../match.rs" 26 10 26 38]  ^ (if b then x else y) = (5 : uint32) }
    
end
module Match_TestProcCur
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  let rec cfg test_proc_cur [@cfg:stackify] [#"../match.rs" 27 0 27 69] (x : borrowed uint32) (y : borrowed uint32) (b : bool) : ()
    ensures { [#"../match.rs" 26 10 26 38]  ^ (if b then x else y) = (5 : uint32) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : borrowed uint32;
  var y_2 : borrowed uint32;
  var b_3 : bool;
  var r_5 : borrowed uint32;
  var _6 : bool;
  var _7 : borrowed uint32;
  {
    x_1 <- x;
    y_2 <- y;
    b_3 <- b;
    goto BB0
  }
  BB0 {
    _6 <- b_3;
    switch (_6)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve y_2 };
    assume { Resolve0.resolve r_5 };
    r_5 <- x_1;
    x_1 <- any borrowed uint32;
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve x_1 };
    assume { Resolve0.resolve _7 };
    _7 <- y_2;
    y_2 <- any borrowed uint32;
    r_5 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ r_5) };
    assume { Resolve0.resolve _7 };
    goto BB3
  }
  BB3 {
    r_5 <- { r_5 with current = ([#"../match.rs" 29 9 29 10] (5 : uint32)) };
    assume { Resolve0.resolve r_5 };
    _0 <- ();
    return _0
  }
  
end
module Match_Id_Stub
  type x
  use prelude.Borrow
  function id [#"../match.rs" 33 0 33 43] (x : borrowed x) : borrowed x
end
module Match_Id_Interface
  type x
  use prelude.Borrow
  function id [#"../match.rs" 33 0 33 43] (x : borrowed x) : borrowed x
end
module Match_Id
  type x
  use prelude.Borrow
  function id [#"../match.rs" 33 0 33 43] (x : borrowed x) : borrowed x =
    [#"../match.rs" 32 0 32 20] x
  val id [#"../match.rs" 33 0 33 43] (x : borrowed x) : borrowed x
    ensures { result = id x }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module Match_Unwrap_Stub
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use Core_Option_Option_Type as Core_Option_Option_Type
  function unwrap [#"../match.rs" 39 0 39 60] (x : Core_Option_Option_Type.t_option (borrowed uint32)) : borrowed uint32
end
module Match_Unwrap_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use Core_Option_Option_Type as Core_Option_Option_Type
  function unwrap [#"../match.rs" 39 0 39 60] (x : Core_Option_Option_Type.t_option (borrowed uint32)) : borrowed uint32
  axiom unwrap_spec : forall x : Core_Option_Option_Type.t_option (borrowed uint32) . ([#"../match.rs" 38 11 38 20] x <> Core_Option_Option_Type.C_None) -> true
end
module Match_Unwrap
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Match_Id_Stub as Id0 with
    type x = uint32
  function unwrap [#"../match.rs" 39 0 39 60] (x : Core_Option_Option_Type.t_option (borrowed uint32)) : borrowed uint32
   =
    [#"../match.rs" 37 0 37 20] match (x) with
      | Core_Option_Option_Type.C_Some x -> x
      | Core_Option_Option_Type.C_None -> Id0.id absurd
      end
  val unwrap [#"../match.rs" 39 0 39 60] (x : Core_Option_Option_Type.t_option (borrowed uint32)) : borrowed uint32
    requires {[#"../match.rs" 38 11 38 20] x <> Core_Option_Option_Type.C_None}
    ensures { result = unwrap x }
    
  axiom unwrap_spec : forall x : Core_Option_Option_Type.t_option (borrowed uint32) . ([#"../match.rs" 38 11 38 20] x <> Core_Option_Option_Type.C_None) -> true
end
module Match_Unwrap_Impl
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  clone Match_Id as Id0 with
    type x = uint32
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec ghost function unwrap [#"../match.rs" 39 0 39 60] (x : Core_Option_Option_Type.t_option (borrowed uint32)) : borrowed uint32
    requires {[#"../match.rs" 38 11 38 20] x <> Core_Option_Option_Type.C_None}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../match.rs" 37 0 37 20] match (x) with
      | Core_Option_Option_Type.C_Some x -> x
      | Core_Option_Option_Type.C_None -> let a' = absurd in Id0.id a'
      end
end
