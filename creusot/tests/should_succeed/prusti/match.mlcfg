
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module Match_TestProcCur
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 27 20 27 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  let rec cfg test_proc_cur [#"../match.rs" 31 0 31 69] [@cfg:stackify] [@cfg:subregion_analysis] (x : borrowed uint32) (y : borrowed uint32) (b : bool) : ()
    requires {[#"../match.rs" 30 11 30 39]  * (if b then x else y) = (5 : uint32)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : borrowed uint32 = x;
  var y : borrowed uint32 = y;
  var b : bool = b;
  var r : borrowed uint32;
  var _7 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    switch ([#"../match.rs" 32 15 32 16] b)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { resolve0 y };
    [#"../match.rs" 32 19 32 20] r <- ([#"../match.rs" 32 19 32 20] x);
    [#"../match.rs" 32 19 32 20] x <- any borrowed uint32;
    goto BB3
  }
  BB2 {
    assume { resolve0 x };
    [#"../match.rs" 32 30 32 31] _7 <- ([#"../match.rs" 32 30 32 31] y);
    [#"../match.rs" 32 30 32 31] y <- any borrowed uint32;
    [#"../match.rs" 32 30 32 31] r <- Borrow.borrow_final ( * _7) (Borrow.get_id _7);
    [#"../match.rs" 32 30 32 31] _7 <- { _7 with current = ( ^ r) ; };
    assume { resolve0 _7 };
    goto BB3
  }
  BB3 {
    [#"../match.rs" 33 4 33 10] r <- { r with current = ([#"../match.rs" 33 4 33 10] [#"../match.rs" 33 9 33 10] (5 : uint32)) ; };
    assume { resolve0 r };
    [#"../match.rs" 31 70 34 1] _0 <- ([#"../match.rs" 31 70 34 1] ());
    return _0
  }
  
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module Match_Unwrap_Impl
  use prelude.Borrow
  use prelude.UInt32
  function id0 [#"../match.rs" 38 0 38 43] (x : borrowed uint32) : borrowed uint32 =
    [#"../match.rs" 37 0 37 8] x
  val id0 [#"../match.rs" 38 0 38 43] (x : borrowed uint32) : borrowed uint32
    ensures { result = id0 x }
    
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec ghost function unwrap [#"../match.rs" 45 0 45 60] (x : Core_Option_Option_Type.t_option (borrowed uint32)) : borrowed uint32
    requires {[#"../match.rs" 44 11 44 20] x <> Core_Option_Option_Type.C_None}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../match.rs" 43 0 43 8] match x with
      | Core_Option_Option_Type.C_Some x -> x
      | Core_Option_Option_Type.C_None -> let a' = absurd in id0 a'
      end
end
module Match_TestNever
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  use Core_Result_Result_Type as Core_Result_Result_Type
  let rec cfg test_never [#"../match.rs" 54 0 54 53] [@cfg:stackify] [@cfg:subregion_analysis] (x : Core_Result_Result_Type.t_result (borrowed uint32, borrowed uint32) ()) : ()
    requires {[#"../match.rs" 52 0 52 72] let x = match x with
      | Core_Result_Result_Type.C_Ok x -> x
      | Core_Result_Result_Type.C_Err x -> absurd
      end in  * (let (a, _) = x in a) = (0 : uint32)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../match.rs" 54 54 54 56] _0 <- ([#"../match.rs" 54 54 54 56] ());
    return _0
  }
  
end
