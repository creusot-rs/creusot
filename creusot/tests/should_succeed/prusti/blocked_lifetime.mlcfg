
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module BlockedLifetime_Impl0_Test_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  val test [#"../blocked_lifetime.rs" 12 4 12 27] (x : borrowed uint32) : ()
    ensures { [#"../blocked_lifetime.rs" 11 14 11 24]  ^ x = (5 : uint32) }
    
end
module BlockedLifetime_Impl0_Test
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  let rec cfg test [#"../blocked_lifetime.rs" 12 4 12 27] [@cfg:stackify] [@cfg:subregion_analysis] (x : borrowed uint32) : ()
    ensures { [#"../blocked_lifetime.rs" 11 14 11 24]  ^ x = (5 : uint32) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : borrowed uint32 = x;
  {
    goto BB0
  }
  BB0 {
    x <- { x with current = ([#"../blocked_lifetime.rs" 13 13 13 14] (5 : uint32)) };
    assume { Resolve0.resolve x };
    _0 <- ();
    return _0
  }
  
end
module BlockedLifetime_Impl0
  
end
