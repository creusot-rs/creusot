
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Stubs_Snap_Stub
  type t
  function snap (t : t) : t
end
module CreusotContracts_Stubs_Snap_Interface
  type t
  function snap (t : t) : t
  val snap (t : t) : t
    ensures { result = snap t }
    
end
module CreusotContracts_Stubs_Snap
  type t
  function snap (t : t) : t =
    [#"../../../../../creusot-contracts/src/stubs.rs" 109 4 109 5] t
  val snap (t : t) : t
    ensures { result = snap t }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Default_Default_IsDefault_Stub
  type self
  predicate is_default (self : self)
end
module CreusotContracts_Std1_Default_Default_IsDefault_Interface
  type self
  predicate is_default (self : self)
  val is_default (self : self) : bool
    ensures { result = is_default self }
    
end
module CreusotContracts_Std1_Default_Default_IsDefault
  type self
  predicate is_default (self : self)
  val is_default (self : self) : bool
    ensures { result = is_default self }
    
end
module Core_Mem_Take_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Std1_Default_Default_IsDefault_Stub as IsDefault0 with
    type self = t
  val take (dest : borrowed t) : t
    ensures { [#"../../../../../creusot-contracts/src/std/mem.rs" 15 22 15 37] result =  * dest }
    ensures { [#"../../../../../creusot-contracts/src/std/mem.rs" 16 22 16 42] IsDefault0.is_default ( ^ dest) }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl7_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 96 8 96 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type s
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = s,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function index_logic [@inline:trivial] (self : s) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 17 8 17 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Seq_Impl0_Tail_Stub
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Tail_Interface
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
  val tail (self : Seq.seq t) : Seq.seq t
    ensures { result = tail self }
    
end
module CreusotContracts_Logic_Seq_Impl0_Tail
  type t
  use seq.Seq
  use seq_ext.SeqExt
  function tail (self : Seq.seq t) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/logic/seq.rs" 47 8 47 39] SeqExt.subsequence self 1 (Seq.length self)
  val tail (self : Seq.seq t) : Seq.seq t
    ensures { result = tail self }
    
end
module Core_Slice_Impl0_SplitFirstMut_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Stub as Tail0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic1 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = borrowed (slice t)
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val split_first_mut (self : borrowed (slice t)) : Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t))
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 257 8 257 96] result = Core_Option_Option_Type.C_None -> Seq.length (ShallowModel0.shallow_model self) = 0 /\  ^ self =  * self /\ ShallowModel0.shallow_model self = Seq.empty  }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 258 8 263 48] forall tail : borrowed (slice t) . forall first : borrowed t . result = Core_Option_Option_Type.C_Some (first, tail) /\  * first = IndexLogic0.index_logic self 0 /\  ^ first = IndexLogic1.index_logic ( ^ self) 0 /\ Seq.length (ShallowModel0.shallow_model self) > 0 /\ Seq.length (ShallowModel1.shallow_model ( ^ self)) > 0 /\ ShallowModel0.shallow_model tail = Tail0.tail (ShallowModel0.shallow_model self) /\ ShallowModel1.shallow_model ( ^ tail) = Tail0.tail (ShallowModel1.shallow_model ( ^ self)) }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val unwrap (self : Core_Option_Option_Type.t_option t) : t
    requires {[#"../../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    ensures { [#"../../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    
end
module CreusotContracts_Std1_Slice_Impl2_IsDefault_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  predicate is_default (self : borrowed (slice t))
end
module CreusotContracts_Std1_Slice_Impl2_IsDefault_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  predicate is_default (self : borrowed (slice t))
  val is_default (self : borrowed (slice t)) : bool
    ensures { result = is_default self }
    
end
module CreusotContracts_Std1_Slice_Impl2_IsDefault
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  predicate is_default (self : borrowed (slice t)) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 49 20 49 65] ShallowModel0.shallow_model self = Seq.empty  /\ ShallowModel1.shallow_model ( ^ self) = Seq.empty 
  val is_default (self : borrowed (slice t)) : bool
    ensures { result = is_default self }
    
end
module TakeFirstMut_TakeFirstMut_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use seq_ext.SeqExt
  use prelude.Slice
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Stubs_Snap_Stub as Snap1 with
    type t = Seq.seq t
  clone CreusotContracts_Stubs_Snap_Stub as Snap0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val take_first_mut [#"../take_first_mut.rs" 9 0 9 69] (s : borrowed (borrowed (slice t))) : borrowed t
    requires {[#"../take_first_mut.rs" 5 11 5 27] Seq.length (ShallowModel0.shallow_model ( *  * s)) > 0}
    ensures { [#"../take_first_mut.rs" 6 10 6 41]  * result = old(Snap0.snap (Seq.get (ShallowModel0.shallow_model ( *  * s)) 0)) }
    ensures { [#"../take_first_mut.rs" 7 10 7 66] ShallowModel0.shallow_model ( *  ^ s) = old(Snap1.snap (SeqExt.subsequence (ShallowModel0.shallow_model ( *  * s)) 1 (Seq.length (ShallowModel0.shallow_model ( *  * s))))) }
    ensures { [#"../take_first_mut.rs" 8 19 8 78] ShallowModel0.shallow_model ( ^ (old( * s))) = Seq.(++) (Seq.singleton ( ^ result)) (ShallowModel0.shallow_model ( ^  ^ s)) }
    
end
module TakeFirstMut_TakeFirstMut
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use prelude.Int
  use seq_ext.SeqExt
  clone Core_Num_Impl11_Max as Max0
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl0_Tail as Tail0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = t,
    type s = slice t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel1 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = t,
    type s = borrowed (slice t),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Std1_Slice_Impl2_IsDefault as IsDefault0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Stubs_Snap as Snap1 with
    type t = Seq.seq t
  clone CreusotContracts_Stubs_Snap as Snap0 with
    type t = t
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = t
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = borrowed (slice t)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = slice t
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = borrowed t,
    type t2 = borrowed (slice t),
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = (borrowed t, borrowed (slice t))
  clone Core_Slice_Impl0_SplitFirstMut_Interface as SplitFirstMut0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IndexLogic1.index_logic = IndexLogic1.index_logic,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    function Tail0.tail = Tail0.tail,
    val Max0.mAX' = Max0.mAX'
  clone Core_Mem_Take_Interface as Take0 with
    type t = borrowed (slice t),
    predicate IsDefault0.is_default = IsDefault0.is_default
  let rec cfg take_first_mut [#"../take_first_mut.rs" 9 0 9 69] [@cfg:stackify] [@cfg:subregion_analysis] (s : borrowed (borrowed (slice t))) : borrowed t
    requires {[#"../take_first_mut.rs" 5 11 5 27] Seq.length (ShallowModel0.shallow_model ( *  * s)) > 0}
    ensures { [#"../take_first_mut.rs" 6 10 6 41]  * result = old(Snap0.snap (Seq.get (ShallowModel0.shallow_model ( *  * s)) 0)) }
    ensures { [#"../take_first_mut.rs" 7 10 7 66] ShallowModel0.shallow_model ( *  ^ s) = old(Snap1.snap (SeqExt.subsequence (ShallowModel0.shallow_model ( *  * s)) 1 (Seq.length (ShallowModel0.shallow_model ( *  * s))))) }
    ensures { [#"../take_first_mut.rs" 8 19 8 78] ShallowModel0.shallow_model ( ^ (old( * s))) = Seq.(++) (Seq.singleton ( ^ result)) (ShallowModel0.shallow_model ( ^  ^ s)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed t;
  var s : borrowed (borrowed (slice t)) = s;
  var _2 : borrowed t;
  var first : borrowed t;
  var rem : borrowed (slice t);
  var _9 : (borrowed t, borrowed (slice t));
  var _11 : borrowed (slice t);
  var _12 : borrowed (slice t);
  var _13 : borrowed (borrowed (slice t));
  var _14 : borrowed (slice t);
  {
    goto BB0
  }
  BB0 {
    _13 <- borrow_mut ( * s);
    s <- { s with current = ( ^ _13) };
    _12 <- ([#"../take_first_mut.rs" 10 23 10 35] Take0.take _13);
    _13 <- any borrowed (borrowed (slice t));
    goto BB1
  }
  BB1 {
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    goto BB2
  }
  BB2 {
    _9 <- ([#"../take_first_mut.rs" 10 23 10 62] Unwrap0.unwrap ([#"../take_first_mut.rs" 10 23 10 53] SplitFirstMut0.split_first_mut _11));
    _11 <- any borrowed (slice t);
    goto BB3
  }
  BB3 {
    first <- (let (a, _) = _9 in a);
    _9 <- (let (a, b) = _9 in (any borrowed t, b));
    rem <- (let (_, a) = _9 in a);
    _9 <- (let (a, b) = _9 in (a, any borrowed (slice t)));
    assume { Resolve0.resolve _9 };
    assume { Resolve1.resolve _12 };
    _14 <- borrow_mut ( * rem);
    rem <- { rem with current = ( ^ _14) };
    s <- { s with current = _14 };
    _14 <- any borrowed (slice t);
    assume { Resolve1.resolve ( * s) };
    assume { Resolve2.resolve s };
    _2 <- borrow_mut ( * first);
    first <- { first with current = ( ^ _2) };
    assume { Resolve1.resolve rem };
    assume { Resolve3.resolve first };
    _0 <- borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    assume { Resolve3.resolve _2 };
    return _0
  }
  
end
