
module IncSome2List_Random_Interface
  val random [@cfg:stackify] (_ : ()) : bool
end
module IncSome2List_Random
  val random [@cfg:stackify] (_ : ()) : bool
end
module IncSome2List_List_Type
  use mach.int.Int
  use mach.int.UInt32
  type t_list  =
    | C_Cons uint32 (t_list)
    | C_Nil
    
  let function cons_0 (self : t_list) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Cons a _ -> a
      | C_Nil -> any uint32
      end
  let function cons_1 (self : t_list) : t_list = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Cons _ a -> a
      | C_Nil -> any t_list
      end
end
module IncSome2List_Impl1_Sum_Stub
  use mach.int.Int
  use IncSome2List_List_Type as IncSome2List_List_Type
  val ghost function sum (self : IncSome2List_List_Type.t_list) : int
end
module IncSome2List_Impl1_Sum_Interface
  use mach.int.Int
  use IncSome2List_List_Type as IncSome2List_List_Type
  val ghost function sum (self : IncSome2List_List_Type.t_list) : int
end
module IncSome2List_Impl1_Sum
  use mach.int.Int
  use IncSome2List_List_Type as IncSome2List_List_Type
  use mach.int.UInt32
  let rec ghost function sum [#"../inc_some_2_list.rs" 18 4 18 23] (self : IncSome2List_List_Type.t_list) : int
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../inc_some_2_list.rs" 19 8 22 9] match (self) with
      | IncSome2List_List_Type.C_Cons a l -> UInt32.to_int a + sum l
      | IncSome2List_List_Type.C_Nil -> 0
      end
end
module IncSome2List_Impl1_LemmaSumNonneg_Stub
  use mach.int.Int
  use prelude.Borrow
  use IncSome2List_List_Type as IncSome2List_List_Type
  clone IncSome2List_Impl1_Sum_Stub as Sum0
  val ghost function lemma_sum_nonneg (self : IncSome2List_List_Type.t_list) : ()
end
module IncSome2List_Impl1_LemmaSumNonneg_Interface
  use mach.int.Int
  use prelude.Borrow
  use IncSome2List_List_Type as IncSome2List_List_Type
  clone IncSome2List_Impl1_Sum_Stub as Sum0
  val ghost function lemma_sum_nonneg (self : IncSome2List_List_Type.t_list) : ()
    ensures { [#"../inc_some_2_list.rs" 28 14 28 29] Sum0.sum self >= 0 }
    
end
module IncSome2List_Impl1_LemmaSumNonneg
  use mach.int.Int
  use prelude.Borrow
  use IncSome2List_List_Type as IncSome2List_List_Type
  clone IncSome2List_Impl1_Sum_Stub as Sum0
  val ghost function lemma_sum_nonneg [#"../inc_some_2_list.rs" 29 4 29 30] (self : IncSome2List_List_Type.t_list) : ()
  axiom lemma_sum_nonneg_spec : forall self : IncSome2List_List_Type.t_list . [#"../inc_some_2_list.rs" 28 14 28 29] Sum0.sum self >= 0
end
module IncSome2List_Impl1_LemmaSumNonneg_Impl
  use mach.int.Int
  use prelude.Borrow
  use IncSome2List_List_Type as IncSome2List_List_Type
  clone IncSome2List_Impl1_Sum as Sum0
  let rec ghost function lemma_sum_nonneg (self : IncSome2List_List_Type.t_list) : ()
    ensures { [#"../inc_some_2_list.rs" 28 14 28 29] Sum0.sum self >= 0 }
    variant {[#"../inc_some_2_list.rs" 27 15 27 19] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../inc_some_2_list.rs" 30 8 33 9] match (self) with
      | IncSome2List_List_Type.C_Cons _ l -> lemma_sum_nonneg l
      | IncSome2List_List_Type.C_Nil -> ()
      end
end
module IncSome2List_Impl1_SumX_Interface
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  use IncSome2List_List_Type as IncSome2List_List_Type
  clone IncSome2List_Impl1_Sum_Stub as Sum0
  val sum_x [@cfg:stackify] (self : IncSome2List_List_Type.t_list) : uint32
    requires {[#"../inc_some_2_list.rs" 36 15 36 38] Sum0.sum self <= 1000000}
    ensures { [#"../inc_some_2_list.rs" 37 14 37 35] UInt32.to_int result = Sum0.sum self }
    
end
module IncSome2List_Impl1_SumX
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  use IncSome2List_List_Type as IncSome2List_List_Type
  clone IncSome2List_Impl1_Sum as Sum0
  use prelude.IntSize
  let rec cfg sum_x [@cfg:stackify] [#"../inc_some_2_list.rs" 38 4 38 26] (self : IncSome2List_List_Type.t_list) : uint32
    requires {[#"../inc_some_2_list.rs" 36 15 36 38] Sum0.sum self <= 1000000}
    ensures { [#"../inc_some_2_list.rs" 37 14 37 35] UInt32.to_int result = Sum0.sum self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self_1 : IncSome2List_List_Type.t_list;
  var _4 : isize;
  var a_5 : uint32;
  var l_6 : IncSome2List_List_Type.t_list;
  var _7 : uint32;
  var _8 : uint32;
  var _9 : IncSome2List_List_Type.t_list;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | IncSome2List_List_Type.C_Cons _ _ -> goto BB3
      | IncSome2List_List_Type.C_Nil -> goto BB1
      end
  }
  BB1 {
    _0 <- (0 : uint32);
    goto BB5
  }
  BB2 {
    absurd
  }
  BB3 {
    a_5 <- IncSome2List_List_Type.cons_0 self_1;
    l_6 <- IncSome2List_List_Type.cons_1 self_1;
    _7 <- a_5;
    _9 <- l_6;
    _8 <- ([#"../inc_some_2_list.rs" 40 31 40 40] sum_x _9);
    goto BB4
  }
  BB4 {
    _0 <- ([#"../inc_some_2_list.rs" 40 26 40 40] _7 + _8);
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : borrowed t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model ( * self)
end
module CreusotContracts_Logic_Int_Impl12_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module CreusotContracts_Logic_Int_Impl12_Model_Stub
  use mach.int.Int
  use mach.int.UInt32
  val ghost function model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl12_Model_Interface
  use mach.int.Int
  use mach.int.UInt32
  val ghost function model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl12_Model
  use mach.int.Int
  use mach.int.UInt32
  let rec ghost function model (self : uint32) : int = [@vc:do_not_keep_trace] [@vc:sp]
    UInt32.to_int self
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module IncSome2List_Impl1_TakeSomeRest_Interface
  use mach.int.Int
  use prelude.Borrow
  use mach.int.UInt32
  clone CreusotContracts_Logic_Int_Impl12_ModelTy_Type as ModelTy0
  use IncSome2List_List_Type as IncSome2List_List_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Stub as Model0 with type t = uint32,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone IncSome2List_Impl1_Sum_Stub as Sum0
  val take_some_rest [@cfg:stackify] (self : borrowed (IncSome2List_List_Type.t_list)) : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list))
    ensures { [#"../inc_some_2_list.rs" 45 14 46 70] Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ (let (a, _) = result in a)) + Sum0.sum ( ^ (let (_, a) = result in a)) - Model0.model (let (a, _) = result in a) - Sum0.sum ( * (let (_, a) = result in a)) }
    ensures { [#"../inc_some_2_list.rs" 47 14 47 37] Model0.model (let (a, _) = result in a) <= Sum0.sum ( * self) }
    ensures { [#"../inc_some_2_list.rs" 48 14 48 42] Sum0.sum ( * (let (_, a) = result in a)) <= Sum0.sum ( * self) }
    
end
module IncSome2List_Impl1_TakeSomeRest
  use mach.int.Int
  use prelude.Borrow
  use mach.int.UInt32
  clone CreusotContracts_Logic_Int_Impl12_Model as Model1
  clone CreusotContracts_Logic_Int_Impl12_ModelTy_Type as ModelTy0
  use IncSome2List_List_Type as IncSome2List_List_Type
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = uint32,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  clone IncSome2List_Impl1_Sum as Sum0
  use prelude.IntSize
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = IncSome2List_List_Type.t_list
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint32
  clone IncSome2List_Random_Interface as Random0
  clone IncSome2List_Impl1_LemmaSumNonneg as LemmaSumNonneg0 with val Sum0.sum = Sum0.sum, axiom .
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = IncSome2List_List_Type.t_list
  let rec cfg take_some_rest [@cfg:stackify] [#"../inc_some_2_list.rs" 49 4 49 57] (self : borrowed (IncSome2List_List_Type.t_list)) : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list))
    ensures { [#"../inc_some_2_list.rs" 45 14 46 70] Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ (let (a, _) = result in a)) + Sum0.sum ( ^ (let (_, a) = result in a)) - Model0.model (let (a, _) = result in a) - Sum0.sum ( * (let (_, a) = result in a)) }
    ensures { [#"../inc_some_2_list.rs" 47 14 47 37] Model0.model (let (a, _) = result in a) <= Sum0.sum ( * self) }
    ensures { [#"../inc_some_2_list.rs" 48 14 48 42] Sum0.sum ( * (let (_, a) = result in a)) <= Sum0.sum ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list));
  var self_1 : borrowed (IncSome2List_List_Type.t_list);
  var _5 : isize;
  var ma_6 : borrowed uint32;
  var ml_7 : borrowed (IncSome2List_List_Type.t_list);
  var _8 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost ();
  var _11 : ();
  var _12 : bool;
  var _13 : borrowed uint32;
  var _14 : borrowed (IncSome2List_List_Type.t_list);
  var _15 : borrowed (IncSome2List_List_Type.t_list);
  var _16 : ();
  var _17 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch ( * self_1)
      | IncSome2List_List_Type.C_Cons _ _ -> goto BB3
      | IncSome2List_List_Type.C_Nil -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    goto BB10
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB3 {
    ma_6 <- borrow_mut (IncSome2List_List_Type.cons_0 ( * self_1));
    self_1 <- { self_1 with current = (let IncSome2List_List_Type.C_Cons a b =  * self_1 in IncSome2List_List_Type.C_Cons ( ^ ma_6) b) };
    ml_7 <- borrow_mut (IncSome2List_List_Type.cons_1 ( * self_1));
    self_1 <- { self_1 with current = (let IncSome2List_List_Type.C_Cons a b =  * self_1 in IncSome2List_List_Type.C_Cons a ( ^ ml_7)) };
    assume { Resolve0.resolve self_1 };
    _11 <- ();
    _8 <- ([#"../inc_some_2_list.rs" 52 16 52 48] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (LemmaSumNonneg0.lemma_sum_nonneg ( * ml_7)));
    goto BB4
  }
  BB4 {
    _12 <- ([#"../inc_some_2_list.rs" 53 19 53 27] Random0.random ());
    goto BB5
  }
  BB5 {
    switch (_12)
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    _13 <- borrow_mut ( * ma_6);
    ma_6 <- { ma_6 with current = ( ^ _13) };
    assume { Resolve1.resolve ma_6 };
    _14 <- borrow_mut ( * ml_7);
    ml_7 <- { ml_7 with current = ( ^ _14) };
    assume { Resolve2.resolve ml_7 };
    _0 <- (_13, _14);
    goto BB9
  }
  BB7 {
    assume { Resolve1.resolve ma_6 };
    _15 <- borrow_mut ( * ml_7);
    ml_7 <- { ml_7 with current = ( ^ _15) };
    _0 <- ([#"../inc_some_2_list.rs" 56 20 56 39] take_some_rest _15);
    goto BB8
  }
  BB8 {
    assume { Resolve2.resolve ml_7 };
    goto BB9
  }
  BB9 {
    return _0
  }
  BB10 {
    _17 <- ();
    goto BB10
  }
  
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  val ghost predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  val ghost predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = t1
  let rec ghost predicate resolve (self : (t1, t2)) = [@vc:do_not_keep_trace] [@vc:sp]
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module IncSome2List_IncSome2List_Interface
  use mach.int.Int
  use mach.int.UInt32
  use IncSome2List_List_Type as IncSome2List_List_Type
  clone IncSome2List_Impl1_Sum_Stub as Sum0
  val inc_some_2_list [@cfg:stackify] (l : IncSome2List_List_Type.t_list) (j : uint32) (k : uint32) : ()
    requires {[#"../inc_some_2_list.rs" 64 11 64 41] Sum0.sum l + UInt32.to_int j + UInt32.to_int k <= 1000000}
    
end
module IncSome2List_IncSome2List
  use mach.int.Int
  use mach.int.UInt32
  use IncSome2List_List_Type as IncSome2List_List_Type
  clone IncSome2List_Impl1_Sum as Sum0
  use prelude.Borrow
  clone CreusotContracts_Logic_Int_Impl12_Model as Model1
  clone CreusotContracts_Logic_Int_Impl12_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = uint32,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = IncSome2List_List_Type.t_list
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve2 with type t1 = borrowed uint32,
    type t2 = borrowed (IncSome2List_List_Type.t_list), val Resolve0.resolve = Resolve0.resolve,
    val Resolve1.resolve = Resolve1.resolve
  clone IncSome2List_Impl1_TakeSomeRest_Interface as TakeSomeRest0 with val Sum0.sum = Sum0.sum,
    val Model0.model = Model0.model
  clone IncSome2List_Impl1_SumX_Interface as SumX0 with val Sum0.sum = Sum0.sum
  let rec cfg inc_some_2_list [@cfg:stackify] [#"../inc_some_2_list.rs" 65 0 65 51] (l : IncSome2List_List_Type.t_list) (j : uint32) (k : uint32) : ()
    requires {[#"../inc_some_2_list.rs" 64 11 64 41] Sum0.sum l + UInt32.to_int j + UInt32.to_int k <= 1000000}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l_1 : IncSome2List_List_Type.t_list;
  var j_2 : uint32;
  var k_3 : uint32;
  var sum0_5 : uint32;
  var _6 : IncSome2List_List_Type.t_list;
  var ma_7 : borrowed uint32;
  var ml_8 : borrowed (IncSome2List_List_Type.t_list);
  var _9 : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list));
  var _10 : borrowed (IncSome2List_List_Type.t_list);
  var mb_11 : borrowed uint32;
  var _12 : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list));
  var _13 : borrowed (IncSome2List_List_Type.t_list);
  var _14 : uint32;
  var _15 : uint32;
  var _16 : ();
  var _17 : bool;
  var _18 : bool;
  var _19 : uint32;
  var _20 : IncSome2List_List_Type.t_list;
  var _21 : uint32;
  var _22 : uint32;
  var _23 : uint32;
  var _24 : uint32;
  var _25 : uint32;
  var _26 : ();
  {
    l_1 <- l;
    j_2 <- j;
    k_3 <- k;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _6 <- l_1;
    sum0_5 <- ([#"../inc_some_2_list.rs" 66 15 66 24] SumX0.sum_x _6);
    goto BB2
  }
  BB2 {
    _10 <- borrow_mut l_1;
    l_1 <-  ^ _10;
    _9 <- ([#"../inc_some_2_list.rs" 67 19 67 37] TakeSomeRest0.take_some_rest _10);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve ma_7 };
    ma_7 <- (let (a, _) = _9 in a);
    _9 <- (let (a, b) = _9 in (any borrowed uint32, b));
    assume { Resolve1.resolve ml_8 };
    ml_8 <- (let (_, a) = _9 in a);
    _9 <- (let (a, b) = _9 in (a, any borrowed (IncSome2List_List_Type.t_list)));
    assume { Resolve2.resolve _9 };
    _13 <- borrow_mut ( * ml_8);
    ml_8 <- { ml_8 with current = ( ^ _13) };
    _12 <- ([#"../inc_some_2_list.rs" 68 18 68 37] TakeSomeRest0.take_some_rest _13);
    goto BB4
  }
  BB4 {
    assume { Resolve1.resolve ml_8 };
    assume { Resolve0.resolve mb_11 };
    mb_11 <- (let (a, _) = _12 in a);
    _12 <- (let (a, b) = _12 in (any borrowed uint32, b));
    assume { Resolve2.resolve _12 };
    _14 <- j_2;
    ma_7 <- { ma_7 with current = ([#"../inc_some_2_list.rs" 69 4 69 12]  * ma_7 + _14) };
    assume { Resolve0.resolve ma_7 };
    _15 <- k_3;
    mb_11 <- { mb_11 with current = ([#"../inc_some_2_list.rs" 70 4 70 12]  * mb_11 + _15) };
    assume { Resolve0.resolve mb_11 };
    _20 <- l_1;
    _19 <- ([#"../inc_some_2_list.rs" 71 12 71 21] SumX0.sum_x _20);
    goto BB5
  }
  BB5 {
    _23 <- sum0_5;
    _24 <- j_2;
    _22 <- ([#"../inc_some_2_list.rs" 71 25 71 33] _23 + _24);
    _25 <- k_3;
    _21 <- ([#"../inc_some_2_list.rs" 71 25 71 37] _22 + _25);
    _18 <- ([#"../inc_some_2_list.rs" 71 12 71 37] _19 = _21);
    _17 <- not _18;
    switch (_17)
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    absurd
  }
  BB7 {
    _16 <- ();
    _0 <- ();
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module IncSome2List_Impl0
  
end
