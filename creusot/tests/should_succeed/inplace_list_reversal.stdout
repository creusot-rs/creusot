module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type inplacelistreversal_list 't = 
    | InplaceListReversal_List_Nil
    | InplaceListReversal_List_Cons ('t, inplacelistreversal_list 't)
    
  function inplacelistreversal_list_Cons_0 (self : inplacelistreversal_list 't) : ('t, inplacelistreversal_list 't)
  val inplacelistreversal_list_Cons_0 (self : inplacelistreversal_list 't) : ('t, inplacelistreversal_list 't)
    ensures { result = inplacelistreversal_list_Cons_0 self }
    
  axiom inplacelistreversal_list_Cons_0_acc : forall a : ('t, inplacelistreversal_list 't) . inplacelistreversal_list_Cons_0 (InplaceListReversal_List_Cons a : inplacelistreversal_list 't) = a
  type creusotcontracts_logic_ghost_ghost 't = 
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
end
module InplaceListReversal_RevAppend_Interface
  type t   
  use Type
  function rev_append (n : Type.inplacelistreversal_list t) (o : Type.inplacelistreversal_list t) : Type.inplacelistreversal_list t
    
end
module InplaceListReversal_RevAppend
  type t   
  use Type
  function rev_append (n : Type.inplacelistreversal_list t) (o : Type.inplacelistreversal_list t) : Type.inplacelistreversal_list t
    
   = 
    match (n) with
      | Type.InplaceListReversal_List_Nil -> o
      | Type.InplaceListReversal_List_Cons (hd, tl) -> rev_append tl (Type.InplaceListReversal_List_Cons (hd, o))
      end
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t   
  type modelTy  = 
    t
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t   
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Ghost_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Ghost_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  val record (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Std1_Mem_Replace_Interface
  type t   
  use prelude.Prelude
  val replace (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module CreusotContracts_Std1_Mem_Replace
  type t   
  use prelude.Prelude
  val replace (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module InplaceListReversal_Rev_Interface
  type t   
  use Type
  use prelude.Prelude
  clone InplaceListReversal_RevAppend_Interface as RevAppend0 with type t = t
  val rev (l : borrowed (Type.inplacelistreversal_list t)) : ()
    ensures {  ^ l = RevAppend0.rev_append ( * l) (Type.InplaceListReversal_List_Nil) }
    
end
module InplaceListReversal_Rev
  type t   
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = Type.inplacelistreversal_list t
  clone InplaceListReversal_RevAppend as RevAppend0 with type t = t
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = (t, Type.inplacelistreversal_list t)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.inplacelistreversal_list t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.inplacelistreversal_list t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Std1_Mem_Replace_Interface as Replace0 with type t = Type.inplacelistreversal_list t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (Type.inplacelistreversal_list t)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.inplacelistreversal_list t
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = Type.inplacelistreversal_list t,
  function Model0.model = Model0.model
  let rec cfg rev (l : borrowed (Type.inplacelistreversal_list t)) : ()
    ensures {  ^ l = RevAppend0.rev_append ( * l) (Type.InplaceListReversal_List_Nil) }
    
   = 
  var _0 : ();
  var l_1 : borrowed (Type.inplacelistreversal_list t);
  var old_l_2 : Type.creusotcontracts_logic_ghost_ghost (Type.inplacelistreversal_list t);
  var _3 : Type.inplacelistreversal_list t;
  var _4 : Type.inplacelistreversal_list t;
  var prev_5 : Type.inplacelistreversal_list t;
  var head_6 : Type.inplacelistreversal_list t;
  var _7 : borrowed (Type.inplacelistreversal_list t);
  var _8 : Type.inplacelistreversal_list t;
  var _9 : ();
  var _10 : ();
  var _11 : isize;
  var curr_12 : (t, Type.inplacelistreversal_list t);
  var next_13 : Type.inplacelistreversal_list t;
  var _14 : Type.inplacelistreversal_list t;
  var _15 : Type.inplacelistreversal_list t;
  var _16 : (t, Type.inplacelistreversal_list t);
  var _17 : Type.inplacelistreversal_list t;
  var _18 : ();
  var _19 : ();
  var _20 : ();
  var _21 : Type.inplacelistreversal_list t;
  {
    l_1 <- l;
    goto BB0
  }
  BB0 {
    _4 <-  * l_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_l_2 <- Record0.record _3;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_l_2 };
    prev_5 <- Type.InplaceListReversal_List_Nil;
    _7 <- borrow_mut ( * l_1);
    l_1 <- { l_1 with current = ( ^ _7) };
    _8 <- Type.InplaceListReversal_List_Nil;
    head_6 <- Replace0.replace _7 _8;
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant x { RevAppend0.rev_append head_6 prev_5 = RevAppend0.rev_append (Model0.model old_l_2) (Type.InplaceListReversal_List_Nil) };
    goto BB5
  }
  BB5 {
    switch (head_6)
      | Type.InplaceListReversal_List_Cons _ -> goto BB6
      | _ -> goto BB16
      end
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve5.resolve curr_12 };
    curr_12 <- Type.inplacelistreversal_list_Cons_0 head_6;
    assume { Resolve3.resolve next_13 };
    next_13 <- (let (_, a) = curr_12 in a);
    assume { Resolve3.resolve _14 };
    _14 <- prev_5;
    assume { Resolve3.resolve (let (_, a) = curr_12 in a) };
    curr_12 <- (let (a, b) = curr_12 in (a, _14));
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    assume { Resolve5.resolve _16 };
    _16 <- curr_12;
    _15 <- Type.InplaceListReversal_List_Cons _16;
    goto BB10
  }
  BB10 {
    assume { Resolve3.resolve prev_5 };
    prev_5 <- _15;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    assume { Resolve3.resolve _17 };
    _17 <- next_13;
    assume { Resolve3.resolve head_6 };
    head_6 <- _17;
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    _10 <- ();
    assume { Resolve2.resolve _10 };
    goto BB15
  }
  BB15 {
    goto BB17
  }
  BB16 {
    _9 <- ();
    assume { Resolve2.resolve _9 };
    assume { Resolve3.resolve _21 };
    _21 <- prev_5;
    assume { Resolve3.resolve ( * l_1) };
    l_1 <- { l_1 with current = _21 };
    goto BB18
  }
  BB17 {
    goto BB4
  }
  BB18 {
    assume { Resolve4.resolve l_1 };
    goto BB19
  }
  BB19 {
    _0 <- ();
    goto BB20
  }
  BB20 {
    assume { Resolve3.resolve head_6 };
    goto BB21
  }
  BB21 {
    return _0
  }
  
end
