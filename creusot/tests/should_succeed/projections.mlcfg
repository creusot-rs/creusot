
module Projections_CopyOutOfRef
  use prelude.Borrow
  use prelude.UInt32
  use prelude.Int
  let rec cfg copy_out_of_ref [#"../projections.rs" 5 0 5 38] [@cfg:stackify] [@cfg:subregion_analysis] (x : uint32) : uint32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x : uint32 = x;
  {
    goto BB0
  }
  BB0 {
    [#"../projections.rs" 6 4 6 6] _0 <- ([#"../projections.rs" 6 4 6 6] x);
    return _0
  }
  
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
  let function ok_0 (self : t_result 't 'e) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Ok a -> a
      | C_Err _ -> any 't
      end
  let function err_0 (self : t_result 't 'e) : 'e = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Ok _ -> any 'e
      | C_Err a -> a
      end
end
module Projections_CopyOutOfSum
  use prelude.Borrow
  use prelude.UInt32
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  use Core_Result_Result_Type as Core_Result_Result_Type
  let rec cfg copy_out_of_sum [#"../projections.rs" 9 0 9 60] [@cfg:stackify] [@cfg:subregion_analysis] (x : Core_Result_Result_Type.t_result (borrowed uint32) (borrowed uint32)) : uint32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x : Core_Result_Result_Type.t_result (borrowed uint32) (borrowed uint32) = x;
  var x1 : borrowed uint32;
  var y : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    switch (x)
      | Core_Result_Result_Type.C_Ok _ -> goto BB1
      | Core_Result_Result_Type.C_Err _ -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    [#"../projections.rs" 12 12 12 13] y <- ([#"../projections.rs" 12 12 12 13] Core_Result_Result_Type.err_0 x);
    [#"../projections.rs" 12 12 12 13] x <- (let Core_Result_Result_Type.C_Err x0 = x in Core_Result_Result_Type.C_Err (any borrowed uint32));
    [#"../projections.rs" 12 18 12 20] _0 <- ([#"../projections.rs" 12 18 12 20]  * y);
    assume { resolve0 y };
    goto BB5
  }
  BB3 {
    assert { [#"../projections.rs" 10 10 10 11] false };
    absurd
  }
  BB4 {
    [#"../projections.rs" 11 11 11 12] x1 <- ([#"../projections.rs" 11 11 11 12] Core_Result_Result_Type.ok_0 x);
    [#"../projections.rs" 11 11 11 12] x <- (let Core_Result_Result_Type.C_Ok x0 = x in Core_Result_Result_Type.C_Ok (any borrowed uint32));
    [#"../projections.rs" 11 17 11 19] _0 <- ([#"../projections.rs" 11 17 11 19]  * x1);
    assume { resolve0 x1 };
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Projections_WriteIntoSum
  use prelude.Borrow
  use prelude.UInt32
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate resolve1 (self : borrowed (Core_Option_Option_Type.t_option uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (Core_Option_Option_Type.t_option uint32)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  let rec cfg write_into_sum [#"../projections.rs" 16 0 16 42] [@cfg:stackify] [@cfg:subregion_analysis] (x : borrowed (Core_Option_Option_Type.t_option uint32)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : borrowed (Core_Option_Option_Type.t_option uint32) = x;
  var y : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    switch ( * x)
      | Core_Option_Option_Type.C_None -> goto BB1
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      end
  }
  BB1 {
    assume { resolve1 x };
    [#"../projections.rs" 19 16 19 18] _0 <- ([#"../projections.rs" 19 16 19 18] ());
    goto BB5
  }
  BB2 {
    goto BB4
  }
  BB3 {
    assume { resolve1 x };
    assert { [#"../projections.rs" 17 10 17 11] false };
    absurd
  }
  BB4 {
    [#"../projections.rs" 18 13 18 14] y <- Borrow.borrow_mut (Core_Option_Option_Type.some_0 ( * x));
    [#"../projections.rs" 18 13 18 14] x <- { x with current = (let Core_Option_Option_Type.C_Some x0 =  * x in Core_Option_Option_Type.C_Some ( ^ y)) };
    [#"../projections.rs" 18 19 18 26] y <- { y with current = ([#"../projections.rs" 18 19 18 26] [#"../projections.rs" 18 24 18 26] (10 : uint32)) };
    assume { resolve0 y };
    [#"../projections.rs" 18 19 18 26] _0 <- ([#"../projections.rs" 18 19 18 26] ());
    assume { resolve1 x };
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Projections_F
  use prelude.Int32
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Int
  let rec cfg f [#"../projections.rs" 23 0 23 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : bool;
  var _2 : Core_Option_Option_Type.t_option int32;
  var x : int32;
  {
    goto BB0
  }
  BB0 {
    [#"../projections.rs" 24 10 24 18] _2 <- ([#"../projections.rs" 24 10 24 18] Core_Option_Option_Type.C_Some ([#"../projections.rs" 24 15 24 17] [#"../projections.rs" 24 15 24 17] (10 : int32)));
    switch (_2)
      | Core_Option_Option_Type.C_None -> goto BB1
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      end
  }
  BB1 {
    [#"../projections.rs" 26 16 26 21] _1 <- ([#"../projections.rs" 26 16 26 21] [#"../projections.rs" 26 16 26 21] false);
    goto BB5
  }
  BB2 {
    goto BB4
  }
  BB3 {
    assert { [#"../projections.rs" 24 10 24 18] false };
    absurd
  }
  BB4 {
    [#"../projections.rs" 25 13 25 14] x <- ([#"../projections.rs" 25 13 25 14] Core_Option_Option_Type.some_0 _2);
    [#"../projections.rs" 25 19 25 25] _1 <- ([#"../projections.rs" 25 19 25 25] ([#"../projections.rs" 25 19 25 20] x) = ([#"../projections.rs" 25 24 25 25] [#"../projections.rs" 25 24 25 25] (0 : int32)));
    goto BB5
  }
  BB5 {
    [#"../projections.rs" 23 11 28 1] _0 <- ([#"../projections.rs" 23 11 28 1] ());
    return _0
  }
  
end
