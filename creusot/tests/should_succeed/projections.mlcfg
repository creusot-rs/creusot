
module Projections_CopyOutOfRef_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  val copy_out_of_ref [@cfg:stackify] (x : uint32) : uint32
end
module Projections_CopyOutOfRef
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  let rec cfg copy_out_of_ref [@cfg:stackify] [#"../projections.rs" 5 0 5 38] (x : uint32) : uint32
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x_1 : uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- x_1;
    return _0
  }
  
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
  let function err_0 (self : t_result 't 'e) : 'e = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ok _ -> any 'e
      | C_Err a -> a
      end
  let function ok_0 (self : t_result 't 'e) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ok a -> a
      | C_Err _ -> any 't
      end
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module Projections_CopyOutOfSum_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use Core_Result_Result_Type as Core_Result_Result_Type
  val copy_out_of_sum [@cfg:stackify] (x : Core_Result_Result_Type.t_result (borrowed uint32) (borrowed uint32)) : uint32
    
end
module Projections_CopyOutOfSum
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use Core_Result_Result_Type as Core_Result_Result_Type
  use prelude.IntSize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  let rec cfg copy_out_of_sum [@cfg:stackify] [#"../projections.rs" 9 0 9 60] (x : Core_Result_Result_Type.t_result (borrowed uint32) (borrowed uint32)) : uint32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x_1 : Core_Result_Result_Type.t_result (borrowed uint32) (borrowed uint32);
  var _2 : isize;
  var x_3 : borrowed uint32;
  var y_4 : borrowed uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    switch (x_1)
      | Core_Result_Result_Type.C_Ok _ -> goto BB3
      | Core_Result_Result_Type.C_Err _ -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve y_4 };
    y_4 <- Core_Result_Result_Type.err_0 x_1;
    x_1 <- (let Core_Result_Result_Type.C_Err a = x_1 in Core_Result_Result_Type.C_Err (any borrowed uint32));
    _0 <-  * y_4;
    assume { Resolve0.resolve y_4 };
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    assume { Resolve0.resolve x_3 };
    x_3 <- Core_Result_Result_Type.ok_0 x_1;
    x_1 <- (let Core_Result_Result_Type.C_Ok a = x_1 in Core_Result_Result_Type.C_Ok (any borrowed uint32));
    _0 <-  * x_3;
    assume { Resolve0.resolve x_3 };
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Projections_WriteIntoSum_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use Core_Option_Option_Type as Core_Option_Option_Type
  val write_into_sum [@cfg:stackify] (x : borrowed (Core_Option_Option_Type.t_option uint32)) : ()
end
module Projections_WriteIntoSum
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.IntSize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Core_Option_Option_Type.t_option uint32
  let rec cfg write_into_sum [@cfg:stackify] [#"../projections.rs" 16 0 16 42] (x : borrowed (Core_Option_Option_Type.t_option uint32)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : borrowed (Core_Option_Option_Type.t_option uint32);
  var _2 : isize;
  var y_3 : borrowed uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    switch ( * x_1)
      | Core_Option_Option_Type.C_None -> goto BB1
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      end
  }
  BB1 {
    assume { Resolve0.resolve x_1 };
    _0 <- ();
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve x_1 };
    absurd
  }
  BB3 {
    y_3 <- borrow_mut (Core_Option_Option_Type.some_0 ( * x_1));
    x_1 <- { x_1 with current = (let Core_Option_Option_Type.C_Some a =  * x_1 in Core_Option_Option_Type.C_Some ( ^ y_3)) };
    assume { Resolve0.resolve x_1 };
    y_3 <- { y_3 with current = (10 : uint32) };
    assume { Resolve1.resolve y_3 };
    _0 <- ();
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Projections_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module Projections_F
  use mach.int.Int
  use mach.int.Int32
  use prelude.IntSize
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec cfg f [@cfg:stackify] [#"../projections.rs" 23 0 23 10] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : bool;
  var _2 : Core_Option_Option_Type.t_option int32;
  var _3 : isize;
  var x_4 : int32;
  var _5 : int32;
  {
    goto BB0
  }
  BB0 {
    _2 <- Core_Option_Option_Type.C_Some (10 : int32);
    switch (_2)
      | Core_Option_Option_Type.C_None -> goto BB1
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      end
  }
  BB1 {
    _1 <- false;
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    x_4 <- Core_Option_Option_Type.some_0 _2;
    _5 <- x_4;
    _1 <- ([#"../projections.rs" 25 19 25 25] _5 = (0 : int32));
    goto BB4
  }
  BB4 {
    _0 <- ();
    return _0
  }
  
end
