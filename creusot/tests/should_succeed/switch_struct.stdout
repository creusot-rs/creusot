module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type switchstruct_m 't = 
    | SwitchStruct_M_F(uint32)
    | SwitchStruct_M_G('t)
    
end
module SwitchStruct_Test_Interface
  use Type
  use mach.int.Int
  use mach.int.UInt32
  val test (o : Type.switchstruct_m uint32) : bool
end
module SwitchStruct_Test
  use Type
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  let rec cfg test (o : Type.switchstruct_m uint32) : bool = 
  var _0 : bool;
  var o_1 : Type.switchstruct_m uint32;
  var _2 : isize;
  var field1_3 : uint32;
  var _4 : uint32;
  var field2_5 : uint32;
  var _6 : uint32;
  {
    o_1 <- o;
    goto BB0
  }
  BB0 {
    switch (o_1)
      | Type.SwitchStruct_M_F(_) -> goto BB1
      | Type.SwitchStruct_M_G(_) -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { (fun x -> true) _2 };
    goto BB4
  }
  BB2 {
    assume { (fun x -> true) _2 };
    assume { (fun x -> true) field2_5 };
    field2_5 <- (let Type.SwitchStruct_M_G(a) = o_1 in a);
    assume { (fun x -> true) o_1 };
    assume { (fun x -> true) _6 };
    _6 <- field2_5;
    assume { (fun x -> true) field2_5 };
    _0 <- _6 = (0 : uint32);
    goto BB5
  }
  BB3 {
    assume { (fun x -> true) o_1 };
    assume { (fun x -> true) _2 };
    absurd
  }
  BB4 {
    assume { (fun x -> true) field1_3 };
    field1_3 <- (let Type.SwitchStruct_M_F(a) = o_1 in a);
    assume { (fun x -> true) o_1 };
    assume { (fun x -> true) _4 };
    _4 <- field1_3;
    assume { (fun x -> true) field1_3 };
    _0 <- _4 > (0 : uint32);
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module SwitchStruct_Main_Interface
  val main () : ()
end
module SwitchStruct_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
