
module BinarySearch_List_Type
  type t_list 't =
    | C_Cons 't (t_list 't)
    | C_Nil
  
  function any_l (_ : 'b) : 'a
  
  let rec cons < 't > (input:t_list 't) (ret  (field_0:'t) (field_1:t_list 't))= any
    [ good (field_0:'t) (field_1:t_list 't)-> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:'t) (field_1:t_list 't)-> {C_Cons field_0 field_1 <> input} {false} any ]
    
  
  let rec nil < 't > (input:t_list 't) (ret  )= any
    [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} {false} any ]
    
end
module BinarySearch_Impl0_LenLogic_Impl
  type t
  
  let%span sbinary_search0 = "../binary_search.rs" 22 17 22 21
  
  let%span sbinary_search1 = "../binary_search.rs" 21 14 21 25
  
  let%span span2 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  use BinarySearch_List_Type as List'0
  
  predicate invariant'0 (self : List'0.t_list t) =
    [%#span2] true
  
  predicate inv'0 (_x : List'0.t_list t)
  
  axiom inv'0 : forall x : List'0.t_list t . inv'0 x = true
  
  use prelude.prelude.Int
  
  constant self  : List'0.t_list t
  
  function len_logic [#"../binary_search.rs" 22 4 22 29] (self : List'0.t_list t) : int
  
  goal vc_len_logic : ([%#sbinary_search0] inv'0 self)
   -> match self with
    | List'0.C_Cons _ ls -> ([%#sbinary_search0] inv'0 ls)
    /\ (([%#sbinary_search1] len_logic ls >= 0)  -> ([%#sbinary_search1] 1 + len_logic ls >= 0))
    | List'0.C_Nil -> [%#sbinary_search1] 0 >= 0
    end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module BinarySearch_Impl0_Index
  type t
  
  let%span sbinary_search0 = "../binary_search.rs" 49 20 49 39
  
  let%span sbinary_search1 = "../binary_search.rs" 50 20 50 52
  
  let%span sbinary_search2 = "../binary_search.rs" 52 20 52 21
  
  let%span sbinary_search3 = "../binary_search.rs" 54 22 54 23
  
  let%span sbinary_search4 = "../binary_search.rs" 59 8 59 29
  
  let%span sbinary_search5 = "../binary_search.rs" 43 15 43 37
  
  let%span sbinary_search6 = "../binary_search.rs" 45 14 45 18
  
  let%span sbinary_search7 = "../binary_search.rs" 44 14 44 44
  
  let%span sbinary_search8 = "../binary_search.rs" 45 38 45 40
  
  let%span span9 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span10 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span11 = "../binary_search.rs" 31 8 40 9
  
  let%span span12 = "../binary_search.rs" 22 17 22 21
  
  let%span span13 = "../binary_search.rs" 21 14 21 25
  
  let%span span14 = "../binary_search.rs" 23 8 26 9
  
  use BinarySearch_List_Type as List'0
  
  predicate invariant'3 (self : List'0.t_list t) =
    [%#span9] true
  
  predicate inv'3 (_x : List'0.t_list t)
  
  axiom inv'3 : forall x : List'0.t_list t . inv'3 x = true
  
  predicate invariant'2 (self : List'0.t_list t) =
    [%#span9] true
  
  predicate inv'2 (_x : List'0.t_list t)
  
  axiom inv'2 : forall x : List'0.t_list t . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  predicate invariant'0 (self : List'0.t_list t) =
    [%#span9] true
  
  predicate inv'0 (_x : List'0.t_list t)
  
  axiom inv'0 : forall x : List'0.t_list t . inv'0 x = true
  
  use Core_Option_Option_Type as Option'0
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate resolve'2 (self : List'0.t_list t) =
    [%#span10] true
  
  predicate resolve'1 (self : t)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  function get'0 [#"../binary_search.rs" 30 4 30 38] (self : List'0.t_list t) (ix : int) : Option'0.t_option t =
    [%#span11] match self with
      | List'0.C_Cons t ls -> if ix = 0 then Option'0.C_Some t else get'0 ls (ix - 1)
      | List'0.C_Nil -> Option'0.C_None
      end
  
  function len_logic'0 [#"../binary_search.rs" 22 4 22 29] (self : List'0.t_list t) : int =
    [%#span14] match self with
      | List'0.C_Cons _ ls -> 1 + len_logic'0 ls
      | List'0.C_Nil -> 0
      end
  
  axiom len_logic'0_spec : forall self : List'0.t_list t . ([%#span12] inv'3 self)
   -> ([%#span13] len_logic'0 self >= 0)
  
  use prelude.prelude.UIntSize
  
  predicate resolve'0 (self : List'0.t_list t) =
    [%#span10] true
  
  let rec index (self:List'0.t_list t) (ix:usize) (return'  (ret:t))= {[%#sbinary_search6] inv'0 self}
    {[%#sbinary_search5] UIntSize.to_int ix < len_logic'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &orig_ix <- ix ] s1
      | s1 =  [ &l <- self ] s2
      | s2 = {[@expl:type invariant] inv'0 self} s3
      | s3 = -{resolve'0 self}- s4
      | s4 = bb1 ]
      
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant] [%#sbinary_search1] get'0 self (UIntSize.to_int orig_ix)
        = get'0 l (UIntSize.to_int ix)}
        {[@expl:loop invariant] [%#sbinary_search0] UIntSize.to_int ix < len_logic'0 l}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = any
          [ br0 (a:t) (b:List'0.t_list t)-> {l = List'0.C_Cons a b} (! bb3) | br1 -> {l = List'0.C_Nil } (! bb7) ]
          
        | bb3 = bb4
        | bb4 = s0
          [ s0 = List'0.cons <t> {l} (fun (r0'0:t) (r1'0:List'0.t_list t) ->  [ &t <- r0'0 ] s1)
          | s1 = List'0.cons <t> {l} (fun (r0'1:t) (r1'1:List'0.t_list t) ->  [ &ls <- r1'1 ] s2)
          | s2 = {[@expl:type invariant] inv'0 l} s3
          | s3 = -{resolve'0 l}- s4
          | s4 = UIntSize.gt {ix} {[%#sbinary_search2] (0 : usize)} (fun (_ret':bool) ->  [ &_14 <- _ret' ] s5)
          | s5 = any [ br0 -> {_14 = false} (! bb6) | br1 -> {_14} (! bb5) ]  ]
          
        | bb5 = s0
          [ s0 = {[@expl:type invariant] inv'1 t} s1
          | s1 = -{resolve'1 t}- s2
          | s2 =  [ &_17 <- ls ] s3
          | s3 = {[@expl:type invariant] inv'2 ls} s4
          | s4 = -{resolve'2 ls}- s5
          | s5 = {[@expl:type invariant] inv'2 _17} s6
          | s6 = -{resolve'2 _17}- s7
          | s7 =  [ &l <- _17 ] s8
          | s8 = UIntSize.sub {ix} {[%#sbinary_search3] (1 : usize)} (fun (_ret':usize) ->  [ &ix <- _ret' ] s9)
          | s9 = bb1 ]
           ]
         ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'0 l} s1 | s1 = -{resolve'0 l}- s2 | s2 = {[%#sbinary_search4] false} any ]
      
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'2 ls} s1
      | s1 = -{resolve'2 ls}- s2
      | s2 =  [ &_0 <- t ] s3
      | s3 = {[@expl:type invariant] inv'1 t} s4
      | s4 = -{resolve'1 t}- s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : t = any_l ()
    | & self : List'0.t_list t = self
    | & ix : usize = ix
    | & orig_ix : usize = any_l ()
    | & l : List'0.t_list t = any_l ()
    | & t : t = any_l ()
    | & ls : List'0.t_list t = any_l ()
    | & _14 : bool = any_l ()
    | & _17 : List'0.t_list t = any_l () ]
    
    [ return' (result:t)-> {[@expl:postcondition] [%#sbinary_search8] inv'1 result}
      {[@expl:postcondition] [%#sbinary_search7] Option'0.C_Some result = get'0 self (UIntSize.to_int ix)}
      (! return' {result}) ]
    
end
module BinarySearch_Impl0_Len
  type t
  
  let%span sbinary_search0 = "../binary_search.rs" 67 29 67 30
  
  let%span sbinary_search1 = "../binary_search.rs" 69 20 69 60
  
  let%span sbinary_search2 = "../binary_search.rs" 71 19 71 20
  
  let%span sbinary_search3 = "../binary_search.rs" 63 15 63 44
  
  let%span sbinary_search4 = "../binary_search.rs" 66 12 66 16
  
  let%span sbinary_search5 = "../binary_search.rs" 64 14 64 30
  
  let%span sbinary_search6 = "../binary_search.rs" 65 14 65 41
  
  let%span span7 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span8 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span9 = "../binary_search.rs" 22 17 22 21
  
  let%span span10 = "../binary_search.rs" 21 14 21 25
  
  let%span span11 = "../binary_search.rs" 23 8 26 9
  
  use BinarySearch_List_Type as List'0
  
  predicate invariant'2 (self : List'0.t_list t) =
    [%#span7] true
  
  predicate inv'2 (_x : List'0.t_list t)
  
  axiom inv'2 : forall x : List'0.t_list t . inv'2 x = true
  
  predicate invariant'1 (self : List'0.t_list t) =
    [%#span7] true
  
  predicate inv'1 (_x : List'0.t_list t)
  
  axiom inv'1 : forall x : List'0.t_list t . inv'1 x = true
  
  predicate invariant'0 (self : List'0.t_list t) =
    [%#span7] true
  
  predicate inv'0 (_x : List'0.t_list t)
  
  axiom inv'0 : forall x : List'0.t_list t . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : List'0.t_list t) =
    [%#span8] true
  
  use prelude.prelude.Int
  
  function len_logic'0 [#"../binary_search.rs" 22 4 22 29] (self : List'0.t_list t) : int =
    [%#span11] match self with
      | List'0.C_Cons _ ls -> 1 + len_logic'0 ls
      | List'0.C_Nil -> 0
      end
  
  axiom len_logic'0_spec : forall self : List'0.t_list t . ([%#span9] inv'2 self)  -> ([%#span10] len_logic'0 self >= 0)
  
  use prelude.prelude.UIntSize
  
  predicate resolve'0 (self : List'0.t_list t) =
    [%#span8] true
  
  use prelude.prelude.UIntSize
  
  let rec len (self:List'0.t_list t) (return'  (ret:usize))= {[%#sbinary_search4] inv'0 self}
    {[%#sbinary_search3] len_logic'0 self <= 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &len <- [%#sbinary_search0] (0 : usize) ] s1
      | s1 =  [ &l <- self ] s2
      | s2 = {[@expl:type invariant] inv'0 self} s3
      | s3 = -{resolve'0 self}- s4
      | s4 = bb1 ]
      
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant] [%#sbinary_search1] UIntSize.to_int len + len_logic'0 l = len_logic'0 self}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = any
          [ br0 (a:t) (b:List'0.t_list t)-> {l = List'0.C_Cons a b} (! bb3) | br1 -> {l = List'0.C_Nil } (! bb5) ]
          
        | bb3 = bb4
        | bb4 = s0
          [ s0 = List'0.cons <t> {l} (fun (r0'0:t) (r1'0:List'0.t_list t) ->  [ &ls <- r1'0 ] s1)
          | s1 = {[@expl:type invariant] inv'0 l} s2
          | s2 = -{resolve'0 l}- s3
          | s3 = UIntSize.add {len} {[%#sbinary_search2] (1 : usize)} (fun (_ret':usize) ->  [ &len <- _ret' ] s4)
          | s4 = {[@expl:type invariant] inv'1 ls} s5
          | s5 = -{resolve'1 ls}- s6
          | s6 =  [ &l <- ls ] s7
          | s7 = bb1 ]
           ]
         ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 l} s1
      | s1 = -{resolve'0 l}- s2
      | s2 =  [ &_0 <- len ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : usize = any_l ()
    | & self : List'0.t_list t = self
    | & len : usize = any_l ()
    | & l : List'0.t_list t = any_l ()
    | & ls : List'0.t_list t = any_l () ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [%#sbinary_search6] UIntSize.to_int result = len_logic'0 self}
      {[@expl:postcondition] [%#sbinary_search5] result >= (0 : usize)}
      (! return' {result}) ]
    
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
  
  function any_l (_ : 'b) : 'a
  
  let rec ok < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Ok field_0 <> input} {false} any ]
    
  
  let rec err < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad (field_0:'e)-> {C_Err field_0 <> input} {false} any ]
    
end
module BinarySearch_BinarySearch
  let%span sbinary_search0 = "../binary_search.rs" 110 20 110 21
  
  let%span sbinary_search1 = "../binary_search.rs" 111 19 111 20
  
  let%span sbinary_search2 = "../binary_search.rs" 114 19 114 20
  
  let%span sbinary_search3 = "../binary_search.rs" 116 16 116 63
  
  let%span sbinary_search4 = "../binary_search.rs" 116 4 116 65
  
  let%span sbinary_search5 = "../binary_search.rs" 119 17 119 18
  
  let%span sbinary_search6 = "../binary_search.rs" 120 26 120 27
  
  let%span sbinary_search7 = "../binary_search.rs" 120 19 120 27
  
  let%span sbinary_search8 = "../binary_search.rs" 131 19 131 20
  
  let%span sbinary_search9 = "../binary_search.rs" 102 11 102 39
  
  let%span sbinary_search10 = "../binary_search.rs" 103 11 103 26
  
  let%span sbinary_search11 = "../binary_search.rs" 104 0 104 73
  
  let%span sbinary_search12 = "../binary_search.rs" 105 0 106 78
  
  let%span sbinary_search13 = "../binary_search.rs" 107 0 108 90
  
  let%span span14 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span15 = "../binary_search.rs" 31 8 40 9
  
  let%span span16 = "../binary_search.rs" 90 12 97 13
  
  let%span span17 = "../binary_search.rs" 22 17 22 21
  
  let%span span18 = "../binary_search.rs" 21 14 21 25
  
  let%span span19 = "../binary_search.rs" 23 8 26 9
  
  let%span span20 = "../binary_search.rs" 43 15 43 37
  
  let%span span21 = "../binary_search.rs" 45 14 45 18
  
  let%span span22 = "../binary_search.rs" 44 14 44 44
  
  let%span span23 = "../binary_search.rs" 45 38 45 40
  
  let%span span24 = "../binary_search.rs" 79 8 82 9
  
  let%span span25 = "../binary_search.rs" 63 15 63 44
  
  let%span span26 = "../binary_search.rs" 66 12 66 16
  
  let%span span27 = "../binary_search.rs" 64 14 64 30
  
  let%span span28 = "../binary_search.rs" 65 14 65 41
  
  use prelude.prelude.UInt32
  
  predicate invariant'2 (self : uint32) =
    [%#span14] true
  
  predicate inv'2 (_x : uint32)
  
  axiom inv'2 : forall x : uint32 . inv'2 x = true
  
  use BinarySearch_List_Type as List'0
  
  predicate invariant'1 (self : List'0.t_list uint32) =
    [%#span14] true
  
  predicate inv'1 (_x : List'0.t_list uint32)
  
  axiom inv'1 : forall x : List'0.t_list uint32 . inv'1 x = true
  
  predicate invariant'0 (self : List'0.t_list uint32) =
    [%#span14] true
  
  predicate inv'0 (_x : List'0.t_list uint32)
  
  axiom inv'0 : forall x : List'0.t_list uint32 . inv'0 x = true
  
  use Core_Option_Option_Type as Option'0
  
  use prelude.prelude.Int
  
  function get'0 [#"../binary_search.rs" 30 4 30 38] (self : List'0.t_list uint32) (ix : int) : Option'0.t_option uint32
   =
    [%#span15] match self with
      | List'0.C_Cons t ls -> if ix = 0 then Option'0.C_Some t else get'0 ls (ix - 1)
      | List'0.C_Nil -> Option'0.C_None
      end
  
  predicate is_sorted'0 [#"../binary_search.rs" 88 4 88 30] (self : List'0.t_list uint32) =
    [%#span16] forall x2 : int . forall x1 : int . x1 <= x2
     -> match (get'0 self x1, get'0 self x2) with
      | (Option'0.C_Some v1, Option'0.C_Some v2) -> v1 <= v2
      | (Option'0.C_None, Option'0.C_None) -> true
      | _ -> false
      end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UIntSize
  
  function len_logic'0 [#"../binary_search.rs" 22 4 22 29] (self : List'0.t_list uint32) : int =
    [%#span19] match self with
      | List'0.C_Cons _ ls -> 1 + len_logic'0 ls
      | List'0.C_Nil -> 0
      end
  
  axiom len_logic'0_spec : forall self : List'0.t_list uint32 . ([%#span17] inv'1 self)
   -> ([%#span18] len_logic'0 self >= 0)
  
  use prelude.prelude.UIntSize
  
  let rec index'0 (self:List'0.t_list uint32) (ix:usize) (return'  (ret:uint32))= {[@expl:precondition] [%#span21] inv'0 self}
    {[@expl:precondition] [%#span20] UIntSize.to_int ix < len_logic'0 self}
    any
    [ return' (result:uint32)-> {[%#span23] inv'2 result}
      {[%#span22] Option'0.C_Some result = get'0 self (UIntSize.to_int ix)}
      (! return' {result}) ]
    
  
  function get_default'0 [#"../binary_search.rs" 78 4 78 46] (self : List'0.t_list uint32) (ix : int) (def : uint32) : uint32
    
   =
    [%#span24] match get'0 self ix with
      | Option'0.C_Some v -> v
      | Option'0.C_None -> def
      end
  
  use Core_Result_Result_Type as Result'0
  
  let rec len'0 (self:List'0.t_list uint32) (return'  (ret:usize))= {[@expl:precondition] [%#span26] inv'0 self}
    {[@expl:precondition] [%#span25] len_logic'0 self <= 1000000}
    any
    [ return' (result:usize)-> {[%#span28] UIntSize.to_int result = len_logic'0 self}
      {[%#span27] result >= (0 : usize)}
      (! return' {result}) ]
    
  
  let rec binary_search (arr:List'0.t_list uint32) (elem:uint32) (return'  (ret:Result'0.t_result usize usize))= {[%#sbinary_search10] is_sorted'0 arr}
    {[%#sbinary_search9] len_logic'0 arr <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UIntSize.eq {_10} {[%#sbinary_search0] (0 : usize)}
          (fun (_ret':bool) ->  [ &_9 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_10 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ]  ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- Result'0.C_Err ([%#sbinary_search1] (0 : usize)) ] s1 | s1 = bb21 ] 
    | bb3 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &size <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &base <- [%#sbinary_search2] (0 : usize) ] s1 | s1 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [%#sbinary_search4] forall i : usize . UIntSize.to_int base + UIntSize.to_int size
        < UIntSize.to_int i
        /\ UIntSize.to_int i < len_logic'0 arr  -> elem < get_default'0 arr (UIntSize.to_int i) (0 : uint32)}
        {[@expl:loop invariant] [%#sbinary_search4] forall i : usize . i < base
         -> get_default'0 arr (UIntSize.to_int i) (0 : uint32) <= elem}
        {[@expl:loop invariant] [%#sbinary_search3] 0 < UIntSize.to_int size
        /\ UIntSize.to_int size + UIntSize.to_int base <= len_logic'0 arr}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = UIntSize.gt {size} {[%#sbinary_search5] (1 : usize)} (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
          | s1 = any [ br0 -> {_21 = false} (! bb13) | br1 -> {_21} (! bb7) ]  ]
          
        | bb7 = s0
          [ s0 = UIntSize.eq {[%#sbinary_search6] (2 : usize)} {[%#sbinary_search7] (0 : usize)}
              (fun (_ret':bool) ->  [ &_25 <- _ret' ] s1)
          | s1 = {[@expl:division by zero] [%#sbinary_search7] not _25} s2
          | s2 = bb8 ]
          
        | bb8 = s0
          [ s0 = UIntSize.div {size} {[%#sbinary_search6] (2 : usize)} (fun (_ret':usize) ->  [ &half <- _ret' ] s1)
          | s1 = UIntSize.add {base} {half} (fun (_ret':usize) ->  [ &mid <- _ret' ] s2)
          | s2 = index'0 {arr} {mid} (fun (_ret':uint32) ->  [ &_32 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = UInt32.gt {_32} {elem} (fun (_ret':bool) ->  [ &_30 <- _ret' ] s1)
          | s1 = any [ br0 -> {_30 = false} (! bb11) | br1 -> {_30} (! bb10) ]  ]
          
        | bb10 = s0 [ s0 =  [ &_29 <- base ] s1 | s1 = bb12 ] 
        | bb11 = s0 [ s0 =  [ &_29 <- mid ] s1 | s1 = bb12 ] 
        | bb12 = s0
          [ s0 =  [ &base <- _29 ] (any [ any_ (_any:usize)-> (!  [ &_29 <- _any ] s1) ] )
          | s1 = UIntSize.sub {size} {half} (fun (_ret':usize) ->  [ &size <- _ret' ] s2)
          | s2 = bb5 ]
           ]
         ]
      
    | bb13 = s0 [ s0 = index'0 {arr} {base} (fun (_ret':uint32) ->  [ &_41 <- _ret' ] s1) | s1 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &cmp <- _41 ] s1
      | s1 = UInt32.eq {cmp} {elem} (fun (_ret':bool) ->  [ &_44 <- _ret' ] s2)
      | s2 = any [ br0 -> {_44 = false} (! bb16) | br1 -> {_44} (! bb15) ]  ]
      
    | bb15 = s0 [ s0 =  [ &_0 <- Result'0.C_Ok base ] s1 | s1 = bb20 ] 
    | bb16 = s0
      [ s0 = UInt32.lt {cmp} {elem} (fun (_ret':bool) ->  [ &_48 <- _ret' ] s1)
      | s1 = any [ br0 -> {_48 = false} (! bb18) | br1 -> {_48} (! bb17) ]  ]
      
    | bb17 = s0
      [ s0 = UIntSize.add {base} {[%#sbinary_search8] (1 : usize)} (fun (_ret':usize) ->  [ &_51 <- _ret' ] s1)
      | s1 =  [ &_0 <- Result'0.C_Err _51 ] (any [ any_ (_any:usize)-> (!  [ &_51 <- _any ] s2) ] )
      | s2 = bb19 ]
      
    | bb18 = s0 [ s0 =  [ &_0 <- Result'0.C_Err base ] s1 | s1 = bb19 ] 
    | bb19 = bb20
    | bb20 = bb21
    | bb21 = return' {_0} ]
    )
    [ & _0 : Result'0.t_result usize usize = any_l ()
    | & arr : List'0.t_list uint32 = arr
    | & elem : uint32 = elem
    | & _9 : bool = any_l ()
    | & _10 : usize = any_l ()
    | & size : usize = any_l ()
    | & base : usize = any_l ()
    | & _21 : bool = any_l ()
    | & half : usize = any_l ()
    | & _25 : bool = any_l ()
    | & mid : usize = any_l ()
    | & _29 : usize = any_l ()
    | & _30 : bool = any_l ()
    | & _32 : uint32 = any_l ()
    | & cmp : uint32 = any_l ()
    | & _41 : uint32 = any_l ()
    | & _44 : bool = any_l ()
    | & _48 : bool = any_l ()
    | & _51 : usize = any_l () ]
    
    [ return' (result:Result'0.t_result usize usize)-> {[@expl:postcondition] [%#sbinary_search13] forall x : usize . result
      = Result'0.C_Err x
       -> (forall i : usize . UIntSize.to_int x < UIntSize.to_int i /\ UIntSize.to_int i < len_logic'0 arr
       -> elem < get_default'0 arr (UIntSize.to_int i) (0 : uint32))}
      {[@expl:postcondition] [%#sbinary_search12] forall x : usize . result = Result'0.C_Err x
       -> (forall i : usize . 0 <= UIntSize.to_int i /\ UIntSize.to_int i < UIntSize.to_int x
       -> get_default'0 arr (UIntSize.to_int i) (0 : uint32) <= elem)}
      {[@expl:postcondition] [%#sbinary_search11] forall x : usize . result = Result'0.C_Ok x
       -> get'0 arr (UIntSize.to_int x) = Option'0.C_Some elem}
      (! return' {result}) ]
    
end
