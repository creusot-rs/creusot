module M_binary_search__qyi13868011053250380720__len_logic [#"binary_search.rs" 22 4 22 29] (* List<T> *)
  let%span sbinary_search0 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search1 = "binary_search.rs" 23 8 26 9
  
  use prelude.prelude.Int
  
  type t_T'0
  
  type t_List'0  =
    | C_Cons'0 t_T'0 (t_List'0)
    | C_Nil'0
  
  constant self  : t_List'0
  
  function len_logic'0 [#"binary_search.rs" 22 4 22 29] (self : t_List'0) : int
  
  goal vc_len_logic'0 : match self with
    | C_Cons'0 _ ls -> ([%#sbinary_search0] len_logic'0 ls >= 0)  -> ([%#sbinary_search0] 1 + len_logic'0 ls >= 0)
    | C_Nil'0 -> [%#sbinary_search0] 0 >= 0
    end
end
module M_binary_search__qyi13868011053250380720__index [#"binary_search.rs" 45 4 45 40] (* List<T> *)
  let%span sbinary_search0 = "binary_search.rs" 51 20 51 26
  let%span sbinary_search1 = "binary_search.rs" 50 20 50 52
  let%span sbinary_search2 = "binary_search.rs" 49 20 49 39
  let%span sbinary_search3 = "binary_search.rs" 53 20 53 21
  let%span sbinary_search4 = "binary_search.rs" 55 22 55 23
  let%span sbinary_search5 = "binary_search.rs" 45 14 45 18
  let%span sbinary_search6 = "binary_search.rs" 43 15 43 37
  let%span sbinary_search7 = "binary_search.rs" 45 38 45 40
  let%span sbinary_search8 = "binary_search.rs" 44 14 44 44
  let%span sbinary_search9 = "binary_search.rs" 31 8 40 9
  let%span sbinary_search10 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search11 = "binary_search.rs" 23 8 26 9
  let%span sinvariant12 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sboxed13 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_List'0  =
    | C_Cons'0 t_T'0 (t_List'0)
    | C_Nil'0
  
  predicate inv'3 (_1 : t_T'0)
  
  predicate inv'2 (_1 : t_List'0)
  
  predicate invariant'2 (self : t_List'0) =
    [%#sboxed13] inv'2 self
  
  predicate inv'4 (_1 : t_List'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_List'0 [inv'4 x] . inv'4 x = invariant'2 x
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_List'0 [inv'2 x] . inv'2 x
  = match x with
    | C_Cons'0 a_0 a_1 -> inv'3 a_0 /\ inv'4 a_1
    | C_Nil'0 -> true
    end
  
  predicate invariant'0 (self : t_List'0) =
    [%#sinvariant12] inv'2 self
  
  predicate inv'0 (_1 : t_List'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_List'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  function get'0 [#"binary_search.rs" 30 4 30 38] (self : t_List'0) (ix : int) : t_Option'0 =
    [%#sbinary_search9] match self with
      | C_Cons'0 t ls -> if ix = 0 then C_Some'0 t else get'0 ls (ix - 1)
      | C_Nil'0 -> C_None'0
      end
  
  function len_logic'0 [#"binary_search.rs" 22 4 22 29] (self : t_List'0) : int =
    [%#sbinary_search11] match self with
      | C_Cons'0 _ ls -> 1 + len_logic'0 ls
      | C_Nil'0 -> 0
      end
  
  axiom len_logic'0_spec : forall self : t_List'0 . [%#sbinary_search10] len_logic'0 self >= 0
  
  let rec v_Cons'0 (input:t_List'0) (ret  (field_0:t_T'0) (field_1:t_List'0))= any
    [ good (field_0:t_T'0) (field_1:t_List'0)-> {C_Cons'0 field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : t_T'0, field_1 : t_List'0 [C_Cons'0 field_0 field_1 : t_List'0] . C_Cons'0 field_0 field_1
      <> input}
      (! {false}
      any) ]
    
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  predicate invariant'1 (self : t_T'0) =
    [%#sinvariant12] inv'3 self
  
  predicate inv'1 (_1 : t_T'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_T'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  meta "compute_max_steps" 1000000
  
  let rec index'0 (self:t_List'0) (ix:usize) (return'  (ret:t_T'0))= {[@expl:index 'self' type invariant] [%#sbinary_search5] inv'0 self}
    {[@expl:index requires] [%#sbinary_search6] UIntSize.to_int ix < len_logic'0 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &orig_ix <- ix ] s1 | s1 =  [ &l <- self ] s2 | s2 = bb1 ] 
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant #0] [%#sbinary_search2] UIntSize.to_int ix < len_logic'0 l}
        {[@expl:loop invariant #1] [%#sbinary_search1] get'0 self (UIntSize.to_int orig_ix)
        = get'0 l (UIntSize.to_int ix)}
        {[@expl:loop invariant #2] [%#sbinary_search0] inv'0 l}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = any [ br0 (x0:t_T'0) (x1:t_List'0)-> {l = C_Cons'0 x0 x1} (! bb3) | br1 -> {l = C_Nil'0 } (! bb7) ] 
        | bb3 = bb4
        | bb4 = s0
          [ s0 = v_Cons'0 {l} (fun (r0'0:t_T'0) (r1'0:t_List'0) ->  [ &t <- r0'0 ] s1)
          | s1 = v_Cons'0 {l} (fun (r0'1:t_T'0) (r1'1:t_List'0) ->  [ &ls <- r1'1 ] s2)
          | s2 = UIntSize.gt {ix} {[%#sbinary_search3] (0 : usize)} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s3)
          | s3 = any [ br0 -> {_16 = false} (! bb6) | br1 -> {_16} (! bb5) ]  ]
          
        | bb5 = s0
          [ s0 =  [ &_19 <- ls ] s1
          | s1 =  [ &l <- _19 ] s2
          | s2 = UIntSize.sub {ix} {[%#sbinary_search4] (1 : usize)} (fun (_ret':usize) ->  [ &ix <- _ret' ] s3)
          | s3 = bb1 ]
           ]
         ]
      
    | bb7 = {false} any
    | bb6 = s0 [ s0 =  [ &_0 <- t ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : t_T'0 = any_l ()
    | & self : t_List'0 = self
    | & ix : usize = ix
    | & orig_ix : usize = any_l ()
    | & l : t_List'0 = any_l ()
    | & t : t_T'0 = any_l ()
    | & ls : t_List'0 = any_l ()
    | & _16 : bool = any_l ()
    | & _19 : t_List'0 = any_l () ]
    
    [ return' (result:t_T'0)-> {[@expl:index result type invariant] [%#sbinary_search7] inv'1 result}
      {[@expl:index ensures] [%#sbinary_search8] C_Some'0 result = get'0 self (UIntSize.to_int ix)}
      (! return' {result}) ]
    
end
module M_binary_search__qyi13868011053250380720__len [#"binary_search.rs" 67 4 67 26] (* List<T> *)
  let%span sbinary_search0 = "binary_search.rs" 68 29 68 30
  let%span sbinary_search1 = "binary_search.rs" 71 20 71 26
  let%span sbinary_search2 = "binary_search.rs" 70 20 70 60
  let%span sbinary_search3 = "binary_search.rs" 73 19 73 20
  let%span sbinary_search4 = "binary_search.rs" 67 12 67 16
  let%span sbinary_search5 = "binary_search.rs" 64 15 64 44
  let%span sbinary_search6 = "binary_search.rs" 65 14 65 30
  let%span sbinary_search7 = "binary_search.rs" 66 14 66 41
  let%span sbinary_search8 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search9 = "binary_search.rs" 23 8 26 9
  let%span sinvariant10 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sboxed11 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_List'0  =
    | C_Cons'0 t_T'0 (t_List'0)
    | C_Nil'0
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate inv'1 (_1 : t_List'0)
  
  predicate invariant'1 (self : t_List'0) =
    [%#sboxed11] inv'1 self
  
  predicate inv'3 (_1 : t_List'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_List'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_List'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Cons'0 a_0 a_1 -> inv'2 a_0 /\ inv'3 a_1
    | C_Nil'0 -> true
    end
  
  predicate invariant'0 (self : t_List'0) =
    [%#sinvariant10] inv'1 self
  
  predicate inv'0 (_1 : t_List'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_List'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  function len_logic'0 [#"binary_search.rs" 22 4 22 29] (self : t_List'0) : int =
    [%#sbinary_search9] match self with
      | C_Cons'0 _ ls -> 1 + len_logic'0 ls
      | C_Nil'0 -> 0
      end
  
  axiom len_logic'0_spec : forall self : t_List'0 . [%#sbinary_search8] len_logic'0 self >= 0
  
  let rec v_Cons'0 (input:t_List'0) (ret  (field_0:t_T'0) (field_1:t_List'0))= any
    [ good (field_0:t_T'0) (field_1:t_List'0)-> {C_Cons'0 field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : t_T'0, field_1 : t_List'0 [C_Cons'0 field_0 field_1 : t_List'0] . C_Cons'0 field_0 field_1
      <> input}
      (! {false}
      any) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec len'0 (self:t_List'0) (return'  (ret:usize))= {[@expl:len 'self' type invariant] [%#sbinary_search4] inv'0 self}
    {[@expl:len requires] [%#sbinary_search5] len_logic'0 self <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &len <- [%#sbinary_search0] (0 : usize) ] s1 | s1 =  [ &l <- self ] s2 | s2 = bb1 ] 
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant #0] [%#sbinary_search2] UIntSize.to_int len + len_logic'0 l = len_logic'0 self}
        {[@expl:loop invariant #1] [%#sbinary_search1] inv'0 l}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = any [ br0 (x0:t_T'0) (x1:t_List'0)-> {l = C_Cons'0 x0 x1} (! bb3) | br1 -> {l = C_Nil'0 } (! bb5) ] 
        | bb3 = bb4
        | bb4 = s0
          [ s0 = v_Cons'0 {l} (fun (r0'0:t_T'0) (r1'0:t_List'0) ->  [ &ls <- r1'0 ] s1)
          | s1 = UIntSize.add {len} {[%#sbinary_search3] (1 : usize)} (fun (_ret':usize) ->  [ &len <- _ret' ] s2)
          | s2 =  [ &l <- ls ] s3
          | s3 = bb1 ]
           ]
         ]
      
    | bb5 = s0 [ s0 =  [ &_0 <- len ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l ()
    | & self : t_List'0 = self
    | & len : usize = any_l ()
    | & l : t_List'0 = any_l ()
    | & ls : t_List'0 = any_l () ]
    
    [ return' (result:usize)-> {[@expl:len ensures #0] [%#sbinary_search6] result >= (0 : usize)}
      {[@expl:len ensures #1] [%#sbinary_search7] UIntSize.to_int result = len_logic'0 self}
      (! return' {result}) ]
    
end
module M_binary_search__binary_search [#"binary_search.rs" 111 0 111 72]
  let%span sbinary_search0 = "binary_search.rs" 112 20 112 21
  let%span sbinary_search1 = "binary_search.rs" 113 19 113 20
  let%span sbinary_search2 = "binary_search.rs" 116 19 116 20
  let%span sbinary_search3 = "binary_search.rs" 120 16 120 117
  let%span sbinary_search4 = "binary_search.rs" 119 16 119 82
  let%span sbinary_search5 = "binary_search.rs" 118 16 118 63
  let%span sbinary_search6 = "binary_search.rs" 121 17 121 18
  let%span sbinary_search7 = "binary_search.rs" 122 26 122 27
  let%span sbinary_search8 = "binary_search.rs" 122 19 122 27
  let%span sbinary_search9 = "binary_search.rs" 133 19 133 20
  let%span sbinary_search10 = "binary_search.rs" 104 11 104 39
  let%span sbinary_search11 = "binary_search.rs" 105 11 105 26
  let%span sbinary_search12 = "binary_search.rs" 106 10 106 71
  let%span sbinary_search13 = "binary_search.rs" 107 10 108 76
  let%span sbinary_search14 = "binary_search.rs" 109 10 110 88
  let%span sbinary_search15 = "binary_search.rs" 67 12 67 16
  let%span sbinary_search16 = "binary_search.rs" 64 15 64 44
  let%span sbinary_search17 = "binary_search.rs" 65 14 65 30
  let%span sbinary_search18 = "binary_search.rs" 66 14 66 41
  let%span sbinary_search19 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search20 = "binary_search.rs" 23 8 26 9
  let%span sbinary_search21 = "binary_search.rs" 81 8 84 9
  let%span sbinary_search22 = "binary_search.rs" 45 14 45 18
  let%span sbinary_search23 = "binary_search.rs" 43 15 43 37
  let%span sbinary_search24 = "binary_search.rs" 45 38 45 40
  let%span sbinary_search25 = "binary_search.rs" 44 14 44 44
  let%span sbinary_search26 = "binary_search.rs" 93 16 98 17
  let%span sbinary_search27 = "binary_search.rs" 31 8 40 9
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  type t_List'0  =
    | C_Cons'0 uint32 (t_List'0)
    | C_Nil'0
  
  predicate inv'0 (_1 : t_List'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_List'0 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Int
  
  function len_logic'0 [#"binary_search.rs" 22 4 22 29] (self : t_List'0) : int =
    [%#sbinary_search20] match self with
      | C_Cons'0 _ ls -> 1 + len_logic'0 ls
      | C_Nil'0 -> 0
      end
  
  axiom len_logic'0_spec : forall self : t_List'0 . [%#sbinary_search19] len_logic'0 self >= 0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  let rec len'0 (self:t_List'0) (return'  (ret:usize))= {[@expl:len 'self' type invariant] [%#sbinary_search15] inv'0 self}
    {[@expl:len requires] [%#sbinary_search16] len_logic'0 self <= 1000000}
    any
    [ return' (result:usize)-> {[%#sbinary_search17] result >= (0 : usize)}
      {[%#sbinary_search18] UIntSize.to_int result = len_logic'0 self}
      (! return' {result}) ]
    
  
  type t_Result'0  =
    | C_Ok'0 usize
    | C_Err'0 usize
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 uint32
  
  function get'0 [#"binary_search.rs" 30 4 30 38] (self : t_List'0) (ix : int) : t_Option'0 =
    [%#sbinary_search27] match self with
      | C_Cons'0 t ls -> if ix = 0 then C_Some'0 t else get'0 ls (ix - 1)
      | C_Nil'0 -> C_None'0
      end
  
  function get_default'0 [#"binary_search.rs" 80 4 80 46] (self : t_List'0) (ix : int) (def : uint32) : uint32 =
    [%#sbinary_search21] match get'0 self ix with
      | C_Some'0 v -> v
      | C_None'0 -> def
      end
  
  predicate inv'1 (_1 : uint32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : uint32 [inv'1 x] . inv'1 x = true
  
  let rec index'0 (self:t_List'0) (ix:usize) (return'  (ret:uint32))= {[@expl:index 'self' type invariant] [%#sbinary_search22] inv'0 self}
    {[@expl:index requires] [%#sbinary_search23] UIntSize.to_int ix < len_logic'0 self}
    any
    [ return' (result:uint32)-> {[%#sbinary_search24] inv'1 result}
      {[%#sbinary_search25] C_Some'0 result = get'0 self (UIntSize.to_int ix)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate is_sorted'0 [#"binary_search.rs" 90 4 90 30] (self : t_List'0) =
    [%#sbinary_search26] forall x1 : int, x2 : int . x1 <= x2
     -> match (get'0 self x1, get'0 self x2) with
      | (C_Some'0 v1, C_Some'0 v2) -> v1 <= v2
      | (C_None'0, C_None'0) -> true
      | _ -> false
      end
  
  meta "compute_max_steps" 1000000
  
  let rec binary_search'0 (arr:t_List'0) (elem:uint32) (return'  (ret:t_Result'0))= {[@expl:binary_search requires #0] [%#sbinary_search10] len_logic'0 arr
    <= 1000000}
    {[@expl:binary_search requires #1] [%#sbinary_search11] is_sorted'0 arr}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UIntSize.eq {_10} {[%#sbinary_search0] (0 : usize)} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s1)
      | s1 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ]  ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- C_Err'0 ([%#sbinary_search1] (0 : usize)) ] s1 | s1 = bb21 ] 
    | bb3 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &size <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &base <- [%#sbinary_search2] (0 : usize) ] s1 | s1 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant #0] [%#sbinary_search5] 0 < UIntSize.to_int size
        /\ UIntSize.to_int size + UIntSize.to_int base <= len_logic'0 arr}
        {[@expl:loop invariant #1] [%#sbinary_search4] forall i : usize . i < base
         -> get_default'0 arr (UIntSize.to_int i) (0 : uint32) <= elem}
        {[@expl:loop invariant #2] [%#sbinary_search3] forall i : usize . UIntSize.to_int base + UIntSize.to_int size
        < UIntSize.to_int i
        /\ UIntSize.to_int i < len_logic'0 arr  -> elem < get_default'0 arr (UIntSize.to_int i) (0 : uint32)}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = UIntSize.gt {size} {[%#sbinary_search6] (1 : usize)} (fun (_ret':bool) ->  [ &_22 <- _ret' ] s1)
          | s1 = any [ br0 -> {_22 = false} (! bb13) | br1 -> {_22} (! bb7) ]  ]
          
        | bb7 = s0
          [ s0 = UIntSize.eq {[%#sbinary_search7] (2 : usize)} {[%#sbinary_search8] (0 : usize)}
              (fun (_ret':bool) ->  [ &_26 <- _ret' ] s1)
          | s1 = {[@expl:division by zero] [%#sbinary_search8] not _26} s2
          | s2 = bb8 ]
          
        | bb8 = s0
          [ s0 = UIntSize.div {size} {[%#sbinary_search7] (2 : usize)} (fun (_ret':usize) ->  [ &half <- _ret' ] s1)
          | s1 = UIntSize.add {base} {half} (fun (_ret':usize) ->  [ &mid <- _ret' ] s2)
          | s2 = index'0 {arr} {mid} (fun (_ret':uint32) ->  [ &_33 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = UInt32.gt {_33} {elem} (fun (_ret':bool) ->  [ &_31 <- _ret' ] s1)
          | s1 = any [ br0 -> {_31 = false} (! bb11) | br1 -> {_31} (! bb10) ]  ]
          
        | bb10 = s0 [ s0 =  [ &_30 <- base ] s1 | s1 = bb12 ] 
        | bb11 = s0 [ s0 =  [ &_30 <- mid ] s1 | s1 = bb12 ] 
        | bb12 = s0
          [ s0 =  [ &base <- _30 ] s1
          | s1 = UIntSize.sub {size} {half} (fun (_ret':usize) ->  [ &size <- _ret' ] s2)
          | s2 = bb5 ]
           ]
         ]
      
    | bb13 = s0 [ s0 = index'0 {arr} {base} (fun (_ret':uint32) ->  [ &_40 <- _ret' ] s1) | s1 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &cmp <- _40 ] s1
      | s1 = UInt32.eq {cmp} {elem} (fun (_ret':bool) ->  [ &_43 <- _ret' ] s2)
      | s2 = any [ br0 -> {_43 = false} (! bb16) | br1 -> {_43} (! bb15) ]  ]
      
    | bb15 = s0 [ s0 =  [ &_0 <- C_Ok'0 base ] s1 | s1 = bb20 ] 
    | bb16 = s0
      [ s0 = UInt32.lt {cmp} {elem} (fun (_ret':bool) ->  [ &_47 <- _ret' ] s1)
      | s1 = any [ br0 -> {_47 = false} (! bb18) | br1 -> {_47} (! bb17) ]  ]
      
    | bb17 = s0
      [ s0 = UIntSize.add {base} {[%#sbinary_search9] (1 : usize)} (fun (_ret':usize) ->  [ &_50 <- _ret' ] s1)
      | s1 =  [ &_0 <- C_Err'0 _50 ] s2
      | s2 = bb19 ]
      
    | bb18 = s0 [ s0 =  [ &_0 <- C_Err'0 base ] s1 | s1 = bb19 ] 
    | bb19 = bb20
    | bb20 = bb21
    | bb21 = return' {_0} ]
    )
    [ & _0 : t_Result'0 = any_l ()
    | & arr : t_List'0 = arr
    | & elem : uint32 = elem
    | & _9 : bool = any_l ()
    | & _10 : usize = any_l ()
    | & size : usize = any_l ()
    | & base : usize = any_l ()
    | & _22 : bool = any_l ()
    | & half : usize = any_l ()
    | & _26 : bool = any_l ()
    | & mid : usize = any_l ()
    | & _30 : usize = any_l ()
    | & _31 : bool = any_l ()
    | & _33 : uint32 = any_l ()
    | & cmp : uint32 = any_l ()
    | & _40 : uint32 = any_l ()
    | & _43 : bool = any_l ()
    | & _47 : bool = any_l ()
    | & _50 : usize = any_l () ]
    
    [ return' (result:t_Result'0)-> {[@expl:binary_search ensures #0] [%#sbinary_search12] forall x : usize . result
      = C_Ok'0 x  -> get'0 arr (UIntSize.to_int x) = C_Some'0 elem}
      {[@expl:binary_search ensures #1] [%#sbinary_search13] forall x : usize . result = C_Err'0 x
       -> (forall i : usize . 0 <= UIntSize.to_int i /\ UIntSize.to_int i < UIntSize.to_int x
       -> get_default'0 arr (UIntSize.to_int i) (0 : uint32) <= elem)}
      {[@expl:binary_search ensures #2] [%#sbinary_search14] forall x : usize . result = C_Err'0 x
       -> (forall i : usize . UIntSize.to_int x < UIntSize.to_int i /\ UIntSize.to_int i < len_logic'0 arr
       -> elem < get_default'0 arr (UIntSize.to_int i) (0 : uint32))}
      (! return' {result}) ]
    
end
