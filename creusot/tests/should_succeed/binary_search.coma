module T_binary_search__List [#"binary_search.rs" 13 0 13 16]
  type t_List 't =
    | C_Cons 't (t_List 't)
    | C_Nil
  
  let rec v_Cons < 't > (input:t_List 't) (ret  (field_0:'t) (field_1:t_List 't))= any
    [ good (field_0:'t) (field_1:t_List 't)-> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : 't, field_1 : t_List 't [C_Cons field_0 field_1 : t_List 't] . C_Cons field_0 field_1
      <> input}
      (! {false}
      any) ]
    
  
  let rec v_Nil < 't > (input:t_List 't) (ret  )= any
    [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} (! {false} any) ]
    
end
module M_binary_search__qyi13868011053250380720__len_logic [#"binary_search.rs" 22 4 22 29] (* List<T> *)
  type t
  
  let%span sbinary_search0 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search1 = "binary_search.rs" 23 8 26 9
  
  use T_binary_search__List as List'0
  
  use prelude.prelude.Int
  
  constant self  : List'0.t_List t
  
  function len_logic [#"binary_search.rs" 22 4 22 29] (self : List'0.t_List t) : int
  
  goal vc_len_logic : match self with
    | List'0.C_Cons _ ls -> ([%#sbinary_search0] len_logic ls >= 0)  -> ([%#sbinary_search0] 1 + len_logic ls >= 0)
    | List'0.C_Nil -> [%#sbinary_search0] 0 >= 0
    end
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_binary_search__qyi13868011053250380720__index [#"binary_search.rs" 45 4 45 40] (* List<T> *)
  type t
  
  let%span sbinary_search0 = "binary_search.rs" 49 20 49 39
  let%span sbinary_search1 = "binary_search.rs" 50 20 50 52
  let%span sbinary_search2 = "binary_search.rs" 51 20 51 26
  let%span sbinary_search3 = "binary_search.rs" 53 20 53 21
  let%span sbinary_search4 = "binary_search.rs" 55 22 55 23
  let%span sbinary_search5 = "binary_search.rs" 43 15 43 37
  let%span sbinary_search6 = "binary_search.rs" 45 14 45 18
  let%span sbinary_search7 = "binary_search.rs" 44 14 44 44
  let%span sbinary_search8 = "binary_search.rs" 45 38 45 40
  let%span sbinary_search9 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search10 = "binary_search.rs" 23 8 26 9
  let%span sbinary_search11 = "binary_search.rs" 31 8 40 9
  let%span sinvariant12 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sboxed13 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use T_binary_search__List as List'0
  
  predicate inv'2 (_1 : List'0.t_List t)
  
  predicate invariant'2 (self : List'0.t_List t) =
    [%#sboxed13] inv'2 self
  
  predicate inv'4 (_1 : List'0.t_List t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : List'0.t_List t [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate inv'3 (_1 : t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : List'0.t_List t [inv'2 x] . inv'2 x
  = match x with
    | List'0.C_Cons a_0 a_1 -> inv'3 a_0 /\ inv'4 a_1
    | List'0.C_Nil -> true
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : t) =
    [%#sinvariant12] inv'3 self
  
  predicate inv'1 (_1 : t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : List'0.t_List t) =
    [%#sinvariant12] inv'2 self
  
  predicate inv'0 (_1 : List'0.t_List t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : List'0.t_List t [inv'0 x] . inv'0 x = invariant'0 x
  
  use T_core__option__Option as Option'0
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  function get'0 [#"binary_search.rs" 30 4 30 38] (self : List'0.t_List t) (ix : int) : Option'0.t_Option t =
    [%#sbinary_search11] match self with
      | List'0.C_Cons t ls -> if ix = 0 then Option'0.C_Some t else get'0 ls (ix - 1)
      | List'0.C_Nil -> Option'0.C_None
      end
  
  function len_logic'0 [#"binary_search.rs" 22 4 22 29] (self : List'0.t_List t) : int =
    [%#sbinary_search10] match self with
      | List'0.C_Cons _ ls -> 1 + len_logic'0 ls
      | List'0.C_Nil -> 0
      end
  
  axiom len_logic'0_spec : forall self : List'0.t_List t . [%#sbinary_search9] len_logic'0 self >= 0
  
  use prelude.prelude.UIntSize
  
  meta "compute_max_steps" 1000000
  
  let rec index (self:List'0.t_List t) (ix:usize) (return'  (ret:t))= {[%#sbinary_search6] inv'0 self}
    {[%#sbinary_search5] UIntSize.to_int ix < len_logic'0 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &orig_ix <- ix ] s1 | s1 =  [ &l <- self ] s2 | s2 = bb1 ] 
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant] [%#sbinary_search2] inv'0 l}
        {[@expl:loop invariant] [%#sbinary_search1] get'0 self (UIntSize.to_int orig_ix) = get'0 l (UIntSize.to_int ix)}
        {[@expl:loop invariant] [%#sbinary_search0] UIntSize.to_int ix < len_logic'0 l}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = any
          [ br0 (a:t) (b:List'0.t_List t)-> {l = List'0.C_Cons a b} (! bb3) | br1 -> {l = List'0.C_Nil } (! bb7) ]
          
        | bb3 = bb4
        | bb4 = s0
          [ s0 = List'0.v_Cons <t> {l} (fun (r0'0:t) (r1'0:List'0.t_List t) ->  [ &t <- r0'0 ] s1)
          | s1 = List'0.v_Cons <t> {l} (fun (r0'1:t) (r1'1:List'0.t_List t) ->  [ &ls <- r1'1 ] s2)
          | s2 = UIntSize.gt {ix} {[%#sbinary_search3] (0 : usize)} (fun (_ret':bool) ->  [ &_15 <- _ret' ] s3)
          | s3 = any [ br0 -> {_15 = false} (! bb6) | br1 -> {_15} (! bb5) ]  ]
          
        | bb5 = s0
          [ s0 =  [ &_18 <- ls ] s1
          | s1 =  [ &l <- _18 ] s2
          | s2 = UIntSize.sub {ix} {[%#sbinary_search4] (1 : usize)} (fun (_ret':usize) ->  [ &ix <- _ret' ] s3)
          | s3 = bb1 ]
           ]
         ]
      
    | bb7 = {false} any
    | bb6 = s0 [ s0 =  [ &_0 <- t ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : t = any_l ()
    | & self : List'0.t_List t = self
    | & ix : usize = ix
    | & orig_ix : usize = any_l ()
    | & l : List'0.t_List t = any_l ()
    | & t : t = any_l ()
    | & ls : List'0.t_List t = any_l ()
    | & _15 : bool = any_l ()
    | & _18 : List'0.t_List t = any_l () ]
    
    [ return' (result:t)-> {[@expl:postcondition] [%#sbinary_search8] inv'1 result}
      {[@expl:postcondition] [%#sbinary_search7] Option'0.C_Some result = get'0 self (UIntSize.to_int ix)}
      (! return' {result}) ]
    
end
module M_binary_search__qyi13868011053250380720__len [#"binary_search.rs" 67 4 67 26] (* List<T> *)
  type t
  
  let%span sbinary_search0 = "binary_search.rs" 68 29 68 30
  let%span sbinary_search1 = "binary_search.rs" 70 20 70 60
  let%span sbinary_search2 = "binary_search.rs" 71 20 71 26
  let%span sbinary_search3 = "binary_search.rs" 73 19 73 20
  let%span sbinary_search4 = "binary_search.rs" 64 15 64 44
  let%span sbinary_search5 = "binary_search.rs" 67 12 67 16
  let%span sbinary_search6 = "binary_search.rs" 65 14 65 30
  let%span sbinary_search7 = "binary_search.rs" 66 14 66 41
  let%span sbinary_search8 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search9 = "binary_search.rs" 23 8 26 9
  let%span sinvariant10 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sboxed11 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use T_binary_search__List as List'0
  
  predicate inv'1 (_1 : List'0.t_List t)
  
  predicate invariant'1 (self : List'0.t_List t) =
    [%#sboxed11] inv'1 self
  
  predicate inv'3 (_1 : List'0.t_List t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : List'0.t_List t [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate inv'2 (_1 : t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : List'0.t_List t [inv'1 x] . inv'1 x
  = match x with
    | List'0.C_Cons a_0 a_1 -> inv'2 a_0 /\ inv'3 a_1
    | List'0.C_Nil -> true
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : List'0.t_List t) =
    [%#sinvariant10] inv'1 self
  
  predicate inv'0 (_1 : List'0.t_List t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : List'0.t_List t [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  function len_logic'0 [#"binary_search.rs" 22 4 22 29] (self : List'0.t_List t) : int =
    [%#sbinary_search9] match self with
      | List'0.C_Cons _ ls -> 1 + len_logic'0 ls
      | List'0.C_Nil -> 0
      end
  
  axiom len_logic'0_spec : forall self : List'0.t_List t . [%#sbinary_search8] len_logic'0 self >= 0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  meta "compute_max_steps" 1000000
  
  let rec len (self:List'0.t_List t) (return'  (ret:usize))= {[%#sbinary_search5] inv'0 self}
    {[%#sbinary_search4] len_logic'0 self <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &len <- [%#sbinary_search0] (0 : usize) ] s1 | s1 =  [ &l <- self ] s2 | s2 = bb1 ] 
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant] [%#sbinary_search2] inv'0 l}
        {[@expl:loop invariant] [%#sbinary_search1] UIntSize.to_int len + len_logic'0 l = len_logic'0 self}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = any
          [ br0 (a:t) (b:List'0.t_List t)-> {l = List'0.C_Cons a b} (! bb3) | br1 -> {l = List'0.C_Nil } (! bb5) ]
          
        | bb3 = bb4
        | bb4 = s0
          [ s0 = List'0.v_Cons <t> {l} (fun (r0'0:t) (r1'0:List'0.t_List t) ->  [ &ls <- r1'0 ] s1)
          | s1 = UIntSize.add {len} {[%#sbinary_search3] (1 : usize)} (fun (_ret':usize) ->  [ &len <- _ret' ] s2)
          | s2 =  [ &l <- ls ] s3
          | s3 = bb1 ]
           ]
         ]
      
    | bb5 = s0 [ s0 =  [ &_0 <- len ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l ()
    | & self : List'0.t_List t = self
    | & len : usize = any_l ()
    | & l : List'0.t_List t = any_l ()
    | & ls : List'0.t_List t = any_l () ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [%#sbinary_search7] UIntSize.to_int result = len_logic'0 self}
      {[@expl:postcondition] [%#sbinary_search6] result >= (0 : usize)}
      (! return' {result}) ]
    
end
module T_core__result__Result
  type t_Result 't 'e =
    | C_Ok 't
    | C_Err 'e
  
  let rec v_Ok < 't > < 'e > (input:t_Result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Ok field_0 : t_Result 't 'e] . C_Ok field_0 <> input} (! {false} any) ]
    
  
  let rec v_Err < 't > < 'e > (input:t_Result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 'e [C_Err field_0 : t_Result 't 'e] . C_Err field_0 <> input} (! {false} any) ]
    
end
module M_binary_search__binary_search [#"binary_search.rs" 111 0 111 72]
  let%span sbinary_search0 = "binary_search.rs" 112 20 112 21
  let%span sbinary_search1 = "binary_search.rs" 113 19 113 20
  let%span sbinary_search2 = "binary_search.rs" 116 19 116 20
  let%span sbinary_search3 = "binary_search.rs" 118 16 118 63
  let%span sbinary_search4 = "binary_search.rs" 118 4 118 65
  let%span sbinary_search5 = "binary_search.rs" 121 17 121 18
  let%span sbinary_search6 = "binary_search.rs" 122 26 122 27
  let%span sbinary_search7 = "binary_search.rs" 122 19 122 27
  let%span sbinary_search8 = "binary_search.rs" 133 19 133 20
  let%span sbinary_search9 = "binary_search.rs" 104 11 104 39
  let%span sbinary_search10 = "binary_search.rs" 105 11 105 26
  let%span sbinary_search11 = "binary_search.rs" 106 0 106 73
  let%span sbinary_search12 = "binary_search.rs" 107 0 108 78
  let%span sbinary_search13 = "binary_search.rs" 109 0 110 90
  let%span sbinary_search14 = "binary_search.rs" 64 15 64 44
  let%span sbinary_search15 = "binary_search.rs" 67 12 67 16
  let%span sbinary_search16 = "binary_search.rs" 65 14 65 30
  let%span sbinary_search17 = "binary_search.rs" 66 14 66 41
  let%span sbinary_search18 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search19 = "binary_search.rs" 23 8 26 9
  let%span sbinary_search20 = "binary_search.rs" 81 8 84 9
  let%span sbinary_search21 = "binary_search.rs" 43 15 43 37
  let%span sbinary_search22 = "binary_search.rs" 45 14 45 18
  let%span sbinary_search23 = "binary_search.rs" 44 14 44 44
  let%span sbinary_search24 = "binary_search.rs" 45 38 45 40
  let%span sbinary_search25 = "binary_search.rs" 92 12 99 13
  let%span sbinary_search26 = "binary_search.rs" 31 8 40 9
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate inv'1 (_1 : uint32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : uint32 [inv'1 x] . inv'1 x = true
  
  use T_binary_search__List as List'0
  
  predicate inv'0 (_1 : List'0.t_List uint32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : List'0.t_List uint32 [inv'0 x] . inv'0 x = true
  
  use T_core__option__Option as Option'0
  
  function get'0 [#"binary_search.rs" 30 4 30 38] (self : List'0.t_List uint32) (ix : int) : Option'0.t_Option uint32 =
    [%#sbinary_search26] match self with
      | List'0.C_Cons t ls -> if ix = 0 then Option'0.C_Some t else get'0 ls (ix - 1)
      | List'0.C_Nil -> Option'0.C_None
      end
  
  predicate is_sorted'0 [#"binary_search.rs" 90 4 90 30] (self : List'0.t_List uint32) =
    [%#sbinary_search25] forall x1 : int, x2 : int . x1 <= x2
     -> match (get'0 self x1, get'0 self x2) with
      | (Option'0.C_Some v1, Option'0.C_Some v2) -> v1 <= v2
      | (Option'0.C_None, Option'0.C_None) -> true
      | _ -> false
      end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  function len_logic'0 [#"binary_search.rs" 22 4 22 29] (self : List'0.t_List uint32) : int =
    [%#sbinary_search19] match self with
      | List'0.C_Cons _ ls -> 1 + len_logic'0 ls
      | List'0.C_Nil -> 0
      end
  
  axiom len_logic'0_spec : forall self : List'0.t_List uint32 . [%#sbinary_search18] len_logic'0 self >= 0
  
  use prelude.prelude.UIntSize
  
  let rec index'0 (self:List'0.t_List uint32) (ix:usize) (return'  (ret:uint32))= {[@expl:precondition] [%#sbinary_search22] inv'0 self}
    {[@expl:precondition] [%#sbinary_search21] UIntSize.to_int ix < len_logic'0 self}
    any
    [ return' (result:uint32)-> {[%#sbinary_search24] inv'1 result}
      {[%#sbinary_search23] Option'0.C_Some result = get'0 self (UIntSize.to_int ix)}
      (! return' {result}) ]
    
  
  function get_default'0 [#"binary_search.rs" 80 4 80 46] (self : List'0.t_List uint32) (ix : int) (def : uint32) : uint32
    
   =
    [%#sbinary_search20] match get'0 self ix with
      | Option'0.C_Some v -> v
      | Option'0.C_None -> def
      end
  
  use T_core__result__Result as Result'0
  
  let rec len'0 (self:List'0.t_List uint32) (return'  (ret:usize))= {[@expl:precondition] [%#sbinary_search15] inv'0 self}
    {[@expl:precondition] [%#sbinary_search14] len_logic'0 self <= 1000000}
    any
    [ return' (result:usize)-> {[%#sbinary_search17] UIntSize.to_int result = len_logic'0 self}
      {[%#sbinary_search16] result >= (0 : usize)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec binary_search (arr:List'0.t_List uint32) (elem:uint32) (return'  (ret:Result'0.t_Result usize usize))= {[%#sbinary_search10] is_sorted'0 arr}
    {[%#sbinary_search9] len_logic'0 arr <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UIntSize.eq {_10} {[%#sbinary_search0] (0 : usize)} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s1)
      | s1 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ]  ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- Result'0.C_Err ([%#sbinary_search1] (0 : usize)) ] s1 | s1 = bb21 ] 
    | bb3 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &size <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &base <- [%#sbinary_search2] (0 : usize) ] s1 | s1 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [%#sbinary_search4] forall i : usize . UIntSize.to_int base + UIntSize.to_int size
        < UIntSize.to_int i
        /\ UIntSize.to_int i < len_logic'0 arr  -> elem < get_default'0 arr (UIntSize.to_int i) (0 : uint32)}
        {[@expl:loop invariant] [%#sbinary_search4] forall i : usize . i < base
         -> get_default'0 arr (UIntSize.to_int i) (0 : uint32) <= elem}
        {[@expl:loop invariant] [%#sbinary_search3] 0 < UIntSize.to_int size
        /\ UIntSize.to_int size + UIntSize.to_int base <= len_logic'0 arr}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = UIntSize.gt {size} {[%#sbinary_search5] (1 : usize)} (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
          | s1 = any [ br0 -> {_21 = false} (! bb13) | br1 -> {_21} (! bb7) ]  ]
          
        | bb7 = s0
          [ s0 = UIntSize.eq {[%#sbinary_search6] (2 : usize)} {[%#sbinary_search7] (0 : usize)}
              (fun (_ret':bool) ->  [ &_25 <- _ret' ] s1)
          | s1 = {[@expl:division by zero] [%#sbinary_search7] not _25} s2
          | s2 = bb8 ]
          
        | bb8 = s0
          [ s0 = UIntSize.div {size} {[%#sbinary_search6] (2 : usize)} (fun (_ret':usize) ->  [ &half <- _ret' ] s1)
          | s1 = UIntSize.add {base} {half} (fun (_ret':usize) ->  [ &mid <- _ret' ] s2)
          | s2 = index'0 {arr} {mid} (fun (_ret':uint32) ->  [ &_32 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = UInt32.gt {_32} {elem} (fun (_ret':bool) ->  [ &_30 <- _ret' ] s1)
          | s1 = any [ br0 -> {_30 = false} (! bb11) | br1 -> {_30} (! bb10) ]  ]
          
        | bb10 = s0 [ s0 =  [ &_29 <- base ] s1 | s1 = bb12 ] 
        | bb11 = s0 [ s0 =  [ &_29 <- mid ] s1 | s1 = bb12 ] 
        | bb12 = s0
          [ s0 =  [ &base <- _29 ] s1
          | s1 = UIntSize.sub {size} {half} (fun (_ret':usize) ->  [ &size <- _ret' ] s2)
          | s2 = bb5 ]
           ]
         ]
      
    | bb13 = s0 [ s0 = index'0 {arr} {base} (fun (_ret':uint32) ->  [ &_41 <- _ret' ] s1) | s1 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &cmp <- _41 ] s1
      | s1 = UInt32.eq {cmp} {elem} (fun (_ret':bool) ->  [ &_44 <- _ret' ] s2)
      | s2 = any [ br0 -> {_44 = false} (! bb16) | br1 -> {_44} (! bb15) ]  ]
      
    | bb15 = s0 [ s0 =  [ &_0 <- Result'0.C_Ok base ] s1 | s1 = bb20 ] 
    | bb16 = s0
      [ s0 = UInt32.lt {cmp} {elem} (fun (_ret':bool) ->  [ &_48 <- _ret' ] s1)
      | s1 = any [ br0 -> {_48 = false} (! bb18) | br1 -> {_48} (! bb17) ]  ]
      
    | bb17 = s0
      [ s0 = UIntSize.add {base} {[%#sbinary_search8] (1 : usize)} (fun (_ret':usize) ->  [ &_51 <- _ret' ] s1)
      | s1 =  [ &_0 <- Result'0.C_Err _51 ] s2
      | s2 = bb19 ]
      
    | bb18 = s0 [ s0 =  [ &_0 <- Result'0.C_Err base ] s1 | s1 = bb19 ] 
    | bb19 = bb20
    | bb20 = bb21
    | bb21 = return' {_0} ]
    )
    [ & _0 : Result'0.t_Result usize usize = any_l ()
    | & arr : List'0.t_List uint32 = arr
    | & elem : uint32 = elem
    | & _9 : bool = any_l ()
    | & _10 : usize = any_l ()
    | & size : usize = any_l ()
    | & base : usize = any_l ()
    | & _21 : bool = any_l ()
    | & half : usize = any_l ()
    | & _25 : bool = any_l ()
    | & mid : usize = any_l ()
    | & _29 : usize = any_l ()
    | & _30 : bool = any_l ()
    | & _32 : uint32 = any_l ()
    | & cmp : uint32 = any_l ()
    | & _41 : uint32 = any_l ()
    | & _44 : bool = any_l ()
    | & _48 : bool = any_l ()
    | & _51 : usize = any_l () ]
    
    [ return' (result:Result'0.t_Result usize usize)-> {[@expl:postcondition] [%#sbinary_search13] forall x : usize . result
      = Result'0.C_Err x
       -> (forall i : usize . UIntSize.to_int x < UIntSize.to_int i /\ UIntSize.to_int i < len_logic'0 arr
       -> elem < get_default'0 arr (UIntSize.to_int i) (0 : uint32))}
      {[@expl:postcondition] [%#sbinary_search12] forall x : usize . result = Result'0.C_Err x
       -> (forall i : usize . 0 <= UIntSize.to_int i /\ UIntSize.to_int i < UIntSize.to_int x
       -> get_default'0 arr (UIntSize.to_int i) (0 : uint32) <= elem)}
      {[@expl:postcondition] [%#sbinary_search11] forall x : usize . result = Result'0.C_Ok x
       -> get'0 arr (UIntSize.to_int x) = Option'0.C_Some elem}
      (! return' {result}) ]
    
end
