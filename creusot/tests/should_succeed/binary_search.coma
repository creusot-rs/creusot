
module BinarySearch_List_Type
  type t_list 't =
    | C_Cons 't (t_list 't)
    | C_Nil
    
  function any_l (_ : 'b) : 'a
  let rec cons < 't > (input:t_list 't) (ret  (field_0:'t) (field_1:t_list 't))= any
    [ good (field_0:'t) (field_1:t_list 't)-> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:'t) (field_1:t_list 't)-> {C_Cons field_0 field_1 <> input} {false} any ]
    
  let rec nil < 't > (input:t_list 't) (ret  )= any
    [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} {false} any ]
    
end
module BinarySearch_Impl0_LenLogic_Impl
  type t
  use BinarySearch_List_Type as BinarySearch_List_Type
  predicate invariant'0 (self : BinarySearch_List_Type.t_list t)
  let rec invariant'0 (self:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : BinarySearch_List_Type.t_list t)
  let rec inv'0 (_x:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : BinarySearch_List_Type.t_list t . inv'0 x = true
  use prelude.Int
  constant self  : BinarySearch_List_Type.t_list t
  function len_logic [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int
  goal vc_len_logic : ([#"../binary_search.rs" 22 17 22 21] inv'0 self)
   -> match self with
    | BinarySearch_List_Type.C_Cons _ ls -> ([#"../binary_search.rs" 22 17 22 21] inv'0 ls)
    /\ (([#"../binary_search.rs" 21 14 21 25] len_logic ls >= 0)
     -> ([#"../binary_search.rs" 21 14 21 25] 1 + len_logic ls >= 0))
    | BinarySearch_List_Type.C_Nil -> [#"../binary_search.rs" 21 14 21 25] 0 >= 0
    end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module BinarySearch_Impl0_Index
  type t
  use BinarySearch_List_Type as BinarySearch_List_Type
  predicate invariant'3 (self : BinarySearch_List_Type.t_list t)
  let rec invariant'3 (self:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : BinarySearch_List_Type.t_list t)
  let rec inv'3 (_x:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : BinarySearch_List_Type.t_list t . inv'3 x = true
  predicate invariant'2 (self : BinarySearch_List_Type.t_list t)
  let rec invariant'2 (self:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : BinarySearch_List_Type.t_list t)
  let rec inv'2 (_x:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : BinarySearch_List_Type.t_list t . inv'2 x = true
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  predicate invariant'0 (self : BinarySearch_List_Type.t_list t)
  let rec invariant'0 (self:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : BinarySearch_List_Type.t_list t)
  let rec inv'0 (_x:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : BinarySearch_List_Type.t_list t . inv'0 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Intrinsic
  use prelude.Borrow
  predicate resolve'2 (self : BinarySearch_List_Type.t_list t)
  let rec resolve'2 (self:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : t)
  let rec resolve'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.UIntSize
  use prelude.Int
  function get'0 [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list t) (ix : int) : Core_Option_Option_Type.t_option t
    
   =
    [#"../binary_search.rs" 31 8 40 9] match self with
      | BinarySearch_List_Type.C_Cons t ls -> if ix = 0 then Core_Option_Option_Type.C_Some t else get'0 ls (ix - 1)
      | BinarySearch_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      end
  let rec get'0 (self:BinarySearch_List_Type.t_list t) (ix:int) (return'  (ret:Core_Option_Option_Type.t_option t))= any
    [ return' (result:Core_Option_Option_Type.t_option t)-> {result = get'0 self ix} (! return' {result}) ]
    
  function len_logic'0 [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int =
    [#"../binary_search.rs" 23 8 26 9] match self with
      | BinarySearch_List_Type.C_Cons _ ls -> 1 + len_logic'0 ls
      | BinarySearch_List_Type.C_Nil -> 0
      end
  let rec len_logic'0 (self:BinarySearch_List_Type.t_list t) (return'  (ret:int))= {[@expl:precondition] [#"../binary_search.rs" 22 17 22 21] inv'3 self}
    any [ return' (result:int)-> {result = len_logic'0 self} (! return' {result}) ] 
  axiom len_logic'0_spec : forall self : BinarySearch_List_Type.t_list t . ([#"../binary_search.rs" 22 17 22 21] inv'3 self)
   -> ([#"../binary_search.rs" 21 14 21 25] len_logic'0 self >= 0)
  use prelude.UIntSize
  predicate resolve'0 (self : BinarySearch_List_Type.t_list t)
  let rec resolve'0 (self:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec index (self:BinarySearch_List_Type.t_list t) (ix:usize) (return'  (ret:t))= {[#"../binary_search.rs" 45 14 45 18] inv'0 self}
    {[#"../binary_search.rs" 43 15 43 37] UIntSize.to_int ix < len_logic'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &orig_ix <- ix ] s1
      | s1 =  [ &l <- self ] s2
      | s2 = {[@expl:type invariant] inv'0 self} s3
      | s3 = -{resolve'0 self}- s4
      | s4 = bb1 ]
      
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant] [#"../binary_search.rs" 50 20 50 52] get'0 self (UIntSize.to_int orig_ix)
        = get'0 l (UIntSize.to_int ix)}
        {[@expl:loop invariant] [#"../binary_search.rs" 49 20 49 39] UIntSize.to_int ix < len_logic'0 l}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = s0
          [ s0 = any
            [ br0 (a:t) (b:BinarySearch_List_Type.t_list t)-> {l = BinarySearch_List_Type.C_Cons a b} (! bb3)
            | br1 -> {l = BinarySearch_List_Type.C_Nil } (! bb7) ]
             ]
          
        | bb3 = s0 [ s0 = bb4 ] 
        | bb4 = s0
          [ s0 = BinarySearch_List_Type.cons <t> {l}
              (fun (r0'0:t) (r1'0:BinarySearch_List_Type.t_list t) ->  [ &t <- r0'0 ] s1)
          | s1 = BinarySearch_List_Type.cons <t> {l}
              (fun (r0'1:t) (r1'1:BinarySearch_List_Type.t_list t) ->  [ &ls <- r1'1 ] s2)
          | s2 = {[@expl:type invariant] inv'0 l} s3
          | s3 = -{resolve'0 l}- s4
          | s4 = UIntSize.gt {ix} {[#"../binary_search.rs" 52 20 52 21] (0 : usize)}
              (fun (_ret':bool) ->  [ &_14 <- _ret' ] s5)
          | s5 = any [ br0 -> {_14 = false} (! bb6) | br1 -> {_14} (! bb5) ]  ]
          
        | bb5 = s0
          [ s0 = {[@expl:type invariant] inv'1 t} s1
          | s1 = -{resolve'1 t}- s2
          | s2 =  [ &_17 <- ls ] s3
          | s3 = {[@expl:type invariant] inv'2 ls} s4
          | s4 = -{resolve'2 ls}- s5
          | s5 = {[@expl:type invariant] inv'2 _17} s6
          | s6 = -{resolve'2 _17}- s7
          | s7 =  [ &l <- _17 ] s8
          | s8 = UIntSize.sub {ix} {[#"../binary_search.rs" 54 22 54 23] (1 : usize)}
              (fun (_ret':usize) ->  [ &ix <- _ret' ] s9)
          | s9 = bb1 ]
           ]
         ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'0 l} s1
      | s1 = -{resolve'0 l}- s2
      | s2 = {[#"../binary_search.rs" 59 8 59 29] false} any ]
      
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'2 ls} s1
      | s1 = -{resolve'2 ls}- s2
      | s2 =  [ &_0 <- t ] s3
      | s3 = {[@expl:type invariant] inv'1 t} s4
      | s4 = -{resolve'1 t}- s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : t = any_l () : t
    | & self : BinarySearch_List_Type.t_list t = self
    | & ix : usize = ix
    | & orig_ix : usize = any_l () : usize
    | & l : BinarySearch_List_Type.t_list t = any_l () : BinarySearch_List_Type.t_list t
    | & t : t = any_l () : t
    | & ls : BinarySearch_List_Type.t_list t = any_l () : BinarySearch_List_Type.t_list t
    | & _14 : bool = any_l () : bool
    | & _17 : BinarySearch_List_Type.t_list t = any_l () : BinarySearch_List_Type.t_list t ]
    
    [ return' (result:t)-> {[@expl:postcondition] [#"../binary_search.rs" 45 38 45 40] inv'1 result}
      {[@expl:postcondition] [#"../binary_search.rs" 44 14 44 44] Core_Option_Option_Type.C_Some result
      = get'0 self (UIntSize.to_int ix)}
      (! return' {result}) ]
    
end
module BinarySearch_Impl0_Len
  type t
  use BinarySearch_List_Type as BinarySearch_List_Type
  predicate invariant'2 (self : BinarySearch_List_Type.t_list t)
  let rec invariant'2 (self:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : BinarySearch_List_Type.t_list t)
  let rec inv'2 (_x:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : BinarySearch_List_Type.t_list t . inv'2 x = true
  predicate invariant'1 (self : BinarySearch_List_Type.t_list t)
  let rec invariant'1 (self:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : BinarySearch_List_Type.t_list t)
  let rec inv'1 (_x:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : BinarySearch_List_Type.t_list t . inv'1 x = true
  predicate invariant'0 (self : BinarySearch_List_Type.t_list t)
  let rec invariant'0 (self:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : BinarySearch_List_Type.t_list t)
  let rec inv'0 (_x:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : BinarySearch_List_Type.t_list t . inv'0 x = true
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'1 (self : BinarySearch_List_Type.t_list t)
  let rec resolve'1 (self:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Int
  function len_logic'0 [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int =
    [#"../binary_search.rs" 23 8 26 9] match self with
      | BinarySearch_List_Type.C_Cons _ ls -> 1 + len_logic'0 ls
      | BinarySearch_List_Type.C_Nil -> 0
      end
  let rec len_logic'0 (self:BinarySearch_List_Type.t_list t) (return'  (ret:int))= {[@expl:precondition] [#"../binary_search.rs" 22 17 22 21] inv'2 self}
    any [ return' (result:int)-> {result = len_logic'0 self} (! return' {result}) ] 
  axiom len_logic'0_spec : forall self : BinarySearch_List_Type.t_list t . ([#"../binary_search.rs" 22 17 22 21] inv'2 self)
   -> ([#"../binary_search.rs" 21 14 21 25] len_logic'0 self >= 0)
  use prelude.UIntSize
  predicate resolve'0 (self : BinarySearch_List_Type.t_list t)
  let rec resolve'0 (self:BinarySearch_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.UIntSize
  let rec len (self:BinarySearch_List_Type.t_list t) (return'  (ret:usize))= {[#"../binary_search.rs" 66 12 66 16] inv'0 self}
    {[#"../binary_search.rs" 63 15 63 44] len_logic'0 self <= 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &len <- [#"../binary_search.rs" 67 29 67 30] (0 : usize) ] s1
      | s1 =  [ &l <- self ] s2
      | s2 = {[@expl:type invariant] inv'0 self} s3
      | s3 = -{resolve'0 self}- s4
      | s4 = bb1 ]
      
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant] [#"../binary_search.rs" 69 20 69 60] UIntSize.to_int len + len_logic'0 l
        = len_logic'0 self}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = s0
          [ s0 = any
            [ br0 (a:t) (b:BinarySearch_List_Type.t_list t)-> {l = BinarySearch_List_Type.C_Cons a b} (! bb3)
            | br1 -> {l = BinarySearch_List_Type.C_Nil } (! bb5) ]
             ]
          
        | bb3 = s0 [ s0 = bb4 ] 
        | bb4 = s0
          [ s0 = BinarySearch_List_Type.cons <t> {l}
              (fun (r0'0:t) (r1'0:BinarySearch_List_Type.t_list t) ->  [ &ls <- r1'0 ] s1)
          | s1 = {[@expl:type invariant] inv'0 l} s2
          | s2 = -{resolve'0 l}- s3
          | s3 = UIntSize.add {len} {[#"../binary_search.rs" 71 19 71 20] (1 : usize)}
              (fun (_ret':usize) ->  [ &len <- _ret' ] s4)
          | s4 = {[@expl:type invariant] inv'1 ls} s5
          | s5 = -{resolve'1 ls}- s6
          | s6 =  [ &l <- ls ] s7
          | s7 = bb1 ]
           ]
         ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 l} s1
      | s1 = -{resolve'0 l}- s2
      | s2 =  [ &_0 <- len ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : usize = any_l () : usize
    | & self : BinarySearch_List_Type.t_list t = self
    | & len : usize = any_l () : usize
    | & l : BinarySearch_List_Type.t_list t = any_l () : BinarySearch_List_Type.t_list t
    | & ls : BinarySearch_List_Type.t_list t = any_l () : BinarySearch_List_Type.t_list t ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [#"../binary_search.rs" 65 14 65 41] UIntSize.to_int result
      = len_logic'0 self}
      {[@expl:postcondition] [#"../binary_search.rs" 64 14 64 30] result >= (0 : usize)}
      (! return' {result}) ]
    
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
  function any_l (_ : 'b) : 'a
  let rec ok < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Ok field_0 <> input} {false} any ]
    
  let rec err < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad (field_0:'e)-> {C_Err field_0 <> input} {false} any ]
    
end
module BinarySearch_BinarySearch
  use prelude.UInt32
  predicate invariant'2 (self : uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : uint32)
  let rec inv'2 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : uint32 . inv'2 x = true
  use BinarySearch_List_Type as BinarySearch_List_Type
  predicate invariant'1 (self : BinarySearch_List_Type.t_list uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:BinarySearch_List_Type.t_list uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : BinarySearch_List_Type.t_list uint32)
  let rec inv'1 (_x:BinarySearch_List_Type.t_list uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : BinarySearch_List_Type.t_list uint32 . inv'1 x = true
  predicate invariant'0 (self : BinarySearch_List_Type.t_list uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:BinarySearch_List_Type.t_list uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : BinarySearch_List_Type.t_list uint32)
  let rec inv'0 (_x:BinarySearch_List_Type.t_list uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : BinarySearch_List_Type.t_list uint32 . inv'0 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Int
  function get'0 [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list uint32) (ix : int) : Core_Option_Option_Type.t_option uint32
    
   =
    [#"../binary_search.rs" 31 8 40 9] match self with
      | BinarySearch_List_Type.C_Cons t ls -> if ix = 0 then Core_Option_Option_Type.C_Some t else get'0 ls (ix - 1)
      | BinarySearch_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      end
  let rec get'0 (self:BinarySearch_List_Type.t_list uint32) (ix:int) (return'  (ret:Core_Option_Option_Type.t_option uint32))= any
    [ return' (result:Core_Option_Option_Type.t_option uint32)-> {result = get'0 self ix} (! return' {result}) ]
    
  predicate is_sorted'0 [#"../binary_search.rs" 88 4 88 30] (self : BinarySearch_List_Type.t_list uint32) =
    [#"../binary_search.rs" 90 12 97 13] forall x2 : int . forall x1 : int . x1 <= x2
     -> match (get'0 self x1, get'0 self x2) with
      | (Core_Option_Option_Type.C_Some v1, Core_Option_Option_Type.C_Some v2) -> v1 <= v2
      | (Core_Option_Option_Type.C_None, Core_Option_Option_Type.C_None) -> true
      | _ -> false
      end
  let rec is_sorted'0 (self:BinarySearch_List_Type.t_list uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_sorted'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.UIntSize
  function len_logic'0 [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list uint32) : int =
    [#"../binary_search.rs" 23 8 26 9] match self with
      | BinarySearch_List_Type.C_Cons _ ls -> 1 + len_logic'0 ls
      | BinarySearch_List_Type.C_Nil -> 0
      end
  let rec len_logic'0 (self:BinarySearch_List_Type.t_list uint32) (return'  (ret:int))= {[@expl:precondition] [#"../binary_search.rs" 22 17 22 21] inv'1 self}
    any [ return' (result:int)-> {result = len_logic'0 self} (! return' {result}) ] 
  axiom len_logic'0_spec : forall self : BinarySearch_List_Type.t_list uint32 . ([#"../binary_search.rs" 22 17 22 21] inv'1 self)
   -> ([#"../binary_search.rs" 21 14 21 25] len_logic'0 self >= 0)
  use prelude.UIntSize
  let rec index'0 (self:BinarySearch_List_Type.t_list uint32) (ix:usize) (return'  (ret:uint32))= {[@expl:precondition] [#"../binary_search.rs" 45 14 45 18] inv'0 self}
    {[@expl:precondition] [#"../binary_search.rs" 43 15 43 37] UIntSize.to_int ix < len_logic'0 self}
    any
    [ return' (result:uint32)-> {[#"../binary_search.rs" 45 38 45 40] inv'2 result}
      {[#"../binary_search.rs" 44 14 44 44] Core_Option_Option_Type.C_Some result = get'0 self (UIntSize.to_int ix)}
      (! return' {result}) ]
    
  function get_default'0 [#"../binary_search.rs" 78 4 78 46] (self : BinarySearch_List_Type.t_list uint32) (ix : int) (def : uint32) : uint32
    
   =
    [#"../binary_search.rs" 79 8 82 9] match get'0 self ix with
      | Core_Option_Option_Type.C_Some v -> v
      | Core_Option_Option_Type.C_None -> def
      end
  let rec get_default'0 (self:BinarySearch_List_Type.t_list uint32) (ix:int) (def:uint32) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {result = get_default'0 self ix def} (! return' {result}) ]
    
  use Core_Result_Result_Type as Core_Result_Result_Type
  let rec len'0 (self:BinarySearch_List_Type.t_list uint32) (return'  (ret:usize))= {[@expl:precondition] [#"../binary_search.rs" 66 12 66 16] inv'0 self}
    {[@expl:precondition] [#"../binary_search.rs" 63 15 63 44] len_logic'0 self <= 1000000}
    any
    [ return' (result:usize)-> {[#"../binary_search.rs" 65 14 65 41] UIntSize.to_int result = len_logic'0 self}
      {[#"../binary_search.rs" 64 14 64 30] result >= (0 : usize)}
      (! return' {result}) ]
    
  let rec binary_search (arr:BinarySearch_List_Type.t_list uint32) (elem:uint32) (return'  (ret:Core_Result_Result_Type.t_result usize usize))= {[#"../binary_search.rs" 103 11 103 26] is_sorted'0 arr}
    {[#"../binary_search.rs" 102 11 102 39] len_logic'0 arr <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UIntSize.eq {_10} {[#"../binary_search.rs" 110 20 110 21] (0 : usize)}
          (fun (_ret':bool) ->  [ &_9 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_10 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 = 
        [ &_0 <- Core_Result_Result_Type.C_Err ([#"../binary_search.rs" 111 19 111 20] (0 : usize)) : Core_Result_Result_Type.t_result usize usize ]
        
        s1
      | s1 = bb21 ]
      
    | bb3 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &size <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &base <- [#"../binary_search.rs" 114 19 114 20] (0 : usize) ] s1 | s1 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [#"../binary_search.rs" 116 4 116 65] forall i : usize . UIntSize.to_int base
        + UIntSize.to_int size
        < UIntSize.to_int i
        /\ UIntSize.to_int i < len_logic'0 arr  -> elem < get_default'0 arr (UIntSize.to_int i) (0 : uint32)}
        {[@expl:loop invariant] [#"../binary_search.rs" 116 4 116 65] forall i : usize . i < base
         -> get_default'0 arr (UIntSize.to_int i) (0 : uint32) <= elem}
        {[@expl:loop invariant] [#"../binary_search.rs" 116 16 116 63] 0 < UIntSize.to_int size
        /\ UIntSize.to_int size + UIntSize.to_int base <= len_logic'0 arr}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = UIntSize.gt {size} {[#"../binary_search.rs" 119 17 119 18] (1 : usize)}
              (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
          | s1 = any [ br0 -> {_21 = false} (! bb13) | br1 -> {_21} (! bb7) ]  ]
          
        | bb7 = s0
          [ s0 = UIntSize.eq
              {[#"../binary_search.rs" 120 26 120 27] (2 : usize)}
              {[#"../binary_search.rs" 120 19 120 27] (0 : usize)}
              (fun (_ret':bool) ->  [ &_25 <- _ret' ] s1)
          | s1 = {[@expl:division by zero] [#"../binary_search.rs" 120 19 120 27] not _25} s2
          | s2 = bb8 ]
          
        | bb8 = s0
          [ s0 = UIntSize.div {size} {[#"../binary_search.rs" 120 26 120 27] (2 : usize)}
              (fun (_ret':usize) ->  [ &half <- _ret' ] s1)
          | s1 = UIntSize.add {base} {half} (fun (_ret':usize) ->  [ &mid <- _ret' ] s2)
          | s2 = index'0 {arr} {mid} (fun (_ret':uint32) ->  [ &_32 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = UInt32.gt {_32} {elem} (fun (_ret':bool) ->  [ &_30 <- _ret' ] s1)
          | s1 = any [ br0 -> {_30 = false} (! bb11) | br1 -> {_30} (! bb10) ]  ]
          
        | bb10 = s0 [ s0 =  [ &_29 <- base ] s1 | s1 = bb12 ] 
        | bb11 = s0 [ s0 =  [ &_29 <- mid ] s1 | s1 = bb12 ] 
        | bb12 = s0
          [ s0 =  [ &base <- _29 ] (any [ any_ (_any:usize)-> (!  [ &_29 <- _any ] s1) ] )
          | s1 = UIntSize.sub {size} {half} (fun (_ret':usize) ->  [ &size <- _ret' ] s2)
          | s2 = bb5 ]
           ]
         ]
      
    | bb13 = s0 [ s0 = index'0 {arr} {base} (fun (_ret':uint32) ->  [ &_41 <- _ret' ] s1) | s1 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &cmp <- _41 ] s1
      | s1 = UInt32.eq {cmp} {elem} (fun (_ret':bool) ->  [ &_44 <- _ret' ] s2)
      | s2 = any [ br0 -> {_44 = false} (! bb16) | br1 -> {_44} (! bb15) ]  ]
      
    | bb15 = s0
      [ s0 =  [ &_0 <- Core_Result_Result_Type.C_Ok base : Core_Result_Result_Type.t_result usize usize ] s1
      | s1 = bb20 ]
      
    | bb16 = s0
      [ s0 = UInt32.lt {cmp} {elem} (fun (_ret':bool) ->  [ &_48 <- _ret' ] s1)
      | s1 = any [ br0 -> {_48 = false} (! bb18) | br1 -> {_48} (! bb17) ]  ]
      
    | bb17 = s0
      [ s0 = UIntSize.add {base} {[#"../binary_search.rs" 131 19 131 20] (1 : usize)}
          (fun (_ret':usize) ->  [ &_51 <- _ret' ] s1)
      | s1 =  [ &_0 <- Core_Result_Result_Type.C_Err _51 : Core_Result_Result_Type.t_result usize usize ] 
        (any [ any_ (_any:usize)-> (!  [ &_51 <- _any ] s2) ] )
      | s2 = bb19 ]
      
    | bb18 = s0
      [ s0 =  [ &_0 <- Core_Result_Result_Type.C_Err base : Core_Result_Result_Type.t_result usize usize ] s1
      | s1 = bb19 ]
      
    | bb19 = s0 [ s0 = bb20 ] 
    | bb20 = s0 [ s0 = bb21 ] 
    | bb21 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Result_Result_Type.t_result usize usize = any_l () : Core_Result_Result_Type.t_result usize usize
    | & arr : BinarySearch_List_Type.t_list uint32 = arr
    | & elem : uint32 = elem
    | & _9 : bool = any_l () : bool
    | & _10 : usize = any_l () : usize
    | & size : usize = any_l () : usize
    | & base : usize = any_l () : usize
    | & _21 : bool = any_l () : bool
    | & half : usize = any_l () : usize
    | & _25 : bool = any_l () : bool
    | & mid : usize = any_l () : usize
    | & _29 : usize = any_l () : usize
    | & _30 : bool = any_l () : bool
    | & _32 : uint32 = any_l () : uint32
    | & cmp : uint32 = any_l () : uint32
    | & _41 : uint32 = any_l () : uint32
    | & _44 : bool = any_l () : bool
    | & _48 : bool = any_l () : bool
    | & _51 : usize = any_l () : usize ]
    
    [ return' (result:Core_Result_Result_Type.t_result usize usize)-> {[@expl:postcondition] [#"../binary_search.rs" 107 0 108 90] forall x : usize . result
      = Core_Result_Result_Type.C_Err x
       -> (forall i : usize . UIntSize.to_int x < UIntSize.to_int i /\ UIntSize.to_int i < len_logic'0 arr
       -> elem < get_default'0 arr (UIntSize.to_int i) (0 : uint32))}
      {[@expl:postcondition] [#"../binary_search.rs" 105 0 106 78] forall x : usize . result
      = Core_Result_Result_Type.C_Err x
       -> (forall i : usize . 0 <= UIntSize.to_int i /\ UIntSize.to_int i < UIntSize.to_int x
       -> get_default'0 arr (UIntSize.to_int i) (0 : uint32) <= elem)}
      {[@expl:postcondition] [#"../binary_search.rs" 104 0 104 73] forall x : usize . result
      = Core_Result_Result_Type.C_Ok x  -> get'0 arr (UIntSize.to_int x) = Core_Option_Option_Type.C_Some elem}
      (! return' {result}) ]
    
end
