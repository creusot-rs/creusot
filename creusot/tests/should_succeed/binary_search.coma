module M_binary_search__qyi13868011053250380720__len_logic [#"binary_search.rs" 22 4 22 29] (* List<T> *)
  let%span sbinary_search0 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search1 = "binary_search.rs" 23 8 26 9
  
  use prelude.prelude.Int
  
  type t_T'0
  
  type t_List'0  =
    | C_Cons'0 t_T'0 (t_List'0)
    | C_Nil'0
  
  constant self  : t_List'0
  
  function len_logic'0 [#"binary_search.rs" 22 4 22 29] (self : t_List'0) : int
  
  goal vc_len_logic'0 : match self with
    | C_Cons'0 _ ls -> ([%#sbinary_search0] len_logic'0 ls >= 0)  -> ([%#sbinary_search0] 1 + len_logic'0 ls >= 0)
    | C_Nil'0 -> [%#sbinary_search0] 0 >= 0
    end
end
module M_binary_search__qyi13868011053250380720__index [#"binary_search.rs" 45 4 45 40] (* List<T> *)
  let%span sbinary_search0 = "binary_search.rs" 51 20 51 26
  let%span sbinary_search1 = "binary_search.rs" 50 20 50 52
  let%span sbinary_search2 = "binary_search.rs" 49 20 49 39
  let%span sbinary_search3 = "binary_search.rs" 53 20 53 21
  let%span sbinary_search4 = "binary_search.rs" 55 22 55 23
  let%span sbinary_search5 = "binary_search.rs" 45 14 45 18
  let%span sbinary_search6 = "binary_search.rs" 43 15 43 37
  let%span sbinary_search7 = "binary_search.rs" 45 38 45 40
  let%span sbinary_search8 = "binary_search.rs" 44 14 44 44
  let%span sbinary_search9 = "binary_search.rs" 31 8 40 9
  let%span sbinary_search10 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search11 = "binary_search.rs" 23 8 26 9
  let%span sinvariant12 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sboxed13 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_List'0  =
    | C_Cons'0 t_T'0 (t_List'0)
    | C_Nil'0
  
  predicate inv'3 (_1 : t_T'0)
  
  predicate inv'2 (_1 : t_List'0)
  
  predicate invariant'2 (self : t_List'0) =
    [%#sboxed13] inv'2 self
  
  predicate inv'4 (_1 : t_List'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_List'0 [inv'4 x] . inv'4 x = invariant'2 x
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_List'0 [inv'2 x] . inv'2 x
  = match x with
    | C_Cons'0 a_0 a_1 -> inv'3 a_0 /\ inv'4 a_1
    | C_Nil'0 -> true
    end
  
  predicate invariant'0 (self : t_List'0) =
    [%#sinvariant12] inv'2 self
  
  predicate inv'0 (_1 : t_List'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_List'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  function get'0 [#"binary_search.rs" 30 4 30 38] (self : t_List'0) (ix : int) : t_Option'0 =
    [%#sbinary_search9] match self with
      | C_Cons'0 t ls -> if ix = 0 then C_Some'0 t else get'0 ls (ix - 1)
      | C_Nil'0 -> C_None'0
      end
  
  function len_logic'0 [#"binary_search.rs" 22 4 22 29] (self : t_List'0) : int =
    [%#sbinary_search11] match self with
      | C_Cons'0 _ ls -> 1 + len_logic'0 ls
      | C_Nil'0 -> 0
      end
  
  axiom len_logic'0_spec : forall self : t_List'0 . [%#sbinary_search10] len_logic'0 self >= 0
  
  let rec v_Cons'0 (input:t_List'0) (ret  (field_0:t_T'0) (field_1:t_List'0))= any
    [ good (field_0:t_T'0) (field_1:t_List'0)-> {C_Cons'0 field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : t_T'0, field_1 : t_List'0 [C_Cons'0 field_0 field_1 : t_List'0] . C_Cons'0 field_0 field_1
      <> input}
      (! {false}
      any) ]
    
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Intrinsic
  
  predicate invariant'1 (self : t_T'0) =
    [%#sinvariant12] inv'3 self
  
  predicate inv'1 (_1 : t_T'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_T'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  meta "compute_max_steps" 1000000
  
  let rec index'0 (self:t_List'0) (ix:UInt64.t) (return'  (ret:t_T'0))= {[@expl:index 'self' type invariant] [%#sbinary_search5] inv'0 self}
    {[@expl:index requires] [%#sbinary_search6] UInt64.t'int ix < len_logic'0 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &orig_ix <- ix ] s1 | s1 =  [ &l <- self ] s2 | s2 = bb1 ] 
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant #0] [%#sbinary_search2] UInt64.t'int ix < len_logic'0 l}
        {[@expl:loop invariant #1] [%#sbinary_search1] get'0 self (UInt64.t'int orig_ix) = get'0 l (UInt64.t'int ix)}
        {[@expl:loop invariant #2] [%#sbinary_search0] inv'0 l}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = any [ br0 (x0:t_T'0) (x1:t_List'0)-> {l = C_Cons'0 x0 x1} (! bb3) | br1 -> {l = C_Nil'0 } (! bb7) ] 
        | bb3 = bb4
        | bb4 = s0
          [ s0 = v_Cons'0 {l} (fun (r0'0:t_T'0) (r1'0:t_List'0) ->  [ &t <- r0'0 ] s1)
          | s1 = v_Cons'0 {l} (fun (r0'1:t_T'0) (r1'1:t_List'0) ->  [ &ls <- r1'1 ] s2)
          | s2 = UInt64.gt {ix} {[%#sbinary_search3] (0 : UInt64.t)} (fun (_ret':bool) ->  [ &_15 <- _ret' ] s3)
          | s3 = any [ br0 -> {_15 = false} (! bb6) | br1 -> {_15} (! bb5) ]  ]
          
        | bb5 = s0
          [ s0 =  [ &_18 <- ls ] s1
          | s1 =  [ &l <- _18 ] s2
          | s2 = UInt64.sub {ix} {[%#sbinary_search4] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &ix <- _ret' ] s3)
          | s3 = bb1 ]
           ]
         ]
      
    | bb7 = {false} any
    | bb6 = s0 [ s0 =  [ &_0 <- t ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : t_T'0 = any_l ()
    | & self : t_List'0 = self
    | & ix : UInt64.t = ix
    | & orig_ix : UInt64.t = any_l ()
    | & l : t_List'0 = any_l ()
    | & t : t_T'0 = any_l ()
    | & ls : t_List'0 = any_l ()
    | & _15 : bool = any_l ()
    | & _18 : t_List'0 = any_l () ]
    
    [ return' (result:t_T'0)-> {[@expl:index result type invariant] [%#sbinary_search7] inv'1 result}
      {[@expl:index ensures] [%#sbinary_search8] C_Some'0 result = get'0 self (UInt64.t'int ix)}
      (! return' {result}) ]
    
end
module M_binary_search__qyi13868011053250380720__len [#"binary_search.rs" 67 4 67 26] (* List<T> *)
  let%span sbinary_search0 = "binary_search.rs" 68 29 68 30
  let%span sbinary_search1 = "binary_search.rs" 71 20 71 26
  let%span sbinary_search2 = "binary_search.rs" 70 20 70 60
  let%span sbinary_search3 = "binary_search.rs" 73 19 73 20
  let%span sbinary_search4 = "binary_search.rs" 67 12 67 16
  let%span sbinary_search5 = "binary_search.rs" 64 15 64 44
  let%span sbinary_search6 = "binary_search.rs" 65 14 65 30
  let%span sbinary_search7 = "binary_search.rs" 66 14 66 41
  let%span sbinary_search8 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search9 = "binary_search.rs" 23 8 26 9
  let%span sord10 = "../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord11 = "../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord12 = "../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord13 = "../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord14 = "../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord15 = "../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord16 = "../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord17 = "../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord18 = "../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord19 = "../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord20 = "../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord21 = "../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord22 = "../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span sinvariant23 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sord24 = "../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  let%span sboxed25 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_List'0  =
    | C_Cons'0 t_T'0 (t_List'0)
    | C_Nil'0
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate inv'1 (_1 : t_List'0)
  
  predicate invariant'1 (self : t_List'0) =
    [%#sboxed25] inv'1 self
  
  predicate inv'3 (_1 : t_List'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_List'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_List'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Cons'0 a_0 a_1 -> inv'2 a_0 /\ inv'3 a_1
    | C_Nil'0 -> true
    end
  
  predicate invariant'0 (self : t_List'0) =
    [%#sinvariant23] inv'1 self
  
  predicate inv'0 (_1 : t_List'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_List'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.UInt64
  
  function len_logic'0 [#"binary_search.rs" 22 4 22 29] (self : t_List'0) : int =
    [%#sbinary_search9] match self with
      | C_Cons'0 _ ls -> 1 + len_logic'0 ls
      | C_Nil'0 -> 0
      end
  
  axiom len_logic'0_spec : forall self : t_List'0 . [%#sbinary_search8] len_logic'0 self >= 0
  
  let rec v_Cons'0 (input:t_List'0) (ret  (field_0:t_T'0) (field_1:t_List'0))= any
    [ good (field_0:t_T'0) (field_1:t_List'0)-> {C_Cons'0 field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : t_T'0, field_1 : t_List'0 [C_Cons'0 field_0 field_1 : t_List'0] . C_Cons'0 field_0 field_1
      <> input}
      (! {false}
      any) ]
    
  
  use prelude.prelude.Intrinsic
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.prelude.UInt64
  
  function cmp_log'0 (self : UInt64.t) (o : UInt64.t) : t_Ordering'0 =
    [%#sord24] if UInt64.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord22] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord20] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord21] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord18] cmp_log'0 x y = C_Less'0)
   -> ([%#sord19] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt64.t) (y : UInt64.t) (z : UInt64.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt64.t, y : UInt64.t, z : UInt64.t, o : t_Ordering'0 . ([%#sord15] cmp_log'0 x y
  = o)  -> ([%#sord16] cmp_log'0 y z = o)  -> ([%#sord17] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt64.t) : ()
  
  axiom refl'0_spec : forall x : UInt64.t . [%#sord14] cmp_log'0 x x = C_Equal'0
  
  use prelude.prelude.UInt64
  
  function cmp_gt_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord13] UInt64.ugt x y
  = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.prelude.UInt64
  
  function cmp_ge_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord12] UInt64.uge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord11] UInt64.ult x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.prelude.UInt64
  
  function cmp_le_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord10] UInt64.ule x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  meta "compute_max_steps" 1000000
  
  let rec len'0 (self:t_List'0) (return'  (ret:UInt64.t))= {[@expl:len 'self' type invariant] [%#sbinary_search4] inv'0 self}
    {[@expl:len requires] [%#sbinary_search5] len_logic'0 self <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &len <- [%#sbinary_search0] (0 : UInt64.t) ] s1 | s1 =  [ &l <- self ] s2 | s2 = bb1 ] 
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant #0] [%#sbinary_search2] UInt64.t'int len + len_logic'0 l = len_logic'0 self}
        {[@expl:loop invariant #1] [%#sbinary_search1] inv'0 l}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = any [ br0 (x0:t_T'0) (x1:t_List'0)-> {l = C_Cons'0 x0 x1} (! bb3) | br1 -> {l = C_Nil'0 } (! bb5) ] 
        | bb3 = bb4
        | bb4 = s0
          [ s0 = v_Cons'0 {l} (fun (r0'0:t_T'0) (r1'0:t_List'0) ->  [ &ls <- r1'0 ] s1)
          | s1 = UInt64.add {len} {[%#sbinary_search3] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &len <- _ret' ] s2)
          | s2 =  [ &l <- ls ] s3
          | s3 = bb1 ]
           ]
         ]
      
    | bb5 = s0 [ s0 =  [ &_0 <- len ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : UInt64.t = any_l ()
    | & self : t_List'0 = self
    | & len : UInt64.t = any_l ()
    | & l : t_List'0 = any_l ()
    | & ls : t_List'0 = any_l () ]
    
    [ return' (result:UInt64.t)-> {[@expl:len ensures #0] [%#sbinary_search6] UInt64.uge result (0 : UInt64.t)}
      {[@expl:len ensures #1] [%#sbinary_search7] UInt64.t'int result = len_logic'0 self}
      (! return' {result}) ]
    
end
module M_binary_search__binary_search [#"binary_search.rs" 111 0 111 72]
  let%span sbinary_search0 = "binary_search.rs" 112 20 112 21
  let%span sbinary_search1 = "binary_search.rs" 113 19 113 20
  let%span sbinary_search2 = "binary_search.rs" 116 19 116 20
  let%span sbinary_search3 = "binary_search.rs" 120 16 120 117
  let%span sbinary_search4 = "binary_search.rs" 119 16 119 82
  let%span sbinary_search5 = "binary_search.rs" 118 16 118 63
  let%span sbinary_search6 = "binary_search.rs" 121 17 121 18
  let%span sbinary_search7 = "binary_search.rs" 122 19 122 27
  let%span sbinary_search8 = "binary_search.rs" 122 26 122 27
  let%span sbinary_search9 = "binary_search.rs" 133 19 133 20
  let%span sbinary_search10 = "binary_search.rs" 104 11 104 39
  let%span sbinary_search11 = "binary_search.rs" 105 11 105 26
  let%span sbinary_search12 = "binary_search.rs" 106 10 106 71
  let%span sbinary_search13 = "binary_search.rs" 107 10 108 76
  let%span sbinary_search14 = "binary_search.rs" 109 10 110 88
  let%span sbinary_search15 = "binary_search.rs" 67 12 67 16
  let%span sbinary_search16 = "binary_search.rs" 64 15 64 44
  let%span sbinary_search17 = "binary_search.rs" 65 14 65 30
  let%span sbinary_search18 = "binary_search.rs" 66 14 66 41
  let%span sbinary_search19 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search20 = "binary_search.rs" 23 8 26 9
  let%span sbinary_search21 = "binary_search.rs" 81 8 84 9
  let%span sbinary_search22 = "binary_search.rs" 45 14 45 18
  let%span sbinary_search23 = "binary_search.rs" 43 15 43 37
  let%span sbinary_search24 = "binary_search.rs" 45 38 45 40
  let%span sbinary_search25 = "binary_search.rs" 44 14 44 44
  let%span sbinary_search26 = "binary_search.rs" 93 16 98 17
  let%span sbinary_search27 = "binary_search.rs" 31 8 40 9
  let%span sord28 = "../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord29 = "../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord30 = "../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord31 = "../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord32 = "../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord33 = "../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord34 = "../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord35 = "../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord36 = "../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord37 = "../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord38 = "../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord39 = "../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord40 = "../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span sord41 = "../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord42 = "../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord43 = "../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord44 = "../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord45 = "../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord46 = "../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord47 = "../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord48 = "../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord49 = "../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord50 = "../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord51 = "../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord52 = "../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord53 = "../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span sord54 = "../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  let%span sord55 = "../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  type t_List'0  =
    | C_Cons'0 UInt32.t (t_List'0)
    | C_Nil'0
  
  predicate inv'0 (_1 : t_List'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_List'0 [inv'0 x] . inv'0 x = true
  
  function len_logic'0 [#"binary_search.rs" 22 4 22 29] (self : t_List'0) : int =
    [%#sbinary_search20] match self with
      | C_Cons'0 _ ls -> 1 + len_logic'0 ls
      | C_Nil'0 -> 0
      end
  
  axiom len_logic'0_spec : forall self : t_List'0 . [%#sbinary_search19] len_logic'0 self >= 0
  
  use prelude.prelude.UInt64
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.prelude.UInt64
  
  function cmp_log'1 (self : UInt64.t) (o : UInt64.t) : t_Ordering'0 =
    [%#sord55] if UInt64.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom eq_cmp'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord53] (x = y) = (cmp_log'1 x y = C_Equal'0)
  
  function antisym2'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym2'1_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord51] cmp_log'1 x y = C_Greater'0)
   -> ([%#sord52] cmp_log'1 y x = C_Less'0)
  
  function antisym1'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym1'1_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord49] cmp_log'1 x y = C_Less'0)
   -> ([%#sord50] cmp_log'1 y x = C_Greater'0)
  
  function trans'1 (x : UInt64.t) (y : UInt64.t) (z : UInt64.t) (o : t_Ordering'0) : ()
  
  axiom trans'1_spec : forall x : UInt64.t, y : UInt64.t, z : UInt64.t, o : t_Ordering'0 . ([%#sord46] cmp_log'1 x y
  = o)  -> ([%#sord47] cmp_log'1 y z = o)  -> ([%#sord48] cmp_log'1 x z = o)
  
  function refl'1 (x : UInt64.t) : ()
  
  axiom refl'1_spec : forall x : UInt64.t . [%#sord45] cmp_log'1 x x = C_Equal'0
  
  use prelude.prelude.UInt64
  
  function cmp_gt_log'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_gt_log'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord44] UInt64.ugt x y
  = (cmp_log'1 x y = C_Greater'0)
  
  use prelude.prelude.UInt64
  
  function cmp_ge_log'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_ge_log'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord43] UInt64.uge x y = (cmp_log'1 x y <> C_Less'0)
  
  function cmp_lt_log'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_lt_log'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord42] UInt64.ult x y = (cmp_log'1 x y = C_Less'0)
  
  use prelude.prelude.UInt64
  
  function cmp_le_log'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_le_log'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord41] UInt64.ule x y
  = (cmp_log'1 x y <> C_Greater'0)
  
  use prelude.prelude.UInt64
  
  let rec len'0 (self:t_List'0) (return'  (ret:UInt64.t))= {[@expl:len 'self' type invariant] [%#sbinary_search15] inv'0 self}
    {[@expl:len requires] [%#sbinary_search16] len_logic'0 self <= 1000000}
    any
    [ return' (result:UInt64.t)-> {[%#sbinary_search17] UInt64.uge result (0 : UInt64.t)}
      {[%#sbinary_search18] UInt64.t'int result = len_logic'0 self}
      (! return' {result}) ]
    
  
  type t_Result'0  =
    | C_Ok'0 UInt64.t
    | C_Err'0 UInt64.t
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 UInt32.t
  
  function get'0 [#"binary_search.rs" 30 4 30 38] (self : t_List'0) (ix : int) : t_Option'0 =
    [%#sbinary_search27] match self with
      | C_Cons'0 t ls -> if ix = 0 then C_Some'0 t else get'0 ls (ix - 1)
      | C_Nil'0 -> C_None'0
      end
  
  function get_default'0 [#"binary_search.rs" 80 4 80 46] (self : t_List'0) (ix : int) (def : UInt32.t) : UInt32.t =
    [%#sbinary_search21] match get'0 self ix with
      | C_Some'0 v -> v
      | C_None'0 -> def
      end
  
  use prelude.prelude.UInt32
  
  function cmp_log'0 (self : UInt32.t) (o : UInt32.t) : t_Ordering'0 =
    [%#sord54] if UInt32.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord40] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord38] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord39] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord36] cmp_log'0 x y = C_Less'0)
   -> ([%#sord37] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt32.t) (y : UInt32.t) (z : UInt32.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt32.t, y : UInt32.t, z : UInt32.t, o : t_Ordering'0 . ([%#sord33] cmp_log'0 x y
  = o)  -> ([%#sord34] cmp_log'0 y z = o)  -> ([%#sord35] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt32.t) : ()
  
  axiom refl'0_spec : forall x : UInt32.t . [%#sord32] cmp_log'0 x x = C_Equal'0
  
  use prelude.prelude.UInt32
  
  function cmp_gt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord31] UInt32.ugt x y
  = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.prelude.UInt32
  
  function cmp_ge_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord30] UInt32.uge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord29] UInt32.ult x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.prelude.UInt32
  
  function cmp_le_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord28] UInt32.ule x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  predicate inv'1 (_1 : UInt32.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : UInt32.t [inv'1 x] . inv'1 x = true
  
  let rec index'0 (self:t_List'0) (ix:UInt64.t) (return'  (ret:UInt32.t))= {[@expl:index 'self' type invariant] [%#sbinary_search22] inv'0 self}
    {[@expl:index requires] [%#sbinary_search23] UInt64.t'int ix < len_logic'0 self}
    any
    [ return' (result:UInt32.t)-> {[%#sbinary_search24] inv'1 result}
      {[%#sbinary_search25] C_Some'0 result = get'0 self (UInt64.t'int ix)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate is_sorted'0 [#"binary_search.rs" 90 4 90 30] (self : t_List'0) =
    [%#sbinary_search26] forall x1 : int, x2 : int . x1 <= x2
     -> match (get'0 self x1, get'0 self x2) with
      | (C_Some'0 v1, C_Some'0 v2) -> UInt32.ule v1 v2
      | (C_None'0, C_None'0) -> true
      | _ -> false
      end
  
  meta "compute_max_steps" 1000000
  
  let rec binary_search'0 (arr:t_List'0) (elem:UInt32.t) (return'  (ret:t_Result'0))= {[@expl:binary_search requires #0] [%#sbinary_search10] len_logic'0 arr
    <= 1000000}
    {[@expl:binary_search requires #1] [%#sbinary_search11] is_sorted'0 arr}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {arr} (fun (_ret':UInt64.t) ->  [ &_10 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UInt64.eq {_10} {[%#sbinary_search0] (0 : UInt64.t)} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s1)
      | s1 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ]  ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- C_Err'0 ([%#sbinary_search1] (0 : UInt64.t)) ] s1 | s1 = bb21 ] 
    | bb3 = s0 [ s0 = len'0 {arr} (fun (_ret':UInt64.t) ->  [ &size <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &base <- [%#sbinary_search2] (0 : UInt64.t) ] s1 | s1 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant #0] [%#sbinary_search5] 0 < UInt64.t'int size
        /\ UInt64.t'int size + UInt64.t'int base <= len_logic'0 arr}
        {[@expl:loop invariant #1] [%#sbinary_search4] forall i : UInt64.t . UInt64.ult i base
         -> UInt32.ule (get_default'0 arr (UInt64.t'int i) (0 : UInt32.t)) elem}
        {[@expl:loop invariant #2] [%#sbinary_search3] forall i : UInt64.t . UInt64.t'int base + UInt64.t'int size
        < UInt64.t'int i
        /\ UInt64.t'int i < len_logic'0 arr  -> UInt32.ult elem (get_default'0 arr (UInt64.t'int i) (0 : UInt32.t))}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = UInt64.gt {size} {[%#sbinary_search6] (1 : UInt64.t)} (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
          | s1 = any [ br0 -> {_21 = false} (! bb13) | br1 -> {_21} (! bb7) ]  ]
          
        | bb7 = s0
          [ s0 = UInt64.eq {[%#sbinary_search8] (2 : UInt64.t)} {[%#sbinary_search7] (0 : UInt64.t)}
              (fun (_ret':bool) ->  [ &_25 <- _ret' ] s1)
          | s1 = {[@expl:division by zero] [%#sbinary_search7] not _25} s2
          | s2 = bb8 ]
          
        | bb8 = s0
          [ s0 = UInt64.div {size} {[%#sbinary_search8] (2 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &half <- _ret' ] s1)
          | s1 = UInt64.add {base} {half} (fun (_ret':UInt64.t) ->  [ &mid <- _ret' ] s2)
          | s2 = index'0 {arr} {mid} (fun (_ret':UInt32.t) ->  [ &_32 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = UInt32.gt {_32} {elem} (fun (_ret':bool) ->  [ &_30 <- _ret' ] s1)
          | s1 = any [ br0 -> {_30 = false} (! bb11) | br1 -> {_30} (! bb10) ]  ]
          
        | bb10 = s0 [ s0 =  [ &_29 <- base ] s1 | s1 = bb12 ] 
        | bb11 = s0 [ s0 =  [ &_29 <- mid ] s1 | s1 = bb12 ] 
        | bb12 = s0
          [ s0 =  [ &base <- _29 ] s1
          | s1 = UInt64.sub {size} {half} (fun (_ret':UInt64.t) ->  [ &size <- _ret' ] s2)
          | s2 = bb5 ]
           ]
         ]
      
    | bb13 = s0 [ s0 = index'0 {arr} {base} (fun (_ret':UInt32.t) ->  [ &_41 <- _ret' ] s1) | s1 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &cmp <- _41 ] s1
      | s1 = UInt32.eq {cmp} {elem} (fun (_ret':bool) ->  [ &_44 <- _ret' ] s2)
      | s2 = any [ br0 -> {_44 = false} (! bb16) | br1 -> {_44} (! bb15) ]  ]
      
    | bb15 = s0 [ s0 =  [ &_0 <- C_Ok'0 base ] s1 | s1 = bb20 ] 
    | bb16 = s0
      [ s0 = UInt32.lt {cmp} {elem} (fun (_ret':bool) ->  [ &_48 <- _ret' ] s1)
      | s1 = any [ br0 -> {_48 = false} (! bb18) | br1 -> {_48} (! bb17) ]  ]
      
    | bb17 = s0
      [ s0 = UInt64.add {base} {[%#sbinary_search9] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &_51 <- _ret' ] s1)
      | s1 =  [ &_0 <- C_Err'0 _51 ] s2
      | s2 = bb19 ]
      
    | bb18 = s0 [ s0 =  [ &_0 <- C_Err'0 base ] s1 | s1 = bb19 ] 
    | bb19 = bb20
    | bb20 = bb21
    | bb21 = return' {_0} ]
    )
    [ & _0 : t_Result'0 = any_l ()
    | & arr : t_List'0 = arr
    | & elem : UInt32.t = elem
    | & _9 : bool = any_l ()
    | & _10 : UInt64.t = any_l ()
    | & size : UInt64.t = any_l ()
    | & base : UInt64.t = any_l ()
    | & _21 : bool = any_l ()
    | & half : UInt64.t = any_l ()
    | & _25 : bool = any_l ()
    | & mid : UInt64.t = any_l ()
    | & _29 : UInt64.t = any_l ()
    | & _30 : bool = any_l ()
    | & _32 : UInt32.t = any_l ()
    | & cmp : UInt32.t = any_l ()
    | & _41 : UInt32.t = any_l ()
    | & _44 : bool = any_l ()
    | & _48 : bool = any_l ()
    | & _51 : UInt64.t = any_l () ]
    
    [ return' (result:t_Result'0)-> {[@expl:binary_search ensures #0] [%#sbinary_search12] forall x : UInt64.t . result
      = C_Ok'0 x  -> get'0 arr (UInt64.t'int x) = C_Some'0 elem}
      {[@expl:binary_search ensures #1] [%#sbinary_search13] forall x : UInt64.t . result = C_Err'0 x
       -> (forall i : UInt64.t . 0 <= UInt64.t'int i /\ UInt64.t'int i < UInt64.t'int x
       -> UInt32.ule (get_default'0 arr (UInt64.t'int i) (0 : UInt32.t)) elem)}
      {[@expl:binary_search ensures #2] [%#sbinary_search14] forall x : UInt64.t . result = C_Err'0 x
       -> (forall i : UInt64.t . UInt64.t'int x < UInt64.t'int i /\ UInt64.t'int i < len_logic'0 arr
       -> UInt32.ult elem (get_default'0 arr (UInt64.t'int i) (0 : UInt32.t)))}
      (! return' {result}) ]
    
end
