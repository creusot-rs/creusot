
module Unnest_Unnest
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  predicate resolve1 (self : borrowed (borrowed uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (borrowed uint32)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  let rec cfg unnest [#"../unnest.rs" 8 0 8 64] [@cfg:stackify] [@cfg:subregion_analysis] (x : borrowed (borrowed uint32)) : borrowed uint32
    ensures { [#"../unnest.rs" 5 10 5 24]  * result =  *  * x }
    ensures { [#"../unnest.rs" 6 10 6 24]  ^ result =  *  ^ x }
    ensures { [#"../unnest.rs" 7 10 7 20]  ^  * x =  ^  ^ x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var x : borrowed (borrowed uint32) = x;
  var _2 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../unnest.rs" 9 4 9 6] _2 <- Borrow.borrow_mut ( *  * x);
    [#"../unnest.rs" 9 4 9 6] x <- { x with current = { ( * x) with current = ( ^ _2) ; } ; };
    [#"../unnest.rs" 9 4 9 6] _0 <- Borrow.borrow_final ( * _2) (Borrow.get_id _2);
    [#"../unnest.rs" 9 4 9 6] _2 <- { _2 with current = ( ^ _0) ; };
    assume { resolve0 _2 };
    assume { resolve1 x };
    return _0
  }
  
end
