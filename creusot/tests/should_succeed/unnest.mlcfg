
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Unnest_Unnest_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  val unnest [#"../unnest.rs" 8 0 8 64] (x : borrowed (borrowed uint32)) : borrowed uint32
    ensures { [#"../unnest.rs" 5 10 5 24]  * result =  *  * x }
    ensures { [#"../unnest.rs" 6 10 6 24]  ^ result =  *  ^ x }
    ensures { [#"../unnest.rs" 7 10 7 20]  ^  * x =  ^  ^ x }
    
end
module Unnest_Unnest
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = borrowed uint32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  let rec cfg unnest [#"../unnest.rs" 8 0 8 64] [@cfg:stackify] [@cfg:subregion_analysis] (x : borrowed (borrowed uint32)) : borrowed uint32
    ensures { [#"../unnest.rs" 5 10 5 24]  * result =  *  * x }
    ensures { [#"../unnest.rs" 6 10 6 24]  ^ result =  *  ^ x }
    ensures { [#"../unnest.rs" 7 10 7 20]  ^  * x =  ^  ^ x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var x_1 : borrowed (borrowed uint32);
  var _2 : borrowed uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _2 <- borrow_mut ( *  * x_1);
    x_1 <- { x_1 with current = { ( * x_1) with current = ( ^ _2) } };
    _0 <- borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    assume { Resolve0.resolve _2 };
    assume { Resolve1.resolve x_1 };
    return _0
  }
  
end
