module M_duration__test_duration [#"duration.rs" 7 0 7 22]
  let%span sduration0 = "duration.rs" 8 29 8 30
  let%span sduration1 = "duration.rs" 8 32 8 33
  let%span sduration2 = "duration.rs" 9 18 9 28
  let%span sduration3 = "duration.rs" 10 31 10 32
  let%span sduration4 = "duration.rs" 12 28 12 36
  let%span sduration5 = "duration.rs" 12 38 12 49
  let%span sduration6 = "duration.rs" 14 37 14 38
  let%span sduration7 = "duration.rs" 15 18 15 42
  let%span sduration8 = "duration.rs" 17 41 17 42
  let%span sduration9 = "duration.rs" 18 18 18 40
  let%span sduration10 = "duration.rs" 20 41 20 42
  let%span sduration11 = "duration.rs" 21 18 21 36
  let%span sduration12 = "duration.rs" 23 39 23 40
  let%span sduration13 = "duration.rs" 24 18 24 31
  let%span sduration14 = "duration.rs" 27 4 27 30
  let%span sduration15 = "duration.rs" 29 12 29 13
  let%span sduration16 = "duration.rs" 30 12 30 13
  let%span sduration17 = "duration.rs" 31 12 31 13
  let%span sduration18 = "duration.rs" 32 12 32 13
  let%span sduration19 = "duration.rs" 44 28 44 29
  let%span sduration20 = "duration.rs" 45 31 45 33
  let%span sduration21 = "duration.rs" 47 31 47 32
  let%span sduration22 = "duration.rs" 48 31 48 33
  let%span sduration23 = "duration.rs" 52 18 52 35
  let%span sduration24 = "duration.rs" 53 18 53 39
  let%span sduration25 = "duration.rs" 48 4 48 45
  let%span sduration26 = "duration.rs" 47 4 47 44
  let%span sduration27 = "duration.rs" 45 4 45 45
  let%span sduration28 = "duration.rs" 44 4 44 41
  let%span sduration29 = "duration.rs" 42 4 42 51
  let%span sduration30 = "duration.rs" 41 4 41 46
  let%span sduration31 = "duration.rs" 39 4 39 49
  let%span sduration32 = "duration.rs" 38 4 38 46
  let%span sduration33 = "duration.rs" 36 4 36 65
  let%span sduration34 = "duration.rs" 35 4 35 69
  let%span sduration35 = "duration.rs" 34 4 34 69
  let%span sduration36 = "duration.rs" 32 4 32 39
  let%span sduration37 = "duration.rs" 31 4 31 40
  let%span sduration38 = "duration.rs" 30 4 30 40
  let%span sduration39 = "duration.rs" 29 4 29 34
  let%span sduration40 = "duration.rs" 26 4 26 27
  let%span sduration41 = "duration.rs" 10 4 10 33
  let%span stime42 = "../../../creusot-contracts/src/std/time.rs" 77 27 77 69
  let%span stime43 = "../../../creusot-contracts/src/std/time.rs" 78 26 78 66
  let%span stime44 = "../../../creusot-contracts/src/std/time.rs" 12 14 12 77
  let%span stime45 = "../../../creusot-contracts/src/std/time.rs" 130 26 130 42
  let%span stime46 = "../../../creusot-contracts/src/std/time.rs" 131 26 131 75
  let%span stime47 = "../../../creusot-contracts/src/std/time.rs" 82 26 82 57
  let%span stime48 = "../../../creusot-contracts/src/std/time.rs" 86 26 86 58
  let%span stime49 = "../../../creusot-contracts/src/std/time.rs" 90 26 90 54
  let%span stime50 = "../../../creusot-contracts/src/std/time.rs" 94 26 94 43
  let%span stime51 = "../../../creusot-contracts/src/std/time.rs" 72 0 189 1
  let%span stime52 = "../../../creusot-contracts/src/std/time.rs" 103 26 103 57
  let%span stime53 = "../../../creusot-contracts/src/std/time.rs" 107 26 107 67
  let%span stime54 = "../../../creusot-contracts/src/std/time.rs" 108 26 108 44
  let%span stime55 = "../../../creusot-contracts/src/std/time.rs" 112 26 112 71
  let%span stime56 = "../../../creusot-contracts/src/std/time.rs" 113 26 113 48
  let%span stime57 = "../../../creusot-contracts/src/std/time.rs" 117 26 117 60
  let%span stime58 = "../../../creusot-contracts/src/std/time.rs" 118 26 118 52
  let%span stime59 = "../../../creusot-contracts/src/std/time.rs" 122 26 122 59
  let%span stime60 = "../../../creusot-contracts/src/std/time.rs" 126 26 126 59
  let%span stime61 = "../../../creusot-contracts/src/std/time.rs" 135 26 135 84
  let%span stime62 = "../../../creusot-contracts/src/std/time.rs" 136 26 136 112
  let%span soption63 = "../../../creusot-contracts/src/std/option.rs" 51 26 51 51
  let%span soption64 = "../../../creusot-contracts/src/std/option.rs" 36 26 36 51
  let%span stime65 = "../../../creusot-contracts/src/std/time.rs" 145 26 145 84
  let%span stime66 = "../../../creusot-contracts/src/std/time.rs" 146 26 146 112
  let%span stime67 = "../../../creusot-contracts/src/std/time.rs" 150 26 150 56
  let%span stime68 = "../../../creusot-contracts/src/std/time.rs" 151 26 151 83
  let%span stime69 = "../../../creusot-contracts/src/std/time.rs" 191 0 226 1
  let%span stime70 = "../../../creusot-contracts/src/std/time.rs" 42 4 42 25
  let%span stime71 = "../../../creusot-contracts/src/std/time.rs" 48 4 48 24
  let%span smodel72 = "../../../creusot-contracts/src/model.rs" 92 8 92 22
  let%span stime73 = "../../../creusot-contracts/src/std/time.rs" 36 4 36 21
  let%span stime74 = "../../../creusot-contracts/src/std/time.rs" 31 4 31 17
  let%span soption75 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span stime76 = "../../../creusot-contracts/src/std/time.rs" 24 8 24 19
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  function nanos_to_secs'0 (nanos : int) : int =
    [%#stime70] div nanos 1000000000
  
  constant v_MAX'0 : uint64 = (18446744073709551615 : uint64)
  
  function secs_to_nanos'0 (secs : int) : int =
    [%#stime71] secs * 1000000000
  
  type t_Nanoseconds'0  =
    { t_Nanoseconds__0'0: uint32 }
  
  type t_Duration'0  =
    { t_Duration__secs'0: uint64; t_Duration__nanos'0: t_Nanoseconds'0 }
  
  function view'0 (self : t_Duration'0) : int
  
  axiom view'0_spec : forall self : t_Duration'0 . [%#stime44] view'0 self >= 0
  /\ view'0 self <= secs_to_nanos'0 (UInt64.to_int (v_MAX'0 : uint64)) + 999999999
  
  let rec new'0 (secs:uint64) (nanos:uint32) (return'  (ret:t_Duration'0))= {[@expl:new requires] [%#stime42] UInt64.to_int secs
    + nanos_to_secs'0 (UInt32.to_int nanos)
    <= UInt64.to_int (v_MAX'0 : uint64)}
    any
    [ return' (result:t_Duration'0)-> {[%#stime43] view'0 result
      = secs_to_nanos'0 (UInt64.to_int secs) + UInt32.to_int nanos}
      (! return' {result}) ]
    
  
  use prelude.prelude.UInt128
  
  use prelude.prelude.Borrow
  
  function view'1 (self : t_Duration'0) : int =
    [%#smodel72] view'0 self
  
  use prelude.prelude.UInt128
  
  let rec as_nanos'0 (self:t_Duration'0) (return'  (ret:uint128))= any
    [ return' (result:uint128)-> {[%#stime45] UInt128.to_int result = view'1 self}
      {[%#stime46] UInt128.to_int result <= secs_to_nanos'0 (UInt64.to_int (v_MAX'0 : uint64)) + 999999999}
      (! return' {result}) ]
    
  
  let rec from_secs'0 (secs:uint64) (return'  (ret:t_Duration'0))= any
    [ return' (result:t_Duration'0)-> {[%#stime47] view'0 result = secs_to_nanos'0 (UInt64.to_int secs)}
      (! return' {result}) ]
    
  
  let rec from_millis'0 (millis:uint64) (return'  (ret:t_Duration'0))= any
    [ return' (result:t_Duration'0)-> {[%#stime48] view'0 result = UInt64.to_int millis * 1000000}
      (! return' {result}) ]
    
  
  let rec from_micros'0 (micros:uint64) (return'  (ret:t_Duration'0))= any
    [ return' (result:t_Duration'0)-> {[%#stime49] view'0 result = UInt64.to_int micros * 1000} (! return' {result}) ]
    
  
  let rec from_nanos'0 (nanos:uint64) (return'  (ret:t_Duration'0))= any
    [ return' (result:t_Duration'0)-> {[%#stime50] view'0 result = UInt64.to_int nanos} (! return' {result}) ]
    
  
  let rec is_zero'0 (self:t_Duration'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#stime51] view'1 self = 0  -> result = true}
      {[%#stime51] view'1 self <> 0  -> result = false}
      (! return' {result}) ]
    
  
  let rec as_secs'0 (self:t_Duration'0) (return'  (ret:uint64))= any
    [ return' (result:uint64)-> {[%#stime52] UInt64.to_int result = nanos_to_secs'0 (view'1 self)}
      (! return' {result}) ]
    
  
  function nanos_to_millis'0 (nanos : int) : int =
    [%#stime73] div nanos 1000000
  
  let rec subsec_millis'0 (self:t_Duration'0) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {[%#stime53] UInt32.to_int result = mod (nanos_to_millis'0 (view'1 self)) 1000}
      {[%#stime54] result < (1000 : uint32)}
      (! return' {result}) ]
    
  
  function nanos_to_micros'0 (nanos : int) : int =
    [%#stime74] div nanos 1000
  
  let rec subsec_micros'0 (self:t_Duration'0) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {[%#stime55] UInt32.to_int result = mod (nanos_to_micros'0 (view'1 self)) 1000000}
      {[%#stime56] result < (1000000 : uint32)}
      (! return' {result}) ]
    
  
  let rec subsec_nanos'0 (self:t_Duration'0) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {[%#stime57] UInt32.to_int result = mod (view'1 self) 1000000000}
      {[%#stime58] result < (1000000000 : uint32)}
      (! return' {result}) ]
    
  
  let rec as_millis'0 (self:t_Duration'0) (return'  (ret:uint128))= any
    [ return' (result:uint128)-> {[%#stime59] UInt128.to_int result = nanos_to_millis'0 (view'1 self)}
      (! return' {result}) ]
    
  
  let rec as_micros'0 (self:t_Duration'0) (return'  (ret:uint128))= any
    [ return' (result:uint128)-> {[%#stime60] UInt128.to_int result = nanos_to_micros'0 (view'1 self)}
      (! return' {result}) ]
    
  
  type t_Option'0  =
    | C_None'0
    | C_Some'1 (t_Duration'0)
  
  type t_Option'1  =
    | C_None'1
    | C_Some'0 int
  
  function deep_model'1 (self : t_Duration'0) : int =
    [%#stime76] view'0 self
  
  function deep_model'0 (self : t_Option'0) : t_Option'1 =
    [%#soption75] match self with
      | C_Some'1 t -> C_Some'0 (deep_model'1 t)
      | C_None'0 -> C_None'1
      end
  
  let rec checked_add'0 (self:t_Duration'0) (rhs:t_Duration'0) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {[%#stime61] nanos_to_secs'0 (view'0 self + view'0 rhs)
      > UInt64.to_int (v_MAX'0 : uint64)  -> result = C_None'0}
      {[%#stime62] nanos_to_secs'0 (view'0 self + view'0 rhs) <= UInt64.to_int (v_MAX'0 : uint64)
       -> deep_model'0 result = C_Some'0 (view'0 self + view'0 rhs)}
      (! return' {result}) ]
    
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x = true
  
  let rec is_none'0 (self:t_Option'0) (return'  (ret:bool))= {[@expl:is_none 'self' type invariant] inv'0 self}
    any [ return' (result:bool)-> {[%#soption63] result = (self = C_None'0)} (! return' {result}) ] 
  
  let rec is_some'0 (self:t_Option'0) (return'  (ret:bool))= {[@expl:is_some 'self' type invariant] inv'0 self}
    any [ return' (result:bool)-> {[%#soption64] result = (self <> C_None'0)} (! return' {result}) ] 
  
  let rec checked_sub'0 (self:t_Duration'0) (rhs:t_Duration'0) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {[%#stime51] view'0 self - view'0 rhs < 0  -> result = C_None'0}
      {[%#stime51] view'0 self - view'0 rhs >= 0  -> deep_model'0 result = C_Some'0 (view'0 self - view'0 rhs)}
      (! return' {result}) ]
    
  
  let rec checked_mul'0 (self:t_Duration'0) (rhs:uint32) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {[%#stime65] nanos_to_secs'0 (view'0 self * UInt32.to_int rhs)
      > UInt64.to_int (v_MAX'0 : uint64)  -> result = C_None'0}
      {[%#stime66] nanos_to_secs'0 (view'0 self * UInt32.to_int rhs) <= UInt64.to_int (v_MAX'0 : uint64)
       -> deep_model'0 result = C_Some'0 (view'0 self * UInt32.to_int rhs)}
      (! return' {result}) ]
    
  
  let rec checked_div'0 (self:t_Duration'0) (rhs:uint32) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {[%#stime67] rhs = (0 : uint32)  -> result = C_None'0}
      {[%#stime68] rhs <> (0 : uint32)  -> deep_model'0 result = C_Some'0 (div (view'0 self) (UInt32.to_int rhs))}
      (! return' {result}) ]
    
  
  let rec add'0 (self:t_Duration'0) (rhs:t_Duration'0) (return'  (ret:t_Duration'0))= {[@expl:add requires] [%#stime69] view'0 self
    + view'0 rhs
    <= secs_to_nanos'0 (UInt64.to_int (v_MAX'0 : uint64)) + 999999999}
    any [ return' (result:t_Duration'0)-> {[%#stime69] view'0 self + view'0 rhs = view'0 result} (! return' {result}) ] 
  
  let rec sub'0 (self:t_Duration'0) (rhs:t_Duration'0) (return'  (ret:t_Duration'0))= {[@expl:sub requires] [%#stime69] view'0 self
    - view'0 rhs
    >= 0}
    any [ return' (result:t_Duration'0)-> {[%#stime69] view'0 self - view'0 rhs = view'0 result} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_duration'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#sduration0] (0 : uint64)} {[%#sduration1] (0 : uint32)}
          (fun (_ret':t_Duration'0) ->  [ &zero <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#sduration2] view'0 zero = 0} s1
      | s1 = as_nanos'0 {zero} (fun (_ret':uint128) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = UInt128.eq {_6} {[%#sduration3] (0 : uint128)} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s1)
      | s1 = any [ br0 -> {_5 = false} (! bb4) | br1 -> {_5} (! bb3) ]  ]
      
    | bb3 = s0
      [ s0 = new'0 {[%#sduration4] (18446744073709551615 : uint64)} {[%#sduration5] (999999999 : uint32)}
          (fun (_ret':t_Duration'0) ->  [ &max <- _ret' ] s1)
      | s1 = bb5 ]
      
    | bb5 = s0
      [ s0 = from_secs'0 {[%#sduration6] (1 : uint64)} (fun (_ret':t_Duration'0) ->  [ &d_secs <- _ret' ] s1)
      | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 = {[@expl:assertion] [%#sduration7] view'0 d_secs = 1000000000} s1
      | s1 = from_millis'0 {[%#sduration8] (1 : uint64)} (fun (_ret':t_Duration'0) ->  [ &d_millis <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = {[@expl:assertion] [%#sduration9] view'0 d_millis = 1000000} s1
      | s1 = from_micros'0 {[%#sduration10] (1 : uint64)} (fun (_ret':t_Duration'0) ->  [ &d_micros <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 = {[@expl:assertion] [%#sduration11] view'0 d_micros = 1000} s1
      | s1 = from_nanos'0 {[%#sduration12] (1 : uint64)} (fun (_ret':t_Duration'0) ->  [ &d_nanos <- _ret' ] s2)
      | s2 = bb9 ]
      
    | bb9 = s0
      [ s0 = {[@expl:assertion] [%#sduration13] view'0 d_nanos = 1} s1
      | s1 = is_zero'0 {zero} (fun (_ret':bool) ->  [ &_23 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = any [ br0 -> {_23 = false} (! bb12) | br1 -> {_23} (! bb11) ] 
    | bb11 = s0 [ s0 = is_zero'0 {d_secs} (fun (_ret':bool) ->  [ &_27 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = any [ br0 -> {_27 = false} (! bb15) | br1 -> {_27} (! bb14) ] 
    | bb14 = {[%#sduration14] false} any
    | bb15 = s0 [ s0 = as_secs'0 {d_secs} (fun (_ret':uint64) ->  [ &_32 <- _ret' ] s1) | s1 = bb16 ] 
    | bb16 = s0
      [ s0 = UInt64.eq {[%#sduration15] (1 : uint64)} {_32} (fun (_ret':bool) ->  [ &_31 <- _ret' ] s1)
      | s1 = any [ br0 -> {_31 = false} (! bb18) | br1 -> {_31} (! bb17) ]  ]
      
    | bb17 = s0 [ s0 = subsec_millis'0 {d_secs} (fun (_ret':uint32) ->  [ &_37 <- _ret' ] s1) | s1 = bb19 ] 
    | bb19 = s0
      [ s0 = UInt32.eq {[%#sduration16] (0 : uint32)} {_37} (fun (_ret':bool) ->  [ &_36 <- _ret' ] s1)
      | s1 = any [ br0 -> {_36 = false} (! bb21) | br1 -> {_36} (! bb20) ]  ]
      
    | bb20 = s0 [ s0 = subsec_micros'0 {d_secs} (fun (_ret':uint32) ->  [ &_42 <- _ret' ] s1) | s1 = bb22 ] 
    | bb22 = s0
      [ s0 = UInt32.eq {[%#sduration17] (0 : uint32)} {_42} (fun (_ret':bool) ->  [ &_41 <- _ret' ] s1)
      | s1 = any [ br0 -> {_41 = false} (! bb24) | br1 -> {_41} (! bb23) ]  ]
      
    | bb23 = s0 [ s0 = subsec_nanos'0 {d_secs} (fun (_ret':uint32) ->  [ &_47 <- _ret' ] s1) | s1 = bb25 ] 
    | bb25 = s0
      [ s0 = UInt32.eq {[%#sduration18] (0 : uint32)} {_47} (fun (_ret':bool) ->  [ &_46 <- _ret' ] s1)
      | s1 = any [ br0 -> {_46 = false} (! bb27) | br1 -> {_46} (! bb26) ]  ]
      
    | bb26 = s0 [ s0 = subsec_millis'0 {d_millis} (fun (_ret':uint32) ->  [ &_53 <- _ret' ] s1) | s1 = bb28 ] 
    | bb28 = s0
      [ s0 = UInt128.of_int {UInt32.to_int _53} (fun (_res:uint128) ->  [ &_52 <- _res ] s1)
      | s1 = as_millis'0 {d_millis} (fun (_ret':uint128) ->  [ &_55 <- _ret' ] s2)
      | s2 = bb29 ]
      
    | bb29 = s0
      [ s0 = UInt128.eq {_52} {_55} (fun (_ret':bool) ->  [ &_51 <- _ret' ] s1)
      | s1 = any [ br0 -> {_51 = false} (! bb31) | br1 -> {_51} (! bb30) ]  ]
      
    | bb30 = s0 [ s0 = subsec_micros'0 {d_micros} (fun (_ret':uint32) ->  [ &_61 <- _ret' ] s1) | s1 = bb32 ] 
    | bb32 = s0
      [ s0 = UInt128.of_int {UInt32.to_int _61} (fun (_res:uint128) ->  [ &_60 <- _res ] s1)
      | s1 = as_micros'0 {d_micros} (fun (_ret':uint128) ->  [ &_63 <- _ret' ] s2)
      | s2 = bb33 ]
      
    | bb33 = s0
      [ s0 = UInt128.eq {_60} {_63} (fun (_ret':bool) ->  [ &_59 <- _ret' ] s1)
      | s1 = any [ br0 -> {_59 = false} (! bb35) | br1 -> {_59} (! bb34) ]  ]
      
    | bb34 = s0 [ s0 = subsec_nanos'0 {d_nanos} (fun (_ret':uint32) ->  [ &_69 <- _ret' ] s1) | s1 = bb36 ] 
    | bb36 = s0
      [ s0 = UInt128.of_int {UInt32.to_int _69} (fun (_res:uint128) ->  [ &_68 <- _res ] s1)
      | s1 = as_nanos'0 {d_nanos} (fun (_ret':uint128) ->  [ &_71 <- _ret' ] s2)
      | s2 = bb37 ]
      
    | bb37 = s0
      [ s0 = UInt128.eq {_68} {_71} (fun (_ret':bool) ->  [ &_67 <- _ret' ] s1)
      | s1 = any [ br0 -> {_67 = false} (! bb39) | br1 -> {_67} (! bb38) ]  ]
      
    | bb38 = s0 [ s0 = checked_add'0 {d_secs} {max} (fun (_ret':t_Option'0) ->  [ &_77 <- _ret' ] s1) | s1 = bb40 ] 
    | bb40 = s0 [ s0 = is_none'0 {_77} (fun (_ret':bool) ->  [ &_75 <- _ret' ] s1) | s1 = bb41 ] 
    | bb41 = any [ br0 -> {_75 = false} (! bb43) | br1 -> {_75} (! bb42) ] 
    | bb42 = s0 [ s0 = checked_add'0 {d_secs} {d_secs} (fun (_ret':t_Option'0) ->  [ &_84 <- _ret' ] s1) | s1 = bb44 ] 
    | bb44 = s0 [ s0 = is_some'0 {_84} (fun (_ret':bool) ->  [ &_82 <- _ret' ] s1) | s1 = bb45 ] 
    | bb45 = any [ br0 -> {_82 = false} (! bb47) | br1 -> {_82} (! bb46) ] 
    | bb46 = s0 [ s0 = checked_sub'0 {d_secs} {max} (fun (_ret':t_Option'0) ->  [ &_91 <- _ret' ] s1) | s1 = bb48 ] 
    | bb48 = s0 [ s0 = is_none'0 {_91} (fun (_ret':bool) ->  [ &_89 <- _ret' ] s1) | s1 = bb49 ] 
    | bb49 = any [ br0 -> {_89 = false} (! bb51) | br1 -> {_89} (! bb50) ] 
    | bb50 = s0
      [ s0 = checked_sub'0 {d_secs} {d_millis} (fun (_ret':t_Option'0) ->  [ &_98 <- _ret' ] s1) | s1 = bb52 ]
      
    | bb52 = s0 [ s0 = is_some'0 {_98} (fun (_ret':bool) ->  [ &_96 <- _ret' ] s1) | s1 = bb53 ] 
    | bb53 = any [ br0 -> {_96 = false} (! bb55) | br1 -> {_96} (! bb54) ] 
    | bb54 = s0
      [ s0 = checked_mul'0 {max} {[%#sduration19] (2 : uint32)} (fun (_ret':t_Option'0) ->  [ &_105 <- _ret' ] s1)
      | s1 = bb56 ]
      
    | bb56 = s0 [ s0 = is_none'0 {_105} (fun (_ret':bool) ->  [ &_103 <- _ret' ] s1) | s1 = bb57 ] 
    | bb57 = any [ br0 -> {_103 = false} (! bb59) | br1 -> {_103} (! bb58) ] 
    | bb58 = s0
      [ s0 = checked_mul'0 {d_secs} {[%#sduration20] (10 : uint32)} (fun (_ret':t_Option'0) ->  [ &_111 <- _ret' ] s1)
      | s1 = bb60 ]
      
    | bb60 = s0 [ s0 = is_some'0 {_111} (fun (_ret':bool) ->  [ &_109 <- _ret' ] s1) | s1 = bb61 ] 
    | bb61 = any [ br0 -> {_109 = false} (! bb63) | br1 -> {_109} (! bb62) ] 
    | bb62 = s0
      [ s0 = checked_div'0 {d_secs} {[%#sduration21] (0 : uint32)} (fun (_ret':t_Option'0) ->  [ &_117 <- _ret' ] s1)
      | s1 = bb64 ]
      
    | bb64 = s0 [ s0 = is_none'0 {_117} (fun (_ret':bool) ->  [ &_115 <- _ret' ] s1) | s1 = bb65 ] 
    | bb65 = any [ br0 -> {_115 = false} (! bb67) | br1 -> {_115} (! bb66) ] 
    | bb66 = s0
      [ s0 = checked_div'0 {d_secs} {[%#sduration22] (10 : uint32)} (fun (_ret':t_Option'0) ->  [ &_123 <- _ret' ] s1)
      | s1 = bb68 ]
      
    | bb68 = s0 [ s0 = is_some'0 {_123} (fun (_ret':bool) ->  [ &_121 <- _ret' ] s1) | s1 = bb69 ] 
    | bb69 = any [ br0 -> {_121 = false} (! bb71) | br1 -> {_121} (! bb70) ] 
    | bb70 = s0 [ s0 = add'0 {d_millis} {d_micros} (fun (_ret':t_Duration'0) ->  [ &sum <- _ret' ] s1) | s1 = bb72 ] 
    | bb72 = s0
      [ s0 = sub'0 {d_millis} {d_micros} (fun (_ret':t_Duration'0) ->  [ &difference <- _ret' ] s1) | s1 = bb73 ]
      
    | bb73 = s0
      [ s0 = {[@expl:assertion] [%#sduration23] view'0 sum = 1001000} s1
      | s1 = {[@expl:assertion] [%#sduration24] view'0 difference = 999000} s2
      | s2 = return' {_0} ]
      
    | bb71 = {[%#sduration25] false} any
    | bb67 = {[%#sduration26] false} any
    | bb63 = {[%#sduration27] false} any
    | bb59 = {[%#sduration28] false} any
    | bb55 = {[%#sduration29] false} any
    | bb51 = {[%#sduration30] false} any
    | bb47 = {[%#sduration31] false} any
    | bb43 = {[%#sduration32] false} any
    | bb39 = {[%#sduration33] false} any
    | bb35 = {[%#sduration34] false} any
    | bb31 = {[%#sduration35] false} any
    | bb27 = {[%#sduration36] false} any
    | bb24 = {[%#sduration37] false} any
    | bb21 = {[%#sduration38] false} any
    | bb18 = {[%#sduration39] false} any
    | bb12 = {[%#sduration40] false} any
    | bb4 = {[%#sduration41] false} any ]
    )
    [ & _0 : () = any_l ()
    | & zero : t_Duration'0 = any_l ()
    | & _5 : bool = any_l ()
    | & _6 : uint128 = any_l ()
    | & max : t_Duration'0 = any_l ()
    | & d_secs : t_Duration'0 = any_l ()
    | & d_millis : t_Duration'0 = any_l ()
    | & d_micros : t_Duration'0 = any_l ()
    | & d_nanos : t_Duration'0 = any_l ()
    | & _23 : bool = any_l ()
    | & _27 : bool = any_l ()
    | & _31 : bool = any_l ()
    | & _32 : uint64 = any_l ()
    | & _36 : bool = any_l ()
    | & _37 : uint32 = any_l ()
    | & _41 : bool = any_l ()
    | & _42 : uint32 = any_l ()
    | & _46 : bool = any_l ()
    | & _47 : uint32 = any_l ()
    | & _51 : bool = any_l ()
    | & _52 : uint128 = any_l ()
    | & _53 : uint32 = any_l ()
    | & _55 : uint128 = any_l ()
    | & _59 : bool = any_l ()
    | & _60 : uint128 = any_l ()
    | & _61 : uint32 = any_l ()
    | & _63 : uint128 = any_l ()
    | & _67 : bool = any_l ()
    | & _68 : uint128 = any_l ()
    | & _69 : uint32 = any_l ()
    | & _71 : uint128 = any_l ()
    | & _75 : bool = any_l ()
    | & _77 : t_Option'0 = any_l ()
    | & _82 : bool = any_l ()
    | & _84 : t_Option'0 = any_l ()
    | & _89 : bool = any_l ()
    | & _91 : t_Option'0 = any_l ()
    | & _96 : bool = any_l ()
    | & _98 : t_Option'0 = any_l ()
    | & _103 : bool = any_l ()
    | & _105 : t_Option'0 = any_l ()
    | & _109 : bool = any_l ()
    | & _111 : t_Option'0 = any_l ()
    | & _115 : bool = any_l ()
    | & _117 : t_Option'0 = any_l ()
    | & _121 : bool = any_l ()
    | & _123 : t_Option'0 = any_l ()
    | & sum : t_Duration'0 = any_l ()
    | & difference : t_Duration'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
