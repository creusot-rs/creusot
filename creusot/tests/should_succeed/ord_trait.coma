
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module OrdTrait_X
  type t
  
  let%span sord_trait0 = "../ord_trait.rs" 5 29 5 30
  
  let%span sord_trait1 = "../ord_trait.rs" 4 10 4 24
  
  let%span span2 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span3 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span4 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span5 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span6 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span7 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span33 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span34 = "" 0 0 0 0
  
  let%span span35 = "" 0 0 0 0
  
  let%span span36 = "../../../../creusot-contracts/src/std/cmp.rs" 36 26 36 77
  
  type deep_model_ty'0
  
  predicate invariant'2 (self : deep_model_ty'0)
  
  predicate inv'2 (_x : deep_model_ty'0)
  
  axiom inv'2 : forall x : deep_model_ty'0 . inv'2 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span2] inv'2 x)
   -> ([%#span3] inv'2 y)  -> ([%#span4] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span5] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span6] inv'2 x)  -> ([%#span7] inv'2 y)  -> ([%#span8] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span9] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span10] inv'2 x)  -> ([%#span11] inv'2 y)  -> ([%#span12] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span13] cmp_log'0 x y
  = o)
   -> ([%#span14] cmp_log'0 y z = o)
   -> ([%#span15] inv'2 x)  -> ([%#span16] inv'2 y)  -> ([%#span17] inv'2 z)  -> ([%#span18] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span19] inv'2 x)
   -> ([%#span20] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span21] inv'2 x)
   -> ([%#span22] inv'2 y)  -> ([%#span23] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span24] inv'2 x)
   -> ([%#span25] inv'2 y)  -> ([%#span26] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span27] inv'2 x)
   -> ([%#span28] inv'2 y)  -> ([%#span29] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span30] inv'2 x)
   -> ([%#span31] inv'2 y)  -> ([%#span32] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : t)
  
  function deep_model'2 (self : t) : deep_model_ty'0
  
  function deep_model'1 (self : t) : deep_model_ty'0 =
    [%#span33] deep_model'2 self
  
  function deep_model'0 (self : t) : deep_model_ty'0 =
    [%#span33] deep_model'1 self
  
  let rec le'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] [%#span35] inv'1 other}
    {[@expl:precondition] [%#span34] inv'1 self}
    any
    [ return' (result:bool)-> {[%#span36] result = le_log'0 (deep_model'0 self) (deep_model'0 other)}
      (! return' {result}) ]
    
  
  let rec x (x:t) (return'  (ret:bool))= {[%#sord_trait0] inv'0 x}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_5 <- x ] s1 | s1 = le'0 {x} {_5} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2) | s2 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 _5} s1
      | s1 = -{resolve'0 _5}- s2
      | s2 = {[@expl:type invariant] inv'0 x} s3
      | s3 = -{resolve'0 x}- s4
      | s4 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () | & x : t = x | & _5 : t = any_l () ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#sord_trait1] result = true} (! return' {result}) ]
    
end
module OrdTrait_GtOrLe
  type t
  
  let%span sord_trait0 = "../ord_trait.rs" 13 36 13 37
  
  let%span sord_trait1 = "../ord_trait.rs" 13 43 13 44
  
  let%span sord_trait2 = "../ord_trait.rs" 12 10 12 60
  
  let%span span3 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span4 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span5 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span6 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span7 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span34 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span35 = "" 0 0 0 0
  
  let%span span36 = "" 0 0 0 0
  
  let%span span37 = "../../../../creusot-contracts/src/std/cmp.rs" 42 26 42 77
  
  type deep_model_ty'0
  
  predicate invariant'2 (self : deep_model_ty'0)
  
  predicate inv'2 (_x : deep_model_ty'0)
  
  axiom inv'2 : forall x : deep_model_ty'0 . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span3] inv'2 x)
   -> ([%#span4] inv'2 y)  -> ([%#span5] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span6] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span7] inv'2 x)  -> ([%#span8] inv'2 y)  -> ([%#span9] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span10] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span11] inv'2 x)  -> ([%#span12] inv'2 y)  -> ([%#span13] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span14] cmp_log'0 x y
  = o)
   -> ([%#span15] cmp_log'0 y z = o)
   -> ([%#span16] inv'2 x)  -> ([%#span17] inv'2 y)  -> ([%#span18] inv'2 z)  -> ([%#span19] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span20] inv'2 x)
   -> ([%#span21] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span22] inv'2 x)
   -> ([%#span23] inv'2 y)  -> ([%#span24] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span25] inv'2 x)
   -> ([%#span26] inv'2 y)  -> ([%#span27] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span28] inv'2 x)
   -> ([%#span29] inv'2 y)  -> ([%#span30] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span31] inv'2 x)
   -> ([%#span32] inv'2 y)  -> ([%#span33] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  function deep_model'0 (self : t) : deep_model_ty'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  function deep_model'2 (self : t) : deep_model_ty'0 =
    [%#span34] deep_model'0 self
  
  function deep_model'1 (self : t) : deep_model_ty'0 =
    [%#span34] deep_model'2 self
  
  let rec ge'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] [%#span36] inv'1 other}
    {[@expl:precondition] [%#span35] inv'1 self}
    any
    [ return' (result:bool)-> {[%#span37] result = ge_log'0 (deep_model'1 self) (deep_model'1 other)}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : t)
  
  let rec gt_or_le (x:t) (y:t) (return'  (ret:bool))= {[%#sord_trait1] inv'0 y}
    {[%#sord_trait0] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_6 <- y ] s1
      | s1 = {[@expl:type invariant] inv'0 y} s2
      | s2 = -{resolve'0 y}- s3
      | s3 = ge'0 {x} {_6} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 _6} s1
      | s1 = -{resolve'0 _6}- s2
      | s2 = {[@expl:type invariant] inv'0 x} s3
      | s3 = -{resolve'0 x}- s4
      | s4 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () | & x : t = x | & y : t = y | & _6 : t = any_l () ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#sord_trait2] result
      = le_log'0 (deep_model'0 y) (deep_model'0 x)}
      (! return' {result}) ]
    
end
module OrdTrait_GtOrLeInt
  let%span sord_trait0 = "../ord_trait.rs" 20 10 20 30
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  let rec gt_or_le_int (x:usize) (y:usize) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 = UIntSize.le {x} {y} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () | & x : usize = x | & y : usize = y ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#sord_trait0] result = (UIntSize.to_int x <= UIntSize.to_int y)}
      (! return' {result}) ]
    
end
