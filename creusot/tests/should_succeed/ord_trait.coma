
module T_core__cmp__Ordering
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Less (input:t_Ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec v_Equal (input:t_Ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec v_Greater (input:t_Ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module M_ord_trait__x
  type t
  
  let%span sord_trait0 = "../ord_trait.rs" 5 29 5 30
  
  let%span sord_trait1 = "../ord_trait.rs" 4 10 4 24
  
  let%span span2 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span3 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span4 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span5 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span6 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span7 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span15 = "../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span16 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span17 = "" 0 0 0 0
  
  let%span span18 = "" 0 0 0 0
  
  let%span span19 = "../../../../creusot-contracts/src/std/cmp.rs" 36 26 36 77
  
  predicate invariant'2 (self : t)
  
  predicate inv'2 (_1 : t)
  
  axiom inv'2 : forall x : t . inv'2 x = true
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span2] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span3] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span4] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span5] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span6] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span7] cmp_log'0 x y
  = o)  -> ([%#span8] cmp_log'0 y z = o)  -> ([%#span9] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span10] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span11] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span12] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span13] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span14] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate inv'0 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : t) =
    [%#span15] inv'0 self
  
  predicate inv'1 (_1 : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  predicate invariant'0 (self : t) =
    [%#span15] inv'2 self
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  function deep_model'2 (self : t) : t_DeepModelTy'0
  
  function deep_model'1 (self : t) : t_DeepModelTy'0 =
    [%#span16] deep_model'2 self
  
  function deep_model'0 (self : t) : t_DeepModelTy'0 =
    [%#span16] deep_model'1 self
  
  let rec le'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] [%#span18] inv'1 other}
    {[@expl:precondition] [%#span17] inv'1 self}
    any
    [ return' (result:bool)-> {[%#span19] result = le_log'0 (deep_model'0 self) (deep_model'0 other)}
      (! return' {result}) ]
    
  
  let rec x (x:t) (return'  (ret:bool))= {[%#sord_trait0] inv'0 x}
    (! bb0
    [ bb0 = s0 [ s0 = le'0 {x} {x} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ]  | bb1 = return' {_0} ]
    ) [ & _0 : bool = any_l () | & x : t = x ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#sord_trait1] result = true} (! return' {result}) ]
    
end
module M_ord_trait__gt_or_le
  type t
  
  let%span sord_trait0 = "../ord_trait.rs" 13 36 13 37
  
  let%span sord_trait1 = "../ord_trait.rs" 13 43 13 44
  
  let%span sord_trait2 = "../ord_trait.rs" 12 10 12 60
  
  let%span span3 = "../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span4 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span5 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span6 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span7 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span17 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span18 = "" 0 0 0 0
  
  let%span span19 = "" 0 0 0 0
  
  let%span span20 = "../../../../creusot-contracts/src/std/cmp.rs" 42 26 42 77
  
  predicate invariant'2 (self : t)
  
  predicate inv'2 (_1 : t)
  
  axiom inv'2 : forall x : t . inv'2 x = true
  
  predicate inv'0 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : t) =
    [%#span3] inv'0 self
  
  predicate inv'1 (_1 : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span4] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span5] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span6] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span7] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span8] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span9] cmp_log'0 x y
  = o)  -> ([%#span10] cmp_log'0 y z = o)  -> ([%#span11] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span12] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span13] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span14] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span15] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span16] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate invariant'0 (self : t) =
    [%#span3] inv'2 self
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  function deep_model'0 (self : t) : t_DeepModelTy'0
  
  use prelude.prelude.Intrinsic
  
  function deep_model'2 (self : t) : t_DeepModelTy'0 =
    [%#span17] deep_model'0 self
  
  function deep_model'1 (self : t) : t_DeepModelTy'0 =
    [%#span17] deep_model'2 self
  
  let rec ge'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] [%#span19] inv'1 other}
    {[@expl:precondition] [%#span18] inv'1 self}
    any
    [ return' (result:bool)-> {[%#span20] result = ge_log'0 (deep_model'1 self) (deep_model'1 other)}
      (! return' {result}) ]
    
  
  let rec gt_or_le (x:t) (y:t) (return'  (ret:bool))= {[%#sord_trait1] inv'0 y}
    {[%#sord_trait0] inv'0 x}
    (! bb0
    [ bb0 = s0 [ s0 = ge'0 {x} {y} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ]  | bb1 = return' {_0} ]
    ) [ & _0 : bool = any_l () | & x : t = x | & y : t = y ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#sord_trait2] result
      = le_log'0 (deep_model'0 y) (deep_model'0 x)}
      (! return' {result}) ]
    
end
module M_ord_trait__gt_or_le_int
  let%span sord_trait0 = "../ord_trait.rs" 20 10 20 30
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  let rec gt_or_le_int (x:usize) (y:usize) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 = UIntSize.le {x} {y} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () | & x : usize = x | & y : usize = y ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#sord_trait0] result = (UIntSize.to_int x <= UIntSize.to_int y)}
      (! return' {result}) ]
    
end
