
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
  function any_l (_ : 'b) : 'a
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module OrdTrait_X
  type t
  type deep_model_ty'0
  predicate invariant'2 (self : deep_model_ty'0)
  let rec invariant'2 (self:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : deep_model_ty'0)
  let rec inv'2 (_x:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : deep_model_ty'0 . inv'2 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Core_Cmp_Ordering_Type.t_ordering
  let rec cmp_log'0 (self:deep_model_ty'0) (_2:deep_model_ty'0) (return'  (ret:Core_Cmp_Ordering_Type.t_ordering))= any
    [ return' (result:Core_Cmp_Ordering_Type.t_ordering)-> {result = cmp_log'0 self _2} (! return' {result}) ]
    
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec eq_cmp'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv'2 x}
    any [ return' (result:())-> {result = eq_cmp'0 x y} (! return' {result}) ] 
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y)
  = (cmp_log'0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec antisym2'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv'2 x}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log'0 x y
    = Core_Cmp_Ordering_Type.C_Greater}
    any [ return' (result:())-> {result = antisym2'0 x y} (! return' {result}) ] 
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log'0 x y
  = Core_Cmp_Ordering_Type.C_Greater)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log'0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec antisym1'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv'2 x}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log'0 x y
    = Core_Cmp_Ordering_Type.C_Less}
    any [ return' (result:())-> {result = antisym1'0 x y} (! return' {result}) ] 
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log'0 x y
  = Core_Cmp_Ordering_Type.C_Less)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log'0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  let rec trans'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (z:deep_model_ty'0) (o:Core_Cmp_Ordering_Type.t_ordering) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv'2 z}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv'2 x}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log'0 y z = o}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log'0 x y = o}
    any [ return' (result:())-> {result = trans'0 x y z o} (! return' {result}) ] 
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log'0 x y
  = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log'0 y z = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv'2 z)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log'0 x z = o)
  function refl'0 (x : deep_model_ty'0) : ()
  let rec refl'0 (x:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv'2 x}
    any [ return' (result:())-> {result = refl'0 x} (! return' {result}) ] 
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log'0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  let rec gt_log'0 (self:deep_model_ty'0) (o:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = gt_log'0 self o} (! return' {result}) ]
    
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec cmp_gt_log'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv'2 x}
    any [ return' (result:())-> {result = cmp_gt_log'0 x y} (! return' {result}) ] 
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log'0 x y
  = (cmp_log'0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  let rec ge_log'0 (self:deep_model_ty'0) (o:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = ge_log'0 self o} (! return' {result}) ]
    
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec cmp_ge_log'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv'2 x}
    any [ return' (result:())-> {result = cmp_ge_log'0 x y} (! return' {result}) ] 
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log'0 x y
  = (cmp_log'0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  let rec lt_log'0 (self:deep_model_ty'0) (o:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = lt_log'0 self o} (! return' {result}) ]
    
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec cmp_lt_log'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv'2 x}
    any [ return' (result:())-> {result = cmp_lt_log'0 x y} (! return' {result}) ] 
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log'0 x y
  = (cmp_log'0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  let rec le_log'0 (self:deep_model_ty'0) (o:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = le_log'0 self o} (! return' {result}) ]
    
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec cmp_le_log'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv'2 x}
    any [ return' (result:())-> {result = cmp_le_log'0 x y} (! return' {result}) ] 
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log'0 x y
  = (cmp_log'0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  predicate invariant'0 (self : t)
  let rec invariant'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : t)
  let rec inv'0 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : t . inv'0 x = true
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'0 (self : t)
  let rec resolve'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  function deep_model'2 (self : t) : deep_model_ty'0
  let rec deep_model'2 (self:t) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'2 self} (! return' {result}) ]
    
  function deep_model'1 (self : t) : deep_model_ty'0 =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'2 self
  let rec deep_model'1 (self:t) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'1 self} (! return' {result}) ]
    
  function deep_model'0 (self : t) : deep_model_ty'0 =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'1 self
  let rec deep_model'0 (self:t) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'0 self} (! return' {result}) ]
    
  let rec le'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] inv'1 other}
    {[@expl:precondition] inv'1 self}
    any
    [ return' (result:bool)-> {[#"../../../../creusot-contracts/src/std/cmp.rs" 36 26 36 77] result
      = le_log'0 (deep_model'0 self) (deep_model'0 other)}
      (! return' {result}) ]
    
  let rec x (x:t) (return'  (ret:bool))= {[#"../ord_trait.rs" 5 29 5 30] inv'0 x}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_5 <- x ] s1 | s1 = le'0 {x} {_5} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2) | s2 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 _5} s1
      | s1 = -{resolve'0 _5}- s2
      | s2 = {[@expl:type invariant] inv'0 x} s3
      | s3 = -{resolve'0 x}- s4
      | s4 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () : bool | & x : t = x | & _5 : t = any_l () : t ] 
    [ return' (result:bool)-> {[@expl:postcondition] [#"../ord_trait.rs" 4 10 4 24] result = true}
      (! return' {result}) ]
    
end
module OrdTrait_GtOrLe
  type t
  type deep_model_ty'0
  predicate invariant'2 (self : deep_model_ty'0)
  let rec invariant'2 (self:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : deep_model_ty'0)
  let rec inv'2 (_x:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : deep_model_ty'0 . inv'2 x = true
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Core_Cmp_Ordering_Type.t_ordering
  let rec cmp_log'0 (self:deep_model_ty'0) (_2:deep_model_ty'0) (return'  (ret:Core_Cmp_Ordering_Type.t_ordering))= any
    [ return' (result:Core_Cmp_Ordering_Type.t_ordering)-> {result = cmp_log'0 self _2} (! return' {result}) ]
    
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec eq_cmp'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv'2 x}
    any [ return' (result:())-> {result = eq_cmp'0 x y} (! return' {result}) ] 
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y)
  = (cmp_log'0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec antisym2'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv'2 x}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log'0 x y
    = Core_Cmp_Ordering_Type.C_Greater}
    any [ return' (result:())-> {result = antisym2'0 x y} (! return' {result}) ] 
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log'0 x y
  = Core_Cmp_Ordering_Type.C_Greater)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log'0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec antisym1'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv'2 x}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log'0 x y
    = Core_Cmp_Ordering_Type.C_Less}
    any [ return' (result:())-> {result = antisym1'0 x y} (! return' {result}) ] 
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log'0 x y
  = Core_Cmp_Ordering_Type.C_Less)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log'0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  let rec trans'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (z:deep_model_ty'0) (o:Core_Cmp_Ordering_Type.t_ordering) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv'2 z}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv'2 x}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log'0 y z = o}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log'0 x y = o}
    any [ return' (result:())-> {result = trans'0 x y z o} (! return' {result}) ] 
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log'0 x y
  = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log'0 y z = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv'2 z)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log'0 x z = o)
  function refl'0 (x : deep_model_ty'0) : ()
  let rec refl'0 (x:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv'2 x}
    any [ return' (result:())-> {result = refl'0 x} (! return' {result}) ] 
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log'0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  let rec gt_log'0 (self:deep_model_ty'0) (o:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = gt_log'0 self o} (! return' {result}) ]
    
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec cmp_gt_log'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv'2 x}
    any [ return' (result:())-> {result = cmp_gt_log'0 x y} (! return' {result}) ] 
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log'0 x y
  = (cmp_log'0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  let rec ge_log'0 (self:deep_model_ty'0) (o:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = ge_log'0 self o} (! return' {result}) ]
    
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec cmp_ge_log'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv'2 x}
    any [ return' (result:())-> {result = cmp_ge_log'0 x y} (! return' {result}) ] 
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log'0 x y
  = (cmp_log'0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  let rec lt_log'0 (self:deep_model_ty'0) (o:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = lt_log'0 self o} (! return' {result}) ]
    
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec cmp_lt_log'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv'2 x}
    any [ return' (result:())-> {result = cmp_lt_log'0 x y} (! return' {result}) ] 
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log'0 x y
  = (cmp_log'0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  let rec le_log'0 (self:deep_model_ty'0) (o:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = le_log'0 self o} (! return' {result}) ]
    
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  let rec cmp_le_log'0 (x:deep_model_ty'0) (y:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv'2 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv'2 x}
    any [ return' (result:())-> {result = cmp_le_log'0 x y} (! return' {result}) ] 
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv'2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv'2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log'0 x y
  = (cmp_log'0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant'0 (self : t)
  let rec invariant'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : t)
  let rec inv'0 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : t . inv'0 x = true
  function deep_model'0 (self : t) : deep_model_ty'0
  let rec deep_model'0 (self:t) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  use prelude.Intrinsic
  function deep_model'2 (self : t) : deep_model_ty'0 =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'0 self
  let rec deep_model'2 (self:t) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'2 self} (! return' {result}) ]
    
  function deep_model'1 (self : t) : deep_model_ty'0 =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'2 self
  let rec deep_model'1 (self:t) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'1 self} (! return' {result}) ]
    
  let rec ge'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] inv'1 other}
    {[@expl:precondition] inv'1 self}
    any
    [ return' (result:bool)-> {[#"../../../../creusot-contracts/src/std/cmp.rs" 42 26 42 77] result
      = ge_log'0 (deep_model'1 self) (deep_model'1 other)}
      (! return' {result}) ]
    
  predicate resolve'0 (self : t)
  let rec resolve'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec gt_or_le (x:t) (y:t) (return'  (ret:bool))= {[#"../ord_trait.rs" 13 43 13 44] inv'0 y}
    {[#"../ord_trait.rs" 13 36 13 37] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_6 <- y ] s1
      | s1 = {[@expl:type invariant] inv'0 y} s2
      | s2 = -{resolve'0 y}- s3
      | s3 = ge'0 {x} {_6} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 _6} s1
      | s1 = -{resolve'0 _6}- s2
      | s2 = {[@expl:type invariant] inv'0 x} s3
      | s3 = -{resolve'0 x}- s4
      | s4 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () : bool | & x : t = x | & y : t = y | & _6 : t = any_l () : t ] 
    [ return' (result:bool)-> {[@expl:postcondition] [#"../ord_trait.rs" 12 10 12 60] result
      = le_log'0 (deep_model'0 y) (deep_model'0 x)}
      (! return' {result}) ]
    
end
module OrdTrait_GtOrLeInt
  use prelude.UIntSize
  use prelude.Int
  use prelude.Intrinsic
  use prelude.UIntSize
  let rec gt_or_le_int (x:usize) (y:usize) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 = UIntSize.le {x} {y} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () : bool | & x : usize = x | & y : usize = y ] 
    [ return' (result:bool)-> {[@expl:postcondition] [#"../ord_trait.rs" 20 10 20 30] result
      = (UIntSize.to_int x <= UIntSize.to_int y)}
      (! return' {result}) ]
    
end
