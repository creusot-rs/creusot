module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module C04AssocPrec_RespectPrec_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  val respect_prec (x : (uint32, uint32)) : ()
    ensures { (let (a, _) = x in a) = (let (_, a) = x in a) }
    ensures { div (Int32.to_int (5 : int32) * Int32.to_int (3 : int32)) (Int32.to_int (2 : int32)) <> Int32.to_int (4 : int32) * (Int32.to_int (40 : int32) + Int32.to_int (1 : int32)) }
    ensures { Int32.to_int (5 : int32) = Int32.to_int (3 : int32) -> Int32.to_int (2 : int32) + Int32.to_int (1 : int32) = Int32.to_int (3 : int32) }
    
end
module C04AssocPrec_RespectPrec
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = (uint32, uint32)
  let rec cfg respect_prec (x : (uint32, uint32)) : ()
    ensures { (let (a, _) = x in a) = (let (_, a) = x in a) }
    ensures { div (Int32.to_int (5 : int32) * Int32.to_int (3 : int32)) (Int32.to_int (2 : int32)) <> Int32.to_int (4 : int32) * (Int32.to_int (40 : int32) + Int32.to_int (1 : int32)) }
    ensures { Int32.to_int (5 : int32) = Int32.to_int (3 : int32) -> Int32.to_int (2 : int32) + Int32.to_int (1 : int32) = Int32.to_int (3 : int32) }
    
   = 
  var _0 : ();
  var x_1 : (uint32, uint32);
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve x_1 };
    return _0
  }
  
end
module C04AssocPrec_RespectAssoc_Interface
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int32
  val respect_assoc () : ()
    ensures { UInt32.to_int (0 : uint32) + UInt32.to_int (1 : uint32) = Int32.to_int (0 : int32) }
    
end
module C04AssocPrec_RespectAssoc
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int32
  let rec cfg respect_assoc () : ()
    ensures { UInt32.to_int (0 : uint32) + UInt32.to_int (1 : uint32) = Int32.to_int (0 : int32) }
    
   = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
