module M_02_operators__division [#"02_operators.rs" 8 0 8 40]
  let%span s02_operators0 = "02_operators.rs" 9 4 9 9
  let%span s02_operators1 = "02_operators.rs" 7 11 7 17
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt64
  
  meta "compute_max_steps" 1000000
  
  let rec division'0 (x:UInt64.t) (y:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:division requires] [%#s02_operators1] UInt64.to_uint y
    > 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- y ] s1
      | s1 = UInt64.eq {_5} {[%#s02_operators0] (0 : UInt64.t)} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s2)
      | s2 = {[@expl:division by zero] [%#s02_operators0] not _6} s3
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = UInt64.div {x} {_5} (fun (_ret':UInt64.t) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    )
    [ & _0 : UInt64.t = any_l ()
    | & x : UInt64.t = x
    | & y : UInt64.t = y
    | & _5 : UInt64.t = any_l ()
    | & _6 : bool = any_l () ]
     [ return' (result:UInt64.t)-> (! return' {result}) ] 
end
module M_02_operators__modulus [#"02_operators.rs" 23 0 23 39]
  let%span s02_operators0 = "02_operators.rs" 24 4 24 9
  let%span s02_operators1 = "02_operators.rs" 22 11 22 17
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt64
  
  meta "compute_max_steps" 1000000
  
  let rec modulus'0 (x:UInt64.t) (y:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:modulus requires] [%#s02_operators1] UInt64.to_uint y
    > 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- y ] s1
      | s1 = UInt64.eq {_5} {[%#s02_operators0] (0 : UInt64.t)} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s2)
      | s2 = {[@expl:remainder by zero] [%#s02_operators0] not _6} s3
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = UInt64.rem {x} {_5} (fun (_ret':UInt64.t) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    )
    [ & _0 : UInt64.t = any_l ()
    | & x : UInt64.t = x
    | & y : UInt64.t = y
    | & _5 : UInt64.t = any_l ()
    | & _6 : bool = any_l () ]
     [ return' (result:UInt64.t)-> (! return' {result}) ] 
end
module M_02_operators__multiply [#"02_operators.rs" 38 0 38 40]
  let%span s02_operators0 = "02_operators.rs" 37 11 37 33
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  let rec multiply'0 (x:UInt64.t) (y:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:multiply requires] [%#s02_operators0] UInt64.to_uint x
    * UInt64.to_uint y
    <= UInt64.to_uint (v_MAX'0 : UInt64.t)}
    (! bb0
    [ bb0 = s0 [ s0 = UInt64.mul {x} {y} (fun (_ret':UInt64.t) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    ) [ & _0 : UInt64.t = any_l () | & x : UInt64.t = x | & y : UInt64.t = y ] 
    [ return' (result:UInt64.t)-> (! return' {result}) ]
    
end
module M_02_operators__add [#"02_operators.rs" 48 0 48 35]
  let%span s02_operators0 = "02_operators.rs" 47 11 47 33
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  let rec add'0 (x:UInt64.t) (y:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:add requires] [%#s02_operators0] UInt64.to_uint x
    + UInt64.to_uint y
    <= UInt64.to_uint (v_MAX'0 : UInt64.t)}
    (! bb0
    [ bb0 = s0 [ s0 = UInt64.add {x} {y} (fun (_ret':UInt64.t) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    ) [ & _0 : UInt64.t = any_l () | & x : UInt64.t = x | & y : UInt64.t = y ] 
    [ return' (result:UInt64.t)-> (! return' {result}) ]
    
end
module M_02_operators__sub [#"02_operators.rs" 63 0 63 35]
  let%span s02_operators0 = "02_operators.rs" 62 11 62 23
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt64
  
  meta "compute_max_steps" 1000000
  
  let rec sub'0 (x:UInt64.t) (y:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:sub requires] [%#s02_operators0] UInt64.to_uint x
    - UInt64.to_uint y
    >= 0}
    (! bb0
    [ bb0 = s0 [ s0 = UInt64.sub {x} {y} (fun (_ret':UInt64.t) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    ) [ & _0 : UInt64.t = any_l () | & x : UInt64.t = x | & y : UInt64.t = y ] 
    [ return' (result:UInt64.t)-> (! return' {result}) ]
    
end
module M_02_operators__expression [#"02_operators.rs" 77 0 77 51]
  let%span s02_operators0 = "02_operators.rs" 78 4 78 9
  let%span s02_operators1 = "02_operators.rs" 78 17 78 24
  let%span s02_operators2 = "02_operators.rs" 74 11 74 17
  let%span s02_operators3 = "02_operators.rs" 75 11 75 38
  let%span s02_operators4 = "02_operators.rs" 76 10 76 16
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  let rec expression'0 (x:UInt64.t) (y:UInt64.t) (z:UInt64.t) (return'  (ret:bool))= {[@expl:expression requires #0] [%#s02_operators2] UInt64.to_uint y
    > 0}
    {[@expl:expression requires #1] [%#s02_operators3] div (UInt64.to_uint x) (UInt64.to_uint y) * UInt64.to_uint z
    <= UInt64.to_uint (v_MAX'0 : UInt64.t)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_10 <- y ] s1
      | s1 = UInt64.eq {_10} {[%#s02_operators0] (0 : UInt64.t)} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s2)
      | s2 = {[@expl:division by zero] [%#s02_operators0] not _11} s3
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = UInt64.div {x} {_10} (fun (_ret':UInt64.t) ->  [ &_8 <- _ret' ] s1)
      | s1 = UInt64.mul {_8} {z} (fun (_ret':UInt64.t) ->  [ &_7 <- _ret' ] s2)
      | s2 =  [ &_16 <- y ] s3
      | s3 = UInt64.eq {_16} {[%#s02_operators1] (0 : UInt64.t)} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s4)
      | s4 = {[@expl:division by zero] [%#s02_operators1] not _17} s5
      | s5 = bb2 ]
      
    | bb2 = s0
      [ s0 = UInt64.div {x} {_16} (fun (_ret':UInt64.t) ->  [ &_14 <- _ret' ] s1)
      | s1 = UInt64.mul {_14} {z} (fun (_ret':UInt64.t) ->  [ &_13 <- _ret' ] s2)
      | s2 = UInt64.eq {_7} {_13} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s3)
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : bool = any_l ()
    | & x : UInt64.t = x
    | & y : UInt64.t = y
    | & z : UInt64.t = z
    | & _7 : UInt64.t = any_l ()
    | & _8 : UInt64.t = any_l ()
    | & _10 : UInt64.t = any_l ()
    | & _11 : bool = any_l ()
    | & _13 : UInt64.t = any_l ()
    | & _14 : UInt64.t = any_l ()
    | & _16 : UInt64.t = any_l ()
    | & _17 : bool = any_l () ]
     [ return' (result:bool)-> {[@expl:expression ensures] [%#s02_operators4] result} (! return' {result}) ] 
end
module M_02_operators__primitive_comparison [#"02_operators.rs" 92 0 92 29]
  let%span s02_operators0 = "02_operators.rs" 91 10 91 20
  let%span sord1 = "../../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord2 = "../../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord3 = "../../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord4 = "../../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord5 = "../../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord6 = "../../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord7 = "../../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord8 = "../../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord9 = "../../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord10 = "../../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord11 = "../../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord12 = "../../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord13 = "../../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span sord14 = "../../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt64
  
  type t_X'0  =
    { t_X__a'0: UInt64.t }
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.prelude.UInt64
  
  function cmp_log'0 (self : UInt64.t) (o : UInt64.t) : t_Ordering'0 =
    [%#sord14] if UInt64.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord13] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord11] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord12] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord9] cmp_log'0 x y = C_Less'0)
   -> ([%#sord10] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt64.t) (y : UInt64.t) (z : UInt64.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt64.t, y : UInt64.t, z : UInt64.t, o : t_Ordering'0 . ([%#sord6] cmp_log'0 x y = o)
   -> ([%#sord7] cmp_log'0 y z = o)  -> ([%#sord8] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt64.t) : ()
  
  axiom refl'0_spec : forall x : UInt64.t . [%#sord5] cmp_log'0 x x = C_Equal'0
  
  use prelude.prelude.UInt64
  
  function cmp_gt_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord4] UInt64.ugt x y = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.prelude.UInt64
  
  function cmp_ge_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord3] UInt64.uge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord2] UInt64.ult x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.prelude.UInt64
  
  function cmp_le_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord1] UInt64.ule x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  meta "compute_max_steps" 1000000
  
  let rec primitive_comparison'0 (x:t_X'0) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = any_l () ]
    
    [ return' (result:())-> {[@expl:primitive_comparison ensures] [%#s02_operators0] UInt64.ule x.t_X__a'0 x.t_X__a'0}
      (! return' {result}) ]
    
end
module M_02_operators__bool_eq [#"02_operators.rs" 95 0 95 36]
  let%span s02_operators0 = "02_operators.rs" 94 10 94 28
  
  use prelude.prelude.Bool
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec bool_eq'0 (a:bool) (b:bool) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- Bool.eq a b ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () | & a : bool = a | & b : bool = b ] 
    [ return' (result:bool)-> {[@expl:bool_eq ensures] [%#s02_operators0] result = (a = b)} (! return' {result}) ]
    
end
