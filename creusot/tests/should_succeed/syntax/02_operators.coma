
module C02Operators_Division
  use prelude.UIntSize
  use prelude.Intrinsic
  use prelude.Int
  use prelude.UIntSize
  let rec division (x:usize) (y:usize) (return'  (ret:usize))= {[#"../02_operators.rs" 7 11 7 17] UIntSize.to_int y > 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- y ] s1
      | s1 = UIntSize.eq {_5} {[#"../02_operators.rs" 9 4 9 9] (0 : usize)} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s2)
      | s2 = {[@expl:division by zero] [#"../02_operators.rs" 9 4 9 9] not _6} s3
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = UIntSize.div {x} {_5}
          (fun (_ret':usize) ->  [ &_0 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_5 <- _any ] s1) ] ))
      | s1 = return' {_0} ]
       ]
    )
    [ & _0 : usize = any_l () : usize
    | & x : usize = x
    | & y : usize = y
    | & _5 : usize = any_l () : usize
    | & _6 : bool = any_l () : bool ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module C02Operators_Modulus
  use prelude.UIntSize
  use prelude.Intrinsic
  use prelude.Int
  use prelude.UIntSize
  let rec modulus (x:usize) (y:usize) (return'  (ret:usize))= {[#"../02_operators.rs" 22 11 22 17] UIntSize.to_int y
    > 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- y ] s1
      | s1 = UIntSize.eq {_5} {[#"../02_operators.rs" 24 4 24 9] (0 : usize)} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s2)
      | s2 = {[@expl:remainder by zero] [#"../02_operators.rs" 24 4 24 9] not _6} s3
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = UIntSize.rem {x} {_5}
          (fun (_ret':usize) ->  [ &_0 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_5 <- _any ] s1) ] ))
      | s1 = return' {_0} ]
       ]
    )
    [ & _0 : usize = any_l () : usize
    | & x : usize = x
    | & y : usize = y
    | & _5 : usize = any_l () : usize
    | & _6 : bool = any_l () : bool ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module C02Operators_Multiply
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use prelude.UIntSize
  use prelude.Intrinsic
  let rec multiply (x:usize) (y:usize) (return'  (ret:usize))= {[#"../02_operators.rs" 37 11 37 33] UIntSize.to_int x
    * UIntSize.to_int y
    <= UIntSize.to_int (max'0 : usize)}
    (! bb0 [ bb0 = s0 [ s0 = UIntSize.mul {x} {y} (fun (_ret':usize) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ] )
    [ & _0 : usize = any_l () : usize | & x : usize = x | & y : usize = y ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module C02Operators_Add
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use prelude.UIntSize
  use prelude.Intrinsic
  let rec add (x:usize) (y:usize) (return'  (ret:usize))= {[#"../02_operators.rs" 47 11 47 33] UIntSize.to_int x
    + UIntSize.to_int y
    <= UIntSize.to_int (max'0 : usize)}
    (! bb0 [ bb0 = s0 [ s0 = UIntSize.add {x} {y} (fun (_ret':usize) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ] )
    [ & _0 : usize = any_l () : usize | & x : usize = x | & y : usize = y ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module C02Operators_Sub
  use prelude.UIntSize
  use prelude.Intrinsic
  use prelude.Int
  use prelude.UIntSize
  let rec sub (x:usize) (y:usize) (return'  (ret:usize))= {[#"../02_operators.rs" 62 11 62 23] UIntSize.to_int x
    - UIntSize.to_int y
    >= 0}
    (! bb0 [ bb0 = s0 [ s0 = UIntSize.sub {x} {y} (fun (_ret':usize) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ] )
    [ & _0 : usize = any_l () : usize | & x : usize = x | & y : usize = y ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module C02Operators_Expression
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use prelude.UIntSize
  use prelude.Intrinsic
  let rec expression (x:usize) (y:usize) (z:usize) (return'  (ret:bool))= {[#"../02_operators.rs" 75 11 75 38] div (UIntSize.to_int x) (UIntSize.to_int y)
    * UIntSize.to_int z
    <= UIntSize.to_int (max'0 : usize)}
    {[#"../02_operators.rs" 74 11 74 17] UIntSize.to_int y > 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_10 <- y ] s1
      | s1 = UIntSize.eq {_10} {[#"../02_operators.rs" 78 4 78 9] (0 : usize)}
          (fun (_ret':bool) ->  [ &_11 <- _ret' ] s2)
      | s2 = {[@expl:division by zero] [#"../02_operators.rs" 78 4 78 9] not _11} s3
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = UIntSize.div {x} {_10}
          (fun (_ret':usize) ->  [ &_8 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_10 <- _any ] s1) ] ))
      | s1 = UIntSize.mul {_8} {z}
          (fun (_ret':usize) ->  [ &_7 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_8 <- _any ] s2) ] ))
      | s2 =  [ &_16 <- y ] s3
      | s3 = UIntSize.eq {_16} {[#"../02_operators.rs" 78 17 78 24] (0 : usize)}
          (fun (_ret':bool) ->  [ &_17 <- _ret' ] s4)
      | s4 = {[@expl:division by zero] [#"../02_operators.rs" 78 17 78 24] not _17} s5
      | s5 = bb2 ]
      
    | bb2 = s0
      [ s0 = UIntSize.div {x} {_16}
          (fun (_ret':usize) ->  [ &_14 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_16 <- _any ] s1) ] ))
      | s1 = UIntSize.mul {_14} {z}
          (fun (_ret':usize) ->  [ &_13 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_14 <- _any ] s2) ] ))
      | s2 = UIntSize.eq {_7} {_13}
          (fun (_ret':bool) ->
             [ &_0 <- _ret' ] 
            (any [ any_ (_any:usize)-> (!  [ &_7 <- _any ] (any [ any_ (_any:usize)-> (!  [ &_13 <- _any ] s3) ] )) ] ))
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : bool = any_l () : bool
    | & x : usize = x
    | & y : usize = y
    | & z : usize = z
    | & _7 : usize = any_l () : usize
    | & _8 : usize = any_l () : usize
    | & _10 : usize = any_l () : usize
    | & _11 : bool = any_l () : bool
    | & _13 : usize = any_l () : usize
    | & _14 : usize = any_l () : usize
    | & _16 : usize = any_l () : usize
    | & _17 : bool = any_l () : bool ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [#"../02_operators.rs" 76 10 76 16] result} (! return' {result}) ]
    
end
module C02Operators_ExpressionLogic_Impl
  use prelude.UIntSize
  use prelude.Int
  constant x  : usize
  constant y  : usize
  constant z  : usize
  function expression_logic [#"../02_operators.rs" 83 0 83 57] (x : usize) (y : usize) (z : usize) : bool
  goal vc_expression_logic : [#"../02_operators.rs" 82 10 82 16] div x y * z = div x y * z
end
module C02Operators_X_Type
  use prelude.UIntSize
  use prelude.Int
  type t_x  =
    | C_X usize
    
  function any_l (_ : 'b) : 'a
  let rec t_x (input:t_x) (ret  (a:usize))= any
    [ good (a:usize)-> {C_X a = input} (! ret {a}) | bad (a:usize)-> {C_X a <> input} {false} any ]
    
  function x_a (self : t_x) : usize =
    match self with
      | C_X a -> a
      end
end
module C02Operators_PrimitiveComparison
  use C02Operators_X_Type as C02Operators_X_Type
  use prelude.Int
  use prelude.Intrinsic
  let rec primitive_comparison (x:C02Operators_X_Type.t_x) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../02_operators.rs" 92 30 92 32] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ] 
    [ return' (result:())-> {[@expl:postcondition] [#"../02_operators.rs" 91 10 91 20] C02Operators_X_Type.x_a x
      <= C02Operators_X_Type.x_a x}
      (! return' {result}) ]
    
end
module C02Operators_BoolEq
  use prelude.Intrinsic
  use prelude.Bool
  let rec bool_eq (a:bool) (b:bool) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- Bool.eq a b ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () : bool | & a : bool = a | & b : bool = b ] 
    [ return' (result:bool)-> {[@expl:postcondition] [#"../02_operators.rs" 94 10 94 28] result = (a = b)}
      (! return' {result}) ]
    
end
