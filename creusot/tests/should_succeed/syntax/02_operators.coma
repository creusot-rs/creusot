module M_02_operators__division [#"02_operators.rs" 8 0 8 40]
  let%span s02_operators0 = "02_operators.rs" 9 4 9 9
  let%span s02_operators1 = "02_operators.rs" 7 11 7 17
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  meta "compute_max_steps" 1000000
  
  let rec division (x:usize) (y:usize) (return'  (ret:usize))= {[%#s02_operators1] UIntSize.to_int y > 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- y ] s1
      | s1 = UIntSize.eq {_5} {[%#s02_operators0] (0 : usize)} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s2)
      | s2 = {[@expl:division by zero] [%#s02_operators0] not _6} s3
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = UIntSize.div {x} {_5} (fun (_ret':usize) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l () | & x : usize = x | & y : usize = y | & _5 : usize = any_l () | & _6 : bool = any_l () ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module M_02_operators__modulus [#"02_operators.rs" 23 0 23 39]
  let%span s02_operators0 = "02_operators.rs" 24 4 24 9
  let%span s02_operators1 = "02_operators.rs" 22 11 22 17
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  meta "compute_max_steps" 1000000
  
  let rec modulus (x:usize) (y:usize) (return'  (ret:usize))= {[%#s02_operators1] UIntSize.to_int y > 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- y ] s1
      | s1 = UIntSize.eq {_5} {[%#s02_operators0] (0 : usize)} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s2)
      | s2 = {[@expl:remainder by zero] [%#s02_operators0] not _6} s3
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = UIntSize.rem {x} {_5} (fun (_ret':usize) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l () | & x : usize = x | & y : usize = y | & _5 : usize = any_l () | & _6 : bool = any_l () ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module M_02_operators__multiply [#"02_operators.rs" 38 0 38 40]
  let%span s02_operators0 = "02_operators.rs" 37 11 37 33
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec multiply (x:usize) (y:usize) (return'  (ret:usize))= {[%#s02_operators0] UIntSize.to_int x * UIntSize.to_int y
    <= UIntSize.to_int (v_MAX'0 : usize)}
    (! bb0 [ bb0 = s0 [ s0 = UIntSize.mul {x} {y} (fun (_ret':usize) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ] )
    [ & _0 : usize = any_l () | & x : usize = x | & y : usize = y ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module M_02_operators__add [#"02_operators.rs" 48 0 48 35]
  let%span s02_operators0 = "02_operators.rs" 47 11 47 33
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec add (x:usize) (y:usize) (return'  (ret:usize))= {[%#s02_operators0] UIntSize.to_int x + UIntSize.to_int y
    <= UIntSize.to_int (v_MAX'0 : usize)}
    (! bb0 [ bb0 = s0 [ s0 = UIntSize.add {x} {y} (fun (_ret':usize) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ] )
    [ & _0 : usize = any_l () | & x : usize = x | & y : usize = y ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module M_02_operators__sub [#"02_operators.rs" 63 0 63 35]
  let%span s02_operators0 = "02_operators.rs" 62 11 62 23
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  meta "compute_max_steps" 1000000
  
  let rec sub (x:usize) (y:usize) (return'  (ret:usize))= {[%#s02_operators0] UIntSize.to_int x - UIntSize.to_int y
    >= 0}
    (! bb0 [ bb0 = s0 [ s0 = UIntSize.sub {x} {y} (fun (_ret':usize) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ] )
    [ & _0 : usize = any_l () | & x : usize = x | & y : usize = y ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module M_02_operators__expression [#"02_operators.rs" 77 0 77 51]
  let%span s02_operators0 = "02_operators.rs" 78 4 78 9
  let%span s02_operators1 = "02_operators.rs" 78 17 78 24
  let%span s02_operators2 = "02_operators.rs" 74 11 74 17
  let%span s02_operators3 = "02_operators.rs" 75 11 75 38
  let%span s02_operators4 = "02_operators.rs" 76 10 76 16
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec expression (x:usize) (y:usize) (z:usize) (return'  (ret:bool))= {[%#s02_operators3] div (UIntSize.to_int x) (UIntSize.to_int y)
    * UIntSize.to_int z
    <= UIntSize.to_int (v_MAX'0 : usize)}
    {[%#s02_operators2] UIntSize.to_int y > 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_10 <- y ] s1
      | s1 = UIntSize.eq {_10} {[%#s02_operators0] (0 : usize)} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s2)
      | s2 = {[@expl:division by zero] [%#s02_operators0] not _11} s3
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = UIntSize.div {x} {_10} (fun (_ret':usize) ->  [ &_8 <- _ret' ] s1)
      | s1 = UIntSize.mul {_8} {z} (fun (_ret':usize) ->  [ &_7 <- _ret' ] s2)
      | s2 =  [ &_16 <- y ] s3
      | s3 = UIntSize.eq {_16} {[%#s02_operators1] (0 : usize)} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s4)
      | s4 = {[@expl:division by zero] [%#s02_operators1] not _17} s5
      | s5 = bb2 ]
      
    | bb2 = s0
      [ s0 = UIntSize.div {x} {_16} (fun (_ret':usize) ->  [ &_14 <- _ret' ] s1)
      | s1 = UIntSize.mul {_14} {z} (fun (_ret':usize) ->  [ &_13 <- _ret' ] s2)
      | s2 = UIntSize.eq {_7} {_13} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s3)
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : bool = any_l ()
    | & x : usize = x
    | & y : usize = y
    | & z : usize = z
    | & _7 : usize = any_l ()
    | & _8 : usize = any_l ()
    | & _10 : usize = any_l ()
    | & _11 : bool = any_l ()
    | & _13 : usize = any_l ()
    | & _14 : usize = any_l ()
    | & _16 : usize = any_l ()
    | & _17 : bool = any_l () ]
     [ return' (result:bool)-> {[@expl:postcondition] [%#s02_operators4] result} (! return' {result}) ] 
end
module M_02_operators__expression_logic [#"02_operators.rs" 83 0 83 57]
  let%span s02_operators0 = "02_operators.rs" 82 10 82 16
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant x  : usize
  
  constant y  : usize
  
  constant z  : usize
  
  function expression_logic [#"02_operators.rs" 83 0 83 57] (x : usize) (y : usize) (z : usize) : bool
  
  goal vc_expression_logic : [%#s02_operators0] div x y * z = div x y * z
end
module T_02_operators__X [#"02_operators.rs" 87 0 87 8]
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_X  =
    | C_X usize
  
  let rec t_X (input:t_X) (ret  (a:usize))= any [ good (a:usize)-> {C_X a = input} (! ret {a}) ] 
  
  function t_X__a (self : t_X) : usize =
    match self with
      | C_X a -> a
      end
end
module M_02_operators__primitive_comparison [#"02_operators.rs" 92 0 92 29]
  let%span s02_operators0 = "02_operators.rs" 91 10 91 20
  
  use T_02_operators__X as X'0
  
  use prelude.prelude.Int
  
  use T_02_operators__X as T_02_operators__X
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec primitive_comparison (x:X'0.t_X) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s02_operators0] T_02_operators__X.t_X__a x
      <= T_02_operators__X.t_X__a x}
      (! return' {result}) ]
    
end
module M_02_operators__bool_eq [#"02_operators.rs" 95 0 95 36]
  let%span s02_operators0 = "02_operators.rs" 94 10 94 28
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Bool
  
  meta "compute_max_steps" 1000000
  
  let rec bool_eq (a:bool) (b:bool) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- Bool.eq a b ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () | & a : bool = a | & b : bool = b ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#s02_operators0] result = (a = b)} (! return' {result}) ]
    
end
