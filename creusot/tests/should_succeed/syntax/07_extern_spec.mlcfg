module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 9223372036854775807
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl1_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl1_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) =
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl1
  type t
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.alloc_vec_vec t a,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.alloc_vec_vec t a,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module C07ExternSpec_Main_Interface
  val main [@cfg:stackify] (_ : ()) : ()
end
module C07ExternSpec_Main
  use Type
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = bool, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = bool, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = bool, function Model0.model = Model0.model
  let rec cfg main [@cfg:stackify] [#"../07_extern_spec.rs" 4 0 9] (_ : ()) : () =
  var _0 : ();
  var v_1 : Type.alloc_vec_vec bool (Type.alloc_alloc_global);
  {
    goto BB0
  }
  BB0 {
    v_1 <- ([#"../07_extern_spec.rs" 6 23 33] New0.new ());
    goto BB1
  }
  BB1 {
    _0 <- ();
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve v_1 };
    return _0
  }
  
end
module C07ExternSpec_HasParams_Interface
  type v
  type u
  type x
  val has_params [@cfg:stackify] (a : v) (b : u) (c : x) : ()
end
module C07ExternSpec_HasParams
  type v
  type u
  type x
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = u
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = x
  let rec cfg has_params [@cfg:stackify] [#"../07_extern_spec.rs" 9 0 40] (a : v) (b : u) (c : x) : () =
  var _0 : ();
  var a_1 : v;
  var b_2 : u;
  var c_3 : x;
  {
    a_1 <- a;
    b_2 <- b;
    c_3 <- c;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve c_3 };
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve b_2 };
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve a_1 };
    return _0
  }
  
end
module C07ExternSpec_UsesA_Interface
  type t
  val uses_a [@cfg:stackify] (x : t) : ()
end
module C07ExternSpec_UsesA
  type t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  let rec cfg uses_a [@cfg:stackify] [#"../07_extern_spec.rs" 19 0 21] (x : t) : () =
  var _0 : ();
  var x_1 : t;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve x_1 };
    return _0
  }
  
end
module C07ExternSpec_Client_Interface
  type t
  val client [@cfg:stackify] (y : t) : ()
end
module C07ExternSpec_Client
  type t
  clone C07ExternSpec_UsesA_Interface as UsesA0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  let rec cfg client [@cfg:stackify] [#"../07_extern_spec.rs" 25 0 21] (y : t) : () =
  var _0 : ();
  var y_1 : t;
  var _2 : t;
  {
    y_1 <- y;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _2 };
    _2 <- y_1;
    _0 <- ([#"../07_extern_spec.rs" 26 4 13] UsesA0.uses_a _2);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module C07ExternSpec_RenamedParams_Interface
  type a
  type b
  type c
  val renamed_params [@cfg:stackify] (a : a) (b : b) (c : c) : ()
end
module C07ExternSpec_RenamedParams
  type a
  type b
  type c
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = a
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = b
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = c
  let rec cfg renamed_params [@cfg:stackify] [#"../07_extern_spec.rs" 29 0 44] (a : a) (b : b) (c : c) : () =
  var _0 : ();
  var a_1 : a;
  var b_2 : b;
  var c_3 : c;
  {
    a_1 <- a;
    b_2 <- b;
    c_3 <- c;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve c_3 };
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve b_2 };
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve a_1 };
    return _0
  }
  
end
module C07ExternSpec_Id_Interface
  type t
  function id (x : t) : t
end
module C07ExternSpec_Id
  type t
  function id [#"../07_extern_spec.rs" 32 0 19] (x : t) : t =
    [#"../07_extern_spec.rs" 32 0 19] x
end
