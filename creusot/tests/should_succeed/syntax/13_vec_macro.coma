
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_box 't 'a =
    | C_Box (Unique'0.t_unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module C13VecMacro_X
  let%span slib0 = "../../../../../creusot-contracts/src/lib.rs" 239 8 239 30
  
  let%span s13_vec_macro1 = "../13_vec_macro.rs" 7 20 7 34
  
  let%span s13_vec_macro2 = "../13_vec_macro.rs" 9 18 9 19
  
  let%span s13_vec_macro3 = "../13_vec_macro.rs" 9 21 9 22
  
  let%span s13_vec_macro4 = "../13_vec_macro.rs" 10 20 10 34
  
  let%span s13_vec_macro5 = "../13_vec_macro.rs" 12 18 12 19
  
  let%span s13_vec_macro6 = "../13_vec_macro.rs" 12 21 12 22
  
  let%span s13_vec_macro7 = "../13_vec_macro.rs" 12 24 12 25
  
  let%span s13_vec_macro8 = "../13_vec_macro.rs" 13 20 13 34
  
  let%span span9 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span10 = "" 0 0 0 0
  
  let%span span11 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span12 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span14 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span15 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span16 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span17 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span18 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span19 = "../../../../../creusot-contracts/src/std/boxed.rs" 20 8 20 31
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "../../../../../creusot-contracts/src/std/slice.rs" 325 18 325 35
  
  let%span span22 = "" 0 0 0 0
  
  let%span span23 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span24 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span25 = "../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  
  let%span span26 = "" 0 0 0 0
  
  let%span span27 = "../../../../../creusot-contracts/src/std/vec.rs" 174 22 174 41
  
  let%span span28 = "../../../../../creusot-contracts/src/std/vec.rs" 175 12 175 78
  
  let%span span29 = "" 0 0 0 0
  
  let%span span30 = "../../../../../creusot-contracts/src/std/vec.rs" 69 26 69 44
  
  let%span span31 = "" 0 0 0 0
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Slice
  
  predicate invariant'6 (self : slice int32) =
    [%#span9] true
  
  predicate inv'6 (_x : slice int32)
  
  axiom inv'6 : forall x : slice int32 . inv'6 x = true
  
  predicate invariant'5 (self : slice int32) =
    [%#span9] true
  
  predicate inv'5 (_x : slice int32)
  
  axiom inv'5 : forall x : slice int32 . inv'5 x = true
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq int32) =
    [%#span9] true
  
  predicate inv'4 (_x : Seq.seq int32)
  
  axiom inv'4 : forall x : Seq.seq int32 . inv'4 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span10] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'3 (_x : Vec'0.t_vec int32 (Global'0.t_global))
  
  function shallow_model'1 (self : Vec'0.t_vec int32 (Global'0.t_global)) : Seq.seq int32
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_vec int32 (Global'0.t_global) . ([%#span11] inv'3 self)
   -> ([%#span13] inv'4 (shallow_model'1 self))
  && ([%#span12] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'3 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span14] inv'4 (shallow_model'1 self)
  
  axiom inv'3 : forall x : Vec'0.t_vec int32 (Global'0.t_global) . inv'3 x = true
  
  predicate invariant'2 (self : int32) =
    [%#span9] true
  
  predicate inv'2 (_x : int32)
  
  axiom inv'2 : forall x : int32 . inv'2 x = true
  
  use prelude.prelude.UInt32
  
  predicate invariant'1 (self : Seq.seq uint32) =
    [%#span9] true
  
  predicate inv'1 (_x : Seq.seq uint32)
  
  axiom inv'1 : forall x : Seq.seq uint32 . inv'1 x = true
  
  use seq.Seq
  
  predicate inv'0 (_x : Vec'0.t_vec uint32 (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) : Seq.seq uint32
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec uint32 (Global'0.t_global) . ([%#span11] inv'0 self)
   -> ([%#span13] inv'1 (shallow_model'0 self))
  && ([%#span12] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span14] inv'1 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec uint32 (Global'0.t_global) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Slice
  
  function shallow_model'3 (self : slice int32) : Seq.seq int32
  
  axiom shallow_model'3_spec : forall self : slice int32 . ([%#span15] inv'6 self)
   -> ([%#span18] inv'4 (shallow_model'3 self))
  && ([%#span17] shallow_model'3 self = Slice.id self)
  && ([%#span16] Seq.length (shallow_model'3 self) <= UIntSize.to_int (max'0 : usize))
  
  function shallow_model'2 (self : slice int32) : Seq.seq int32 =
    [%#span19] shallow_model'3 self
  
  let rec into_vec'0 (self:slice int32) (return'  (ret:Vec'0.t_vec int32 (Global'0.t_global)))= {[@expl:precondition] [%#span20] inv'5 self}
    any
    [ return' (result:Vec'0.t_vec int32 (Global'0.t_global))-> {[%#span22] inv'3 result}
      {[%#span21] shallow_model'1 result = shallow_model'2 self}
      (! return' {result}) ]
    
  
  predicate resolve'3 (self : int32) =
    [%#span23] true
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec int32 (Global'0.t_global)) (ix : int) : int32 =
    [%#span24] Seq.get (shallow_model'1 self) ix
  
  predicate resolve'1 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span25] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'1 self)  -> resolve'3 (index_logic'1 self i)
  
  let rec from_elem'0 (elem:int32) (n:usize) (return'  (ret:Vec'0.t_vec int32 (Global'0.t_global)))= {[@expl:precondition] [%#span26] inv'2 elem}
    any
    [ return' (result:Vec'0.t_vec int32 (Global'0.t_global))-> {[%#span29] inv'3 result}
      {[%#span28] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'1 result i = elem}
      {[%#span27] Seq.length (shallow_model'1 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : uint32) =
    [%#span23] true
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec uint32 (Global'0.t_global)) (ix : int) : uint32 =
    [%#span24] Seq.get (shallow_model'0 self) ix
  
  predicate resolve'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span25] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 self)  -> resolve'2 (index_logic'0 self i)
  
  let rec new'0 (_1:()) (return'  (ret:Vec'0.t_vec uint32 (Global'0.t_global)))= any
    [ return' (result:Vec'0.t_vec uint32 (Global'0.t_global))-> {[%#span31] inv'0 result}
      {[%#span30] Seq.length (shallow_model'0 result) = 0}
      (! return' {result}) ]
    
  
  let rec x (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#slib0] ()} (fun (_ret':Vec'0.t_vec uint32 (Global'0.t_global)) ->  [ &v0 <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 v0}- s1
      | s1 = {[@expl:assertion] [%#s13_vec_macro1] Seq.length (shallow_model'0 v0) = 0} s2
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = from_elem'0 {[%#s13_vec_macro2] (0 : int32)} {[%#s13_vec_macro3] (2 : usize)}
          (fun (_ret':Vec'0.t_vec int32 (Global'0.t_global)) ->  [ &v1 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = -{resolve'1 v1}- s1
      | s1 = {[@expl:assertion] [%#s13_vec_macro4] Seq.length (shallow_model'1 v1) = 2} s2
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 = any
        [ any_ (__arr_temp:array int32)-> (! -{Seq.get (__arr_temp.elts) 0 = ([%#s13_vec_macro5] (1 : int32))
          /\ Seq.get (__arr_temp.elts) 1 = ([%#s13_vec_macro6] (2 : int32))
          /\ Seq.get (__arr_temp.elts) 2 = ([%#s13_vec_macro7] (3 : int32)) /\ Seq.length (__arr_temp.elts) = 3}-
           [ &_10 <- __arr_temp ] 
          s1) ]
        
      | s1 = bb5 ]
      
    | bb5 = bb6
    | bb6 = s0
      [ s0 = into_vec'0 {_10} (fun (_ret':Vec'0.t_vec int32 (Global'0.t_global)) ->  [ &v2 <- _ret' ] s1) | s1 = bb7 ]
      
    | bb7 = s0
      [ s0 = -{resolve'1 v2}- s1
      | s1 = {[@expl:assertion] [%#s13_vec_macro8] Seq.length (shallow_model'1 v2) = 3} s2
      | s2 = bb8 ]
      
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v0 : Vec'0.t_vec uint32 (Global'0.t_global) = any_l ()
    | & v1 : Vec'0.t_vec int32 (Global'0.t_global) = any_l ()
    | & v2 : Vec'0.t_vec int32 (Global'0.t_global) = any_l ()
    | & _10 : array int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
