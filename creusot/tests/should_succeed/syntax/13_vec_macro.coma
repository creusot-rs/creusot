module M_13_vec_macro__x [#"13_vec_macro.rs" 5 0 5 10]
  let%span slib0 = "../../../../creusot-contracts/src/lib.rs" 269 8 269 30
  let%span s13_vec_macro1 = "13_vec_macro.rs" 7 20 7 34
  let%span s13_vec_macro2 = "13_vec_macro.rs" 9 18 9 19
  let%span s13_vec_macro3 = "13_vec_macro.rs" 9 21 9 22
  let%span s13_vec_macro4 = "13_vec_macro.rs" 10 20 10 34
  let%span s13_vec_macro5 = "13_vec_macro.rs" 12 18 12 19
  let%span s13_vec_macro6 = "13_vec_macro.rs" 12 21 12 22
  let%span s13_vec_macro7 = "13_vec_macro.rs" 12 24 12 25
  let%span s13_vec_macro8 = "13_vec_macro.rs" 13 20 13 34
  let%span svec9 = "../../../../creusot-contracts/src/std/vec.rs" 74 26 74 44
  let%span svec10 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span svec11 = "../../../../creusot-contracts/src/std/vec.rs" 180 22 180 41
  let%span svec12 = "../../../../creusot-contracts/src/std/vec.rs" 181 22 181 76
  let%span sslice13 = "../../../../creusot-contracts/src/std/slice.rs" 332 18 332 35
  let%span sops14 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span sboxed15 = "../../../../creusot-contracts/src/std/boxed.rs" 18 8 18 22
  let%span sslice16 = "../../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice17 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = true
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq uint32
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec10] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  let rec new'0 (_1:()) (return'  (ret:t_Vec'0))= any
    [ return' (result:t_Vec'0)-> {inv'0 result} {[%#svec9] Seq.length (view'0 result) = 0} (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  predicate inv'1 (_1 : int32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : int32 [inv'1 x] . inv'1 x = true
  
  type t_NonNull'1  =
    { t_NonNull__pointer'1: opaque_ptr }
  
  type t_Unique'1  =
    { t_Unique__pointer'1: t_NonNull'1; t_Unique__qy95zmarker'1: () }
  
  type t_RawVec'1  =
    { t_RawVec__ptr'1: t_Unique'1; t_RawVec__cap'1: t_Cap'0; t_RawVec__alloc'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: usize }
  
  predicate inv'2 (_1 : t_Vec'1)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'1 [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  function view'1 (self : t_Vec'1) : Seq.seq int32
  
  axiom view'1_spec : forall self : t_Vec'1 . [%#svec10] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'1) (ix : int) : int32 =
    [%#sops14] Seq.get (view'1 self) ix
  
  let rec from_elem'0 (elem:int32) (n:usize) (return'  (ret:t_Vec'1))= {[@expl:from_elem 'elem' type invariant] inv'1 elem}
    any
    [ return' (result:t_Vec'1)-> {inv'2 result}
      {[%#svec11] Seq.length (view'1 result) = UIntSize.to_int n}
      {[%#svec12] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      (! return' {result}) ]
    
  
  use prelude.prelude.Slice
  
  predicate inv'3 (_1 : slice int32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : slice int32 [inv'3 x] . inv'3 x = true
  
  use prelude.prelude.Slice
  
  function view'3 (self : slice int32) : Seq.seq int32
  
  axiom view'3_spec : forall self : slice int32 . ([%#sslice16] Seq.length (view'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize))
  && ([%#sslice17] view'3 self = Slice.id self)
  
  function view'2 (self : slice int32) : Seq.seq int32 =
    [%#sboxed15] view'3 self
  
  let rec into_vec'0 (self:slice int32) (return'  (ret:t_Vec'1))= {[@expl:into_vec 'self' type invariant] inv'3 self}
    any [ return' (result:t_Vec'1)-> {inv'2 result} {[%#sslice13] view'1 result = view'2 self} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec x'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = new'0 {[%#slib0] ()} (fun (_ret':t_Vec'0) ->  [ &v0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#s13_vec_macro1] Seq.length (view'0 v0) = 0} s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = from_elem'0 {[%#s13_vec_macro2] (0 : int32)} {[%#s13_vec_macro3] (2 : usize)}
          (fun (_ret':t_Vec'1) ->  [ &v1 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = {[@expl:assertion] [%#s13_vec_macro4] Seq.length (view'1 v1) = 2} s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = any
        [ any_ (__arr_temp:array int32)-> (! -{Seq.get __arr_temp.elts 0 = ([%#s13_vec_macro5] (1 : int32))
          /\ Seq.get __arr_temp.elts 1 = ([%#s13_vec_macro6] (2 : int32))
          /\ Seq.get __arr_temp.elts 2 = ([%#s13_vec_macro7] (3 : int32)) /\ Seq.length __arr_temp.elts = 3}-
           [ &_10 <- __arr_temp ] 
          s1) ]
        
      | s1 = bb5 ]
      
    | bb5 = bb6
    | bb6 = s0 [ s0 = into_vec'0 {_10} (fun (_ret':t_Vec'1) ->  [ &v2 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0 [ s0 = {[@expl:assertion] [%#s13_vec_macro8] Seq.length (view'1 v2) = 3} s1 | s1 = bb8 ] 
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v0 : t_Vec'0 = any_l ()
    | & v1 : t_Vec'1 = any_l ()
    | & v2 : t_Vec'1 = any_l ()
    | & _10 : array int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
