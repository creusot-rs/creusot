module M_05_annotations__assertion [#"05_annotations.rs" 5 0 5 25]
  type t
  
  let%span s05_annotations0 = "05_annotations.rs" 6 20 6 26
  let%span s05_annotations1 = "05_annotations.rs" 5 20 5 21
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t)
  
  predicate inv'0 (_1 : t)
  
  meta "compute_max_steps" 1000000
  
  let rec assertion (x:t) (return'  (ret:()))= {[%#s05_annotations1] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 x} s1
      | s1 = -{resolve'0 x}- s2
      | s2 = {[@expl:assertion] [%#s05_annotations0] x = x} s3
      | s3 = bb1 ]
      
    | bb1 = bb2
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & x : t = x ]  [ return' (result:())-> (! return' {result}) ] 
end
