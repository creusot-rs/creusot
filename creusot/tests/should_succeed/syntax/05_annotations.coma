
module C05Annotations_Assertion
  type t
  predicate invariant'0 (self : t)
  let rec invariant'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : t)
  let rec inv'0 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : t . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'0 (self : t)
  let rec resolve'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec assertion (x:t) (return'  (ret:()))= {[#"../05_annotations.rs" 5 20 5 21] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 x} s1
      | s1 = -{resolve'0 x}- s2
      | s2 = {[@expl:assertion] [#"../05_annotations.rs" 6 20 6 26] x = x} s3
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- [#"../05_annotations.rs" 5 26 7 1] () ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () | & x : t = x ]  [ return' (result:())-> (! return' {result}) ] 
end
