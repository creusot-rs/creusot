
module M_01_idents__clone
  use prelude.prelude.Intrinsic
  
  let rec clone' (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_01_idents__function
  use prelude.prelude.Intrinsic
  
  let rec function' (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_01_idents__import
  use prelude.prelude.Intrinsic
  
  let rec import' (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_01_idents__export
  use prelude.prelude.Intrinsic
  
  let rec export' (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_01_idents__result
  use prelude.prelude.Intrinsic
  
  let rec result (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_01_idents__qy95zaqy95z
  use prelude.prelude.Intrinsic
  
  let rec qy95zaqy95z (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_01_idents__qy95z_a_qy113zyqy95z_bqy95zqy95zqy95z_cqy95zqy95z
  use prelude.prelude.Intrinsic
  
  let rec qy95z_a_qy113zyqy95z_bqy95zqy95zqy95z_cqy95zqy95z (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_01_idents__F
  use prelude.prelude.Intrinsic
  
  let rec v_F (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_01_idents__v_F
  use prelude.prelude.Intrinsic
  
  let rec v_v_F (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
