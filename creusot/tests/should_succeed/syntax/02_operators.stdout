module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type c02operators_x  = 
    | C02Operators_X usize
    
  function c02operators_x_X_a (self : c02operators_x) : usize
  val c02operators_x_X_a (self : c02operators_x) : usize
    ensures { result = c02operators_x_X_a self }
    
  axiom c02operators_x_X_a_acc : forall a : usize . c02operators_x_X_a (C02Operators_X a : c02operators_x) = a
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module C02Operators_Division_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val division [@cfg:stackify] (x : usize) (y : usize) : usize
end
module C02Operators_Division
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  let rec cfg division [@cfg:stackify] (x : usize) (y : usize) : usize = 
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _3 : usize;
  var _4 : usize;
  var _5 : bool;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _3 };
    _3 <- x_1;
    assume { Resolve0.resolve x_1 };
    assume { Resolve0.resolve _4 };
    _4 <- y_2;
    assume { Resolve0.resolve y_2 };
    _5 <- _4 = (0 : usize);
    assert { not _5 };
    goto BB1
  }
  BB1 {
    _0 <- _3 / _4;
    return _0
  }
  
end
module C02Operators_Modulus_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val modulus [@cfg:stackify] (x : usize) (y : usize) : usize
end
module C02Operators_Modulus
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  let rec cfg modulus [@cfg:stackify] (x : usize) (y : usize) : usize = 
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _3 : usize;
  var _4 : usize;
  var _5 : bool;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _3 };
    _3 <- x_1;
    assume { Resolve0.resolve x_1 };
    assume { Resolve0.resolve _4 };
    _4 <- y_2;
    assume { Resolve0.resolve y_2 };
    _5 <- _4 = (0 : usize);
    assert { not _5 };
    goto BB1
  }
  BB1 {
    _0 <- _3 % _4;
    return _0
  }
  
end
module C02Operators_Multiply_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val multiply [@cfg:stackify] (x : usize) (y : usize) : usize
end
module C02Operators_Multiply
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  let rec cfg multiply [@cfg:stackify] (x : usize) (y : usize) : usize = 
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _3 : usize;
  var _4 : usize;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _3 };
    _3 <- x_1;
    assume { Resolve0.resolve x_1 };
    assume { Resolve0.resolve _4 };
    _4 <- y_2;
    assume { Resolve0.resolve y_2 };
    _0 <- _3 * _4;
    return _0
  }
  
end
module C02Operators_Add_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val add [@cfg:stackify] (x : usize) (y : usize) : usize
end
module C02Operators_Add
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  let rec cfg add [@cfg:stackify] (x : usize) (y : usize) : usize = 
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _3 : usize;
  var _4 : usize;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _3 };
    _3 <- x_1;
    assume { Resolve0.resolve x_1 };
    assume { Resolve0.resolve _4 };
    _4 <- y_2;
    assume { Resolve0.resolve y_2 };
    _0 <- _3 + _4;
    return _0
  }
  
end
module C02Operators_Sub_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val sub [@cfg:stackify] (x : usize) (y : usize) : usize
end
module C02Operators_Sub
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  let rec cfg sub [@cfg:stackify] (x : usize) (y : usize) : usize = 
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _3 : usize;
  var _4 : usize;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _3 };
    _3 <- x_1;
    assume { Resolve0.resolve x_1 };
    assume { Resolve0.resolve _4 };
    _4 <- y_2;
    assume { Resolve0.resolve y_2 };
    _0 <- _3 - _4;
    return _0
  }
  
end
module C02Operators_Expression_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val expression [@cfg:stackify] (x : usize) (y : usize) (z : usize) : bool
end
module C02Operators_Expression
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  let rec cfg expression [@cfg:stackify] (x : usize) (y : usize) (z : usize) : bool = 
  var _0 : bool;
  var x_1 : usize;
  var y_2 : usize;
  var z_3 : usize;
  var _4 : usize;
  var _5 : usize;
  var _6 : usize;
  var _7 : usize;
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : usize;
  var _12 : usize;
  var _13 : usize;
  var _14 : bool;
  var _15 : usize;
  {
    x_1 <- x;
    y_2 <- y;
    z_3 <- z;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _6 };
    _6 <- x_1;
    assume { Resolve0.resolve _7 };
    _7 <- y_2;
    _8 <- _7 = (0 : usize);
    assert { not _8 };
    goto BB1
  }
  BB1 {
    _5 <- _6 / _7;
    assume { Resolve0.resolve _9 };
    _9 <- z_3;
    _4 <- _5 * _9;
    assume { Resolve0.resolve _12 };
    _12 <- x_1;
    assume { Resolve0.resolve x_1 };
    assume { Resolve0.resolve _13 };
    _13 <- y_2;
    assume { Resolve0.resolve y_2 };
    _14 <- _13 = (0 : usize);
    assert { not _14 };
    goto BB2
  }
  BB2 {
    _11 <- _12 / _13;
    assume { Resolve0.resolve _15 };
    _15 <- z_3;
    assume { Resolve0.resolve z_3 };
    _10 <- _11 * _15;
    _0 <- _4 = _10;
    return _0
  }
  
end
module C02Operators_DivisionInt_Interface
  use mach.int.Int
  function division_int (x : int) (y : int) : int
end
module C02Operators_DivisionInt
  use mach.int.Int
  function division_int (x : int) (y : int) : int = 
    div x y
end
module C02Operators_ModulusInt_Interface
  use mach.int.Int
  function modulus_int (x : int) (y : int) : int
end
module C02Operators_ModulusInt
  use mach.int.Int
  function modulus_int (x : int) (y : int) : int = 
    mod x y
end
module C02Operators_MultiplyInt_Interface
  use mach.int.Int
  function multiply_int (x : int) (y : int) : int
end
module C02Operators_MultiplyInt
  use mach.int.Int
  function multiply_int (x : int) (y : int) : int = 
    x * y
end
module C02Operators_AddInt_Interface
  use mach.int.Int
  function add_int (x : int) (y : int) : int
end
module C02Operators_AddInt
  use mach.int.Int
  function add_int (x : int) (y : int) : int = 
    x + y
end
module C02Operators_SubInt_Interface
  use mach.int.Int
  function sub_int (x : int) (y : int) : int
end
module C02Operators_SubInt
  use mach.int.Int
  function sub_int (x : int) (y : int) : int = 
    x - y
end
module C02Operators_ExpressionLogic_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function expression_logic (x : usize) (y : usize) (z : usize) : bool
end
module C02Operators_ExpressionLogic
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function expression_logic (x : usize) (y : usize) (z : usize) : bool = 
    div x y * z = div x y * z
end
module C02Operators_PrimitiveComparison_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  val primitive_comparison [@cfg:stackify] (x : Type.c02operators_x) : ()
    ensures { Type.c02operators_x_X_a x <= Type.c02operators_x_X_a x }
    
end
module C02Operators_PrimitiveComparison
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.c02operators_x
  let rec cfg primitive_comparison [@cfg:stackify] (x : Type.c02operators_x) : ()
    ensures { Type.c02operators_x_X_a x <= Type.c02operators_x_X_a x }
    
   = 
  var _0 : ();
  var x_1 : Type.c02operators_x;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve x_1 };
    _0 <- ();
    return _0
  }
  
end
module C02Operators_BoolEq_Interface
  val bool_eq [@cfg:stackify] (a : bool) (b : bool) : bool
    ensures { result = (a = b) }
    
end
module C02Operators_BoolEq
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = bool
  let rec cfg bool_eq [@cfg:stackify] (a : bool) (b : bool) : bool
    ensures { result = (a = b) }
    
   = 
  var _0 : bool;
  var a_1 : bool;
  var b_2 : bool;
  var _3 : bool;
  var _4 : bool;
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _3 };
    _3 <- a_1;
    assume { Resolve0.resolve a_1 };
    assume { Resolve0.resolve _4 };
    _4 <- b_2;
    assume { Resolve0.resolve b_2 };
    _0 <- Prelude.eqb _3 _4;
    return _0
  }
  
end
module C02Operators_OldTest_Interface
  val old_test [@cfg:stackify] (x : bool) : ()
    ensures { old(x) = x }
    
end
module C02Operators_OldTest
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = bool
  let rec cfg old_test [@cfg:stackify] (x : bool) : ()
    ensures { old(x) = x }
    
   = 
  var _0 : ();
  var x_1 : bool;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve x_1 };
    _0 <- ();
    return _0
  }
  
end
