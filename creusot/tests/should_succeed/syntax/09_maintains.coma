
module C09Maintains_A_Type
  type t_a  =
    | C_A
    
  function any_l (_ : 'b) : 'a
  let rec t_a (input:t_a) (ret  )= any [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} {false} any ] 
end
module C09Maintains_Test1
  use prelude.UInt64
  use prelude.Int
  use C09Maintains_A_Type as C09Maintains_A_Type
  predicate invariant'0 [#"../09_maintains.rs" 12 4 12 47] (self : C09Maintains_A_Type.t_a) (b : bool) (c : uint64) =
    [#"../09_maintains.rs" 13 8 13 12] true
  let rec invariant'0 (self:C09Maintains_A_Type.t_a) (b:bool) (c:uint64) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self b c} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec test_1 (a:C09Maintains_A_Type.t_a) (b:bool) (c:uint64) (return'  (ret:()))= {[#"../09_maintains.rs" 27 0 27 31] invariant'0 a b c}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- [#"../09_maintains.rs" 28 37 28 39] () ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : () = any_l () : () ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../09_maintains.rs" 27 0 27 31] invariant'0 a b c}
      (! return' {result}) ]
    
end
module C09Maintains_Test2
  use prelude.UInt64
  use prelude.Int
  use C09Maintains_A_Type as C09Maintains_A_Type
  predicate invariant'0 [#"../09_maintains.rs" 12 4 12 47] (self : C09Maintains_A_Type.t_a) (b : bool) (c : uint64) =
    [#"../09_maintains.rs" 13 8 13 12] true
  let rec invariant'0 (self:C09Maintains_A_Type.t_a) (b:bool) (c:uint64) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self b c} (! return' {result}) ]
    
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'0 (self : borrowed (C09Maintains_A_Type.t_a)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C09Maintains_A_Type.t_a)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec test_2 (a:borrowed (C09Maintains_A_Type.t_a)) (b:bool) (c:uint64) (return'  (ret:()))= {[#"../09_maintains.rs" 30 0 30 37] invariant'0 ( * a) b c}
    (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 a}- s1 | s1 =  [ &_0 <- [#"../09_maintains.rs" 31 42 31 44] () ] s2 | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & a : borrowed (C09Maintains_A_Type.t_a) = a ] 
    [ return' (result:())-> {[@expl:postcondition] [#"../09_maintains.rs" 30 0 30 37] invariant'0 ( ^ a) b c}
      (! return' {result}) ]
    
end
module C09Maintains_Test3
  use prelude.UInt64
  use prelude.Int
  use C09Maintains_A_Type as C09Maintains_A_Type
  predicate invariant'0 [#"../09_maintains.rs" 12 4 12 47] (self : C09Maintains_A_Type.t_a) (b : bool) (c : uint64) =
    [#"../09_maintains.rs" 13 8 13 12] true
  let rec invariant'0 (self:C09Maintains_A_Type.t_a) (b:bool) (c:uint64) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self b c} (! return' {result}) ]
    
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed (C09Maintains_A_Type.t_a)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (C09Maintains_A_Type.t_a)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed bool) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec test_3 (a:borrowed (C09Maintains_A_Type.t_a)) (b:borrowed bool) (c:uint64) (return'  (ret:()))= {[#"../09_maintains.rs" 33 0 33 41] invariant'0 ( * a) ( * b) c}
    (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 b}- s1
      | s1 = -{resolve'1 a}- s2
      | s2 =  [ &_0 <- [#"../09_maintains.rs" 34 47 34 49] () ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & a : borrowed (C09Maintains_A_Type.t_a) = a | & b : borrowed bool = b ] 
    [ return' (result:())-> {[@expl:postcondition] [#"../09_maintains.rs" 33 0 33 41] invariant'0 ( ^ a) ( ^ b) c}
      (! return' {result}) ]
    
end
module C09Maintains_Test5
  use prelude.UIntSize
  use C09Maintains_A_Type as C09Maintains_A_Type
  use prelude.Int
  predicate inv2'0 [#"../09_maintains.rs" 17 4 17 33] (self : C09Maintains_A_Type.t_a) (b : int) =
    [#"../09_maintains.rs" 18 8 18 12] true
  let rec inv2'0 (self:C09Maintains_A_Type.t_a) (b:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv2'0 self b} (! return' {result}) ]
    
  use prelude.UIntSize
  use prelude.Intrinsic
  let rec test_5 (a:C09Maintains_A_Type.t_a) (b:usize) (return'  (ret:()))= {[#"../09_maintains.rs" 36 0 36 28] inv2'0 a (UIntSize.to_int b
    + 0)}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- [#"../09_maintains.rs" 37 30 37 32] () ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : () = any_l () : () ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../09_maintains.rs" 36 0 36 28] inv2'0 a (UIntSize.to_int b + 0)}
      (! return' {result}) ]
    
end
module C09Maintains_Test6
  use C09Maintains_A_Type as C09Maintains_A_Type
  predicate other_inv'0 [#"../09_maintains.rs" 23 0 23 35] (a : C09Maintains_A_Type.t_a) (b : bool) =
    [#"../09_maintains.rs" 24 4 24 8] true
  let rec other_inv'0 (a:C09Maintains_A_Type.t_a) (b:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = other_inv'0 a b} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec test_6 (a:C09Maintains_A_Type.t_a) (b:bool) (return'  (ret:()))= {[#"../09_maintains.rs" 39 0 39 29] other_inv'0 a b}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- [#"../09_maintains.rs" 40 29 40 31] () ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : () = any_l () : () ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../09_maintains.rs" 39 0 39 29] other_inv'0 a b}
      (! return' {result}) ]
    
end
