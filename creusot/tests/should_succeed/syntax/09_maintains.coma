module M_09_maintains__test_1 [#"09_maintains.rs" 28 0 28 36]
  let%span s09_maintains0 = "09_maintains.rs" 27 0 27 31
  let%span s09_maintains1 = "09_maintains.rs" 13 8 13 12
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt64
  
  predicate invariant'0 [#"09_maintains.rs" 12 4 12 47] (self : ()) (b : bool) (c : uint64) =
    [%#s09_maintains1] true
  
  meta "compute_max_steps" 1000000
  
  let rec test_1'0 (a:()) (b:bool) (c:uint64) (return'  (ret:()))= {[@expl:test_1 requires] [%#s09_maintains0] invariant'0 a b c}
    (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:test_1 ensures] [%#s09_maintains0] invariant'0 a b c} (! return' {result}) ]
    
end
module M_09_maintains__test_2 [#"09_maintains.rs" 31 0 31 41]
  let%span s09_maintains0 = "09_maintains.rs" 30 0 30 37
  let%span s09_maintains1 = "09_maintains.rs" 13 8 13 12
  let%span sresolve2 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed ()) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed ()) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt64
  
  predicate invariant'0 [#"09_maintains.rs" 12 4 12 47] (self : ()) (b : bool) (c : uint64) =
    [%#s09_maintains1] true
  
  meta "compute_max_steps" 1000000
  
  let rec test_2'0 (a:borrowed ()) (b:bool) (c:uint64) (return'  (ret:()))= {[@expl:test_2 requires] [%#s09_maintains0] invariant'0 a.current b c}
    (! bb0 [ bb0 = s0 [ s0 = -{resolve'0 a}- s1 | s1 = return' {_0} ]  ] )
    [ & _0 : () = any_l () | & a : borrowed () = a ]
     [ return' (result:())-> {[@expl:test_2 ensures] [%#s09_maintains0] invariant'0 a.final b c} (! return' {result}) ] 
end
module M_09_maintains__test_3 [#"09_maintains.rs" 34 0 34 46]
  let%span s09_maintains0 = "09_maintains.rs" 33 0 33 41
  let%span s09_maintains1 = "09_maintains.rs" 13 8 13 12
  let%span sresolve2 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Borrow
  
  predicate resolve'2 (self : borrowed bool) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed bool) =
    resolve'2 _1
  
  predicate resolve'3 (self : borrowed ()) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed ()) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt64
  
  predicate invariant'0 [#"09_maintains.rs" 12 4 12 47] (self : ()) (b : bool) (c : uint64) =
    [%#s09_maintains1] true
  
  meta "compute_max_steps" 1000000
  
  let rec test_3'0 (a:borrowed ()) (b:borrowed bool) (c:uint64) (return'  (ret:()))= {[@expl:test_3 requires] [%#s09_maintains0] invariant'0 a.current b.current c}
    (! bb0 [ bb0 = s0 [ s0 = -{resolve'0 b}- s1 | s1 = -{resolve'1 a}- s2 | s2 = return' {_0} ]  ] )
    [ & _0 : () = any_l () | & a : borrowed () = a | & b : borrowed bool = b ]
    
    [ return' (result:())-> {[@expl:test_3 ensures] [%#s09_maintains0] invariant'0 a.final b.final c}
      (! return' {result}) ]
    
end
module M_09_maintains__test_5 [#"09_maintains.rs" 37 0 37 29]
  let%span s09_maintains0 = "09_maintains.rs" 36 0 36 28
  let%span s09_maintains1 = "09_maintains.rs" 18 8 18 12
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  predicate inv2'0 [#"09_maintains.rs" 17 4 17 33] (self : ()) (b : int) =
    [%#s09_maintains1] true
  
  use prelude.prelude.UIntSize
  
  meta "compute_max_steps" 1000000
  
  let rec test_5'0 (a:()) (b:usize) (return'  (ret:()))= {[@expl:test_5 requires] [%#s09_maintains0] inv2'0 a (UIntSize.to_int b
    + 0)}
    (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:test_5 ensures] [%#s09_maintains0] inv2'0 a (UIntSize.to_int b + 0)}
      (! return' {result}) ]
    
end
module M_09_maintains__test_6 [#"09_maintains.rs" 40 0 40 28]
  let%span s09_maintains0 = "09_maintains.rs" 39 0 39 29
  let%span s09_maintains1 = "09_maintains.rs" 24 4 24 8
  
  use prelude.prelude.Intrinsic
  
  predicate other_inv'0 [#"09_maintains.rs" 23 0 23 35] (a : ()) (b : bool) =
    [%#s09_maintains1] true
  
  meta "compute_max_steps" 1000000
  
  let rec test_6'0 (a:()) (b:bool) (return'  (ret:()))= {[@expl:test_6 requires] [%#s09_maintains0] other_inv'0 a b}
    (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:test_6 ensures] [%#s09_maintains0] other_inv'0 a b} (! return' {result}) ]
    
end
