
module C06LogicFunctionContracts_Sum_Impl
  use seq_ext.SeqExt
  use seq.Seq
  use prelude.Int
  use prelude.Int
  use seq.Seq
  use seq.Seq
  constant seq  : Seq.seq int
  function sum [#"../06_logic_function_contracts.rs" 10 0 10 32] (seq : Seq.seq int) : int
  goal vc_sum : match Seq.length seq = 0 with
    | True -> true
    | False -> 0 <= ([#"../06_logic_function_contracts.rs" 9 10 9 19] Seq.length seq)
    /\ ([#"../06_logic_function_contracts.rs" 9 10 9 19] Seq.length (SeqExt.subsequence seq 0 (Seq.length seq - 1)))
    < ([#"../06_logic_function_contracts.rs" 9 10 9 19] Seq.length seq)
    end
end
module C06LogicFunctionContracts_AllZero_Impl
  use seq_ext.SeqExt
  use seq.Seq
  use prelude.Int
  use prelude.Int
  use seq.Seq
  use seq.Seq
  constant seq  : Seq.seq int
  predicate all_zero [#"../06_logic_function_contracts.rs" 22 0 22 38] (seq : Seq.seq int)
  goal vc_all_zero : match Seq.length seq = 0 with
    | True -> true
    | False -> if Seq.get seq (Seq.length seq - 1) = 0 then
      0 <= ([#"../06_logic_function_contracts.rs" 21 10 21 19] Seq.length seq)
      /\ ([#"../06_logic_function_contracts.rs" 21 10 21 19] Seq.length (SeqExt.subsequence seq 0 (Seq.length seq - 1)))
      < ([#"../06_logic_function_contracts.rs" 21 10 21 19] Seq.length seq)
    else
      true
    
    end
end
module C06LogicFunctionContracts_Stupid_Impl
  type t
  use prelude.Int
  constant x  : t
  constant i  : int
  predicate stupid [#"../06_logic_function_contracts.rs" 34 0 34 38] (x : t) (i : int)
  goal vc_stupid : match i <= 0 with
    | True -> true
    | False -> match x = x with
      | True -> 0 <= ([#"../06_logic_function_contracts.rs" 33 10 33 11] i)
      /\ ([#"../06_logic_function_contracts.rs" 33 10 33 11] 0) < ([#"../06_logic_function_contracts.rs" 33 10 33 11] i)
      | False -> true
      end
    end
end
