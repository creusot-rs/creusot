
module DeriveMacros_Product_Type
  type t_product 'a 'b =
    | C_Product 'a 'b
    
  let function product_a (self : t_product 'a 'b) : 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Product a _ -> a
      end
  let function product_b (self : t_product 'a 'b) : 'b = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Product _ a -> a
      end
end
module DeriveMacros_Impl2_Clone
  type a
  type b
  predicate invariant5 (self : b)
  val invariant5 (self : b) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : b)
  val inv5 (_x : b) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : b . inv5 x = true
  predicate invariant4 (self : a)
  val invariant4 (self : a) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : a)
  val inv4 (_x : a) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : a . inv4 x = true
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  predicate invariant3 (self : DeriveMacros_Product_Type.t_product a b)
  val invariant3 (self : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : DeriveMacros_Product_Type.t_product a b)
  val inv3 (_x : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : DeriveMacros_Product_Type.t_product a b . inv3 x = true
  predicate invariant2 (self : b)
  val invariant2 (self : b) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : b)
  val inv2 (_x : b) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : b . inv2 x = true
  predicate invariant1 (self : DeriveMacros_Product_Type.t_product a b)
  val invariant1 (self : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : DeriveMacros_Product_Type.t_product a b)
  val inv1 (_x : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : DeriveMacros_Product_Type.t_product a b . inv1 x = true
  predicate invariant0 (self : a)
  val invariant0 (self : a) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : a)
  val inv0 (_x : a) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : a . inv0 x = true
  use prelude.Borrow
  val clone1 (self : b) : b
    requires {inv2 self}
    ensures { [#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { inv5 result }
    
  predicate resolve2 (self : b)
  val resolve2 (self : b) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : DeriveMacros_Product_Type.t_product a b)
  val resolve1 (self : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = resolve1 self }
    
  val clone0 (self : a) : a
    requires {inv0 self}
    ensures { [#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { inv4 result }
    
  predicate resolve0 (self : a)
  val resolve0 (self : a) : bool
    ensures { result = resolve0 self }
    
  let rec cfg clone' [#"../derive_macros.rs" 8 9 8 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product a b
    requires {[#"../derive_macros.rs" 8 9 8 14] inv1 self}
    ensures { [#"../derive_macros.rs" 8 9 8 14] result = self }
    ensures { [#"../derive_macros.rs" 8 9 8 14] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : DeriveMacros_Product_Type.t_product a b;
  var self : DeriveMacros_Product_Type.t_product a b = self;
  var _3 : a;
  var _5 : a;
  var _6 : b;
  var _8 : b;
  {
    goto BB0
  }
  BB0 {
    [#"../derive_macros.rs" 10 4 10 8] _5 <- ([#"../derive_macros.rs" 10 4 10 8] DeriveMacros_Product_Type.product_a self);
    assert { [@expl:type invariant] inv0 _5 };
    assume { resolve0 _5 };
    [#"../derive_macros.rs" 10 4 10 8] _3 <- ([#"../derive_macros.rs" 10 4 10 8] clone0 ([#"../derive_macros.rs" 10 4 10 8] _5));
    goto BB1
  }
  BB1 {
    [#"../derive_macros.rs" 11 4 11 8] _8 <- ([#"../derive_macros.rs" 11 4 11 8] DeriveMacros_Product_Type.product_b self);
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    assert { [@expl:type invariant] inv2 _8 };
    assume { resolve2 _8 };
    [#"../derive_macros.rs" 11 4 11 8] _6 <- ([#"../derive_macros.rs" 11 4 11 8] clone1 ([#"../derive_macros.rs" 11 4 11 8] _8));
    goto BB2
  }
  BB2 {
    [#"../derive_macros.rs" 8 9 8 14] _0 <- ([#"../derive_macros.rs" 8 9 8 14] DeriveMacros_Product_Type.C_Product _3 _6);
    _3 <- any a;
    _6 <- any b;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module DeriveMacros_Impl3_Eq
  type a
  type b
  predicate invariant2 (self : b)
  val invariant2 (self : b) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : b)
  val inv2 (_x : b) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : b . inv2 x = true
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  predicate invariant1 (self : DeriveMacros_Product_Type.t_product a b)
  val invariant1 (self : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : DeriveMacros_Product_Type.t_product a b)
  val inv1 (_x : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : DeriveMacros_Product_Type.t_product a b . inv1 x = true
  predicate invariant0 (self : a)
  val invariant0 (self : a) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : a)
  val inv0 (_x : a) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : a . inv0 x = true
  type deep_model_ty1
  function deep_model5 (self : b) : deep_model_ty1
  val deep_model5 (self : b) : deep_model_ty1
    ensures { result = deep_model5 self }
    
  type deep_model_ty0
  function deep_model4 (self : a) : deep_model_ty0
  val deep_model4 (self : a) : deep_model_ty0
    ensures { result = deep_model4 self }
    
  function deep_model3 [#"../derive_macros.rs" 23 4 23 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product deep_model_ty0 deep_model_ty1
    
   =
    [#"../derive_macros.rs" 24 8 24 66] DeriveMacros_Product_Type.C_Product (deep_model4 (DeriveMacros_Product_Type.product_a self)) (deep_model5 (DeriveMacros_Product_Type.product_b self))
  val deep_model3 [#"../derive_macros.rs" 23 4 23 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product deep_model_ty0 deep_model_ty1
    ensures { result = deep_model3 self }
    
  use prelude.Borrow
  function deep_model0 (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product deep_model_ty0 deep_model_ty1
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model3 self
  val deep_model0 (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product deep_model_ty0 deep_model_ty1
    ensures { result = deep_model0 self }
    
  function deep_model2 (self : b) : deep_model_ty1 =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model5 self
  val deep_model2 (self : b) : deep_model_ty1
    ensures { result = deep_model2 self }
    
  val eq1 (self : b) (other : b) : bool
    requires {inv2 self}
    requires {inv2 other}
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (deep_model2 self = deep_model2 other) }
    
  predicate resolve2 (self : b)
  val resolve2 (self : b) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : DeriveMacros_Product_Type.t_product a b)
  val resolve1 (self : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = resolve1 self }
    
  function deep_model1 (self : a) : deep_model_ty0 =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model4 self
  val deep_model1 (self : a) : deep_model_ty0
    ensures { result = deep_model1 self }
    
  val eq0 (self : a) (other : a) : bool
    requires {inv0 self}
    requires {inv0 other}
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (deep_model1 self = deep_model1 other) }
    
  predicate resolve0 (self : a)
  val resolve0 (self : a) : bool
    ensures { result = resolve0 self }
    
  let rec cfg eq [#"../derive_macros.rs" 8 16 8 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : DeriveMacros_Product_Type.t_product a b) (rhs : DeriveMacros_Product_Type.t_product a b) : bool
    requires {[#"../derive_macros.rs" 8 16 8 25] inv1 self}
    requires {[#"../derive_macros.rs" 8 16 8 25] inv1 rhs}
    ensures { [#"../derive_macros.rs" 8 16 8 25] result = (deep_model0 self = deep_model0 rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : DeriveMacros_Product_Type.t_product a b = self;
  var rhs : DeriveMacros_Product_Type.t_product a b = rhs;
  var _4 : bool;
  var _7 : a;
  var _8 : bool;
  var _11 : b;
  {
    goto BB0
  }
  BB0 {
    [#"../derive_macros.rs" 10 4 10 8] _7 <- ([#"../derive_macros.rs" 10 4 10 8] DeriveMacros_Product_Type.product_a rhs);
    assert { [@expl:type invariant] inv0 _7 };
    assume { resolve0 _7 };
    [#"../derive_macros.rs" 10 4 10 8] _4 <- ([#"../derive_macros.rs" 10 4 10 8] eq0 ([#"../derive_macros.rs" 10 4 10 8] DeriveMacros_Product_Type.product_a self) ([#"../derive_macros.rs" 10 4 10 8] _7));
    goto BB4
  }
  BB1 {
    assert { [@expl:type invariant] inv1 rhs };
    assume { resolve1 rhs };
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    [#"../derive_macros.rs" 10 4 11 8] _0 <- ([#"../derive_macros.rs" 10 4 11 8] [#"../derive_macros.rs" 10 4 11 8] false);
    goto BB3
  }
  BB2 {
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    [#"../derive_macros.rs" 11 4 11 8] _11 <- ([#"../derive_macros.rs" 11 4 11 8] DeriveMacros_Product_Type.product_b rhs);
    assert { [@expl:type invariant] inv1 rhs };
    assume { resolve1 rhs };
    assert { [@expl:type invariant] inv2 _11 };
    assume { resolve2 _11 };
    [#"../derive_macros.rs" 11 4 11 8] _8 <- ([#"../derive_macros.rs" 11 4 11 8] eq1 ([#"../derive_macros.rs" 11 4 11 8] DeriveMacros_Product_Type.product_b self) ([#"../derive_macros.rs" 11 4 11 8] _11));
    goto BB5
  }
  BB3 {
    return _0
  }
  BB4 {
    switch (_4)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB5 {
    [#"../derive_macros.rs" 10 4 11 8] _0 <- ([#"../derive_macros.rs" 10 4 11 8] _8);
    [#"../derive_macros.rs" 10 4 11 8] _8 <- any bool;
    goto BB3
  }
  
end
module DeriveMacros_Sum_Type
  type t_sum 'a 'b =
    | C_A 'a
    | C_B 'b
    
  let function a_0 (self : t_sum 'a 'b) : 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_A a -> a
      | C_B _ -> any 'a
      end
  let function b_0 (self : t_sum 'a 'b) : 'b = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_A _ -> any 'b
      | C_B a -> a
      end
end
module DeriveMacros_Impl4_Clone
  type a
  type b
  predicate invariant7 (self : b)
  val invariant7 (self : b) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : b)
  val inv7 (_x : b) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : b . inv7 x = true
  predicate invariant6 (self : a)
  val invariant6 (self : a) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : a)
  val inv6 (_x : a) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : a . inv6 x = true
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  predicate invariant5 (self : DeriveMacros_Sum_Type.t_sum a b)
  val invariant5 (self : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : DeriveMacros_Sum_Type.t_sum a b)
  val inv5 (_x : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : DeriveMacros_Sum_Type.t_sum a b . inv5 x = true
  predicate invariant4 (self : b)
  val invariant4 (self : b) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : b)
  val inv4 (_x : b) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : b . inv4 x = true
  predicate invariant3 (self : b)
  val invariant3 (self : b) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : b)
  val inv3 (_x : b) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : b . inv3 x = true
  predicate invariant2 (self : a)
  val invariant2 (self : a) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : a)
  val inv2 (_x : a) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : a . inv2 x = true
  predicate invariant1 (self : a)
  val invariant1 (self : a) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : a)
  val inv1 (_x : a) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : a . inv1 x = true
  predicate invariant0 (self : DeriveMacros_Sum_Type.t_sum a b)
  val invariant0 (self : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : DeriveMacros_Sum_Type.t_sum a b)
  val inv0 (_x : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : DeriveMacros_Sum_Type.t_sum a b . inv0 x = true
  use prelude.Borrow
  predicate resolve4 (self : b)
  val resolve4 (self : b) : bool
    ensures { result = resolve4 self }
    
  val clone1 (self : b) : b
    requires {inv4 self}
    ensures { [#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { inv7 result }
    
  predicate resolve3 (self : b)
  val resolve3 (self : b) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : a)
  val resolve2 (self : a) : bool
    ensures { result = resolve2 self }
    
  val clone0 (self : a) : a
    requires {inv2 self}
    ensures { [#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { inv6 result }
    
  predicate resolve1 (self : a)
  val resolve1 (self : a) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : DeriveMacros_Sum_Type.t_sum a b)
  val resolve0 (self : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = resolve0 self }
    
  let rec cfg clone' [#"../derive_macros.rs" 28 9 28 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum a b
    requires {[#"../derive_macros.rs" 28 9 28 14] inv0 self}
    ensures { [#"../derive_macros.rs" 28 9 28 14] result = self }
    ensures { [#"../derive_macros.rs" 28 9 28 14] inv5 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : DeriveMacros_Sum_Type.t_sum a b;
  var self : DeriveMacros_Sum_Type.t_sum a b = self;
  var v0_1 : a;
  var _5 : a;
  var _7 : a;
  var v0_11 : b;
  var _9 : b;
  var _11 : b;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | DeriveMacros_Sum_Type.C_A _ -> goto BB1
      | DeriveMacros_Sum_Type.C_B _ -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    [#"../derive_macros.rs" 28 9 28 14] v0_11 <- ([#"../derive_macros.rs" 28 9 28 14] DeriveMacros_Sum_Type.b_0 self);
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../derive_macros.rs" 28 9 28 14] _11 <- ([#"../derive_macros.rs" 28 9 28 14] v0_11);
    assert { [@expl:type invariant] inv3 _11 };
    assume { resolve3 _11 };
    [#"../derive_macros.rs" 28 9 28 14] _9 <- ([#"../derive_macros.rs" 28 9 28 14] clone1 ([#"../derive_macros.rs" 28 9 28 14] _11));
    goto BB7
  }
  BB3 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [#"../derive_macros.rs" 28 9 28 14] false };
    absurd
  }
  BB4 {
    [#"../derive_macros.rs" 28 9 28 14] v0_1 <- ([#"../derive_macros.rs" 28 9 28 14] DeriveMacros_Sum_Type.a_0 self);
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../derive_macros.rs" 28 9 28 14] _7 <- ([#"../derive_macros.rs" 28 9 28 14] v0_1);
    assert { [@expl:type invariant] inv1 _7 };
    assume { resolve1 _7 };
    [#"../derive_macros.rs" 28 9 28 14] _5 <- ([#"../derive_macros.rs" 28 9 28 14] clone0 ([#"../derive_macros.rs" 28 9 28 14] _7));
    goto BB5
  }
  BB5 {
    assert { [@expl:type invariant] inv2 v0_1 };
    assume { resolve2 v0_1 };
    [#"../derive_macros.rs" 28 9 28 14] _0 <- ([#"../derive_macros.rs" 28 9 28 14] DeriveMacros_Sum_Type.C_A _5);
    _5 <- any a;
    goto BB6
  }
  BB6 {
    goto BB9
  }
  BB7 {
    assert { [@expl:type invariant] inv4 v0_11 };
    assume { resolve4 v0_11 };
    [#"../derive_macros.rs" 28 9 28 14] _0 <- ([#"../derive_macros.rs" 28 9 28 14] DeriveMacros_Sum_Type.C_B _9);
    _9 <- any b;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module DeriveMacros_Impl5_Eq
  type a
  type b
  predicate invariant3 (self : b)
  val invariant3 (self : b) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : b)
  val inv3 (_x : b) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : b . inv3 x = true
  predicate invariant2 (self : a)
  val invariant2 (self : a) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : a)
  val inv2 (_x : a) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : a . inv2 x = true
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  predicate invariant1 (self : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b))
  val invariant1 (self : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b))
  val inv1 (_x : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b) . inv1 x = true
  predicate invariant0 (self : DeriveMacros_Sum_Type.t_sum a b)
  val invariant0 (self : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : DeriveMacros_Sum_Type.t_sum a b)
  val inv0 (_x : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : DeriveMacros_Sum_Type.t_sum a b . inv0 x = true
  type deep_model_ty1
  function deep_model5 (self : b) : deep_model_ty1
  val deep_model5 (self : b) : deep_model_ty1
    ensures { result = deep_model5 self }
    
  type deep_model_ty0
  function deep_model4 (self : a) : deep_model_ty0
  val deep_model4 (self : a) : deep_model_ty0
    ensures { result = deep_model4 self }
    
  function deep_model3 [#"../derive_macros.rs" 39 4 39 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum deep_model_ty0 deep_model_ty1
    
   =
    [#"../derive_macros.rs" 40 8 43 9] match self with
      | DeriveMacros_Sum_Type.C_A a -> DeriveMacros_Sum_Type.C_A (deep_model4 a)
      | DeriveMacros_Sum_Type.C_B b -> DeriveMacros_Sum_Type.C_B (deep_model5 b)
      end
  val deep_model3 [#"../derive_macros.rs" 39 4 39 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum deep_model_ty0 deep_model_ty1
    ensures { result = deep_model3 self }
    
  use prelude.Borrow
  function deep_model0 (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum deep_model_ty0 deep_model_ty1
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model3 self
  val deep_model0 (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum deep_model_ty0 deep_model_ty1
    ensures { result = deep_model0 self }
    
  function deep_model2 (self : b) : deep_model_ty1 =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model5 self
  val deep_model2 (self : b) : deep_model_ty1
    ensures { result = deep_model2 self }
    
  val eq1 (self : b) (other : b) : bool
    requires {inv3 self}
    requires {inv3 other}
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (deep_model2 self = deep_model2 other) }
    
  predicate resolve3 (self : b)
  val resolve3 (self : b) : bool
    ensures { result = resolve3 self }
    
  function deep_model1 (self : a) : deep_model_ty0 =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model4 self
  val deep_model1 (self : a) : deep_model_ty0
    ensures { result = deep_model1 self }
    
  val eq0 (self : a) (other : a) : bool
    requires {inv2 self}
    requires {inv2 other}
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (deep_model1 self = deep_model1 other) }
    
  predicate resolve2 (self : a)
  val resolve2 (self : a) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 (self : DeriveMacros_Sum_Type.t_sum a b)
  val resolve0 (self : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = resolve0 self }
    
  predicate resolve1 (self : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] resolve0 (let (a, _) = self in a) /\ resolve0 (let (_, a) = self in a)
  val resolve1 (self : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b)) : bool
    ensures { result = resolve1 self }
    
  let rec cfg eq [#"../derive_macros.rs" 28 16 28 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : DeriveMacros_Sum_Type.t_sum a b) (rhs : DeriveMacros_Sum_Type.t_sum a b) : bool
    requires {[#"../derive_macros.rs" 28 16 28 25] inv0 self}
    requires {[#"../derive_macros.rs" 28 16 28 25] inv0 rhs}
    ensures { [#"../derive_macros.rs" 28 16 28 25] result = (deep_model0 self = deep_model0 rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : DeriveMacros_Sum_Type.t_sum a b = self;
  var rhs : DeriveMacros_Sum_Type.t_sum a b = rhs;
  var _4 : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b);
  var v0_1 : a;
  var v0_2 : a;
  var _12 : bool;
  var v0_11 : b;
  var v0_21 : b;
  var _17 : bool;
  {
    goto BB0
  }
  BB0 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [@expl:type invariant] inv0 rhs };
    assume { resolve0 rhs };
    [#"../derive_macros.rs" 28 16 28 25] _4 <- ([#"../derive_macros.rs" 28 16 28 25] (([#"../derive_macros.rs" 28 16 28 25] self), ([#"../derive_macros.rs" 28 16 28 25] rhs)));
    switch (let (a, _) = _4 in a)
      | DeriveMacros_Sum_Type.C_A _ -> goto BB1
      | DeriveMacros_Sum_Type.C_B _ -> goto BB4
      end
  }
  BB1 {
    switch (let (_, a) = _4 in a)
      | DeriveMacros_Sum_Type.C_A _ -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    goto BB6
  }
  BB3 {
    assert { [@expl:type invariant] inv1 _4 };
    assume { resolve1 _4 };
    [#"../derive_macros.rs" 28 16 28 25] _0 <- ([#"../derive_macros.rs" 28 16 28 25] [#"../derive_macros.rs" 28 16 28 25] false);
    goto BB16
  }
  BB4 {
    switch (let (_, a) = _4 in a)
      | DeriveMacros_Sum_Type.C_B _ -> goto BB5
      | _ -> goto BB3
      end
  }
  BB5 {
    goto BB11
  }
  BB6 {
    [#"../derive_macros.rs" 28 16 28 25] v0_1 <- ([#"../derive_macros.rs" 28 16 28 25] DeriveMacros_Sum_Type.a_0 (let (a, _) = _4 in a));
    [#"../derive_macros.rs" 28 16 28 25] v0_2 <- ([#"../derive_macros.rs" 28 16 28 25] DeriveMacros_Sum_Type.a_0 (let (_, a) = _4 in a));
    assert { [@expl:type invariant] inv1 _4 };
    assume { resolve1 _4 };
    assert { [@expl:type invariant] inv2 v0_1 };
    assume { resolve2 v0_1 };
    assert { [@expl:type invariant] inv2 v0_2 };
    assume { resolve2 v0_2 };
    [#"../derive_macros.rs" 28 16 28 25] _12 <- ([#"../derive_macros.rs" 28 16 28 25] eq0 ([#"../derive_macros.rs" 28 16 28 25] v0_1) ([#"../derive_macros.rs" 28 16 28 25] v0_2));
    goto BB10
  }
  BB7 {
    [#"../derive_macros.rs" 28 16 28 25] _0 <- ([#"../derive_macros.rs" 28 16 28 25] [#"../derive_macros.rs" 28 16 28 25] false);
    goto BB9
  }
  BB8 {
    [#"../derive_macros.rs" 28 16 28 25] _0 <- ([#"../derive_macros.rs" 28 16 28 25] [#"../derive_macros.rs" 28 16 28 25] true);
    goto BB9
  }
  BB9 {
    goto BB16
  }
  BB10 {
    switch (_12)
      | False -> goto BB7
      | True -> goto BB8
      end
  }
  BB11 {
    [#"../derive_macros.rs" 28 16 28 25] v0_11 <- ([#"../derive_macros.rs" 28 16 28 25] DeriveMacros_Sum_Type.b_0 (let (a, _) = _4 in a));
    [#"../derive_macros.rs" 28 16 28 25] v0_21 <- ([#"../derive_macros.rs" 28 16 28 25] DeriveMacros_Sum_Type.b_0 (let (_, a) = _4 in a));
    assert { [@expl:type invariant] inv1 _4 };
    assume { resolve1 _4 };
    assert { [@expl:type invariant] inv3 v0_11 };
    assume { resolve3 v0_11 };
    assert { [@expl:type invariant] inv3 v0_21 };
    assume { resolve3 v0_21 };
    [#"../derive_macros.rs" 28 16 28 25] _17 <- ([#"../derive_macros.rs" 28 16 28 25] eq1 ([#"../derive_macros.rs" 28 16 28 25] v0_11) ([#"../derive_macros.rs" 28 16 28 25] v0_21));
    goto BB15
  }
  BB12 {
    [#"../derive_macros.rs" 28 16 28 25] _0 <- ([#"../derive_macros.rs" 28 16 28 25] [#"../derive_macros.rs" 28 16 28 25] false);
    goto BB14
  }
  BB13 {
    [#"../derive_macros.rs" 28 16 28 25] _0 <- ([#"../derive_macros.rs" 28 16 28 25] [#"../derive_macros.rs" 28 16 28 25] true);
    goto BB14
  }
  BB14 {
    goto BB16
  }
  BB15 {
    switch (_17)
      | False -> goto BB12
      | True -> goto BB13
      end
  }
  BB16 {
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.UIntSize
  use prelude.Int
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module DeriveMacros_Product2_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use prelude.UInt32
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Borrow
  type t_product2 'a =
    | C_Product2 (borrowed 'a) bool (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
    
  let function product2_a (self : t_product2 'a) : borrowed 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Product2 a _ _ -> a
      end
  let function product2_b (self : t_product2 'a) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Product2 _ a _ -> a
      end
  let function product2_c (self : t_product2 'a) : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Product2 _ _ a -> a
      end
end
module DeriveMacros_Sum2_Type
  type t_sum2 'a 'b =
    | C_X 'a
    | C_Y bool 'b
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module DeriveMacros_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_list 't =
    | C_List 't (Core_Option_Option_Type.t_option (t_list 't))
    
  let function list_elem (self : t_list 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_List a _ -> a
      end
  let function list_tail (self : t_list 't) : Core_Option_Option_Type.t_option (t_list 't)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_List _ a -> a
      end
end
module DeriveMacros_ListDeepModel_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_listdeepmodel 't 'proj0 =
    | C_ListDeepModel 'proj0 (Core_Option_Option_Type.t_option (t_listdeepmodel 't 'proj0))
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module DeriveMacros_Expr_Type
  type t_expr 'v =
    | C_Var 'v
    | C_Add (t_expr 'v) (t_expr 'v)
    
end
module DeriveMacros_ExprDeepModel_Type
  type t_exprdeepmodel 'v 'proj0 =
    | C_Var 'proj0
    | C_Add (t_exprdeepmodel 'v 'proj0) (t_exprdeepmodel 'v 'proj0)
    
end
module DeriveMacros_Impl2
  type a
  type b
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  predicate invariant1 (self : DeriveMacros_Product_Type.t_product a b)
  val invariant1 (self : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : DeriveMacros_Product_Type.t_product a b)
  val inv1 (_x : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : DeriveMacros_Product_Type.t_product a b . inv1 x = true
  predicate invariant0 (self : DeriveMacros_Product_Type.t_product a b)
  val invariant0 (self : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : DeriveMacros_Product_Type.t_product a b)
  val inv0 (_x : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : DeriveMacros_Product_Type.t_product a b . inv0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../derive_macros.rs" 8 9 8 14] forall self : DeriveMacros_Product_Type.t_product a b . inv0 self -> inv0 self /\ (forall result : DeriveMacros_Product_Type.t_product a b . inv1 result /\ result = self -> inv1 result /\ result = self)
end
module DeriveMacros_Impl4
  type a
  type b
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  predicate invariant1 (self : DeriveMacros_Sum_Type.t_sum a b)
  val invariant1 (self : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : DeriveMacros_Sum_Type.t_sum a b)
  val inv1 (_x : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : DeriveMacros_Sum_Type.t_sum a b . inv1 x = true
  predicate invariant0 (self : DeriveMacros_Sum_Type.t_sum a b)
  val invariant0 (self : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : DeriveMacros_Sum_Type.t_sum a b)
  val inv0 (_x : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : DeriveMacros_Sum_Type.t_sum a b . inv0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../derive_macros.rs" 28 9 28 14] forall self : DeriveMacros_Sum_Type.t_sum a b . inv0 self -> inv0 self /\ (forall result : DeriveMacros_Sum_Type.t_sum a b . inv1 result /\ result = self -> inv1 result /\ result = self)
end
module DeriveMacros_Impl3
  type a
  type b
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  predicate invariant0 (self : DeriveMacros_Product_Type.t_product a b)
  val invariant0 (self : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : DeriveMacros_Product_Type.t_product a b)
  val inv0 (_x : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : DeriveMacros_Product_Type.t_product a b . inv0 x = true
  type deep_model_ty1
  function deep_model3 (self : b) : deep_model_ty1
  val deep_model3 (self : b) : deep_model_ty1
    ensures { result = deep_model3 self }
    
  type deep_model_ty0
  function deep_model2 (self : a) : deep_model_ty0
  val deep_model2 (self : a) : deep_model_ty0
    ensures { result = deep_model2 self }
    
  function deep_model1 [#"../derive_macros.rs" 23 4 23 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product deep_model_ty0 deep_model_ty1
    
   =
    [#"../derive_macros.rs" 24 8 24 66] DeriveMacros_Product_Type.C_Product (deep_model2 (DeriveMacros_Product_Type.product_a self)) (deep_model3 (DeriveMacros_Product_Type.product_b self))
  val deep_model1 [#"../derive_macros.rs" 23 4 23 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product deep_model_ty0 deep_model_ty1
    ensures { result = deep_model1 self }
    
  use prelude.Borrow
  function deep_model0 (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product deep_model_ty0 deep_model_ty1
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model1 self
  val deep_model0 (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product deep_model_ty0 deep_model_ty1
    ensures { result = deep_model0 self }
    
  goal eq_refn : [#"../derive_macros.rs" 8 16 8 25] forall self : DeriveMacros_Product_Type.t_product a b . forall other : DeriveMacros_Product_Type.t_product a b . inv0 other /\ inv0 self -> inv0 other /\ inv0 self /\ (forall result : bool . result = (deep_model0 self = deep_model0 other) -> result = (deep_model0 self = deep_model0 other))
end
module DeriveMacros_Impl5
  type a
  type b
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  predicate invariant0 (self : DeriveMacros_Sum_Type.t_sum a b)
  val invariant0 (self : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : DeriveMacros_Sum_Type.t_sum a b)
  val inv0 (_x : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : DeriveMacros_Sum_Type.t_sum a b . inv0 x = true
  type deep_model_ty1
  function deep_model3 (self : b) : deep_model_ty1
  val deep_model3 (self : b) : deep_model_ty1
    ensures { result = deep_model3 self }
    
  type deep_model_ty0
  function deep_model2 (self : a) : deep_model_ty0
  val deep_model2 (self : a) : deep_model_ty0
    ensures { result = deep_model2 self }
    
  function deep_model1 [#"../derive_macros.rs" 39 4 39 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum deep_model_ty0 deep_model_ty1
    
   =
    [#"../derive_macros.rs" 40 8 43 9] match self with
      | DeriveMacros_Sum_Type.C_A a -> DeriveMacros_Sum_Type.C_A (deep_model2 a)
      | DeriveMacros_Sum_Type.C_B b -> DeriveMacros_Sum_Type.C_B (deep_model3 b)
      end
  val deep_model1 [#"../derive_macros.rs" 39 4 39 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum deep_model_ty0 deep_model_ty1
    ensures { result = deep_model1 self }
    
  use prelude.Borrow
  function deep_model0 (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum deep_model_ty0 deep_model_ty1
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model1 self
  val deep_model0 (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum deep_model_ty0 deep_model_ty1
    ensures { result = deep_model0 self }
    
  goal eq_refn : [#"../derive_macros.rs" 28 16 28 25] forall self : DeriveMacros_Sum_Type.t_sum a b . forall other : DeriveMacros_Sum_Type.t_sum a b . inv0 other /\ inv0 self -> inv0 other /\ inv0 self /\ (forall result : bool . result = (deep_model0 self = deep_model0 other) -> result = (deep_model0 self = deep_model0 other))
end
module DeriveMacros_Impl0
  type a
  type b
end
module DeriveMacros_Impl1
  type a
  type b
end
module DeriveMacros_Impl8
  type t
end
module DeriveMacros_Impl9
  type v
end
module DeriveMacros_Impl6
  type a
end
module DeriveMacros_Impl7
  type a
  type b
end
