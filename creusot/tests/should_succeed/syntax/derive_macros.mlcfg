
module DeriveMacros_Product_Type
  type t_product 'a 'b =
    | C_Product 'a 'b
    
  let function product_a (self : t_product 'a 'b) : 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Product a _ -> a
      end
  let function product_b (self : t_product 'a 'b) : 'b = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Product _ a -> a
      end
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' (self : self) : self
    ensures { [#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module DeriveMacros_Impl2_Clone_Interface
  type a
  type b
  use prelude.Borrow
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  val clone' [#"../derive_macros.rs" 7 9 7 14] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product a b
    ensures { [#"../derive_macros.rs" 7 9 7 14] result = self }
    
end
module DeriveMacros_Impl2_Clone
  type a
  type b
  use prelude.Borrow
  clone Core_Clone_Clone_Clone_Interface as Clone1 with
    type self = b
  clone Core_Clone_Clone_Clone_Interface as Clone0 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = b
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = DeriveMacros_Product_Type.t_product a b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = a
  let rec cfg clone' [#"../derive_macros.rs" 7 9 7 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product a b
    ensures { [#"../derive_macros.rs" 7 9 7 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : DeriveMacros_Product_Type.t_product a b;
  var self : DeriveMacros_Product_Type.t_product a b = self;
  var _5 : a;
  var _8 : b;
  {
    goto BB0
  }
  BB0 {
    _5 <- DeriveMacros_Product_Type.product_a self;
    assume { Resolve0.resolve _5 };
    goto BB1
  }
  BB1 {
    _8 <- DeriveMacros_Product_Type.product_b self;
    assume { Resolve1.resolve self };
    assume { Resolve2.resolve _8 };
    goto BB2
  }
  BB2 {
    _0 <- DeriveMacros_Product_Type.C_Product ([#"../derive_macros.rs" 9 4 9 8] Clone0.clone' _5) ([#"../derive_macros.rs" 10 4 10 8] Clone1.clone' _8);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl4_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 69 8 69 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel1 with
    type t = rhs,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val eq (self : self) (other : rhs) : bool
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module DeriveMacros_Impl0_DeepModel_Stub
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  function deep_model [#"../derive_macros.rs" 22 4 22 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    
end
module DeriveMacros_Impl0_DeepModel_Interface
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  function deep_model [#"../derive_macros.rs" 22 4 22 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    
  val deep_model [#"../derive_macros.rs" 22 4 22 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    ensures { result = deep_model self }
    
end
module DeriveMacros_Impl0_DeepModel
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  function deep_model [#"../derive_macros.rs" 22 4 22 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    
   =
    [#"../derive_macros.rs" 23 8 23 66] DeriveMacros_Product_Type.C_Product (DeepModel0.deep_model (DeriveMacros_Product_Type.product_a self)) (DeepModel1.deep_model (DeriveMacros_Product_Type.product_b self))
  val deep_model [#"../derive_macros.rs" 22 4 22 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    ensures { result = deep_model self }
    
end
module DeriveMacros_Impl3_Eq_Interface
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = DeriveMacros_Product_Type.t_product a b,
    type DeepModelTy0.deepModelTy = DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
  val eq [#"../derive_macros.rs" 7 16 7 25] (self : DeriveMacros_Product_Type.t_product a b) (rhs : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { [#"../derive_macros.rs" 7 16 7 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module DeriveMacros_Impl3_Eq
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel5 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel4 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  clone DeriveMacros_Impl0_DeepModel as DeepModel3 with
    type a = a,
    type b = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel5.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel2 with
    type t = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel5.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel1 with
    type t = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel4.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = DeriveMacros_Product_Type.t_product a b,
    type DeepModelTy0.deepModelTy = DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with
    type self = b,
    type rhs = b,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel2.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = DeriveMacros_Product_Type.t_product a b
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with
    type self = a,
    type rhs = a,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = a
  let rec cfg eq [#"../derive_macros.rs" 7 16 7 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : DeriveMacros_Product_Type.t_product a b) (rhs : DeriveMacros_Product_Type.t_product a b) : bool
    ensures { [#"../derive_macros.rs" 7 16 7 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : DeriveMacros_Product_Type.t_product a b = self;
  var rhs : DeriveMacros_Product_Type.t_product a b = rhs;
  var _7 : a;
  var _11 : b;
  {
    goto BB0
  }
  BB0 {
    _7 <- DeriveMacros_Product_Type.product_a rhs;
    assume { Resolve0.resolve _7 };
    goto BB4
  }
  BB1 {
    assume { Resolve1.resolve self };
    assume { Resolve1.resolve rhs };
    _0 <- ([#"../derive_macros.rs" 9 4 10 8] false);
    goto BB3
  }
  BB2 {
    assume { Resolve1.resolve self };
    _11 <- DeriveMacros_Product_Type.product_b rhs;
    assume { Resolve1.resolve rhs };
    assume { Resolve2.resolve _11 };
    goto BB5
  }
  BB3 {
    return _0
  }
  BB4 {
    switch ([#"../derive_macros.rs" 9 4 9 8] Eq0.eq (DeriveMacros_Product_Type.product_a self) _7)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB5 {
    _0 <- ([#"../derive_macros.rs" 10 4 10 8] Eq1.eq (DeriveMacros_Product_Type.product_b self) _11);
    goto BB3
  }
  
end
module DeriveMacros_Sum_Type
  type t_sum 'a 'b =
    | C_A 'a
    | C_B 'b
    
  let function b_0 (self : t_sum 'a 'b) : 'b = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_A _ -> any 'b
      | C_B a -> a
      end
  let function a_0 (self : t_sum 'a 'b) : 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_A a -> a
      | C_B _ -> any 'a
      end
end
module DeriveMacros_Impl4_Clone_Interface
  type a
  type b
  use prelude.Borrow
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  val clone' [#"../derive_macros.rs" 27 9 27 14] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum a b
    ensures { [#"../derive_macros.rs" 27 9 27 14] result = self }
    
end
module DeriveMacros_Impl4_Clone
  type a
  type b
  use prelude.Borrow
  clone Core_Clone_Clone_Clone_Interface as Clone1 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = a
  clone Core_Clone_Clone_Clone_Interface as Clone0 with
    type self = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = b
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = DeriveMacros_Sum_Type.t_sum a b
  let rec cfg clone' [#"../derive_macros.rs" 27 9 27 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum a b
    ensures { [#"../derive_macros.rs" 27 9 27 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : DeriveMacros_Sum_Type.t_sum a b;
  var self : DeriveMacros_Sum_Type.t_sum a b = self;
  var v0_1 : a;
  var _7 : a;
  var v0_11 : b;
  var _11 : b;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | DeriveMacros_Sum_Type.C_A _ -> goto BB1
      | DeriveMacros_Sum_Type.C_B _ -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    v0_11 <- DeriveMacros_Sum_Type.b_0 self;
    assume { Resolve0.resolve self };
    _11 <- v0_11;
    assume { Resolve1.resolve _11 };
    goto BB7
  }
  BB3 {
    assume { Resolve0.resolve self };
    absurd
  }
  BB4 {
    v0_1 <- DeriveMacros_Sum_Type.a_0 self;
    assume { Resolve0.resolve self };
    _7 <- v0_1;
    assume { Resolve3.resolve _7 };
    goto BB5
  }
  BB5 {
    assume { Resolve4.resolve v0_1 };
    _0 <- DeriveMacros_Sum_Type.C_A ([#"../derive_macros.rs" 27 9 27 14] Clone1.clone' _7);
    goto BB6
  }
  BB6 {
    goto BB9
  }
  BB7 {
    assume { Resolve2.resolve v0_11 };
    _0 <- DeriveMacros_Sum_Type.C_B ([#"../derive_macros.rs" 27 9 27 14] Clone0.clone' _11);
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module DeriveMacros_Impl1_DeepModel_Stub
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  function deep_model [#"../derive_macros.rs" 38 4 38 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    
end
module DeriveMacros_Impl1_DeepModel_Interface
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  function deep_model [#"../derive_macros.rs" 38 4 38 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    
  val deep_model [#"../derive_macros.rs" 38 4 38 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    ensures { result = deep_model self }
    
end
module DeriveMacros_Impl1_DeepModel
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  function deep_model [#"../derive_macros.rs" 38 4 38 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    
   =
    [#"../derive_macros.rs" 39 8 42 9] match (self) with
      | DeriveMacros_Sum_Type.C_A a -> DeriveMacros_Sum_Type.C_A (DeepModel0.deep_model a)
      | DeriveMacros_Sum_Type.C_B b -> DeriveMacros_Sum_Type.C_B (DeepModel1.deep_model b)
      end
  val deep_model [#"../derive_macros.rs" 38 4 38 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    ensures { result = deep_model self }
    
end
module DeriveMacros_Impl5_Eq_Interface
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = DeriveMacros_Sum_Type.t_sum a b,
    type DeepModelTy0.deepModelTy = DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
  val eq [#"../derive_macros.rs" 27 16 27 25] (self : DeriveMacros_Sum_Type.t_sum a b) (rhs : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { [#"../derive_macros.rs" 27 16 27 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module DeriveMacros_Impl5_Eq
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel5 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel4 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  clone DeriveMacros_Impl1_DeepModel as DeepModel3 with
    type a = a,
    type b = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel5.deep_model,
    function DeepModel1.deep_model = DeepModel4.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel2 with
    type t = a,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel5.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel1 with
    type t = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel4.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = DeriveMacros_Sum_Type.t_sum a b,
    type DeepModelTy0.deepModelTy = DeriveMacros_Sum_Type.t_sum DeepModelTy1.deepModelTy DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with
    type self = a,
    type rhs = a,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel2.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = a
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with
    type self = b,
    type rhs = b,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = DeriveMacros_Sum_Type.t_sum a b
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve1 with
    type t1 = DeriveMacros_Sum_Type.t_sum a b,
    type t2 = DeriveMacros_Sum_Type.t_sum a b,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Resolve1.resolve = Resolve0.resolve
  let rec cfg eq [#"../derive_macros.rs" 27 16 27 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : DeriveMacros_Sum_Type.t_sum a b) (rhs : DeriveMacros_Sum_Type.t_sum a b) : bool
    ensures { [#"../derive_macros.rs" 27 16 27 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : DeriveMacros_Sum_Type.t_sum a b = self;
  var rhs : DeriveMacros_Sum_Type.t_sum a b = rhs;
  var _4 : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b);
  var v0_1 : a;
  var v0_2 : a;
  var v0_11 : b;
  var v0_21 : b;
  {
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve self };
    assume { Resolve0.resolve rhs };
    _4 <- (self, rhs);
    switch (let (a, _) = _4 in a)
      | DeriveMacros_Sum_Type.C_A _ -> goto BB1
      | DeriveMacros_Sum_Type.C_B _ -> goto BB4
      end
  }
  BB1 {
    switch (let (_, a) = _4 in a)
      | DeriveMacros_Sum_Type.C_A _ -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    goto BB6
  }
  BB3 {
    assume { Resolve1.resolve _4 };
    _0 <- ([#"../derive_macros.rs" 27 16 27 25] false);
    goto BB16
  }
  BB4 {
    switch (let (_, a) = _4 in a)
      | DeriveMacros_Sum_Type.C_B _ -> goto BB5
      | _ -> goto BB3
      end
  }
  BB5 {
    goto BB11
  }
  BB6 {
    v0_1 <- DeriveMacros_Sum_Type.a_0 (let (a, _) = _4 in a);
    v0_2 <- DeriveMacros_Sum_Type.a_0 (let (_, a) = _4 in a);
    assume { Resolve1.resolve _4 };
    assume { Resolve3.resolve v0_1 };
    assume { Resolve3.resolve v0_2 };
    goto BB10
  }
  BB7 {
    _0 <- ([#"../derive_macros.rs" 27 16 27 25] false);
    goto BB9
  }
  BB8 {
    _0 <- ([#"../derive_macros.rs" 27 16 27 25] true);
    goto BB9
  }
  BB9 {
    goto BB16
  }
  BB10 {
    switch ([#"../derive_macros.rs" 27 16 27 25] Eq1.eq v0_1 v0_2)
      | False -> goto BB7
      | True -> goto BB8
      end
  }
  BB11 {
    v0_11 <- DeriveMacros_Sum_Type.b_0 (let (a, _) = _4 in a);
    v0_21 <- DeriveMacros_Sum_Type.b_0 (let (_, a) = _4 in a);
    assume { Resolve1.resolve _4 };
    assume { Resolve2.resolve v0_11 };
    assume { Resolve2.resolve v0_21 };
    goto BB15
  }
  BB12 {
    _0 <- ([#"../derive_macros.rs" 27 16 27 25] false);
    goto BB14
  }
  BB13 {
    _0 <- ([#"../derive_macros.rs" 27 16 27 25] true);
    goto BB14
  }
  BB14 {
    goto BB16
  }
  BB15 {
    switch ([#"../derive_macros.rs" 27 16 27 25] Eq0.eq v0_11 v0_21)
      | False -> goto BB12
      | True -> goto BB13
      end
  }
  BB16 {
    return _0
  }
  
end
module DeriveMacros_Impl2
  type a
  type b
  use prelude.Borrow
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  goal clone'_refn : [#"../derive_macros.rs" 7 9 7 14] forall self : DeriveMacros_Product_Type.t_product a b . forall result : DeriveMacros_Product_Type.t_product a b . result = self -> result = self
end
module DeriveMacros_Impl4
  type a
  type b
  use prelude.Borrow
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  goal clone'_refn : [#"../derive_macros.rs" 27 9 27 14] forall self : DeriveMacros_Sum_Type.t_sum a b . forall result : DeriveMacros_Sum_Type.t_sum a b . result = self -> result = self
end
module DeriveMacros_Impl3
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel3 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel2 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  clone DeriveMacros_Impl0_DeepModel as DeepModel1 with
    type a = a,
    type b = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = DeriveMacros_Product_Type.t_product a b,
    type DeepModelTy0.deepModelTy = DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"../derive_macros.rs" 7 16 7 25] forall self : DeriveMacros_Product_Type.t_product a b . forall other : DeriveMacros_Product_Type.t_product a b . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module DeriveMacros_Impl5
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel3 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel2 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  clone DeriveMacros_Impl1_DeepModel as DeepModel1 with
    type a = a,
    type b = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = DeriveMacros_Sum_Type.t_sum a b,
    type DeepModelTy0.deepModelTy = DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"../derive_macros.rs" 27 16 27 25] forall self : DeriveMacros_Sum_Type.t_sum a b . forall other : DeriveMacros_Sum_Type.t_sum a b . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module DeriveMacros_Impl0
  type a
  type b
end
module DeriveMacros_Impl1
  type a
  type b
end
