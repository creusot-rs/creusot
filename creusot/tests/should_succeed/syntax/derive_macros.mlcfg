
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module DeriveMacros_Product_Type
  type t_product 'a 'b =
    | C_Product 'a 'b
    
  let function product_a (self : t_product 'a 'b) : 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Product a _ -> a
      end
  let function product_b (self : t_product 'a 'b) : 'b = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Product _ a -> a
      end
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val clone' (self : self) : self
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { Inv1.inv result }
    
end
module DeriveMacros_Impl2_Clone_Interface
  type a
  type b
  use prelude.Borrow
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = DeriveMacros_Product_Type.t_product a b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = DeriveMacros_Product_Type.t_product a b
  val clone' [#"../derive_macros.rs" 8 9 8 14] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product a b
    requires {[#"../derive_macros.rs" 8 9 8 14] Inv0.inv self}
    ensures { [#"../derive_macros.rs" 8 9 8 14] result = self }
    ensures { [#"../derive_macros.rs" 8 9 8 14] Inv1.inv result }
    
end
module DeriveMacros_Impl2_Clone
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = b
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = b,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = a
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = a,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = DeriveMacros_Product_Type.t_product a b
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = DeriveMacros_Product_Type.t_product a b,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = b
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = b,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = DeriveMacros_Product_Type.t_product a b
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = DeriveMacros_Product_Type.t_product a b,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = a
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = a,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Core_Clone_Clone_Clone_Interface as Clone1 with
    type self = b,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv5.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = DeriveMacros_Product_Type.t_product a b
  clone Core_Clone_Clone_Clone_Interface as Clone0 with
    type self = a,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv4.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = a
  let rec cfg clone' [#"../derive_macros.rs" 8 9 8 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product a b
    requires {[#"../derive_macros.rs" 8 9 8 14] Inv1.inv self}
    ensures { [#"../derive_macros.rs" 8 9 8 14] result = self }
    ensures { [#"../derive_macros.rs" 8 9 8 14] Inv3.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : DeriveMacros_Product_Type.t_product a b;
  var self : DeriveMacros_Product_Type.t_product a b = self;
  var _3 : a;
  var _5 : a;
  var _6 : b;
  var _8 : b;
  {
    goto BB0
  }
  BB0 {
    _5 <- DeriveMacros_Product_Type.product_a self;
    assert { [@expl:type invariant] Inv0.inv _5 };
    assume { Resolve0.resolve _5 };
    _3 <- ([#"../derive_macros.rs" 10 4 10 8] Clone0.clone' _5);
    goto BB1
  }
  BB1 {
    _8 <- DeriveMacros_Product_Type.product_b self;
    assert { [@expl:type invariant] Inv1.inv self };
    assume { Resolve1.resolve self };
    assert { [@expl:type invariant] Inv2.inv _8 };
    assume { Resolve2.resolve _8 };
    _6 <- ([#"../derive_macros.rs" 11 4 11 8] Clone1.clone' _8);
    goto BB2
  }
  BB2 {
    _0 <- DeriveMacros_Product_Type.C_Product _3 _6;
    _3 <- any a;
    _6 <- any b;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl4_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel1 with
    type t = rhs,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = rhs
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val eq (self : self) (other : rhs) : bool
    requires {Inv0.inv self}
    requires {Inv1.inv other}
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module DeriveMacros_Impl0_DeepModel_Stub
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  function deep_model [#"../derive_macros.rs" 23 4 23 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    
end
module DeriveMacros_Impl0_DeepModel_Interface
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  function deep_model [#"../derive_macros.rs" 23 4 23 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    
  val deep_model [#"../derive_macros.rs" 23 4 23 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    ensures { result = deep_model self }
    
end
module DeriveMacros_Impl0_DeepModel
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  function deep_model [#"../derive_macros.rs" 23 4 23 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    
   =
    [#"../derive_macros.rs" 24 8 24 66] DeriveMacros_Product_Type.C_Product (DeepModel0.deep_model (DeriveMacros_Product_Type.product_a self)) (DeepModel1.deep_model (DeriveMacros_Product_Type.product_b self))
  val deep_model [#"../derive_macros.rs" 23 4 23 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    ensures { result = deep_model self }
    
end
module DeriveMacros_Impl3_Eq_Interface
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = DeriveMacros_Product_Type.t_product a b,
    type DeepModelTy0.deepModelTy = DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = DeriveMacros_Product_Type.t_product a b
  val eq [#"../derive_macros.rs" 8 16 8 25] (self : DeriveMacros_Product_Type.t_product a b) (rhs : DeriveMacros_Product_Type.t_product a b) : bool
    requires {[#"../derive_macros.rs" 8 16 8 25] Inv0.inv self}
    requires {[#"../derive_macros.rs" 8 16 8 25] Inv0.inv rhs}
    ensures { [#"../derive_macros.rs" 8 16 8 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module DeriveMacros_Impl3_Eq
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel5 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel4 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  clone DeriveMacros_Impl0_DeepModel as DeepModel3 with
    type a = a,
    type b = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel5.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel2 with
    type t = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel5.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = b
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = b,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = DeriveMacros_Product_Type.t_product a b
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = DeriveMacros_Product_Type.t_product a b,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel1 with
    type t = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel4.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = a
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = a,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = DeriveMacros_Product_Type.t_product a b,
    type DeepModelTy0.deepModelTy = DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with
    type self = b,
    type rhs = b,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv2.inv,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel2.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = DeriveMacros_Product_Type.t_product a b
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with
    type self = a,
    type rhs = a,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv0.inv,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = a
  let rec cfg eq [#"../derive_macros.rs" 8 16 8 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : DeriveMacros_Product_Type.t_product a b) (rhs : DeriveMacros_Product_Type.t_product a b) : bool
    requires {[#"../derive_macros.rs" 8 16 8 25] Inv1.inv self}
    requires {[#"../derive_macros.rs" 8 16 8 25] Inv1.inv rhs}
    ensures { [#"../derive_macros.rs" 8 16 8 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : DeriveMacros_Product_Type.t_product a b = self;
  var rhs : DeriveMacros_Product_Type.t_product a b = rhs;
  var _4 : bool;
  var _7 : a;
  var _8 : bool;
  var _11 : b;
  {
    goto BB0
  }
  BB0 {
    _7 <- DeriveMacros_Product_Type.product_a rhs;
    assert { [@expl:type invariant] Inv0.inv _7 };
    assume { Resolve0.resolve _7 };
    _4 <- ([#"../derive_macros.rs" 10 4 10 8] Eq0.eq (DeriveMacros_Product_Type.product_a self) _7);
    goto BB4
  }
  BB1 {
    assert { [@expl:type invariant] Inv1.inv rhs };
    assume { Resolve1.resolve rhs };
    assert { [@expl:type invariant] Inv1.inv self };
    assume { Resolve1.resolve self };
    _0 <- ([#"../derive_macros.rs" 10 4 11 8] false);
    goto BB3
  }
  BB2 {
    assert { [@expl:type invariant] Inv1.inv self };
    assume { Resolve1.resolve self };
    _11 <- DeriveMacros_Product_Type.product_b rhs;
    assert { [@expl:type invariant] Inv1.inv rhs };
    assume { Resolve1.resolve rhs };
    assert { [@expl:type invariant] Inv2.inv _11 };
    assume { Resolve2.resolve _11 };
    _8 <- ([#"../derive_macros.rs" 11 4 11 8] Eq1.eq (DeriveMacros_Product_Type.product_b self) _11);
    goto BB5
  }
  BB3 {
    return _0
  }
  BB4 {
    switch (_4)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB5 {
    _0 <- _8;
    _8 <- any bool;
    goto BB3
  }
  
end
module DeriveMacros_Sum_Type
  type t_sum 'a 'b =
    | C_A 'a
    | C_B 'b
    
  let function a_0 (self : t_sum 'a 'b) : 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_A a -> a
      | C_B _ -> any 'a
      end
  let function b_0 (self : t_sum 'a 'b) : 'b = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_A _ -> any 'b
      | C_B a -> a
      end
end
module DeriveMacros_Impl4_Clone_Interface
  type a
  type b
  use prelude.Borrow
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = DeriveMacros_Sum_Type.t_sum a b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = DeriveMacros_Sum_Type.t_sum a b
  val clone' [#"../derive_macros.rs" 28 9 28 14] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum a b
    requires {[#"../derive_macros.rs" 28 9 28 14] Inv0.inv self}
    ensures { [#"../derive_macros.rs" 28 9 28 14] result = self }
    ensures { [#"../derive_macros.rs" 28 9 28 14] Inv1.inv result }
    
end
module DeriveMacros_Impl4_Clone
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = b
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = b,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = a
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = a,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = DeriveMacros_Sum_Type.t_sum a b
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = DeriveMacros_Sum_Type.t_sum a b,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = b
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = b,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = b
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = b,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = a
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = a,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = a
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = a,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = DeriveMacros_Sum_Type.t_sum a b
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = DeriveMacros_Sum_Type.t_sum a b,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = b
  clone Core_Clone_Clone_Clone_Interface as Clone1 with
    type self = b,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv7.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = a
  clone Core_Clone_Clone_Clone_Interface as Clone0 with
    type self = a,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv6.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = DeriveMacros_Sum_Type.t_sum a b
  let rec cfg clone' [#"../derive_macros.rs" 28 9 28 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum a b
    requires {[#"../derive_macros.rs" 28 9 28 14] Inv0.inv self}
    ensures { [#"../derive_macros.rs" 28 9 28 14] result = self }
    ensures { [#"../derive_macros.rs" 28 9 28 14] Inv5.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : DeriveMacros_Sum_Type.t_sum a b;
  var self : DeriveMacros_Sum_Type.t_sum a b = self;
  var v0_1 : a;
  var _5 : a;
  var _7 : a;
  var v0_11 : b;
  var _9 : b;
  var _11 : b;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | DeriveMacros_Sum_Type.C_A _ -> goto BB1
      | DeriveMacros_Sum_Type.C_B _ -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    v0_11 <- DeriveMacros_Sum_Type.b_0 self;
    assert { [@expl:type invariant] Inv0.inv self };
    assume { Resolve0.resolve self };
    _11 <- v0_11;
    assert { [@expl:type invariant] Inv3.inv _11 };
    assume { Resolve3.resolve _11 };
    _9 <- ([#"../derive_macros.rs" 28 9 28 14] Clone1.clone' _11);
    goto BB7
  }
  BB3 {
    assert { [@expl:type invariant] Inv0.inv self };
    assume { Resolve0.resolve self };
    absurd
  }
  BB4 {
    v0_1 <- DeriveMacros_Sum_Type.a_0 self;
    assert { [@expl:type invariant] Inv0.inv self };
    assume { Resolve0.resolve self };
    _7 <- v0_1;
    assert { [@expl:type invariant] Inv1.inv _7 };
    assume { Resolve1.resolve _7 };
    _5 <- ([#"../derive_macros.rs" 28 9 28 14] Clone0.clone' _7);
    goto BB5
  }
  BB5 {
    assert { [@expl:type invariant] Inv2.inv v0_1 };
    assume { Resolve2.resolve v0_1 };
    _0 <- DeriveMacros_Sum_Type.C_A _5;
    _5 <- any a;
    goto BB6
  }
  BB6 {
    goto BB9
  }
  BB7 {
    assert { [@expl:type invariant] Inv4.inv v0_11 };
    assume { Resolve4.resolve v0_11 };
    _0 <- DeriveMacros_Sum_Type.C_B _9;
    _9 <- any b;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module DeriveMacros_Impl1_DeepModel_Stub
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  function deep_model [#"../derive_macros.rs" 39 4 39 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    
end
module DeriveMacros_Impl1_DeepModel_Interface
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  function deep_model [#"../derive_macros.rs" 39 4 39 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    
  val deep_model [#"../derive_macros.rs" 39 4 39 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    ensures { result = deep_model self }
    
end
module DeriveMacros_Impl1_DeepModel
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  function deep_model [#"../derive_macros.rs" 39 4 39 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    
   =
    [#"../derive_macros.rs" 40 8 43 9] match (self) with
      | DeriveMacros_Sum_Type.C_A a -> DeriveMacros_Sum_Type.C_A (DeepModel0.deep_model a)
      | DeriveMacros_Sum_Type.C_B b -> DeriveMacros_Sum_Type.C_B (DeepModel1.deep_model b)
      end
  val deep_model [#"../derive_macros.rs" 39 4 39 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
    ensures { result = deep_model self }
    
end
module DeriveMacros_Impl5_Eq_Interface
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = DeriveMacros_Sum_Type.t_sum a b,
    type DeepModelTy0.deepModelTy = DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = DeriveMacros_Sum_Type.t_sum a b
  val eq [#"../derive_macros.rs" 28 16 28 25] (self : DeriveMacros_Sum_Type.t_sum a b) (rhs : DeriveMacros_Sum_Type.t_sum a b) : bool
    requires {[#"../derive_macros.rs" 28 16 28 25] Inv0.inv self}
    requires {[#"../derive_macros.rs" 28 16 28 25] Inv0.inv rhs}
    ensures { [#"../derive_macros.rs" 28 16 28 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module DeriveMacros_Impl5_Eq
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel5 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel4 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  clone DeriveMacros_Impl1_DeepModel as DeepModel3 with
    type a = a,
    type b = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel5.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel2 with
    type t = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel5.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = b
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = b,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel1 with
    type t = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel4.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = a
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = a,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = DeriveMacros_Sum_Type.t_sum a b
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = DeriveMacros_Sum_Type.t_sum a b,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = DeriveMacros_Sum_Type.t_sum a b,
    type DeepModelTy0.deepModelTy = DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with
    type self = b,
    type rhs = b,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv3.inv,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel2.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = b
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with
    type self = a,
    type rhs = a,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv2.inv,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = DeriveMacros_Sum_Type.t_sum a b
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve1 with
    type t1 = DeriveMacros_Sum_Type.t_sum a b,
    type t2 = DeriveMacros_Sum_Type.t_sum a b,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Resolve1.resolve = Resolve0.resolve
  let rec cfg eq [#"../derive_macros.rs" 28 16 28 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : DeriveMacros_Sum_Type.t_sum a b) (rhs : DeriveMacros_Sum_Type.t_sum a b) : bool
    requires {[#"../derive_macros.rs" 28 16 28 25] Inv0.inv self}
    requires {[#"../derive_macros.rs" 28 16 28 25] Inv0.inv rhs}
    ensures { [#"../derive_macros.rs" 28 16 28 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : DeriveMacros_Sum_Type.t_sum a b = self;
  var rhs : DeriveMacros_Sum_Type.t_sum a b = rhs;
  var _4 : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b);
  var v0_1 : a;
  var v0_2 : a;
  var _12 : bool;
  var v0_11 : b;
  var v0_21 : b;
  var _17 : bool;
  {
    goto BB0
  }
  BB0 {
    assert { [@expl:type invariant] Inv0.inv self };
    assume { Resolve0.resolve self };
    assert { [@expl:type invariant] Inv0.inv rhs };
    assume { Resolve0.resolve rhs };
    _4 <- (self, rhs);
    switch (let (a, _) = _4 in a)
      | DeriveMacros_Sum_Type.C_A _ -> goto BB1
      | DeriveMacros_Sum_Type.C_B _ -> goto BB4
      end
  }
  BB1 {
    switch (let (_, a) = _4 in a)
      | DeriveMacros_Sum_Type.C_A _ -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    goto BB6
  }
  BB3 {
    assert { [@expl:type invariant] Inv1.inv _4 };
    assume { Resolve1.resolve _4 };
    _0 <- ([#"../derive_macros.rs" 28 16 28 25] false);
    goto BB16
  }
  BB4 {
    switch (let (_, a) = _4 in a)
      | DeriveMacros_Sum_Type.C_B _ -> goto BB5
      | _ -> goto BB3
      end
  }
  BB5 {
    goto BB11
  }
  BB6 {
    v0_1 <- DeriveMacros_Sum_Type.a_0 (let (a, _) = _4 in a);
    v0_2 <- DeriveMacros_Sum_Type.a_0 (let (_, a) = _4 in a);
    assert { [@expl:type invariant] Inv1.inv _4 };
    assume { Resolve1.resolve _4 };
    assert { [@expl:type invariant] Inv2.inv v0_1 };
    assume { Resolve2.resolve v0_1 };
    assert { [@expl:type invariant] Inv2.inv v0_2 };
    assume { Resolve2.resolve v0_2 };
    _12 <- ([#"../derive_macros.rs" 28 16 28 25] Eq0.eq v0_1 v0_2);
    goto BB10
  }
  BB7 {
    _0 <- ([#"../derive_macros.rs" 28 16 28 25] false);
    goto BB9
  }
  BB8 {
    _0 <- ([#"../derive_macros.rs" 28 16 28 25] true);
    goto BB9
  }
  BB9 {
    goto BB16
  }
  BB10 {
    switch (_12)
      | False -> goto BB7
      | True -> goto BB8
      end
  }
  BB11 {
    v0_11 <- DeriveMacros_Sum_Type.b_0 (let (a, _) = _4 in a);
    v0_21 <- DeriveMacros_Sum_Type.b_0 (let (_, a) = _4 in a);
    assert { [@expl:type invariant] Inv1.inv _4 };
    assume { Resolve1.resolve _4 };
    assert { [@expl:type invariant] Inv3.inv v0_11 };
    assume { Resolve3.resolve v0_11 };
    assert { [@expl:type invariant] Inv3.inv v0_21 };
    assume { Resolve3.resolve v0_21 };
    _17 <- ([#"../derive_macros.rs" 28 16 28 25] Eq1.eq v0_11 v0_21);
    goto BB15
  }
  BB12 {
    _0 <- ([#"../derive_macros.rs" 28 16 28 25] false);
    goto BB14
  }
  BB13 {
    _0 <- ([#"../derive_macros.rs" 28 16 28 25] true);
    goto BB14
  }
  BB14 {
    goto BB16
  }
  BB15 {
    switch (_17)
      | False -> goto BB12
      | True -> goto BB13
      end
  }
  BB16 {
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module DeriveMacros_Product2_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_product2 'a =
    | C_Product2 (borrowed 'a) bool (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
    
  let function product2_a (self : t_product2 'a) : borrowed 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Product2 a _ _ -> a
      end
  let function product2_b (self : t_product2 'a) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Product2 _ a _ -> a
      end
  let function product2_c (self : t_product2 'a) : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Product2 _ _ a -> a
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type a
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 19 8 19 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve
  type t
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (IndexLogic0.index_logic self i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module DeriveMacros_Impl6_Resolve_Stub
  type a
  use DeriveMacros_Product2_Type as DeriveMacros_Product2_Type
  predicate resolve [#"../derive_macros.rs" 49 9 49 16] (self : DeriveMacros_Product2_Type.t_product2 a)
end
module DeriveMacros_Impl6_Resolve_Interface
  type a
  use DeriveMacros_Product2_Type as DeriveMacros_Product2_Type
  predicate resolve [#"../derive_macros.rs" 49 9 49 16] (self : DeriveMacros_Product2_Type.t_product2 a)
  val resolve [#"../derive_macros.rs" 49 9 49 16] (self : DeriveMacros_Product2_Type.t_product2 a) : bool
    ensures { result = resolve self }
    
end
module DeriveMacros_Impl6_Resolve
  type a
  use prelude.Int
  use prelude.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl10_Resolve_Stub as Resolve2 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl2_Resolve_Stub as Resolve1 with
    type t = bool
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = a
  use DeriveMacros_Product2_Type as DeriveMacros_Product2_Type
  predicate resolve [#"../derive_macros.rs" 49 9 49 16] (self : DeriveMacros_Product2_Type.t_product2 a) =
    [#"../derive_macros.rs" 51 4 53 15] Resolve0.resolve (DeriveMacros_Product2_Type.product2_a self) /\ Resolve1.resolve (DeriveMacros_Product2_Type.product2_b self) /\ Resolve2.resolve (DeriveMacros_Product2_Type.product2_c self)
  val resolve [#"../derive_macros.rs" 49 9 49 16] (self : DeriveMacros_Product2_Type.t_product2 a) : bool
    ensures { result = resolve self }
    
end
module DeriveMacros_Sum2_Type
  type t_sum2 'a 'b =
    | C_X 'a
    | C_Y bool 'b
    
end
module DeriveMacros_Impl7_Resolve_Stub
  type a
  type b
  use DeriveMacros_Sum2_Type as DeriveMacros_Sum2_Type
  predicate resolve [#"../derive_macros.rs" 56 9 56 16] (self : DeriveMacros_Sum2_Type.t_sum2 a b)
end
module DeriveMacros_Impl7_Resolve_Interface
  type a
  type b
  use DeriveMacros_Sum2_Type as DeriveMacros_Sum2_Type
  predicate resolve [#"../derive_macros.rs" 56 9 56 16] (self : DeriveMacros_Sum2_Type.t_sum2 a b)
  val resolve [#"../derive_macros.rs" 56 9 56 16] (self : DeriveMacros_Sum2_Type.t_sum2 a b) : bool
    ensures { result = resolve self }
    
end
module DeriveMacros_Impl7_Resolve
  type a
  type b
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve2 with
    type self = b
  clone CreusotContracts_Resolve_Impl2_Resolve_Stub as Resolve1 with
    type t = bool
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = a
  use DeriveMacros_Sum2_Type as DeriveMacros_Sum2_Type
  predicate resolve [#"../derive_macros.rs" 56 9 56 16] (self : DeriveMacros_Sum2_Type.t_sum2 a b) =
    [#"../derive_macros.rs" 56 9 56 16] match (self) with
      | DeriveMacros_Sum2_Type.C_X v0_1 -> Resolve0.resolve v0_1
      | DeriveMacros_Sum2_Type.C_Y a_1 x_1 -> Resolve1.resolve a_1 /\ Resolve2.resolve x_1
      end
  val resolve [#"../derive_macros.rs" 56 9 56 16] (self : DeriveMacros_Sum2_Type.t_sum2 a b) : bool
    ensures { result = resolve self }
    
end
module DeriveMacros_Impl2
  type a
  type b
  use prelude.Borrow
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = DeriveMacros_Product_Type.t_product a b
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = DeriveMacros_Product_Type.t_product a b,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = DeriveMacros_Product_Type.t_product a b
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = DeriveMacros_Product_Type.t_product a b,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"../derive_macros.rs" 8 9 8 14] forall self : DeriveMacros_Product_Type.t_product a b . Inv0.inv self -> Inv0.inv self /\ (forall result : DeriveMacros_Product_Type.t_product a b . Inv1.inv result /\ result = self -> Inv1.inv result /\ result = self)
end
module DeriveMacros_Impl4
  type a
  type b
  use prelude.Borrow
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = DeriveMacros_Sum_Type.t_sum a b
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = DeriveMacros_Sum_Type.t_sum a b,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = DeriveMacros_Sum_Type.t_sum a b
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = DeriveMacros_Sum_Type.t_sum a b,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"../derive_macros.rs" 28 9 28 14] forall self : DeriveMacros_Sum_Type.t_sum a b . Inv0.inv self -> Inv0.inv self /\ (forall result : DeriveMacros_Sum_Type.t_sum a b . Inv1.inv result /\ result = self -> Inv1.inv result /\ result = self)
end
module DeriveMacros_Impl3
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel3 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel2 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  clone DeriveMacros_Impl0_DeepModel as DeepModel1 with
    type a = a,
    type b = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = DeriveMacros_Product_Type.t_product a b
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = DeriveMacros_Product_Type.t_product a b,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = DeriveMacros_Product_Type.t_product a b,
    type DeepModelTy0.deepModelTy = DeriveMacros_Product_Type.t_product DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"../derive_macros.rs" 8 16 8 25] forall self : DeriveMacros_Product_Type.t_product a b . forall other : DeriveMacros_Product_Type.t_product a b . Inv0.inv other /\ Inv0.inv self -> Inv0.inv other /\ Inv0.inv self /\ (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module DeriveMacros_Impl5
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel3 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel2 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  clone DeriveMacros_Impl1_DeepModel as DeepModel1 with
    type a = a,
    type b = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = DeriveMacros_Sum_Type.t_sum a b
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = DeriveMacros_Sum_Type.t_sum a b,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = DeriveMacros_Sum_Type.t_sum a b,
    type DeepModelTy0.deepModelTy = DeriveMacros_Sum_Type.t_sum DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"../derive_macros.rs" 28 16 28 25] forall self : DeriveMacros_Sum_Type.t_sum a b . forall other : DeriveMacros_Sum_Type.t_sum a b . Inv0.inv other /\ Inv0.inv self -> Inv0.inv other /\ Inv0.inv self /\ (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module DeriveMacros_Impl0
  type a
  type b
end
module DeriveMacros_Impl1
  type a
  type b
end
module DeriveMacros_Impl6
  type a
end
module DeriveMacros_Impl7
  type a
  type b
end
