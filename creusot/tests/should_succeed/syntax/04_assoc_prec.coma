module M_04_assoc_prec__respect_prec [#"04_assoc_prec.rs" 12 0 12 34]
  let%span s04_assoc_prec0 = "04_assoc_prec.rs" 9 10 9 31
  let%span s04_assoc_prec1 = "04_assoc_prec.rs" 10 10 10 35
  let%span s04_assoc_prec2 = "04_assoc_prec.rs" 11 10 11 20
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  meta "compute_max_steps" 1000000
  
  let rec respect_prec'0 (x:(uint32, uint32)) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = any_l () ]
    
    [ return' (result:())-> {[@expl:respect_prec ensures #0] [%#s04_assoc_prec0] 5 = 3  -> 2 + 1 = 3}
      {[@expl:respect_prec ensures #1] [%#s04_assoc_prec1] div (5 * 3) 2 <> 4 * (40 + 1)}
      {[@expl:respect_prec ensures #2] [%#s04_assoc_prec2] (let (a, _) = x in a) = (let (_, a) = x in a)}
      (! return' {result}) ]
    
end
module M_04_assoc_prec__respect_assoc [#"04_assoc_prec.rs" 15 0 15 22]
  let%span s04_assoc_prec0 = "04_assoc_prec.rs" 14 10 14 28
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec respect_assoc'0 (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:respect_assoc ensures] [%#s04_assoc_prec0] 0 + 1 = 0} (! return' {result}) ]
    
end
