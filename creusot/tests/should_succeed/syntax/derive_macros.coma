
module DeriveMacros_Product_Type
  type t_product 'a 'b =
    | C_Product 'a 'b
    
  function any_l (_ : 'b) : 'a
  let rec t_product < 'a > < 'b > (input:t_product 'a 'b) (ret  (a:'a) (b:'b))= any
    [ good (a:'a) (b:'b)-> {C_Product a b = input} (! ret {a} {b})
    | bad (a:'a) (b:'b)-> {C_Product a b <> input} {false} any ]
    
  function product_a (self : t_product 'a 'b) : 'a =
    match self with
      | C_Product a _ -> a
      end
  function product_b (self : t_product 'a 'b) : 'b =
    match self with
      | C_Product _ a -> a
      end
end
module DeriveMacros_Impl4_Clone
  type a
  type b
  predicate invariant'5 (self : b)
  let rec invariant'5 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : b)
  let rec inv'5 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ] 
  axiom inv'5 : forall x : b . inv'5 x = true
  predicate invariant'4 (self : a)
  let rec invariant'4 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : a)
  let rec inv'4 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : a . inv'4 x = true
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  predicate invariant'3 (self : DeriveMacros_Product_Type.t_product a b)
  let rec invariant'3 (self:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : DeriveMacros_Product_Type.t_product a b)
  let rec inv'3 (_x:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : DeriveMacros_Product_Type.t_product a b . inv'3 x = true
  predicate invariant'2 (self : b)
  let rec invariant'2 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : b)
  let rec inv'2 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : b . inv'2 x = true
  predicate invariant'1 (self : DeriveMacros_Product_Type.t_product a b)
  let rec invariant'1 (self:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : DeriveMacros_Product_Type.t_product a b)
  let rec inv'1 (_x:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : DeriveMacros_Product_Type.t_product a b . inv'1 x = true
  predicate invariant'0 (self : a)
  let rec invariant'0 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : a)
  let rec inv'0 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : a . inv'0 x = true
  use prelude.Borrow
  use prelude.Intrinsic
  let rec clone'1 (self:b) (return'  (ret:b))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:b)-> {inv'5 result}
      {[#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self}
      (! return' {result}) ]
    
  predicate resolve'2 (self : b)
  let rec resolve'2 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : DeriveMacros_Product_Type.t_product a b)
  let rec resolve'1 (self:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  let rec clone'0 (self:a) (return'  (ret:a))= {[@expl:precondition] inv'0 self}
    any
    [ return' (result:a)-> {inv'4 result}
      {[#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self}
      (! return' {result}) ]
    
  predicate resolve'0 (self : a)
  let rec resolve'0 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec clone' (self:DeriveMacros_Product_Type.t_product a b) (return'  (ret:DeriveMacros_Product_Type.t_product a b))= {[#"../derive_macros.rs" 8 9 8 14] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = DeriveMacros_Product_Type.t_product <a> <b> {self} (fun (ra'0:a) (rb'0:b) ->  [ &_5 <- ra'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 _5} s2
      | s2 = -{resolve'0 _5}- s3
      | s3 = clone'0 {_5} (fun (_ret':a) ->  [ &_3 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = DeriveMacros_Product_Type.t_product <a> <b> {self} (fun (ra'0:a) (rb'0:b) ->  [ &_8 <- rb'0 ] s1)
      | s1 = {[@expl:type invariant] inv'1 self} s2
      | s2 = -{resolve'1 self}- s3
      | s3 = {[@expl:type invariant] inv'2 _8} s4
      | s4 = -{resolve'2 _8}- s5
      | s5 = clone'1 {_8} (fun (_ret':b) ->  [ &_6 <- _ret' ] s6)
      | s6 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_0 <- DeriveMacros_Product_Type.C_Product _3 _6 : DeriveMacros_Product_Type.t_product a b ] 
        (any [ any_ (_any:a)-> (!  [ &_3 <- _any ] (any [ any_ (_any:b)-> (!  [ &_6 <- _any ] s1) ] )) ] )
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : DeriveMacros_Product_Type.t_product a b = any_l () : DeriveMacros_Product_Type.t_product a b
    | & self : DeriveMacros_Product_Type.t_product a b = self
    | & _3 : a = any_l () : a
    | & _5 : a = any_l () : a
    | & _6 : b = any_l () : b
    | & _8 : b = any_l () : b ]
    
    [ return' (result:DeriveMacros_Product_Type.t_product a b)-> {[@expl:postcondition] [#"../derive_macros.rs" 8 9 8 14] inv'3 result}
      {[@expl:postcondition] [#"../derive_macros.rs" 8 9 8 14] result = self}
      (! return' {result}) ]
    
end
module DeriveMacros_Impl5_Eq
  type a
  type b
  predicate invariant'2 (self : b)
  let rec invariant'2 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : b)
  let rec inv'2 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : b . inv'2 x = true
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  predicate invariant'1 (self : DeriveMacros_Product_Type.t_product a b)
  let rec invariant'1 (self:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : DeriveMacros_Product_Type.t_product a b)
  let rec inv'1 (_x:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : DeriveMacros_Product_Type.t_product a b . inv'1 x = true
  predicate invariant'0 (self : a)
  let rec invariant'0 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : a)
  let rec inv'0 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : a . inv'0 x = true
  type deep_model_ty'1
  function deep_model'5 (self : b) : deep_model_ty'1
  let rec deep_model'5 (self:b) (return'  (ret:deep_model_ty'1))= any
    [ return' (result:deep_model_ty'1)-> {result = deep_model'5 self} (! return' {result}) ]
    
  type deep_model_ty'0
  function deep_model'4 (self : a) : deep_model_ty'0
  let rec deep_model'4 (self:a) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'4 self} (! return' {result}) ]
    
  function deep_model'3 [#"../derive_macros.rs" 23 4 23 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product deep_model_ty'0 deep_model_ty'1
    
   =
    [#"../derive_macros.rs" 24 8 24 66] DeriveMacros_Product_Type.C_Product (deep_model'4 (DeriveMacros_Product_Type.product_a self)) (deep_model'5 (DeriveMacros_Product_Type.product_b self))
  let rec deep_model'3 (self:DeriveMacros_Product_Type.t_product a b) (return'  (ret:DeriveMacros_Product_Type.t_product deep_model_ty'0 deep_model_ty'1))= any
    [ return' (result:DeriveMacros_Product_Type.t_product deep_model_ty'0 deep_model_ty'1)-> {result
      = deep_model'3 self}
      (! return' {result}) ]
    
  use prelude.Borrow
  function deep_model'0 (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product deep_model_ty'0 deep_model_ty'1
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'3 self
  let rec deep_model'0 (self:DeriveMacros_Product_Type.t_product a b) (return'  (ret:DeriveMacros_Product_Type.t_product deep_model_ty'0 deep_model_ty'1))= any
    [ return' (result:DeriveMacros_Product_Type.t_product deep_model_ty'0 deep_model_ty'1)-> {result
      = deep_model'0 self}
      (! return' {result}) ]
    
  use prelude.Intrinsic
  function deep_model'2 (self : b) : deep_model_ty'1 =
    [#"../../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'5 self
  let rec deep_model'2 (self:b) (return'  (ret:deep_model_ty'1))= any
    [ return' (result:deep_model_ty'1)-> {result = deep_model'2 self} (! return' {result}) ]
    
  let rec eq'1 (self:b) (other:b) (return'  (ret:bool))= {[@expl:precondition] inv'2 other}
    {[@expl:precondition] inv'2 self}
    any
    [ return' (result:bool)-> {[#"../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result
      = (deep_model'2 self = deep_model'2 other)}
      (! return' {result}) ]
    
  predicate resolve'2 (self : b)
  let rec resolve'2 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : DeriveMacros_Product_Type.t_product a b)
  let rec resolve'1 (self:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  function deep_model'1 (self : a) : deep_model_ty'0 =
    [#"../../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'4 self
  let rec deep_model'1 (self:a) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'1 self} (! return' {result}) ]
    
  let rec eq'0 (self:a) (other:a) (return'  (ret:bool))= {[@expl:precondition] inv'0 other}
    {[@expl:precondition] inv'0 self}
    any
    [ return' (result:bool)-> {[#"../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result
      = (deep_model'1 self = deep_model'1 other)}
      (! return' {result}) ]
    
  predicate resolve'0 (self : a)
  let rec resolve'0 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec eq (self:DeriveMacros_Product_Type.t_product a b) (rhs:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= {[#"../derive_macros.rs" 8 16 8 25] inv'1 rhs}
    {[#"../derive_macros.rs" 8 16 8 25] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = DeriveMacros_Product_Type.t_product <a> <b> {rhs} (fun (ra'0:a) (rb'0:b) ->  [ &_7 <- ra'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 _7} s2
      | s2 = -{resolve'0 _7}- s3
      | s3 = DeriveMacros_Product_Type.t_product <a> <b> {self}
          (fun (ra'1:a) (rb'1:b) -> eq'0 {ra'1} {_7} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s4))
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = any [ br0 -> {_4 = false} (! bb3) | br1 -> {_4} (! bb2) ]  ] 
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'1 self}- s2
      | s2 = DeriveMacros_Product_Type.t_product <a> <b> {rhs} (fun (ra'0:a) (rb'0:b) ->  [ &_10 <- rb'0 ] s3)
      | s3 = {[@expl:type invariant] inv'1 rhs} s4
      | s4 = -{resolve'1 rhs}- s5
      | s5 = {[@expl:type invariant] inv'2 _10} s6
      | s6 = -{resolve'2 _10}- s7
      | s7 = DeriveMacros_Product_Type.t_product <a> <b> {self}
          (fun (ra'1:a) (rb'1:b) -> eq'1 {rb'1} {_10} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s8))
      | s8 = bb4 ]
      
    | bb4 = s0 [ s0 = bb5 ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'1 rhs} s1
      | s1 = -{resolve'1 rhs}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 =  [ &_0 <- [#"../derive_macros.rs" 10 4 11 8] false ] s5
      | s5 = bb5 ]
      
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : bool = any_l () : bool
    | & self : DeriveMacros_Product_Type.t_product a b = self
    | & rhs : DeriveMacros_Product_Type.t_product a b = rhs
    | & _4 : bool = any_l () : bool
    | & _7 : a = any_l () : a
    | & _10 : b = any_l () : b ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [#"../derive_macros.rs" 8 16 8 25] result
      = (deep_model'0 self = deep_model'0 rhs)}
      (! return' {result}) ]
    
end
module DeriveMacros_Sum_Type
  type t_sum 'a 'b =
    | C_A 'a
    | C_B 'b
    
  function any_l (_ : 'b) : 'a
  let rec a < 'a > < 'b > (input:t_sum 'a 'b) (ret  (field_0:'a))= any
    [ good (field_0:'a)-> {C_A field_0 = input} (! ret {field_0})
    | bad (field_0:'a)-> {C_A field_0 <> input} {false} any ]
    
  let rec b < 'a > < 'b > (input:t_sum 'a 'b) (ret  (field_0:'b))= any
    [ good (field_0:'b)-> {C_B field_0 = input} (! ret {field_0})
    | bad (field_0:'b)-> {C_B field_0 <> input} {false} any ]
    
end
module DeriveMacros_Impl6_Clone
  type a
  type b
  predicate invariant'7 (self : a)
  let rec invariant'7 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : a)
  let rec inv'7 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ] 
  axiom inv'7 : forall x : a . inv'7 x = true
  predicate invariant'6 (self : b)
  let rec invariant'6 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : b)
  let rec inv'6 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ] 
  axiom inv'6 : forall x : b . inv'6 x = true
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  predicate invariant'5 (self : DeriveMacros_Sum_Type.t_sum a b)
  let rec invariant'5 (self:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : DeriveMacros_Sum_Type.t_sum a b)
  let rec inv'5 (_x:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : DeriveMacros_Sum_Type.t_sum a b . inv'5 x = true
  predicate invariant'4 (self : a)
  let rec invariant'4 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : a)
  let rec inv'4 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : a . inv'4 x = true
  predicate invariant'3 (self : a)
  let rec invariant'3 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : a)
  let rec inv'3 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : a . inv'3 x = true
  predicate invariant'2 (self : b)
  let rec invariant'2 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : b)
  let rec inv'2 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : b . inv'2 x = true
  predicate invariant'1 (self : b)
  let rec invariant'1 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : b)
  let rec inv'1 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : b . inv'1 x = true
  predicate invariant'0 (self : DeriveMacros_Sum_Type.t_sum a b)
  let rec invariant'0 (self:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : DeriveMacros_Sum_Type.t_sum a b)
  let rec inv'0 (_x:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : DeriveMacros_Sum_Type.t_sum a b . inv'0 x = true
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'4 (self : a)
  let rec resolve'4 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  let rec clone'1 (self:a) (return'  (ret:a))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:a)-> {inv'7 result}
      {[#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self}
      (! return' {result}) ]
    
  predicate resolve'3 (self : a)
  let rec resolve'3 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'2 (self : b)
  let rec resolve'2 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  let rec clone'0 (self:b) (return'  (ret:b))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:b)-> {inv'6 result}
      {[#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self}
      (! return' {result}) ]
    
  predicate resolve'1 (self : b)
  let rec resolve'1 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : DeriveMacros_Sum_Type.t_sum a b)
  let rec resolve'0 (self:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec clone' (self:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:DeriveMacros_Sum_Type.t_sum a b))= {[#"../derive_macros.rs" 28 9 28 14] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:a)-> {self = DeriveMacros_Sum_Type.C_A a} (! bb2)
        | br1 (a:b)-> {self = DeriveMacros_Sum_Type.C_B a} (! bb3) ]
         ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../derive_macros.rs" 28 9 28 14] false} any ]
      
    | bb3 = s0
      [ s0 = DeriveMacros_Sum_Type.b <a> <b> {self} (fun (r0'0:b) ->  [ &v0_11 <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_11 <- v0_11 ] s4
      | s4 = {[@expl:type invariant] inv'1 _11} s5
      | s5 = -{resolve'1 _11}- s6
      | s6 = clone'0 {_11} (fun (_ret':b) ->  [ &_9 <- _ret' ] s7)
      | s7 = bb7 ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'2 v0_11} s1
      | s1 = -{resolve'2 v0_11}- s2
      | s2 =  [ &_0 <- DeriveMacros_Sum_Type.C_B _9 : DeriveMacros_Sum_Type.t_sum a b ] 
        (any [ any_ (_any:b)-> (!  [ &_9 <- _any ] s3) ] )
      | s3 = bb8 ]
      
    | bb8 = s0 [ s0 = bb9 ] 
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = DeriveMacros_Sum_Type.a <a> <b> {self} (fun (r0'0:a) ->  [ &v0_1 <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_7 <- v0_1 ] s4
      | s4 = {[@expl:type invariant] inv'3 _7} s5
      | s5 = -{resolve'3 _7}- s6
      | s6 = clone'1 {_7} (fun (_ret':a) ->  [ &_5 <- _ret' ] s7)
      | s7 = bb5 ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'4 v0_1} s1
      | s1 = -{resolve'4 v0_1}- s2
      | s2 =  [ &_0 <- DeriveMacros_Sum_Type.C_A _5 : DeriveMacros_Sum_Type.t_sum a b ] 
        (any [ any_ (_any:a)-> (!  [ &_5 <- _any ] s3) ] )
      | s3 = bb6 ]
      
    | bb6 = s0 [ s0 = bb9 ] 
    | bb9 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : DeriveMacros_Sum_Type.t_sum a b = any_l () : DeriveMacros_Sum_Type.t_sum a b
    | & self : DeriveMacros_Sum_Type.t_sum a b = self
    | & v0_1 : a = any_l () : a
    | & _5 : a = any_l () : a
    | & _7 : a = any_l () : a
    | & v0_11 : b = any_l () : b
    | & _9 : b = any_l () : b
    | & _11 : b = any_l () : b ]
    
    [ return' (result:DeriveMacros_Sum_Type.t_sum a b)-> {[@expl:postcondition] [#"../derive_macros.rs" 28 9 28 14] inv'5 result}
      {[@expl:postcondition] [#"../derive_macros.rs" 28 9 28 14] result = self}
      (! return' {result}) ]
    
end
module DeriveMacros_Impl7_Eq
  type a
  type b
  predicate invariant'3 (self : a)
  let rec invariant'3 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : a)
  let rec inv'3 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : a . inv'3 x = true
  predicate invariant'2 (self : b)
  let rec invariant'2 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : b)
  let rec inv'2 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : b . inv'2 x = true
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  predicate invariant'1 (self : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b))
  let rec invariant'1 (self:(DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b))
  let rec inv'1 (_x:(DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b) . inv'1 x = true
  predicate invariant'0 (self : DeriveMacros_Sum_Type.t_sum a b)
  let rec invariant'0 (self:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : DeriveMacros_Sum_Type.t_sum a b)
  let rec inv'0 (_x:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : DeriveMacros_Sum_Type.t_sum a b . inv'0 x = true
  type deep_model_ty'0
  function deep_model'4 (self : b) : deep_model_ty'0
  let rec deep_model'4 (self:b) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'4 self} (! return' {result}) ]
    
  type deep_model_ty'1
  function deep_model'5 (self : a) : deep_model_ty'1
  let rec deep_model'5 (self:a) (return'  (ret:deep_model_ty'1))= any
    [ return' (result:deep_model_ty'1)-> {result = deep_model'5 self} (! return' {result}) ]
    
  function deep_model'3 [#"../derive_macros.rs" 39 4 39 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum deep_model_ty'1 deep_model_ty'0
    
   =
    [#"../derive_macros.rs" 40 8 43 9] match self with
      | DeriveMacros_Sum_Type.C_A a -> DeriveMacros_Sum_Type.C_A (deep_model'5 a)
      | DeriveMacros_Sum_Type.C_B b -> DeriveMacros_Sum_Type.C_B (deep_model'4 b)
      end
  let rec deep_model'3 (self:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:DeriveMacros_Sum_Type.t_sum deep_model_ty'1 deep_model_ty'0))= any
    [ return' (result:DeriveMacros_Sum_Type.t_sum deep_model_ty'1 deep_model_ty'0)-> {result = deep_model'3 self}
      (! return' {result}) ]
    
  use prelude.Borrow
  function deep_model'0 (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum deep_model_ty'1 deep_model_ty'0
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'3 self
  let rec deep_model'0 (self:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:DeriveMacros_Sum_Type.t_sum deep_model_ty'1 deep_model_ty'0))= any
    [ return' (result:DeriveMacros_Sum_Type.t_sum deep_model_ty'1 deep_model_ty'0)-> {result = deep_model'0 self}
      (! return' {result}) ]
    
  use prelude.Intrinsic
  function deep_model'2 (self : a) : deep_model_ty'1 =
    [#"../../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'5 self
  let rec deep_model'2 (self:a) (return'  (ret:deep_model_ty'1))= any
    [ return' (result:deep_model_ty'1)-> {result = deep_model'2 self} (! return' {result}) ]
    
  let rec eq'1 (self:a) (other:a) (return'  (ret:bool))= {[@expl:precondition] inv'3 other}
    {[@expl:precondition] inv'3 self}
    any
    [ return' (result:bool)-> {[#"../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result
      = (deep_model'2 self = deep_model'2 other)}
      (! return' {result}) ]
    
  predicate resolve'3 (self : a)
  let rec resolve'3 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  function deep_model'1 (self : b) : deep_model_ty'0 =
    [#"../../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'4 self
  let rec deep_model'1 (self:b) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'1 self} (! return' {result}) ]
    
  let rec eq'0 (self:b) (other:b) (return'  (ret:bool))= {[@expl:precondition] inv'2 other}
    {[@expl:precondition] inv'2 self}
    any
    [ return' (result:bool)-> {[#"../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result
      = (deep_model'1 self = deep_model'1 other)}
      (! return' {result}) ]
    
  predicate resolve'2 (self : b)
  let rec resolve'2 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 (self : DeriveMacros_Sum_Type.t_sum a b)
  let rec resolve'0 (self:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate resolve'1 (self : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'0 (let (a, _) = self in a)
    /\ resolve'0 (let (_, a) = self in a)
  let rec resolve'1 (self:(DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  let rec eq (self:DeriveMacros_Sum_Type.t_sum a b) (rhs:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= {[#"../derive_macros.rs" 28 16 28 25] inv'0 rhs}
    {[#"../derive_macros.rs" 28 16 28 25] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[@expl:type invariant] inv'0 rhs} s3
      | s3 = -{resolve'0 rhs}- s4
      | s4 =  [ &_4 <- (self, rhs) ] s5
      | s5 = any
        [ br0 (a:a)-> {(let (r'0, _) = _4 in r'0) = DeriveMacros_Sum_Type.C_A a} (! bb2)
        | br1 (a:b)-> {(let (r'0, _) = _4 in r'0) = DeriveMacros_Sum_Type.C_B a} (! bb4) ]
         ]
      
    | bb4 = s0
      [ s0 = any
        [ br0 (a:a)-> {(let (_, r'0) = _4 in r'0) = DeriveMacros_Sum_Type.C_A a} (! bb1)
        | br1 (a:b)-> {(let (_, r'0) = _4 in r'0) = DeriveMacros_Sum_Type.C_B a} (! bb5) ]
         ]
      
    | bb5 = s0 [ s0 = bb11 ] 
    | bb11 = s0
      [ s0 = DeriveMacros_Sum_Type.b <a> <b> {let (r'0, _) = _4 in r'0} (fun (r0'0:b) ->  [ &v0_11 <- r0'0 ] s1)
      | s1 = DeriveMacros_Sum_Type.b <a> <b> {let (_, r'1) = _4 in r'1} (fun (r0'1:b) ->  [ &v0_21 <- r0'1 ] s2)
      | s2 = {[@expl:type invariant] inv'1 _4} s3
      | s3 = -{resolve'1 _4}- s4
      | s4 = {[@expl:type invariant] inv'2 v0_11} s5
      | s5 = -{resolve'2 v0_11}- s6
      | s6 = {[@expl:type invariant] inv'2 v0_21} s7
      | s7 = -{resolve'2 v0_21}- s8
      | s8 = eq'0 {v0_11} {v0_21} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s9)
      | s9 = bb12 ]
      
    | bb12 = s0 [ s0 = any [ br0 -> {_17 = false} (! bb14) | br1 -> {_17} (! bb13) ]  ] 
    | bb13 = s0 [ s0 =  [ &_0 <- [#"../derive_macros.rs" 28 16 28 25] true ] s1 | s1 = bb15 ] 
    | bb14 = s0 [ s0 =  [ &_0 <- [#"../derive_macros.rs" 28 16 28 25] false ] s1 | s1 = bb15 ] 
    | bb15 = s0 [ s0 = bb16 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:a)-> {(let (_, r'0) = _4 in r'0) = DeriveMacros_Sum_Type.C_A a} (! bb3)
        | br1 (a:b)-> {(let (_, r'0) = _4 in r'0) = DeriveMacros_Sum_Type.C_B a} (! bb1) ]
         ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'1 _4} s1
      | s1 = -{resolve'1 _4}- s2
      | s2 =  [ &_0 <- [#"../derive_macros.rs" 28 16 28 25] false ] s3
      | s3 = bb16 ]
      
    | bb3 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = DeriveMacros_Sum_Type.a <a> <b> {let (r'0, _) = _4 in r'0} (fun (r0'0:a) ->  [ &v0_1 <- r0'0 ] s1)
      | s1 = DeriveMacros_Sum_Type.a <a> <b> {let (_, r'1) = _4 in r'1} (fun (r0'1:a) ->  [ &v0_2 <- r0'1 ] s2)
      | s2 = {[@expl:type invariant] inv'1 _4} s3
      | s3 = -{resolve'1 _4}- s4
      | s4 = {[@expl:type invariant] inv'3 v0_1} s5
      | s5 = -{resolve'3 v0_1}- s6
      | s6 = {[@expl:type invariant] inv'3 v0_2} s7
      | s7 = -{resolve'3 v0_2}- s8
      | s8 = eq'1 {v0_1} {v0_2} (fun (_ret':bool) ->  [ &_12 <- _ret' ] s9)
      | s9 = bb7 ]
      
    | bb7 = s0 [ s0 = any [ br0 -> {_12 = false} (! bb9) | br1 -> {_12} (! bb8) ]  ] 
    | bb8 = s0 [ s0 =  [ &_0 <- [#"../derive_macros.rs" 28 16 28 25] true ] s1 | s1 = bb10 ] 
    | bb9 = s0 [ s0 =  [ &_0 <- [#"../derive_macros.rs" 28 16 28 25] false ] s1 | s1 = bb10 ] 
    | bb10 = s0 [ s0 = bb16 ] 
    | bb16 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : bool = any_l () : bool
    | & self : DeriveMacros_Sum_Type.t_sum a b = self
    | & rhs : DeriveMacros_Sum_Type.t_sum a b = rhs
    | & _4 : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b) = any_l () : (DeriveMacros_Sum_Type.t_sum a b, DeriveMacros_Sum_Type.t_sum a b)
    | & v0_1 : a = any_l () : a
    | & v0_2 : a = any_l () : a
    | & _12 : bool = any_l () : bool
    | & v0_11 : b = any_l () : b
    | & v0_21 : b = any_l () : b
    | & _17 : bool = any_l () : bool ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [#"../derive_macros.rs" 28 16 28 25] result
      = (deep_model'0 self = deep_model'0 rhs)}
      (! return' {result}) ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module DeriveMacros_Product2_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use prelude.UInt32
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Borrow
  type t_product2 'a =
    | C_Product2 (borrowed 'a) bool (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
    
  function any_l (_ : 'b) : 'a
  let rec t_product2 < 'a > (input:t_product2 'a) (ret  (a:borrowed 'a) (b:bool) (c:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)))= any
    [ good (a:borrowed 'a) (b:bool) (c:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))-> {C_Product2 a b c
      = input}
      (! ret {a} {b} {c})
    | bad (a:borrowed 'a) (b:bool) (c:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))-> {C_Product2 a b c
      <> input}
      {false}
      any ]
    
  function product2_a (self : t_product2 'a) : borrowed 'a =
    match self with
      | C_Product2 a _ _ -> a
      end
  function product2_b (self : t_product2 'a) : bool =
    match self with
      | C_Product2 _ a _ -> a
      end
  function product2_c (self : t_product2 'a) : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) =
    match self with
      | C_Product2 _ _ a -> a
      end
end
module DeriveMacros_Sum2_Type
  type t_sum2 'a 'b =
    | C_X 'a
    | C_Y bool 'b
    
  function any_l (_ : 'b) : 'a
  let rec x < 'a > < 'b > (input:t_sum2 'a 'b) (ret  (field_0:'a))= any
    [ good (field_0:'a)-> {C_X field_0 = input} (! ret {field_0})
    | bad (field_0:'a)-> {C_X field_0 <> input} {false} any ]
    
  let rec y < 'a > < 'b > (input:t_sum2 'a 'b) (ret  (a:bool) (x:'b))= any
    [ good (a:bool) (x:'b)-> {C_Y a x = input} (! ret {a} {x}) | bad (a:bool) (x:'b)-> {C_Y a x <> input} {false} any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module DeriveMacros_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_list 't =
    | C_List 't (Core_Option_Option_Type.t_option (t_list 't))
    
  function any_l (_ : 'b) : 'a
  let rec t_list < 't > (input:t_list 't) (ret  (elem:'t) (tail:Core_Option_Option_Type.t_option (t_list 't)))= any
    [ good (elem:'t) (tail:Core_Option_Option_Type.t_option (t_list 't))-> {C_List elem tail = input}
      (! ret {elem} {tail})
    | bad (elem:'t) (tail:Core_Option_Option_Type.t_option (t_list 't))-> {C_List elem tail <> input} {false} any ]
    
  function list_elem (self : t_list 't) : 't =
    match self with
      | C_List a _ -> a
      end
  function list_tail (self : t_list 't) : Core_Option_Option_Type.t_option (t_list 't) =
    match self with
      | C_List _ a -> a
      end
end
module DeriveMacros_ListDeepModel_Type
  type deep_model_ty'0
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_listdeepmodel 't 'proj0 =
    | C_ListDeepModel 'proj0 (Core_Option_Option_Type.t_option (t_listdeepmodel 't 'proj0))
    
  function any_l (_ : 'b) : 'a
  let rec t_listdeepmodel < 't > < 'proj0 > (input:t_listdeepmodel 't 'proj0) (ret  (elem:'proj0) (tail:Core_Option_Option_Type.t_option (t_listdeepmodel 't 'proj0)))= any
    [ good (elem:'proj0) (tail:Core_Option_Option_Type.t_option (t_listdeepmodel 't 'proj0))-> {C_ListDeepModel elem tail
      = input}
      (! ret {elem} {tail})
    | bad (elem:'proj0) (tail:Core_Option_Option_Type.t_option (t_listdeepmodel 't 'proj0))-> {C_ListDeepModel elem tail
      <> input}
      {false}
      any ]
    
end
module DeriveMacros_Expr_Type
  type t_expr 'v =
    | C_Var 'v
    | C_Add (t_expr 'v) (t_expr 'v)
    
  function any_l (_ : 'b) : 'a
  let rec var' < 'v > (input:t_expr 'v) (ret  (field_0:'v))= any
    [ good (field_0:'v)-> {C_Var field_0 = input} (! ret {field_0})
    | bad (field_0:'v)-> {C_Var field_0 <> input} {false} any ]
    
  let rec add < 'v > (input:t_expr 'v) (ret  (field_0:t_expr 'v) (field_1:t_expr 'v))= any
    [ good (field_0:t_expr 'v) (field_1:t_expr 'v)-> {C_Add field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:t_expr 'v) (field_1:t_expr 'v)-> {C_Add field_0 field_1 <> input} {false} any ]
    
end
module DeriveMacros_ExprDeepModel_Type
  type deep_model_ty'0
  type t_exprdeepmodel 'v 'proj0 =
    | C_Var 'proj0
    | C_Add (t_exprdeepmodel 'v 'proj0) (t_exprdeepmodel 'v 'proj0)
    
  function any_l (_ : 'b) : 'a
  let rec var' < 'v > < 'proj0 > (input:t_exprdeepmodel 'v 'proj0) (ret  (field_0:'proj0))= any
    [ good (field_0:'proj0)-> {C_Var field_0 = input} (! ret {field_0})
    | bad (field_0:'proj0)-> {C_Var field_0 <> input} {false} any ]
    
  let rec add < 'v > < 'proj0 > (input:t_exprdeepmodel 'v 'proj0) (ret  (field_0:t_exprdeepmodel 'v 'proj0) (field_1:t_exprdeepmodel 'v 'proj0))= any
    [ good (field_0:t_exprdeepmodel 'v 'proj0) (field_1:t_exprdeepmodel 'v 'proj0)-> {C_Add field_0 field_1 = input}
      (! ret {field_0} {field_1})
    | bad (field_0:t_exprdeepmodel 'v 'proj0) (field_1:t_exprdeepmodel 'v 'proj0)-> {C_Add field_0 field_1 <> input}
      {false}
      any ]
    
end
module DeriveMacros_Impl4
  type a
  type b
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  predicate invariant'1 (self : DeriveMacros_Product_Type.t_product a b)
  let rec invariant'1 (self:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : DeriveMacros_Product_Type.t_product a b)
  let rec inv'1 (_x:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : DeriveMacros_Product_Type.t_product a b . inv'1 x = true
  predicate invariant'0 (self : DeriveMacros_Product_Type.t_product a b)
  let rec invariant'0 (self:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : DeriveMacros_Product_Type.t_product a b)
  let rec inv'0 (_x:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : DeriveMacros_Product_Type.t_product a b . inv'0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../derive_macros.rs" 8 9 8 14] forall self : DeriveMacros_Product_Type.t_product a b . inv'0 self
   -> inv'0 self
  /\ (forall result : DeriveMacros_Product_Type.t_product a b . inv'1 result /\ result = self
   -> inv'1 result /\ result = self)
end
module DeriveMacros_Impl6
  type a
  type b
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  predicate invariant'1 (self : DeriveMacros_Sum_Type.t_sum a b)
  let rec invariant'1 (self:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : DeriveMacros_Sum_Type.t_sum a b)
  let rec inv'1 (_x:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : DeriveMacros_Sum_Type.t_sum a b . inv'1 x = true
  predicate invariant'0 (self : DeriveMacros_Sum_Type.t_sum a b)
  let rec invariant'0 (self:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : DeriveMacros_Sum_Type.t_sum a b)
  let rec inv'0 (_x:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : DeriveMacros_Sum_Type.t_sum a b . inv'0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../derive_macros.rs" 28 9 28 14] forall self : DeriveMacros_Sum_Type.t_sum a b . inv'0 self
   -> inv'0 self
  /\ (forall result : DeriveMacros_Sum_Type.t_sum a b . inv'1 result /\ result = self  -> inv'1 result /\ result = self)
end
module DeriveMacros_Impl5
  type a
  type b
  use DeriveMacros_Product_Type as DeriveMacros_Product_Type
  predicate invariant'0 (self : DeriveMacros_Product_Type.t_product a b)
  let rec invariant'0 (self:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : DeriveMacros_Product_Type.t_product a b)
  let rec inv'0 (_x:DeriveMacros_Product_Type.t_product a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : DeriveMacros_Product_Type.t_product a b . inv'0 x = true
  type deep_model_ty'1
  function deep_model'3 (self : b) : deep_model_ty'1
  let rec deep_model'3 (self:b) (return'  (ret:deep_model_ty'1))= any
    [ return' (result:deep_model_ty'1)-> {result = deep_model'3 self} (! return' {result}) ]
    
  type deep_model_ty'0
  function deep_model'2 (self : a) : deep_model_ty'0
  let rec deep_model'2 (self:a) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'2 self} (! return' {result}) ]
    
  function deep_model'1 [#"../derive_macros.rs" 23 4 23 44] (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product deep_model_ty'0 deep_model_ty'1
    
   =
    [#"../derive_macros.rs" 24 8 24 66] DeriveMacros_Product_Type.C_Product (deep_model'2 (DeriveMacros_Product_Type.product_a self)) (deep_model'3 (DeriveMacros_Product_Type.product_b self))
  let rec deep_model'1 (self:DeriveMacros_Product_Type.t_product a b) (return'  (ret:DeriveMacros_Product_Type.t_product deep_model_ty'0 deep_model_ty'1))= any
    [ return' (result:DeriveMacros_Product_Type.t_product deep_model_ty'0 deep_model_ty'1)-> {result
      = deep_model'1 self}
      (! return' {result}) ]
    
  use prelude.Borrow
  function deep_model'0 (self : DeriveMacros_Product_Type.t_product a b) : DeriveMacros_Product_Type.t_product deep_model_ty'0 deep_model_ty'1
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'1 self
  let rec deep_model'0 (self:DeriveMacros_Product_Type.t_product a b) (return'  (ret:DeriveMacros_Product_Type.t_product deep_model_ty'0 deep_model_ty'1))= any
    [ return' (result:DeriveMacros_Product_Type.t_product deep_model_ty'0 deep_model_ty'1)-> {result
      = deep_model'0 self}
      (! return' {result}) ]
    
  goal eq_refn : [#"../derive_macros.rs" 8 16 8 25] forall self : DeriveMacros_Product_Type.t_product a b . forall other : DeriveMacros_Product_Type.t_product a b . inv'0 other
  /\ inv'0 self
   -> inv'0 other
  /\ inv'0 self
  /\ (forall result : bool . result = (deep_model'0 self = deep_model'0 other)
   -> result = (deep_model'0 self = deep_model'0 other))
end
module DeriveMacros_Impl7
  type a
  type b
  use DeriveMacros_Sum_Type as DeriveMacros_Sum_Type
  predicate invariant'0 (self : DeriveMacros_Sum_Type.t_sum a b)
  let rec invariant'0 (self:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : DeriveMacros_Sum_Type.t_sum a b)
  let rec inv'0 (_x:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : DeriveMacros_Sum_Type.t_sum a b . inv'0 x = true
  type deep_model_ty'1
  function deep_model'3 (self : b) : deep_model_ty'1
  let rec deep_model'3 (self:b) (return'  (ret:deep_model_ty'1))= any
    [ return' (result:deep_model_ty'1)-> {result = deep_model'3 self} (! return' {result}) ]
    
  type deep_model_ty'0
  function deep_model'2 (self : a) : deep_model_ty'0
  let rec deep_model'2 (self:a) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'2 self} (! return' {result}) ]
    
  function deep_model'1 [#"../derive_macros.rs" 39 4 39 44] (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum deep_model_ty'0 deep_model_ty'1
    
   =
    [#"../derive_macros.rs" 40 8 43 9] match self with
      | DeriveMacros_Sum_Type.C_A a -> DeriveMacros_Sum_Type.C_A (deep_model'2 a)
      | DeriveMacros_Sum_Type.C_B b -> DeriveMacros_Sum_Type.C_B (deep_model'3 b)
      end
  let rec deep_model'1 (self:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:DeriveMacros_Sum_Type.t_sum deep_model_ty'0 deep_model_ty'1))= any
    [ return' (result:DeriveMacros_Sum_Type.t_sum deep_model_ty'0 deep_model_ty'1)-> {result = deep_model'1 self}
      (! return' {result}) ]
    
  use prelude.Borrow
  function deep_model'0 (self : DeriveMacros_Sum_Type.t_sum a b) : DeriveMacros_Sum_Type.t_sum deep_model_ty'0 deep_model_ty'1
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'1 self
  let rec deep_model'0 (self:DeriveMacros_Sum_Type.t_sum a b) (return'  (ret:DeriveMacros_Sum_Type.t_sum deep_model_ty'0 deep_model_ty'1))= any
    [ return' (result:DeriveMacros_Sum_Type.t_sum deep_model_ty'0 deep_model_ty'1)-> {result = deep_model'0 self}
      (! return' {result}) ]
    
  goal eq_refn : [#"../derive_macros.rs" 28 16 28 25] forall self : DeriveMacros_Sum_Type.t_sum a b . forall other : DeriveMacros_Sum_Type.t_sum a b . inv'0 other
  /\ inv'0 self
   -> inv'0 other
  /\ inv'0 self
  /\ (forall result : bool . result = (deep_model'0 self = deep_model'0 other)
   -> result = (deep_model'0 self = deep_model'0 other))
end
module DeriveMacros_Impl0
  type a
  type b
end
module DeriveMacros_Impl1
  type a
  type b
end
module DeriveMacros_Impl2
  type t
end
module DeriveMacros_Impl3
  type v
end
module DeriveMacros_Impl8
  type a
end
module DeriveMacros_Impl9
  type a
  type b
end
