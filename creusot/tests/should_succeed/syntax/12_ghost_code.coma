
module CreusotContracts_Snapshot_Snapshot_Type
  type t_snapshot 't
end
module C12GhostCode_GhostArg
  let%span s12_ghost_code0 = "../12_ghost_code.rs" 5 28 5 44
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span3 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  use prelude.prelude.UInt32
  
  predicate invariant'0 (self : uint32) =
    [%#span1] true
  
  predicate inv'0 (_x : uint32)
  
  axiom inv'0 : forall x : uint32 . inv'0 x = true
  
  use prelude.prelude.Int
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  function deref'0 (self : Snapshot'0.t_snapshot uint32) : uint32
  
  function new'0 (x : uint32) : Snapshot'0.t_snapshot uint32
  
  axiom new'0_spec : forall x : uint32 . ([%#span2] inv'0 x)  -> ([%#span3] deref'0 (new'0 x) = x)
  
  let rec ghost_arg (g:Snapshot'0.t_snapshot uint32) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_x <- [%#s12_ghost_code0] new'0 (deref'0 g) ] s1 | s1 = bb1 ]  | bb1 = return' {_0} ]
    )
    [ & _0 : () = any_l () | & g : Snapshot'0.t_snapshot uint32 = g | & _x : Snapshot'0.t_snapshot uint32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module CreusotContracts_Logic_Seq2_Seq_Type
  use seq.Seq
  
  type t_seq 't =
    | C_Seq (Seq.seq 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_seq < 't > (input:t_seq 't) (ret  (field_0:Seq.seq 't))= any
    [ good (field_0:Seq.seq 't)-> {C_Seq field_0 = input} (! ret {field_0})
    | bad (field_0:Seq.seq 't)-> {C_Seq field_0 <> input} {false} any ]
    
  
  function seq_0 [@inline:trivial] (self : t_seq 't) : Seq.seq 't =
    match self with
      | C_Seq a -> a
      end
end
module C12GhostCode_GhostVec
  let%span s12_ghost_code0 = "../12_ghost_code.rs" 9 22 9 32
  
  let%span s12_ghost_code1 = "../12_ghost_code.rs" 10 35 10 50
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "" 0 0 0 0
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span6 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span7 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span8 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span9 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span13 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span14 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span15 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span17 = "../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  
  let%span span18 = "../../../../../creusot-contracts/src/std/vec.rs" 69 26 69 44
  
  let%span span19 = "" 0 0 0 0
  
  use prelude.prelude.UInt32
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'1 (self : Seq'0.t_seq uint32) =
    [%#span2] true
  
  predicate inv'1 (_x : Seq'0.t_seq uint32)
  
  axiom inv'1 : forall x : Seq'0.t_seq uint32 . inv'1 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span3] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'0 (self : Seq'0.t_seq uint32) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq uint32 . ([%#span4] inv'1 self)  -> ([%#span5] len'0 self >= 0)
  
  predicate inv'0 (_x : Vec'0.t_vec uint32 (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) : Seq'0.t_seq uint32
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec uint32 (Global'0.t_global) . ([%#span6] inv'0 self)
   -> ([%#span8] inv'1 (shallow_model'0 self))
  && ([%#span7] len'0 (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span9] inv'1 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec uint32 (Global'0.t_global) . inv'0 x = true
  
  constant empty'0 : Seq'0.t_seq uint32 = [%#span10] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span12] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span11] len'0 (empty'0 : Seq'0.t_seq uint32) = 0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  function deref'0 (self : Snapshot'0.t_snapshot (Vec'0.t_vec uint32 (Global'0.t_global))) : Vec'0.t_vec uint32 (Global'0.t_global)
    
  
  function new'1 (x : Vec'0.t_vec uint32 (Global'0.t_global)) : Snapshot'0.t_snapshot (Vec'0.t_vec uint32 (Global'0.t_global))
    
  
  axiom new'1_spec : forall x : Vec'0.t_vec uint32 (Global'0.t_global) . ([%#span13] inv'0 x)
   -> ([%#span14] deref'0 (new'1 x) = x)
  
  predicate resolve'1 (self : uint32) =
    [%#span15] true
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq uint32) (x : int) : uint32
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec uint32 (Global'0.t_global)) (ix : int) : uint32 =
    [%#span16] index_logic'1 (shallow_model'0 self) ix
  
  predicate resolve'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span17] forall i : int . 0 <= i /\ i < len'0 (shallow_model'0 self)  -> resolve'1 (index_logic'0 self i)
  
  let rec new'0 (_1:()) (return'  (ret:Vec'0.t_vec uint32 (Global'0.t_global)))= any
    [ return' (result:Vec'0.t_vec uint32 (Global'0.t_global))-> {[%#span19] inv'0 result}
      {[%#span18] len'0 (shallow_model'0 result) = 0}
      (! return' {result}) ]
    
  
  let rec ghost_vec (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#s12_ghost_code0] ()} (fun (_ret':Vec'0.t_vec uint32 (Global'0.t_global)) ->  [ &x <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = -{resolve'0 x}- s1 | s1 =  [ &_s <- [%#s12_ghost_code1] new'1 x ] s2 | s2 = bb2 ] 
    | bb2 = bb3
    | bb3 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : Vec'0.t_vec uint32 (Global'0.t_global) = any_l ()
    | & _s : Snapshot'0.t_snapshot (Vec'0.t_vec uint32 (Global'0.t_global)) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C12GhostCode_GhostCopy
  let%span s12_ghost_code0 = "../12_ghost_code.rs" 18 12 18 13
  
  let%span s12_ghost_code1 = "../12_ghost_code.rs" 19 17 19 52
  
  let%span s12_ghost_code2 = "../12_ghost_code.rs" 20 9 20 33
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span9 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span10 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span18 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span19 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span20 = "../../../../../creusot-contracts/src/logic/seq2.rs" 99 8 99 39
  
  use prelude.prelude.Int32
  
  predicate invariant'1 (self : int32) =
    [%#span3] true
  
  predicate inv'1 (_x : int32)
  
  axiom inv'1 : forall x : int32 . inv'1 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'0 (self : Seq'0.t_seq int32) =
    [%#span3] true
  
  predicate inv'0 (_x : Seq'0.t_seq int32)
  
  axiom inv'0 : forall x : Seq'0.t_seq int32 . inv'0 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'0 (self : Seq'0.t_seq int32) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq int32 . ([%#span4] inv'0 self)  -> ([%#span5] len'0 self >= 0)
  
  constant empty'0 : Seq'0.t_seq int32 = [%#span6] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span8] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span7] len'0 (empty'0 : Seq'0.t_seq int32) = 0
  
  use prelude.prelude.Intrinsic
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Borrow
  
  function deref'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq int32)) : Seq'0.t_seq int32
  
  function new'0 (x : Seq'0.t_seq int32) : Snapshot'0.t_snapshot (Seq'0.t_seq int32)
  
  axiom new'0_spec : forall x : Seq'0.t_seq int32 . ([%#span9] inv'0 x)  -> ([%#span10] deref'0 (new'0 x) = x)
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq int32) (x : int) : int32
  
  function concat'0 (self : Seq'0.t_seq int32) (other : Seq'0.t_seq int32) : Seq'0.t_seq int32
  
  axiom concat'0_spec : forall self : Seq'0.t_seq int32, other : Seq'0.t_seq int32 . ([%#span11] inv'0 self)
   -> ([%#span12] inv'0 other)
   -> ([%#span15] inv'0 (concat'0 self other))
  && ([%#span14] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span13] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  use seq.Seq
  
  function singleton'0 (v : int32) : Seq'0.t_seq int32
  
  axiom singleton'0_spec : forall v : int32 . ([%#span16] inv'1 v)
   -> ([%#span19] inv'0 (singleton'0 v))
  && ([%#span18] index_logic'0 (singleton'0 v) 0 = v) && ([%#span17] len'0 (singleton'0 v) = 1)
  
  function push'0 [@inline:trivial] (self : Seq'0.t_seq int32) (v : int32) : Seq'0.t_seq int32 =
    [%#span20] concat'0 self (singleton'0 v)
  
  let rec ghost_copy (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [%#s12_ghost_code0] (0 : int32) ] s1
      | s1 =  [ &_s <- [%#s12_ghost_code1] new'0 (push'0 (empty'0 : Seq'0.t_seq int32) (0 : int32)) ] s2
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &_4 <- [%#s12_ghost_code2] new'0 (push'0 (deref'0 _s) a) ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_s <- _4 ] (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq int32))-> (!  [ &_4 <- _any ] s1) ] )
      | s1 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & a : int32 = any_l ()
    | & _s : Snapshot'0.t_snapshot (Seq'0.t_seq int32) = any_l ()
    | & _4 : Snapshot'0.t_snapshot (Seq'0.t_seq int32) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C12GhostCode_GhostIsCopy
  let%span s12_ghost_code0 = "../12_ghost_code.rs" 24 16 24 17
  
  let%span s12_ghost_code1 = "../12_ghost_code.rs" 26 12 26 27
  
  let%span s12_ghost_code2 = "../12_ghost_code.rs" 29 18 29 26
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span5 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed int32) =
    [%#span3] true
  
  predicate inv'0 (_x : borrowed int32)
  
  axiom inv'0 : forall x : borrowed int32 . inv'0 x = true
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  function deref'0 (self : Snapshot'0.t_snapshot (borrowed int32)) : borrowed int32
  
  function new'0 (x : borrowed int32) : Snapshot'0.t_snapshot (borrowed int32)
  
  axiom new'0_spec : forall x : borrowed int32 . ([%#span4] inv'0 x)  -> ([%#span5] deref'0 (new'0 x) = x)
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span6]  ^ self =  * self
  
  use prelude.prelude.Int
  
  let rec ghost_is_copy (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#s12_ghost_code0] (0 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &r <- _ret' ]  [ &x <-  ^ r ] s2)
      | s2 = -{resolve'0 r}- s3
      | s3 =  [ &g <- [%#s12_ghost_code1] new'0 r ] s4
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &g1 <- g ] s1
      | s1 =  [ &g2 <- g ] s2
      | s2 = {[@expl:assertion] [%#s12_ghost_code2] g1 = g2} s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & r : borrowed int32 = any_l ()
    | & g : Snapshot'0.t_snapshot (borrowed int32) = any_l ()
    | & g1 : Snapshot'0.t_snapshot (borrowed int32) = any_l ()
    | & g2 : Snapshot'0.t_snapshot (borrowed int32) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C12GhostCode_GhostCheck
  let%span s12_ghost_code0 = "../12_ghost_code.rs" 36 16 36 26
  
  let%span s12_ghost_code1 = "../12_ghost_code.rs" 39 4 39 31
  
  let%span s12_ghost_code2 = "../12_ghost_code.rs" 41 11 41 12
  
  let%span s12_ghost_code3 = "../12_ghost_code.rs" 43 23 43 24
  
  let%span s12_ghost_code4 = "../12_ghost_code.rs" 43 4 43 25
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span9 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span10 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span11 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span12 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span16 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span18 = "../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  
  let%span span19 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "../../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  let%span span22 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span23 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span24 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span25 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span26 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span27 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span28 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span29 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span30 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span31 = "../../../../../creusot-contracts/src/logic/seq2.rs" 99 8 99 39
  
  let%span span32 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span33 = "" 0 0 0 0
  
  let%span span34 = "" 0 0 0 0
  
  let%span span35 = "../../../../../creusot-contracts/src/std/vec.rs" 82 26 82 51
  
  let%span span36 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span37 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span38 = "../12_ghost_code.rs" 32 0 32 8
  
  let%span span39 = "../../../../../creusot-contracts/src/std/vec.rs" 69 26 69 44
  
  let%span span40 = "" 0 0 0 0
  
  use prelude.prelude.Int32
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'5 (self : Seq'0.t_seq int32) =
    [%#span5] true
  
  predicate inv'5 (_x : Seq'0.t_seq int32)
  
  axiom inv'5 : forall x : Seq'0.t_seq int32 . inv'5 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate invariant'4 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span5] true
  
  predicate inv'4 (_x : Vec'0.t_vec int32 (Global'0.t_global))
  
  axiom inv'4 : forall x : Vec'0.t_vec int32 (Global'0.t_global) . inv'4 x = true
  
  predicate invariant'3 (self : int32) =
    [%#span5] true
  
  predicate inv'3 (_x : int32)
  
  axiom inv'3 : forall x : int32 . inv'3 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Vec'0.t_vec int32 (Global'0.t_global))) =
    [%#span5] true
  
  predicate inv'2 (_x : borrowed (Vec'0.t_vec int32 (Global'0.t_global)))
  
  axiom inv'2 : forall x : borrowed (Vec'0.t_vec int32 (Global'0.t_global)) . inv'2 x = true
  
  predicate invariant'1 (self : ()) =
    [%#span5] true
  
  predicate inv'1 (_x : ())
  
  axiom inv'1 : forall x : () . inv'1 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span6] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'1 (self : Seq'0.t_seq int32) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq int32 . ([%#span7] inv'5 self)  -> ([%#span8] len'1 self >= 0)
  
  predicate inv'0 (_x : Vec'0.t_vec int32 (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec int32 (Global'0.t_global)) : Seq'0.t_seq int32
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec int32 (Global'0.t_global) . ([%#span9] inv'0 self)
   -> ([%#span11] inv'5 (shallow_model'0 self))
  && ([%#span10] len'1 (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span12] inv'5 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec int32 (Global'0.t_global) . inv'0 x = true
  
  constant empty'0 : Seq'0.t_seq int32 = [%#span13] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span15] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span14] len'1 (empty'0 : Seq'0.t_seq int32) = 0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : int32) =
    [%#span16] true
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq int32) (x : int) : int32
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec int32 (Global'0.t_global)) (ix : int) : int32 =
    [%#span17] index_logic'1 (shallow_model'0 self) ix
  
  predicate resolve'0 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span18] forall i : int . 0 <= i /\ i < len'1 (shallow_model'0 self)  -> resolve'1 (index_logic'0 self i)
  
  function shallow_model'2 (self : Vec'0.t_vec int32 (Global'0.t_global)) : Seq'0.t_seq int32 =
    [%#span19] shallow_model'0 self
  
  let rec len'0 (self:Vec'0.t_vec int32 (Global'0.t_global)) (return'  (ret:usize))= {[@expl:precondition] [%#span20] inv'4 self}
    any
    [ return' (result:usize)-> {[%#span21] UIntSize.to_int result = len'1 (shallow_model'2 self)} (! return' {result}) ]
    
  
  use seq.Seq
  
  function concat'0 (self : Seq'0.t_seq int32) (other : Seq'0.t_seq int32) : Seq'0.t_seq int32
  
  axiom concat'0_spec : forall self : Seq'0.t_seq int32, other : Seq'0.t_seq int32 . ([%#span22] inv'5 self)
   -> ([%#span23] inv'5 other)
   -> ([%#span26] inv'5 (concat'0 self other))
  && ([%#span25] forall i : int . 0 <= i /\ i < len'1 (concat'0 self other)
   -> index_logic'1 (concat'0 self other) i
  = (if i < len'1 self then index_logic'1 self i else index_logic'1 other (i - len'1 self)))
  && ([%#span24] len'1 (concat'0 self other) = len'1 self + len'1 other)
  
  use seq.Seq
  
  function singleton'0 (v : int32) : Seq'0.t_seq int32
  
  axiom singleton'0_spec : forall v : int32 . ([%#span27] inv'3 v)
   -> ([%#span30] inv'5 (singleton'0 v))
  && ([%#span29] index_logic'1 (singleton'0 v) 0 = v) && ([%#span28] len'1 (singleton'0 v) = 1)
  
  function push'1 [@inline:trivial] (self : Seq'0.t_seq int32) (v : int32) : Seq'0.t_seq int32 =
    [%#span31] concat'0 self (singleton'0 v)
  
  function shallow_model'1 (self : borrowed (Vec'0.t_vec int32 (Global'0.t_global))) : Seq'0.t_seq int32 =
    [%#span32] shallow_model'0 ( * self)
  
  let rec push'0 (self:borrowed (Vec'0.t_vec int32 (Global'0.t_global))) (value:int32) (return'  (ret:()))= {[@expl:precondition] [%#span34] inv'3 value}
    {[@expl:precondition] [%#span33] inv'2 self}
    any
    [ return' (result:())-> {[%#span35] shallow_model'0 ( ^ self) = push'1 (shallow_model'1 self) value}
      (! return' {result}) ]
    
  
  function deref'0 (self : Snapshot'0.t_snapshot ()) : ()
  
  function new'1 (x : ()) : Snapshot'0.t_snapshot ()
  
  axiom new'1_spec : forall x : () . ([%#span36] inv'1 x)  -> ([%#span37] deref'0 (new'1 x) = x)
  
  function logi_drop'0 [#"../12_ghost_code.rs" 33 0 33 21] (_1 : Vec'0.t_vec int32 (Global'0.t_global)) : () =
    [%#span38] ()
  
  let rec new'0 (_1:()) (return'  (ret:Vec'0.t_vec int32 (Global'0.t_global)))= any
    [ return' (result:Vec'0.t_vec int32 (Global'0.t_global))-> {[%#span40] inv'0 result}
      {[%#span39] len'1 (shallow_model'0 result) = 0}
      (! return' {result}) ]
    
  
  let rec ghost_check (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#s12_ghost_code0] ()} (fun (_ret':Vec'0.t_vec int32 (Global'0.t_global)) ->  [ &x <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &_2 <- [%#s12_ghost_code1] new'1 (let _ = logi_drop'0 x in ()) ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <Vec'0.t_vec int32 (Global'0.t_global)> {x}
          (fun (_ret':borrowed (Vec'0.t_vec int32 (Global'0.t_global))) ->  [ &_5 <- _ret' ]  [ &x <-  ^ _5 ] s1)
      | s1 = push'0 {_5} {[%#s12_ghost_code2] (0 : int32)} (fun (_ret':()) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = len'0 {x} (fun (_ret':usize) ->  [ &_8 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = -{resolve'0 x}- s1
      | s1 = UIntSize.eq {_8} {[%#s12_ghost_code3] (1 : usize)}
          (fun (_ret':bool) ->  [ &_7 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_8 <- _any ] s2) ] ))
      | s2 = any [ br0 -> {_7 = false} (! bb6) | br1 -> {_7} (! bb5) ]  ]
      
    | bb5 = bb7
    | bb7 = return' {_0}
    | bb6 = {[%#s12_ghost_code4] false} any ]
    )
    [ & _0 : () = any_l ()
    | & x : Vec'0.t_vec int32 (Global'0.t_global) = any_l ()
    | & _2 : Snapshot'0.t_snapshot () = any_l ()
    | & _4 : () = any_l ()
    | & _5 : borrowed (Vec'0.t_vec int32 (Global'0.t_global)) = any_l ()
    | & _7 : bool = any_l ()
    | & _8 : usize = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C12GhostCode_MyStruct_Type
  use prelude.prelude.UInt32
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Int
  
  type t_mystruct  =
    | C_MyStruct uint32 (Snapshot'0.t_snapshot uint32)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_mystruct (input:t_mystruct) (ret  (f:uint32) (g:Snapshot'0.t_snapshot uint32))= any
    [ good (f:uint32) (g:Snapshot'0.t_snapshot uint32)-> {C_MyStruct f g = input} (! ret {f} {g})
    | bad (f:uint32) (g:Snapshot'0.t_snapshot uint32)-> {C_MyStruct f g <> input} {false} any ]
    
  
  function mystruct_f [@inline:trivial] (self : t_mystruct) : uint32 =
    match self with
      | C_MyStruct a _ -> a
      end
  
  function mystruct_g [@inline:trivial] (self : t_mystruct) : Snapshot'0.t_snapshot uint32 =
    match self with
      | C_MyStruct _ a -> a
      end
end
module C12GhostCode_TakesStruct
  let%span s12_ghost_code0 = "../12_ghost_code.rs" 53 10 53 27
  
  let%span s12_ghost_code1 = "../12_ghost_code.rs" 51 11 51 20
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span4 = "../../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48
  
  let%span span5 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span6 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  use prelude.prelude.UInt32
  
  predicate invariant'0 (self : uint32) =
    [%#span2] true
  
  predicate inv'0 (_x : uint32)
  
  axiom inv'0 : forall x : uint32 . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  function shallow_model'1 (self : uint32) : int =
    [%#span3] UInt32.to_int self
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  function deref'0 (self : Snapshot'0.t_snapshot uint32) : uint32
  
  function shallow_model'0 (self : Snapshot'0.t_snapshot uint32) : int =
    [%#span4] shallow_model'1 (deref'0 self)
  
  use C12GhostCode_MyStruct_Type as C12GhostCode_MyStruct_Type
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use C12GhostCode_MyStruct_Type as MyStruct'0
  
  function new'0 (x : uint32) : Snapshot'0.t_snapshot uint32
  
  axiom new'0_spec : forall x : uint32 . ([%#span5] inv'0 x)  -> ([%#span6] deref'0 (new'0 x) = x)
  
  let rec takes_struct (x:MyStruct'0.t_mystruct) (return'  (ret:()))= {[%#s12_ghost_code1] shallow_model'0 (C12GhostCode_MyStruct_Type.mystruct_g x)
    = 0}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_3 <- [%#s12_ghost_code0] new'0 (C12GhostCode_MyStruct_Type.mystruct_f x) ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = MyStruct'0.t_mystruct {x}
          (fun (l_f'0:uint32) (l_g'0:Snapshot'0.t_snapshot uint32) ->
             [ &x <- MyStruct'0.C_MyStruct l_f'0 _3 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot uint32)-> (!  [ &_3 <- _any ] s1) ] ))
      | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & x : MyStruct'0.t_mystruct = x | & _3 : Snapshot'0.t_snapshot uint32 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
