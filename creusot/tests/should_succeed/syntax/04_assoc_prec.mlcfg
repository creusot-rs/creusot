
module C04AssocPrec_RespectPrec
  use prelude.UInt32
  use prelude.Int
  predicate resolve1 (self : uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve1 (self : uint32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (uint32, uint32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve1 (let (a, _) = self in a)
    /\ resolve1 (let (_, a) = self in a)
  val resolve0 (self : (uint32, uint32)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg respect_prec [#"../04_assoc_prec.rs" 10 0 10 34] [@cfg:stackify] [@cfg:subregion_analysis] (x : (uint32, uint32)) : ()
    ensures { [#"../04_assoc_prec.rs" 7 0 7 33] 5 = 3  -> 2 + 1 = 3 }
    ensures { [#"../04_assoc_prec.rs" 8 10 8 35] div (5 * 3) 2 <> 4 * (40 + 1) }
    ensures { [#"../04_assoc_prec.rs" 9 10 9 20] (let (a, _) = x in a) = (let (_, a) = x in a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : (uint32, uint32) = x;
  {
    goto BB0
  }
  BB0 {
    assume { resolve0 x };
    [#"../04_assoc_prec.rs" 10 35 10 37] _0 <- ([#"../04_assoc_prec.rs" 10 35 10 37] ());
    return _0
  }
  
end
module C04AssocPrec_RespectAssoc
  use prelude.Int
  let rec cfg respect_assoc [#"../04_assoc_prec.rs" 13 0 13 22] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    ensures { [#"../04_assoc_prec.rs" 12 10 12 28] 0 + 1 = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../04_assoc_prec.rs" 13 23 13 25] _0 <- ([#"../04_assoc_prec.rs" 13 23 13 25] ());
    return _0
  }
  
end
