module M_mixed__qyi9512435279263248376__clone [#"mixed.rs" 8 9 8 14] (* <Product<A, B> as creusot_contracts::Clone> *)
  let%span smixed0 = "mixed.rs" 8 9 8 14
  let%span sclone1 = "../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  let%span sinvariant2 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  type t_A'0
  
  type t_B'0
  
  type t_Product'0  =
    { t_Product__a'0: t_A'0; t_Product__b'0: t_B'0 }
  
  use prelude.prelude.Borrow
  
  predicate inv'3 (_1 : t_A'0)
  
  predicate invariant'1 (self : t_A'0) =
    [%#sinvariant2] inv'3 self
  
  predicate inv'2 (_1 : t_A'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_A'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  let rec clone'1 (self:t_A'0) (return'  (ret:t_A'0))= {[@expl:clone 'self' type invariant] inv'2 self}
    any [ return' (result:t_A'0)-> {inv'3 result} {[%#sclone1] result = self} (! return' {result}) ] 
  
  predicate inv'5 (_1 : t_B'0)
  
  predicate invariant'2 (self : t_B'0) =
    [%#sinvariant2] inv'5 self
  
  predicate inv'4 (_1 : t_B'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_B'0 [inv'4 x] . inv'4 x = invariant'2 x
  
  let rec clone'2 (self:t_B'0) (return'  (ret:t_B'0))= {[@expl:clone 'self' type invariant] inv'4 self}
    any [ return' (result:t_B'0)-> {inv'5 result} {[%#sclone1] result = self} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  predicate inv'1 (_1 : t_Product'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Product'0 [inv'1 x] . inv'1 x
  = match x with
    | {t_Product__a'0 = a ; t_Product__b'0 = b} -> inv'3 a /\ inv'5 b
    end
  
  predicate invariant'0 (self : t_Product'0) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : t_Product'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Product'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  meta "compute_max_steps" 1000000
  
  let rec clone'0 (self:t_Product'0) (return'  (ret:t_Product'0))= {[@expl:clone 'self' type invariant] [%#smixed0] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- self.t_Product__a'0 ] s1
      | s1 = clone'1 {_5} (fun (_ret':t_A'0) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_8 <- self.t_Product__b'0 ] s1
      | s1 = clone'2 {_8} (fun (_ret':t_B'0) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- { t_Product__a'0 = _3; t_Product__b'0 = _6 } ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : t_Product'0 = any_l ()
    | & self : t_Product'0 = self
    | & _3 : t_A'0 = any_l ()
    | & _5 : t_A'0 = any_l ()
    | & _6 : t_B'0 = any_l ()
    | & _8 : t_B'0 = any_l () ]
    
    [ return' (result:t_Product'0)-> {[@expl:clone result type invariant] [%#smixed0] inv'1 result}
      {[@expl:clone ensures] [%#smixed0] result = self}
      (! return' {result}) ]
    
end
module M_mixed__qyi2064882709679455996__eq [#"mixed.rs" 8 16 8 25] (* <Product<A, B> as creusot_contracts::PartialEq> *)
  let%span smixed0 = "mixed.rs" 10 4 11 12
  let%span smixed1 = "mixed.rs" 8 16 8 25
  let%span scmp2 = "../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span smodel3 = "../../../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span smixed4 = "mixed.rs" 24 8 24 66
  let%span sinvariant5 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  type t_A'0
  
  type t_B'0
  
  type t_Product'0  =
    { t_Product__a'0: t_A'0; t_Product__b'0: t_B'0 }
  
  use prelude.prelude.Borrow
  
  predicate inv'4 (_1 : t_A'0)
  
  predicate invariant'1 (self : t_A'0) =
    [%#sinvariant5] inv'4 self
  
  predicate inv'1 (_1 : t_A'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_A'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  type t_DeepModelTy'0
  
  function deep_model'4 (self : t_A'0) : t_DeepModelTy'0
  
  function deep_model'1 (self : t_A'0) : t_DeepModelTy'0 =
    [%#smodel3] deep_model'4 self
  
  let rec eq'1 (self:t_A'0) (other:t_A'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'1 self}
    {[@expl:eq 'other' type invariant] inv'1 other}
    any [ return' (result:bool)-> {[%#scmp2] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ] 
  
  predicate inv'5 (_1 : t_B'0)
  
  predicate invariant'2 (self : t_B'0) =
    [%#sinvariant5] inv'5 self
  
  predicate inv'2 (_1 : t_B'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_B'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  type t_DeepModelTy'1
  
  function deep_model'5 (self : t_B'0) : t_DeepModelTy'1
  
  function deep_model'2 (self : t_B'0) : t_DeepModelTy'1 =
    [%#smodel3] deep_model'5 self
  
  let rec eq'2 (self:t_B'0) (other:t_B'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'2 self}
    {[@expl:eq 'other' type invariant] inv'2 other}
    any [ return' (result:bool)-> {[%#scmp2] result = (deep_model'2 self = deep_model'2 other)} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  predicate inv'3 (_1 : t_Product'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Product'0 [inv'3 x] . inv'3 x
  = match x with
    | {t_Product__a'0 = a ; t_Product__b'0 = b} -> inv'4 a /\ inv'5 b
    end
  
  predicate invariant'0 (self : t_Product'0) =
    [%#sinvariant5] inv'3 self
  
  predicate inv'0 (_1 : t_Product'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Product'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_Product'1  =
    { t_Product__a'1: t_DeepModelTy'0; t_Product__b'1: t_DeepModelTy'1 }
  
  function deep_model'3 [#"mixed.rs" 23 4 23 44] (self : t_Product'0) : t_Product'1 =
    [%#smixed4] { t_Product__a'1 = deep_model'4 self.t_Product__a'0; t_Product__b'1 = deep_model'5 self.t_Product__b'0 }
  
  function deep_model'0 (self : t_Product'0) : t_Product'1 =
    [%#smodel3] deep_model'3 self
  
  meta "compute_max_steps" 1000000
  
  let rec eq'0 (self:t_Product'0) (rhs:t_Product'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] [%#smixed1] inv'0 self}
    {[@expl:eq 'rhs' type invariant] [%#smixed1] inv'0 rhs}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_7 <- rhs.t_Product__a'0 ] s1
      | s1 = eq'1 {self.t_Product__a'0} {_7} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = any [ br0 -> {_4 = false} (! bb3) | br1 -> {_4} (! bb2) ] 
    | bb2 = s0
      [ s0 =  [ &_10 <- rhs.t_Product__b'0 ] s1
      | s1 = eq'2 {self.t_Product__b'0} {_10} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = bb5
    | bb3 = s0 [ s0 =  [ &_0 <- [%#smixed0] false ] s1 | s1 = bb5 ] 
    | bb5 = return' {_0} ]
    )
    [ & _0 : bool = any_l ()
    | & self : t_Product'0 = self
    | & rhs : t_Product'0 = rhs
    | & _4 : bool = any_l ()
    | & _7 : t_A'0 = any_l ()
    | & _10 : t_B'0 = any_l () ]
    
    [ return' (result:bool)-> {[@expl:eq ensures] [%#smixed1] result = (deep_model'0 self = deep_model'0 rhs)}
      (! return' {result}) ]
    
end
module M_mixed__qyi6273949305112291917__clone [#"mixed.rs" 28 9 28 14] (* <Sum<A, B> as creusot_contracts::Clone> *)
  let%span smixed0 = "mixed.rs" 28 9 28 14
  let%span sclone1 = "../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  let%span sinvariant2 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  type t_A'0
  
  type t_B'0
  
  type t_Sum'0  =
    | C_A'0 t_A'0
    | C_B'0 t_B'0
  
  let rec v_B'0 (input:t_Sum'0) (ret  (field_0:t_B'0))= any
    [ good (field_0:t_B'0)-> {C_B'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_B'0 [C_B'0 field_0 : t_Sum'0] . C_B'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Borrow
  
  predicate inv'3 (_1 : t_B'0)
  
  predicate invariant'1 (self : t_B'0) =
    [%#sinvariant2] inv'3 self
  
  predicate inv'2 (_1 : t_B'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_B'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  let rec clone'1 (self:t_B'0) (return'  (ret:t_B'0))= {[@expl:clone 'self' type invariant] inv'2 self}
    any [ return' (result:t_B'0)-> {inv'3 result} {[%#sclone1] result = self} (! return' {result}) ] 
  
  let rec v_A'0 (input:t_Sum'0) (ret  (field_0:t_A'0))= any
    [ good (field_0:t_A'0)-> {C_A'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_A'0 [C_A'0 field_0 : t_Sum'0] . C_A'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'5 (_1 : t_A'0)
  
  predicate invariant'2 (self : t_A'0) =
    [%#sinvariant2] inv'5 self
  
  predicate inv'4 (_1 : t_A'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_A'0 [inv'4 x] . inv'4 x = invariant'2 x
  
  let rec clone'2 (self:t_A'0) (return'  (ret:t_A'0))= {[@expl:clone 'self' type invariant] inv'4 self}
    any [ return' (result:t_A'0)-> {inv'5 result} {[%#sclone1] result = self} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  predicate inv'1 (_1 : t_Sum'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Sum'0 [inv'1 x] . inv'1 x
  = match x with
    | C_A'0 a_0 -> inv'5 a_0
    | C_B'0 a_0 -> inv'3 a_0
    end
  
  predicate invariant'0 (self : t_Sum'0) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : t_Sum'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Sum'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  meta "compute_max_steps" 1000000
  
  let rec clone'0 (self:t_Sum'0) (return'  (ret:t_Sum'0))= {[@expl:clone 'self' type invariant] [%#smixed0] inv'0 self}
    (! bb0
    [ bb0 = any [ br0 (x0:t_A'0)-> {self = C_A'0 x0} (! bb2) | br1 (x0:t_B'0)-> {self = C_B'0 x0} (! bb3) ] 
    | bb3 = s0
      [ s0 = v_B'0 {self} (fun (r0'0:t_B'0) ->  [ &v0_11 <- r0'0 ] s1)
      | s1 =  [ &_11 <- v0_11 ] s2
      | s2 = clone'1 {_11} (fun (_ret':t_B'0) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = s0 [ s0 =  [ &_0 <- C_B'0 _9 ] s1 | s1 = bb8 ] 
    | bb8 = bb9
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_A'0 {self} (fun (r0'0:t_A'0) ->  [ &v0_1 <- r0'0 ] s1)
      | s1 =  [ &_7 <- v0_1 ] s2
      | s2 = clone'2 {_7} (fun (_ret':t_A'0) ->  [ &_5 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 =  [ &_0 <- C_A'0 _5 ] s1 | s1 = bb6 ] 
    | bb6 = bb9
    | bb9 = return' {_0} ]
    )
    [ & _0 : t_Sum'0 = any_l ()
    | & self : t_Sum'0 = self
    | & v0_1 : t_A'0 = any_l ()
    | & _5 : t_A'0 = any_l ()
    | & _7 : t_A'0 = any_l ()
    | & v0_11 : t_B'0 = any_l ()
    | & _9 : t_B'0 = any_l ()
    | & _11 : t_B'0 = any_l () ]
    
    [ return' (result:t_Sum'0)-> {[@expl:clone result type invariant] [%#smixed0] inv'1 result}
      {[@expl:clone ensures] [%#smixed0] result = self}
      (! return' {result}) ]
    
end
module M_mixed__qyi1479716791028959114__eq [#"mixed.rs" 28 16 28 25] (* <Sum<A, B> as creusot_contracts::PartialEq> *)
  let%span smixed0 = "mixed.rs" 28 16 28 25
  let%span scmp1 = "../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span smodel2 = "../../../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span smixed3 = "mixed.rs" 40 8 43 9
  let%span sinvariant4 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  type t_A'0
  
  type t_B'0
  
  type t_Sum'0  =
    | C_A'0 t_A'0
    | C_B'0 t_B'0
  
  let rec v_B'0 (input:t_Sum'0) (ret  (field_0:t_B'0))= any
    [ good (field_0:t_B'0)-> {C_B'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_B'0 [C_B'0 field_0 : t_Sum'0] . C_B'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Borrow
  
  predicate inv'4 (_1 : t_B'0)
  
  predicate invariant'1 (self : t_B'0) =
    [%#sinvariant4] inv'4 self
  
  predicate inv'1 (_1 : t_B'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_B'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  type t_DeepModelTy'0
  
  function deep_model'4 (self : t_B'0) : t_DeepModelTy'0
  
  function deep_model'1 (self : t_B'0) : t_DeepModelTy'0 =
    [%#smodel2] deep_model'4 self
  
  let rec eq'1 (self:t_B'0) (other:t_B'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'1 self}
    {[@expl:eq 'other' type invariant] inv'1 other}
    any [ return' (result:bool)-> {[%#scmp1] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ] 
  
  let rec v_A'0 (input:t_Sum'0) (ret  (field_0:t_A'0))= any
    [ good (field_0:t_A'0)-> {C_A'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_A'0 [C_A'0 field_0 : t_Sum'0] . C_A'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'5 (_1 : t_A'0)
  
  predicate invariant'2 (self : t_A'0) =
    [%#sinvariant4] inv'5 self
  
  predicate inv'2 (_1 : t_A'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_A'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  type t_DeepModelTy'1
  
  function deep_model'5 (self : t_A'0) : t_DeepModelTy'1
  
  function deep_model'2 (self : t_A'0) : t_DeepModelTy'1 =
    [%#smodel2] deep_model'5 self
  
  let rec eq'2 (self:t_A'0) (other:t_A'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'2 self}
    {[@expl:eq 'other' type invariant] inv'2 other}
    any [ return' (result:bool)-> {[%#scmp1] result = (deep_model'2 self = deep_model'2 other)} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  predicate inv'3 (_1 : t_Sum'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Sum'0 [inv'3 x] . inv'3 x
  = match x with
    | C_A'0 a_0 -> inv'5 a_0
    | C_B'0 a_0 -> inv'4 a_0
    end
  
  predicate invariant'0 (self : t_Sum'0) =
    [%#sinvariant4] inv'3 self
  
  predicate inv'0 (_1 : t_Sum'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Sum'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_Sum'1  =
    | C_A'1 t_DeepModelTy'1
    | C_B'1 t_DeepModelTy'0
  
  function deep_model'3 [#"mixed.rs" 39 4 39 44] (self : t_Sum'0) : t_Sum'1 =
    [%#smixed3] match self with
      | C_A'0 a -> C_A'1 (deep_model'5 a)
      | C_B'0 b -> C_B'1 (deep_model'4 b)
      end
  
  function deep_model'0 (self : t_Sum'0) : t_Sum'1 =
    [%#smodel2] deep_model'3 self
  
  meta "compute_max_steps" 1000000
  
  let rec eq'0 (self:t_Sum'0) (rhs:t_Sum'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] [%#smixed0] inv'0 self}
    {[@expl:eq 'rhs' type invariant] [%#smixed0] inv'0 rhs}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- (self, rhs) ] s1
      | s1 = any
        [ br0 (x0:t_A'0)-> {(let (r'0, _) = _4 in r'0) = C_A'0 x0} (! bb2)
        | br1 (x0:t_B'0)-> {(let (r'0, _) = _4 in r'0) = C_B'0 x0} (! bb4) ]
         ]
      
    | bb4 = any
      [ br0 (x0:t_A'0)-> {(let (_, r'0) = _4 in r'0) = C_A'0 x0} (! bb1)
      | br1 (x0:t_B'0)-> {(let (_, r'0) = _4 in r'0) = C_B'0 x0} (! bb5) ]
      
    | bb5 = bb11
    | bb11 = s0
      [ s0 = v_B'0 {let (r'0, _) = _4 in r'0} (fun (r0'0:t_B'0) ->  [ &v0_11 <- r0'0 ] s1)
      | s1 = v_B'0 {let (_, r'1) = _4 in r'1} (fun (r0'1:t_B'0) ->  [ &v0_21 <- r0'1 ] s2)
      | s2 = eq'1 {v0_11} {v0_21} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb12 ]
      
    | bb12 = any [ br0 -> {_17 = false} (! bb14) | br1 -> {_17} (! bb13) ] 
    | bb13 = s0 [ s0 =  [ &_0 <- [%#smixed0] true ] s1 | s1 = bb15 ] 
    | bb14 = s0 [ s0 =  [ &_0 <- [%#smixed0] false ] s1 | s1 = bb15 ] 
    | bb15 = bb16
    | bb2 = any
      [ br0 (x0:t_A'0)-> {(let (_, r'0) = _4 in r'0) = C_A'0 x0} (! bb3)
      | br1 (x0:t_B'0)-> {(let (_, r'0) = _4 in r'0) = C_B'0 x0} (! bb1) ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- [%#smixed0] false ] s1 | s1 = bb16 ] 
    | bb3 = bb6
    | bb6 = s0
      [ s0 = v_A'0 {let (r'0, _) = _4 in r'0} (fun (r0'0:t_A'0) ->  [ &v0_1 <- r0'0 ] s1)
      | s1 = v_A'0 {let (_, r'1) = _4 in r'1} (fun (r0'1:t_A'0) ->  [ &v0_2 <- r0'1 ] s2)
      | s2 = eq'2 {v0_1} {v0_2} (fun (_ret':bool) ->  [ &_12 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = any [ br0 -> {_12 = false} (! bb9) | br1 -> {_12} (! bb8) ] 
    | bb8 = s0 [ s0 =  [ &_0 <- [%#smixed0] true ] s1 | s1 = bb10 ] 
    | bb9 = s0 [ s0 =  [ &_0 <- [%#smixed0] false ] s1 | s1 = bb10 ] 
    | bb10 = bb16
    | bb16 = return' {_0} ]
    )
    [ & _0 : bool = any_l ()
    | & self : t_Sum'0 = self
    | & rhs : t_Sum'0 = rhs
    | & _4 : (t_Sum'0, t_Sum'0) = any_l ()
    | & v0_1 : t_A'0 = any_l ()
    | & v0_2 : t_A'0 = any_l ()
    | & _12 : bool = any_l ()
    | & v0_11 : t_B'0 = any_l ()
    | & v0_21 : t_B'0 = any_l ()
    | & _17 : bool = any_l () ]
    
    [ return' (result:bool)-> {[@expl:eq ensures] [%#smixed0] result = (deep_model'0 self = deep_model'0 rhs)}
      (! return' {result}) ]
    
end
module M_mixed__qyi9942470069884222103__resolve_coherence [#"mixed.rs" 49 9 49 16] (* <Product2<'a, A> as creusot_contracts::Resolve> *)
  let%span smixed0 = "mixed.rs" 49 9 49 16
  let%span smixed1 = "mixed.rs" 49 9 49 16
  let%span smixed2 = "mixed.rs" 51 4 53 19
  let%span svec3 = "../../../../../creusot-contracts/src/std/vec.rs" 49 20 49 83
  let%span sresolve4 = "../../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span svec5 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sindex6 = "../../../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  
  use prelude.prelude.Borrow
  
  type t_A'0
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_Product2'0  =
    { t_Product2__a'0: borrowed t_A'0; t_Product2__b'0: bool; t_Product2__c'0: t_Vec'0 }
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq uint32
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec5] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : uint32 =
    [%#sindex6] Seq.get (view'0 self) ix
  
  predicate resolve'6 (_1 : uint32) =
    true
  
  predicate resolve'4 (self : t_Vec'0) =
    [%#svec3] forall i : int . 0 <= i /\ i < Seq.length (view'0 self)  -> resolve'6 (index_logic'0 self i)
  
  predicate resolve'1 (_1 : t_Vec'0) =
    resolve'4 _1
  
  predicate resolve'2 (_1 : bool) =
    true
  
  predicate resolve'5 (self : borrowed t_A'0) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed t_A'0) =
    resolve'5 _1
  
  predicate structural_resolve'0 (_1 : t_Product2'0) =
    match _1 with
      | {t_Product2__a'0 = x0 ; t_Product2__b'0 = x1 ; t_Product2__c'0 = x2} -> resolve'1 x2
      /\ resolve'2 x1 /\ resolve'3 x0
      end
  
  predicate resolve'0 [#"mixed.rs" 49 9 49 16] (self : t_Product2'0) =
    [%#smixed2] resolve'3 self.t_Product2__a'0 /\ resolve'2 self.t_Product2__b'0 /\ resolve'1 self.t_Product2__c'0
  
  constant self  : t_Product2'0
  
  function resolve_coherence'0 [#"mixed.rs" 49 9 49 16] (self : t_Product2'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#smixed0] structural_resolve'0 self)  -> ([%#smixed0] resolve'0 self)
end
module M_mixed__qyi17966204983409797136__resolve_coherence [#"mixed.rs" 56 9 56 16] (* <Sum2<A, B> as creusot_contracts::Resolve> *)
  let%span smixed0 = "mixed.rs" 56 9 56 16
  let%span smixed1 = "mixed.rs" 56 9 56 16
  
  use prelude.prelude.Borrow
  
  type t_A'0
  
  type t_B'0
  
  type t_Sum2'0  =
    | C_X'0 t_A'0
    | C_Y'0 bool t_B'0
  
  predicate resolve'1 (_1 : t_A'0)
  
  predicate resolve'2 (_1 : t_B'0)
  
  predicate resolve'3 (_1 : bool) =
    true
  
  predicate structural_resolve'0 (_1 : t_Sum2'0) =
    match _1 with
      | C_X'0 x0 -> resolve'1 x0
      | C_Y'0 x0 x1 -> resolve'2 x1 /\ resolve'3 x0
      end
  
  predicate resolve'0 [#"mixed.rs" 56 9 56 16] (self : t_Sum2'0) =
    [%#smixed0] match self with
      | C_X'0 v0_1 -> resolve'1 v0_1
      | C_Y'0 a_1 x_1 -> resolve'3 a_1 /\ resolve'2 x_1
      end
  
  constant self  : t_Sum2'0
  
  function resolve_coherence'0 [#"mixed.rs" 56 9 56 16] (self : t_Sum2'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#smixed0] structural_resolve'0 self)  -> ([%#smixed0] resolve'0 self)
end
module M_mixed__qyi9512435279263248376__clone__refines [#"mixed.rs" 8 9 8 14] (* <Product<A, B> as creusot_contracts::Clone> *)
  let%span smixed0 = "mixed.rs" 8 9 8 14
  let%span sinvariant1 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_A'0
  
  type t_B'0
  
  type t_Product'0  =
    { t_Product__a'0: t_A'0; t_Product__b'0: t_B'0 }
  
  predicate inv'2 (_1 : t_A'0)
  
  predicate inv'3 (_1 : t_B'0)
  
  predicate inv'1 (_1 : t_Product'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Product'0 [inv'1 x] . inv'1 x
  = match x with
    | {t_Product__a'0 = a ; t_Product__b'0 = b} -> inv'2 a /\ inv'3 b
    end
  
  predicate invariant'0 (self : t_Product'0) =
    [%#sinvariant1] inv'1 self
  
  predicate inv'0 (_1 : t_Product'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Product'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  goal refines : [%#smixed0] forall self : t_Product'0 . inv'0 self
   -> inv'0 self /\ (forall result : t_Product'0 . result = self /\ inv'1 result  -> result = self /\ inv'1 result)
end
module M_mixed__qyi6273949305112291917__clone__refines [#"mixed.rs" 28 9 28 14] (* <Sum<A, B> as creusot_contracts::Clone> *)
  let%span smixed0 = "mixed.rs" 28 9 28 14
  let%span sinvariant1 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_A'0
  
  type t_B'0
  
  type t_Sum'0  =
    | C_A'0 t_A'0
    | C_B'0 t_B'0
  
  predicate inv'2 (_1 : t_A'0)
  
  predicate inv'3 (_1 : t_B'0)
  
  predicate inv'1 (_1 : t_Sum'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Sum'0 [inv'1 x] . inv'1 x
  = match x with
    | C_A'0 a_0 -> inv'2 a_0
    | C_B'0 a_0 -> inv'3 a_0
    end
  
  predicate invariant'0 (self : t_Sum'0) =
    [%#sinvariant1] inv'1 self
  
  predicate inv'0 (_1 : t_Sum'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Sum'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  goal refines : [%#smixed0] forall self : t_Sum'0 . inv'0 self
   -> inv'0 self /\ (forall result : t_Sum'0 . result = self /\ inv'1 result  -> result = self /\ inv'1 result)
end
module M_mixed__qyi2064882709679455996__eq__refines [#"mixed.rs" 8 16 8 25] (* <Product<A, B> as creusot_contracts::PartialEq> *)
  let%span smixed0 = "mixed.rs" 8 16 8 25
  let%span smodel1 = "../../../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span smixed2 = "mixed.rs" 24 8 24 66
  let%span sinvariant3 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_A'0
  
  type t_B'0
  
  type t_Product'0  =
    { t_Product__a'0: t_A'0; t_Product__b'0: t_B'0 }
  
  predicate inv'2 (_1 : t_A'0)
  
  predicate inv'3 (_1 : t_B'0)
  
  predicate inv'1 (_1 : t_Product'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Product'0 [inv'1 x] . inv'1 x
  = match x with
    | {t_Product__a'0 = a ; t_Product__b'0 = b} -> inv'2 a /\ inv'3 b
    end
  
  predicate invariant'0 (self : t_Product'0) =
    [%#sinvariant3] inv'1 self
  
  predicate inv'0 (_1 : t_Product'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Product'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_DeepModelTy'0
  
  type t_DeepModelTy'1
  
  type t_Product'1  =
    { t_Product__a'1: t_DeepModelTy'0; t_Product__b'1: t_DeepModelTy'1 }
  
  function deep_model'2 (self : t_A'0) : t_DeepModelTy'0
  
  function deep_model'3 (self : t_B'0) : t_DeepModelTy'1
  
  function deep_model'1 [#"mixed.rs" 23 4 23 44] (self : t_Product'0) : t_Product'1 =
    [%#smixed2] { t_Product__a'1 = deep_model'2 self.t_Product__a'0; t_Product__b'1 = deep_model'3 self.t_Product__b'0 }
  
  function deep_model'0 (self : t_Product'0) : t_Product'1 =
    [%#smodel1] deep_model'1 self
  
  goal refines : [%#smixed0] forall self : t_Product'0 . forall other : t_Product'0 . inv'0 other /\ inv'0 self
   -> inv'0 other
  /\ inv'0 self
  /\ (forall result : bool . result = (deep_model'0 self = deep_model'0 other)
   -> result = (deep_model'0 self = deep_model'0 other))
end
module M_mixed__qyi1479716791028959114__eq__refines [#"mixed.rs" 28 16 28 25] (* <Sum<A, B> as creusot_contracts::PartialEq> *)
  let%span smixed0 = "mixed.rs" 28 16 28 25
  let%span smodel1 = "../../../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span smixed2 = "mixed.rs" 40 8 43 9
  let%span sinvariant3 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_A'0
  
  type t_B'0
  
  type t_Sum'0  =
    | C_A'0 t_A'0
    | C_B'0 t_B'0
  
  predicate inv'2 (_1 : t_A'0)
  
  predicate inv'3 (_1 : t_B'0)
  
  predicate inv'1 (_1 : t_Sum'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Sum'0 [inv'1 x] . inv'1 x
  = match x with
    | C_A'0 a_0 -> inv'2 a_0
    | C_B'0 a_0 -> inv'3 a_0
    end
  
  predicate invariant'0 (self : t_Sum'0) =
    [%#sinvariant3] inv'1 self
  
  predicate inv'0 (_1 : t_Sum'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Sum'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_DeepModelTy'0
  
  type t_DeepModelTy'1
  
  type t_Sum'1  =
    | C_A'1 t_DeepModelTy'0
    | C_B'1 t_DeepModelTy'1
  
  function deep_model'2 (self : t_A'0) : t_DeepModelTy'0
  
  function deep_model'3 (self : t_B'0) : t_DeepModelTy'1
  
  function deep_model'1 [#"mixed.rs" 39 4 39 44] (self : t_Sum'0) : t_Sum'1 =
    [%#smixed2] match self with
      | C_A'0 a -> C_A'1 (deep_model'2 a)
      | C_B'0 b -> C_B'1 (deep_model'3 b)
      end
  
  function deep_model'0 (self : t_Sum'0) : t_Sum'1 =
    [%#smodel1] deep_model'1 self
  
  goal refines : [%#smixed0] forall self : t_Sum'0 . forall other : t_Sum'0 . inv'0 other /\ inv'0 self
   -> inv'0 other
  /\ inv'0 self
  /\ (forall result : bool . result = (deep_model'0 self = deep_model'0 other)
   -> result = (deep_model'0 self = deep_model'0 other))
end
module M_mixed__qyi9942470069884222103__resolve_coherence__refines [#"mixed.rs" 49 9 49 16] (* <Product2<'a, A> as creusot_contracts::Resolve> *)
  let%span smixed0 = "mixed.rs" 49 9 49 16
  let%span smixed1 = "mixed.rs" 51 4 53 19
  let%span svec2 = "../../../../../creusot-contracts/src/std/vec.rs" 49 20 49 83
  let%span sresolve3 = "../../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant4 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span svec5 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sindex6 = "../../../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span sinvariant7 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use prelude.prelude.Borrow
  
  type t_A'0
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_Product2'0  =
    { t_Product2__a'0: borrowed t_A'0; t_Product2__b'0: bool; t_Product2__c'0: t_Vec'0 }
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq uint32
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec5] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : uint32 =
    [%#sindex6] Seq.get (view'0 self) ix
  
  predicate resolve'6 (_1 : uint32) =
    true
  
  predicate resolve'4 (self : t_Vec'0) =
    [%#svec2] forall i : int . 0 <= i /\ i < Seq.length (view'0 self)  -> resolve'6 (index_logic'0 self i)
  
  predicate resolve'1 (_1 : t_Vec'0) =
    resolve'4 _1
  
  predicate resolve'2 (_1 : bool) =
    true
  
  predicate resolve'5 (self : borrowed t_A'0) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed t_A'0) =
    resolve'5 _1
  
  predicate structural_resolve'0 (_1 : t_Product2'0) =
    match _1 with
      | {t_Product2__a'0 = x0 ; t_Product2__b'0 = x1 ; t_Product2__c'0 = x2} -> resolve'1 x2
      /\ resolve'2 x1 /\ resolve'3 x0
      end
  
  predicate inv'3 (_1 : t_A'0)
  
  predicate invariant'1 (self : borrowed t_A'0) =
    [%#sinvariant7] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'2 (_1 : borrowed t_A'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_A'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate inv'1 (_1 : t_Product2'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Product2'0 [inv'1 x] . inv'1 x
  = match x with
    | {t_Product2__a'0 = a ; t_Product2__b'0 = b ; t_Product2__c'0 = c} -> inv'2 a
    end
  
  predicate invariant'0 (self : t_Product2'0) =
    [%#sinvariant4] inv'1 self
  
  predicate inv'0 (_1 : t_Product2'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Product2'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'0 [#"mixed.rs" 49 9 49 16] (self : t_Product2'0) =
    [%#smixed1] resolve'3 self.t_Product2__a'0 /\ resolve'2 self.t_Product2__b'0 /\ resolve'1 self.t_Product2__c'0
  
  goal refines : [%#smixed0] forall self : t_Product2'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
module M_mixed__qyi17966204983409797136__resolve_coherence__refines [#"mixed.rs" 56 9 56 16] (* <Sum2<A, B> as creusot_contracts::Resolve> *)
  let%span smixed0 = "mixed.rs" 56 9 56 16
  let%span sinvariant1 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_A'0
  
  type t_B'0
  
  type t_Sum2'0  =
    | C_X'0 t_A'0
    | C_Y'0 bool t_B'0
  
  predicate resolve'1 (_1 : t_A'0)
  
  predicate resolve'2 (_1 : t_B'0)
  
  predicate resolve'3 (_1 : bool) =
    true
  
  predicate structural_resolve'0 (_1 : t_Sum2'0) =
    match _1 with
      | C_X'0 x0 -> resolve'1 x0
      | C_Y'0 x0 x1 -> resolve'2 x1 /\ resolve'3 x0
      end
  
  predicate inv'2 (_1 : t_A'0)
  
  predicate inv'3 (_1 : t_B'0)
  
  predicate inv'1 (_1 : t_Sum2'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Sum2'0 [inv'1 x] . inv'1 x
  = match x with
    | C_X'0 a_0 -> inv'2 a_0
    | C_Y'0 a x -> inv'3 x
    end
  
  predicate invariant'0 (self : t_Sum2'0) =
    [%#sinvariant1] inv'1 self
  
  predicate inv'0 (_1 : t_Sum2'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Sum2'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'0 [#"mixed.rs" 56 9 56 16] (self : t_Sum2'0) =
    [%#smixed0] match self with
      | C_X'0 v0_1 -> resolve'1 v0_1
      | C_Y'0 a_1 x_1 -> resolve'3 a_1 /\ resolve'2 x_1
      end
  
  goal refines : [%#smixed0] forall self : t_Sum2'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
