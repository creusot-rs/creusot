
module T_mixed__Product
  type t_Product 'a 'b =
    | C_Product 'a 'b
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Product < 'a > < 'b > (input:t_Product 'a 'b) (ret  (a:'a) (b:'b))= any
    [ good (a:'a) (b:'b)-> {C_Product a b = input} (! ret {a} {b})
    | bad (a:'a) (b:'b)-> {C_Product a b <> input} {false} any ]
    
  
  function t_Product__a (self : t_Product 'a 'b) : 'a =
    match self with
      | C_Product a _ -> a
      end
  
  function t_Product__b (self : t_Product 'a 'b) : 'b =
    match self with
      | C_Product _ a -> a
      end
end
module M_mixed__qy123zimplqy35z4qy125z__clone
  type a
  
  type b
  
  let%span smixed0 = "../mixed.rs" 8 9 8 14
  
  let%span span1 = "../../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span2 = "../../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "" 0 0 0 0
  
  let%span span4 = "../../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  
  let%span span5 = "" 0 0 0 0
  
  predicate invariant'5 (self : b)
  
  predicate inv'5 (_1 : b)
  
  axiom inv'5 : forall x : b . inv'5 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : b) =
    [%#span1] inv'5 self
  
  predicate inv'4 (_1 : b)
  
  axiom inv'4 : forall x : b . inv'4 x = true
  
  predicate invariant'3 (self : a)
  
  predicate inv'3 (_1 : a)
  
  axiom inv'3 : forall x : a . inv'3 x = true
  
  predicate invariant'2 (self : a) =
    [%#span1] inv'3 self
  
  predicate inv'2 (_1 : a)
  
  axiom inv'2 : forall x : a . inv'2 x = true
  
  use T_mixed__Product as Product'0
  
  predicate invariant'1 (self : Product'0.t_Product a b) =
    [%#span2] true
  
  predicate inv'1 (_1 : Product'0.t_Product a b)
  
  axiom inv'1 : forall x : Product'0.t_Product a b . inv'1 x = true
  
  predicate invariant'0 (self : Product'0.t_Product a b) =
    [%#span1] inv'1 self
  
  predicate inv'0 (_1 : Product'0.t_Product a b)
  
  axiom inv'0 : forall x : Product'0.t_Product a b . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  let rec clone'1 (self:b) (return'  (ret:b))= {[@expl:precondition] [%#span3] inv'4 self}
    any [ return' (result:b)-> {[%#span5] inv'5 result} {[%#span4] result = self} (! return' {result}) ] 
  
  let rec clone'0 (self:a) (return'  (ret:a))= {[@expl:precondition] [%#span3] inv'2 self}
    any [ return' (result:a)-> {[%#span5] inv'3 result} {[%#span4] result = self} (! return' {result}) ] 
  
  let rec clone' (self:Product'0.t_Product a b) (return'  (ret:Product'0.t_Product a b))= {[%#smixed0] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Product'0.t_Product <a> <b> {self} (fun (ra'0:a) (rb'0:b) ->  [ &_5 <- ra'0 ] s1)
      | s1 = clone'0 {_5} (fun (_ret':a) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Product'0.t_Product <a> <b> {self} (fun (ra'0:a) (rb'0:b) ->  [ &_8 <- rb'0 ] s1)
      | s1 = clone'1 {_8} (fun (_ret':b) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- Product'0.C_Product _3 _6 ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : Product'0.t_Product a b = any_l ()
    | & self : Product'0.t_Product a b = self
    | & _3 : a = any_l ()
    | & _5 : a = any_l ()
    | & _6 : b = any_l ()
    | & _8 : b = any_l () ]
    
    [ return' (result:Product'0.t_Product a b)-> {[@expl:postcondition] [%#smixed0] inv'1 result}
      {[@expl:postcondition] [%#smixed0] result = self}
      (! return' {result}) ]
    
end
module M_mixed__qy123zimplqy35z5qy125z__eq
  type a
  
  type b
  
  let%span smixed0 = "../mixed.rs" 10 4 11 12
  
  let%span smixed1 = "../mixed.rs" 8 16 8 25
  
  let%span span2 = "../../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span4 = "../mixed.rs" 24 8 24 66
  
  let%span span5 = "../../../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "../../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  
  predicate invariant'5 (self : b)
  
  predicate inv'5 (_1 : b)
  
  axiom inv'5 : forall x : b . inv'5 x = true
  
  predicate invariant'4 (self : a)
  
  predicate inv'4 (_1 : a)
  
  axiom inv'4 : forall x : a . inv'4 x = true
  
  use T_mixed__Product as Product'0
  
  predicate invariant'3 (self : Product'0.t_Product a b) =
    [%#span2] true
  
  predicate inv'3 (_1 : Product'0.t_Product a b)
  
  axiom inv'3 : forall x : Product'0.t_Product a b . inv'3 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : b) =
    [%#span3] inv'5 self
  
  predicate inv'2 (_1 : b)
  
  axiom inv'2 : forall x : b . inv'2 x = true
  
  predicate invariant'1 (self : a) =
    [%#span3] inv'4 self
  
  predicate inv'1 (_1 : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : Product'0.t_Product a b) =
    [%#span3] inv'3 self
  
  predicate inv'0 (_1 : Product'0.t_Product a b)
  
  axiom inv'0 : forall x : Product'0.t_Product a b . inv'0 x = true
  
  type t_DeepModelTy'1
  
  function deep_model'5 (self : b) : t_DeepModelTy'1
  
  use T_mixed__Product as T_mixed__Product
  
  type t_DeepModelTy'0
  
  function deep_model'4 (self : a) : t_DeepModelTy'0
  
  function deep_model'3 [#"../mixed.rs" 23 4 23 44] (self : Product'0.t_Product a b) : Product'0.t_Product t_DeepModelTy'0 t_DeepModelTy'1
    
   =
    [%#span4] Product'0.C_Product (deep_model'4 (T_mixed__Product.t_Product__a self)) (deep_model'5 (T_mixed__Product.t_Product__b self))
  
  function deep_model'0 (self : Product'0.t_Product a b) : Product'0.t_Product t_DeepModelTy'0 t_DeepModelTy'1 =
    [%#span5] deep_model'3 self
  
  use prelude.prelude.Intrinsic
  
  function deep_model'2 (self : b) : t_DeepModelTy'1 =
    [%#span5] deep_model'5 self
  
  let rec eq'1 (self:b) (other:b) (return'  (ret:bool))= {[@expl:precondition] [%#span7] inv'2 other}
    {[@expl:precondition] [%#span6] inv'2 self}
    any [ return' (result:bool)-> {[%#span8] result = (deep_model'2 self = deep_model'2 other)} (! return' {result}) ] 
  
  function deep_model'1 (self : a) : t_DeepModelTy'0 =
    [%#span5] deep_model'4 self
  
  let rec eq'0 (self:a) (other:a) (return'  (ret:bool))= {[@expl:precondition] [%#span7] inv'1 other}
    {[@expl:precondition] [%#span6] inv'1 self}
    any [ return' (result:bool)-> {[%#span8] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ] 
  
  let rec eq (self:Product'0.t_Product a b) (rhs:Product'0.t_Product a b) (return'  (ret:bool))= {[%#smixed1] inv'0 rhs}
    {[%#smixed1] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Product'0.t_Product <a> <b> {rhs} (fun (ra'0:a) (rb'0:b) ->  [ &_7 <- ra'0 ] s1)
      | s1 = Product'0.t_Product <a> <b> {self}
          (fun (ra'1:a) (rb'1:b) -> eq'0 {ra'1} {_7} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s2))
      | s2 = bb1 ]
      
    | bb1 = any [ br0 -> {_4 = false} (! bb3) | br1 -> {_4} (! bb2) ] 
    | bb2 = s0
      [ s0 = Product'0.t_Product <a> <b> {rhs} (fun (ra'0:a) (rb'0:b) ->  [ &_10 <- rb'0 ] s1)
      | s1 = Product'0.t_Product <a> <b> {self}
          (fun (ra'1:a) (rb'1:b) -> eq'1 {rb'1} {_10} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2))
      | s2 = bb4 ]
      
    | bb4 = bb5
    | bb3 = s0 [ s0 =  [ &_0 <- [%#smixed0] false ] s1 | s1 = bb5 ] 
    | bb5 = return' {_0} ]
    )
    [ & _0 : bool = any_l ()
    | & self : Product'0.t_Product a b = self
    | & rhs : Product'0.t_Product a b = rhs
    | & _4 : bool = any_l ()
    | & _7 : a = any_l ()
    | & _10 : b = any_l () ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [%#smixed1] result = (deep_model'0 self = deep_model'0 rhs)}
      (! return' {result}) ]
    
end
module T_mixed__Sum
  type t_Sum 'a 'b =
    | C_A 'a
    | C_B 'b
  
  function any_l (_ : 'b) : 'a
  
  let rec v_A < 'a > < 'b > (input:t_Sum 'a 'b) (ret  (field_0:'a))= any
    [ good (field_0:'a)-> {C_A field_0 = input} (! ret {field_0})
    | bad (field_0:'a)-> {C_A field_0 <> input} {false} any ]
    
  
  let rec v_B < 'a > < 'b > (input:t_Sum 'a 'b) (ret  (field_0:'b))= any
    [ good (field_0:'b)-> {C_B field_0 = input} (! ret {field_0})
    | bad (field_0:'b)-> {C_B field_0 <> input} {false} any ]
    
end
module M_mixed__qy123zimplqy35z6qy125z__clone
  type a
  
  type b
  
  let%span smixed0 = "../mixed.rs" 28 9 28 14
  
  let%span span1 = "../../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span2 = "../../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "" 0 0 0 0
  
  let%span span4 = "../../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  
  let%span span5 = "" 0 0 0 0
  
  predicate invariant'5 (self : a)
  
  predicate inv'5 (_1 : a)
  
  axiom inv'5 : forall x : a . inv'5 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : a) =
    [%#span1] inv'5 self
  
  predicate inv'4 (_1 : a)
  
  axiom inv'4 : forall x : a . inv'4 x = true
  
  predicate invariant'3 (self : b)
  
  predicate inv'3 (_1 : b)
  
  axiom inv'3 : forall x : b . inv'3 x = true
  
  predicate invariant'2 (self : b) =
    [%#span1] inv'3 self
  
  predicate inv'2 (_1 : b)
  
  axiom inv'2 : forall x : b . inv'2 x = true
  
  use T_mixed__Sum as Sum'0
  
  predicate invariant'1 (self : Sum'0.t_Sum a b) =
    [%#span2] true
  
  predicate inv'1 (_1 : Sum'0.t_Sum a b)
  
  axiom inv'1 : forall x : Sum'0.t_Sum a b . inv'1 x = true
  
  predicate invariant'0 (self : Sum'0.t_Sum a b) =
    [%#span1] inv'1 self
  
  predicate inv'0 (_1 : Sum'0.t_Sum a b)
  
  axiom inv'0 : forall x : Sum'0.t_Sum a b . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  let rec clone'1 (self:a) (return'  (ret:a))= {[@expl:precondition] [%#span3] inv'4 self}
    any [ return' (result:a)-> {[%#span5] inv'5 result} {[%#span4] result = self} (! return' {result}) ] 
  
  let rec clone'0 (self:b) (return'  (ret:b))= {[@expl:precondition] [%#span3] inv'2 self}
    any [ return' (result:b)-> {[%#span5] inv'3 result} {[%#span4] result = self} (! return' {result}) ] 
  
  let rec clone' (self:Sum'0.t_Sum a b) (return'  (ret:Sum'0.t_Sum a b))= {[%#smixed0] inv'0 self}
    (! bb0
    [ bb0 = any [ br0 (a:a)-> {self = Sum'0.C_A a} (! bb2) | br1 (a:b)-> {self = Sum'0.C_B a} (! bb3) ] 
    | bb3 = s0
      [ s0 = Sum'0.v_B <a> <b> {self} (fun (r0'0:b) ->  [ &v0_11 <- r0'0 ] s1)
      | s1 =  [ &_11 <- v0_11 ] s2
      | s2 = clone'0 {_11} (fun (_ret':b) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = s0 [ s0 =  [ &_0 <- Sum'0.C_B _9 ] s1 | s1 = bb8 ] 
    | bb8 = bb9
    | bb2 = bb4
    | bb4 = s0
      [ s0 = Sum'0.v_A <a> <b> {self} (fun (r0'0:a) ->  [ &v0_1 <- r0'0 ] s1)
      | s1 =  [ &_7 <- v0_1 ] s2
      | s2 = clone'1 {_7} (fun (_ret':a) ->  [ &_5 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 =  [ &_0 <- Sum'0.C_A _5 ] s1 | s1 = bb6 ] 
    | bb6 = bb9
    | bb9 = return' {_0} ]
    )
    [ & _0 : Sum'0.t_Sum a b = any_l ()
    | & self : Sum'0.t_Sum a b = self
    | & v0_1 : a = any_l ()
    | & _5 : a = any_l ()
    | & _7 : a = any_l ()
    | & v0_11 : b = any_l ()
    | & _9 : b = any_l ()
    | & _11 : b = any_l () ]
    
    [ return' (result:Sum'0.t_Sum a b)-> {[@expl:postcondition] [%#smixed0] inv'1 result}
      {[@expl:postcondition] [%#smixed0] result = self}
      (! return' {result}) ]
    
end
module M_mixed__qy123zimplqy35z7qy125z__eq
  type a
  
  type b
  
  let%span smixed0 = "../mixed.rs" 28 16 28 25
  
  let%span span1 = "../../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span3 = "../mixed.rs" 40 8 43 9
  
  let%span span4 = "../../../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  
  predicate invariant'5 (self : a)
  
  predicate inv'5 (_1 : a)
  
  axiom inv'5 : forall x : a . inv'5 x = true
  
  predicate invariant'4 (self : b)
  
  predicate inv'4 (_1 : b)
  
  axiom inv'4 : forall x : b . inv'4 x = true
  
  use T_mixed__Sum as Sum'0
  
  predicate invariant'3 (self : Sum'0.t_Sum a b) =
    [%#span1] true
  
  predicate inv'3 (_1 : Sum'0.t_Sum a b)
  
  axiom inv'3 : forall x : Sum'0.t_Sum a b . inv'3 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : a) =
    [%#span2] inv'5 self
  
  predicate inv'2 (_1 : a)
  
  axiom inv'2 : forall x : a . inv'2 x = true
  
  predicate invariant'1 (self : b) =
    [%#span2] inv'4 self
  
  predicate inv'1 (_1 : b)
  
  axiom inv'1 : forall x : b . inv'1 x = true
  
  predicate invariant'0 (self : Sum'0.t_Sum a b) =
    [%#span2] inv'3 self
  
  predicate inv'0 (_1 : Sum'0.t_Sum a b)
  
  axiom inv'0 : forall x : Sum'0.t_Sum a b . inv'0 x = true
  
  type t_DeepModelTy'0
  
  function deep_model'4 (self : b) : t_DeepModelTy'0
  
  type t_DeepModelTy'1
  
  function deep_model'5 (self : a) : t_DeepModelTy'1
  
  function deep_model'3 [#"../mixed.rs" 39 4 39 44] (self : Sum'0.t_Sum a b) : Sum'0.t_Sum t_DeepModelTy'1 t_DeepModelTy'0
    
   =
    [%#span3] match self with
      | Sum'0.C_A a -> Sum'0.C_A (deep_model'5 a)
      | Sum'0.C_B b -> Sum'0.C_B (deep_model'4 b)
      end
  
  function deep_model'0 (self : Sum'0.t_Sum a b) : Sum'0.t_Sum t_DeepModelTy'1 t_DeepModelTy'0 =
    [%#span4] deep_model'3 self
  
  use prelude.prelude.Intrinsic
  
  function deep_model'2 (self : a) : t_DeepModelTy'1 =
    [%#span4] deep_model'5 self
  
  let rec eq'1 (self:a) (other:a) (return'  (ret:bool))= {[@expl:precondition] [%#span6] inv'2 other}
    {[@expl:precondition] [%#span5] inv'2 self}
    any [ return' (result:bool)-> {[%#span7] result = (deep_model'2 self = deep_model'2 other)} (! return' {result}) ] 
  
  function deep_model'1 (self : b) : t_DeepModelTy'0 =
    [%#span4] deep_model'4 self
  
  let rec eq'0 (self:b) (other:b) (return'  (ret:bool))= {[@expl:precondition] [%#span6] inv'1 other}
    {[@expl:precondition] [%#span5] inv'1 self}
    any [ return' (result:bool)-> {[%#span7] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ] 
  
  let rec eq (self:Sum'0.t_Sum a b) (rhs:Sum'0.t_Sum a b) (return'  (ret:bool))= {[%#smixed0] inv'0 rhs}
    {[%#smixed0] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- (self, rhs) ] s1
      | s1 = any
        [ br0 (a:a)-> {(let (r'0, _) = _4 in r'0) = Sum'0.C_A a} (! bb2)
        | br1 (a:b)-> {(let (r'0, _) = _4 in r'0) = Sum'0.C_B a} (! bb4) ]
         ]
      
    | bb4 = any
      [ br0 (a:a)-> {(let (_, r'0) = _4 in r'0) = Sum'0.C_A a} (! bb1)
      | br1 (a:b)-> {(let (_, r'0) = _4 in r'0) = Sum'0.C_B a} (! bb5) ]
      
    | bb5 = bb11
    | bb11 = s0
      [ s0 = Sum'0.v_B <a> <b> {let (r'0, _) = _4 in r'0} (fun (r0'0:b) ->  [ &v0_11 <- r0'0 ] s1)
      | s1 = Sum'0.v_B <a> <b> {let (_, r'1) = _4 in r'1} (fun (r0'1:b) ->  [ &v0_21 <- r0'1 ] s2)
      | s2 = eq'0 {v0_11} {v0_21} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb12 ]
      
    | bb12 = any [ br0 -> {_17 = false} (! bb14) | br1 -> {_17} (! bb13) ] 
    | bb13 = s0 [ s0 =  [ &_0 <- [%#smixed0] true ] s1 | s1 = bb15 ] 
    | bb14 = s0 [ s0 =  [ &_0 <- [%#smixed0] false ] s1 | s1 = bb15 ] 
    | bb15 = bb16
    | bb2 = any
      [ br0 (a:a)-> {(let (_, r'0) = _4 in r'0) = Sum'0.C_A a} (! bb3)
      | br1 (a:b)-> {(let (_, r'0) = _4 in r'0) = Sum'0.C_B a} (! bb1) ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- [%#smixed0] false ] s1 | s1 = bb16 ] 
    | bb3 = bb6
    | bb6 = s0
      [ s0 = Sum'0.v_A <a> <b> {let (r'0, _) = _4 in r'0} (fun (r0'0:a) ->  [ &v0_1 <- r0'0 ] s1)
      | s1 = Sum'0.v_A <a> <b> {let (_, r'1) = _4 in r'1} (fun (r0'1:a) ->  [ &v0_2 <- r0'1 ] s2)
      | s2 = eq'1 {v0_1} {v0_2} (fun (_ret':bool) ->  [ &_12 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = any [ br0 -> {_12 = false} (! bb9) | br1 -> {_12} (! bb8) ] 
    | bb8 = s0 [ s0 =  [ &_0 <- [%#smixed0] true ] s1 | s1 = bb10 ] 
    | bb9 = s0 [ s0 =  [ &_0 <- [%#smixed0] false ] s1 | s1 = bb10 ] 
    | bb10 = bb16
    | bb16 = return' {_0} ]
    )
    [ & _0 : bool = any_l ()
    | & self : Sum'0.t_Sum a b = self
    | & rhs : Sum'0.t_Sum a b = rhs
    | & _4 : (Sum'0.t_Sum a b, Sum'0.t_Sum a b) = any_l ()
    | & v0_1 : a = any_l ()
    | & v0_2 : a = any_l ()
    | & _12 : bool = any_l ()
    | & v0_11 : b = any_l ()
    | & v0_21 : b = any_l ()
    | & _17 : bool = any_l () ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [%#smixed0] result = (deep_model'0 self = deep_model'0 rhs)}
      (! return' {result}) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module T_mixed__Product2
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.Borrow
  
  type t_Product2 'a =
    | C_Product2 (borrowed 'a) bool (Vec'0.t_Vec uint32 (Global'0.t_Global))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Product2 < 'a > (input:t_Product2 'a) (ret  (a:borrowed 'a) (b:bool) (c:Vec'0.t_Vec uint32 (Global'0.t_Global)))= any
    [ good (a:borrowed 'a) (b:bool) (c:Vec'0.t_Vec uint32 (Global'0.t_Global))-> {C_Product2 a b c = input}
      (! ret {a} {b} {c})
    | bad (a:borrowed 'a) (b:bool) (c:Vec'0.t_Vec uint32 (Global'0.t_Global))-> {C_Product2 a b c <> input}
      {false}
      any ]
    
  
  function t_Product2__a (self : t_Product2 'a) : borrowed 'a =
    match self with
      | C_Product2 a _ _ -> a
      end
  
  function t_Product2__b (self : t_Product2 'a) : bool =
    match self with
      | C_Product2 _ a _ -> a
      end
  
  function t_Product2__c (self : t_Product2 'a) : Vec'0.t_Vec uint32 (Global'0.t_Global) =
    match self with
      | C_Product2 _ _ a -> a
      end
end
module T_mixed__Sum2
  type t_Sum2 'a 'b =
    | C_X 'a
    | C_Y bool 'b
  
  function any_l (_ : 'b) : 'a
  
  let rec v_X < 'a > < 'b > (input:t_Sum2 'a 'b) (ret  (field_0:'a))= any
    [ good (field_0:'a)-> {C_X field_0 = input} (! ret {field_0})
    | bad (field_0:'a)-> {C_X field_0 <> input} {false} any ]
    
  
  let rec v_Y < 'a > < 'b > (input:t_Sum2 'a 'b) (ret  (a:bool) (x:'b))= any
    [ good (a:bool) (x:'b)-> {C_Y a x = input} (! ret {a} {x}) | bad (a:bool) (x:'b)-> {C_Y a x <> input} {false} any ]
    
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module T_mixed__List
  use T_core__option__Option as Option'0
  
  type t_List 't =
    | C_List 't (Option'0.t_Option (t_List 't))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_List < 't > (input:t_List 't) (ret  (elem:'t) (tail:Option'0.t_Option (t_List 't)))= any
    [ good (elem:'t) (tail:Option'0.t_Option (t_List 't))-> {C_List elem tail = input} (! ret {elem} {tail})
    | bad (elem:'t) (tail:Option'0.t_Option (t_List 't))-> {C_List elem tail <> input} {false} any ]
    
  
  function t_List__elem (self : t_List 't) : 't =
    match self with
      | C_List a _ -> a
      end
  
  function t_List__tail (self : t_List 't) : Option'0.t_Option (t_List 't) =
    match self with
      | C_List _ a -> a
      end
end
module T_mixed__ListDeepModel
  type t_DeepModelTy'0
  
  use T_core__option__Option as Option'0
  
  type t_ListDeepModel 't 'proj0 =
    | C_ListDeepModel 'proj0 (Option'0.t_Option (t_ListDeepModel 't 'proj0))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_ListDeepModel < 't > < 'proj0 > (input:t_ListDeepModel 't 'proj0) (ret  (elem:'proj0) (tail:Option'0.t_Option (t_ListDeepModel 't 'proj0)))= any
    [ good (elem:'proj0) (tail:Option'0.t_Option (t_ListDeepModel 't 'proj0))-> {C_ListDeepModel elem tail = input}
      (! ret {elem} {tail})
    | bad (elem:'proj0) (tail:Option'0.t_Option (t_ListDeepModel 't 'proj0))-> {C_ListDeepModel elem tail <> input}
      {false}
      any ]
    
end
module T_mixed__Expr
  type t_Expr 'v =
    | C_Var 'v
    | C_Add (t_Expr 'v) (t_Expr 'v)
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Var < 'v > (input:t_Expr 'v) (ret  (field_0:'v))= any
    [ good (field_0:'v)-> {C_Var field_0 = input} (! ret {field_0})
    | bad (field_0:'v)-> {C_Var field_0 <> input} {false} any ]
    
  
  let rec v_Add < 'v > (input:t_Expr 'v) (ret  (field_0:t_Expr 'v) (field_1:t_Expr 'v))= any
    [ good (field_0:t_Expr 'v) (field_1:t_Expr 'v)-> {C_Add field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:t_Expr 'v) (field_1:t_Expr 'v)-> {C_Add field_0 field_1 <> input} {false} any ]
    
end
module T_mixed__ExprDeepModel
  type t_DeepModelTy'0
  
  type t_ExprDeepModel 'v 'proj0 =
    | C_Var 'proj0
    | C_Add (t_ExprDeepModel 'v 'proj0) (t_ExprDeepModel 'v 'proj0)
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Var < 'v > < 'proj0 > (input:t_ExprDeepModel 'v 'proj0) (ret  (field_0:'proj0))= any
    [ good (field_0:'proj0)-> {C_Var field_0 = input} (! ret {field_0})
    | bad (field_0:'proj0)-> {C_Var field_0 <> input} {false} any ]
    
  
  let rec v_Add < 'v > < 'proj0 > (input:t_ExprDeepModel 'v 'proj0) (ret  (field_0:t_ExprDeepModel 'v 'proj0) (field_1:t_ExprDeepModel 'v 'proj0))= any
    [ good (field_0:t_ExprDeepModel 'v 'proj0) (field_1:t_ExprDeepModel 'v 'proj0)-> {C_Add field_0 field_1 = input}
      (! ret {field_0} {field_1})
    | bad (field_0:t_ExprDeepModel 'v 'proj0) (field_1:t_ExprDeepModel 'v 'proj0)-> {C_Add field_0 field_1 <> input}
      {false}
      any ]
    
end
module M_mixed__qy123zimplqy35z4qy125z
  type a
  
  type b
  
  let%span smixed0 = "../mixed.rs" 8 9 8 14
  
  let%span span1 = "../../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  use T_mixed__Product as Product'0
  
  predicate invariant'1 (self : Product'0.t_Product a b) =
    [%#span1] true
  
  predicate inv'1 (_1 : Product'0.t_Product a b)
  
  axiom inv'1 : forall x : Product'0.t_Product a b . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : Product'0.t_Product a b) =
    [%#span2] inv'1 self
  
  predicate inv'0 (_1 : Product'0.t_Product a b)
  
  axiom inv'0 : forall x : Product'0.t_Product a b . inv'0 x = true
  
  goal clone'_refn : [%#smixed0] forall self : Product'0.t_Product a b . inv'0 self
   -> inv'0 self
  /\ (forall result : Product'0.t_Product a b . inv'1 result /\ result = self  -> inv'1 result /\ result = self)
end
module M_mixed__qy123zimplqy35z6qy125z
  type a
  
  type b
  
  let%span smixed0 = "../mixed.rs" 28 9 28 14
  
  let%span span1 = "../../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  use T_mixed__Sum as Sum'0
  
  predicate invariant'1 (self : Sum'0.t_Sum a b) =
    [%#span1] true
  
  predicate inv'1 (_1 : Sum'0.t_Sum a b)
  
  axiom inv'1 : forall x : Sum'0.t_Sum a b . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : Sum'0.t_Sum a b) =
    [%#span2] inv'1 self
  
  predicate inv'0 (_1 : Sum'0.t_Sum a b)
  
  axiom inv'0 : forall x : Sum'0.t_Sum a b . inv'0 x = true
  
  goal clone'_refn : [%#smixed0] forall self : Sum'0.t_Sum a b . inv'0 self
   -> inv'0 self /\ (forall result : Sum'0.t_Sum a b . inv'1 result /\ result = self  -> inv'1 result /\ result = self)
end
module M_mixed__qy123zimplqy35z5qy125z
  type a
  
  type b
  
  let%span smixed0 = "../mixed.rs" 8 16 8 25
  
  let%span span1 = "../../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span3 = "../mixed.rs" 24 8 24 66
  
  let%span span4 = "../../../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  use T_mixed__Product as Product'0
  
  predicate invariant'1 (self : Product'0.t_Product a b) =
    [%#span1] true
  
  predicate inv'1 (_1 : Product'0.t_Product a b)
  
  axiom inv'1 : forall x : Product'0.t_Product a b . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : Product'0.t_Product a b) =
    [%#span2] inv'1 self
  
  predicate inv'0 (_1 : Product'0.t_Product a b)
  
  axiom inv'0 : forall x : Product'0.t_Product a b . inv'0 x = true
  
  type t_DeepModelTy'1
  
  function deep_model'3 (self : b) : t_DeepModelTy'1
  
  use T_mixed__Product as T_mixed__Product
  
  type t_DeepModelTy'0
  
  function deep_model'2 (self : a) : t_DeepModelTy'0
  
  function deep_model'1 [#"../mixed.rs" 23 4 23 44] (self : Product'0.t_Product a b) : Product'0.t_Product t_DeepModelTy'0 t_DeepModelTy'1
    
   =
    [%#span3] Product'0.C_Product (deep_model'2 (T_mixed__Product.t_Product__a self)) (deep_model'3 (T_mixed__Product.t_Product__b self))
  
  function deep_model'0 (self : Product'0.t_Product a b) : Product'0.t_Product t_DeepModelTy'0 t_DeepModelTy'1 =
    [%#span4] deep_model'1 self
  
  goal eq_refn : [%#smixed0] forall self : Product'0.t_Product a b . forall other : Product'0.t_Product a b . inv'0 other
  /\ inv'0 self
   -> inv'0 other
  /\ inv'0 self
  /\ (forall result : bool . result = (deep_model'0 self = deep_model'0 other)
   -> result = (deep_model'0 self = deep_model'0 other))
end
module M_mixed__qy123zimplqy35z7qy125z
  type a
  
  type b
  
  let%span smixed0 = "../mixed.rs" 28 16 28 25
  
  let%span span1 = "../../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span3 = "../mixed.rs" 40 8 43 9
  
  let%span span4 = "../../../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  use T_mixed__Sum as Sum'0
  
  predicate invariant'1 (self : Sum'0.t_Sum a b) =
    [%#span1] true
  
  predicate inv'1 (_1 : Sum'0.t_Sum a b)
  
  axiom inv'1 : forall x : Sum'0.t_Sum a b . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : Sum'0.t_Sum a b) =
    [%#span2] inv'1 self
  
  predicate inv'0 (_1 : Sum'0.t_Sum a b)
  
  axiom inv'0 : forall x : Sum'0.t_Sum a b . inv'0 x = true
  
  type t_DeepModelTy'1
  
  function deep_model'3 (self : b) : t_DeepModelTy'1
  
  type t_DeepModelTy'0
  
  function deep_model'2 (self : a) : t_DeepModelTy'0
  
  function deep_model'1 [#"../mixed.rs" 39 4 39 44] (self : Sum'0.t_Sum a b) : Sum'0.t_Sum t_DeepModelTy'0 t_DeepModelTy'1
    
   =
    [%#span3] match self with
      | Sum'0.C_A a -> Sum'0.C_A (deep_model'2 a)
      | Sum'0.C_B b -> Sum'0.C_B (deep_model'3 b)
      end
  
  function deep_model'0 (self : Sum'0.t_Sum a b) : Sum'0.t_Sum t_DeepModelTy'0 t_DeepModelTy'1 =
    [%#span4] deep_model'1 self
  
  goal eq_refn : [%#smixed0] forall self : Sum'0.t_Sum a b . forall other : Sum'0.t_Sum a b . inv'0 other /\ inv'0 self
   -> inv'0 other
  /\ inv'0 self
  /\ (forall result : bool . result = (deep_model'0 self = deep_model'0 other)
   -> result = (deep_model'0 self = deep_model'0 other))
end
module M_mixed__qy123zimplqy35z0qy125z
  type a
  
  type b
end
module M_mixed__qy123zimplqy35z1qy125z
  type a
  
  type b
end
module M_mixed__qy123zimplqy35z2qy125z
  type t
end
module M_mixed__qy123zimplqy35z3qy125z
  type v
end
module M_mixed__qy123zimplqy35z8qy125z
  type a
end
module M_mixed__qy123zimplqy35z9qy125z
  type a
  
  type b
end
