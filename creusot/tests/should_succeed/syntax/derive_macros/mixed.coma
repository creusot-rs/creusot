module T_mixed__Product [#"mixed.rs" 9 0 9 24]
  type t_Product 'a 'b =
    | C_Product 'a 'b
  
  let rec t_Product < 'a > < 'b > (input:t_Product 'a 'b) (ret  (a:'a) (b:'b))= any
    [ good (a:'a) (b:'b)-> {C_Product a b = input} (! ret {a} {b}) ]
    
  
  function t_Product__a (self : t_Product 'a 'b) : 'a =
    match self with
      | C_Product a _ -> a
      end
  
  function t_Product__b (self : t_Product 'a 'b) : 'b =
    match self with
      | C_Product _ a -> a
      end
end
module M_mixed__qyi9512435279263248376__clone [#"mixed.rs" 8 9 8 14] (* <Product<A, B> as creusot_contracts::Clone> *)
  type a
  
  type b
  
  let%span smixed0 = "mixed.rs" 8 9 8 14
  let%span sclone1 = "../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  let%span sinvariant2 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'5 (_1 : b)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : b) =
    [%#sinvariant2] inv'5 self
  
  predicate inv'4 (_1 : b)
  
  axiom inv_axiom'3 [@rewrite] : forall x : b [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate inv'3 (_1 : a)
  
  predicate invariant'1 (self : a) =
    [%#sinvariant2] inv'3 self
  
  predicate inv'2 (_1 : a)
  
  axiom inv_axiom'2 [@rewrite] : forall x : a [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_mixed__Product as Product'0
  
  predicate inv'1 (_1 : Product'0.t_Product a b)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Product'0.t_Product a b [inv'1 x] . inv'1 x
  = match x with
    | Product'0.C_Product a b -> inv'3 a /\ inv'5 b
    end
  
  predicate invariant'0 (self : Product'0.t_Product a b) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : Product'0.t_Product a b)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Product'0.t_Product a b [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  let rec clone'1 (self:b) (return'  (ret:b))= {[@expl:precondition] inv'4 self}
    any [ return' (result:b)-> {inv'5 result} {[%#sclone1] result = self} (! return' {result}) ] 
  
  let rec clone'0 (self:a) (return'  (ret:a))= {[@expl:precondition] inv'2 self}
    any [ return' (result:a)-> {inv'3 result} {[%#sclone1] result = self} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec clone' (self:Product'0.t_Product a b) (return'  (ret:Product'0.t_Product a b))= {[%#smixed0] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Product'0.t_Product <a> <b> {self} (fun (ra'0:a) (rb'0:b) ->  [ &_5 <- ra'0 ] s1)
      | s1 = clone'0 {_5} (fun (_ret':a) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Product'0.t_Product <a> <b> {self} (fun (ra'0:a) (rb'0:b) ->  [ &_8 <- rb'0 ] s1)
      | s1 = clone'1 {_8} (fun (_ret':b) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- Product'0.C_Product _3 _6 ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : Product'0.t_Product a b = any_l ()
    | & self : Product'0.t_Product a b = self
    | & _3 : a = any_l ()
    | & _5 : a = any_l ()
    | & _6 : b = any_l ()
    | & _8 : b = any_l () ]
    
    [ return' (result:Product'0.t_Product a b)-> {[@expl:postcondition] [%#smixed0] inv'1 result}
      {[@expl:postcondition] [%#smixed0] result = self}
      (! return' {result}) ]
    
end
module M_mixed__qyi2064882709679455996__eq [#"mixed.rs" 8 16 8 25] (* <Product<A, B> as creusot_contracts::PartialEq> *)
  type a
  
  type b
  
  let%span smixed0 = "mixed.rs" 10 4 11 12
  let%span smixed1 = "mixed.rs" 8 16 8 25
  let%span scmp2 = "../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span smodel3 = "../../../../../creusot-contracts/src/model.rs" 82 8 82 28
  let%span smixed4 = "mixed.rs" 24 8 24 66
  let%span sinvariant5 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'5 (_1 : b)
  
  predicate inv'4 (_1 : a)
  
  use T_mixed__Product as Product'0
  
  predicate inv'3 (_1 : Product'0.t_Product a b)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Product'0.t_Product a b [inv'3 x] . inv'3 x
  = match x with
    | Product'0.C_Product a b -> inv'4 a /\ inv'5 b
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : b) =
    [%#sinvariant5] inv'5 self
  
  predicate inv'2 (_1 : b)
  
  axiom inv_axiom'2 [@rewrite] : forall x : b [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'1 (self : a) =
    [%#sinvariant5] inv'4 self
  
  predicate inv'1 (_1 : a)
  
  axiom inv_axiom'1 [@rewrite] : forall x : a [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : Product'0.t_Product a b) =
    [%#sinvariant5] inv'3 self
  
  predicate inv'0 (_1 : Product'0.t_Product a b)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Product'0.t_Product a b [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_DeepModelTy'1
  
  function deep_model'5 (self : b) : t_DeepModelTy'1
  
  use T_mixed__Product as T_mixed__Product
  
  type t_DeepModelTy'0
  
  function deep_model'4 (self : a) : t_DeepModelTy'0
  
  use T_mixed__Product as T_mixed__Product
  
  use T_mixed__Product as Product'0
  
  function deep_model'3 [#"mixed.rs" 23 4 23 44] (self : Product'0.t_Product a b) : Product'0.t_Product t_DeepModelTy'0 t_DeepModelTy'1
    
   =
    [%#smixed4] Product'0.C_Product (deep_model'4 (T_mixed__Product.t_Product__a self)) (deep_model'5 (T_mixed__Product.t_Product__b self))
  
  function deep_model'0 (self : Product'0.t_Product a b) : Product'0.t_Product t_DeepModelTy'0 t_DeepModelTy'1 =
    [%#smodel3] deep_model'3 self
  
  use prelude.prelude.Intrinsic
  
  function deep_model'2 (self : b) : t_DeepModelTy'1 =
    [%#smodel3] deep_model'5 self
  
  let rec eq'1 (self:b) (other:b) (return'  (ret:bool))= {[@expl:precondition] inv'2 other}
    {[@expl:precondition] inv'2 self}
    any [ return' (result:bool)-> {[%#scmp2] result = (deep_model'2 self = deep_model'2 other)} (! return' {result}) ] 
  
  function deep_model'1 (self : a) : t_DeepModelTy'0 =
    [%#smodel3] deep_model'4 self
  
  let rec eq'0 (self:a) (other:a) (return'  (ret:bool))= {[@expl:precondition] inv'1 other}
    {[@expl:precondition] inv'1 self}
    any [ return' (result:bool)-> {[%#scmp2] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec eq (self:Product'0.t_Product a b) (rhs:Product'0.t_Product a b) (return'  (ret:bool))= {[%#smixed1] inv'0 rhs}
    {[%#smixed1] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Product'0.t_Product <a> <b> {rhs} (fun (ra'0:a) (rb'0:b) ->  [ &_7 <- ra'0 ] s1)
      | s1 = Product'0.t_Product <a> <b> {self}
          (fun (ra'1:a) (rb'1:b) -> eq'0 {ra'1} {_7} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s2))
      | s2 = bb1 ]
      
    | bb1 = any [ br0 -> {_4 = false} (! bb3) | br1 -> {_4} (! bb2) ] 
    | bb2 = s0
      [ s0 = Product'0.t_Product <a> <b> {rhs} (fun (ra'0:a) (rb'0:b) ->  [ &_10 <- rb'0 ] s1)
      | s1 = Product'0.t_Product <a> <b> {self}
          (fun (ra'1:a) (rb'1:b) -> eq'1 {rb'1} {_10} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2))
      | s2 = bb4 ]
      
    | bb4 = bb5
    | bb3 = s0 [ s0 =  [ &_0 <- [%#smixed0] false ] s1 | s1 = bb5 ] 
    | bb5 = return' {_0} ]
    )
    [ & _0 : bool = any_l ()
    | & self : Product'0.t_Product a b = self
    | & rhs : Product'0.t_Product a b = rhs
    | & _4 : bool = any_l ()
    | & _7 : a = any_l ()
    | & _10 : b = any_l () ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [%#smixed1] result = (deep_model'0 self = deep_model'0 rhs)}
      (! return' {result}) ]
    
end
module T_mixed__Sum [#"mixed.rs" 29 0 29 18]
  type t_Sum 'a 'b =
    | C_A 'a
    | C_B 'b
  
  let rec v_A < 'a > < 'b > (input:t_Sum 'a 'b) (ret  (field_0:'a))= any
    [ good (field_0:'a)-> {C_A field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 'a [C_A field_0 : t_Sum 'a 'b] . C_A field_0 <> input} (! {false} any) ]
    
  
  let rec v_B < 'a > < 'b > (input:t_Sum 'a 'b) (ret  (field_0:'b))= any
    [ good (field_0:'b)-> {C_B field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 'b [C_B field_0 : t_Sum 'a 'b] . C_B field_0 <> input} (! {false} any) ]
    
end
module M_mixed__qyi6273949305112291917__clone [#"mixed.rs" 28 9 28 14] (* <Sum<A, B> as creusot_contracts::Clone> *)
  type a
  
  type b
  
  let%span smixed0 = "mixed.rs" 28 9 28 14
  let%span sclone1 = "../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  let%span sinvariant2 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'5 (_1 : a)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : a) =
    [%#sinvariant2] inv'5 self
  
  predicate inv'4 (_1 : a)
  
  axiom inv_axiom'3 [@rewrite] : forall x : a [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate inv'3 (_1 : b)
  
  predicate invariant'1 (self : b) =
    [%#sinvariant2] inv'3 self
  
  predicate inv'2 (_1 : b)
  
  axiom inv_axiom'2 [@rewrite] : forall x : b [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_mixed__Sum as Sum'0
  
  predicate inv'1 (_1 : Sum'0.t_Sum a b)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Sum'0.t_Sum a b [inv'1 x] . inv'1 x
  = match x with
    | Sum'0.C_A a_0 -> inv'5 a_0
    | Sum'0.C_B a_0 -> inv'3 a_0
    end
  
  predicate invariant'0 (self : Sum'0.t_Sum a b) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : Sum'0.t_Sum a b)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Sum'0.t_Sum a b [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  let rec clone'1 (self:a) (return'  (ret:a))= {[@expl:precondition] inv'4 self}
    any [ return' (result:a)-> {inv'5 result} {[%#sclone1] result = self} (! return' {result}) ] 
  
  let rec clone'0 (self:b) (return'  (ret:b))= {[@expl:precondition] inv'2 self}
    any [ return' (result:b)-> {inv'3 result} {[%#sclone1] result = self} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec clone' (self:Sum'0.t_Sum a b) (return'  (ret:Sum'0.t_Sum a b))= {[%#smixed0] inv'0 self}
    (! bb0
    [ bb0 = any [ br0 (a:a)-> {self = Sum'0.C_A a} (! bb2) | br1 (a:b)-> {self = Sum'0.C_B a} (! bb3) ] 
    | bb3 = s0
      [ s0 = Sum'0.v_B <a> <b> {self} (fun (r0'0:b) ->  [ &v0_11 <- r0'0 ] s1)
      | s1 =  [ &_11 <- v0_11 ] s2
      | s2 = clone'0 {_11} (fun (_ret':b) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = s0 [ s0 =  [ &_0 <- Sum'0.C_B _9 ] s1 | s1 = bb8 ] 
    | bb8 = bb9
    | bb2 = bb4
    | bb4 = s0
      [ s0 = Sum'0.v_A <a> <b> {self} (fun (r0'0:a) ->  [ &v0_1 <- r0'0 ] s1)
      | s1 =  [ &_7 <- v0_1 ] s2
      | s2 = clone'1 {_7} (fun (_ret':a) ->  [ &_5 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 =  [ &_0 <- Sum'0.C_A _5 ] s1 | s1 = bb6 ] 
    | bb6 = bb9
    | bb9 = return' {_0} ]
    )
    [ & _0 : Sum'0.t_Sum a b = any_l ()
    | & self : Sum'0.t_Sum a b = self
    | & v0_1 : a = any_l ()
    | & _5 : a = any_l ()
    | & _7 : a = any_l ()
    | & v0_11 : b = any_l ()
    | & _9 : b = any_l ()
    | & _11 : b = any_l () ]
    
    [ return' (result:Sum'0.t_Sum a b)-> {[@expl:postcondition] [%#smixed0] inv'1 result}
      {[@expl:postcondition] [%#smixed0] result = self}
      (! return' {result}) ]
    
end
module M_mixed__qyi1479716791028959114__eq [#"mixed.rs" 28 16 28 25] (* <Sum<A, B> as creusot_contracts::PartialEq> *)
  type a
  
  type b
  
  let%span smixed0 = "mixed.rs" 28 16 28 25
  let%span scmp1 = "../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span smodel2 = "../../../../../creusot-contracts/src/model.rs" 82 8 82 28
  let%span smixed3 = "mixed.rs" 40 8 43 9
  let%span sinvariant4 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'4 (_1 : b)
  
  predicate inv'5 (_1 : a)
  
  use T_mixed__Sum as Sum'0
  
  predicate inv'3 (_1 : Sum'0.t_Sum a b)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Sum'0.t_Sum a b [inv'3 x] . inv'3 x
  = match x with
    | Sum'0.C_A a_0 -> inv'5 a_0
    | Sum'0.C_B a_0 -> inv'4 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : a) =
    [%#sinvariant4] inv'5 self
  
  predicate inv'2 (_1 : a)
  
  axiom inv_axiom'2 [@rewrite] : forall x : a [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'1 (self : b) =
    [%#sinvariant4] inv'4 self
  
  predicate inv'1 (_1 : b)
  
  axiom inv_axiom'1 [@rewrite] : forall x : b [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : Sum'0.t_Sum a b) =
    [%#sinvariant4] inv'3 self
  
  predicate inv'0 (_1 : Sum'0.t_Sum a b)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Sum'0.t_Sum a b [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_DeepModelTy'1
  
  function deep_model'4 (self : b) : t_DeepModelTy'1
  
  type t_DeepModelTy'0
  
  function deep_model'5 (self : a) : t_DeepModelTy'0
  
  use T_mixed__Sum as Sum'0
  
  function deep_model'3 [#"mixed.rs" 39 4 39 44] (self : Sum'0.t_Sum a b) : Sum'0.t_Sum t_DeepModelTy'0 t_DeepModelTy'1
   =
    [%#smixed3] match self with
      | Sum'0.C_A a -> Sum'0.C_A (deep_model'5 a)
      | Sum'0.C_B b -> Sum'0.C_B (deep_model'4 b)
      end
  
  function deep_model'0 (self : Sum'0.t_Sum a b) : Sum'0.t_Sum t_DeepModelTy'0 t_DeepModelTy'1 =
    [%#smodel2] deep_model'3 self
  
  use prelude.prelude.Intrinsic
  
  function deep_model'2 (self : a) : t_DeepModelTy'0 =
    [%#smodel2] deep_model'5 self
  
  let rec eq'1 (self:a) (other:a) (return'  (ret:bool))= {[@expl:precondition] inv'2 other}
    {[@expl:precondition] inv'2 self}
    any [ return' (result:bool)-> {[%#scmp1] result = (deep_model'2 self = deep_model'2 other)} (! return' {result}) ] 
  
  function deep_model'1 (self : b) : t_DeepModelTy'1 =
    [%#smodel2] deep_model'4 self
  
  let rec eq'0 (self:b) (other:b) (return'  (ret:bool))= {[@expl:precondition] inv'1 other}
    {[@expl:precondition] inv'1 self}
    any [ return' (result:bool)-> {[%#scmp1] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec eq (self:Sum'0.t_Sum a b) (rhs:Sum'0.t_Sum a b) (return'  (ret:bool))= {[%#smixed0] inv'0 rhs}
    {[%#smixed0] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- (self, rhs) ] s1
      | s1 = any
        [ br0 (a:a)-> {(let (r'0, _) = _4 in r'0) = Sum'0.C_A a} (! bb2)
        | br1 (a:b)-> {(let (r'0, _) = _4 in r'0) = Sum'0.C_B a} (! bb4) ]
         ]
      
    | bb4 = any
      [ br0 (a:a)-> {(let (_, r'0) = _4 in r'0) = Sum'0.C_A a} (! bb1)
      | br1 (a:b)-> {(let (_, r'0) = _4 in r'0) = Sum'0.C_B a} (! bb5) ]
      
    | bb5 = bb11
    | bb11 = s0
      [ s0 = Sum'0.v_B <a> <b> {let (r'0, _) = _4 in r'0} (fun (r0'0:b) ->  [ &v0_11 <- r0'0 ] s1)
      | s1 = Sum'0.v_B <a> <b> {let (_, r'1) = _4 in r'1} (fun (r0'1:b) ->  [ &v0_21 <- r0'1 ] s2)
      | s2 = eq'0 {v0_11} {v0_21} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb12 ]
      
    | bb12 = any [ br0 -> {_17 = false} (! bb14) | br1 -> {_17} (! bb13) ] 
    | bb13 = s0 [ s0 =  [ &_0 <- [%#smixed0] true ] s1 | s1 = bb15 ] 
    | bb14 = s0 [ s0 =  [ &_0 <- [%#smixed0] false ] s1 | s1 = bb15 ] 
    | bb15 = bb16
    | bb2 = any
      [ br0 (a:a)-> {(let (_, r'0) = _4 in r'0) = Sum'0.C_A a} (! bb3)
      | br1 (a:b)-> {(let (_, r'0) = _4 in r'0) = Sum'0.C_B a} (! bb1) ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- [%#smixed0] false ] s1 | s1 = bb16 ] 
    | bb3 = bb6
    | bb6 = s0
      [ s0 = Sum'0.v_A <a> <b> {let (r'0, _) = _4 in r'0} (fun (r0'0:a) ->  [ &v0_1 <- r0'0 ] s1)
      | s1 = Sum'0.v_A <a> <b> {let (_, r'1) = _4 in r'1} (fun (r0'1:a) ->  [ &v0_2 <- r0'1 ] s2)
      | s2 = eq'1 {v0_1} {v0_2} (fun (_ret':bool) ->  [ &_12 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = any [ br0 -> {_12 = false} (! bb9) | br1 -> {_12} (! bb8) ] 
    | bb8 = s0 [ s0 =  [ &_0 <- [%#smixed0] true ] s1 | s1 = bb10 ] 
    | bb9 = s0 [ s0 =  [ &_0 <- [%#smixed0] false ] s1 | s1 = bb10 ] 
    | bb10 = bb16
    | bb16 = return' {_0} ]
    )
    [ & _0 : bool = any_l ()
    | & self : Sum'0.t_Sum a b = self
    | & rhs : Sum'0.t_Sum a b = rhs
    | & _4 : (Sum'0.t_Sum a b, Sum'0.t_Sum a b) = any_l ()
    | & v0_1 : a = any_l ()
    | & v0_2 : a = any_l ()
    | & _12 : bool = any_l ()
    | & v0_11 : b = any_l ()
    | & v0_21 : b = any_l ()
    | & _17 : bool = any_l () ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [%#smixed0] result = (deep_model'0 self = deep_model'0 rhs)}
      (! return' {result}) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module T_mixed__Product2 [#"mixed.rs" 50 0 50 26]
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.Borrow
  
  type t_Product2 'a =
    | C_Product2 (borrowed 'a) bool (Vec'0.t_Vec uint32 (Global'0.t_Global))
  
  let rec t_Product2 < 'a > (input:t_Product2 'a) (ret  (a:borrowed 'a) (b:bool) (c:Vec'0.t_Vec uint32 (Global'0.t_Global)))= any
    [ good (a:borrowed 'a) (b:bool) (c:Vec'0.t_Vec uint32 (Global'0.t_Global))-> {C_Product2 a b c = input}
      (! ret {a} {b} {c}) ]
    
  
  function t_Product2__a (self : t_Product2 'a) : borrowed 'a =
    match self with
      | C_Product2 a _ _ -> a
      end
  
  function t_Product2__b (self : t_Product2 'a) : bool =
    match self with
      | C_Product2 _ a _ -> a
      end
  
  function t_Product2__c (self : t_Product2 'a) : Vec'0.t_Vec uint32 (Global'0.t_Global) =
    match self with
      | C_Product2 _ _ a -> a
      end
end
module M_mixed__qyi9942470069884222103__resolve_coherence [#"mixed.rs" 49 9 49 16] (* <Product2<'a, A> as creusot_contracts::Resolve> *)
  type a
  
  let%span smixed0 = "mixed.rs" 49 9 49 16
  let%span smixed1 = "mixed.rs" 51 4 53 19
  let%span svec2 = "../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  let%span sresolve3 = "../../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span svec4 = "../../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sops5 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  use T_mixed__Product2 as Product2'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  predicate resolve'6 (_1 : uint32) =
    true
  
  use seq.Seq
  
  use seq.Seq
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'0 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) : Seq.seq uint32
  
  axiom view'0_spec : forall self : Vec'0.t_Vec uint32 (Global'0.t_Global) . [%#svec4] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) (ix : int) : uint32 =
    [%#sops5] Seq.get (view'0 self) ix
  
  predicate resolve'4 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) =
    [%#svec2] forall i : int . 0 <= i /\ i < Seq.length (view'0 self)  -> resolve'6 (index_logic'0 self i)
  
  predicate resolve'1 (_1 : Vec'0.t_Vec uint32 (Global'0.t_Global)) =
    resolve'4 _1
  
  use T_mixed__Product2 as T_mixed__Product2
  
  predicate resolve'2 (_1 : bool) =
    true
  
  use T_mixed__Product2 as T_mixed__Product2
  
  predicate resolve'5 (self : borrowed a) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed a) =
    resolve'5 _1
  
  use T_mixed__Product2 as T_mixed__Product2
  
  predicate resolve'0 [#"mixed.rs" 49 9 49 16] (self : Product2'0.t_Product2 a) =
    [%#smixed1] resolve'3 (T_mixed__Product2.t_Product2__a self)
    /\ resolve'2 (T_mixed__Product2.t_Product2__b self) /\ resolve'1 (T_mixed__Product2.t_Product2__c self)
  
  predicate structural_resolve'0 (x : Product2'0.t_Product2 a) =
    match x with
      | Product2'0.C_Product2 a b c -> resolve'1 c /\ resolve'2 b /\ resolve'3 a
      end
  
  constant self  : Product2'0.t_Product2 a
  
  function resolve_coherence [#"mixed.rs" 49 9 49 16] (self : Product2'0.t_Product2 a) : ()
  
  goal vc_resolve_coherence : ([%#smixed0] structural_resolve'0 self)  -> ([%#smixed0] resolve'0 self)
end
module T_mixed__Sum2 [#"mixed.rs" 57 0 57 19]
  type t_Sum2 'a 'b =
    | C_X 'a
    | C_Y bool 'b
  
  let rec v_X < 'a > < 'b > (input:t_Sum2 'a 'b) (ret  (field_0:'a))= any
    [ good (field_0:'a)-> {C_X field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 'a [C_X field_0 : t_Sum2 'a 'b] . C_X field_0 <> input} (! {false} any) ]
    
  
  let rec v_Y < 'a > < 'b > (input:t_Sum2 'a 'b) (ret  (a:bool) (x:'b))= any
    [ good (a:bool) (x:'b)-> {C_Y a x = input} (! ret {a} {x})
    | bad -> {forall a : bool, x : 'b [C_Y a x : t_Sum2 'a 'b] . C_Y a x <> input} (! {false} any) ]
    
end
module M_mixed__qyi17966204983409797136__resolve_coherence [#"mixed.rs" 56 9 56 16] (* <Sum2<A, B> as creusot_contracts::Resolve> *)
  type a
  
  type b
  
  let%span smixed0 = "mixed.rs" 56 9 56 16
  
  use T_mixed__Sum2 as Sum2'0
  
  use prelude.prelude.Borrow
  
  predicate resolve'2 (_1 : b)
  
  predicate resolve'3 (_1 : bool) =
    true
  
  predicate resolve'1 (_1 : a)
  
  predicate resolve'0 [#"mixed.rs" 56 9 56 16] (self : Sum2'0.t_Sum2 a b) =
    [%#smixed0] match self with
      | Sum2'0.C_X v0_1 -> resolve'1 v0_1
      | Sum2'0.C_Y a_1 x_1 -> resolve'3 a_1 /\ resolve'2 x_1
      end
  
  predicate structural_resolve'0 (x : Sum2'0.t_Sum2 a b) =
    match x with
      | Sum2'0.C_X a -> resolve'1 a
      | Sum2'0.C_Y a b -> resolve'2 b /\ resolve'3 a
      end
  
  constant self  : Sum2'0.t_Sum2 a b
  
  function resolve_coherence [#"mixed.rs" 56 9 56 16] (self : Sum2'0.t_Sum2 a b) : ()
  
  goal vc_resolve_coherence : ([%#smixed0] structural_resolve'0 self)  -> ([%#smixed0] resolve'0 self)
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_mixed__List [#"mixed.rs" 62 0 62 18]
  use T_core__option__Option as Option'0
  
  type t_List 't =
    | C_List 't (Option'0.t_Option (t_List 't))
  
  let rec t_List < 't > (input:t_List 't) (ret  (elem:'t) (tail:Option'0.t_Option (t_List 't)))= any
    [ good (elem:'t) (tail:Option'0.t_Option (t_List 't))-> {C_List elem tail = input} (! ret {elem} {tail}) ]
    
end
module T_mixed__ListDeepModel [#"mixed.rs" 67 0 67 38]
  use T_core__option__Option as Option'0
  
  type t_ListDeepModel 't 'proj0 =
    | C_ListDeepModel 'proj0 (Option'0.t_Option (t_ListDeepModel 't 'proj0))
  
  let rec t_ListDeepModel < 't > < 'proj0 > (input:t_ListDeepModel 't 'proj0) (ret  (elem:'proj0) (tail:Option'0.t_Option (t_ListDeepModel 't 'proj0)))= any
    [ good (elem:'proj0) (tail:Option'0.t_Option (t_ListDeepModel 't 'proj0))-> {C_ListDeepModel elem tail = input}
      (! ret {elem} {tail}) ]
    
end
module T_mixed__Expr [#"mixed.rs" 88 0 88 16]
  type t_Expr 'v =
    | C_Var 'v
    | C_Add (t_Expr 'v) (t_Expr 'v)
  
  let rec v_Var < 'v > (input:t_Expr 'v) (ret  (field_0:'v))= any
    [ good (field_0:'v)-> {C_Var field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 'v [C_Var field_0 : t_Expr 'v] . C_Var field_0 <> input} (! {false} any) ]
    
  
  let rec v_Add < 'v > (input:t_Expr 'v) (ret  (field_0:t_Expr 'v) (field_1:t_Expr 'v))= any
    [ good (field_0:t_Expr 'v) (field_1:t_Expr 'v)-> {C_Add field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : t_Expr 'v, field_1 : t_Expr 'v [C_Add field_0 field_1 : t_Expr 'v] . C_Add field_0 field_1
      <> input}
      (! {false}
      any) ]
    
end
module T_mixed__ExprDeepModel [#"mixed.rs" 93 0 93 36]
  type t_ExprDeepModel 'v 'proj0 =
    | C_Var 'proj0
    | C_Add (t_ExprDeepModel 'v 'proj0) (t_ExprDeepModel 'v 'proj0)
  
  let rec v_Var < 'v > < 'proj0 > (input:t_ExprDeepModel 'v 'proj0) (ret  (field_0:'proj0))= any
    [ good (field_0:'proj0)-> {C_Var field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 'proj0 [C_Var field_0 : t_ExprDeepModel 'v 'proj0] . C_Var field_0 <> input}
      (! {false}
      any) ]
    
  
  let rec v_Add < 'v > < 'proj0 > (input:t_ExprDeepModel 'v 'proj0) (ret  (field_0:t_ExprDeepModel 'v 'proj0) (field_1:t_ExprDeepModel 'v 'proj0))= any
    [ good (field_0:t_ExprDeepModel 'v 'proj0) (field_1:t_ExprDeepModel 'v 'proj0)-> {C_Add field_0 field_1 = input}
      (! ret {field_0} {field_1})
    | bad -> {forall field_0 : t_ExprDeepModel 'v 'proj0, field_1 : t_ExprDeepModel 'v 'proj0 [C_Add field_0 field_1 : t_ExprDeepModel 'v 'proj0] . C_Add field_0 field_1
      <> input}
      (! {false}
      any) ]
    
end
module M_mixed__qyi9512435279263248376 [#"mixed.rs" 8 9 8 14] (* <Product<A, B> as creusot_contracts::Clone> *)
  type a
  
  type b
  
  let%span smixed0 = "mixed.rs" 8 9 8 14
  let%span sinvariant1 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'3 (_1 : b)
  
  predicate inv'2 (_1 : a)
  
  use T_mixed__Product as Product'0
  
  predicate inv'1 (_1 : Product'0.t_Product a b)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Product'0.t_Product a b [inv'1 x] . inv'1 x
  = match x with
    | Product'0.C_Product a b -> inv'2 a /\ inv'3 b
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : Product'0.t_Product a b) =
    [%#sinvariant1] inv'1 self
  
  predicate inv'0 (_1 : Product'0.t_Product a b)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Product'0.t_Product a b [inv'0 x] . inv'0 x = invariant'0 x
  
  goal clone'_refn : [%#smixed0] forall self : Product'0.t_Product a b . inv'0 self
   -> inv'0 self
  /\ (forall result : Product'0.t_Product a b . inv'1 result /\ result = self  -> inv'1 result /\ result = self)
end
module M_mixed__qyi6273949305112291917 [#"mixed.rs" 28 9 28 14] (* <Sum<A, B> as creusot_contracts::Clone> *)
  type a
  
  type b
  
  let%span smixed0 = "mixed.rs" 28 9 28 14
  let%span sinvariant1 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'3 (_1 : b)
  
  predicate inv'2 (_1 : a)
  
  use T_mixed__Sum as Sum'0
  
  predicate inv'1 (_1 : Sum'0.t_Sum a b)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Sum'0.t_Sum a b [inv'1 x] . inv'1 x
  = match x with
    | Sum'0.C_A a_0 -> inv'2 a_0
    | Sum'0.C_B a_0 -> inv'3 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : Sum'0.t_Sum a b) =
    [%#sinvariant1] inv'1 self
  
  predicate inv'0 (_1 : Sum'0.t_Sum a b)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Sum'0.t_Sum a b [inv'0 x] . inv'0 x = invariant'0 x
  
  goal clone'_refn : [%#smixed0] forall self : Sum'0.t_Sum a b . inv'0 self
   -> inv'0 self /\ (forall result : Sum'0.t_Sum a b . inv'1 result /\ result = self  -> inv'1 result /\ result = self)
end
module M_mixed__qyi2064882709679455996 [#"mixed.rs" 8 16 8 25] (* <Product<A, B> as creusot_contracts::PartialEq> *)
  type a
  
  type b
  
  let%span smixed0 = "mixed.rs" 8 16 8 25
  let%span smodel1 = "../../../../../creusot-contracts/src/model.rs" 82 8 82 28
  let%span smixed2 = "mixed.rs" 24 8 24 66
  let%span sinvariant3 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'3 (_1 : b)
  
  predicate inv'2 (_1 : a)
  
  use T_mixed__Product as Product'0
  
  predicate inv'1 (_1 : Product'0.t_Product a b)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Product'0.t_Product a b [inv'1 x] . inv'1 x
  = match x with
    | Product'0.C_Product a b -> inv'2 a /\ inv'3 b
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : Product'0.t_Product a b) =
    [%#sinvariant3] inv'1 self
  
  predicate inv'0 (_1 : Product'0.t_Product a b)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Product'0.t_Product a b [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_DeepModelTy'1
  
  function deep_model'3 (self : b) : t_DeepModelTy'1
  
  use T_mixed__Product as T_mixed__Product
  
  type t_DeepModelTy'0
  
  function deep_model'2 (self : a) : t_DeepModelTy'0
  
  use T_mixed__Product as T_mixed__Product
  
  use T_mixed__Product as Product'0
  
  function deep_model'1 [#"mixed.rs" 23 4 23 44] (self : Product'0.t_Product a b) : Product'0.t_Product t_DeepModelTy'0 t_DeepModelTy'1
    
   =
    [%#smixed2] Product'0.C_Product (deep_model'2 (T_mixed__Product.t_Product__a self)) (deep_model'3 (T_mixed__Product.t_Product__b self))
  
  function deep_model'0 (self : Product'0.t_Product a b) : Product'0.t_Product t_DeepModelTy'0 t_DeepModelTy'1 =
    [%#smodel1] deep_model'1 self
  
  goal eq_refn : [%#smixed0] forall self : Product'0.t_Product a b . forall other : Product'0.t_Product a b . inv'0 other
  /\ inv'0 self
   -> inv'0 other
  /\ inv'0 self
  /\ (forall result : bool . result = (deep_model'0 self = deep_model'0 other)
   -> result = (deep_model'0 self = deep_model'0 other))
end
module M_mixed__qyi1479716791028959114 [#"mixed.rs" 28 16 28 25] (* <Sum<A, B> as creusot_contracts::PartialEq> *)
  type a
  
  type b
  
  let%span smixed0 = "mixed.rs" 28 16 28 25
  let%span smodel1 = "../../../../../creusot-contracts/src/model.rs" 82 8 82 28
  let%span smixed2 = "mixed.rs" 40 8 43 9
  let%span sinvariant3 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'3 (_1 : b)
  
  predicate inv'2 (_1 : a)
  
  use T_mixed__Sum as Sum'0
  
  predicate inv'1 (_1 : Sum'0.t_Sum a b)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Sum'0.t_Sum a b [inv'1 x] . inv'1 x
  = match x with
    | Sum'0.C_A a_0 -> inv'2 a_0
    | Sum'0.C_B a_0 -> inv'3 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : Sum'0.t_Sum a b) =
    [%#sinvariant3] inv'1 self
  
  predicate inv'0 (_1 : Sum'0.t_Sum a b)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Sum'0.t_Sum a b [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_DeepModelTy'1
  
  function deep_model'3 (self : b) : t_DeepModelTy'1
  
  type t_DeepModelTy'0
  
  function deep_model'2 (self : a) : t_DeepModelTy'0
  
  use T_mixed__Sum as Sum'0
  
  function deep_model'1 [#"mixed.rs" 39 4 39 44] (self : Sum'0.t_Sum a b) : Sum'0.t_Sum t_DeepModelTy'0 t_DeepModelTy'1
   =
    [%#smixed2] match self with
      | Sum'0.C_A a -> Sum'0.C_A (deep_model'2 a)
      | Sum'0.C_B b -> Sum'0.C_B (deep_model'3 b)
      end
  
  function deep_model'0 (self : Sum'0.t_Sum a b) : Sum'0.t_Sum t_DeepModelTy'0 t_DeepModelTy'1 =
    [%#smodel1] deep_model'1 self
  
  goal eq_refn : [%#smixed0] forall self : Sum'0.t_Sum a b . forall other : Sum'0.t_Sum a b . inv'0 other /\ inv'0 self
   -> inv'0 other
  /\ inv'0 self
  /\ (forall result : bool . result = (deep_model'0 self = deep_model'0 other)
   -> result = (deep_model'0 self = deep_model'0 other))
end
module M_mixed__qyi7556986697965110936 [#"mixed.rs" 14 0 17 17] (* <Product<A, B> as creusot_contracts::DeepModel> *)
  type a
  
  type b
end
module M_mixed__qyi13478344269411957088 [#"mixed.rs" 34 0 34 56] (* <Sum<A, B> as creusot_contracts::DeepModel> *)
  type a
  
  type b
end
module M_mixed__qyi10861035852621103077 [#"mixed.rs" 72 0 72 40] (* <List<T> as creusot_contracts::DeepModel> *)
  type t
end
module M_mixed__qyi5751566655236092303 [#"mixed.rs" 98 0 98 40] (* <Expr<V> as creusot_contracts::DeepModel> *)
  type v
end
module M_mixed__qyi9942470069884222103 [#"mixed.rs" 49 9 49 16] (* <Product2<'a, A> as creusot_contracts::Resolve> *)
  type a
  
  let%span smixed0 = "mixed.rs" 49 9 49 16
  let%span smixed1 = "mixed.rs" 51 4 53 19
  let%span svec2 = "../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  let%span sresolve3 = "../../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant4 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span svec5 = "../../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sops6 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span sinvariant7 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  predicate inv'3 (_1 : a)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed a) =
    [%#sinvariant7] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'2 (_1 : borrowed a)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed a [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_mixed__Product2 as Product2'0
  
  predicate inv'1 (_1 : Product2'0.t_Product2 a)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Product2'0.t_Product2 a [inv'1 x] . inv'1 x
  = match x with
    | Product2'0.C_Product2 a b c -> inv'2 a
    end
  
  predicate invariant'0 (self : Product2'0.t_Product2 a) =
    [%#sinvariant4] inv'1 self
  
  predicate inv'0 (_1 : Product2'0.t_Product2 a)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Product2'0.t_Product2 a [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  predicate resolve'6 (_1 : uint32) =
    true
  
  use seq.Seq
  
  use seq.Seq
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'0 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) : Seq.seq uint32
  
  axiom view'0_spec : forall self : Vec'0.t_Vec uint32 (Global'0.t_Global) . [%#svec5] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) (ix : int) : uint32 =
    [%#sops6] Seq.get (view'0 self) ix
  
  predicate resolve'4 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) =
    [%#svec2] forall i : int . 0 <= i /\ i < Seq.length (view'0 self)  -> resolve'6 (index_logic'0 self i)
  
  predicate resolve'1 (_1 : Vec'0.t_Vec uint32 (Global'0.t_Global)) =
    resolve'4 _1
  
  use T_mixed__Product2 as T_mixed__Product2
  
  predicate resolve'2 (_1 : bool) =
    true
  
  use T_mixed__Product2 as T_mixed__Product2
  
  predicate resolve'5 (self : borrowed a) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed a) =
    resolve'5 _1
  
  use T_mixed__Product2 as T_mixed__Product2
  
  predicate resolve'0 [#"mixed.rs" 49 9 49 16] (self : Product2'0.t_Product2 a) =
    [%#smixed1] resolve'3 (T_mixed__Product2.t_Product2__a self)
    /\ resolve'2 (T_mixed__Product2.t_Product2__b self) /\ resolve'1 (T_mixed__Product2.t_Product2__c self)
  
  predicate structural_resolve'0 (x : Product2'0.t_Product2 a) =
    match x with
      | Product2'0.C_Product2 a b c -> resolve'1 c /\ resolve'2 b /\ resolve'3 a
      end
  
  goal resolve_coherence_refn : [%#smixed0] forall self : Product2'0.t_Product2 a . structural_resolve'0 self
  /\ inv'0 self  -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
module M_mixed__qyi17966204983409797136 [#"mixed.rs" 56 9 56 16] (* <Sum2<A, B> as creusot_contracts::Resolve> *)
  type a
  
  type b
  
  let%span smixed0 = "mixed.rs" 56 9 56 16
  let%span sinvariant1 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'3 (_1 : b)
  
  predicate inv'2 (_1 : a)
  
  use T_mixed__Sum2 as Sum2'0
  
  predicate inv'1 (_1 : Sum2'0.t_Sum2 a b)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Sum2'0.t_Sum2 a b [inv'1 x] . inv'1 x
  = match x with
    | Sum2'0.C_X a_0 -> inv'2 a_0
    | Sum2'0.C_Y a x -> inv'3 x
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : Sum2'0.t_Sum2 a b) =
    [%#sinvariant1] inv'1 self
  
  predicate inv'0 (_1 : Sum2'0.t_Sum2 a b)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Sum2'0.t_Sum2 a b [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'2 (_1 : b)
  
  predicate resolve'3 (_1 : bool) =
    true
  
  predicate resolve'1 (_1 : a)
  
  predicate resolve'0 [#"mixed.rs" 56 9 56 16] (self : Sum2'0.t_Sum2 a b) =
    [%#smixed0] match self with
      | Sum2'0.C_X v0_1 -> resolve'1 v0_1
      | Sum2'0.C_Y a_1 x_1 -> resolve'3 a_1 /\ resolve'2 x_1
      end
  
  predicate structural_resolve'0 (x : Sum2'0.t_Sum2 a b) =
    match x with
      | Sum2'0.C_X a -> resolve'1 a
      | Sum2'0.C_Y a b -> resolve'2 b /\ resolve'3 a
      end
  
  goal resolve_coherence_refn : [%#smixed0] forall self : Sum2'0.t_Sum2 a b . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
