
module C05Pearlite_HasLen3_Impl
  let%span s05_pearlite0 = "../05_pearlite.rs" 8 11 8 24
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "" 0 0 0 0
  
  let%span span3 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span4 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span5 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span6 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span7 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq uint32) =
    [%#span1] true
  
  predicate inv'1 (_x : Seq.seq uint32)
  
  axiom inv'1 : forall x : Seq.seq uint32 . inv'1 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'0 (self : slice uint32) =
    [%#span1] true
  
  predicate inv'0 (_x : slice uint32)
  
  axiom inv'0 : forall x : slice uint32 . inv'0 x = true
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant max'0 : usize = [%#span2] (18446744073709551615 : usize)
  
  function shallow_model'1 (self : slice uint32) : Seq.seq uint32
  
  axiom shallow_model'1_spec : forall self : slice uint32 . ([%#span3] inv'0 self)
   -> ([%#span6] inv'1 (shallow_model'1 self))
  && ([%#span5] shallow_model'1 self = Slice.id self)
  && ([%#span4] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  function shallow_model'0 (self : slice uint32) : Seq.seq uint32 =
    [%#span7] shallow_model'1 self
  
  constant v  : slice uint32
  
  predicate has_len_3 [#"../05_pearlite.rs" 9 0 9 35] (v : slice uint32)
  
  goal vc_has_len_3 : true
end
module C05Pearlite_A_Type
  type t_a  =
    | C_A bool
  
  function any_l (_ : 'b) : 'a
  
  let rec t_a (input:t_a) (ret  (a:bool))= any
    [ good (a:bool)-> {C_A a = input} (! ret {a}) | bad (a:bool)-> {C_A a <> input} {false} any ]
    
  
  function a_a (self : t_a) : bool =
    match self with
      | C_A a -> a
      end
end
module C05Pearlite_StructInPearlite
  let%span s05_pearlite0 = "../05_pearlite.rs" 23 10 23 30
  
  use C05Pearlite_A_Type as A'0
  
  use prelude.prelude.Intrinsic
  
  let rec struct_in_pearlite (x:A'0.t_a) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:postcondition] [%#s05_pearlite0] x = A'0.C_A false} (! return' {result}) ]
    
end
module C05Pearlite_B_Type
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_b  =
    | C_B bool uint32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_b (input:t_b) (ret  (field1:bool) (field2:uint32))= any
    [ good (field1:bool) (field2:uint32)-> {C_B field1 field2 = input} (! ret {field1} {field2})
    | bad (field1:bool) (field2:uint32)-> {C_B field1 field2 <> input} {false} any ]
    
end
module C05Pearlite_StructOrder
  let%span s05_pearlite0 = "../05_pearlite.rs" 31 10 31 48
  
  use C05Pearlite_B_Type as B'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  let rec struct_order (x:B'0.t_b) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:postcondition] [%#s05_pearlite0] x = B'0.C_B false (0 : uint32)}
      (! return' {result}) ]
    
end
module C05Pearlite_GhostClosure
  let%span s05_pearlite0 = "../05_pearlite.rs" 49 13 49 38
  
  use prelude.prelude.UInt32
  
  use map.Map
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Mapping
  
  use prelude.prelude.Int
  
  let rec ghost_closure (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_x <- [%#s05_pearlite0] Snapshot.new (Mapping.from_fn (fun (a : uint32) -> a)) ] s1 | s1 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _x : Snapshot.snap_ty (Map.map uint32 uint32) = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module C05Pearlite_PearliteClosure
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use map.Map
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  let rec pearlite_closure (_x:Snapshot.snap_ty (Map.map uint32 bool)) (return'  (ret:()))= (! bb0
    [ bb0 = return' {_0} ]
    ) [ & _0 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
module C05Pearlite_Caller
  let%span s05_pearlite0 = "../05_pearlite.rs" 55 21 55 44
  
  use prelude.prelude.UInt32
  
  use map.Map
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  let rec pearlite_closure'0 (_x:Snapshot.snap_ty (Map.map uint32 bool)) (return'  (ret:()))= any
    [ return' (result:())-> (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Mapping
  
  let rec caller (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- [%#s05_pearlite0] Snapshot.new (Mapping.from_fn (fun (_a : uint32) -> true)) ] s1 | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = pearlite_closure'0 {_2} (fun (_ret':()) ->  [ &_1 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : () = any_l () | & _2 : Snapshot.snap_ty (Map.map uint32 bool) = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module C05Pearlite_S_Type
  type t_s  =
    | C_S
  
  function any_l (_ : 'b) : 'a
  
  let rec t_s (input:t_s) (ret  )= any [ good -> {C_S  = input} (! ret) | bad -> {C_S  <> input} {false} any ] 
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
