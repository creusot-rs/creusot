
module M_05_pearlite__has_len_3__Impl
  let%span s05_pearlite0 = "../05_pearlite.rs" 10 11 10 24
  
  let%span span1 = "" 0 0 0 0
  
  let%span span2 = "../../../../../creusot-contracts/src/std/slice.rs" 27 14 27 41
  
  let%span span3 = "../../../../../creusot-contracts/src/std/slice.rs" 28 14 28 42
  
  let%span span4 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span1] (18446744073709551615 : usize)
  
  function shallow_model'1 (self : slice uint32) : Seq.seq uint32
  
  axiom shallow_model'1_spec : forall self : slice uint32 . ([%#span3] shallow_model'1 self = Slice.id self)
  && ([%#span2] Seq.length (shallow_model'1 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  function shallow_model'0 (self : slice uint32) : Seq.seq uint32 =
    [%#span4] shallow_model'1 self
  
  constant v  : slice uint32
  
  predicate has_len_3 [#"../05_pearlite.rs" 11 0 11 35] (v : slice uint32)
  
  goal vc_has_len_3 : true
end
module T_05_pearlite__A
  type t_A  =
    | C_A bool
  
  function any_l (_ : 'b) : 'a
  
  let rec t_A (input:t_A) (ret  (a:bool))= any
    [ good (a:bool)-> {C_A a = input} (! ret {a}) | bad (a:bool)-> {C_A a <> input} {false} any ]
    
  
  function t_A__a (self : t_A) : bool =
    match self with
      | C_A a -> a
      end
end
module M_05_pearlite__struct_in_pearlite
  let%span s05_pearlite0 = "../05_pearlite.rs" 25 10 25 30
  
  use T_05_pearlite__A as A'0
  
  use prelude.prelude.Intrinsic
  
  let rec struct_in_pearlite (x:A'0.t_A) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:postcondition] [%#s05_pearlite0] x = A'0.C_A false} (! return' {result}) ]
    
end
module T_05_pearlite__B
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_B  =
    | C_B bool uint32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_B (input:t_B) (ret  (field1:bool) (field2:uint32))= any
    [ good (field1:bool) (field2:uint32)-> {C_B field1 field2 = input} (! ret {field1} {field2})
    | bad (field1:bool) (field2:uint32)-> {C_B field1 field2 <> input} {false} any ]
    
end
module M_05_pearlite__struct_order
  let%span s05_pearlite0 = "../05_pearlite.rs" 33 10 33 48
  
  use T_05_pearlite__B as B'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  let rec struct_order (x:B'0.t_B) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:postcondition] [%#s05_pearlite0] x = B'0.C_B false (0 : uint32)}
      (! return' {result}) ]
    
end
module M_05_pearlite__ghost_closure
  let%span s05_pearlite0 = "../05_pearlite.rs" 51 13 51 38
  
  use prelude.prelude.UInt32
  
  use map.Map
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Mapping
  
  use prelude.prelude.Int
  
  let rec ghost_closure (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_x <- [%#s05_pearlite0] Snapshot.new (Mapping.from_fn (fun (a : uint32) -> a)) ] s1 | s1 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _x : Snapshot.snap_ty (Map.map uint32 uint32) = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_05_pearlite__pearlite_closure
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use map.Map
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  let rec pearlite_closure (_x:Snapshot.snap_ty (Map.map uint32 bool)) (return'  (ret:()))= (! bb0
    [ bb0 = return' {_0} ]
    ) [ & _0 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
module M_05_pearlite__caller
  let%span s05_pearlite0 = "../05_pearlite.rs" 57 21 57 44
  
  use prelude.prelude.UInt32
  
  use map.Map
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  let rec pearlite_closure'0 (_x:Snapshot.snap_ty (Map.map uint32 bool)) (return'  (ret:()))= any
    [ return' (result:())-> (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Mapping
  
  let rec caller (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- [%#s05_pearlite0] Snapshot.new (Mapping.from_fn (fun (_a : uint32) -> true)) ] s1 | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = pearlite_closure'0 {_2} (fun (_ret':()) ->  [ &_1 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : () = any_l () | & _2 : Snapshot.snap_ty (Map.map uint32 bool) = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module T_05_pearlite__S
  type t_S  =
    | C_S
  
  function any_l (_ : 'b) : 'a
  
  let rec t_S (input:t_S) (ret  )= any [ good -> {C_S  = input} (! ret) | bad -> {C_S  <> input} {false} any ] 
end
