
module C05Pearlite_HasLen3_Impl
  use prelude.UInt32
  use seq.Seq
  predicate invariant'1 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq uint32)
  let rec inv'1 (_x:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq uint32 . inv'1 x = true
  use prelude.Slice
  predicate invariant'0 (self : slice uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : slice uint32)
  let rec inv'0 (_x:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : slice uint32 . inv'0 x = true
  use prelude.Int
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use prelude.UIntSize
  use prelude.UIntSize
  constant max'0 : usize = (18446744073709551615 : usize)
  function shallow_model'1 (self : slice uint32) : Seq.seq uint32
  let rec shallow_model'1 (self:slice uint32) (return'  (ret:Seq.seq uint32))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'0 self}
    any [ return' (result:Seq.seq uint32)-> {result = shallow_model'1 self} (! return' {result}) ] 
  axiom shallow_model'1_spec : forall self : slice uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'1 (shallow_model'1 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'1 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (max'0 : usize))
  function shallow_model'0 (self : slice uint32) : Seq.seq uint32 =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'1 self
  let rec shallow_model'0 (self:slice uint32) (return'  (ret:Seq.seq uint32))= any
    [ return' (result:Seq.seq uint32)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  constant v  : slice uint32
  predicate has_len_3 [#"../05_pearlite.rs" 9 0 9 35] (v : slice uint32)
  goal vc_has_len_3 : true
end
module C05Pearlite_A_Type
  type t_a  =
    | C_A bool
    
  function any_l (_ : 'b) : 'a
  let rec t_a (input:t_a) (ret  (a:bool))= any
    [ good (a:bool)-> {C_A a = input} (! ret {a}) | bad (a:bool)-> {C_A a <> input} {false} any ]
    
  function a_a (self : t_a) : bool =
    match self with
      | C_A a -> a
      end
end
module C05Pearlite_StructInPearlite
  use C05Pearlite_A_Type as C05Pearlite_A_Type
  use prelude.Intrinsic
  let rec struct_in_pearlite (x:C05Pearlite_A_Type.t_a) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../05_pearlite.rs" 24 32 24 34] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ] 
    [ return' (result:())-> {[@expl:postcondition] [#"../05_pearlite.rs" 23 10 23 30] x = C05Pearlite_A_Type.C_A false}
      (! return' {result}) ]
    
end
module C05Pearlite_B_Type
  use prelude.UInt32
  use prelude.Int
  type t_b  =
    | C_B bool uint32
    
  function any_l (_ : 'b) : 'a
  let rec t_b (input:t_b) (ret  (field1:bool) (field2:uint32))= any
    [ good (field1:bool) (field2:uint32)-> {C_B field1 field2 = input} (! ret {field1} {field2})
    | bad (field1:bool) (field2:uint32)-> {C_B field1 field2 <> input} {false} any ]
    
end
module C05Pearlite_StructOrder
  use C05Pearlite_B_Type as C05Pearlite_B_Type
  use prelude.UInt32
  use prelude.Int
  use prelude.Intrinsic
  let rec struct_order (x:C05Pearlite_B_Type.t_b) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../05_pearlite.rs" 32 26 32 28] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ] 
    [ return' (result:())-> {[@expl:postcondition] [#"../05_pearlite.rs" 31 10 31 48] x
      = C05Pearlite_B_Type.C_B false (0 : uint32)}
      (! return' {result}) ]
    
end
module C05Pearlite_GhostClosure
  use prelude.Intrinsic
  use prelude.UInt32
  use map.Map
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Mapping
  use prelude.Int
  let rec ghost_closure (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_x <- ([#"../05_pearlite.rs" 49 13 49 38] Snapshot.new (Mapping.from_fn (fun (a : uint32) -> a))) : Snapshot.snap_ty (Map.map uint32 uint32) ]
        
        s1
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- [#"../05_pearlite.rs" 48 23 50 1] () ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & _x : Snapshot.snap_ty (Map.map uint32 uint32) = any_l () : Snapshot.snap_ty (Map.map uint32 uint32) ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C05Pearlite_PearliteClosure
  use prelude.UInt32
  use prelude.Int
  use map.Map
  use prelude.Snapshot
  use prelude.Intrinsic
  let rec pearlite_closure (_x:Snapshot.snap_ty (Map.map uint32 bool)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../05_pearlite.rs" 52 58 52 60] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ]  [ return' (result:())-> (! return' {result}) ] 
end
module C05Pearlite_Caller
  use prelude.Intrinsic
  use prelude.UInt32
  use prelude.Int
  use map.Map
  use prelude.Snapshot
  let rec pearlite_closure'0 (_x:Snapshot.snap_ty (Map.map uint32 bool)) (return'  (ret:()))= any
    [ return' (result:())-> (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Mapping
  let rec caller (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_2 <- ([#"../05_pearlite.rs" 55 21 55 44] Snapshot.new (Mapping.from_fn (fun (_a : uint32) -> true))) : Snapshot.snap_ty (Map.map uint32 bool) ]
        
        s1
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = pearlite_closure'0 {_2} (fun (_ret':()) ->  [ &_1 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- [#"../05_pearlite.rs" 54 16 56 1] () ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & _1 : () = any_l () : ()
    | & _2 : Snapshot.snap_ty (Map.map uint32 bool) = any_l () : Snapshot.snap_ty (Map.map uint32 bool) ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C05Pearlite_S_Type
  type t_s  =
    | C_S
    
  function any_l (_ : 'b) : 'a
  let rec t_s (input:t_s) (ret  )= any [ good -> {C_S  = input} (! ret) | bad -> {C_S  <> input} {false} any ] 
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
