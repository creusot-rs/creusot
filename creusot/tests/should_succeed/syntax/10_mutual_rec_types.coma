module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_10_mutual_rec_types__Node [#"10_mutual_rec_types.rs" 8 0 8 11]
  use T_core__option__Option as Option'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_Node  =
    | C_Node (t_Tree) uint32 (t_Tree)
  with t_Tree  =
    | C_Tree (Option'0.t_Option (t_Node))
  
  let rec t_Node (input:t_Node) (ret  (left:t_Tree) (val':uint32) (right:t_Tree))= any
    [ good (left:t_Tree) (val':uint32) (right:t_Tree)-> {C_Node left val' right = input} (! ret {left} {val'} {right}) ]
    
  
  let rec t_Tree (input:t_Tree) (ret  (field_0:Option'0.t_Option (t_Node)))= any
    [ good (field_0:Option'0.t_Option (t_Node))-> {C_Tree field_0 = input} (! ret {field_0}) ]
    
end
module T_10_mutual_rec_types__Tree [#"10_mutual_rec_types.rs" 5 0 5 15]
  use export T_10_mutual_rec_types__Node
end
module M_10_mutual_rec_types__use_tree [#"10_mutual_rec_types.rs" 15 0 15 25]
  use T_10_mutual_rec_types__Tree as Tree'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec use_tree (_1:Tree'0.t_Tree) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_10_mutual_rec_types__qyi18211245992252154719__height [#"10_mutual_rec_types.rs" 18 4 18 31] (* Tree *)
  let%span s10_mutual_rec_types0 = "10_mutual_rec_types.rs" 21 69 21 70
  let%span s10_mutual_rec_types1 = "10_mutual_rec_types.rs" 20 26 20 27
  let%span scmp2 = "../../../../creusot-contracts/src/std/cmp.rs" 53 26 53 66
  let%span scmp3 = "../../../../creusot-contracts/src/std/cmp.rs" 54 26 54 63
  let%span scmp4 = "../../../../creusot-contracts/src/std/cmp.rs" 7 0 62 1
  let%span scmp5 = "../../../../creusot-contracts/src/std/cmp.rs" 56 16 56 79
  let%span scmp6 = "../../../../creusot-contracts/src/std/cmp.rs" 57 16 57 81
  let%span snum7 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  predicate inv'0 (_1 : uint64)
  
  axiom inv_axiom'0 [@rewrite] : forall x : uint64 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt64
  
  function deep_model'0 (self : uint64) : int =
    [%#snum7] UInt64.to_int self
  
  let rec max'0 (self:uint64) (other:uint64) (return'  (ret:uint64))= {[@expl:precondition] inv'0 other}
    {[@expl:precondition] inv'0 self}
    any
    [ return' (result:uint64)-> {inv'0 result}
      {[%#scmp6] deep_model'0 other < deep_model'0 self  -> result = self}
      {[%#scmp5] deep_model'0 self <= deep_model'0 other  -> result = other}
      {[%#scmp4] result = self \/ result = other}
      {[%#scmp3] deep_model'0 result >= deep_model'0 other}
      {[%#scmp2] deep_model'0 result >= deep_model'0 self}
      (! return' {result}) ]
    
  
  use prelude.prelude.UInt32
  
  use T_10_mutual_rec_types__Tree as Tree'0
  
  use T_10_mutual_rec_types__Node as Node'0
  
  use T_core__option__Option as Option'0
  
  meta "compute_max_steps" 1000000
  
  let rec height (self:Tree'0.t_Tree) (return'  (ret:uint64))= (! bb0
    [ bb0 = Tree'0.t_Tree {self}
        (fun (r0'0:Option'0.t_Option (Node'0.t_Node)) ->
          any
          [ br0 -> {r0'0 = Option'0.C_None } (! bb2) | br1 (a:Node'0.t_Node)-> {r0'0 = Option'0.C_Some a} (! bb3) ]
          )
    | bb3 = s0
      [ s0 = Tree'0.t_Tree {self}
          (fun (r0'0:Option'0.t_Option (Node'0.t_Node)) ->
            Option'0.v_Some <Node'0.t_Node> {r0'0} (fun (r0'1:Node'0.t_Node) ->  [ &n <- r0'1 ] s1))
      | s1 = Node'0.t_Node {n}
          (fun (rleft'0:Tree'0.t_Tree) (rval'0:uint32) (rright'0:Tree'0.t_Tree) ->
            height {rleft'0} (fun (_ret':uint64) ->  [ &_5 <- _ret' ] s2))
      | s2 = bb5 ]
      
    | bb5 = s0
      [ s0 = Node'0.t_Node {n}
          (fun (rleft'0:Tree'0.t_Tree) (rval'0:uint32) (rright'0:Tree'0.t_Tree) ->
            height {rright'0} (fun (_ret':uint64) ->  [ &_7 <- _ret' ] s1))
      | s1 = bb6 ]
      
    | bb6 = s0 [ s0 = max'0 {_5} {_7} (fun (_ret':uint64) ->  [ &_4 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = UInt64.add {_4} {[%#s10_mutual_rec_types0] (1 : uint64)} (fun (_ret':uint64) ->  [ &_0 <- _ret' ] s1)
      | s1 = bb8 ]
      
    | bb2 = bb4
    | bb4 = s0 [ s0 =  [ &_0 <- [%#s10_mutual_rec_types1] (0 : uint64) ] s1 | s1 = bb8 ] 
    | bb8 = return' {_0} ]
    )
    [ & _0 : uint64 = any_l ()
    | & self : Tree'0.t_Tree = self
    | & n : Node'0.t_Node = any_l ()
    | & _4 : uint64 = any_l ()
    | & _5 : uint64 = any_l ()
    | & _7 : uint64 = any_l () ]
     [ return' (result:uint64)-> (! return' {result}) ] 
end
