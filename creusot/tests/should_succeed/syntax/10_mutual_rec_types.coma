
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C10MutualRecTypes_Node_Type
  use Core_Option_Option_Type as Option'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_node  =
    | C_Node (t_tree) uint32 (t_tree)
  with t_tree  =
    | C_Tree (Option'0.t_option (t_node))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_node (input:t_node) (ret  (left:t_tree) (val':uint32) (right:t_tree))= any
    [ good (left:t_tree) (val':uint32) (right:t_tree)-> {C_Node left val' right = input} (! ret {left} {val'} {right})
    | bad (left:t_tree) (val':uint32) (right:t_tree)-> {C_Node left val' right <> input} {false} any ]
    
  
  let rec t_tree (input:t_tree) (ret  (field_0:Option'0.t_option (t_node)))= any
    [ good (field_0:Option'0.t_option (t_node))-> {C_Tree field_0 = input} (! ret {field_0})
    | bad (field_0:Option'0.t_option (t_node))-> {C_Tree field_0 <> input} {false} any ]
    
end
module C10MutualRecTypes_Tree_Type
  use export C10MutualRecTypes_Node_Type
end
module C10MutualRecTypes_UseTree
  use C10MutualRecTypes_Tree_Type as Tree'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  let rec use_tree (_1:Tree'0.t_tree) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module C10MutualRecTypes_Impl0_Height
  let%span s10_mutual_rec_types0 = "../10_mutual_rec_types.rs" 17 14 17 18
  
  let%span s10_mutual_rec_types1 = "../10_mutual_rec_types.rs" 19 69 19 70
  
  let%span s10_mutual_rec_types2 = "../10_mutual_rec_types.rs" 18 26 18 27
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/std/cmp.rs" 53 26 53 66
  
  let%span span8 = "../../../../../creusot-contracts/src/std/cmp.rs" 54 26 54 63
  
  let%span span9 = "../../../../../creusot-contracts/src/std/cmp.rs" 7 0 62 1
  
  let%span span10 = "../../../../../creusot-contracts/src/std/cmp.rs" 56 16 56 79
  
  let%span span11 = "../../../../../creusot-contracts/src/std/cmp.rs" 57 16 57 81
  
  let%span span12 = "" 0 0 0 0
  
  use prelude.prelude.UInt64
  
  predicate invariant'0 (self : uint64) =
    [%#span3] true
  
  predicate inv'0 (_x : uint64)
  
  axiom inv'0 : forall x : uint64 . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use int.Int
  
  use int.Int
  
  use int.Int
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  function deep_model'0 (self : uint64) : int =
    [%#span4] UInt64.to_int self
  
  let rec max'0 (self:uint64) (other:uint64) (return'  (ret:uint64))= {[@expl:precondition] [%#span6] inv'0 other}
    {[@expl:precondition] [%#span5] inv'0 self}
    any
    [ return' (result:uint64)-> {[%#span12] inv'0 result}
      {[%#span11] deep_model'0 other < deep_model'0 self  -> result = self}
      {[%#span10] deep_model'0 self <= deep_model'0 other  -> result = other}
      {[%#span9] result = self \/ result = other}
      {[%#span8] deep_model'0 result >= deep_model'0 other}
      {[%#span7] deep_model'0 result >= deep_model'0 self}
      (! return' {result}) ]
    
  
  use prelude.prelude.UInt32
  
  use C10MutualRecTypes_Node_Type as Node'0
  
  use Core_Option_Option_Type as Option'0
  
  use C10MutualRecTypes_Tree_Type as Tree'0
  
  let rec height (self:Tree'0.t_tree) (return'  (ret:uint64))= (! bb0
    [ bb0 = Tree'0.t_tree {self}
        (fun (r0'0:Option'0.t_option (Node'0.t_node)) ->
          any
          [ br0 -> {r0'0 = Option'0.C_None } (! bb2) | br1 (a:Node'0.t_node)-> {r0'0 = Option'0.C_Some a} (! bb3) ]
          )
    | bb1 = {[%#s10_mutual_rec_types0] false} any
    | bb3 = s0
      [ s0 = Tree'0.t_tree {self}
          (fun (r0'0:Option'0.t_option (Node'0.t_node)) ->
            Option'0.some <Node'0.t_node> {r0'0} (fun (r0'1:Node'0.t_node) ->  [ &n <- r0'1 ] s1))
      | s1 = Node'0.t_node {n}
          (fun (rleft'0:Tree'0.t_tree) (rval'0:uint32) (rright'0:Tree'0.t_tree) ->
            height {rleft'0} (fun (_ret':uint64) ->  [ &_5 <- _ret' ] s2))
      | s2 = bb5 ]
      
    | bb5 = s0
      [ s0 = Node'0.t_node {n}
          (fun (rleft'0:Tree'0.t_tree) (rval'0:uint32) (rright'0:Tree'0.t_tree) ->
            height {rright'0} (fun (_ret':uint64) ->  [ &_7 <- _ret' ] s1))
      | s1 = bb6 ]
      
    | bb6 = s0 [ s0 = max'0 {_5} {_7} (fun (_ret':uint64) ->  [ &_4 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = UInt64.add {_4} {[%#s10_mutual_rec_types1] (1 : uint64)}
          (fun (_ret':uint64) ->  [ &_0 <- _ret' ] (any [ any_ (_any:uint64)-> (!  [ &_4 <- _any ] s1) ] ))
      | s1 = bb8 ]
      
    | bb2 = bb4
    | bb4 = s0 [ s0 =  [ &_0 <- [%#s10_mutual_rec_types2] (0 : uint64) ] s1 | s1 = bb8 ] 
    | bb8 = return' {_0} ]
    )
    [ & _0 : uint64 = any_l ()
    | & self : Tree'0.t_tree = self
    | & n : Node'0.t_node = any_l ()
    | & _4 : uint64 = any_l ()
    | & _5 : uint64 = any_l ()
    | & _7 : uint64 = any_l () ]
     [ return' (result:uint64)-> (! return' {result}) ] 
end
