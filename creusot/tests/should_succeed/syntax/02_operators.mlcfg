
module C02Operators_Division_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  val division [@cfg:stackify] [#"../02_operators.rs" 8 0 8 40] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 7 11 7 17] UInt64.to_int y > 0}
    
end
module C02Operators_Division
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  let rec cfg division [@cfg:stackify] [#"../02_operators.rs" 8 0 8 40] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 7 11 7 17] UInt64.to_int y > 0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _4 : usize;
  var _5 : usize;
  var _6 : bool;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _4 <- x_1;
    _5 <- y_2;
    _6 <- ([#"../02_operators.rs" 9 4 9 9] _5 = ([#"../02_operators.rs" 9 4 9 9] (0 : usize)));
    assert { [#"../02_operators.rs" 9 4 9 9] not _6 };
    goto BB1
  }
  BB1 {
    _0 <- ([#"../02_operators.rs" 9 4 9 9] _4 / _5);
    return _0
  }
  
end
module C02Operators_DivisionInt_Stub
  use mach.int.Int
  function division_int [#"../02_operators.rs" 18 0 18 38] (x : int) (y : int) : int
end
module C02Operators_DivisionInt_Interface
  use mach.int.Int
  function division_int [#"../02_operators.rs" 18 0 18 38] (x : int) (y : int) : int
end
module C02Operators_DivisionInt
  use mach.int.Int
  function division_int [#"../02_operators.rs" 18 0 18 38] (x : int) (y : int) : int =
    [#"../02_operators.rs" 19 4 19 9] div x y
  val division_int [#"../02_operators.rs" 18 0 18 38] (x : int) (y : int) : int
    ensures { result = division_int x y }
    
end
module C02Operators_Modulus_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  val modulus [@cfg:stackify] [#"../02_operators.rs" 23 0 23 39] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 22 11 22 17] UInt64.to_int y > 0}
    
end
module C02Operators_Modulus
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  let rec cfg modulus [@cfg:stackify] [#"../02_operators.rs" 23 0 23 39] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 22 11 22 17] UInt64.to_int y > 0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _4 : usize;
  var _5 : usize;
  var _6 : bool;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _4 <- x_1;
    _5 <- y_2;
    _6 <- ([#"../02_operators.rs" 24 4 24 9] _5 = ([#"../02_operators.rs" 24 4 24 9] (0 : usize)));
    assert { [#"../02_operators.rs" 24 4 24 9] not _6 };
    goto BB1
  }
  BB1 {
    _0 <- ([#"../02_operators.rs" 24 4 24 9] _4 % _5);
    return _0
  }
  
end
module C02Operators_ModulusInt_Stub
  use mach.int.Int
  function modulus_int [#"../02_operators.rs" 33 0 33 37] (x : int) (y : int) : int
end
module C02Operators_ModulusInt_Interface
  use mach.int.Int
  function modulus_int [#"../02_operators.rs" 33 0 33 37] (x : int) (y : int) : int
end
module C02Operators_ModulusInt
  use mach.int.Int
  function modulus_int [#"../02_operators.rs" 33 0 33 37] (x : int) (y : int) : int =
    [#"../02_operators.rs" 34 4 34 9] mod x y
  val modulus_int [#"../02_operators.rs" 33 0 33 37] (x : int) (y : int) : int
    ensures { result = modulus_int x y }
    
end
module Core_Num_Impl12_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module C02Operators_Multiply_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  val multiply [@cfg:stackify] [#"../02_operators.rs" 38 0 38 40] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 37 11 37 33] UInt64.to_int x * UInt64.to_int y <= UInt64.to_int Max0.mAX'}
    
end
module C02Operators_Multiply
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  clone Core_Num_Impl12_Max as Max0
  let rec cfg multiply [@cfg:stackify] [#"../02_operators.rs" 38 0 38 40] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 37 11 37 33] UInt64.to_int x * UInt64.to_int y <= UInt64.to_int Max0.mAX'}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _4 : usize;
  var _5 : usize;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _4 <- x_1;
    _5 <- y_2;
    _0 <- ([#"../02_operators.rs" 39 4 39 9] _4 * _5);
    return _0
  }
  
end
module C02Operators_MultiplyInt_Stub
  use mach.int.Int
  function multiply_int [#"../02_operators.rs" 43 0 43 38] (x : int) (y : int) : int
end
module C02Operators_MultiplyInt_Interface
  use mach.int.Int
  function multiply_int [#"../02_operators.rs" 43 0 43 38] (x : int) (y : int) : int
end
module C02Operators_MultiplyInt
  use mach.int.Int
  function multiply_int [#"../02_operators.rs" 43 0 43 38] (x : int) (y : int) : int =
    [#"../02_operators.rs" 44 4 44 9] x * y
  val multiply_int [#"../02_operators.rs" 43 0 43 38] (x : int) (y : int) : int
    ensures { result = multiply_int x y }
    
end
module C02Operators_Add_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  val add [@cfg:stackify] [#"../02_operators.rs" 48 0 48 35] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 47 11 47 33] UInt64.to_int x + UInt64.to_int y <= UInt64.to_int Max0.mAX'}
    
end
module C02Operators_Add
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  clone Core_Num_Impl12_Max as Max0
  let rec cfg add [@cfg:stackify] [#"../02_operators.rs" 48 0 48 35] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 47 11 47 33] UInt64.to_int x + UInt64.to_int y <= UInt64.to_int Max0.mAX'}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _4 : usize;
  var _5 : usize;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _4 <- x_1;
    _5 <- y_2;
    _0 <- ([#"../02_operators.rs" 49 4 49 9] _4 + _5);
    return _0
  }
  
end
module C02Operators_AddInt_Stub
  use mach.int.Int
  function add_int [#"../02_operators.rs" 53 0 53 33] (x : int) (y : int) : int
end
module C02Operators_AddInt_Interface
  use mach.int.Int
  function add_int [#"../02_operators.rs" 53 0 53 33] (x : int) (y : int) : int
end
module C02Operators_AddInt
  use mach.int.Int
  function add_int [#"../02_operators.rs" 53 0 53 33] (x : int) (y : int) : int =
    [#"../02_operators.rs" 54 4 54 9] x + y
  val add_int [#"../02_operators.rs" 53 0 53 33] (x : int) (y : int) : int
    ensures { result = add_int x y }
    
end
module C02Operators_Sub_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  val sub [@cfg:stackify] [#"../02_operators.rs" 63 0 63 35] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 62 11 62 23] UInt64.to_int x - UInt64.to_int y >= 0}
    
end
module C02Operators_Sub
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  let rec cfg sub [@cfg:stackify] [#"../02_operators.rs" 63 0 63 35] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 62 11 62 23] UInt64.to_int x - UInt64.to_int y >= 0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _4 : usize;
  var _5 : usize;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _4 <- x_1;
    _5 <- y_2;
    _0 <- ([#"../02_operators.rs" 64 4 64 9] _4 - _5);
    return _0
  }
  
end
module C02Operators_SubInt_Stub
  use mach.int.Int
  function sub_int [#"../02_operators.rs" 68 0 68 33] (x : int) (y : int) : int
end
module C02Operators_SubInt_Interface
  use mach.int.Int
  function sub_int [#"../02_operators.rs" 68 0 68 33] (x : int) (y : int) : int
end
module C02Operators_SubInt
  use mach.int.Int
  function sub_int [#"../02_operators.rs" 68 0 68 33] (x : int) (y : int) : int =
    [#"../02_operators.rs" 69 4 69 9] x - y
  val sub_int [#"../02_operators.rs" 68 0 68 33] (x : int) (y : int) : int
    ensures { result = sub_int x y }
    
end
module C02Operators_Expression_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  val expression [@cfg:stackify] [#"../02_operators.rs" 77 0 77 51] (x : usize) (y : usize) (z : usize) : bool
    requires {[#"../02_operators.rs" 74 11 74 17] UInt64.to_int y > 0}
    requires {[#"../02_operators.rs" 75 11 75 38] div (UInt64.to_int x) (UInt64.to_int y) * UInt64.to_int z <= UInt64.to_int Max0.mAX'}
    ensures { [#"../02_operators.rs" 76 10 76 16] result }
    
end
module C02Operators_Expression
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  clone Core_Num_Impl12_Max as Max0
  let rec cfg expression [@cfg:stackify] [#"../02_operators.rs" 77 0 77 51] (x : usize) (y : usize) (z : usize) : bool
    requires {[#"../02_operators.rs" 74 11 74 17] UInt64.to_int y > 0}
    requires {[#"../02_operators.rs" 75 11 75 38] div (UInt64.to_int x) (UInt64.to_int y) * UInt64.to_int z <= UInt64.to_int Max0.mAX'}
    ensures { [#"../02_operators.rs" 76 10 76 16] result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x_1 : usize;
  var y_2 : usize;
  var z_3 : usize;
  var _7 : usize;
  var _8 : usize;
  var _9 : usize;
  var _10 : usize;
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : usize;
  var _15 : usize;
  var _16 : usize;
  var _17 : bool;
  var _18 : usize;
  {
    x_1 <- x;
    y_2 <- y;
    z_3 <- z;
    goto BB0
  }
  BB0 {
    _9 <- x_1;
    _10 <- y_2;
    _11 <- ([#"../02_operators.rs" 78 4 78 9] _10 = ([#"../02_operators.rs" 78 4 78 9] (0 : usize)));
    assert { [#"../02_operators.rs" 78 4 78 9] not _11 };
    goto BB1
  }
  BB1 {
    _8 <- ([#"../02_operators.rs" 78 4 78 9] _9 / _10);
    _12 <- z_3;
    _7 <- ([#"../02_operators.rs" 78 4 78 13] _8 * _12);
    _15 <- x_1;
    _16 <- y_2;
    _17 <- ([#"../02_operators.rs" 78 17 78 24] _16 = ([#"../02_operators.rs" 78 17 78 24] (0 : usize)));
    assert { [#"../02_operators.rs" 78 17 78 24] not _17 };
    goto BB2
  }
  BB2 {
    _14 <- ([#"../02_operators.rs" 78 17 78 24] _15 / _16);
    _18 <- z_3;
    _13 <- ([#"../02_operators.rs" 78 17 78 28] _14 * _18);
    _0 <- ([#"../02_operators.rs" 78 4 78 28] _7 = _13);
    return _0
  }
  
end
module C02Operators_ExpressionLogic_Stub
  use mach.int.Int
  use prelude.UIntSize
  function expression_logic [#"../02_operators.rs" 83 0 83 57] (x : usize) (y : usize) (z : usize) : bool
end
module C02Operators_ExpressionLogic_Interface
  use mach.int.Int
  use prelude.UIntSize
  function expression_logic [#"../02_operators.rs" 83 0 83 57] (x : usize) (y : usize) (z : usize) : bool
  axiom expression_logic_spec : forall x : usize, y : usize, z : usize . [#"../02_operators.rs" 82 10 82 16] expression_logic x y z
end
module C02Operators_ExpressionLogic
  use mach.int.Int
  use prelude.UIntSize
  function expression_logic [#"../02_operators.rs" 83 0 83 57] (x : usize) (y : usize) (z : usize) : bool =
    [#"../02_operators.rs" 84 4 84 28] div x y * z = div x y * z
  val expression_logic [#"../02_operators.rs" 83 0 83 57] (x : usize) (y : usize) (z : usize) : bool
    ensures { result = expression_logic x y z }
    
  axiom expression_logic_spec : forall x : usize, y : usize, z : usize . [#"../02_operators.rs" 82 10 82 16] expression_logic x y z
end
module C02Operators_ExpressionLogic_Impl
  use mach.int.Int
  use prelude.UIntSize
  let rec ghost function expression_logic [#"../02_operators.rs" 83 0 83 57] (x : usize) (y : usize) (z : usize) : bool
    ensures { [#"../02_operators.rs" 82 10 82 16] result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_operators.rs" 84 4 84 28] pure {div x y * z = div x y * z}
end
module C02Operators_X_Type
  use mach.int.Int
  use prelude.UIntSize
  type t_x  =
    | C_X usize
    
  let function x_a (self : t_x) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_X a -> a
      end
end
module C02Operators_PrimitiveComparison_Interface
  use mach.int.Int
  use C02Operators_X_Type as C02Operators_X_Type
  val primitive_comparison [@cfg:stackify] [#"../02_operators.rs" 92 0 92 29] (x : C02Operators_X_Type.t_x) : ()
    ensures { [#"../02_operators.rs" 91 10 91 20] C02Operators_X_Type.x_a x <= C02Operators_X_Type.x_a x }
    
end
module C02Operators_PrimitiveComparison
  use mach.int.Int
  use C02Operators_X_Type as C02Operators_X_Type
  let rec cfg primitive_comparison [@cfg:stackify] [#"../02_operators.rs" 92 0 92 29] (x : C02Operators_X_Type.t_x) : ()
    ensures { [#"../02_operators.rs" 91 10 91 20] C02Operators_X_Type.x_a x <= C02Operators_X_Type.x_a x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : C02Operators_X_Type.t_x;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C02Operators_BoolEq_Interface
  val bool_eq [@cfg:stackify] [#"../02_operators.rs" 95 0 95 36] (a : bool) (b : bool) : bool
    ensures { [#"../02_operators.rs" 94 10 94 28] result = (a = b) }
    
end
module C02Operators_BoolEq
  use prelude.Bool
  let rec cfg bool_eq [@cfg:stackify] [#"../02_operators.rs" 95 0 95 36] (a : bool) (b : bool) : bool
    ensures { [#"../02_operators.rs" 94 10 94 28] result = (a = b) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var a_1 : bool;
  var b_2 : bool;
  var _4 : bool;
  var _5 : bool;
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _4 <- a_1;
    _5 <- b_2;
    _0 <- ([#"../02_operators.rs" 96 4 96 10] Bool.eqb _4 _5);
    return _0
  }
  
end
module C02Operators_OldTest_Interface
  val old_test [@cfg:stackify] [#"../02_operators.rs" 100 0 100 20] (x : bool) : ()
    ensures { [#"../02_operators.rs" 99 10 99 21] old(x) = x }
    
end
module C02Operators_OldTest
  let rec cfg old_test [@cfg:stackify] [#"../02_operators.rs" 100 0 100 20] (x : bool) : ()
    ensures { [#"../02_operators.rs" 99 10 99 21] old(x) = x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : bool;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
