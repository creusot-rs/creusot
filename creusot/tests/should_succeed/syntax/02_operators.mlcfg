
module C02Operators_Division
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  let rec cfg division [#"../02_operators.rs" 8 0 8 40] [@cfg:stackify] [@cfg:subregion_analysis] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 7 11 7 17] UIntSize.to_int y > 0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var x : usize = x;
  var y : usize = y;
  var _5 : usize;
  var _6 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../02_operators.rs" 9 8 9 9] _5 <- ([#"../02_operators.rs" 9 8 9 9] y);
    [#"../02_operators.rs" 9 4 9 9] _6 <- ([#"../02_operators.rs" 9 4 9 9] _5 = ([#"../02_operators.rs" 9 4 9 9] [#"../02_operators.rs" 9 4 9 9] (0 : usize)));
    assert { [@expl:division by zero] [#"../02_operators.rs" 9 4 9 9] not _6 };
    goto BB1
  }
  BB1 {
    [#"../02_operators.rs" 9 4 9 9] _0 <- ([#"../02_operators.rs" 9 4 9 9] ([#"../02_operators.rs" 9 4 9 5] x) / _5);
    _5 <- any usize;
    return _0
  }
  
end
module C02Operators_Modulus
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  let rec cfg modulus [#"../02_operators.rs" 23 0 23 39] [@cfg:stackify] [@cfg:subregion_analysis] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 22 11 22 17] UIntSize.to_int y > 0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var x : usize = x;
  var y : usize = y;
  var _5 : usize;
  var _6 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../02_operators.rs" 24 8 24 9] _5 <- ([#"../02_operators.rs" 24 8 24 9] y);
    [#"../02_operators.rs" 24 4 24 9] _6 <- ([#"../02_operators.rs" 24 4 24 9] _5 = ([#"../02_operators.rs" 24 4 24 9] [#"../02_operators.rs" 24 4 24 9] (0 : usize)));
    assert { [@expl:remainder by zero] [#"../02_operators.rs" 24 4 24 9] not _6 };
    goto BB1
  }
  BB1 {
    [#"../02_operators.rs" 24 4 24 9] _0 <- ([#"../02_operators.rs" 24 4 24 9] ([#"../02_operators.rs" 24 4 24 5] x) % _5);
    _5 <- any usize;
    return _0
  }
  
end
module C02Operators_Multiply
  use prelude.UIntSize
  use prelude.Int
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use prelude.UIntSize
  let rec cfg multiply [#"../02_operators.rs" 38 0 38 40] [@cfg:stackify] [@cfg:subregion_analysis] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 37 11 37 33] UIntSize.to_int x * UIntSize.to_int y <= UIntSize.to_int max0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var x : usize = x;
  var y : usize = y;
  {
    goto BB0
  }
  BB0 {
    [#"../02_operators.rs" 39 4 39 9] _0 <- ([#"../02_operators.rs" 39 4 39 9] ([#"../02_operators.rs" 39 4 39 5] x) * ([#"../02_operators.rs" 39 8 39 9] y));
    return _0
  }
  
end
module C02Operators_Add
  use prelude.UIntSize
  use prelude.Int
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use prelude.UIntSize
  let rec cfg add [#"../02_operators.rs" 48 0 48 35] [@cfg:stackify] [@cfg:subregion_analysis] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 47 11 47 33] UIntSize.to_int x + UIntSize.to_int y <= UIntSize.to_int max0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var x : usize = x;
  var y : usize = y;
  {
    goto BB0
  }
  BB0 {
    [#"../02_operators.rs" 49 4 49 9] _0 <- ([#"../02_operators.rs" 49 4 49 9] ([#"../02_operators.rs" 49 4 49 5] x) + ([#"../02_operators.rs" 49 8 49 9] y));
    return _0
  }
  
end
module C02Operators_Sub
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  let rec cfg sub [#"../02_operators.rs" 63 0 63 35] [@cfg:stackify] [@cfg:subregion_analysis] (x : usize) (y : usize) : usize
    requires {[#"../02_operators.rs" 62 11 62 23] UIntSize.to_int x - UIntSize.to_int y >= 0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var x : usize = x;
  var y : usize = y;
  {
    goto BB0
  }
  BB0 {
    [#"../02_operators.rs" 64 4 64 9] _0 <- ([#"../02_operators.rs" 64 4 64 9] ([#"../02_operators.rs" 64 4 64 5] x) - ([#"../02_operators.rs" 64 8 64 9] y));
    return _0
  }
  
end
module C02Operators_Expression
  use prelude.UIntSize
  use prelude.Int
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use prelude.UIntSize
  let rec cfg expression [#"../02_operators.rs" 77 0 77 51] [@cfg:stackify] [@cfg:subregion_analysis] (x : usize) (y : usize) (z : usize) : bool
    requires {[#"../02_operators.rs" 74 11 74 17] UIntSize.to_int y > 0}
    requires {[#"../02_operators.rs" 75 11 75 38] div (UIntSize.to_int x) (UIntSize.to_int y) * UIntSize.to_int z <= UIntSize.to_int max0}
    ensures { [#"../02_operators.rs" 76 10 76 16] result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x : usize = x;
  var y : usize = y;
  var z : usize = z;
  var _10 : usize;
  var _11 : bool;
  var _16 : usize;
  var _17 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../02_operators.rs" 78 8 78 9] _10 <- ([#"../02_operators.rs" 78 8 78 9] y);
    [#"../02_operators.rs" 78 4 78 9] _11 <- ([#"../02_operators.rs" 78 4 78 9] _10 = ([#"../02_operators.rs" 78 4 78 9] [#"../02_operators.rs" 78 4 78 9] (0 : usize)));
    assert { [@expl:division by zero] [#"../02_operators.rs" 78 4 78 9] not _11 };
    goto BB1
  }
  BB1 {
    [#"../02_operators.rs" 78 22 78 23] _16 <- ([#"../02_operators.rs" 78 22 78 23] y);
    [#"../02_operators.rs" 78 17 78 24] _17 <- ([#"../02_operators.rs" 78 17 78 24] _16 = ([#"../02_operators.rs" 78 17 78 24] [#"../02_operators.rs" 78 17 78 24] (0 : usize)));
    assert { [@expl:division by zero] [#"../02_operators.rs" 78 17 78 24] not _17 };
    goto BB2
  }
  BB2 {
    [#"../02_operators.rs" 78 4 78 28] _0 <- ([#"../02_operators.rs" 78 4 78 28] ([#"../02_operators.rs" 78 4 78 13] ([#"../02_operators.rs" 78 4 78 9] ([#"../02_operators.rs" 78 4 78 5] x) / _10) * ([#"../02_operators.rs" 78 12 78 13] z)) = ([#"../02_operators.rs" 78 17 78 28] ([#"../02_operators.rs" 78 17 78 24] ([#"../02_operators.rs" 78 18 78 19] x) / _16) * ([#"../02_operators.rs" 78 27 78 28] z)));
    _10 <- any usize;
    _16 <- any usize;
    return _0
  }
  
end
module C02Operators_ExpressionLogic_Impl
  use prelude.UIntSize
  use prelude.Int
  let rec ghost function expression_logic [#"../02_operators.rs" 83 0 83 57] (x : usize) (y : usize) (z : usize) : bool
    ensures { [#"../02_operators.rs" 82 10 82 16] result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../02_operators.rs" 84 4 84 28] pure {div x y * z = div x y * z}
end
module C02Operators_X_Type
  use prelude.UIntSize
  use prelude.Int
  type t_x  =
    | C_X usize
    
  let function x_a (self : t_x) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_X a -> a
      end
end
module C02Operators_PrimitiveComparison
  use prelude.Int
  use C02Operators_X_Type as C02Operators_X_Type
  let rec cfg primitive_comparison [#"../02_operators.rs" 92 0 92 29] [@cfg:stackify] [@cfg:subregion_analysis] (x : C02Operators_X_Type.t_x) : ()
    ensures { [#"../02_operators.rs" 91 10 91 20] C02Operators_X_Type.x_a x <= C02Operators_X_Type.x_a x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../02_operators.rs" 92 30 92 32] _0 <- ([#"../02_operators.rs" 92 30 92 32] ());
    return _0
  }
  
end
module C02Operators_BoolEq
  use prelude.Bool
  let rec cfg bool_eq [#"../02_operators.rs" 95 0 95 36] [@cfg:stackify] [@cfg:subregion_analysis] (a : bool) (b : bool) : bool
    ensures { [#"../02_operators.rs" 94 10 94 28] result = (a = b) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var a : bool = a;
  var b : bool = b;
  {
    goto BB0
  }
  BB0 {
    [#"../02_operators.rs" 96 4 96 10] _0 <- ([#"../02_operators.rs" 96 4 96 10] Bool.eqb ([#"../02_operators.rs" 96 4 96 5] a) ([#"../02_operators.rs" 96 9 96 10] b));
    return _0
  }
  
end
module C02Operators_OldTest
  let rec cfg old_test [#"../02_operators.rs" 100 0 100 20] [@cfg:stackify] [@cfg:subregion_analysis] (x : bool) : ()
    ensures { [#"../02_operators.rs" 99 10 99 21] old(x) = x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../02_operators.rs" 100 21 100 23] _0 <- ([#"../02_operators.rs" 100 21 100 23] ());
    return _0
  }
  
end
