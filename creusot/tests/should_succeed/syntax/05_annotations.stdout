module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module C05Annotations_Assertion_Interface
  type t   
  val assertion (x : t) : ()
end
module C05Annotations_Assertion
  type t   
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = ()
  let rec cfg assertion (x : t) : () = 
  var _0 : ();
  var x_1 : t;
  var _2 : ();
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    assert { x_1 = x_1 };
    goto BB1
  }
  BB1 {
    _2 <- ();
    assume { Resolve0.resolve _2 };
    _0 <- ();
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve x_1 };
    return _0
  }
  
end
