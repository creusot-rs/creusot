
module C11ArrayTypes_UsesArray_Type
  use prelude.Int64
  use prelude.Int
  use prelude.Slice
  type t_usesarray  =
    | C_UsesArray (array int64)
    
  let function usesarray_0 (self : t_usesarray) : array int64 = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_UsesArray a -> a
      end
end
module C11ArrayTypes_Omg
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  use prelude.Slice
  use prelude.Int64
  use seq.Seq
  use prelude.Slice
  use prelude.Int64
  function index_logic0 [@inline:trivial] (self : array int64) (ix : int) : int64 =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 65 8 65 31] Seq.get (Slice.id self) ix
  val index_logic0 [@inline:trivial] (self : array int64) (ix : int) : int64
    ensures { result = index_logic0 self ix }
    
  use C11ArrayTypes_UsesArray_Type as C11ArrayTypes_UsesArray_Type
  let rec cfg omg [#"../11_array_types.rs" 8 0 8 28] [@cfg:stackify] [@cfg:subregion_analysis] (x : C11ArrayTypes_UsesArray_Type.t_usesarray) : ()
    requires {[#"../11_array_types.rs" 7 11 7 53] Seq.length (Slice.id (C11ArrayTypes_UsesArray_Type.usesarray_0 x)) > 0
    /\ Seq.length (Slice.id (C11ArrayTypes_UsesArray_Type.usesarray_0 x)) < UIntSize.to_int max0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : C11ArrayTypes_UsesArray_Type.t_usesarray = x;
  var _3 : usize;
  var _4 : usize;
  var _5 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../11_array_types.rs" 9 8 9 9] _3 <- ([#"../11_array_types.rs" 9 8 9 9] (0 : usize));
    [#"../11_array_types.rs" 9 4 9 10] _4 <- Slice.length (C11ArrayTypes_UsesArray_Type.usesarray_0 x);
    [#"../11_array_types.rs" 9 4 9 10] _5 <- _3 < _4;
    assert { [@expl:index in bounds] [#"../11_array_types.rs" 9 4 9 10] _5 };
    goto BB1
  }
  BB1 {
    [#"../11_array_types.rs" 9 4 9 14] x <- (let C11ArrayTypes_UsesArray_Type.C_UsesArray x0 = x in C11ArrayTypes_UsesArray_Type.C_UsesArray (Slice.set (C11ArrayTypes_UsesArray_Type.usesarray_0 x) _3 ([#"../11_array_types.rs" 9 13 9 14] (5 : int64))));
    assert { [@expl:assertion] [#"../11_array_types.rs" 11 20 11 32] Int64.to_int (index_logic0 (C11ArrayTypes_UsesArray_Type.usesarray_0 x) 0)
    = 5 };
    [#"../11_array_types.rs" 8 29 12 1] _0 <- ([#"../11_array_types.rs" 8 29 12 1] ());
    return _0
  }
  
end
module C11ArrayTypes_CallOmg
  use prelude.Slice
  use prelude.UIntSize
  use C11ArrayTypes_UsesArray_Type as C11ArrayTypes_UsesArray_Type
  use prelude.UIntSize
  use prelude.Int
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  use prelude.Slice
  val omg0 [#"../11_array_types.rs" 8 0 8 28] (x : C11ArrayTypes_UsesArray_Type.t_usesarray) : ()
    requires {[#"../11_array_types.rs" 7 11 7 53] Seq.length (Slice.id (C11ArrayTypes_UsesArray_Type.usesarray_0 x)) > 0
    /\ Seq.length (Slice.id (C11ArrayTypes_UsesArray_Type.usesarray_0 x)) < UIntSize.to_int max0}
    
  use prelude.Int64
  let rec cfg call_omg [#"../11_array_types.rs" 14 0 14 17] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var arr : array int64;
  var _2 : C11ArrayTypes_UsesArray_Type.t_usesarray;
  {
    goto BB0
  }
  BB0 {
    [#"../11_array_types.rs" 15 14 15 24] arr <- Slice.create ([#"../11_array_types.rs" 15 14 15 24] (5 : usize)) (fun _ -> [#"../11_array_types.rs" 15 15 15 20] (3 : int64));
    [#"../11_array_types.rs" 16 8 16 22] _2 <- C11ArrayTypes_UsesArray_Type.C_UsesArray arr;
    [#"../11_array_types.rs" 16 4 16 23] _0 <- ([#"../11_array_types.rs" 16 4 16 23] omg0 _2);
    _2 <- any C11ArrayTypes_UsesArray_Type.t_usesarray;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
