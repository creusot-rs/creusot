
module C05Pearlite_HasLen3_Impl
  use prelude.UInt32
  use seq.Seq
  predicate invariant1 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Seq.seq uint32) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq uint32)
  val inv1 (_x : Seq.seq uint32) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq uint32 . inv1 x = true
  use prelude.Slice
  predicate invariant0 (self : slice uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : slice uint32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : slice uint32)
  val inv0 (_x : slice uint32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : slice uint32 . inv0 x = true
  use prelude.Int
  use prelude.Borrow
  use seq.Seq
  use prelude.UIntSize
  use prelude.Slice
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  function shallow_model1 (self : slice uint32) : Seq.seq uint32
  val shallow_model1 (self : slice uint32) : Seq.seq uint32
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv0 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : slice uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv1 (shallow_model1 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model1 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model1 self) <= UIntSize.to_int max0)
  function shallow_model0 (self : slice uint32) : Seq.seq uint32 =
    [#"../../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model1 self
  val shallow_model0 (self : slice uint32) : Seq.seq uint32
    ensures { result = shallow_model0 self }
    
  let rec ghost predicate has_len_3 [#"../05_pearlite.rs" 9 0 9 35] (v : slice uint32)
    requires {[#"../05_pearlite.rs" 8 11 8 24] Seq.length (shallow_model0 v) = 3}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_pearlite.rs" 10 16 10 29] let x0 = let a' = shallow_model0 v in Seq.length a' in pure {x0 = 3}
end
module C05Pearlite_A_Type
  type t_a  =
    | C_A bool
    
  let function a_a (self : t_a) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_A a -> a
      end
end
module C05Pearlite_StructInPearlite
  use C05Pearlite_A_Type as C05Pearlite_A_Type
  let rec cfg struct_in_pearlite [#"../05_pearlite.rs" 24 0 24 31] [@cfg:stackify] [@cfg:subregion_analysis] (x : C05Pearlite_A_Type.t_a) : ()
    ensures { [#"../05_pearlite.rs" 23 10 23 30] x = C05Pearlite_A_Type.C_A false }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../05_pearlite.rs" 24 32 24 34] _0 <- ([#"../05_pearlite.rs" 24 32 24 34] ());
    return _0
  }
  
end
module C05Pearlite_B_Type
  use prelude.UInt32
  use prelude.Int
  type t_b  =
    | C_B bool uint32
    
end
module C05Pearlite_StructOrder
  use C05Pearlite_B_Type as C05Pearlite_B_Type
  use prelude.UInt32
  use prelude.Int
  let rec cfg struct_order [#"../05_pearlite.rs" 32 0 32 25] [@cfg:stackify] [@cfg:subregion_analysis] (x : C05Pearlite_B_Type.t_b) : ()
    ensures { [#"../05_pearlite.rs" 31 10 31 48] x = C05Pearlite_B_Type.C_B false (0 : uint32) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../05_pearlite.rs" 32 26 32 28] _0 <- ([#"../05_pearlite.rs" 32 26 32 28] ());
    return _0
  }
  
end
module C05Pearlite_GhostClosure
  use prelude.UInt32
  use map.Map
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Mapping
  use prelude.Int
  let rec cfg ghost_closure [#"../05_pearlite.rs" 48 0 48 22] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _x : Ghost.ghost_ty (Map.map uint32 uint32);
  {
    goto BB0
  }
  BB0 {
    [#"../05_pearlite.rs" 49 13 49 32] _x <- ([#"../05_pearlite.rs" 49 13 49 32] Ghost.new (Mapping.from_fn (fun (a : uint32) -> a)));
    goto BB1
  }
  BB1 {
    [#"../05_pearlite.rs" 48 23 50 1] _0 <- ([#"../05_pearlite.rs" 48 23 50 1] ());
    return _0
  }
  
end
module C05Pearlite_PearliteClosure
  use prelude.UInt32
  use prelude.Int
  use map.Map
  use prelude.Ghost
  let rec cfg pearlite_closure [#"../05_pearlite.rs" 52 0 52 54] [@cfg:stackify] [@cfg:subregion_analysis] (_x : Ghost.ghost_ty (Map.map uint32 bool)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../05_pearlite.rs" 52 55 52 57] _0 <- ([#"../05_pearlite.rs" 52 55 52 57] ());
    return _0
  }
  
end
module C05Pearlite_Caller
  use prelude.UInt32
  use map.Map
  use prelude.Ghost
  use prelude.Int
  val pearlite_closure0 [#"../05_pearlite.rs" 52 0 52 54] (_x : Ghost.ghost_ty (Map.map uint32 bool)) : ()
  use prelude.Ghost
  use prelude.Mapping
  let rec cfg caller [#"../05_pearlite.rs" 54 0 54 15] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : ();
  var _2 : Ghost.ghost_ty (Map.map uint32 bool);
  {
    goto BB0
  }
  BB0 {
    [#"../05_pearlite.rs" 55 21 55 38] _2 <- ([#"../05_pearlite.rs" 55 21 55 38] Ghost.new (Mapping.from_fn (fun (_a : uint32) -> true)));
    goto BB1
  }
  BB1 {
    [#"../05_pearlite.rs" 55 4 55 39] _1 <- ([#"../05_pearlite.rs" 55 4 55 39] pearlite_closure0 _2);
    _2 <- any Ghost.ghost_ty (Map.map uint32 bool);
    goto BB2
  }
  BB2 {
    [#"../05_pearlite.rs" 54 16 56 1] _0 <- ([#"../05_pearlite.rs" 54 16 56 1] ());
    return _0
  }
  
end
module C05Pearlite_S_Type
  type t_s  =
    | C_S
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.UIntSize
  use prelude.Int
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
