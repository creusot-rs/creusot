
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl5_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 80 8 80 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module C05Pearlite_HasLen3_Stub
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use prelude.Int
  use prelude.UInt32
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32
  predicate has_len_3 [#"../05_pearlite.rs" 9 0 9 35] (v : slice uint32)
end
module C05Pearlite_HasLen3_Interface
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use prelude.Int
  use prelude.UInt32
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32
  predicate has_len_3 [#"../05_pearlite.rs" 9 0 9 35] (v : slice uint32)
  val has_len_3 [#"../05_pearlite.rs" 9 0 9 35] (v : slice uint32) : bool
    requires {[#"../05_pearlite.rs" 8 11 8 24] Seq.length (ShallowModel0.shallow_model v) = 3}
    ensures { result = has_len_3 v }
    
end
module C05Pearlite_HasLen3
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use prelude.Int
  use prelude.UInt32
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32
  predicate has_len_3 [#"../05_pearlite.rs" 9 0 9 35] (v : slice uint32) =
    [#"../05_pearlite.rs" 10 16 10 29] Seq.length (ShallowModel0.shallow_model v) = 3
  val has_len_3 [#"../05_pearlite.rs" 9 0 9 35] (v : slice uint32) : bool
    requires {[#"../05_pearlite.rs" 8 11 8 24] Seq.length (ShallowModel0.shallow_model v) = 3}
    ensures { result = has_len_3 v }
    
end
module C05Pearlite_HasLen3_Impl
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use prelude.Int
  use prelude.UInt32
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = uint32,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec ghost predicate has_len_3 [#"../05_pearlite.rs" 9 0 9 35] (v : slice uint32)
    requires {[#"../05_pearlite.rs" 8 11 8 24] Seq.length (ShallowModel0.shallow_model v) = 3}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_pearlite.rs" 10 16 10 29] let a = let a' = ShallowModel0.shallow_model v in Seq.length a' in pure {a = 3}
end
module C05Pearlite_A_Type
  type t_a  =
    | C_A bool
    
  let function a_a (self : t_a) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_A a -> a
      end
end
module C05Pearlite_Solver_Interface
  use C05Pearlite_A_Type as C05Pearlite_A_Type
  val solver [#"../05_pearlite.rs" 21 0 21 19] (x : C05Pearlite_A_Type.t_a) : ()
    ensures { [#"../05_pearlite.rs" 20 10 20 20] C05Pearlite_A_Type.a_a x = C05Pearlite_A_Type.a_a x }
    
end
module C05Pearlite_StructInPearlite_Interface
  use C05Pearlite_A_Type as C05Pearlite_A_Type
  val struct_in_pearlite [#"../05_pearlite.rs" 24 0 24 31] (x : C05Pearlite_A_Type.t_a) : ()
    ensures { [#"../05_pearlite.rs" 23 10 23 30] x = C05Pearlite_A_Type.C_A false }
    
end
module C05Pearlite_StructInPearlite
  use C05Pearlite_A_Type as C05Pearlite_A_Type
  let rec cfg struct_in_pearlite [#"../05_pearlite.rs" 24 0 24 31] [@cfg:stackify] [@cfg:subregion_analysis] (x : C05Pearlite_A_Type.t_a) : ()
    ensures { [#"../05_pearlite.rs" 23 10 23 30] x = C05Pearlite_A_Type.C_A false }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C05Pearlite_B_Type
  use prelude.Int
  use prelude.UInt32
  type t_b  =
    | C_B bool uint32
    
end
module C05Pearlite_StructOrder_Interface
  use prelude.Int
  use prelude.UInt32
  use C05Pearlite_B_Type as C05Pearlite_B_Type
  val struct_order [#"../05_pearlite.rs" 32 0 32 25] (x : C05Pearlite_B_Type.t_b) : ()
    ensures { [#"../05_pearlite.rs" 31 10 31 48] x = C05Pearlite_B_Type.C_B false (0 : uint32) }
    
end
module C05Pearlite_StructOrder
  use prelude.Int
  use prelude.UInt32
  use C05Pearlite_B_Type as C05Pearlite_B_Type
  let rec cfg struct_order [#"../05_pearlite.rs" 32 0 32 25] [@cfg:stackify] [@cfg:subregion_analysis] (x : C05Pearlite_B_Type.t_b) : ()
    ensures { [#"../05_pearlite.rs" 31 10 31 48] x = C05Pearlite_B_Type.C_B false (0 : uint32) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C05Pearlite_Field1IsTrue_Stub
  use C05Pearlite_B_Type as C05Pearlite_B_Type
  predicate field1_is_true [#"../05_pearlite.rs" 37 0 37 35] (x : C05Pearlite_B_Type.t_b)
end
module C05Pearlite_Field1IsTrue_Interface
  use C05Pearlite_B_Type as C05Pearlite_B_Type
  predicate field1_is_true [#"../05_pearlite.rs" 37 0 37 35] (x : C05Pearlite_B_Type.t_b)
  val field1_is_true [#"../05_pearlite.rs" 37 0 37 35] (x : C05Pearlite_B_Type.t_b) : bool
    ensures { result = field1_is_true x }
    
end
module C05Pearlite_Field1IsTrue
  use prelude.UInt32
  use C05Pearlite_B_Type as C05Pearlite_B_Type
  predicate field1_is_true [#"../05_pearlite.rs" 37 0 37 35] (x : C05Pearlite_B_Type.t_b) =
    [#"../05_pearlite.rs" 40 8 44 9] match (x) with
      | C05Pearlite_B_Type.C_B (True) _ -> true
      | C05Pearlite_B_Type.C_B _f field2 -> UInt32.to_int field2 = 0
      | _ -> false
      end
  val field1_is_true [#"../05_pearlite.rs" 37 0 37 35] (x : C05Pearlite_B_Type.t_b) : bool
    ensures { result = field1_is_true x }
    
end
module C05Pearlite_GhostClosure_Interface
  val ghost_closure [#"../05_pearlite.rs" 48 0 48 22] (_1 : ()) : ()
end
module C05Pearlite_GhostClosure
  use prelude.Int
  use prelude.UInt32
  use prelude.Mapping
  use prelude.Ghost
  use map.Map
  let rec cfg ghost_closure [#"../05_pearlite.rs" 48 0 48 22] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _x : Ghost.ghost_ty (Map.map uint32 uint32);
  {
    goto BB0
  }
  BB0 {
    _x <- ([#"../05_pearlite.rs" 49 13 49 50] Ghost.new (Mapping.from_fn (fun (a : uint32) -> a)));
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
module C05Pearlite_PearliteClosure_Interface
  use prelude.Ghost
  use map.Map
  use prelude.Int
  use prelude.UInt32
  val pearlite_closure [#"../05_pearlite.rs" 52 0 52 54] (_x : Ghost.ghost_ty (Map.map uint32 bool)) : ()
end
module C05Pearlite_PearliteClosure
  use prelude.Ghost
  use map.Map
  use prelude.Int
  use prelude.UInt32
  let rec cfg pearlite_closure [#"../05_pearlite.rs" 52 0 52 54] [@cfg:stackify] [@cfg:subregion_analysis] (_x : Ghost.ghost_ty (Map.map uint32 bool)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C05Pearlite_Caller_Interface
  val caller [#"../05_pearlite.rs" 54 0 54 15] (_1 : ()) : ()
end
module C05Pearlite_Caller
  use prelude.Int
  use prelude.UInt32
  use prelude.Mapping
  use prelude.Ghost
  use map.Map
  clone C05Pearlite_PearliteClosure_Interface as PearliteClosure0
  let rec cfg caller [#"../05_pearlite.rs" 54 0 54 15] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : ();
  var _2 : Ghost.ghost_ty (Map.map uint32 bool);
  {
    goto BB0
  }
  BB0 {
    _2 <- ([#"../05_pearlite.rs" 55 21 55 54] Ghost.new (Mapping.from_fn (fun (_a : uint32) -> true)));
    goto BB1
  }
  BB1 {
    _1 <- ([#"../05_pearlite.rs" 55 4 55 55] PearliteClosure0.pearlite_closure _2);
    _2 <- any Ghost.ghost_ty (Map.map uint32 bool);
    goto BB2
  }
  BB2 {
    _0 <- ();
    return _0
  }
  
end
module C05Pearlite_S_Type
  type t_s  =
    | C_S
    
end
module C05Pearlite_Impl0_X_Stub
  use prelude.Borrow
  use C05Pearlite_S_Type as C05Pearlite_S_Type
  function x [#"../05_pearlite.rs" 65 4 65 31] (self : borrowed (C05Pearlite_S_Type.t_s)) : bool
end
module C05Pearlite_Impl0_X_Interface
  use prelude.Borrow
  use C05Pearlite_S_Type as C05Pearlite_S_Type
  function x [#"../05_pearlite.rs" 65 4 65 31] (self : borrowed (C05Pearlite_S_Type.t_s)) : bool
  val x [#"../05_pearlite.rs" 65 4 65 31] (self : borrowed (C05Pearlite_S_Type.t_s)) : bool
    ensures { result = x self }
    
end
module C05Pearlite_Impl0_X
  use prelude.Borrow
  use C05Pearlite_S_Type as C05Pearlite_S_Type
  function x [#"../05_pearlite.rs" 65 4 65 31] (self : borrowed (C05Pearlite_S_Type.t_s)) : bool =
    [#"../05_pearlite.rs" 66 8 66 12] true
  val x [#"../05_pearlite.rs" 65 4 65 31] (self : borrowed (C05Pearlite_S_Type.t_s)) : bool
    ensures { result = x self }
    
end
module C05Pearlite_Proj_Stub
  use prelude.Borrow
  use C05Pearlite_S_Type as C05Pearlite_S_Type
  function proj [#"../05_pearlite.rs" 72 0 72 35] (x : borrowed (C05Pearlite_S_Type.t_s, C05Pearlite_S_Type.t_s)) : bool
end
module C05Pearlite_Proj_Interface
  use prelude.Borrow
  use C05Pearlite_S_Type as C05Pearlite_S_Type
  function proj [#"../05_pearlite.rs" 72 0 72 35] (x : borrowed (C05Pearlite_S_Type.t_s, C05Pearlite_S_Type.t_s)) : bool
  val proj [#"../05_pearlite.rs" 72 0 72 35] (x : borrowed (C05Pearlite_S_Type.t_s, C05Pearlite_S_Type.t_s)) : bool
    ensures { result = proj x }
    
end
module C05Pearlite_Proj
  use prelude.Borrow
  use C05Pearlite_S_Type as C05Pearlite_S_Type
  clone C05Pearlite_Impl0_X_Stub as X0
  function proj [#"../05_pearlite.rs" 72 0 72 35] (x : borrowed (C05Pearlite_S_Type.t_s, C05Pearlite_S_Type.t_s)) : bool
   =
    [#"../05_pearlite.rs" 71 0 71 8] X0.x {current = let (a, _) =  * x in a; final = let (a, _) =  ^ x in a}
  val proj [#"../05_pearlite.rs" 72 0 72 35] (x : borrowed (C05Pearlite_S_Type.t_s, C05Pearlite_S_Type.t_s)) : bool
    ensures { result = proj x }
    
end
module C05Pearlite_Proj2_Stub
  use prelude.Borrow
  use C05Pearlite_S_Type as C05Pearlite_S_Type
  function proj2 [#"../05_pearlite.rs" 78 0 78 41] (x : borrowed (borrowed (C05Pearlite_S_Type.t_s, C05Pearlite_S_Type.t_s))) : bool
    
end
module C05Pearlite_Proj2_Interface
  use prelude.Borrow
  use C05Pearlite_S_Type as C05Pearlite_S_Type
  function proj2 [#"../05_pearlite.rs" 78 0 78 41] (x : borrowed (borrowed (C05Pearlite_S_Type.t_s, C05Pearlite_S_Type.t_s))) : bool
    
  val proj2 [#"../05_pearlite.rs" 78 0 78 41] (x : borrowed (borrowed (C05Pearlite_S_Type.t_s, C05Pearlite_S_Type.t_s))) : bool
    ensures { result = proj2 x }
    
end
module C05Pearlite_Proj2
  use prelude.Borrow
  use C05Pearlite_S_Type as C05Pearlite_S_Type
  clone C05Pearlite_Impl0_X_Stub as X0
  function proj2 [#"../05_pearlite.rs" 78 0 78 41] (x : borrowed (borrowed (C05Pearlite_S_Type.t_s, C05Pearlite_S_Type.t_s))) : bool
    
   =
    [#"../05_pearlite.rs" 77 0 77 8] X0.x {current = let (a, _) =  *  * x in a; final = let (a, _) =  ^  * x in a}
  val proj2 [#"../05_pearlite.rs" 78 0 78 41] (x : borrowed (borrowed (C05Pearlite_S_Type.t_s, C05Pearlite_S_Type.t_s))) : bool
    ensures { result = proj2 x }
    
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Interface
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic
  type t
  use prelude.Slice
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module C05Pearlite_ReborrowIndexProjection_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  function reborrow_index_projection [#"../05_pearlite.rs" 86 0 86 80] (a : borrowed (borrowed (slice t))) : borrowed t
end
module C05Pearlite_ReborrowIndexProjection_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  function reborrow_index_projection [#"../05_pearlite.rs" 86 0 86 80] (a : borrowed (borrowed (slice t))) : borrowed t
  val reborrow_index_projection [#"../05_pearlite.rs" 86 0 86 80] (a : borrowed (borrowed (slice t))) : borrowed t
    ensures { result = reborrow_index_projection a }
    
end
module C05Pearlite_ReborrowIndexProjection
  type t
  use prelude.Borrow
  use prelude.Slice
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  function reborrow_index_projection [#"../05_pearlite.rs" 86 0 86 80] (a : borrowed (borrowed (slice t))) : borrowed t
   =
    [#"../05_pearlite.rs" 85 0 85 8] {current = IndexLogic0.index_logic ( *  * a) 0; final = IndexLogic0.index_logic ( ^  * a) 0}
  val reborrow_index_projection [#"../05_pearlite.rs" 86 0 86 80] (a : borrowed (borrowed (slice t))) : borrowed t
    ensures { result = reborrow_index_projection a }
    
end
module C05Pearlite_ReborrowIndexProjection2_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  function reborrow_index_projection2 [#"../05_pearlite.rs" 92 0 92 69] (a : slice t) : t
end
module C05Pearlite_ReborrowIndexProjection2_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  function reborrow_index_projection2 [#"../05_pearlite.rs" 92 0 92 69] (a : slice t) : t
  val reborrow_index_projection2 [#"../05_pearlite.rs" 92 0 92 69] (a : slice t) : t
    ensures { result = reborrow_index_projection2 a }
    
end
module C05Pearlite_ReborrowIndexProjection2
  type t
  use prelude.Borrow
  use prelude.Slice
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  function reborrow_index_projection2 [#"../05_pearlite.rs" 92 0 92 69] (a : slice t) : t =
    [#"../05_pearlite.rs" 91 0 91 8] IndexLogic0.index_logic a 0
  val reborrow_index_projection2 [#"../05_pearlite.rs" 92 0 92 69] (a : slice t) : t
    ensures { result = reborrow_index_projection2 a }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type a
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module C05Pearlite_Test3_Stub
  type t
  use prelude.Ghost
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function test3 [#"../05_pearlite.rs" 98 0 98 58] (a : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : borrowed t
    
end
module C05Pearlite_Test3_Interface
  type t
  use prelude.Ghost
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function test3 [#"../05_pearlite.rs" 98 0 98 58] (a : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : borrowed t
    
  val test3 [#"../05_pearlite.rs" 98 0 98 58] (a : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : borrowed t
    ensures { result = test3 a }
    
end
module C05Pearlite_Test3
  type t
  use prelude.Ghost
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  function test3 [#"../05_pearlite.rs" 98 0 98 58] (a : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : borrowed t
    
   =
    [#"../05_pearlite.rs" 97 0 97 8] {current = IndexLogic0.index_logic ( * Ghost.inner a) 0; final = IndexLogic0.index_logic ( ^ Ghost.inner a) 0}
  val test3 [#"../05_pearlite.rs" 98 0 98 58] (a : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : borrowed t
    ensures { result = test3 a }
    
end
