
module C05Pearlite_A_Type
  type t_a  =
    | C_A bool
    
  let function a_a (self : t_a) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_A a -> a
      end
end
module C05Pearlite_Solver_Interface
  use C05Pearlite_A_Type as C05Pearlite_A_Type
  val solver [@cfg:stackify] (x : C05Pearlite_A_Type.t_a) : ()
    ensures { [#"../05_pearlite.rs" 11 10 11 20] C05Pearlite_A_Type.a_a x = C05Pearlite_A_Type.a_a x }
    
end
module C05Pearlite_Solver
  use C05Pearlite_A_Type as C05Pearlite_A_Type
  val solver [@cfg:stackify] (x : C05Pearlite_A_Type.t_a) : ()
    ensures { [#"../05_pearlite.rs" 11 10 11 20] C05Pearlite_A_Type.a_a x = C05Pearlite_A_Type.a_a x }
    
end
module C05Pearlite_StructInPearlite_Interface
  use C05Pearlite_A_Type as C05Pearlite_A_Type
  val struct_in_pearlite [@cfg:stackify] (x : C05Pearlite_A_Type.t_a) : ()
    ensures { [#"../05_pearlite.rs" 14 10 14 30] x = C05Pearlite_A_Type.C_A false }
    
end
module C05Pearlite_StructInPearlite
  use C05Pearlite_A_Type as C05Pearlite_A_Type
  let rec cfg struct_in_pearlite [@cfg:stackify] [#"../05_pearlite.rs" 15 0 15 31] (x : C05Pearlite_A_Type.t_a) : ()
    ensures { [#"../05_pearlite.rs" 14 10 14 30] x = C05Pearlite_A_Type.C_A false }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : C05Pearlite_A_Type.t_a;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C05Pearlite_B_Type
  use mach.int.Int
  use mach.int.UInt32
  type t_b  =
    | C_B bool uint32
    
end
module C05Pearlite_StructOrder_Interface
  use mach.int.Int
  use mach.int.UInt32
  use C05Pearlite_B_Type as C05Pearlite_B_Type
  val struct_order [@cfg:stackify] (x : C05Pearlite_B_Type.t_b) : ()
    ensures { [#"../05_pearlite.rs" 22 10 22 48] x = C05Pearlite_B_Type.C_B false (0 : uint32) }
    
end
module C05Pearlite_StructOrder
  use mach.int.Int
  use mach.int.UInt32
  use C05Pearlite_B_Type as C05Pearlite_B_Type
  let rec cfg struct_order [@cfg:stackify] [#"../05_pearlite.rs" 23 0 23 25] (x : C05Pearlite_B_Type.t_b) : ()
    ensures { [#"../05_pearlite.rs" 22 10 22 48] x = C05Pearlite_B_Type.C_B false (0 : uint32) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : C05Pearlite_B_Type.t_b;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C05Pearlite_Field1IsTrue_Stub
  use C05Pearlite_B_Type as C05Pearlite_B_Type
  val ghost predicate field1_is_true (x : C05Pearlite_B_Type.t_b)
end
module C05Pearlite_Field1IsTrue_Interface
  use C05Pearlite_B_Type as C05Pearlite_B_Type
  val ghost predicate field1_is_true (x : C05Pearlite_B_Type.t_b)
end
module C05Pearlite_Field1IsTrue
  use C05Pearlite_B_Type as C05Pearlite_B_Type
  use mach.int.UInt32
  let rec ghost predicate field1_is_true [#"../05_pearlite.rs" 27 0 27 35] (x : C05Pearlite_B_Type.t_b)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../05_pearlite.rs" 30 8 34 9] match (x) with
      | C05Pearlite_B_Type.C_B (True) _ -> true
      | C05Pearlite_B_Type.C_B _f field2 -> pure {UInt32.to_int field2 = 0}
      | _ -> false
      end
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
end
module C05Pearlite_GhostClosure_Interface
  val ghost_closure [@cfg:stackify] (_ : ()) : ()
end
module C05Pearlite_GhostClosure
  use map.Map
  use mach.int.Int
  use mach.int.UInt32
  use map.Map
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use prelude.Mapping
  let rec cfg ghost_closure [@cfg:stackify] [#"../05_pearlite.rs" 38 0 38 22] (_ : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Map.map uint32 uint32);
  var _4 : ();
  {
    goto BB0
  }
  BB0 {
    _4 <- ();
    x_1 <- ([#"../05_pearlite.rs" 39 12 39 49] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Mapping.from_fn (fun (a : uint32) -> a)));
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
module C05Pearlite_PearliteClosure_Interface
  use map.Map
  use mach.int.Int
  use mach.int.UInt32
  use map.Map
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  val pearlite_closure [@cfg:stackify] (x : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Map.map uint32 bool)) : ()
end
module C05Pearlite_PearliteClosure
  use map.Map
  use mach.int.Int
  use mach.int.UInt32
  use map.Map
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  let rec cfg pearlite_closure [@cfg:stackify] [#"../05_pearlite.rs" 42 0 42 53] (x : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Map.map uint32 bool)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Map.map uint32 bool);
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C05Pearlite_Caller_Interface
  val caller [@cfg:stackify] (_ : ()) : ()
end
module C05Pearlite_Caller
  use map.Map
  use mach.int.Int
  use mach.int.UInt32
  use map.Map
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use prelude.Mapping
  clone C05Pearlite_PearliteClosure_Interface as PearliteClosure0
  let rec cfg caller [@cfg:stackify] [#"../05_pearlite.rs" 44 0 44 15] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : ();
  var _2 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Map.map uint32 bool);
  var _5 : ();
  {
    goto BB0
  }
  BB0 {
    _5 <- ();
    _2 <- ([#"../05_pearlite.rs" 45 21 45 53] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Mapping.from_fn (fun (a : uint32) -> true)));
    goto BB1
  }
  BB1 {
    _1 <- ([#"../05_pearlite.rs" 45 4 45 54] PearliteClosure0.pearlite_closure _2);
    goto BB2
  }
  BB2 {
    _0 <- ();
    return _0
  }
  
end
