
module T_11_array_types__UsesArray
  use prelude.prelude.Int64
  
  use prelude.prelude.Int
  
  use prelude.prelude.Slice
  
  type t_UsesArray  =
    | C_UsesArray (array int64)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_UsesArray (input:t_UsesArray) (ret  (field_0:array int64))= any
    [ good (field_0:array int64)-> {C_UsesArray field_0 = input} (! ret {field_0})
    | bad (field_0:array int64)-> {C_UsesArray field_0 <> input} {false} any ]
    
  
  function t_UsesArray__0 (self : t_UsesArray) : array int64 =
    match self with
      | C_UsesArray a -> a
      end
end
module M_11_array_types__omg
  let%span s11_array_types0 = "../11_array_types.rs" 9 8 9 9
  
  let%span s11_array_types1 = "../11_array_types.rs" 9 4 9 10
  
  let%span s11_array_types2 = "../11_array_types.rs" 9 13 9 14
  
  let%span s11_array_types3 = "../11_array_types.rs" 11 20 11 32
  
  let%span s11_array_types4 = "../11_array_types.rs" 7 11 7 53
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/ops.rs" 64 8 64 31
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = [%#span5] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int64
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Int64
  
  function index_logic'0 [@inline:trivial] (self : array int64) (ix : int) : int64 =
    [%#span6] Seq.get (Slice.id self) ix
  
  use T_11_array_types__UsesArray as T_11_array_types__UsesArray
  
  use T_11_array_types__UsesArray as UsesArray'0
  
  let rec omg (x:UsesArray'0.t_UsesArray) (return'  (ret:()))= {[%#s11_array_types4] Seq.length (Slice.id (T_11_array_types__UsesArray.t_UsesArray__0 x))
    > 0
    /\ Seq.length (Slice.id (T_11_array_types__UsesArray.t_UsesArray__0 x)) < UIntSize.to_int (v_MAX'0 : usize)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- [%#s11_array_types0] (0 : usize) ] s1
      | s1 = UsesArray'0.t_UsesArray {x} (fun (r0'0:array int64) ->  [ &_4 <- Slice.length r0'0 ] s2)
      | s2 = UIntSize.lt {_3} {_4} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s3)
      | s3 = {[@expl:index in bounds] [%#s11_array_types1] _5} s4
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = UsesArray'0.t_UsesArray {x}
          (fun (l_0'0:array int64) ->
            Slice.get <int64> {l_0'0} {_3}
              (fun (l'0:int64) ->
                Slice.set <int64> {l_0'0} {_3} {[%#s11_array_types2] (5 : int64)}
                  (fun (l'1:array int64) ->  [ &x <- UsesArray'0.C_UsesArray l'1 ] s1)))
      | s1 = {[@expl:assertion] [%#s11_array_types3] Int64.to_int (index_logic'0 (T_11_array_types__UsesArray.t_UsesArray__0 x) 0)
        = 5}
        s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : UsesArray'0.t_UsesArray = x
    | & _3 : usize = any_l ()
    | & _4 : usize = any_l ()
    | & _5 : bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_11_array_types__call_omg
  let%span s11_array_types0 = "../11_array_types.rs" 15 14 15 24
  
  let%span s11_array_types1 = "../11_array_types.rs" 15 15 15 20
  
  let%span span2 = "" 0 0 0 0
  
  let%span span3 = "../11_array_types.rs" 7 11 7 53
  
  use prelude.prelude.Intrinsic
  
  use T_11_array_types__UsesArray as UsesArray'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = [%#span2] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use T_11_array_types__UsesArray as T_11_array_types__UsesArray
  
  let rec omg'0 (x:UsesArray'0.t_UsesArray) (return'  (ret:()))= {[@expl:precondition] [%#span3] Seq.length (Slice.id (T_11_array_types__UsesArray.t_UsesArray__0 x))
    > 0
    /\ Seq.length (Slice.id (T_11_array_types__UsesArray.t_UsesArray__0 x)) < UIntSize.to_int (v_MAX'0 : usize)}
    any [ return' (result:())-> (! return' {result}) ] 
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Int64
  
  let rec call_omg (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Slice.create <int64> {[%#s11_array_types0] (5 : usize)} {fun (_ : int) -> [%#s11_array_types1] (3 : int64)}
          (fun (_res:array int64) ->  [ &arr <- _res ] s1)
      | s1 =  [ &_2 <- UsesArray'0.C_UsesArray arr ] s2
      | s2 = omg'0 {_2} (fun (_ret':()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & arr : array int64 = any_l () | & _2 : UsesArray'0.t_UsesArray = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
