
module C11ArrayTypes_UsesArray_Type
  use prelude.Int64
  use prelude.Int
  use prelude.Slice
  type t_usesarray  =
    | C_UsesArray (array int64)
    
  function any_l (_ : 'b) : 'a
  let rec t_usesarray (input:t_usesarray) (ret  (field_0:array int64))= any
    [ good (field_0:array int64)-> {C_UsesArray field_0 = input} (! ret {field_0})
    | bad (field_0:array int64)-> {C_UsesArray field_0 <> input} {false} any ]
    
  function usesarray_0 (self : t_usesarray) : array int64 =
    match self with
      | C_UsesArray a -> a
      end
end
module C11ArrayTypes_Omg
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  use prelude.Slice
  use prelude.Intrinsic
  use prelude.Int64
  use seq.Seq
  use prelude.Slice
  use prelude.Int64
  function index_logic'0 [@inline:trivial] (self : array int64) (ix : int) : int64 =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 65 8 65 31] Seq.get (Slice.id self) ix
  let rec index_logic'0 (self:array int64) (ix:int) (return'  (ret:int64))= any
    [ return' (result:int64)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use C11ArrayTypes_UsesArray_Type as C11ArrayTypes_UsesArray_Type
  let rec omg (x:C11ArrayTypes_UsesArray_Type.t_usesarray) (return'  (ret:()))= {[#"../11_array_types.rs" 7 11 7 53] Seq.length (Slice.id (C11ArrayTypes_UsesArray_Type.usesarray_0 x))
    > 0
    /\ Seq.length (Slice.id (C11ArrayTypes_UsesArray_Type.usesarray_0 x)) < UIntSize.to_int (max'0 : usize)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- [#"../11_array_types.rs" 9 8 9 9] (0 : usize) ] s1
      | s1 = C11ArrayTypes_UsesArray_Type.t_usesarray {x} (fun (r0'0:array int64) ->  [ &_4 <- Slice.length r0'0 ] s2)
      | s2 = UIntSize.lt {_3} {_4} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s3)
      | s3 = {[@expl:index in bounds] [#"../11_array_types.rs" 9 4 9 10] _5} s4
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = C11ArrayTypes_UsesArray_Type.t_usesarray {x}
          (fun (l_0'0:array int64) ->
            Slice.get <int64> {l_0'0} {_3}
              (fun (l'0:int64) ->
                Slice.set <int64> {l_0'0} {_3} {[#"../11_array_types.rs" 9 13 9 14] (5 : int64)}
                  (fun (l'1:array int64) ->
                     [ &x <- C11ArrayTypes_UsesArray_Type.C_UsesArray l'1 : C11ArrayTypes_UsesArray_Type.t_usesarray ] 
                    s1)))
      | s1 = {[@expl:assertion] [#"../11_array_types.rs" 11 20 11 32] Int64.to_int (index_logic'0 (C11ArrayTypes_UsesArray_Type.usesarray_0 x) 0)
        = 5}
        s2
      | s2 =  [ &_0 <- [#"../11_array_types.rs" 8 29 12 1] () ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : C11ArrayTypes_UsesArray_Type.t_usesarray = x
    | & _3 : usize = any_l () : usize
    | & _4 : usize = any_l () : usize
    | & _5 : bool = any_l () : bool ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C11ArrayTypes_CallOmg
  use prelude.Intrinsic
  use C11ArrayTypes_UsesArray_Type as C11ArrayTypes_UsesArray_Type
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  use prelude.Slice
  let rec omg'0 (x:C11ArrayTypes_UsesArray_Type.t_usesarray) (return'  (ret:()))= {[@expl:precondition] [#"../11_array_types.rs" 7 11 7 53] Seq.length (Slice.id (C11ArrayTypes_UsesArray_Type.usesarray_0 x))
    > 0
    /\ Seq.length (Slice.id (C11ArrayTypes_UsesArray_Type.usesarray_0 x)) < UIntSize.to_int (max'0 : usize)}
    any [ return' (result:())-> (! return' {result}) ] 
  use prelude.Slice
  use prelude.Int64
  let rec call_omg (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Slice.create
          <int64>
          {[#"../11_array_types.rs" 15 14 15 24] (5 : usize)}
          {fun (_ : int) -> [#"../11_array_types.rs" 15 15 15 20] (3 : int64)}
          (fun (_res:array int64) ->  [ &arr <- _res ] s1)
      | s1 =  [ &_2 <- C11ArrayTypes_UsesArray_Type.C_UsesArray arr ] s2
      | s2 = omg'0 {_2} (fun (_ret':()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & arr : array int64 = any_l () : array int64
    | & _2 : C11ArrayTypes_UsesArray_Type.t_usesarray = any_l () : C11ArrayTypes_UsesArray_Type.t_usesarray ]
     [ return' (result:())-> (! return' {result}) ] 
end
