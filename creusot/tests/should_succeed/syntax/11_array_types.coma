module M_11_array_types__omg [#"11_array_types.rs" 8 0 8 28]
  let%span s11_array_types0 = "11_array_types.rs" 9 8 9 9
  let%span s11_array_types1 = "11_array_types.rs" 9 4 9 10
  let%span s11_array_types2 = "11_array_types.rs" 9 13 9 14
  let%span s11_array_types3 = "11_array_types.rs" 11 20 11 32
  let%span s11_array_types4 = "11_array_types.rs" 7 11 7 53
  let%span sops5 = "../../../../creusot-contracts/src/logic/ops.rs" 64 8 64 31
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Int64
  
  type t_UsesArray'0  =
    { t_UsesArray__0'0: array int64 }
  
  use prelude.prelude.Int
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : array int64) (ix : int) : int64 =
    [%#sops5] Seq.get (Slice.id self) ix
  
  use prelude.prelude.Int64
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  meta "compute_max_steps" 1000000
  
  let rec omg'0 (x:t_UsesArray'0) (return'  (ret:()))= {[@expl:omg requires] [%#s11_array_types4] Seq.length (Slice.id x.t_UsesArray__0'0)
    > 0
    /\ Seq.length (Slice.id x.t_UsesArray__0'0) < UIntSize.to_int (v_MAX'0 : usize)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- [%#s11_array_types0] (0 : usize) ] s1
      | s1 =  [ &_4 <- Slice.length x.t_UsesArray__0'0 ] s2
      | s2 = UIntSize.lt {_3} {_4} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s3)
      | s3 = {[@expl:index in bounds] [%#s11_array_types1] _5} s4
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = Slice.set <int64> {x.t_UsesArray__0'0} {_3} {[%#s11_array_types2] (5 : int64)}
          (fun (r'0:array int64) ->  [ &x <- { t_UsesArray__0'0 = r'0 } ] s1)
      | s1 = {[@expl:assertion] [%#s11_array_types3] Int64.to_int (index_logic'0 x.t_UsesArray__0'0 0) = 5} s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : t_UsesArray'0 = x
    | & _3 : usize = any_l ()
    | & _4 : usize = any_l ()
    | & _5 : bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_11_array_types__call_omg [#"11_array_types.rs" 14 0 14 17]
  let%span s11_array_types0 = "11_array_types.rs" 15 14 15 24
  let%span s11_array_types1 = "11_array_types.rs" 15 15 15 20
  let%span s11_array_types2 = "11_array_types.rs" 7 11 7 53
  
  use prelude.prelude.Int64
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Slice
  
  type t_UsesArray'0  =
    { t_UsesArray__0'0: array int64 }
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  let rec omg'0 (x:t_UsesArray'0) (return'  (ret:()))= {[@expl:omg requires] [%#s11_array_types2] Seq.length (Slice.id x.t_UsesArray__0'0)
    > 0
    /\ Seq.length (Slice.id x.t_UsesArray__0'0) < UIntSize.to_int (v_MAX'0 : usize)}
    any [ return' (result:())-> (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec call_omg'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Slice.create <int64> {[%#s11_array_types0] (5 : usize)} {fun (_ : int) -> [%#s11_array_types1] (3 : int64)}
          (fun (_res:array int64) ->  [ &arr <- _res ] s1)
      | s1 =  [ &_2 <- { t_UsesArray__0'0 = arr } ] s2
      | s2 = omg'0 {_2} (fun (_ret':()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & arr : array int64 = any_l () | & _2 : t_UsesArray'0 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
