
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C10MutualRecTypes_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.UInt32
  use prelude.Int
  type t_node  =
    | C_Node (t_tree) uint32 (t_tree)
    with t_tree  =
    | C_Tree (Core_Option_Option_Type.t_option (t_node))
    
  let function tree_0 (self : t_tree) : Core_Option_Option_Type.t_option (t_node) = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Tree a -> a
      end
  let function node_left (self : t_node) : t_tree = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Node a _ _ -> a
      end
  let function node_right (self : t_node) : t_tree = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Node _ _ a -> a
      end
end
module C10MutualRecTypes_Tree_Type
  use export C10MutualRecTypes_Node_Type
end
module C10MutualRecTypes_UseTree
  use C10MutualRecTypes_Tree_Type as C10MutualRecTypes_Tree_Type
  use prelude.Borrow
  let rec cfg use_tree [#"../10_mutual_rec_types.rs" 13 0 13 25] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : C10MutualRecTypes_Tree_Type.t_tree) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../10_mutual_rec_types.rs" 13 26 13 28] _0 <- ([#"../10_mutual_rec_types.rs" 13 26 13 28] ());
    return _0
  }
  
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module C10MutualRecTypes_Impl0_Height
  use prelude.UInt64
  predicate invariant0 (self : uint64) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : uint64) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : uint64)
  val inv0 (_x : uint64) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : uint64 . inv0 x = true
  use C10MutualRecTypes_Node_Type as C10MutualRecTypes_Node_Type
  use C10MutualRecTypes_Tree_Type as C10MutualRecTypes_Tree_Type
  use prelude.Borrow
  use prelude.Int
  use int.Int
  use int.Int
  use int.Int
  use prelude.UInt64
  use prelude.Int
  function deep_model0 (self : uint64) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt64.to_int self
  val deep_model0 (self : uint64) : int
    ensures { result = deep_model0 self }
    
  val max0 (self : uint64) (other : uint64) : uint64
    requires {inv0 self}
    requires {inv0 other}
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 53 26 53 66] deep_model0 result >= deep_model0 self }
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 54 26 54 63] deep_model0 result >= deep_model0 other }
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 7 0 62 1] result = self \/ result = other }
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 56 16 56 79] deep_model0 self <= deep_model0 other
     -> result = other }
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 57 16 57 81] deep_model0 other < deep_model0 self
     -> result = self }
    ensures { inv0 result }
    
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec cfg height [#"../10_mutual_rec_types.rs" 16 4 16 31] [@cfg:stackify] [@cfg:subregion_analysis] (self : C10MutualRecTypes_Tree_Type.t_tree) : uint64
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint64;
  var self : C10MutualRecTypes_Tree_Type.t_tree = self;
  var n : C10MutualRecTypes_Node_Type.t_node;
  var _4 : uint64;
  var _5 : uint64;
  var _7 : uint64;
  {
    goto BB0
  }
  BB0 {
    switch (C10MutualRecTypes_Tree_Type.tree_0 self)
      | Core_Option_Option_Type.C_None -> goto BB2
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      end
  }
  BB1 {
    assert { [#"../10_mutual_rec_types.rs" 17 14 17 18] false };
    absurd
  }
  BB2 {
    goto BB4
  }
  BB3 {
    [#"../10_mutual_rec_types.rs" 19 22 19 23] n <- Core_Option_Option_Type.some_0 (C10MutualRecTypes_Tree_Type.tree_0 self);
    [#"../10_mutual_rec_types.rs" 19 29 19 44] _5 <- ([#"../10_mutual_rec_types.rs" 19 29 19 44] height (C10MutualRecTypes_Node_Type.node_left n));
    goto BB5
  }
  BB4 {
    [#"../10_mutual_rec_types.rs" 18 26 18 27] _0 <- ([#"../10_mutual_rec_types.rs" 18 26 18 27] (0 : uint64));
    goto BB8
  }
  BB5 {
    [#"../10_mutual_rec_types.rs" 19 49 19 65] _7 <- ([#"../10_mutual_rec_types.rs" 19 49 19 65] height (C10MutualRecTypes_Node_Type.node_right n));
    goto BB6
  }
  BB6 {
    [#"../10_mutual_rec_types.rs" 19 29 19 66] _4 <- ([#"../10_mutual_rec_types.rs" 19 29 19 66] max0 _5 _7);
    _5 <- any uint64;
    _7 <- any uint64;
    goto BB7
  }
  BB7 {
    [#"../10_mutual_rec_types.rs" 19 29 19 70] _0 <- _4 + ([#"../10_mutual_rec_types.rs" 19 69 19 70] (1 : uint64));
    _4 <- any uint64;
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
