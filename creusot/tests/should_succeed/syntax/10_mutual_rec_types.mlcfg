
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module C10MutualRecTypes_Node_Type
  use prelude.Int
  use prelude.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_node  =
    | C_Node (t_tree) uint32 (t_tree)
    with t_tree  =
    | C_Tree (Core_Option_Option_Type.t_option (t_node))
    
  let function tree_0 (self : t_tree) : Core_Option_Option_Type.t_option (t_node) = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Tree a -> a
      end
  let function node_left (self : t_node) : t_tree = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node a _ _ -> a
      end
  let function node_right (self : t_node) : t_tree = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node _ _ a -> a
      end
end
module C10MutualRecTypes_Tree_Type
  use export C10MutualRecTypes_Node_Type
end
module C10MutualRecTypes_UseTree_Interface
  use prelude.Borrow
  use C10MutualRecTypes_Tree_Type as C10MutualRecTypes_Tree_Type
  val use_tree [#"../10_mutual_rec_types.rs" 13 0 13 25] (_1' : C10MutualRecTypes_Tree_Type.t_tree) : ()
end
module C10MutualRecTypes_UseTree
  use prelude.Borrow
  use C10MutualRecTypes_Tree_Type as C10MutualRecTypes_Tree_Type
  let rec cfg use_tree [#"../10_mutual_rec_types.rs" 13 0 13 25] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : C10MutualRecTypes_Tree_Type.t_tree) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : C10MutualRecTypes_Tree_Type.t_tree;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate ge_log (self : self) (o : self) =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 31 20 31 53] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Less
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate le_log (self : self) (o : self) =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 11 20 11 56] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate lt_log (self : self) (o : self) =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 21 20 21 53] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Less
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module Core_Cmp_Ord_Max_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val max (self : self) (other : self) : self
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 47 26 47 66] GeLog0.ge_log (DeepModel0.deep_model result) (DeepModel0.deep_model self) }
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 48 26 48 63] GeLog0.ge_log (DeepModel0.deep_model result) (DeepModel0.deep_model other) }
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 7 0 56 1] result = self \/ result = other }
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 50 16 50 79] LeLog0.le_log (DeepModel0.deep_model self) (DeepModel0.deep_model other) -> result = other }
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 51 16 51 81] LtLog0.lt_log (DeepModel0.deep_model other) (DeepModel0.deep_model self) -> result = self }
    
end
module CreusotContracts_Std1_Num_Impl10_DeepModel_Stub
  use prelude.Int
  use prelude.UInt64
  function deep_model (self : uint64) : int
end
module CreusotContracts_Std1_Num_Impl10_DeepModel_Interface
  use prelude.Int
  use prelude.UInt64
  function deep_model (self : uint64) : int
  val deep_model (self : uint64) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl10_DeepModel
  use prelude.Int
  use prelude.UInt64
  function deep_model (self : uint64) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt64.to_int self
  val deep_model (self : uint64) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Ord_Impl2_GeLog_Stub
  use prelude.Int
  predicate ge_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl2_GeLog_Interface
  use prelude.Int
  predicate ge_log (self : int) (_2' : int)
  val ge_log (self : int) (_2' : int) : bool
    ensures { result = ge_log self _2' }
    
end
module CreusotContracts_Logic_Ord_Impl2_GeLog
  use prelude.Int
  use int.Int
  predicate ge_log (self : int) (_2' : int) =
    Int.(>=) self _2'
  val ge_log (self : int) (_2' : int) : bool
    ensures { result = ge_log self _2' }
    
end
module CreusotContracts_Logic_Ord_Impl2_LeLog_Stub
  use prelude.Int
  predicate le_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl2_LeLog_Interface
  use prelude.Int
  predicate le_log (self : int) (_2' : int)
  val le_log (self : int) (_2' : int) : bool
    ensures { result = le_log self _2' }
    
end
module CreusotContracts_Logic_Ord_Impl2_LeLog
  use prelude.Int
  use int.Int
  predicate le_log (self : int) (_2' : int) =
    Int.(<=) self _2'
  val le_log (self : int) (_2' : int) : bool
    ensures { result = le_log self _2' }
    
end
module CreusotContracts_Logic_Ord_Impl2_LtLog_Stub
  use prelude.Int
  predicate lt_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl2_LtLog_Interface
  use prelude.Int
  predicate lt_log (self : int) (_2' : int)
  val lt_log (self : int) (_2' : int) : bool
    ensures { result = lt_log self _2' }
    
end
module CreusotContracts_Logic_Ord_Impl2_LtLog
  use prelude.Int
  use int.Int
  predicate lt_log (self : int) (_2' : int) =
    Int.(<) self _2'
  val lt_log (self : int) (_2' : int) : bool
    ensures { result = lt_log self _2' }
    
end
module C10MutualRecTypes_Impl0_Height_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use C10MutualRecTypes_Tree_Type as C10MutualRecTypes_Tree_Type
  val height [#"../10_mutual_rec_types.rs" 16 4 16 31] (self : C10MutualRecTypes_Tree_Type.t_tree) : uint64
end
module C10MutualRecTypes_Impl0_Height
  use prelude.Int
  use prelude.UInt64
  use prelude.Borrow
  use prelude.IntSize
  use prelude.Int
  clone CreusotContracts_Logic_Ord_Impl2_LtLog as LtLog0
  clone CreusotContracts_Logic_Ord_Impl2_LeLog as LeLog0
  clone CreusotContracts_Logic_Ord_Impl2_GeLog as GeLog0
  clone CreusotContracts_Std1_Num_Impl10_DeepModel as DeepModel0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use C10MutualRecTypes_Node_Type as C10MutualRecTypes_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone Core_Cmp_Ord_Max_Interface as Max0 with
    type self = uint64,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    type DeepModelTy0.deepModelTy = int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use C10MutualRecTypes_Tree_Type as C10MutualRecTypes_Tree_Type
  let rec cfg height [#"../10_mutual_rec_types.rs" 16 4 16 31] [@cfg:stackify] [@cfg:subregion_analysis] (self : C10MutualRecTypes_Tree_Type.t_tree) : uint64
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint64;
  var self_1 : C10MutualRecTypes_Tree_Type.t_tree;
  var _2 : isize;
  var n_3 : C10MutualRecTypes_Node_Type.t_node;
  var _4 : uint64;
  var _5 : uint64;
  var _6 : C10MutualRecTypes_Tree_Type.t_tree;
  var _7 : uint64;
  var _8 : C10MutualRecTypes_Tree_Type.t_tree;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (C10MutualRecTypes_Tree_Type.tree_0 self_1)
      | Core_Option_Option_Type.C_None -> goto BB1
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    n_3 <- Core_Option_Option_Type.some_0 (C10MutualRecTypes_Tree_Type.tree_0 self_1);
    _6 <- C10MutualRecTypes_Node_Type.node_left n_3;
    _5 <- ([#"../10_mutual_rec_types.rs" 19 29 19 44] height _6);
    goto BB5
  }
  BB3 {
    absurd
  }
  BB4 {
    _0 <- ([#"../10_mutual_rec_types.rs" 18 26 18 27] (0 : uint64));
    goto BB8
  }
  BB5 {
    _8 <- C10MutualRecTypes_Node_Type.node_right n_3;
    _7 <- ([#"../10_mutual_rec_types.rs" 19 49 19 65] height _8);
    goto BB6
  }
  BB6 {
    _4 <- ([#"../10_mutual_rec_types.rs" 19 29 19 66] Max0.max _5 _7);
    goto BB7
  }
  BB7 {
    _0 <- ([#"../10_mutual_rec_types.rs" 19 29 19 70] _4 + ([#"../10_mutual_rec_types.rs" 19 69 19 70] (1 : uint64)));
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
