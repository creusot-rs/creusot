
module C12GhostCode_GhostArg_Interface
  use prelude.Ghost
  use mach.int.Int
  use mach.int.UInt32
  val ghost_arg [@cfg:stackify] [#"../12_ghost_code.rs" 4 0 4 31] (g : Ghost.ghost_ty uint32) : ()
end
module C12GhostCode_GhostArg
  use prelude.Ghost
  use mach.int.Int
  use mach.int.UInt32
  let rec cfg ghost_arg [@cfg:stackify] [#"../12_ghost_code.rs" 4 0 4 31] (g : Ghost.ghost_ty uint32) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var g_1 : Ghost.ghost_ty uint32;
  var _x_2 : Ghost.ghost_ty uint32;
  var _5 : ();
  {
    g_1 <- g;
    goto BB0
  }
  BB0 {
    _5 <- ();
    _x_2 <- ([#"../12_ghost_code.rs" 5 25 5 38] Ghost.new (Ghost.inner g_1));
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Core_Num_Impl12_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val new [@cfg:stackify] (_1' : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val new [@cfg:stackify] (_1' : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl6_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl6_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl6_Resolve
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use mach.int.Int
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module C12GhostCode_GhostVec_Interface
  val ghost_vec [@cfg:stackify] [#"../12_ghost_code.rs" 8 0 8 18] (_1' : ()) : ()
end
module C12GhostCode_GhostVec
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = uint32
  clone Core_Num_Impl12_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl6_Resolve as Resolve0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Resolve0.resolve = Resolve1.resolve,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl0_New_Interface as New0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg ghost_vec [@cfg:stackify] [#"../12_ghost_code.rs" 8 0 8 18] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var _s_2 : Ghost.ghost_ty (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global));
  var _4 : ();
  {
    goto BB0
  }
  BB0 {
    x_1 <- ([#"../12_ghost_code.rs" 9 22 9 32] New0.new ());
    goto BB1
  }
  BB1 {
    _4 <- ();
    _s_2 <- ([#"../12_ghost_code.rs" 10 32 10 44] Ghost.new x_1);
    goto BB2
  }
  BB2 {
    _0 <- ();
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve x_1 };
    return _0
  }
  
end
module C12GhostCode_Omg_Stub
  function omg [#"../12_ghost_code.rs" 14 0 14 12] (_1' : ()) : ()
end
module C12GhostCode_Omg_Interface
  function omg [#"../12_ghost_code.rs" 14 0 14 12] (_1' : ()) : ()
end
module C12GhostCode_Omg
  function omg [#"../12_ghost_code.rs" 14 0 14 12] (_1' : ()) : () =
    [#"../12_ghost_code.rs" 13 0 13 8] ()
  val omg [#"../12_ghost_code.rs" 14 0 14 12] (_1' : ()) : ()
    ensures { result = omg _1' }
    
end
module C12GhostCode_GhostCopy_Interface
  val ghost_copy [@cfg:stackify] [#"../12_ghost_code.rs" 16 0 16 19] (_1' : ()) : ()
end
module C12GhostCode_GhostCopy
  use mach.int.Int
  use mach.int.Int32
  use prelude.Ghost
  use seq.Seq
  let rec cfg ghost_copy [@cfg:stackify] [#"../12_ghost_code.rs" 16 0 16 19] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : int32;
  var _s_2 : Ghost.ghost_ty (Seq.seq int32);
  var _5 : ();
  var _6 : Ghost.ghost_ty (Seq.seq int32);
  var _9 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- ([#"../12_ghost_code.rs" 17 12 17 13] (0 : int32));
    _5 <- ();
    _s_2 <- ([#"../12_ghost_code.rs" 18 17 18 46] Ghost.new (Seq.snoc (Seq.empty ) (0 : int32)));
    goto BB1
  }
  BB1 {
    _9 <- ();
    _6 <- ([#"../12_ghost_code.rs" 19 9 19 34] Ghost.new (Seq.snoc (Ghost.inner _s_2) a_1));
    goto BB2
  }
  BB2 {
    _s_2 <- _6;
    _6 <- any Ghost.ghost_ty (Seq.seq int32);
    _0 <- ();
    return _0
  }
  
end
module C12GhostCode_LogiDrop_Stub
  type t
  function logi_drop [#"../12_ghost_code.rs" 23 0 23 21] (_1' : t) : ()
end
module C12GhostCode_LogiDrop_Interface
  type t
  function logi_drop [#"../12_ghost_code.rs" 23 0 23 21] (_1' : t) : ()
end
module C12GhostCode_LogiDrop
  type t
  function logi_drop [#"../12_ghost_code.rs" 23 0 23 21] (_1' : t) : () =
    [#"../12_ghost_code.rs" 22 0 22 8] ()
  val logi_drop [#"../12_ghost_code.rs" 23 0 23 21] (_1' : t) : ()
    ensures { result = logi_drop _1' }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type
  type t
  type a
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Interface as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module C12GhostCode_GhostCheck_Interface
  val ghost_check [@cfg:stackify] [#"../12_ghost_code.rs" 25 0 25 20] (_1' : ()) : ()
end
module C12GhostCode_GhostCheck
  use mach.int.Int
  use mach.int.Int32
  use prelude.Ghost
  use prelude.Borrow
  use prelude.UIntSize
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = int32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = int32,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = int32,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Vec_Impl6_Resolve as Resolve0 with
    type t = int32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Resolve0.resolve = Resolve1.resolve,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = int32,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = int32,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone C12GhostCode_LogiDrop as LogiDrop0 with
    type t = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
  clone Alloc_Vec_Impl0_New_Interface as New0 with
    type t = int32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg ghost_check [@cfg:stackify] [#"../12_ghost_code.rs" 25 0 25 20] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var _2 : Ghost.ghost_ty ();
  var _4 : ();
  var _5 : ();
  var _6 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
  var _7 : ();
  var _8 : bool;
  var _9 : bool;
  var _10 : usize;
  var _11 : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var _12 : ();
  {
    goto BB0
  }
  BB0 {
    x_1 <- ([#"../12_ghost_code.rs" 26 16 26 26] New0.new ());
    goto BB1
  }
  BB1 {
    _4 <- ();
    _2 <- ([#"../12_ghost_code.rs" 29 4 29 31] Ghost.new (let _ = LogiDrop0.logi_drop x_1 in ()));
    goto BB2
  }
  BB2 {
    _6 <- borrow_mut x_1;
    x_1 <-  ^ _6;
    _5 <- ([#"../12_ghost_code.rs" 31 4 31 13] Push0.push _6 ([#"../12_ghost_code.rs" 31 11 31 12] (0 : int32)));
    goto BB3
  }
  BB3 {
    _11 <- x_1;
    _10 <- ([#"../12_ghost_code.rs" 33 12 33 19] Len0.len _11);
    goto BB4
  }
  BB4 {
    _9 <- ([#"../12_ghost_code.rs" 33 12 33 24] _10 = ([#"../12_ghost_code.rs" 33 23 33 24] (1 : usize)));
    _8 <- not _9;
    switch (_8)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    absurd
  }
  BB6 {
    _7 <- ();
    _0 <- ();
    goto BB7
  }
  BB7 {
    assume { Resolve0.resolve x_1 };
    return _0
  }
  
end
module C12GhostCode_MyStruct_Type
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Ghost
  type t_mystruct  =
    | C_MyStruct uint32 (Ghost.ghost_ty uint32)
    
  let function mystruct_g (self : t_mystruct) : Ghost.ghost_ty uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MyStruct _ a -> a
      end
  let function mystruct_f (self : t_mystruct) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MyStruct a _ -> a
      end
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Int_Impl11_ShallowModelTy_Type
  use mach.int.Int
  type shallowModelTy  =
    int
end
module CreusotContracts_Logic_Int_Impl11_ShallowModel_Stub
  use mach.int.Int
  use mach.int.UInt32
  function shallow_model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl11_ShallowModel_Interface
  use mach.int.Int
  use mach.int.UInt32
  function shallow_model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl11_ShallowModel
  use mach.int.Int
  use mach.int.UInt32
  function shallow_model (self : uint32) : int =
    UInt32.to_int self
  val shallow_model (self : uint32) : int
    ensures { result = shallow_model self }
    
end
module C12GhostCode_TakesStruct_Interface
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Int_Impl11_ShallowModelTy_Type as ShallowModelTy0
  clone CreusotContracts_Ghost_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  use C12GhostCode_MyStruct_Type as C12GhostCode_MyStruct_Type
  val takes_struct [@cfg:stackify] [#"../12_ghost_code.rs" 42 0 42 36] (x : C12GhostCode_MyStruct_Type.t_mystruct) : ()
    requires {[#"../12_ghost_code.rs" 41 11 41 20] ShallowModel0.shallow_model (C12GhostCode_MyStruct_Type.mystruct_g x) = 0}
    
end
module C12GhostCode_TakesStruct
  use prelude.Ghost
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Int_Impl11_ShallowModel as ShallowModel2
  clone CreusotContracts_Logic_Int_Impl11_ShallowModelTy_Type as ShallowModelTy0
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel0 with
    type t = uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  use C12GhostCode_MyStruct_Type as C12GhostCode_MyStruct_Type
  let rec cfg takes_struct [@cfg:stackify] [#"../12_ghost_code.rs" 42 0 42 36] (x : C12GhostCode_MyStruct_Type.t_mystruct) : ()
    requires {[#"../12_ghost_code.rs" 41 11 41 20] ShallowModel0.shallow_model (C12GhostCode_MyStruct_Type.mystruct_g x) = 0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : C12GhostCode_MyStruct_Type.t_mystruct;
  var _3 : Ghost.ghost_ty uint32;
  var _6 : ();
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _6 <- ();
    _3 <- ([#"../12_ghost_code.rs" 43 10 43 24] Ghost.new (C12GhostCode_MyStruct_Type.mystruct_f x_1));
    goto BB1
  }
  BB1 {
    x_1 <- (let C12GhostCode_MyStruct_Type.C_MyStruct a b = x_1 in C12GhostCode_MyStruct_Type.C_MyStruct a _3);
    _3 <- any Ghost.ghost_ty uint32;
    _0 <- ();
    return _0
  }
  
end
