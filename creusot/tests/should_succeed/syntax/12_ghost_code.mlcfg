
module C12GhostCode_GhostArg_Interface
  use prelude.Ghost
  use prelude.Int
  use prelude.UInt32
  val ghost_arg [#"../12_ghost_code.rs" 4 0 4 31] (g : Ghost.ghost_ty uint32) : ()
end
module C12GhostCode_GhostArg
  use prelude.Ghost
  use prelude.Int
  use prelude.UInt32
  let rec cfg ghost_arg [#"../12_ghost_code.rs" 4 0 4 31] [@cfg:stackify] [@cfg:subregion_analysis] (g : Ghost.ghost_ty uint32) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var g : Ghost.ghost_ty uint32 = g;
  var _x : Ghost.ghost_ty uint32;
  {
    goto BB0
  }
  BB0 {
    _x <- ([#"../12_ghost_code.rs" 5 25 5 35] Ghost.new (Ghost.inner g));
    goto BB1
  }
  BB1 {
    _0 <- ([#"../12_ghost_code.rs" 4 32 6 1] ());
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type a
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    axiom .
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve
  type t
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (IndexLogic0.index_logic self i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  val new (_1 : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 68 26 68 44] Seq.length (ShallowModel0.shallow_model result) = 0 }
    ensures { Inv0.inv result }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module CreusotContracts_Resolve_Impl3_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl3_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl3_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 45 8 45 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module C12GhostCode_GhostVec_Interface
  val ghost_vec [#"../12_ghost_code.rs" 8 0 8 18] (_1 : ()) : ()
end
module C12GhostCode_GhostVec
  use prelude.Ghost
  use prelude.Int
  use prelude.UInt32
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq uint32
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Seq.seq uint32,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl3_Resolve as Resolve1 with
    type t = uint32
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl0_New_Interface as New0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv
  let rec cfg ghost_vec [#"../12_ghost_code.rs" 8 0 8 18] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var _s : Ghost.ghost_ty (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global));
  {
    goto BB0
  }
  BB0 {
    x <- ([#"../12_ghost_code.rs" 9 22 9 32] New0.new ());
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve x };
    _s <- ([#"../12_ghost_code.rs" 10 32 10 41] Ghost.new x);
    goto BB2
  }
  BB2 {
    _0 <- ([#"../12_ghost_code.rs" 8 19 11 1] ());
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C12GhostCode_Omg_Stub
  function omg [#"../12_ghost_code.rs" 15 0 15 12] (_1 : ()) : ()
end
module C12GhostCode_Omg_Interface
  function omg [#"../12_ghost_code.rs" 15 0 15 12] (_1 : ()) : ()
  val omg [#"../12_ghost_code.rs" 15 0 15 12] (_1 : ()) : ()
    ensures { result = omg _1 }
    
end
module C12GhostCode_Omg
  function omg [#"../12_ghost_code.rs" 15 0 15 12] (_1 : ()) : () =
    [#"../12_ghost_code.rs" 14 0 14 8] ()
  val omg [#"../12_ghost_code.rs" 15 0 15 12] (_1 : ()) : ()
    ensures { result = omg _1 }
    
end
module C12GhostCode_GhostCopy_Interface
  val ghost_copy [#"../12_ghost_code.rs" 17 0 17 19] (_1 : ()) : ()
end
module C12GhostCode_GhostCopy
  use prelude.Int
  use prelude.Int32
  use seq.Seq
  use prelude.Ghost
  let rec cfg ghost_copy [#"../12_ghost_code.rs" 17 0 17 19] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : int32;
  var _s : Ghost.ghost_ty (Seq.seq int32);
  var _4 : Ghost.ghost_ty (Seq.seq int32);
  {
    goto BB0
  }
  BB0 {
    a <- ([#"../12_ghost_code.rs" 18 12 18 13] [#"../12_ghost_code.rs" 18 12 18 13] (0 : int32));
    _s <- ([#"../12_ghost_code.rs" 19 17 19 46] Ghost.new (Seq.snoc (Seq.empty ) (0 : int32)));
    goto BB1
  }
  BB1 {
    _4 <- ([#"../12_ghost_code.rs" 20 9 20 27] Ghost.new (Seq.snoc (Ghost.inner _s) a));
    goto BB2
  }
  BB2 {
    _s <- _4;
    _4 <- any Ghost.ghost_ty (Seq.seq int32);
    _0 <- ([#"../12_ghost_code.rs" 17 20 21 1] ());
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C12GhostCode_GhostIsCopy_Interface
  val ghost_is_copy [#"../12_ghost_code.rs" 23 0 23 22] (_1 : ()) : ()
end
module C12GhostCode_GhostIsCopy
  use prelude.Int
  use prelude.Int32
  use prelude.Ghost
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = int32
  let rec cfg ghost_is_copy [#"../12_ghost_code.rs" 23 0 23 22] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : int32;
  var r : borrowed int32;
  var g : Ghost.ghost_ty (borrowed int32);
  var g1 : Ghost.ghost_ty (borrowed int32);
  var g2 : Ghost.ghost_ty (borrowed int32);
  {
    goto BB0
  }
  BB0 {
    x <- ([#"../12_ghost_code.rs" 24 16 24 17] [#"../12_ghost_code.rs" 24 16 24 17] (0 : int32));
    r <- Borrow.borrow_mut x;
    x <-  ^ r;
    assume { Resolve0.resolve r };
    g <- ([#"../12_ghost_code.rs" 26 12 26 21] Ghost.new r);
    goto BB1
  }
  BB1 {
    g1 <- g;
    g2 <- g;
    assert { [@expl:assertion] [#"../12_ghost_code.rs" 29 18 29 26] g1 = g2 };
    _0 <- ([#"../12_ghost_code.rs" 23 23 30 1] ());
    return _0
  }
  
end
module C12GhostCode_LogiDrop_Stub
  type t
  function logi_drop [#"../12_ghost_code.rs" 33 0 33 21] (_1 : t) : ()
end
module C12GhostCode_LogiDrop_Interface
  type t
  function logi_drop [#"../12_ghost_code.rs" 33 0 33 21] (_1 : t) : ()
  val logi_drop [#"../12_ghost_code.rs" 33 0 33 21] (_1 : t) : ()
    ensures { result = logi_drop _1 }
    
end
module C12GhostCode_LogiDrop
  type t
  function logi_drop [#"../12_ghost_code.rs" 33 0 33 21] (_1 : t) : () =
    [#"../12_ghost_code.rs" 32 0 32 8] ()
  val logi_drop [#"../12_ghost_code.rs" 33 0 33 21] (_1 : t) : ()
    ensures { result = logi_drop _1 }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl7_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    axiom .
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  val push (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    requires {Inv0.inv self}
    requires {Inv1.inv value}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 78 26 78 51] ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Model_Impl5_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl5_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 83 8 83 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  val len (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module C12GhostCode_GhostCheck_Interface
  val ghost_check [#"../12_ghost_code.rs" 35 0 35 20] (_1 : ()) : ()
end
module C12GhostCode_GhostCheck
  use prelude.Ghost
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Seq.seq int32
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Seq.seq int32,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = int32
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = int32,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl3_Resolve as Resolve1 with
    type t = int32
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = int32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = int32,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve0 with
    type t = int32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Resolve0.resolve = Resolve1.resolve
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq int32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = int32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv3.inv,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq int32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = int32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  clone C12GhostCode_LogiDrop as LogiDrop0 with
    type t = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
  clone Alloc_Vec_Impl0_New_Interface as New0 with
    type t = int32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv
  let rec cfg ghost_check [#"../12_ghost_code.rs" 35 0 35 20] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var _2 : Ghost.ghost_ty ();
  var _4 : ();
  var _5 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
  var _9 : usize;
  {
    goto BB0
  }
  BB0 {
    x <- ([#"../12_ghost_code.rs" 36 16 36 26] New0.new ());
    goto BB1
  }
  BB1 {
    _2 <- ([#"../12_ghost_code.rs" 39 4 39 25] Ghost.new (let _ = LogiDrop0.logi_drop x in ()));
    goto BB2
  }
  BB2 {
    _5 <- Borrow.borrow_mut x;
    x <-  ^ _5;
    _4 <- ([#"../12_ghost_code.rs" 41 4 41 13] Push0.push _5 ([#"../12_ghost_code.rs" 41 11 41 12] [#"../12_ghost_code.rs" 41 11 41 12] (0 : int32)));
    _5 <- any borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
    goto BB3
  }
  BB3 {
    _9 <- ([#"../12_ghost_code.rs" 43 12 43 19] Len0.len ([#"../12_ghost_code.rs" 43 12 43 19] x));
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve x };
    switch ([#"../12_ghost_code.rs" 43 4 43 25] not ([#"../12_ghost_code.rs" 43 12 43 24] _9 = ([#"../12_ghost_code.rs" 43 23 43 24] [#"../12_ghost_code.rs" 43 23 43 24] (1 : usize))))
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    absurd
  }
  BB6 {
    _0 <- ([#"../12_ghost_code.rs" 35 21 44 1] ());
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module C12GhostCode_MyStruct_Type
  use prelude.Int
  use prelude.UInt32
  use prelude.Ghost
  type t_mystruct  =
    | C_MyStruct uint32 (Ghost.ghost_ty uint32)
    
  let function mystruct_g (self : t_mystruct) : Ghost.ghost_ty uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MyStruct _ a -> a
      end
  let function mystruct_f (self : t_mystruct) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MyStruct a _ -> a
      end
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/ghost.rs" 27 20 27 48] ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Num_Impl6_ShallowModel_Stub
  use prelude.Int
  use prelude.UInt32
  function shallow_model (self : uint32) : int
end
module CreusotContracts_Std1_Num_Impl6_ShallowModel_Interface
  use prelude.Int
  use prelude.UInt32
  function shallow_model (self : uint32) : int
  val shallow_model (self : uint32) : int
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Num_Impl6_ShallowModel
  use prelude.Int
  use prelude.UInt32
  function shallow_model (self : uint32) : int =
    UInt32.to_int self
  val shallow_model (self : uint32) : int
    ensures { result = shallow_model self }
    
end
module C12GhostCode_TakesStruct_Interface
  use prelude.Int
  use prelude.UInt32
  use prelude.Int
  clone CreusotContracts_Ghost_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = uint32,
    type ShallowModelTy0.shallowModelTy = int
  use C12GhostCode_MyStruct_Type as C12GhostCode_MyStruct_Type
  val takes_struct [#"../12_ghost_code.rs" 52 0 52 36] (x : C12GhostCode_MyStruct_Type.t_mystruct) : ()
    requires {[#"../12_ghost_code.rs" 51 11 51 20] ShallowModel0.shallow_model (C12GhostCode_MyStruct_Type.mystruct_g x) = 0}
    
end
module C12GhostCode_TakesStruct
  use prelude.Ghost
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Std1_Num_Impl6_ShallowModel as ShallowModel2
  use prelude.Int
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel1 with
    type t = uint32,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel0 with
    type t = uint32,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  use C12GhostCode_MyStruct_Type as C12GhostCode_MyStruct_Type
  let rec cfg takes_struct [#"../12_ghost_code.rs" 52 0 52 36] [@cfg:stackify] [@cfg:subregion_analysis] (x : C12GhostCode_MyStruct_Type.t_mystruct) : ()
    requires {[#"../12_ghost_code.rs" 51 11 51 20] ShallowModel0.shallow_model (C12GhostCode_MyStruct_Type.mystruct_g x) = 0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : C12GhostCode_MyStruct_Type.t_mystruct = x;
  var _3 : Ghost.ghost_ty uint32;
  {
    goto BB0
  }
  BB0 {
    _3 <- ([#"../12_ghost_code.rs" 53 10 53 21] Ghost.new (C12GhostCode_MyStruct_Type.mystruct_f x));
    goto BB1
  }
  BB1 {
    x <- (let C12GhostCode_MyStruct_Type.C_MyStruct a b = x in C12GhostCode_MyStruct_Type.C_MyStruct a _3);
    _3 <- any Ghost.ghost_ty uint32;
    _0 <- ([#"../12_ghost_code.rs" 52 37 54 1] ());
    return _0
  }
  
end
