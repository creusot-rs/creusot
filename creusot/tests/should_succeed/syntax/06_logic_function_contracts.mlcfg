
module C06LogicFunctionContracts_Sum_Stub
  use seq.Seq
  use mach.int.Int
  val ghost function sum (seq : Seq.seq int) : int
end
module C06LogicFunctionContracts_Sum_Interface
  use seq.Seq
  use mach.int.Int
  val ghost function sum (seq : Seq.seq int) : int
end
module C06LogicFunctionContracts_Sum
  use seq.Seq
  use mach.int.Int
  use seq_ext.SeqExt
  val ghost function sum [#"../06_logic_function_contracts.rs" 7 0 7 32] (seq : Seq.seq int) : int
  axiom sum_spec : forall seq : Seq.seq int . true
end
module C06LogicFunctionContracts_Sum_Impl
  use seq.Seq
  use mach.int.Int
  use seq_ext.SeqExt
  let rec ghost function sum (seq : Seq.seq int) : int
    variant {[#"../06_logic_function_contracts.rs" 6 10 6 19] Seq.length seq}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_logic_function_contracts.rs" 8 4 13 5] if pure {Seq.length seq = 0} then
      0
    else
      Seq.get seq (Seq.length seq - 1) + sum (SeqExt.subsequence seq 0 (Seq.length seq - 1))
    
end
module C06LogicFunctionContracts_AllZero_Stub
  use seq.Seq
  use mach.int.Int
  val ghost predicate all_zero (seq : Seq.seq int)
end
module C06LogicFunctionContracts_AllZero_Interface
  use seq.Seq
  use mach.int.Int
  val ghost predicate all_zero (seq : Seq.seq int)
end
module C06LogicFunctionContracts_AllZero
  use seq.Seq
  use mach.int.Int
  use seq_ext.SeqExt
  val ghost predicate all_zero [#"../06_logic_function_contracts.rs" 18 0 18 38] (seq : Seq.seq int)
  axiom all_zero_spec : forall seq : Seq.seq int . true
end
module C06LogicFunctionContracts_AllZero_Impl
  use seq.Seq
  use mach.int.Int
  use seq_ext.SeqExt
  let rec ghost function all_zero (seq : Seq.seq int) : bool
    variant {[#"../06_logic_function_contracts.rs" 17 10 17 19] Seq.length seq}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_logic_function_contracts.rs" 19 4 24 5] if pure {Seq.length seq = 0} then
      true
    else
      pure {Seq.get seq (Seq.length seq - 1) = 0} && all_zero (SeqExt.subsequence seq 0 (Seq.length seq - 1))
    
end
module C06LogicFunctionContracts_Stupid_Stub
  type t
  use mach.int.Int
  val ghost predicate stupid (x : t) (i : int)
end
module C06LogicFunctionContracts_Stupid_Interface
  type t
  use mach.int.Int
  val ghost predicate stupid (x : t) (i : int)
end
module C06LogicFunctionContracts_Stupid
  type t
  use mach.int.Int
  val ghost predicate stupid [#"../06_logic_function_contracts.rs" 29 0 29 38] (x : t) (i : int)
  axiom stupid_spec : forall x : t, i : int . true
end
module C06LogicFunctionContracts_Stupid_Impl
  type t
  use mach.int.Int
  let rec ghost function stupid (x : t) (i : int) : bool
    variant {[#"../06_logic_function_contracts.rs" 28 10 28 11] i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_logic_function_contracts.rs" 30 4 38 5] if i <= 0 then true else if pure {x = x} then stupid x 0 else false
end
