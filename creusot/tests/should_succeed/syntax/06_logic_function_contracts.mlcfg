
module C06LogicFunctionContracts_Sum_Impl
  use seq_ext.SeqExt
  use seq.Seq
  use prelude.Int
  use prelude.Int
  use seq.Seq
  use seq.Seq
  let rec ghost function sum [#"../06_logic_function_contracts.rs" 10 0 10 32] (seq : Seq.seq int) : int
    variant {[#"../06_logic_function_contracts.rs" 9 10 9 19] Seq.length seq}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_logic_function_contracts.rs" 11 4 16 5] if pure {Seq.length seq = 0} then
      0
    else
      Seq.get seq (Seq.length seq - 1) + sum (SeqExt.subsequence seq 0 (Seq.length seq - 1))
    
end
module C06LogicFunctionContracts_AllZero_Impl
  use seq_ext.SeqExt
  use seq.Seq
  use prelude.Int
  use prelude.Int
  use seq.Seq
  use seq.Seq
  let rec ghost predicate all_zero [#"../06_logic_function_contracts.rs" 22 0 22 38] (seq : Seq.seq int)
    variant {[#"../06_logic_function_contracts.rs" 21 10 21 19] Seq.length seq}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_logic_function_contracts.rs" 23 4 28 5] if pure {Seq.length seq = 0} then
      true
    else
      pure {Seq.get seq (Seq.length seq - 1) = 0} && all_zero (SeqExt.subsequence seq 0 (Seq.length seq - 1))
    
end
module C06LogicFunctionContracts_Stupid_Impl
  type t
  use prelude.Int
  let rec ghost predicate stupid [#"../06_logic_function_contracts.rs" 34 0 34 38] (x : t) (i : int)
    variant {[#"../06_logic_function_contracts.rs" 33 10 33 11] i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_logic_function_contracts.rs" 35 4 43 5] if pure {i <= 0} then
      true
    else
      if pure {x = x} then stupid x 0 else false
    
end
