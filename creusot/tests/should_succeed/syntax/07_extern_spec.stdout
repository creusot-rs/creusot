module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
end
module Alloc_Vec_Impl0_New_Interface
  type t   
  use Type
  val new [@cfg:stackify] () : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    requires {true = true}
    requires {false}
    
end
module Alloc_Vec_Impl0_New
  type t   
  use Type
  val new [@cfg:stackify] () : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    requires {true = true}
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module C07ExternSpec_Main_Interface
  val main [@cfg:stackify] () : ()
end
module C07ExternSpec_Main
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.alloc_vec_vec bool (Type.alloc_alloc_global)
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = bool
  let rec cfg main [@cfg:stackify] () : () = 
  var _0 : ();
  var v_1 : Type.alloc_vec_vec bool (Type.alloc_alloc_global);
  {
    goto BB0
  }
  BB0 {
    v_1 <- New0.new ();
    goto BB1
  }
  BB1 {
    _0 <- ();
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve v_1 };
    return _0
  }
  
end
