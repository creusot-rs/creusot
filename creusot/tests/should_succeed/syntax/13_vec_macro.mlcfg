
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module C13VecMacro_X
  use prelude.Int32
  use prelude.Slice
  predicate invariant6 (self : slice int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : slice int32) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : slice int32)
  val inv6 (_x : slice int32) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : slice int32 . inv6 x = true
  predicate invariant5 (self : slice int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : slice int32) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : slice int32)
  val inv5 (_x : slice int32) : bool
    ensures { result = inv5 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv5 : forall x : slice int32 . inv5 x = true
  use seq.Seq
  predicate invariant4 (self : Seq.seq int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Seq.seq int32) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Seq.seq int32)
  val inv4 (_x : Seq.seq int32) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq int32 . inv4 x = true
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv3 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv3 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv3 _x }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv4 (shallow_model1 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model1 self)
  <= UIntSize.to_int max0)
  predicate invariant3 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv4 (shallow_model1 self)
  val invariant3 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv3 x = true
  predicate invariant2 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : int32) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : int32)
  val inv2 (_x : int32) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : int32 . inv2 x = true
  use prelude.UInt32
  predicate invariant1 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Seq.seq uint32) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq uint32)
  val inv1 (_x : Seq.seq uint32) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq uint32 . inv1 x = true
  use seq.Seq
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq uint32
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq uint32
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv1 (shallow_model0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv1 (shallow_model0 self)
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  use prelude.Slice
  function shallow_model3 (self : slice int32) : Seq.seq int32
  val shallow_model3 (self : slice int32) : Seq.seq int32
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv6 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : slice int32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv6 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv4 (shallow_model3 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model3 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model3 self)
  <= UIntSize.to_int max0)
  function shallow_model2 (self : slice int32) : Seq.seq int32 =
    [#"../../../../../creusot-contracts/src/std/boxed.rs" 20 8 20 31] shallow_model3 self
  val shallow_model2 (self : slice int32) : Seq.seq int32
    ensures { result = shallow_model2 self }
    
  val into_vec0 (self : slice int32) : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    requires {inv5 self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 314 18 314 35] shallow_model1 result
    = shallow_model2 self }
    ensures { inv3 result }
    
  predicate resolve3 (self : int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve3 (self : int32) : bool
    ensures { result = resolve3 self }
    
  use seq.Seq
  function index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model1 self) ix
  val index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    ensures { result = index_logic1 self ix }
    
  predicate resolve1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model1 self)  -> resolve3 (index_logic1 self i)
  val resolve1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve1 self }
    
  val from_elem0 (elem : int32) (n : usize) : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    requires {inv2 elem}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 157 22 157 41] Seq.length (shallow_model1 result)
    = UIntSize.to_int n }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 158 12 158 78] forall i : int . 0 <= i
    /\ i < UIntSize.to_int n  -> index_logic1 result i = elem }
    ensures { inv3 result }
    
  predicate resolve2 (self : uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve2 (self : uint32) : bool
    ensures { result = resolve2 self }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : uint32
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : uint32
    ensures { result = index_logic0 self ix }
    
  predicate resolve0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model0 self)  -> resolve2 (index_logic0 self i)
  val resolve0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve0 self }
    
  val new0 (_1 : ()) : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 68 26 68 44] Seq.length (shallow_model0 result) = 0 }
    ensures { inv0 result }
    
  let rec cfg x [#"../13_vec_macro.rs" 5 0 5 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v0 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var v1 : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var v2 : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var _10 : array int32;
  {
    goto BB0
  }
  BB0 {
    [#"../13_vec_macro.rs" 6 23 6 29] v0 <- ([#"../13_vec_macro.rs" 6 23 6 29] new0 ([#"../../../../../creusot-contracts/src/lib.rs" 199 8 199 30] ()));
    goto BB1
  }
  BB1 {
    assume { resolve0 v0 };
    assert { [@expl:assertion] [#"../13_vec_macro.rs" 7 20 7 34] Seq.length (shallow_model0 v0) = 0 };
    goto BB2
  }
  BB2 {
    [#"../13_vec_macro.rs" 9 13 9 23] v1 <- ([#"../13_vec_macro.rs" 9 13 9 23] from_elem0 ([#"../13_vec_macro.rs" 9 18 9 19] (0 : int32)) ([#"../13_vec_macro.rs" 9 21 9 22] (2 : usize)));
    goto BB3
  }
  BB3 {
    assume { resolve1 v1 };
    assert { [@expl:assertion] [#"../13_vec_macro.rs" 10 20 10 34] Seq.length (shallow_model1 v1) = 2 };
    goto BB4
  }
  BB4 {
    [#"../../../../../creusot-contracts/src/lib.rs" 205 47 205 56] _10 <- (let __arr_temp = any array int32 in assume {Seq.get (__arr_temp.elts) 0
    = ([#"../13_vec_macro.rs" 12 18 12 19] (1 : int32))}; assume {Seq.get (__arr_temp.elts) 1
    = ([#"../13_vec_macro.rs" 12 21 12 22] (2 : int32))}; assume {Seq.get (__arr_temp.elts) 2
    = ([#"../13_vec_macro.rs" 12 24 12 25] (3 : int32))}; assume {Slice.length __arr_temp = 3}; __arr_temp);
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    [#"../13_vec_macro.rs" 12 13 12 26] v2 <- ([#"../13_vec_macro.rs" 12 13 12 26] into_vec0 _10);
    _10 <- any array int32;
    goto BB7
  }
  BB7 {
    assume { resolve1 v2 };
    assert { [@expl:assertion] [#"../13_vec_macro.rs" 13 20 13 34] Seq.length (shallow_model1 v2) = 3 };
    goto BB8
  }
  BB8 {
    [#"../13_vec_macro.rs" 5 11 14 1] _0 <- ([#"../13_vec_macro.rs" 5 11 14 1] ());
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
