
module C09Maintains_A_Type
  type t_a  =
    | C_A
    
end
module C09Maintains_Test1
  use prelude.UInt64
  use prelude.Int
  use C09Maintains_A_Type as C09Maintains_A_Type
  predicate invariant0 [#"../09_maintains.rs" 12 4 12 47] (self : C09Maintains_A_Type.t_a) (b : bool) (c : uint64) =
    [#"../09_maintains.rs" 13 8 13 12] true
  val invariant0 [#"../09_maintains.rs" 12 4 12 47] (self : C09Maintains_A_Type.t_a) (b : bool) (c : uint64) : bool
    ensures { result = invariant0 self b c }
    
  let rec cfg test_1 [#"../09_maintains.rs" 28 0 28 36] [@cfg:stackify] [@cfg:subregion_analysis] (a : C09Maintains_A_Type.t_a) (b : bool) (c : uint64) : ()
    requires {[#"../09_maintains.rs" 27 0 27 31] invariant0 a b c}
    ensures { [#"../09_maintains.rs" 27 0 27 31] invariant0 a b c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../09_maintains.rs" 28 37 28 39] _0 <- ([#"../09_maintains.rs" 28 37 28 39] ());
    return _0
  }
  
end
module C09Maintains_Test2
  use prelude.UInt64
  use prelude.Int
  use C09Maintains_A_Type as C09Maintains_A_Type
  predicate invariant0 [#"../09_maintains.rs" 12 4 12 47] (self : C09Maintains_A_Type.t_a) (b : bool) (c : uint64) =
    [#"../09_maintains.rs" 13 8 13 12] true
  val invariant0 [#"../09_maintains.rs" 12 4 12 47] (self : C09Maintains_A_Type.t_a) (b : bool) (c : uint64) : bool
    ensures { result = invariant0 self b c }
    
  use prelude.Borrow
  predicate resolve0 (self : borrowed (C09Maintains_A_Type.t_a)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (C09Maintains_A_Type.t_a)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg test_2 [#"../09_maintains.rs" 31 0 31 41] [@cfg:stackify] [@cfg:subregion_analysis] (a : borrowed (C09Maintains_A_Type.t_a)) (b : bool) (c : uint64) : ()
    requires {[#"../09_maintains.rs" 30 0 30 37] invariant0 ( * a) b c}
    ensures { [#"../09_maintains.rs" 30 0 30 37] invariant0 ( ^ a) b c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : borrowed (C09Maintains_A_Type.t_a) = a;
  {
    goto BB0
  }
  BB0 {
    assume { resolve0 a };
    [#"../09_maintains.rs" 31 42 31 44] _0 <- ([#"../09_maintains.rs" 31 42 31 44] ());
    return _0
  }
  
end
module C09Maintains_Test3
  use prelude.UInt64
  use prelude.Int
  use C09Maintains_A_Type as C09Maintains_A_Type
  predicate invariant0 [#"../09_maintains.rs" 12 4 12 47] (self : C09Maintains_A_Type.t_a) (b : bool) (c : uint64) =
    [#"../09_maintains.rs" 13 8 13 12] true
  val invariant0 [#"../09_maintains.rs" 12 4 12 47] (self : C09Maintains_A_Type.t_a) (b : bool) (c : uint64) : bool
    ensures { result = invariant0 self b c }
    
  use prelude.Borrow
  predicate resolve1 (self : borrowed (C09Maintains_A_Type.t_a)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (C09Maintains_A_Type.t_a)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed bool) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed bool) : bool
    ensures { result = resolve0 self }
    
  let rec cfg test_3 [#"../09_maintains.rs" 34 0 34 46] [@cfg:stackify] [@cfg:subregion_analysis] (a : borrowed (C09Maintains_A_Type.t_a)) (b : borrowed bool) (c : uint64) : ()
    requires {[#"../09_maintains.rs" 33 0 33 41] invariant0 ( * a) ( * b) c}
    ensures { [#"../09_maintains.rs" 33 0 33 41] invariant0 ( ^ a) ( ^ b) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : borrowed (C09Maintains_A_Type.t_a) = a;
  var b : borrowed bool = b;
  {
    goto BB0
  }
  BB0 {
    assume { resolve0 b };
    assume { resolve1 a };
    [#"../09_maintains.rs" 34 47 34 49] _0 <- ([#"../09_maintains.rs" 34 47 34 49] ());
    return _0
  }
  
end
module C09Maintains_Test5
  use prelude.UIntSize
  use C09Maintains_A_Type as C09Maintains_A_Type
  use prelude.Int
  predicate inv20 [#"../09_maintains.rs" 17 4 17 33] (self : C09Maintains_A_Type.t_a) (b : int) =
    [#"../09_maintains.rs" 18 8 18 12] true
  val inv20 [#"../09_maintains.rs" 17 4 17 33] (self : C09Maintains_A_Type.t_a) (b : int) : bool
    ensures { result = inv20 self b }
    
  use prelude.UIntSize
  let rec cfg test_5 [#"../09_maintains.rs" 37 0 37 29] [@cfg:stackify] [@cfg:subregion_analysis] (a : C09Maintains_A_Type.t_a) (b : usize) : ()
    requires {[#"../09_maintains.rs" 36 0 36 28] inv20 a (UIntSize.to_int b + 0)}
    ensures { [#"../09_maintains.rs" 36 0 36 28] inv20 a (UIntSize.to_int b + 0) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../09_maintains.rs" 37 30 37 32] _0 <- ([#"../09_maintains.rs" 37 30 37 32] ());
    return _0
  }
  
end
module C09Maintains_Test6
  use C09Maintains_A_Type as C09Maintains_A_Type
  predicate other_inv0 [#"../09_maintains.rs" 23 0 23 35] (a : C09Maintains_A_Type.t_a) (b : bool) =
    [#"../09_maintains.rs" 24 4 24 8] true
  val other_inv0 [#"../09_maintains.rs" 23 0 23 35] (a : C09Maintains_A_Type.t_a) (b : bool) : bool
    ensures { result = other_inv0 a b }
    
  let rec cfg test_6 [#"../09_maintains.rs" 40 0 40 28] [@cfg:stackify] [@cfg:subregion_analysis] (a : C09Maintains_A_Type.t_a) (b : bool) : ()
    requires {[#"../09_maintains.rs" 39 0 39 29] other_inv0 a b}
    ensures { [#"../09_maintains.rs" 39 0 39 29] other_inv0 a b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../09_maintains.rs" 40 29 40 31] _0 <- ([#"../09_maintains.rs" 40 29 40 31] ());
    return _0
  }
  
end
