
module C09Maintains_A_Type
  type t_a  =
    | C_A
    
end
module C09Maintains_Impl0_Invariant_Stub
  use mach.int.Int
  use mach.int.UInt64
  use C09Maintains_A_Type as C09Maintains_A_Type
  val ghost predicate invariant' (self : C09Maintains_A_Type.t_a) (b : bool) (c : uint64)
end
module C09Maintains_Impl0_Invariant_Interface
  use mach.int.Int
  use mach.int.UInt64
  use C09Maintains_A_Type as C09Maintains_A_Type
  val ghost predicate invariant' (self : C09Maintains_A_Type.t_a) (b : bool) (c : uint64)
end
module C09Maintains_Impl0_Invariant
  use mach.int.Int
  use mach.int.UInt64
  use C09Maintains_A_Type as C09Maintains_A_Type
  let rec ghost predicate invariant' [#"../09_maintains.rs" 13 4 13 47] (self : C09Maintains_A_Type.t_a) (b : bool) (c : uint64)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../09_maintains.rs" 14 8 14 12] true
end
module C09Maintains_Impl0_Inv2_Stub
  use mach.int.Int
  use C09Maintains_A_Type as C09Maintains_A_Type
  val ghost predicate inv2 (self : C09Maintains_A_Type.t_a) (b : int)
end
module C09Maintains_Impl0_Inv2_Interface
  use mach.int.Int
  use C09Maintains_A_Type as C09Maintains_A_Type
  val ghost predicate inv2 (self : C09Maintains_A_Type.t_a) (b : int)
end
module C09Maintains_Impl0_Inv2
  use mach.int.Int
  use C09Maintains_A_Type as C09Maintains_A_Type
  let rec ghost predicate inv2 [#"../09_maintains.rs" 18 4 18 33] (self : C09Maintains_A_Type.t_a) (b : int)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../09_maintains.rs" 19 8 19 12] true
end
module C09Maintains_OtherInv_Stub
  use C09Maintains_A_Type as C09Maintains_A_Type
  val ghost predicate other_inv (a : C09Maintains_A_Type.t_a) (b : bool)
end
module C09Maintains_OtherInv_Interface
  use C09Maintains_A_Type as C09Maintains_A_Type
  val ghost predicate other_inv (a : C09Maintains_A_Type.t_a) (b : bool)
end
module C09Maintains_OtherInv
  use C09Maintains_A_Type as C09Maintains_A_Type
  let rec ghost predicate other_inv [#"../09_maintains.rs" 24 0 24 35] (a : C09Maintains_A_Type.t_a) (b : bool)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../09_maintains.rs" 25 4 25 8] true
end
module C09Maintains_Test1_Interface
  use mach.int.Int
  use mach.int.UInt64
  use C09Maintains_A_Type as C09Maintains_A_Type
  clone C09Maintains_Impl0_Invariant_Stub as Invariant0
  val test_1 [@cfg:stackify] (a : C09Maintains_A_Type.t_a) (b : bool) (c : uint64) : ()
    requires {[#"../09_maintains.rs" 28 0 28 31] Invariant0.invariant' a b c}
    ensures { [#"../09_maintains.rs" 28 0 28 31] Invariant0.invariant' a b c }
    
end
module C09Maintains_Test1
  use mach.int.Int
  use mach.int.UInt64
  use C09Maintains_A_Type as C09Maintains_A_Type
  clone C09Maintains_Impl0_Invariant as Invariant0
  let rec cfg test_1 [@cfg:stackify] [#"../09_maintains.rs" 29 0 29 36] (a : C09Maintains_A_Type.t_a) (b : bool) (c : uint64) : ()
    requires {[#"../09_maintains.rs" 28 0 28 31] Invariant0.invariant' a b c}
    ensures { [#"../09_maintains.rs" 28 0 28 31] Invariant0.invariant' a b c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : C09Maintains_A_Type.t_a;
  var b_2 : bool;
  var c_3 : uint64;
  {
    a_1 <- a;
    b_2 <- b;
    c_3 <- c;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module C09Maintains_Test2_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  use C09Maintains_A_Type as C09Maintains_A_Type
  clone C09Maintains_Impl0_Invariant_Stub as Invariant0
  val test_2 [@cfg:stackify] (a : borrowed (C09Maintains_A_Type.t_a)) (b : bool) (c : uint64) : ()
    requires {[#"../09_maintains.rs" 31 0 31 37] Invariant0.invariant' ( * a) b c}
    ensures { [#"../09_maintains.rs" 31 0 31 37] Invariant0.invariant' ( ^ a) b c }
    
end
module C09Maintains_Test2
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  use C09Maintains_A_Type as C09Maintains_A_Type
  clone C09Maintains_Impl0_Invariant as Invariant0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = C09Maintains_A_Type.t_a
  let rec cfg test_2 [@cfg:stackify] [#"../09_maintains.rs" 32 0 32 41] (a : borrowed (C09Maintains_A_Type.t_a)) (b : bool) (c : uint64) : ()
    requires {[#"../09_maintains.rs" 31 0 31 37] Invariant0.invariant' ( * a) b c}
    ensures { [#"../09_maintains.rs" 31 0 31 37] Invariant0.invariant' ( ^ a) b c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : borrowed (C09Maintains_A_Type.t_a);
  var b_2 : bool;
  var c_3 : uint64;
  {
    a_1 <- a;
    b_2 <- b;
    c_3 <- c;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve a_1 };
    _0 <- ();
    return _0
  }
  
end
module C09Maintains_Test3_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  use C09Maintains_A_Type as C09Maintains_A_Type
  clone C09Maintains_Impl0_Invariant_Stub as Invariant0
  val test_3 [@cfg:stackify] (a : borrowed (C09Maintains_A_Type.t_a)) (b : borrowed bool) (c : uint64) : ()
    requires {[#"../09_maintains.rs" 34 0 34 41] Invariant0.invariant' ( * a) ( * b) c}
    ensures { [#"../09_maintains.rs" 34 0 34 41] Invariant0.invariant' ( ^ a) ( ^ b) c }
    
end
module C09Maintains_Test3
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  use C09Maintains_A_Type as C09Maintains_A_Type
  clone C09Maintains_Impl0_Invariant as Invariant0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = bool
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = C09Maintains_A_Type.t_a
  let rec cfg test_3 [@cfg:stackify] [#"../09_maintains.rs" 35 0 35 46] (a : borrowed (C09Maintains_A_Type.t_a)) (b : borrowed bool) (c : uint64) : ()
    requires {[#"../09_maintains.rs" 34 0 34 41] Invariant0.invariant' ( * a) ( * b) c}
    ensures { [#"../09_maintains.rs" 34 0 34 41] Invariant0.invariant' ( ^ a) ( ^ b) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : borrowed (C09Maintains_A_Type.t_a);
  var b_2 : borrowed bool;
  var c_3 : uint64;
  {
    a_1 <- a;
    b_2 <- b;
    c_3 <- c;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve a_1 };
    assume { Resolve1.resolve b_2 };
    _0 <- ();
    return _0
  }
  
end
module C09Maintains_Test5_Interface
  use mach.int.Int
  use mach.int.UInt64
  use prelude.UIntSize
  use C09Maintains_A_Type as C09Maintains_A_Type
  clone C09Maintains_Impl0_Inv2_Stub as Inv20
  val test_5 [@cfg:stackify] (a : C09Maintains_A_Type.t_a) (b : usize) : ()
    requires {[#"../09_maintains.rs" 37 0 37 28] Inv20.inv2 a (UInt64.to_int b + 0)}
    ensures { [#"../09_maintains.rs" 37 0 37 28] Inv20.inv2 a (UInt64.to_int b + 0) }
    
end
module C09Maintains_Test5
  use mach.int.Int
  use mach.int.UInt64
  use prelude.UIntSize
  use C09Maintains_A_Type as C09Maintains_A_Type
  clone C09Maintains_Impl0_Inv2 as Inv20
  let rec cfg test_5 [@cfg:stackify] [#"../09_maintains.rs" 38 0 38 29] (a : C09Maintains_A_Type.t_a) (b : usize) : ()
    requires {[#"../09_maintains.rs" 37 0 37 28] Inv20.inv2 a (UInt64.to_int b + 0)}
    ensures { [#"../09_maintains.rs" 37 0 37 28] Inv20.inv2 a (UInt64.to_int b + 0) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : C09Maintains_A_Type.t_a;
  var b_2 : usize;
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C09Maintains_Test6_Interface
  use C09Maintains_A_Type as C09Maintains_A_Type
  clone C09Maintains_OtherInv_Stub as OtherInv0
  val test_6 [@cfg:stackify] (a : C09Maintains_A_Type.t_a) (b : bool) : ()
    requires {[#"../09_maintains.rs" 40 0 40 29] OtherInv0.other_inv a b}
    ensures { [#"../09_maintains.rs" 40 0 40 29] OtherInv0.other_inv a b }
    
end
module C09Maintains_Test6
  use C09Maintains_A_Type as C09Maintains_A_Type
  clone C09Maintains_OtherInv as OtherInv0
  let rec cfg test_6 [@cfg:stackify] [#"../09_maintains.rs" 41 0 41 28] (a : C09Maintains_A_Type.t_a) (b : bool) : ()
    requires {[#"../09_maintains.rs" 40 0 40 29] OtherInv0.other_inv a b}
    ensures { [#"../09_maintains.rs" 40 0 40 29] OtherInv0.other_inv a b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : C09Maintains_A_Type.t_a;
  var b_2 : bool;
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
