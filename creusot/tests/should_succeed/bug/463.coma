module M_463__test [#"463.rs" 3 0 3 13]
  let%span s4630 = "463.rs" 9 14 9 15
  let%span s4631 = "463.rs" 10 18 10 25
  let%span s4632 = "463.rs" 7 23 7 24
  let%span s4633 = "463.rs" 5 19 5 28
  let%span s4634 = "463.rs" 6 18 6 35
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  let rec closure0'0 (_1:()) (x:usize) (return'  (ret:usize))= {[@expl:closure requires] [%#s4633] UIntSize.to_int x
    < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.add {x} {[%#s4632] (1 : usize)} (fun (_ret':usize) ->  [ &res1 <- _ret' ] s1)
      | s1 =  [ &res <- res1 ] s2
      | s2 =  [ &_0 <- res ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : usize = any_l () | & x : usize = x | & res : usize = any_l () | & res1 : usize = any_l () ] 
    [ return' (result:usize)-> {[@expl:closure ensures] [%#s4634] UIntSize.to_int result = UIntSize.to_int x + 1}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec test'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &c <- () ] s1
      | s1 =  [ &_4 <- (([%#s4630] (2 : usize))) ] s2
      | s2 = closure0'0 {c} {let (r'0) = _4 in r'0} (fun (_ret':usize) ->  [ &y <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#s4631] UIntSize.to_int y = 3} s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () | & c : () = any_l () | & y : usize = any_l () | & _4 : usize = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
