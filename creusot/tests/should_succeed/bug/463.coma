
module M_463__test__qy123zclosureqy35z0qy125z_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int8
  
  type m_463__test__qy123zclosureqy35z0qy125z  =
    | M_463__test__qy123zclosureqy35z0qy125z
  
  let rec m_463__test__qy123zclosureqy35z0qy125z (input:m_463__test__qy123zclosureqy35z0qy125z) (ret  )= any
    [ good -> {M_463__test__qy123zclosureqy35z0qy125z  = input} (! ret)
    | bad -> {M_463__test__qy123zclosureqy35z0qy125z  <> input} {false} any ]
    
end
module M_463__test__qy123zclosureqy35z0qy125z
  let%span s4630 = "../463.rs" 7 23 7 24
  
  let%span s4631 = "../463.rs" 5 19 5 28
  
  let%span s4632 = "../463.rs" 6 18 6 35
  
  use prelude.prelude.Int8
  
  use prelude.prelude.UIntSize
  
  use M_463__test__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  let rec m_463__test__qy123zclosureqy35z0qy125z (_1:Closure'0.m_463__test__qy123zclosureqy35z0qy125z) (x:usize) (return'  (ret:usize))= {[%#s4631] UIntSize.to_int x
    < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.add {x} {[%#s4630] (1 : usize)} (fun (_ret':usize) ->  [ &res1 <- _ret' ] s1)
      | s1 =  [ &res <- res1 ] s2
      | s2 =  [ &_0 <- res ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : usize = any_l () | & x : usize = x | & res : usize = any_l () | & res1 : usize = any_l () ] 
    [ return' (result:usize)-> {[@expl:postcondition] [%#s4632] UIntSize.to_int result = UIntSize.to_int x + 1}
      (! return' {result}) ]
    
end
module M_463__test
  let%span s4630 = "../463.rs" 9 14 9 15
  
  let%span s4631 = "../463.rs" 10 18 10 25
  
  let%span span2 = "../463.rs" 5 19 5 28
  
  let%span span3 = "../463.rs" 6 18 6 35
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int8
  
  use M_463__test__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  let rec closure0'0 (_1:Closure'0.m_463__test__qy123zclosureqy35z0qy125z) (x:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span2] UIntSize.to_int x
    < 1000}
    any [ return' (result:usize)-> {[%#span3] UIntSize.to_int result = UIntSize.to_int x + 1} (! return' {result}) ] 
  
  let rec test (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &c <- Closure'0.M_463__test__qy123zclosureqy35z0qy125z ] s1
      | s1 =  [ &_4 <- (([%#s4630] (2 : usize))) ] s2
      | s2 = closure0'0 {c} {let (r'0) = _4 in r'0} (fun (_ret':usize) ->  [ &y <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#s4631] UIntSize.to_int y = 3} s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & c : Closure'0.m_463__test__qy123zclosureqy35z0qy125z = any_l ()
    | & y : usize = any_l ()
    | & _4 : usize = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
