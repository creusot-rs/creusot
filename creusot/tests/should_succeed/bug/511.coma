module M_511__test_u8 [#"511.rs" 5 0 5 23]
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt8
  
  meta "compute_max_steps" 1000000
  
  let rec test_u8 (inp:uint8) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.of_int {UInt8.to_int inp} (fun (_res:usize) ->  [ &_bing <- _res ] s1) | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & inp : uint8 = inp | & _bing : usize = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_511__test_u16 [#"511.rs" 9 0 9 25]
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt16
  
  meta "compute_max_steps" 1000000
  
  let rec test_u16 (inp:uint16) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.of_int {UInt16.to_int inp} (fun (_res:usize) ->  [ &_bing <- _res ] s1) | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & inp : uint16 = inp | & _bing : usize = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_511__test_u128 [#"511.rs" 13 0 13 27]
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt128
  
  meta "compute_max_steps" 1000000
  
  let rec test_u128 (inp:uint128) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.of_int {UInt128.to_int inp} (fun (_res:usize) ->  [ &_bing <- _res ] s1) | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & inp : uint128 = inp | & _bing : usize = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_511__test_i8 [#"511.rs" 17 0 17 23]
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int8
  
  meta "compute_max_steps" 1000000
  
  let rec test_i8 (inp:int8) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.of_int {Int8.to_int inp} (fun (_res:usize) ->  [ &_bing <- _res ] s1) | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & inp : int8 = inp | & _bing : usize = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_511__test_i16 [#"511.rs" 21 0 21 25]
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int16
  
  meta "compute_max_steps" 1000000
  
  let rec test_i16 (inp:int16) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.of_int {Int16.to_int inp} (fun (_res:usize) ->  [ &_bing <- _res ] s1) | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & inp : int16 = inp | & _bing : usize = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_511__test_i128 [#"511.rs" 25 0 25 27]
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int128
  
  meta "compute_max_steps" 1000000
  
  let rec test_i128 (inp:int128) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.of_int {Int128.to_int inp} (fun (_res:usize) ->  [ &_bing <- _res ] s1) | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & inp : int128 = inp | & _bing : usize = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
