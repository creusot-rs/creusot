
module CreusotContracts_GhostPtr_GhostPtrToken_Type
  type t_ghostptrtoken 't
end
module CreusotContracts_Logic_Fmap_FMap_Type
  type t_fmap 'k 'v
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module C949_Main
  use prelude.Int32
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant6 (self : Core_Option_Option_Type.t_option int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : Core_Option_Option_Type.t_option int32) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Core_Option_Option_Type.t_option int32)
  val inv6 (_x : Core_Option_Option_Type.t_option int32) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Core_Option_Option_Type.t_option int32 . inv6 x = true
  predicate invariant5 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : int32) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : int32)
  val inv5 (_x : int32) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : int32 . inv5 x = true
  use prelude.Opaque
  use map.Map
  predicate invariant4 (self : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32))
  val inv4 (_x : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32) . inv4 x = true
  predicate invariant3 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : int32) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : int32)
  val inv3 (_x : int32) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : int32 . inv3 x = true
  predicate invariant2 (self : opaque_ptr) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : opaque_ptr) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : opaque_ptr)
  val inv2 (_x : opaque_ptr) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : opaque_ptr . inv2 x = true
  use CreusotContracts_Logic_Fmap_FMap_Type as CreusotContracts_Logic_Fmap_FMap_Type
  predicate invariant1 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)
  val inv1 (_x : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32 . inv1 x = true
  predicate invariant0 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : int32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : int32)
  val inv0 (_x : int32) : bool
    ensures { result = inv0 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv0 : forall x : int32 . inv0 x = true
  predicate resolve1 (self : int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve1 (self : int32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 35 8 35 31] resolve1 self
  val resolve0 (self : int32) : bool
    ensures { result = resolve0 self }
    
  use CreusotContracts_GhostPtr_GhostPtrToken_Type as CreusotContracts_GhostPtr_GhostPtrToken_Type
  use prelude.Int
  use map.Map
  function mk0 (_m : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  val mk0 (_m : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    ensures { result = mk0 _m }
    
  function view0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)
    
  val view0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)
    requires {[#"../../../../../creusot-contracts/src/logic/fmap.rs" 28 16 28 20] inv1 self}
    ensures { result = view0 self }
    
  axiom view0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32 . ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 28 16 28 20] inv1 self)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 28 4 28 35] inv4 (view0 self))
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 27 14 27 38] mk0 (view0 self) = self)
  function get0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : Core_Option_Option_Type.t_option int32
    
   =
    [#"../../../../../creusot-contracts/src/logic/fmap.rs" 55 8 55 26] Map.get (view0 self) k
  val get0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : Core_Option_Option_Type.t_option int32
    ensures { result = get0 self k }
    
  function contains0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : bool
    
   =
    [#"../../../../../creusot-contracts/src/logic/fmap.rs" 79 8 79 27] get0 self k <> Core_Option_Option_Type.C_None
  val contains0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : bool
    ensures { result = contains0 self k }
    
  function len0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : int
  val len0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : int
    requires {[#"../../../../../creusot-contracts/src/logic/fmap.rs" 13 15 13 19] inv1 self}
    ensures { result = len0 self }
    
  axiom len0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32 . ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 13 15 13 19] inv1 self)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 12 14 12 25] len0 self >= 0)
  use map.Map
  function remove0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  val remove0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    requires {[#"../../../../../creusot-contracts/src/logic/fmap.rs" 47 18 47 22] inv1 self}
    requires {[#"../../../../../creusot-contracts/src/logic/fmap.rs" 47 24 47 25] inv2 k}
    ensures { result = remove0 self k }
    
  axiom remove0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32, k : opaque_ptr . ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 47 18 47 22] inv1 self)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 47 24 47 25] inv2 k)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 47 4 47 37] inv1 (remove0 self k))
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 46 14 46 84] len0 (remove0 self k)
  = (if contains0 self k then len0 self - 1 else len0 self))
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 45 14 45 55] view0 (remove0 self k)
  = Map.set (view0 self) k (Core_Option_Option_Type.C_None))
  function unreachable0 (_1 : ()) : int32
  val unreachable0 (_1 : ()) : int32
    requires {[#"../../../../../creusot-contracts/src/util.rs" 24 11 24 16] false}
    ensures { result = unreachable0 _1 }
    
  axiom unreachable0_spec : forall _1 : () . ([#"../../../../../creusot-contracts/src/util.rs" 24 11 24 16] false)
   -> ([#"../../../../../creusot-contracts/src/util.rs" 27 0 27 28] inv0 (unreachable0 _1))
  && ([#"../../../../../creusot-contracts/src/util.rs" 25 10 25 15] false)
  function unwrap0 (op : Core_Option_Option_Type.t_option int32) : int32
  val unwrap0 (op : Core_Option_Option_Type.t_option int32) : int32
    requires {[#"../../../../../creusot-contracts/src/util.rs" 33 11 33 21] op <> Core_Option_Option_Type.C_None}
    requires {[#"../../../../../creusot-contracts/src/util.rs" 35 17 35 19] inv6 op}
    ensures { result = unwrap0 op }
    
  axiom unwrap0_spec : forall op : Core_Option_Option_Type.t_option int32 . ([#"../../../../../creusot-contracts/src/util.rs" 33 11 33 21] op
  <> Core_Option_Option_Type.C_None)
   -> ([#"../../../../../creusot-contracts/src/util.rs" 35 17 35 19] inv6 op)
   -> ([#"../../../../../creusot-contracts/src/util.rs" 35 0 35 36] inv0 (unwrap0 op))
  && ([#"../../../../../creusot-contracts/src/util.rs" 34 10 34 28] Core_Option_Option_Type.C_Some (unwrap0 op) = op)
  function lookup_unsized0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : int32
    
   =
    [#"../../../../../creusot-contracts/src/logic/fmap.rs" 62 8 62 27] unwrap0 (get0 self k)
  val lookup_unsized0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : int32
    ensures { result = lookup_unsized0 self k }
    
  function shallow_model0 (self : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  val shallow_model0 (self : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    ensures { result = shallow_model0 self }
    
  use prelude.Borrow
  val ptr_to_box0 (self : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)) (ptr : opaque_ptr) : int32
    requires {[#"../../../../../creusot-contracts/src/ghost_ptr.rs" 96 4 96 39] contains0 (shallow_model0 ( * self)) ptr}
    ensures { [#"../../../../../creusot-contracts/src/ghost_ptr.rs" 97 14 97 54] result
    = lookup_unsized0 (shallow_model0 ( * self)) ptr }
    ensures { [#"../../../../../creusot-contracts/src/ghost_ptr.rs" 98 14 98 46] shallow_model0 ( ^ self)
    = remove0 (shallow_model0 ( * self)) ptr }
    ensures { [#"../../../../../creusot-contracts/src/ghost_ptr.rs" 99 4 99 57] inv0 result }
    
  function make_sized0 (self : int32) : int32
  val make_sized0 (self : int32) : int32
    requires {[#"../../../../../creusot-contracts/src/util.rs" 16 19 16 23] inv5 self}
    ensures { result = make_sized0 self }
    
  axiom make_sized0_spec : forall self : int32 . ([#"../../../../../creusot-contracts/src/util.rs" 16 19 16 23] inv5 self)
   -> ([#"../../../../../creusot-contracts/src/util.rs" 16 4 16 40] inv0 (make_sized0 self))
  && ([#"../../../../../creusot-contracts/src/util.rs" 15 14 15 30] make_sized0 self = self)
  function insert0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) (v : int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  val insert0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) (v : int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    requires {[#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 18 38 22] inv1 self}
    requires {[#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 24 38 25] inv2 k}
    requires {[#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 30 38 31] inv3 v}
    ensures { result = insert0 self k v }
    
  axiom insert0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32, k : opaque_ptr, v : int32 . ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 18 38 22] inv1 self)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 24 38 25] inv2 k)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 30 38 31] inv3 v)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 4 38 43] inv1 (insert0 self k v))
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 37 4 37 68] not contains0 self k
   -> len0 (insert0 self k v) = len0 self + 1)
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 36 4 36 63] contains0 self k
   -> len0 (insert0 self k v) = len0 self)
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 35 14 35 71] view0 (insert0 self k v)
  = Map.set (view0 self) k (Core_Option_Option_Type.C_Some (make_sized0 v)))
  val ptr_from_box0 (self : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)) (val' : int32) : opaque_ptr
    requires {[#"../../../../../creusot-contracts/src/ghost_ptr.rs" 71 35 71 38] inv0 val'}
    ensures { [#"../../../../../creusot-contracts/src/ghost_ptr.rs" 67 4 67 42] not contains0 (shallow_model0 ( * self)) result }
    ensures { [#"../../../../../creusot-contracts/src/ghost_ptr.rs" 70 14 70 55] shallow_model0 ( ^ self)
    = insert0 (shallow_model0 ( * self)) result val' }
    
  use map.Const
  function empty0 (_1 : ()) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
  val empty0 (_1 : ()) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    ensures { result = empty0 _1 }
    
  axiom empty0_spec : forall _1 : () . ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 87 4 87 26] inv1 (empty0 _1))
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 86 14 86 49] view0 (empty0 _1)
  = Const.const (Core_Option_Option_Type.C_None))
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 85 14 85 31] len0 (empty0 _1) = 0)
  val new0 (_1 : ()) : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32
    ensures { [#"../../../../../creusot-contracts/src/ghost_ptr.rs" 41 14 41 38] shallow_model0 result = empty0 () }
    
  let rec cfg main [#"../949.rs" 4 0 4 13] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var tok : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32;
  var b : int32;
  var p : opaque_ptr;
  var _4 : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32);
  var r : int32;
  var _7 : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32);
  {
    goto BB0
  }
  BB0 {
    [#"../949.rs" 5 18 5 38] tok <- ([#"../949.rs" 5 18 5 38] new0 ([#"../949.rs" 5 18 5 38] ()));
    goto BB1
  }
  BB1 {
    [#"../949.rs" 6 12 6 23] b <- ([#"../949.rs" 6 21 6 22] (1 : int32));
    goto BB2
  }
  BB2 {
    [#"../949.rs" 7 12 7 15] _4 <- Borrow.borrow_mut tok;
    [#"../949.rs" 7 12 7 15] tok <-  ^ _4;
    [#"../949.rs" 7 12 7 31] p <- ([#"../949.rs" 7 12 7 31] ptr_from_box0 _4 b);
    _4 <- any borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32);
    b <- any int32;
    goto BB3
  }
  BB3 {
    [#"../949.rs" 8 16 8 19] _7 <- Borrow.borrow_mut tok;
    [#"../949.rs" 8 16 8 19] tok <-  ^ _7;
    [#"../949.rs" 8 16 8 33] r <- ([#"../949.rs" 8 16 8 33] ptr_to_box0 _7 p);
    _7 <- any borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32);
    goto BB4
  }
  BB4 {
    [#"../949.rs" 9 4 9 11] r <- r + ([#"../949.rs" 9 10 9 11] (5 : int32));
    assume { resolve0 r };
    [#"../949.rs" 4 14 10 1] _0 <- ([#"../949.rs" 4 14 10 1] ());
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
