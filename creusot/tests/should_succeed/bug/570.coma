
module C570_S1_Type
  use prelude.Int32
  use prelude.Int
  type t_s1  =
    | C_S1 int32
    
  function any_l (_ : 'b) : 'a
  let rec t_s1 (input:t_s1) (ret  (f:int32))= any
    [ good (f:int32)-> {C_S1 f = input} (! ret {f}) | bad (f:int32)-> {C_S1 f <> input} {false} any ]
    
  function s1_f (self : t_s1) : int32 =
    match self with
      | C_S1 a -> a
      end
end
module C570_S2_Type
  use C570_S1_Type as C570_S1_Type
  type t_s2  =
    | C_S2 (C570_S1_Type.t_s1)
    
  function any_l (_ : 'b) : 'a
  let rec t_s2 (input:t_s2) (ret  (s1:C570_S1_Type.t_s1))= any
    [ good (s1:C570_S1_Type.t_s1)-> {C_S2 s1 = input} (! ret {s1})
    | bad (s1:C570_S1_Type.t_s1)-> {C_S2 s1 <> input} {false} any ]
    
  function s2_s1 (self : t_s2) : C570_S1_Type.t_s1 =
    match self with
      | C_S2 a -> a
      end
end
module C570_TestProgram
  use C570_S2_Type as C570_S2_Type
  use prelude.Intrinsic
  let rec test_program (s:C570_S2_Type.t_s2) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../570.rs" 12 27 14 1] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () | & s : C570_S2_Type.t_s2 = s ]  [ return' (result:())-> (! return' {result}) ] 
end
module C570_TestAssign
  use prelude.Intrinsic
  use C570_S1_Type as C570_S1_Type
  use C570_S2_Type as C570_S2_Type
  use prelude.Int32
  use prelude.Int
  let rec test_assign (s:C570_S2_Type.t_s2) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = C570_S2_Type.t_s2 {s}
          (fun (l_s1'0:C570_S1_Type.t_s1) ->
            C570_S1_Type.t_s1 {l_s1'0}
              (fun (l_f'0:int32) ->
                
                [ &s <- C570_S2_Type.C_S2 (C570_S1_Type.C_S1 ([#"../570.rs" 17 13 17 14] (2 : int32)) : C570_S1_Type.t_s1) : C570_S2_Type.t_s2 ]
                
                s1))
      | s1 =  [ &_0 <- [#"../570.rs" 16 30 18 1] () ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & s : C570_S2_Type.t_s2 = s ]  [ return' (result:())-> (! return' {result}) ] 
end
