
module C181Ident_MaxInt_Stub
  use prelude.Int
  function max_int [#"../181_ident.rs" 8 0 8 37] (a : int) (b : int) : int
end
module C181Ident_MaxInt_Interface
  use prelude.Int
  function max_int [#"../181_ident.rs" 8 0 8 37] (a : int) (b : int) : int
  val max_int [#"../181_ident.rs" 8 0 8 37] (a : int) (b : int) : int
    ensures { result = max_int a b }
    
end
module C181Ident_MaxInt
  use prelude.Int
  function max_int [#"../181_ident.rs" 8 0 8 37] (a : int) (b : int) : int =
    [#"../181_ident.rs" 6 0 6 8] if a < b then b else a
  val max_int [#"../181_ident.rs" 8 0 8 37] (a : int) (b : int) : int
    ensures { result = max_int a b }
    
end
module C181Ident_MaxUsize_Interface
  use prelude.UIntSize
  use prelude.Int
  clone C181Ident_MaxInt_Stub as MaxInt0
  val max_usize [#"../181_ident.rs" 18 0 18 45] (a : usize) (b : usize) : usize
    ensures { [#"../181_ident.rs" 17 10 17 36] UIntSize.to_int result = MaxInt0.max_int (UIntSize.to_int a) (UIntSize.to_int b) }
    
end
