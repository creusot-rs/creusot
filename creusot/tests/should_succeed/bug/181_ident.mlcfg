
module C181Ident_MaxInt_Stub
  use mach.int.Int
  val ghost function max_int (a : int) (b : int) : int
end
module C181Ident_MaxInt_Interface
  use mach.int.Int
  val ghost function max_int (a : int) (b : int) : int
end
module C181Ident_MaxInt
  use mach.int.Int
  let rec ghost function max_int [#"../181_ident.rs" 7 0 7 37] (a : int) (b : int) : int
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../181_ident.rs" 6 0 6 8] if a < b then b else a
end
module C181Ident_MaxUsize_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone C181Ident_MaxInt_Stub as MaxInt0
  val max_usize [@cfg:stackify] (a : usize) (b : usize) : usize
    ensures { [#"../181_ident.rs" 16 10 16 36] UInt64.to_int result = MaxInt0.max_int (UInt64.to_int a) (UInt64.to_int b) }
    
end
module C181Ident_MaxUsize
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone C181Ident_MaxInt_Interface as MaxInt0
  val max_usize [@cfg:stackify] (a : usize) (b : usize) : usize
    ensures { [#"../181_ident.rs" 16 10 16 36] UInt64.to_int result = MaxInt0.max_int (UInt64.to_int a) (UInt64.to_int b) }
    
end
