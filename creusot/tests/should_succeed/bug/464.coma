
module C464_AssocStruct_Type
  type t_assocstruct  =
    | C_AssocStruct
  
  function any_l (_ : 'b) : 'a
  
  let rec t_assocstruct (input:t_assocstruct) (ret  )= any
    [ good -> {C_AssocStruct  = input} (! ret) | bad -> {C_AssocStruct  <> input} {false} any ]
    
end
module C464_Struct_Type
  type t_struct  =
    | C_Struct
  
  function any_l (_ : 'b) : 'a
  
  let rec t_struct (input:t_struct) (ret  )= any
    [ good -> {C_Struct  = input} (! ret) | bad -> {C_Struct  <> input} {false} any ]
    
end
module C464_Impl1_Invariant_Impl
  let%span s4640 = "../464.rs" 33 4 33 44
  
  let%span span1 = "../464.rs" 24 8 24 12
  
  use C464_AssocStruct_Type as AssocStruct'0
  
  use C464_Struct_Type as Struct'0
  
  predicate invariant'0 [#"../464.rs" 23 4 23 30] (self : AssocStruct'0.t_assocstruct) =
    [%#span1] true
  
  constant self  : Struct'0.t_struct
  
  constant assoc  : AssocStruct'0.t_assocstruct
  
  predicate invariant' [#"../464.rs" 34 4 34 50] (self : Struct'0.t_struct) (assoc : AssocStruct'0.t_assocstruct)
  
  goal vc_invariant' : [%#s4640] true  -> invariant'0 assoc
end
module C464_Impl0
  
end
module C464_Impl1
  let%span s4640 = "../464.rs" 34 4 34 50
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../464.rs" 24 8 24 12
  
  use C464_Struct_Type as Struct'0
  
  predicate invariant'2 (self : Struct'0.t_struct) =
    [%#span1] true
  
  predicate inv'1 (_x : Struct'0.t_struct)
  
  axiom inv'1 : forall x : Struct'0.t_struct . inv'1 x = true
  
  use C464_AssocStruct_Type as AssocStruct'0
  
  predicate invariant'1 (self : AssocStruct'0.t_assocstruct) =
    [%#span1] true
  
  predicate inv'0 (_x : AssocStruct'0.t_assocstruct)
  
  axiom inv'0 : forall x : AssocStruct'0.t_assocstruct . inv'0 x = true
  
  predicate invariant'0 [#"../464.rs" 23 4 23 30] (self : AssocStruct'0.t_assocstruct) =
    [%#span2] true
  
  goal invariant'_refn : [%#s4640] forall self : Struct'0.t_struct . forall assoc : AssocStruct'0.t_assocstruct . inv'0 assoc
  /\ inv'1 self  -> (forall result : bool . result  -> invariant'0 assoc  -> result  -> invariant'0 assoc)
end
