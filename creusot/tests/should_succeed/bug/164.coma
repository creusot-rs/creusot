module M_164__main [#"164.rs" 5 0 5 13]
  let%span s1640 = "164.rs" 6 16 6 17
  let%span s1641 = "164.rs" 8 16 8 27
  let%span s1642 = "164.rs" 9 15 9 16
  let%span s1643 = "164.rs" 10 12 10 13
  let%span s1644 = "164.rs" 14 16 14 27
  let%span s1645 = "164.rs" 15 26 15 27
  let%span s1646 = "164.rs" 16 12 16 13
  let%span s1647 = "164.rs" 22 16 22 20
  let%span s1648 = "164.rs" 30 16 30 27
  let%span s1649 = "164.rs" 32 19 32 20
  let%span s16410 = "164.rs" 33 16 33 17
  let%span s16411 = "164.rs" 39 16 39 27
  let%span s16412 = "164.rs" 40 14 40 15
  let%span s16413 = "164.rs" 41 20 41 31
  let%span s16414 = "164.rs" 45 12 45 13
  let%span s16415 = "164.rs" 46 21 46 22
  let%span s16416 = "164.rs" 46 8 46 23
  let%span s16417 = "164.rs" 50 17 50 28
  let%span s16418 = "164.rs" 52 19 52 20
  let%span s16419 = "164.rs" 53 16 53 17
  let%span s16420 = "164.rs" 55 8 55 12
  let%span s16421 = "164.rs" 61 13 61 14
  let%span s16422 = "164.rs" 61 16 61 18
  let%span s16423 = "164.rs" 61 4 61 7
  let%span s16424 = "164.rs" 61 4 61 7
  let%span s16425 = "164.rs" 61 4 61 7
  let%span s16426 = "164.rs" 60 16 60 27
  let%span s16427 = "164.rs" 61 4 61 7
  let%span siter28 = "../../../../creusot-contracts/src/std/iter.rs" 97 0 205 1
  let%span srange29 = "../../../../creusot-contracts/src/std/iter/range.rs" 22 12 26 70
  let%span siter30 = "../../../../creusot-contracts/src/std/iter.rs" 103 26 106 17
  let%span siter31 = "../../../../creusot-contracts/src/std/iter.rs" 82 20 82 24
  let%span siter32 = "../../../../creusot-contracts/src/std/iter.rs" 88 8 88 19
  let%span srange33 = "../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  let%span srange34 = "../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  let%span srange35 = "../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  let%span srange36 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  let%span snum37 = "../../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  let%span srange38 = "../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  let%span sresolve39 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  type t_Range'0  =
    { t_Range__start'0: int32; t_Range__end'0: int32 }
  
  predicate inv'1 (_1 : t_Range'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Range'0 [inv'1 x] . inv'1 x = true
  
  predicate into_iter_pre'0 (self : t_Range'0) =
    [%#siter31] true
  
  predicate into_iter_post'0 (self : t_Range'0) (res : t_Range'0) =
    [%#siter32] self = res
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:into_iter 'self' type invariant] inv'1 self}
    {[@expl:into_iter requires] [%#siter28] into_iter_pre'0 self}
    any [ return' (result:t_Range'0)-> {inv'1 result} {[%#siter28] into_iter_post'0 self result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate inv'0 (_1 : Seq.seq int32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq int32 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.prelude.Int32
  
  function deep_model'0 (self : int32) : int =
    [%#snum37] Int32.to_int self
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 (self : t_Range'0) (visited : Seq.seq int32) (o : t_Range'0) =
    [%#srange29] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  function produces_trans'0 (a : t_Range'0) (ab : Seq.seq int32) (b : t_Range'0) (bc : Seq.seq int32) (c : t_Range'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq int32, b : t_Range'0, bc : Seq.seq int32, c : t_Range'0 . ([%#srange34] produces'0 a ab b)
   -> ([%#srange35] produces'0 b bc c)  -> ([%#srange36] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Range'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . [%#srange33] produces'0 self (Seq.empty  : Seq.seq int32) self
  
  use prelude.prelude.Borrow
  
  predicate inv'2 (_1 : borrowed (t_Range'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (t_Range'0) [inv'2 x] . inv'2 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  predicate inv'3 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'3 x] . inv'3 x = true
  
  predicate resolve'1 (self : borrowed (t_Range'0)) =
    [%#sresolve39] self.final = self.current
  
  predicate completed'0 (self : borrowed (t_Range'0)) =
    [%#srange38] resolve'1 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  use seq.Seq
  
  let rec next'0 (self:borrowed (t_Range'0)) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'2 self}
    any
    [ return' (result:t_Option'0)-> {inv'3 result}
      {[%#siter30] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'0 (_1 : borrowed (t_Range'0)) =
    resolve'1 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:int32))= any
    [ good (field_0:int32)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : int32 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec main'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [%#s1640] (0 : usize) ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:loop invariant] [%#s1641] x = (0 : usize)} s1
      | s1 = UIntSize.eq {x} {[%#s1642] (0 : usize)} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s2)
      | s2 = any [ br0 -> {_6 = false} (! bb3) | br1 -> {_6} (! bb2) ]  ]
      
    | bb2 = s0 [ s0 =  [ &x <- [%#s1643] (1 : usize) ] s1 | s1 = bb4 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = s0
      [ s0 = {[@expl:loop invariant] [%#s1644] x = (1 : usize)} s1
      | s1 = UIntSize.eq {x} {[%#s1645] (1 : usize)} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s2)
      | s2 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb6) ]  ]
      
    | bb6 = bb7
    | bb7 = s0 [ s0 =  [ &x <- [%#s1646] (2 : usize) ] s1 | s1 = bb9 ] 
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = s0 [ s0 = {[@expl:loop invariant] [%#s1647] true} s1 | s1 = bb11 ] 
    | bb11 = bb13
    | bb13 = bb14
    | bb14 = s0 [ s0 = {[@expl:loop invariant] [%#s1648] x = (2 : usize)} s1 | s1 = bb15 ] 
    | bb15 = bb15
      [ bb15 = (! bb16)
        [ bb16 = s0
          [ s0 = UIntSize.ne {x} {[%#s1649] (3 : usize)} (fun (_ret':bool) ->  [ &_27 <- _ret' ] s1)
          | s1 = any [ br0 -> {_27 = false} (! bb18) | br1 -> {_27} (! bb17) ]  ]
          
        | bb17 = s0 [ s0 =  [ &x <- [%#s16410] (3 : usize) ] s1 | s1 = bb15 ]  ]
         ]
      
    | bb18 = bb19
    | bb19 = bb19
      [ bb19 = {[@expl:loop invariant] [%#s16411] x <= (4 : usize)}
        (! s0) [ s0 = bb20 ] 
        [ bb20 = s0
          [ s0 = UIntSize.lt {x} {[%#s16412] (4 : usize)} (fun (_ret':bool) ->  [ &_35 <- _ret' ] s1)
          | s1 = any [ br0 -> {_35 = false} (! bb25) | br1 -> {_35} (! bb21) ]  ]
          
        | bb21 = bb22
        | bb22 = s0
          [ s0 = {[@expl:loop invariant] [%#s16413] x <= (3 : usize)} s1
          | s1 =  [ &x <- [%#s16414] (4 : usize) ] s2
          | s2 = UIntSize.eq {x} {[%#s16415] (4 : usize)} (fun (_ret':bool) ->  [ &_40 <- _ret' ] s3)
          | s3 = any [ br0 -> {_40 = false} (! bb24) | br1 -> {_40} (! bb23) ]  ]
          
        | bb23 = bb19 ]
         ]
      
    | bb24 = {[%#s16416] false} any
    | bb25 = bb26
    | bb26 = s0 [ s0 = {[@expl:loop invariant] [%#s16417] x = (4 : usize)} s1 | s1 = bb27 ] 
    | bb27 = bb27
      [ bb27 = (! bb28)
        [ bb28 = s0
          [ s0 = UIntSize.ne {x} {[%#s16418] (5 : usize)} (fun (_ret':bool) ->  [ &_49 <- _ret' ] s1)
          | s1 = any [ br0 -> {_49 = false} (! bb30) | br1 -> {_49} (! bb29) ]  ]
          
        | bb29 = s0 [ s0 =  [ &x <- [%#s16419] (5 : usize) ] s1 | s1 = bb27 ]  ]
         ]
      
    | bb30 = any [ br0 -> {false} (! bb32) | br1 -> {true} (! bb31) ] 
    | bb31 = bb33
    | bb32 = bb33
    | bb33 = s0
      [ s0 =  [ &_57 <- { t_Range__start'0 = ([%#s16421] (0 : int32)); t_Range__end'0 = ([%#s16422] (10 : int32)) } ] s1
      | s1 = into_iter'0 {_57} (fun (_ret':t_Range'0) ->  [ &iter <- _ret' ] s2)
      | s2 = bb34 ]
      
    | bb34 = s0 [ s0 =  [ &iter_old <- [%#s16423] Snapshot.new iter ] s1 | s1 = bb35 ] 
    | bb35 = s0 [ s0 =  [ &produced <- [%#s16424] Snapshot.new (Seq.empty  : Seq.seq int32) ] s1 | s1 = bb36 ] 
    | bb36 = bb37
    | bb37 = s0
      [ s0 = {[@expl:for invariant] [%#s16425] inv'0 (Snapshot.inner produced)} s1
      | s1 = {[@expl:for invariant] [%#s16425] inv'1 iter} s2
      | s2 = {[@expl:for invariant] [%#s16425] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter} s3
      | s3 = {[@expl:loop invariant] [%#s16426] x = (5 : usize)} s4
      | s4 = Borrow.borrow_mut <t_Range'0> {iter}
          (fun (_ret':borrowed (t_Range'0)) ->  [ &_69 <- _ret' ]  [ &iter <- _ret'.final ] s5)
      | s5 = Borrow.borrow_final <t_Range'0> {_69.current} {Borrow.get_id _69}
          (fun (_ret':borrowed (t_Range'0)) ->  [ &_68 <- _ret' ]  [ &_69 <- { _69 with current = _ret'.final } ] s6)
      | s6 = next'0 {_68} (fun (_ret':t_Option'0) ->  [ &_67 <- _ret' ] s7)
      | s7 = bb38 ]
      
    | bb38 = s0
      [ s0 = -{resolve'0 _69}- s1
      | s1 = any [ br0 -> {_67 = C_None'0 } (! bb41) | br1 (x0:int32)-> {_67 = C_Some'0 x0} (! bb40) ]  ]
      
    | bb40 = bb42
    | bb42 = s0
      [ s0 = v_Some'0 {_67} (fun (r0'0:int32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
      | s1 = 
        [ &_72 <- [%#s16427] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
        
        s2
      | s2 = bb43 ]
      
    | bb43 = s0 [ s0 =  [ &produced <- _72 ] s1 | s1 = bb44 ] 
    | bb41 = bb44
    | bb44 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : usize = any_l ()
    | & _6 : bool = any_l ()
    | & _13 : bool = any_l ()
    | & _27 : bool = any_l ()
    | & _35 : bool = any_l ()
    | & _40 : bool = any_l ()
    | & _49 : bool = any_l ()
    | & iter : t_Range'0 = any_l ()
    | & _57 : t_Range'0 = any_l ()
    | & iter_old : Snapshot.snap_ty (t_Range'0) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq int32) = any_l ()
    | & _67 : t_Option'0 = any_l ()
    | & _68 : borrowed (t_Range'0) = any_l ()
    | & _69 : borrowed (t_Range'0) = any_l ()
    | & __creusot_proc_iter_elem : int32 = any_l ()
    | & _72 : Snapshot.snap_ty (Seq.seq int32) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
