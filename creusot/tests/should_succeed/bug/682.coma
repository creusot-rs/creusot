module M_682__add_some [#"682.rs" 6 0 6 24]
  let%span s6820 = "682.rs" 7 10 7 11
  let%span s6821 = "682.rs" 4 11 4 32
  let%span s6822 = "682.rs" 5 10 5 17
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sord4 = "../../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord5 = "../../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord6 = "../../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord7 = "../../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord8 = "../../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord9 = "../../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord10 = "../../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord11 = "../../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord12 = "../../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord13 = "../../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord14 = "../../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord15 = "../../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord16 = "../../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span sord17 = "../../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed UInt64.t) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed UInt64.t) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.prelude.UInt64
  
  function cmp_log'0 (self : UInt64.t) (o : UInt64.t) : t_Ordering'0 =
    [%#sord17] if UInt64.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord16] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord14] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord15] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord12] cmp_log'0 x y = C_Less'0)
   -> ([%#sord13] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt64.t) (y : UInt64.t) (z : UInt64.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt64.t, y : UInt64.t, z : UInt64.t, o : t_Ordering'0 . ([%#sord9] cmp_log'0 x y = o)
   -> ([%#sord10] cmp_log'0 y z = o)  -> ([%#sord11] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt64.t) : ()
  
  axiom refl'0_spec : forall x : UInt64.t . [%#sord8] cmp_log'0 x x = C_Equal'0
  
  use prelude.prelude.UInt64
  
  function cmp_gt_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord7] UInt64.ugt x y = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.prelude.UInt64
  
  function cmp_ge_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord6] UInt64.uge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord5] UInt64.ult x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.prelude.UInt64
  
  function cmp_le_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord4] UInt64.ule x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  meta "compute_max_steps" 1000000
  
  let rec add_some'0 (a:borrowed UInt64.t) (return'  (ret:()))= {[@expl:add_some requires] [%#s6821] UInt64.ule a.current (UInt64.udiv (v_MAX'0 : UInt64.t) (2 : UInt64.t))}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt64.add {a.current} {[%#s6820] (1 : UInt64.t)}
          (fun (_ret':UInt64.t) ->  [ &a <- { a with current = _ret' } ] s1)
      | s1 = -{resolve'0 a}- s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & a : borrowed UInt64.t = a ] 
    [ return' (result:())-> {[@expl:add_some ensures] [%#s6822] UInt64.ugt a.final a.current} (! return' {result}) ]
    
end
module M_682__foo [#"682.rs" 12 0 12 23]
  let%span s6820 = "682.rs" 13 29 13 42
  let%span s6821 = "682.rs" 15 18 15 27
  let%span s6822 = "682.rs" 10 11 10 21
  let%span s6823 = "682.rs" 11 10 11 17
  let%span s6824 = "682.rs" 4 11 4 32
  let%span s6825 = "682.rs" 5 10 5 17
  let%span sresolve6 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sord7 = "../../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord8 = "../../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord9 = "../../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord10 = "../../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord11 = "../../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord12 = "../../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord13 = "../../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord14 = "../../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord15 = "../../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord16 = "../../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord17 = "../../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord18 = "../../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord19 = "../../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span sord20 = "../../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.prelude.UInt64
  
  function cmp_log'0 (self : UInt64.t) (o : UInt64.t) : t_Ordering'0 =
    [%#sord20] if UInt64.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord19] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord17] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord18] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord15] cmp_log'0 x y = C_Less'0)
   -> ([%#sord16] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt64.t) (y : UInt64.t) (z : UInt64.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt64.t, y : UInt64.t, z : UInt64.t, o : t_Ordering'0 . ([%#sord12] cmp_log'0 x y
  = o)  -> ([%#sord13] cmp_log'0 y z = o)  -> ([%#sord14] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt64.t) : ()
  
  axiom refl'0_spec : forall x : UInt64.t . [%#sord11] cmp_log'0 x x = C_Equal'0
  
  use prelude.prelude.UInt64
  
  function cmp_gt_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord10] UInt64.ugt x y
  = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.prelude.UInt64
  
  function cmp_ge_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord9] UInt64.uge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord8] UInt64.ult x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.prelude.UInt64
  
  function cmp_le_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord7] UInt64.ule x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  let rec add_some'0 (a:borrowed UInt64.t) (return'  (ret:()))= {[@expl:add_some requires] [%#s6824] UInt64.ule a.current (UInt64.udiv (v_MAX'0 : UInt64.t) (2 : UInt64.t))}
    any [ return' (result:())-> {[%#s6825] UInt64.ugt a.final a.current} (! return' {result}) ] 
  
  predicate resolve'1 (self : borrowed UInt64.t) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed UInt64.t) =
    resolve'1 _1
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec foo'0 (a:borrowed UInt64.t) (return'  (ret:()))= {[@expl:foo requires] [%#s6822] a.current = (3 : UInt64.t)}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &a_p <- [%#s6820] Snapshot.new a.current ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Borrow.borrow_final <UInt64.t> {a.current} {Borrow.get_id a}
          (fun (_ret':borrowed UInt64.t) ->  [ &_7 <- _ret' ]  [ &a <- { a with current = _ret'.final } ] s1)
      | s1 = add_some'0 {_7} (fun (_ret':()) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 a}- s1
      | s1 = {[@expl:assertion] [%#s6821] UInt64.ugt a.current (Snapshot.inner a_p)} s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & a : borrowed UInt64.t = a
    | & a_p : Snapshot.snap_ty UInt64.t = any_l ()
    | & _6 : () = any_l ()
    | & _7 : borrowed UInt64.t = any_l () ]
     [ return' (result:())-> {[@expl:foo ensures] [%#s6823] UInt64.ugt a.final a.current} (! return' {result}) ] 
end
