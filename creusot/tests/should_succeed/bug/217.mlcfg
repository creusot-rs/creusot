
module CreusotContracts_Logic_Seq_Impl0_Tail_Stub
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Tail_Interface
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Tail
  type t
  use seq.Seq
  use seq_ext.SeqExt
  function tail (self : Seq.seq t) : Seq.seq t =
    SeqExt.subsequence self 1 (Seq.length self)
  val tail (self : Seq.seq t) : Seq.seq t
    ensures { result = tail self }
    
end
module C217_Ex_Stub
  use seq.Seq
  use mach.int.Int
  function ex [#"../217.rs" 10 0 10 37] (c : Seq.seq int) (a : int) : int
end
module C217_Ex_Interface
  use seq.Seq
  use mach.int.Int
  function ex [#"../217.rs" 10 0 10 37] (c : Seq.seq int) (a : int) : int
end
module C217_Ex
  use seq.Seq
  use mach.int.Int
  use mach.int.Int
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Stub as Tail0 with
    type t = int
  function ex [#"../217.rs" 10 0 10 37] (c : Seq.seq int) (a : int) : int
  val ex [#"../217.rs" 10 0 10 37] (c : Seq.seq int) (a : int) : int
    ensures { result = ex c a }
    
  axiom def : forall c : Seq.seq int, a : int . ex c a = ([#"../217.rs" 8 0 8 8] if Seq.length c = 0 then
    0
  else
    ex (Tail0.tail c) a
  )
  axiom ex_spec : forall c : Seq.seq int, a : int . true
end
module C217_Ex_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int
  clone CreusotContracts_Logic_Seq_Impl0_Tail as Tail0 with
    type t = int
  let rec ghost function ex [#"../217.rs" 10 0 10 37] (c : Seq.seq int) (a : int) : int
    variant {[#"../217.rs" 9 10 9 17] Seq.length c}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../217.rs" 8 0 8 8] if pure {Seq.length c = 0} then 0 else let a' = Tail0.tail c in ex a' a
end
