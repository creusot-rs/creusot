module T_691__Foo [#"691.rs" 4 0 4 14]
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_Foo  =
    | C_Foo uint32
  
  let rec t_Foo (input:t_Foo) (ret  (bar:uint32))= any [ good (bar:uint32)-> {C_Foo bar = input} (! ret {bar}) ] 
  
  function t_Foo__bar (self : t_Foo) : uint32 =
    match self with
      | C_Foo a -> a
      end
end
module M_691__example [#"691.rs" 8 0 8 16]
  let%span s6910 = "691.rs" 9 23 9 27
  
  use prelude.prelude.Intrinsic
  
  use T_691__Foo as Foo'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec example (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &c <- Foo'0.C_Foo ([%#s6910] (2 : uint32)) ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () | & c : Foo'0.t_Foo = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
module T_691__example__qyClosure0 [#"691.rs" 10 12 10 39]
  use T_691__Foo as Foo'0
  
  use prelude.prelude.Borrow
  
  type m_691__example__qyClosure0  =
    | M_691__example__qyClosure0 (Foo'0.t_Foo)
  
  let rec m_691__example__qyClosure0 (input:m_691__example__qyClosure0) (ret  (c:Foo'0.t_Foo))= any
    [ good (c:Foo'0.t_Foo)-> {M_691__example__qyClosure0 c = input} (! ret {c}) ]
    
end
module M_691__example__qyClosure0 [#"691.rs" 10 12 10 39]
  let%span s6910 = "691.rs" 10 24 10 37
  
  use T_691__example__qyClosure0 as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_691__Foo as T_691__Foo
  
  use T_691__Foo as Foo'0
  
  function field_0'0 [#"691.rs" 10 12 10 39] (self : Closure'0.m_691__example__qyClosure0) : Foo'0.t_Foo =
    let Closure'0.M_691__example__qyClosure0 a = self in a
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec m_691__example__qyClosure0 (_1:Closure'0.m_691__example__qyClosure0) (return'  (ret:()))= {[%#s6910] T_691__Foo.t_Foo__bar (field_0'0 _1)
    = (2 : uint32)}
    (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
