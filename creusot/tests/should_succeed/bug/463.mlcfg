
module C463_Test_Closure0_Interface
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UIntSize
  type c463_test_closure0  =
    | C463_Test_Closure0
    
  predicate precondition [@cfg:stackify] (_1' : c463_test_closure0) (args : usize) =
    [#"../463.rs" 5 19 5 28] let (x) = args in UInt64.to_int x < 1000
  predicate postcondition [@cfg:stackify] (_1' : c463_test_closure0) (args : usize) (result : usize) =
    [#"../463.rs" 6 18 6 35] let (x) = args in UInt64.to_int result = UInt64.to_int x + 1
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c463_test_closure0) (args : usize) (result : usize) =
    [#"../463.rs" 6 18 6 35] let (x) = args in UInt64.to_int result = UInt64.to_int x + 1
  predicate postcondition_once [@cfg:stackify] (_1' : c463_test_closure0) (args : usize) (result : usize) =
    [#"../463.rs" 6 18 6 35] let (x) = args in UInt64.to_int result = UInt64.to_int x + 1
  predicate resolve (_1' : c463_test_closure0) =
    true
  val c463_Test_Closure0 [@cfg:stackify] (_1' : c463_test_closure0) (x : usize) : usize
    requires {[#"../463.rs" 5 19 5 28] UInt64.to_int x < 1000}
    ensures { [#"../463.rs" 6 18 6 35] UInt64.to_int result = UInt64.to_int x + 1 }
    
end
module C463_Test_Closure0
  type c463_test_closure0  =
    | C463_Test_Closure0
    
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  use mach.int.UInt64
  predicate precondition [@cfg:stackify] (_1' : c463_test_closure0) (args : usize) =
    [#"../463.rs" 5 19 5 28] let (x) = args in UInt64.to_int x < 1000
  predicate postcondition [@cfg:stackify] (_1' : c463_test_closure0) (args : usize) (result : usize) =
    [#"../463.rs" 6 18 6 35] let (x) = args in UInt64.to_int result = UInt64.to_int x + 1
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c463_test_closure0) (args : usize) (result : usize) =
    [#"../463.rs" 6 18 6 35] let (x) = args in UInt64.to_int result = UInt64.to_int x + 1
  predicate postcondition_once [@cfg:stackify] (_1' : c463_test_closure0) (args : usize) (result : usize) =
    [#"../463.rs" 6 18 6 35] let (x) = args in UInt64.to_int result = UInt64.to_int x + 1
  predicate resolve (_1' : c463_test_closure0) =
    true
  let rec cfg c463_Test_Closure0 [@cfg:stackify] [#"../463.rs" 7 8 7 18] (_1' : c463_test_closure0) (x : usize) : usize
    requires {[#"../463.rs" 5 19 5 28] UInt64.to_int x < 1000}
    ensures { [#"../463.rs" 6 18 6 35] UInt64.to_int result = UInt64.to_int x + 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var _1 : c463_test_closure0;
  var x_2 : usize;
  var _3 : usize;
  {
    _1 <- _1';
    x_2 <- x;
    goto BB0
  }
  BB0 {
    _3 <- x_2;
    _0 <- ([#"../463.rs" 7 19 7 24] _3 + (1 : usize));
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Stub
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  let rec ghost predicate resolve (self : t) = [@vc:do_not_keep_trace] [@vc:sp]
    true
end
module C463_Test_Interface
  val test [@cfg:stackify] (_ : ()) : ()
end
module C463_Test
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  clone C463_Test_Closure0_Interface as Closure00 with axiom .
  use mach.int.UInt64
  let rec cfg test [@cfg:stackify] [#"../463.rs" 3 0 3 13] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var c_1 : Closure00.c463_test_closure0;
  var closure_2 : Closure00.c463_test_closure0;
  var closure_3 : Closure00.c463_test_closure0;
  var y_6 : usize;
  var _7 : Closure00.c463_test_closure0;
  var _8 : usize;
  {
    goto BB0
  }
  BB0 {
    closure_3 <- Closure00.C463_Test_Closure0;
    assume { Closure00.resolve closure_2 };
    closure_2 <- closure_3;
    assume { Closure00.resolve closure_3 };
    assume { Closure00.resolve c_1 };
    c_1 <- closure_2;
    assume { Closure00.resolve closure_2 };
    _7 <- c_1;
    assume { Closure00.resolve c_1 };
    _8 <- ((2 : usize));
    y_6 <- ([#"../463.rs" 9 12 9 16] let (a) = _8 in Closure00.c463_Test_Closure0 _7 a);
    goto BB1
  }
  BB1 {
    assert { [#"../463.rs" 10 18 10 25] UInt64.to_int y_6 = 3 };
    _0 <- ();
    return _0
  }
  
end
