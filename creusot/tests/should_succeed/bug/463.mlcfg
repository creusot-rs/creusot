
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module C463_Test_Closure0_Type
  type c463_test_closure0  =
    | C463_Test_Closure0
    
end
module C463_Test_Closure0_Interface
  use export C463_Test_Closure0_Type
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  predicate resolve [#"../463.rs" 6 8 6 37] (_1' : c463_test_closure0) =
    [#"../463.rs" 1 0 1 0] true
  predicate unnest [#"../463.rs" 6 8 6 37] (self : c463_test_closure0) (_2' : c463_test_closure0) =
    [#"../463.rs" 1 0 1 0] true
  predicate precondition [#"../463.rs" 6 8 6 37] (self : c463_test_closure0) (args : usize) =
    [#"../463.rs" 5 19 5 28] let (x) = args in UIntSize.to_int x < 1000
  predicate postcondition_once [#"../463.rs" 6 8 6 37] (self : c463_test_closure0) (args : usize) (result : usize) =
    [#"../463.rs" 6 18 6 35] let (x) = args in UIntSize.to_int result = UIntSize.to_int x + 1
  predicate postcondition_mut [#"../463.rs" 6 8 6 37] (self : borrowed c463_test_closure0) (args : usize) (result : usize)
    
   =
    [#"../463.rs" 1 0 1 0] (let (x) = args in UIntSize.to_int result = UIntSize.to_int x + 1) /\ unnest ( * self) ( ^ self)
  predicate postcondition [#"../463.rs" 6 8 6 37] (self : c463_test_closure0) (args : usize) (result : usize) =
    [#"../463.rs" 6 18 6 35] let (x) = args in UIntSize.to_int result = UIntSize.to_int x + 1
  val c463_Test_Closure0 [#"../463.rs" 6 8 6 37] (_1' : c463_test_closure0) (x : usize) : usize
    requires {[#"../463.rs" 5 19 5 28] UIntSize.to_int x < 1000}
    ensures { [#"../463.rs" 6 18 6 35] UIntSize.to_int result = UIntSize.to_int x + 1 }
    
end
module C463_Test_Closure0
  use export C463_Test_Closure0_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  predicate resolve [#"../463.rs" 6 8 6 37] (_1' : c463_test_closure0) =
    [#"../463.rs" 1 0 1 0] true
  predicate unnest [#"../463.rs" 6 8 6 37] (self : c463_test_closure0) (_2' : c463_test_closure0) =
    [#"../463.rs" 1 0 1 0] true
  predicate precondition [#"../463.rs" 6 8 6 37] (self : c463_test_closure0) (args : usize) =
    [#"../463.rs" 5 19 5 28] let (x) = args in UIntSize.to_int x < 1000
  predicate postcondition_once [#"../463.rs" 6 8 6 37] (self : c463_test_closure0) (args : usize) (result : usize) =
    [#"../463.rs" 6 18 6 35] let (x) = args in UIntSize.to_int result = UIntSize.to_int x + 1
  predicate postcondition_mut [#"../463.rs" 6 8 6 37] (self : borrowed c463_test_closure0) (args : usize) (result : usize)
    
   =
    [#"../463.rs" 1 0 1 0] (let (x) = args in UIntSize.to_int result = UIntSize.to_int x + 1) /\ unnest ( * self) ( ^ self)
  predicate postcondition [#"../463.rs" 6 8 6 37] (self : c463_test_closure0) (args : usize) (result : usize) =
    [#"../463.rs" 6 18 6 35] let (x) = args in UIntSize.to_int result = UIntSize.to_int x + 1
  let rec cfg c463_Test_Closure0 [#"../463.rs" 6 8 6 37] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : c463_test_closure0) (x : usize) : usize
    requires {[#"../463.rs" 5 19 5 28] UIntSize.to_int x < 1000}
    ensures { [#"../463.rs" 6 18 6 35] UIntSize.to_int result = UIntSize.to_int x + 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var _1 : c463_test_closure0;
  var x_2 : usize;
  var res_3 : usize;
  var res_4 : usize;
  var _5 : usize;
  {
    _1 <- _1';
    x_2 <- x;
    goto BB0
  }
  BB0 {
    _5 <- x_2;
    res_4 <- ([#"../463.rs" 7 19 7 24] _5 + ([#"../463.rs" 7 23 7 24] (1 : usize)));
    res_3 <- res_4;
    _0 <- res_3;
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module C463_Test_Interface
  val test [#"../463.rs" 3 0 3 13] (_1' : ()) : ()
end
module C463_Test
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  clone C463_Test_Closure0_Interface as Closure00
  let rec cfg test [#"../463.rs" 3 0 3 13] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var c_1 : Closure00.c463_test_closure0;
  var y_2 : usize;
  var _3 : Closure00.c463_test_closure0;
  var _4 : usize;
  {
    goto BB0
  }
  BB0 {
    c_1 <- Closure00.C463_Test_Closure0;
    _3 <- c_1;
    _4 <- ([#"../463.rs" 9 14 9 15] (2 : usize));
    y_2 <- ([#"../463.rs" 9 12 9 16] let (a) = _4 in Closure00.c463_Test_Closure0 _3 a);
    goto BB1
  }
  BB1 {
    assume { Closure00.resolve c_1 };
    assert { [@expl:assertion] [#"../463.rs" 10 18 10 25] UIntSize.to_int y_2 = 3 };
    _0 <- ();
    return _0
  }
  
end
