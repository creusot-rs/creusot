module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module T_core__mem__manually_drop__ManuallyDrop
  type t_ManuallyDrop 't =
    | C_ManuallyDrop 't
  
  let rec t_ManuallyDrop < 't > (input:t_ManuallyDrop 't) (ret  (value:'t))= any
    [ good (value:'t)-> {C_ManuallyDrop value = input} (! ret {value}) ]
    
end
module T_alloc__vec__into_iter__IntoIter
  use prelude.prelude.Opaque
  
  use T_core__mem__manually_drop__ManuallyDrop as ManuallyDrop'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_IntoIter 't 'a =
    | C_IntoIter (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't) usize (ManuallyDrop'0.t_ManuallyDrop 'a) (NonNull'0.t_NonNull 't) opaque_ptr
  
  let rec t_IntoIter < 't > < 'a > (input:t_IntoIter 't 'a) (ret  (buf:NonNull'0.t_NonNull 't) (phantom:PhantomData'0.t_PhantomData 't) (cap:usize) (alloc:ManuallyDrop'0.t_ManuallyDrop 'a) (ptr:NonNull'0.t_NonNull 't) (end':opaque_ptr))= any
    [ good (buf:NonNull'0.t_NonNull 't) (phantom:PhantomData'0.t_PhantomData 't) (cap:usize) (alloc:ManuallyDrop'0.t_ManuallyDrop 'a) (ptr:NonNull'0.t_NonNull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      = input}
      (! ret {buf} {phantom} {cap} {alloc} {ptr} {end'}) ]
    
end
module M_874__can_extend [#"874.rs" 4 0 4 19]
  let%span s8740 = "874.rs" 5 21 5 22
  let%span s8741 = "874.rs" 5 24 5 25
  let%span s8742 = "874.rs" 5 27 5 28
  let%span s8743 = "874.rs" 6 17 6 18
  let%span s8744 = "874.rs" 6 20 6 21
  let%span s8745 = "874.rs" 6 23 6 24
  let%span s8746 = "874.rs" 9 17 9 18
  let%span s8747 = "874.rs" 9 20 9 21
  let%span s8748 = "874.rs" 9 23 9 24
  let%span s8749 = "874.rs" 9 26 9 27
  let%span s87410 = "874.rs" 9 29 9 30
  let%span s87411 = "874.rs" 9 32 9 33
  let%span s87412 = "874.rs" 10 4 10 32
  let%span sslice13 = "../../../../creusot-contracts/src/std/slice.rs" 336 18 336 35
  let%span svec14 = "../../../../creusot-contracts/src/std/vec.rs" 142 27 142 47
  let%span svec15 = "../../../../creusot-contracts/src/std/vec.rs" 143 16 147 18
  let%span svec16 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sboxed17 = "../../../../creusot-contracts/src/std/boxed.rs" 18 8 18 22
  let%span svec18 = "../../../../creusot-contracts/src/std/vec.rs" 194 20 194 24
  let%span svec19 = "../../../../creusot-contracts/src/std/vec.rs" 200 20 200 33
  let%span svec20 = "../../../../creusot-contracts/src/std/vec.rs" 262 20 262 57
  let%span svec21 = "../../../../creusot-contracts/src/std/vec.rs" 269 12 269 41
  let%span smodel22 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sslice23 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice24 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span svec25 = "../../../../creusot-contracts/src/std/vec.rs" 275 14 275 45
  let%span svec26 = "../../../../creusot-contracts/src/std/vec.rs" 273 4 273 10
  let%span svec27 = "../../../../creusot-contracts/src/std/vec.rs" 282 15 282 32
  let%span svec28 = "../../../../creusot-contracts/src/std/vec.rs" 283 15 283 32
  let%span svec29 = "../../../../creusot-contracts/src/std/vec.rs" 284 14 284 42
  let%span svec30 = "../../../../creusot-contracts/src/std/vec.rs" 280 4 280 10
  let%span sresolve31 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use seq.Seq
  
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use T_alloc__vec__into_iter__IntoIter as IntoIter'0
  
  use seq.Seq
  
  function view'4 (self : IntoIter'0.t_IntoIter int32 (Global'0.t_Global)) : Seq.seq int32
  
  predicate produces'0 (self : IntoIter'0.t_IntoIter int32 (Global'0.t_Global)) (visited : Seq.seq int32) (rhs : IntoIter'0.t_IntoIter int32 (Global'0.t_Global))
    
   =
    [%#svec21] view'4 self = Seq.(++) visited (view'4 rhs)
  
  function produces_trans'0 (a : IntoIter'0.t_IntoIter int32 (Global'0.t_Global)) (ab : Seq.seq int32) (b : IntoIter'0.t_IntoIter int32 (Global'0.t_Global)) (bc : Seq.seq int32) (c : IntoIter'0.t_IntoIter int32 (Global'0.t_Global)) : ()
    
   =
    [%#svec30] ()
  
  axiom produces_trans'0_spec : forall a : IntoIter'0.t_IntoIter int32 (Global'0.t_Global), ab : Seq.seq int32, b : IntoIter'0.t_IntoIter int32 (Global'0.t_Global), bc : Seq.seq int32, c : IntoIter'0.t_IntoIter int32 (Global'0.t_Global) . ([%#svec27] produces'0 a ab b)
   -> ([%#svec28] produces'0 b bc c)  -> ([%#svec29] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : IntoIter'0.t_IntoIter int32 (Global'0.t_Global)) : () =
    [%#svec26] ()
  
  axiom produces_refl'0_spec : forall self : IntoIter'0.t_IntoIter int32 (Global'0.t_Global) . [%#svec25] produces'0 self (Seq.empty  : Seq.seq int32) self
  
  predicate inv'5 (_1 : Seq.seq int32)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Seq.seq int32 [inv'5 x] . inv'5 x = true
  
  use prelude.prelude.Borrow
  
  predicate inv'4 (_1 : borrowed (IntoIter'0.t_IntoIter int32 (Global'0.t_Global)))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (IntoIter'0.t_IntoIter int32 (Global'0.t_Global)) [inv'4 x] . inv'4 x
  = true
  
  predicate inv'3 (_1 : IntoIter'0.t_IntoIter int32 (Global'0.t_Global))
  
  axiom inv_axiom'3 [@rewrite] : forall x : IntoIter'0.t_IntoIter int32 (Global'0.t_Global) [inv'3 x] . inv'3 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'2 (_1 : borrowed (Vec'0.t_Vec int32 (Global'0.t_Global)))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (Vec'0.t_Vec int32 (Global'0.t_Global)) [inv'2 x] . inv'2 x = true
  
  predicate inv'1 (_1 : Vec'0.t_Vec int32 (Global'0.t_Global))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Vec'0.t_Vec int32 (Global'0.t_Global) [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Slice
  
  predicate inv'0 (_1 : slice int32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : slice int32 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'0 (self : Vec'0.t_Vec int32 (Global'0.t_Global)) : Seq.seq int32
  
  axiom view'0_spec : forall self : Vec'0.t_Vec int32 (Global'0.t_Global) . [%#svec16] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function view'2 (self : borrowed (Vec'0.t_Vec int32 (Global'0.t_Global))) : Seq.seq int32 =
    [%#smodel22] view'0 self.current
  
  function view'5 (self : borrowed (IntoIter'0.t_IntoIter int32 (Global'0.t_Global))) : Seq.seq int32 =
    [%#smodel22] view'4 self.current
  
  predicate resolve'0 (self : borrowed (IntoIter'0.t_IntoIter int32 (Global'0.t_Global))) =
    [%#sresolve31] self.final = self.current
  
  predicate completed'0 (self : borrowed (IntoIter'0.t_IntoIter int32 (Global'0.t_Global))) =
    [%#svec20] resolve'0 self /\ view'5 self = (Seq.empty  : Seq.seq int32)
  
  predicate into_iter_post'0 (self : Vec'0.t_Vec int32 (Global'0.t_Global)) (res : IntoIter'0.t_IntoIter int32 (Global'0.t_Global))
    
   =
    [%#svec19] view'0 self = view'4 res
  
  predicate into_iter_pre'0 (self : Vec'0.t_Vec int32 (Global'0.t_Global)) =
    [%#svec18] true
  
  let rec extend'0 (self:borrowed (Vec'0.t_Vec int32 (Global'0.t_Global))) (iter:Vec'0.t_Vec int32 (Global'0.t_Global)) (return'  (ret:()))= {[@expl:precondition] inv'1 iter}
    {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [%#svec14] into_iter_pre'0 iter}
    any
    [ return' (result:())-> {[%#svec15] exists start_ : IntoIter'0.t_IntoIter int32 (Global'0.t_Global), done' : borrowed (IntoIter'0.t_IntoIter int32 (Global'0.t_Global)), prod : Seq.seq int32 . inv'3 start_
      /\ inv'4 done'
      /\ inv'5 prod
      /\ into_iter_post'0 iter start_
      /\ completed'0 done' /\ produces'0 start_ prod done'.current /\ view'0 self.final = Seq.(++) (view'2 self) prod}
      (! return' {result}) ]
    
  
  use prelude.prelude.Slice
  
  function view'3 (self : slice int32) : Seq.seq int32
  
  axiom view'3_spec : forall self : slice int32 . ([%#sslice24] view'3 self = Slice.id self)
  && ([%#sslice23] Seq.length (view'3 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  function view'1 (self : slice int32) : Seq.seq int32 =
    [%#sboxed17] view'3 self
  
  let rec into_vec'0 (self:slice int32) (return'  (ret:Vec'0.t_Vec int32 (Global'0.t_Global)))= {[@expl:precondition] inv'0 self}
    any
    [ return' (result:Vec'0.t_Vec int32 (Global'0.t_Global))-> {inv'1 result}
      {[%#sslice13] view'0 result = view'1 self}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec can_extend (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:array int32)-> (! -{Seq.get __arr_temp.elts 0 = ([%#s8740] (1 : int32))
          /\ Seq.get __arr_temp.elts 1 = ([%#s8741] (2 : int32))
          /\ Seq.get __arr_temp.elts 2 = ([%#s8742] (3 : int32)) /\ Seq.length __arr_temp.elts = 3}-
           [ &_4 <- __arr_temp ] 
          s1) ]
        
      | s1 = bb1 ]
      
    | bb1 = bb2
    | bb2 = s0
      [ s0 = into_vec'0 {_4} (fun (_ret':Vec'0.t_Vec int32 (Global'0.t_Global)) ->  [ &v <- _ret' ] s1) | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = any
        [ any_ (__arr_temp:array int32)-> (! -{Seq.get __arr_temp.elts 0 = ([%#s8743] (4 : int32))
          /\ Seq.get __arr_temp.elts 1 = ([%#s8744] (5 : int32))
          /\ Seq.get __arr_temp.elts 2 = ([%#s8745] (6 : int32)) /\ Seq.length __arr_temp.elts = 3}-
           [ &_8 <- __arr_temp ] 
          s1) ]
        
      | s1 = bb4 ]
      
    | bb4 = bb5
    | bb5 = s0
      [ s0 = into_vec'0 {_8} (fun (_ret':Vec'0.t_Vec int32 (Global'0.t_Global)) ->  [ &w <- _ret' ] s1) | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 = Borrow.borrow_mut <Vec'0.t_Vec int32 (Global'0.t_Global)> {v}
          (fun (_ret':borrowed (Vec'0.t_Vec int32 (Global'0.t_Global))) ->  [ &_10 <- _ret' ]  [ &v <- _ret'.final ] s1)
      | s1 = extend'0 {_10} {w} (fun (_ret':()) ->  [ &_9 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = any
        [ any_ (__arr_temp:array int32)-> (! -{Seq.get __arr_temp.elts 0 = ([%#s8746] (1 : int32))
          /\ Seq.get __arr_temp.elts 1 = ([%#s8747] (2 : int32))
          /\ Seq.get __arr_temp.elts 2 = ([%#s8748] (3 : int32))
          /\ Seq.get __arr_temp.elts 3 = ([%#s8749] (4 : int32))
          /\ Seq.get __arr_temp.elts 4 = ([%#s87410] (5 : int32))
          /\ Seq.get __arr_temp.elts 5 = ([%#s87411] (6 : int32)) /\ Seq.length __arr_temp.elts = 6}-
           [ &_15 <- __arr_temp ] 
          s1) ]
        
      | s1 = bb8 ]
      
    | bb8 = bb9
    | bb9 = s0
      [ s0 = into_vec'0 {_15} (fun (_ret':Vec'0.t_Vec int32 (Global'0.t_Global)) ->  [ &z <- _ret' ] s1) | s1 = bb10 ]
      
    | bb10 = s0 [ s0 = {[@expl:assertion] [%#s87412] Seq.(==) (view'0 z) (view'0 v)} s1 | s1 = bb11 ] 
    | bb11 = bb12
    | bb12 = bb13
    | bb13 = bb14
    | bb14 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v : Vec'0.t_Vec int32 (Global'0.t_Global) = any_l ()
    | & _4 : array int32 = any_l ()
    | & w : Vec'0.t_Vec int32 (Global'0.t_Global) = any_l ()
    | & _8 : array int32 = any_l ()
    | & _9 : () = any_l ()
    | & _10 : borrowed (Vec'0.t_Vec int32 (Global'0.t_Global)) = any_l ()
    | & z : Vec'0.t_Vec int32 (Global'0.t_Global) = any_l ()
    | & _15 : array int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
