
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
    
  function any_l (_ : 'b) : 'a
  let rec t_manuallydrop < 't > (input:t_manuallydrop 't) (ret  (value:'t))= any
    [ good (value:'t)-> {C_ManuallyDrop value = input} (! ret {value})
    | bad (value:'t)-> {C_ManuallyDrop value <> input} {false} any ]
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use prelude.UIntSize
  use prelude.Int
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_intoiter 't 'a =
    | C_IntoIter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_intoiter < 't > < 'a > (input:t_intoiter 't 'a) (ret  (buf:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (phantom:Core_Marker_PhantomData_Type.t_phantomdata 't) (cap:usize) (alloc:Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end':opaque_ptr))= any
    [ good (buf:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (phantom:Core_Marker_PhantomData_Type.t_phantomdata 't) (cap:usize) (alloc:Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      = input}
      (! ret {buf} {phantom} {cap} {alloc} {ptr} {end'})
    | bad (buf:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (phantom:Core_Marker_PhantomData_Type.t_phantomdata 't) (cap:usize) (alloc:Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
  function any_l (_ : 'b) : 'a
end
module C874_CanExtend
  use prelude.Int32
  use prelude.Slice
  predicate invariant'6 (self : slice int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:slice int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : slice int32)
  let rec inv'6 (_x:slice int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : slice int32 . inv'6 x = true
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use seq.Seq
  predicate inv'3 (_x : Seq.seq int32)
  let rec inv'3 (_x:Seq.seq int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  predicate inv'5 (_x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global))
  let rec inv'5 (_x:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  function shallow_model'4 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    
  let rec shallow_model'4 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq int32))= any
    [ return' (result:Seq.seq int32)-> {result = shallow_model'4 self} (! return' {result}) ]
    
  predicate produces'0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) (visited : Seq.seq int32) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 254 12 254 41] shallow_model'4 self
    = Seq.(++) visited (shallow_model'4 rhs)
  let rec produces'0 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) (visited:Seq.seq int32) (rhs:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited rhs} (! return' {result}) ]
    
  function produces_trans'0 (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) (ab : Seq.seq int32) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) (bc : Seq.seq int32) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 263 4 263 10] ()
  let rec produces_trans'0 (a:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) (ab:Seq.seq int32) (b:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) (bc:Seq.seq int32) (c:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 64 268 65] inv'5 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 52 268 54] inv'3 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 43 268 44] inv'5 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 31 268 33] inv'3 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 22 268 23] inv'5 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 266 15 266 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 265 15 265 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global), ab : Seq.seq int32, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global), bc : Seq.seq int32, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 265 15 265 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 266 15 266 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 22 268 23] inv'5 a)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 31 268 33] inv'3 ab)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 43 268 44] inv'5 b)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 52 268 54] inv'3 bc)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 64 268 65] inv'5 c)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 267 14 267 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 258 4 258 10] ()
  let rec produces_refl'0 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 261 21 261 25] inv'5 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 261 21 261 25] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 260 14 260 45] produces'0 self (Seq.empty  : Seq.seq int32) self)
  predicate invariant'5 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  axiom inv'5 : forall x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global) . inv'5 x
  = true
  use prelude.Borrow
  predicate invariant'4 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'4 (_x:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) . inv'4 x
  = true
  predicate invariant'3 (self : Seq.seq int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Seq.seq int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq int32 . inv'3 x = true
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant'2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'2 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) . inv'2 x = true
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'1 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  let rec inv'1 (_x:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq int32))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'1 self}
    any [ return' (result:Seq.seq int32)-> {result = shallow_model'0 self} (! return' {result}) ] 
  axiom shallow_model'0_spec : forall self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'3 (shallow_model'0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'3 (shallow_model'0 self)
  let rec invariant'1 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv'1 x = true
  predicate invariant'0 (self : slice int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:slice int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : slice int32)
  let rec inv'0 (_x:slice int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : slice int32 . inv'0 x = true
  use prelude.Intrinsic
  use seq.Seq
  predicate resolve'1 (self : int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'1 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'0 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:int32))= any
    [ return' (result:int32)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  predicate resolve'0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model'0 self)  -> resolve'1 (index_logic'0 self i)
  let rec resolve'0 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  function shallow_model'2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'0 ( * self)
  let rec shallow_model'2 (self:borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq int32))= any
    [ return' (result:Seq.seq int32)-> {result = shallow_model'2 self} (! return' {result}) ]
    
  function shallow_model'5 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'4 ( * self)
  let rec shallow_model'5 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq int32))= any
    [ return' (result:Seq.seq int32)-> {result = shallow_model'5 self} (! return' {result}) ]
    
  predicate resolve'2 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 247 20 247 57] resolve'2 self
    /\ shallow_model'5 self = (Seq.empty  : Seq.seq int32)
  let rec completed'0 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate into_iter_post'0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 191 20 191 33] shallow_model'0 self = shallow_model'4 res
  let rec into_iter_post'0 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (res:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 185 20 185 24] true
  let rec into_iter_pre'0 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec extend'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (iter:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:()))= {[@expl:precondition] inv'1 iter}
    {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 134 27 134 47] into_iter_pre'0 iter}
    any
    [ return' (result:())-> {[#"../../../../../creusot-contracts/src/std/vec.rs" 135 16 138 18] exists prod : Seq.seq int32 . exists done' : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global)) . exists start_ : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter int32 (Alloc_Alloc_Global_Type.t_global) . inv'3 prod
      /\ inv'4 done'
      /\ inv'5 start_
      /\ into_iter_post'0 iter start_
      /\ completed'0 done'
      /\ produces'0 start_ prod ( * done') /\ shallow_model'0 ( ^ self) = Seq.(++) (shallow_model'2 self) prod}
      (! return' {result}) ]
    
  use prelude.Slice
  function shallow_model'3 (self : slice int32) : Seq.seq int32
  let rec shallow_model'3 (self:slice int32) (return'  (ret:Seq.seq int32))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'6 self}
    any [ return' (result:Seq.seq int32)-> {result = shallow_model'3 self} (! return' {result}) ] 
  axiom shallow_model'3_spec : forall self : slice int32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'3 (shallow_model'3 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'3 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (max'0 : usize))
  function shallow_model'1 (self : slice int32) : Seq.seq int32 =
    [#"../../../../../creusot-contracts/src/std/boxed.rs" 20 8 20 31] shallow_model'3 self
  let rec shallow_model'1 (self:slice int32) (return'  (ret:Seq.seq int32))= any
    [ return' (result:Seq.seq int32)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  let rec into_vec'0 (self:slice int32) (return'  (ret:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)))= {[@expl:precondition] inv'0 self}
    any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))-> {inv'1 result}
      {[#"../../../../../creusot-contracts/src/std/slice.rs" 325 18 325 35] shallow_model'0 result
      = shallow_model'1 self}
      (! return' {result}) ]
    
  let rec can_extend (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:array int32)-> (! -{Seq.get (__arr_temp.elts) 0 = ([#"../874.rs" 5 21 5 22] (1 : int32))
          /\ Seq.get (__arr_temp.elts) 1 = ([#"../874.rs" 5 24 5 25] (2 : int32))
          /\ Seq.get (__arr_temp.elts) 2 = ([#"../874.rs" 5 27 5 28] (3 : int32)) /\ Seq.length (__arr_temp.elts) = 3}-
           [ &_4 <- __arr_temp ] 
          s1) ]
        
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = into_vec'0 {_4}
          (fun (_ret':Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) ->  [ &v <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = any
        [ any_ (__arr_temp:array int32)-> (! -{Seq.get (__arr_temp.elts) 0 = ([#"../874.rs" 6 17 6 18] (4 : int32))
          /\ Seq.get (__arr_temp.elts) 1 = ([#"../874.rs" 6 20 6 21] (5 : int32))
          /\ Seq.get (__arr_temp.elts) 2 = ([#"../874.rs" 6 23 6 24] (6 : int32)) /\ Seq.length (__arr_temp.elts) = 3}-
           [ &_8 <- __arr_temp ] 
          s1) ]
        
      | s1 = bb4 ]
      
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = s0
      [ s0 = into_vec'0 {_8}
          (fun (_ret':Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) ->  [ &w <- _ret' ] s1)
      | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 = Borrow.borrow_mut <Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)> {v}
          (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) ->
             [ &_10 <- _ret' ] 
             [ &v <-  ^ _10 ] 
            s1)
      | s1 = extend'0 {_10} {w} (fun (_ret':()) ->  [ &_9 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = -{resolve'0 v}- s1
      | s1 = any
        [ any_ (__arr_temp:array int32)-> (! -{Seq.get (__arr_temp.elts) 0 = ([#"../874.rs" 9 17 9 18] (1 : int32))
          /\ Seq.get (__arr_temp.elts) 1 = ([#"../874.rs" 9 20 9 21] (2 : int32))
          /\ Seq.get (__arr_temp.elts) 2 = ([#"../874.rs" 9 23 9 24] (3 : int32))
          /\ Seq.get (__arr_temp.elts) 3 = ([#"../874.rs" 9 26 9 27] (4 : int32))
          /\ Seq.get (__arr_temp.elts) 4 = ([#"../874.rs" 9 29 9 30] (5 : int32))
          /\ Seq.get (__arr_temp.elts) 5 = ([#"../874.rs" 9 32 9 33] (6 : int32)) /\ Seq.length (__arr_temp.elts) = 6}-
           [ &_15 <- __arr_temp ] 
          s2) ]
        
      | s2 = bb8 ]
      
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0
      [ s0 = into_vec'0 {_15}
          (fun (_ret':Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) ->  [ &z <- _ret' ] s1)
      | s1 = bb10 ]
      
    | bb10 = s0
      [ s0 = -{resolve'0 z}- s1
      | s1 = {[@expl:assertion] [#"../874.rs" 10 4 10 32] Seq.(==) (shallow_model'0 z) (shallow_model'0 v)} s2
      | s2 = bb11 ]
      
    | bb11 = s0 [ s0 =  [ &_0 <- [#"../874.rs" 4 20 11 1] () ] s1 | s1 = bb12 ] 
    | bb12 = s0 [ s0 = bb13 ] 
    | bb13 = s0 [ s0 = bb14 ] 
    | bb14 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & v : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    | & _4 : array int32 = any_l () : array int32
    | & w : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    | & _8 : array int32 = any_l () : array int32
    | & _9 : () = any_l () : ()
    | & _10 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
    | & z : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    | & _15 : array int32 = any_l () : array int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
