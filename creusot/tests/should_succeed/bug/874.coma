
module Alloc_Vec_Vec_Type
  use prelude.prelude.Opaque
  
  type t_vec 't 'a =
    | C_Vec hidden_field hidden_field
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:hidden_field) (len:hidden_field))= any
    [ good (buf:hidden_field) (len:hidden_field)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:hidden_field) (len:hidden_field)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.prelude.Opaque
  
  type t_intoiter 't 'a =
    | C_IntoIter hidden_field hidden_field hidden_field hidden_field hidden_field hidden_field
  
  function any_l (_ : 'b) : 'a
  
  let rec t_intoiter < 't > < 'a > (input:t_intoiter 't 'a) (ret  (buf:hidden_field) (phantom:hidden_field) (cap:hidden_field) (alloc:hidden_field) (ptr:hidden_field) (end':hidden_field))= any
    [ good (buf:hidden_field) (phantom:hidden_field) (cap:hidden_field) (alloc:hidden_field) (ptr:hidden_field) (end':hidden_field)-> {C_IntoIter buf phantom cap alloc ptr end'
      = input}
      (! ret {buf} {phantom} {cap} {alloc} {ptr} {end'})
    | bad (buf:hidden_field) (phantom:hidden_field) (cap:hidden_field) (alloc:hidden_field) (ptr:hidden_field) (end':hidden_field)-> {C_IntoIter buf phantom cap alloc ptr end'
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use prelude.prelude.Opaque
  
  type t_box 't 'a =
    | C_Box hidden_field hidden_field
  
  function any_l (_ : 'b) : 'a
end
module C874_CanExtend
  let%span s8740 = "../874.rs" 5 21 5 22
  
  let%span s8741 = "../874.rs" 5 24 5 25
  
  let%span s8742 = "../874.rs" 5 27 5 28
  
  let%span s8743 = "../874.rs" 6 17 6 18
  
  let%span s8744 = "../874.rs" 6 20 6 21
  
  let%span s8745 = "../874.rs" 6 23 6 24
  
  let%span s8746 = "../874.rs" 9 17 9 18
  
  let%span s8747 = "../874.rs" 9 20 9 21
  
  let%span s8748 = "../874.rs" 9 23 9 24
  
  let%span s8749 = "../874.rs" 9 26 9 27
  
  let%span s87410 = "../874.rs" 9 29 9 30
  
  let%span s87411 = "../874.rs" 9 32 9 33
  
  let%span s87412 = "../874.rs" 10 4 10 32
  
  let%span span13 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span14 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span16 = "" 0 0 0 0
  
  let%span span17 = "../../../../../creusot-contracts/src/std/slice.rs" 27 14 27 41
  
  let%span span18 = "../../../../../creusot-contracts/src/std/slice.rs" 28 14 28 42
  
  let%span span19 = "../../../../../creusot-contracts/src/std/slice.rs" 16 20 16 30
  
  let%span span20 = "../../../../../creusot-contracts/src/std/vec.rs" 254 12 254 41
  
  let%span span21 = "../../../../../creusot-contracts/src/std/vec.rs" 265 15 265 32
  
  let%span span22 = "../../../../../creusot-contracts/src/std/vec.rs" 266 15 266 32
  
  let%span span23 = "../../../../../creusot-contracts/src/std/vec.rs" 267 14 267 42
  
  let%span span24 = "../../../../../creusot-contracts/src/std/vec.rs" 263 4 263 10
  
  let%span span25 = "../../../../../creusot-contracts/src/std/vec.rs" 260 14 260 45
  
  let%span span26 = "../../../../../creusot-contracts/src/std/vec.rs" 258 4 258 10
  
  let%span span27 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span28 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span29 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span30 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span31 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span32 = "../../../../../creusot-contracts/src/std/vec.rs" 247 20 247 57
  
  let%span span33 = "../../../../../creusot-contracts/src/std/vec.rs" 191 20 191 33
  
  let%span span34 = "../../../../../creusot-contracts/src/std/vec.rs" 185 20 185 24
  
  let%span span35 = "../../../../../creusot-contracts/src/std/vec.rs" 134 27 134 47
  
  let%span span36 = "" 0 0 0 0
  
  let%span span37 = "" 0 0 0 0
  
  let%span span38 = "../../../../../creusot-contracts/src/std/vec.rs" 135 16 138 18
  
  let%span span39 = "../../../../../creusot-contracts/src/std/boxed.rs" 18 8 18 31
  
  let%span span40 = "" 0 0 0 0
  
  let%span span41 = "../../../../../creusot-contracts/src/std/slice.rs" 334 18 334 35
  
  let%span span42 = "" 0 0 0 0
  
  use prelude.prelude.Int32
  
  predicate invariant'6 (self : int32) =
    [%#span13] true
  
  predicate inv'6 (_1 : int32)
  
  axiom inv'6 : forall x : int32 . inv'6 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'5 (self : int32) =
    [%#span14] inv'6 self
  
  predicate inv'5 (_1 : int32)
  
  axiom inv'5 : forall x : int32 . inv'5 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq int32) =
    [%#span15] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'4 (_1 : Seq.seq int32)
  
  axiom inv'4 : forall x : Seq.seq int32 . inv'4 x = true
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant max'0 : usize = [%#span16] (18446744073709551615 : usize)
  
  function shallow_model'3 (self : slice int32) : Seq.seq int32
  
  axiom shallow_model'3_spec : forall self : slice int32 . ([%#span18] shallow_model'3 self = Slice.id self)
  && ([%#span17] Seq.length (shallow_model'3 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'3 (self : slice int32) =
    [%#span19] inv'4 (shallow_model'3 self)
  
  predicate inv'3 (_1 : slice int32)
  
  axiom inv'3 : forall x : slice int32 . inv'3 x = true
  
  use Alloc_Vec_IntoIter_IntoIter_Type as IntoIter'0
  
  use seq.Seq
  
  function shallow_model'4 (self : IntoIter'0.t_intoiter int32 (Global'0.t_global)) : Seq.seq int32
  
  predicate produces'0 (self : IntoIter'0.t_intoiter int32 (Global'0.t_global)) (visited : Seq.seq int32) (rhs : IntoIter'0.t_intoiter int32 (Global'0.t_global))
    
   =
    [%#span20] shallow_model'4 self = Seq.(++) visited (shallow_model'4 rhs)
  
  function produces_trans'0 (a : IntoIter'0.t_intoiter int32 (Global'0.t_global)) (ab : Seq.seq int32) (b : IntoIter'0.t_intoiter int32 (Global'0.t_global)) (bc : Seq.seq int32) (c : IntoIter'0.t_intoiter int32 (Global'0.t_global)) : ()
    
   =
    [%#span24] ()
  
  axiom produces_trans'0_spec : forall a : IntoIter'0.t_intoiter int32 (Global'0.t_global), ab : Seq.seq int32, b : IntoIter'0.t_intoiter int32 (Global'0.t_global), bc : Seq.seq int32, c : IntoIter'0.t_intoiter int32 (Global'0.t_global) . ([%#span21] produces'0 a ab b)
   -> ([%#span22] produces'0 b bc c)  -> ([%#span23] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : IntoIter'0.t_intoiter int32 (Global'0.t_global)) : () =
    [%#span26] ()
  
  axiom produces_refl'0_spec : forall self : IntoIter'0.t_intoiter int32 (Global'0.t_global) . [%#span25] produces'0 self (Seq.empty  : Seq.seq int32) self
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate inv'1 (_1 : Vec'0.t_vec int32 (Global'0.t_global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Vec'0.t_vec int32 (Global'0.t_global))) =
    [%#span27] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : borrowed (Vec'0.t_vec int32 (Global'0.t_global)))
  
  axiom inv'2 : forall x : borrowed (Vec'0.t_vec int32 (Global'0.t_global)) . inv'2 x = true
  
  function shallow_model'0 (self : Vec'0.t_vec int32 (Global'0.t_global)) : Seq.seq int32
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec int32 (Global'0.t_global) . [%#span28] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize)
  
  predicate invariant'1 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span29] inv'4 (shallow_model'0 self)
  
  axiom inv'1 : forall x : Vec'0.t_vec int32 (Global'0.t_global) . inv'1 x = true
  
  predicate invariant'0 (self : slice int32) =
    [%#span14] inv'3 self
  
  predicate inv'0 (_1 : slice int32)
  
  axiom inv'0 : forall x : slice int32 . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  function shallow_model'2 (self : borrowed (Vec'0.t_vec int32 (Global'0.t_global))) : Seq.seq int32 =
    [%#span30] shallow_model'0 self.current
  
  function shallow_model'5 (self : borrowed (IntoIter'0.t_intoiter int32 (Global'0.t_global))) : Seq.seq int32 =
    [%#span30] shallow_model'4 self.current
  
  predicate resolve'0 (self : borrowed (IntoIter'0.t_intoiter int32 (Global'0.t_global))) =
    [%#span31] self.final = self.current
  
  predicate completed'0 (self : borrowed (IntoIter'0.t_intoiter int32 (Global'0.t_global))) =
    [%#span32] resolve'0 self /\ shallow_model'5 self = (Seq.empty  : Seq.seq int32)
  
  predicate into_iter_post'0 (self : Vec'0.t_vec int32 (Global'0.t_global)) (res : IntoIter'0.t_intoiter int32 (Global'0.t_global))
    
   =
    [%#span33] shallow_model'0 self = shallow_model'4 res
  
  predicate into_iter_pre'0 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span34] true
  
  let rec extend'0 (self:borrowed (Vec'0.t_vec int32 (Global'0.t_global))) (iter:Vec'0.t_vec int32 (Global'0.t_global)) (return'  (ret:()))= {[@expl:precondition] [%#span37] inv'1 iter}
    {[@expl:precondition] [%#span36] inv'2 self}
    {[@expl:precondition] [%#span35] into_iter_pre'0 iter}
    any
    [ return' (result:())-> {[%#span38] exists start_ : IntoIter'0.t_intoiter int32 (Global'0.t_global), done' : borrowed (IntoIter'0.t_intoiter int32 (Global'0.t_global)), prod : Seq.seq int32 . into_iter_post'0 iter start_
      /\ completed'0 done'
      /\ produces'0 start_ prod done'.current /\ shallow_model'0 self.final = Seq.(++) (shallow_model'2 self) prod}
      (! return' {result}) ]
    
  
  function shallow_model'1 (self : slice int32) : Seq.seq int32 =
    [%#span39] shallow_model'3 self
  
  let rec into_vec'0 (self:slice int32) (return'  (ret:Vec'0.t_vec int32 (Global'0.t_global)))= {[@expl:precondition] [%#span40] inv'0 self}
    any
    [ return' (result:Vec'0.t_vec int32 (Global'0.t_global))-> {[%#span42] inv'1 result}
      {[%#span41] shallow_model'0 result = shallow_model'1 self}
      (! return' {result}) ]
    
  
  let rec can_extend (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:array int32)-> (! -{Seq.get __arr_temp.elts 0 = ([%#s8740] (1 : int32))
          /\ Seq.get __arr_temp.elts 1 = ([%#s8741] (2 : int32))
          /\ Seq.get __arr_temp.elts 2 = ([%#s8742] (3 : int32)) /\ Seq.length __arr_temp.elts = 3}-
           [ &_4 <- __arr_temp ] 
          s1) ]
        
      | s1 = bb1 ]
      
    | bb1 = bb2
    | bb2 = s0
      [ s0 = into_vec'0 {_4} (fun (_ret':Vec'0.t_vec int32 (Global'0.t_global)) ->  [ &v <- _ret' ] s1) | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = any
        [ any_ (__arr_temp:array int32)-> (! -{Seq.get __arr_temp.elts 0 = ([%#s8743] (4 : int32))
          /\ Seq.get __arr_temp.elts 1 = ([%#s8744] (5 : int32))
          /\ Seq.get __arr_temp.elts 2 = ([%#s8745] (6 : int32)) /\ Seq.length __arr_temp.elts = 3}-
           [ &_8 <- __arr_temp ] 
          s1) ]
        
      | s1 = bb4 ]
      
    | bb4 = bb5
    | bb5 = s0
      [ s0 = into_vec'0 {_8} (fun (_ret':Vec'0.t_vec int32 (Global'0.t_global)) ->  [ &w <- _ret' ] s1) | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 = Borrow.borrow_mut <Vec'0.t_vec int32 (Global'0.t_global)> {v}
          (fun (_ret':borrowed (Vec'0.t_vec int32 (Global'0.t_global))) ->  [ &_10 <- _ret' ]  [ &v <- _10.final ] s1)
      | s1 = extend'0 {_10} {w} (fun (_ret':()) ->  [ &_9 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = any
        [ any_ (__arr_temp:array int32)-> (! -{Seq.get __arr_temp.elts 0 = ([%#s8746] (1 : int32))
          /\ Seq.get __arr_temp.elts 1 = ([%#s8747] (2 : int32))
          /\ Seq.get __arr_temp.elts 2 = ([%#s8748] (3 : int32))
          /\ Seq.get __arr_temp.elts 3 = ([%#s8749] (4 : int32))
          /\ Seq.get __arr_temp.elts 4 = ([%#s87410] (5 : int32))
          /\ Seq.get __arr_temp.elts 5 = ([%#s87411] (6 : int32)) /\ Seq.length __arr_temp.elts = 6}-
           [ &_15 <- __arr_temp ] 
          s1) ]
        
      | s1 = bb8 ]
      
    | bb8 = bb9
    | bb9 = s0
      [ s0 = into_vec'0 {_15} (fun (_ret':Vec'0.t_vec int32 (Global'0.t_global)) ->  [ &z <- _ret' ] s1) | s1 = bb10 ]
      
    | bb10 = s0 [ s0 = {[@expl:assertion] [%#s87412] Seq.(==) (shallow_model'0 z) (shallow_model'0 v)} s1 | s1 = bb11 ] 
    | bb11 = bb12
    | bb12 = bb13
    | bb13 = bb14
    | bb14 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v : Vec'0.t_vec int32 (Global'0.t_global) = any_l ()
    | & _4 : array int32 = any_l ()
    | & w : Vec'0.t_vec int32 (Global'0.t_global) = any_l ()
    | & _8 : array int32 = any_l ()
    | & _9 : () = any_l ()
    | & _10 : borrowed (Vec'0.t_vec int32 (Global'0.t_global)) = any_l ()
    | & z : Vec'0.t_vec int32 (Global'0.t_global) = any_l ()
    | & _15 : array int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
