
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module C206_A_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_a  =
    | C_A (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  let function a_0 (self : t_a) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_A a -> a
      end
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 27 4 27 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C206_U2_Stub
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use C206_A_Type as C206_A_Type
  function u2 [#"../206.rs" 9 0 9 11] (a : C206_A_Type.t_a) : ()
end
module C206_U2_Interface
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use C206_A_Type as C206_A_Type
  function u2 [#"../206.rs" 9 0 9 11] (a : C206_A_Type.t_a) : ()
  val u2 [#"../206.rs" 9 0 9 11] (a : C206_A_Type.t_a) : ()
    ensures { [#"../206.rs" 8 10 8 22] ShallowModel0.shallow_model (C206_A_Type.a_0 a) = ShallowModel0.shallow_model (C206_A_Type.a_0 a) }
    ensures { result = u2 a }
    
  axiom u2_spec : forall a : C206_A_Type.t_a . [#"../206.rs" 8 10 8 22] ShallowModel0.shallow_model (C206_A_Type.a_0 a) = ShallowModel0.shallow_model (C206_A_Type.a_0 a)
end
module C206_U2
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use C206_A_Type as C206_A_Type
  function u2 [#"../206.rs" 9 0 9 11] (a : C206_A_Type.t_a) : () =
    [#"../206.rs" 7 0 7 8] ()
  val u2 [#"../206.rs" 9 0 9 11] (a : C206_A_Type.t_a) : ()
    ensures { [#"../206.rs" 8 10 8 22] ShallowModel0.shallow_model (C206_A_Type.a_0 a) = ShallowModel0.shallow_model (C206_A_Type.a_0 a) }
    ensures { result = u2 a }
    
  axiom u2_spec : forall a : C206_A_Type.t_a . [#"../206.rs" 8 10 8 22] ShallowModel0.shallow_model (C206_A_Type.a_0 a) = ShallowModel0.shallow_model (C206_A_Type.a_0 a)
end
module C206_U2_Impl
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use C206_A_Type as C206_A_Type
  let rec ghost function u2 [#"../206.rs" 9 0 9 11] (a : C206_A_Type.t_a) : ()
    ensures { [#"../206.rs" 8 10 8 22] ShallowModel0.shallow_model (C206_A_Type.a_0 a) = ShallowModel0.shallow_model (C206_A_Type.a_0 a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../206.rs" 7 0 7 8] ()
end
module C206_U_Stub
  use C206_A_Type as C206_A_Type
  function u [#"../206.rs" 13 0 13 14] (a : C206_A_Type.t_a) : ()
end
module C206_U_Interface
  use C206_A_Type as C206_A_Type
  function u [#"../206.rs" 13 0 13 14] (a : C206_A_Type.t_a) : ()
  val u [#"../206.rs" 13 0 13 14] (a : C206_A_Type.t_a) : ()
    ensures { result = u a }
    
end
module C206_U
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use C206_A_Type as C206_A_Type
  clone C206_U2_Stub as U20 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function u [#"../206.rs" 13 0 13 14] (a : C206_A_Type.t_a) : () =
    [#"../206.rs" 15 8 15 13] U20.u2 a
  val u [#"../206.rs" 13 0 13 14] (a : C206_A_Type.t_a) : ()
    ensures { result = u a }
    
end
module C206_Ex_Interface
  use prelude.Borrow
  use C206_A_Type as C206_A_Type
  clone C206_U_Stub as U0
  val ex [#"../206.rs" 20 0 20 16] (a : C206_A_Type.t_a) : ()
    ensures { [#"../206.rs" 19 10 19 26] U0.u a = U0.u a }
    
end
module C206_Ex
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use C206_A_Type as C206_A_Type
  clone C206_U2 as U20 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone C206_U as U0 with
    function U20.u2 = U20.u2,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  let rec cfg ex [#"../206.rs" 20 0 20 16] [@cfg:stackify] [@cfg:subregion_analysis] (a : C206_A_Type.t_a) : ()
    ensures { [#"../206.rs" 19 10 19 26] U0.u a = U0.u a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
