
module C395_SignedDivision
  use prelude.Int32
  use prelude.Int
  let rec cfg signed_division [#"../395.rs" 3 0 3 24] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : int32;
  var y : int32;
  var _4 : bool;
  var _5 : int32;
  var _6 : int32;
  var _7 : int32;
  var _8 : bool;
  var _9 : bool;
  var _10 : bool;
  var _11 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../395.rs" 4 12 4 14] x <- ([#"../395.rs" 4 12 4 14] (10 : int32));
    [#"../395.rs" 5 12 5 13] y <- ([#"../395.rs" 5 12 5 13] (1 : int32));
    [#"../395.rs" 7 12 7 13] _6 <- x;
    [#"../395.rs" 7 16 7 17] _7 <- y;
    [#"../395.rs" 7 12 7 17] _8 <- _7 = ([#"../395.rs" 7 12 7 17] (0 : int32));
    assert { [@expl:division by zero] [#"../395.rs" 7 12 7 17] not _8 };
    goto BB1
  }
  BB1 {
    [#"../395.rs" 7 12 7 17] _9 <- _7 = ([#"../395.rs" 7 12 7 17] (-1 : int32));
    [#"../395.rs" 7 12 7 17] _10 <- _6 = ([#"../395.rs" 7 12 7 17] (-2147483648 : int32));
    [#"../395.rs" 7 12 7 17] _11 <- _9 && _10;
    _9 <- any bool;
    _10 <- any bool;
    assert { [@expl:Div overflow] [#"../395.rs" 7 12 7 17] not _11 };
    goto BB2
  }
  BB2 {
    [#"../395.rs" 7 12 7 17] _5 <- _6 / _7;
    _6 <- any int32;
    _7 <- any int32;
    [#"../395.rs" 7 12 7 23] _4 <- _5 = ([#"../395.rs" 7 21 7 23] (10 : int32));
    _5 <- any int32;
    switch (_4)
      | False -> goto BB4
      | True -> goto BB3
      end
  }
  BB3 {
    [#"../395.rs" 3 25 8 1] _0 <- ([#"../395.rs" 3 25 8 1] ());
    return _0
  }
  BB4 {
    assert { [#"../395.rs" 7 4 7 24] false };
    absurd
  }
  
end
