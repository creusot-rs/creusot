
module C395_SignedDivision_Interface
  val signed_division [#"../395.rs" 3 0 3 24] (_1 : ()) : ()
end
module C395_SignedDivision
  use prelude.Int
  use prelude.Int32
  let rec cfg signed_division [#"../395.rs" 3 0 3 24] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : int32;
  var y : int32;
  var _7 : int32;
  var _8 : int32;
  var _9 : bool;
  var _12 : bool;
  {
    goto BB0
  }
  BB0 {
    x <- ([#"../395.rs" 4 12 4 14] [#"../395.rs" 4 12 4 14] (10 : int32));
    y <- ([#"../395.rs" 5 12 5 13] [#"../395.rs" 5 12 5 13] (1 : int32));
    _7 <- x;
    _8 <- y;
    _9 <- ([#"../395.rs" 7 12 7 17] _8 = ([#"../395.rs" 7 12 7 17] [#"../395.rs" 7 12 7 17] (0 : int32)));
    assert { [@expl:division by zero] [#"../395.rs" 7 12 7 17] not _9 };
    goto BB1
  }
  BB1 {
    _12 <- ([#"../395.rs" 7 12 7 17] ([#"../395.rs" 7 12 7 17] _8 = ([#"../395.rs" 7 12 7 17] [#"../395.rs" 7 12 7 17] (-1 : int32))) && ([#"../395.rs" 7 12 7 17] _7 = ([#"../395.rs" 7 12 7 17] [#"../395.rs" 7 12 7 17] (-2147483648 : int32))));
    assert { [@expl:Div overflow] [#"../395.rs" 7 12 7 17] not _12 };
    goto BB2
  }
  BB2 {
    switch ([#"../395.rs" 7 4 7 24] not ([#"../395.rs" 7 12 7 23] ([#"../395.rs" 7 12 7 17] _7 / _8) = ([#"../395.rs" 7 21 7 23] [#"../395.rs" 7 21 7 23] (10 : int32))))
      | False -> goto BB4
      | True -> goto BB3
      end
  }
  BB3 {
    absurd
  }
  BB4 {
    _0 <- ([#"../395.rs" 3 25 8 1] ());
    return _0
  }
  
end
