
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C273_Ex
  use prelude.Intrinsic
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec ex (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_1 <- Core_Option_Option_Type.C_Some ([#"../273.rs" 5 26 5 30] true) : Core_Option_Option_Type.t_option bool ]
        
        s1
      | s1 = any
        [ br0 -> {_1 = Core_Option_Option_Type.C_None } (! bb3)
        | br1 (a:bool)-> {_1 = Core_Option_Option_Type.C_Some a} (! bb1) ]
         ]
      
    | bb3 = s0 [ s0 =  [ &_0 <- [#"../273.rs" 7 5 7 5] () ] s1 | s1 = bb4 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = Core_Option_Option_Type.some <bool> {_1} (fun (r0'0:bool) ->  [ &b <- r0'0 ] s1)
      | s1 = {[@expl:assertion] [#"../273.rs" 6 22 6 23] b} s2
      | s2 =  [ &_0 <- [#"../273.rs" 5 32 7 5] () ] s3
      | s3 = bb4 ]
      
    | bb4 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & _1 : Core_Option_Option_Type.t_option bool = any_l () : Core_Option_Option_Type.t_option bool
    | & b : bool = any_l () : bool ]
     [ return' (result:())-> (! return' {result}) ] 
end
