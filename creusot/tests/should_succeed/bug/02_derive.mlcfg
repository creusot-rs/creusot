
module C02Derive_Lit_Type
  type t_lit  =
    | C_Lit
    
end
module C02Derive_Impl0_Clone_Interface
  use prelude.Borrow
  use C02Derive_Lit_Type as C02Derive_Lit_Type
  val clone' [#"../02_derive.rs" 3 9 3 14] (self : C02Derive_Lit_Type.t_lit) : C02Derive_Lit_Type.t_lit
end
module C02Derive_Impl0_Clone
  use prelude.Borrow
  use C02Derive_Lit_Type as C02Derive_Lit_Type
  let rec cfg clone' [#"../02_derive.rs" 3 9 3 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : C02Derive_Lit_Type.t_lit) : C02Derive_Lit_Type.t_lit
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C02Derive_Lit_Type.t_lit;
  {
    goto BB0
  }
  BB0 {
    _0 <- C02Derive_Lit_Type.C_Lit;
    return _0
  }
  
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 27 4 27 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C02Derive_Impl0
  use prelude.Borrow
  use C02Derive_Lit_Type as C02Derive_Lit_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = C02Derive_Lit_Type.t_lit
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = C02Derive_Lit_Type.t_lit,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C02Derive_Lit_Type.t_lit
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = C02Derive_Lit_Type.t_lit,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"../02_derive.rs" 3 9 3 14] forall self : C02Derive_Lit_Type.t_lit . Inv0.inv self -> (forall result : C02Derive_Lit_Type.t_lit . Inv1.inv result /\ result = self)
end
