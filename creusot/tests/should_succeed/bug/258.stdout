module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module C258_Err_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val err [@cfg:stackify] (to' : usize) : ()
end
module C258_Err
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  let rec cfg err [@cfg:stackify] (to' : usize) : () = 
  var _0 : ();
  var to'_1 : usize;
  {
    to'_1 <- to';
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { (fun x -> true) to'_1 };
    return _0
  }
  
end
module C258_Err2_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val err2 [@cfg:stackify] (bBB' : usize) : ()
end
module C258_Err2
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  let rec cfg err2 [@cfg:stackify] (bBB' : usize) : () = 
  var _0 : ();
  var bBB'_1 : usize;
  {
    bBB'_1 <- bBB';
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { (fun x -> true) bBB'_1 };
    return _0
  }
  
end
