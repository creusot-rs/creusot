
module C768_A_Type
  use prelude.Int
  use prelude.UIntSize
  type t_a  =
    | C_A usize usize
    
  let function a_r (self : t_a) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_A _ a -> a
      end
end
module C768_Impl0_WithL_Stub
  use prelude.Int
  use prelude.UIntSize
  use C768_A_Type as C768_A_Type
  function with_l [#"../768.rs" 12 4 12 41] (self : C768_A_Type.t_a) (l : usize) : C768_A_Type.t_a
end
module C768_Impl0_WithL_Interface
  use prelude.Int
  use prelude.UIntSize
  use C768_A_Type as C768_A_Type
  function with_l [#"../768.rs" 12 4 12 41] (self : C768_A_Type.t_a) (l : usize) : C768_A_Type.t_a
  val with_l [#"../768.rs" 12 4 12 41] (self : C768_A_Type.t_a) (l : usize) : C768_A_Type.t_a
    ensures { result = with_l self l }
    
end
module C768_Impl0_WithL
  use prelude.Int
  use prelude.UIntSize
  use C768_A_Type as C768_A_Type
  function with_l [#"../768.rs" 12 4 12 41] (self : C768_A_Type.t_a) (l : usize) : C768_A_Type.t_a =
    [#"../768.rs" 13 8 13 23] C768_A_Type.C_A l (C768_A_Type.a_r self)
  val with_l [#"../768.rs" 12 4 12 41] (self : C768_A_Type.t_a) (l : usize) : C768_A_Type.t_a
    ensures { result = with_l self l }
    
end
