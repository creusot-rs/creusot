
module Nonreturning_F
  let rec f (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = bb1 | bb1 = bb1 [ bb1 = (! bb2) [ bb2 = bb1 ]  ]  ] )
    [ return' (result:())-> {[@expl:postcondition] false} (! return' {result}) ]
    
end
module Nonreturning_G
  let%span snonreturning0 = "../nonreturning.rs" 13 8 13 11
  
  let%span snonreturning1 = "../nonreturning.rs" 10 10 10 12
  
  use prelude.prelude.Intrinsic
  
  let rec f'0 (_1:()) (return'  (ret:()))= any [ return' (result:())-> {false} (! return' {result}) ] 
  
  let rec g (b:bool) (return'  (ret:()))= (! bb0
    [ bb0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ] 
    | bb1 = s0
      [ s0 = f'0 {[%#snonreturning0] ()} (fun (_ret':()) ->  [ &_5 <- _ret' ] s1)
      | s1 = {[%#snonreturning0] false} any ]
      
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & b : bool = b | & _5 : () = any_l () ] 
    [ return' (result:())-> {[@expl:postcondition] [%#snonreturning1] not b} (! return' {result}) ]
    
end
