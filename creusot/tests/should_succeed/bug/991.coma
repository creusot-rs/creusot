
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C991_Formula_Type
  use Alloc_Alloc_Global_Type as Global'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  type t_formula  =
    | C_Formula (Vec'0.t_vec usize (Global'0.t_global)) bool
  
  function any_l (_ : 'b) : 'a
  
  let rec t_formula (input:t_formula) (ret  (vec:Vec'0.t_vec usize (Global'0.t_global)) (b:bool))= any
    [ good (vec:Vec'0.t_vec usize (Global'0.t_global)) (b:bool)-> {C_Formula vec b = input} (! ret {vec} {b})
    | bad (vec:Vec'0.t_vec usize (Global'0.t_global)) (b:bool)-> {C_Formula vec b <> input} {false} any ]
    
  
  function formula_vec (self : t_formula) : Vec'0.t_vec usize (Global'0.t_global) =
    match self with
      | C_Formula a _ -> a
      end
  
  function formula_b (self : t_formula) : bool =
    match self with
      | C_Formula _ a -> a
      end
end
module C991_Impl1_LoveAndHope
  let%span s9910 = "../991.rs" 21 14 21 28
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "" 0 0 0 0
  
  let%span span3 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span4 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span5 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span6 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span7 = "../991.rs" 16 8 16 42
  
  let%span span8 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq usize) =
    [%#span1] true
  
  predicate inv'1 (_x : Seq.seq usize)
  
  axiom inv'1 : forall x : Seq.seq usize . inv'1 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span2] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'0 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span3] inv'0 self)
   -> ([%#span5] inv'1 (shallow_model'2 self))
  && ([%#span4] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span6] inv'1 (shallow_model'2 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'0 x = true
  
  use C991_Formula_Type as Formula'0
  
  use prelude.prelude.Borrow
  
  use C991_Formula_Type as C991_Formula_Type
  
  function shallow_model'1 [#"../991.rs" 15 4 15 50] (self : Formula'0.t_formula) : (Seq.seq usize, bool) =
    [%#span7] (shallow_model'2 (C991_Formula_Type.formula_vec self), C991_Formula_Type.formula_b self)
  
  function shallow_model'0 (self : Formula'0.t_formula) : (Seq.seq usize, bool) =
    [%#span8] shallow_model'1 self
  
  use prelude.prelude.Intrinsic
  
  let rec love_and_hope (self:Formula'0.t_formula) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s9910] shallow_model'0 self = shallow_model'0 self}
      (! return' {result}) ]
    
end
module C991_Impl0
  
end
