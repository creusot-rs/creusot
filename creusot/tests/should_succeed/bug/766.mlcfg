
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl2_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl2_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
  val deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl2_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : borrowed t) : DeepModelTy0.deepModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 49 8 49 28] DeepModel0.deep_model ( * self)
  val deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Fmap_FMap_Type
  type t_fmap 'k 'v
end
module C766_Trait_F_Interface
  type self
  type t
  type u
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = u
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use CreusotContracts_Logic_Fmap_FMap_Type as CreusotContracts_Logic_Fmap_FMap_Type
  clone CreusotContracts_Model_Impl2_DeepModel_Stub as DeepModel0 with
    type t = self,
    type DeepModelTy0.deepModelTy = CreusotContracts_Logic_Fmap_FMap_Type.t_fmap DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
  val f [#"../766.rs" 8 4 8 20] (self : borrowed self) : ()
    ensures { [#"../766.rs" 7 14 7 52] DeepModel0.deep_model self = DeepModel0.deep_model self }
    
end
module C766_Trait_Goo_Interface
  type self
  type t
  type u
  use prelude.Borrow
  val goo [#"../766.rs" 10 4 10 21] (self : borrowed self) : ()
end
module C766_Trait_Goo
  type self
  type t
  type u
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = u
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use CreusotContracts_Logic_Fmap_FMap_Type as CreusotContracts_Logic_Fmap_FMap_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel1 with
    type self = self,
    type DeepModelTy0.deepModelTy = CreusotContracts_Logic_Fmap_FMap_Type.t_fmap DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_Impl2_DeepModel as DeepModel0 with
    type t = self,
    type DeepModelTy0.deepModelTy = CreusotContracts_Logic_Fmap_FMap_Type.t_fmap DeepModelTy0.deepModelTy DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = self
  clone C766_Trait_F_Interface as F0 with
    type self = self,
    type t = t,
    type u = u,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy1.deepModelTy
  let rec cfg goo [#"../766.rs" 10 4 10 21] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed self) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed self;
  var _2 : borrowed self;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _2) };
    _0 <- ([#"../766.rs" 11 8 11 16] F0.f _2);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
