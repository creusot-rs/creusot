module M_594__test_program [#"594.rs" 11 0 11 46]
  let%span s5940 = "594.rs" 10 10 10 21
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec test_program (_1:(uint32, uint32)) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- let (r'0, _) = _1 in r'0 ] s1 | s1 =  [ &_0 <- x ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : uint32 = any_l () | & _1 : (uint32, uint32) = _1 | & x : uint32 = any_l () ] 
    [ return' (result:uint32)-> {[@expl:postcondition] [%#s5940] let (x, _) = _1 in result = x} (! return' {result}) ]
    
end
module T_594__test_closure__qyClosure0 [#"594.rs" 16 14 16 37]
  type m_594__test_closure__qyClosure0  =
    | M_594__test_closure__qyClosure0
  
  let rec m_594__test_closure__qyClosure0 (input:m_594__test_closure__qyClosure0) (ret  )= any
    [ good -> {M_594__test_closure__qyClosure0  = input} (! ret) ]
    
end
module M_594__test_closure__qyClosure0 [#"594.rs" 16 14 16 37]
  let%span s5940 = "594.rs" 16 24 16 35
  
  use T_594__test_closure__qyClosure0 as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec m_594__test_closure__qyClosure0 (_1:Closure'0.m_594__test_closure__qyClosure0) (_c:int32) (_3:(int32, int32)) (return'  (ret:int32))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_a <- let (r'0, _) = _3 in r'0 ] s1
      | s1 =  [ &b <- let (_, r'1) = _3 in r'1 ] s2
      | s2 =  [ &res <- b ] s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : int32 = any_l ()
    | & _3 : (int32, int32) = _3
    | & _a : int32 = any_l ()
    | & b : int32 = any_l ()
    | & res : int32 = any_l () ]
     [ return' (result:int32)-> {[@expl:postcondition] [%#s5940] let (_a, b) = _3 in result = b} (! return' {result}) ] 
end
module T_594__test_closure__qyClosure1 [#"594.rs" 18 14 18 37]
  type m_594__test_closure__qyClosure1  =
    | M_594__test_closure__qyClosure1
  
  let rec m_594__test_closure__qyClosure1 (input:m_594__test_closure__qyClosure1) (ret  )= any
    [ good -> {M_594__test_closure__qyClosure1  = input} (! ret) ]
    
end
module M_594__test_closure__qyClosure1 [#"594.rs" 18 14 18 37]
  let%span s5940 = "594.rs" 18 24 18 35
  
  use T_594__test_closure__qyClosure1 as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec m_594__test_closure__qyClosure1 (_1:Closure'0.m_594__test_closure__qyClosure1) (_2:(int32, int32)) (return'  (ret:int32))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_a <- let (r'0, _) = _2 in r'0 ] s1
      | s1 =  [ &b <- let (_, r'1) = _2 in r'1 ] s2
      | s2 =  [ &res <- b ] s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : int32 = any_l ()
    | & _2 : (int32, int32) = _2
    | & _a : int32 = any_l ()
    | & b : int32 = any_l ()
    | & res : int32 = any_l () ]
     [ return' (result:int32)-> {[@expl:postcondition] [%#s5940] let (_a, b) = _2 in result = b} (! return' {result}) ] 
end
module M_594__test_closure [#"594.rs" 15 0 15 21]
  let%span s5940 = "594.rs" 20 23 20 24
  let%span s5941 = "594.rs" 20 26 20 27
  let%span s5942 = "594.rs" 20 19 20 20
  let%span s5943 = "594.rs" 21 20 21 21
  let%span s5944 = "594.rs" 21 23 21 24
  let%span s5945 = "594.rs" 16 24 16 35
  let%span s5946 = "594.rs" 18 24 18 35
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use T_594__test_closure__qyClosure1 as Closure'1
  
  use prelude.prelude.Borrow
  
  let rec closure1'0 (_1:Closure'1.m_594__test_closure__qyClosure1) (_2:(int32, int32)) (return'  (ret:int32))= any
    [ return' (result:int32)-> {[%#s5946] let (_a, b) = _2 in result = b} (! return' {result}) ]
    
  
  use T_594__test_closure__qyClosure0 as Closure'0
  
  let rec closure0'0 (_1:Closure'0.m_594__test_closure__qyClosure0) (_c:int32) (_3:(int32, int32)) (return'  (ret:int32))= any
    [ return' (result:int32)-> {[%#s5945] let (_a, b) = _3 in result = b} (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec test_closure (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &cl1 <- Closure'0.M_594__test_closure__qyClosure0 ] s1
      | s1 =  [ &cl2 <- Closure'1.M_594__test_closure__qyClosure1 ] s2
      | s2 =  [ &_6 <- (([%#s5940] (0 : int32)), ([%#s5941] (3 : int32))) ] s3
      | s3 =  [ &_5 <- (([%#s5942] (4 : int32)), _6) ] s4
      | s4 = closure0'0 {cl1} {let (r'0, _) = _5 in r'0} {let (_, r'1) = _5 in r'1}
          (fun (_ret':int32) ->  [ &_a <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_10 <- (([%#s5943] (0 : int32)), ([%#s5944] (4 : int32))) ] s1
      | s1 =  [ &_9 <- (_10) ] s2
      | s2 = closure1'0 {cl2} {let (r'0) = _9 in r'0} (fun (_ret':int32) ->  [ &_b <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & cl1 : Closure'0.m_594__test_closure__qyClosure0 = any_l ()
    | & cl2 : Closure'1.m_594__test_closure__qyClosure1 = any_l ()
    | & _a : int32 = any_l ()
    | & _5 : (int32, (int32, int32)) = any_l ()
    | & _6 : (int32, int32) = any_l ()
    | & _b : int32 = any_l ()
    | & _9 : (int32, int32) = any_l ()
    | & _10 : (int32, int32) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module T_594__T [#"594.rs" 24 0 24 12]
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_T  =
    | C_T uint32
  
  let rec t_T (input:t_T) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_T field_0 = input} (! ret {field_0}) ]
    
end
module M_594__qyi1704796797730763899__test_method [#"594.rs" 33 4 33 55] (* T *)
  let%span s5940 = "594.rs" 32 14 32 25
  
  use T_594__T as T'0
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec test_method (self:T'0.t_T) (_2:(uint32, uint32)) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- let (r'0, _) = _2 in r'0 ] s1 | s1 =  [ &_0 <- x ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : uint32 = any_l () | & _2 : (uint32, uint32) = _2 | & x : uint32 = any_l () ] 
    [ return' (result:uint32)-> {[@expl:postcondition] [%#s5940] let (x, _) = _2 in result = x} (! return' {result}) ]
    
end
