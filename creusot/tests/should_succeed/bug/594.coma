
module C594_TestProgram
  let%span s5940 = "../594.rs" 10 10 10 21
  
  let%span span1 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span2 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  predicate resolve'1 (self : uint32) =
    [%#span1] true
  
  predicate resolve'0 (self : (uint32, uint32)) =
    [%#span2] resolve'1 (let (a, _) = self in a) /\ resolve'1 (let (_, a) = self in a)
  
  let rec test_program (_1:(uint32, uint32)) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- let (r'0, _) = _1 in r'0 ] s1
      | s1 = -{resolve'0 _1}- s2
      | s2 =  [ &_0 <- x ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : uint32 = any_l () | & _1 : (uint32, uint32) = _1 | & x : uint32 = any_l () ] 
    [ return' (result:uint32)-> {[@expl:postcondition] [%#s5940] let (x, _) = _1 in result = x} (! return' {result}) ]
    
end
module C594_TestClosure_Closure0_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int8
  
  type c594_testclosure_closure0  =
    | C594_testclosure_closure0
  
  let rec c594_testclosure_closure0 (input:c594_testclosure_closure0) (ret  )= any
    [ good -> {C594_testclosure_closure0  = input} (! ret) | bad -> {C594_testclosure_closure0  <> input} {false} any ]
    
end
module C594_TestClosure_Closure0
  let%span s5940 = "../594.rs" 16 24 16 35
  
  let%span span1 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span2 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  use prelude.prelude.Int8
  
  use prelude.prelude.Int32
  
  use C594_TestClosure_Closure0_Type as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  predicate resolve'1 (self : int32) =
    [%#span1] true
  
  predicate resolve'0 (self : (int32, int32)) =
    [%#span2] resolve'1 (let (a, _) = self in a) /\ resolve'1 (let (_, a) = self in a)
  
  let rec c594_testclosure_closure0 (_1:Closure'0.c594_testclosure_closure0) (_c:int32) (_3:(int32, int32)) (return'  (ret:int32))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_a <- let (r'0, _) = _3 in r'0 ] s1
      | s1 =  [ &b <- let (_, r'1) = _3 in r'1 ] s2
      | s2 = -{resolve'0 _3}- s3
      | s3 =  [ &res <- b ] s4
      | s4 =  [ &_0 <- res ] s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : int32 = any_l ()
    | & _3 : (int32, int32) = _3
    | & _a : int32 = any_l ()
    | & b : int32 = any_l ()
    | & res : int32 = any_l () ]
     [ return' (result:int32)-> {[@expl:postcondition] [%#s5940] let (_a, b) = _3 in result = b} (! return' {result}) ] 
end
module C594_TestClosure_Closure1_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int8
  
  type c594_testclosure_closure1  =
    | C594_testclosure_closure1
  
  let rec c594_testclosure_closure1 (input:c594_testclosure_closure1) (ret  )= any
    [ good -> {C594_testclosure_closure1  = input} (! ret) | bad -> {C594_testclosure_closure1  <> input} {false} any ]
    
end
module C594_TestClosure_Closure1
  let%span s5940 = "../594.rs" 18 24 18 35
  
  let%span span1 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span2 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  use prelude.prelude.Int8
  
  use prelude.prelude.Int32
  
  use C594_TestClosure_Closure1_Type as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  predicate resolve'1 (self : int32) =
    [%#span1] true
  
  predicate resolve'0 (self : (int32, int32)) =
    [%#span2] resolve'1 (let (a, _) = self in a) /\ resolve'1 (let (_, a) = self in a)
  
  let rec c594_testclosure_closure1 (_1:Closure'0.c594_testclosure_closure1) (_2:(int32, int32)) (return'  (ret:int32))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_a <- let (r'0, _) = _2 in r'0 ] s1
      | s1 =  [ &b <- let (_, r'1) = _2 in r'1 ] s2
      | s2 = -{resolve'0 _2}- s3
      | s3 =  [ &res <- b ] s4
      | s4 =  [ &_0 <- res ] s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : int32 = any_l ()
    | & _2 : (int32, int32) = _2
    | & _a : int32 = any_l ()
    | & b : int32 = any_l ()
    | & res : int32 = any_l () ]
     [ return' (result:int32)-> {[@expl:postcondition] [%#s5940] let (_a, b) = _2 in result = b} (! return' {result}) ] 
end
module C594_TestClosure
  let%span s5940 = "../594.rs" 20 23 20 24
  
  let%span s5941 = "../594.rs" 20 26 20 27
  
  let%span s5942 = "../594.rs" 20 19 20 20
  
  let%span s5943 = "../594.rs" 21 20 21 21
  
  let%span s5944 = "../594.rs" 21 23 21 24
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  let%span span7 = "../594.rs" 18 24 18 35
  
  let%span span8 = "../594.rs" 16 24 16 35
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int8
  
  use C594_TestClosure_Closure1_Type as Closure'1
  
  predicate resolve'1 [#"../594.rs" 18 14 18 37] (_1 : Closure'1.c594_testclosure_closure1) =
    true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  predicate resolve'3 (self : int32) =
    [%#span5] true
  
  predicate resolve'2 (self : (int32, int32)) =
    [%#span6] resolve'3 (let (a, _) = self in a) /\ resolve'3 (let (_, a) = self in a)
  
  let rec closure1'0 (_1:Closure'1.c594_testclosure_closure1) (_2:(int32, int32)) (return'  (ret:int32))= any
    [ return' (result:int32)-> {[%#span7] let (_a, b) = _2 in result = b} (! return' {result}) ]
    
  
  use C594_TestClosure_Closure0_Type as Closure'0
  
  predicate resolve'0 [#"../594.rs" 16 14 16 37] (_1 : Closure'0.c594_testclosure_closure0) =
    true
  
  let rec closure0'0 (_1:Closure'0.c594_testclosure_closure0) (_c:int32) (_3:(int32, int32)) (return'  (ret:int32))= any
    [ return' (result:int32)-> {[%#span8] let (_a, b) = _3 in result = b} (! return' {result}) ]
    
  
  let rec test_closure (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &cl1 <- Closure'0.C594_testclosure_closure0 ] s1
      | s1 =  [ &cl2 <- Closure'1.C594_testclosure_closure1 ] s2
      | s2 =  [ &_6 <- (([%#s5940] (0 : int32)), ([%#s5941] (3 : int32))) ] s3
      | s3 =  [ &_5 <- (([%#s5942] (4 : int32)), _6) ] (any [ any_ (_any:(int32, int32))-> (!  [ &_6 <- _any ] s4) ] )
      | s4 = closure0'0 {cl1} {let (r'0, _) = _5 in r'0} {let (_, r'1) = _5 in r'1}
          (fun (_ret':int32) ->  [ &_a <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 cl1}- s1
      | s1 =  [ &_10 <- (([%#s5943] (0 : int32)), ([%#s5944] (4 : int32))) ] s2
      | s2 =  [ &_9 <- (_10) ] (any [ any_ (_any:(int32, int32))-> (!  [ &_10 <- _any ] s3) ] )
      | s3 = closure1'0 {cl2} {let (r'0) = _9 in r'0} (fun (_ret':int32) ->  [ &_b <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = s0 [ s0 = -{resolve'1 cl2}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & cl1 : Closure'0.c594_testclosure_closure0 = any_l ()
    | & cl2 : Closure'1.c594_testclosure_closure1 = any_l ()
    | & _a : int32 = any_l ()
    | & _5 : (int32, (int32, int32)) = any_l ()
    | & _6 : (int32, int32) = any_l ()
    | & _b : int32 = any_l ()
    | & _9 : (int32, int32) = any_l ()
    | & _10 : (int32, int32) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C594_T_Type
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_t  =
    | C_T uint32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_t (input:t_t) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_T field_0 = input} (! ret {field_0})
    | bad (field_0:uint32)-> {C_T field_0 <> input} {false} any ]
    
end
module C594_Impl0_TestMethod
  let%span s5940 = "../594.rs" 32 14 32 25
  
  let%span span1 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span2 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  use C594_T_Type as T'0
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  predicate resolve'1 (self : uint32) =
    [%#span1] true
  
  predicate resolve'0 (self : (uint32, uint32)) =
    [%#span2] resolve'1 (let (a, _) = self in a) /\ resolve'1 (let (_, a) = self in a)
  
  let rec test_method (self:T'0.t_t) (_2:(uint32, uint32)) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- let (r'0, _) = _2 in r'0 ] s1
      | s1 = -{resolve'0 _2}- s2
      | s2 =  [ &_0 <- x ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : uint32 = any_l () | & _2 : (uint32, uint32) = _2 | & x : uint32 = any_l () ] 
    [ return' (result:uint32)-> {[@expl:postcondition] [%#s5940] let (x, _) = _2 in result = x} (! return' {result}) ]
    
end
