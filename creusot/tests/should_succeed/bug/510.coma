module M_510__test_bool [#"510.rs" 3 0 3 27]
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt8
  
  use prelude.prelude.Int
  
  use prelude.prelude.Bool
  
  meta "compute_max_steps" 1000000
  
  let rec test_bool (inp:bool) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UInt8.of_int {Bool.to_int inp} (fun (_res:uint8) ->  [ &_bing <- _res ] s1) | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & inp : bool = inp | & _bing : uint8 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_510__test_char [#"510.rs" 7 0 7 18]
  let%span s5100 = "510.rs" 8 4 8 6
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.Char
  
  use prelude.prelude.UInt8
  
  meta "compute_max_steps" 1000000
  
  let rec test_char (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Char.chr {UInt8.to_int ([%#s5100] (22 : uint8))} (fun (_res:char) ->  [ &_1 <- _res ] s1)
      | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & _1 : char = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
