
module C510_TestBool
  use prelude.Intrinsic
  use prelude.UInt8
  use prelude.Int
  use prelude.Bool
  let rec test_bool (inp:bool) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UInt8.of_int {Bool.to_int inp} (fun (_res:uint8) ->  [ &_bing <- _res ] s1)
      | s1 =  [ &_0 <- [#"../510.rs" 3 28 5 1] () ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & inp : bool = inp | & _bing : uint8 = any_l () : uint8 ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module C510_TestChar
  use prelude.Intrinsic
  use prelude.Int
  use prelude.Char
  use prelude.UInt8
  let rec test_char (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Char.chr {UInt8.to_int ([#"../510.rs" 8 4 8 6] (22 : uint8))} (fun (_res:char) ->  [ &_1 <- _res ] s1)
      | s1 =  [ &_0 <- [#"../510.rs" 7 19 9 1] () ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & _1 : char = any_l () : char ]  [ return' (result:())-> (! return' {result}) ] 
end
