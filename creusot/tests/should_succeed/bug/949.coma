
module CreusotContracts_GhostPtr_GhostPtrToken_Type
  type t_ghostptrtoken 't
end
module CreusotContracts_Logic_Fmap_FMap_Type
  type t_fmap 'k 'v
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_box 't 'a =
    | C_Box (Unique'0.t_unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module C949_Main
  let%span s9490 = "../949.rs" 5 18 5 38
  
  let%span s9491 = "../949.rs" 6 21 6 22
  
  let%span s9492 = "../949.rs" 9 10 9 11
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 35 8 35 31
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/fmap.rs" 28 16 28 20
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/fmap.rs" 27 14 27 38
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/fmap.rs" 28 4 28 35
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/fmap.rs" 55 8 55 26
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/fmap.rs" 79 8 79 27
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/fmap.rs" 13 15 13 19
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/fmap.rs" 12 14 12 25
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/fmap.rs" 47 18 47 22
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/fmap.rs" 47 24 47 25
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/fmap.rs" 45 14 45 55
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/fmap.rs" 46 14 46 84
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/fmap.rs" 47 4 47 37
  
  let%span span18 = "../../../../../creusot-contracts/src/util.rs" 24 11 24 16
  
  let%span span19 = "../../../../../creusot-contracts/src/util.rs" 25 10 25 15
  
  let%span span20 = "../../../../../creusot-contracts/src/util.rs" 27 0 27 28
  
  let%span span21 = "../../../../../creusot-contracts/src/util.rs" 26 10 26 11
  
  let%span span22 = "../../../../../creusot-contracts/src/util.rs" 33 11 33 21
  
  let%span span23 = "../../../../../creusot-contracts/src/util.rs" 35 17 35 19
  
  let%span span24 = "../../../../../creusot-contracts/src/util.rs" 34 10 34 28
  
  let%span span25 = "../../../../../creusot-contracts/src/util.rs" 35 0 35 36
  
  let%span span26 = "../../../../../creusot-contracts/src/logic/fmap.rs" 62 8 62 27
  
  let%span span27 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 136 14 136 38
  
  let%span span28 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 137 4 137 98
  
  let%span span29 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 32 14 32 56
  
  let%span span30 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 34 4 34 50
  
  let%span span31 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 97 4 97 39
  
  let%span span32 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 98 14 98 54
  
  let%span span33 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 99 14 99 46
  
  let%span span34 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 100 4 100 57
  
  let%span span35 = "../../../../../creusot-contracts/src/util.rs" 16 19 16 23
  
  let%span span36 = "../../../../../creusot-contracts/src/util.rs" 15 14 15 30
  
  let%span span37 = "../../../../../creusot-contracts/src/util.rs" 16 4 16 40
  
  let%span span38 = "../../../../../creusot-contracts/src/logic/fmap.rs" 38 18 38 22
  
  let%span span39 = "../../../../../creusot-contracts/src/logic/fmap.rs" 38 24 38 25
  
  let%span span40 = "../../../../../creusot-contracts/src/logic/fmap.rs" 38 30 38 31
  
  let%span span41 = "../../../../../creusot-contracts/src/logic/fmap.rs" 35 14 35 71
  
  let%span span42 = "../../../../../creusot-contracts/src/logic/fmap.rs" 36 4 36 63
  
  let%span span43 = "../../../../../creusot-contracts/src/logic/fmap.rs" 37 4 37 68
  
  let%span span44 = "../../../../../creusot-contracts/src/logic/fmap.rs" 38 4 38 43
  
  let%span span45 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 71 35 71 38
  
  let%span span46 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 67 4 67 42
  
  let%span span47 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 70 14 70 55
  
  let%span span48 = "../../../../../creusot-contracts/src/logic/fmap.rs" 85 14 85 31
  
  let%span span49 = "../../../../../creusot-contracts/src/logic/fmap.rs" 86 14 86 49
  
  let%span span50 = "../../../../../creusot-contracts/src/logic/fmap.rs" 87 4 87 26
  
  let%span span51 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 41 14 41 38
  
  use prelude.prelude.Int32
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'6 (self : Option'0.t_option int32) =
    [%#span3] true
  
  predicate inv'6 (_x : Option'0.t_option int32)
  
  axiom inv'6 : forall x : Option'0.t_option int32 . inv'6 x = true
  
  predicate invariant'5 (self : int32) =
    [%#span3] true
  
  predicate inv'5 (_x : int32)
  
  axiom inv'5 : forall x : int32 . inv'5 x = true
  
  use prelude.prelude.Opaque
  
  use map.Map
  
  predicate invariant'4 (self : Map.map opaque_ptr (Option'0.t_option int32)) =
    [%#span3] true
  
  predicate inv'4 (_x : Map.map opaque_ptr (Option'0.t_option int32))
  
  axiom inv'4 : forall x : Map.map opaque_ptr (Option'0.t_option int32) . inv'4 x = true
  
  predicate invariant'3 (self : int32) =
    [%#span3] true
  
  predicate inv'3 (_x : int32)
  
  axiom inv'3 : forall x : int32 . inv'3 x = true
  
  predicate invariant'2 (self : opaque_ptr) =
    [%#span3] true
  
  predicate inv'2 (_x : opaque_ptr)
  
  axiom inv'2 : forall x : opaque_ptr . inv'2 x = true
  
  use CreusotContracts_Logic_Fmap_FMap_Type as FMap'0
  
  predicate invariant'1 (self : FMap'0.t_fmap opaque_ptr int32) =
    [%#span3] true
  
  predicate inv'1 (_x : FMap'0.t_fmap opaque_ptr int32)
  
  axiom inv'1 : forall x : FMap'0.t_fmap opaque_ptr int32 . inv'1 x = true
  
  predicate invariant'0 (self : int32) =
    [%#span3] true
  
  predicate inv'0 (_x : int32)
  
  axiom inv'0 : forall x : int32 . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : int32) =
    [%#span4] true
  
  predicate resolve'0 (self : int32) =
    [%#span5] resolve'1 self
  
  use CreusotContracts_GhostPtr_GhostPtrToken_Type as GhostPtrToken'0
  
  use prelude.prelude.Int
  
  use map.Map
  
  function mk'0 (_m : Map.map opaque_ptr (Option'0.t_option int32)) : FMap'0.t_fmap opaque_ptr int32
  
  function view'0 (self : FMap'0.t_fmap opaque_ptr int32) : Map.map opaque_ptr (Option'0.t_option int32)
  
  axiom view'0_spec : forall self : FMap'0.t_fmap opaque_ptr int32 . ([%#span6] inv'1 self)
   -> ([%#span8] inv'4 (view'0 self)) && ([%#span7] mk'0 (view'0 self) = self)
  
  function get'0 [@inline:trivial] (self : FMap'0.t_fmap opaque_ptr int32) (k : opaque_ptr) : Option'0.t_option int32 =
    [%#span9] Map.get (view'0 self) k
  
  function contains'0 [@inline:trivial] (self : FMap'0.t_fmap opaque_ptr int32) (k : opaque_ptr) : bool =
    [%#span10] get'0 self k <> Option'0.C_None
  
  function len'0 (self : FMap'0.t_fmap opaque_ptr int32) : int
  
  axiom len'0_spec : forall self : FMap'0.t_fmap opaque_ptr int32 . ([%#span11] inv'1 self)
   -> ([%#span12] len'0 self >= 0)
  
  use map.Map
  
  function remove'0 (self : FMap'0.t_fmap opaque_ptr int32) (k : opaque_ptr) : FMap'0.t_fmap opaque_ptr int32
  
  axiom remove'0_spec : forall self : FMap'0.t_fmap opaque_ptr int32, k : opaque_ptr . ([%#span13] inv'1 self)
   -> ([%#span14] inv'2 k)
   -> ([%#span17] inv'1 (remove'0 self k))
  && ([%#span16] len'0 (remove'0 self k) = (if contains'0 self k then len'0 self - 1 else len'0 self))
  && ([%#span15] view'0 (remove'0 self k) = Map.set (view'0 self) k (Option'0.C_None))
  
  function unreachable'0 (_1 : ()) : int32
  
  axiom unreachable'0_spec : forall _1 : () . ([%#span18] false)
   -> ([%#span20] inv'0 (unreachable'0 _1)) && ([%#span19] false)
  
  function unwrap'0 (op : Option'0.t_option int32) : int32
  
  axiom unwrap'0_spec : forall op : Option'0.t_option int32 . ([%#span22] op <> Option'0.C_None)
   -> ([%#span23] inv'6 op)  -> ([%#span25] inv'0 (unwrap'0 op)) && ([%#span24] Option'0.C_Some (unwrap'0 op) = op)
  
  function lookup_unsized'0 [@inline:trivial] (self : FMap'0.t_fmap opaque_ptr int32) (k : opaque_ptr) : int32 =
    [%#span26] unwrap'0 (get'0 self k)
  
  function addr_logic'0 (self : opaque_ptr) : int
  
  function null_logic'0 (_1 : ()) : opaque_ptr
  
  axiom null_logic'0_spec : forall _1 : () . ([%#span28] forall ptr : opaque_ptr . addr_logic'0 ptr
  = addr_logic'0 (null_logic'0 _1)  -> ptr = null_logic'0 _1)
  && ([%#span27] addr_logic'0 (null_logic'0 _1) = 0)
  
  function shallow_model'0 (self : GhostPtrToken'0.t_ghostptrtoken int32) : FMap'0.t_fmap opaque_ptr int32
  
  axiom shallow_model'0_spec : forall self : GhostPtrToken'0.t_ghostptrtoken int32 . ([%#span30] inv'1 (shallow_model'0 self))
  && ([%#span29] get'0 (shallow_model'0 self) (null_logic'0 ()) = Option'0.C_None)
  
  use prelude.prelude.Borrow
  
  let rec ptr_to_box'0 (self:borrowed (GhostPtrToken'0.t_ghostptrtoken int32)) (ptr:opaque_ptr) (return'  (ret:int32))= {[@expl:precondition] [%#span31] contains'0 (shallow_model'0 self.current) ptr}
    any
    [ return' (result:int32)-> {[%#span34] inv'0 result}
      {[%#span33] shallow_model'0 self.final = remove'0 (shallow_model'0 self.current) ptr}
      {[%#span32] result = lookup_unsized'0 (shallow_model'0 self.current) ptr}
      (! return' {result}) ]
    
  
  function make_sized'0 (self : int32) : int32
  
  axiom make_sized'0_spec : forall self : int32 . ([%#span35] inv'5 self)
   -> ([%#span37] inv'0 (make_sized'0 self)) && ([%#span36] make_sized'0 self = self)
  
  function insert'0 (self : FMap'0.t_fmap opaque_ptr int32) (k : opaque_ptr) (v : int32) : FMap'0.t_fmap opaque_ptr int32
    
  
  axiom insert'0_spec : forall self : FMap'0.t_fmap opaque_ptr int32, k : opaque_ptr, v : int32 . ([%#span38] inv'1 self)
   -> ([%#span39] inv'2 k)
   -> ([%#span40] inv'3 v)
   -> ([%#span44] inv'1 (insert'0 self k v))
  && ([%#span43] not contains'0 self k  -> len'0 (insert'0 self k v) = len'0 self + 1)
  && ([%#span42] contains'0 self k  -> len'0 (insert'0 self k v) = len'0 self)
  && ([%#span41] view'0 (insert'0 self k v) = Map.set (view'0 self) k (Option'0.C_Some (make_sized'0 v)))
  
  let rec ptr_from_box'0 (self:borrowed (GhostPtrToken'0.t_ghostptrtoken int32)) (val':int32) (return'  (ret:opaque_ptr))= {[@expl:precondition] [%#span45] inv'0 val'}
    any
    [ return' (result:opaque_ptr)-> {[%#span47] shallow_model'0 self.final
      = insert'0 (shallow_model'0 self.current) result val'}
      {[%#span46] not contains'0 (shallow_model'0 self.current) result}
      (! return' {result}) ]
    
  
  use map.Const
  
  function empty'0 (_1 : ()) : FMap'0.t_fmap opaque_ptr int32
  
  axiom empty'0_spec : forall _1 : () . ([%#span50] inv'1 (empty'0 _1))
  && ([%#span49] view'0 (empty'0 _1) = Const.const (Option'0.C_None)) && ([%#span48] len'0 (empty'0 _1) = 0)
  
  let rec new'0 (_1:()) (return'  (ret:GhostPtrToken'0.t_ghostptrtoken int32))= any
    [ return' (result:GhostPtrToken'0.t_ghostptrtoken int32)-> {[%#span51] shallow_model'0 result = empty'0 ()}
      (! return' {result}) ]
    
  
  let rec main (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#s9490] ()} (fun (_ret':GhostPtrToken'0.t_ghostptrtoken int32) ->  [ &tok <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &b <- [%#s9491] (1 : int32) ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <GhostPtrToken'0.t_ghostptrtoken int32> {tok}
          (fun (_ret':borrowed (GhostPtrToken'0.t_ghostptrtoken int32)) ->  [ &_4 <- _ret' ]  [ &tok <- _4.final ] s1)
      | s1 = ptr_from_box'0 {_4} {b} (fun (_ret':opaque_ptr) ->  [ &p <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <GhostPtrToken'0.t_ghostptrtoken int32> {tok}
          (fun (_ret':borrowed (GhostPtrToken'0.t_ghostptrtoken int32)) ->  [ &_7 <- _ret' ]  [ &tok <- _7.final ] s1)
      | s1 = ptr_to_box'0 {_7} {p} (fun (_ret':int32) ->  [ &r <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 = Int32.add {r} {[%#s9492] (5 : int32)} (fun (_ret':int32) ->  [ &r <- _ret' ] s1)
      | s1 = -{resolve'0 r}- s2
      | s2 = bb5 ]
      
    | bb5 = bb6
    | bb6 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & tok : GhostPtrToken'0.t_ghostptrtoken int32 = any_l ()
    | & b : int32 = any_l ()
    | & p : opaque_ptr = any_l ()
    | & _4 : borrowed (GhostPtrToken'0.t_ghostptrtoken int32) = any_l ()
    | & r : int32 = any_l ()
    | & _7 : borrowed (GhostPtrToken'0.t_ghostptrtoken int32) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
