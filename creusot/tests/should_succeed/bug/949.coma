
module T_creusot_contracts__ghost_ptr__GhostPtrToken
  type t_GhostPtrToken 't
end
module T_creusot_contracts__logic__fmap__FMap
  type t_FMap 'k 'v
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module T_alloc__boxed__Box
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_Box 't 'a =
    | C_Box (Unique'0.t_Unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module M_949__main
  let%span s9490 = "../949.rs" 5 18 5 38
  
  let%span s9491 = "../949.rs" 6 21 6 22
  
  let%span s9492 = "../949.rs" 9 10 9 11
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/fmap.rs" 28 14 28 38
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/fmap.rs" 56 8 56 26
  
  let%span span8 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 146 14 146 38
  
  let%span span9 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 147 4 147 98
  
  let%span span10 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 32 14 32 56
  
  let%span span11 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 44 8 44 90
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/fmap.rs" 80 8 80 27
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/fmap.rs" 13 14 13 25
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/fmap.rs" 46 14 46 55
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/fmap.rs" 47 14 47 84
  
  let%span span16 = "../../../../../creusot-contracts/src/util.rs" 24 11 24 16
  
  let%span span17 = "../../../../../creusot-contracts/src/util.rs" 25 10 25 15
  
  let%span span18 = "../../../../../creusot-contracts/src/util.rs" 26 10 26 11
  
  let%span span19 = "../../../../../creusot-contracts/src/util.rs" 33 11 33 21
  
  let%span span20 = "../../../../../creusot-contracts/src/util.rs" 34 10 34 28
  
  let%span span21 = "../../../../../creusot-contracts/src/logic/fmap.rs" 63 8 63 27
  
  let%span span22 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 107 4 107 39
  
  let%span span23 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 110 27 110 31
  
  let%span span24 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 108 14 108 54
  
  let%span span25 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 109 14 109 46
  
  let%span span26 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 110 4 110 60
  
  let%span span27 = "../../../../../creusot-contracts/src/util.rs" 15 14 15 30
  
  let%span span28 = "../../../../../creusot-contracts/src/logic/fmap.rs" 36 14 36 71
  
  let%span span29 = "../../../../../creusot-contracts/src/logic/fmap.rs" 37 4 37 63
  
  let%span span30 = "../../../../../creusot-contracts/src/logic/fmap.rs" 38 4 38 68
  
  let%span span31 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 81 29 81 33
  
  let%span span32 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 81 35 81 38
  
  let%span span33 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 77 4 77 42
  
  let%span span34 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 80 14 80 55
  
  let%span span35 = "../../../../../creusot-contracts/src/logic/fmap.rs" 86 14 86 31
  
  let%span span36 = "../../../../../creusot-contracts/src/logic/fmap.rs" 87 14 87 49
  
  let%span span37 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 51 14 51 38
  
  let%span span38 = "../../../../../creusot-contracts/src/ghost_ptr.rs" 52 4 52 24
  
  use prelude.prelude.Int32
  
  predicate invariant'3 (self : int32) =
    [%#span3] true
  
  predicate inv'3 (_1 : int32)
  
  axiom inv'3 : forall x : int32 . inv'3 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'2 (self : int32) =
    [%#span4] inv'3 self
  
  predicate inv'2 (_1 : int32)
  
  axiom inv'2 : forall x : int32 . inv'2 x = true
  
  use T_creusot_contracts__ghost_ptr__GhostPtrToken as GhostPtrToken'0
  
  predicate inv'0 (_1 : GhostPtrToken'0.t_GhostPtrToken int32)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (GhostPtrToken'0.t_GhostPtrToken int32)) =
    [%#span5] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (GhostPtrToken'0.t_GhostPtrToken int32))
  
  axiom inv'1 : forall x : borrowed (GhostPtrToken'0.t_GhostPtrToken int32) . inv'1 x = true
  
  use prelude.prelude.Opaque
  
  use T_creusot_contracts__logic__fmap__FMap as FMap'0
  
  use T_core__option__Option as Option'0
  
  use map.Map
  
  use map.Map
  
  function mk'0 (_m : Map.map opaque_ptr (Option'0.t_Option int32)) : FMap'0.t_FMap opaque_ptr int32
  
  function view'0 (self : FMap'0.t_FMap opaque_ptr int32) : Map.map opaque_ptr (Option'0.t_Option int32)
  
  axiom view'0_spec : forall self : FMap'0.t_FMap opaque_ptr int32 . [%#span6] mk'0 (view'0 self) = self
  
  function get'0 [@inline:trivial] (self : FMap'0.t_FMap opaque_ptr int32) (k : opaque_ptr) : Option'0.t_Option int32 =
    [%#span7] Map.get (view'0 self) k
  
  use prelude.prelude.Int
  
  function addr_logic'0 (self : opaque_ptr) : int
  
  function null_logic'0 (_1 : ()) : opaque_ptr
  
  axiom null_logic'0_spec : forall _1 : () . ([%#span9] forall ptr : opaque_ptr . addr_logic'0 ptr
  = addr_logic'0 (null_logic'0 _1)  -> ptr = null_logic'0 _1)
  && ([%#span8] addr_logic'0 (null_logic'0 _1) = 0)
  
  function shallow_model'0 (self : GhostPtrToken'0.t_GhostPtrToken int32) : FMap'0.t_FMap opaque_ptr int32
  
  axiom shallow_model'0_spec : forall self : GhostPtrToken'0.t_GhostPtrToken int32 . [%#span10] get'0 (shallow_model'0 self) (null_logic'0 ())
  = Option'0.C_None
  
  predicate invariant'0 (self : GhostPtrToken'0.t_GhostPtrToken int32) =
    [%#span11] forall ptr : opaque_ptr, x : int32 . get'0 (shallow_model'0 self) ptr = Option'0.C_Some x  -> inv'3 x
  
  axiom inv'0 : forall x : GhostPtrToken'0.t_GhostPtrToken int32 . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  function contains'0 [@inline:trivial] (self : FMap'0.t_FMap opaque_ptr int32) (k : opaque_ptr) : bool =
    [%#span12] get'0 self k <> Option'0.C_None
  
  function len'0 (self : FMap'0.t_FMap opaque_ptr int32) : int
  
  axiom len'0_spec : forall self : FMap'0.t_FMap opaque_ptr int32 . [%#span13] len'0 self >= 0
  
  use map.Map
  
  function remove'0 (self : FMap'0.t_FMap opaque_ptr int32) (k : opaque_ptr) : FMap'0.t_FMap opaque_ptr int32
  
  axiom remove'0_spec : forall self : FMap'0.t_FMap opaque_ptr int32, k : opaque_ptr . ([%#span15] len'0 (remove'0 self k)
  = (if contains'0 self k then len'0 self - 1 else len'0 self))
  && ([%#span14] view'0 (remove'0 self k) = Map.set (view'0 self) k (Option'0.C_None))
  
  function unreachable'0 (_1 : ()) : int32
  
  axiom unreachable'0_spec : forall _1 : () . ([%#span16] false)  -> ([%#span17] false)
  
  function unwrap'0 (op : Option'0.t_Option int32) : int32
  
  axiom unwrap'0_spec : forall op : Option'0.t_Option int32 . ([%#span19] op <> Option'0.C_None)
   -> ([%#span20] Option'0.C_Some (unwrap'0 op) = op)
  
  function lookup_unsized'0 [@inline:trivial] (self : FMap'0.t_FMap opaque_ptr int32) (k : opaque_ptr) : int32 =
    [%#span21] unwrap'0 (get'0 self k)
  
  let rec ptr_to_box'0 (self:borrowed (GhostPtrToken'0.t_GhostPtrToken int32)) (ptr:opaque_ptr) (return'  (ret:int32))= {[@expl:precondition] [%#span23] inv'1 self}
    {[@expl:precondition] [%#span22] contains'0 (shallow_model'0 self.current) ptr}
    any
    [ return' (result:int32)-> {[%#span26] inv'2 result}
      {[%#span25] shallow_model'0 self.final = remove'0 (shallow_model'0 self.current) ptr}
      {[%#span24] result = lookup_unsized'0 (shallow_model'0 self.current) ptr}
      (! return' {result}) ]
    
  
  function make_sized'0 (self : int32) : int32
  
  axiom make_sized'0_spec : forall self : int32 . [%#span27] make_sized'0 self = self
  
  function insert'0 (self : FMap'0.t_FMap opaque_ptr int32) (k : opaque_ptr) (v : int32) : FMap'0.t_FMap opaque_ptr int32
    
  
  axiom insert'0_spec : forall self : FMap'0.t_FMap opaque_ptr int32, k : opaque_ptr, v : int32 . ([%#span30] not contains'0 self k
   -> len'0 (insert'0 self k v) = len'0 self + 1)
  && ([%#span29] contains'0 self k  -> len'0 (insert'0 self k v) = len'0 self)
  && ([%#span28] view'0 (insert'0 self k v) = Map.set (view'0 self) k (Option'0.C_Some (make_sized'0 v)))
  
  let rec ptr_from_box'0 (self:borrowed (GhostPtrToken'0.t_GhostPtrToken int32)) (val':int32) (return'  (ret:opaque_ptr))= {[@expl:precondition] [%#span32] inv'2 val'}
    {[@expl:precondition] [%#span31] inv'1 self}
    any
    [ return' (result:opaque_ptr)-> {[%#span34] shallow_model'0 self.final
      = insert'0 (shallow_model'0 self.current) result val'}
      {[%#span33] not contains'0 (shallow_model'0 self.current) result}
      (! return' {result}) ]
    
  
  use map.Const
  
  function empty'0 (_1 : ()) : FMap'0.t_FMap opaque_ptr int32
  
  axiom empty'0_spec : forall _1 : () . ([%#span36] view'0 (empty'0 _1) = Const.const (Option'0.C_None))
  && ([%#span35] len'0 (empty'0 _1) = 0)
  
  let rec new'0 (_1:()) (return'  (ret:GhostPtrToken'0.t_GhostPtrToken int32))= any
    [ return' (result:GhostPtrToken'0.t_GhostPtrToken int32)-> {[%#span38] inv'0 result}
      {[%#span37] shallow_model'0 result = empty'0 ()}
      (! return' {result}) ]
    
  
  let rec main (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#s9490] ()} (fun (_ret':GhostPtrToken'0.t_GhostPtrToken int32) ->  [ &tok <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &b <- [%#s9491] (1 : int32) ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <GhostPtrToken'0.t_GhostPtrToken int32> {tok}
          (fun (_ret':borrowed (GhostPtrToken'0.t_GhostPtrToken int32)) ->  [ &_4 <- _ret' ]  [ &tok <- _4.final ] s1)
      | s1 = ptr_from_box'0 {_4} {b} (fun (_ret':opaque_ptr) ->  [ &p <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <GhostPtrToken'0.t_GhostPtrToken int32> {tok}
          (fun (_ret':borrowed (GhostPtrToken'0.t_GhostPtrToken int32)) ->  [ &_7 <- _ret' ]  [ &tok <- _7.final ] s1)
      | s1 = ptr_to_box'0 {_7} {p} (fun (_ret':int32) ->  [ &r <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 = Int32.add {r} {[%#s9492] (5 : int32)} (fun (_ret':int32) ->  [ &r <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = bb6
    | bb6 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & tok : GhostPtrToken'0.t_GhostPtrToken int32 = any_l ()
    | & b : int32 = any_l ()
    | & p : opaque_ptr = any_l ()
    | & _4 : borrowed (GhostPtrToken'0.t_GhostPtrToken int32) = any_l ()
    | & r : int32 = any_l ()
    | & _7 : borrowed (GhostPtrToken'0.t_GhostPtrToken int32) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
