
module CreusotContracts_GhostPtr_GhostPtrToken_Type
  type t_ghostptrtoken 't
end
module CreusotContracts_Logic_Fmap_FMap_Type
  type t_fmap 'k 'v
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
  function any_l (_ : 'b) : 'a
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C949_Main
  use prelude.Int32
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'6 (self : Core_Option_Option_Type.t_option int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Core_Option_Option_Type.t_option int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Core_Option_Option_Type.t_option int32)
  let rec inv'6 (_x:Core_Option_Option_Type.t_option int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Core_Option_Option_Type.t_option int32 . inv'6 x = true
  predicate invariant'5 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : int32)
  let rec inv'5 (_x:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : int32 . inv'5 x = true
  use prelude.Opaque
  use map.Map
  predicate invariant'4 (self : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32))
  let rec inv'4 (_x:Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32) . inv'4 x = true
  predicate invariant'3 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : int32)
  let rec inv'3 (_x:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : int32 . inv'3 x = true
  predicate invariant'2 (self : opaque_ptr) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:opaque_ptr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : opaque_ptr)
  let rec inv'2 (_x:opaque_ptr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : opaque_ptr . inv'2 x = true
  use CreusotContracts_Logic_Fmap_FMap_Type as CreusotContracts_Logic_Fmap_FMap_Type
  predicate invariant'1 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)
  let rec inv'1 (_x:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32 . inv'1 x = true
  predicate invariant'0 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : int32)
  let rec inv'0 (_x:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv'0 : forall x : int32 . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'1 (self : int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'1 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 35 8 35 31] resolve'1 self
  let rec resolve'0 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use CreusotContracts_GhostPtr_GhostPtrToken_Type as CreusotContracts_GhostPtr_GhostPtrToken_Type
  use prelude.Int
  use map.Map
  function mk'0 (_m : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  let rec mk'0 (_m:Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) (return'  (ret:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32))= any
    [ return' (result:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)-> {result = mk'0 _m}
      (! return' {result}) ]
    
  function view'0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)
    
  let rec view'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (return'  (ret:Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/logic/fmap.rs" 28 16 28 20] inv'1 self}
    any
    [ return' (result:Map.map opaque_ptr (Core_Option_Option_Type.t_option int32))-> {result = view'0 self}
      (! return' {result}) ]
    
  axiom view'0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32 . ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 28 16 28 20] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 28 4 28 35] inv'4 (view'0 self))
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 27 14 27 38] mk'0 (view'0 self) = self)
  function get'0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : Core_Option_Option_Type.t_option int32
    
   =
    [#"../../../../../creusot-contracts/src/logic/fmap.rs" 55 8 55 26] Map.get (view'0 self) k
  let rec get'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k:opaque_ptr) (return'  (ret:Core_Option_Option_Type.t_option int32))= any
    [ return' (result:Core_Option_Option_Type.t_option int32)-> {result = get'0 self k} (! return' {result}) ]
    
  function contains'0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : bool
    
   =
    [#"../../../../../creusot-contracts/src/logic/fmap.rs" 79 8 79 27] get'0 self k <> Core_Option_Option_Type.C_None
  let rec contains'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k:opaque_ptr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = contains'0 self k} (! return' {result}) ]
    
  function len'0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : int
  let rec len'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (return'  (ret:int))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/logic/fmap.rs" 13 15 13 19] inv'1 self}
    any [ return' (result:int)-> {result = len'0 self} (! return' {result}) ] 
  axiom len'0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32 . ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 13 15 13 19] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 12 14 12 25] len'0 self >= 0)
  use map.Map
  function remove'0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  let rec remove'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k:opaque_ptr) (return'  (ret:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/logic/fmap.rs" 47 24 47 25] inv'2 k}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/logic/fmap.rs" 47 18 47 22] inv'1 self}
    any
    [ return' (result:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)-> {result = remove'0 self k}
      (! return' {result}) ]
    
  axiom remove'0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32, k : opaque_ptr . ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 47 18 47 22] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 47 24 47 25] inv'2 k)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 47 4 47 37] inv'1 (remove'0 self k))
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 46 14 46 84] len'0 (remove'0 self k)
  = (if contains'0 self k then len'0 self - 1 else len'0 self))
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 45 14 45 55] view'0 (remove'0 self k)
  = Map.set (view'0 self) k (Core_Option_Option_Type.C_None))
  function unreachable'0 (_1 : ()) : int32
  let rec unreachable'0 (_1:()) (return'  (ret:int32))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/util.rs" 24 11 24 16] false}
    any [ return' (result:int32)-> {result = unreachable'0 _1} (! return' {result}) ] 
  axiom unreachable'0_spec : forall _1 : () . ([#"../../../../../creusot-contracts/src/util.rs" 24 11 24 16] false)
   -> ([#"../../../../../creusot-contracts/src/util.rs" 27 0 27 28] inv'0 (unreachable'0 _1))
  && ([#"../../../../../creusot-contracts/src/util.rs" 25 10 25 15] false)
  function unwrap'0 (op : Core_Option_Option_Type.t_option int32) : int32
  let rec unwrap'0 (op:Core_Option_Option_Type.t_option int32) (return'  (ret:int32))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/util.rs" 35 17 35 19] inv'6 op}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/util.rs" 33 11 33 21] op
    <> Core_Option_Option_Type.C_None}
    any [ return' (result:int32)-> {result = unwrap'0 op} (! return' {result}) ] 
  axiom unwrap'0_spec : forall op : Core_Option_Option_Type.t_option int32 . ([#"../../../../../creusot-contracts/src/util.rs" 33 11 33 21] op
  <> Core_Option_Option_Type.C_None)
   -> ([#"../../../../../creusot-contracts/src/util.rs" 35 17 35 19] inv'6 op)
   -> ([#"../../../../../creusot-contracts/src/util.rs" 35 0 35 36] inv'0 (unwrap'0 op))
  && ([#"../../../../../creusot-contracts/src/util.rs" 34 10 34 28] Core_Option_Option_Type.C_Some (unwrap'0 op) = op)
  function lookup_unsized'0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : int32
    
   =
    [#"../../../../../creusot-contracts/src/logic/fmap.rs" 62 8 62 27] unwrap'0 (get'0 self k)
  let rec lookup_unsized'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k:opaque_ptr) (return'  (ret:int32))= any
    [ return' (result:int32)-> {result = lookup_unsized'0 self k} (! return' {result}) ]
    
  function shallow_model'0 (self : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  let rec shallow_model'0 (self:CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) (return'  (ret:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32))= any
    [ return' (result:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)-> {result = shallow_model'0 self}
      (! return' {result}) ]
    
  use prelude.Borrow
  let rec ptr_to_box'0 (self:borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)) (ptr:opaque_ptr) (return'  (ret:int32))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/ghost_ptr.rs" 96 4 96 39] contains'0 (shallow_model'0 ( * self)) ptr}
    any
    [ return' (result:int32)-> {[#"../../../../../creusot-contracts/src/ghost_ptr.rs" 99 4 99 57] inv'0 result}
      {[#"../../../../../creusot-contracts/src/ghost_ptr.rs" 98 14 98 46] shallow_model'0 ( ^ self)
      = remove'0 (shallow_model'0 ( * self)) ptr}
      {[#"../../../../../creusot-contracts/src/ghost_ptr.rs" 97 14 97 54] result
      = lookup_unsized'0 (shallow_model'0 ( * self)) ptr}
      (! return' {result}) ]
    
  function make_sized'0 (self : int32) : int32
  let rec make_sized'0 (self:int32) (return'  (ret:int32))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/util.rs" 16 19 16 23] inv'5 self}
    any [ return' (result:int32)-> {result = make_sized'0 self} (! return' {result}) ] 
  axiom make_sized'0_spec : forall self : int32 . ([#"../../../../../creusot-contracts/src/util.rs" 16 19 16 23] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/util.rs" 16 4 16 40] inv'0 (make_sized'0 self))
  && ([#"../../../../../creusot-contracts/src/util.rs" 15 14 15 30] make_sized'0 self = self)
  function insert'0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) (v : int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  let rec insert'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k:opaque_ptr) (v:int32) (return'  (ret:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 30 38 31] inv'3 v}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 24 38 25] inv'2 k}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 18 38 22] inv'1 self}
    any
    [ return' (result:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)-> {result = insert'0 self k v}
      (! return' {result}) ]
    
  axiom insert'0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32, k : opaque_ptr, v : int32 . ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 18 38 22] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 24 38 25] inv'2 k)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 30 38 31] inv'3 v)
   -> ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 38 4 38 43] inv'1 (insert'0 self k v))
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 37 4 37 68] not contains'0 self k
   -> len'0 (insert'0 self k v) = len'0 self + 1)
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 36 4 36 63] contains'0 self k
   -> len'0 (insert'0 self k v) = len'0 self)
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 35 14 35 71] view'0 (insert'0 self k v)
  = Map.set (view'0 self) k (Core_Option_Option_Type.C_Some (make_sized'0 v)))
  let rec ptr_from_box'0 (self:borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)) (val':int32) (return'  (ret:opaque_ptr))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/ghost_ptr.rs" 71 35 71 38] inv'0 val'}
    any
    [ return' (result:opaque_ptr)-> {[#"../../../../../creusot-contracts/src/ghost_ptr.rs" 70 14 70 55] shallow_model'0 ( ^ self)
      = insert'0 (shallow_model'0 ( * self)) result val'}
      {[#"../../../../../creusot-contracts/src/ghost_ptr.rs" 67 4 67 42] not contains'0 (shallow_model'0 ( * self)) result}
      (! return' {result}) ]
    
  use map.Const
  function empty'0 (_1 : ()) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
  let rec empty'0 (_1:()) (return'  (ret:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32))= any
    [ return' (result:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)-> {result = empty'0 _1}
      (! return' {result}) ]
    
  axiom empty'0_spec : forall _1 : () . ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 87 4 87 26] inv'1 (empty'0 _1))
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 86 14 86 49] view'0 (empty'0 _1)
  = Const.const (Core_Option_Option_Type.C_None))
  && ([#"../../../../../creusot-contracts/src/logic/fmap.rs" 85 14 85 31] len'0 (empty'0 _1) = 0)
  let rec new'0 (_1:()) (return'  (ret:CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32))= any
    [ return' (result:CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)-> {[#"../../../../../creusot-contracts/src/ghost_ptr.rs" 41 14 41 38] shallow_model'0 result
      = empty'0 ()}
      (! return' {result}) ]
    
  let rec main (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[#"../949.rs" 5 18 5 38] ()}
          (fun (_ret':CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) ->  [ &tok <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &b <- [#"../949.rs" 6 21 6 22] (1 : int32) ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32> {tok}
          (fun (_ret':borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)) ->
             [ &_4 <- _ret' ] 
             [ &tok <-  ^ _4 ] 
            s1)
      | s1 = ptr_from_box'0 {_4} {b} (fun (_ret':opaque_ptr) ->  [ &p <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32> {tok}
          (fun (_ret':borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)) ->
             [ &_7 <- _ret' ] 
             [ &tok <-  ^ _7 ] 
            s1)
      | s1 = ptr_to_box'0 {_7} {p} (fun (_ret':int32) ->  [ &r <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 = Int32.add {r} {[#"../949.rs" 9 10 9 11] (5 : int32)} (fun (_ret':int32) ->  [ &r <- _ret' ] s1)
      | s1 = -{resolve'0 r}- s2
      | s2 =  [ &_0 <- [#"../949.rs" 4 14 10 1] () ] s3
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = bb6 ] 
    | bb6 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & tok : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32 = any_l () : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32
    | & b : int32 = any_l () : int32
    | & p : opaque_ptr = any_l () : opaque_ptr
    | & _4 : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) = any_l () : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)
    | & r : int32 = any_l () : int32
    | & _7 : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) = any_l () : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) ]
     [ return' (result:())-> (! return' {result}) ] 
end
