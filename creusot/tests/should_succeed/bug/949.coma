module T_creusot_contracts__ghost_ptr__GhostPtrToken [#"../../../../creusot-contracts/src/ghost_ptr.rs" 14 0 14 35]
  type t_GhostPtrToken 't
end
module T_creusot_contracts__logic__fmap__FMap [#"../../../../creusot-contracts/src/logic/fmap.rs" 7 0 7 29]
  type t_FMap 'k 'v
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_949__main [#"949.rs" 4 0 4 13]
  let%span s9490 = "949.rs" 5 18 5 38
  let%span s9491 = "949.rs" 6 21 6 22
  let%span s9492 = "949.rs" 9 10 9 11
  let%span sghost_ptr3 = "../../../../creusot-contracts/src/ghost_ptr.rs" 54 14 54 38
  let%span sghost_ptr4 = "../../../../creusot-contracts/src/ghost_ptr.rs" 55 4 55 24
  let%span sghost_ptr5 = "../../../../creusot-contracts/src/ghost_ptr.rs" 84 29 84 33
  let%span sghost_ptr6 = "../../../../creusot-contracts/src/ghost_ptr.rs" 84 35 84 38
  let%span sghost_ptr7 = "../../../../creusot-contracts/src/ghost_ptr.rs" 80 4 80 42
  let%span sghost_ptr8 = "../../../../creusot-contracts/src/ghost_ptr.rs" 83 14 83 55
  let%span sghost_ptr9 = "../../../../creusot-contracts/src/ghost_ptr.rs" 110 4 110 39
  let%span sghost_ptr10 = "../../../../creusot-contracts/src/ghost_ptr.rs" 113 27 113 31
  let%span sghost_ptr11 = "../../../../creusot-contracts/src/ghost_ptr.rs" 111 14 111 54
  let%span sghost_ptr12 = "../../../../creusot-contracts/src/ghost_ptr.rs" 112 14 112 46
  let%span sghost_ptr13 = "../../../../creusot-contracts/src/ghost_ptr.rs" 113 4 113 60
  let%span sghost_ptr14 = "../../../../creusot-contracts/src/ghost_ptr.rs" 34 14 34 56
  let%span sfmap15 = "../../../../creusot-contracts/src/logic/fmap.rs" 86 14 86 31
  let%span sfmap16 = "../../../../creusot-contracts/src/logic/fmap.rs" 87 14 87 49
  let%span sfmap17 = "../../../../creusot-contracts/src/logic/fmap.rs" 80 8 80 27
  let%span sfmap18 = "../../../../creusot-contracts/src/logic/fmap.rs" 36 14 36 71
  let%span sfmap19 = "../../../../creusot-contracts/src/logic/fmap.rs" 37 4 37 63
  let%span sfmap20 = "../../../../creusot-contracts/src/logic/fmap.rs" 38 4 38 68
  let%span sfmap21 = "../../../../creusot-contracts/src/logic/fmap.rs" 63 8 63 27
  let%span sfmap22 = "../../../../creusot-contracts/src/logic/fmap.rs" 46 14 46 55
  let%span sfmap23 = "../../../../creusot-contracts/src/logic/fmap.rs" 47 14 47 84
  let%span sghost_ptr24 = "../../../../creusot-contracts/src/ghost_ptr.rs" 149 14 149 38
  let%span sghost_ptr25 = "../../../../creusot-contracts/src/ghost_ptr.rs" 150 4 150 98
  let%span sfmap26 = "../../../../creusot-contracts/src/logic/fmap.rs" 56 8 56 26
  let%span sfmap27 = "../../../../creusot-contracts/src/logic/fmap.rs" 13 14 13 25
  let%span sfmap28 = "../../../../creusot-contracts/src/logic/fmap.rs" 28 14 28 38
  let%span sutil29 = "../../../../creusot-contracts/src/util.rs" 15 14 15 30
  let%span sutil30 = "../../../../creusot-contracts/src/util.rs" 34 11 34 21
  let%span sutil31 = "../../../../creusot-contracts/src/util.rs" 35 10 35 28
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  predicate inv'2 (_1 : int32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : int32 [inv'2 x] . inv'2 x = true
  
  use T_creusot_contracts__ghost_ptr__GhostPtrToken as GhostPtrToken'0
  
  use prelude.prelude.Borrow
  
  predicate inv'1 (_1 : borrowed (GhostPtrToken'0.t_GhostPtrToken int32))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (GhostPtrToken'0.t_GhostPtrToken int32) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : GhostPtrToken'0.t_GhostPtrToken int32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : GhostPtrToken'0.t_GhostPtrToken int32 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Opaque
  
  use T_creusot_contracts__logic__fmap__FMap as FMap'0
  
  use T_core__option__Option as Option'0
  
  use map.Map
  
  use map.Map
  
  function mk'0 (_m : Map.map opaque_ptr (Option'0.t_Option int32)) : FMap'0.t_FMap opaque_ptr int32
  
  function view'1 (self : FMap'0.t_FMap opaque_ptr int32) : Map.map opaque_ptr (Option'0.t_Option int32)
  
  axiom view'1_spec : forall self : FMap'0.t_FMap opaque_ptr int32 . [%#sfmap28] mk'0 (view'1 self) = self
  
  function get'0 [@inline:trivial] (self : FMap'0.t_FMap opaque_ptr int32) (k : opaque_ptr) : Option'0.t_Option int32 =
    [%#sfmap26] Map.get (view'1 self) k
  
  function contains'0 [@inline:trivial] (self : FMap'0.t_FMap opaque_ptr int32) (k : opaque_ptr) : bool =
    [%#sfmap17] get'0 self k <> Option'0.C_None
  
  function len'0 (self : FMap'0.t_FMap opaque_ptr int32) : int
  
  axiom len'0_spec : forall self : FMap'0.t_FMap opaque_ptr int32 . [%#sfmap27] len'0 self >= 0
  
  use map.Map
  
  function remove'0 (self : FMap'0.t_FMap opaque_ptr int32) (k : opaque_ptr) : FMap'0.t_FMap opaque_ptr int32
  
  axiom remove'0_spec : forall self : FMap'0.t_FMap opaque_ptr int32, k : opaque_ptr . ([%#sfmap23] len'0 (remove'0 self k)
  = (if contains'0 self k then len'0 self - 1 else len'0 self))
  && ([%#sfmap22] view'1 (remove'0 self k) = Map.set (view'1 self) k (Option'0.C_None))
  
  function unwrap'0 (op : Option'0.t_Option int32) : int32
  
  axiom unwrap'0_spec : forall op : Option'0.t_Option int32 . ([%#sutil30] op <> Option'0.C_None)
   -> ([%#sutil31] Option'0.C_Some (unwrap'0 op) = op)
  
  function lookup_unsized'0 [@inline:trivial] (self : FMap'0.t_FMap opaque_ptr int32) (k : opaque_ptr) : int32 =
    [%#sfmap21] unwrap'0 (get'0 self k)
  
  function addr_logic'0 (self : opaque_ptr) : int
  
  function null_logic'0 (_1 : ()) : opaque_ptr
  
  axiom null_logic'0_spec : forall _1 : () . ([%#sghost_ptr25] forall ptr : opaque_ptr . addr_logic'0 ptr
  = addr_logic'0 (null_logic'0 _1)  -> ptr = null_logic'0 _1)
  && ([%#sghost_ptr24] addr_logic'0 (null_logic'0 _1) = 0)
  
  function view'0 (self : GhostPtrToken'0.t_GhostPtrToken int32) : FMap'0.t_FMap opaque_ptr int32
  
  axiom view'0_spec : forall self : GhostPtrToken'0.t_GhostPtrToken int32 . [%#sghost_ptr14] get'0 (view'0 self) (null_logic'0 ())
  = Option'0.C_None
  
  let rec ptr_to_box'0 (self:borrowed (GhostPtrToken'0.t_GhostPtrToken int32)) (ptr:opaque_ptr) (return'  (ret:int32))= {[@expl:precondition] [%#sghost_ptr10] inv'1 self}
    {[@expl:precondition] [%#sghost_ptr9] contains'0 (view'0 self.current) ptr}
    any
    [ return' (result:int32)-> {[%#sghost_ptr13] inv'2 result}
      {[%#sghost_ptr12] view'0 self.final = remove'0 (view'0 self.current) ptr}
      {[%#sghost_ptr11] result = lookup_unsized'0 (view'0 self.current) ptr}
      (! return' {result}) ]
    
  
  function make_sized'0 (self : int32) : int32
  
  axiom make_sized'0_spec : forall self : int32 . [%#sutil29] make_sized'0 self = self
  
  function insert'0 (self : FMap'0.t_FMap opaque_ptr int32) (k : opaque_ptr) (v : int32) : FMap'0.t_FMap opaque_ptr int32
    
  
  axiom insert'0_spec : forall self : FMap'0.t_FMap opaque_ptr int32, k : opaque_ptr, v : int32 . ([%#sfmap20] not contains'0 self k
   -> len'0 (insert'0 self k v) = len'0 self + 1)
  && ([%#sfmap19] contains'0 self k  -> len'0 (insert'0 self k v) = len'0 self)
  && ([%#sfmap18] view'1 (insert'0 self k v) = Map.set (view'1 self) k (Option'0.C_Some (make_sized'0 v)))
  
  let rec ptr_from_box'0 (self:borrowed (GhostPtrToken'0.t_GhostPtrToken int32)) (val':int32) (return'  (ret:opaque_ptr))= {[@expl:precondition] [%#sghost_ptr6] inv'2 val'}
    {[@expl:precondition] [%#sghost_ptr5] inv'1 self}
    any
    [ return' (result:opaque_ptr)-> {[%#sghost_ptr8] view'0 self.final = insert'0 (view'0 self.current) result val'}
      {[%#sghost_ptr7] not contains'0 (view'0 self.current) result}
      (! return' {result}) ]
    
  
  use map.Const
  
  function empty'0 (_1 : ()) : FMap'0.t_FMap opaque_ptr int32
  
  axiom empty'0_spec : forall _1 : () . ([%#sfmap16] view'1 (empty'0 _1) = Const.const (Option'0.C_None))
  && ([%#sfmap15] len'0 (empty'0 _1) = 0)
  
  let rec new'0 (_1:()) (return'  (ret:GhostPtrToken'0.t_GhostPtrToken int32))= any
    [ return' (result:GhostPtrToken'0.t_GhostPtrToken int32)-> {[%#sghost_ptr4] inv'0 result}
      {[%#sghost_ptr3] view'0 result = empty'0 ()}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec main (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#s9490] ()} (fun (_ret':GhostPtrToken'0.t_GhostPtrToken int32) ->  [ &tok <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &b <- [%#s9491] (1 : int32) ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <GhostPtrToken'0.t_GhostPtrToken int32> {tok}
          (fun (_ret':borrowed (GhostPtrToken'0.t_GhostPtrToken int32)) ->
             [ &_4 <- _ret' ] 
             [ &tok <- _ret'.final ] 
            s1)
      | s1 = ptr_from_box'0 {_4} {b} (fun (_ret':opaque_ptr) ->  [ &p <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <GhostPtrToken'0.t_GhostPtrToken int32> {tok}
          (fun (_ret':borrowed (GhostPtrToken'0.t_GhostPtrToken int32)) ->
             [ &_7 <- _ret' ] 
             [ &tok <- _ret'.final ] 
            s1)
      | s1 = ptr_to_box'0 {_7} {p} (fun (_ret':int32) ->  [ &r <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 = Int32.add {r} {[%#s9492] (5 : int32)} (fun (_ret':int32) ->  [ &r <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = bb6
    | bb6 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & tok : GhostPtrToken'0.t_GhostPtrToken int32 = any_l ()
    | & b : int32 = any_l ()
    | & p : opaque_ptr = any_l ()
    | & _4 : borrowed (GhostPtrToken'0.t_GhostPtrToken int32) = any_l ()
    | & r : int32 = any_l ()
    | & _7 : borrowed (GhostPtrToken'0.t_GhostPtrToken int32) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
