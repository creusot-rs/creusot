
module BoxBorrowResolve_BorrowInBox
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.Int32
  predicate resolve'0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate resolve'1 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 35 8 35 31] resolve'0 self
  let rec resolve'1 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Int
  let rec borrow_in_box (x:borrowed int32) (return'  (ret:borrowed int32))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <int32> { * x} {Borrow.get_id x}
          (fun (_ret':borrowed int32) ->  [ &_4 <- _ret' ]  [ &x <- { x with current = ( ^ _4) ; } ] s1)
      | s1 = Borrow.borrow_final <int32> { * _4} {Borrow.get_id _4}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_4 <- { _4 with current = ( ^ _2) ; } ] s2)
      | s2 = Borrow.borrow_final <int32> { * _2} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = ( ^ _0) ; } ] s3)
      | s3 = -{resolve'0 _4}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = bb1 ]
      
    | bb1 = s0 [ s0 = -{resolve'1 x}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : borrowed int32 = any_l () : borrowed int32
    | & x : borrowed int32 = x
    | & _2 : borrowed int32 = any_l () : borrowed int32
    | & _4 : borrowed int32 = any_l () : borrowed int32 ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [#"../box_borrow_resolve.rs" 5 10 5 22] result = x}
      (! return' {result}) ]
    
end
