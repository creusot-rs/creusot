module M_box_borrow_resolve__borrow_in_box [#"box_borrow_resolve.rs" 6 0 6 50]
  let%span sbox_borrow_resolve0 = "box_borrow_resolve.rs" 5 10 5 22
  let%span sresolve1 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sresolve2 = "../../../../creusot-contracts/src/resolve.rs" 55 8 55 23
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve1] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  predicate resolve'3 (self : borrowed int32) =
    [%#sresolve2] resolve'0 self
  
  predicate resolve'1 (_1 : borrowed int32) =
    resolve'3 _1
  
  meta "compute_max_steps" 1000000
  
  let rec borrow_in_box (x:borrowed int32) (return'  (ret:borrowed int32))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <int32> {x.current} {Borrow.get_id x}
          (fun (_ret':borrowed int32) ->  [ &_4 <- _ret' ]  [ &x <- { x with current = _ret'.final ; } ] s1)
      | s1 = Borrow.borrow_final <int32> {_4.current} {Borrow.get_id _4}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_4 <- { _4 with current = _ret'.final ; } ] s2)
      | s2 = Borrow.borrow_final <int32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final ; } ] s3)
      | s3 = -{resolve'0 _4}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 x}- s6
      | s6 = bb1 ]
      
    | bb1 = return' {_0} ]
    )
    [ & _0 : borrowed int32 = any_l ()
    | & x : borrowed int32 = x
    | & _2 : borrowed int32 = any_l ()
    | & _4 : borrowed int32 = any_l () ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [%#sbox_borrow_resolve0] result = x}
      (! return' {result}) ]
    
end
