module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module C173_Test233_Interface
  val test_233 () : ()
end
module C173_Test233
  use mach.int.Int32
  use mach.int.Int
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = int32
  let rec cfg test_233 () : () = 
  var _0 : ();
  var x_1 : int32;
  var _2 : ();
  var x_3 : int32;
  var _4 : ();
  {
    goto BB0
  }
  BB0 {
    x_1 <- (17 : int32);
    assume { Resolve0.resolve x_1 };
    assert { Int32.to_int x_1 = 17 };
    _2 <- ();
    assume { Resolve1.resolve _2 };
    x_3 <- (42 : int32);
    assume { Resolve0.resolve x_3 };
    assert { Int32.to_int x_3 = 42 };
    _4 <- ();
    assume { Resolve1.resolve _4 };
    _0 <- ();
    return _0
  }
  
end
module C173_Knapsack01Dyn_Interface
  type name   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  val knapsack01_dyn (n : usize) : ()
    requires {0 < UInt64.to_int n && UInt64.to_int n < 10000}
    
end
module C173_Knapsack01Dyn
  type name   
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  let rec cfg knapsack01_dyn (n : usize) : ()
    requires {0 < UInt64.to_int n && UInt64.to_int n < 10000}
    
   = 
  var _0 : ();
  var n_1 : usize;
  var i_2 : usize;
  var w_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : ();
  var _10 : ();
  var _11 : ();
  var i_12 : usize;
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    assume { Resolve0.resolve i_2 };
    w_3 <- (1 : usize);
    goto BB1
  }
  BB1 {
    invariant i_items_len { UInt64.to_int i_2 < UInt64.to_int n_1 };
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _7 };
    _7 <- w_3;
    assume { Resolve0.resolve _8 };
    _8 <- n_1;
    _6 <- _7 <= _8;
    switch (_6)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    w_3 <- w_3 + (1 : usize);
    _5 <- ();
    assume { Resolve1.resolve _5 };
    goto BB1
  }
  BB4 {
    assume { Resolve0.resolve w_3 };
    _4 <- ();
    assume { Resolve1.resolve _4 };
    assume { Resolve0.resolve i_12 };
    i_12 <- n_1;
    assume { Resolve0.resolve n_1 };
    assume { Resolve0.resolve i_12 };
    _0 <- ();
    return _0
  }
  
end
