
module C682_AddSome
  use prelude.UInt64
  use prelude.Int
  let constant max0  : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : uint64)
  use prelude.Borrow
  predicate resolve0 (self : borrowed uint64) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed uint64) : bool
    ensures { result = resolve0 self }
    
  let rec cfg add_some [#"../682.rs" 6 0 6 24] [@cfg:stackify] [@cfg:subregion_analysis] (a : borrowed uint64) : ()
    requires {[#"../682.rs" 4 11 4 32]  * a <= div max0 (2 : uint64)}
    ensures { [#"../682.rs" 5 10 5 17]  ^ a >  * a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : borrowed uint64 = a;
  {
    goto BB0
  }
  BB0 {
    [#"../682.rs" 7 4 7 11] a <- { a with current = ( * a + ([#"../682.rs" 7 10 7 11] (1 : uint64))) ; };
    assume { resolve0 a };
    [#"../682.rs" 6 25 8 1] _0 <- ([#"../682.rs" 6 25 8 1] ());
    return _0
  }
  
end
module C682_Foo
  use prelude.UInt64
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Borrow
  predicate resolve0 (self : borrowed uint64) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed uint64) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  let constant max0  : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : uint64)
  val add_some0 [#"../682.rs" 6 0 6 24] (a : borrowed uint64) : ()
    requires {[#"../682.rs" 4 11 4 32]  * a <= div max0 (2 : uint64)}
    ensures { [#"../682.rs" 5 10 5 17]  ^ a >  * a }
    
  use prelude.Snapshot
  let rec cfg foo [#"../682.rs" 12 0 12 23] [@cfg:stackify] [@cfg:subregion_analysis] (a : borrowed uint64) : ()
    requires {[#"../682.rs" 10 11 10 21]  * a = (3 : uint64)}
    ensures { [#"../682.rs" 11 10 11 17]  ^ a >  * a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : borrowed uint64 = a;
  var a_p : Snapshot.snap_ty uint64;
  var _6 : ();
  var _7 : borrowed uint64;
  {
    goto BB0
  }
  BB0 {
    [#"../682.rs" 13 29 13 42] a_p <- ([#"../682.rs" 13 29 13 42] Snapshot.new ( * a));
    goto BB1
  }
  BB1 {
    [#"../682.rs" 14 13 14 14] _7 <- Borrow.borrow_final ( * a) (Borrow.get_id a);
    [#"../682.rs" 14 13 14 14] a <- { a with current = ( ^ _7) ; };
    [#"../682.rs" 14 4 14 15] _6 <- ([#"../682.rs" 14 4 14 15] add_some0 _7);
    _7 <- any borrowed uint64;
    goto BB2
  }
  BB2 {
    assume { resolve0 a };
    assert { [@expl:assertion] [#"../682.rs" 15 18 15 27]  * a > Snapshot.inner a_p };
    [#"../682.rs" 12 24 16 1] _0 <- ([#"../682.rs" 12 24 16 1] ());
    return _0
  }
  
end
