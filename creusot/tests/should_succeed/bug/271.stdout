module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module C271_Ex_Interface
  val ex [@cfg:stackify] () : ()
end
module C271_Ex
  use mach.int.Int
  use mach.int.Int32
  let rec cfg ex [@cfg:stackify] () : () = 
  var _0 : ();
  var a_1 : int32;
  {
    goto BB0
  }
  BB0 {
    a_1 <- (0 : int32);
    assume { (fun x -> true) a_1 };
    _0 <- ();
    return _0
  }
  
end
module C271_Ex2_Interface
  val ex2 [@cfg:stackify] () : ()
end
module C271_Ex2
  use mach.int.Int
  use mach.int.Int32
  let rec cfg ex2 [@cfg:stackify] () : () = 
  var _0 : ();
  var a_1 : int32;
  {
    goto BB0
  }
  BB0 {
    a_1 <- (0 : int32);
    switch (a_1 = 0)
      | True -> goto BB2
      | False -> switch (a_1 = 1)
        | True -> goto BB2
        | False -> goto BB1
        end
      end
  }
  BB1 {
    assume { (fun x -> true) a_1 };
    _0 <- ();
    goto BB3
  }
  BB2 {
    assume { (fun x -> true) a_1 };
    _0 <- ();
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C271_Ex3_Interface
  val ex3 [@cfg:stackify] () : ()
end
module C271_Ex3
  use mach.int.Int
  use mach.int.Int32
  let rec cfg ex3 [@cfg:stackify] () : () = 
  var _0 : ();
  var a_1 : int32;
  {
    goto BB0
  }
  BB0 {
    a_1 <- (0 : int32);
    switch (a_1 = 0)
      | True -> goto BB2
      | False -> switch (a_1 = 1)
        | True -> goto BB2
        | False -> switch (a_1 = 2)
          | True -> goto BB3
          | False -> goto BB1
          end
        end
      end
  }
  BB1 {
    assume { (fun x -> true) a_1 };
    _0 <- ();
    goto BB4
  }
  BB2 {
    assume { (fun x -> true) a_1 };
    _0 <- ();
    goto BB4
  }
  BB3 {
    assume { (fun x -> true) a_1 };
    _0 <- ();
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
