
module C552_Machine_Type
  type t_machine  =
    | C_Machine
  
  function any_l (_ : 'b) : 'a
  
  let rec t_machine (input:t_machine) (ret  )= any
    [ good -> {C_Machine  = input} (! ret) | bad -> {C_Machine  <> input} {false} any ]
    
end
module C552_Transition_Type
  type t_transition  =
    | C_Transition
  
  function any_l (_ : 'b) : 'a
  
  let rec t_transition (input:t_transition) (ret  )= any
    [ good -> {C_Transition  = input} (! ret) | bad -> {C_Transition  <> input} {false} any ]
    
end
module C552_Impl1_Transition
  let%span s5520 = "../552.rs" 30 15 30 32
  
  let%span span1 = "../552.rs" 19 8 19 12
  
  use C552_Machine_Type as Machine'0
  
  use prelude.prelude.Borrow
  
  predicate invariants'0 [#"../552.rs" 18 4 18 31] (self : Machine'0.t_machine) =
    [%#span1] true
  
  use prelude.prelude.Intrinsic
  
  use C552_Transition_Type as Transition'0
  
  let rec transition (self:Machine'0.t_machine) (return'  (ret:Transition'0.t_transition))= {[%#s5520] invariants'0 self}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- Transition'0.C_Transition ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : Transition'0.t_transition = any_l () ]
     [ return' (result:Transition'0.t_transition)-> (! return' {result}) ] 
end
module C552_Impl0_Step
  let%span s5520 = "../552.rs" 25 8 25 13
  
  let%span s5521 = "../552.rs" 22 4 22 41
  
  let%span span2 = "../552.rs" 19 8 19 12
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span4 = "../552.rs" 30 15 30 32
  
  use C552_Machine_Type as Machine'0
  
  predicate invariants'0 [#"../552.rs" 18 4 18 31] (self : Machine'0.t_machine) =
    [%#span2] true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (Machine'0.t_machine)) =
    [%#span3] self.final = self.current
  
  use C552_Transition_Type as Transition'0
  
  let rec transition'0 (self:Machine'0.t_machine) (return'  (ret:Transition'0.t_transition))= {[@expl:precondition] [%#span4] invariants'0 self}
    any [ return' (result:Transition'0.t_transition)-> (! return' {result}) ] 
  
  let rec step (self:borrowed (Machine'0.t_machine)) (return'  (ret:bool))= {[%#s5521] invariants'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = transition'0 {self.current} (fun (_ret':Transition'0.t_transition) ->  [ &_4 <- _ret' ] s1) | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = -{resolve'0 self}- s1 | s1 =  [ &_0 <- [%#s5520] false ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : bool = any_l ()
    | & self : borrowed (Machine'0.t_machine) = self
    | & _4 : Transition'0.t_transition = any_l () ]
     [ return' (result:bool)-> {[@expl:postcondition] [%#s5521] invariants'0 self.final} (! return' {result}) ] 
end
module C552_Impl0
  let%span s5520 = "../552.rs" 23 4 23 30
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../552.rs" 19 8 19 12
  
  use C552_Machine_Type as Machine'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Machine'0.t_machine)) =
    [%#span1] true
  
  predicate inv'0 (_x : borrowed (Machine'0.t_machine))
  
  axiom inv'0 : forall x : borrowed (Machine'0.t_machine) . inv'0 x = true
  
  predicate invariants'0 [#"../552.rs" 18 4 18 31] (self : Machine'0.t_machine) =
    [%#span2] true
  
  goal step_refn : [%#s5520] forall self : borrowed (Machine'0.t_machine) . inv'0 self /\ invariants'0 self.current
   -> invariants'0 self.current /\ (forall result : bool . invariants'0 self.final  -> invariants'0 self.final)
end
