module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module C235_Main_Interface
  val main () : ()
end
module C235_Main
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = ()
  let rec cfg main () : () = 
  var _0 : ();
  var _1 : ();
  var _2 : bool;
  var _3 : ();
  var _4 : ();
  var _5 : ();
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    invariant end' { 0 <= 1 };
    goto BB2
  }
  BB2 {
    _2 <- true;
    switch (_2)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    _1 <- ();
    assume { Resolve0.resolve _1 };
    goto BB1
  }
  BB4 {
    _0 <- ();
    return _0
  }
  
end
