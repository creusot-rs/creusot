module M_545__negative_is_negative [#"545.rs" 4 0 4 29]
  let%span s5450 = "545.rs" 5 18 5 32
  let%span sord1 = "../../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord2 = "../../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord3 = "../../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord4 = "../../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord5 = "../../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord6 = "../../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord7 = "../../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord8 = "../../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord9 = "../../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord10 = "../../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord11 = "../../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord12 = "../../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord13 = "../../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span sord14 = "../../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.prelude.Int32
  
  function cmp_log'0 (self : Int32.t) (o : Int32.t) : t_Ordering'0 =
    [%#sord14] if Int32.slt self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : Int32.t) (y : Int32.t) : ()
  
  axiom eq_cmp'0_spec : forall x : Int32.t, y : Int32.t . [%#sord13] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : Int32.t) (y : Int32.t) : ()
  
  axiom antisym2'0_spec : forall x : Int32.t, y : Int32.t . ([%#sord11] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord12] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : Int32.t) (y : Int32.t) : ()
  
  axiom antisym1'0_spec : forall x : Int32.t, y : Int32.t . ([%#sord9] cmp_log'0 x y = C_Less'0)
   -> ([%#sord10] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : Int32.t) (y : Int32.t) (z : Int32.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : Int32.t, y : Int32.t, z : Int32.t, o : t_Ordering'0 . ([%#sord6] cmp_log'0 x y = o)
   -> ([%#sord7] cmp_log'0 y z = o)  -> ([%#sord8] cmp_log'0 x z = o)
  
  function refl'0 (x : Int32.t) : ()
  
  axiom refl'0_spec : forall x : Int32.t . [%#sord5] cmp_log'0 x x = C_Equal'0
  
  use prelude.prelude.Int32
  
  function cmp_gt_log'0 (x : Int32.t) (y : Int32.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : Int32.t, y : Int32.t . [%#sord4] Int32.sgt x y = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.prelude.Int32
  
  function cmp_ge_log'0 (x : Int32.t) (y : Int32.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : Int32.t, y : Int32.t . [%#sord3] Int32.sge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : Int32.t) (y : Int32.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : Int32.t, y : Int32.t . [%#sord2] Int32.slt x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.prelude.Int32
  
  function cmp_le_log'0 (x : Int32.t) (y : Int32.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : Int32.t, y : Int32.t . [%#sord1] Int32.sle x y = (cmp_log'0 x y <> C_Greater'0)
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec negative_is_negative'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = {[@expl:assertion] [%#s5450] Int32.sgt (0 : Int32.t) (-100 : Int32.t)} s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
