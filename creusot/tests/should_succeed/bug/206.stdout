module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type creusotcontracts_std1_vec_vec 't  
  type c206_a  = 
    | C206_A (creusotcontracts_std1_vec_vec usize)
    
  function c206_a_A_0 (self : c206_a) : creusotcontracts_std1_vec_vec usize
  val c206_a_A_0 (self : c206_a) : creusotcontracts_std1_vec_vec usize
    ensures { result = c206_a_A_0 self }
    
  axiom c206_a_A_0_acc : forall a : creusotcontracts_std1_vec_vec usize . c206_a_A_0 (C206_A a : c206_a) = a
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module C206_U2_Interface
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize
  function u2 (a : Type.c206_a) : ()
end
module C206_U2
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize
  function u2 (a : Type.c206_a) : () = 
    ()
  axiom u2_spec : forall a : Type.c206_a . Model0.model (Type.c206_a_A_0 a) = Model0.model (Type.c206_a_A_0 a)
end
module C206_U2_Impl
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize
  let rec ghost function u2 (a : Type.c206_a) : ()
    ensures { Model0.model (Type.c206_a_A_0 a) = Model0.model (Type.c206_a_A_0 a) }
    
   = 
    ()
end
module C206_U_Interface
  use Type
  function u (a : Type.c206_a) : ()
end
module C206_U
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize
  clone C206_U2_Interface as U20 with function Model0.model = Model0.model, axiom .
  function u (a : Type.c206_a) : () = 
    U20.u2 a
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module C206_Ex_Interface
  use prelude.Prelude
  use Type
  clone C206_U_Interface as U0
  val ex (a : Type.c206_a) : ()
    ensures { U0.u a = U0.u a }
    
end
module C206_Ex
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize
  clone C206_U2 as U20 with function Model0.model = Model0.model, axiom .
  clone C206_U as U0 with function U20.u2 = U20.u2, function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.c206_a
  let rec cfg ex (a : Type.c206_a) : ()
    ensures { U0.u a = U0.u a }
    
   = 
  var _0 : ();
  var a_1 : Type.c206_a;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve a_1 };
    _0 <- ();
    return _0
  }
  
end
