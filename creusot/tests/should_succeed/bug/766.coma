
module CreusotContracts_Logic_Fmap_FMap_Type
  type t_fmap 'k 'v
end
module C766_Trait_Goo
  type self
  
  type t
  
  type u
  
  let%span s7660 = "../766.rs" 10 16 10 20
  
  let%span span1 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span2 = "../../../../../creusot-contracts/src/model.rs" 99 8 99 28
  
  let%span span3 = "../766.rs" 8 14 8 18
  
  let%span span4 = "../766.rs" 7 14 7 52
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed self)
  
  predicate inv'1 (_x : borrowed self)
  
  axiom inv'1 : forall x : borrowed self . inv'1 x = true
  
  predicate invariant'0 (self : self)
  
  predicate inv'0 (_x : self)
  
  axiom inv'0 : forall x : self . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed self) =
    [%#span1]  ^ self =  * self
  
  type deep_model_ty'1
  
  type deep_model_ty'0
  
  use CreusotContracts_Logic_Fmap_FMap_Type as FMap'0
  
  function deep_model'1 (self : self) : FMap'0.t_fmap deep_model_ty'0 deep_model_ty'1
  
  function deep_model'0 (self : borrowed self) : FMap'0.t_fmap deep_model_ty'0 deep_model_ty'1 =
    [%#span2] deep_model'1 ( * self)
  
  let rec f'0 (self:borrowed self) (return'  (ret:()))= {[@expl:precondition] [%#span3] inv'1 self}
    any [ return' (result:())-> {[%#span4] deep_model'0 self = deep_model'0 self} (! return' {result}) ] 
  
  let rec goo (self:borrowed self) (return'  (ret:()))= {[%#s7660] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <self> { * self} {Borrow.get_id self}
          (fun (_ret':borrowed self) ->  [ &_2 <- _ret' ]  [ &self <- { self with current = ( ^ _2) ; } ] s1)
      | s1 = -{inv'0 ( ^ _2)}- s2
      | s2 = f'0 {_2} (fun (_ret':()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () | & self : borrowed self = self | & _2 : borrowed self = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
