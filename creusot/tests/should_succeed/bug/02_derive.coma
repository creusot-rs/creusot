module M_02_derive__qyi1286730707956131195__clone [#"02_derive.rs" 3 9 3 14] (* <Lit as creusot_contracts::Clone> *)
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  meta "compute_max_steps" 1000000
  
  let rec clone'0 (self:()) (return'  (ret:()))= (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- () ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_02_derive__qyi1286730707956131195__clone__refines [#"02_derive.rs" 3 9 3 14] (* <Lit as creusot_contracts::Clone> *)
  let%span s02_derive0 = "02_derive.rs" 3 9 3 14
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  goal refines : [%#s02_derive0] forall self : () . inv'0 self  -> (forall result : () . result = self /\ inv'1 result)
end
