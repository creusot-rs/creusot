module T_02_derive__Lit [#"02_derive.rs" 4 0 4 14]
  type t_Lit  =
    | C_Lit
  
  let rec t_Lit (input:t_Lit) (ret  )= any [ good -> {C_Lit  = input} (! ret) ] 
end
module M_02_derive__qyi1286730707956131195__clone [#"02_derive.rs" 3 9 3 14] (* <Lit as creusot_contracts::Clone> *)
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use T_02_derive__Lit as Lit'0
  
  meta "compute_max_steps" 1000000
  
  let rec clone' (self:Lit'0.t_Lit) (return'  (ret:Lit'0.t_Lit))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- Lit'0.C_Lit ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : Lit'0.t_Lit = any_l () ]  [ return' (result:Lit'0.t_Lit)-> (! return' {result}) ] 
end
module M_02_derive__qyi1286730707956131195 [#"02_derive.rs" 3 9 3 14] (* <Lit as creusot_contracts::Clone> *)
  let%span s02_derive0 = "02_derive.rs" 3 9 3 14
  
  use T_02_derive__Lit as Lit'0
  
  predicate inv'1 (_1 : Lit'0.t_Lit)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Lit'0.t_Lit [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : Lit'0.t_Lit)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Lit'0.t_Lit [inv'0 x] . inv'0 x = true
  
  goal clone'_refn : [%#s02_derive0] forall self : Lit'0.t_Lit . inv'0 self
   -> (forall result : Lit'0.t_Lit . inv'1 result /\ result = self)
end
