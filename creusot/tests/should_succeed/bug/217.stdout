module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Logic_Seq_Impl1_Tail_Interface
  type t   
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl1_Tail
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq_ext.SeqExt
  function tail (self : Seq.seq t) : Seq.seq t = 
    SeqExt.subsequence self 1 (Seq.length self)
end
module C217_Ex_Interface
  use seq.Seq
  use mach.int.Int
  function ex (c : Seq.seq int) (a : int) : int
end
module C217_Ex
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Seq_Impl1_Tail_Interface as Tail0 with type t = int
  function ex (c : Seq.seq int) (a : int) : int
  axiom def : forall c : Seq.seq int, a : int . ex c a = (if Seq.length c = 0 then 0 else ex (Tail0.tail c) a)
  axiom ex_spec : forall c : Seq.seq int, a : int . true
end
module C217_Ex_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Seq_Impl1_Tail as Tail0 with type t = int
  let rec ghost function ex (c : Seq.seq int) (a : int) : int
    variant {Seq.length c}
    
   = 
    if Seq.length c = 0 then 0 else let a' = Tail0.tail c in ex a' a
end
