module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_pure_neq__f [#"pure_neq.rs" 7 0 7 48]
  let%span spure_neq0 = "pure_neq.rs" 6 10 6 29
  
  use prelude.prelude.Int
  
  use T_core__option__Option as Option'0
  
  constant x  : Option'0.t_Option int
  
  constant y  : Option'0.t_Option int
  
  function f [#"pure_neq.rs" 7 0 7 48] (x : Option'0.t_Option int) (y : Option'0.t_Option int) : bool
  
  goal vc_f : [%#spure_neq0] (x <> y) = (not x = y)
end
