
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module PureNeq_F_Impl
  use prelude.Int
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  constant x  : Core_Option_Option_Type.t_option int
  constant y  : Core_Option_Option_Type.t_option int
  function f [#"../pure_neq.rs" 7 0 7 48] (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : bool
    
  goal vc_f : [#"../pure_neq.rs" 6 10 6 29] (x <> y) = (not x = y)
end
