
module C256_U8Safe
  let%span s2560 = "../256.rs" 4 16 4 17
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt8
  
  let rec u8_safe (u:uint8) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UInt8.add {u} {[%#s2560] (0 : uint8)} (fun (_ret':uint8) ->  [ &_2 <- _ret' ] s1) | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & u : uint8 = u | & _2 : uint8 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module Alloc_String_String_Type
  use prelude.prelude.Opaque
  
  type t_string  =
    | C_String hidden_field
  
  function any_l (_ : 'b) : 'a
  
  let rec t_string (input:t_string) (ret  (vec:hidden_field))= any
    [ good (vec:hidden_field)-> {C_String vec = input} (! ret {vec})
    | bad (vec:hidden_field)-> {C_String vec <> input} {false} any ]
    
end
module C256_Bug256
  use Alloc_String_String_Type as String'0
  
  use prelude.prelude.Intrinsic
  
  let rec bug_256 (_x:String'0.t_string) (return'  (ret:()))= (! bb0 [ bb0 = bb1 | bb1 = return' {_0} ] )
    [ & _0 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
