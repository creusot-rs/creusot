module M_256__u8_safe [#"256.rs" 3 0 3 21]
  let%span s2560 = "256.rs" 4 16 4 17
  
  use prelude.prelude.UInt8
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec u8_safe'0 (u:uint8) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UInt8.add {u} {[%#s2560] (0 : uint8)} (fun (_ret':uint8) ->  [ &_2 <- _ret' ] s1) | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & u : uint8 = u | & _2 : uint8 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_256__bug_256 [#"256.rs" 8 0 8 26]
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_String'0  =
    { t_String__vec'0: t_Vec'0 }
  
  meta "compute_max_steps" 1000000
  
  let rec bug_256'0 (_x:t_String'0) (return'  (ret:()))= (! bb0 [ bb0 = bb1 | bb1 = return' {_0} ] )
    [ & _0 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
