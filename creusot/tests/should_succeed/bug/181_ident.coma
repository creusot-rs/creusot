module M_181_ident__max_usize [#"181_ident.rs" 17 0 17 45]
  let%span s181_ident0 = "181_ident.rs" 16 10 16 36
  let%span s181_ident1 = "181_ident.rs" 6 0 6 8
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt64
  
  function max_int'0 [#"181_ident.rs" 8 0 8 37] (a : int) (b : int) : int =
    [%#s181_ident1] if a < b then b else a
  
  meta "compute_max_steps" 1000000
  
  let rec max_usize'0 (a:UInt64.t) (b:UInt64.t) (return'  (ret:UInt64.t))= (! bb0
    [ bb0 = s0
      [ s0 = UInt64.lt {a} {b} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1)
      | s1 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ]  ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- b ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- a ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : UInt64.t = any_l () | & a : UInt64.t = a | & b : UInt64.t = b | & _4 : bool = any_l () ] 
    [ return' (result:UInt64.t)-> {[@expl:max_usize ensures] [%#s181_ident0] UInt64.to_uint result
      = max_int'0 (UInt64.to_uint a) (UInt64.to_uint b)}
      (! return' {result}) ]
    
end
