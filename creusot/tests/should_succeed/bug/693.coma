module M_693__f [#"693.rs" 3 0 3 21]
  type ifc
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : ifc)
  
  predicate inv'0 (_1 : ifc)
  
  meta "compute_max_steps" 1000000
  
  let rec f (_1:ifc) (return'  (ret:()))= {inv'0 _1}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 _1} s1 | s1 = -{resolve'0 _1}- s2 | s2 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : ifc = _1 ]  [ return' (result:())-> (! return' {result}) ] 
end
module M_693__g [#"693.rs" 5 0 5 10]
  let%span s6930 = "693.rs" 6 6 6 7
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  predicate inv'0 (_1 : int32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : int32 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  let rec f'0 (_1:int32) (return'  (ret:()))= {[@expl:precondition] inv'0 _1}
    any [ return' (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec g (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = f'0 {[%#s6930] (0 : int32)} (fun (_ret':()) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
