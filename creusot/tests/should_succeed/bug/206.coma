module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module T_206__A [#"206.rs" 5 0 5 12]
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__vec__Vec as Vec'0
  
  type t_A  =
    | C_A (Vec'0.t_Vec usize (Global'0.t_Global))
  
  let rec t_A (input:t_A) (ret  (field_0:Vec'0.t_Vec usize (Global'0.t_Global)))= any
    [ good (field_0:Vec'0.t_Vec usize (Global'0.t_Global))-> {C_A field_0 = input} (! ret {field_0}) ]
    
  
  function t_A__0 (self : t_A) : Vec'0.t_Vec usize (Global'0.t_Global) =
    match self with
      | C_A a -> a
      end
end
module M_206__u2 [#"206.rs" 9 0 9 11]
  let%span s2060 = "206.rs" 8 10 8 22
  let%span svec1 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  
  use T_206__A as A'0
  
  use seq.Seq
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'0 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom view'0_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#svec1] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  use T_206__A as T_206__A
  
  constant a  : A'0.t_A
  
  function u2 [#"206.rs" 9 0 9 11] (a : A'0.t_A) : ()
  
  goal vc_u2 : [%#s2060] view'0 (T_206__A.t_A__0 a) = view'0 (T_206__A.t_A__0 a)
end
module M_206__ex [#"206.rs" 20 0 20 16]
  let%span s2060 = "206.rs" 19 10 19 26
  let%span s2061 = "206.rs" 15 8 15 13
  let%span s2062 = "206.rs" 8 10 8 22
  let%span s2063 = "206.rs" 7 0 7 8
  let%span svec4 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  
  use T_206__A as A'0
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'0 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom view'0_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#svec4] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  use T_206__A as T_206__A
  
  function u2'0 [#"206.rs" 9 0 9 11] (a : A'0.t_A) : () =
    [%#s2063] ()
  
  axiom u2'0_spec : forall a : A'0.t_A . [%#s2062] view'0 (T_206__A.t_A__0 a) = view'0 (T_206__A.t_A__0 a)
  
  function u'0 [#"206.rs" 13 0 13 14] (a : A'0.t_A) : () =
    [%#s2061] u2'0 a
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec ex (a:A'0.t_A) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:postcondition] [%#s2060] u'0 a = u'0 a} (! return' {result}) ]
    
end
