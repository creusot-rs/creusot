module M_206__u2 [#"206.rs" 9 0 9 11]
  let%span s2060 = "206.rs" 8 10 8 22
  let%span s2061 = "206.rs" 7 0 7 8
  let%span svec2 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_A'0  =
    { t_A__0'0: t_Vec'0 }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq usize
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec2] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  constant a  : t_A'0
  
  function u2'0 [#"206.rs" 9 0 9 11] (a : t_A'0) : ()
  
  goal vc_u2'0 : [%#s2060] view'0 a.t_A__0'0 = view'0 a.t_A__0'0
end
module M_206__ex [#"206.rs" 20 0 20 16]
  let%span s2060 = "206.rs" 19 10 19 26
  let%span s2061 = "206.rs" 15 8 15 13
  let%span s2062 = "206.rs" 8 10 8 22
  let%span s2063 = "206.rs" 7 0 7 8
  let%span svec4 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_A'0  =
    { t_A__0'0: t_Vec'0 }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq usize
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec4] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  function u2'0 [#"206.rs" 9 0 9 11] (a : t_A'0) : () =
    [%#s2063] ()
  
  axiom u2'0_spec : forall a : t_A'0 . [%#s2062] view'0 a.t_A__0'0 = view'0 a.t_A__0'0
  
  function u'0 [#"206.rs" 13 0 13 14] (a : t_A'0) : () =
    [%#s2061] u2'0 a
  
  use prelude.prelude.Borrow
  
  meta "compute_max_steps" 1000000
  
  let rec ex'0 (a:t_A'0) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:ex ensures] [%#s2060] u'0 a = u'0 a} (! return' {result}) ]
    
end
