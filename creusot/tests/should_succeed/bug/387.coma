module M_387__use_tree [#"387.rs" 15 0 15 25]
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  type t_Node'0  =
    { t_Node__left'0: t_Tree'0; t_Node__val'0: uint32; t_Node__right'0: t_Tree'0 }
  with t_Option'0  =
    | C_None'0
    | C_Some'0 (t_Node'0)
  with t_Tree'0  =
    { t_Tree__0'0: t_Option'0 }
  
  meta "compute_max_steps" 1000000
  
  let rec use_tree'0 (_1:t_Tree'0) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_387__qyi16446429885017832241__height [#"387.rs" 18 4 18 31] (* Tree *)
  let%span s3870 = "387.rs" 21 69 21 70
  let%span s3871 = "387.rs" 20 26 20 27
  let%span scmp2 = "../../../../creusot-contracts/src/std/cmp.rs" 75 26 75 66
  let%span scmp3 = "../../../../creusot-contracts/src/std/cmp.rs" 76 26 76 63
  let%span scmp4 = "../../../../creusot-contracts/src/std/cmp.rs" 7 0 130 1
  let%span snum5 = "../../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.UInt32
  
  type t_Tree'0  =
    { t_Tree__0'0: t_Option'0 }
  with t_Node'0  =
    { t_Node__left'0: t_Tree'0; t_Node__val'0: uint32; t_Node__right'0: t_Tree'0 }
  with t_Option'0  =
    | C_None'0
    | C_Some'0 (t_Node'0)
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_Node'0))= any
    [ good (field_0:t_Node'0)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_Node'0 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.UInt64
  
  predicate inv'0 (_1 : uint64)
  
  axiom inv_axiom'0 [@rewrite] : forall x : uint64 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt64
  
  function deep_model'0 (self : uint64) : int =
    [%#snum5] UInt64.to_int self
  
  let rec max'0 (self:uint64) (other:uint64) (return'  (ret:uint64))= {[@expl:max 'self' type invariant] inv'0 self}
    {[@expl:max 'other' type invariant] inv'0 other}
    any
    [ return' (result:uint64)-> {inv'0 result}
      {[%#scmp2] deep_model'0 result >= deep_model'0 self}
      {[%#scmp3] deep_model'0 result >= deep_model'0 other}
      {[%#scmp4] result = self \/ result = other}
      {[%#scmp4] deep_model'0 self <= deep_model'0 other  -> result = other}
      {[%#scmp4] deep_model'0 other < deep_model'0 self  -> result = self}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  meta "compute_max_steps" 1000000
  
  let rec height'0 (self:t_Tree'0) (return'  (ret:uint64))= (! bb0
    [ bb0 = any
      [ br0 -> {self.t_Tree__0'0 = C_None'0 } (! bb2) | br1 (x0:t_Node'0)-> {self.t_Tree__0'0 = C_Some'0 x0} (! bb3) ]
      
    | bb3 = s0
      [ s0 = v_Some'0 {self.t_Tree__0'0} (fun (r0'0:t_Node'0) ->  [ &n <- r0'0 ] s1)
      | s1 = height'0 {n.t_Node__left'0} (fun (_ret':uint64) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = s0 [ s0 = height'0 {n.t_Node__right'0} (fun (_ret':uint64) ->  [ &_7 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = max'0 {_5} {_7} (fun (_ret':uint64) ->  [ &_4 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = UInt64.add {_4} {[%#s3870] (1 : uint64)} (fun (_ret':uint64) ->  [ &_0 <- _ret' ] s1) | s1 = bb8 ]
      
    | bb2 = bb4
    | bb4 = s0 [ s0 =  [ &_0 <- [%#s3871] (0 : uint64) ] s1 | s1 = bb8 ] 
    | bb8 = return' {_0} ]
    )
    [ & _0 : uint64 = any_l ()
    | & self : t_Tree'0 = self
    | & n : t_Node'0 = any_l ()
    | & _4 : uint64 = any_l ()
    | & _5 : uint64 = any_l ()
    | & _7 : uint64 = any_l () ]
     [ return' (result:uint64)-> (! return' {result}) ] 
end
