module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type c02derive_lit  = 
    | C02Derive_Lit
    
end
module Core_Clone_Clone_Clone_Interface
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self   
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self   
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module C02Derive_Impl0_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.c02derive_lit) : Type.c02derive_lit
end
module C02Derive_Impl0_Clone
  use prelude.Prelude
  use Type
  let rec cfg clone' [@cfg:stackify] (self : Type.c02derive_lit) : Type.c02derive_lit = 
  var _0 : Type.c02derive_lit;
  var self_1 : Type.c02derive_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { (fun x -> true) self_1 };
    _0 <- Type.C02Derive_Lit;
    return _0
  }
  
end
module C02Derive_Impl0
  use Type
  clone C02Derive_Impl0_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.c02derive_lit, val clone' = Clone0.clone'
end
