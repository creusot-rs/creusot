module M_922__g [#"922.rs" 5 0 5 57]
  let%span s9220 = "922.rs" 4 0 4 27
  let%span sresolve1 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sresolve2 = "../../../../creusot-contracts/src/resolve.rs" 27 8 27 44
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'5 (_1 : int32) =
    true
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve1] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  predicate resolve'6 (self : (int32, borrowed int32)) =
    [%#sresolve2] resolve'5 (let (a, _) = self in a) /\ resolve'0 (let (_, a) = self in a)
  
  predicate resolve'4 (_1 : (int32, borrowed int32)) =
    resolve'6 _1
  
  predicate resolve'3 (self : ((int32, borrowed int32), int32)) =
    [%#sresolve2] resolve'4 (let (a, _) = self in a) /\ resolve'5 (let (_, a) = self in a)
  
  predicate resolve'1 (_1 : ((int32, borrowed int32), int32)) =
    resolve'3 _1
  
  meta "compute_max_steps" 1000000
  
  let rec g (x:((int32, borrowed int32), int32)) (return'  (ret:borrowed int32))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final
          <int32>
          {(let (_, r'0) = let (r'1, _) = x in r'1 in r'0).current}
          {Borrow.get_id (let (_, r'0) = let (r'1, _) = x in r'1 in r'0)}
          (fun (_ret':borrowed int32) ->
             [ &_4 <- _ret' ] 
            
            [ &x <- let (_, r'5) = x in ((let (r'2, _) = let (r'1, _) = x in r'1 in (r'2, { (let (_, r'0) = let (r'1, _) = x in r'1 in r'0) with current = _ret'.final ; })), r'5) ]
            
            s1)
      | s1 = Borrow.borrow_final <int32> {_4.current} {Borrow.get_id _4}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_4 <- { _4 with current = _ret'.final ; } ] s2)
      | s2 = Borrow.borrow_final <int32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final ; } ] s3)
      | s3 = -{resolve'0 _4}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 x}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed int32 = any_l ()
    | & x : ((int32, borrowed int32), int32) = x
    | & _2 : borrowed int32 = any_l ()
    | & _4 : borrowed int32 = any_l () ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [%#s9220] result
      = (let (_, a) = let (a, _) = x in a in a)}
      (! return' {result}) ]
    
end
module M_922__f1 [#"922.rs" 12 0 12 59]
  let%span s9220 = "922.rs" 9 10 9 28
  let%span s9221 = "922.rs" 10 10 10 28
  let%span s9222 = "922.rs" 11 10 11 28
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'3 (self : borrowed (int32, borrowed int32)) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (int32, borrowed int32)) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  meta "compute_max_steps" 1000000
  
  let rec f1 (b:borrowed (int32, borrowed int32)) (return'  (ret:borrowed int32))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <int32> {(let (_, r'0) = b.current in r'0).current}
          (fun (_ret':borrowed int32) ->
             [ &_6 <- _ret' ] 
            
            [ &b <- { b with current = (let (r'1, _) = b.current in (r'1, { (let (_, r'0) = b.current in r'0) with current = _ret'.final ; })) ; } ]
            
            s1)
      | s1 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final ; } ] s2)
      | s2 = Borrow.borrow_final <int32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final ; } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 b}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed int32 = any_l ()
    | & b : borrowed (int32, borrowed int32) = b
    | & _2 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l () ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [%#s9222] (let (_, a) = b.current in a).final
      = (let (_, a) = b.final in a).final}
      {[@expl:postcondition] [%#s9221] result.final = (let (_, a) = b.final in a).current}
      {[@expl:postcondition] [%#s9220] result.current = (let (_, a) = b.current in a).current}
      (! return' {result}) ]
    
end
module M_922__f2 [#"922.rs" 19 0 19 60]
  let%span s9220 = "922.rs" 16 10 16 29
  let%span s9221 = "922.rs" 17 10 17 29
  let%span s9222 = "922.rs" 18 10 18 30
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'3 (self : borrowed (int32, borrowed int32)) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (int32, borrowed int32)) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  meta "compute_max_steps" 1000000
  
  let rec f2 (x0:borrowed (int32, borrowed int32)) (return'  (ret:borrowed int32))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <int32> {(let (_, r'0) = x0.current in r'0).current}
          (fun (_ret':borrowed int32) ->
             [ &_6 <- _ret' ] 
            
            [ &x0 <- { x0 with current = (let (r'1, _) = x0.current in (r'1, { (let (_, r'0) = x0.current in r'0) with current = _ret'.final ; })) ; } ]
            
            s1)
      | s1 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final ; } ] s2)
      | s2 = Borrow.borrow_final <int32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final ; } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 x0}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed int32 = any_l ()
    | & x0 : borrowed (int32, borrowed int32) = x0
    | & _2 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l () ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [%#s9222] (let (_, a) = x0.current in a).final
      = (let (_, a) = x0.final in a).final}
      {[@expl:postcondition] [%#s9221] result.final = (let (_, a) = x0.final in a).current}
      {[@expl:postcondition] [%#s9220] result.current = (let (_, a) = x0.current in a).current}
      (! return' {result}) ]
    
end
module M_922__f3 [#"922.rs" 26 0 26 60]
  let%span s9220 = "922.rs" 23 10 23 29
  let%span s9221 = "922.rs" 24 10 24 29
  let%span s9222 = "922.rs" 25 10 25 30
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'3 (self : borrowed (int32, borrowed int32)) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (int32, borrowed int32)) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  meta "compute_max_steps" 1000000
  
  let rec f3 (x1:borrowed (int32, borrowed int32)) (return'  (ret:borrowed int32))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <int32> {(let (_, r'0) = x1.current in r'0).current}
          (fun (_ret':borrowed int32) ->
             [ &_6 <- _ret' ] 
            
            [ &x1 <- { x1 with current = (let (r'1, _) = x1.current in (r'1, { (let (_, r'0) = x1.current in r'0) with current = _ret'.final ; })) ; } ]
            
            s1)
      | s1 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final ; } ] s2)
      | s2 = Borrow.borrow_final <int32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final ; } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 x1}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed int32 = any_l ()
    | & x1 : borrowed (int32, borrowed int32) = x1
    | & _2 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l () ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [%#s9222] (let (_, a) = x1.current in a).final
      = (let (_, a) = x1.final in a).final}
      {[@expl:postcondition] [%#s9221] result.final = (let (_, a) = x1.final in a).current}
      {[@expl:postcondition] [%#s9220] result.current = (let (_, a) = x1.current in a).current}
      (! return' {result}) ]
    
end
module M_922__f4 [#"922.rs" 33 0 33 60]
  let%span s9220 = "922.rs" 30 10 30 29
  let%span s9221 = "922.rs" 31 10 31 29
  let%span s9222 = "922.rs" 32 10 32 30
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'3 (self : borrowed (int32, borrowed int32)) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (int32, borrowed int32)) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  meta "compute_max_steps" 1000000
  
  let rec f4 (x2:borrowed (int32, borrowed int32)) (return'  (ret:borrowed int32))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <int32> {(let (_, r'0) = x2.current in r'0).current}
          (fun (_ret':borrowed int32) ->
             [ &_6 <- _ret' ] 
            
            [ &x2 <- { x2 with current = (let (r'1, _) = x2.current in (r'1, { (let (_, r'0) = x2.current in r'0) with current = _ret'.final ; })) ; } ]
            
            s1)
      | s1 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final ; } ] s2)
      | s2 = Borrow.borrow_final <int32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final ; } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 x2}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed int32 = any_l ()
    | & x2 : borrowed (int32, borrowed int32) = x2
    | & _2 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l () ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [%#s9222] (let (_, a) = x2.current in a).final
      = (let (_, a) = x2.final in a).final}
      {[@expl:postcondition] [%#s9221] result.final = (let (_, a) = x2.final in a).current}
      {[@expl:postcondition] [%#s9220] result.current = (let (_, a) = x2.current in a).current}
      (! return' {result}) ]
    
end
