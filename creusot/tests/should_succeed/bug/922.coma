
module C922_G
  let%span s9220 = "../922.rs" 4 0 4 27
  
  let%span span1 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span2 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  predicate resolve'3 (self : int32) =
    [%#span1] true
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span2] self.final = self.current
  
  predicate resolve'2 (self : (int32, borrowed int32)) =
    [%#span3] resolve'3 (let (a, _) = self in a) /\ resolve'0 (let (_, a) = self in a)
  
  predicate resolve'1 (self : ((int32, borrowed int32), int32)) =
    [%#span3] resolve'2 (let (a, _) = self in a) /\ resolve'3 (let (_, a) = self in a)
  
  use prelude.prelude.Int
  
  let rec g (x:((int32, borrowed int32), int32)) (return'  (ret:borrowed int32))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final
          <int32>
          {(let (_, r'3) = let (r'2, _) = x in r'2 in r'3).current}
          {Borrow.get_id (let (_, r'1) = let (r'0, _) = x in r'0 in r'1)}
          (fun (_ret':borrowed int32) ->
             [ &_4 <- _ret' ] 
            
            [ &x <- let (_, l'2) = x in ((let (l'4, _) = let (l'0, _) = x in l'0 in (l'4, { (let (_, l'3) = let (l'0, _) = x in l'0 in l'3) with current = _4.final ; })), l'2) ]
            
            s1)
      | s1 = Borrow.borrow_final <int32> {_4.current} {Borrow.get_id _4}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_4 <- { _4 with current = _2.final ; } ] s2)
      | s2 = Borrow.borrow_final <int32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _0.final ; } ] s3)
      | s3 = -{resolve'0 _4}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 x}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed int32 = any_l ()
    | & x : ((int32, borrowed int32), int32) = x
    | & _2 : borrowed int32 = any_l ()
    | & _4 : borrowed int32 = any_l () ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [%#s9220] result
      = (let (_, a) = let (a, _) = x in a in a)}
      (! return' {result}) ]
    
end
module C922_F1
  let%span s9220 = "../922.rs" 9 10 9 28
  
  let%span s9221 = "../922.rs" 10 10 10 28
  
  let%span s9222 = "../922.rs" 11 10 11 28
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  predicate resolve'1 (self : borrowed (int32, borrowed int32)) =
    [%#span3] self.final = self.current
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span3] self.final = self.current
  
  use prelude.prelude.Int
  
  let rec f1 (b:borrowed (int32, borrowed int32)) (return'  (ret:borrowed int32))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <int32> {(let (_, r'0) = b.current in r'0).current}
          (fun (_ret':borrowed int32) ->
             [ &_6 <- _ret' ] 
            
            [ &b <- { b with current = (let (l'1, _) = b.current in (l'1, { (let (_, l'0) = b.current in l'0) with current = _6.final ; })) ; } ]
            
            s1)
      | s1 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_6 <- { _6 with current = _2.final ; } ] s2)
      | s2 = Borrow.borrow_final <int32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _0.final ; } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 b}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed int32 = any_l ()
    | & b : borrowed (int32, borrowed int32) = b
    | & _2 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l () ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [%#s9222] (let (_, a) = b.current in a).final
      = (let (_, a) = b.final in a).final}
      {[@expl:postcondition] [%#s9221] result.final = (let (_, a) = b.final in a).current}
      {[@expl:postcondition] [%#s9220] result.current = (let (_, a) = b.current in a).current}
      (! return' {result}) ]
    
end
module C922_F2
  let%span s9220 = "../922.rs" 16 10 16 29
  
  let%span s9221 = "../922.rs" 17 10 17 29
  
  let%span s9222 = "../922.rs" 18 10 18 30
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  predicate resolve'1 (self : borrowed (int32, borrowed int32)) =
    [%#span3] self.final = self.current
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span3] self.final = self.current
  
  use prelude.prelude.Int
  
  let rec f2 (x0:borrowed (int32, borrowed int32)) (return'  (ret:borrowed int32))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <int32> {(let (_, r'0) = x0.current in r'0).current}
          (fun (_ret':borrowed int32) ->
             [ &_6 <- _ret' ] 
            
            [ &x0 <- { x0 with current = (let (l'1, _) = x0.current in (l'1, { (let (_, l'0) = x0.current in l'0) with current = _6.final ; })) ; } ]
            
            s1)
      | s1 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_6 <- { _6 with current = _2.final ; } ] s2)
      | s2 = Borrow.borrow_final <int32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _0.final ; } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 x0}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed int32 = any_l ()
    | & x0 : borrowed (int32, borrowed int32) = x0
    | & _2 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l () ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [%#s9222] (let (_, a) = x0.current in a).final
      = (let (_, a) = x0.final in a).final}
      {[@expl:postcondition] [%#s9221] result.final = (let (_, a) = x0.final in a).current}
      {[@expl:postcondition] [%#s9220] result.current = (let (_, a) = x0.current in a).current}
      (! return' {result}) ]
    
end
module C922_F3
  let%span s9220 = "../922.rs" 23 10 23 29
  
  let%span s9221 = "../922.rs" 24 10 24 29
  
  let%span s9222 = "../922.rs" 25 10 25 30
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  predicate resolve'1 (self : borrowed (int32, borrowed int32)) =
    [%#span3] self.final = self.current
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span3] self.final = self.current
  
  use prelude.prelude.Int
  
  let rec f3 (x1:borrowed (int32, borrowed int32)) (return'  (ret:borrowed int32))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <int32> {(let (_, r'0) = x1.current in r'0).current}
          (fun (_ret':borrowed int32) ->
             [ &_6 <- _ret' ] 
            
            [ &x1 <- { x1 with current = (let (l'1, _) = x1.current in (l'1, { (let (_, l'0) = x1.current in l'0) with current = _6.final ; })) ; } ]
            
            s1)
      | s1 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_6 <- { _6 with current = _2.final ; } ] s2)
      | s2 = Borrow.borrow_final <int32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _0.final ; } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 x1}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed int32 = any_l ()
    | & x1 : borrowed (int32, borrowed int32) = x1
    | & _2 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l () ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [%#s9222] (let (_, a) = x1.current in a).final
      = (let (_, a) = x1.final in a).final}
      {[@expl:postcondition] [%#s9221] result.final = (let (_, a) = x1.final in a).current}
      {[@expl:postcondition] [%#s9220] result.current = (let (_, a) = x1.current in a).current}
      (! return' {result}) ]
    
end
module C922_F4
  let%span s9220 = "../922.rs" 30 10 30 29
  
  let%span s9221 = "../922.rs" 31 10 31 29
  
  let%span s9222 = "../922.rs" 32 10 32 30
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  predicate resolve'1 (self : borrowed (int32, borrowed int32)) =
    [%#span3] self.final = self.current
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span3] self.final = self.current
  
  use prelude.prelude.Int
  
  let rec f4 (x2:borrowed (int32, borrowed int32)) (return'  (ret:borrowed int32))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <int32> {(let (_, r'0) = x2.current in r'0).current}
          (fun (_ret':borrowed int32) ->
             [ &_6 <- _ret' ] 
            
            [ &x2 <- { x2 with current = (let (l'1, _) = x2.current in (l'1, { (let (_, l'0) = x2.current in l'0) with current = _6.final ; })) ; } ]
            
            s1)
      | s1 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_6 <- { _6 with current = _2.final ; } ] s2)
      | s2 = Borrow.borrow_final <int32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _0.final ; } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 x2}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed int32 = any_l ()
    | & x2 : borrowed (int32, borrowed int32) = x2
    | & _2 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l () ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [%#s9222] (let (_, a) = x2.current in a).final
      = (let (_, a) = x2.final in a).final}
      {[@expl:postcondition] [%#s9221] result.final = (let (_, a) = x2.final in a).current}
      {[@expl:postcondition] [%#s9220] result.current = (let (_, a) = x2.current in a).current}
      (! return' {result}) ]
    
end
