
module C564_EmitsPureEq_Impl
  use prelude.Int32
  use prelude.Int
  function invariants0 [#"../564.rs" 23 0 23 23] (_1 : ()) : bool =
    [#"../564.rs" 24 4 24 8] true
  val invariants0 [#"../564.rs" 23 0 23 23] (_1 : ()) : bool
    ensures { result = invariants0 _1 }
    
  let rec ghost function emits_pure_eq [#"../564.rs" 7 0 7 30] (_1 : ()) : bool
    requires {[#"../564.rs" 6 11 6 23] invariants0 ()}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../564.rs" 9 8 9 30] let x0 = pure {(1 : int32) = (1 : int32)} in pure {x0 = true}
end
module C564_EmitsPureImplies_Impl
  use prelude.Int32
  use prelude.Int
  function invariants0 [#"../564.rs" 23 0 23 23] (_1 : ()) : bool =
    [#"../564.rs" 24 4 24 8] true
  val invariants0 [#"../564.rs" 23 0 23 23] (_1 : ()) : bool
    ensures { result = invariants0 _1 }
    
  let rec ghost function emits_pure_implies [#"../564.rs" 16 0 16 35] (_1 : ()) : bool
    requires {[#"../564.rs" 15 11 15 23] invariants0 ()}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../564.rs" 17 4 19 5] pure {true}
end
