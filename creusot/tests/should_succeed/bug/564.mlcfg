
module C564_Invariants_Stub
  function invariants [#"../564.rs" 21 0 21 23] (_1' : ()) : bool
end
module C564_Invariants_Interface
  function invariants [#"../564.rs" 21 0 21 23] (_1' : ()) : bool
end
module C564_Invariants
  function invariants [#"../564.rs" 21 0 21 23] (_1' : ()) : bool =
    [#"../564.rs" 22 4 22 8] true
  val invariants [#"../564.rs" 21 0 21 23] (_1' : ()) : bool
    ensures { result = invariants _1' }
    
end
module C564_EmitsPureEq_Stub
  clone C564_Invariants_Stub as Invariants0
  function emits_pure_eq [#"../564.rs" 6 0 6 30] (_1' : ()) : bool
end
module C564_EmitsPureEq_Interface
  clone C564_Invariants_Stub as Invariants0
  function emits_pure_eq [#"../564.rs" 6 0 6 30] (_1' : ()) : bool
  axiom emits_pure_eq_spec : forall _1' : () . ([#"../564.rs" 5 11 5 23] Invariants0.invariants ()) -> true
end
module C564_EmitsPureEq
  clone C564_Invariants_Stub as Invariants0
  use mach.int.Int
  use mach.int.Int32
  function emits_pure_eq [#"../564.rs" 6 0 6 30] (_1' : ()) : bool =
    [#"../564.rs" 8 8 8 30] ((1 : int32) = (1 : int32)) = true
  val emits_pure_eq [#"../564.rs" 6 0 6 30] (_1' : ()) : bool
    requires {[#"../564.rs" 5 11 5 23] Invariants0.invariants ()}
    ensures { result = emits_pure_eq _1' }
    
  axiom emits_pure_eq_spec : forall _1' : () . ([#"../564.rs" 5 11 5 23] Invariants0.invariants ()) -> true
end
module C564_EmitsPureEq_Impl
  use mach.int.Int
  use mach.int.Int32
  clone C564_Invariants as Invariants0
  let rec ghost function emits_pure_eq [#"../564.rs" 6 0 6 30] (_1' : ()) : bool
    requires {[#"../564.rs" 5 11 5 23] Invariants0.invariants ()}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../564.rs" 8 8 8 30] let a = pure {(1 : int32) = (1 : int32)} in pure {a = true}
end
module C564_EmitsPureImplies_Stub
  clone C564_Invariants_Stub as Invariants0
  function emits_pure_implies [#"../564.rs" 14 0 14 35] (_1' : ()) : bool
end
module C564_EmitsPureImplies_Interface
  clone C564_Invariants_Stub as Invariants0
  function emits_pure_implies [#"../564.rs" 14 0 14 35] (_1' : ()) : bool
  axiom emits_pure_implies_spec : forall _1' : () . ([#"../564.rs" 13 11 13 23] Invariants0.invariants ()) -> true
end
module C564_EmitsPureImplies
  clone C564_Invariants_Stub as Invariants0
  use mach.int.Int
  use mach.int.Int32
  function emits_pure_implies [#"../564.rs" 14 0 14 35] (_1' : ()) : bool =
    [#"../564.rs" 15 4 17 5] (1 : int32) = (1 : int32) -> true
  val emits_pure_implies [#"../564.rs" 14 0 14 35] (_1' : ()) : bool
    requires {[#"../564.rs" 13 11 13 23] Invariants0.invariants ()}
    ensures { result = emits_pure_implies _1' }
    
  axiom emits_pure_implies_spec : forall _1' : () . ([#"../564.rs" 13 11 13 23] Invariants0.invariants ()) -> true
end
module C564_EmitsPureImplies_Impl
  use mach.int.Int
  use mach.int.Int32
  clone C564_Invariants as Invariants0
  let rec ghost function emits_pure_implies [#"../564.rs" 14 0 14 35] (_1' : ()) : bool
    requires {[#"../564.rs" 13 11 13 23] Invariants0.invariants ()}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../564.rs" 15 4 17 5] pure {(1 : int32) = (1 : int32) -> true}
end
