
module C641_TestLaw_Stub
  function test_law [#"../641.rs" 6 0 6 17] (_1' : ()) : ()
end
module C641_TestLaw_Interface
  function test_law [#"../641.rs" 6 0 6 17] (_1' : ()) : ()
end
module C641_TestLaw
  function test_law [#"../641.rs" 6 0 6 17] (_1' : ()) : () =
    [#"../641.rs" 5 0 5 6] ()
  val test_law [#"../641.rs" 6 0 6 17] (_1' : ()) : ()
    ensures { result = test_law _1' }
    
end
module C641_Test_Stub
  predicate test [#"../641.rs" 9 0 9 21] (_1' : ())
end
module C641_Test_Interface
  predicate test [#"../641.rs" 9 0 9 21] (_1' : ())
end
module C641_Test
  predicate test [#"../641.rs" 9 0 9 21] (_1' : ()) =
    [#"../641.rs" 10 4 10 8] true
  val test [#"../641.rs" 9 0 9 21] (_1' : ()) : bool
    ensures { result = test _1' }
    
end
module C641_TestMaintains_Interface
  clone C641_Test_Stub as Test0
  val test_maintains [@cfg:stackify] [#"../641.rs" 14 0 14 23] (_1' : ()) : ()
    requires {[#"../641.rs" 13 0 13 20] Test0.test ()}
    ensures { [#"../641.rs" 13 0 13 20] Test0.test () }
    
end
module C641_TestMaintains
  clone C641_Test as Test0
  let rec cfg test_maintains [@cfg:stackify] [#"../641.rs" 14 0 14 23] (_1' : ()) : ()
    requires {[#"../641.rs" 13 0 13 20] Test0.test ()}
    ensures { [#"../641.rs" 13 0 13 20] Test0.test () }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
