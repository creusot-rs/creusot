
module C594_TestLogic_Stub
  use prelude.Int
  use prelude.UInt32
  function test_logic [#"../594.rs" 6 0 6 44] (_1' : (uint32, uint32)) : uint32
end
module C594_TestLogic_Interface
  use prelude.Int
  use prelude.UInt32
  function test_logic [#"../594.rs" 6 0 6 44] (_1' : (uint32, uint32)) : uint32
  val test_logic [#"../594.rs" 6 0 6 44] (_1' : (uint32, uint32)) : uint32
    ensures { result = test_logic _1' }
    
end
module C594_TestLogic
  use prelude.Int
  use prelude.UInt32
  function test_logic [#"../594.rs" 6 0 6 44] (_1' : (uint32, uint32)) : uint32 =
    [#"../594.rs" 7 4 7 5] let (x, _) = _1' in x
  val test_logic [#"../594.rs" 6 0 6 44] (_1' : (uint32, uint32)) : uint32
    ensures { result = test_logic _1' }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module C594_TestProgram_Interface
  use prelude.Int
  use prelude.UInt32
  val test_program [#"../594.rs" 11 0 11 46] (_1' : (uint32, uint32)) : uint32
    ensures { [#"../594.rs" 10 10 10 21] let (x, _) = _1' in result = x }
    
end
module C594_TestProgram
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = uint32,
    type t2 = uint32,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg test_program [#"../594.rs" 11 0 11 46] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : (uint32, uint32)) : uint32
    ensures { [#"../594.rs" 10 10 10 21] let (x, _) = _1' in result = x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : (uint32, uint32);
  var x_2 : uint32;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    x_2 <- (let (a, _) = _1 in a);
    assume { Resolve0.resolve _1 };
    _0 <- x_2;
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module C594_TestClosure_Closure0_Type
  type c594_testclosure_closure0  =
    | C594_TestClosure_Closure0
    
end
module C594_TestClosure_Closure0_Interface
  use export C594_TestClosure_Closure0_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.Int32
  predicate resolve [#"../594.rs" 16 14 16 37] (_1' : c594_testclosure_closure0) =
    [#"../594.rs" 1 0 1 0] true
  predicate unnest [#"../594.rs" 16 14 16 37] (self : c594_testclosure_closure0) (_2' : c594_testclosure_closure0) =
    [#"../594.rs" 1 0 1 0] true
  predicate precondition [#"../594.rs" 16 14 16 37] (self : c594_testclosure_closure0) (args : (int32, (int32, int32)))
   =
    [#"../594.rs" 1 0 1 0] let (_c, _3') = args in true
  predicate postcondition_once [#"../594.rs" 16 14 16 37] (self : c594_testclosure_closure0) (args : (int32, (int32, int32))) (result : int32)
    
   =
    [#"../594.rs" 16 24 16 35] let (_c, _3') = args in let (_a, b) = _3' in result = b
  predicate postcondition_mut [#"../594.rs" 16 14 16 37] (self : borrowed c594_testclosure_closure0) (args : (int32, (int32, int32))) (result : int32)
    
   =
    [#"../594.rs" 1 0 1 0] (let (_c, _3') = args in let (_a, b) = _3' in result = b) /\ unnest ( * self) ( ^ self)
  predicate postcondition [#"../594.rs" 16 14 16 37] (self : c594_testclosure_closure0) (args : (int32, (int32, int32))) (result : int32)
    
   =
    [#"../594.rs" 16 24 16 35] let (_c, _3') = args in let (_a, b) = _3' in result = b
  val c594_TestClosure_Closure0 [#"../594.rs" 16 14 16 37] (_1' : c594_testclosure_closure0) (_c : int32) (_3' : (int32, int32)) : int32
    ensures { [#"../594.rs" 16 24 16 35] let (_a, b) = _3' in result = b }
    
end
module C594_TestClosure_Closure0
  use export C594_TestClosure_Closure0_Type
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = int32
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = int32,
    type t2 = int32,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  predicate resolve [#"../594.rs" 16 14 16 37] (_1' : c594_testclosure_closure0) =
    [#"../594.rs" 1 0 1 0] true
  predicate unnest [#"../594.rs" 16 14 16 37] (self : c594_testclosure_closure0) (_2' : c594_testclosure_closure0) =
    [#"../594.rs" 1 0 1 0] true
  predicate precondition [#"../594.rs" 16 14 16 37] (self : c594_testclosure_closure0) (args : (int32, (int32, int32)))
   =
    [#"../594.rs" 1 0 1 0] let (_c, _3') = args in true
  predicate postcondition_once [#"../594.rs" 16 14 16 37] (self : c594_testclosure_closure0) (args : (int32, (int32, int32))) (result : int32)
    
   =
    [#"../594.rs" 16 24 16 35] let (_c, _3') = args in let (_a, b) = _3' in result = b
  predicate postcondition_mut [#"../594.rs" 16 14 16 37] (self : borrowed c594_testclosure_closure0) (args : (int32, (int32, int32))) (result : int32)
    
   =
    [#"../594.rs" 1 0 1 0] (let (_c, _3') = args in let (_a, b) = _3' in result = b) /\ unnest ( * self) ( ^ self)
  predicate postcondition [#"../594.rs" 16 14 16 37] (self : c594_testclosure_closure0) (args : (int32, (int32, int32))) (result : int32)
    
   =
    [#"../594.rs" 16 24 16 35] let (_c, _3') = args in let (_a, b) = _3' in result = b
  let rec cfg c594_TestClosure_Closure0 [#"../594.rs" 16 14 16 37] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : c594_testclosure_closure0) (_c : int32) (_3' : (int32, int32)) : int32
    ensures { [#"../594.rs" 16 24 16 35] let (_a, b) = _3' in result = b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var _1 : c594_testclosure_closure0;
  var _c_2 : int32;
  var _3 : (int32, int32);
  var _a_4 : int32;
  var b_5 : int32;
  var res_6 : int32;
  {
    _1 <- _1';
    _c_2 <- _c;
    _3 <- _3';
    goto BB0
  }
  BB0 {
    _a_4 <- (let (a, _) = _3 in a);
    b_5 <- (let (_, a) = _3 in a);
    assume { Resolve0.resolve _3 };
    res_6 <- b_5;
    _0 <- res_6;
    return _0
  }
  
end
module C594_TestClosure_Closure1_Type
  type c594_testclosure_closure1  =
    | C594_TestClosure_Closure1
    
end
module C594_TestClosure_Closure1_Interface
  use export C594_TestClosure_Closure1_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.Int32
  predicate resolve [#"../594.rs" 18 14 18 37] (_1' : c594_testclosure_closure1) =
    [#"../594.rs" 1 0 1 0] true
  predicate unnest [#"../594.rs" 18 14 18 37] (self : c594_testclosure_closure1) (_2' : c594_testclosure_closure1) =
    [#"../594.rs" 1 0 1 0] true
  predicate precondition [#"../594.rs" 18 14 18 37] (self : c594_testclosure_closure1) (args : (int32, int32)) =
    [#"../594.rs" 1 0 1 0] let (_2') = args in true
  predicate postcondition_once [#"../594.rs" 18 14 18 37] (self : c594_testclosure_closure1) (args : (int32, int32)) (result : int32)
    
   =
    [#"../594.rs" 18 24 18 35] let (_2') = args in let (_a, b) = _2' in result = b
  predicate postcondition_mut [#"../594.rs" 18 14 18 37] (self : borrowed c594_testclosure_closure1) (args : (int32, int32)) (result : int32)
    
   =
    [#"../594.rs" 1 0 1 0] (let (_2') = args in let (_a, b) = _2' in result = b) /\ unnest ( * self) ( ^ self)
  predicate postcondition [#"../594.rs" 18 14 18 37] (self : c594_testclosure_closure1) (args : (int32, int32)) (result : int32)
    
   =
    [#"../594.rs" 18 24 18 35] let (_2') = args in let (_a, b) = _2' in result = b
  val c594_TestClosure_Closure1 [#"../594.rs" 18 14 18 37] (_1' : c594_testclosure_closure1) (_2' : (int32, int32)) : int32
    ensures { [#"../594.rs" 18 24 18 35] let (_a, b) = _2' in result = b }
    
end
module C594_TestClosure_Closure1
  use export C594_TestClosure_Closure1_Type
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = int32
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = int32,
    type t2 = int32,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  predicate resolve [#"../594.rs" 18 14 18 37] (_1' : c594_testclosure_closure1) =
    [#"../594.rs" 1 0 1 0] true
  predicate unnest [#"../594.rs" 18 14 18 37] (self : c594_testclosure_closure1) (_2' : c594_testclosure_closure1) =
    [#"../594.rs" 1 0 1 0] true
  predicate precondition [#"../594.rs" 18 14 18 37] (self : c594_testclosure_closure1) (args : (int32, int32)) =
    [#"../594.rs" 1 0 1 0] let (_2') = args in true
  predicate postcondition_once [#"../594.rs" 18 14 18 37] (self : c594_testclosure_closure1) (args : (int32, int32)) (result : int32)
    
   =
    [#"../594.rs" 18 24 18 35] let (_2') = args in let (_a, b) = _2' in result = b
  predicate postcondition_mut [#"../594.rs" 18 14 18 37] (self : borrowed c594_testclosure_closure1) (args : (int32, int32)) (result : int32)
    
   =
    [#"../594.rs" 1 0 1 0] (let (_2') = args in let (_a, b) = _2' in result = b) /\ unnest ( * self) ( ^ self)
  predicate postcondition [#"../594.rs" 18 14 18 37] (self : c594_testclosure_closure1) (args : (int32, int32)) (result : int32)
    
   =
    [#"../594.rs" 18 24 18 35] let (_2') = args in let (_a, b) = _2' in result = b
  let rec cfg c594_TestClosure_Closure1 [#"../594.rs" 18 14 18 37] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : c594_testclosure_closure1) (_2' : (int32, int32)) : int32
    ensures { [#"../594.rs" 18 24 18 35] let (_a, b) = _2' in result = b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var _1 : c594_testclosure_closure1;
  var _2 : (int32, int32);
  var _a_3 : int32;
  var b_4 : int32;
  var res_5 : int32;
  {
    _1 <- _1';
    _2 <- _2';
    goto BB0
  }
  BB0 {
    _a_3 <- (let (a, _) = _2 in a);
    b_4 <- (let (_, a) = _2 in a);
    assume { Resolve0.resolve _2 };
    res_5 <- b_4;
    _0 <- res_5;
    return _0
  }
  
end
module C594_TestClosure_Interface
  val test_closure [#"../594.rs" 15 0 15 21] (_1' : ()) : ()
end
module C594_TestClosure
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  clone C594_TestClosure_Closure1_Interface as Closure10
  clone C594_TestClosure_Closure0_Interface as Closure00
  let rec cfg test_closure [#"../594.rs" 15 0 15 21] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var cl1_1 : Closure00.c594_testclosure_closure0;
  var cl2_2 : Closure10.c594_testclosure_closure1;
  var _a_3 : int32;
  var _4 : Closure00.c594_testclosure_closure0;
  var _5 : (int32, (int32, int32));
  var _6 : (int32, int32);
  var _b_7 : int32;
  var _8 : Closure10.c594_testclosure_closure1;
  var _9 : (int32, int32);
  var _10 : (int32, int32);
  {
    goto BB0
  }
  BB0 {
    cl1_1 <- Closure00.C594_TestClosure_Closure0;
    cl2_2 <- Closure10.C594_TestClosure_Closure1;
    _4 <- cl1_1;
    _6 <- ([#"../594.rs" 20 23 20 24] (0 : int32), [#"../594.rs" 20 26 20 27] (3 : int32));
    _5 <- ([#"../594.rs" 20 19 20 20] (4 : int32), _6);
    _a_3 <- ([#"../594.rs" 20 13 20 29] let (a, b) = _5 in Closure00.c594_TestClosure_Closure0 _4 a b);
    goto BB1
  }
  BB1 {
    assume { Closure00.resolve cl1_1 };
    _8 <- cl2_2;
    _10 <- ([#"../594.rs" 21 20 21 21] (0 : int32), [#"../594.rs" 21 23 21 24] (4 : int32));
    _9 <- (_10);
    _b_7 <- ([#"../594.rs" 21 13 21 26] let (a) = _9 in Closure10.c594_TestClosure_Closure1 _8 a);
    goto BB2
  }
  BB2 {
    assume { Closure10.resolve cl2_2 };
    _0 <- ();
    return _0
  }
  
end
module C594_T_Type
  use prelude.Int
  use prelude.UInt32
  type t_t  =
    | C_T uint32
    
end
module C594_Impl0_TestMethod_Interface
  use prelude.Int
  use prelude.UInt32
  use C594_T_Type as C594_T_Type
  val test_method [#"../594.rs" 33 4 33 55] (self : C594_T_Type.t_t) (_2' : (uint32, uint32)) : uint32
    ensures { [#"../594.rs" 32 14 32 25] let (x, _) = _2' in result = x }
    
end
module C594_Impl0_TestMethod
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = uint32,
    type t2 = uint32,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  use C594_T_Type as C594_T_Type
  let rec cfg test_method [#"../594.rs" 33 4 33 55] [@cfg:stackify] [@cfg:subregion_analysis] (self : C594_T_Type.t_t) (_2' : (uint32, uint32)) : uint32
    ensures { [#"../594.rs" 32 14 32 25] let (x, _) = _2' in result = x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self_1 : C594_T_Type.t_t;
  var _2 : (uint32, uint32);
  var x_3 : uint32;
  {
    self_1 <- self;
    _2 <- _2';
    goto BB0
  }
  BB0 {
    x_3 <- (let (a, _) = _2 in a);
    assume { Resolve0.resolve _2 };
    _0 <- x_3;
    return _0
  }
  
end
