
module C594_TestProgram
  use prelude.UInt32
  use prelude.Int
  predicate resolve1 (self : uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve1 (self : uint32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (uint32, uint32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve1 (let (a, _) = self in a) /\ resolve1 (let (_, a) = self in a)
  val resolve0 (self : (uint32, uint32)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg test_program [#"../594.rs" 11 0 11 46] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : (uint32, uint32)) : uint32
    ensures { [#"../594.rs" 10 10 10 21] let (x, _) = _1 in result = x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : (uint32, uint32) = _1;
  var x : uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../594.rs" 11 21 11 22] x <- (let (a, _) = _1 in a);
    assume { resolve0 _1 };
    [#"../594.rs" 12 4 12 5] _0 <- x;
    return _0
  }
  
end
module C594_TestClosure_Closure0_Type
  use prelude.Int32
  use prelude.Int8
  type c594_testclosure_closure0  =
    | C594_TestClosure_Closure0
    
end
module C594_TestClosure_Closure0
  use prelude.Int8
  use prelude.Int32
  use C594_TestClosure_Closure0_Type as C594_TestClosure_Closure0
  use prelude.Borrow
  use prelude.Int
  predicate resolve1 (self : int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve1 (self : int32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (int32, int32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve1 (let (a, _) = self in a) /\ resolve1 (let (_, a) = self in a)
  val resolve0 (self : (int32, int32)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg c594_TestClosure_Closure0 [#"../594.rs" 16 14 16 37] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : C594_TestClosure_Closure0.c594_testclosure_closure0) (_c : int32) (_3 : (int32, int32)) : int32
    ensures { [#"../594.rs" 16 24 16 35] let (_a, b) = _3 in result = b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var _3 : (int32, int32) = _3;
  var _a : int32;
  var b : int32;
  var res : int32;
  {
    goto BB0
  }
  BB0 {
    [#"../594.rs" 17 10 17 12] _a <- (let (a, _) = _3 in a);
    [#"../594.rs" 17 14 17 15] b <- (let (_, a) = _3 in a);
    assume { resolve0 _3 };
    [#"../594.rs" 17 18 17 19] res <- b;
    [#"../594.rs" 16 14 16 37] _0 <- res;
    return _0
  }
  
end
module C594_TestClosure_Closure1_Type
  use prelude.Int32
  use prelude.Int8
  type c594_testclosure_closure1  =
    | C594_TestClosure_Closure1
    
end
module C594_TestClosure_Closure1
  use prelude.Int8
  use prelude.Int32
  use C594_TestClosure_Closure1_Type as C594_TestClosure_Closure1
  use prelude.Borrow
  use prelude.Int
  predicate resolve1 (self : int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve1 (self : int32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (int32, int32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve1 (let (a, _) = self in a) /\ resolve1 (let (_, a) = self in a)
  val resolve0 (self : (int32, int32)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg c594_TestClosure_Closure1 [#"../594.rs" 18 14 18 37] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : C594_TestClosure_Closure1.c594_testclosure_closure1) (_2 : (int32, int32)) : int32
    ensures { [#"../594.rs" 18 24 18 35] let (_a, b) = _2 in result = b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var _2 : (int32, int32) = _2;
  var _a : int32;
  var b : int32;
  var res : int32;
  {
    goto BB0
  }
  BB0 {
    [#"../594.rs" 19 6 19 8] _a <- (let (a, _) = _2 in a);
    [#"../594.rs" 19 10 19 11] b <- (let (_, a) = _2 in a);
    assume { resolve0 _2 };
    [#"../594.rs" 19 14 19 15] res <- b;
    [#"../594.rs" 18 14 18 37] _0 <- res;
    return _0
  }
  
end
module C594_TestClosure
  use prelude.Int32
  use prelude.Int8
  use C594_TestClosure_Closure1_Type as C594_TestClosure_Closure1
  predicate resolve1 [#"../594.rs" 18 14 18 37] (_1 : C594_TestClosure_Closure1.c594_testclosure_closure1) =
    true
  use prelude.Borrow
  use prelude.Int
  predicate resolve3 (self : int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve3 (self : int32) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : (int32, int32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve3 (let (a, _) = self in a) /\ resolve3 (let (_, a) = self in a)
  val resolve2 (self : (int32, int32)) : bool
    ensures { result = resolve2 self }
    
  val closure10 [#"../594.rs" 18 14 18 37] (_1 : C594_TestClosure_Closure1.c594_testclosure_closure1) (_2 : (int32, int32)) : int32
    ensures { [#"../594.rs" 18 24 18 35] let (_a, b) = _2 in result = b }
    
  use C594_TestClosure_Closure0_Type as C594_TestClosure_Closure0
  predicate resolve0 [#"../594.rs" 16 14 16 37] (_1 : C594_TestClosure_Closure0.c594_testclosure_closure0) =
    true
  val closure00 [#"../594.rs" 16 14 16 37] (_1 : C594_TestClosure_Closure0.c594_testclosure_closure0) (_c : int32) (_3 : (int32, int32)) : int32
    ensures { [#"../594.rs" 16 24 16 35] let (_a, b) = _3 in result = b }
    
  let rec cfg test_closure [#"../594.rs" 15 0 15 21] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var cl1 : C594_TestClosure_Closure0.c594_testclosure_closure0;
  var cl2 : C594_TestClosure_Closure1.c594_testclosure_closure1;
  var _a : int32;
  var _5 : (int32, (int32, int32));
  var _6 : (int32, int32);
  var _b : int32;
  var _9 : (int32, int32);
  var _10 : (int32, int32);
  {
    goto BB0
  }
  BB0 {
    [#"../594.rs" 16 14 16 37] cl1 <- C594_TestClosure_Closure0.C594_TestClosure_Closure0;
    [#"../594.rs" 18 14 18 37] cl2 <- C594_TestClosure_Closure1.C594_TestClosure_Closure1;
    [#"../594.rs" 20 22 20 28] _6 <- (([#"../594.rs" 20 23 20 24] (0 : int32)), ([#"../594.rs" 20 26 20 27] (3 : int32)));
    [#"../594.rs" 20 13 20 29] _5 <- (([#"../594.rs" 20 19 20 20] (4 : int32)), _6);
    _6 <- any (int32, int32);
    [#"../594.rs" 20 13 20 29] _a <- ([#"../594.rs" 20 13 20 29] let (a, b) = _5 in closure00 cl1 a b);
    _5 <- any (int32, (int32, int32));
    goto BB1
  }
  BB1 {
    assume { resolve0 cl1 };
    [#"../594.rs" 21 19 21 25] _10 <- (([#"../594.rs" 21 20 21 21] (0 : int32)), ([#"../594.rs" 21 23 21 24] (4 : int32)));
    [#"../594.rs" 21 13 21 26] _9 <- (_10);
    _10 <- any (int32, int32);
    [#"../594.rs" 21 13 21 26] _b <- ([#"../594.rs" 21 13 21 26] let (a) = _9 in closure10 cl2 a);
    _9 <- any (int32, int32);
    goto BB2
  }
  BB2 {
    assume { resolve1 cl2 };
    [#"../594.rs" 15 22 22 1] _0 <- ([#"../594.rs" 15 22 22 1] ());
    return _0
  }
  
end
module C594_T_Type
  use prelude.UInt32
  use prelude.Int
  type t_t  =
    | C_T uint32
    
end
module C594_Impl0_TestMethod
  use C594_T_Type as C594_T_Type
  use prelude.UInt32
  use prelude.Int
  predicate resolve1 (self : uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve1 (self : uint32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (uint32, uint32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve1 (let (a, _) = self in a) /\ resolve1 (let (_, a) = self in a)
  val resolve0 (self : (uint32, uint32)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg test_method [#"../594.rs" 33 4 33 55] [@cfg:stackify] [@cfg:subregion_analysis] (self : C594_T_Type.t_t) (_2 : (uint32, uint32)) : uint32
    ensures { [#"../594.rs" 32 14 32 25] let (x, _) = _2 in result = x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _2 : (uint32, uint32) = _2;
  var x : uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../594.rs" 33 30 33 31] x <- (let (a, _) = _2 in a);
    assume { resolve0 _2 };
    [#"../594.rs" 34 8 34 9] _0 <- x;
    return _0
  }
  
end
