
module C486_HasMutRef_Type
  use prelude.Borrow
  type t_hasmutref 't =
    | C_HasMutRef (borrowed 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_hasmutref < 't > (input:t_hasmutref 't) (ret  (field_0:borrowed 't))= any
    [ good (field_0:borrowed 't)-> {C_HasMutRef field_0 = input} (! ret {field_0})
    | bad (field_0:borrowed 't)-> {C_HasMutRef field_0 <> input} {false} any ]
    
  function hasmutref_0 (self : t_hasmutref 't) : borrowed 't =
    match self with
      | C_HasMutRef a -> a
      end
end
module C486_Test
  use prelude.UInt32
  use prelude.UInt32
  use C486_HasMutRef_Type as C486_HasMutRef_Type
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.Int
  let rec test (x:C486_HasMutRef_Type.t_hasmutref uint32) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = C486_HasMutRef_Type.t_hasmutref <uint32> {x}
          (fun (l_0'0:borrowed uint32) ->
            
            [ &x <- C486_HasMutRef_Type.C_HasMutRef ({ l_0'0 with current = ([#"../486.rs" 8 11 8 12] (5 : uint32)) ; }) : C486_HasMutRef_Type.t_hasmutref uint32 ]
            
            s1)
      | s1 =  [ &_0 <- [#"../486.rs" 8 4 8 12] () ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & x : C486_HasMutRef_Type.t_hasmutref uint32 = x ] 
    [ return' (result:())-> {[@expl:postcondition] [#"../486.rs" 6 10 6 22] UInt32.to_int ( ^ C486_HasMutRef_Type.hasmutref_0 x)
      = 5}
      (! return' {result}) ]
    
end
