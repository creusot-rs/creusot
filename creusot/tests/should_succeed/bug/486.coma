
module C486_HasMutRef_Type
  use prelude.prelude.Borrow
  
  type t_hasmutref 't =
    | C_HasMutRef (borrowed 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_hasmutref < 't > (input:t_hasmutref 't) (ret  (field_0:borrowed 't))= any
    [ good (field_0:borrowed 't)-> {C_HasMutRef field_0 = input} (! ret {field_0})
    | bad (field_0:borrowed 't)-> {C_HasMutRef field_0 <> input} {false} any ]
    
  
  function hasmutref_0 (self : t_hasmutref 't) : borrowed 't =
    match self with
      | C_HasMutRef a -> a
      end
end
module C486_Test
  let%span s4860 = "../486.rs" 8 11 8 12
  
  let%span s4861 = "../486.rs" 6 10 6 22
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.UInt32
  
  use C486_HasMutRef_Type as C486_HasMutRef_Type
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use C486_HasMutRef_Type as HasMutRef'0
  
  use prelude.prelude.Int
  
  let rec test (x:HasMutRef'0.t_hasmutref uint32) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = HasMutRef'0.t_hasmutref <uint32> {x}
          (fun (l_0'0:borrowed uint32) ->
             [ &x <- HasMutRef'0.C_HasMutRef ({ l_0'0 with current = ([%#s4860] (5 : uint32)) ; }) ] 
            s1)
      | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & x : HasMutRef'0.t_hasmutref uint32 = x ] 
    [ return' (result:())-> {[@expl:postcondition] [%#s4861] UInt32.to_int ( ^ C486_HasMutRef_Type.hasmutref_0 x) = 5}
      (! return' {result}) ]
    
end
