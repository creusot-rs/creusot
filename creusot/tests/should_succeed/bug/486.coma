module M_486__test [#"486.rs" 7 0 7 34]
  let%span s4860 = "486.rs" 8 11 8 12
  let%span s4861 = "486.rs" 6 10 6 22
  let%span sresolve2 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  type t_HasMutRef'0  =
    { t_HasMutRef__0'0: borrowed uint32 }
  
  predicate resolve'1 (self : borrowed uint32) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed uint32) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  meta "compute_max_steps" 1000000
  
  let rec test'0 (x:t_HasMutRef'0) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- { t_HasMutRef__0'0 = { x.t_HasMutRef__0'0 with current = ([%#s4860] (5 : uint32)) } } ] s1
      | s1 = -{match x with
          | {t_HasMutRef__0'0 = x'0} -> resolve'0 x'0
          | _ -> true
          end}-
        s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & x : t_HasMutRef'0 = x ] 
    [ return' (result:())-> {[@expl:test ensures] [%#s4861] UInt32.to_int (x.t_HasMutRef__0'0).final = 5}
      (! return' {result}) ]
    
end
