
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C693_F_Interface
  type ifc
  val f [#"../693.rs" 3 0 3 21] (_1 : ifc) : ()
end
module C693_F
  type ifc
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = ifc
  let rec cfg f [#"../693.rs" 3 0 3 21] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ifc) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : ifc = _1;
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve _1 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C693_G_Interface
  val g [#"../693.rs" 5 0 5 10] (_1 : ()) : ()
end
module C693_G
  use prelude.Int
  use prelude.Int32
  clone C693_F_Interface as F0 with
    type ifc = int32
  let rec cfg g [#"../693.rs" 5 0 5 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../693.rs" 6 4 6 8] F0.f ([#"../693.rs" 6 6 6 7] (0 : int32)));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
