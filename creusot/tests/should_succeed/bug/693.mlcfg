
module C693_F
  type ifc
  predicate invariant0 (self : ifc)
  val invariant0 (self : ifc) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : ifc)
  val inv0 (_x : ifc) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : ifc . inv0 x = true
  predicate resolve0 (self : ifc)
  val resolve0 (self : ifc) : bool
    ensures { result = resolve0 self }
    
  let rec cfg f [#"../693.rs" 3 0 3 21] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ifc) : ()
    requires {inv0 _1}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : ifc = _1;
  {
    goto BB0
  }
  BB0 {
    [#"../693.rs" 3 22 3 24] _0 <- ([#"../693.rs" 3 22 3 24] ());
    assert { [@expl:type invariant] inv0 _1 };
    assume { resolve0 _1 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C693_G
  use prelude.Int32
  predicate invariant0 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : int32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : int32)
  val inv0 (_x : int32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : int32 . inv0 x = true
  val f0 [#"../693.rs" 3 0 3 21] (_1 : int32) : ()
    requires {inv0 _1}
    
  use prelude.Int
  let rec cfg g [#"../693.rs" 5 0 5 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../693.rs" 6 4 6 8] _0 <- ([#"../693.rs" 6 4 6 8] f0 ([#"../693.rs" 6 6 6 7] (0 : int32)));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
