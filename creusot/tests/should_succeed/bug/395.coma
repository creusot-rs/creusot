
module M_395__signed_division
  let%span s3950 = "../395.rs" 4 12 4 14
  
  let%span s3951 = "../395.rs" 5 12 5 13
  
  let%span s3952 = "../395.rs" 7 12 7 17
  
  let%span s3953 = "../395.rs" 7 21 7 23
  
  let%span s3954 = "../395.rs" 7 4 7 24
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  let rec signed_division (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#s3950] (10 : int32) ] s1
      | s1 =  [ &y <- [%#s3951] (1 : int32) ] s2
      | s2 =  [ &_6 <- x ] s3
      | s3 =  [ &_7 <- y ] s4
      | s4 = Int32.eq {_7} {[%#s3952] (0 : int32)} (fun (_ret':bool) ->  [ &_8 <- _ret' ] s5)
      | s5 = {[@expl:division by zero] [%#s3952] not _8} s6
      | s6 = bb1 ]
      
    | bb1 = s0
      [ s0 = Int32.eq {_7} {[%#s3952] (-1 : int32)} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s1)
      | s1 = Int32.eq {_6} {[%#s3952] (-2147483648 : int32)} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s2)
      | s2 =  [ &_11 <- _9 && _10 ] s3
      | s3 = {[@expl:Div overflow] [%#s3952] not _11} s4
      | s4 = bb2 ]
      
    | bb2 = s0
      [ s0 = Int32.div {_6} {_7} (fun (_ret':int32) ->  [ &_5 <- _ret' ] s1)
      | s1 = Int32.eq {_5} {[%#s3953] (10 : int32)} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s2)
      | s2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ]  ]
      
    | bb3 = return' {_0}
    | bb4 = {[%#s3954] false} any ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & y : int32 = any_l ()
    | & _4 : bool = any_l ()
    | & _5 : int32 = any_l ()
    | & _6 : int32 = any_l ()
    | & _7 : int32 = any_l ()
    | & _8 : bool = any_l ()
    | & _9 : bool = any_l ()
    | & _10 : bool = any_l ()
    | & _11 : bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
