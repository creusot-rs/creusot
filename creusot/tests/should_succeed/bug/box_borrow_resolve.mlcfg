
module BoxBorrowResolve_BorrowInBox
  use prelude.Int32
  use prelude.Int
  use prelude.Borrow
  predicate resolve0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed int32) : bool
    ensures { result = resolve0 self }
    
  predicate resolve1 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 34 8 34 31] resolve0 self
  val resolve1 (self : borrowed int32) : bool
    ensures { result = resolve1 self }
    
  let rec cfg borrow_in_box [#"../box_borrow_resolve.rs" 6 0 6 50] [@cfg:stackify] [@cfg:subregion_analysis] (x : borrowed int32) : borrowed int32
    ensures { [#"../box_borrow_resolve.rs" 5 10 5 22] result = x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed int32;
  var x : borrowed int32 = x;
  var _2 : borrowed int32;
  var _4 : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    [#"../box_borrow_resolve.rs" 7 4 7 12] _4 <- Borrow.borrow_mut ( * x);
    [#"../box_borrow_resolve.rs" 7 4 7 12] x <- { x with current =  ^ _4 };
    [#"../box_borrow_resolve.rs" 7 4 7 12] _2 <- Borrow.borrow_mut ( * _4);
    [#"../box_borrow_resolve.rs" 7 4 7 12] _4 <- { _4 with current =  ^ _2 };
    [#"../box_borrow_resolve.rs" 7 4 7 12] _0 <- Borrow.borrow_mut ( * _2);
    [#"../box_borrow_resolve.rs" 7 4 7 12] _2 <- { _2 with current =  ^ _0 };
    assume { resolve0 _4 };
    assume { resolve0 _2 };
    goto BB1
  }
  BB1 {
    assume { resolve1 x };
    return _0
  }
  
end
