
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 34 8 34 31] Resolve0.resolve self
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module BoxBorrowResolve_BorrowInBox_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.Int32
  val borrow_in_box [#"../box_borrow_resolve.rs" 6 0 6 50] (x : borrowed int32) : borrowed int32
    ensures { [#"../box_borrow_resolve.rs" 5 10 5 22] result = x }
    
end
module BoxBorrowResolve_BorrowInBox
  use prelude.Borrow
  use prelude.Int
  use prelude.Int32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = int32
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = borrowed int32,
    predicate Resolve0.resolve = Resolve0.resolve
  let rec cfg borrow_in_box [#"../box_borrow_resolve.rs" 6 0 6 50] [@cfg:stackify] [@cfg:subregion_analysis] (x : borrowed int32) : borrowed int32
    ensures { [#"../box_borrow_resolve.rs" 5 10 5 22] result = x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed int32;
  var x : borrowed int32 = x;
  var _2 : borrowed int32;
  var _4 : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    _4 <- Borrow.borrow_mut ( * x);
    x <- { x with current = ( ^ _4) };
    _2 <- Borrow.borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _2) };
    _0 <- Borrow.borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    assume { Resolve0.resolve _4 };
    assume { Resolve0.resolve _2 };
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve x };
    return _0
  }
  
end
