
module M_vcgen__set_max__Impl
  let%span svcgen0 = "../vcgen.rs" 6 11 6 24
  
  let%span svcgen1 = "../vcgen.rs" 8 10 8 28
  
  let%span svcgen2 = "../vcgen.rs" 9 0 9 56
  
  let%span svcgen3 = "../vcgen.rs" 7 10 7 17
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/fset.rs" 57 8 57 26
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/fset.rs" 17 8 17 26
  
  use set.Fset
  
  use prelude.prelude.Int
  
  use set.Fset
  
  function remove'0 [@inline:trivial] (self : Fset.fset int) (a : int) : Fset.fset int =
    [%#span4] Fset.remove a self
  
  use set.Fset
  
  use set.Fset
  
  use prelude.prelude.Int
  
  use set.Fset
  
  predicate contains'0 [@inline:trivial] (self : Fset.fset int) (e : int) =
    [%#span5] Fset.mem e self
  
  use set.Fset
  
  constant s  : Fset.fset int
  
  function set_max [#"../vcgen.rs" 10 0 10 42] (s : Fset.fset int) : int
  
  goal vc_set_max : ([%#svcgen0] not Fset.is_empty s)
   -> (let x = Fset.pick s in let s_1 = remove'0 s x in if Fset.is_empty s_1 then
    let result = x in ([%#svcgen2] forall o : int . contains'0 s o  -> o <= result) && ([%#svcgen1] contains'0 s result)
  else
    (([%#svcgen0] not Fset.is_empty s_1)
    /\ 0 <= ([%#svcgen3] Fset.cardinal s) /\ ([%#svcgen3] Fset.cardinal s_1) < ([%#svcgen3] Fset.cardinal s))
    /\ (([%#svcgen2] forall o : int . contains'0 s_1 o  -> o <= set_max s_1)
    && ([%#svcgen1] contains'0 s_1 (set_max s_1))
     -> (let rec' = set_max s_1 in if x >= rec' then
      let result = x in ([%#svcgen2] forall o : int . contains'0 s o  -> o <= result)
      && ([%#svcgen1] contains'0 s result)
    else
      let result = rec' in ([%#svcgen2] forall o : int . contains'0 s o  -> o <= result)
      && ([%#svcgen1] contains'0 s result)
    ))
  )
end
