module M_vcgen__set_max [#"vcgen.rs" 10 0 10 42]
  let%span svcgen0 = "vcgen.rs" 6 11 6 24
  let%span svcgen1 = "vcgen.rs" 8 10 8 28
  let%span svcgen2 = "vcgen.rs" 9 10 9 53
  let%span svcgen3 = "vcgen.rs" 7 10 7 17
  let%span svcgen4 = "vcgen.rs" 4 0 4 8
  let%span sfset5 = "../../../../creusot-contracts/src/logic/fset.rs" 47 8 47 26
  let%span sfset6 = "../../../../creusot-contracts/src/logic/fset.rs" 93 8 93 26
  
  use set.Fset
  
  use prelude.prelude.Int
  
  use set.Fset
  
  use set.Fset
  
  predicate contains'0 [@inline:trivial] (self : Fset.fset int) (e : int) =
    [%#sfset5] Fset.mem e self
  
  use set.Fset
  
  use set.Fset
  
  use set.Fset
  
  function remove'0 [@inline:trivial] (self : Fset.fset int) (e : int) : Fset.fset int =
    [%#sfset6] Fset.remove e self
  
  constant s  : Fset.fset int
  
  function set_max'0 [#"vcgen.rs" 10 0 10 42] (s : Fset.fset int) : int
  
  goal vc_set_max'0 : ([%#svcgen0] not Fset.is_empty s)
   -> (let x = Fset.pick s in let s_1 = remove'0 s x in if Fset.is_empty s_1 then
    let result = x in ([%#svcgen1] contains'0 s result) && ([%#svcgen2] forall o : int . contains'0 s o  -> o <= result)
  else
    (([@expl:set_max requires] [%#svcgen0] not Fset.is_empty s_1)
    /\ 0 <= ([%#svcgen3] Fset.cardinal s) /\ ([%#svcgen3] Fset.cardinal s_1) < ([%#svcgen3] Fset.cardinal s))
    /\ (([%#svcgen1] contains'0 s_1 (set_max'0 s_1))
    && ([%#svcgen2] forall o : int . contains'0 s_1 o  -> o <= set_max'0 s_1)
     -> (let rec' = set_max'0 s_1 in if x >= rec' then
      let result = x in ([%#svcgen1] contains'0 s result)
      && ([%#svcgen2] forall o : int . contains'0 s o  -> o <= result)
    else
      let result = rec' in ([%#svcgen1] contains'0 s result)
      && ([%#svcgen2] forall o : int . contains'0 s o  -> o <= result)
    ))
  )
end
