
module EqPanic_Omg
  type t
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  use prelude.Borrow
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  type deep_model_ty0
  function deep_model2 (self : t) : deep_model_ty0
  val deep_model2 (self : t) : deep_model_ty0
    ensures { result = deep_model2 self }
    
  function deep_model1 (self : t) : deep_model_ty0 =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model2 self
  val deep_model1 (self : t) : deep_model_ty0
    ensures { result = deep_model1 self }
    
  function deep_model0 (self : t) : deep_model_ty0 =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model1 self
  val deep_model0 (self : t) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  val eq0 (self : t) (other : t) : bool
    requires {inv1 self}
    requires {inv1 other}
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (deep_model0 self = deep_model0 other) }
    
  let rec cfg omg [#"../eq_panic.rs" 6 0 6 51] [@cfg:stackify] [@cfg:subregion_analysis] (x : t) (y : t) : bool
    requires {[#"../eq_panic.rs" 6 30 6 31] inv0 x}
    requires {[#"../eq_panic.rs" 6 37 6 38] inv0 y}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x : t = x;
  var y : t = y;
  {
    goto BB0
  }
  BB0 {
    [#"../eq_panic.rs" 7 4 7 10] _0 <- ([#"../eq_panic.rs" 7 4 7 10] eq0 ([#"../eq_panic.rs" 7 4 7 5] x) ([#"../eq_panic.rs" 7 9 7 10] y));
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 y };
    assume { resolve0 y };
    assert { [@expl:type invariant] inv0 x };
    assume { resolve0 x };
    return _0
  }
  
end
