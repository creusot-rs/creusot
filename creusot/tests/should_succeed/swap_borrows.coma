
module SwapBorrows_Swap
  type t
  predicate invariant'0 (self : (t, t))
  let rec invariant'0 (self:(t, t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : (t, t))
  let rec inv'0 (_x:(t, t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : (t, t) . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'1 (self : t)
  let rec resolve'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : (t, t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'1 (let (a, _) = self in a)
    /\ resolve'1 (let (_, a) = self in a)
  let rec resolve'0 (self:(t, t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec swap (x:(t, t)) (return'  (ret:(t, t)))= {[#"../swap_borrows.rs" 5 11 5 12] inv'0 x}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 x} s1
      | s1 = -{resolve'0 x}- s2
      | s2 =  [ &_0 <- ((let (_, r'0) = x in r'0), (let (r'1, _) = x in r'1)) ] 
        (any
        [ any_ (_any:t)-> (!  [ &x <- let (l'1, _) = x in (l'1, _any) ] 
          (any [ any_ (_any:t)-> (!  [ &x <- let (_, l'5) = x in (_any, l'5) ] s3) ] )) ]
        )
      | s3 = bb2 ]
      
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : (t, t) = any_l () : (t, t) | & x : (t, t) = x ] 
    [ return' (result:(t, t))-> {[@expl:postcondition] [#"../swap_borrows.rs" 5 25 5 31] inv'0 result}
      {[@expl:postcondition] [#"../swap_borrows.rs" 4 10 4 30] result = ((let (_, a) = x in a), (let (a, _) = x in a))}
      (! return' {result}) ]
    
end
module SwapBorrows_F
  use prelude.UInt32
  use prelude.Borrow
  predicate invariant'0 (self : (borrowed uint32, borrowed uint32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:(borrowed uint32, borrowed uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : (borrowed uint32, borrowed uint32))
  let rec inv'0 (_x:(borrowed uint32, borrowed uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : (borrowed uint32, borrowed uint32) . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'2 (self : (borrowed uint32, borrowed uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'1 (let (a, _) = self in a)
    /\ resolve'1 (let (_, a) = self in a)
  let rec resolve'2 (self:(borrowed uint32, borrowed uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  let rec swap'0 (x:(borrowed uint32, borrowed uint32)) (return'  (ret:(borrowed uint32, borrowed uint32)))= {[@expl:precondition] [#"../swap_borrows.rs" 5 11 5 12] inv'0 x}
    any
    [ return' (result:(borrowed uint32, borrowed uint32))-> {[#"../swap_borrows.rs" 5 25 5 31] inv'0 result}
      {[#"../swap_borrows.rs" 4 10 4 30] result = ((let (_, a) = x in a), (let (a, _) = x in a))}
      (! return' {result}) ]
    
  predicate resolve'3 (self : uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'3 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'0 (self : (uint32, uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'3 (let (a, _) = self in a)
    /\ resolve'3 (let (_, a) = self in a)
  let rec resolve'0 (self:(uint32, uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_3 <- (([#"../swap_borrows.rs" 11 26 11 27] (0 : uint32)), ([#"../swap_borrows.rs" 11 29 11 30] (0 : uint32))) ]
        
        s1
      | s1 =  [ &a <- let (r'0, _) = _3 in r'0 ] s2
      | s2 =  [ &b <- let (_, r'1) = _3 in r'1 ] s3
      | s3 = -{resolve'0 _3}- s4
      | s4 = Borrow.borrow_mut <uint32> {a} (fun (_ret':borrowed uint32) ->  [ &_6 <- _ret' ]  [ &a <-  ^ _6 ] s5)
      | s5 = Borrow.borrow_mut <uint32> {b} (fun (_ret':borrowed uint32) ->  [ &_8 <- _ret' ]  [ &b <-  ^ _8 ] s6)
      | s6 = Borrow.borrow_final <uint32> { * _8} {Borrow.get_id _8}
          (fun (_ret':borrowed uint32) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = ( ^ _7) ; } ] s7)
      | s7 =  [ &_5 <- (_6, _7) ] 
        (any
        [ any_ (_any:borrowed uint32)-> (!  [ &_6 <- _any ] 
          (any [ any_ (_any:borrowed uint32)-> (!  [ &_7 <- _any ] s8) ] )) ]
        )
      | s8 = swap'0 {_5} (fun (_ret':(borrowed uint32, borrowed uint32)) ->  [ &p <- _ret' ] s9)
      | s9 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'1 _8}- s1
      | s1 = 
        [ &p <- let (_, l'2) = p in ({ (let (l'0, _) = p in l'0) with current = ([#"../swap_borrows.rs" 13 11 13 13] (10 : uint32)) ; }, l'2) ]
        
        s2
      | s2 = -{resolve'2 p}- s3
      | s3 = {[@expl:assertion] [#"../swap_borrows.rs" 15 20 15 30] b = (10 : uint32)} s4
      | s4 = {[@expl:assertion] [#"../swap_borrows.rs" 16 20 16 29] a = (0 : uint32)} s5
      | s5 =  [ &_0 <- [#"../swap_borrows.rs" 10 11 17 1] () ] s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & a : uint32 = any_l () : uint32
    | & b : uint32 = any_l () : uint32
    | & _3 : (uint32, uint32) = any_l () : (uint32, uint32)
    | & p : (borrowed uint32, borrowed uint32) = any_l () : (borrowed uint32, borrowed uint32)
    | & _5 : (borrowed uint32, borrowed uint32) = any_l () : (borrowed uint32, borrowed uint32)
    | & _6 : borrowed uint32 = any_l () : borrowed uint32
    | & _7 : borrowed uint32 = any_l () : borrowed uint32
    | & _8 : borrowed uint32 = any_l () : borrowed uint32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
