module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Builtins_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Builtins_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Builtins_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module IncMax_TakeMax_Interface
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  val take_max (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { if  * ma >=  * mb then  * mb =  ^ mb && result = ma else  * ma =  ^ ma && result = mb }
    
end
module IncMax_TakeMax
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve1 with type t = uint32
  clone CreusotContracts_Builtins_Resolve_Resolve_Resolve as Resolve0 with type self = uint32
  let rec cfg take_max (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { if  * ma >=  * mb then  * mb =  ^ mb && result = ma else  * ma =  ^ ma && result = mb }
    
   = 
  var _0 : borrowed uint32;
  var ma_1 : borrowed uint32;
  var mb_2 : borrowed uint32;
  var _3 : borrowed uint32;
  var _4 : borrowed uint32;
  var _5 : bool;
  var _6 : uint32;
  var _7 : uint32;
  var _8 : borrowed uint32;
  {
    ma_1 <- ma;
    mb_2 <- mb;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _6 };
    _6 <-  * ma_1;
    assume { Resolve0.resolve _7 };
    _7 <-  * mb_2;
    _5 <- _6 >= _7;
    switch (_5)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { Resolve1.resolve mb_2 };
    _8 <- borrow_mut ( * ma_1);
    ma_1 <- { ma_1 with current = ( ^ _8) };
    assume { Resolve1.resolve ma_1 };
    _4 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _4) };
    assume { Resolve1.resolve _8 };
    goto BB3
  }
  BB2 {
    assume { Resolve1.resolve ma_1 };
    _4 <- borrow_mut ( * mb_2);
    mb_2 <- { mb_2 with current = ( ^ _4) };
    assume { Resolve1.resolve mb_2 };
    goto BB3
  }
  BB3 {
    _3 <- borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _3) };
    assume { Resolve1.resolve _4 };
    _0 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _0) };
    assume { Resolve1.resolve _3 };
    return _0
  }
  
end
module IncMax_IncMax_Interface
  use mach.int.Int
  use mach.int.UInt32
  val inc_max (a : uint32) (b : uint32) : ()
    requires {a <= (1000000 : uint32) && b <= (1000000 : uint32)}
    
end
module IncMax_IncMax
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Builtins_Resolve_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Builtins_Resolve_Resolve_Resolve as Resolve1 with type self = uint32
  clone IncMax_TakeMax_Interface as TakeMax0
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  let rec cfg inc_max (a : uint32) (b : uint32) : ()
    requires {a <= (1000000 : uint32) && b <= (1000000 : uint32)}
    
   = 
  var _0 : ();
  var a_1 : uint32;
  var b_2 : uint32;
  var mc_3 : borrowed uint32;
  var _4 : borrowed uint32;
  var _5 : borrowed uint32;
  var _6 : borrowed uint32;
  var _7 : borrowed uint32;
  var _8 : ();
  var _9 : bool;
  var _10 : bool;
  var _11 : uint32;
  var _12 : uint32;
  var _13 : ();
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _5 <- borrow_mut a_1;
    a_1 <-  ^ _5;
    _4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    assume { Resolve0.resolve _5 };
    _7 <- borrow_mut b_2;
    b_2 <-  ^ _7;
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    assume { Resolve0.resolve _7 };
    mc_3 <- TakeMax0.take_max _4 _6;
    goto BB1
  }
  BB1 {
    mc_3 <- { mc_3 with current = ( * mc_3 + (1 : uint32)) };
    assume { Resolve0.resolve mc_3 };
    assume { Resolve1.resolve _11 };
    _11 <- a_1;
    assume { Resolve1.resolve a_1 };
    assume { Resolve1.resolve _12 };
    _12 <- b_2;
    assume { Resolve1.resolve b_2 };
    _10 <- _11 <> _12;
    _9 <- not _10;
    switch (_9)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    absurd
  }
  BB3 {
    _8 <- ();
    assume { Resolve2.resolve _8 };
    _0 <- ();
    return _0
  }
  
end
