
module Alloc_Vec_Vec_Type
  use prelude.prelude.Opaque
  
  type t_vec 't 'a =
    | C_Vec hidden_field hidden_field
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:hidden_field) (len:hidden_field))= any
    [ good (buf:hidden_field) (len:hidden_field)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:hidden_field) (len:hidden_field)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C16ImplCloning_Vec_Type
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  type t_vec 't =
    | C_Vec (Vec'0.t_vec 't (Global'0.t_global))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > (input:t_vec 't) (ret  (field_0:Vec'0.t_vec 't (Global'0.t_global)))= any
    [ good (field_0:Vec'0.t_vec 't (Global'0.t_global))-> {C_Vec field_0 = input} (! ret {field_0})
    | bad (field_0:Vec'0.t_vec 't (Global'0.t_global))-> {C_Vec field_0 <> input} {false} any ]
    
end
module C16ImplCloning_Test
  type t
  
  let%span s16_impl_cloning0 = "../16_impl_cloning.rs" 17 15 17 16
  
  let%span s16_impl_cloning1 = "../16_impl_cloning.rs" 16 10 16 21
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span4 = "../16_impl_cloning.rs" 12 8 12 14
  
  let%span span5 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use C16ImplCloning_Vec_Type as Vec'0
  
  predicate invariant'1 (self : Vec'0.t_vec t) =
    [%#span2] true
  
  predicate inv'1 (_1 : Vec'0.t_vec t)
  
  axiom inv'1 : forall x : Vec'0.t_vec t . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Vec'0.t_vec t)) =
    [%#span3] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed (Vec'0.t_vec t))
  
  axiom inv'0 : forall x : borrowed (Vec'0.t_vec t) . inv'0 x = true
  
  use seq.Seq
  
  function shallow_model'1 [#"../16_impl_cloning.rs" 11 4 11 50] (self : Vec'0.t_vec t) : Seq.seq t
  
  function shallow_model'0 (self : borrowed (Vec'0.t_vec t)) : Seq.seq t =
    [%#span5] shallow_model'1 self.current
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (Vec'0.t_vec t)) =
    [%#span6] self.final = self.current
  
  let rec test (x:borrowed (Vec'0.t_vec t)) (return'  (ret:()))= {[%#s16_impl_cloning0] inv'0 x}
    (! bb0 [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 x} s1 | s1 = -{resolve'0 x}- s2 | s2 = return' {_0} ]  ] )
    [ & _0 : () = any_l () | & x : borrowed (Vec'0.t_vec t) = x ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s16_impl_cloning1] shallow_model'0 x = shallow_model'1 x.current}
      (! return' {result}) ]
    
end
module C16ImplCloning_Impl0
  type t
end
