module M_16_impl_cloning__test [#"16_impl_cloning.rs" 16 0 16 30]
  let%span s16_impl_cloning0 = "16_impl_cloning.rs" 16 15 16 16
  let%span s16_impl_cloning1 = "16_impl_cloning.rs" 15 10 15 21
  let%span smodel2 = "../../../../creusot-contracts/src/model.rs" 106 8 106 22
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant4 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span svec5 = "../../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span svec6 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sseq7 = "../../../../creusot-contracts/src/logic/seq.rs" 444 20 444 95
  let%span sboxed8 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'1  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_Vec'0  =
    { t_Vec__0'0: t_Vec'1 }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_T'0
  
  use seq.Seq
  
  function view'2 (self : t_Vec'1) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : t_Vec'1 . [%#svec6] Seq.length (view'2 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  predicate inv'5 (_1 : t_T'0)
  
  predicate invariant'3 (self : t_T'0) =
    [%#sboxed8] inv'5 self
  
  predicate inv'4 (_1 : t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_T'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate invariant'2 (self : Seq.seq t_T'0) =
    [%#sseq7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_T'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : t_Vec'1) =
    [%#svec5] inv'3 (view'2 self)
  
  predicate inv'2 (_1 : t_Vec'1)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'1 [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate inv'1 (_1 : t_Vec'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Vec'0 [inv'1 x] . inv'1 x
  = match x with
    | {t_Vec__0'0 = a_0} -> inv'2 a_0
    end
  
  predicate invariant'0 (self : borrowed (t_Vec'0)) =
    [%#sinvariant4] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'1 (self : borrowed (t_Vec'0)) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Vec'0)) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  function view'1 [#"16_impl_cloning.rs" 10 4 10 33] (self : t_Vec'0) : Seq.seq t_T'0
  
  function view'0 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel2] view'1 self.current
  
  meta "compute_max_steps" 1000000
  
  let rec test'0 (x:borrowed (t_Vec'0)) (return'  (ret:()))= {[@expl:test 'x' type invariant] [%#s16_impl_cloning0] inv'0 x}
    (! bb0 [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 x} s1 | s1 = -{resolve'0 x}- s2 | s2 = return' {_0} ]  ] )
    [ & _0 : () = any_l () | & x : borrowed (t_Vec'0) = x ]
    
    [ return' (result:())-> {[@expl:test ensures] [%#s16_impl_cloning1] view'0 x = view'1 x.current}
      (! return' {result}) ]
    
end
