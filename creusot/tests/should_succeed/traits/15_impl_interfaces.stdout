module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module C15ImplInterfaces_Tr
  type self   
  type a   
end
module C15ImplInterfaces_X_Interface
  type t   
  clone C15ImplInterfaces_Tr as Tr0 with type self = t
  function x (x : t) : Tr0.a
end
module C15ImplInterfaces_X
  type t   
  clone C15ImplInterfaces_Tr as Tr0 with type self = t
  function x (x : t) : Tr0.a
end
module C15ImplInterfaces_Impl0_Interface
  type a  = 
    ()
  clone export C15ImplInterfaces_Tr with type self = (), type a = a
end
module C15ImplInterfaces_Impl0
  type a  = 
    ()
  clone export C15ImplInterfaces_Tr with type self = (), type a = a
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module C15ImplInterfaces_Calls_Interface
  clone C15ImplInterfaces_Impl0_Interface as Tr0
  clone C15ImplInterfaces_X_Interface as X0 with type t = (), type Tr0.a = Tr0.a
  val calls (a : ()) : ()
    requires {X0.x a = ()}
    
end
module C15ImplInterfaces_Calls
  clone C15ImplInterfaces_Impl0 as Tr0
  clone C15ImplInterfaces_X as X0 with type t = (), type Tr0.a = Tr0.a
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = ()
  let rec cfg calls (a : ()) : ()
    requires {X0.x a = ()}
    
   = 
  var _0 : ();
  var a_1 : ();
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve a_1 };
    return _0
  }
  
end
module C15ImplInterfaces_Breaks_Interface
  clone C15ImplInterfaces_Impl0_Interface as Tr0
  clone C15ImplInterfaces_X_Interface as X0 with type t = (), type Tr0.a = Tr0.a
  val breaks (a : ()) : ()
    ensures { X0.x a = () }
    
end
module C15ImplInterfaces_Breaks
  clone C15ImplInterfaces_Impl0 as Tr0
  clone C15ImplInterfaces_X as X0 with type t = (), type Tr0.a = Tr0.a
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = ()
  clone C15ImplInterfaces_Calls_Interface as Calls0 with function X0.x = X0.x
  let rec cfg breaks (a : ()) : ()
    ensures { X0.x a = () }
    
   = 
  var _0 : ();
  var a_1 : ();
  var _2 : ();
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _2 };
    _2 <- a_1;
    assume { Resolve0.resolve a_1 };
    _0 <- Calls0.calls _2;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
