
module C01_UsesGeneric
  type t
  use prelude.UInt32
  predicate invariant'1 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : uint32)
  let rec inv'1 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : uint32 . inv'1 x = true
  predicate invariant'0 (self : t)
  let rec invariant'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : t)
  let rec inv'0 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : t . inv'0 x = true
  use prelude.Intrinsic
  use prelude.Int
  let rec from_b'0 (x:t) (return'  (ret:uint32))= {[@expl:precondition] [#"../01.rs" 5 17 5 18] inv'0 x}
    any [ return' (result:uint32)-> {[#"../01.rs" 5 29 5 30] inv'1 result} (! return' {result}) ] 
  let rec uses_generic (b:t) (return'  (ret:uint32))= {[#"../01.rs" 8 26 8 27] inv'0 b}
    (! bb0
    [ bb0 = s0 [ s0 = from_b'0 {b} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : uint32 = any_l () : uint32 | & b : t = b ]  [ return' (result:uint32)-> (! return' {result}) ] 
end
