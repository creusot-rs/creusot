module M_01__uses_generic [#"01.rs" 8 0 8 38]
  let%span s010 = "01.rs" 8 26 8 27
  let%span s011 = "01.rs" 5 17 5 18
  let%span s012 = "01.rs" 5 29 5 30
  
  type t_T'0
  
  predicate inv'0 (_1 : t_T'0)
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  predicate inv'1 (_1 : UInt32.t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : UInt32.t [inv'1 x] . inv'1 x = true
  
  let rec from_b'0 (x:t_T'0) (return'  (ret:UInt32.t))= {[@expl:from_b 'x' type invariant] [%#s011] inv'0 x}
    any [ return' (result:UInt32.t)-> {[%#s012] inv'1 result} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec uses_generic'0 (b:t_T'0) (return'  (ret:UInt32.t))= {[@expl:uses_generic 'b' type invariant] [%#s010] inv'0 b}
    (! bb0
    [ bb0 = s0 [ s0 = from_b'0 {b} (fun (_ret':UInt32.t) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = bb2
    | bb2 = return' {_0} ]
    ) [ & _0 : UInt32.t = any_l () | & b : t_T'0 = b ]  [ return' (result:UInt32.t)-> (! return' {result}) ] 
end
