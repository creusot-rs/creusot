
module C13AssocTypes_Impl0_Model
  type t
  
  let%span s13_assoc_types0 = "../13_assoc_types.rs" 13 13 13 17
  
  let%span s13_assoc_types1 = "../13_assoc_types.rs" 13 22 13 35
  
  type model_ty'0
  
  predicate invariant'1 (self : model_ty'0)
  
  predicate inv'1 (_x : model_ty'0)
  
  axiom inv'1 : forall x : model_ty'0 . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : t)
  
  let rec model (self:t) (return'  (ret:model_ty'0))= {[%#s13_assoc_types0] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = model {self} (fun (_ret':model_ty'0) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : model_ty'0 = any_l () | & self : t = self ] 
    [ return' (result:model_ty'0)-> {[@expl:postcondition] [%#s13_assoc_types1] inv'1 result} (! return' {result}) ]
    
end
module C13AssocTypes_Impl0
  type t
  
  let%span s13_assoc_types0 = "../13_assoc_types.rs" 13 4 13 35
  
  type model_ty'0
  
  predicate invariant'1 (self : model_ty'0)
  
  predicate inv'1 (_x : model_ty'0)
  
  axiom inv'1 : forall x : model_ty'0 . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  goal model_refn : [%#s13_assoc_types0] forall self : t . inv'0 self
   -> inv'0 self /\ (forall result : model_ty'0 . inv'1 result  -> inv'1 result)
end
