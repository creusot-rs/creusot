module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module C17ImplRefinement_Tr_MyFunction_Interface
  type self   
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  val my_function (self : self) : usize
    ensures { UInt64.to_int result >= 10 }
    
end
module C17ImplRefinement_Tr_MyFunction
  type self   
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  val my_function (self : self) : usize
    ensures { UInt64.to_int result >= 10 }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module C17ImplRefinement_Impl0_MyFunction_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  val my_function (self : ()) : usize
    requires {true}
    ensures { UInt64.to_int result >= 15 }
    
end
module C17ImplRefinement_Impl0_MyFunction
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = ()
  let rec cfg my_function (self : ()) : usize
    requires {true}
    ensures { UInt64.to_int result >= 15 }
    
   = 
  var _0 : usize;
  var self_1 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve self_1 };
    _0 <- (20 : usize);
    return _0
  }
  
end
module C17ImplRefinement_Impl0
  clone C17ImplRefinement_Impl0_MyFunction_Interface as MyFunction0
  clone C17ImplRefinement_Tr_MyFunction_Interface as MyFunction1 with type self = (),
  val my_function = MyFunction0.my_function
end
