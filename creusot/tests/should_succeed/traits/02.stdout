module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module C02_A_IsTrue_Interface
  type self   
  use prelude.Prelude
  val is_true [@cfg:stackify] (self : self) : bool
    ensures { result = true }
    
end
module C02_A_IsTrue
  type self   
  use prelude.Prelude
  val is_true [@cfg:stackify] (self : self) : bool
    ensures { result = true }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module C02_Omg_Interface
  type t   
  val omg [@cfg:stackify] (a : t) : bool
    ensures { result = true }
    
end
module C02_Omg
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  clone C02_A_IsTrue_Interface as IsTrue0 with type self = t
  let rec cfg omg [@cfg:stackify] (a : t) : bool
    ensures { result = true }
    
   = 
  var _0 : bool;
  var a_1 : t;
  var _2 : t;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _2 <- a_1;
    _0 <- IsTrue0.is_true _2;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve a_1 };
    return _0
  }
  
end
