module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module C03_Impl0_F_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  val f (self : int32) : int32
end
module C03_Impl0_F
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = int32
  let rec cfg f (self : int32) : int32 = 
  var _0 : int32;
  var self_1 : int32;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- (0 : int32);
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module C03_Impl1_G_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  val g (self : uint32) : uint32
end
module C03_Impl1_G
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = uint32
  let rec cfg g (self : uint32) : uint32 = 
  var _0 : uint32;
  var self_1 : uint32;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- (1 : uint32);
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Core_Marker_Sized
  type self   
end
module C03_Impl2_H_Interface
  type g   
  use prelude.Prelude
  val h (y : g) : g
end
module C03_Impl2_H
  type g   
  use prelude.Prelude
  clone Core_Marker_Sized as Sized0 with type self = g
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = g
  let rec cfg h (y : g) : g = 
  var _0 : g;
  var y_1 : g;
  {
    y_1 <- y;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- y_1;
    assume { Resolve0.resolve y_1 };
    return _0
  }
  
end
module C03_A
  type self   
  use prelude.Prelude
  val f (self : self) : self
end
module C03_Impl0
  use mach.int.Int
  use mach.int.Int32
  clone export C03_Impl0_F_Interface
  clone export C03_A with type self = int32, val f = f
end
module C03_B
  type self   
  clone Core_Marker_Sized as Sized0 with type self = self
  use prelude.Prelude
  val g (self : self) : self
    ensures { result = result }
    
end
module C03_Impl1
  use mach.int.Int
  use mach.int.UInt32
  clone export C03_Impl1_G_Interface
  clone export C03_B with type self = uint32, val g = g
end
module C03_C
  type self   
  type t   
  use prelude.Prelude
  val h (x : t) : t
end
module C03_Impl2
  use mach.int.Int
  use mach.int.UInt32
  clone export C03_Impl2_H_Interface
  clone export C03_C with type self = uint32, type t = g, val h = h
end
