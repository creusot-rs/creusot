module M_07__qyi5864428518595652275__ix [#"07.rs" 11 4 11 36] (* <i32 as Ix> *)
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec ix (self:int32) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_07__test [#"07.rs" 16 0 16 81]
  type g
  
  type t
  
  let%span s070 = "07.rs" 17 4 17 8
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test (_a:uint32) (_b:uint64) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#s070] true ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () ]  [ return' (result:bool)-> (! return' {result}) ] 
end
module M_07__test2 [#"07.rs" 20 0 20 21]
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  let rec ix'0 (self:int32) (return'  (ret:()))= any [ return' (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec test2 (a:int32) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = ix'0 {a} (fun (_ret':()) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ]  | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & a : int32 = a ]  [ return' (result:())-> (! return' {result}) ] 
end
module M_07__qyi5864428518595652275 [#"07.rs" 8 0 8 15] (* <i32 as Ix> *)
  let%span s070 = "07.rs" 11 4 11 36
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : int32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : int32 [inv'0 x] . inv'0 x = true
  
  goal ix_refn : [%#s070] forall self : int32 . inv'0 self  -> (forall result : () . inv'1 result)
end
