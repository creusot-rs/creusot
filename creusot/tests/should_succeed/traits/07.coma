
module C07_Impl0_Ix
  use prelude.Int32
  use prelude.Int
  use prelude.Borrow
  use prelude.Intrinsic
  let rec ix (self:int32) (return'  (ret:()))= (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- () ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : () = any_l () : () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C07_Test
  type g
  type t
  use prelude.UInt64
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  use prelude.Intrinsic
  let rec test (_a:uint32) (_b:uint64) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../07.rs" 17 4 17 8] true ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () : bool ]  [ return' (result:bool)-> (! return' {result}) ] 
end
module C07_Test2
  use prelude.Int32
  use prelude.Int
  use prelude.Borrow
  use prelude.Intrinsic
  let rec ix'0 (self:int32) (return'  (ret:()))= any [ return' (result:())-> (! return' {result}) ] 
  let rec test2 (a:int32) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = ix'0 {a} (fun (_ret':()) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () | & a : int32 = a ]  [ return' (result:())-> (! return' {result}) ] 
end
module C07_Impl0
  predicate invariant'1 (self : ()) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : ())
  let rec inv'1 (_x:()) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : () . inv'1 x = true
  use prelude.Int32
  predicate invariant'0 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : int32)
  let rec inv'0 (_x:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : int32 . inv'0 x = true
  use prelude.Int
  use prelude.Borrow
  goal ix_refn : [#"../07.rs" 11 4 11 36] forall self : int32 . inv'0 self  -> (forall result : () . inv'1 result)
end
