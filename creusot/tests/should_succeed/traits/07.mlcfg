
module C07_Impl0_Ix_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.Int32
  val ix [#"../07.rs" 11 4 11 36] (self : int32) : ()
end
module C07_Impl0_Ix
  use prelude.Borrow
  use prelude.Int
  use prelude.Int32
  let rec cfg ix [#"../07.rs" 11 4 11 36] [@cfg:stackify] [@cfg:subregion_analysis] (self : int32) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../07.rs" 12 8 12 10] ());
    return _0
  }
  
end
module C07_Test_Interface
  type g
  type t
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use prelude.UInt64
  val test [#"../07.rs" 16 0 16 81] (_a : uint32) (_b : uint64) : bool
end
module C07_Test
  type g
  type t
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use prelude.UInt64
  let rec cfg test [#"../07.rs" 16 0 16 81] [@cfg:stackify] [@cfg:subregion_analysis] (_a : uint32) (_b : uint64) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../07.rs" 17 4 17 8] [#"../07.rs" 17 4 17 8] true);
    return _0
  }
  
end
module C07_Test2_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.Int32
  val test2 [#"../07.rs" 20 0 20 21] (a : int32) : ()
end
module C07_Test2
  use prelude.Borrow
  use prelude.Int
  use prelude.Int32
  clone C07_Impl0_Ix_Interface as Ix0
  let rec cfg test2 [#"../07.rs" 20 0 20 21] [@cfg:stackify] [@cfg:subregion_analysis] (a : int32) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : int32 = a;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../07.rs" 21 4 21 10] Ix0.ix ([#"../07.rs" 21 4 21 10] a));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C07_Impl0
  use prelude.Borrow
  use prelude.Int
  use prelude.Int32
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = ()
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = (),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = int32
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = int32,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal ix_refn : [#"../07.rs" 11 4 11 36] forall self : int32 . Inv0.inv self -> (forall result : () . Inv1.inv result)
end
