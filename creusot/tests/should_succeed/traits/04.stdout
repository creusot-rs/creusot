module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module Core_Marker_Sized
  type self   
end
module C04_A
  type self   
  use prelude.Prelude
  val func1 (self : self) (o : self) : bool
  val func2 (self : self) (o : self) : bool
  val func3 (self : self) (o : self) : bool
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module C04_User_Interface
  type t   
  use prelude.Prelude
  val user (a : t) (b : t) : bool
    ensures { result = false }
    
end
module C04_User
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Resolve as Resolve3 with type self = t
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = bool
  clone C04_A as A1 with type self = t
  clone Core_Marker_Sized as Sized0 with type self = t
  let rec cfg user (a : t) (b : t) : bool
    ensures { result = false }
    
   = 
  var _0 : bool;
  var a_1 : t;
  var b_2 : t;
  var _3 : bool;
  var _4 : bool;
  var _5 : t;
  var _6 : t;
  var _7 : bool;
  var _8 : t;
  var _9 : t;
  var _10 : bool;
  var _11 : t;
  var _12 : t;
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _5 <- a_1;
    _6 <- b_2;
    _4 <- A1.func1 _5 _6;
    goto BB7
  }
  BB1 {
    assume { Resolve3.resolve a_1 };
    assume { Resolve3.resolve b_2 };
    assume { Resolve2.resolve _3 };
    _0 <- false;
    goto BB3
  }
  BB2 {
    assume { Resolve2.resolve _3 };
    _11 <- a_1;
    assume { Resolve3.resolve a_1 };
    _12 <- b_2;
    assume { Resolve3.resolve b_2 };
    _10 <- A1.func3 _11 _12;
    goto BB9
  }
  BB3 {
    return _0
  }
  BB4 {
    assume { Resolve2.resolve _4 };
    _3 <- false;
    goto BB6
  }
  BB5 {
    assume { Resolve2.resolve _4 };
    _8 <- b_2;
    _9 <- a_1;
    _7 <- A1.func2 _8 _9;
    goto BB8
  }
  BB6 {
    switch (_3)
      | False -> goto BB1
      | True -> goto BB2
      | _ -> goto BB2
      end
  }
  BB7 {
    switch (_4)
      | False -> goto BB4
      | True -> goto BB5
      | _ -> goto BB5
      end
  }
  BB8 {
    assume { Resolve2.resolve _3 };
    _3 <- _7;
    goto BB6
  }
  BB9 {
    assume { Resolve2.resolve _0 };
    _0 <- _10;
    goto BB3
  }
  
end
