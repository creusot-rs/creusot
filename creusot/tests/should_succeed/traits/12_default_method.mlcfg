
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C12DefaultMethod_T_Default_Interface
  type self
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val default [#"../12_default_method.rs" 6 4 6 28] (self : self) : uint32
    requires {[#"../12_default_method.rs" 6 16 6 20] Inv0.inv self}
    
end
module C12DefaultMethod_T_Default
  type self
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = self
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = self,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = self
  let rec cfg default [#"../12_default_method.rs" 6 4 6 28] [@cfg:stackify] [@cfg:subregion_analysis] (self : self) : uint32
    requires {[#"../12_default_method.rs" 6 16 6 20] Inv0.inv self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self : self = self;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../12_default_method.rs" 7 8 7 9] (0 : uint32));
    assert { [@expl:type invariant] Inv0.inv self };
    assume { Resolve0.resolve self };
    return _0
  }
  
end
module C12DefaultMethod_T_LogicDefault_Stub
  type self
  function logic_default [#"../12_default_method.rs" 12 4 12 34] (self : self) : bool
end
module C12DefaultMethod_T_LogicDefault_Interface
  type self
  function logic_default [#"../12_default_method.rs" 12 4 12 34] (self : self) : bool
  val logic_default [#"../12_default_method.rs" 12 4 12 34] (self : self) : bool
    ensures { result = logic_default self }
    
end
module C12DefaultMethod_T_LogicDefault
  type self
  function logic_default [#"../12_default_method.rs" 12 4 12 34] (self : self) : bool =
    [#"../12_default_method.rs" 13 8 13 12] true
  val logic_default [#"../12_default_method.rs" 12 4 12 34] (self : self) : bool
    ensures { result = logic_default self }
    
end
module C12DefaultMethod_ShouldUseImpl_Interface
  use prelude.Int
  use prelude.UInt32
  clone C12DefaultMethod_T_LogicDefault_Stub as LogicDefault0 with
    type self = uint32
  val should_use_impl [#"../12_default_method.rs" 20 0 20 30] (x : uint32) : ()
    ensures { [#"../12_default_method.rs" 19 10 19 27] LogicDefault0.logic_default x }
    
end
module C12DefaultMethod_ShouldUseImpl
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = uint32
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = uint32,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C12DefaultMethod_T_LogicDefault as LogicDefault0 with
    type self = uint32
  clone C12DefaultMethod_T_Default_Interface as Default0 with
    type self = uint32,
    predicate Inv0.inv = Inv0.inv
  let rec cfg should_use_impl [#"../12_default_method.rs" 20 0 20 30] [@cfg:stackify] [@cfg:subregion_analysis] (x : uint32) : ()
    ensures { [#"../12_default_method.rs" 19 10 19 27] LogicDefault0.logic_default x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : uint32 = x;
  var _3 : uint32;
  {
    goto BB0
  }
  BB0 {
    _3 <- ([#"../12_default_method.rs" 21 4 21 15] Default0.default x);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
module C12DefaultMethod_Impl0
  
end
