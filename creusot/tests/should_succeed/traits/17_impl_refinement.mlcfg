
module C17ImplRefinement_Impl0_MyFunction_Interface
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UIntSize
  val my_function [@cfg:stackify] (self : ()) : usize
    requires {[#"../17_impl_refinement.rs" 12 15 12 19] true}
    ensures { [#"../17_impl_refinement.rs" 13 14 13 27] UInt64.to_int result >= 15 }
    
end
module C17ImplRefinement_Impl0_MyFunction
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UIntSize
  let rec cfg my_function [@cfg:stackify] [#"../17_impl_refinement.rs" 14 4 14 34] (self : ()) : usize
    requires {[#"../17_impl_refinement.rs" 12 15 12 19] true}
    ensures { [#"../17_impl_refinement.rs" 13 14 13 27] UInt64.to_int result >= 15 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- (20 : usize);
    return _0
  }
  
end
module C17ImplRefinement_Impl1_NeedFalse_Stub
  use mach.int.Int
  use mach.int.UInt64
  val ghost function need_false (y : uint64) : ()
end
module C17ImplRefinement_Impl1_NeedFalse_Interface
  use mach.int.Int
  use mach.int.UInt64
  val ghost function need_false (y : uint64) : ()
    requires {[#"../17_impl_refinement.rs" 28 15 28 23] UInt64.to_int y >= 15}
    
end
module C17ImplRefinement_Impl1_NeedFalse
  use mach.int.Int
  use mach.int.UInt64
  let rec ghost function need_false [#"../17_impl_refinement.rs" 29 4 29 25] (y : uint64) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../17_impl_refinement.rs" 27 4 27 12] ()
  axiom need_false_spec : forall y : uint64 . ([#"../17_impl_refinement.rs" 28 15 28 23] UInt64.to_int y >= 15) -> true
end
module C17ImplRefinement_Impl1_NeedFalse_Impl
  use mach.int.Int
  use mach.int.UInt64
  let rec ghost function need_false (y : uint64) : ()
    requires {[#"../17_impl_refinement.rs" 28 15 28 23] UInt64.to_int y >= 15}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../17_impl_refinement.rs" 27 4 27 12] ()
end
module C17ImplRefinement_Tr_MyFunction_Interface
  type self
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UIntSize
  val my_function [@cfg:stackify] (self : self) : usize
    ensures { [#"../17_impl_refinement.rs" 7 14 7 27] UInt64.to_int result >= 10 }
    
end
module C17ImplRefinement_Tr_MyFunction
  type self
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UIntSize
  val my_function [@cfg:stackify] (self : self) : usize
    ensures { [#"../17_impl_refinement.rs" 7 14 7 27] UInt64.to_int result >= 10 }
    
end
module C17ImplRefinement_Impl0
  clone C17ImplRefinement_Impl0_MyFunction_Interface as MyFunction0
  clone C17ImplRefinement_Tr_MyFunction_Interface as MyFunction1 with type self = (),
    val my_function = MyFunction0.my_function
end
module C17ImplRefinement_ReqFalse_NeedFalse_Stub
  type self
  use mach.int.Int
  use mach.int.UInt64
  val ghost function need_false (x : uint64) : ()
end
module C17ImplRefinement_ReqFalse_NeedFalse_Interface
  type self
  use mach.int.Int
  use mach.int.UInt64
  val ghost function need_false (x : uint64) : ()
    requires {[#"../17_impl_refinement.rs" 21 15 21 23] UInt64.to_int x >= 10}
    
end
module C17ImplRefinement_ReqFalse_NeedFalse
  type self
  use mach.int.Int
  use mach.int.UInt64
  val ghost function need_false [#"../17_impl_refinement.rs" 22 4 22 32] (x : uint64) : ()
  axiom need_false_spec : forall x : uint64 . ([#"../17_impl_refinement.rs" 21 15 21 23] UInt64.to_int x >= 10) -> true
end
module C17ImplRefinement_Impl1
  use mach.int.Int
  use mach.int.UInt64
  clone C17ImplRefinement_Impl1_NeedFalse as NeedFalse0 with axiom .
  clone C17ImplRefinement_ReqFalse_NeedFalse_Interface as NeedFalse1 with type self = (),
    val need_false = NeedFalse0.need_false, axiom .
  goal need_false_spec : forall x : uint64 . (([#"../17_impl_refinement.rs" 21 15 21 23] UInt64.to_int x >= 10) -> ([#"../17_impl_refinement.rs" 28 15 28 23] UInt64.to_int x >= 15)) /\ (forall result : () . true)
end
