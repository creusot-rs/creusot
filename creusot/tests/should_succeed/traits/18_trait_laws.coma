
module C18TraitLaws_UsesOp_Impl
  type t
  
  let%span s18_trait_laws0 = "../18_trait_laws.rs" 16 29 16 30
  
  let%span s18_trait_laws1 = "../18_trait_laws.rs" 16 35 16 36
  
  let%span s18_trait_laws2 = "../18_trait_laws.rs" 15 10 15 24
  
  let%span span3 = "../18_trait_laws.rs" 10 17 10 18
  
  let%span span4 = "../18_trait_laws.rs" 10 26 10 27
  
  let%span span5 = "../18_trait_laws.rs" 9 14 9 32
  
  function op'0 [#"../18_trait_laws.rs" 6 4 6 33] (self : t) (_2 : t) : t
  
  predicate inv'0 (_x : t)
  
  function reflexive'0 [#"../18_trait_laws.rs" 10 4 10 35] (a : t) (b : t) : ()
  
  axiom reflexive'0_spec : forall a : t, b : t . ([%#span3] inv'0 a)
   -> ([%#span4] inv'0 b)  -> ([%#span5] op'0 a b = op'0 b a)
  
  predicate invariant'0 (self : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  constant x  : t
  
  constant y  : t
  
  function uses_op [#"../18_trait_laws.rs" 16 0 16 48] (x : t) (y : t) : bool
  
  goal vc_uses_op : ([%#s18_trait_laws1] inv'0 y)
   -> ([%#s18_trait_laws0] inv'0 x)  -> ([%#s18_trait_laws2] (op'0 x y = op'0 y x) = true)
end
module C18TraitLaws_Impl0_Reflexive_Impl
  let%span s18_trait_laws0 = "../18_trait_laws.rs" 29 14 29 32
  
  let%span span1 = "../18_trait_laws.rs" 24 8 24 10
  
  function op'0 [#"../18_trait_laws.rs" 23 4 23 32] (self : ()) (_2 : ()) : () =
    [%#span1] ()
  
  constant a  : ()
  
  constant b  : ()
  
  function reflexive [#"../18_trait_laws.rs" 30 4 30 34] (a : ()) (b : ()) : ()
  
  goal vc_reflexive : [%#s18_trait_laws0] op'0 a b = op'0 b a
end
module C18TraitLaws_ImplLaws_Impl
  let%span s18_trait_laws0 = "../18_trait_laws.rs" 35 10 35 24
  
  let%span span1 = "../18_trait_laws.rs" 24 8 24 10
  
  let%span span2 = "../18_trait_laws.rs" 29 14 29 32
  
  let%span span3 = "../18_trait_laws.rs" 27 4 27 10
  
  function op'0 [#"../18_trait_laws.rs" 23 4 23 32] (self : ()) (_2 : ()) : () =
    [%#span1] ()
  
  function reflexive'0 [#"../18_trait_laws.rs" 30 4 30 34] (a : ()) (b : ()) : () =
    [%#span3] ()
  
  axiom reflexive'0_spec : forall a : (), b : () . [%#span2] op'0 a b = op'0 b a
  
  constant _1  : ()
  
  function impl_laws [#"../18_trait_laws.rs" 36 0 36 26] (_1 : ()) : bool
  
  goal vc_impl_laws : [%#s18_trait_laws0] (op'0 () () = op'0 () ()) = true
end
module C18TraitLaws_Impl0
  let%span s18_trait_laws0 = "../18_trait_laws.rs" 30 4 30 34
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../18_trait_laws.rs" 24 8 24 10
  
  predicate invariant'0 (self : ()) =
    [%#span1] true
  
  predicate inv'0 (_x : ())
  
  axiom inv'0 : forall x : () . inv'0 x = true
  
  function op'0 [#"../18_trait_laws.rs" 23 4 23 32] (self : ()) (_2 : ()) : () =
    [%#span2] ()
  
  goal reflexive_refn : [%#s18_trait_laws0] forall a : () . forall b : () . inv'0 b /\ inv'0 a
   -> (forall result : () . op'0 a b = op'0 b a  -> op'0 a b = op'0 b a)
end
