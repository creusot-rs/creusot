
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 27 4 27 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C04_A_Func1_Interface
  type self
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val func1 [#"../04.rs" 6 4 6 38] (self : self) (o : self) : bool
    requires {[#"../04.rs" 6 14 6 18] Inv0.inv self}
    requires {[#"../04.rs" 6 20 6 21] Inv0.inv o}
    
end
module C04_A_Func2_Interface
  type self
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val func2 [#"../04.rs" 7 4 7 38] (self : self) (o : self) : bool
    requires {[#"../04.rs" 7 14 7 18] Inv0.inv self}
    requires {[#"../04.rs" 7 20 7 21] Inv0.inv o}
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C04_A_Func3_Interface
  type self
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val func3 [#"../04.rs" 8 4 8 38] (self : self) (o : self) : bool
    requires {[#"../04.rs" 8 14 8 18] Inv0.inv self}
    requires {[#"../04.rs" 8 20 8 21] Inv0.inv o}
    
end
module C04_User_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val user [#"../04.rs" 12 0 12 39] (a : t) (b : t) : bool
    requires {[#"../04.rs" 12 18 12 19] Inv0.inv a}
    requires {[#"../04.rs" 12 25 12 26] Inv0.inv b}
    ensures { [#"../04.rs" 11 10 11 25] result = false }
    
end
module C04_User
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C04_A_Func3_Interface as Func30 with
    type self = t,
    predicate Inv0.inv = Inv0.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = t
  clone C04_A_Func2_Interface as Func20 with
    type self = t,
    predicate Inv0.inv = Inv0.inv
  clone C04_A_Func1_Interface as Func10 with
    type self = t,
    predicate Inv0.inv = Inv0.inv
  let rec cfg user [#"../04.rs" 12 0 12 39] [@cfg:stackify] [@cfg:subregion_analysis] (a : t) (b : t) : bool
    requires {[#"../04.rs" 12 18 12 19] Inv0.inv a}
    requires {[#"../04.rs" 12 25 12 26] Inv0.inv b}
    ensures { [#"../04.rs" 11 10 11 25] result = false }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var a : t = a;
  var b : t = b;
  var _4 : bool;
  var _5 : bool;
  var _8 : bool;
  var _11 : bool;
  {
    goto BB0
  }
  BB0 {
    _5 <- ([#"../04.rs" 13 4 13 14] Func10.func1 a b);
    goto BB7
  }
  BB1 {
    assert { [@expl:type invariant] Inv0.inv b };
    assume { Resolve0.resolve b };
    assert { [@expl:type invariant] Inv0.inv a };
    assume { Resolve0.resolve a };
    _0 <- ([#"../04.rs" 13 4 13 42] false);
    goto BB3
  }
  BB2 {
    assert { [@expl:type invariant] Inv0.inv a };
    assume { Resolve0.resolve a };
    assert { [@expl:type invariant] Inv0.inv b };
    assume { Resolve0.resolve b };
    _11 <- ([#"../04.rs" 13 32 13 42] Func30.func3 a b);
    goto BB9
  }
  BB3 {
    return _0
  }
  BB4 {
    _4 <- ([#"../04.rs" 13 4 13 28] false);
    goto BB6
  }
  BB5 {
    _8 <- ([#"../04.rs" 13 18 13 28] Func20.func2 b a);
    goto BB8
  }
  BB6 {
    switch (_4)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB7 {
    switch (_5)
      | False -> goto BB4
      | True -> goto BB5
      end
  }
  BB8 {
    _4 <- _8;
    _8 <- any bool;
    goto BB6
  }
  BB9 {
    _0 <- _11;
    _11 <- any bool;
    goto BB3
  }
  
end
