
module C06_Test
  type t
  
  let%span s060 = "../06.rs" 13 9 13 10
  
  let%span s061 = "../06.rs" 9 19 9 20
  
  let%span s062 = "../06.rs" 9 29 9 35
  
  let%span span3 = "../06.rs" 6 11 6 15
  
  let%span span4 = "../06.rs" 6 31 6 40
  
  type tgt'0
  
  predicate invariant'1 (self : tgt'0)
  
  predicate inv'1 (_x : tgt'0)
  
  axiom inv'1 : forall x : tgt'0 . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  let rec ix'0 (self:t) (ix:usize) (return'  (ret:tgt'0))= {[@expl:precondition] [%#span3] inv'0 self}
    any [ return' (result:tgt'0)-> {[%#span4] inv'1 result} (! return' {result}) ] 
  
  predicate resolve'0 (self : t)
  
  let rec test (a:t) (return'  (ret:tgt'0))= {[%#s061] inv'0 a}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 a} s1
      | s1 = -{resolve'0 a}- s2
      | s2 = ix'0 {a} {[%#s060] (0 : usize)} (fun (_ret':tgt'0) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : tgt'0 = any_l () | & a : t = a ] 
    [ return' (result:tgt'0)-> {[@expl:postcondition] [%#s062] inv'1 result} (! return' {result}) ]
    
end
