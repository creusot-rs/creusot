
module C06_Test
  type t
  type tgt'0
  predicate invariant'1 (self : tgt'0)
  let rec invariant'1 (self:tgt'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : tgt'0)
  let rec inv'1 (_x:tgt'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : tgt'0 . inv'1 x = true
  predicate invariant'0 (self : t)
  let rec invariant'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : t)
  let rec inv'0 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : t . inv'0 x = true
  use prelude.Borrow
  use prelude.Intrinsic
  use prelude.UIntSize
  use prelude.Int
  let rec ix'0 (self:t) (ix:usize) (return'  (ret:tgt'0))= {[@expl:precondition] [#"../06.rs" 6 11 6 15] inv'0 self}
    any [ return' (result:tgt'0)-> {[#"../06.rs" 6 31 6 40] inv'1 result} (! return' {result}) ] 
  predicate resolve'0 (self : t)
  let rec resolve'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec test (a:t) (return'  (ret:tgt'0))= {[#"../06.rs" 9 19 9 20] inv'0 a}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 a} s1
      | s1 = -{resolve'0 a}- s2
      | s2 = ix'0 {a} {[#"../06.rs" 13 9 13 10] (0 : usize)} (fun (_ret':tgt'0) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : tgt'0 = any_l () : tgt'0 | & a : t = a ] 
    [ return' (result:tgt'0)-> {[@expl:postcondition] [#"../06.rs" 9 29 9 35] inv'1 result} (! return' {result}) ]
    
end
