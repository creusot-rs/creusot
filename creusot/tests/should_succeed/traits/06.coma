module M_06__test [#"06.rs" 9 0 11 15]
  let%span s060 = "06.rs" 13 9 13 10
  let%span s061 = "06.rs" 9 19 9 20
  let%span s062 = "06.rs" 9 29 9 35
  let%span s063 = "06.rs" 6 11 6 15
  let%span s064 = "06.rs" 6 31 6 40
  let%span sinvariant5 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate invariant'0 (self : t_T'0) =
    [%#sinvariant5] inv'2 self
  
  predicate inv'0 (_1 : t_T'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_T'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_Tgt'0
  
  predicate inv'1 (_1 : t_Tgt'0)
  
  let rec ix'0 (self:t_T'0) (ix:usize) (return'  (ret:t_Tgt'0))= {[@expl:ix 'self' type invariant] [%#s063] inv'0 self}
    any [ return' (result:t_Tgt'0)-> {[%#s064] inv'1 result} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test'0 (a:t_T'0) (return'  (ret:t_Tgt'0))= {[@expl:test 'a' type invariant] [%#s061] inv'0 a}
    (! bb0
    [ bb0 = s0 [ s0 = ix'0 {a} {[%#s060] (0 : usize)} (fun (_ret':t_Tgt'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : t_Tgt'0 = any_l () | & a : t_T'0 = a ] 
    [ return' (result:t_Tgt'0)-> {[@expl:test result type invariant] [%#s062] inv'1 result} (! return' {result}) ]
    
end
