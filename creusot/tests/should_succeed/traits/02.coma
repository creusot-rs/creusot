
module C02_Omg
  type t
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  predicate invariant'0 (self : t)
  let rec invariant'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : t)
  let rec inv'0 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : t . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'0 (self : t)
  let rec resolve'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  let rec is_true'0 (self:t) (return'  (ret:bool))= {[@expl:precondition] [#"../02.rs" 7 16 7 20] inv'1 self}
    any [ return' (result:bool)-> {[#"../02.rs" 6 14 6 28] result = true} (! return' {result}) ] 
  let rec omg (a:t) (return'  (ret:bool))= {[#"../02.rs" 11 17 11 18] inv'0 a}
    (! bb0
    [ bb0 = s0 [ s0 = is_true'0 {a} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 a} s1 | s1 = -{resolve'0 a}- s2 | s2 = bb2 ] 
    | bb2 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () : bool | & a : t = a ] 
    [ return' (result:bool)-> {[@expl:postcondition] [#"../02.rs" 10 10 10 24] result = true} (! return' {result}) ]
    
end
