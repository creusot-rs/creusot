module M_12_default_method__T__default [#"12_default_method.rs" 6 4 6 28]
  let%span s12_default_method0 = "12_default_method.rs" 7 8 7 9
  let%span s12_default_method1 = "12_default_method.rs" 6 16 6 20
  let%span sinvariant2 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  type t_Self'0
  
  predicate inv'1 (_1 : t_Self'0)
  
  predicate invariant'0 (self : t_Self'0) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : t_Self'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Self'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  meta "compute_max_steps" 1000000
  
  let rec default'0 (self:t_Self'0) (return'  (ret:uint32))= {[@expl:default 'self' type invariant] [%#s12_default_method1] inv'0 self}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- [%#s12_default_method0] (0 : uint32) ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : uint32 = any_l () ]
     [ return' (result:uint32)-> (! return' {result}) ] 
end
module M_12_default_method__should_use_impl [#"12_default_method.rs" 20 0 20 30]
  let%span s12_default_method0 = "12_default_method.rs" 19 10 19 27
  let%span s12_default_method1 = "12_default_method.rs" 6 16 6 20
  let%span s12_default_method2 = "12_default_method.rs" 13 8 13 12
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  predicate inv'0 (_1 : uint32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : uint32 [inv'0 x] . inv'0 x = true
  
  let rec default'0 (self:uint32) (return'  (ret:uint32))= {[@expl:default 'self' type invariant] [%#s12_default_method1] inv'0 self}
    any [ return' (result:uint32)-> (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  function logic_default'0 [#"12_default_method.rs" 12 4 12 34] (self : uint32) : bool =
    [%#s12_default_method2] true
  
  meta "compute_max_steps" 1000000
  
  let rec should_use_impl'0 (x:uint32) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = default'0 {x} (fun (_ret':uint32) ->  [ &_3 <- _ret' ] s1) | s1 = bb1 ]  | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & x : uint32 = x | & _3 : uint32 = any_l () ] 
    [ return' (result:())-> {[@expl:should_use_impl ensures] [%#s12_default_method0] logic_default'0 x}
      (! return' {result}) ]
    
end
