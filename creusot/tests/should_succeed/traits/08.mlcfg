
module C08_Tr_Program
  type self
  predicate invariant0 (self : self)
  val invariant0 (self : self) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : self)
  val inv0 (_x : self) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : self . inv0 x = true
  use prelude.Borrow
  predicate resolve0 (self : self)
  val resolve0 (self : self) : bool
    ensures { result = resolve0 self }
    
  let rec cfg program [#"../08.rs" 12 4 12 21] [@cfg:stackify] [@cfg:subregion_analysis] (self : self) : ()
    requires {[#"../08.rs" 12 16 12 20] inv0 self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : self = self;
  {
    goto BB0
  }
  BB0 {
    [#"../08.rs" 12 22 12 24] _0 <- ([#"../08.rs" 12 22 12 24] ());
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    return _0
  }
  
end
module C08_Test
  type t
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  let rec cfg test [#"../08.rs" 15 0 15 24] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : t) : ()
    requires {inv0 _1}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : t = _1;
  {
    goto BB0
  }
  BB0 {
    [#"../08.rs" 15 25 15 27] _0 <- ([#"../08.rs" 15 25 15 27] ());
    assert { [@expl:type invariant] inv0 _1 };
    assume { resolve0 _1 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
