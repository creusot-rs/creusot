
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C08_Tr_Program_Interface
  type self
  use prelude.Borrow
  val program [#"../08.rs" 12 4 12 21] (self : self) : ()
end
module C08_Tr_Program
  type self
  use prelude.Borrow
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = self
  let rec cfg program [#"../08.rs" 12 4 12 21] [@cfg:stackify] [@cfg:subregion_analysis] (self : self) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : self = self;
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve self };
    return _0
  }
  
end
module C08_Test_Interface
  type t
  val test [#"../08.rs" 15 0 15 24] (_1 : t) : ()
end
module C08_Test
  type t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = t
  let rec cfg test [#"../08.rs" 15 0 15 24] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : t) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : t = _1;
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve _1 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
