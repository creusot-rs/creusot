
module C02_Omg
  type t
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  use prelude.Borrow
  val is_true0 [#"../02.rs" 7 4 7 30] (self : t) : bool
    requires {[#"../02.rs" 7 16 7 20] inv1 self}
    ensures { [#"../02.rs" 6 14 6 28] result = true }
    
  let rec cfg omg [#"../02.rs" 11 0 11 30] [@cfg:stackify] [@cfg:subregion_analysis] (a : t) : bool
    requires {[#"../02.rs" 11 17 11 18] inv0 a}
    ensures { [#"../02.rs" 10 10 10 24] result = true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var a : t = a;
  {
    goto BB0
  }
  BB0 {
    [#"../02.rs" 12 4 12 15] _0 <- ([#"../02.rs" 12 4 12 15] is_true0 ([#"../02.rs" 12 4 12 15] a));
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 a };
    assume { resolve0 a };
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
