
module C02_A_IsTrue_Interface
  type self
  use prelude.Borrow
  val is_true [@cfg:stackify] [#"../02.rs" 7 4 7 30] (self : self) : bool
    ensures { [#"../02.rs" 6 14 6 28] result = true }
    
end
module C02_A_IsTrue
  type self
  use prelude.Borrow
  val is_true [@cfg:stackify] [#"../02.rs" 7 4 7 30] (self : self) : bool
    ensures { [#"../02.rs" 6 14 6 28] result = true }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C02_Omg_Interface
  type t
  val omg [@cfg:stackify] [#"../02.rs" 11 0 11 30] (a : t) : bool
    ensures { [#"../02.rs" 10 10 10 24] result = true }
    
end
module C02_Omg
  type t
  use prelude.Borrow
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = t
  clone C02_A_IsTrue_Interface as IsTrue0 with
    type self = t
  let rec cfg omg [@cfg:stackify] [#"../02.rs" 11 0 11 30] (a : t) : bool
    ensures { [#"../02.rs" 10 10 10 24] result = true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var a_1 : t;
  var _3 : t;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _3 <- a_1;
    _0 <- ([#"../02.rs" 12 4 12 15] IsTrue0.is_true _3);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve a_1 };
    return _0
  }
  
end
