
module C09_Test
  type t
  use prelude.Intrinsic
  use prelude.Int
  use prelude.UInt32
  let rec test (t:uint32) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0
      [ s0 = UInt32.add {t} {[#"../09.rs" 8 8 8 9] (0 : uint32)} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1)
      | s1 = return' {_0} ]
       ]
    ) [ & _0 : uint32 = any_l () : uint32 | & t : uint32 = t ]  [ return' (result:uint32)-> (! return' {result}) ] 
end
module C09_Test2
  type t
  type u
  type x'0
  predicate invariant'0 (self : x'0)
  let rec invariant'0 (self:x'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : x'0)
  let rec inv'0 (_x:x'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : x'0 . inv'0 x = true
  use prelude.Intrinsic
  let rec test2 (t:x'0) (return'  (ret:x'0))= {[#"../09.rs" 11 37 11 38] inv'0 t}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- t ] (any [ any_ (_any:x'0)-> (!  [ &t <- _any ] s1) ] ) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : x'0 = any_l () : x'0 | & t : x'0 = t ] 
    [ return' (result:x'0)-> {[@expl:postcondition] [#"../09.rs" 11 49 11 53] inv'0 result} (! return' {result}) ]
    
end
