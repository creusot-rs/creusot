module M_09__test [#"09.rs" 7 0 7 43]
  let%span s090 = "09.rs" 8 8 8 9
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test'0 (t:uint32) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0
      [ s0 = UInt32.add {t} {[%#s090] (0 : uint32)} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]
       ]
    ) [ & _0 : uint32 = any_l () | & t : uint32 = t ]  [ return' (result:uint32)-> (! return' {result}) ] 
end
module M_09__test2 [#"09.rs" 11 0 11 53]
  let%span s090 = "09.rs" 11 37 11 38
  let%span s091 = "09.rs" 11 49 11 53
  
  type t_X'0
  
  use prelude.prelude.Intrinsic
  
  predicate inv'0 (_1 : t_X'0)
  
  meta "compute_max_steps" 1000000
  
  let rec test2'0 (t:t_X'0) (return'  (ret:t_X'0))= {[@expl:test2 't' type invariant] [%#s090] inv'0 t}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- t ] s1 | s1 = bb1 ]  | bb1 = return' {_0} ] )
    [ & _0 : t_X'0 = any_l () | & t : t_X'0 = t ]
     [ return' (result:t_X'0)-> {[@expl:test2 result type invariant] [%#s091] inv'0 result} (! return' {result}) ] 
end
