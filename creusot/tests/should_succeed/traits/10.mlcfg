
module C10_Pair_Type
  type t_pair 't 'u =
    | C_Pair 't 'u
    
  let function pair_0 (self : t_pair 't 'u) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Pair a _ -> a
      end
  let function pair_1 (self : t_pair 't 'u) : 'u = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Pair _ a -> a
      end
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C10_Impl0_Resolve_Stub
  type t
  type u
  use C10_Pair_Type as C10_Pair_Type
  predicate resolve [#"../10.rs" 6 9 6 16] (self : C10_Pair_Type.t_pair t u)
end
module C10_Impl0_Resolve_Interface
  type t
  type u
  use C10_Pair_Type as C10_Pair_Type
  predicate resolve [#"../10.rs" 6 9 6 16] (self : C10_Pair_Type.t_pair t u)
  val resolve [#"../10.rs" 6 9 6 16] (self : C10_Pair_Type.t_pair t u) : bool
    ensures { result = resolve self }
    
end
module C10_Impl0_Resolve
  type t
  type u
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = u
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use C10_Pair_Type as C10_Pair_Type
  predicate resolve [#"../10.rs" 6 9 6 16] (self : C10_Pair_Type.t_pair t u) =
    [#"../10.rs" 7 18 7 22] Resolve0.resolve (C10_Pair_Type.pair_0 self) /\ Resolve1.resolve (C10_Pair_Type.pair_1 self)
  val resolve [#"../10.rs" 6 9 6 16] (self : C10_Pair_Type.t_pair t u) : bool
    ensures { result = resolve self }
    
end
module C10_Impl0
  type t
  type u
end
