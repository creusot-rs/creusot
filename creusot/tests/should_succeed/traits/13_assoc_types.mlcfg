
module C13AssocTypes_Impl0_Model
  type t
  type model_ty0
  predicate invariant1 (self : model_ty0)
  val invariant1 (self : model_ty0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : model_ty0)
  val inv1 (_x : model_ty0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : model_ty0 . inv1 x = true
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  use prelude.Borrow
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  let rec cfg model [#"../13_assoc_types.rs" 13 4 13 35] [@cfg:stackify] [@cfg:subregion_analysis] (self : t) : model_ty0
    requires {[#"../13_assoc_types.rs" 13 13 13 17] inv0 self}
    ensures { [#"../13_assoc_types.rs" 13 22 13 35] inv1 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : model_ty0;
  var self : t = self;
  {
    goto BB0
  }
  BB0 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../13_assoc_types.rs" 14 8 14 22] _0 <- ([#"../13_assoc_types.rs" 14 8 14 22] model self);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C13AssocTypes_Impl0
  type t
  type model_ty0
  predicate invariant1 (self : model_ty0)
  val invariant1 (self : model_ty0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : model_ty0)
  val inv1 (_x : model_ty0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : model_ty0 . inv1 x = true
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  use prelude.Borrow
  goal model_refn : [#"../13_assoc_types.rs" 13 4 13 35] forall self : t . inv0 self
   -> inv0 self /\ (forall result : model_ty0 . inv1 result  -> inv1 result)
end
