
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module C01_A_FromB_Interface
  type self
  type b
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val from_b [#"../01.rs" 5 4 5 31] (x : self) : b
    requires {[#"../01.rs" 5 17 5 18] Inv0.inv x}
    ensures { [#"../01.rs" 5 29 5 30] Inv1.inv result }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C01_UsesGeneric_Interface
  type t
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val uses_generic [#"../01.rs" 8 0 8 38] (b : t) : uint32
    requires {[#"../01.rs" 8 26 8 27] Inv0.inv b}
    
end
module C01_UsesGeneric
  type t
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = uint32
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = uint32,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C01_A_FromB_Interface as FromB0 with
    type self = t,
    type b = uint32,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv
  let rec cfg uses_generic [#"../01.rs" 8 0 8 38] [@cfg:stackify] [@cfg:subregion_analysis] (b : t) : uint32
    requires {[#"../01.rs" 8 26 8 27] Inv0.inv b}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var b : t = b;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../01.rs" 9 4 9 16] FromB0.from_b b);
    b <- any t;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
