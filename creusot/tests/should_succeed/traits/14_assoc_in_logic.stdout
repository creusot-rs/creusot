module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module C14AssocInLogic_Assoc
  type self   
  type ty   
end
module C14AssocInLogic_FromTy_Interface
  type t   
  clone C14AssocInLogic_Assoc as Assoc0 with type self = t
  function from_ty (x : Assoc0.ty) : t
end
module C14AssocInLogic_FromTy
  type t   
  clone C14AssocInLogic_Assoc as Assoc0 with type self = t
  function from_ty (x : Assoc0.ty) : t
end
module C14AssocInLogic_ToTy_Interface
  type t   
  clone C14AssocInLogic_Assoc as Assoc0 with type self = t
  function to_ty (x : t) : Assoc0.ty
end
module C14AssocInLogic_ToTy
  type t   
  clone C14AssocInLogic_Assoc as Assoc0 with type self = t
  function to_ty (x : t) : Assoc0.ty
end
module Core_Marker_Sized
  type self   
end
module C14AssocInLogic_Test_Interface
  type t   
  clone C14AssocInLogic_Assoc as Assoc0 with type self = t
  clone C14AssocInLogic_FromTy_Interface as FromTy0 with type t = t, type Assoc0.ty = Assoc0.ty
  clone C14AssocInLogic_ToTy_Interface as ToTy0 with type t = t, type Assoc0.ty = Assoc0.ty
  val test (a : t) : ()
    ensures { a = FromTy0.from_ty (ToTy0.to_ty a) }
    
end
module C14AssocInLogic_Test
  type t   
  clone C14AssocInLogic_Assoc as Assoc0 with type self = t
  clone C14AssocInLogic_FromTy as FromTy0 with type t = t, type Assoc0.ty = Assoc0.ty
  clone C14AssocInLogic_ToTy as ToTy0 with type t = t, type Assoc0.ty = Assoc0.ty
  clone Core_Marker_Sized as Sized0 with type self = t
  val test (a : t) : ()
    ensures { a = FromTy0.from_ty (ToTy0.to_ty a) }
    
end
