module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module C14AssocInLogic_Assoc_Ty
  type self   
  type ty   
end
module C14AssocInLogic_FromTy_Interface
  type t   
  clone C14AssocInLogic_Assoc_Ty as Ty0 with type self = t
  function from_ty (x : Ty0.ty) : t
end
module C14AssocInLogic_FromTy
  type t   
  clone C14AssocInLogic_Assoc_Ty as Ty0 with type self = t
  function from_ty (x : Ty0.ty) : t
end
module C14AssocInLogic_ToTy_Interface
  type t   
  clone C14AssocInLogic_Assoc_Ty as Ty0 with type self = t
  function to_ty (x : t) : Ty0.ty
end
module C14AssocInLogic_ToTy
  type t   
  clone C14AssocInLogic_Assoc_Ty as Ty0 with type self = t
  function to_ty (x : t) : Ty0.ty
end
module C14AssocInLogic_Test_Interface
  type t   
  clone C14AssocInLogic_Assoc_Ty as Ty0 with type self = t
  clone C14AssocInLogic_FromTy_Interface as FromTy0 with type t = t, type Ty0.ty = Ty0.ty
  clone C14AssocInLogic_ToTy_Interface as ToTy0 with type t = t, type Ty0.ty = Ty0.ty
  val test [@cfg:stackify] (a : t) : ()
    ensures { a = FromTy0.from_ty (ToTy0.to_ty a) }
    
end
module C14AssocInLogic_Test
  type t   
  clone C14AssocInLogic_Assoc_Ty as Ty0 with type self = t
  clone C14AssocInLogic_FromTy as FromTy0 with type t = t, type Ty0.ty = Ty0.ty
  clone C14AssocInLogic_ToTy as ToTy0 with type t = t, type Ty0.ty = Ty0.ty
  val test [@cfg:stackify] (a : t) : ()
    ensures { a = FromTy0.from_ty (ToTy0.to_ty a) }
    
end
