
module C09_Test
  type t
  use prelude.UInt32
  use prelude.Int
  let rec cfg test [#"../09.rs" 7 0 7 43] [@cfg:stackify] [@cfg:subregion_analysis] (t : uint32) : uint32
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var t : uint32 = t;
  {
    goto BB0
  }
  BB0 {
    [#"../09.rs" 8 4 8 9] _0 <- ([#"../09.rs" 8 4 8 9] ([#"../09.rs" 8 4 8 5] t) + ([#"../09.rs" 8 8 8 9] [#"../09.rs" 8 8 8 9] (0 : uint32)));
    return _0
  }
  
end
module C09_Test2
  type t
  type u
  type x0
  predicate invariant0 (self : x0)
  val invariant0 (self : x0) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : x0)
  val inv0 (_x : x0) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : x0 . inv0 x = true
  let rec cfg test2 [#"../09.rs" 11 0 11 53] [@cfg:stackify] [@cfg:subregion_analysis] (t : x0) : x0
    requires {[#"../09.rs" 11 37 11 38] inv0 t}
    ensures { [#"../09.rs" 11 49 11 53] inv0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : x0;
  var t : x0 = t;
  {
    goto BB0
  }
  BB0 {
    [#"../09.rs" 12 4 12 5] _0 <- ([#"../09.rs" 12 4 12 5] t);
    [#"../09.rs" 12 4 12 5] t <- any x0;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
