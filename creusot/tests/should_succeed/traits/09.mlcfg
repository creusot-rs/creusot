
module C09_Test_Interface
  type t
  use prelude.Int
  use prelude.UInt32
  val test [#"../09.rs" 7 0 7 43] (t : uint32) : uint32
end
module C09_Test
  type t
  use prelude.Int
  use prelude.UInt32
  let rec cfg test [#"../09.rs" 7 0 7 43] [@cfg:stackify] [@cfg:subregion_analysis] (t : uint32) : uint32
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var t : uint32 = t;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../09.rs" 8 4 8 9] t + ([#"../09.rs" 8 8 8 9] [#"../09.rs" 8 8 8 9] (0 : uint32)));
    return _0
  }
  
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module C09_Tr_X_Type
  type self
  type x
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C09_Test2_Interface
  type t
  type u
  clone C09_Tr_X_Type as X0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = X0.x
  val test2 [#"../09.rs" 11 0 11 53] (t : X0.x) : X0.x
    requires {[#"../09.rs" 11 37 11 38] Inv0.inv t}
    ensures { [#"../09.rs" 11 49 11 53] Inv0.inv result }
    
end
module C09_Test2
  type t
  type u
  clone C09_Tr_X_Type as X0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = X0.x
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = X0.x,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  let rec cfg test2 [#"../09.rs" 11 0 11 53] [@cfg:stackify] [@cfg:subregion_analysis] (t : X0.x) : X0.x
    requires {[#"../09.rs" 11 37 11 38] Inv0.inv t}
    ensures { [#"../09.rs" 11 49 11 53] Inv0.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : X0.x;
  var t : X0.x = t;
  {
    goto BB0
  }
  BB0 {
    _0 <- t;
    t <- any X0.x;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
