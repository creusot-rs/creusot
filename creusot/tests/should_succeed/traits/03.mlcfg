
module C03_Impl0_F_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.Int32
  val f [#"../03.rs" 9 4 9 23] (self : int32) : int32
end
module C03_Impl0_F
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  let rec cfg f [#"../03.rs" 9 4 9 23] [@cfg:stackify] [@cfg:subregion_analysis] (self : int32) : int32
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../03.rs" 10 8 10 9] (0 : int32));
    return _0
  }
  
end
module C03_Impl1_G_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  val g [#"../03.rs" 20 4 20 23] (self : uint32) : uint32
end
module C03_Impl1_G
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  let rec cfg g [#"../03.rs" 20 4 20 23] [@cfg:stackify] [@cfg:subregion_analysis] (self : uint32) : uint32
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../03.rs" 21 8 21 9] (1 : uint32));
    return _0
  }
  
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C03_Impl2_H_Interface
  type g
  use prelude.Borrow
  val h [#"../03.rs" 30 4 30 24] (y : g) : g
end
module C03_Impl2_H
  type g
  use prelude.Borrow
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = g
  let rec cfg h [#"../03.rs" 30 4 30 24] [@cfg:stackify] [@cfg:subregion_analysis] (y : g) : g
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : g;
  var y : g = y;
  {
    goto BB0
  }
  BB0 {
    _0 <- y;
    assume { Resolve0.resolve y };
    return _0
  }
  
end
module C03_Impl0
  
end
module C03_Impl1
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  goal g_refn : [#"../03.rs" 20 4 20 23] forall self : uint32 . forall result : uint32 . result = result
end
module C03_Impl2
  
end
