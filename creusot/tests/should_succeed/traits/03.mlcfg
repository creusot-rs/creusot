
module C03_Impl0_F
  use prelude.Borrow
  use prelude.Int32
  use prelude.Int
  let rec cfg f [#"../03.rs" 9 4 9 23] [@cfg:stackify] [@cfg:subregion_analysis] (self : int32) : int32
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  {
    goto BB0
  }
  BB0 {
    [#"../03.rs" 10 8 10 9] _0 <- ([#"../03.rs" 10 8 10 9] (0 : int32));
    return _0
  }
  
end
module C03_Impl1_G
  use prelude.Borrow
  use prelude.UInt32
  use prelude.Int
  let rec cfg g [#"../03.rs" 20 4 20 23] [@cfg:stackify] [@cfg:subregion_analysis] (self : uint32) : uint32
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../03.rs" 21 8 21 9] _0 <- ([#"../03.rs" 21 8 21 9] (1 : uint32));
    return _0
  }
  
end
module C03_Impl2_H
  type g
  predicate invariant0 (self : g)
  val invariant0 (self : g) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : g)
  val inv0 (_x : g) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : g . inv0 x = true
  use prelude.Borrow
  predicate resolve0 (self : g)
  val resolve0 (self : g) : bool
    ensures { result = resolve0 self }
    
  let rec cfg h [#"../03.rs" 30 4 30 24] [@cfg:stackify] [@cfg:subregion_analysis] (y : g) : g
    requires {[#"../03.rs" 30 12 30 13] inv0 y}
    ensures { [#"../03.rs" 30 22 30 24] inv0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : g;
  var y : g = y;
  {
    goto BB0
  }
  BB0 {
    [#"../03.rs" 31 8 31 9] _0 <- y;
    assert { [@expl:type invariant] inv0 y };
    assume { resolve0 y };
    return _0
  }
  
end
module C03_Impl0
  use prelude.Int32
  predicate invariant1 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : int32) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : int32)
  val inv1 (_x : int32) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : int32 . inv1 x = true
  predicate invariant0 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : int32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : int32)
  val inv0 (_x : int32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : int32 . inv0 x = true
  use prelude.Int
  use prelude.Borrow
  goal f_refn : [#"../03.rs" 9 4 9 23] forall self : int32 . inv0 self  -> (forall result : int32 . inv1 result)
end
module C03_Impl1
  use prelude.UInt32
  predicate invariant1 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : uint32) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : uint32)
  val inv1 (_x : uint32) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : uint32 . inv1 x = true
  predicate invariant0 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : uint32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : uint32)
  val inv0 (_x : uint32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : uint32 . inv0 x = true
  use prelude.Int
  use prelude.Borrow
  goal g_refn : [#"../03.rs" 20 4 20 23] forall self : uint32 . inv0 self
   -> (forall result : uint32 . inv1 result /\ result = result)
end
module C03_Impl2
  type g
  predicate invariant0 (self : g)
  val invariant0 (self : g) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : g)
  val inv0 (_x : g) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : g . inv0 x = true
  use prelude.Borrow
  goal h_refn : [#"../03.rs" 30 4 30 24] forall x : g . inv0 x
   -> inv0 x /\ (forall result : g . inv0 result  -> inv0 result)
end
