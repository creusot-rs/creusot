module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module C12DefaultMethod_T_Default_Interface
  type self   
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  val default (self : self) : uint32
end
module C12DefaultMethod_T_Default
  type self   
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = self
  let rec cfg default (self : self) : uint32 = 
  var _0 : uint32;
  var self_1 : self;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- (0 : uint32);
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module C12DefaultMethod_T_LogicDefault_Interface
  type self   
  function logic_default (self : self) : bool
end
module C12DefaultMethod_T_LogicDefault
  type self   
  function logic_default (self : self) : bool = 
    true
end
module C12DefaultMethod_ShouldUseImpl_Interface
  use mach.int.Int
  use mach.int.UInt32
  clone C12DefaultMethod_T_LogicDefault_Interface as LogicDefault0 with type self = uint32
  val should_use_impl (x : uint32) : ()
    ensures { LogicDefault0.logic_default x }
    
end
module C12DefaultMethod_ShouldUseImpl
  use mach.int.Int
  use mach.int.UInt32
  clone C12DefaultMethod_T_LogicDefault as LogicDefault0 with type self = uint32
  use prelude.Prelude
  clone C12DefaultMethod_T_Default_Interface as Default0 with type self = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = uint32
  let rec cfg should_use_impl (x : uint32) : ()
    ensures { LogicDefault0.logic_default x }
    
   = 
  var _0 : ();
  var x_1 : uint32;
  var _2 : uint32;
  var _3 : uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    assume { Resolve0.resolve x_1 };
    _2 <- Default0.default _3;
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
module C12DefaultMethod_Impl0
  
end
