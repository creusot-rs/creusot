
module C11_Id_Stub
  type t
  function id [#"../11.rs" 7 0 7 23] (x : t) : t
end
module C11_Id_Interface
  type t
  function id [#"../11.rs" 7 0 7 23] (x : t) : t
  val id [#"../11.rs" 7 0 7 23] (x : t) : t
    ensures { result = id x }
    
end
module C11_Id
  type t
  function id [#"../11.rs" 7 0 7 23] (x : t) : t =
    [#"../11.rs" 8 4 8 5] x
  val id [#"../11.rs" 7 0 7 23] (x : t) : t
    ensures { result = id x }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C11_Test_Interface
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val test [#"../11.rs" 18 0 18 23] (_1 : t) : ()
    requires {[#"../11.rs" 1 0 1 0] Inv0.inv _1}
    
end
module C11_Test
  type t
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = t
  let rec cfg test [#"../11.rs" 18 0 18 23] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : t) : ()
    requires {[#"../11.rs" 1 0 1 0] Inv0.inv _1}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : t = _1;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../11.rs" 18 24 18 26] ());
    assert { [@expl:type invariant] Inv0.inv _1 };
    assume { Resolve0.resolve _1 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
