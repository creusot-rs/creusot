
module C11_Id_Stub
  type t
  val ghost function id (x : t) : t
end
module C11_Id_Interface
  type t
  val ghost function id (x : t) : t
end
module C11_Id
  type t
  let rec ghost function id [#"../11.rs" 6 0 6 23] (x : t) : t = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../11.rs" 7 4 7 5] x
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module C11_Test_Interface
  type t
  val test [@cfg:stackify] (_1' : t) : ()
end
module C11_Test
  type t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  let rec cfg test [@cfg:stackify] [#"../11.rs" 17 0 17 23] (_1' : t) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : t;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _1 };
    return _0
  }
  
end
