
module C03_Impl0_F
  use prelude.Borrow
  use prelude.Intrinsic
  use prelude.Int32
  use prelude.Int
  let rec f (self:int32) (return'  (ret:int32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../03.rs" 10 8 10 9] (0 : int32) ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : int32 = any_l () : int32 ]  [ return' (result:int32)-> (! return' {result}) ] 
end
module C03_Impl1_G
  use prelude.Borrow
  use prelude.Intrinsic
  use prelude.UInt32
  use prelude.Int
  let rec g (self:uint32) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../03.rs" 21 8 21 9] (1 : uint32) ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : uint32 = any_l () : uint32 ]  [ return' (result:uint32)-> (! return' {result}) ] 
end
module C03_Impl2_H
  type g
  predicate invariant'0 (self : g)
  let rec invariant'0 (self:g) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : g)
  let rec inv'0 (_x:g) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : g . inv'0 x = true
  use prelude.Intrinsic
  use prelude.Borrow
  predicate resolve'0 (self : g)
  let rec resolve'0 (self:g) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec h (y:g) (return'  (ret:g))= {[#"../03.rs" 30 12 30 13] inv'0 y}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- y ] s1 | s1 = {[@expl:type invariant] inv'0 y} s2 | s2 = -{resolve'0 y}- s3 | s3 = return' {_0} ]
       ]
    ) [ & _0 : g = any_l () : g | & y : g = y ] 
    [ return' (result:g)-> {[@expl:postcondition] [#"../03.rs" 30 22 30 24] inv'0 result} (! return' {result}) ]
    
end
module C03_Impl0
  use prelude.Int32
  predicate invariant'1 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : int32)
  let rec inv'1 (_x:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : int32 . inv'1 x = true
  predicate invariant'0 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : int32)
  let rec inv'0 (_x:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : int32 . inv'0 x = true
  use prelude.Int
  use prelude.Borrow
  goal f_refn : [#"../03.rs" 9 4 9 23] forall self : int32 . inv'0 self  -> (forall result : int32 . inv'1 result)
end
module C03_Impl1
  use prelude.UInt32
  predicate invariant'1 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : uint32)
  let rec inv'1 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : uint32 . inv'1 x = true
  predicate invariant'0 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : uint32)
  let rec inv'0 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : uint32 . inv'0 x = true
  use prelude.Int
  use prelude.Borrow
  goal g_refn : [#"../03.rs" 20 4 20 23] forall self : uint32 . inv'0 self
   -> (forall result : uint32 . inv'1 result /\ result = result)
end
module C03_Impl2
  type g
  predicate invariant'0 (self : g)
  let rec invariant'0 (self:g) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : g)
  let rec inv'0 (_x:g) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : g . inv'0 x = true
  use prelude.Borrow
  goal h_refn : [#"../03.rs" 30 4 30 24] forall x : g . inv'0 x
   -> inv'0 x /\ (forall result : g . inv'0 result  -> inv'0 result)
end
