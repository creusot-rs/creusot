module M_04__user [#"04.rs" 14 0 14 39]
  type t
  
  let%span s040 = "04.rs" 15 4 15 42
  let%span s041 = "04.rs" 14 18 14 19
  let%span s042 = "04.rs" 14 25 14 26
  let%span s043 = "04.rs" 13 10 13 25
  let%span s044 = "04.rs" 8 14 8 18
  let%span s045 = "04.rs" 8 20 8 21
  let%span s046 = "04.rs" 9 14 9 18
  let%span s047 = "04.rs" 9 20 9 21
  let%span s048 = "04.rs" 10 14 10 18
  let%span s049 = "04.rs" 10 20 10 21
  let%span sinvariant10 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'1 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : t) =
    [%#sinvariant10] inv'1 self
  
  predicate inv'0 (_1 : t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  let rec func3'0 (self:t) (o:t) (return'  (ret:bool))= {[@expl:precondition] [%#s049] inv'0 o}
    {[@expl:precondition] [%#s048] inv'0 self}
    any [ return' (result:bool)-> (! return' {result}) ] 
  
  let rec func2'0 (self:t) (o:t) (return'  (ret:bool))= {[@expl:precondition] [%#s047] inv'0 o}
    {[@expl:precondition] [%#s046] inv'0 self}
    any [ return' (result:bool)-> (! return' {result}) ] 
  
  let rec func1'0 (self:t) (o:t) (return'  (ret:bool))= {[@expl:precondition] [%#s045] inv'0 o}
    {[@expl:precondition] [%#s044] inv'0 self}
    any [ return' (result:bool)-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec user (a:t) (b:t) (return'  (ret:bool))= {[%#s042] inv'0 b}
    {[%#s041] inv'0 a}
    (! bb0
    [ bb0 = s0 [ s0 = func1'0 {a} {b} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = any [ br0 -> {_4 = false} (! bb6) | br1 -> {_4} (! bb2) ] 
    | bb2 = s0 [ s0 = func2'0 {b} {a} (fun (_ret':bool) ->  [ &_7 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = any [ br0 -> {_7 = false} (! bb5) | br1 -> {_7} (! bb4) ] 
    | bb4 = s0 [ s0 = func3'0 {a} {b} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = bb9
    | bb5 = bb7
    | bb6 = bb7
    | bb7 = s0 [ s0 =  [ &_0 <- [%#s040] false ] s1 | s1 = bb9 ] 
    | bb9 = return' {_0} ]
    ) [ & _0 : bool = any_l () | & a : t = a | & b : t = b | & _4 : bool = any_l () | & _7 : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#s043] result = false} (! return' {result}) ]
    
end
