
module C06_Ix_Tgt_Type
  type self
  type tgt
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C06_Ix_Ix_Interface
  type self
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  clone C06_Ix_Tgt_Type as Tgt0 with
    type self = self
  val ix [#"../06.rs" 6 4 6 41] (self : self) (ix : usize) : Tgt0.tgt
end
module C06_Test_Interface
  type t
  use prelude.Borrow
  clone C06_Ix_Tgt_Type as Tgt0 with
    type self = t
  val test [#"../06.rs" 9 0 11 15] (a : t) : Tgt0.tgt
end
module C06_Test
  type t
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  clone C06_Ix_Tgt_Type as Tgt0 with
    type self = t
  clone C06_Ix_Ix_Interface as Ix0 with
    type self = t,
    type Tgt0.tgt = Tgt0.tgt
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = t
  let rec cfg test [#"../06.rs" 9 0 11 15] [@cfg:stackify] [@cfg:subregion_analysis] (a : t) : Tgt0.tgt
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Tgt0.tgt;
  var a_1 : t;
  var _2 : t;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _2 <- a_1;
    assume { Resolve0.resolve a_1 };
    _0 <- ([#"../06.rs" 13 4 13 11] Ix0.ix _2 ([#"../06.rs" 13 9 13 10] (0 : usize)));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
