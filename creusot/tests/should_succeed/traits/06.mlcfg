
module C06_Test
  type t
  type tgt0
  predicate invariant1 (self : tgt0)
  val invariant1 (self : tgt0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : tgt0)
  val inv1 (_x : tgt0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : tgt0 . inv1 x = true
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Int
  val ix0 [#"../06.rs" 6 4 6 41] (self : t) (ix : usize) : tgt0
    requires {[#"../06.rs" 6 11 6 15] inv0 self}
    ensures { [#"../06.rs" 6 31 6 40] inv1 result }
    
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  let rec cfg test [#"../06.rs" 9 0 11 15] [@cfg:stackify] [@cfg:subregion_analysis] (a : t) : tgt0
    requires {[#"../06.rs" 9 19 9 20] inv0 a}
    ensures { [#"../06.rs" 9 29 9 35] inv1 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : tgt0;
  var a : t = a;
  {
    goto BB0
  }
  BB0 {
    assert { [@expl:type invariant] inv0 a };
    assume { resolve0 a };
    [#"../06.rs" 13 4 13 11] _0 <- ([#"../06.rs" 13 4 13 11] ix0 ([#"../06.rs" 13 4 13 5] a) ([#"../06.rs" 13 9 13 10] [#"../06.rs" 13 9 13 10] (0 : usize)));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
