module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module C13AssocTypes_Model_ModelTy
  type self   
  type modelTy   
end
module C13AssocTypes_Model_Model_Interface
  type self   
  clone C13AssocTypes_Model_ModelTy as ModelTy0 with type self = self
  val model [@cfg:stackify] (self : self) : ModelTy0.modelTy
end
module C13AssocTypes_Model_Model
  type self   
  clone C13AssocTypes_Model_ModelTy as ModelTy0 with type self = self
  val model [@cfg:stackify] (self : self) : ModelTy0.modelTy
end
module C13AssocTypes_Impl0_ModelTy
  type t   
  clone C13AssocTypes_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module C13AssocTypes_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone C13AssocTypes_Model_ModelTy as ModelTy0 with type self = t
  val model [@cfg:stackify] (self : t) : ModelTy0.modelTy
end
module C13AssocTypes_Impl0_Model
  type t   
  use prelude.Prelude
  clone C13AssocTypes_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  let rec cfg model [@cfg:stackify] (self : t) : ModelTy0.modelTy = 
  var _0 : ModelTy0.modelTy;
  var self_1 : t;
  var _2 : t;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- self_1;
    assume { Resolve0.resolve self_1 };
    _0 <- model _2;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C13AssocTypes_Impl0
  type t   
  use prelude.Prelude
  clone C13AssocTypes_Model_ModelTy as ModelTy2 with type self = t
  clone C13AssocTypes_Impl0_Model_Interface as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone C13AssocTypes_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone C13AssocTypes_Model_Model_Interface as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  val model = Model0.model
  clone C13AssocTypes_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
