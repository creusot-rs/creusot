
module C10_Pair_Type
  type t_pair 't 'u =
    | C_Pair 't 'u
  
  function any_l (_ : 'b) : 'a
  
  let rec t_pair < 't > < 'u > (input:t_pair 't 'u) (ret  (field_0:'t) (field_1:'u))= any
    [ good (field_0:'t) (field_1:'u)-> {C_Pair field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:'t) (field_1:'u)-> {C_Pair field_0 field_1 <> input} {false} any ]
    
  
  function pair_0 (self : t_pair 't 'u) : 't =
    match self with
      | C_Pair a _ -> a
      end
  
  function pair_1 (self : t_pair 't 'u) : 'u =
    match self with
      | C_Pair _ a -> a
      end
end
module C10_Impl0
  type t
  
  type u
end
