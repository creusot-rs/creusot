module T_10__Pair [#"10.rs" 7 0 7 21]
  type t_Pair 't 'u =
    | C_Pair 't 'u
  
  let rec t_Pair < 't > < 'u > (input:t_Pair 't 'u) (ret  (field_0:'t) (field_1:'u))= any
    [ good (field_0:'t) (field_1:'u)-> {C_Pair field_0 field_1 = input} (! ret {field_0} {field_1}) ]
    
  
  function t_Pair__0 (self : t_Pair 't 'u) : 't =
    match self with
      | C_Pair a _ -> a
      end
  
  function t_Pair__1 (self : t_Pair 't 'u) : 'u =
    match self with
      | C_Pair _ a -> a
      end
end
module M_10__qyi13957190796817192770__resolve_coherence [#"10.rs" 6 9 6 16] (* <Pair<T, U> as creusot_contracts::Resolve> *)
  type t
  
  type u
  
  let%span s100 = "10.rs" 6 9 6 16
  let%span s101 = "10.rs" 7 22 7 34
  
  use T_10__Pair as Pair'0
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (_1 : u)
  
  use T_10__Pair as T_10__Pair
  
  predicate resolve'2 (_1 : t)
  
  use T_10__Pair as T_10__Pair
  
  predicate resolve'0 [#"10.rs" 6 9 6 16] (self : Pair'0.t_Pair t u) =
    [%#s101] resolve'2 (T_10__Pair.t_Pair__0 self) /\ resolve'1 (T_10__Pair.t_Pair__1 self)
  
  predicate structural_resolve'0 (x : Pair'0.t_Pair t u) =
    match x with
      | Pair'0.C_Pair a b -> resolve'1 b /\ resolve'2 a
      end
  
  constant self  : Pair'0.t_Pair t u
  
  function resolve_coherence [#"10.rs" 6 9 6 16] (self : Pair'0.t_Pair t u) : ()
  
  goal vc_resolve_coherence : ([%#s100] structural_resolve'0 self)  -> ([%#s100] resolve'0 self)
end
module M_10__qyi13957190796817192770 [#"10.rs" 6 9 6 16] (* <Pair<T, U> as creusot_contracts::Resolve> *)
  type t
  
  type u
  
  let%span s100 = "10.rs" 6 9 6 16
  let%span s101 = "10.rs" 7 22 7 34
  let%span sinvariant2 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'3 (_1 : u)
  
  predicate inv'2 (_1 : t)
  
  use T_10__Pair as Pair'0
  
  predicate inv'1 (_1 : Pair'0.t_Pair t u)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Pair'0.t_Pair t u [inv'1 x] . inv'1 x
  = match x with
    | Pair'0.C_Pair a_0 a_1 -> inv'2 a_0 /\ inv'3 a_1
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : Pair'0.t_Pair t u) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : Pair'0.t_Pair t u)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Pair'0.t_Pair t u [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'1 (_1 : u)
  
  use T_10__Pair as T_10__Pair
  
  predicate resolve'2 (_1 : t)
  
  use T_10__Pair as T_10__Pair
  
  predicate resolve'0 [#"10.rs" 6 9 6 16] (self : Pair'0.t_Pair t u) =
    [%#s101] resolve'2 (T_10__Pair.t_Pair__0 self) /\ resolve'1 (T_10__Pair.t_Pair__1 self)
  
  predicate structural_resolve'0 (x : Pair'0.t_Pair t u) =
    match x with
      | Pair'0.C_Pair a b -> resolve'1 b /\ resolve'2 a
      end
  
  goal resolve_coherence_refn : [%#s100] forall self : Pair'0.t_Pair t u . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
