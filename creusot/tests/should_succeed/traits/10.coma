module M_10__qyi13957190796817192770__resolve_coherence [#"10.rs" 6 9 6 16] (* <Pair<T, U> as creusot_contracts::Resolve> *)
  let%span s100 = "10.rs" 6 9 6 16
  let%span s101 = "10.rs" 6 9 6 16
  let%span s102 = "10.rs" 7 22 7 34
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_U'0
  
  type t_Pair'0  =
    { t_Pair__0'0: t_T'0; t_Pair__1'0: t_U'0 }
  
  predicate resolve'1 (_1 : t_U'0)
  
  predicate resolve'2 (_1 : t_T'0)
  
  predicate structural_resolve'0 (_1 : t_Pair'0) =
    match _1 with
      | {t_Pair__0'0 = x0 ; t_Pair__1'0 = x1} -> resolve'1 x1 /\ resolve'2 x0
      end
  
  predicate resolve'0 [#"10.rs" 6 9 6 16] (self : t_Pair'0) =
    [%#s102] resolve'2 self.t_Pair__0'0 /\ resolve'1 self.t_Pair__1'0
  
  constant self  : t_Pair'0
  
  function resolve_coherence'0 [#"10.rs" 6 9 6 16] (self : t_Pair'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#s100] structural_resolve'0 self)  -> ([%#s100] resolve'0 self)
end
module M_10__qyi13957190796817192770__resolve_coherence__refines [#"10.rs" 6 9 6 16] (* <Pair<T, U> as creusot_contracts::Resolve> *)
  let%span s100 = "10.rs" 6 9 6 16
  let%span s101 = "10.rs" 7 22 7 34
  let%span sinvariant2 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_U'0
  
  type t_Pair'0  =
    { t_Pair__0'0: t_T'0; t_Pair__1'0: t_U'0 }
  
  predicate resolve'1 (_1 : t_U'0)
  
  predicate resolve'2 (_1 : t_T'0)
  
  predicate structural_resolve'0 (_1 : t_Pair'0) =
    match _1 with
      | {t_Pair__0'0 = x0 ; t_Pair__1'0 = x1} -> resolve'1 x1 /\ resolve'2 x0
      end
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate inv'3 (_1 : t_U'0)
  
  predicate inv'1 (_1 : t_Pair'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Pair'0 [inv'1 x] . inv'1 x
  = match x with
    | {t_Pair__0'0 = a_0 ; t_Pair__1'0 = a_1} -> inv'2 a_0 /\ inv'3 a_1
    end
  
  predicate invariant'0 (self : t_Pair'0) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : t_Pair'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Pair'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'0 [#"10.rs" 6 9 6 16] (self : t_Pair'0) =
    [%#s101] resolve'2 self.t_Pair__0'0 /\ resolve'1 self.t_Pair__1'0
  
  goal refines : [%#s100] forall self : t_Pair'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
