module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module C06_Ix_Tgt
  type self   
  type tgt   
end
module C06_Ix_Ix_Interface
  type self   
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  clone C06_Ix_Tgt as Tgt0 with type self = self
  val ix [@cfg:stackify] (self : self) (ix : usize) : Tgt0.tgt
end
module C06_Ix_Ix
  type self   
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  clone C06_Ix_Tgt as Tgt0 with type self = self
  val ix [@cfg:stackify] (self : self) (ix : usize) : Tgt0.tgt
end
module C06_Test_Interface
  type t   
  use prelude.Prelude
  clone C06_Ix_Tgt as Tgt0 with type self = t
  val test [@cfg:stackify] (a : t) : Tgt0.tgt
end
module C06_Test
  type t   
  use prelude.Prelude
  clone C06_Ix_Tgt as Tgt0 with type self = t
  use mach.int.Int
  use mach.int.UInt64
  clone C06_Ix_Ix_Interface as Ix0 with type self = t, type Tgt0.tgt = Tgt0.tgt
  let rec cfg test [@cfg:stackify] (a : t) : Tgt0.tgt = 
  var _0 : Tgt0.tgt;
  var a_1 : t;
  var _2 : t;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _2 <- a_1;
    assume { (fun x -> true) a_1 };
    _0 <- Ix0.ix _2 (0 : usize);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
