module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module C06_Ix
  type self   
  type tgt   
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  val ix (self : self) (ix : usize) : tgt
end
module Core_Marker_Sized
  type self   
end
module Core_Cmp_PartialEq
  type self   
  type rhs   
  use prelude.Prelude
  val eq (self : self) (other : rhs) : bool
  val ne (self : self) (other : rhs) : bool
end
module Core_Cmp_Eq
  type self   
  clone Core_Cmp_PartialEq as PartialEq0 with type self = self, type rhs = self
  use prelude.Prelude
  val assert_receiver_is_total_eq (self : self) : ()
end
module C06_Test_Interface
  type t   
  use prelude.Prelude
  clone C06_Ix as Ix0 with type self = t
  val test (a : t) : Ix0.tgt
end
module C06_Test
  type t   
  use prelude.Prelude
  clone C06_Ix as Ix1 with type self = t
  clone Core_Cmp_Eq as Eq2 with type self = Ix1.tgt
  clone Core_Marker_Sized as Sized0 with type self = t
  use mach.int.Int
  use mach.int.UInt64
  let rec cfg test (a : t) : Ix1.tgt = 
  var _0 : Ix1.tgt;
  var a_1 : t;
  var _2 : t;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _2 <- a_1;
    assume { (fun x -> true) a_1 };
    _0 <- Ix1.ix _2 (0 : usize);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
