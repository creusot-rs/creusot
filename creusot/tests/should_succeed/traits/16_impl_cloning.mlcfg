
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module C16ImplCloning_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_vec 't =
    | C_Vec (Alloc_Vec_Vec_Type.t_vec 't (Alloc_Alloc_Global_Type.t_global))
    
end
module C16ImplCloning_Test
  type t
  use C16ImplCloning_Vec_Type as C16ImplCloning_Vec_Type
  use prelude.Borrow
  predicate invariant0 (self : borrowed (C16ImplCloning_Vec_Type.t_vec t))
  val invariant0 (self : borrowed (C16ImplCloning_Vec_Type.t_vec t)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed (C16ImplCloning_Vec_Type.t_vec t))
  val inv0 (_x : borrowed (C16ImplCloning_Vec_Type.t_vec t)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed (C16ImplCloning_Vec_Type.t_vec t) . inv0 x = true
  use seq.Seq
  function shallow_model1 [#"../16_impl_cloning.rs" 11 4 11 50] (self : C16ImplCloning_Vec_Type.t_vec t) : Seq.seq t
  val shallow_model1 [#"../16_impl_cloning.rs" 11 4 11 50] (self : C16ImplCloning_Vec_Type.t_vec t) : Seq.seq t
    ensures { result = shallow_model1 self }
    
  function shallow_model0 (self : borrowed (C16ImplCloning_Vec_Type.t_vec t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model1 ( * self)
  val shallow_model0 (self : borrowed (C16ImplCloning_Vec_Type.t_vec t)) : Seq.seq t
    ensures { result = shallow_model0 self }
    
  predicate resolve0 (self : borrowed (C16ImplCloning_Vec_Type.t_vec t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (C16ImplCloning_Vec_Type.t_vec t)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg test [#"../16_impl_cloning.rs" 17 0 17 30] [@cfg:stackify] [@cfg:subregion_analysis] (x : borrowed (C16ImplCloning_Vec_Type.t_vec t)) : ()
    requires {[#"../16_impl_cloning.rs" 17 15 17 16] inv0 x}
    ensures { [#"../16_impl_cloning.rs" 16 10 16 21] shallow_model0 x = shallow_model1 ( * x) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : borrowed (C16ImplCloning_Vec_Type.t_vec t) = x;
  {
    goto BB0
  }
  BB0 {
    assert { [@expl:type invariant] inv0 x };
    assume { resolve0 x };
    [#"../16_impl_cloning.rs" 17 31 17 33] _0 <- ([#"../16_impl_cloning.rs" 17 31 17 33] ());
    return _0
  }
  
end
module C16ImplCloning_Impl0
  type t
end
