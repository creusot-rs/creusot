
module C18TraitLaws_UsesOp_Impl
  type t
  function op0 [#"../18_trait_laws.rs" 6 4 6 33] (self : t) (_2 : t) : t
  val op0 [#"../18_trait_laws.rs" 6 4 6 33] (self : t) (_2 : t) : t
    ensures { result = op0 self _2 }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  function reflexive0 [#"../18_trait_laws.rs" 10 4 10 35] (a : t) (b : t) : ()
  val reflexive0 [#"../18_trait_laws.rs" 10 4 10 35] (a : t) (b : t) : ()
    requires {[#"../18_trait_laws.rs" 10 17 10 18] inv0 a}
    requires {[#"../18_trait_laws.rs" 10 26 10 27] inv0 b}
    ensures { result = reflexive0 a b }
    
  axiom reflexive0_spec : forall a : t, b : t . ([#"../18_trait_laws.rs" 10 17 10 18] inv0 a)
   -> ([#"../18_trait_laws.rs" 10 26 10 27] inv0 b)  -> ([#"../18_trait_laws.rs" 9 14 9 32] op0 a b = op0 b a)
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : t . inv0 x = true
  constant x  : t
  constant y  : t
  function uses_op [#"../18_trait_laws.rs" 16 0 16 48] (x : t) (y : t) : bool
  goal vc_uses_op : ([#"../18_trait_laws.rs" 16 35 16 36] inv0 y)
   -> ([#"../18_trait_laws.rs" 16 29 16 30] inv0 x)
   -> ([#"../18_trait_laws.rs" 15 10 15 24] (op0 x y = op0 y x) = true)
end
module C18TraitLaws_Impl0_Reflexive_Impl
  function op0 [#"../18_trait_laws.rs" 23 4 23 32] (self : ()) (_2 : ()) : () =
    [#"../18_trait_laws.rs" 24 8 24 10] ()
  val op0 [#"../18_trait_laws.rs" 23 4 23 32] (self : ()) (_2 : ()) : ()
    ensures { result = op0 self _2 }
    
  constant a  : ()
  constant b  : ()
  function reflexive [#"../18_trait_laws.rs" 30 4 30 34] (a : ()) (b : ()) : ()
  goal vc_reflexive : [#"../18_trait_laws.rs" 29 14 29 32] op0 a b = op0 b a
end
module C18TraitLaws_ImplLaws_Impl
  function op0 [#"../18_trait_laws.rs" 23 4 23 32] (self : ()) (_2 : ()) : () =
    [#"../18_trait_laws.rs" 24 8 24 10] ()
  val op0 [#"../18_trait_laws.rs" 23 4 23 32] (self : ()) (_2 : ()) : ()
    ensures { result = op0 self _2 }
    
  function reflexive0 [#"../18_trait_laws.rs" 30 4 30 34] (a : ()) (b : ()) : () =
    [#"../18_trait_laws.rs" 27 4 27 10] ()
  val reflexive0 [#"../18_trait_laws.rs" 30 4 30 34] (a : ()) (b : ()) : ()
    ensures { result = reflexive0 a b }
    
  axiom reflexive0_spec : forall a : (), b : () . [#"../18_trait_laws.rs" 29 14 29 32] op0 a b = op0 b a
  constant _1  : ()
  function impl_laws [#"../18_trait_laws.rs" 36 0 36 26] (_1 : ()) : bool
  goal vc_impl_laws : [#"../18_trait_laws.rs" 35 10 35 24] (op0 () () = op0 () ()) = true
end
module C18TraitLaws_Impl0
  predicate invariant0 (self : ()) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : ()) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : ())
  val inv0 (_x : ()) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : () . inv0 x = true
  function op0 [#"../18_trait_laws.rs" 23 4 23 32] (self : ()) (_2 : ()) : () =
    [#"../18_trait_laws.rs" 24 8 24 10] ()
  val op0 [#"../18_trait_laws.rs" 23 4 23 32] (self : ()) (_2 : ()) : ()
    ensures { result = op0 self _2 }
    
  goal reflexive_refn : [#"../18_trait_laws.rs" 30 4 30 34] forall a : () . forall b : () . inv0 b /\ inv0 a
   -> (forall result : () . op0 a b = op0 b a  -> op0 a b = op0 b a)
end
