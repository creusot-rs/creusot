module M_mapping_test__incr [#"mapping_test.rs" 29 0 29 18]
  let%span smapping_test0 = "mapping_test.rs" 30 16 30 31
  let%span smapping_test1 = "mapping_test.rs" 31 14 31 15
  let%span smapping_test2 = "mapping_test.rs" 34 19 34 50
  let%span smapping_test3 = "mapping_test.rs" 26 12 26 24
  let%span smapping_test4 = "mapping_test.rs" 27 12 27 26
  let%span smapping_test5 = "mapping_test.rs" 28 11 28 37
  let%span smapping_test6 = "mapping_test.rs" 19 8 20 72
  let%span ssnapshot7 = "../../../creusot-contracts/src/snapshot.rs" 52 20 52 39
  let%span smodel8 = "../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span sresolve9 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel10 = "../../../creusot-contracts/src/model.rs" 92 8 92 22
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int32
  
  type t_T'0  =
    { t_T__a'0: int32 }
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed (t_T'0)) =
    [%#sresolve9] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_T'0)) =
    resolve'1 _1
  
  use prelude.prelude.Int
  
  use map.Map
  
  use prelude.prelude.Int32
  
  use map.Map
  
  function view'0 [#"mapping_test.rs" 21 4 21 33] (self : t_T'0) : Map.map int int
  
  axiom view'0_spec : forall self : t_T'0 . [%#smapping_test6] forall i : int . Map.get (view'0 self) i
  = (if 0 <= i /\ i < Int32.to_int self.t_T__a'0 then 1 else 0)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function view'2 (self : borrowed (t_T'0)) : Map.map int int =
    [%#smodel8] view'0 self.current
  
  function view'3 (self : borrowed (t_T'0)) : Map.map int int =
    [%#smodel10] view'2 self
  
  function view'1 (self : Snapshot.snap_ty (borrowed (t_T'0))) : Map.map int int =
    [%#ssnapshot7] view'3 (Snapshot.inner self)
  
  use map.Map
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec incr'0 (t:borrowed (t_T'0)) (return'  (ret:()))= {[@expl:incr requires #0] [%#smapping_test3] 0
    <= Int32.to_int (t.current).t_T__a'0}
    {[@expl:incr requires #1] [%#smapping_test4] Int32.to_int (t.current).t_T__a'0 < 1000}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_t <- [%#smapping_test0] Snapshot.new t ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Int32.add {(t.current).t_T__a'0} {[%#smapping_test1] (1 : int32)}
          (fun (_ret':int32) ->  [ &t <- { t with current = { t_T__a'0 = _ret' } } ] s1)
      | s1 = -{resolve'0 t}- s2
      | s2 = {[@expl:assertion] [%#smapping_test2] view'0 t.final
        = Map.set (view'1 old_t) (Int32.to_int ((Snapshot.inner old_t).current).t_T__a'0) 1}
        s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & t : borrowed (t_T'0) = t | & old_t : Snapshot.snap_ty (borrowed (t_T'0)) = any_l () ] 
    [ return' (result:())-> {[@expl:incr ensures] [%#smapping_test5] view'0 t.final
      = Map.set (view'2 t) (Int32.to_int (t.current).t_T__a'0) 1}
      (! return' {result}) ]
    
end
module M_mapping_test__f [#"mapping_test.rs" 37 0 37 10]
  let%span smapping_test0 = "mapping_test.rs" 38 23 38 25
  let%span smapping_test1 = "mapping_test.rs" 39 19 39 34
  let%span smapping_test2 = "mapping_test.rs" 40 19 40 34
  let%span smapping_test3 = "mapping_test.rs" 42 19 42 34
  let%span smapping_test4 = "mapping_test.rs" 43 19 43 34
  let%span smapping_test5 = "mapping_test.rs" 19 8 20 72
  let%span smapping_test6 = "mapping_test.rs" 26 12 26 24
  let%span smapping_test7 = "mapping_test.rs" 27 12 27 26
  let%span smapping_test8 = "mapping_test.rs" 28 11 28 37
  let%span smodel9 = "../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span sresolve10 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Int32
  
  type t_T'0  =
    { t_T__a'0: int32 }
  
  use prelude.prelude.Int
  
  use map.Map
  
  use prelude.prelude.Int32
  
  use map.Map
  
  function view'0 [#"mapping_test.rs" 21 4 21 33] (self : t_T'0) : Map.map int int
  
  axiom view'0_spec : forall self : t_T'0 . [%#smapping_test5] forall i : int . Map.get (view'0 self) i
  = (if 0 <= i /\ i < Int32.to_int self.t_T__a'0 then 1 else 0)
  
  use prelude.prelude.Borrow
  
  function view'1 (self : borrowed (t_T'0)) : Map.map int int =
    [%#smodel9] view'0 self.current
  
  use map.Map
  
  let rec incr'0 (t:borrowed (t_T'0)) (return'  (ret:()))= {[@expl:incr requires #0] [%#smapping_test6] 0
    <= Int32.to_int (t.current).t_T__a'0}
    {[@expl:incr requires #1] [%#smapping_test7] Int32.to_int (t.current).t_T__a'0 < 1000}
    any
    [ return' (result:())-> {[%#smapping_test8] view'0 t.final
      = Map.set (view'1 t) (Int32.to_int (t.current).t_T__a'0) 1}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed (t_T'0)) =
    [%#sresolve10] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_T'0)) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec f'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- { t_T__a'0 = ([%#smapping_test0] (42 : int32)) } ] s1
      | s1 = {[@expl:assertion] [%#smapping_test1] Map.get (view'0 x) 13 = 1} s2
      | s2 = {[@expl:assertion] [%#smapping_test2] Map.get (view'0 x) 42 = 0} s3
      | s3 = Borrow.borrow_mut <t_T'0> {x} (fun (_ret':borrowed (t_T'0)) ->  [ &_8 <- _ret' ]  [ &x <- _ret'.final ] s4)
      | s4 = Borrow.borrow_final <t_T'0> {_8.current} {Borrow.get_id _8}
          (fun (_ret':borrowed (t_T'0)) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = _ret'.final } ] s5)
      | s5 = incr'0 {_7} (fun (_ret':()) ->  [ &_6 <- _ret' ] s6)
      | s6 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:assertion] [%#smapping_test3] Map.get (view'0 x) 13 = 1} s2
      | s2 = {[@expl:assertion] [%#smapping_test4] Map.get (view'0 x) 42 = 1} s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : t_T'0 = any_l ()
    | & _6 : () = any_l ()
    | & _7 : borrowed (t_T'0) = any_l ()
    | & _8 : borrowed (t_T'0) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
