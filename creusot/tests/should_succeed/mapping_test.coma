
module MappingTest_T_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_t  =
    | C_T int32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_t (input:t_t) (ret  (a:int32))= any
    [ good (a:int32)-> {C_T a = input} (! ret {a}) | bad (a:int32)-> {C_T a <> input} {false} any ]
    
  
  function t_a (self : t_t) : int32 =
    match self with
      | C_T a -> a
      end
end
module MappingTest_Incr
  let%span smapping_test0 = "../mapping_test.rs" 31 16 31 31
  
  let%span smapping_test1 = "../mapping_test.rs" 32 14 32 15
  
  let%span smapping_test2 = "../mapping_test.rs" 35 19 35 50
  
  let%span smapping_test3 = "../mapping_test.rs" 27 12 27 24
  
  let%span smapping_test4 = "../mapping_test.rs" 28 12 28 26
  
  let%span smapping_test5 = "../mapping_test.rs" 29 11 29 37
  
  let%span span6 = "../mapping_test.rs" 19 4 21 74
  
  let%span span7 = "../mapping_test.rs" 23 8 23 14
  
  let%span span8 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span9 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span10 = "../../../../creusot-contracts/src/snapshot.rs" 28 20 28 48
  
  let%span span11 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int
  
  use map.Map
  
  use MappingTest_T_Type as T'0
  
  use prelude.prelude.Int32
  
  use MappingTest_T_Type as MappingTest_T_Type
  
  use map.Map
  
  use prelude.prelude.Int
  
  function shallow_model'0 [#"../mapping_test.rs" 22 4 22 50] (self : T'0.t_t) : Map.map int int
  
  axiom shallow_model'0_spec : forall self : T'0.t_t . [%#span6] forall i : int . Map.get (shallow_model'0 self) i
  = (if 0 <= i /\ i < Int32.to_int (MappingTest_T_Type.t_a self) then 1 else 0)
  
  use prelude.prelude.Borrow
  
  function shallow_model'2 (self : borrowed (T'0.t_t)) : Map.map int int =
    [%#span8] shallow_model'0 ( * self)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use map.Map
  
  use prelude.prelude.Snapshot
  
  function shallow_model'3 (self : borrowed (T'0.t_t)) : Map.map int int =
    [%#span9] shallow_model'2 self
  
  function shallow_model'1 (self : Snapshot.snap_ty (borrowed (T'0.t_t))) : Map.map int int =
    [%#span10] shallow_model'3 (Snapshot.inner self)
  
  predicate resolve'0 (self : borrowed (T'0.t_t)) =
    [%#span11]  ^ self =  * self
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Snapshot
  
  let rec incr (t:borrowed (T'0.t_t)) (return'  (ret:()))= {[%#smapping_test4] Int32.to_int (MappingTest_T_Type.t_a ( * t))
    < 1000}
    {[%#smapping_test3] 0 <= Int32.to_int (MappingTest_T_Type.t_a ( * t))}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_t <- [%#smapping_test0] Snapshot.new t ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = T'0.t_t { * t}
          (fun (ra'0:int32) ->
            Int32.add {ra'0} {[%#smapping_test1] (1 : int32)}
              (fun (_ret':int32) ->
                T'0.t_t { * t} (fun (l_a'0:int32) ->  [ &t <- { t with current = T'0.C_T _ret' ; } ] s1)))
      | s1 = -{resolve'0 t}- s2
      | s2 = {[@expl:assertion] [%#smapping_test2] shallow_model'0 ( ^ t)
        = Map.set (shallow_model'1 old_t) (Int32.to_int (MappingTest_T_Type.t_a ( * Snapshot.inner old_t))) 1}
        s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () | & t : borrowed (T'0.t_t) = t | & old_t : Snapshot.snap_ty (borrowed (T'0.t_t)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#smapping_test5] shallow_model'0 ( ^ t)
      = Map.set (shallow_model'2 t) (Int32.to_int (MappingTest_T_Type.t_a ( * t))) 1}
      (! return' {result}) ]
    
end
module MappingTest_F
  let%span smapping_test0 = "../mapping_test.rs" 39 23 39 25
  
  let%span smapping_test1 = "../mapping_test.rs" 40 19 40 34
  
  let%span smapping_test2 = "../mapping_test.rs" 41 19 41 34
  
  let%span smapping_test3 = "../mapping_test.rs" 43 19 43 34
  
  let%span smapping_test4 = "../mapping_test.rs" 44 19 44 34
  
  let%span span5 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span6 = "../mapping_test.rs" 19 4 21 74
  
  let%span span7 = "../mapping_test.rs" 23 8 23 14
  
  let%span span8 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span9 = "../mapping_test.rs" 27 12 27 24
  
  let%span span10 = "../mapping_test.rs" 28 12 28 26
  
  let%span span11 = "../mapping_test.rs" 29 11 29 37
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use MappingTest_T_Type as T'0
  
  predicate resolve'0 (self : borrowed (T'0.t_t)) =
    [%#span5]  ^ self =  * self
  
  use prelude.prelude.Int
  
  use map.Map
  
  use map.Map
  
  use prelude.prelude.Int32
  
  use MappingTest_T_Type as MappingTest_T_Type
  
  use map.Map
  
  use prelude.prelude.Int
  
  function shallow_model'0 [#"../mapping_test.rs" 22 4 22 50] (self : T'0.t_t) : Map.map int int
  
  axiom shallow_model'0_spec : forall self : T'0.t_t . [%#span6] forall i : int . Map.get (shallow_model'0 self) i
  = (if 0 <= i /\ i < Int32.to_int (MappingTest_T_Type.t_a self) then 1 else 0)
  
  function shallow_model'1 (self : borrowed (T'0.t_t)) : Map.map int int =
    [%#span8] shallow_model'0 ( * self)
  
  let rec incr'0 (t:borrowed (T'0.t_t)) (return'  (ret:()))= {[@expl:precondition] [%#span10] Int32.to_int (MappingTest_T_Type.t_a ( * t))
    < 1000}
    {[@expl:precondition] [%#span9] 0 <= Int32.to_int (MappingTest_T_Type.t_a ( * t))}
    any
    [ return' (result:())-> {[%#span11] shallow_model'0 ( ^ t)
      = Map.set (shallow_model'1 t) (Int32.to_int (MappingTest_T_Type.t_a ( * t))) 1}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- T'0.C_T ([%#smapping_test0] (42 : int32)) ] s1
      | s1 = {[@expl:assertion] [%#smapping_test1] Map.get (shallow_model'0 x) 13 = 1} s2
      | s2 = {[@expl:assertion] [%#smapping_test2] Map.get (shallow_model'0 x) 42 = 0} s3
      | s3 = Borrow.borrow_mut <T'0.t_t> {x} (fun (_ret':borrowed (T'0.t_t)) ->  [ &_8 <- _ret' ]  [ &x <-  ^ _8 ] s4)
      | s4 = Borrow.borrow_final <T'0.t_t> { * _8} {Borrow.get_id _8}
          (fun (_ret':borrowed (T'0.t_t)) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = ( ^ _7) ; } ] s5)
      | s5 = incr'0 {_7} (fun (_ret':()) ->  [ &_6 <- _ret' ] s6)
      | s6 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:assertion] [%#smapping_test3] Map.get (shallow_model'0 x) 13 = 1} s2
      | s2 = {[@expl:assertion] [%#smapping_test4] Map.get (shallow_model'0 x) 42 = 1} s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : T'0.t_t = any_l ()
    | & _6 : () = any_l ()
    | & _7 : borrowed (T'0.t_t) = any_l ()
    | & _8 : borrowed (T'0.t_t) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module MappingTest_Impl0
  
end
