
module MappingTest_T_Type
  use prelude.Int32
  use prelude.Int
  type t_t  =
    | C_T int32
    
  function any_l (_ : 'b) : 'a
  let rec t_t (input:t_t) (ret  (a:int32))= any
    [ good (a:int32)-> {C_T a = input} (! ret {a}) | bad (a:int32)-> {C_T a <> input} {false} any ]
    
  function t_a (self : t_t) : int32 =
    match self with
      | C_T a -> a
      end
end
module MappingTest_Incr
  use prelude.Int
  use map.Map
  use MappingTest_T_Type as MappingTest_T_Type
  use prelude.Int32
  use map.Map
  use prelude.Int
  function shallow_model'0 [#"../mapping_test.rs" 22 4 22 50] (self : MappingTest_T_Type.t_t) : Map.map int int
  let rec shallow_model'0 (self:MappingTest_T_Type.t_t) (return'  (ret:Map.map int int))= any
    [ return' (result:Map.map int int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  axiom shallow_model'0_spec : forall self : MappingTest_T_Type.t_t . [#"../mapping_test.rs" 19 4 21 74] forall i : int . Map.get (shallow_model'0 self) i
  = (if 0 <= i /\ i < Int32.to_int (MappingTest_T_Type.t_a self) then 1 else 0)
  use prelude.Borrow
  function shallow_model'2 (self : borrowed (MappingTest_T_Type.t_t)) : Map.map int int =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'0 ( * self)
  let rec shallow_model'2 (self:borrowed (MappingTest_T_Type.t_t)) (return'  (ret:Map.map int int))= any
    [ return' (result:Map.map int int)-> {result = shallow_model'2 self} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Intrinsic
  use map.Map
  use prelude.Snapshot
  function shallow_model'3 (self : borrowed (MappingTest_T_Type.t_t)) : Map.map int int =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'2 self
  let rec shallow_model'3 (self:borrowed (MappingTest_T_Type.t_t)) (return'  (ret:Map.map int int))= any
    [ return' (result:Map.map int int)-> {result = shallow_model'3 self} (! return' {result}) ]
    
  function shallow_model'1 (self : Snapshot.snap_ty (borrowed (MappingTest_T_Type.t_t))) : Map.map int int =
    [#"../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model'3 (Snapshot.inner self)
  let rec shallow_model'1 (self:Snapshot.snap_ty (borrowed (MappingTest_T_Type.t_t))) (return'  (ret:Map.map int int))= any
    [ return' (result:Map.map int int)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (MappingTest_T_Type.t_t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (MappingTest_T_Type.t_t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int32
  use prelude.Snapshot
  let rec incr (t:borrowed (MappingTest_T_Type.t_t)) (return'  (ret:()))= {[#"../mapping_test.rs" 28 12 28 26] Int32.to_int (MappingTest_T_Type.t_a ( * t))
    < 1000}
    {[#"../mapping_test.rs" 27 12 27 24] 0 <= Int32.to_int (MappingTest_T_Type.t_a ( * t))}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_t <- [#"../mapping_test.rs" 31 16 31 31] Snapshot.new t ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = MappingTest_T_Type.t_t { * t}
          (fun (ra'0:int32) ->
            Int32.add {ra'0} {[#"../mapping_test.rs" 32 14 32 15] (1 : int32)}
              (fun (_ret':int32) ->
                MappingTest_T_Type.t_t { * t}
                  (fun (l_a'0:int32) ->
                     [ &t <- { t with current = (MappingTest_T_Type.C_T _ret' : MappingTest_T_Type.t_t) ; } ] 
                    s1)))
      | s1 = -{resolve'0 t}- s2
      | s2 = {[@expl:assertion] [#"../mapping_test.rs" 35 19 35 50] shallow_model'0 ( ^ t)
        = Map.set (shallow_model'1 old_t) (Int32.to_int (MappingTest_T_Type.t_a ( * Snapshot.inner old_t))) 1}
        s3
      | s3 =  [ &_0 <- [#"../mapping_test.rs" 30 19 36 1] () ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & t : borrowed (MappingTest_T_Type.t_t) = t
    | & old_t : Snapshot.snap_ty (borrowed (MappingTest_T_Type.t_t)) = any_l () : Snapshot.snap_ty (borrowed (MappingTest_T_Type.t_t)) ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../mapping_test.rs" 29 11 29 37] shallow_model'0 ( ^ t)
      = Map.set (shallow_model'2 t) (Int32.to_int (MappingTest_T_Type.t_a ( * t))) 1}
      (! return' {result}) ]
    
end
module MappingTest_F
  use prelude.Intrinsic
  use prelude.Borrow
  use MappingTest_T_Type as MappingTest_T_Type
  predicate resolve'0 (self : borrowed (MappingTest_T_Type.t_t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (MappingTest_T_Type.t_t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  use map.Map
  use map.Map
  use prelude.Int32
  use map.Map
  use prelude.Int
  function shallow_model'0 [#"../mapping_test.rs" 22 4 22 50] (self : MappingTest_T_Type.t_t) : Map.map int int
  let rec shallow_model'0 (self:MappingTest_T_Type.t_t) (return'  (ret:Map.map int int))= any
    [ return' (result:Map.map int int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  axiom shallow_model'0_spec : forall self : MappingTest_T_Type.t_t . [#"../mapping_test.rs" 19 4 21 74] forall i : int . Map.get (shallow_model'0 self) i
  = (if 0 <= i /\ i < Int32.to_int (MappingTest_T_Type.t_a self) then 1 else 0)
  function shallow_model'1 (self : borrowed (MappingTest_T_Type.t_t)) : Map.map int int =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'0 ( * self)
  let rec shallow_model'1 (self:borrowed (MappingTest_T_Type.t_t)) (return'  (ret:Map.map int int))= any
    [ return' (result:Map.map int int)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  let rec incr'0 (t:borrowed (MappingTest_T_Type.t_t)) (return'  (ret:()))= {[@expl:precondition] [#"../mapping_test.rs" 28 12 28 26] Int32.to_int (MappingTest_T_Type.t_a ( * t))
    < 1000}
    {[@expl:precondition] [#"../mapping_test.rs" 27 12 27 24] 0 <= Int32.to_int (MappingTest_T_Type.t_a ( * t))}
    any
    [ return' (result:())-> {[#"../mapping_test.rs" 29 11 29 37] shallow_model'0 ( ^ t)
      = Map.set (shallow_model'1 t) (Int32.to_int (MappingTest_T_Type.t_a ( * t))) 1}
      (! return' {result}) ]
    
  use prelude.Int32
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- MappingTest_T_Type.C_T ([#"../mapping_test.rs" 39 23 39 25] (42 : int32)) ] s1
      | s1 = {[@expl:assertion] [#"../mapping_test.rs" 40 19 40 34] Map.get (shallow_model'0 x) 13 = 1} s2
      | s2 = {[@expl:assertion] [#"../mapping_test.rs" 41 19 41 34] Map.get (shallow_model'0 x) 42 = 0} s3
      | s3 = Borrow.borrow_mut <MappingTest_T_Type.t_t> {x}
          (fun (_ret':borrowed (MappingTest_T_Type.t_t)) ->  [ &_8 <- _ret' ]  [ &x <-  ^ _8 ] s4)
      | s4 = Borrow.borrow_final <MappingTest_T_Type.t_t> { * _8} {Borrow.get_id _8}
          (fun (_ret':borrowed (MappingTest_T_Type.t_t)) ->
             [ &_7 <- _ret' ] 
             [ &_8 <- { _8 with current = ( ^ _7) ; } ] 
            s5)
      | s5 = incr'0 {_7} (fun (_ret':()) ->  [ &_6 <- _ret' ] s6)
      | s6 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:assertion] [#"../mapping_test.rs" 43 19 43 34] Map.get (shallow_model'0 x) 13 = 1} s2
      | s2 = {[@expl:assertion] [#"../mapping_test.rs" 44 19 44 34] Map.get (shallow_model'0 x) 42 = 1} s3
      | s3 =  [ &_0 <- [#"../mapping_test.rs" 38 11 45 1] () ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : MappingTest_T_Type.t_t = any_l () : MappingTest_T_Type.t_t
    | & _6 : () = any_l () : ()
    | & _7 : borrowed (MappingTest_T_Type.t_t) = any_l () : borrowed (MappingTest_T_Type.t_t)
    | & _8 : borrowed (MappingTest_T_Type.t_t) = any_l () : borrowed (MappingTest_T_Type.t_t) ]
     [ return' (result:())-> (! return' {result}) ] 
end
module MappingTest_Impl0
  
end
