module T_mapping_test__T [#"mapping_test.rs" 9 0 9 8]
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_T  =
    | C_T int32
  
  let rec t_T (input:t_T) (ret  (a:int32))= any [ good (a:int32)-> {C_T a = input} (! ret {a}) ] 
  
  function t_T__a (self : t_T) : int32 =
    match self with
      | C_T a -> a
      end
end
module M_mapping_test__incr [#"mapping_test.rs" 30 0 30 18]
  let%span smapping_test0 = "mapping_test.rs" 31 16 31 31
  let%span smapping_test1 = "mapping_test.rs" 32 14 32 15
  let%span smapping_test2 = "mapping_test.rs" 35 19 35 50
  let%span smapping_test3 = "mapping_test.rs" 27 12 27 24
  let%span smapping_test4 = "mapping_test.rs" 28 12 28 26
  let%span smapping_test5 = "mapping_test.rs" 29 11 29 37
  let%span smapping_test6 = "mapping_test.rs" 19 4 21 74
  let%span smapping_test7 = "mapping_test.rs" 23 8 23 14
  let%span ssnapshot8 = "../../../creusot-contracts/src/snapshot.rs" 27 20 27 39
  let%span smodel9 = "../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve10 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span smodel11 = "../../../creusot-contracts/src/model.rs" 91 8 91 22
  
  use map.Map
  
  use T_mapping_test__T as T'0
  
  use prelude.prelude.Int32
  
  use T_mapping_test__T as T_mapping_test__T
  
  use map.Map
  
  use prelude.prelude.Int
  
  function view'0 [#"mapping_test.rs" 22 4 22 33] (self : T'0.t_T) : Map.map int int
  
  axiom view'0_spec : forall self : T'0.t_T . [%#smapping_test6] forall i : int . Map.get (view'0 self) i
  = (if 0 <= i /\ i < Int32.to_int (T_mapping_test__T.t_T__a self) then 1 else 0)
  
  use prelude.prelude.Borrow
  
  function view'2 (self : borrowed (T'0.t_T)) : Map.map int int =
    [%#smodel9] view'0 self.current
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use map.Map
  
  use prelude.prelude.Snapshot
  
  function view'3 (self : borrowed (T'0.t_T)) : Map.map int int =
    [%#smodel11] view'2 self
  
  function view'1 (self : Snapshot.snap_ty (borrowed (T'0.t_T))) : Map.map int int =
    [%#ssnapshot8] view'3 (Snapshot.inner self)
  
  predicate resolve'1 (self : borrowed (T'0.t_T)) =
    [%#sresolve10] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (T'0.t_T)) =
    resolve'1 _1
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec incr (t:borrowed (T'0.t_T)) (return'  (ret:()))= {[%#smapping_test4] Int32.to_int (T_mapping_test__T.t_T__a t.current)
    < 1000}
    {[%#smapping_test3] 0 <= Int32.to_int (T_mapping_test__T.t_T__a t.current)}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_t <- [%#smapping_test0] Snapshot.new t ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = T'0.t_T {t.current}
          (fun (ra'0:int32) ->
            Int32.add {ra'0} {[%#smapping_test1] (1 : int32)}
              (fun (_ret':int32) ->
                T'0.t_T {t.current} (fun (ra'1:int32) ->  [ &t <- { t with current = T'0.C_T _ret' ; } ] s1)))
      | s1 = -{resolve'0 t}- s2
      | s2 = {[@expl:assertion] [%#smapping_test2] view'0 t.final
        = Map.set (view'1 old_t) (Int32.to_int (T_mapping_test__T.t_T__a (Snapshot.inner old_t).current)) 1}
        s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () | & t : borrowed (T'0.t_T) = t | & old_t : Snapshot.snap_ty (borrowed (T'0.t_T)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#smapping_test5] view'0 t.final
      = Map.set (view'2 t) (Int32.to_int (T_mapping_test__T.t_T__a t.current)) 1}
      (! return' {result}) ]
    
end
module M_mapping_test__f [#"mapping_test.rs" 38 0 38 10]
  let%span smapping_test0 = "mapping_test.rs" 39 23 39 25
  let%span smapping_test1 = "mapping_test.rs" 40 19 40 34
  let%span smapping_test2 = "mapping_test.rs" 41 19 41 34
  let%span smapping_test3 = "mapping_test.rs" 43 19 43 34
  let%span smapping_test4 = "mapping_test.rs" 44 19 44 34
  let%span smapping_test5 = "mapping_test.rs" 19 4 21 74
  let%span smapping_test6 = "mapping_test.rs" 23 8 23 14
  let%span smapping_test7 = "mapping_test.rs" 27 12 27 24
  let%span smapping_test8 = "mapping_test.rs" 28 12 28 26
  let%span smapping_test9 = "mapping_test.rs" 29 11 29 37
  let%span smodel10 = "../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve11 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use T_mapping_test__T as T'0
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed (T'0.t_T)) =
    [%#sresolve11] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (T'0.t_T)) =
    resolve'1 _1
  
  use map.Map
  
  use map.Map
  
  use prelude.prelude.Int32
  
  use T_mapping_test__T as T_mapping_test__T
  
  use map.Map
  
  use prelude.prelude.Int
  
  function view'0 [#"mapping_test.rs" 22 4 22 33] (self : T'0.t_T) : Map.map int int
  
  axiom view'0_spec : forall self : T'0.t_T . [%#smapping_test5] forall i : int . Map.get (view'0 self) i
  = (if 0 <= i /\ i < Int32.to_int (T_mapping_test__T.t_T__a self) then 1 else 0)
  
  function view'1 (self : borrowed (T'0.t_T)) : Map.map int int =
    [%#smodel10] view'0 self.current
  
  let rec incr'0 (t:borrowed (T'0.t_T)) (return'  (ret:()))= {[@expl:precondition] [%#smapping_test8] Int32.to_int (T_mapping_test__T.t_T__a t.current)
    < 1000}
    {[@expl:precondition] [%#smapping_test7] 0 <= Int32.to_int (T_mapping_test__T.t_T__a t.current)}
    any
    [ return' (result:())-> {[%#smapping_test9] view'0 t.final
      = Map.set (view'1 t) (Int32.to_int (T_mapping_test__T.t_T__a t.current)) 1}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  meta "compute_max_steps" 1000000
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- T'0.C_T ([%#smapping_test0] (42 : int32)) ] s1
      | s1 = {[@expl:assertion] [%#smapping_test1] Map.get (view'0 x) 13 = 1} s2
      | s2 = {[@expl:assertion] [%#smapping_test2] Map.get (view'0 x) 42 = 0} s3
      | s3 = Borrow.borrow_mut <T'0.t_T> {x}
          (fun (_ret':borrowed (T'0.t_T)) ->  [ &_8 <- _ret' ]  [ &x <- _ret'.final ] s4)
      | s4 = Borrow.borrow_final <T'0.t_T> {_8.current} {Borrow.get_id _8}
          (fun (_ret':borrowed (T'0.t_T)) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = _ret'.final ; } ] s5)
      | s5 = incr'0 {_7} (fun (_ret':()) ->  [ &_6 <- _ret' ] s6)
      | s6 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:assertion] [%#smapping_test3] Map.get (view'0 x) 13 = 1} s2
      | s2 = {[@expl:assertion] [%#smapping_test4] Map.get (view'0 x) 42 = 1} s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : T'0.t_T = any_l ()
    | & _6 : () = any_l ()
    | & _7 : borrowed (T'0.t_T) = any_l ()
    | & _8 : borrowed (T'0.t_T) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_mapping_test__qyi12358129970996173724 [#"mapping_test.rs" 13 0 13 15] (* <T as creusot_contracts::View> *)
  
end
