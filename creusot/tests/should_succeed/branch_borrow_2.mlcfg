
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module BranchBorrow2_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module BranchBorrow2_F
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = int32
  let rec cfg f [@cfg:stackify] [#"../branch_borrow_2.rs" 3 0 3 10] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : int32;
  var b_2 : int32;
  var c_3 : int32;
  var x_4 : borrowed int32;
  var y_5 : borrowed int32;
  var z_6 : borrowed int32;
  var w_7 : borrowed int32;
  var _8 : ();
  var _9 : int32;
  var _10 : borrowed int32;
  var _11 : borrowed int32;
  var _12 : borrowed int32;
  var _13 : ();
  var _14 : bool;
  var _15 : bool;
  var _16 : int32;
  var _17 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- (10 : int32);
    b_2 <- (10 : int32);
    c_3 <- (10 : int32);
    x_4 <- borrow_mut a_1;
    a_1 <-  ^ x_4;
    y_5 <- borrow_mut b_2;
    b_2 <-  ^ y_5;
    z_6 <- borrow_mut c_3;
    c_3 <-  ^ z_6;
    _9 <- (3 : int32);
    switch (_9 = 1)
      | True -> goto BB2
      | False -> switch (_9 = 2)
        | True -> goto BB3
        | False -> goto BB1
        end
      end
  }
  BB1 {
    assume { Resolve0.resolve x_4 };
    assume { Resolve0.resolve y_5 };
    z_6 <- { z_6 with current = (8 : int32) };
    _12 <- borrow_mut ( * z_6);
    z_6 <- { z_6 with current = ( ^ _12) };
    assume { Resolve0.resolve z_6 };
    assume { Resolve0.resolve w_7 };
    w_7 <- _12;
    _12 <- any borrowed int32;
    _8 <- ();
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve y_5 };
    assume { Resolve0.resolve z_6 };
    x_4 <- { x_4 with current = (6 : int32) };
    assume { Resolve0.resolve _10 };
    _10 <- x_4;
    x_4 <- any borrowed int32;
    assume { Resolve0.resolve w_7 };
    w_7 <- _10;
    _10 <- any borrowed int32;
    _8 <- ();
    goto BB4
  }
  BB3 {
    assume { Resolve0.resolve x_4 };
    assume { Resolve0.resolve z_6 };
    y_5 <- { y_5 with current = (7 : int32) };
    _11 <- borrow_mut ( * y_5);
    y_5 <- { y_5 with current = ( ^ _11) };
    assume { Resolve0.resolve y_5 };
    assume { Resolve0.resolve w_7 };
    w_7 <- _11;
    _11 <- any borrowed int32;
    _8 <- ();
    goto BB4
  }
  BB4 {
    w_7 <- { w_7 with current = (5 : int32) };
    assume { Resolve0.resolve w_7 };
    _16 <- c_3;
    _15 <- ([#"../branch_borrow_2.rs" 30 12 30 18] _16 = (5 : int32));
    _14 <- not _15;
    switch (_14)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    absurd
  }
  BB6 {
    _13 <- ();
    _0 <- ();
    return _0
  }
  
end
