
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Hashmap_List_Type
  type t_list 't =
    | C_Nil
    | C_Cons 't (t_list 't)
    
  let function cons_0 (self : t_list 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Nil -> any 't
      | C_Cons a _ -> a
      end
  let function cons_1 (self : t_list 't) : t_list 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Nil -> any t_list 't
      | C_Cons _ a -> a
      end
end
module Hashmap_Impl0_Clone_Interface
  type t
  use prelude.Borrow
  use Hashmap_List_Type as Hashmap_List_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Hashmap_List_Type.t_list t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Hashmap_List_Type.t_list t
  val clone' [#"../hashmap.rs" 16 4 16 27] (self : Hashmap_List_Type.t_list t) : Hashmap_List_Type.t_list t
    requires {[#"../hashmap.rs" 16 14 16 18] Inv0.inv self}
    ensures { [#"../hashmap.rs" 15 14 15 29] result = self }
    ensures { [#"../hashmap.rs" 16 23 16 27] Inv1.inv result }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Hashmap_Impl1_Get_Stub
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_List_Type as Hashmap_List_Type
  function get [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (k, v)) (index : DeepModelTy0.deepModelTy) : Core_Option_Option_Type.t_option v
    
end
module Hashmap_Impl1_Get_Interface
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_List_Type as Hashmap_List_Type
  function get [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (k, v)) (index : DeepModelTy0.deepModelTy) : Core_Option_Option_Type.t_option v
    
  val get [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (k, v)) (index : DeepModelTy0.deepModelTy) : Core_Option_Option_Type.t_option v
    ensures { result = get self index }
    
end
module Hashmap_Impl1_Get
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Hashmap_List_Type as Hashmap_List_Type
  function get [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (k, v)) (index : DeepModelTy0.deepModelTy) : Core_Option_Option_Type.t_option v
    
   =
    [#"../hashmap.rs" 30 12 33 13] match (self) with
      | Hashmap_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      | Hashmap_List_Type.C_Cons (k, v) tl -> if DeepModel0.deep_model k = index then
        Core_Option_Option_Type.C_Some v
      else
        get tl index
      
      end
  val get [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (k, v)) (index : DeepModelTy0.deepModelTy) : Core_Option_Option_Type.t_option v
    ensures { result = get self index }
    
end
module Hashmap_Impl1_NoDoubleBinding_Stub
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  predicate no_double_binding [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (k, v))
end
module Hashmap_Impl1_NoDoubleBinding_Interface
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  predicate no_double_binding [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (k, v))
  val no_double_binding [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = no_double_binding self }
    
end
module Hashmap_Impl1_NoDoubleBinding
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Hashmap_List_Type as Hashmap_List_Type
  clone Hashmap_Impl1_Get_Stub as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  predicate no_double_binding [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (k, v)) =
    [#"../hashmap.rs" 40 12 43 13] match (self) with
      | Hashmap_List_Type.C_Nil -> true
      | Hashmap_List_Type.C_Cons (k, _) tl -> Get0.get tl (DeepModel0.deep_model k) = Core_Option_Option_Type.C_None /\ no_double_binding tl
      end
  val no_double_binding [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = no_double_binding self }
    
end
module CreusotContracts_Model_Impl4_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl4_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 74 8 74 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Hashmap_Impl2_HashLog_Stub
  use prelude.Int
  function hash_log [#"../hashmap.rs" 64 4 64 30] (x : int) : int
end
module Hashmap_Impl2_HashLog_Interface
  use prelude.Int
  function hash_log [#"../hashmap.rs" 64 4 64 30] (x : int) : int
  val hash_log [#"../hashmap.rs" 64 4 64 30] (x : int) : int
    ensures { result = hash_log x }
    
end
module Hashmap_Impl2_HashLog
  use prelude.Int
  function hash_log [#"../hashmap.rs" 64 4 64 30] (x : int) : int =
    [#"../hashmap.rs" 65 20 65 21] x
  val hash_log [#"../hashmap.rs" 64 4 64 30] (x : int) : int
    ensures { result = hash_log x }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module Hashmap_Impl2_Hash_Interface
  use prelude.UInt64
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  clone Hashmap_Impl2_HashLog_Stub as HashLog0
  use prelude.Int
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int
  val hash [#"../hashmap.rs" 59 4 59 25] (self : usize) : uint64
    ensures { [#"../hashmap.rs" 58 14 58 58] UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self) }
    
end
module Hashmap_Impl2_Hash
  use prelude.UIntSize
  use prelude.Int
  use prelude.UInt64
  use prelude.Borrow
  clone Hashmap_Impl2_HashLog as HashLog0
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel1
  use prelude.Int
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel1.deep_model
  let rec cfg hash [#"../hashmap.rs" 59 4 59 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : usize) : uint64
    ensures { [#"../hashmap.rs" 58 14 58 58] UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint64;
  var self : usize = self;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../hashmap.rs" 60 8 60 20] UInt64.of_int (UIntSize.to_int self));
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Hashmap_MyHashMap_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_myhashmap 'k 'v =
    | C_MyHashMap (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list ('k, 'v)) (Alloc_Alloc_Global_Type.t_global))
    
  let function myhashmap_buckets (self : t_myhashmap 'k 'v) : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list ('k, 'v)) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MyHashMap a -> a
      end
end
module Hashmap_Hash_HashLog_Stub
  type self
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function hash_log [#"../hashmap.rs" 54 4 54 45] (_1 : DeepModelTy0.deepModelTy) : int
end
module Hashmap_Hash_HashLog_Interface
  type self
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function hash_log [#"../hashmap.rs" 54 4 54 45] (_1 : DeepModelTy0.deepModelTy) : int
  val hash_log [#"../hashmap.rs" 54 4 54 45] (_1 : DeepModelTy0.deepModelTy) : int
    ensures { result = hash_log _1 }
    
end
module Hashmap_Hash_HashLog
  type self
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function hash_log [#"../hashmap.rs" 54 4 54 45] (_1 : DeepModelTy0.deepModelTy) : int
  val hash_log [#"../hashmap.rs" 54 4 54 45] (_1 : DeepModelTy0.deepModelTy) : int
    ensures { result = hash_log _1 }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module Hashmap_Impl4_BucketIx_Stub
  type k
  type v
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function bucket_ix [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : int
    
end
module Hashmap_Impl4_BucketIx_Interface
  type k
  type v
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function bucket_ix [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : int
    
  val bucket_ix [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : int
    ensures { result = bucket_ix self k }
    
end
module Hashmap_Impl4_BucketIx
  type k
  type v
  use prelude.Int
  use seq.Seq
  use int.EuclideanDivision
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone Hashmap_Hash_HashLog_Stub as HashLog0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function bucket_ix [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : int
    
   =
    [#"../hashmap.rs" 90 20 90 66] EuclideanDivision.mod (HashLog0.hash_log k) (Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets self)))
  val bucket_ix [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : int
    ensures { result = bucket_ix self k }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type a
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    axiom .
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module Hashmap_Impl4_Bucket_Stub
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function bucket [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : Hashmap_List_Type.t_list (k, v)
    
end
module Hashmap_Impl4_Bucket_Interface
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function bucket [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : Hashmap_List_Type.t_list (k, v)
    
  val bucket [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : Hashmap_List_Type.t_list (k, v)
    ensures { result = bucket self k }
    
end
module Hashmap_Impl4_Bucket
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx_Stub as BucketIx0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function bucket [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : Hashmap_List_Type.t_list (k, v)
    
   =
    [#"../hashmap.rs" 85 8 85 53] IndexLogic0.index_logic (Hashmap_MyHashMap_Type.myhashmap_buckets self) (BucketIx0.bucket_ix self k)
  val bucket [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : Hashmap_List_Type.t_list (k, v)
    ensures { result = bucket self k }
    
end
module Hashmap_Impl3_ShallowModel_Stub
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function shallow_model [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module Hashmap_Impl3_ShallowModel_Interface
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function shallow_model [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
  val shallow_model [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model self }
    
end
module Hashmap_Impl3_ShallowModel
  type k
  type v
  use map.Map
  use prelude.Mapping
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_List_Type as Hashmap_List_Type
  clone Hashmap_Impl1_Get_Stub as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_Bucket_Stub as Bucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function shallow_model [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
   =
    [#"../hashmap.rs" 79 20 79 45] Mapping.from_fn (fun (k : DeepModelTy0.deepModelTy) -> Get0.get (Bucket0.bucket self k) k)
  val shallow_model [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model self }
    
end
module Hashmap_Impl5_GoodBucket_Stub
  type k
  type v
  use prelude.Int
  use Hashmap_List_Type as Hashmap_List_Type
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  predicate good_bucket [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int)
    
end
module Hashmap_Impl5_GoodBucket_Interface
  type k
  type v
  use prelude.Int
  use Hashmap_List_Type as Hashmap_List_Type
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  predicate good_bucket [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int)
    
  val good_bucket [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int) : bool
    ensures { result = good_bucket self l h }
    
end
module Hashmap_Impl5_GoodBucket
  type k
  type v
  use prelude.Int
  use Hashmap_List_Type as Hashmap_List_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx_Stub as BucketIx0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get_Stub as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = v
  predicate good_bucket [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int)
    
   =
    [#"../hashmap.rs" 201 8 203 9] forall v : v . forall k : DeepModelTy0.deepModelTy . Inv0.inv v -> Inv1.inv k -> Get0.get l k = Core_Option_Option_Type.C_Some v -> BucketIx0.bucket_ix self k = h
  val good_bucket [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int) : bool
    ensures { result = good_bucket self l h }
    
end
module Hashmap_Impl5_HashmapInv_Stub
  type k
  type v
  use prelude.Borrow
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  predicate hashmap_inv [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v)
end
module Hashmap_Impl5_HashmapInv_Interface
  type k
  type v
  use prelude.Borrow
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  predicate hashmap_inv [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v)
  val hashmap_inv [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = hashmap_inv self }
    
end
module Hashmap_Impl5_HashmapInv
  type k
  type v
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use Hashmap_List_Type as Hashmap_List_Type
  clone Hashmap_Impl1_NoDoubleBinding_Stub as NoDoubleBinding0 with
    type k = k,
    type v = v
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl5_GoodBucket_Stub as GoodBucket0 with
    type k = k,
    type v = v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global
  predicate hashmap_inv [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) =
    [#"../hashmap.rs" 210 8 213 9] 0 < Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets self)) /\ (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets self)) -> GoodBucket0.good_bucket self (IndexLogic0.index_logic (Hashmap_MyHashMap_Type.myhashmap_buckets self) i) i /\ NoDoubleBinding0.no_double_binding (IndexLogic0.index_logic (Hashmap_MyHashMap_Type.myhashmap_buckets self) i))
  val hashmap_inv [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = hashmap_inv self }
    
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val from_elem (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    requires {Inv0.inv elem}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 157 22 157 41] Seq.length (ShallowModel0.shallow_model result) = UIntSize.to_int n }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 158 12 158 78] forall i : int . 0 <= i /\ i < UIntSize.to_int n -> IndexLogic0.index_logic result i = elem }
    ensures { Inv1.inv result }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module Hashmap_Impl5_New_Interface
  type k
  type v
  use prelude.UIntSize
  use prelude.Int
  use map.Map
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone Hashmap_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = DeepModelTy0.deepModelTy
  clone Hashmap_Impl5_HashmapInv_Stub as HashmapInv0 with
    type k = k,
    type v = v
  val new [#"../hashmap.rs" 98 4 98 46] (size : usize) : Hashmap_MyHashMap_Type.t_myhashmap k v
    requires {[#"../hashmap.rs" 95 15 95 24] 0 < UIntSize.to_int size}
    ensures { [#"../hashmap.rs" 96 14 96 34] HashmapInv0.hashmap_inv result }
    ensures { [#"../hashmap.rs" 97 4 97 64] forall i : DeepModelTy0.deepModelTy . Inv0.inv i -> Map.get (ShallowModel0.shallow_model result) i = Core_Option_Option_Type.C_None }
    ensures { [#"../hashmap.rs" 98 31 98 46] Inv1.inv result }
    
end
module Hashmap_Impl5_New
  type k
  type v
  use prelude.Int
  use prelude.UIntSize
  use map.Map
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = v
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = v,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  use Hashmap_List_Type as Hashmap_List_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Seq.seq (Hashmap_List_Type.t_list (k, v))
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Hashmap_List_Type.t_list (k, v),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = DeepModelTy0.deepModelTy
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = DeepModelTy0.deepModelTy,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl1_Get as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl4_BucketIx as BucketIx0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function HashLog0.hash_log = HashLog0.hash_log,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Hashmap_Impl4_Bucket as Bucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Hashmap_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function Bucket0.bucket = Bucket0.bucket,
    function Get0.get = Get0.get
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with
    type k = k,
    type v = v,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function Get0.get = Get0.get,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv0.inv,
    function Get0.get = Get0.get,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with
    type k = k,
    type v = v,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  clone Alloc_Vec_FromElem_Interface as FromElem0 with
    type t = Hashmap_List_Type.t_list (k, v),
    predicate Inv0.inv = Inv2.inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Inv1.inv = Inv3.inv
  let rec cfg new [#"../hashmap.rs" 98 4 98 46] [@cfg:stackify] [@cfg:subregion_analysis] (size : usize) : Hashmap_MyHashMap_Type.t_myhashmap k v
    requires {[#"../hashmap.rs" 95 15 95 24] 0 < UIntSize.to_int size}
    ensures { [#"../hashmap.rs" 96 14 96 34] HashmapInv0.hashmap_inv result }
    ensures { [#"../hashmap.rs" 97 4 97 64] forall i : DeepModelTy0.deepModelTy . Inv0.inv i -> Map.get (ShallowModel0.shallow_model result) i = Core_Option_Option_Type.C_None }
    ensures { [#"../hashmap.rs" 98 31 98 46] Inv1.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var size : usize = size;
  var res : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var _6 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  {
    goto BB0
  }
  BB0 {
    _6 <- ([#"../hashmap.rs" 99 39 99 60] FromElem0.from_elem ([#"../hashmap.rs" 99 44 99 53] Hashmap_List_Type.C_Nil) size);
    goto BB1
  }
  BB1 {
    res <- ([#"../hashmap.rs" 99 18 99 62] Hashmap_MyHashMap_Type.C_MyHashMap _6);
    _6 <- any Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
    goto BB2
  }
  BB2 {
    _0 <- res;
    res <- any Hashmap_MyHashMap_Type.t_myhashmap k v;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl7_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl5_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  val len (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    requires {Inv0.inv self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Hashmap_Hash_Hash_Interface
  type self
  use prelude.UInt64
  use prelude.Borrow
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  clone Hashmap_Hash_HashLog_Stub as HashLog0 with
    type self = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val hash [#"../hashmap.rs" 51 4 51 26] (self : self) : uint64
    requires {[#"../hashmap.rs" 51 13 51 17] Inv0.inv self}
    ensures { [#"../hashmap.rs" 50 14 50 58] UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl13_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed Output0.output
  use seq.Seq
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    requires {Inv0.inv self}
    requires {Inv1.inv index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    ensures { Inv2.inv result }
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel1 with
    type t = rhs,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = rhs
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val eq (self : self) (other : rhs) : bool
    requires {Inv0.inv self}
    requires {Inv1.inv other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 108 20 108 37] UIntSize.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 8 122 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Hashmap_Impl5_Add_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone Hashmap_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use map.Map
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = v
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = k
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)
  clone Hashmap_Impl5_HashmapInv_Stub as HashmapInv0 with
    type k = k,
    type v = v
  val add [#"../hashmap.rs" 106 4 106 41] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) (key : k) (val' : v) : ()
    requires {[#"../hashmap.rs" 103 15 103 36] HashmapInv0.hashmap_inv ( * self)}
    requires {[#"../hashmap.rs" 106 20 106 24] Inv0.inv self}
    requires {[#"../hashmap.rs" 106 26 106 29] Inv1.inv key}
    requires {[#"../hashmap.rs" 106 34 106 37] Inv2.inv val'}
    ensures { [#"../hashmap.rs" 104 14 104 35] HashmapInv0.hashmap_inv ( ^ self) }
    ensures { [#"../hashmap.rs" 105 4 105 124] forall i : DeepModelTy0.deepModelTy . Inv3.inv i -> Map.get (ShallowModel0.shallow_model ( ^ self)) i = (if i = DeepModel0.deep_model key then
      Core_Option_Option_Type.C_Some val'
    else
      Map.get (ShallowModel1.shallow_model self) i
    ) }
    
end
module Hashmap_Impl5_Add
  type k
  type v
  use prelude.Ghost
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt64
  use prelude.Borrow
  use map.Map
  use seq.Seq
  use Hashmap_List_Type as Hashmap_List_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv17 with
    type t = Seq.seq (Hashmap_List_Type.t_list (k, v))
  clone TyInv_Trivial as TyInv_Trivial17 with
    type t = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    predicate Inv0.inv = Inv17.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv16 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial16 with
    type t = usize,
    predicate Inv0.inv = Inv16.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv15 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial15 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv15.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv14 with
    type t = k
  clone TyInv_Trivial as TyInv_Trivial14 with
    type t = k,
    predicate Inv0.inv = Inv14.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv13 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial13 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv13.inv,
    axiom .
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)
  clone TyInv_Trivial as TyInv_Trivial12 with
    type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v),
    predicate Inv0.inv = Inv12.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = borrowed (Hashmap_List_Type.t_list (k, v))
  clone TyInv_Trivial as TyInv_Trivial11 with
    type t = borrowed (Hashmap_List_Type.t_list (k, v)),
    predicate Inv0.inv = Inv11.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = borrowed v
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = borrowed v,
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = borrowed k
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = borrowed k,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = Hashmap_List_Type.t_list (k, v),
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = v
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = v,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = k
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = k,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = DeepModelTy0.deepModelTy
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = DeepModelTy0.deepModelTy,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Ghost.ghost_ty (borrowed (Hashmap_List_Type.t_list (k, v)))
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Ghost.ghost_ty (borrowed (Hashmap_List_Type.t_list (k, v))),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed (Hashmap_List_Type.t_list (k, v))
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed (Hashmap_List_Type.t_list (k, v)),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Hashmap_List_Type.t_list (k, v),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Ghost.ghost_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Ghost.ghost_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel4 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv17.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl4_BucketIx as BucketIx0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function HashLog0.hash_log = HashLog0.hash_log,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Hashmap_Impl4_Bucket as Bucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Hashmap_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function Bucket0.bucket = Bucket0.bucket,
    function Get0.get = Get0.get
  use map.Map
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel1 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve9 with
    type self = Hashmap_List_Type.t_list (k, v)
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with
    type k = k,
    type v = v,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function Get0.get = Get0.get,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate Inv0.inv = Inv7.inv,
    predicate Inv1.inv = Inv5.inv,
    function Get0.get = Get0.get,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with
    type k = k,
    type v = v,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve8 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve7 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve6 with
    type self = k
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = k
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel1 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with
    type self = k,
    type rhs = k,
    predicate Inv0.inv = Inv14.inv,
    predicate Inv1.inv = Inv14.inv,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty (borrowed (Hashmap_List_Type.t_list (k, v)))
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Alloc_Vec_Impl13_IndexMut_Interface as IndexMut0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Hashmap_List_Type.t_list (k, v),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate Inv0.inv = Inv15.inv,
    predicate Inv1.inv = Inv16.inv,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    predicate Inv2.inv = Inv3.inv
  clone Hashmap_Hash_Hash_Interface as Hash0 with
    type self = k,
    predicate Inv0.inv = Inv14.inv,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function HashLog0.hash_log = HashLog0.hash_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv13.inv,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))
  let rec cfg add [#"../hashmap.rs" 106 4 106 41] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) (key : k) (val' : v) : ()
    requires {[#"../hashmap.rs" 103 15 103 36] HashmapInv0.hashmap_inv ( * self)}
    requires {[#"../hashmap.rs" 106 20 106 24] Inv12.inv self}
    requires {[#"../hashmap.rs" 106 26 106 29] Inv6.inv key}
    requires {[#"../hashmap.rs" 106 34 106 37] Inv7.inv val'}
    ensures { [#"../hashmap.rs" 104 14 104 35] HashmapInv0.hashmap_inv ( ^ self) }
    ensures { [#"../hashmap.rs" 105 4 105 124] forall i : DeepModelTy0.deepModelTy . Inv5.inv i -> Map.get (ShallowModel0.shallow_model ( ^ self)) i = (if i = DeepModel0.deep_model key then
      Core_Option_Option_Type.C_Some val'
    else
      Map.get (ShallowModel1.shallow_model self) i
    ) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v) = self;
  var key : k = key;
  var val' : v = val';
  var old_self : Ghost.ghost_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v));
  var length : usize;
  var index : usize;
  var _13 : uint64;
  var _15 : usize;
  var _16 : bool;
  var l : borrowed (Hashmap_List_Type.t_list (k, v));
  var _18 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _19 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _20 : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global));
  var old_l : Ghost.ghost_ty (borrowed (Hashmap_List_Type.t_list (k, v)));
  var k : borrowed k;
  var v : borrowed v;
  var tl : borrowed (Hashmap_List_Type.t_list (k, v));
  var tl1 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _38 : bool;
  var _45 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _46 : borrowed (Hashmap_List_Type.t_list (k, v));
  {
    goto BB0
  }
  BB0 {
    old_self <- ([#"../hashmap.rs" 108 23 108 35] Ghost.new self);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] Inv0.inv old_self };
    assume { Resolve0.resolve old_self };
    length <- ([#"../hashmap.rs" 109 21 109 39] Len0.len ([#"../hashmap.rs" 109 21 109 39] Hashmap_MyHashMap_Type.myhashmap_buckets ( * self)));
    goto BB2
  }
  BB2 {
    _13 <- ([#"../hashmap.rs" 110 27 110 37] Hash0.hash ([#"../hashmap.rs" 110 27 110 37] key));
    goto BB3
  }
  BB3 {
    _15 <- length;
    _16 <- ([#"../hashmap.rs" 110 27 110 55] _15 = ([#"../hashmap.rs" 110 27 110 55] [#"../hashmap.rs" 110 27 110 55] (0 : usize)));
    assert { [@expl:remainder by zero] [#"../hashmap.rs" 110 27 110 55] not _16 };
    goto BB4
  }
  BB4 {
    index <- ([#"../hashmap.rs" 110 27 110 55] ([#"../hashmap.rs" 110 27 110 46] UIntSize.of_int (UInt64.to_int _13)) % _15);
    _13 <- any uint64;
    _15 <- any usize;
    _20 <- Borrow.borrow_mut (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self));
    self <- { self with current = (let Hashmap_MyHashMap_Type.C_MyHashMap a =  * self in Hashmap_MyHashMap_Type.C_MyHashMap ( ^ _20)) };
    assume { Inv1.inv ( ^ _20) };
    _19 <- ([#"../hashmap.rs" 111 39 111 58] IndexMut0.index_mut _20 index);
    _20 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global));
    goto BB5
  }
  BB5 {
    _18 <- Borrow.borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    assume { Inv2.inv ( ^ _18) };
    l <- Borrow.borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ l) };
    assume { Inv2.inv ( ^ l) };
    assert { [@expl:type invariant] Inv3.inv _18 };
    assume { Resolve1.resolve _18 };
    old_l <- ([#"../hashmap.rs" 112 20 112 29] Ghost.new l);
    goto BB6
  }
  BB6 {
    assert { [@expl:type invariant] Inv4.inv old_l };
    assume { Resolve2.resolve old_l };
    goto BB7
  }
  BB7 {
    invariant { [#"../hashmap.rs" 114 20 114 52] GoodBucket0.good_bucket ( * Ghost.inner old_self) ( * l) (UIntSize.to_int index) };
    invariant { [#"../hashmap.rs" 114 8 114 54] GoodBucket0.good_bucket ( * Ghost.inner old_self) ( ^ l) (UIntSize.to_int index) -> GoodBucket0.good_bucket ( * Ghost.inner old_self) ( ^ Ghost.inner old_l) (UIntSize.to_int index) };
    invariant { [#"../hashmap.rs" 114 8 114 54] Get0.get ( ^ l) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some val' -> Get0.get ( ^ Ghost.inner old_l) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some val' };
    invariant { [#"../hashmap.rs" 114 8 114 54] forall i : DeepModelTy0.deepModelTy . Inv5.inv i -> Get0.get ( ^ l) i = Get0.get ( * l) i -> Get0.get ( ^ Ghost.inner old_l) i = Get0.get ( * Ghost.inner old_l) i };
    invariant { [#"../hashmap.rs" 118 20 118 44] NoDoubleBinding0.no_double_binding ( * l) };
    invariant { [#"../hashmap.rs" 114 8 114 54] (forall i : DeepModelTy0.deepModelTy . Inv5.inv i -> Get0.get ( * l) i = Get0.get ( ^ l) i \/ i = DeepModel0.deep_model key) /\ NoDoubleBinding0.no_double_binding ( ^ l) -> NoDoubleBinding0.no_double_binding ( ^ Ghost.inner old_l) };
    goto BB8
  }
  BB8 {
    switch ( * l)
      | Hashmap_List_Type.C_Cons _ _ -> goto BB9
      | _ -> goto BB14
      end
  }
  BB9 {
    goto BB10
  }
  BB10 {
    k <- Borrow.borrow_mut (let (a, _) = Hashmap_List_Type.cons_0 ( * l) in a);
    l <- { l with current = (let Hashmap_List_Type.C_Cons a b =  * l in Hashmap_List_Type.C_Cons (let (a, b) = Hashmap_List_Type.cons_0 ( * l) in ( ^ k, b)) b) };
    assume { Inv6.inv ( ^ k) };
    v <- Borrow.borrow_mut (let (_, a) = Hashmap_List_Type.cons_0 ( * l) in a);
    l <- { l with current = (let Hashmap_List_Type.C_Cons a b =  * l in Hashmap_List_Type.C_Cons (let (a, b) = Hashmap_List_Type.cons_0 ( * l) in (a,  ^ v)) b) };
    assume { Inv7.inv ( ^ v) };
    tl <- Borrow.borrow_mut (Hashmap_List_Type.cons_1 ( * l));
    l <- { l with current = (let Hashmap_List_Type.C_Cons a b =  * l in Hashmap_List_Type.C_Cons a ( ^ tl)) };
    assume { Inv8.inv ( ^ tl) };
    tl1 <- tl;
    tl <- any borrowed (Hashmap_List_Type.t_list (k, v));
    _38 <- ([#"../hashmap.rs" 123 15 123 24] Eq0.eq ([#"../hashmap.rs" 123 15 123 17]  * k) ([#"../hashmap.rs" 123 21 123 24] key));
    goto BB11
  }
  BB11 {
    assert { [@expl:type invariant] Inv9.inv k };
    assume { Resolve3.resolve k };
    switch (_38)
      | False -> goto BB13
      | True -> goto BB12
      end
  }
  BB12 {
    assert { [@expl:type invariant] Inv11.inv tl1 };
    assume { Resolve5.resolve tl1 };
    assert { [@expl:type invariant] Inv6.inv key };
    assume { Resolve6.resolve key };
    assert { [@expl:type invariant] Inv7.inv val' };
    assume { Resolve7.resolve val' };
    v <- { v with current = val' };
    assert { [@expl:type invariant] Inv7.inv ( * v) };
    assume { Resolve7.resolve ( * v) };
    assert { [@expl:type invariant] Inv10.inv v };
    assume { Resolve4.resolve v };
    assert { [@expl:type invariant] Inv3.inv _19 };
    assume { Resolve1.resolve _19 };
    assert { [@expl:type invariant] Inv3.inv l };
    assume { Resolve1.resolve l };
    assert { [@expl:type invariant] Inv12.inv self };
    assume { Resolve8.resolve self };
    assert { [@expl:assertion] [#"../hashmap.rs" 125 32 125 52] HashmapInv0.hashmap_inv ( * self) };
    _0 <- ([#"../hashmap.rs" 126 16 126 22] ());
    goto BB20
  }
  BB13 {
    assert { [@expl:type invariant] Inv10.inv v };
    assume { Resolve4.resolve v };
    _46 <- Borrow.borrow_mut ( * tl1);
    tl1 <- { tl1 with current = ( ^ _46) };
    assume { Inv2.inv ( ^ _46) };
    _45 <- Borrow.borrow_mut ( * _46);
    _46 <- { _46 with current = ( ^ _45) };
    assume { Inv2.inv ( ^ _45) };
    assert { [@expl:type invariant] Inv3.inv l };
    assume { Resolve1.resolve l };
    l <- _45;
    _45 <- any borrowed (Hashmap_List_Type.t_list (k, v));
    assert { [@expl:type invariant] Inv3.inv _46 };
    assume { Resolve1.resolve _46 };
    assert { [@expl:type invariant] Inv11.inv tl1 };
    assume { Resolve5.resolve tl1 };
    goto BB7
  }
  BB14 {
    assert { [@expl:type invariant] Inv6.inv key };
    assume { Resolve6.resolve key };
    assert { [@expl:type invariant] Inv7.inv val' };
    assume { Resolve7.resolve val' };
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    l <- { l with current = ([#"../hashmap.rs" 131 13 131 44] Hashmap_List_Type.C_Cons ([#"../hashmap.rs" 131 18 131 28] (key, val')) ([#"../hashmap.rs" 131 39 131 42] Hashmap_List_Type.C_Nil)) };
    assert { [@expl:type invariant] Inv2.inv ( * l) };
    assume { Resolve9.resolve ( * l) };
    assert { [@expl:type invariant] Inv3.inv l };
    assume { Resolve1.resolve l };
    goto BB19
  }
  BB19 {
    assert { [@expl:type invariant] Inv3.inv _19 };
    assume { Resolve1.resolve _19 };
    assert { [@expl:type invariant] Inv12.inv self };
    assume { Resolve8.resolve self };
    assert { [@expl:assertion] [#"../hashmap.rs" 133 24 133 44] HashmapInv0.hashmap_inv ( * self) };
    _0 <- ([#"../hashmap.rs" 106 42 134 5] ());
    goto BB20
  }
  BB20 {
    return _0
  }
  
end
module Alloc_Vec_Impl12_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  use seq.Seq
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    requires {Inv0.inv self}
    requires {Inv1.inv index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    ensures { Inv2.inv result }
    
end
module Hashmap_Impl5_Get_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Core_Option_Option_Type.t_option v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use map.Map
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = k
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone Hashmap_Impl5_HashmapInv_Stub as HashmapInv0 with
    type k = k,
    type v = v
  val get [#"../hashmap.rs" 141 4 141 43] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (key : k) : Core_Option_Option_Type.t_option v
    requires {[#"../hashmap.rs" 136 15 136 33] HashmapInv0.hashmap_inv self}
    requires {[#"../hashmap.rs" 141 16 141 20] Inv0.inv self}
    requires {[#"../hashmap.rs" 141 22 141 25] Inv1.inv key}
    ensures { [#"../hashmap.rs" 137 14 140 5] match (result) with
      | Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None
      end }
    ensures { [#"../hashmap.rs" 141 33 141 43] Inv2.inv result }
    
end
module Hashmap_Impl5_Get
  type k
  type v
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt64
  use prelude.Borrow
  use map.Map
  use seq.Seq
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = DeepModelTy0.deepModelTy
  clone TyInv_Trivial as TyInv_Trivial12 with
    type t = DeepModelTy0.deepModelTy,
    predicate Inv0.inv = Inv12.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = v
  clone TyInv_Trivial as TyInv_Trivial11 with
    type t = v,
    predicate Inv0.inv = Inv11.inv,
    axiom .
  use Hashmap_List_Type as Hashmap_List_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Seq.seq (Hashmap_List_Type.t_list (k, v))
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    predicate Inv0.inv = Inv10.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = usize,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Core_Option_Option_Type.t_option v
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Core_Option_Option_Type.t_option v,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = k
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = k,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Hashmap_List_Type.t_list (k, v),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = v
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = v,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = k
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = k,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Hashmap_List_Type.t_list (k, v),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl1_Get as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv9.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl4_BucketIx as BucketIx0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function HashLog0.hash_log = HashLog0.hash_log,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Hashmap_Impl4_Bucket as Bucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Hashmap_Impl3_ShallowModel as ShallowModel3 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function Bucket0.bucket = Bucket0.bucket,
    function Get0.get = Get0.get
  use map.Map
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with
    type k = k,
    type v = v,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function Get0.get = Get0.get,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate Inv0.inv = Inv11.inv,
    predicate Inv1.inv = Inv12.inv,
    function Get0.get = Get0.get,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with
    type k = k,
    type v = v,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = k
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = v
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel1 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with
    type self = k,
    type rhs = k,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv2.inv,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = k
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Alloc_Vec_Impl12_Index_Interface as Index0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Hashmap_List_Type.t_list (k, v),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate Inv0.inv = Inv7.inv,
    predicate Inv1.inv = Inv8.inv,
    predicate HasValue0.has_value = HasValue0.has_value,
    predicate Inv2.inv = Inv1.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv7.inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Hashmap_Hash_Hash_Interface as Hash0 with
    type self = k,
    predicate Inv0.inv = Inv2.inv,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function HashLog0.hash_log = HashLog0.hash_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  let rec cfg get [#"../hashmap.rs" 141 4 141 43] [@cfg:stackify] [@cfg:subregion_analysis] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (key : k) : Core_Option_Option_Type.t_option v
    requires {[#"../hashmap.rs" 136 15 136 33] HashmapInv0.hashmap_inv self}
    requires {[#"../hashmap.rs" 141 16 141 20] Inv0.inv self}
    requires {[#"../hashmap.rs" 141 22 141 25] Inv5.inv key}
    ensures { [#"../hashmap.rs" 137 14 140 5] match (result) with
      | Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None
      end }
    ensures { [#"../hashmap.rs" 141 33 141 43] Inv6.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option v;
  var self : Hashmap_MyHashMap_Type.t_myhashmap k v = self;
  var key : k = key;
  var index : usize;
  var _8 : uint64;
  var _10 : usize;
  var _12 : bool;
  var l : Hashmap_List_Type.t_list (k, v);
  var _14 : Hashmap_List_Type.t_list (k, v);
  var k : k;
  var v : v;
  var tl : Hashmap_List_Type.t_list (k, v);
  var _25 : bool;
  var _31 : Hashmap_List_Type.t_list (k, v);
  {
    goto BB0
  }
  BB0 {
    _8 <- ([#"../hashmap.rs" 142 27 142 37] Hash0.hash ([#"../hashmap.rs" 142 27 142 37] key));
    goto BB1
  }
  BB1 {
    _10 <- ([#"../hashmap.rs" 142 49 142 67] Len0.len ([#"../hashmap.rs" 142 49 142 67] Hashmap_MyHashMap_Type.myhashmap_buckets self));
    goto BB2
  }
  BB2 {
    _12 <- ([#"../hashmap.rs" 142 27 142 67] _10 = ([#"../hashmap.rs" 142 27 142 67] [#"../hashmap.rs" 142 27 142 67] (0 : usize)));
    assert { [@expl:remainder by zero] [#"../hashmap.rs" 142 27 142 67] not _12 };
    goto BB3
  }
  BB3 {
    index <- ([#"../hashmap.rs" 142 27 142 67] ([#"../hashmap.rs" 142 27 142 46] UIntSize.of_int (UInt64.to_int _8)) % _10);
    _8 <- any uint64;
    _10 <- any usize;
    assert { [@expl:type invariant] Inv0.inv self };
    assume { Resolve0.resolve self };
    _14 <- ([#"../hashmap.rs" 143 21 143 40] Index0.index ([#"../hashmap.rs" 143 21 143 33] Hashmap_MyHashMap_Type.myhashmap_buckets self) index);
    goto BB4
  }
  BB4 {
    l <- ([#"../hashmap.rs" 143 20 143 40] _14);
    assert { [@expl:type invariant] Inv1.inv _14 };
    assume { Resolve1.resolve _14 };
    goto BB5
  }
  BB5 {
    invariant { [#"../hashmap.rs" 145 20 145 101] Get0.get (Bucket0.bucket self (DeepModel0.deep_model key)) (DeepModel0.deep_model key) = Get0.get l (DeepModel0.deep_model key) };
    goto BB6
  }
  BB6 {
    switch (l)
      | Hashmap_List_Type.C_Cons _ _ -> goto BB7
      | _ -> goto BB12
      end
  }
  BB7 {
    goto BB8
  }
  BB8 {
    k <- ([#"../hashmap.rs" 146 30 146 31] let (a, _) = Hashmap_List_Type.cons_0 l in a);
    v <- ([#"../hashmap.rs" 146 33 146 34] let (_, a) = Hashmap_List_Type.cons_0 l in a);
    tl <- ([#"../hashmap.rs" 146 37 146 39] Hashmap_List_Type.cons_1 l);
    assert { [@expl:type invariant] Inv1.inv l };
    assume { Resolve1.resolve l };
    assert { [@expl:type invariant] Inv2.inv k };
    assume { Resolve2.resolve k };
    _25 <- ([#"../hashmap.rs" 147 15 147 24] Eq0.eq ([#"../hashmap.rs" 147 15 147 17] k) ([#"../hashmap.rs" 147 21 147 24] key));
    goto BB9
  }
  BB9 {
    switch (_25)
      | False -> goto BB11
      | True -> goto BB10
      end
  }
  BB10 {
    assert { [@expl:type invariant] Inv4.inv tl };
    assume { Resolve4.resolve tl };
    assert { [@expl:type invariant] Inv5.inv key };
    assume { Resolve5.resolve key };
    assert { [@expl:type invariant] Inv3.inv v };
    assume { Resolve3.resolve v };
    _0 <- ([#"../hashmap.rs" 148 23 148 30] Core_Option_Option_Type.C_Some ([#"../hashmap.rs" 148 28 148 29] v));
    goto BB13
  }
  BB11 {
    assert { [@expl:type invariant] Inv3.inv v };
    assume { Resolve3.resolve v };
    _31 <- ([#"../hashmap.rs" 150 16 150 21] tl);
    assert { [@expl:type invariant] Inv4.inv tl };
    assume { Resolve4.resolve tl };
    assert { [@expl:type invariant] Inv1.inv _31 };
    assume { Resolve1.resolve _31 };
    l <- ([#"../hashmap.rs" 150 16 150 21] _31);
    goto BB5
  }
  BB12 {
    assert { [@expl:type invariant] Inv1.inv l };
    assume { Resolve1.resolve l };
    assert { [@expl:type invariant] Inv5.inv key };
    assume { Resolve5.resolve key };
    _0 <- ([#"../hashmap.rs" 152 15 152 19] Core_Option_Option_Type.C_None);
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/ghost.rs" 27 20 27 48] ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  predicate resolve (self : t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 34 8 34 31] Resolve0.resolve self
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module Core_Mem_Replace_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  val replace (dest : borrowed t) (src : t) : t
    requires {Inv0.inv dest}
    requires {Inv1.inv src}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 7 22 7 34]  ^ dest = src }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 8 22 8 37] result =  * dest }
    ensures { Inv1.inv result }
    
end
module Hashmap_Impl5_Resize_Interface
  type k
  type v
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use map.Map
  use Hashmap_List_Type as Hashmap_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl3_ShallowModel_Stub as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use map.Map
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel2 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone Hashmap_Impl5_HashmapInv_Stub as HashmapInv0 with
    type k = k,
    type v = v
  val resize [#"../hashmap.rs" 161 4 161 24] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : ()
    requires {[#"../hashmap.rs" 156 15 156 41] Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self))) < 1000}
    requires {[#"../hashmap.rs" 157 15 157 36] HashmapInv0.hashmap_inv ( * self)}
    requires {[#"../hashmap.rs" 161 19 161 23] Inv0.inv self}
    ensures { [#"../hashmap.rs" 158 14 158 35] HashmapInv0.hashmap_inv ( ^ self) }
    ensures { [#"../hashmap.rs" 159 4 159 74] forall k : DeepModelTy0.deepModelTy . Inv1.inv k -> Map.get (ShallowModel1.shallow_model ( ^ self)) k = Map.get (ShallowModel2.shallow_model self) k }
    
end
module Hashmap_Impl5_Resize
  type k
  type v
  use prelude.Ghost
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use map.Map
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv13 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial13 with
    type t = usize,
    predicate Inv0.inv = Inv13.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial12 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv12.inv,
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = Seq.seq (Hashmap_List_Type.t_list (k, v))
  clone TyInv_Trivial as TyInv_Trivial11 with
    type t = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    predicate Inv0.inv = Inv11.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = Hashmap_List_Type.t_list (k, v),
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = v
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = v,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = k
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = k,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = borrowed (Hashmap_List_Type.t_list (k, v))
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = borrowed (Hashmap_List_Type.t_list (k, v)),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Hashmap_List_Type.t_list (k, v),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = DeepModelTy0.deepModelTy
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = DeepModelTy0.deepModelTy,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Ghost.ghost_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Ghost.ghost_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv4.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv11.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl4_BucketIx as BucketIx0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function HashLog0.hash_log = HashLog0.hash_log,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Hashmap_Impl4_Bucket as Bucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Hashmap_Impl3_ShallowModel as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function Bucket0.bucket = Bucket0.bucket,
    function Get0.get = Get0.get
  use map.Map
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel3 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve7 with
    type t = Hashmap_List_Type.t_list (k, v),
    predicate Resolve0.resolve = Resolve4.resolve
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with
    type k = k,
    type v = v,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function Get0.get = Get0.get,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate Inv0.inv = Inv8.inv,
    predicate Inv1.inv = Inv1.inv,
    function Get0.get = Get0.get,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with
    type k = k,
    type v = v,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  clone Hashmap_Impl5_Add_Interface as Add0 with
    type k = k,
    type v = v,
    predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv7.inv,
    predicate Inv2.inv = Inv8.inv,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate Inv3.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve6 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = k
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone Core_Mem_Replace_Interface as Replace0 with
    type t = Hashmap_List_Type.t_list (k, v),
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv5.inv
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Alloc_Vec_Impl13_IndexMut_Interface as IndexMut0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Hashmap_List_Type.t_list (k, v),
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate Inv0.inv = Inv12.inv,
    predicate Inv1.inv = Inv13.inv,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    predicate Inv2.inv = Inv6.inv
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel5 with
    type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v),
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel0 with
    type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v),
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone Hashmap_Impl5_New_Interface as New0 with
    type k = k,
    type v = v,
    predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv1.inv = Inv2.inv
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv10.inv,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))
  let rec cfg resize [#"../hashmap.rs" 161 4 161 24] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : ()
    requires {[#"../hashmap.rs" 156 15 156 41] Seq.length (ShallowModel2.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self))) < 1000}
    requires {[#"../hashmap.rs" 157 15 157 36] HashmapInv0.hashmap_inv ( * self)}
    requires {[#"../hashmap.rs" 161 19 161 23] Inv3.inv self}
    ensures { [#"../hashmap.rs" 158 14 158 35] HashmapInv0.hashmap_inv ( ^ self) }
    ensures { [#"../hashmap.rs" 159 4 159 74] forall k : DeepModelTy0.deepModelTy . Inv1.inv k -> Map.get (ShallowModel1.shallow_model ( ^ self)) k = Map.get (ShallowModel3.shallow_model self) k }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v) = self;
  var old_self : Ghost.ghost_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v));
  var new : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var _10 : usize;
  var i : usize;
  var _21 : ();
  var _24 : usize;
  var l : Hashmap_List_Type.t_list (k, v);
  var _27 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _28 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _29 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _30 : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global));
  var k : k;
  var v : v;
  var tl : Hashmap_List_Type.t_list (k, v);
  var _44 : ();
  var _45 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v);
  {
    goto BB0
  }
  BB0 {
    old_self <- ([#"../hashmap.rs" 162 23 162 35] Ghost.new self);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] Inv0.inv old_self };
    assume { Resolve0.resolve old_self };
    _10 <- ([#"../hashmap.rs" 163 32 163 50] Len0.len ([#"../hashmap.rs" 163 32 163 50] Hashmap_MyHashMap_Type.myhashmap_buckets ( * self)));
    goto BB2
  }
  BB2 {
    new <- ([#"../hashmap.rs" 163 22 163 55] New0.new ([#"../hashmap.rs" 163 32 163 54] _10 * ([#"../hashmap.rs" 163 53 163 54] [#"../hashmap.rs" 163 53 163 54] (2 : usize))));
    _10 <- any usize;
    goto BB3
  }
  BB3 {
    i <- ([#"../hashmap.rs" 165 27 165 28] [#"../hashmap.rs" 165 27 165 28] (0 : usize));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant { [#"../hashmap.rs" 166 8 166 111] forall k : DeepModelTy0.deepModelTy . Inv1.inv k -> BucketIx0.bucket_ix ( * Ghost.inner old_self) k < UIntSize.to_int i -> Map.get (ShallowModel0.shallow_model old_self) k = Map.get (ShallowModel1.shallow_model new) k };
    invariant { [#"../hashmap.rs" 166 8 166 111] forall k : DeepModelTy0.deepModelTy . Inv1.inv k -> UIntSize.to_int i <= BucketIx0.bucket_ix ( * Ghost.inner old_self) k /\ BucketIx0.bucket_ix ( * Ghost.inner old_self) k <= Seq.length (ShallowModel2.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Ghost.inner old_self))) -> Map.get (ShallowModel1.shallow_model new) k = Core_Option_Option_Type.C_None };
    invariant { [#"../hashmap.rs" 166 8 166 111] forall j : int . UIntSize.to_int i <= j /\ j < Seq.length (ShallowModel2.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Ghost.inner old_self))) -> IndexLogic0.index_logic (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self)) j = IndexLogic0.index_logic (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Ghost.inner old_self)) j };
    invariant { [#"../hashmap.rs" 172 20 172 37] HashmapInv0.hashmap_inv new };
    invariant { [#"../hashmap.rs" 173 20 173 46]  ^ Ghost.inner old_self =  ^ self };
    invariant { [#"../hashmap.rs" 174 20 174 66] Seq.length (ShallowModel2.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Ghost.inner old_self))) = Seq.length (ShallowModel2.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self))) };
    invariant { [#"../hashmap.rs" 175 20 175 45] UIntSize.to_int i <= Seq.length (ShallowModel2.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self))) };
    goto BB7
  }
  BB7 {
    _24 <- ([#"../hashmap.rs" 176 18 176 36] Len0.len ([#"../hashmap.rs" 176 18 176 36] Hashmap_MyHashMap_Type.myhashmap_buckets ( * self)));
    goto BB8
  }
  BB8 {
    switch ([#"../hashmap.rs" 176 14 176 36] i < _24)
      | False -> goto BB29
      | True -> goto BB9
      end
  }
  BB9 {
    _30 <- Borrow.borrow_mut (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self));
    self <- { self with current = (let Hashmap_MyHashMap_Type.C_MyHashMap a =  * self in Hashmap_MyHashMap_Type.C_MyHashMap ( ^ _30)) };
    assume { Inv4.inv ( ^ _30) };
    _29 <- ([#"../hashmap.rs" 177 56 177 71] IndexMut0.index_mut _30 i);
    _30 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global));
    goto BB10
  }
  BB10 {
    _28 <- Borrow.borrow_mut ( * _29);
    _29 <- { _29 with current = ( ^ _28) };
    assume { Inv5.inv ( ^ _28) };
    _27 <- Borrow.borrow_mut ( * _28);
    _28 <- { _28 with current = ( ^ _27) };
    assume { Inv5.inv ( ^ _27) };
    l <- ([#"../hashmap.rs" 177 33 177 83] Replace0.replace _27 ([#"../hashmap.rs" 177 73 177 82] Hashmap_List_Type.C_Nil));
    _27 <- any borrowed (Hashmap_List_Type.t_list (k, v));
    goto BB11
  }
  BB11 {
    assert { [@expl:type invariant] Inv6.inv _29 };
    assume { Resolve3.resolve _29 };
    assert { [@expl:type invariant] Inv6.inv _28 };
    assume { Resolve3.resolve _28 };
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    invariant { [#"../hashmap.rs" 179 24 179 41] HashmapInv0.hashmap_inv new };
    invariant { [#"../hashmap.rs" 179 12 179 43] forall k : DeepModelTy0.deepModelTy . Inv1.inv k -> BucketIx0.bucket_ix ( * Ghost.inner old_self) k < UIntSize.to_int i -> Map.get (ShallowModel0.shallow_model old_self) k = Map.get (ShallowModel1.shallow_model new) k };
    invariant { [#"../hashmap.rs" 179 12 179 43] forall k : DeepModelTy0.deepModelTy . Inv1.inv k -> UIntSize.to_int i < BucketIx0.bucket_ix ( * Ghost.inner old_self) k /\ BucketIx0.bucket_ix ( * Ghost.inner old_self) k <= Seq.length (ShallowModel2.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Ghost.inner old_self))) -> Map.get (ShallowModel1.shallow_model new) k = Core_Option_Option_Type.C_None };
    invariant { [#"../hashmap.rs" 179 12 179 43] forall k : DeepModelTy0.deepModelTy . Inv1.inv k -> BucketIx0.bucket_ix ( * Ghost.inner old_self) k = UIntSize.to_int i -> Map.get (ShallowModel0.shallow_model old_self) k = match (Get0.get l k) with
      | Core_Option_Option_Type.C_None -> Map.get (ShallowModel1.shallow_model new) k
      | Core_Option_Option_Type.C_Some v -> Core_Option_Option_Type.C_Some v
      end };
    invariant { [#"../hashmap.rs" 186 24 186 45] NoDoubleBinding0.no_double_binding l };
    invariant { [#"../hashmap.rs" 187 24 187 51] GoodBucket0.good_bucket ( * Ghost.inner old_self) l (UIntSize.to_int i) };
    goto BB18
  }
  BB18 {
    switch (l)
      | Hashmap_List_Type.C_Cons _ _ -> goto BB19
      | _ -> goto BB25
      end
  }
  BB19 {
    goto BB20
  }
  BB20 {
    k <- (let (a, _) = Hashmap_List_Type.cons_0 l in a);
    v <- (let (_, a) = Hashmap_List_Type.cons_0 l in a);
    tl <- Hashmap_List_Type.cons_1 l;
    l <- (let Hashmap_List_Type.C_Cons a b = l in Hashmap_List_Type.C_Cons a (any Hashmap_List_Type.t_list (k, v)));
    assert { [@expl:type invariant] Inv5.inv l };
    assume { Resolve4.resolve l };
    _45 <- Borrow.borrow_mut new;
    new <-  ^ _45;
    assume { Inv2.inv ( ^ _45) };
    assert { [@expl:type invariant] Inv7.inv k };
    assume { Resolve5.resolve k };
    assert { [@expl:type invariant] Inv8.inv v };
    assume { Resolve6.resolve v };
    _44 <- ([#"../hashmap.rs" 189 16 189 29] Add0.add _45 k v);
    _45 <- any borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v);
    goto BB21
  }
  BB21 {
    assert { [@expl:type invariant] Inv9.inv tl };
    assume { Resolve7.resolve tl };
    goto BB22
  }
  BB22 {
    l <- tl;
    tl <- any Hashmap_List_Type.t_list (k, v);
    goto BB24
  }
  BB24 {
    _21 <- ([#"../hashmap.rs" 188 49 191 13] ());
    goto BB26
  }
  BB25 {
    assert { [@expl:type invariant] Inv5.inv l };
    assume { Resolve4.resolve l };
    assert { [@expl:assertion] [#"../hashmap.rs" 192 12 192 121] forall k : DeepModelTy0.deepModelTy . Inv1.inv k -> BucketIx0.bucket_ix ( * Ghost.inner old_self) k = UIntSize.to_int i -> Map.get (ShallowModel0.shallow_model old_self) k = Map.get (ShallowModel1.shallow_model new) k };
    goto BB27
  }
  BB26 {
    goto BB17
  }
  BB27 {
    i <- ([#"../hashmap.rs" 193 12 193 18] i + ([#"../hashmap.rs" 193 17 193 18] [#"../hashmap.rs" 193 17 193 18] (1 : usize)));
    _21 <- ([#"../hashmap.rs" 176 37 194 9] ());
    goto BB28
  }
  BB28 {
    goto BB6
  }
  BB29 {
    goto BB30
  }
  BB30 {
    self <- { self with current = new };
    new <- any Hashmap_MyHashMap_Type.t_myhashmap k v;
    assert { [@expl:type invariant] Inv2.inv ( * self) };
    assume { Resolve1.resolve ( * self) };
    assert { [@expl:type invariant] Inv3.inv self };
    assume { Resolve2.resolve self };
    goto BB32
  }
  BB32 {
    _0 <- ([#"../hashmap.rs" 161 25 197 5] ());
    goto BB33
  }
  BB33 {
    return _0
  }
  
end
module Hashmap_Main_Interface
  val main [#"../hashmap.rs" 217 0 217 13] (_1 : ()) : ()
end
module Hashmap_Main
  use prelude.Int
  use prelude.UIntSize
  use prelude.IntSize
  use prelude.Borrow
  use seq.Seq
  use map.Map
  use Hashmap_List_Type as Hashmap_List_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Seq.seq (Hashmap_List_Type.t_list (usize, isize))
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = Seq.seq (Hashmap_List_Type.t_list (usize, isize)),
    predicate Inv0.inv = Inv8.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (usize, isize)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (usize, isize)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = isize
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = isize,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize)
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Core_Option_Option_Type.t_option isize
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Core_Option_Option_Type.t_option isize,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = usize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap usize isize
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap usize isize,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap usize isize
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap usize isize,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use prelude.Int
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = int
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = int,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use map.Map
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel0
  clone Hashmap_Impl1_Get as Get1 with
    type k = usize,
    type v = isize,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = Hashmap_List_Type.t_list (usize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (usize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Hashmap_Impl2_HashLog as HashLog0
  clone Hashmap_Impl4_BucketIx as BucketIx0 with
    type k = usize,
    type v = isize,
    type DeepModelTy0.deepModelTy = int,
    function HashLog0.hash_log = HashLog0.hash_log,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Hashmap_Impl4_Bucket as Bucket0 with
    type k = usize,
    type v = isize,
    type DeepModelTy0.deepModelTy = int,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Hashmap_Impl3_ShallowModel as ShallowModel0 with
    type k = usize,
    type v = isize,
    type DeepModelTy0.deepModelTy = int,
    function Bucket0.bucket = Bucket0.bucket,
    function Get0.get = Get1.get
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel2 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap usize isize,
    type ShallowModelTy0.shallowModelTy = Map.map int (Core_Option_Option_Type.t_option isize),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with
    type k = usize,
    type v = isize,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function Get0.get = Get1.get,
    type DeepModelTy0.deepModelTy = int
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with
    type k = usize,
    type v = isize,
    type DeepModelTy0.deepModelTy = int,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv0.inv,
    function Get0.get = Get1.get,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with
    type k = usize,
    type v = isize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  clone Hashmap_Impl5_Add_Interface as Add0 with
    type k = usize,
    type v = isize,
    predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv6.inv,
    type DeepModelTy0.deepModelTy = int,
    predicate Inv3.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel1 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap usize isize,
    type ShallowModelTy0.shallowModelTy = Map.map int (Core_Option_Option_Type.t_option isize),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Hashmap_Impl5_Get_Interface as Get0 with
    type k = usize,
    type v = isize,
    predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate Inv2.inv = Inv4.inv,
    type DeepModelTy0.deepModelTy = int
  clone Hashmap_Impl5_New_Interface as New0 with
    type k = usize,
    type v = isize,
    predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
    type DeepModelTy0.deepModelTy = int,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv1.inv = Inv1.inv
  let rec cfg main [#"../hashmap.rs" 217 0 217 13] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var h1 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var h2 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _x : Core_Option_Option_Type.t_option isize;
  var _y : Core_Option_Option_Type.t_option isize;
  var _z : Core_Option_Option_Type.t_option isize;
  var _t : Core_Option_Option_Type.t_option isize;
  var _11 : ();
  var _12 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize);
  var _13 : Core_Option_Option_Type.t_option isize;
  var _15 : Core_Option_Option_Type.t_option isize;
  var _17 : Core_Option_Option_Type.t_option isize;
  var _19 : Core_Option_Option_Type.t_option isize;
  var _21 : ();
  var _22 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize);
  var _23 : Core_Option_Option_Type.t_option isize;
  var _25 : Core_Option_Option_Type.t_option isize;
  var _27 : Core_Option_Option_Type.t_option isize;
  var _29 : Core_Option_Option_Type.t_option isize;
  {
    goto BB0
  }
  BB0 {
    h1 <- ([#"../hashmap.rs" 224 42 224 60] New0.new ([#"../hashmap.rs" 224 57 224 59] [#"../hashmap.rs" 224 57 224 59] (17 : usize)));
    goto BB1
  }
  BB1 {
    h2 <- ([#"../hashmap.rs" 225 42 225 60] New0.new ([#"../hashmap.rs" 225 57 225 59] [#"../hashmap.rs" 225 57 225 59] (42 : usize)));
    goto BB2
  }
  BB2 {
    _x <- ([#"../hashmap.rs" 226 17 226 26] Get0.get ([#"../hashmap.rs" 226 17 226 26] h1) ([#"../hashmap.rs" 226 24 226 25] [#"../hashmap.rs" 226 24 226 25] (1 : usize)));
    goto BB3
  }
  BB3 {
    _y <- ([#"../hashmap.rs" 227 17 227 26] Get0.get ([#"../hashmap.rs" 227 17 227 26] h1) ([#"../hashmap.rs" 227 24 227 25] [#"../hashmap.rs" 227 24 227 25] (2 : usize)));
    goto BB4
  }
  BB4 {
    _z <- ([#"../hashmap.rs" 228 17 228 26] Get0.get ([#"../hashmap.rs" 228 17 228 26] h2) ([#"../hashmap.rs" 228 24 228 25] [#"../hashmap.rs" 228 24 228 25] (1 : usize)));
    goto BB5
  }
  BB5 {
    _t <- ([#"../hashmap.rs" 229 17 229 26] Get0.get ([#"../hashmap.rs" 229 17 229 26] h2) ([#"../hashmap.rs" 229 24 229 25] [#"../hashmap.rs" 229 24 229 25] (2 : usize)));
    goto BB6
  }
  BB6 {
    _12 <- Borrow.borrow_mut h1;
    h1 <-  ^ _12;
    _11 <- ([#"../hashmap.rs" 233 4 233 17] Add0.add _12 ([#"../hashmap.rs" 233 11 233 12] [#"../hashmap.rs" 233 11 233 12] (1 : usize)) ([#"../hashmap.rs" 233 14 233 16] [#"../hashmap.rs" 233 14 233 16] (17 : isize)));
    _12 <- any borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize);
    goto BB7
  }
  BB7 {
    _13 <- ([#"../hashmap.rs" 234 9 234 18] Get0.get ([#"../hashmap.rs" 234 9 234 18] h1) ([#"../hashmap.rs" 234 16 234 17] [#"../hashmap.rs" 234 16 234 17] (1 : usize)));
    goto BB8
  }
  BB8 {
    _x <- _13;
    _13 <- any Core_Option_Option_Type.t_option isize;
    _15 <- ([#"../hashmap.rs" 235 9 235 18] Get0.get ([#"../hashmap.rs" 235 9 235 18] h1) ([#"../hashmap.rs" 235 16 235 17] [#"../hashmap.rs" 235 16 235 17] (2 : usize)));
    goto BB9
  }
  BB9 {
    _y <- _15;
    _15 <- any Core_Option_Option_Type.t_option isize;
    _17 <- ([#"../hashmap.rs" 236 9 236 18] Get0.get ([#"../hashmap.rs" 236 9 236 18] h2) ([#"../hashmap.rs" 236 16 236 17] [#"../hashmap.rs" 236 16 236 17] (1 : usize)));
    goto BB10
  }
  BB10 {
    _z <- _17;
    _17 <- any Core_Option_Option_Type.t_option isize;
    _19 <- ([#"../hashmap.rs" 237 9 237 18] Get0.get ([#"../hashmap.rs" 237 9 237 18] h2) ([#"../hashmap.rs" 237 16 237 17] [#"../hashmap.rs" 237 16 237 17] (2 : usize)));
    goto BB11
  }
  BB11 {
    _t <- _19;
    _19 <- any Core_Option_Option_Type.t_option isize;
    _22 <- Borrow.borrow_mut h2;
    h2 <-  ^ _22;
    _21 <- ([#"../hashmap.rs" 240 4 240 17] Add0.add _22 ([#"../hashmap.rs" 240 11 240 12] [#"../hashmap.rs" 240 11 240 12] (1 : usize)) ([#"../hashmap.rs" 240 14 240 16] [#"../hashmap.rs" 240 14 240 16] (42 : isize)));
    _22 <- any borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize);
    goto BB12
  }
  BB12 {
    _23 <- ([#"../hashmap.rs" 241 9 241 18] Get0.get ([#"../hashmap.rs" 241 9 241 18] h1) ([#"../hashmap.rs" 241 16 241 17] [#"../hashmap.rs" 241 16 241 17] (1 : usize)));
    goto BB13
  }
  BB13 {
    _x <- _23;
    _23 <- any Core_Option_Option_Type.t_option isize;
    _25 <- ([#"../hashmap.rs" 242 9 242 18] Get0.get ([#"../hashmap.rs" 242 9 242 18] h1) ([#"../hashmap.rs" 242 16 242 17] [#"../hashmap.rs" 242 16 242 17] (2 : usize)));
    goto BB14
  }
  BB14 {
    _y <- _25;
    _25 <- any Core_Option_Option_Type.t_option isize;
    _27 <- ([#"../hashmap.rs" 243 9 243 18] Get0.get ([#"../hashmap.rs" 243 9 243 18] h2) ([#"../hashmap.rs" 243 16 243 17] [#"../hashmap.rs" 243 16 243 17] (1 : usize)));
    goto BB15
  }
  BB15 {
    _z <- _27;
    _27 <- any Core_Option_Option_Type.t_option isize;
    _29 <- ([#"../hashmap.rs" 244 9 244 18] Get0.get ([#"../hashmap.rs" 244 9 244 18] h2) ([#"../hashmap.rs" 244 16 244 17] [#"../hashmap.rs" 244 16 244 17] (2 : usize)));
    goto BB16
  }
  BB16 {
    _t <- _29;
    _29 <- any Core_Option_Option_Type.t_option isize;
    _0 <- ([#"../hashmap.rs" 217 14 247 1] ());
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Hashmap_Impl0
  type t
  use prelude.Borrow
  use Hashmap_List_Type as Hashmap_List_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Hashmap_List_Type.t_list t
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Hashmap_List_Type.t_list t,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Hashmap_List_Type.t_list t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Hashmap_List_Type.t_list t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"../hashmap.rs" 16 4 16 27] forall self : Hashmap_List_Type.t_list t . Inv0.inv self -> Inv0.inv self /\ (forall result : Hashmap_List_Type.t_list t . Inv1.inv result /\ result = self -> Inv1.inv result /\ result = self)
end
module Hashmap_Impl2
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt64
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = usize,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Hashmap_Impl2_HashLog as HashLog0
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel1
  use prelude.Int
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal hash_refn : [#"../hashmap.rs" 59 4 59 25] forall self : usize . Inv0.inv self -> (forall result : uint64 . UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self) -> UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self))
end
module Hashmap_Impl3
  type k
  type v
end
