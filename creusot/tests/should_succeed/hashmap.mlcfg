
module Hashmap_List_Type
  type t_list 't =
    | C_Nil
    | C_Cons 't (t_list 't)
    
  let function cons_0 (self : t_list 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Nil -> any 't
      | C_Cons a _ -> a
      end
  let function cons_1 (self : t_list 't) : t_list 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Nil -> any t_list 't
      | C_Cons _ a -> a
      end
end
module Hashmap_Impl0_Clone_Interface
  type t
  use prelude.Borrow
  use Hashmap_List_Type as Hashmap_List_Type
  val clone' [@cfg:stackify] (self : Hashmap_List_Type.t_list t) : Hashmap_List_Type.t_list t
    ensures { [#"../hashmap.rs" 11 14 11 29] result = self }
    
end
module Hashmap_Impl0_Clone
  type t
  use prelude.Borrow
  use Hashmap_List_Type as Hashmap_List_Type
  val clone' [@cfg:stackify] (self : Hashmap_List_Type.t_list t) : Hashmap_List_Type.t_list t
    ensures { [#"../hashmap.rs" 11 14 11 29] result = self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module Hashmap_Impl1_Get_Stub
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use Hashmap_List_Type as Hashmap_List_Type
  val ghost function get (self : Hashmap_List_Type.t_list (k, v)) (index : ModelTy0.modelTy) : Core_Option_Option_Type.t_option v
    
end
module Hashmap_Impl1_Get_Interface
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use Hashmap_List_Type as Hashmap_List_Type
  val ghost function get (self : Hashmap_List_Type.t_list (k, v)) (index : ModelTy0.modelTy) : Core_Option_Option_Type.t_option v
    
end
module Hashmap_Impl1_Get
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use Hashmap_List_Type as Hashmap_List_Type
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function get [#"../hashmap.rs" 23 4 23 48] (self : Hashmap_List_Type.t_list (k, v)) (index : ModelTy0.modelTy) : Core_Option_Option_Type.t_option v
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hashmap.rs" 25 12 28 13] match (self) with
      | Hashmap_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      | Hashmap_List_Type.C_Cons (k, v) tl -> if let a = Model0.model k in pure {a = index} then
        Core_Option_Option_Type.C_Some v
      else
        get tl index
      
      end
end
module Hashmap_Impl1_NoDoubleBinding_Stub
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  val ghost predicate no_double_binding (self : Hashmap_List_Type.t_list (k, v))
end
module Hashmap_Impl1_NoDoubleBinding_Interface
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  val ghost predicate no_double_binding (self : Hashmap_List_Type.t_list (k, v))
end
module Hashmap_Impl1_NoDoubleBinding
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get_Stub as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost predicate no_double_binding [#"../hashmap.rs" 33 4 33 38] (self : Hashmap_List_Type.t_list (k, v))
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hashmap.rs" 35 12 38 13] match (self) with
      | Hashmap_List_Type.C_Nil -> true
      | Hashmap_List_Type.C_Cons (k, _) tl -> (let a = let b' = Model0.model k in Get0.get tl b' in pure {a = Core_Option_Option_Type.C_None}) && no_double_binding tl
      end
end
module Hashmap_Impl2_HashLog_Stub
  use mach.int.Int
  use prelude.UIntSize
  val ghost function hash_log (self : usize) : int
end
module Hashmap_Impl2_HashLog_Interface
  use mach.int.Int
  use prelude.UIntSize
  val ghost function hash_log (self : usize) : int
    ensures { [#"../hashmap.rs" 65 14 65 25] result >= 0 }
    
end
module Hashmap_Impl2_HashLog
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  let rec ghost function hash_log [#"../hashmap.rs" 66 4 66 28] (self : usize) : int = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hashmap.rs" 67 8 67 27] UInt64.to_int self
  axiom hash_log_spec : forall self : usize . [#"../hashmap.rs" 65 14 65 25] hash_log self >= 0
end
module Hashmap_Impl2_HashLog_Impl
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  let rec ghost function hash_log (self : usize) : int
    ensures { [#"../hashmap.rs" 65 14 65 25] result >= 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hashmap.rs" 67 8 67 27] UInt64.to_int self
end
module Hashmap_Impl2_Hash_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone Hashmap_Impl2_HashLog_Stub as HashLog0 with axiom .
  val hash [@cfg:stackify] (self : usize) : uint64
    ensures { [#"../hashmap.rs" 59 14 59 40] UInt64.to_int result = HashLog0.hash_log self }
    
end
module Hashmap_Impl2_Hash
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone Hashmap_Impl2_HashLog as HashLog0 with axiom .
  let rec cfg hash [@cfg:stackify] [#"../hashmap.rs" 60 4 60 25] (self : usize) : uint64
    ensures { [#"../hashmap.rs" 59 14 59 40] UInt64.to_int result = HashLog0.hash_log self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint64;
  var self_1 : usize;
  var _3 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- self_1;
    _0 <- UInt64.of_int (UIntSize.to_int _3);
    return _0
  }
  
end
module Hashmap_Impl2_HashLogEqModel_Stub
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Hashmap_Impl2_HashLog_Stub as HashLog0 with axiom .
  val ghost function hash_log_eq_model (x : usize) (y : usize) : ()
end
module Hashmap_Impl2_HashLogEqModel_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Hashmap_Impl2_HashLog_Stub as HashLog0 with axiom .
  val ghost function hash_log_eq_model (x : usize) (y : usize) : ()
    requires {[#"../hashmap.rs" 71 15 71 23] UInt64.to_int x = UInt64.to_int y}
    ensures { [#"../hashmap.rs" 72 14 72 42] HashLog0.hash_log x = HashLog0.hash_log y }
    
end
module Hashmap_Impl2_HashLogEqModel
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Hashmap_Impl2_HashLog_Stub as HashLog0 with axiom .
  let rec ghost function hash_log_eq_model [#"../hashmap.rs" 73 4 73 42] (x : usize) (y : usize) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hashmap.rs" 70 4 70 12] ()
  axiom hash_log_eq_model_spec : forall x : usize, y : usize . ([#"../hashmap.rs" 71 15 71 23] UInt64.to_int x = UInt64.to_int y) -> ([#"../hashmap.rs" 72 14 72 42] HashLog0.hash_log x = HashLog0.hash_log y)
end
module Hashmap_Impl2_HashLogEqModel_Impl
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Hashmap_Impl2_HashLog as HashLog0 with axiom .
  let rec ghost function hash_log_eq_model (x : usize) (y : usize) : ()
    requires {[#"../hashmap.rs" 71 15 71 23] UInt64.to_int x = UInt64.to_int y}
    ensures { [#"../hashmap.rs" 72 14 72 42] HashLog0.hash_log x = HashLog0.hash_log y }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hashmap.rs" 70 4 70 12] ()
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Hashmap_MyHashMap_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_myhashmap 'k 'v =
    | C_MyHashMap (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list ('k, 'v)) (Alloc_Alloc_Global_Type.t_global))
    
  let function myhashmap_buckets (self : t_myhashmap 'k 'v) : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list ('k, 'v)) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MyHashMap a -> a
      end
end
module CreusotContracts_Std1_Vec_Impl0_Model_Stub
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { Seq.length result <= UInt64.to_int (18446744073709551615 : usize) }
    
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module Hashmap_Hash_HashLog_Stub
  type self
  use mach.int.Int
  val ghost function hash_log (self : self) : int
end
module Hashmap_Hash_HashLog_Interface
  type self
  use mach.int.Int
  val ghost function hash_log (self : self) : int
    ensures { [#"../hashmap.rs" 49 14 49 25] result >= 0 }
    
end
module Hashmap_Hash_HashLog
  type self
  use mach.int.Int
  val ghost function hash_log [#"../hashmap.rs" 50 4 50 29] (self : self) : int
  axiom hash_log_spec : forall self : self . [#"../hashmap.rs" 49 14 49 25] hash_log self >= 0
end
module Hashmap_Impl4_BucketIx_Stub
  type k
  type v
  use mach.int.Int
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  val ghost function bucket_ix (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : k) : int
end
module Hashmap_Impl4_BucketIx_Interface
  type k
  type v
  use mach.int.Int
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  val ghost function bucket_ix (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : k) : int
end
module Hashmap_Impl4_BucketIx
  type k
  type v
  use mach.int.Int
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone Hashmap_Hash_HashLog_Stub as HashLog0 with type self = k, axiom .
  let rec ghost function bucket_ix [#"../hashmap.rs" 97 4 97 35] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : k) : int
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hashmap.rs" 98 20 98 56] mod (HashLog0.hash_log k) (let a' = Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets self) in Seq.length a')
end
module Hashmap_Impl4_Bucket_Stub
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  val ghost function bucket (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : k) : Hashmap_List_Type.t_list (k, v)
end
module Hashmap_Impl4_Bucket_Interface
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  val ghost function bucket (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : k) : Hashmap_List_Type.t_list (k, v)
end
module Hashmap_Impl4_Bucket
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Hashmap_Impl4_BucketIx_Stub as BucketIx0 with type k = k, type v = v
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  let rec ghost function bucket [#"../hashmap.rs" 92 4 92 41] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : k) : Hashmap_List_Type.t_list (k, v)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hashmap.rs" 93 8 93 58] let a' = Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets self) in let b' = BucketIx0.bucket_ix self k in Seq.get a' b'
end
module Hashmap_Impl3_Model_Stub
  type k
  type v
  use map.Map
  use Hashmap_List_Type as Hashmap_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl1_Get_Stub as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl4_Bucket_Stub as Bucket0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val ghost function model (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map ModelTy0.modelTy (Core_Option_Option_Type.t_option v)
    
end
module Hashmap_Impl3_Model_Interface
  type k
  type v
  use map.Map
  use Hashmap_List_Type as Hashmap_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl1_Get_Stub as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl4_Bucket_Stub as Bucket0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val ghost function model (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map ModelTy0.modelTy (Core_Option_Option_Type.t_option v)
    ensures { [#"../hashmap.rs" 85 4 85 70] forall k : k . Map.get result (Model0.model k) = Get0.get (Bucket0.bucket self k) (Model0.model k) }
    
end
module Hashmap_Impl3_Model
  type k
  type v
  use map.Map
  use Hashmap_List_Type as Hashmap_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl1_Get_Stub as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl4_Bucket_Stub as Bucket0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val ghost function model [#"../hashmap.rs" 86 4 86 35] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map ModelTy0.modelTy (Core_Option_Option_Type.t_option v)
    
  axiom model_spec : forall self : Hashmap_MyHashMap_Type.t_myhashmap k v . [#"../hashmap.rs" 85 4 85 70] forall k : k . Map.get (model self) (Model0.model k) = Get0.get (Bucket0.bucket self k) (Model0.model k)
end
module Hashmap_Impl5_GoodBucket_Stub
  type k
  type v
  use mach.int.Int
  use Hashmap_List_Type as Hashmap_List_Type
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  val ghost predicate good_bucket (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int)
    
end
module Hashmap_Impl5_GoodBucket_Interface
  type k
  type v
  use mach.int.Int
  use Hashmap_List_Type as Hashmap_List_Type
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  val ghost predicate good_bucket (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int)
    
end
module Hashmap_Impl5_GoodBucket
  type k
  type v
  use mach.int.Int
  use Hashmap_List_Type as Hashmap_List_Type
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone Hashmap_Impl4_BucketIx_Stub as BucketIx0 with type k = k, type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get_Stub as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost predicate good_bucket [#"../hashmap.rs" 209 4 209 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hashmap.rs" 210 8 212 9] pure {forall v : v . forall k : k . Get0.get l (Model0.model k) = Core_Option_Option_Type.C_Some v -> BucketIx0.bucket_ix self k = h}
end
module Hashmap_Impl5_HashmapInv_Stub
  type k
  type v
  use prelude.Borrow
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  val ghost predicate hashmap_inv (self : Hashmap_MyHashMap_Type.t_myhashmap k v)
end
module Hashmap_Impl5_HashmapInv_Interface
  type k
  type v
  use prelude.Borrow
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  val ghost predicate hashmap_inv (self : Hashmap_MyHashMap_Type.t_myhashmap k v)
end
module Hashmap_Impl5_HashmapInv
  type k
  type v
  use prelude.Borrow
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  use mach.int.Int
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Hashmap_Impl1_NoDoubleBinding_Stub as NoDoubleBinding0 with type k = k, type v = v
  clone Hashmap_Impl5_GoodBucket_Stub as GoodBucket0 with type k = k, type v = v
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  let rec ghost predicate hashmap_inv [#"../hashmap.rs" 218 4 218 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hashmap.rs" 219 8 222 9] 0 < (let a' = Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets self) in Seq.length a') && pure {forall i : int . 0 <= i /\ i < Seq.length (Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets self)) -> GoodBucket0.good_bucket self (Seq.get (Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets self)) i) i /\ NoDoubleBinding0.no_double_binding (Seq.get (Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets self)) i)}
end
module Hashmap_Hash_HashLogEqModel_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone Hashmap_Hash_HashLog_Stub as HashLog0 with type self = self, axiom .
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = self,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val ghost function hash_log_eq_model (x : self) (y : self) : ()
end
module Hashmap_Hash_HashLogEqModel_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone Hashmap_Hash_HashLog_Stub as HashLog0 with type self = self, axiom .
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = self,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val ghost function hash_log_eq_model (x : self) (y : self) : ()
    requires {[#"../hashmap.rs" 53 15 53 23] Model0.model x = Model0.model y}
    ensures { [#"../hashmap.rs" 54 14 54 42] HashLog0.hash_log x = HashLog0.hash_log y }
    
end
module Hashmap_Hash_HashLogEqModel
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone Hashmap_Hash_HashLog_Stub as HashLog0 with type self = self, axiom .
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = self,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val ghost function hash_log_eq_model [#"../hashmap.rs" 55 4 55 43] (x : self) (y : self) : ()
  axiom hash_log_eq_model_spec : forall x : self, y : self . ([#"../hashmap.rs" 53 15 53 23] Model0.model x = Model0.model y) -> ([#"../hashmap.rs" 54 14 54 42] HashLog0.hash_log x = HashLog0.hash_log y)
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module Alloc_Vec_FromElem
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module Hashmap_Impl5_New_Interface
  type k
  type v
  use mach.int.Int
  use mach.int.UInt64
  use map.Map
  use prelude.UIntSize
  use Hashmap_List_Type as Hashmap_List_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get_Stub as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_Bucket_Stub as Bucket0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model1 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl3_Model_Stub as Model0 with type k = k, type v = v, val Model0.model = Model1.model,
    val Bucket0.bucket = Bucket0.bucket, val Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone Hashmap_Impl5_HashmapInv_Stub as HashmapInv0 with type k = k, type v = v
  val new [@cfg:stackify] (size : usize) : Hashmap_MyHashMap_Type.t_myhashmap k v
    requires {[#"../hashmap.rs" 103 15 103 24] 0 < UInt64.to_int size}
    ensures { [#"../hashmap.rs" 104 14 104 34] HashmapInv0.hashmap_inv result }
    ensures { [#"../hashmap.rs" 105 4 105 54] forall i : k . Map.get (Model0.model result) (Model1.model i) = Core_Option_Option_Type.C_None }
    
end
module Hashmap_Impl5_New
  type k
  type v
  use mach.int.Int
  use mach.int.UInt64
  use map.Map
  use prelude.UIntSize
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Hash_HashLogEqModel as HashLogEqModel0 with type self = k, val Model0.model = Model1.model,
    val HashLog0.hash_log = HashLog0.hash_log, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx as BucketIx0 with type k = k, type v = v, val HashLog0.hash_log = HashLog0.hash_log,
    val Model0.model = Model2.model
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
    val Model0.model = Model1.model
  clone Hashmap_Impl4_Bucket as Bucket0 with type k = k, type v = v, val Model0.model = Model2.model,
    val BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with type k = k, type v = v, val Model0.model = Model1.model,
    val Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with type k = k, type v = v, val Model0.model = Model1.model,
    val Get0.get = Get0.get, val BucketIx0.bucket_ix = BucketIx0.bucket_ix, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl3_Model as Model0 with type k = k, type v = v, val Model0.model = Model1.model,
    val Bucket0.bucket = Bucket0.bucket, val Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with type k = k, type v = v, val Model0.model = Model2.model,
    val GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    val NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = Hashmap_List_Type.t_list (k, v),
    val Model0.model = Model2.model
  let rec cfg new [@cfg:stackify] [#"../hashmap.rs" 106 4 106 46] (size : usize) : Hashmap_MyHashMap_Type.t_myhashmap k v
    requires {[#"../hashmap.rs" 103 15 103 24] 0 < UInt64.to_int size}
    ensures { [#"../hashmap.rs" 104 14 104 34] HashmapInv0.hashmap_inv result }
    ensures { [#"../hashmap.rs" 105 4 105 54] forall i : k . Map.get (Model0.model result) (Model1.model i) = Core_Option_Option_Type.C_None }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var size_1 : usize;
  var res_5 : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var _6 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  var _7 : Hashmap_List_Type.t_list (k, v);
  var _8 : usize;
  {
    size_1 <- size;
    goto BB0
  }
  BB0 {
    _7 <- Hashmap_List_Type.C_Nil;
    _8 <- size_1;
    _6 <- ([#"../hashmap.rs" 107 39 107 70] FromElem0.from_elem _7 _8);
    goto BB1
  }
  BB1 {
    res_5 <- Hashmap_MyHashMap_Type.C_MyHashMap _6;
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _0 };
    _0 <- res_5;
    res_5 <- any Hashmap_MyHashMap_Type.t_myhashmap k v;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Hashmap_Hash_Hash_Interface
  type self
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int
  clone Hashmap_Hash_HashLog_Stub as HashLog0 with type self = self, axiom .
  val hash [@cfg:stackify] (self : self) : uint64
    ensures { [#"../hashmap.rs" 45 14 45 40] UInt64.to_int result = HashLog0.hash_log self }
    
end
module Hashmap_Hash_Hash
  type self
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = self, axiom .
  val hash [@cfg:stackify] (self : self) : uint64
    ensures { [#"../hashmap.rs" 45 14 45 40] UInt64.to_int result = HashLog0.hash_log self }
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Stub as ResolveElswhere0 with type self = i,
    type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
    type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module CreusotContracts_Logic_Model_Impl0_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model self
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model1 with type t = rhs,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model0 with type t = self,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Core_Cmp_PartialEq_Eq
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
  let function ghost_0 (self : t_ghost 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ghost a -> a
      end
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Logic_Ghost_Impl1_Inner_Stub
  type t
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  val ghost function inner (self : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl1_Inner_Interface
  type t
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  val ghost function inner (self : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl1_Inner
  type t
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  let rec ghost function inner (self : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost t) : t
   = [@vc:do_not_keep_trace] [@vc:sp]
    CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 self
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    pure {Seq.get seq (UInt64.to_int self) = out}
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    pure {forall i : int . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i}
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Hashmap_Impl5_Add_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  use Hashmap_List_Type as Hashmap_List_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get_Stub as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_Bucket_Stub as Bucket0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model1 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl3_Model_Stub as Model0 with type k = k, type v = v, val Model0.model = Model1.model,
    val Bucket0.bucket = Bucket0.bucket, val Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone Hashmap_Impl5_HashmapInv_Stub as HashmapInv0 with type k = k, type v = v
  val add [@cfg:stackify] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) (key : k) (val' : v) : ()
    requires {[#"../hashmap.rs" 111 15 111 36] HashmapInv0.hashmap_inv ( * self)}
    ensures { [#"../hashmap.rs" 112 14 112 35] HashmapInv0.hashmap_inv ( ^ self) }
    ensures { [#"../hashmap.rs" 113 4 113 105] forall i : k . Map.get (Model0.model ( ^ self)) (Model1.model i) = (if Model1.model i = Model1.model key then
      Core_Option_Option_Type.C_Some val'
    else
      Map.get (Model0.model ( * self)) (Model1.model i)
    ) }
    
end
module Hashmap_Impl5_Add
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Hash_HashLogEqModel as HashLogEqModel0 with type self = k, val Model0.model = Model1.model,
    val HashLog0.hash_log = HashLog0.hash_log, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx as BucketIx0 with type k = k, type v = v, val HashLog0.hash_log = HashLog0.hash_log,
    val Model0.model = Model2.model
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
    val Model0.model = Model1.model
  clone Hashmap_Impl4_Bucket as Bucket0 with type k = k, type v = v, val Model0.model = Model2.model,
    val BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with type k = k, type v = v, val Model0.model = Model1.model,
    val Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with type k = k, type v = v, val Model0.model = Model1.model,
    val Get0.get = Get0.get, val BucketIx0.bucket_ix = BucketIx0.bucket_ix, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl3_Model as Model0 with type k = k, type v = v, val Model0.model = Model1.model,
    val Bucket0.bucket = Bucket0.bucket, val Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with type k = k, type v = v, val Model0.model = Model2.model,
    val GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    val NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.IntSize
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
    val Model0.model = Model1.model
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = Hashmap_List_Type.t_list (k, v)
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve9 with type self = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve8 with type t = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with type self = k, type rhs = k, val Model0.model = Model3.model,
    val Model1.model = Model3.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Logic_Ghost_Impl1_Inner as Inner1 with type t = borrowed (Hashmap_List_Type.t_list (k, v))
  clone CreusotContracts_Logic_Ghost_Impl1_Inner as Inner0 with type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (Hashmap_List_Type.t_list (k, v)))
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Hashmap_List_Type.t_list (k, v)
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Hashmap_List_Type.t_list (k, v), type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model2.model,
    val InBounds0.in_bounds = InBounds0.in_bounds, val HasValue0.has_value = HasValue0.has_value,
    val ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone Hashmap_Hash_Hash_Interface as Hash0 with type self = k, val HashLog0.hash_log = HashLog0.hash_log
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))
  let rec cfg add [@cfg:stackify] [#"../hashmap.rs" 114 4 114 41] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) (key : k) (val' : v) : ()
    requires {[#"../hashmap.rs" 111 15 111 36] HashmapInv0.hashmap_inv ( * self)}
    ensures { [#"../hashmap.rs" 112 14 112 35] HashmapInv0.hashmap_inv ( ^ self) }
    ensures { [#"../hashmap.rs" 113 4 113 105] forall i : k . Map.get (Model0.model ( ^ self)) (Model1.model i) = (if Model1.model i = Model1.model key then
      Core_Option_Option_Type.C_Some val'
    else
      Map.get (Model0.model ( * self)) (Model1.model i)
    ) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v);
  var key_2 : k;
  var val'_3 : v;
  var old_self_7 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v));
  var _9 : ();
  var length_10 : usize;
  var _11 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  var index_12 : usize;
  var _13 : usize;
  var _14 : uint64;
  var _15 : k;
  var _16 : usize;
  var _17 : bool;
  var l_18 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _19 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _20 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _21 : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global));
  var _22 : usize;
  var old_l_23 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (Hashmap_List_Type.t_list (k, v)));
  var _25 : ();
  var _26 : ();
  var _34 : ();
  var _35 : isize;
  var k_36 : borrowed k;
  var v_37 : borrowed v;
  var tl_38 : borrowed (Hashmap_List_Type.t_list (k, v));
  var tl_39 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _40 : ();
  var _41 : bool;
  var _42 : k;
  var _43 : k;
  var _44 : ();
  var _45 : v;
  var _46 : ();
  var _48 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _49 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _50 : ();
  var _51 : ();
  var _52 : ();
  var _53 : Hashmap_List_Type.t_list (k, v);
  var _54 : (k, v);
  var _55 : k;
  var _56 : v;
  var _57 : Hashmap_List_Type.t_list (k, v);
  var _58 : Hashmap_List_Type.t_list (k, v);
  var _59 : ();
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    _9 <- ();
    old_self_7 <- ([#"../hashmap.rs" 116 23 116 38] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_7 };
    _11 <- Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1);
    length_10 <- ([#"../hashmap.rs" 117 21 117 39] Len0.len _11);
    goto BB2
  }
  BB2 {
    _15 <- key_2;
    _14 <- ([#"../hashmap.rs" 118 27 118 37] Hash0.hash _15);
    goto BB3
  }
  BB3 {
    _13 <- UIntSize.of_int (UInt64.to_int _14);
    _16 <- length_10;
    _17 <- ([#"../hashmap.rs" 118 27 118 55] _16 = (0 : usize));
    assert { [#"../hashmap.rs" 118 27 118 55] not _17 };
    goto BB4
  }
  BB4 {
    index_12 <- ([#"../hashmap.rs" 118 27 118 55] _13 % _16);
    _21 <- borrow_mut (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1));
    self_1 <- { self_1 with current = (let Hashmap_MyHashMap_Type.C_MyHashMap a =  * self_1 in Hashmap_MyHashMap_Type.C_MyHashMap ( ^ _21)) };
    assume { Resolve1.resolve self_1 };
    _22 <- index_12;
    _20 <- ([#"../hashmap.rs" 119 39 119 58] IndexMut0.index_mut _21 _22);
    goto BB5
  }
  BB5 {
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    assume { Resolve2.resolve _20 };
    l_18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ l_18) };
    assume { Resolve2.resolve _19 };
    _25 <- ();
    old_l_23 <- ([#"../hashmap.rs" 120 20 120 32] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost l_18);
    goto BB6
  }
  BB6 {
    assume { Resolve3.resolve old_l_23 };
    goto BB7
  }
  BB7 {
    invariant y { [#"../hashmap.rs" 122 23 122 49]  ^ Inner0.inner old_self_7 =  ^ self_1 };
    invariant xx { [#"../hashmap.rs" 123 24 123 52] GoodBucket0.good_bucket ( * self_1) ( * l_18) (UInt64.to_int index_12) };
    invariant xx { [#"../hashmap.rs" 122 8 122 51] GoodBucket0.good_bucket ( * self_1) ( ^ l_18) (UInt64.to_int index_12) -> GoodBucket0.good_bucket ( * self_1) ( ^ Inner1.inner old_l_23) (UInt64.to_int index_12) };
    invariant get_key { [#"../hashmap.rs" 122 8 122 51] Get0.get ( ^ l_18) (Model1.model key_2) = Core_Option_Option_Type.C_Some val'_3 -> Get0.get ( ^ CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_l_23) (Model1.model key_2) = Core_Option_Option_Type.C_Some val'_3 };
    invariant get_rest { [#"../hashmap.rs" 122 8 122 51] forall i : ModelTy0.modelTy . Get0.get ( ^ l_18) i = Get0.get ( * l_18) i -> Get0.get ( ^ CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_l_23) i = Get0.get ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_l_23) i };
    invariant no_double_binding { [#"../hashmap.rs" 127 39 127 63] NoDoubleBinding0.no_double_binding ( * l_18) };
    invariant no_double_binding_magic { [#"../hashmap.rs" 122 8 122 51] (forall i : ModelTy0.modelTy . Get0.get ( * l_18) i = Get0.get ( ^ l_18) i \/ i = Model1.model key_2) /\ NoDoubleBinding0.no_double_binding ( ^ l_18) -> NoDoubleBinding0.no_double_binding ( ^ CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_l_23) };
    switch ( * l_18)
      | Hashmap_List_Type.C_Cons _ _ -> goto BB8
      | _ -> goto BB12
      end
  }
  BB8 {
    k_36 <- borrow_mut (let (a, _) = Hashmap_List_Type.cons_0 ( * l_18) in a);
    l_18 <- { l_18 with current = (let Hashmap_List_Type.C_Cons a b =  * l_18 in Hashmap_List_Type.C_Cons (let (a, b) = Hashmap_List_Type.cons_0 ( * l_18) in ( ^ k_36, b)) b) };
    v_37 <- borrow_mut (let (_, a) = Hashmap_List_Type.cons_0 ( * l_18) in a);
    l_18 <- { l_18 with current = (let Hashmap_List_Type.C_Cons a b =  * l_18 in Hashmap_List_Type.C_Cons (let (a, b) = Hashmap_List_Type.cons_0 ( * l_18) in (a,  ^ v_37)) b) };
    tl_38 <- borrow_mut (Hashmap_List_Type.cons_1 ( * l_18));
    l_18 <- { l_18 with current = (let Hashmap_List_Type.C_Cons a b =  * l_18 in Hashmap_List_Type.C_Cons a ( ^ tl_38)) };
    assume { Resolve2.resolve l_18 };
    assume { Resolve4.resolve tl_39 };
    tl_39 <- tl_38;
    tl_38 <- any borrowed (Hashmap_List_Type.t_list (k, v));
    _42 <-  * k_36;
    assume { Resolve5.resolve k_36 };
    _43 <- key_2;
    _41 <- ([#"../hashmap.rs" 132 15 132 24] Eq0.eq _42 _43);
    goto BB9
  }
  BB9 {
    switch (_41)
      | False -> goto BB11
      | True -> goto BB10
      end
  }
  BB10 {
    assume { Resolve6.resolve key_2 };
    assume { Resolve4.resolve tl_39 };
    assume { Resolve7.resolve _45 };
    _45 <- val'_3;
    assume { Resolve7.resolve val'_3 };
    assume { Resolve7.resolve ( * v_37) };
    v_37 <- { v_37 with current = _45 };
    _45 <- any v;
    assume { Resolve8.resolve v_37 };
    assert { [#"../hashmap.rs" 134 32 134 52] HashmapInv0.hashmap_inv ( * self_1) };
    _46 <- ();
    _0 <- ();
    goto BB17
  }
  BB11 {
    assume { Resolve8.resolve v_37 };
    _40 <- ();
    _49 <- borrow_mut ( * tl_39);
    tl_39 <- { tl_39 with current = ( ^ _49) };
    assume { Resolve4.resolve tl_39 };
    _48 <- borrow_mut ( * _49);
    _49 <- { _49 with current = ( ^ _48) };
    assume { Resolve2.resolve _49 };
    assume { Resolve2.resolve l_18 };
    l_18 <- _48;
    _48 <- any borrowed (Hashmap_List_Type.t_list (k, v));
    _34 <- ();
    goto BB7
  }
  BB12 {
    _26 <- ();
    assume { Resolve6.resolve _55 };
    _55 <- key_2;
    assume { Resolve6.resolve key_2 };
    assume { Resolve7.resolve _56 };
    _56 <- val'_3;
    assume { Resolve7.resolve val'_3 };
    _54 <- (_55, _56);
    _58 <- Hashmap_List_Type.C_Nil;
    _57 <- _58;
    goto BB13
  }
  BB13 {
    _53 <- Hashmap_List_Type.C_Cons _54 _57;
    goto BB14
  }
  BB14 {
    assume { Resolve9.resolve ( * l_18) };
    l_18 <- { l_18 with current = _53 };
    goto BB15
  }
  BB15 {
    assume { Resolve2.resolve l_18 };
    goto BB16
  }
  BB16 {
    assert { [#"../hashmap.rs" 142 24 142 44] HashmapInv0.hashmap_inv ( * self_1) };
    _59 <- ();
    _0 <- ();
    goto BB17
  }
  BB17 {
    return _0
  }
  
end
module Hashmap_Impl3_ModelTy_Type
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Core_Option_Option_Type.t_option v)
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Hashmap_Impl5_Get_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl3_ModelTy_Type as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy1.modelTy
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model1 with type self = k,
    type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model0 with type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_HashmapInv_Stub as HashmapInv0 with type k = k, type v = v
  val get [@cfg:stackify] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (key : k) : Core_Option_Option_Type.t_option v
    requires {[#"../hashmap.rs" 145 15 145 33] HashmapInv0.hashmap_inv self}
    ensures { [#"../hashmap.rs" 146 14 149 5] match (result) with
      | Core_Option_Option_Type.C_Some v -> Map.get (Model0.model self) (Model1.model key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (Model0.model self) (Model1.model key) = Core_Option_Option_Type.C_None
      end }
    
end
module Hashmap_Impl5_Get
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = k
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
    type ModelTy0.modelTy = ModelTy1.modelTy
  clone Hashmap_Hash_HashLogEqModel as HashLogEqModel0 with type self = k, val Model0.model = Model1.model,
    val HashLog0.hash_log = HashLog0.hash_log, type ModelTy0.modelTy = ModelTy1.modelTy, axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx as BucketIx0 with type k = k, type v = v, val HashLog0.hash_log = HashLog0.hash_log,
    val Model0.model = Model2.model
  clone Hashmap_Impl4_Bucket as Bucket0 with type k = k, type v = v, val Model0.model = Model2.model,
    val BucketIx0.bucket_ix = BucketIx0.bucket_ix
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy1.modelTy,
    val Model0.model = Model1.model
  clone Hashmap_Impl3_Model as Model3 with type k = k, type v = v, val Model0.model = Model1.model,
    val Bucket0.bucket = Bucket0.bucket, val Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy1.modelTy, axiom .
  clone Hashmap_Impl3_ModelTy_Type as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy1.modelTy
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with type k = k, type v = v, val Model0.model = Model1.model,
    val Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy1.modelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with type k = k, type v = v, val Model0.model = Model1.model,
    val Get0.get = Get0.get, val BucketIx0.bucket_ix = BucketIx0.bucket_ix, type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model3.model
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with type k = k, type v = v, val Model0.model = Model2.model,
    val GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    val NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.IntSize
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = k, type ModelTy0.modelTy = ModelTy1.modelTy,
    val Model0.model = Model1.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy2 with type t = Hashmap_List_Type.t_list (k, v)
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = k
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with type self = k, type rhs = k, val Model0.model = Model4.model,
    val Model1.model = Model4.model, type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Hashmap_List_Type.t_list (k, v)
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Hashmap_List_Type.t_list (k, v), type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model2.model,
    val InBounds0.in_bounds = InBounds0.in_bounds, val HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model2.model
  clone Hashmap_Hash_Hash_Interface as Hash0 with type self = k, val HashLog0.hash_log = HashLog0.hash_log
  let rec cfg get [@cfg:stackify] [#"../hashmap.rs" 150 4 150 43] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (key : k) : Core_Option_Option_Type.t_option v
    requires {[#"../hashmap.rs" 145 15 145 33] HashmapInv0.hashmap_inv self}
    ensures { [#"../hashmap.rs" 146 14 149 5] match (result) with
      | Core_Option_Option_Type.C_Some v -> Map.get (Model0.model self) (Model1.model key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (Model0.model self) (Model1.model key) = Core_Option_Option_Type.C_None
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option v;
  var self_1 : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var key_2 : k;
  var _3 : ();
  var index_6 : usize;
  var _7 : usize;
  var _8 : uint64;
  var _9 : k;
  var _10 : usize;
  var _11 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  var _12 : bool;
  var l_13 : Hashmap_List_Type.t_list (k, v);
  var _14 : Hashmap_List_Type.t_list (k, v);
  var _15 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  var _16 : usize;
  var _17 : ();
  var _19 : ();
  var _20 : isize;
  var k_21 : k;
  var v_22 : v;
  var tl_23 : Hashmap_List_Type.t_list (k, v);
  var _24 : ();
  var _25 : bool;
  var _26 : k;
  var _27 : k;
  var _28 : ();
  var _29 : v;
  var _30 : Hashmap_List_Type.t_list (k, v);
  var _31 : Hashmap_List_Type.t_list (k, v);
  var _32 : ();
  var _33 : ();
  var _34 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _9 <- key_2;
    _8 <- ([#"../hashmap.rs" 151 27 151 37] Hash0.hash _9);
    goto BB1
  }
  BB1 {
    _7 <- UIntSize.of_int (UInt64.to_int _8);
    _11 <- Hashmap_MyHashMap_Type.myhashmap_buckets self_1;
    _10 <- ([#"../hashmap.rs" 151 49 151 67] Len0.len _11);
    goto BB2
  }
  BB2 {
    _12 <- ([#"../hashmap.rs" 151 27 151 67] _10 = (0 : usize));
    assert { [#"../hashmap.rs" 151 27 151 67] not _12 };
    goto BB3
  }
  BB3 {
    index_6 <- ([#"../hashmap.rs" 151 27 151 67] _7 % _10);
    _15 <- Hashmap_MyHashMap_Type.myhashmap_buckets self_1;
    assume { Resolve0.resolve self_1 };
    _16 <- index_6;
    _14 <- ([#"../hashmap.rs" 152 21 152 40] Index0.index _15 _16);
    goto BB4
  }
  BB4 {
    l_13 <- _14;
    assume { Resolve1.resolve _14 };
    goto BB5
  }
  BB5 {
    invariant not_already_found { [#"../hashmap.rs" 154 39 154 83] Get0.get (Bucket0.bucket self_1 key_2) (Model1.model key_2) = Get0.get l_13 (Model1.model key_2) };
    switch (l_13)
      | Hashmap_List_Type.C_Cons _ _ -> goto BB6
      | _ -> goto BB10
      end
  }
  BB6 {
    k_21 <- (let (a, _) = Hashmap_List_Type.cons_0 l_13 in a);
    v_22 <- (let (_, a) = Hashmap_List_Type.cons_0 l_13 in a);
    tl_23 <- Hashmap_List_Type.cons_1 l_13;
    assume { Resolve1.resolve l_13 };
    _26 <- k_21;
    assume { Resolve2.resolve k_21 };
    _27 <- key_2;
    _25 <- ([#"../hashmap.rs" 156 15 156 24] Eq0.eq _26 _27);
    goto BB7
  }
  BB7 {
    switch (_25)
      | False -> goto BB9
      | True -> goto BB8
      end
  }
  BB8 {
    assume { Resolve3.resolve key_2 };
    assume { Resolve4.resolve tl_23 };
    _29 <- v_22;
    assume { Resolve5.resolve v_22 };
    _0 <- Core_Option_Option_Type.C_Some _29;
    goto BB11
  }
  BB9 {
    assume { Resolve5.resolve v_22 };
    _24 <- ();
    _31 <- tl_23;
    assume { Resolve4.resolve tl_23 };
    _30 <- _31;
    assume { Resolve1.resolve _31 };
    assume { Resolve1.resolve l_13 };
    l_13 <- _30;
    _30 <- any Hashmap_List_Type.t_list (k, v);
    _19 <- ();
    goto BB5
  }
  BB10 {
    assume { Resolve3.resolve key_2 };
    assume { Resolve1.resolve l_13 };
    _17 <- ();
    _0 <- Core_Option_Option_Type.C_None;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Core_Mem_Replace_Interface
  type t
  use prelude.Borrow
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures {  ^ dest = src }
    ensures { result =  * dest }
    
end
module Core_Mem_Replace
  type t
  use prelude.Borrow
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures {  ^ dest = src }
    ensures { result =  * dest }
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : borrowed t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model ( * self)
end
module Hashmap_Impl5_Resize_Interface
  type k
  type v
  use mach.int.Int
  use prelude.Borrow
  use seq.Seq
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use Hashmap_List_Type as Hashmap_List_Type
  clone Hashmap_Impl1_Get_Stub as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_Bucket_Stub as Bucket0 with type k = k, type v = v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model2 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl3_Model_Stub as Model1 with type k = k, type v = v, val Model0.model = Model2.model,
    val Bucket0.bucket = Bucket0.bucket, val Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone Hashmap_Impl5_HashmapInv_Stub as HashmapInv0 with type k = k, type v = v
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val resize [@cfg:stackify] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : ()
    requires {[#"../hashmap.rs" 165 15 165 43] Seq.length (Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self))) < 1000}
    requires {[#"../hashmap.rs" 166 15 166 36] HashmapInv0.hashmap_inv ( * self)}
    ensures { [#"../hashmap.rs" 167 14 167 35] HashmapInv0.hashmap_inv ( ^ self) }
    ensures { [#"../hashmap.rs" 168 4 168 66] forall k : k . Map.get (Model1.model ( ^ self)) (Model2.model k) = Map.get (Model1.model ( * self)) (Model2.model k) }
    
end
module Hashmap_Impl5_Resize
  type k
  type v
  use mach.int.Int
  use prelude.Borrow
  use seq.Seq
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model2 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Hash_HashLogEqModel as HashLogEqModel0 with type self = k, val Model0.model = Model2.model,
    val HashLog0.hash_log = HashLog0.hash_log, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx as BucketIx0 with type k = k, type v = v, val HashLog0.hash_log = HashLog0.hash_log,
    val Model0.model = Model0.model
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
    val Model0.model = Model2.model
  clone Hashmap_Impl4_Bucket as Bucket0 with type k = k, type v = v, val Model0.model = Model0.model,
    val BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with type k = k, type v = v, val Model0.model = Model2.model,
    val Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with type k = k, type v = v, val Model0.model = Model2.model,
    val Get0.get = Get0.get, val BucketIx0.bucket_ix = BucketIx0.bucket_ix, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl3_Model as Model1 with type k = k, type v = v, val Model0.model = Model2.model,
    val Bucket0.bucket = Bucket0.bucket, val Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with type k = k, type v = v, val Model0.model = Model0.model,
    val GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    val NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  use prelude.UIntSize
  use prelude.IntSize
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use mach.int.UInt64
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy2 with type t = Hashmap_List_Type.t_list (k, v)
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Hashmap_List_Type.t_list (k, v)
  clone Hashmap_Impl3_ModelTy_Type as ModelTy1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Hashmap_List_Type.t_list (k, v)
  clone Hashmap_Impl5_Add_Interface as Add0 with type k = k, type v = v,
    val HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv, val Model0.model = Model1.model,
    val Model1.model = Model2.model, val Bucket0.bucket = Bucket0.bucket, val Get0.get = Get0.get,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = k
  clone Core_Mem_Replace_Interface as Replace0 with type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Hashmap_List_Type.t_list (k, v)
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Hashmap_List_Type.t_list (k, v), type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model0.model,
    val InBounds0.in_bounds = InBounds0.in_bounds, val HasValue0.has_value = HasValue0.has_value,
    val ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Ghost_Impl1_Inner as Inner0 with type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ModelTy0.modelTy = ModelTy1.modelTy, val Model0.model = Model1.model
  clone Hashmap_Impl5_New_Interface as New0 with type k = k, type v = v,
    val HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv, val Model0.model = Model1.model,
    val Model1.model = Model2.model, val Bucket0.bucket = Bucket0.bucket, val Get0.get = Get0.get,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))
  let rec cfg resize [@cfg:stackify] [#"../hashmap.rs" 170 4 170 24] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : ()
    requires {[#"../hashmap.rs" 165 15 165 43] Seq.length (Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self))) < 1000}
    requires {[#"../hashmap.rs" 166 15 166 36] HashmapInv0.hashmap_inv ( * self)}
    ensures { [#"../hashmap.rs" 167 14 167 35] HashmapInv0.hashmap_inv ( ^ self) }
    ensures { [#"../hashmap.rs" 168 4 168 66] forall k : k . Map.get (Model1.model ( ^ self)) (Model2.model k) = Map.get (Model1.model ( * self)) (Model2.model k) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v);
  var old_self_6 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v));
  var _8 : ();
  var new_9 : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var _10 : usize;
  var _11 : usize;
  var _12 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  var i_13 : usize;
  var _14 : ();
  var _22 : ();
  var _23 : bool;
  var _24 : usize;
  var _25 : usize;
  var _26 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  var l_27 : Hashmap_List_Type.t_list (k, v);
  var _28 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _29 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _30 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _31 : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global));
  var _32 : usize;
  var _33 : Hashmap_List_Type.t_list (k, v);
  var _34 : ();
  var _41 : isize;
  var k_42 : k;
  var v_43 : v;
  var tl_44 : Hashmap_List_Type.t_list (k, v);
  var _45 : ();
  var _46 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v);
  var _47 : k;
  var _48 : v;
  var _49 : Hashmap_List_Type.t_list (k, v);
  var _50 : ();
  var _51 : ();
  var _52 : ();
  var _53 : ();
  var _55 : ();
  var _56 : ();
  var _57 : ();
  var _58 : Hashmap_MyHashMap_Type.t_myhashmap k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _8 <- ();
    old_self_6 <- ([#"../hashmap.rs" 171 23 171 38] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_6 };
    _12 <- Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1);
    _11 <- ([#"../hashmap.rs" 172 32 172 50] Len0.len _12);
    goto BB2
  }
  BB2 {
    _10 <- ([#"../hashmap.rs" 172 32 172 54] _11 * (2 : usize));
    new_9 <- ([#"../hashmap.rs" 172 22 172 55] New0.new _10);
    goto BB3
  }
  BB3 {
    i_13 <- (0 : usize);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant seen { [#"../hashmap.rs" 175 8 175 111] forall k : k . BucketIx0.bucket_ix ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6) k < UInt64.to_int i_13 -> Map.get (Model3.model (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6)) (Model2.model k) = Map.get (Model1.model new_9) (Model2.model k) };
    invariant unseen { [#"../hashmap.rs" 175 8 175 111] forall k : k . UInt64.to_int i_13 <= BucketIx0.bucket_ix ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6) k /\ BucketIx0.bucket_ix ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6) k <= Seq.length (Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6))) -> Map.get (Model1.model new_9) (Model2.model k) = Core_Option_Option_Type.C_None };
    invariant rest { [#"../hashmap.rs" 175 8 175 111] forall j : int . UInt64.to_int i_13 <= j /\ j < Seq.length (Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6))) -> Seq.get (Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1))) j = Seq.get (Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6))) j };
    invariant a { [#"../hashmap.rs" 181 23 181 40] HashmapInv0.hashmap_inv new_9 };
    invariant p { [#"../hashmap.rs" 182 23 182 49]  ^ Inner0.inner old_self_6 =  ^ self_1 };
    invariant l { [#"../hashmap.rs" 183 23 183 73] Seq.length (Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6))) = Seq.length (Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1))) };
    invariant z { [#"../hashmap.rs" 184 23 184 50] UInt64.to_int i_13 <= Seq.length (Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1))) };
    _24 <- i_13;
    _26 <- Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1);
    _25 <- ([#"../hashmap.rs" 185 18 185 36] Len0.len _26);
    goto BB7
  }
  BB7 {
    _23 <- ([#"../hashmap.rs" 185 14 185 36] _24 < _25);
    switch (_23)
      | False -> goto BB25
      | True -> goto BB8
      end
  }
  BB8 {
    _31 <- borrow_mut (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1));
    self_1 <- { self_1 with current = (let Hashmap_MyHashMap_Type.C_MyHashMap a =  * self_1 in Hashmap_MyHashMap_Type.C_MyHashMap ( ^ _31)) };
    _32 <- i_13;
    _30 <- ([#"../hashmap.rs" 186 56 186 71] IndexMut0.index_mut _31 _32);
    goto BB9
  }
  BB9 {
    _29 <- borrow_mut ( * _30);
    _30 <- { _30 with current = ( ^ _29) };
    assume { Resolve1.resolve _30 };
    _28 <- borrow_mut ( * _29);
    _29 <- { _29 with current = ( ^ _28) };
    _33 <- Hashmap_List_Type.C_Nil;
    l_27 <- ([#"../hashmap.rs" 186 33 186 83] Replace0.replace _28 _33);
    goto BB10
  }
  BB10 {
    assume { Resolve1.resolve _29 };
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    invariant a { [#"../hashmap.rs" 188 27 188 44] HashmapInv0.hashmap_inv new_9 };
    invariant x { [#"../hashmap.rs" 188 12 188 46] forall k : k . BucketIx0.bucket_ix ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6) k < UInt64.to_int i_13 -> Map.get (Model3.model (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6)) (Model2.model k) = Map.get (Model1.model new_9) (Model2.model k) };
    invariant x { [#"../hashmap.rs" 188 12 188 46] forall k : k . UInt64.to_int i_13 < BucketIx0.bucket_ix ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6) k /\ BucketIx0.bucket_ix ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6) k <= Seq.length (Model0.model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6))) -> Map.get (Model1.model new_9) (Model2.model k) = Core_Option_Option_Type.C_None };
    invariant zzz { [#"../hashmap.rs" 188 12 188 46] forall k : k . BucketIx0.bucket_ix ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6) k = UInt64.to_int i_13 -> Map.get (Model3.model (Inner0.inner old_self_6)) (Model2.model k) = match (Get0.get l_27 (Model2.model k)) with
      | Core_Option_Option_Type.C_None -> Map.get (Model1.model new_9) (Model2.model k)
      | Core_Option_Option_Type.C_Some v -> Core_Option_Option_Type.C_Some v
      end };
    invariant l_no_double_binding { [#"../hashmap.rs" 195 45 195 66] NoDoubleBinding0.no_double_binding l_27 };
    invariant x { [#"../hashmap.rs" 196 27 196 54] GoodBucket0.good_bucket ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6) l_27 (UInt64.to_int i_13) };
    switch (l_27)
      | Hashmap_List_Type.C_Cons _ _ -> goto BB17
      | _ -> goto BB21
      end
  }
  BB17 {
    assume { Resolve2.resolve k_42 };
    k_42 <- (let (a, _) = Hashmap_List_Type.cons_0 l_27 in a);
    assume { Resolve3.resolve v_43 };
    v_43 <- (let (_, a) = Hashmap_List_Type.cons_0 l_27 in a);
    assume { Resolve4.resolve tl_44 };
    tl_44 <- Hashmap_List_Type.cons_1 l_27;
    l_27 <- (let Hashmap_List_Type.C_Cons a b = l_27 in Hashmap_List_Type.C_Cons a (any Hashmap_List_Type.t_list (k, v)));
    _46 <- borrow_mut new_9;
    new_9 <-  ^ _46;
    assume { Resolve2.resolve _47 };
    _47 <- k_42;
    assume { Resolve2.resolve k_42 };
    assume { Resolve3.resolve _48 };
    _48 <- v_43;
    assume { Resolve3.resolve v_43 };
    _45 <- ([#"../hashmap.rs" 198 16 198 29] Add0.add _46 _47 _48);
    goto BB18
  }
  BB18 {
    assume { Resolve5.resolve _49 };
    _49 <- tl_44;
    tl_44 <- any Hashmap_List_Type.t_list (k, v);
    assume { Resolve5.resolve l_27 };
    l_27 <- _49;
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    _22 <- ();
    goto BB22
  }
  BB21 {
    _34 <- ();
    assert { [#"../hashmap.rs" 201 12 201 115] forall k : k . BucketIx0.bucket_ix ( * CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6) k = UInt64.to_int i_13 -> Map.get (Model3.model (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_self_6)) (Model2.model k) = Map.get (Model1.model new_9) (Model2.model k) };
    goto BB23
  }
  BB22 {
    assume { Resolve4.resolve tl_44 };
    goto BB16
  }
  BB23 {
    _53 <- ();
    i_13 <- ([#"../hashmap.rs" 202 12 202 18] i_13 + (1 : usize));
    _22 <- ();
    goto BB24
  }
  BB24 {
    assume { Resolve5.resolve l_27 };
    goto BB6
  }
  BB25 {
    _14 <- ();
    assume { Resolve6.resolve _58 };
    _58 <- new_9;
    new_9 <- any Hashmap_MyHashMap_Type.t_myhashmap k v;
    assume { Resolve6.resolve ( * self_1) };
    self_1 <- { self_1 with current = _58 };
    goto BB26
  }
  BB26 {
    assume { Resolve7.resolve self_1 };
    goto BB27
  }
  BB27 {
    _0 <- ();
    goto BB28
  }
  BB28 {
    return _0
  }
  
end
module CreusotContracts_Logic_Int_Impl15_Model_Stub
  use mach.int.Int
  use prelude.UIntSize
  val ghost function model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl15_Model_Interface
  use mach.int.Int
  use prelude.UIntSize
  val ghost function model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl15_Model
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  let rec ghost function model (self : usize) : int = [@vc:do_not_keep_trace] [@vc:sp]
    UInt64.to_int self
end
module CreusotContracts_Logic_Int_Impl15_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module Hashmap_Main_Interface
  val main [@cfg:stackify] (_ : ()) : ()
end
module Hashmap_Main
  use mach.int.Int
  use prelude.UIntSize
  use prelude.IntSize
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl2_HashLog as HashLog0 with axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Hashmap_List_Type.t_list (usize, isize),
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone Hashmap_Impl4_BucketIx as BucketIx0 with type k = usize, type v = isize,
    val HashLog0.hash_log = HashLog0.hash_log, val Model0.model = Model3.model
  clone CreusotContracts_Logic_Int_Impl15_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Int_Impl15_Model as Model1
  clone Hashmap_Impl1_Get as Get1 with type k = usize, type v = isize, type ModelTy0.modelTy = ModelTy0.modelTy,
    val Model0.model = Model1.model
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with type k = usize, type v = isize,
    val Model0.model = Model1.model, val Get0.get = Get1.get, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with type k = usize, type v = isize, val Model0.model = Model1.model,
    val Get0.get = Get1.get, val BucketIx0.bucket_ix = BucketIx0.bucket_ix, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl3_ModelTy_Type as ModelTy1 with type k = usize, type v = isize,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl4_Bucket as Bucket0 with type k = usize, type v = isize, val Model0.model = Model3.model,
    val BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl3_Model as Model0 with type k = usize, type v = isize, val Model0.model = Model1.model,
    val Bucket0.bucket = Bucket0.bucket, val Get0.get = Get1.get, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Hashmap_MyHashMap_Type.t_myhashmap usize isize,
    type ModelTy0.modelTy = ModelTy1.modelTy, val Model0.model = Model0.model
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with type k = usize, type v = isize, val Model0.model = Model3.model,
    val GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    val NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  clone Hashmap_Impl5_Add_Interface as Add0 with type k = usize, type v = isize,
    val HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv, val Model0.model = Model0.model,
    val Model1.model = Model1.model, val Bucket0.bucket = Bucket0.bucket, val Get0.get = Get1.get,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_Get_Interface as Get0 with type k = usize, type v = isize,
    val HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv, val Model0.model = Model2.model,
    val Model1.model = Model1.model, type ModelTy1.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_New_Interface as New0 with type k = usize, type v = isize,
    val HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv, val Model0.model = Model0.model,
    val Model1.model = Model1.model, val Bucket0.bucket = Bucket0.bucket, val Get0.get = Get1.get,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg main [@cfg:stackify] [#"../hashmap.rs" 226 0 226 13] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var h1_1 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var h2_2 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _x_3 : Core_Option_Option_Type.t_option isize;
  var _4 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _y_5 : Core_Option_Option_Type.t_option isize;
  var _6 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _z_7 : Core_Option_Option_Type.t_option isize;
  var _8 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _t_9 : Core_Option_Option_Type.t_option isize;
  var _10 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _11 : ();
  var _12 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize);
  var _13 : Core_Option_Option_Type.t_option isize;
  var _14 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _15 : Core_Option_Option_Type.t_option isize;
  var _16 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _17 : Core_Option_Option_Type.t_option isize;
  var _18 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _19 : Core_Option_Option_Type.t_option isize;
  var _20 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _21 : ();
  var _22 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize);
  var _23 : Core_Option_Option_Type.t_option isize;
  var _24 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _25 : Core_Option_Option_Type.t_option isize;
  var _26 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _27 : Core_Option_Option_Type.t_option isize;
  var _28 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _29 : Core_Option_Option_Type.t_option isize;
  var _30 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  {
    goto BB0
  }
  BB0 {
    h1_1 <- ([#"../hashmap.rs" 233 42 233 60] New0.new (17 : usize));
    goto BB1
  }
  BB1 {
    h2_2 <- ([#"../hashmap.rs" 234 42 234 60] New0.new (42 : usize));
    goto BB2
  }
  BB2 {
    _4 <- h1_1;
    _x_3 <- ([#"../hashmap.rs" 235 17 235 26] Get0.get _4 (1 : usize));
    goto BB3
  }
  BB3 {
    _6 <- h1_1;
    _y_5 <- ([#"../hashmap.rs" 236 17 236 26] Get0.get _6 (2 : usize));
    goto BB4
  }
  BB4 {
    _8 <- h2_2;
    _z_7 <- ([#"../hashmap.rs" 237 17 237 26] Get0.get _8 (1 : usize));
    goto BB5
  }
  BB5 {
    _10 <- h2_2;
    _t_9 <- ([#"../hashmap.rs" 238 17 238 26] Get0.get _10 (2 : usize));
    goto BB6
  }
  BB6 {
    _12 <- borrow_mut h1_1;
    h1_1 <-  ^ _12;
    _11 <- ([#"../hashmap.rs" 242 4 242 17] Add0.add _12 (1 : usize) (17 : isize));
    goto BB7
  }
  BB7 {
    _14 <- h1_1;
    _13 <- ([#"../hashmap.rs" 243 9 243 18] Get0.get _14 (1 : usize));
    goto BB8
  }
  BB8 {
    _x_3 <- _13;
    _13 <- any Core_Option_Option_Type.t_option isize;
    _16 <- h1_1;
    _15 <- ([#"../hashmap.rs" 244 9 244 18] Get0.get _16 (2 : usize));
    goto BB9
  }
  BB9 {
    _y_5 <- _15;
    _15 <- any Core_Option_Option_Type.t_option isize;
    _18 <- h2_2;
    _17 <- ([#"../hashmap.rs" 245 9 245 18] Get0.get _18 (1 : usize));
    goto BB10
  }
  BB10 {
    _z_7 <- _17;
    _17 <- any Core_Option_Option_Type.t_option isize;
    _20 <- h2_2;
    _19 <- ([#"../hashmap.rs" 246 9 246 18] Get0.get _20 (2 : usize));
    goto BB11
  }
  BB11 {
    _t_9 <- _19;
    _19 <- any Core_Option_Option_Type.t_option isize;
    _22 <- borrow_mut h2_2;
    h2_2 <-  ^ _22;
    _21 <- ([#"../hashmap.rs" 249 4 249 17] Add0.add _22 (1 : usize) (42 : isize));
    goto BB12
  }
  BB12 {
    _24 <- h1_1;
    _23 <- ([#"../hashmap.rs" 250 9 250 18] Get0.get _24 (1 : usize));
    goto BB13
  }
  BB13 {
    _x_3 <- _23;
    _23 <- any Core_Option_Option_Type.t_option isize;
    _26 <- h1_1;
    _25 <- ([#"../hashmap.rs" 251 9 251 18] Get0.get _26 (2 : usize));
    goto BB14
  }
  BB14 {
    _y_5 <- _25;
    _25 <- any Core_Option_Option_Type.t_option isize;
    _28 <- h2_2;
    _27 <- ([#"../hashmap.rs" 252 9 252 18] Get0.get _28 (1 : usize));
    goto BB15
  }
  BB15 {
    _z_7 <- _27;
    _27 <- any Core_Option_Option_Type.t_option isize;
    _30 <- h2_2;
    _29 <- ([#"../hashmap.rs" 253 9 253 18] Get0.get _30 (2 : usize));
    goto BB16
  }
  BB16 {
    _t_9 <- _29;
    _29 <- any Core_Option_Option_Type.t_option isize;
    _0 <- ();
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Borrow
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Borrow
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Hashmap_Impl0
  type t
  use Hashmap_List_Type as Hashmap_List_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Hashmap_List_Type.t_list t
  clone Hashmap_Impl0_Clone_Interface as Clone0 with type t = t
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Hashmap_List_Type.t_list t,
    val clone' = Clone0.clone'
end
module Hashmap_Impl2
  use mach.int.Int
  use prelude.UIntSize
  clone Hashmap_Impl2_HashLog as HashLog0 with axiom .
  clone Hashmap_Hash_HashLog_Interface as HashLog1 with type self = usize, val hash_log = HashLog0.hash_log, axiom .
  clone Hashmap_Impl2_Hash_Interface as Hash0 with val HashLog0.hash_log = HashLog0.hash_log
  clone Hashmap_Hash_Hash_Interface as Hash1 with type self = usize, val hash = Hash0.hash,
    val HashLog0.hash_log = HashLog0.hash_log
  goal hash_log_spec : forall self : usize . forall result : int . ([#"../hashmap.rs" 65 14 65 25] result >= 0) -> ([#"../hashmap.rs" 49 14 49 25] result >= 0)
  use mach.int.UInt64
  clone CreusotContracts_Logic_Int_Impl15_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Int_Impl15_Model as Model0
  clone Hashmap_Impl2_HashLogEqModel as HashLogEqModel0 with val HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone Hashmap_Hash_HashLogEqModel_Interface as HashLogEqModel1 with type self = usize,
    val hash_log_eq_model = HashLogEqModel0.hash_log_eq_model, val Model0.model = Model0.model,
    val HashLog0.hash_log = HashLog0.hash_log, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  goal hash_log_eq_model_spec : forall x : usize, y : usize . (([#"../hashmap.rs" 53 15 53 23] UInt64.to_int x = UInt64.to_int y) -> ([#"../hashmap.rs" 71 15 71 23] UInt64.to_int x = UInt64.to_int y)) /\ (forall result : () . ([#"../hashmap.rs" 72 14 72 42] HashLog0.hash_log x = HashLog0.hash_log y) -> ([#"../hashmap.rs" 54 14 54 42] HashLog0.hash_log x = HashLog0.hash_log y))
end
module Hashmap_Impl3
  type k
  type v
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = k, axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx as BucketIx0 with type k = k, type v = v, val HashLog0.hash_log = HashLog0.hash_log,
    val Model0.model = Model3.model
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model2 with type self = k,
    type ModelTy0.modelTy = ModelTy2.modelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
    val Model0.model = Model2.model
  clone Hashmap_Impl4_Bucket as Bucket0 with type k = k, type v = v, val Model0.model = Model3.model,
    val BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl3_ModelTy_Type as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone Hashmap_Impl3_Model as Model0 with type k = k, type v = v, val Model0.model = Model2.model,
    val Bucket0.bucket = Bucket0.bucket, val Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy2.modelTy, axiom .
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Hashmap_MyHashMap_Type.t_myhashmap k v,
    val model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type modelTy = ModelTy0.modelTy
end
