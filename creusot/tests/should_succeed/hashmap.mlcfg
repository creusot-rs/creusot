
module Hashmap_List_Type
  type t_list 't =
    | C_Nil
    | C_Cons 't (t_list 't)
    
  let function cons_0 (self : t_list 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Nil -> any 't
      | C_Cons a _ -> a
      end
  let function cons_1 (self : t_list 't) : t_list 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Nil -> any t_list 't
      | C_Cons _ a -> a
      end
end
module Hashmap_Impl0_Clone_Interface
  type t
  use prelude.Borrow
  use Hashmap_List_Type as Hashmap_List_Type
  val clone' [#"../hashmap.rs" 15 4 15 27] (self : Hashmap_List_Type.t_list t) : Hashmap_List_Type.t_list t
    ensures { [#"../hashmap.rs" 14 14 14 29] result = self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Hashmap_Impl1_Get_Stub
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_List_Type as Hashmap_List_Type
  function get [#"../hashmap.rs" 27 4 27 56] (self : Hashmap_List_Type.t_list (k, v)) (index : DeepModelTy0.deepModelTy) : Core_Option_Option_Type.t_option v
    
end
module Hashmap_Impl1_Get_Interface
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_List_Type as Hashmap_List_Type
  function get [#"../hashmap.rs" 27 4 27 56] (self : Hashmap_List_Type.t_list (k, v)) (index : DeepModelTy0.deepModelTy) : Core_Option_Option_Type.t_option v
    
  val get [#"../hashmap.rs" 27 4 27 56] (self : Hashmap_List_Type.t_list (k, v)) (index : DeepModelTy0.deepModelTy) : Core_Option_Option_Type.t_option v
    ensures { result = get self index }
    
end
module Hashmap_Impl1_Get
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Hashmap_List_Type as Hashmap_List_Type
  function get [#"../hashmap.rs" 27 4 27 56] (self : Hashmap_List_Type.t_list (k, v)) (index : DeepModelTy0.deepModelTy) : Core_Option_Option_Type.t_option v
    
   =
    [#"../hashmap.rs" 29 12 32 13] match (self) with
      | Hashmap_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      | Hashmap_List_Type.C_Cons (k, v) tl -> if DeepModel0.deep_model k = index then
        Core_Option_Option_Type.C_Some v
      else
        get tl index
      
      end
  val get [#"../hashmap.rs" 27 4 27 56] (self : Hashmap_List_Type.t_list (k, v)) (index : DeepModelTy0.deepModelTy) : Core_Option_Option_Type.t_option v
    ensures { result = get self index }
    
end
module Hashmap_Impl1_NoDoubleBinding_Stub
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  predicate no_double_binding [#"../hashmap.rs" 37 4 37 38] (self : Hashmap_List_Type.t_list (k, v))
end
module Hashmap_Impl1_NoDoubleBinding_Interface
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  predicate no_double_binding [#"../hashmap.rs" 37 4 37 38] (self : Hashmap_List_Type.t_list (k, v))
  val no_double_binding [#"../hashmap.rs" 37 4 37 38] (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = no_double_binding self }
    
end
module Hashmap_Impl1_NoDoubleBinding
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Hashmap_List_Type as Hashmap_List_Type
  clone Hashmap_Impl1_Get_Stub as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  predicate no_double_binding [#"../hashmap.rs" 37 4 37 38] (self : Hashmap_List_Type.t_list (k, v)) =
    [#"../hashmap.rs" 39 12 42 13] match (self) with
      | Hashmap_List_Type.C_Nil -> true
      | Hashmap_List_Type.C_Cons (k, _) tl -> Get0.get tl (DeepModel0.deep_model k) = Core_Option_Option_Type.C_None /\ no_double_binding tl
      end
  val no_double_binding [#"../hashmap.rs" 37 4 37 38] (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = no_double_binding self }
    
end
module CreusotContracts_Model_Impl0_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl0_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 31 8 31 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Hashmap_Impl2_HashLog_Stub
  use prelude.Int
  function hash_log [#"../hashmap.rs" 63 4 63 30] (x : int) : int
end
module Hashmap_Impl2_HashLog_Interface
  use prelude.Int
  function hash_log [#"../hashmap.rs" 63 4 63 30] (x : int) : int
  val hash_log [#"../hashmap.rs" 63 4 63 30] (x : int) : int
    ensures { result = hash_log x }
    
end
module Hashmap_Impl2_HashLog
  use prelude.Int
  function hash_log [#"../hashmap.rs" 63 4 63 30] (x : int) : int =
    [#"../hashmap.rs" 64 20 64 21] x
  val hash_log [#"../hashmap.rs" 63 4 63 30] (x : int) : int
    ensures { result = hash_log x }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module Hashmap_Impl2_Hash_Interface
  use prelude.UInt64
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Int
  clone Hashmap_Impl2_HashLog_Stub as HashLog0
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int
  val hash [#"../hashmap.rs" 58 4 58 25] (self : usize) : uint64
    ensures { [#"../hashmap.rs" 57 14 57 58] UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self) }
    
end
module Hashmap_Impl2_Hash
  use prelude.Int
  use prelude.UInt64
  use prelude.Borrow
  use prelude.UIntSize
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel1
  use prelude.Int
  clone Hashmap_Impl2_HashLog as HashLog0
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel1.deep_model
  let rec cfg hash [#"../hashmap.rs" 58 4 58 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : usize) : uint64
    ensures { [#"../hashmap.rs" 57 14 57 58] UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint64;
  var self_1 : usize;
  var _3 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- self_1;
    _0 <- UInt64.of_int (UIntSize.to_int _3);
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Hashmap_MyHashMap_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_myhashmap 'k 'v =
    | C_MyHashMap (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list ('k, 'v)) (Alloc_Alloc_Global_Type.t_global))
    
  let function myhashmap_buckets (self : t_myhashmap 'k 'v) : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list ('k, 'v)) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MyHashMap a -> a
      end
end
module Hashmap_Hash_HashLog_Stub
  type self
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function hash_log [#"../hashmap.rs" 53 4 53 45] (_1' : DeepModelTy0.deepModelTy) : int
end
module Hashmap_Hash_HashLog_Interface
  type self
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function hash_log [#"../hashmap.rs" 53 4 53 45] (_1' : DeepModelTy0.deepModelTy) : int
  val hash_log [#"../hashmap.rs" 53 4 53 45] (_1' : DeepModelTy0.deepModelTy) : int
    ensures { result = hash_log _1' }
    
end
module Hashmap_Hash_HashLog
  type self
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function hash_log [#"../hashmap.rs" 53 4 53 45] (_1' : DeepModelTy0.deepModelTy) : int
  val hash_log [#"../hashmap.rs" 53 4 53 45] (_1' : DeepModelTy0.deepModelTy) : int
    ensures { result = hash_log _1' }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module Hashmap_Impl4_BucketIx_Stub
  type k
  type v
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function bucket_ix [#"../hashmap.rs" 88 4 88 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : int
    
end
module Hashmap_Impl4_BucketIx_Interface
  type k
  type v
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function bucket_ix [#"../hashmap.rs" 88 4 88 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : int
    
  val bucket_ix [#"../hashmap.rs" 88 4 88 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : int
    ensures { result = bucket_ix self k }
    
end
module Hashmap_Impl4_BucketIx
  type k
  type v
  use prelude.Int
  use seq.Seq
  use int.EuclideanDivision
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone Hashmap_Hash_HashLog_Stub as HashLog0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function bucket_ix [#"../hashmap.rs" 88 4 88 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : int
    
   =
    [#"../hashmap.rs" 89 20 89 66] EuclideanDivision.mod (HashLog0.hash_log k) (Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets self)))
  val bucket_ix [#"../hashmap.rs" 88 4 88 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : int
    ensures { result = bucket_ix self k }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type s
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = s,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function index_logic [@inline:trivial] (self : s) (ix : int) : t =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 17 8 17 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module Hashmap_Impl4_Bucket_Stub
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function bucket [#"../hashmap.rs" 83 4 83 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : Hashmap_List_Type.t_list (k, v)
    
end
module Hashmap_Impl4_Bucket_Interface
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function bucket [#"../hashmap.rs" 83 4 83 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : Hashmap_List_Type.t_list (k, v)
    
  val bucket [#"../hashmap.rs" 83 4 83 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : Hashmap_List_Type.t_list (k, v)
    ensures { result = bucket self k }
    
end
module Hashmap_Impl4_Bucket
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type s = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx_Stub as BucketIx0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function bucket [#"../hashmap.rs" 83 4 83 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : Hashmap_List_Type.t_list (k, v)
    
   =
    [#"../hashmap.rs" 84 8 84 53] IndexLogic0.index_logic (Hashmap_MyHashMap_Type.myhashmap_buckets self) (BucketIx0.bucket_ix self k)
  val bucket [#"../hashmap.rs" 83 4 83 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : DeepModelTy0.deepModelTy) : Hashmap_List_Type.t_list (k, v)
    ensures { result = bucket self k }
    
end
module Hashmap_Impl3_ShallowModel_Stub
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function shallow_model [#"../hashmap.rs" 77 4 77 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module Hashmap_Impl3_ShallowModel_Interface
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  function shallow_model [#"../hashmap.rs" 77 4 77 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
  val shallow_model [#"../hashmap.rs" 77 4 77 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model self }
    
end
module Hashmap_Impl3_ShallowModel
  type k
  type v
  use map.Map
  use prelude.Mapping
  use Hashmap_List_Type as Hashmap_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone Hashmap_Impl1_Get_Stub as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_Bucket_Stub as Bucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function shallow_model [#"../hashmap.rs" 77 4 77 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
   =
    [#"../hashmap.rs" 78 20 78 45] Mapping.from_fn (fun (k : DeepModelTy0.deepModelTy) -> Get0.get (Bucket0.bucket self k) k)
  val shallow_model [#"../hashmap.rs" 77 4 77 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model self }
    
end
module Hashmap_Impl5_GoodBucket_Stub
  type k
  type v
  use prelude.Int
  use Hashmap_List_Type as Hashmap_List_Type
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  predicate good_bucket [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int)
    
end
module Hashmap_Impl5_GoodBucket_Interface
  type k
  type v
  use prelude.Int
  use Hashmap_List_Type as Hashmap_List_Type
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  predicate good_bucket [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int)
    
  val good_bucket [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int) : bool
    ensures { result = good_bucket self l h }
    
end
module Hashmap_Impl5_GoodBucket
  type k
  type v
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx_Stub as BucketIx0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Hashmap_List_Type as Hashmap_List_Type
  clone Hashmap_Impl1_Get_Stub as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  predicate good_bucket [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int)
    
   =
    [#"../hashmap.rs" 201 8 203 9] forall v : v . forall k : DeepModelTy0.deepModelTy . Get0.get l k = Core_Option_Option_Type.C_Some v -> BucketIx0.bucket_ix self k = h
  val good_bucket [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int) : bool
    ensures { result = good_bucket self l h }
    
end
module Hashmap_Impl5_HashmapInv_Stub
  type k
  type v
  use prelude.Borrow
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  predicate hashmap_inv [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v)
end
module Hashmap_Impl5_HashmapInv_Interface
  type k
  type v
  use prelude.Borrow
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  predicate hashmap_inv [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v)
  val hashmap_inv [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = hashmap_inv self }
    
end
module Hashmap_Impl5_HashmapInv
  type k
  type v
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone Hashmap_Impl1_NoDoubleBinding_Stub as NoDoubleBinding0 with
    type k = k,
    type v = v
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl5_GoodBucket_Stub as GoodBucket0 with
    type k = k,
    type v = v
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type s = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate hashmap_inv [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) =
    [#"../hashmap.rs" 210 8 213 9] 0 < Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets self)) /\ (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets self)) -> GoodBucket0.good_bucket self (IndexLogic0.index_logic (Hashmap_MyHashMap_Type.myhashmap_buckets self) i) i /\ NoDoubleBinding0.no_double_binding (IndexLogic0.index_logic (Hashmap_MyHashMap_Type.myhashmap_buckets self) i))
  val hashmap_inv [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = hashmap_inv self }
    
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val from_elem (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 147 22 147 41] Seq.length (ShallowModel0.shallow_model result) = UIntSize.to_int n }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 148 12 148 78] forall i : int . 0 <= i /\ i < UIntSize.to_int n -> IndexLogic0.index_logic result i = elem }
    
end
module Hashmap_Impl5_New_Interface
  type k
  type v
  use prelude.UIntSize
  use prelude.Int
  use map.Map
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone Hashmap_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl5_HashmapInv_Stub as HashmapInv0 with
    type k = k,
    type v = v
  val new [#"../hashmap.rs" 97 4 97 46] (size : usize) : Hashmap_MyHashMap_Type.t_myhashmap k v
    requires {[#"../hashmap.rs" 94 15 94 24] 0 < UIntSize.to_int size}
    ensures { [#"../hashmap.rs" 95 14 95 34] HashmapInv0.hashmap_inv result }
    ensures { [#"../hashmap.rs" 96 4 96 64] forall i : DeepModelTy0.deepModelTy . Map.get (ShallowModel0.shallow_model result) i = Core_Option_Option_Type.C_None }
    
end
module Hashmap_Impl5_New
  type k
  type v
  use prelude.Int
  use prelude.UIntSize
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx as BucketIx0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function HashLog0.hash_log = HashLog0.hash_log,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type s = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Hashmap_Impl4_Bucket as Bucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with
    type k = k,
    type v = v,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function Get0.get = Get0.get,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function Get0.get = Get0.get,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Alloc_Vec_FromElem_Interface as FromElem0 with
    type t = Hashmap_List_Type.t_list (k, v),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    val Max0.mAX' = Max0.mAX'
  clone Hashmap_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function Bucket0.bucket = Bucket0.bucket,
    function Get0.get = Get0.get
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with
    type k = k,
    type v = v,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding,
    val Max0.mAX' = Max0.mAX'
  let rec cfg new [#"../hashmap.rs" 97 4 97 46] [@cfg:stackify] [@cfg:subregion_analysis] (size : usize) : Hashmap_MyHashMap_Type.t_myhashmap k v
    requires {[#"../hashmap.rs" 94 15 94 24] 0 < UIntSize.to_int size}
    ensures { [#"../hashmap.rs" 95 14 95 34] HashmapInv0.hashmap_inv result }
    ensures { [#"../hashmap.rs" 96 4 96 64] forall i : DeepModelTy0.deepModelTy . Map.get (ShallowModel0.shallow_model result) i = Core_Option_Option_Type.C_None }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var size_1 : usize;
  var res_5 : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var _6 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  var _7 : Hashmap_List_Type.t_list (k, v);
  var _8 : usize;
  {
    size_1 <- size;
    goto BB0
  }
  BB0 {
    _7 <- Hashmap_List_Type.C_Nil;
    _8 <- size_1;
    _6 <- ([#"../hashmap.rs" 98 39 98 60] FromElem0.from_elem _7 _8);
    goto BB1
  }
  BB1 {
    res_5 <- Hashmap_MyHashMap_Type.C_MyHashMap _6;
    goto BB2
  }
  BB2 {
    _0 <- res_5;
    res_5 <- any Hashmap_MyHashMap_Type.t_myhashmap k v;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 58 8 58 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 40 8 40 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val len (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 66 26 66 48] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Hashmap_Hash_Hash_Interface
  type self
  use prelude.UInt64
  use prelude.Borrow
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  clone Hashmap_Hash_HashLog_Stub as HashLog0 with
    type self = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val hash [#"../hashmap.rs" 50 4 50 26] (self : self) : uint64
    ensures { [#"../hashmap.rs" 49 14 49 58] UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl14_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 122 27 122 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 123 26 123 54] HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 124 26 124 57] HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 125 26 125 62] ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 126 26 126 55] Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel1 with
    type t = rhs,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val eq (self : self) (other : rhs) : bool
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 109 20 109 37] UIntSize.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 116 20 116 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 123 8 123 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Hashmap_Impl5_Add_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl5_HashmapInv_Stub as HashmapInv0 with
    type k = k,
    type v = v
  val add [#"../hashmap.rs" 105 4 105 41] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) (key : k) (val' : v) : ()
    requires {[#"../hashmap.rs" 102 15 102 36] HashmapInv0.hashmap_inv ( * self)}
    ensures { [#"../hashmap.rs" 103 14 103 35] HashmapInv0.hashmap_inv ( ^ self) }
    ensures { [#"../hashmap.rs" 104 4 104 124] forall i : DeepModelTy0.deepModelTy . Map.get (ShallowModel0.shallow_model ( ^ self)) i = (if i = DeepModel0.deep_model key then
      Core_Option_Option_Type.C_Some val'
    else
      Map.get (ShallowModel1.shallow_model self) i
    ) }
    
end
module Hashmap_Impl5_Add
  type k
  type v
  use prelude.Borrow
  use prelude.Ghost
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt64
  use prelude.IntSize
  use map.Map
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx as BucketIx0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function HashLog0.hash_log = HashLog0.hash_log,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use prelude.Ghost
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Hashmap_List_Type.t_list (k, v)
  use seq.Seq
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel1 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type s = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Hashmap_Impl4_Bucket as Bucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve9 with
    type t = v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve8 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve7 with
    type t = k
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with
    type self = k,
    type rhs = k,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve6 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = k
  clone Hashmap_Impl1_Get as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with
    type k = k,
    type v = v,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function Get0.get = Get0.get,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function Get0.get = Get0.get,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty (borrowed (Hashmap_List_Type.t_list (k, v)))
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone Alloc_Vec_Impl14_IndexMut_Interface as IndexMut0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Hashmap_List_Type.t_list (k, v),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    val Max0.mAX' = Max0.mAX'
  clone Hashmap_Hash_Hash_Interface as Hash0 with
    type self = k,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function HashLog0.hash_log = HashLog0.hash_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))
  clone Hashmap_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function Bucket0.bucket = Bucket0.bucket,
    function Get0.get = Get0.get
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with
    type k = k,
    type v = v,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding,
    val Max0.mAX' = Max0.mAX'
  let rec cfg add [#"../hashmap.rs" 105 4 105 41] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) (key : k) (val' : v) : ()
    requires {[#"../hashmap.rs" 102 15 102 36] HashmapInv0.hashmap_inv ( * self)}
    ensures { [#"../hashmap.rs" 103 14 103 35] HashmapInv0.hashmap_inv ( ^ self) }
    ensures { [#"../hashmap.rs" 104 4 104 124] forall i : DeepModelTy0.deepModelTy . Map.get (ShallowModel0.shallow_model ( ^ self)) i = (if i = DeepModel0.deep_model key then
      Core_Option_Option_Type.C_Some val'
    else
      Map.get (ShallowModel1.shallow_model self) i
    ) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v);
  var key_2 : k;
  var val'_3 : v;
  var old_self_7 : Ghost.ghost_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v));
  var length_9 : usize;
  var _10 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  var index_11 : usize;
  var _12 : usize;
  var _13 : uint64;
  var _14 : k;
  var _15 : usize;
  var _16 : bool;
  var l_17 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _18 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _19 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _20 : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global));
  var _21 : usize;
  var old_l_22 : Ghost.ghost_ty (borrowed (Hashmap_List_Type.t_list (k, v)));
  var _24 : ();
  var _32 : ();
  var _33 : isize;
  var k_34 : borrowed k;
  var v_35 : borrowed v;
  var tl_36 : borrowed (Hashmap_List_Type.t_list (k, v));
  var tl_37 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _38 : ();
  var _39 : bool;
  var _40 : k;
  var _41 : k;
  var _42 : ();
  var _43 : v;
  var _44 : ();
  var _46 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _47 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _48 : ();
  var _49 : ();
  var _50 : ();
  var _51 : Hashmap_List_Type.t_list (k, v);
  var _52 : (k, v);
  var _53 : k;
  var _54 : v;
  var _55 : Hashmap_List_Type.t_list (k, v);
  var _56 : Hashmap_List_Type.t_list (k, v);
  var _57 : ();
  var _59 : borrowed (Hashmap_List_Type.t_list (k, v));
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    old_self_7 <- ([#"../hashmap.rs" 107 23 107 38] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_7 };
    _10 <- Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1);
    length_9 <- ([#"../hashmap.rs" 108 21 108 39] Len0.len _10);
    goto BB2
  }
  BB2 {
    _14 <- key_2;
    _13 <- ([#"../hashmap.rs" 109 27 109 37] Hash0.hash _14);
    goto BB3
  }
  BB3 {
    _12 <- UIntSize.of_int (UInt64.to_int _13);
    _15 <- length_9;
    _16 <- ([#"../hashmap.rs" 109 27 109 55] _15 = ([#"../hashmap.rs" 109 27 109 55] (0 : usize)));
    assert { [@expl:remainder by zero] [#"../hashmap.rs" 109 27 109 55] not _16 };
    goto BB4
  }
  BB4 {
    index_11 <- ([#"../hashmap.rs" 109 27 109 55] _12 % _15);
    _20 <- borrow_mut (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1));
    self_1 <- { self_1 with current = (let Hashmap_MyHashMap_Type.C_MyHashMap a =  * self_1 in Hashmap_MyHashMap_Type.C_MyHashMap ( ^ _20)) };
    _21 <- index_11;
    _19 <- ([#"../hashmap.rs" 110 39 110 58] IndexMut0.index_mut _20 _21);
    goto BB5
  }
  BB5 {
    _18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    l_17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ l_17) };
    assume { Resolve1.resolve _18 };
    old_l_22 <- ([#"../hashmap.rs" 111 20 111 32] Ghost.new l_17);
    goto BB6
  }
  BB6 {
    assume { Resolve2.resolve old_l_22 };
    goto BB7
  }
  BB7 {
    invariant { [#"../hashmap.rs" 113 20 113 46]  ^ Ghost.inner old_self_7 =  ^ self_1 };
    invariant { [#"../hashmap.rs" 114 20 114 48] GoodBucket0.good_bucket ( * self_1) ( * l_17) (UIntSize.to_int index_11) };
    invariant { [#"../hashmap.rs" 113 8 113 48] GoodBucket0.good_bucket ( * self_1) ( ^ l_17) (UIntSize.to_int index_11) -> GoodBucket0.good_bucket ( * self_1) ( ^ Ghost.inner old_l_22) (UIntSize.to_int index_11) };
    invariant { [#"../hashmap.rs" 113 8 113 48] Get0.get ( ^ l_17) (DeepModel0.deep_model key_2) = Core_Option_Option_Type.C_Some val'_3 -> Get0.get ( ^ Ghost.inner old_l_22) (DeepModel0.deep_model key_2) = Core_Option_Option_Type.C_Some val'_3 };
    invariant { [#"../hashmap.rs" 113 8 113 48] forall i : DeepModelTy0.deepModelTy . Get0.get ( ^ l_17) i = Get0.get ( * l_17) i -> Get0.get ( ^ Ghost.inner old_l_22) i = Get0.get ( * Ghost.inner old_l_22) i };
    invariant { [#"../hashmap.rs" 118 20 118 44] NoDoubleBinding0.no_double_binding ( * l_17) };
    invariant { [#"../hashmap.rs" 113 8 113 48] (forall i : DeepModelTy0.deepModelTy . Get0.get ( * l_17) i = Get0.get ( ^ l_17) i \/ i = DeepModel0.deep_model key_2) /\ NoDoubleBinding0.no_double_binding ( ^ l_17) -> NoDoubleBinding0.no_double_binding ( ^ Ghost.inner old_l_22) };
    goto BB8
  }
  BB8 {
    switch ( * l_17)
      | Hashmap_List_Type.C_Cons _ _ -> goto BB9
      | _ -> goto BB14
      end
  }
  BB9 {
    goto BB10
  }
  BB10 {
    k_34 <- borrow_mut (let (a, _) = Hashmap_List_Type.cons_0 ( * l_17) in a);
    l_17 <- { l_17 with current = (let Hashmap_List_Type.C_Cons a b =  * l_17 in Hashmap_List_Type.C_Cons (let (a, b) = Hashmap_List_Type.cons_0 ( * l_17) in ( ^ k_34, b)) b) };
    v_35 <- borrow_mut (let (_, a) = Hashmap_List_Type.cons_0 ( * l_17) in a);
    l_17 <- { l_17 with current = (let Hashmap_List_Type.C_Cons a b =  * l_17 in Hashmap_List_Type.C_Cons (let (a, b) = Hashmap_List_Type.cons_0 ( * l_17) in (a,  ^ v_35)) b) };
    tl_36 <- borrow_mut (Hashmap_List_Type.cons_1 ( * l_17));
    l_17 <- { l_17 with current = (let Hashmap_List_Type.C_Cons a b =  * l_17 in Hashmap_List_Type.C_Cons a ( ^ tl_36)) };
    tl_37 <- tl_36;
    tl_36 <- any borrowed (Hashmap_List_Type.t_list (k, v));
    _40 <-  * k_34;
    _41 <- key_2;
    _39 <- ([#"../hashmap.rs" 123 15 123 24] Eq0.eq _40 _41);
    goto BB11
  }
  BB11 {
    assume { Resolve7.resolve k_34 };
    switch (_39)
      | False -> goto BB13
      | True -> goto BB12
      end
  }
  BB12 {
    assume { Resolve3.resolve key_2 };
    assume { Resolve8.resolve tl_37 };
    _43 <- val'_3;
    assume { Resolve4.resolve val'_3 };
    v_35 <- { v_35 with current = _43 };
    _43 <- any v;
    assume { Resolve4.resolve ( * v_35) };
    assume { Resolve9.resolve v_35 };
    assume { Resolve6.resolve self_1 };
    assume { Resolve1.resolve l_17 };
    assume { Resolve1.resolve _19 };
    assert { [@expl:assertion] [#"../hashmap.rs" 125 32 125 52] HashmapInv0.hashmap_inv ( * self_1) };
    _44 <- ();
    _0 <- ();
    goto BB20
  }
  BB13 {
    assume { Resolve9.resolve v_35 };
    _38 <- ();
    _47 <- borrow_mut ( * tl_37);
    tl_37 <- { tl_37 with current = ( ^ _47) };
    _46 <- borrow_mut ( * _47);
    _47 <- { _47 with current = ( ^ _46) };
    _59 <- _46;
    _46 <- any borrowed (Hashmap_List_Type.t_list (k, v));
    assume { Resolve1.resolve l_17 };
    l_17 <- _59;
    assume { Resolve1.resolve _47 };
    _32 <- ();
    assume { Resolve8.resolve tl_37 };
    goto BB7
  }
  BB14 {
    _24 <- ();
    _53 <- key_2;
    assume { Resolve3.resolve key_2 };
    _54 <- val'_3;
    assume { Resolve4.resolve val'_3 };
    _52 <- (_53, _54);
    _56 <- Hashmap_List_Type.C_Nil;
    _55 <- _56;
    goto BB15
  }
  BB15 {
    _51 <- Hashmap_List_Type.C_Cons _52 _55;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    l_17 <- { l_17 with current = _51 };
    _51 <- any Hashmap_List_Type.t_list (k, v);
    assume { Resolve5.resolve ( * l_17) };
    assume { Resolve1.resolve l_17 };
    goto BB19
  }
  BB19 {
    assume { Resolve6.resolve self_1 };
    assume { Resolve1.resolve _19 };
    assert { [@expl:assertion] [#"../hashmap.rs" 133 24 133 44] HashmapInv0.hashmap_inv ( * self_1) };
    _57 <- ();
    _0 <- ();
    goto BB20
  }
  BB20 {
    return _0
  }
  
end
module Alloc_Vec_Impl13_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 131 27 131 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 132 26 132 54] HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module Hashmap_Impl5_Get_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone Hashmap_Impl5_HashmapInv_Stub as HashmapInv0 with
    type k = k,
    type v = v
  val get [#"../hashmap.rs" 141 4 141 43] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (key : k) : Core_Option_Option_Type.t_option v
    requires {[#"../hashmap.rs" 136 15 136 33] HashmapInv0.hashmap_inv self}
    ensures { [#"../hashmap.rs" 137 14 140 5] match (result) with
      | Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None
      end }
    
end
module Hashmap_Impl5_Get
  type k
  type v
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt64
  use prelude.IntSize
  use map.Map
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx as BucketIx0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function HashLog0.hash_log = HashLog0.hash_log,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Hashmap_List_Type.t_list (k, v)
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel1 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type s = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Hashmap_Impl4_Bucket as Bucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Hashmap_Impl3_ShallowModel as ShallowModel2 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function Bucket0.bucket = Bucket0.bucket,
    function Get0.get = Get0.get
  use map.Map
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with
    type k = k,
    type v = v,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function Get0.get = Get0.get,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function Get0.get = Get0.get,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = Hashmap_List_Type.t_list (k, v)
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with
    type self = k,
    type rhs = k,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = k
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = k
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Hashmap_List_Type.t_list (k, v)
  clone Alloc_Vec_Impl13_Index_Interface as Index0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Hashmap_List_Type.t_list (k, v),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Hashmap_Hash_Hash_Interface as Hash0 with
    type self = k,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function HashLog0.hash_log = HashLog0.hash_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with
    type k = k,
    type v = v,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding,
    val Max0.mAX' = Max0.mAX'
  let rec cfg get [#"../hashmap.rs" 141 4 141 43] [@cfg:stackify] [@cfg:subregion_analysis] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (key : k) : Core_Option_Option_Type.t_option v
    requires {[#"../hashmap.rs" 136 15 136 33] HashmapInv0.hashmap_inv self}
    ensures { [#"../hashmap.rs" 137 14 140 5] match (result) with
      | Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option v;
  var self_1 : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var key_2 : k;
  var _3 : ();
  var index_6 : usize;
  var _7 : usize;
  var _8 : uint64;
  var _9 : k;
  var _10 : usize;
  var _11 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  var _12 : bool;
  var l_13 : Hashmap_List_Type.t_list (k, v);
  var _14 : Hashmap_List_Type.t_list (k, v);
  var _15 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  var _16 : usize;
  var _17 : ();
  var _19 : ();
  var _20 : isize;
  var k_21 : k;
  var v_22 : v;
  var tl_23 : Hashmap_List_Type.t_list (k, v);
  var _24 : ();
  var _25 : bool;
  var _26 : k;
  var _27 : k;
  var _28 : ();
  var _29 : v;
  var _30 : Hashmap_List_Type.t_list (k, v);
  var _31 : Hashmap_List_Type.t_list (k, v);
  var _32 : ();
  var _33 : ();
  var _34 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _9 <- key_2;
    _8 <- ([#"../hashmap.rs" 142 27 142 37] Hash0.hash _9);
    goto BB1
  }
  BB1 {
    _7 <- UIntSize.of_int (UInt64.to_int _8);
    _11 <- Hashmap_MyHashMap_Type.myhashmap_buckets self_1;
    _10 <- ([#"../hashmap.rs" 142 49 142 67] Len0.len _11);
    goto BB2
  }
  BB2 {
    _12 <- ([#"../hashmap.rs" 142 27 142 67] _10 = ([#"../hashmap.rs" 142 27 142 67] (0 : usize)));
    assert { [@expl:remainder by zero] [#"../hashmap.rs" 142 27 142 67] not _12 };
    goto BB3
  }
  BB3 {
    index_6 <- ([#"../hashmap.rs" 142 27 142 67] _7 % _10);
    _15 <- Hashmap_MyHashMap_Type.myhashmap_buckets self_1;
    assume { Resolve0.resolve self_1 };
    _16 <- index_6;
    _14 <- ([#"../hashmap.rs" 143 21 143 40] Index0.index _15 _16);
    goto BB4
  }
  BB4 {
    l_13 <- _14;
    assume { Resolve1.resolve _14 };
    goto BB5
  }
  BB5 {
    invariant { [#"../hashmap.rs" 145 20 145 101] Get0.get (Bucket0.bucket self_1 (DeepModel0.deep_model key_2)) (DeepModel0.deep_model key_2) = Get0.get l_13 (DeepModel0.deep_model key_2) };
    goto BB6
  }
  BB6 {
    switch (l_13)
      | Hashmap_List_Type.C_Cons _ _ -> goto BB7
      | _ -> goto BB12
      end
  }
  BB7 {
    goto BB8
  }
  BB8 {
    k_21 <- (let (a, _) = Hashmap_List_Type.cons_0 l_13 in a);
    v_22 <- (let (_, a) = Hashmap_List_Type.cons_0 l_13 in a);
    tl_23 <- Hashmap_List_Type.cons_1 l_13;
    assume { Resolve1.resolve l_13 };
    _26 <- k_21;
    assume { Resolve3.resolve k_21 };
    _27 <- key_2;
    _25 <- ([#"../hashmap.rs" 147 15 147 24] Eq0.eq _26 _27);
    goto BB9
  }
  BB9 {
    switch (_25)
      | False -> goto BB11
      | True -> goto BB10
      end
  }
  BB10 {
    assume { Resolve2.resolve key_2 };
    assume { Resolve4.resolve tl_23 };
    _29 <- v_22;
    assume { Resolve5.resolve v_22 };
    _0 <- Core_Option_Option_Type.C_Some _29;
    goto BB13
  }
  BB11 {
    assume { Resolve5.resolve v_22 };
    _24 <- ();
    _31 <- tl_23;
    assume { Resolve4.resolve tl_23 };
    _30 <- _31;
    assume { Resolve1.resolve _31 };
    l_13 <- _30;
    _30 <- any Hashmap_List_Type.t_list (k, v);
    _19 <- ();
    goto BB5
  }
  BB12 {
    assume { Resolve2.resolve key_2 };
    assume { Resolve1.resolve l_13 };
    _17 <- ();
    _0 <- Core_Option_Option_Type.C_None;
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/ghost.rs" 26 20 26 48] ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Core_Mem_Replace_Interface
  type t
  use prelude.Borrow
  val replace (dest : borrowed t) (src : t) : t
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 7 22 7 34]  ^ dest = src }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 8 22 8 37] result =  * dest }
    
end
module Hashmap_Impl5_Resize_Interface
  type k
  type v
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel2 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone Hashmap_Impl3_ShallowModel_Stub as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl5_HashmapInv_Stub as HashmapInv0 with
    type k = k,
    type v = v
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val resize [#"../hashmap.rs" 161 4 161 24] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : ()
    requires {[#"../hashmap.rs" 156 15 156 41] Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self))) < 1000}
    requires {[#"../hashmap.rs" 157 15 157 36] HashmapInv0.hashmap_inv ( * self)}
    ensures { [#"../hashmap.rs" 158 14 158 35] HashmapInv0.hashmap_inv ( ^ self) }
    ensures { [#"../hashmap.rs" 159 4 159 74] forall k : DeepModelTy0.deepModelTy . Map.get (ShallowModel1.shallow_model ( ^ self)) k = Map.get (ShallowModel2.shallow_model self) k }
    
end
module Hashmap_Impl5_Resize
  type k
  type v
  use prelude.Borrow
  use prelude.Ghost
  use prelude.Int
  use prelude.UIntSize
  use prelude.IntSize
  use seq.Seq
  use map.Map
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Hashmap_List_Type.t_list (k, v)
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get as Get0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type s = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx as BucketIx0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function HashLog0.hash_log = HashLog0.hash_log,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Hashmap_Impl4_Bucket as Bucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Hashmap_Impl3_ShallowModel as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function Bucket0.bucket = Bucket0.bucket,
    function Get0.get = Get0.get
  use map.Map
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel2 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel5 with
    type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v),
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Hashmap_List_Type.t_list (k, v)),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve7 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve6 with
    type self = Hashmap_MyHashMap_Type.t_myhashmap k v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = Hashmap_List_Type.t_list (k, v)
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with
    type k = k,
    type v = v,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function Get0.get = Get0.get,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function Get0.get = Get0.get,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with
    type k = k,
    type v = v,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding,
    val Max0.mAX' = Max0.mAX'
  clone Hashmap_Impl5_Add_Interface as Add0 with
    type k = k,
    type v = v,
    predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = k
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Hashmap_List_Type.t_list (k, v)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone Core_Mem_Replace_Interface as Replace0 with
    type t = Hashmap_List_Type.t_list (k, v)
  clone Alloc_Vec_Impl14_IndexMut_Interface as IndexMut0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Hashmap_List_Type.t_list (k, v),
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel3 with
    type t = borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v),
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone Hashmap_Impl5_New_Interface as New0 with
    type k = k,
    type v = v,
    predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Hashmap_List_Type.t_list (k, v),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))
  let rec cfg resize [#"../hashmap.rs" 161 4 161 24] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : ()
    requires {[#"../hashmap.rs" 156 15 156 41] Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self))) < 1000}
    requires {[#"../hashmap.rs" 157 15 157 36] HashmapInv0.hashmap_inv ( * self)}
    ensures { [#"../hashmap.rs" 158 14 158 35] HashmapInv0.hashmap_inv ( ^ self) }
    ensures { [#"../hashmap.rs" 159 4 159 74] forall k : DeepModelTy0.deepModelTy . Map.get (ShallowModel1.shallow_model ( ^ self)) k = Map.get (ShallowModel2.shallow_model self) k }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v);
  var old_self_6 : Ghost.ghost_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v));
  var new_8 : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var _9 : usize;
  var _10 : usize;
  var _11 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  var i_12 : usize;
  var _13 : ();
  var _21 : ();
  var _22 : bool;
  var _23 : usize;
  var _24 : usize;
  var _25 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  var l_26 : Hashmap_List_Type.t_list (k, v);
  var _27 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _28 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _29 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _30 : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global));
  var _31 : usize;
  var _32 : Hashmap_List_Type.t_list (k, v);
  var _33 : ();
  var _40 : isize;
  var k_41 : k;
  var v_42 : v;
  var tl_43 : Hashmap_List_Type.t_list (k, v);
  var _44 : ();
  var _45 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v);
  var _46 : k;
  var _47 : v;
  var _48 : Hashmap_List_Type.t_list (k, v);
  var _49 : ();
  var _50 : ();
  var _51 : ();
  var _52 : ();
  var _54 : ();
  var _55 : ();
  var _56 : ();
  var _57 : Hashmap_MyHashMap_Type.t_myhashmap k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    old_self_6 <- ([#"../hashmap.rs" 162 23 162 38] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_6 };
    _11 <- Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1);
    _10 <- ([#"../hashmap.rs" 163 32 163 50] Len0.len _11);
    goto BB2
  }
  BB2 {
    _9 <- ([#"../hashmap.rs" 163 32 163 54] _10 * ([#"../hashmap.rs" 163 53 163 54] (2 : usize)));
    new_8 <- ([#"../hashmap.rs" 163 22 163 55] New0.new _9);
    goto BB3
  }
  BB3 {
    i_12 <- ([#"../hashmap.rs" 165 27 165 28] (0 : usize));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant { [#"../hashmap.rs" 166 8 166 111] forall k : DeepModelTy0.deepModelTy . BucketIx0.bucket_ix ( * Ghost.inner old_self_6) k < UIntSize.to_int i_12 -> Map.get (ShallowModel3.shallow_model old_self_6) k = Map.get (ShallowModel1.shallow_model new_8) k };
    invariant { [#"../hashmap.rs" 166 8 166 111] forall k : DeepModelTy0.deepModelTy . UIntSize.to_int i_12 <= BucketIx0.bucket_ix ( * Ghost.inner old_self_6) k /\ BucketIx0.bucket_ix ( * Ghost.inner old_self_6) k <= Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Ghost.inner old_self_6))) -> Map.get (ShallowModel1.shallow_model new_8) k = Core_Option_Option_Type.C_None };
    invariant { [#"../hashmap.rs" 166 8 166 111] forall j : int . UIntSize.to_int i_12 <= j /\ j < Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Ghost.inner old_self_6))) -> IndexLogic0.index_logic (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1)) j = IndexLogic0.index_logic (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Ghost.inner old_self_6)) j };
    invariant { [#"../hashmap.rs" 172 20 172 37] HashmapInv0.hashmap_inv new_8 };
    invariant { [#"../hashmap.rs" 173 20 173 46]  ^ Ghost.inner old_self_6 =  ^ self_1 };
    invariant { [#"../hashmap.rs" 174 20 174 66] Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Ghost.inner old_self_6))) = Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1))) };
    invariant { [#"../hashmap.rs" 175 20 175 45] UIntSize.to_int i_12 <= Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1))) };
    goto BB7
  }
  BB7 {
    _23 <- i_12;
    _25 <- Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1);
    _24 <- ([#"../hashmap.rs" 176 18 176 36] Len0.len _25);
    goto BB8
  }
  BB8 {
    _22 <- ([#"../hashmap.rs" 176 14 176 36] _23 < _24);
    switch (_22)
      | False -> goto BB29
      | True -> goto BB9
      end
  }
  BB9 {
    _30 <- borrow_mut (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self_1));
    self_1 <- { self_1 with current = (let Hashmap_MyHashMap_Type.C_MyHashMap a =  * self_1 in Hashmap_MyHashMap_Type.C_MyHashMap ( ^ _30)) };
    _31 <- i_12;
    _29 <- ([#"../hashmap.rs" 177 56 177 71] IndexMut0.index_mut _30 _31);
    goto BB10
  }
  BB10 {
    _28 <- borrow_mut ( * _29);
    _29 <- { _29 with current = ( ^ _28) };
    _27 <- borrow_mut ( * _28);
    _28 <- { _28 with current = ( ^ _27) };
    _32 <- Hashmap_List_Type.C_Nil;
    l_26 <- ([#"../hashmap.rs" 177 33 177 83] Replace0.replace _27 _32);
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve _28 };
    assume { Resolve1.resolve _29 };
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    invariant { [#"../hashmap.rs" 179 24 179 41] HashmapInv0.hashmap_inv new_8 };
    invariant { [#"../hashmap.rs" 179 12 179 43] forall k : DeepModelTy0.deepModelTy . BucketIx0.bucket_ix ( * Ghost.inner old_self_6) k < UIntSize.to_int i_12 -> Map.get (ShallowModel3.shallow_model old_self_6) k = Map.get (ShallowModel1.shallow_model new_8) k };
    invariant { [#"../hashmap.rs" 179 12 179 43] forall k : DeepModelTy0.deepModelTy . UIntSize.to_int i_12 < BucketIx0.bucket_ix ( * Ghost.inner old_self_6) k /\ BucketIx0.bucket_ix ( * Ghost.inner old_self_6) k <= Seq.length (ShallowModel0.shallow_model (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Ghost.inner old_self_6))) -> Map.get (ShallowModel1.shallow_model new_8) k = Core_Option_Option_Type.C_None };
    invariant { [#"../hashmap.rs" 179 12 179 43] forall k : DeepModelTy0.deepModelTy . BucketIx0.bucket_ix ( * Ghost.inner old_self_6) k = UIntSize.to_int i_12 -> Map.get (ShallowModel3.shallow_model old_self_6) k = match (Get0.get l_26 k) with
      | Core_Option_Option_Type.C_None -> Map.get (ShallowModel1.shallow_model new_8) k
      | Core_Option_Option_Type.C_Some v -> Core_Option_Option_Type.C_Some v
      end };
    invariant { [#"../hashmap.rs" 186 24 186 45] NoDoubleBinding0.no_double_binding l_26 };
    invariant { [#"../hashmap.rs" 187 24 187 51] GoodBucket0.good_bucket ( * Ghost.inner old_self_6) l_26 (UIntSize.to_int i_12) };
    goto BB18
  }
  BB18 {
    switch (l_26)
      | Hashmap_List_Type.C_Cons _ _ -> goto BB19
      | _ -> goto BB25
      end
  }
  BB19 {
    goto BB20
  }
  BB20 {
    k_41 <- (let (a, _) = Hashmap_List_Type.cons_0 l_26 in a);
    v_42 <- (let (_, a) = Hashmap_List_Type.cons_0 l_26 in a);
    tl_43 <- Hashmap_List_Type.cons_1 l_26;
    l_26 <- (let Hashmap_List_Type.C_Cons a b = l_26 in Hashmap_List_Type.C_Cons a (any Hashmap_List_Type.t_list (k, v)));
    assume { Resolve2.resolve l_26 };
    _45 <- borrow_mut new_8;
    new_8 <-  ^ _45;
    _46 <- k_41;
    assume { Resolve3.resolve k_41 };
    _47 <- v_42;
    assume { Resolve4.resolve v_42 };
    _44 <- ([#"../hashmap.rs" 189 16 189 29] Add0.add _45 _46 _47);
    goto BB21
  }
  BB21 {
    _48 <- tl_43;
    tl_43 <- any Hashmap_List_Type.t_list (k, v);
    assume { Resolve5.resolve tl_43 };
    goto BB22
  }
  BB22 {
    l_26 <- _48;
    _48 <- any Hashmap_List_Type.t_list (k, v);
    goto BB24
  }
  BB24 {
    _21 <- ();
    goto BB26
  }
  BB25 {
    assume { Resolve2.resolve l_26 };
    _33 <- ();
    assert { [@expl:assertion] [#"../hashmap.rs" 192 12 192 121] forall k : DeepModelTy0.deepModelTy . BucketIx0.bucket_ix ( * Ghost.inner old_self_6) k = UIntSize.to_int i_12 -> Map.get (ShallowModel3.shallow_model old_self_6) k = Map.get (ShallowModel1.shallow_model new_8) k };
    goto BB27
  }
  BB26 {
    goto BB17
  }
  BB27 {
    _52 <- ();
    i_12 <- ([#"../hashmap.rs" 193 12 193 18] i_12 + ([#"../hashmap.rs" 193 17 193 18] (1 : usize)));
    _21 <- ();
    goto BB28
  }
  BB28 {
    goto BB6
  }
  BB29 {
    _13 <- ();
    _57 <- new_8;
    new_8 <- any Hashmap_MyHashMap_Type.t_myhashmap k v;
    goto BB30
  }
  BB30 {
    self_1 <- { self_1 with current = _57 };
    _57 <- any Hashmap_MyHashMap_Type.t_myhashmap k v;
    assume { Resolve6.resolve ( * self_1) };
    assume { Resolve7.resolve self_1 };
    goto BB32
  }
  BB32 {
    _0 <- ();
    goto BB33
  }
  BB33 {
    return _0
  }
  
end
module Hashmap_Main_Interface
  val main [#"../hashmap.rs" 217 0 217 13] (_1' : ()) : ()
end
module Hashmap_Main
  use prelude.Int
  use prelude.UIntSize
  use prelude.IntSize
  use prelude.Borrow
  use map.Map
  clone Hashmap_Impl2_HashLog as HashLog0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = Hashmap_List_Type.t_list (usize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use prelude.Int
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  clone Hashmap_Impl4_BucketIx as BucketIx0 with
    type k = usize,
    type v = isize,
    type DeepModelTy0.deepModelTy = int,
    function HashLog0.hash_log = HashLog0.hash_log,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use seq.Seq
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Hashmap_Impl1_Get as Get1 with
    type k = usize,
    type v = isize,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Hashmap_List_Type.t_list (usize, isize),
    type s = Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (usize, isize)) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Hashmap_Impl4_Bucket as Bucket0 with
    type k = usize,
    type v = isize,
    type DeepModelTy0.deepModelTy = int,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with
    type k = usize,
    type v = isize,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function Get0.get = Get1.get,
    type DeepModelTy0.deepModelTy = int
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with
    type k = usize,
    type v = isize,
    type DeepModelTy0.deepModelTy = int,
    function Get0.get = Get1.get,
    function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl3_ShallowModel as ShallowModel0 with
    type k = usize,
    type v = isize,
    type DeepModelTy0.deepModelTy = int,
    function Bucket0.bucket = Bucket0.bucket,
    function Get0.get = Get1.get
  use map.Map
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel2 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap usize isize,
    type ShallowModelTy0.shallowModelTy = Map.map int (Core_Option_Option_Type.t_option isize),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = Hashmap_MyHashMap_Type.t_myhashmap usize isize,
    type ShallowModelTy0.shallowModelTy = Map.map int (Core_Option_Option_Type.t_option isize),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with
    type k = usize,
    type v = isize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
    predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding,
    val Max0.mAX' = Max0.mAX'
  clone Hashmap_Impl5_Add_Interface as Add0 with
    type k = usize,
    type v = isize,
    predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
    type DeepModelTy0.deepModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model
  clone Hashmap_Impl5_Get_Interface as Get0 with
    type k = usize,
    type v = isize,
    predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    type DeepModelTy0.deepModelTy = int
  clone Hashmap_Impl5_New_Interface as New0 with
    type k = usize,
    type v = isize,
    predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
    type DeepModelTy0.deepModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec cfg main [#"../hashmap.rs" 217 0 217 13] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var h1_1 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var h2_2 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _x_3 : Core_Option_Option_Type.t_option isize;
  var _4 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _y_5 : Core_Option_Option_Type.t_option isize;
  var _6 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _z_7 : Core_Option_Option_Type.t_option isize;
  var _8 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _t_9 : Core_Option_Option_Type.t_option isize;
  var _10 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _11 : ();
  var _12 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize);
  var _13 : Core_Option_Option_Type.t_option isize;
  var _14 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _15 : Core_Option_Option_Type.t_option isize;
  var _16 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _17 : Core_Option_Option_Type.t_option isize;
  var _18 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _19 : Core_Option_Option_Type.t_option isize;
  var _20 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _21 : ();
  var _22 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize);
  var _23 : Core_Option_Option_Type.t_option isize;
  var _24 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _25 : Core_Option_Option_Type.t_option isize;
  var _26 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _27 : Core_Option_Option_Type.t_option isize;
  var _28 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _29 : Core_Option_Option_Type.t_option isize;
  var _30 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  {
    goto BB0
  }
  BB0 {
    h1_1 <- ([#"../hashmap.rs" 224 42 224 60] New0.new ([#"../hashmap.rs" 224 57 224 59] (17 : usize)));
    goto BB1
  }
  BB1 {
    h2_2 <- ([#"../hashmap.rs" 225 42 225 60] New0.new ([#"../hashmap.rs" 225 57 225 59] (42 : usize)));
    goto BB2
  }
  BB2 {
    _4 <- h1_1;
    _x_3 <- ([#"../hashmap.rs" 226 17 226 26] Get0.get _4 ([#"../hashmap.rs" 226 24 226 25] (1 : usize)));
    goto BB3
  }
  BB3 {
    _6 <- h1_1;
    _y_5 <- ([#"../hashmap.rs" 227 17 227 26] Get0.get _6 ([#"../hashmap.rs" 227 24 227 25] (2 : usize)));
    goto BB4
  }
  BB4 {
    _8 <- h2_2;
    _z_7 <- ([#"../hashmap.rs" 228 17 228 26] Get0.get _8 ([#"../hashmap.rs" 228 24 228 25] (1 : usize)));
    goto BB5
  }
  BB5 {
    _10 <- h2_2;
    _t_9 <- ([#"../hashmap.rs" 229 17 229 26] Get0.get _10 ([#"../hashmap.rs" 229 24 229 25] (2 : usize)));
    goto BB6
  }
  BB6 {
    _12 <- borrow_mut h1_1;
    h1_1 <-  ^ _12;
    _11 <- ([#"../hashmap.rs" 233 4 233 17] Add0.add _12 ([#"../hashmap.rs" 233 11 233 12] (1 : usize)) ([#"../hashmap.rs" 233 14 233 16] (17 : isize)));
    goto BB7
  }
  BB7 {
    _14 <- h1_1;
    _13 <- ([#"../hashmap.rs" 234 9 234 18] Get0.get _14 ([#"../hashmap.rs" 234 16 234 17] (1 : usize)));
    goto BB8
  }
  BB8 {
    _x_3 <- _13;
    _13 <- any Core_Option_Option_Type.t_option isize;
    _16 <- h1_1;
    _15 <- ([#"../hashmap.rs" 235 9 235 18] Get0.get _16 ([#"../hashmap.rs" 235 16 235 17] (2 : usize)));
    goto BB9
  }
  BB9 {
    _y_5 <- _15;
    _15 <- any Core_Option_Option_Type.t_option isize;
    _18 <- h2_2;
    _17 <- ([#"../hashmap.rs" 236 9 236 18] Get0.get _18 ([#"../hashmap.rs" 236 16 236 17] (1 : usize)));
    goto BB10
  }
  BB10 {
    _z_7 <- _17;
    _17 <- any Core_Option_Option_Type.t_option isize;
    _20 <- h2_2;
    _19 <- ([#"../hashmap.rs" 237 9 237 18] Get0.get _20 ([#"../hashmap.rs" 237 16 237 17] (2 : usize)));
    goto BB11
  }
  BB11 {
    _t_9 <- _19;
    _19 <- any Core_Option_Option_Type.t_option isize;
    _22 <- borrow_mut h2_2;
    h2_2 <-  ^ _22;
    _21 <- ([#"../hashmap.rs" 240 4 240 17] Add0.add _22 ([#"../hashmap.rs" 240 11 240 12] (1 : usize)) ([#"../hashmap.rs" 240 14 240 16] (42 : isize)));
    goto BB12
  }
  BB12 {
    _24 <- h1_1;
    _23 <- ([#"../hashmap.rs" 241 9 241 18] Get0.get _24 ([#"../hashmap.rs" 241 16 241 17] (1 : usize)));
    goto BB13
  }
  BB13 {
    _x_3 <- _23;
    _23 <- any Core_Option_Option_Type.t_option isize;
    _26 <- h1_1;
    _25 <- ([#"../hashmap.rs" 242 9 242 18] Get0.get _26 ([#"../hashmap.rs" 242 16 242 17] (2 : usize)));
    goto BB14
  }
  BB14 {
    _y_5 <- _25;
    _25 <- any Core_Option_Option_Type.t_option isize;
    _28 <- h2_2;
    _27 <- ([#"../hashmap.rs" 243 9 243 18] Get0.get _28 ([#"../hashmap.rs" 243 16 243 17] (1 : usize)));
    goto BB15
  }
  BB15 {
    _z_7 <- _27;
    _27 <- any Core_Option_Option_Type.t_option isize;
    _30 <- h2_2;
    _29 <- ([#"../hashmap.rs" 244 9 244 18] Get0.get _30 ([#"../hashmap.rs" 244 16 244 17] (2 : usize)));
    goto BB16
  }
  BB16 {
    _t_9 <- _29;
    _29 <- any Core_Option_Option_Type.t_option isize;
    _0 <- ();
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Hashmap_Impl0
  type t
  use prelude.Borrow
  use Hashmap_List_Type as Hashmap_List_Type
  goal clone'_refn : [#"../hashmap.rs" 15 4 15 27] forall self : Hashmap_List_Type.t_list t . forall result : Hashmap_List_Type.t_list t . result = self -> result = self
end
module Hashmap_Impl2
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt64
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel1
  use prelude.Int
  clone Hashmap_Impl2_HashLog as HashLog0
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal hash_refn : [#"../hashmap.rs" 58 4 58 25] forall self : usize . forall result : uint64 . UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self) -> UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self)
end
module Hashmap_Impl3
  type k
  type v
end
