
module Hashmap_List_Type
  type t_list 't =
    | C_Nil
    | C_Cons 't (t_list 't)
    
  let function cons_0 (self : t_list 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Nil -> any 't
      | C_Cons a _ -> a
      end
  let function cons_1 (self : t_list 't) : t_list 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Nil -> any t_list 't
      | C_Cons _ a -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module Hashmap_Impl2_Hash
  use prelude.Int
  function hash_log0 [#"../hashmap.rs" 64 4 64 30] (x : int) : int =
    [#"../hashmap.rs" 65 20 65 21] x
  val hash_log0 [#"../hashmap.rs" 64 4 64 30] (x : int) : int
    ensures { result = hash_log0 x }
    
  use prelude.UIntSize
  use prelude.UIntSize
  function deep_model1 (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model1 (self : usize) : int
    ensures { result = deep_model1 self }
    
  use prelude.Int
  use prelude.Borrow
  function deep_model0 (self : usize) : int =
    [#"../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model1 self
  val deep_model0 (self : usize) : int
    ensures { result = deep_model0 self }
    
  use prelude.UInt64
  use prelude.UInt64
  let rec cfg hash [#"../hashmap.rs" 59 4 59 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : usize) : uint64
    ensures { [#"../hashmap.rs" 58 14 58 58] UInt64.to_int result = hash_log0 (deep_model0 self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint64;
  var self : usize = self;
  {
    goto BB0
  }
  BB0 {
    [#"../hashmap.rs" 60 8 60 20] _0 <- UInt64.of_int (UIntSize.to_int self);
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Hashmap_MyHashMap_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_myhashmap 'k 'v =
    | C_MyHashMap (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list ('k, 'v)) (Alloc_Alloc_Global_Type.t_global))
    
  let function myhashmap_buckets (self : t_myhashmap 'k 'v) : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list ('k, 'v)) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_MyHashMap a -> a
      end
end
module Hashmap_Impl5_New
  type k
  type v
  predicate invariant5 (self : v)
  val invariant5 (self : v) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : v)
  val inv5 (_x : v) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : v . inv5 x = true
  use Hashmap_List_Type as Hashmap_List_Type
  use seq.Seq
  predicate invariant4 (self : Seq.seq (Hashmap_List_Type.t_list (k, v)))
  val invariant4 (self : Seq.seq (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Seq.seq (Hashmap_List_Type.t_list (k, v)))
  val inv4 (_x : Seq.seq (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq (Hashmap_List_Type.t_list (k, v)) . inv4 x = true
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv3 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
  val inv3 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv3 _x }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv4 (shallow_model2 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model2 self) <= UIntSize.to_int max0)
  predicate invariant3 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv4 (shallow_model2 self)
  val invariant3 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global) . inv3 x = true
  predicate invariant2 (self : Hashmap_List_Type.t_list (k, v))
  val invariant2 (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Hashmap_List_Type.t_list (k, v))
  val inv2 (_x : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Hashmap_List_Type.t_list (k, v) . inv2 x = true
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  predicate invariant1 (self : Hashmap_MyHashMap_Type.t_myhashmap k v)
  val invariant1 (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Hashmap_MyHashMap_Type.t_myhashmap k v)
  val inv1 (_x : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Hashmap_MyHashMap_Type.t_myhashmap k v . inv1 x = true
  type deep_model_ty0
  predicate invariant0 (self : deep_model_ty0)
  val invariant0 (self : deep_model_ty0) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : deep_model_ty0)
  val inv0 (_x : deep_model_ty0) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : deep_model_ty0 . inv0 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use prelude.Mapping
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  function get1 [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (k, v)) (index : deep_model_ty0) : Core_Option_Option_Type.t_option v
    
   =
    [#"../hashmap.rs" 30 12 33 13] match self with
      | Hashmap_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      | Hashmap_List_Type.C_Cons (k, v) tl -> if deep_model0 k = index then
        Core_Option_Option_Type.C_Some v
      else
        get1 tl index
      
      end
  val get1 [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (k, v)) (index : deep_model_ty0) : Core_Option_Option_Type.t_option v
    ensures { result = get1 self index }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Hashmap_List_Type.t_list (k, v)
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model2 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Hashmap_List_Type.t_list (k, v)
    ensures { result = index_logic0 self ix }
    
  use int.EuclideanDivision
  function hash_log0 [#"../hashmap.rs" 54 4 54 45] (_1 : deep_model_ty0) : int
  val hash_log0 [#"../hashmap.rs" 54 4 54 45] (_1 : deep_model_ty0) : int
    ensures { result = hash_log0 _1 }
    
  function bucket_ix0 [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : int
    
   =
    [#"../hashmap.rs" 90 20 90 66] EuclideanDivision.mod (hash_log0 k) (Seq.length (shallow_model2 (Hashmap_MyHashMap_Type.myhashmap_buckets self)))
  val bucket_ix0 [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : int
    ensures { result = bucket_ix0 self k }
    
  function bucket0 [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : Hashmap_List_Type.t_list (k, v)
    
   =
    [#"../hashmap.rs" 85 8 85 53] index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) (bucket_ix0 self k)
  val bucket0 [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : Hashmap_List_Type.t_list (k, v)
    ensures { result = bucket0 self k }
    
  use map.Map
  function shallow_model1 [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../hashmap.rs" 79 20 79 45] Mapping.from_fn (fun (k : deep_model_ty0) -> get1 (bucket0 self k) k)
  val shallow_model1 [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model1 self }
    
  predicate no_double_binding0 [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (k, v)) =
    [#"../hashmap.rs" 40 12 43 13] match self with
      | Hashmap_List_Type.C_Nil -> true
      | Hashmap_List_Type.C_Cons (k, _) tl -> get1 tl (deep_model0 k) = Core_Option_Option_Type.C_None /\ no_double_binding0 tl
      end
  val no_double_binding0 [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = no_double_binding0 self }
    
  predicate good_bucket0 [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int)
    
   =
    [#"../hashmap.rs" 201 8 203 9] forall v : v . forall k : deep_model_ty0 . inv5 v
     -> inv0 k  -> get1 l k = Core_Option_Option_Type.C_Some v  -> bucket_ix0 self k = h
  val good_bucket0 [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int) : bool
    ensures { result = good_bucket0 self l h }
    
  use prelude.Borrow
  predicate hashmap_inv0 [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) =
    [#"../hashmap.rs" 210 8 213 9] 0 < Seq.length (shallow_model2 (Hashmap_MyHashMap_Type.myhashmap_buckets self)) /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model2 (Hashmap_MyHashMap_Type.myhashmap_buckets self))
     -> good_bucket0 self (index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) i) i /\ no_double_binding0 (index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) i))
  val hashmap_inv0 [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = hashmap_inv0 self }
    
  val from_elem0 (elem : Hashmap_List_Type.t_list (k, v)) (n : usize) : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)
    requires {inv2 elem}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 157 22 157 41] Seq.length (shallow_model2 result) = UIntSize.to_int n }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 158 12 158 78] forall i : int . 0 <= i /\ i < UIntSize.to_int n
     -> index_logic0 result i = elem }
    ensures { inv3 result }
    
  let rec cfg new [#"../hashmap.rs" 98 4 98 46] [@cfg:stackify] [@cfg:subregion_analysis] (size : usize) : Hashmap_MyHashMap_Type.t_myhashmap k v
    requires {[#"../hashmap.rs" 95 15 95 24] 0 < UIntSize.to_int size}
    ensures { [#"../hashmap.rs" 96 14 96 34] hashmap_inv0 result }
    ensures { [#"../hashmap.rs" 97 4 97 64] forall i : deep_model_ty0 . inv0 i
     -> Map.get (shallow_model1 result) i = Core_Option_Option_Type.C_None }
    ensures { [#"../hashmap.rs" 98 31 98 46] inv1 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var size : usize = size;
  var res : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var _6 : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
  var _7 : Hashmap_List_Type.t_list (k, v);
  {
    goto BB0
  }
  BB0 {
    [#"../hashmap.rs" 99 44 99 53] _7 <- Hashmap_List_Type.C_Nil;
    [#"../hashmap.rs" 99 39 99 60] _6 <- ([#"../hashmap.rs" 99 39 99 60] from_elem0 _7 size);
    _7 <- any Hashmap_List_Type.t_list (k, v);
    goto BB1
  }
  BB1 {
    [#"../hashmap.rs" 99 18 99 62] res <- Hashmap_MyHashMap_Type.C_MyHashMap _6;
    _6 <- any Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global);
    goto BB2
  }
  BB2 {
    [#"../hashmap.rs" 100 8 100 11] _0 <- res;
    res <- any Hashmap_MyHashMap_Type.t_myhashmap k v;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Hashmap_Impl5_Add
  type k
  type v
  use Hashmap_List_Type as Hashmap_List_Type
  use seq.Seq
  predicate invariant17 (self : Seq.seq (Hashmap_List_Type.t_list (k, v)))
  val invariant17 (self : Seq.seq (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = invariant17 self }
    
  predicate inv17 (_x : Seq.seq (Hashmap_List_Type.t_list (k, v)))
  val inv17 (_x : Seq.seq (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = inv17 _x }
    
  axiom inv17 : forall x : Seq.seq (Hashmap_List_Type.t_list (k, v)) . inv17 x = true
  use prelude.UIntSize
  predicate invariant16 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant16 (self : usize) : bool
    ensures { result = invariant16 self }
    
  predicate inv16 (_x : usize)
  val inv16 (_x : usize) : bool
    ensures { result = inv16 _x }
    
  axiom inv16 : forall x : usize . inv16 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Borrow
  predicate invariant15 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)))
    
  val invariant15 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant15 self }
    
  predicate inv15 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)))
    
  val inv15 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv15 _x }
    
  axiom inv15 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) . inv15 x = true
  predicate invariant14 (self : k)
  val invariant14 (self : k) : bool
    ensures { result = invariant14 self }
    
  predicate inv14 (_x : k)
  val inv14 (_x : k) : bool
    ensures { result = inv14 _x }
    
  axiom inv14 : forall x : k . inv14 x = true
  predicate invariant13 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
    
  val invariant13 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant13 self }
    
  predicate inv13 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
  val inv13 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv13 _x }
    
  axiom inv13 : forall x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global) . inv13 x = true
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  predicate invariant12 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))
  val invariant12 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))
  val inv12 (_x : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v) . inv12 x = true
  predicate invariant11 (self : borrowed (Hashmap_List_Type.t_list (k, v)))
  val invariant11 (self : borrowed (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : borrowed (Hashmap_List_Type.t_list (k, v)))
  val inv11 (_x : borrowed (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : borrowed (Hashmap_List_Type.t_list (k, v)) . inv11 x = true
  predicate invariant10 (self : borrowed k)
  val invariant10 (self : borrowed k) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : borrowed k)
  val inv10 (_x : borrowed k) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : borrowed k . inv10 x = true
  predicate invariant9 (self : borrowed v)
  val invariant9 (self : borrowed v) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : borrowed v)
  val inv9 (_x : borrowed v) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : borrowed v . inv9 x = true
  predicate invariant8 (self : Hashmap_List_Type.t_list (k, v))
  val invariant8 (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Hashmap_List_Type.t_list (k, v))
  val inv8 (_x : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Hashmap_List_Type.t_list (k, v) . inv8 x = true
  predicate invariant7 (self : v)
  val invariant7 (self : v) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : v)
  val inv7 (_x : v) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : v . inv7 x = true
  predicate invariant6 (self : k)
  val invariant6 (self : k) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : k)
  val inv6 (_x : k) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : k . inv6 x = true
  type deep_model_ty0
  predicate invariant5 (self : deep_model_ty0)
  val invariant5 (self : deep_model_ty0) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : deep_model_ty0)
  val inv5 (_x : deep_model_ty0) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : deep_model_ty0 . inv5 x = true
  use prelude.Snapshot
  predicate invariant4 (self : Snapshot.snap_ty (borrowed (Hashmap_List_Type.t_list (k, v))))
  val invariant4 (self : Snapshot.snap_ty (borrowed (Hashmap_List_Type.t_list (k, v)))) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Snapshot.snap_ty (borrowed (Hashmap_List_Type.t_list (k, v))))
  val inv4 (_x : Snapshot.snap_ty (borrowed (Hashmap_List_Type.t_list (k, v)))) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Snapshot.snap_ty (borrowed (Hashmap_List_Type.t_list (k, v))) . inv4 x = true
  predicate invariant3 (self : borrowed (Hashmap_List_Type.t_list (k, v)))
  val invariant3 (self : borrowed (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed (Hashmap_List_Type.t_list (k, v)))
  val inv3 (_x : borrowed (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (Hashmap_List_Type.t_list (k, v)) . inv3 x = true
  predicate invariant2 (self : Hashmap_List_Type.t_list (k, v))
  val invariant2 (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Hashmap_List_Type.t_list (k, v))
  val inv2 (_x : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Hashmap_List_Type.t_list (k, v) . inv2 x = true
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv1 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
  val inv1 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv1 _x }
    
  function shallow_model6 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    
  val shallow_model6 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv1 self}
    ensures { result = shallow_model6 self }
    
  axiom shallow_model6_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv1 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv17 (shallow_model6 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model6 self) <= UIntSize.to_int max0)
  predicate invariant1 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv17 (shallow_model6 self)
  val invariant1 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global) . inv1 x = true
  predicate invariant0 (self : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)))
  val invariant0 (self : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)))
  val inv0 (_x : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) . inv0 x = true
  use prelude.Mapping
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  use Core_Option_Option_Type as Core_Option_Option_Type
  function get0 [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (k, v)) (index : deep_model_ty0) : Core_Option_Option_Type.t_option v
    
   =
    [#"../hashmap.rs" 30 12 33 13] match self with
      | Hashmap_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      | Hashmap_List_Type.C_Cons (k, v) tl -> if deep_model0 k = index then
        Core_Option_Option_Type.C_Some v
      else
        get0 tl index
      
      end
  val get0 [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (k, v)) (index : deep_model_ty0) : Core_Option_Option_Type.t_option v
    ensures { result = get0 self index }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Hashmap_List_Type.t_list (k, v)
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model6 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Hashmap_List_Type.t_list (k, v)
    ensures { result = index_logic0 self ix }
    
  use int.EuclideanDivision
  function hash_log0 [#"../hashmap.rs" 54 4 54 45] (_1 : deep_model_ty0) : int
  val hash_log0 [#"../hashmap.rs" 54 4 54 45] (_1 : deep_model_ty0) : int
    ensures { result = hash_log0 _1 }
    
  function bucket_ix0 [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : int
    
   =
    [#"../hashmap.rs" 90 20 90 66] EuclideanDivision.mod (hash_log0 k) (Seq.length (shallow_model6 (Hashmap_MyHashMap_Type.myhashmap_buckets self)))
  val bucket_ix0 [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : int
    ensures { result = bucket_ix0 self k }
    
  function bucket0 [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : Hashmap_List_Type.t_list (k, v)
    
   =
    [#"../hashmap.rs" 85 8 85 53] index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) (bucket_ix0 self k)
  val bucket0 [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : Hashmap_List_Type.t_list (k, v)
    ensures { result = bucket0 self k }
    
  use map.Map
  function shallow_model1 [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../hashmap.rs" 79 20 79 45] Mapping.from_fn (fun (k : deep_model_ty0) -> get0 (bucket0 self k) k)
  val shallow_model1 [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model1 self }
    
  function shallow_model2 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model1 ( * self)
  val shallow_model2 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model2 self }
    
  use map.Map
  predicate resolve9 (self : Hashmap_List_Type.t_list (k, v))
  val resolve9 (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = resolve9 self }
    
  predicate no_double_binding0 [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (k, v)) =
    [#"../hashmap.rs" 40 12 43 13] match self with
      | Hashmap_List_Type.C_Nil -> true
      | Hashmap_List_Type.C_Cons (k, _) tl -> get0 tl (deep_model0 k) = Core_Option_Option_Type.C_None /\ no_double_binding0 tl
      end
  val no_double_binding0 [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = no_double_binding0 self }
    
  predicate good_bucket0 [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int)
    
   =
    [#"../hashmap.rs" 201 8 203 9] forall v : v . forall k : deep_model_ty0 . inv7 v
     -> inv5 k  -> get0 l k = Core_Option_Option_Type.C_Some v  -> bucket_ix0 self k = h
  val good_bucket0 [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int) : bool
    ensures { result = good_bucket0 self l h }
    
  predicate hashmap_inv0 [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) =
    [#"../hashmap.rs" 210 8 213 9] 0 < Seq.length (shallow_model6 (Hashmap_MyHashMap_Type.myhashmap_buckets self)) /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model6 (Hashmap_MyHashMap_Type.myhashmap_buckets self))
     -> good_bucket0 self (index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) i) i /\ no_double_binding0 (index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) i))
  val hashmap_inv0 [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = hashmap_inv0 self }
    
  predicate resolve8 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve8 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : bool
    ensures { result = resolve8 self }
    
  predicate resolve7 (self : v)
  val resolve7 (self : v) : bool
    ensures { result = resolve7 self }
    
  predicate resolve6 (self : k)
  val resolve6 (self : k) : bool
    ensures { result = resolve6 self }
    
  predicate resolve5 (self : borrowed (Hashmap_List_Type.t_list (k, v))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve5 (self : borrowed (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = resolve5 self }
    
  predicate resolve4 (self : borrowed k) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve4 (self : borrowed k) : bool
    ensures { result = resolve4 self }
    
  predicate resolve3 (self : borrowed v) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed v) : bool
    ensures { result = resolve3 self }
    
  function deep_model1 (self : k) : deep_model_ty0 =
    [#"../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model0 self
  val deep_model1 (self : k) : deep_model_ty0
    ensures { result = deep_model1 self }
    
  val eq0 (self : k) (other : k) : bool
    requires {inv14 self}
    requires {inv14 other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (deep_model1 self = deep_model1 other) }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate resolve2 (self : Snapshot.snap_ty (borrowed (Hashmap_List_Type.t_list (k, v))))
  val resolve2 (self : Snapshot.snap_ty (borrowed (Hashmap_List_Type.t_list (k, v)))) : bool
    ensures { result = resolve2 self }
    
  use prelude.Snapshot
  predicate resolve1 (self : borrowed (Hashmap_List_Type.t_list (k, v))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = resolve1 self }
    
  use prelude.Slice
  predicate resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq (Hashmap_List_Type.t_list (k, v))) (fin : Seq.seq (Hashmap_List_Type.t_list (k, v)))
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq (Hashmap_List_Type.t_list (k, v))) (fin : Seq.seq (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = resolve_elswhere0 self old' fin }
    
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (Hashmap_List_Type.t_list (k, v))) (out : Hashmap_List_Type.t_list (k, v))
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (Hashmap_List_Type.t_list (k, v))) (out : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq (Hashmap_List_Type.t_list (k, v))) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model6 ( * self)
  val shallow_model5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    ensures { result = shallow_model5 self }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))) (index : usize) : borrowed (Hashmap_List_Type.t_list (k, v))
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds0 index (shallow_model5 self)}
    requires {inv15 self}
    requires {inv16 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value0 index (shallow_model5 self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value0 index (shallow_model6 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model5 self) (shallow_model6 ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model6 ( ^ self)) = Seq.length (shallow_model5 self) }
    ensures { inv3 result }
    
  use prelude.UInt64
  use prelude.UInt64
  val hash0 [#"../hashmap.rs" 51 4 51 26] (self : k) : uint64
    requires {[#"../hashmap.rs" 51 13 51 17] inv14 self}
    ensures { [#"../hashmap.rs" 50 14 50 58] UInt64.to_int result = hash_log0 (deep_model1 self) }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model6 self
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    ensures { result = shallow_model3 self }
    
  val len0 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv13 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result = Seq.length (shallow_model3 self) }
    
  predicate resolve0 (self : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)))
  val resolve0 (self : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Snapshot
  let rec cfg add [#"../hashmap.rs" 106 4 106 41] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) (key : k) (val' : v) : ()
    requires {[#"../hashmap.rs" 103 15 103 36] hashmap_inv0 ( * self)}
    requires {[#"../hashmap.rs" 106 20 106 24] inv12 self}
    requires {[#"../hashmap.rs" 106 26 106 29] inv6 key}
    requires {[#"../hashmap.rs" 106 34 106 37] inv7 val'}
    ensures { [#"../hashmap.rs" 104 14 104 35] hashmap_inv0 ( ^ self) }
    ensures { [#"../hashmap.rs" 105 4 105 124] forall i : deep_model_ty0 . inv5 i
     -> Map.get (shallow_model1 ( ^ self)) i = (if i = deep_model0 key then
      Core_Option_Option_Type.C_Some val'
    else
      Map.get (shallow_model2 self) i
    ) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v) = self;
  var key : k = key;
  var val' : v = val';
  var old_self : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v));
  var length : usize;
  var index : usize;
  var _12 : usize;
  var _13 : uint64;
  var _15 : usize;
  var _16 : bool;
  var l : borrowed (Hashmap_List_Type.t_list (k, v));
  var _18 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _19 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _20 : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global));
  var old_l : Snapshot.snap_ty (borrowed (Hashmap_List_Type.t_list (k, v)));
  var k : borrowed k;
  var v : borrowed v;
  var tl : borrowed (Hashmap_List_Type.t_list (k, v));
  var tl1 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _38 : bool;
  var _45 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _46 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _50 : Hashmap_List_Type.t_list (k, v);
  var _51 : (k, v);
  var _55 : Hashmap_List_Type.t_list (k, v);
  {
    goto BB0
  }
  BB0 {
    [#"../hashmap.rs" 108 23 108 41] old_self <- ([#"../hashmap.rs" 108 23 108 41] Snapshot.new self);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 old_self };
    assume { resolve0 old_self };
    [#"../hashmap.rs" 109 21 109 39] length <- ([#"../hashmap.rs" 109 21 109 39] len0 (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self)));
    goto BB2
  }
  BB2 {
    [#"../hashmap.rs" 110 27 110 37] _13 <- ([#"../hashmap.rs" 110 27 110 37] hash0 key);
    goto BB3
  }
  BB3 {
    [#"../hashmap.rs" 110 27 110 46] _12 <- UIntSize.of_int (UInt64.to_int _13);
    _13 <- any uint64;
    [#"../hashmap.rs" 110 49 110 55] _15 <- length;
    [#"../hashmap.rs" 110 27 110 55] _16 <- _15 = ([#"../hashmap.rs" 110 27 110 55] (0 : usize));
    assert { [@expl:remainder by zero] [#"../hashmap.rs" 110 27 110 55] not _16 };
    goto BB4
  }
  BB4 {
    [#"../hashmap.rs" 110 27 110 55] index <- _12 % _15;
    _12 <- any usize;
    _15 <- any usize;
    [#"../hashmap.rs" 111 39 111 51] _20 <- Borrow.borrow_final (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self)) (Borrow.inherit_id (Borrow.get_id self) 1);
    [#"../hashmap.rs" 111 39 111 51] self <- { self with current = (let Hashmap_MyHashMap_Type.C_MyHashMap x0 =  * self in Hashmap_MyHashMap_Type.C_MyHashMap ( ^ _20)) ; };
    assume { inv1 ( ^ _20) };
    [#"../hashmap.rs" 111 51 111 58] _19 <- ([#"../hashmap.rs" 111 51 111 58] index_mut0 _20 index);
    _20 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global));
    goto BB5
  }
  BB5 {
    [#"../hashmap.rs" 111 34 111 58] _18 <- Borrow.borrow_final ( * _19) (Borrow.get_id _19);
    [#"../hashmap.rs" 111 34 111 58] _19 <- { _19 with current = ( ^ _18) ; };
    assume { inv2 ( ^ _18) };
    [#"../hashmap.rs" 111 34 111 58] l <- Borrow.borrow_final ( * _18) (Borrow.get_id _18);
    [#"../hashmap.rs" 111 34 111 58] _18 <- { _18 with current = ( ^ l) ; };
    assume { inv2 ( ^ l) };
    assert { [@expl:type invariant] inv3 _18 };
    assume { resolve1 _18 };
    [#"../hashmap.rs" 112 20 112 35] old_l <- ([#"../hashmap.rs" 112 20 112 35] Snapshot.new l);
    goto BB6
  }
  BB6 {
    assert { [@expl:type invariant] inv4 old_l };
    assume { resolve2 old_l };
    goto BB7
  }
  BB7 {
    invariant { [#"../hashmap.rs" 114 20 114 52] good_bucket0 ( * Snapshot.inner old_self) ( * l) (UIntSize.to_int index) };
    invariant { [#"../hashmap.rs" 114 8 114 54] good_bucket0 ( * Snapshot.inner old_self) ( ^ l) (UIntSize.to_int index)
     -> good_bucket0 ( * Snapshot.inner old_self) ( ^ Snapshot.inner old_l) (UIntSize.to_int index) };
    invariant { [#"../hashmap.rs" 114 8 114 54] get0 ( ^ l) (deep_model0 key) = Core_Option_Option_Type.C_Some val'
     -> get0 ( ^ Snapshot.inner old_l) (deep_model0 key) = Core_Option_Option_Type.C_Some val' };
    invariant { [#"../hashmap.rs" 114 8 114 54] forall i : deep_model_ty0 . inv5 i
     -> get0 ( ^ l) i = get0 ( * l) i  -> get0 ( ^ Snapshot.inner old_l) i = get0 ( * Snapshot.inner old_l) i };
    invariant { [#"../hashmap.rs" 118 20 118 44] no_double_binding0 ( * l) };
    invariant { [#"../hashmap.rs" 114 8 114 54] (forall i : deep_model_ty0 . inv5 i
     -> get0 ( * l) i = get0 ( ^ l) i \/ i = deep_model0 key) /\ no_double_binding0 ( ^ l)
     -> no_double_binding0 ( ^ Snapshot.inner old_l) };
    goto BB8
  }
  BB8 {
    switch ( * l)
      | Hashmap_List_Type.C_Cons _ _ -> goto BB9
      | _ -> goto BB14
      end
  }
  BB9 {
    goto BB10
  }
  BB10 {
    [#"../hashmap.rs" 121 24 121 25] k <- Borrow.borrow_final (let (a, _) = Hashmap_List_Type.cons_0 ( * l) in a) (Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id l) 1) 1);
    [#"../hashmap.rs" 121 24 121 25] l <- { l with current = (let Hashmap_List_Type.C_Cons x0 x1 =  * l in Hashmap_List_Type.C_Cons (let (x0, x1) = Hashmap_List_Type.cons_0 ( * l) in ( ^ k, x1)) x1) ; };
    assume { inv6 ( ^ k) };
    [#"../hashmap.rs" 121 27 121 28] v <- Borrow.borrow_final (let (_, a) = Hashmap_List_Type.cons_0 ( * l) in a) (Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id l) 1) 2);
    [#"../hashmap.rs" 121 27 121 28] l <- { l with current = (let Hashmap_List_Type.C_Cons x0 x1 =  * l in Hashmap_List_Type.C_Cons (let (x0, x1) = Hashmap_List_Type.cons_0 ( * l) in (x0,  ^ v)) x1) ; };
    assume { inv7 ( ^ v) };
    [#"../hashmap.rs" 121 31 121 33] tl <- Borrow.borrow_final (Hashmap_List_Type.cons_1 ( * l)) (Borrow.inherit_id (Borrow.get_id l) 2);
    [#"../hashmap.rs" 121 31 121 33] l <- { l with current = (let Hashmap_List_Type.C_Cons x0 x1 =  * l in Hashmap_List_Type.C_Cons x0 ( ^ tl)) ; };
    assume { inv8 ( ^ tl) };
    [#"../hashmap.rs" 122 21 122 23] tl1 <- tl;
    tl <- any borrowed (Hashmap_List_Type.t_list (k, v));
    [#"../hashmap.rs" 123 15 123 24] _38 <- ([#"../hashmap.rs" 123 15 123 24] eq0 ( * k) key);
    goto BB11
  }
  BB11 {
    switch (_38)
      | False -> goto BB13
      | True -> goto BB12
      end
  }
  BB12 {
    assert { [@expl:type invariant] inv11 tl1 };
    assume { resolve5 tl1 };
    assert { [@expl:type invariant] inv10 k };
    assume { resolve4 k };
    assert { [@expl:type invariant] inv6 key };
    assume { resolve6 key };
    assert { [@expl:type invariant] inv7 val' };
    assume { resolve7 val' };
    [#"../hashmap.rs" 124 16 124 24] v <- { v with current = val' ; };
    assert { [@expl:type invariant] inv7 ( * v) };
    assume { resolve7 ( * v) };
    assert { [@expl:type invariant] inv9 v };
    assume { resolve3 v };
    assert { [@expl:type invariant] inv3 _19 };
    assume { resolve1 _19 };
    assert { [@expl:type invariant] inv3 l };
    assume { resolve1 l };
    assert { [@expl:type invariant] inv12 self };
    assume { resolve8 self };
    assert { [@expl:assertion] [#"../hashmap.rs" 125 32 125 52] hashmap_inv0 ( * self) };
    [#"../hashmap.rs" 126 16 126 22] _0 <- ([#"../hashmap.rs" 126 16 126 22] ());
    goto BB20
  }
  BB13 {
    assert { [@expl:type invariant] inv9 v };
    assume { resolve3 v };
    assert { [@expl:type invariant] inv10 k };
    assume { resolve4 k };
    [#"../hashmap.rs" 128 16 128 25] _46 <- Borrow.borrow_mut ( * tl1);
    [#"../hashmap.rs" 128 16 128 25] tl1 <- { tl1 with current = ( ^ _46) ; };
    assume { inv2 ( ^ _46) };
    [#"../hashmap.rs" 128 16 128 25] _45 <- Borrow.borrow_final ( * _46) (Borrow.get_id _46);
    [#"../hashmap.rs" 128 16 128 25] _46 <- { _46 with current = ( ^ _45) ; };
    assume { inv2 ( ^ _45) };
    assert { [@expl:type invariant] inv3 l };
    assume { resolve1 l };
    [#"../hashmap.rs" 128 12 128 25] l <- _45;
    _45 <- any borrowed (Hashmap_List_Type.t_list (k, v));
    assert { [@expl:type invariant] inv3 _46 };
    assume { resolve1 _46 };
    assert { [@expl:type invariant] inv11 tl1 };
    assume { resolve5 tl1 };
    goto BB7
  }
  BB14 {
    assert { [@expl:type invariant] inv6 key };
    assume { resolve6 key };
    assert { [@expl:type invariant] inv7 val' };
    assume { resolve7 val' };
    [#"../hashmap.rs" 131 18 131 28] _51 <- (key, val');
    [#"../hashmap.rs" 131 39 131 42] _55 <- Hashmap_List_Type.C_Nil;
    goto BB15
  }
  BB15 {
    [#"../hashmap.rs" 131 13 131 44] _50 <- Hashmap_List_Type.C_Cons _51 _55;
    _51 <- any (k, v);
    _55 <- any Hashmap_List_Type.t_list (k, v);
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    [#"../hashmap.rs" 131 8 131 10] l <- { l with current = _50 ; };
    _50 <- any Hashmap_List_Type.t_list (k, v);
    assert { [@expl:type invariant] inv2 ( * l) };
    assume { resolve9 ( * l) };
    assert { [@expl:type invariant] inv3 l };
    assume { resolve1 l };
    goto BB19
  }
  BB19 {
    assert { [@expl:type invariant] inv3 _19 };
    assume { resolve1 _19 };
    assert { [@expl:type invariant] inv12 self };
    assume { resolve8 self };
    assert { [@expl:assertion] [#"../hashmap.rs" 133 24 133 44] hashmap_inv0 ( * self) };
    [#"../hashmap.rs" 106 42 134 5] _0 <- ([#"../hashmap.rs" 106 42 134 5] ());
    goto BB20
  }
  BB20 {
    return _0
  }
  
end
module Hashmap_Impl5_Get
  type k
  type v
  type deep_model_ty0
  predicate invariant12 (self : deep_model_ty0)
  val invariant12 (self : deep_model_ty0) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : deep_model_ty0)
  val inv12 (_x : deep_model_ty0) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : deep_model_ty0 . inv12 x = true
  predicate invariant11 (self : v)
  val invariant11 (self : v) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : v)
  val inv11 (_x : v) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : v . inv11 x = true
  use Hashmap_List_Type as Hashmap_List_Type
  use seq.Seq
  predicate invariant10 (self : Seq.seq (Hashmap_List_Type.t_list (k, v)))
  val invariant10 (self : Seq.seq (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : Seq.seq (Hashmap_List_Type.t_list (k, v)))
  val inv10 (_x : Seq.seq (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Seq.seq (Hashmap_List_Type.t_list (k, v)) . inv10 x = true
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv9 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
  val inv9 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv9 _x }
    
  function shallow_model4 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    
  val shallow_model4 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv9 self}
    ensures { result = shallow_model4 self }
    
  axiom shallow_model4_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv9 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv10 (shallow_model4 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model4 self) <= UIntSize.to_int max0)
  predicate invariant9 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv10 (shallow_model4 self)
  val invariant9 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant9 self }
    
  axiom inv9 : forall x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global) . inv9 x = true
  predicate invariant8 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : usize) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : usize)
  val inv8 (_x : usize) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : usize . inv8 x = true
  predicate invariant7 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
    
  val invariant7 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
  val inv7 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global) . inv7 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant6 (self : Core_Option_Option_Type.t_option v)
  val invariant6 (self : Core_Option_Option_Type.t_option v) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Core_Option_Option_Type.t_option v)
  val inv6 (_x : Core_Option_Option_Type.t_option v) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Core_Option_Option_Type.t_option v . inv6 x = true
  predicate invariant5 (self : k)
  val invariant5 (self : k) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : k)
  val inv5 (_x : k) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : k . inv5 x = true
  predicate invariant4 (self : Hashmap_List_Type.t_list (k, v))
  val invariant4 (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Hashmap_List_Type.t_list (k, v))
  val inv4 (_x : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Hashmap_List_Type.t_list (k, v) . inv4 x = true
  predicate invariant3 (self : v)
  val invariant3 (self : v) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : v)
  val inv3 (_x : v) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : v . inv3 x = true
  predicate invariant2 (self : k)
  val invariant2 (self : k) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : k)
  val inv2 (_x : k) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : k . inv2 x = true
  predicate invariant1 (self : Hashmap_List_Type.t_list (k, v))
  val invariant1 (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Hashmap_List_Type.t_list (k, v))
  val inv1 (_x : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Hashmap_List_Type.t_list (k, v) . inv1 x = true
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  predicate invariant0 (self : Hashmap_MyHashMap_Type.t_myhashmap k v)
  val invariant0 (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Hashmap_MyHashMap_Type.t_myhashmap k v)
  val inv0 (_x : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Hashmap_MyHashMap_Type.t_myhashmap k v . inv0 x = true
  use map.Map
  use prelude.Mapping
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  function get0 [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (k, v)) (index : deep_model_ty0) : Core_Option_Option_Type.t_option v
    
   =
    [#"../hashmap.rs" 30 12 33 13] match self with
      | Hashmap_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      | Hashmap_List_Type.C_Cons (k, v) tl -> if deep_model0 k = index then
        Core_Option_Option_Type.C_Some v
      else
        get0 tl index
      
      end
  val get0 [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (k, v)) (index : deep_model_ty0) : Core_Option_Option_Type.t_option v
    ensures { result = get0 self index }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Hashmap_List_Type.t_list (k, v)
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model4 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Hashmap_List_Type.t_list (k, v)
    ensures { result = index_logic0 self ix }
    
  use int.EuclideanDivision
  function hash_log0 [#"../hashmap.rs" 54 4 54 45] (_1 : deep_model_ty0) : int
  val hash_log0 [#"../hashmap.rs" 54 4 54 45] (_1 : deep_model_ty0) : int
    ensures { result = hash_log0 _1 }
    
  function bucket_ix0 [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : int
    
   =
    [#"../hashmap.rs" 90 20 90 66] EuclideanDivision.mod (hash_log0 k) (Seq.length (shallow_model4 (Hashmap_MyHashMap_Type.myhashmap_buckets self)))
  val bucket_ix0 [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : int
    ensures { result = bucket_ix0 self k }
    
  function bucket0 [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : Hashmap_List_Type.t_list (k, v)
    
   =
    [#"../hashmap.rs" 85 8 85 53] index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) (bucket_ix0 self k)
  val bucket0 [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : Hashmap_List_Type.t_list (k, v)
    ensures { result = bucket0 self k }
    
  use map.Map
  function shallow_model5 [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../hashmap.rs" 79 20 79 45] Mapping.from_fn (fun (k : deep_model_ty0) -> get0 (bucket0 self k) k)
  val shallow_model5 [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model5 self }
    
  use prelude.Borrow
  function shallow_model0 (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model5 self
  val shallow_model0 (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model0 self }
    
  predicate no_double_binding0 [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (k, v)) =
    [#"../hashmap.rs" 40 12 43 13] match self with
      | Hashmap_List_Type.C_Nil -> true
      | Hashmap_List_Type.C_Cons (k, _) tl -> get0 tl (deep_model0 k) = Core_Option_Option_Type.C_None /\ no_double_binding0 tl
      end
  val no_double_binding0 [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = no_double_binding0 self }
    
  predicate good_bucket0 [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int)
    
   =
    [#"../hashmap.rs" 201 8 203 9] forall v : v . forall k : deep_model_ty0 . inv11 v
     -> inv12 k  -> get0 l k = Core_Option_Option_Type.C_Some v  -> bucket_ix0 self k = h
  val good_bucket0 [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int) : bool
    ensures { result = good_bucket0 self l h }
    
  predicate hashmap_inv0 [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) =
    [#"../hashmap.rs" 210 8 213 9] 0 < Seq.length (shallow_model4 (Hashmap_MyHashMap_Type.myhashmap_buckets self)) /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model4 (Hashmap_MyHashMap_Type.myhashmap_buckets self))
     -> good_bucket0 self (index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) i) i /\ no_double_binding0 (index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) i))
  val hashmap_inv0 [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = hashmap_inv0 self }
    
  predicate resolve5 (self : k)
  val resolve5 (self : k) : bool
    ensures { result = resolve5 self }
    
  predicate resolve4 (self : Hashmap_List_Type.t_list (k, v))
  val resolve4 (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = resolve4 self }
    
  predicate resolve3 (self : v)
  val resolve3 (self : v) : bool
    ensures { result = resolve3 self }
    
  function deep_model1 (self : k) : deep_model_ty0 =
    [#"../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model0 self
  val deep_model1 (self : k) : deep_model_ty0
    ensures { result = deep_model1 self }
    
  val eq0 (self : k) (other : k) : bool
    requires {inv2 self}
    requires {inv2 other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (deep_model1 self = deep_model1 other) }
    
  predicate resolve2 (self : k)
  val resolve2 (self : k) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : Hashmap_List_Type.t_list (k, v))
  val resolve1 (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = resolve1 self }
    
  use prelude.Slice
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (Hashmap_List_Type.t_list (k, v))) (out : Hashmap_List_Type.t_list (k, v))
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (Hashmap_List_Type.t_list (k, v))) (out : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq (Hashmap_List_Type.t_list (k, v))) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model4 self
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    ensures { result = shallow_model3 self }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) (index : usize) : Hashmap_List_Type.t_list (k, v)
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model3 self)}
    requires {inv7 self}
    requires {inv8 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model3 self) result }
    ensures { inv1 result }
    
  predicate resolve0 (self : Hashmap_MyHashMap_Type.t_myhashmap k v)
  val resolve0 (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = resolve0 self }
    
  val len0 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv7 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result = Seq.length (shallow_model3 self) }
    
  use prelude.UInt64
  use prelude.UInt64
  val hash0 [#"../hashmap.rs" 51 4 51 26] (self : k) : uint64
    requires {[#"../hashmap.rs" 51 13 51 17] inv2 self}
    ensures { [#"../hashmap.rs" 50 14 50 58] UInt64.to_int result = hash_log0 (deep_model1 self) }
    
  let rec cfg get [#"../hashmap.rs" 141 4 141 43] [@cfg:stackify] [@cfg:subregion_analysis] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (key : k) : Core_Option_Option_Type.t_option v
    requires {[#"../hashmap.rs" 136 15 136 33] hashmap_inv0 self}
    requires {[#"../hashmap.rs" 141 16 141 20] inv0 self}
    requires {[#"../hashmap.rs" 141 22 141 25] inv5 key}
    ensures { [#"../hashmap.rs" 137 14 140 5] match result with
      | Core_Option_Option_Type.C_Some v -> Map.get (shallow_model0 self) (deep_model0 key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (shallow_model0 self) (deep_model0 key) = Core_Option_Option_Type.C_None
      end }
    ensures { [#"../hashmap.rs" 141 33 141 43] inv6 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option v;
  var self : Hashmap_MyHashMap_Type.t_myhashmap k v = self;
  var key : k = key;
  var index : usize;
  var _7 : usize;
  var _8 : uint64;
  var _10 : usize;
  var _12 : bool;
  var l : Hashmap_List_Type.t_list (k, v);
  var _14 : Hashmap_List_Type.t_list (k, v);
  var k : k;
  var v : v;
  var tl : Hashmap_List_Type.t_list (k, v);
  var _25 : bool;
  var _31 : Hashmap_List_Type.t_list (k, v);
  {
    goto BB0
  }
  BB0 {
    [#"../hashmap.rs" 142 27 142 37] _8 <- ([#"../hashmap.rs" 142 27 142 37] hash0 key);
    goto BB1
  }
  BB1 {
    [#"../hashmap.rs" 142 27 142 46] _7 <- UIntSize.of_int (UInt64.to_int _8);
    _8 <- any uint64;
    [#"../hashmap.rs" 142 49 142 67] _10 <- ([#"../hashmap.rs" 142 49 142 67] len0 (Hashmap_MyHashMap_Type.myhashmap_buckets self));
    goto BB2
  }
  BB2 {
    [#"../hashmap.rs" 142 27 142 67] _12 <- _10 = ([#"../hashmap.rs" 142 27 142 67] (0 : usize));
    assert { [@expl:remainder by zero] [#"../hashmap.rs" 142 27 142 67] not _12 };
    goto BB3
  }
  BB3 {
    [#"../hashmap.rs" 142 27 142 67] index <- _7 % _10;
    _7 <- any usize;
    _10 <- any usize;
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../hashmap.rs" 143 33 143 40] _14 <- ([#"../hashmap.rs" 143 33 143 40] index0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) index);
    goto BB4
  }
  BB4 {
    [#"../hashmap.rs" 143 20 143 40] l <- _14;
    assert { [@expl:type invariant] inv1 _14 };
    assume { resolve1 _14 };
    goto BB5
  }
  BB5 {
    invariant { [#"../hashmap.rs" 145 20 145 101] get0 (bucket0 self (deep_model0 key)) (deep_model0 key) = get0 l (deep_model0 key) };
    goto BB6
  }
  BB6 {
    switch (l)
      | Hashmap_List_Type.C_Cons _ _ -> goto BB7
      | _ -> goto BB12
      end
  }
  BB7 {
    goto BB8
  }
  BB8 {
    [#"../hashmap.rs" 146 30 146 31] k <- (let (a, _) = Hashmap_List_Type.cons_0 l in a);
    [#"../hashmap.rs" 146 33 146 34] v <- (let (_, a) = Hashmap_List_Type.cons_0 l in a);
    [#"../hashmap.rs" 146 37 146 39] tl <- Hashmap_List_Type.cons_1 l;
    assert { [@expl:type invariant] inv1 l };
    assume { resolve1 l };
    assert { [@expl:type invariant] inv2 k };
    assume { resolve2 k };
    [#"../hashmap.rs" 147 15 147 24] _25 <- ([#"../hashmap.rs" 147 15 147 24] eq0 k key);
    goto BB9
  }
  BB9 {
    switch (_25)
      | False -> goto BB11
      | True -> goto BB10
      end
  }
  BB10 {
    assert { [@expl:type invariant] inv4 tl };
    assume { resolve4 tl };
    assert { [@expl:type invariant] inv5 key };
    assume { resolve5 key };
    assert { [@expl:type invariant] inv3 v };
    assume { resolve3 v };
    [#"../hashmap.rs" 148 23 148 30] _0 <- Core_Option_Option_Type.C_Some v;
    goto BB13
  }
  BB11 {
    assert { [@expl:type invariant] inv3 v };
    assume { resolve3 v };
    [#"../hashmap.rs" 150 16 150 21] _31 <- tl;
    assert { [@expl:type invariant] inv4 tl };
    assume { resolve4 tl };
    assert { [@expl:type invariant] inv1 _31 };
    assume { resolve1 _31 };
    [#"../hashmap.rs" 150 12 150 21] l <- _31;
    goto BB5
  }
  BB12 {
    assert { [@expl:type invariant] inv1 l };
    assume { resolve1 l };
    assert { [@expl:type invariant] inv5 key };
    assume { resolve5 key };
    [#"../hashmap.rs" 152 15 152 19] _0 <- Core_Option_Option_Type.C_None;
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module Hashmap_Impl5_Resize
  type k
  type v
  use prelude.UIntSize
  predicate invariant13 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant13 (self : usize) : bool
    ensures { result = invariant13 self }
    
  predicate inv13 (_x : usize)
  val inv13 (_x : usize) : bool
    ensures { result = inv13 _x }
    
  axiom inv13 : forall x : usize . inv13 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Hashmap_List_Type as Hashmap_List_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Borrow
  predicate invariant12 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)))
    
  val invariant12 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)))
    
  val inv12 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) . inv12 x = true
  use seq.Seq
  predicate invariant11 (self : Seq.seq (Hashmap_List_Type.t_list (k, v)))
  val invariant11 (self : Seq.seq (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : Seq.seq (Hashmap_List_Type.t_list (k, v)))
  val inv11 (_x : Seq.seq (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : Seq.seq (Hashmap_List_Type.t_list (k, v)) . inv11 x = true
  predicate invariant10 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
    
  val invariant10 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
  val inv10 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global) . inv10 x = true
  predicate invariant9 (self : Hashmap_List_Type.t_list (k, v))
  val invariant9 (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : Hashmap_List_Type.t_list (k, v))
  val inv9 (_x : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Hashmap_List_Type.t_list (k, v) . inv9 x = true
  predicate invariant8 (self : v)
  val invariant8 (self : v) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : v)
  val inv8 (_x : v) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : v . inv8 x = true
  predicate invariant7 (self : k)
  val invariant7 (self : k) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : k)
  val inv7 (_x : k) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : k . inv7 x = true
  predicate invariant6 (self : borrowed (Hashmap_List_Type.t_list (k, v)))
  val invariant6 (self : borrowed (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed (Hashmap_List_Type.t_list (k, v)))
  val inv6 (_x : borrowed (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (Hashmap_List_Type.t_list (k, v)) . inv6 x = true
  predicate invariant5 (self : Hashmap_List_Type.t_list (k, v))
  val invariant5 (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Hashmap_List_Type.t_list (k, v))
  val inv5 (_x : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Hashmap_List_Type.t_list (k, v) . inv5 x = true
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv4 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
  val inv4 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv4 _x }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv11 (shallow_model3 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model3 self) <= UIntSize.to_int max0)
  predicate invariant4 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv11 (shallow_model3 self)
  val invariant4 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global) . inv4 x = true
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  predicate invariant3 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))
  val invariant3 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))
  val inv3 (_x : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v) . inv3 x = true
  predicate invariant2 (self : Hashmap_MyHashMap_Type.t_myhashmap k v)
  val invariant2 (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Hashmap_MyHashMap_Type.t_myhashmap k v)
  val inv2 (_x : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Hashmap_MyHashMap_Type.t_myhashmap k v . inv2 x = true
  type deep_model_ty0
  predicate invariant1 (self : deep_model_ty0)
  val invariant1 (self : deep_model_ty0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : deep_model_ty0)
  val inv1 (_x : deep_model_ty0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : deep_model_ty0 . inv1 x = true
  use prelude.Snapshot
  predicate invariant0 (self : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)))
  val invariant0 (self : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)))
  val inv0 (_x : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) . inv0 x = true
  use prelude.Mapping
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  use Core_Option_Option_Type as Core_Option_Option_Type
  function get1 [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (k, v)) (index : deep_model_ty0) : Core_Option_Option_Type.t_option v
    
   =
    [#"../hashmap.rs" 30 12 33 13] match self with
      | Hashmap_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      | Hashmap_List_Type.C_Cons (k, v) tl -> if deep_model0 k = index then
        Core_Option_Option_Type.C_Some v
      else
        get1 tl index
      
      end
  val get1 [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (k, v)) (index : deep_model_ty0) : Core_Option_Option_Type.t_option v
    ensures { result = get1 self index }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Hashmap_List_Type.t_list (k, v)
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model3 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Hashmap_List_Type.t_list (k, v)
    ensures { result = index_logic0 self ix }
    
  use int.EuclideanDivision
  function hash_log0 [#"../hashmap.rs" 54 4 54 45] (_1 : deep_model_ty0) : int
  val hash_log0 [#"../hashmap.rs" 54 4 54 45] (_1 : deep_model_ty0) : int
    ensures { result = hash_log0 _1 }
    
  function bucket_ix0 [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : int
    
   =
    [#"../hashmap.rs" 90 20 90 66] EuclideanDivision.mod (hash_log0 k) (Seq.length (shallow_model3 (Hashmap_MyHashMap_Type.myhashmap_buckets self)))
  val bucket_ix0 [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : int
    ensures { result = bucket_ix0 self k }
    
  function bucket0 [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : Hashmap_List_Type.t_list (k, v)
    
   =
    [#"../hashmap.rs" 85 8 85 53] index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) (bucket_ix0 self k)
  val bucket0 [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (k : deep_model_ty0) : Hashmap_List_Type.t_list (k, v)
    ensures { result = bucket0 self k }
    
  use map.Map
  function shallow_model2 [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../hashmap.rs" 79 20 79 45] Mapping.from_fn (fun (k : deep_model_ty0) -> get1 (bucket0 self k) k)
  val shallow_model2 [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model2 self }
    
  function shallow_model4 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model2 ( * self)
  val shallow_model4 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model4 self }
    
  predicate resolve4 (self : Hashmap_List_Type.t_list (k, v))
  val resolve4 (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = resolve4 self }
    
  predicate resolve7 (self : Hashmap_List_Type.t_list (k, v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 34 8 34 31] resolve4 self
  val resolve7 (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = resolve7 self }
    
  use map.Map
  predicate no_double_binding0 [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (k, v)) =
    [#"../hashmap.rs" 40 12 43 13] match self with
      | Hashmap_List_Type.C_Nil -> true
      | Hashmap_List_Type.C_Cons (k, _) tl -> get1 tl (deep_model0 k) = Core_Option_Option_Type.C_None /\ no_double_binding0 tl
      end
  val no_double_binding0 [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = no_double_binding0 self }
    
  predicate good_bucket0 [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int)
    
   =
    [#"../hashmap.rs" 201 8 203 9] forall v : v . forall k : deep_model_ty0 . inv8 v
     -> inv1 k  -> get1 l k = Core_Option_Option_Type.C_Some v  -> bucket_ix0 self k = h
  val good_bucket0 [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) (l : Hashmap_List_Type.t_list (k, v)) (h : int) : bool
    ensures { result = good_bucket0 self l h }
    
  predicate hashmap_inv0 [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) =
    [#"../hashmap.rs" 210 8 213 9] 0 < Seq.length (shallow_model3 (Hashmap_MyHashMap_Type.myhashmap_buckets self)) /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model3 (Hashmap_MyHashMap_Type.myhashmap_buckets self))
     -> good_bucket0 self (index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) i) i /\ no_double_binding0 (index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) i))
  val hashmap_inv0 [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = hashmap_inv0 self }
    
  val add0 [#"../hashmap.rs" 106 4 106 41] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) (key : k) (val' : v) : ()
    requires {[#"../hashmap.rs" 103 15 103 36] hashmap_inv0 ( * self)}
    requires {[#"../hashmap.rs" 106 20 106 24] inv3 self}
    requires {[#"../hashmap.rs" 106 26 106 29] inv7 key}
    requires {[#"../hashmap.rs" 106 34 106 37] inv8 val'}
    ensures { [#"../hashmap.rs" 104 14 104 35] hashmap_inv0 ( ^ self) }
    ensures { [#"../hashmap.rs" 105 4 105 124] forall i : deep_model_ty0 . inv1 i
     -> Map.get (shallow_model2 ( ^ self)) i = (if i = deep_model0 key then
      Core_Option_Option_Type.C_Some val'
    else
      Map.get (shallow_model4 self) i
    ) }
    
  predicate resolve6 (self : v)
  val resolve6 (self : v) : bool
    ensures { result = resolve6 self }
    
  predicate resolve5 (self : k)
  val resolve5 (self : k) : bool
    ensures { result = resolve5 self }
    
  predicate resolve3 (self : borrowed (Hashmap_List_Type.t_list (k, v))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = resolve3 self }
    
  val replace0 (dest : borrowed (Hashmap_List_Type.t_list (k, v))) (src : Hashmap_List_Type.t_list (k, v)) : Hashmap_List_Type.t_list (k, v)
    requires {inv6 dest}
    requires {inv5 src}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 7 22 7 34]  ^ dest = src }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 8 22 8 37] result =  * dest }
    ensures { inv5 result }
    
  use prelude.Slice
  predicate resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq (Hashmap_List_Type.t_list (k, v))) (fin : Seq.seq (Hashmap_List_Type.t_list (k, v)))
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq (Hashmap_List_Type.t_list (k, v))) (fin : Seq.seq (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = resolve_elswhere0 self old' fin }
    
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (Hashmap_List_Type.t_list (k, v))) (out : Hashmap_List_Type.t_list (k, v))
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (Hashmap_List_Type.t_list (k, v))) (out : Hashmap_List_Type.t_list (k, v)) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq (Hashmap_List_Type.t_list (k, v))) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq (Hashmap_List_Type.t_list (k, v))) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model7 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model3 ( * self)
  val shallow_model7 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    ensures { result = shallow_model7 self }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global))) (index : usize) : borrowed (Hashmap_List_Type.t_list (k, v))
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds0 index (shallow_model7 self)}
    requires {inv12 self}
    requires {inv13 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value0 index (shallow_model7 self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value0 index (shallow_model3 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model7 self) (shallow_model3 ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model3 ( ^ self)) = Seq.length (shallow_model7 self) }
    ensures { inv6 result }
    
  predicate resolve2 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : Hashmap_MyHashMap_Type.t_myhashmap k v)
  val resolve1 (self : Hashmap_MyHashMap_Type.t_myhashmap k v) : bool
    ensures { result = resolve1 self }
    
  use prelude.Snapshot
  function shallow_model6 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model4 self
  val shallow_model6 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model6 self }
    
  use prelude.Snapshot
  function shallow_model1 (self : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model6 (Snapshot.inner self)
  val shallow_model1 (self : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model1 self }
    
  val new1 [#"../hashmap.rs" 98 4 98 46] (size : usize) : Hashmap_MyHashMap_Type.t_myhashmap k v
    requires {[#"../hashmap.rs" 95 15 95 24] 0 < UIntSize.to_int size}
    ensures { [#"../hashmap.rs" 96 14 96 34] hashmap_inv0 result }
    ensures { [#"../hashmap.rs" 97 4 97 64] forall i : deep_model_ty0 . inv1 i
     -> Map.get (shallow_model2 result) i = Core_Option_Option_Type.C_None }
    ensures { [#"../hashmap.rs" 98 31 98 46] inv2 result }
    
  function shallow_model5 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model3 self
  val shallow_model5 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (k, v))
    ensures { result = shallow_model5 self }
    
  val len0 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv10 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result = Seq.length (shallow_model5 self) }
    
  predicate resolve0 (self : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)))
  val resolve0 (self : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Snapshot
  let rec cfg resize [#"../hashmap.rs" 161 4 161 24] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v)) : ()
    requires {[#"../hashmap.rs" 156 15 156 41] Seq.length (shallow_model3 (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self))) < 1000}
    requires {[#"../hashmap.rs" 157 15 157 36] hashmap_inv0 ( * self)}
    requires {[#"../hashmap.rs" 161 19 161 23] inv3 self}
    ensures { [#"../hashmap.rs" 158 14 158 35] hashmap_inv0 ( ^ self) }
    ensures { [#"../hashmap.rs" 159 4 159 74] forall k : deep_model_ty0 . inv1 k
     -> Map.get (shallow_model2 ( ^ self)) k = Map.get (shallow_model4 self) k }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v) = self;
  var old_self : Snapshot.snap_ty (borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v));
  var new : Hashmap_MyHashMap_Type.t_myhashmap k v;
  var _9 : usize;
  var _10 : usize;
  var i : usize;
  var _21 : ();
  var _22 : bool;
  var _24 : usize;
  var l : Hashmap_List_Type.t_list (k, v);
  var _27 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _28 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _29 : borrowed (Hashmap_List_Type.t_list (k, v));
  var _30 : borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global));
  var _32 : Hashmap_List_Type.t_list (k, v);
  var k : k;
  var v : v;
  var tl : Hashmap_List_Type.t_list (k, v);
  var _44 : ();
  var _45 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v);
  {
    goto BB0
  }
  BB0 {
    [#"../hashmap.rs" 162 23 162 41] old_self <- ([#"../hashmap.rs" 162 23 162 41] Snapshot.new self);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 old_self };
    assume { resolve0 old_self };
    [#"../hashmap.rs" 163 32 163 50] _10 <- ([#"../hashmap.rs" 163 32 163 50] len0 (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self)));
    goto BB2
  }
  BB2 {
    [#"../hashmap.rs" 163 32 163 54] _9 <- _10 * ([#"../hashmap.rs" 163 53 163 54] (2 : usize));
    _10 <- any usize;
    [#"../hashmap.rs" 163 22 163 55] new <- ([#"../hashmap.rs" 163 22 163 55] new1 _9);
    _9 <- any usize;
    goto BB3
  }
  BB3 {
    [#"../hashmap.rs" 165 27 165 28] i <- ([#"../hashmap.rs" 165 27 165 28] (0 : usize));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant { [#"../hashmap.rs" 166 8 166 111] forall k : deep_model_ty0 . inv1 k
     -> bucket_ix0 ( * Snapshot.inner old_self) k < UIntSize.to_int i
     -> Map.get (shallow_model1 old_self) k = Map.get (shallow_model2 new) k };
    invariant { [#"../hashmap.rs" 166 8 166 111] forall k : deep_model_ty0 . inv1 k
     -> UIntSize.to_int i <= bucket_ix0 ( * Snapshot.inner old_self) k /\ bucket_ix0 ( * Snapshot.inner old_self) k <= Seq.length (shallow_model3 (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Snapshot.inner old_self)))
     -> Map.get (shallow_model2 new) k = Core_Option_Option_Type.C_None };
    invariant { [#"../hashmap.rs" 166 8 166 111] forall j : int . UIntSize.to_int i <= j /\ j < Seq.length (shallow_model3 (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Snapshot.inner old_self)))
     -> index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self)) j = index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Snapshot.inner old_self)) j };
    invariant { [#"../hashmap.rs" 172 20 172 37] hashmap_inv0 new };
    invariant { [#"../hashmap.rs" 173 20 173 46]  ^ Snapshot.inner old_self =  ^ self };
    invariant { [#"../hashmap.rs" 174 20 174 66] Seq.length (shallow_model3 (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Snapshot.inner old_self))) = Seq.length (shallow_model3 (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self))) };
    invariant { [#"../hashmap.rs" 175 20 175 45] UIntSize.to_int i <= Seq.length (shallow_model3 (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self))) };
    goto BB7
  }
  BB7 {
    [#"../hashmap.rs" 176 18 176 36] _24 <- ([#"../hashmap.rs" 176 18 176 36] len0 (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self)));
    goto BB8
  }
  BB8 {
    [#"../hashmap.rs" 176 14 176 36] _22 <- i < _24;
    _24 <- any usize;
    switch (_22)
      | False -> goto BB29
      | True -> goto BB9
      end
  }
  BB9 {
    [#"../hashmap.rs" 177 56 177 68] _30 <- Borrow.borrow_mut (Hashmap_MyHashMap_Type.myhashmap_buckets ( * self));
    [#"../hashmap.rs" 177 56 177 68] self <- { self with current = (let Hashmap_MyHashMap_Type.C_MyHashMap x0 =  * self in Hashmap_MyHashMap_Type.C_MyHashMap ( ^ _30)) ; };
    assume { inv4 ( ^ _30) };
    [#"../hashmap.rs" 177 68 177 71] _29 <- ([#"../hashmap.rs" 177 68 177 71] index_mut0 _30 i);
    _30 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (k, v)) (Alloc_Alloc_Global_Type.t_global));
    goto BB10
  }
  BB10 {
    [#"../hashmap.rs" 177 51 177 71] _28 <- Borrow.borrow_final ( * _29) (Borrow.get_id _29);
    [#"../hashmap.rs" 177 51 177 71] _29 <- { _29 with current = ( ^ _28) ; };
    assume { inv5 ( ^ _28) };
    [#"../hashmap.rs" 177 51 177 71] _27 <- Borrow.borrow_final ( * _28) (Borrow.get_id _28);
    [#"../hashmap.rs" 177 51 177 71] _28 <- { _28 with current = ( ^ _27) ; };
    assume { inv5 ( ^ _27) };
    [#"../hashmap.rs" 177 73 177 82] _32 <- Hashmap_List_Type.C_Nil;
    [#"../hashmap.rs" 177 33 177 83] l <- ([#"../hashmap.rs" 177 33 177 83] replace0 _27 _32);
    _27 <- any borrowed (Hashmap_List_Type.t_list (k, v));
    _32 <- any Hashmap_List_Type.t_list (k, v);
    goto BB11
  }
  BB11 {
    assert { [@expl:type invariant] inv6 _29 };
    assume { resolve3 _29 };
    assert { [@expl:type invariant] inv6 _28 };
    assume { resolve3 _28 };
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    invariant { [#"../hashmap.rs" 179 24 179 41] hashmap_inv0 new };
    invariant { [#"../hashmap.rs" 179 12 179 43] forall k : deep_model_ty0 . inv1 k
     -> bucket_ix0 ( * Snapshot.inner old_self) k < UIntSize.to_int i
     -> Map.get (shallow_model1 old_self) k = Map.get (shallow_model2 new) k };
    invariant { [#"../hashmap.rs" 179 12 179 43] forall k : deep_model_ty0 . inv1 k
     -> UIntSize.to_int i < bucket_ix0 ( * Snapshot.inner old_self) k /\ bucket_ix0 ( * Snapshot.inner old_self) k <= Seq.length (shallow_model3 (Hashmap_MyHashMap_Type.myhashmap_buckets ( * Snapshot.inner old_self)))
     -> Map.get (shallow_model2 new) k = Core_Option_Option_Type.C_None };
    invariant { [#"../hashmap.rs" 179 12 179 43] forall k : deep_model_ty0 . inv1 k
     -> bucket_ix0 ( * Snapshot.inner old_self) k = UIntSize.to_int i
     -> Map.get (shallow_model1 old_self) k = match get1 l k with
      | Core_Option_Option_Type.C_None -> Map.get (shallow_model2 new) k
      | Core_Option_Option_Type.C_Some v -> Core_Option_Option_Type.C_Some v
      end };
    invariant { [#"../hashmap.rs" 186 24 186 45] no_double_binding0 l };
    invariant { [#"../hashmap.rs" 187 24 187 51] good_bucket0 ( * Snapshot.inner old_self) l (UIntSize.to_int i) };
    goto BB18
  }
  BB18 {
    switch (l)
      | Hashmap_List_Type.C_Cons _ _ -> goto BB19
      | _ -> goto BB25
      end
  }
  BB19 {
    goto BB20
  }
  BB20 {
    [#"../hashmap.rs" 188 34 188 35] k <- (let (a, _) = Hashmap_List_Type.cons_0 l in a);
    [#"../hashmap.rs" 188 37 188 38] v <- (let (_, a) = Hashmap_List_Type.cons_0 l in a);
    [#"../hashmap.rs" 188 41 188 43] tl <- Hashmap_List_Type.cons_1 l;
    l <- (let Hashmap_List_Type.C_Cons x0 x1 = l in Hashmap_List_Type.C_Cons x0 (any Hashmap_List_Type.t_list (k, v)));
    assert { [@expl:type invariant] inv5 l };
    assume { resolve4 l };
    [#"../hashmap.rs" 189 16 189 19] _45 <- Borrow.borrow_mut new;
    [#"../hashmap.rs" 189 16 189 19] new <-  ^ _45;
    assume { inv2 ( ^ _45) };
    assert { [@expl:type invariant] inv7 k };
    assume { resolve5 k };
    assert { [@expl:type invariant] inv8 v };
    assume { resolve6 v };
    [#"../hashmap.rs" 189 16 189 29] _44 <- ([#"../hashmap.rs" 189 16 189 29] add0 _45 k v);
    _45 <- any borrowed (Hashmap_MyHashMap_Type.t_myhashmap k v);
    goto BB21
  }
  BB21 {
    assert { [@expl:type invariant] inv9 tl };
    assume { resolve7 tl };
    goto BB22
  }
  BB22 {
    [#"../hashmap.rs" 190 16 190 17] l <- tl;
    tl <- any Hashmap_List_Type.t_list (k, v);
    goto BB24
  }
  BB24 {
    [#"../hashmap.rs" 188 49 191 13] _21 <- ([#"../hashmap.rs" 188 49 191 13] ());
    goto BB26
  }
  BB25 {
    assert { [@expl:type invariant] inv5 l };
    assume { resolve4 l };
    assert { [@expl:assertion] [#"../hashmap.rs" 192 12 192 121] forall k : deep_model_ty0 . inv1 k
     -> bucket_ix0 ( * Snapshot.inner old_self) k = UIntSize.to_int i
     -> Map.get (shallow_model1 old_self) k = Map.get (shallow_model2 new) k };
    goto BB27
  }
  BB26 {
    goto BB17
  }
  BB27 {
    [#"../hashmap.rs" 193 12 193 18] i <- i + ([#"../hashmap.rs" 193 17 193 18] (1 : usize));
    [#"../hashmap.rs" 176 37 194 9] _21 <- ([#"../hashmap.rs" 176 37 194 9] ());
    goto BB28
  }
  BB28 {
    goto BB6
  }
  BB29 {
    goto BB30
  }
  BB30 {
    [#"../hashmap.rs" 196 8 196 13] self <- { self with current = new ; };
    new <- any Hashmap_MyHashMap_Type.t_myhashmap k v;
    assert { [@expl:type invariant] inv2 ( * self) };
    assume { resolve1 ( * self) };
    assert { [@expl:type invariant] inv3 self };
    assume { resolve2 self };
    goto BB32
  }
  BB32 {
    [#"../hashmap.rs" 161 25 197 5] _0 <- ([#"../hashmap.rs" 161 25 197 5] ());
    goto BB33
  }
  BB33 {
    return _0
  }
  
end
module Hashmap_Main
  use prelude.IntSize
  use prelude.UIntSize
  use Hashmap_List_Type as Hashmap_List_Type
  use seq.Seq
  predicate invariant8 (self : Seq.seq (Hashmap_List_Type.t_list (usize, isize))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : Seq.seq (Hashmap_List_Type.t_list (usize, isize))) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Seq.seq (Hashmap_List_Type.t_list (usize, isize)))
  val inv8 (_x : Seq.seq (Hashmap_List_Type.t_list (usize, isize))) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Seq.seq (Hashmap_List_Type.t_list (usize, isize)) . inv8 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv7 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (usize, isize)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv7 (_x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (usize, isize)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv7 _x }
    
  function shallow_model4 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (usize, isize)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (usize, isize))
    
  val shallow_model4 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (usize, isize)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Hashmap_List_Type.t_list (usize, isize))
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv7 self}
    ensures { result = shallow_model4 self }
    
  axiom shallow_model4_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (usize, isize)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv7 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv8 (shallow_model4 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model4 self) <= UIntSize.to_int max0)
  predicate invariant7 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (usize, isize)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv8 (shallow_model4 self)
  val invariant7 (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (usize, isize)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant7 self }
    
  axiom inv7 : forall x : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (usize, isize)) (Alloc_Alloc_Global_Type.t_global) . inv7 x = true
  predicate invariant6 (self : isize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : isize) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : isize)
  val inv6 (_x : isize) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : isize . inv6 x = true
  use Hashmap_MyHashMap_Type as Hashmap_MyHashMap_Type
  use prelude.Borrow
  predicate invariant5 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize))
  val inv5 (_x : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize) . inv5 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant4 (self : Core_Option_Option_Type.t_option isize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Core_Option_Option_Type.t_option isize) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Core_Option_Option_Type.t_option isize)
  val inv4 (_x : Core_Option_Option_Type.t_option isize) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Core_Option_Option_Type.t_option isize . inv4 x = true
  predicate invariant3 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : usize) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : usize)
  val inv3 (_x : usize) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : usize . inv3 x = true
  predicate invariant2 (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Hashmap_MyHashMap_Type.t_myhashmap usize isize)
  val inv2 (_x : Hashmap_MyHashMap_Type.t_myhashmap usize isize) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Hashmap_MyHashMap_Type.t_myhashmap usize isize . inv2 x = true
  predicate invariant1 (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Hashmap_MyHashMap_Type.t_myhashmap usize isize)
  val inv1 (_x : Hashmap_MyHashMap_Type.t_myhashmap usize isize) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Hashmap_MyHashMap_Type.t_myhashmap usize isize . inv1 x = true
  use prelude.Int
  predicate invariant0 (self : int) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : int) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : int)
  val inv0 (_x : int) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : int . inv0 x = true
  use map.Map
  use prelude.Mapping
  function deep_model0 (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model0 (self : usize) : int
    ensures { result = deep_model0 self }
    
  function get2 [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (usize, isize)) (index : int) : Core_Option_Option_Type.t_option isize
    
   =
    [#"../hashmap.rs" 30 12 33 13] match self with
      | Hashmap_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      | Hashmap_List_Type.C_Cons (k, v) tl -> if deep_model0 k = index then
        Core_Option_Option_Type.C_Some v
      else
        get2 tl index
      
      end
  val get2 [#"../hashmap.rs" 28 4 28 56] (self : Hashmap_List_Type.t_list (usize, isize)) (index : int) : Core_Option_Option_Type.t_option isize
    ensures { result = get2 self index }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (usize, isize)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Hashmap_List_Type.t_list (usize, isize)
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model4 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Hashmap_List_Type.t_list (usize, isize)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Hashmap_List_Type.t_list (usize, isize)
    ensures { result = index_logic0 self ix }
    
  use int.EuclideanDivision
  function hash_log0 [#"../hashmap.rs" 64 4 64 30] (x : int) : int =
    [#"../hashmap.rs" 65 20 65 21] x
  val hash_log0 [#"../hashmap.rs" 64 4 64 30] (x : int) : int
    ensures { result = hash_log0 x }
    
  function bucket_ix0 [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) (k : int) : int
    
   =
    [#"../hashmap.rs" 90 20 90 66] EuclideanDivision.mod (hash_log0 k) (Seq.length (shallow_model4 (Hashmap_MyHashMap_Type.myhashmap_buckets self)))
  val bucket_ix0 [#"../hashmap.rs" 89 4 89 48] (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) (k : int) : int
    ensures { result = bucket_ix0 self k }
    
  function bucket0 [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) (k : int) : Hashmap_List_Type.t_list (usize, isize)
    
   =
    [#"../hashmap.rs" 85 8 85 53] index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) (bucket_ix0 self k)
  val bucket0 [#"../hashmap.rs" 84 4 84 54] (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) (k : int) : Hashmap_List_Type.t_list (usize, isize)
    ensures { result = bucket0 self k }
    
  function shallow_model1 [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) : Map.map int (Core_Option_Option_Type.t_option isize)
    
   =
    [#"../hashmap.rs" 79 20 79 45] Mapping.from_fn (fun (k : int) -> get2 (bucket0 self k) k)
  val shallow_model1 [#"../hashmap.rs" 78 4 78 50] (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) : Map.map int (Core_Option_Option_Type.t_option isize)
    ensures { result = shallow_model1 self }
    
  function shallow_model3 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize)) : Map.map int (Core_Option_Option_Type.t_option isize)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model1 ( * self)
  val shallow_model3 (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize)) : Map.map int (Core_Option_Option_Type.t_option isize)
    ensures { result = shallow_model3 self }
    
  use map.Map
  predicate no_double_binding0 [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (usize, isize)) =
    [#"../hashmap.rs" 40 12 43 13] match self with
      | Hashmap_List_Type.C_Nil -> true
      | Hashmap_List_Type.C_Cons (k, _) tl -> get2 tl (deep_model0 k) = Core_Option_Option_Type.C_None /\ no_double_binding0 tl
      end
  val no_double_binding0 [#"../hashmap.rs" 38 4 38 38] (self : Hashmap_List_Type.t_list (usize, isize)) : bool
    ensures { result = no_double_binding0 self }
    
  predicate good_bucket0 [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) (l : Hashmap_List_Type.t_list (usize, isize)) (h : int)
    
   =
    [#"../hashmap.rs" 201 8 203 9] forall v : isize . forall k : int . inv6 v
     -> inv0 k  -> get2 l k = Core_Option_Option_Type.C_Some v  -> bucket_ix0 self k = h
  val good_bucket0 [#"../hashmap.rs" 200 4 200 57] (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) (l : Hashmap_List_Type.t_list (usize, isize)) (h : int) : bool
    ensures { result = good_bucket0 self l h }
    
  predicate hashmap_inv0 [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) =
    [#"../hashmap.rs" 210 8 213 9] 0 < Seq.length (shallow_model4 (Hashmap_MyHashMap_Type.myhashmap_buckets self)) /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model4 (Hashmap_MyHashMap_Type.myhashmap_buckets self))
     -> good_bucket0 self (index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) i) i /\ no_double_binding0 (index_logic0 (Hashmap_MyHashMap_Type.myhashmap_buckets self) i))
  val hashmap_inv0 [#"../hashmap.rs" 209 4 209 33] (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) : bool
    ensures { result = hashmap_inv0 self }
    
  val add0 [#"../hashmap.rs" 106 4 106 41] (self : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize)) (key : usize) (val' : isize) : ()
    requires {[#"../hashmap.rs" 103 15 103 36] hashmap_inv0 ( * self)}
    requires {[#"../hashmap.rs" 106 20 106 24] inv5 self}
    requires {[#"../hashmap.rs" 106 26 106 29] inv3 key}
    requires {[#"../hashmap.rs" 106 34 106 37] inv6 val'}
    ensures { [#"../hashmap.rs" 104 14 104 35] hashmap_inv0 ( ^ self) }
    ensures { [#"../hashmap.rs" 105 4 105 124] forall i : int . inv0 i
     -> Map.get (shallow_model1 ( ^ self)) i = (if i = deep_model0 key then
      Core_Option_Option_Type.C_Some val'
    else
      Map.get (shallow_model3 self) i
    ) }
    
  function shallow_model2 (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) : Map.map int (Core_Option_Option_Type.t_option isize)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model1 self
  val shallow_model2 (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) : Map.map int (Core_Option_Option_Type.t_option isize)
    ensures { result = shallow_model2 self }
    
  val get0 [#"../hashmap.rs" 141 4 141 43] (self : Hashmap_MyHashMap_Type.t_myhashmap usize isize) (key : usize) : Core_Option_Option_Type.t_option isize
    requires {[#"../hashmap.rs" 136 15 136 33] hashmap_inv0 self}
    requires {[#"../hashmap.rs" 141 16 141 20] inv2 self}
    requires {[#"../hashmap.rs" 141 22 141 25] inv3 key}
    ensures { [#"../hashmap.rs" 137 14 140 5] match result with
      | Core_Option_Option_Type.C_Some v -> Map.get (shallow_model2 self) (deep_model0 key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (shallow_model2 self) (deep_model0 key) = Core_Option_Option_Type.C_None
      end }
    ensures { [#"../hashmap.rs" 141 33 141 43] inv4 result }
    
  val new0 [#"../hashmap.rs" 98 4 98 46] (size : usize) : Hashmap_MyHashMap_Type.t_myhashmap usize isize
    requires {[#"../hashmap.rs" 95 15 95 24] 0 < UIntSize.to_int size}
    ensures { [#"../hashmap.rs" 96 14 96 34] hashmap_inv0 result }
    ensures { [#"../hashmap.rs" 97 4 97 64] forall i : int . inv0 i
     -> Map.get (shallow_model1 result) i = Core_Option_Option_Type.C_None }
    ensures { [#"../hashmap.rs" 98 31 98 46] inv1 result }
    
  let rec cfg main [#"../hashmap.rs" 217 0 217 13] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var h1 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var h2 : Hashmap_MyHashMap_Type.t_myhashmap usize isize;
  var _x : Core_Option_Option_Type.t_option isize;
  var _y : Core_Option_Option_Type.t_option isize;
  var _z : Core_Option_Option_Type.t_option isize;
  var _t : Core_Option_Option_Type.t_option isize;
  var _11 : ();
  var _12 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize);
  var _13 : Core_Option_Option_Type.t_option isize;
  var _15 : Core_Option_Option_Type.t_option isize;
  var _17 : Core_Option_Option_Type.t_option isize;
  var _19 : Core_Option_Option_Type.t_option isize;
  var _21 : ();
  var _22 : borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize);
  var _23 : Core_Option_Option_Type.t_option isize;
  var _25 : Core_Option_Option_Type.t_option isize;
  var _27 : Core_Option_Option_Type.t_option isize;
  var _29 : Core_Option_Option_Type.t_option isize;
  {
    goto BB0
  }
  BB0 {
    [#"../hashmap.rs" 224 42 224 60] h1 <- ([#"../hashmap.rs" 224 42 224 60] new0 ([#"../hashmap.rs" 224 57 224 59] (17 : usize)));
    goto BB1
  }
  BB1 {
    [#"../hashmap.rs" 225 42 225 60] h2 <- ([#"../hashmap.rs" 225 42 225 60] new0 ([#"../hashmap.rs" 225 57 225 59] (42 : usize)));
    goto BB2
  }
  BB2 {
    [#"../hashmap.rs" 226 17 226 26] _x <- ([#"../hashmap.rs" 226 17 226 26] get0 h1 ([#"../hashmap.rs" 226 24 226 25] (1 : usize)));
    goto BB3
  }
  BB3 {
    [#"../hashmap.rs" 227 17 227 26] _y <- ([#"../hashmap.rs" 227 17 227 26] get0 h1 ([#"../hashmap.rs" 227 24 227 25] (2 : usize)));
    goto BB4
  }
  BB4 {
    [#"../hashmap.rs" 228 17 228 26] _z <- ([#"../hashmap.rs" 228 17 228 26] get0 h2 ([#"../hashmap.rs" 228 24 228 25] (1 : usize)));
    goto BB5
  }
  BB5 {
    [#"../hashmap.rs" 229 17 229 26] _t <- ([#"../hashmap.rs" 229 17 229 26] get0 h2 ([#"../hashmap.rs" 229 24 229 25] (2 : usize)));
    goto BB6
  }
  BB6 {
    [#"../hashmap.rs" 233 4 233 6] _12 <- Borrow.borrow_mut h1;
    [#"../hashmap.rs" 233 4 233 6] h1 <-  ^ _12;
    [#"../hashmap.rs" 233 4 233 17] _11 <- ([#"../hashmap.rs" 233 4 233 17] add0 _12 ([#"../hashmap.rs" 233 11 233 12] (1 : usize)) ([#"../hashmap.rs" 233 14 233 16] (17 : isize)));
    _12 <- any borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize);
    goto BB7
  }
  BB7 {
    [#"../hashmap.rs" 234 9 234 18] _13 <- ([#"../hashmap.rs" 234 9 234 18] get0 h1 ([#"../hashmap.rs" 234 16 234 17] (1 : usize)));
    goto BB8
  }
  BB8 {
    [#"../hashmap.rs" 234 4 234 18] _x <- _13;
    _13 <- any Core_Option_Option_Type.t_option isize;
    [#"../hashmap.rs" 235 9 235 18] _15 <- ([#"../hashmap.rs" 235 9 235 18] get0 h1 ([#"../hashmap.rs" 235 16 235 17] (2 : usize)));
    goto BB9
  }
  BB9 {
    [#"../hashmap.rs" 235 4 235 18] _y <- _15;
    _15 <- any Core_Option_Option_Type.t_option isize;
    [#"../hashmap.rs" 236 9 236 18] _17 <- ([#"../hashmap.rs" 236 9 236 18] get0 h2 ([#"../hashmap.rs" 236 16 236 17] (1 : usize)));
    goto BB10
  }
  BB10 {
    [#"../hashmap.rs" 236 4 236 18] _z <- _17;
    _17 <- any Core_Option_Option_Type.t_option isize;
    [#"../hashmap.rs" 237 9 237 18] _19 <- ([#"../hashmap.rs" 237 9 237 18] get0 h2 ([#"../hashmap.rs" 237 16 237 17] (2 : usize)));
    goto BB11
  }
  BB11 {
    [#"../hashmap.rs" 237 4 237 18] _t <- _19;
    _19 <- any Core_Option_Option_Type.t_option isize;
    [#"../hashmap.rs" 240 4 240 6] _22 <- Borrow.borrow_mut h2;
    [#"../hashmap.rs" 240 4 240 6] h2 <-  ^ _22;
    [#"../hashmap.rs" 240 4 240 17] _21 <- ([#"../hashmap.rs" 240 4 240 17] add0 _22 ([#"../hashmap.rs" 240 11 240 12] (1 : usize)) ([#"../hashmap.rs" 240 14 240 16] (42 : isize)));
    _22 <- any borrowed (Hashmap_MyHashMap_Type.t_myhashmap usize isize);
    goto BB12
  }
  BB12 {
    [#"../hashmap.rs" 241 9 241 18] _23 <- ([#"../hashmap.rs" 241 9 241 18] get0 h1 ([#"../hashmap.rs" 241 16 241 17] (1 : usize)));
    goto BB13
  }
  BB13 {
    [#"../hashmap.rs" 241 4 241 18] _x <- _23;
    _23 <- any Core_Option_Option_Type.t_option isize;
    [#"../hashmap.rs" 242 9 242 18] _25 <- ([#"../hashmap.rs" 242 9 242 18] get0 h1 ([#"../hashmap.rs" 242 16 242 17] (2 : usize)));
    goto BB14
  }
  BB14 {
    [#"../hashmap.rs" 242 4 242 18] _y <- _25;
    _25 <- any Core_Option_Option_Type.t_option isize;
    [#"../hashmap.rs" 243 9 243 18] _27 <- ([#"../hashmap.rs" 243 9 243 18] get0 h2 ([#"../hashmap.rs" 243 16 243 17] (1 : usize)));
    goto BB15
  }
  BB15 {
    [#"../hashmap.rs" 243 4 243 18] _z <- _27;
    _27 <- any Core_Option_Option_Type.t_option isize;
    [#"../hashmap.rs" 244 9 244 18] _29 <- ([#"../hashmap.rs" 244 9 244 18] get0 h2 ([#"../hashmap.rs" 244 16 244 17] (2 : usize)));
    goto BB16
  }
  BB16 {
    [#"../hashmap.rs" 244 4 244 18] _t <- _29;
    _29 <- any Core_Option_Option_Type.t_option isize;
    [#"../hashmap.rs" 217 14 247 1] _0 <- ([#"../hashmap.rs" 217 14 247 1] ());
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Hashmap_Impl0
  type t
  use Hashmap_List_Type as Hashmap_List_Type
  predicate invariant1 (self : Hashmap_List_Type.t_list t)
  val invariant1 (self : Hashmap_List_Type.t_list t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Hashmap_List_Type.t_list t)
  val inv1 (_x : Hashmap_List_Type.t_list t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Hashmap_List_Type.t_list t . inv1 x = true
  predicate invariant0 (self : Hashmap_List_Type.t_list t)
  val invariant0 (self : Hashmap_List_Type.t_list t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Hashmap_List_Type.t_list t)
  val inv0 (_x : Hashmap_List_Type.t_list t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Hashmap_List_Type.t_list t . inv0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../hashmap.rs" 16 4 16 27] forall self : Hashmap_List_Type.t_list t . inv0 self
   -> inv0 self /\ (forall result : Hashmap_List_Type.t_list t . inv1 result /\ result = self
   -> inv1 result /\ result = self)
end
module Hashmap_Impl2
  use prelude.UIntSize
  predicate invariant0 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : usize) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : usize)
  val inv0 (_x : usize) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : usize . inv0 x = true
  use prelude.Int
  function hash_log0 [#"../hashmap.rs" 64 4 64 30] (x : int) : int =
    [#"../hashmap.rs" 65 20 65 21] x
  val hash_log0 [#"../hashmap.rs" 64 4 64 30] (x : int) : int
    ensures { result = hash_log0 x }
    
  use prelude.UIntSize
  function deep_model1 (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model1 (self : usize) : int
    ensures { result = deep_model1 self }
    
  use prelude.Int
  use prelude.Borrow
  function deep_model0 (self : usize) : int =
    [#"../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model1 self
  val deep_model0 (self : usize) : int
    ensures { result = deep_model0 self }
    
  use prelude.UInt64
  use prelude.UInt64
  goal hash_refn : [#"../hashmap.rs" 59 4 59 25] forall self : usize . inv0 self
   -> (forall result : uint64 . UInt64.to_int result = hash_log0 (deep_model0 self)
   -> UInt64.to_int result = hash_log0 (deep_model0 self))
end
module Hashmap_Impl3
  type k
  type v
end
