module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type hashmap_list 't =
    | Hashmap_List_Nil
    | Hashmap_List_Cons 't (hashmap_list 't)
    
  let function hashmap_list_Cons_0 (self : hashmap_list 't) : 't =
    match (self) with
      | Hashmap_List_Nil -> any 't
      | Hashmap_List_Cons a _ -> a
      end
  let function hashmap_list_Cons_1 (self : hashmap_list 't) : hashmap_list 't =
    match (self) with
      | Hashmap_List_Nil -> any hashmap_list 't
      | Hashmap_List_Cons _ a -> a
      end
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
  type hashmap_myhashmap 'k 'v =
    | Hashmap_MyHashMap (alloc_vec_vec (hashmap_list ('k, 'v)) (alloc_alloc_global))
    
  let function hashmap_myhashmap_MyHashMap_buckets (self : hashmap_myhashmap 'k 'v) : alloc_vec_vec (hashmap_list ('k, 'v)) (alloc_alloc_global)
    
   =
    match (self) with
      | Hashmap_MyHashMap a -> a
      end
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
end
module Hashmap_Hash_HashLog_Interface
  type self
  use mach.int.Int
  use mach.int.Int32
  function hash_log (self : self) : int
end
module Hashmap_Hash_HashLog
  type self
  use mach.int.Int
  use mach.int.Int32
  function hash_log [#"../hashmap.rs" 52 4 29] (self : self) : int
  axiom hash_log_spec : forall self : self . [#"../hashmap.rs" 51 4 27] hash_log self >= 0
end
module Hashmap_Hash_Hash_Interface
  type self
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = self, axiom .
  val hash [@cfg:stackify] (self : self) : uint64
    ensures { [#"../hashmap.rs" 47 4 42] UInt64.to_int result = HashLog0.hash_log self }
    
end
module Hashmap_Hash_Hash
  type self
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  clone Hashmap_Hash_HashLog as HashLog0 with type self = self, axiom .
  val hash [@cfg:stackify] (self : self) : uint64
    ensures { [#"../hashmap.rs" 47 4 42] UInt64.to_int result = HashLog0.hash_log self }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module Hashmap_Hash_HashLogEqModel_Interface
  type self
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = self, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function hash_log_eq_model (x : self) (y : self) : ()
end
module Hashmap_Hash_HashLogEqModel
  type self
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = self, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function hash_log_eq_model [#"../hashmap.rs" 57 4 43] (x : self) (y : self) : ()
  axiom hash_log_eq_model_spec : forall x : self, y : self . ([#"../hashmap.rs" 55 4 25] Model0.model x = Model0.model y) -> ([#"../hashmap.rs" 56 4 44] HashLog0.hash_log x = HashLog0.hash_log y)
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 9223372036854775807
end
module Hashmap_Impl4_BucketIx_Interface
  type k
  type v
  use Type
  use mach.int.Int
  function bucket_ix (self : Type.hashmap_myhashmap k v) (k : k) : int
end
module Hashmap_Impl4_BucketIx
  type k
  type v
  use Type
  use mach.int.Int
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.hashmap_list (k, v),
  type a = Type.alloc_alloc_global, axiom .
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = k, axiom .
  function bucket_ix [#"../hashmap.rs" 98 4 35] (self : Type.hashmap_myhashmap k v) (k : k) : int =
    [#"../hashmap.rs" 98 4 35] Int.mod (HashLog0.hash_log k) (Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets self)))
end
module Hashmap_Impl4_Bucket_Interface
  type k
  type v
  use Type
  function bucket (self : Type.hashmap_myhashmap k v) (k : k) : Type.hashmap_list (k, v)
end
module Hashmap_Impl4_Bucket
  type k
  type v
  use Type
  use seq.Seq
  clone Hashmap_Impl4_BucketIx_Interface as BucketIx0 with type k = k, type v = v
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.hashmap_list (k, v),
  type a = Type.alloc_alloc_global, axiom .
  function bucket [#"../hashmap.rs" 93 4 41] (self : Type.hashmap_myhashmap k v) (k : k) : Type.hashmap_list (k, v) =
    [#"../hashmap.rs" 93 4 41] Seq.get (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets self)) (BucketIx0.bucket_ix self k)
end
module Hashmap_Impl1_Get_Interface
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function get (self : Type.hashmap_list (k, v)) (index : ModelTy0.modelTy) : Type.core_option_option v
end
module Hashmap_Impl1_Get
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function get [#"../hashmap.rs" 25 4 48] (self : Type.hashmap_list (k, v)) (index : ModelTy0.modelTy) : Type.core_option_option v
    
   =
    [#"../hashmap.rs" 25 4 48] match (self) with
      | Type.Hashmap_List_Nil -> Type.Core_Option_Option_None
      | Type.Hashmap_List_Cons (k, v) tl -> if Model0.model k = index then
        Type.Core_Option_Option_Some v
      else
        get tl index
      
      end
end
module Hashmap_Impl3_Model_Interface
  type k
  type v
  use map.Map
  use Type
  clone Hashmap_Impl4_Bucket_Interface as Bucket0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone Hashmap_Impl1_Get_Interface as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : Type.hashmap_myhashmap k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module Hashmap_Impl3_Model
  type k
  type v
  use map.Map
  use Type
  clone Hashmap_Impl4_Bucket_Interface as Bucket0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone Hashmap_Impl1_Get_Interface as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../hashmap.rs" 87 4 35] (self : Type.hashmap_myhashmap k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
  axiom model_spec : forall self : Type.hashmap_myhashmap k v . [#"../hashmap.rs" 86 4 70] forall k : (k) . Map.get (model self) (Model0.model k) = Get0.get (Bucket0.bucket self k) (Model0.model k)
end
module Hashmap_Impl5_GoodBucket_Interface
  type k
  type v
  use Type
  use mach.int.Int
  predicate good_bucket (self : Type.hashmap_myhashmap k v) (l : Type.hashmap_list (k, v)) (h : int)
end
module Hashmap_Impl5_GoodBucket
  type k
  type v
  use Type
  use mach.int.Int
  clone Hashmap_Impl4_BucketIx_Interface as BucketIx0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone Hashmap_Impl1_Get_Interface as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate good_bucket [#"../hashmap.rs" 209 4 57] (self : Type.hashmap_myhashmap k v) (l : Type.hashmap_list (k, v)) (h : int)
    
   =
    [#"../hashmap.rs" 209 4 57] forall v : (v) . forall k : (k) . Get0.get l (Model0.model k) = Type.Core_Option_Option_Some v -> BucketIx0.bucket_ix self k = h
end
module Hashmap_Impl1_NoDoubleBinding_Interface
  type k
  type v
  use Type
  predicate no_double_binding (self : Type.hashmap_list (k, v))
end
module Hashmap_Impl1_NoDoubleBinding
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone Hashmap_Impl1_Get_Interface as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate no_double_binding [#"../hashmap.rs" 35 4 38] (self : Type.hashmap_list (k, v)) =
    [#"../hashmap.rs" 35 4 38] match (self) with
      | Type.Hashmap_List_Nil -> true
      | Type.Hashmap_List_Cons (k, v) tl -> Get0.get tl (Model0.model k) = Type.Core_Option_Option_None && no_double_binding tl
      end
end
module Hashmap_Impl5_HashmapInv_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  predicate hashmap_inv (self : Type.hashmap_myhashmap k v)
end
module Hashmap_Impl5_HashmapInv
  type k
  type v
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Hashmap_Impl1_NoDoubleBinding_Interface as NoDoubleBinding0 with type k = k, type v = v
  clone Hashmap_Impl5_GoodBucket_Interface as GoodBucket0 with type k = k, type v = v
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.hashmap_list (k, v),
  type a = Type.alloc_alloc_global, axiom .
  predicate hashmap_inv [#"../hashmap.rs" 218 4 33] (self : Type.hashmap_myhashmap k v) =
    [#"../hashmap.rs" 218 4 33] 0 < Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets self)) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets self)) -> GoodBucket0.good_bucket self (Seq.get (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets self)) i) i && NoDoubleBinding0.no_double_binding (Seq.get (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets self)) i))
end
module Hashmap_Impl3_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module Hashmap_Impl3
  type k
  type v
  use Type
  clone Hashmap_Hash_HashLog as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.hashmap_list (k, v),
  type a = Type.alloc_alloc_global, axiom .
  clone Hashmap_Impl4_BucketIx as BucketIx0 with type k = k, type v = v, function HashLog0.hash_log = HashLog0.hash_log,
  function Model0.model = Model3.model
  clone Hashmap_Impl4_Bucket as Bucket0 with type k = k, type v = v, function Model0.model = Model3.model,
  function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone Hashmap_Impl1_Get as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone Hashmap_Impl3_Model as Model0 with type k = k, type v = v, function Model0.model = Model2.model,
  function Bucket0.bucket = Bucket0.bucket, function Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy2.modelTy,
  axiom .
  clone Hashmap_Impl3_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.hashmap_myhashmap k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.hashmap_myhashmap k v,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.alloc_vec_vec t a,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.alloc_vec_vec t a,
  type modelTy = ModelTy0.modelTy
end
module Alloc_Vec_FromElem_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Alloc_Vec_FromElem
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module Hashmap_Impl5_New_Interface
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use map.Map
  use Type
  use prelude.Prelude
  clone Hashmap_Impl5_HashmapInv_Interface as HashmapInv0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone Hashmap_Impl1_Get_Interface as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl4_Bucket_Interface as Bucket0 with type k = k, type v = v
  clone Hashmap_Impl3_Model_Interface as Model0 with type k = k, type v = v, function Model0.model = Model1.model,
  function Bucket0.bucket = Bucket0.bucket, function Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy,
  axiom .
  val new [@cfg:stackify] (size : usize) : Type.hashmap_myhashmap k v
    requires {[#"../hashmap.rs" 104 4 26] 0 < UInt64.to_int size}
    ensures { [#"../hashmap.rs" 106 4 54] forall i : (k) . Map.get (Model0.model result) (Model1.model i) = Type.Core_Option_Option_None }
    ensures { [#"../hashmap.rs" 105 4 36] HashmapInv0.hashmap_inv result }
    
end
module Hashmap_Impl5_New
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use map.Map
  use Type
  use prelude.Prelude
  clone Hashmap_Hash_HashLog as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.hashmap_list (k, v),
  type a = Type.alloc_alloc_global, axiom .
  clone Hashmap_Impl4_BucketIx as BucketIx0 with type k = k, type v = v, function HashLog0.hash_log = HashLog0.hash_log,
  function Model0.model = Model2.model
  clone Hashmap_Impl4_Bucket as Bucket0 with type k = k, type v = v, function Model0.model = Model2.model,
  function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Hash_HashLogEqModel as HashLogEqModel0 with type self = k, function Model0.model = Model1.model,
  function HashLog0.hash_log = HashLog0.hash_log, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone Hashmap_Impl1_Get as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with type k = k, type v = v,
  function Model0.model = Model1.model, function Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with type k = k, type v = v, function Model0.model = Model1.model,
  function Get0.get = Get0.get, function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with type k = k, type v = v, function Model0.model = Model2.model,
  predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
  predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  clone Hashmap_Impl3_Model as Model0 with type k = k, type v = v, function Model0.model = Model1.model,
  function Bucket0.bucket = Bucket0.bucket, function Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy,
  axiom .
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.hashmap_myhashmap k v
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = Type.hashmap_list (k, v),
  function Model0.model = Model2.model
  let rec cfg new [@cfg:stackify] [#"../hashmap.rs" 107 4 42] (size : usize) : Type.hashmap_myhashmap k v
    requires {[#"../hashmap.rs" 104 4 26] 0 < UInt64.to_int size}
    ensures { [#"../hashmap.rs" 106 4 54] forall i : (k) . Map.get (Model0.model result) (Model1.model i) = Type.Core_Option_Option_None }
    ensures { [#"../hashmap.rs" 105 4 36] HashmapInv0.hashmap_inv result }
    
   =
  var _0 : Type.hashmap_myhashmap k v;
  var size_1 : usize;
  var res_2 : Type.hashmap_myhashmap k v;
  var _3 : Type.alloc_vec_vec (Type.hashmap_list (k, v)) (Type.alloc_alloc_global);
  var _4 : Type.hashmap_list (k, v);
  var _5 : usize;
  {
    size_1 <- size;
    goto BB0
  }
  BB0 {
    _4 <- Type.Hashmap_List_Nil;
    _5 <- size_1;
    _3 <- ([#"../hashmap.rs" 108 39 70] FromElem0.from_elem _4 _5);
    goto BB1
  }
  BB1 {
    res_2 <- Type.Hashmap_MyHashMap _3;
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _0 };
    _0 <- res_2;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self
  type idx
  type output
end
module Core_Ops_Index_Index_Index_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Core_Cmp_PartialEq_Eq
  type self
  type rhs
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Core_Cmp_PartialEq_Ne_Interface
  type self
  type rhs
  use prelude.Prelude
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne
  type self
  type rhs
  use prelude.Prelude
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Alloc_Vec_Impl16_Output
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  type output  =
    Output0.output
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone Core_Slice_Index_SliceIndex_Output as Output2 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Output as Output0 with type t = t, type i = i, type a = a, type Output0.output = Output2.output
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.alloc_vec_vec t a, type idx = i,
  type output = Output0.output
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i && i <> UInt64.to_int self && i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  =
    t
end
module CreusotContracts_Std1_Slice_Impl3
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere1 with type self = usize,
  type t = seq t, predicate resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue1 with type self = usize,
  type t = seq t, predicate has_value = HasValue0.has_value, type ModelTy0.modelTy = ModelTy0.modelTy,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds1 with type self = usize,
  type t = seq t, predicate in_bounds = InBounds0.in_bounds, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Core_Slice_Index_SliceIndex_Get_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Get
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone Core_Slice_Index_Impl2_IndexMut_Interface as IndexMut0 with type t = t
  clone Core_Slice_Index_Impl2_Index_Interface as Index0 with type t = t
  clone Core_Slice_Index_Impl2_GetUncheckedMut_Interface as GetUncheckedMut0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface as GetUncheckedMut1 with type self = usize,
  type t = seq t, val get_unchecked_mut = GetUncheckedMut0.get_unchecked_mut
  clone Core_Slice_Index_Impl2_GetUnchecked_Interface as GetUnchecked0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUnchecked_Interface as GetUnchecked1 with type self = usize, type t = seq t,
  val get_unchecked = GetUnchecked0.get_unchecked
  clone Core_Slice_Index_Impl2_GetMut_Interface as GetMut0 with type t = t
  clone Core_Slice_Index_Impl2_Get_Interface as Get0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone Core_Slice_Index_SliceIndex_IndexMut_Interface as IndexMut1 with type self = usize, type t = seq t,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Index_Interface as Index1 with type self = usize, type t = seq t,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_GetMut_Interface as GetMut1 with type self = usize, type t = seq t,
  val get_mut = GetMut0.get_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Get_Interface as Get1 with type self = usize, type t = seq t, val get = Get0.get,
  type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Output as Output1 with type self = usize, type t = seq t,
  type output = Output0.output
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.Int64
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.Int64
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . Seq.length (model self) <= 9223372036854775807 && model self = Prelude.id self
end
module CreusotContracts_Std1_Slice_Impl0
  type t
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model0 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = seq t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = seq t, type modelTy = ModelTy0.modelTy
end
module Hashmap_Impl5_Get_Interface
  type k
  type v
  use Type
  use prelude.Prelude
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = k
  clone Hashmap_Impl3_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.hashmap_myhashmap k v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone Hashmap_Impl5_HashmapInv_Interface as HashmapInv0 with type k = k, type v = v
  val get [@cfg:stackify] (self : Type.hashmap_myhashmap k v) (key : k) : Type.core_option_option v
    requires {[#"../hashmap.rs" 146 4 35] HashmapInv0.hashmap_inv self}
    ensures { [#"../hashmap.rs" 147 4 7] match (result) with
      | Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v
      | Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None
      end }
    
end
module Hashmap_Impl5_Get
  type k
  type v
  use Type
  use prelude.Prelude
  use map.Map
  clone Hashmap_Hash_HashLog as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = k
  clone Hashmap_Impl3_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy1.modelTy
  clone Hashmap_Hash_HashLogEqModel as HashLogEqModel0 with type self = k, function Model0.model = Model1.model,
  function HashLog0.hash_log = HashLog0.hash_log, type ModelTy0.modelTy = ModelTy1.modelTy, axiom .
  clone Hashmap_Impl1_Get as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy1.modelTy,
  function Model0.model = Model1.model
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with type k = k, type v = v,
  function Model0.model = Model1.model, function Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.hashmap_list (k, v),
  type a = Type.alloc_alloc_global, axiom .
  clone Hashmap_Impl4_BucketIx as BucketIx0 with type k = k, type v = v, function HashLog0.hash_log = HashLog0.hash_log,
  function Model0.model = Model2.model
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with type k = k, type v = v, function Model0.model = Model1.model,
  function Get0.get = Get0.get, function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with type k = k, type v = v, function Model0.model = Model2.model,
  predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
  predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  clone Hashmap_Impl4_Bucket as Bucket0 with type k = k, type v = v, function Model0.model = Model2.model,
  function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl3_Model as Model3 with type k = k, type v = v, function Model0.model = Model1.model,
  function Bucket0.bucket = Bucket0.bucket, function Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy1.modelTy,
  axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.hashmap_myhashmap k v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model3.model
  use mach.int.Int
  use mach.int.UInt64
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.hashmap_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy2 with type t = Type.hashmap_list (k, v)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.hashmap_myhashmap k v
  clone Hashmap_Hash_Hash_Interface as Hash0 with type self = k, function HashLog0.hash_log = HashLog0.hash_log
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = k, type ModelTy0.modelTy = ModelTy1.modelTy,
  function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with type self = k, type rhs = k, function Model0.model = Model4.model,
  function Model1.model = Model4.model, type ModelTy0.modelTy = ModelTy1.modelTy
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.hashmap_list (k, v), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.hashmap_list (k, v), type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  let rec cfg get [@cfg:stackify] [#"../hashmap.rs" 151 4 39] (self : Type.hashmap_myhashmap k v) (key : k) : Type.core_option_option v
    requires {[#"../hashmap.rs" 146 4 35] HashmapInv0.hashmap_inv self}
    ensures { [#"../hashmap.rs" 147 4 7] match (result) with
      | Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v
      | Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None
      end }
    
   =
  var _0 : Type.core_option_option v;
  var self_1 : Type.hashmap_myhashmap k v;
  var key_2 : k;
  var _3 : ();
  var index_4 : usize;
  var _5 : usize;
  var _6 : uint64;
  var _7 : k;
  var _8 : usize;
  var _9 : Type.alloc_vec_vec (Type.hashmap_list (k, v)) (Type.alloc_alloc_global);
  var _10 : bool;
  var l_11 : Type.hashmap_list (k, v);
  var _12 : Type.hashmap_list (k, v);
  var _13 : Type.alloc_vec_vec (Type.hashmap_list (k, v)) (Type.alloc_alloc_global);
  var _14 : usize;
  var _15 : ();
  var _16 : ();
  var _17 : isize;
  var k_18 : k;
  var v_19 : v;
  var tl_20 : Type.hashmap_list (k, v);
  var _21 : ();
  var _22 : bool;
  var _23 : k;
  var _24 : k;
  var _25 : ();
  var _26 : v;
  var _27 : Type.hashmap_list (k, v);
  var _28 : Type.hashmap_list (k, v);
  var _29 : ();
  var _30 : ();
  var _31 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _7 <- key_2;
    _6 <- ([#"../hashmap.rs" 152 27 37] Hash0.hash _7);
    goto BB1
  }
  BB1 {
    _5 <- UInt64.of_int (UInt64.to_int _6);
    _9 <- Type.hashmap_myhashmap_MyHashMap_buckets self_1;
    _8 <- ([#"../hashmap.rs" 152 49 67] Len0.len _9);
    goto BB2
  }
  BB2 {
    _10 <- ([#"../hashmap.rs" 152 27 67] _8 = (0 : usize));
    assert { not _10 };
    goto BB3
  }
  BB3 {
    index_4 <- ([#"../hashmap.rs" 152 27 67] _5 % _8);
    _13 <- Type.hashmap_myhashmap_MyHashMap_buckets self_1;
    assume { Resolve0.resolve self_1 };
    _14 <- index_4;
    _12 <- ([#"../hashmap.rs" 153 21 40] Index0.index _13 _14);
    goto BB4
  }
  BB4 {
    l_11 <- _12;
    assume { Resolve1.resolve _12 };
    goto BB5
  }
  BB5 {
    invariant not_already_found { [#"../hashmap.rs" 155 8 85] Get0.get (Bucket0.bucket self_1 key_2) (Model1.model key_2) = Get0.get l_11 (Model1.model key_2) };
    switch (l_11)
      | Type.Hashmap_List_Cons _ _ -> goto BB6
      | _ -> goto BB10
      end
  }
  BB6 {
    k_18 <- (let (a, _) = Type.hashmap_list_Cons_0 l_11 in a);
    v_19 <- (let (_, a) = Type.hashmap_list_Cons_0 l_11 in a);
    tl_20 <- Type.hashmap_list_Cons_1 l_11;
    assume { Resolve1.resolve l_11 };
    _23 <- k_18;
    assume { Resolve3.resolve k_18 };
    _24 <- key_2;
    _22 <- ([#"../hashmap.rs" 157 15 24] Eq0.eq _23 _24);
    goto BB7
  }
  BB7 {
    switch (_22)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    assume { Resolve2.resolve key_2 };
    assume { Resolve4.resolve tl_20 };
    _26 <- v_19;
    assume { Resolve5.resolve v_19 };
    _0 <- Type.Core_Option_Option_Some _26;
    goto BB11
  }
  BB9 {
    assume { Resolve5.resolve v_19 };
    _21 <- ();
    _28 <- tl_20;
    assume { Resolve4.resolve tl_20 };
    _27 <- _28;
    assume { Resolve1.resolve _28 };
    assume { Resolve1.resolve l_11 };
    l_11 <- _27;
    _16 <- ();
    goto BB5
  }
  BB10 {
    assume { Resolve2.resolve key_2 };
    assume { Resolve1.resolve l_11 };
    _15 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone Alloc_Vec_Impl16_Output as Output1 with type t = t, type i = i, type a = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output1.output
end
module Hashmap_Impl5_Add_Interface
  type k
  type v
  use map.Map
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone Hashmap_Impl1_Get_Interface as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl4_Bucket_Interface as Bucket0 with type k = k, type v = v
  clone Hashmap_Impl3_Model_Interface as Model0 with type k = k, type v = v, function Model0.model = Model1.model,
  function Bucket0.bucket = Bucket0.bucket, function Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy,
  axiom .
  clone Hashmap_Impl5_HashmapInv_Interface as HashmapInv0 with type k = k, type v = v
  val add [@cfg:stackify] (self : borrowed (Type.hashmap_myhashmap k v)) (key : k) (val' : v) : ()
    requires {[#"../hashmap.rs" 112 4 38] HashmapInv0.hashmap_inv ( * self)}
    ensures { [#"../hashmap.rs" 114 4 105] forall i : (k) . Map.get (Model0.model ( ^ self)) (Model1.model i) = (if Model1.model i = Model1.model key then
      Type.Core_Option_Option_Some val'
    else
      Map.get (Model0.model ( * self)) (Model1.model i)
    ) }
    ensures { [#"../hashmap.rs" 113 4 37] HashmapInv0.hashmap_inv ( ^ self) }
    
end
module Hashmap_Impl5_Add
  type k
  type v
  use map.Map
  use Type
  use prelude.Prelude
  use mach.int.UInt64
  clone Hashmap_Hash_HashLog as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Hash_HashLogEqModel as HashLogEqModel0 with type self = k, function Model0.model = Model1.model,
  function HashLog0.hash_log = HashLog0.hash_log, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone Hashmap_Impl1_Get as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with type k = k, type v = v,
  function Model0.model = Model1.model, function Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.hashmap_list (k, v),
  type a = Type.alloc_alloc_global, axiom .
  clone Hashmap_Impl4_BucketIx as BucketIx0 with type k = k, type v = v, function HashLog0.hash_log = HashLog0.hash_log,
  function Model0.model = Model2.model
  clone Hashmap_Impl4_Bucket as Bucket0 with type k = k, type v = v, function Model0.model = Model2.model,
  function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl3_Model as Model0 with type k = k, type v = v, function Model0.model = Model1.model,
  function Bucket0.bucket = Bucket0.bucket, function Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy,
  axiom .
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with type k = k, type v = v, function Model0.model = Model1.model,
  function Get0.get = Get0.get, function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with type k = k, type v = v, function Model0.model = Model2.model,
  predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
  predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve9 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve8 with type t = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = borrowed (Type.hashmap_list (k, v))
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = Type.hashmap_list (k, v)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.hashmap_myhashmap k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.hashmap_myhashmap k v)
  clone Hashmap_Hash_Hash_Interface as Hash0 with type self = k, function HashLog0.hash_log = HashLog0.hash_log
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with type self = k, type rhs = k, function Model0.model = Model3.model,
  function Model1.model = Model3.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.hashmap_list (k, v), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.hashmap_list (k, v), type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  let rec cfg add [@cfg:stackify] [#"../hashmap.rs" 115 4 37] (self : borrowed (Type.hashmap_myhashmap k v)) (key : k) (val' : v) : ()
    requires {[#"../hashmap.rs" 112 4 38] HashmapInv0.hashmap_inv ( * self)}
    ensures { [#"../hashmap.rs" 114 4 105] forall i : (k) . Map.get (Model0.model ( ^ self)) (Model1.model i) = (if Model1.model i = Model1.model key then
      Type.Core_Option_Option_Some val'
    else
      Map.get (Model0.model ( * self)) (Model1.model i)
    ) }
    ensures { [#"../hashmap.rs" 113 4 37] HashmapInv0.hashmap_inv ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.hashmap_myhashmap k v);
  var key_2 : k;
  var val'_3 : v;
  ghost var old_self_4 : borrowed (Type.hashmap_myhashmap k v);
  var _5 : ();
  var length_6 : usize;
  var _7 : Type.alloc_vec_vec (Type.hashmap_list (k, v)) (Type.alloc_alloc_global);
  var index_8 : usize;
  var _9 : usize;
  var _10 : uint64;
  var _11 : k;
  var _12 : usize;
  var _13 : bool;
  var l_14 : borrowed (Type.hashmap_list (k, v));
  var _15 : borrowed (Type.hashmap_list (k, v));
  var _16 : borrowed (Type.hashmap_list (k, v));
  var _17 : borrowed (Type.alloc_vec_vec (Type.hashmap_list (k, v)) (Type.alloc_alloc_global));
  var _18 : usize;
  ghost var old_l_19 : borrowed (Type.hashmap_list (k, v));
  var _20 : ();
  var _21 : ();
  var _22 : ();
  var _23 : isize;
  var k_24 : borrowed k;
  var v_25 : borrowed v;
  var tl_26 : borrowed (Type.hashmap_list (k, v));
  var tl_27 : borrowed (Type.hashmap_list (k, v));
  var _28 : ();
  var _29 : bool;
  var _30 : k;
  var _31 : k;
  var _32 : ();
  var _33 : v;
  var _34 : ();
  var _35 : borrowed (Type.hashmap_list (k, v));
  var _36 : borrowed (Type.hashmap_list (k, v));
  var _37 : ();
  var _38 : ();
  var _39 : ();
  var _40 : Type.hashmap_list (k, v);
  var _41 : (k, v);
  var _42 : k;
  var _43 : v;
  var _44 : Type.hashmap_list (k, v);
  var _45 : Type.hashmap_list (k, v);
  var _46 : ();
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    _5 <- ();
    old_self_4 <- ghost ([#"../hashmap.rs" 117 23 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_4 };
    _7 <- Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1);
    length_6 <- ([#"../hashmap.rs" 118 21 39] Len0.len _7);
    goto BB2
  }
  BB2 {
    _11 <- key_2;
    _10 <- ([#"../hashmap.rs" 119 27 37] Hash0.hash _11);
    goto BB3
  }
  BB3 {
    _9 <- UInt64.of_int (UInt64.to_int _10);
    _12 <- length_6;
    _13 <- ([#"../hashmap.rs" 119 27 55] _12 = (0 : usize));
    assert { not _13 };
    goto BB4
  }
  BB4 {
    index_8 <- ([#"../hashmap.rs" 119 27 55] _9 % _12);
    _17 <- borrow_mut (Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1));
    self_1 <- { self_1 with current = (let Type.Hashmap_MyHashMap a =  * self_1 in Type.Hashmap_MyHashMap ( ^ _17)) };
    assume { Resolve1.resolve self_1 };
    _18 <- index_8;
    _16 <- ([#"../hashmap.rs" 120 39 58] IndexMut0.index_mut _17 _18);
    goto BB5
  }
  BB5 {
    _15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _15) };
    assume { Resolve2.resolve _16 };
    l_14 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ l_14) };
    assume { Resolve2.resolve _15 };
    _20 <- ();
    old_l_19 <- ghost ([#"../hashmap.rs" 121 20 32] l_14);
    goto BB6
  }
  BB6 {
    assume { Resolve3.resolve old_l_19 };
    goto BB7
  }
  BB7 {
    invariant y { [#"../hashmap.rs" 123 8 51]  ^ old_self_4 =  ^ self_1 };
    invariant xx { [#"../hashmap.rs" 124 8 54] GoodBucket0.good_bucket ( * self_1) ( * l_14) (UInt64.to_int index_8) };
    invariant xx { [#"../hashmap.rs" 125 8 100] GoodBucket0.good_bucket ( * self_1) ( ^ l_14) (UInt64.to_int index_8) -> GoodBucket0.good_bucket ( * self_1) ( ^ old_l_19) (UInt64.to_int index_8) };
    invariant get_key { [#"../hashmap.rs" 126 8 95] Get0.get ( ^ l_14) (Model1.model key_2) = Type.Core_Option_Option_Some val'_3 -> Get0.get ( ^ old_l_19) (Model1.model key_2) = Type.Core_Option_Option_Some val'_3 };
    invariant get_rest { [#"../hashmap.rs" 127 8 108] forall i : (ModelTy0.modelTy) . Get0.get ( ^ l_14) i = Get0.get ( * l_14) i -> Get0.get ( ^ old_l_19) i = Get0.get ( * old_l_19) i };
    invariant no_double_binding { [#"../hashmap.rs" 128 8 65] NoDoubleBinding0.no_double_binding ( * l_14) };
    invariant no_double_binding_magic { [#"../hashmap.rs" 129 8 76] (forall i : (ModelTy0.modelTy) . Get0.get ( * l_14) i = Get0.get ( ^ l_14) i || i = Model1.model key_2) && NoDoubleBinding0.no_double_binding ( ^ l_14) -> NoDoubleBinding0.no_double_binding ( ^ old_l_19) };
    switch ( * l_14)
      | Type.Hashmap_List_Cons _ _ -> goto BB8
      | _ -> goto BB12
      end
  }
  BB8 {
    k_24 <- borrow_mut (let (a, _) = Type.hashmap_list_Cons_0 ( * l_14) in a);
    l_14 <- { l_14 with current = (let Type.Hashmap_List_Cons a b =  * l_14 in Type.Hashmap_List_Cons (let (a, b) = Type.hashmap_list_Cons_0 ( * l_14) in ( ^ k_24, b)) b) };
    v_25 <- borrow_mut (let (_, a) = Type.hashmap_list_Cons_0 ( * l_14) in a);
    l_14 <- { l_14 with current = (let Type.Hashmap_List_Cons a b =  * l_14 in Type.Hashmap_List_Cons (let (a, b) = Type.hashmap_list_Cons_0 ( * l_14) in (a,  ^ v_25)) b) };
    tl_26 <- borrow_mut (Type.hashmap_list_Cons_1 ( * l_14));
    l_14 <- { l_14 with current = (let Type.Hashmap_List_Cons a b =  * l_14 in Type.Hashmap_List_Cons a ( ^ tl_26)) };
    assume { Resolve2.resolve l_14 };
    assume { Resolve7.resolve tl_27 };
    tl_27 <- tl_26;
    _30 <-  * k_24;
    assume { Resolve8.resolve k_24 };
    _31 <- key_2;
    _29 <- ([#"../hashmap.rs" 133 15 24] Eq0.eq _30 _31);
    goto BB9
  }
  BB9 {
    switch (_29)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    assume { Resolve4.resolve key_2 };
    assume { Resolve7.resolve tl_27 };
    assume { Resolve5.resolve _33 };
    _33 <- val'_3;
    assume { Resolve5.resolve val'_3 };
    assume { Resolve5.resolve ( * v_25) };
    v_25 <- { v_25 with current = _33 };
    assume { Resolve9.resolve v_25 };
    assert { [#"../hashmap.rs" 135 16 54] HashmapInv0.hashmap_inv ( * self_1) };
    _34 <- ();
    _0 <- ();
    goto BB17
  }
  BB11 {
    assume { Resolve9.resolve v_25 };
    _28 <- ();
    _36 <- borrow_mut ( * tl_27);
    tl_27 <- { tl_27 with current = ( ^ _36) };
    assume { Resolve7.resolve tl_27 };
    _35 <- borrow_mut ( * _36);
    _36 <- { _36 with current = ( ^ _35) };
    assume { Resolve2.resolve _36 };
    assume { Resolve2.resolve l_14 };
    l_14 <- _35;
    _22 <- ();
    goto BB7
  }
  BB12 {
    _21 <- ();
    assume { Resolve4.resolve _42 };
    _42 <- key_2;
    assume { Resolve4.resolve key_2 };
    assume { Resolve5.resolve _43 };
    _43 <- val'_3;
    assume { Resolve5.resolve val'_3 };
    _41 <- (_42, _43);
    _45 <- Type.Hashmap_List_Nil;
    _44 <- _45;
    goto BB13
  }
  BB13 {
    _40 <- Type.Hashmap_List_Cons _41 _44;
    goto BB14
  }
  BB14 {
    assume { Resolve6.resolve ( * l_14) };
    l_14 <- { l_14 with current = _40 };
    goto BB15
  }
  BB15 {
    assume { Resolve2.resolve l_14 };
    goto BB16
  }
  BB16 {
    assert { [#"../hashmap.rs" 143 8 46] HashmapInv0.hashmap_inv ( * self_1) };
    _46 <- ();
    _0 <- ();
    goto BB17
  }
  BB17 {
    return _0
  }
  
end
module CreusotContracts_Logic_Int_Impl18_Model_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl18_Model
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : usize) : int =
    UInt64.to_int self
end
module CreusotContracts_Logic_Int_Impl18_ModelTy
  use mach.int.Int
  type modelTy  =
    int
end
module CreusotContracts_Logic_Int_Impl18
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Int_Impl18_Model as Model0
  clone CreusotContracts_Logic_Int_Impl18_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = usize,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = usize, type modelTy = ModelTy0.modelTy
end
module Hashmap_Impl2_HashLog_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function hash_log (self : usize) : int
end
module Hashmap_Impl2_HashLog
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function hash_log [#"../hashmap.rs" 67 4 28] (self : usize) : int =
    [#"../hashmap.rs" 67 4 28] UInt64.to_int self
end
module Hashmap_Impl2_Hash_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  clone Hashmap_Impl2_HashLog_Interface as HashLog0
  val hash [@cfg:stackify] (self : usize) : uint64
    ensures { [#"../hashmap.rs" 61 4 42] UInt64.to_int result = HashLog0.hash_log self }
    
end
module Hashmap_Impl2_Hash
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  clone Hashmap_Impl2_HashLog as HashLog0
  let rec cfg hash [@cfg:stackify] [#"../hashmap.rs" 62 4 25] (self : usize) : uint64
    ensures { [#"../hashmap.rs" 61 4 42] UInt64.to_int result = HashLog0.hash_log self }
    
   =
  var _0 : uint64;
  var self_1 : usize;
  var _2 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- self_1;
    _0 <- UInt64.of_int (UInt64.to_int _2);
    return _0
  }
  
end
module Hashmap_Impl2_HashLogEqModel_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  clone Hashmap_Impl2_HashLog_Interface as HashLog0
  function hash_log_eq_model (x : usize) (y : usize) : ()
end
module Hashmap_Impl2_HashLogEqModel
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  clone Hashmap_Impl2_HashLog_Interface as HashLog0
  function hash_log_eq_model [#"../hashmap.rs" 74 4 42] (x : usize) (y : usize) : () =
    [#"../hashmap.rs" 74 4 42] ()
  axiom hash_log_eq_model_spec : forall x : usize, y : usize . ([#"../hashmap.rs" 72 4 25] UInt64.to_int x = UInt64.to_int y) -> ([#"../hashmap.rs" 73 4 44] HashLog0.hash_log x = HashLog0.hash_log y)
end
module Hashmap_Impl2_HashLogEqModel_Impl
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  clone Hashmap_Impl2_HashLog as HashLog0
  let rec ghost function hash_log_eq_model (x : usize) (y : usize) : ()
    requires {[#"../hashmap.rs" 72 4 25] UInt64.to_int x = UInt64.to_int y}
    ensures { [#"../hashmap.rs" 73 4 44] HashLog0.hash_log x = HashLog0.hash_log y }
    
   =
    [#"../hashmap.rs" 74 4 42] ()
end
module Hashmap_Impl2
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Int_Impl18_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Int_Impl18_Model as Model0
  clone Hashmap_Impl2_HashLog as HashLog0
  clone Hashmap_Impl2_HashLogEqModel as HashLogEqModel0 with function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone Hashmap_Hash_HashLogEqModel_Interface as HashLogEqModel1 with type self = usize,
  function hash_log_eq_model = HashLogEqModel0.hash_log_eq_model, function Model0.model = Model0.model,
  function HashLog0.hash_log = HashLog0.hash_log, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone Hashmap_Hash_HashLog_Interface as HashLog1 with type self = usize, function hash_log = HashLog0.hash_log,
  axiom .
  clone Hashmap_Impl2_Hash_Interface as Hash0 with function HashLog0.hash_log = HashLog0.hash_log
  clone Hashmap_Hash_Hash_Interface as Hash1 with type self = usize, val hash = Hash0.hash,
  function HashLog0.hash_log = HashLog0.hash_log
end
module Hashmap_Main_Interface
  val main [@cfg:stackify] (_ : ()) : ()
end
module Hashmap_Main
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int64
  use Type
  clone Hashmap_Impl2_HashLog as HashLog0
  clone Hashmap_Impl2_HashLogEqModel as HashLogEqModel0 with function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.hashmap_list (usize, isize),
  type a = Type.alloc_alloc_global, axiom .
  clone Hashmap_Impl4_BucketIx as BucketIx0 with type k = usize, type v = isize,
  function HashLog0.hash_log = HashLog0.hash_log, function Model0.model = Model3.model
  clone Hashmap_Impl4_Bucket as Bucket0 with type k = usize, type v = isize, function Model0.model = Model3.model,
  function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone CreusotContracts_Logic_Int_Impl18_ModelTy as ModelTy0
  clone Hashmap_Impl3_ModelTy as ModelTy1 with type k = usize, type v = isize, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Int_Impl18_Model as Model1
  clone Hashmap_Impl1_Get as Get1 with type k = usize, type v = isize, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with type k = usize, type v = isize,
  function Model0.model = Model1.model, function Get0.get = Get1.get, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with type k = usize, type v = isize,
  function Model0.model = Model1.model, function Get0.get = Get1.get,
  function BucketIx0.bucket_ix = BucketIx0.bucket_ix, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with type k = usize, type v = isize,
  function Model0.model = Model3.model, predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
  predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  clone Hashmap_Impl3_Model as Model0 with type k = usize, type v = isize, function Model0.model = Model1.model,
  function Bucket0.bucket = Bucket0.bucket, function Get0.get = Get1.get, type ModelTy0.modelTy = ModelTy0.modelTy,
  axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.hashmap_myhashmap usize isize,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model0.model
  clone Hashmap_Impl5_Get_Interface as Get0 with type k = usize, type v = isize,
  predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv, function Model0.model = Model2.model,
  function Model1.model = Model1.model, type ModelTy1.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_Add_Interface as Add0 with type k = usize, type v = isize,
  predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv, function Model0.model = Model0.model,
  function Model1.model = Model1.model, function Bucket0.bucket = Bucket0.bucket, function Get0.get = Get1.get,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_New_Interface as New0 with type k = usize, type v = isize, function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
  function Bucket0.bucket = Bucket0.bucket, function Get0.get = Get1.get, type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg main [@cfg:stackify] [#"../hashmap.rs" 226 0 9] (_ : ()) : () =
  var _0 : ();
  var h1_1 : Type.hashmap_myhashmap usize isize;
  var h2_2 : Type.hashmap_myhashmap usize isize;
  var x_3 : Type.core_option_option isize;
  var _4 : Type.hashmap_myhashmap usize isize;
  var y_5 : Type.core_option_option isize;
  var _6 : Type.hashmap_myhashmap usize isize;
  var z_7 : Type.core_option_option isize;
  var _8 : Type.hashmap_myhashmap usize isize;
  var t_9 : Type.core_option_option isize;
  var _10 : Type.hashmap_myhashmap usize isize;
  var _11 : ();
  var _12 : borrowed (Type.hashmap_myhashmap usize isize);
  var _13 : Type.core_option_option isize;
  var _14 : Type.hashmap_myhashmap usize isize;
  var _15 : Type.core_option_option isize;
  var _16 : Type.hashmap_myhashmap usize isize;
  var _17 : Type.core_option_option isize;
  var _18 : Type.hashmap_myhashmap usize isize;
  var _19 : Type.core_option_option isize;
  var _20 : Type.hashmap_myhashmap usize isize;
  var _21 : ();
  var _22 : borrowed (Type.hashmap_myhashmap usize isize);
  var _23 : Type.core_option_option isize;
  var _24 : Type.hashmap_myhashmap usize isize;
  var _25 : Type.core_option_option isize;
  var _26 : Type.hashmap_myhashmap usize isize;
  var _27 : Type.core_option_option isize;
  var _28 : Type.hashmap_myhashmap usize isize;
  var _29 : Type.core_option_option isize;
  var _30 : Type.hashmap_myhashmap usize isize;
  {
    goto BB0
  }
  BB0 {
    h1_1 <- ([#"../hashmap.rs" 233 42 60] New0.new (17 : usize));
    goto BB1
  }
  BB1 {
    h2_2 <- ([#"../hashmap.rs" 234 42 60] New0.new (42 : usize));
    goto BB2
  }
  BB2 {
    _4 <- h1_1;
    x_3 <- ([#"../hashmap.rs" 235 16 25] Get0.get _4 (1 : usize));
    goto BB3
  }
  BB3 {
    _6 <- h1_1;
    y_5 <- ([#"../hashmap.rs" 236 16 25] Get0.get _6 (2 : usize));
    goto BB4
  }
  BB4 {
    _8 <- h2_2;
    z_7 <- ([#"../hashmap.rs" 237 16 25] Get0.get _8 (1 : usize));
    goto BB5
  }
  BB5 {
    _10 <- h2_2;
    t_9 <- ([#"../hashmap.rs" 238 16 25] Get0.get _10 (2 : usize));
    goto BB6
  }
  BB6 {
    _12 <- borrow_mut h1_1;
    h1_1 <-  ^ _12;
    _11 <- ([#"../hashmap.rs" 242 4 17] Add0.add _12 (1 : usize) (17 : isize));
    goto BB7
  }
  BB7 {
    _14 <- h1_1;
    _13 <- ([#"../hashmap.rs" 243 8 17] Get0.get _14 (1 : usize));
    goto BB8
  }
  BB8 {
    x_3 <- _13;
    _16 <- h1_1;
    _15 <- ([#"../hashmap.rs" 244 8 17] Get0.get _16 (2 : usize));
    goto BB9
  }
  BB9 {
    y_5 <- _15;
    _18 <- h2_2;
    _17 <- ([#"../hashmap.rs" 245 8 17] Get0.get _18 (1 : usize));
    goto BB10
  }
  BB10 {
    z_7 <- _17;
    _20 <- h2_2;
    _19 <- ([#"../hashmap.rs" 246 8 17] Get0.get _20 (2 : usize));
    goto BB11
  }
  BB11 {
    t_9 <- _19;
    _22 <- borrow_mut h2_2;
    h2_2 <-  ^ _22;
    _21 <- ([#"../hashmap.rs" 249 4 17] Add0.add _22 (1 : usize) (42 : isize));
    goto BB12
  }
  BB12 {
    _24 <- h1_1;
    _23 <- ([#"../hashmap.rs" 250 8 17] Get0.get _24 (1 : usize));
    goto BB13
  }
  BB13 {
    x_3 <- _23;
    _26 <- h1_1;
    _25 <- ([#"../hashmap.rs" 251 8 17] Get0.get _26 (2 : usize));
    goto BB14
  }
  BB14 {
    y_5 <- _25;
    _28 <- h2_2;
    _27 <- ([#"../hashmap.rs" 252 8 17] Get0.get _28 (1 : usize));
    goto BB15
  }
  BB15 {
    z_7 <- _27;
    _30 <- h2_2;
    _29 <- ([#"../hashmap.rs" 253 8 17] Get0.get _30 (2 : usize));
    goto BB16
  }
  BB16 {
    t_9 <- _29;
    _0 <- ();
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Hashmap_Impl0_Clone_Interface
  type t
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.hashmap_list t) : Type.hashmap_list t
    ensures { [#"../hashmap.rs" 13 4 31] result = self }
    
end
module Hashmap_Impl0_Clone
  type t
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.hashmap_list t) : Type.hashmap_list t
    ensures { [#"../hashmap.rs" 13 4 31] result = self }
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = borrowed t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module Core_Mem_Replace_Interface
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module Core_Mem_Replace
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module Hashmap_Impl5_Resize_Interface
  type k
  type v
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use map.Map
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone Hashmap_Impl1_Get_Interface as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model2 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl4_Bucket_Interface as Bucket0 with type k = k, type v = v
  clone Hashmap_Impl3_Model_Interface as Model1 with type k = k, type v = v, function Model0.model = Model2.model,
  function Bucket0.bucket = Bucket0.bucket, function Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy,
  axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.hashmap_list (k, v),
  type a = Type.alloc_alloc_global, axiom .
  clone Hashmap_Impl5_HashmapInv_Interface as HashmapInv0 with type k = k, type v = v
  val resize [@cfg:stackify] (self : borrowed (Type.hashmap_myhashmap k v)) : ()
    requires {[#"../hashmap.rs" 167 4 38] HashmapInv0.hashmap_inv ( * self)}
    requires {[#"../hashmap.rs" 166 4 45] Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets ( * self))) < 1000}
    ensures { [#"../hashmap.rs" 169 4 66] forall k : (k) . Map.get (Model1.model ( ^ self)) (Model2.model k) = Map.get (Model1.model ( * self)) (Model2.model k) }
    ensures { [#"../hashmap.rs" 168 4 37] HashmapInv0.hashmap_inv ( ^ self) }
    
end
module Hashmap_Impl5_Resize
  type k
  type v
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use map.Map
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  clone Hashmap_Hash_HashLog as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone Hashmap_Impl3_ModelTy as ModelTy1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Hash_HashLogEqModel as HashLogEqModel0 with type self = k, function Model0.model = Model2.model,
  function HashLog0.hash_log = HashLog0.hash_log, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone Hashmap_Impl1_Get as Get0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model2.model
  clone Hashmap_Impl1_NoDoubleBinding as NoDoubleBinding0 with type k = k, type v = v,
  function Model0.model = Model2.model, function Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.hashmap_list (k, v),
  type a = Type.alloc_alloc_global, axiom .
  clone Hashmap_Impl4_BucketIx as BucketIx0 with type k = k, type v = v, function HashLog0.hash_log = HashLog0.hash_log,
  function Model0.model = Model0.model
  clone Hashmap_Impl4_Bucket as Bucket0 with type k = k, type v = v, function Model0.model = Model0.model,
  function BucketIx0.bucket_ix = BucketIx0.bucket_ix
  clone Hashmap_Impl3_Model as Model1 with type k = k, type v = v, function Model0.model = Model2.model,
  function Bucket0.bucket = Bucket0.bucket, function Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy,
  axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = Type.hashmap_myhashmap k v,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model1.model
  clone Hashmap_Impl5_GoodBucket as GoodBucket0 with type k = k, type v = v, function Model0.model = Model2.model,
  function Get0.get = Get0.get, function BucketIx0.bucket_ix = BucketIx0.bucket_ix,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_HashmapInv as HashmapInv0 with type k = k, type v = v, function Model0.model = Model0.model,
  predicate GoodBucket0.good_bucket = GoodBucket0.good_bucket,
  predicate NoDoubleBinding0.no_double_binding = NoDoubleBinding0.no_double_binding
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.hashmap_myhashmap k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.hashmap_myhashmap k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.hashmap_list (k, v)
  clone Core_Mem_Replace_Interface as Replace0 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy2 with type t = Type.hashmap_list (k, v)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.hashmap_myhashmap k v)
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.hashmap_list (k, v), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.hashmap_list (k, v), type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  clone Hashmap_Impl5_Add_Interface as Add0 with type k = k, type v = v,
  predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv, function Model0.model = Model1.model,
  function Model1.model = Model2.model, function Bucket0.bucket = Bucket0.bucket, function Get0.get = Get0.get,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl5_New_Interface as New0 with type k = k, type v = v, function Model0.model = Model1.model,
  function Model1.model = Model2.model, predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
  function Bucket0.bucket = Bucket0.bucket, function Get0.get = Get0.get, type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg resize [@cfg:stackify] [#"../hashmap.rs" 170 4 24] (self : borrowed (Type.hashmap_myhashmap k v)) : ()
    requires {[#"../hashmap.rs" 167 4 38] HashmapInv0.hashmap_inv ( * self)}
    requires {[#"../hashmap.rs" 166 4 45] Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets ( * self))) < 1000}
    ensures { [#"../hashmap.rs" 169 4 66] forall k : (k) . Map.get (Model1.model ( ^ self)) (Model2.model k) = Map.get (Model1.model ( * self)) (Model2.model k) }
    ensures { [#"../hashmap.rs" 168 4 37] HashmapInv0.hashmap_inv ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.hashmap_myhashmap k v);
  ghost var old_self_2 : borrowed (Type.hashmap_myhashmap k v);
  var _3 : ();
  var new_4 : Type.hashmap_myhashmap k v;
  var _5 : usize;
  var _6 : usize;
  var _7 : Type.alloc_vec_vec (Type.hashmap_list (k, v)) (Type.alloc_alloc_global);
  var i_8 : usize;
  var _9 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : Type.alloc_vec_vec (Type.hashmap_list (k, v)) (Type.alloc_alloc_global);
  var l_15 : Type.hashmap_list (k, v);
  var _16 : borrowed (Type.hashmap_list (k, v));
  var _17 : borrowed (Type.hashmap_list (k, v));
  var _18 : borrowed (Type.hashmap_list (k, v));
  var _19 : borrowed (Type.alloc_vec_vec (Type.hashmap_list (k, v)) (Type.alloc_alloc_global));
  var _20 : usize;
  var _21 : Type.hashmap_list (k, v);
  var _22 : ();
  var _23 : isize;
  var k_24 : k;
  var v_25 : v;
  var tl_26 : Type.hashmap_list (k, v);
  var _27 : ();
  var _28 : borrowed (Type.hashmap_myhashmap k v);
  var _29 : k;
  var _30 : v;
  var _31 : Type.hashmap_list (k, v);
  var _32 : ();
  var _33 : ();
  var _34 : ();
  var _35 : ();
  var _36 : ();
  var _37 : ();
  var _38 : ();
  var _39 : Type.hashmap_myhashmap k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../hashmap.rs" 171 23 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _7 <- Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1);
    _6 <- ([#"../hashmap.rs" 172 32 50] Len0.len _7);
    goto BB2
  }
  BB2 {
    _5 <- ([#"../hashmap.rs" 172 32 54] _6 * (2 : usize));
    new_4 <- ([#"../hashmap.rs" 172 22 55] New0.new _5);
    goto BB3
  }
  BB3 {
    i_8 <- (0 : usize);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant seen { [#"../hashmap.rs" 175 8 111] forall k : (k) . BucketIx0.bucket_ix ( * old_self_2) k < UInt64.to_int i_8 -> Map.get (Model3.model old_self_2) (Model2.model k) = Map.get (Model1.model new_4) (Model2.model k) };
    invariant unseen { [#"../hashmap.rs" 176 8 10] forall k : (k) . UInt64.to_int i_8 <= BucketIx0.bucket_ix ( * old_self_2) k && BucketIx0.bucket_ix ( * old_self_2) k <= Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets ( * old_self_2))) -> Map.get (Model1.model new_4) (Model2.model k) = Type.Core_Option_Option_None };
    invariant rest { [#"../hashmap.rs" 180 8 133] forall j : (int) . UInt64.to_int i_8 <= j && j < Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets ( * old_self_2))) -> Seq.get (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1))) j = Seq.get (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets ( * old_self_2))) j };
    invariant a { [#"../hashmap.rs" 181 8 42] HashmapInv0.hashmap_inv new_4 };
    invariant p { [#"../hashmap.rs" 182 8 51]  ^ old_self_2 =  ^ self_1 };
    invariant l { [#"../hashmap.rs" 183 8 75] Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets ( * old_self_2))) = Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1))) };
    invariant z { [#"../hashmap.rs" 184 8 52] UInt64.to_int i_8 <= Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1))) };
    _12 <- i_8;
    _14 <- Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1);
    _13 <- ([#"../hashmap.rs" 185 18 36] Len0.len _14);
    goto BB7
  }
  BB7 {
    _11 <- ([#"../hashmap.rs" 185 14 36] _12 < _13);
    switch (_11)
      | False -> goto BB25
      | _ -> goto BB8
      end
  }
  BB8 {
    _19 <- borrow_mut (Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1));
    self_1 <- { self_1 with current = (let Type.Hashmap_MyHashMap a =  * self_1 in Type.Hashmap_MyHashMap ( ^ _19)) };
    _20 <- i_8;
    _18 <- ([#"../hashmap.rs" 186 56 71] IndexMut0.index_mut _19 _20);
    goto BB9
  }
  BB9 {
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    assume { Resolve1.resolve _18 };
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _21 <- Type.Hashmap_List_Nil;
    l_15 <- ([#"../hashmap.rs" 186 33 83] Replace0.replace _16 _21);
    goto BB10
  }
  BB10 {
    assume { Resolve1.resolve _17 };
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    invariant a { [#"../hashmap.rs" 188 12 46] HashmapInv0.hashmap_inv new_4 };
    invariant x { [#"../hashmap.rs" 189 12 114] forall k : (k) . BucketIx0.bucket_ix ( * old_self_2) k < UInt64.to_int i_8 -> Map.get (Model3.model old_self_2) (Model2.model k) = Map.get (Model1.model new_4) (Model2.model k) };
    invariant x { [#"../hashmap.rs" 190 12 14] forall k : (k) . UInt64.to_int i_8 < BucketIx0.bucket_ix ( * old_self_2) k && BucketIx0.bucket_ix ( * old_self_2) k <= Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets ( * old_self_2))) -> Map.get (Model1.model new_4) (Model2.model k) = Type.Core_Option_Option_None };
    invariant zzz { [#"../hashmap.rs" 193 12 119] forall k : (k) . BucketIx0.bucket_ix ( * old_self_2) k = UInt64.to_int i_8 -> Map.get (Model3.model old_self_2) (Model2.model k) = match (Get0.get l_15 (Model2.model k)) with
      | Type.Core_Option_Option_None -> Map.get (Model1.model new_4) (Model2.model k)
      | Type.Core_Option_Option_Some v -> Type.Core_Option_Option_Some v
      end };
    invariant l_no_double_binding { [#"../hashmap.rs" 195 12 68] NoDoubleBinding0.no_double_binding l_15 };
    invariant x { [#"../hashmap.rs" 196 12 56] GoodBucket0.good_bucket ( * old_self_2) l_15 (UInt64.to_int i_8) };
    switch (l_15)
      | Type.Hashmap_List_Cons _ _ -> goto BB17
      | _ -> goto BB21
      end
  }
  BB17 {
    assume { Resolve3.resolve k_24 };
    k_24 <- (let (a, _) = Type.hashmap_list_Cons_0 l_15 in a);
    assume { Resolve4.resolve v_25 };
    v_25 <- (let (_, a) = Type.hashmap_list_Cons_0 l_15 in a);
    assume { Resolve5.resolve tl_26 };
    tl_26 <- Type.hashmap_list_Cons_1 l_15;
    _28 <- borrow_mut new_4;
    new_4 <-  ^ _28;
    assume { Resolve3.resolve _29 };
    _29 <- k_24;
    assume { Resolve3.resolve k_24 };
    assume { Resolve4.resolve _30 };
    _30 <- v_25;
    assume { Resolve4.resolve v_25 };
    _27 <- ([#"../hashmap.rs" 198 16 29] Add0.add _28 _29 _30);
    goto BB18
  }
  BB18 {
    assume { Resolve2.resolve _31 };
    _31 <- tl_26;
    assume { Resolve2.resolve l_15 };
    l_15 <- _31;
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    _10 <- ();
    goto BB22
  }
  BB21 {
    _22 <- ();
    assert { [#"../hashmap.rs" 201 12 121] forall v : (v) . forall k : (k) . BucketIx0.bucket_ix ( * old_self_2) k = UInt64.to_int i_8 -> Map.get (Model3.model old_self_2) (Model2.model k) = Map.get (Model1.model new_4) (Model2.model k) };
    goto BB23
  }
  BB22 {
    assume { Resolve5.resolve tl_26 };
    goto BB16
  }
  BB23 {
    _35 <- ();
    i_8 <- ([#"../hashmap.rs" 202 12 18] i_8 + (1 : usize));
    _10 <- ();
    goto BB24
  }
  BB24 {
    assume { Resolve2.resolve l_15 };
    goto BB6
  }
  BB25 {
    _9 <- ();
    assume { Resolve6.resolve _39 };
    _39 <- new_4;
    assume { Resolve6.resolve ( * self_1) };
    self_1 <- { self_1 with current = _39 };
    goto BB26
  }
  BB26 {
    assume { Resolve7.resolve self_1 };
    goto BB27
  }
  BB27 {
    _0 <- ();
    goto BB28
  }
  BB28 {
    return _0
  }
  
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Hashmap_Impl0
  type t
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.hashmap_list t
  clone Hashmap_Impl0_Clone_Interface as Clone0 with type t = t
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.hashmap_list t, val clone' = Clone0.clone'
end
