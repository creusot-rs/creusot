<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.12.4" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.4.3" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="hillel.mlcfg"/>
<theory name="Hillel_RightPad" proved="true">
 <goal name="right_pad&#39;vc" expl="VC for right_pad" proved="true">
 <proof prover="4"><result status="valid" time="0.130000" steps="966"/></proof>
 </goal>
</theory>
<theory name="Hillel_LeftPad" proved="true">
 <goal name="left_pad&#39;vc" expl="VC for left_pad" proved="true">
 <proof prover="4"><result status="valid" time="0.179477" steps="3197"/></proof>
 </goal>
</theory>
<theory name="Hillel_SubsetPush_Impl" proved="true">
 <goal name="vc_subset_push" proved="true">
 <proof prover="4"><result status="valid" time="0.166910" steps="8290"/></proof>
 </goal>
</theory>
<theory name="Hillel_InsertUnique" proved="true">
 <goal name="insert_unique&#39;vc" expl="VC for insert_unique" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="insert_unique&#39;vc.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="52"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.024412" steps="18"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.017002" steps="22"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.054720" steps="8571"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.016713" steps="26"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.000000" steps="28"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.6" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.021165" steps="30"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.015252" steps="40"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="42"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="78"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="50"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.016424" steps="62"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.12" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.060000" steps="802"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.13" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.019755" steps="78"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.14" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="78"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.012934" steps="80"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.018021" steps="62"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.028132" steps="77"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.019742" steps="83"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.19" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.090000" steps="1625"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.20" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.020540" steps="91"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.21" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.010465" steps="93"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.016765" steps="95"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.024661" steps="96"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="101"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="706"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.26" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.129146" steps="832"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.016069" steps="95"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.012416" steps="96"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.012497" steps="100"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.010016" steps="102"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.31" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.067612" steps="1479"/></proof>
  </goal>
  <goal name="insert_unique&#39;vc.32" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="insert_unique&#39;vc.32.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.107459" steps="2588"/></proof>
   </goal>
   <goal name="insert_unique&#39;vc.32.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.008016" steps="109"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert_unique&#39;vc.33" expl="postcondition" proved="true">
  <transf name="remove" proved="true" arg1="abs,uint64&#39;maxInt,uint64&#39;minInt,uint64&#39;eq,max_uint64,length1,radix,to_int,min_unsigned,in_bounds,singleton,cons,(++),get_id,borrow_logic,slice&#39;eq,id1,max0,invariant8,produces_trans0,produces_refl0,is_unique0,deep_model4,resolve5,into_iter_pre0,subset_push0,Abs_le,Abs_pos,Div_mod,Div_bound,Mod_bound,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,uint64&#39;inj,to_int_in_bounds,extensionality,zero_unsigned_is_zero,length_nonnegative,(==)&#39;spec&#39;0,set&#39;spec,set&#39;spec&#39;0,set&#39;spec&#39;1,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,singleton&#39;spec&#39;0,cons&#39;spec,cons&#39;spec&#39;0,cons&#39;spec&#39;1,snoc&#39;spec&#39;0,([..])&#39;spec,([..])&#39;spec&#39;0,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,inner_spec,slice&#39;invariant,slice&#39;inj,slice_ext,length&#39;def,get&#39;def,some_0&#39;def,inv15,inv14,inv13,inv12,inv111,inv10,inv9,shallow_model3_spec,inv7,inv6,inv5,inv4,shallow_model5_spec,produces_trans0_spec,produces_refl0_spec,inv3,inv2,inv0,subset_push0_spec,Requires2,Requires1,Requires,H9,Assume5,H8,Assert2,Assume4,Ensures8,Assert1,Assume3,Ensures5,Assume2,H6,Assert,Assume1,H4,H2,Ensures3,H1,Ensures1,Assume,Ensures">
   <goal name="insert_unique&#39;vc.33.0" expl="postcondition" proved="true">
   <proof prover="1" timelimit="0.037067"><result status="valid" time="0.052825" steps="178057"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert_unique&#39;vc.34" expl="postcondition" proved="true">
  <transf name="remove" proved="true" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),abs,uint64&#39;maxInt,uint64&#39;minInt,max_uint64,length1,radix,to_int,min_unsigned,in_bounds,singleton,cons,(++),id,mAX&#39;5,index_logic3,shallow_model6,produces,produces_trans,produces_refl,is_unique,deep_model2,deep_model1,resolve5,shallow_model1,completed,index_logic,into_iter_post,into_iter_pre,shallow_model,subset_push,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Div_bound,Mod_bound,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,to_int_in_bounds,extensionality,zero_unsigned_is_zero,(==)&#39;spec,(==)&#39;spec&#39;0,create&#39;spec&#39;0,empty&#39;def,set&#39;spec,set&#39;spec&#39;0,set&#39;spec&#39;1,([&lt;-])&#39;def,singleton&#39;spec,singleton&#39;spec&#39;0,cons&#39;spec,cons&#39;spec&#39;0,cons&#39;spec&#39;1,([..])&#39;spec,([..])&#39;spec&#39;0,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,(++)&#39;spec&#39;0,(++)&#39;spec&#39;1,new_spec,slice&#39;invariant,slice_ext,length&#39;def,get&#39;def,some_0&#39;def,inv_trivial15,inv_trivial14,inv_trivial13,inv_trivial12,inv_trivial11,inv_trivial10,inv_trivial9,inv_trivial7,inv_trivial6,inv_trivial5,inv_trivial4,shallow_model_spec1,to_ref_seq_spec,produces_trans_spec,produces_refl_spec,inv_trivial3,inv_trivial2,inv_trivial1,inv_trivial,shallow_model_spec,subset_push_spec">
   <goal name="insert_unique&#39;vc.34.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.027065" steps="146570"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert_unique&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.163990" steps="23952"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Hillel_Unique" proved="true">
 <goal name="unique&#39;vc" expl="VC for unique" proved="true">
 <transf name="remove" proved="true" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),abs,uint64&#39;maxInt,uint64&#39;minInt,max_uint64,length1,radix,min_unsigned,in_bounds,singleton,cons,snoc,(++),mAX&#39;7,index_logic2,resolve4,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Div_bound,Mod_bound,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,to_int_in_bounds,extensionality,zero_unsigned_is_zero,set&#39;spec,set&#39;spec&#39;0,set&#39;spec&#39;1,([&lt;-])&#39;def,singleton&#39;spec,singleton&#39;spec&#39;0,cons&#39;spec,cons&#39;spec&#39;0,cons&#39;spec&#39;1,([..])&#39;spec,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,(++)&#39;spec&#39;0,(++)&#39;spec&#39;1,inner_spec,slice&#39;invariant,slice_ext">
  <goal name="unique&#39;vc.0" expl="VC for unique" proved="true">
  <proof prover="1"><result status="valid" time="0.165112" steps="629781"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Hillel_SumRange_Impl" proved="true">
 <goal name="vc_sum_range" proved="true">
 <proof prover="4"><result status="valid" time="0.010000" steps="14"/></proof>
 </goal>
</theory>
<theory name="Hillel_SumRangeSplit_Impl" proved="true">
 <goal name="vc_sum_range_split" proved="true">
 <proof prover="4"><result status="valid" time="0.010000" steps="177"/></proof>
 </goal>
</theory>
<theory name="Hillel_Score_Impl" proved="true">
 <goal name="vc_score" proved="true">
 <proof prover="0"><result status="valid" time="0.080000" steps="8131"/></proof>
 </goal>
</theory>
<theory name="Hillel_Fulcrum" proved="true">
 <goal name="fulcrum&#39;vc" expl="VC for fulcrum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="fulcrum&#39;vc.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="12"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1" timelimit="1"><result status="valid" time="0.101620" steps="80616"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="28"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="114"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="104"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="52"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.6" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.030000" steps="793"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.7" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.015936" steps="73"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.8" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="54"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.9" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.020505" steps="82"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="62"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="98"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.12" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="223"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.13" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="112"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.14" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="127"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.15" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="136"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.16" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="159"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.17" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.023869" steps="137"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.020000" steps="141"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.050000" steps="676"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.20" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.020000" steps="175"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.21" expl="index in bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.190000" steps="29019"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.22" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.020000" steps="170"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.23" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.422001" steps="55615"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="169"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.203075" steps="23992"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.26" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="fulcrum&#39;vc.26.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fulcrum&#39;vc.26.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="1" memlimit="2000"><result status="valid" time="0.924004" steps="3339754"/></proof>
    </goal>
    <goal name="fulcrum&#39;vc.26.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="2"><result status="valid" time="2.267951" steps="462387"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fulcrum&#39;vc.27" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.511288" steps="70981"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.28" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.276216" steps="31090"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.29" expl="loop invariant preservation" proved="true">
  <transf name="remove" proved="true" arg1="singleton,snoc">
   <goal name="fulcrum&#39;vc.29.0" expl="loop invariant preservation" proved="true">
   <proof prover="1" memlimit="2000"><result status="valid" time="0.194523" steps="1102561"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="fulcrum&#39;vc.30" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.493091" steps="1939288"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.31" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.967856" steps="59038"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.32" expl="loop invariant preservation" proved="true">
  <proof prover="1" timelimit="1"><result status="valid" time="0.047097" steps="94492"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.33" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.060296" steps="14309"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.34" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.328946" steps="751019"/></proof>
  </goal>
  <goal name="fulcrum&#39;vc.35" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.203116" steps="23459"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
