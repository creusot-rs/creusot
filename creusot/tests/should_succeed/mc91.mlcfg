
module Mc91_Mc91_Interface
  use prelude.Int
  use prelude.UInt32
  val mc91 [#"../mc91.rs" 7 0 7 26] (x : uint32) : uint32
    ensures { [#"../mc91.rs" 5 0 6 40] x <= (100 : uint32) -> result = (91 : uint32) /\ x > (100 : uint32) -> result = x - (10 : uint32) }
    
end
module Mc91_Mc91
  use prelude.Int
  use prelude.UInt32
  let rec cfg mc91 [#"../mc91.rs" 7 0 7 26] [@cfg:stackify] [@cfg:subregion_analysis] (x : uint32) : uint32
    ensures { [#"../mc91.rs" 5 0 6 40] x <= (100 : uint32) -> result = (91 : uint32) /\ x > (100 : uint32) -> result = x - (10 : uint32) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x : uint32 = x;
  {
    goto BB0
  }
  BB0 {
    switch ([#"../mc91.rs" 8 7 8 14] x > ([#"../mc91.rs" 8 11 8 14] (100 : uint32)))
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    _0 <- ([#"../mc91.rs" 9 8 9 14] x - ([#"../mc91.rs" 9 12 9 14] (10 : uint32)));
    goto BB5
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _0 <- ([#"../mc91.rs" 11 8 11 26] mc91 ([#"../mc91.rs" 11 13 11 25] mc91 ([#"../mc91.rs" 11 18 11 24] x + ([#"../mc91.rs" 11 22 11 24] (11 : uint32)))));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
