module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  type replace_something  = 
    | Replace_Something uint32 (core_option_option (replace_something))
    
end
module Replace_Test_Interface
  use Type
  val test (a : Type.replace_something) (b : Type.replace_something) : ()
end
module Replace_Test
  use Type
  let rec cfg test (a : Type.replace_something) (b : Type.replace_something) : () = 
  var _0 : ();
  var a_1 : Type.replace_something;
  var b_2 : Type.replace_something;
  var _3 : Type.replace_something;
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    assume { (fun x -> true) _3 };
    _3 <- b_2;
    assume { (fun x -> true) a_1 };
    a_1 <- _3;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _0 <- ();
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    assume { (fun x -> true) a_1 };
    return _0
  }
  
end
module Replace_Main_Interface
  val main () : ()
end
module Replace_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
