
module Modules_Nested_Nested_Type
  type t_nested  =
    | C_Test
    
end
module Modules_Nested_Impl0_Resolve_Stub
  use Modules_Nested_Nested_Type as Modules_Nested_Nested_Type
  val ghost predicate resolve (self : Modules_Nested_Nested_Type.t_nested)
end
module Modules_Nested_Impl0_Resolve_Interface
  use Modules_Nested_Nested_Type as Modules_Nested_Nested_Type
  val ghost predicate resolve (self : Modules_Nested_Nested_Type.t_nested)
end
module Modules_Nested_Impl0_Resolve
  use Modules_Nested_Nested_Type as Modules_Nested_Nested_Type
  let rec ghost predicate resolve [#"../modules.rs" 14 8 14 32] (self : Modules_Nested_Nested_Type.t_nested)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../modules.rs" 15 12 15 16] true
end
module Modules_Nested_InnerFunc_Interface
  val inner_func [@cfg:stackify] (_ : ()) : bool
    ensures { [#"../modules.rs" 19 14 19 28] result = true }
    
end
module Modules_Nested_InnerFunc
  use Modules_Nested_Nested_Type as Modules_Nested_Nested_Type
  clone Modules_Nested_Impl0_Resolve as Resolve0
  let rec cfg inner_func [@cfg:stackify] [#"../modules.rs" 20 4 20 31] (_ : ()) : bool
    ensures { [#"../modules.rs" 19 14 19 28] result = true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var _2 : Modules_Nested_Nested_Type.t_nested;
  {
    goto BB0
  }
  BB0 {
    _2 <- Modules_Nested_Nested_Type.C_Test;
    assume { Resolve0.resolve _2 };
    _0 <- true;
    return _0
  }
  
end
module Modules_Nested_Further_Another_Interface
  val another [@cfg:stackify] (_ : ()) : bool
end
module Modules_Nested_Further_Another
  let rec cfg another [@cfg:stackify] [#"../modules.rs" 26 8 26 32] (_ : ()) : bool = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- false;
    return _0
  }
  
end
module Modules_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module Modules_F
  clone Modules_Nested_Further_Another_Interface as Another0
  clone Modules_Nested_InnerFunc_Interface as InnerFunc0
  let rec cfg f [@cfg:stackify] [#"../modules.rs" 32 0 32 10] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : bool;
  var _2 : bool;
  {
    goto BB0
  }
  BB0 {
    _1 <- ([#"../modules.rs" 33 4 33 24] InnerFunc0.inner_func ());
    goto BB1
  }
  BB1 {
    _2 <- ([#"../modules.rs" 35 4 35 13] Another0.another ());
    goto BB2
  }
  BB2 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module Modules_Nested_Impl0
  use Modules_Nested_Nested_Type as Modules_Nested_Nested_Type
  clone Modules_Nested_Impl0_Resolve as Resolve0
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = Modules_Nested_Nested_Type.t_nested,
    val resolve = Resolve0.resolve
end
