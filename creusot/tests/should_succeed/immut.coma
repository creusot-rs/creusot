
module Immut_F
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.UInt32
  predicate resolve'0 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [#"../immut.rs" 4 16 4 18] (10 : uint32) ] s1
      | s1 = Borrow.borrow_mut <uint32> {a} (fun (_ret':borrowed uint32) ->  [ &b <- _ret' ]  [ &a <-  ^ b ] s2)
      | s2 =  [ &_c <-  * b ] s3
      | s3 =  [ &_0 <- [#"../immut.rs" 3 11 7 1] () ] s4
      | s4 = -{resolve'0 b}- s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & a : uint32 = any_l () : uint32
    | & b : borrowed uint32 = any_l () : borrowed uint32
    | & _c : uint32 = any_l () : uint32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
