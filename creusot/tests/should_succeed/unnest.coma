module M_unnest__unnest [#"unnest.rs" 8 0 8 64]
  let%span sunnest0 = "unnest.rs" 5 10 5 24
  let%span sunnest1 = "unnest.rs" 6 10 6 24
  let%span sunnest2 = "unnest.rs" 7 10 7 20
  let%span sresolve3 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'3 (self : borrowed (borrowed uint32)) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (borrowed uint32)) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed uint32) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed uint32) =
    resolve'2 _1
  
  meta "compute_max_steps" 1000000
  
  let rec unnest (x:borrowed (borrowed uint32)) (return'  (ret:borrowed uint32))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <uint32> {(x.current).current}
          (fun (_ret':borrowed uint32) ->
             [ &_2 <- _ret' ] 
             [ &x <- { x with current = { x.current with current = _ret'.final ; } ; } ] 
            s1)
      | s1 = Borrow.borrow_final <uint32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed uint32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final ; } ] s2)
      | s2 = -{resolve'0 _2}- s3
      | s3 = -{resolve'1 x}- s4
      | s4 = return' {_0} ]
       ]
    ) [ & _0 : borrowed uint32 = any_l () | & x : borrowed (borrowed uint32) = x | & _2 : borrowed uint32 = any_l () ] 
    [ return' (result:borrowed uint32)-> {[@expl:postcondition] [%#sunnest2] (x.current).final = (x.final).final}
      {[@expl:postcondition] [%#sunnest1] result.final = (x.final).current}
      {[@expl:postcondition] [%#sunnest0] result.current = (x.current).current}
      (! return' {result}) ]
    
end
