
module T_core__cmp__Ordering
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Less (input:t_Ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec v_Equal (input:t_Ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec v_Greater (input:t_Ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module M_constrained_types__uses_concrete_instance
  let%span span0 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span2 = "../../../../creusot-contracts/src/logic/ord.rs" 240 20 240 67
  
  let%span span3 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span4 = "../../../../creusot-contracts/src/std/tuples.rs" 29 28 29 57
  
  let%span span5 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "../constrained_types.rs" 9 18 9 68
  
  use prelude.prelude.UInt32
  
  predicate invariant'1 (self : (uint32, uint32)) =
    [%#span0] true
  
  predicate inv'1 (_1 : (uint32, uint32))
  
  axiom inv'1 : forall x : (uint32, uint32) . inv'1 x = true
  
  use prelude.prelude.Int
  
  function eq_cmp'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  
  function antisym2'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  
  function antisym1'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  
  use T_core__cmp__Ordering as Ordering'0
  
  function trans'0 (_1 : (int, int)) (_2 : (int, int)) (_3 : (int, int)) (_4 : Ordering'0.t_Ordering) : ()
  
  function refl'0 (_1 : (int, int)) : ()
  
  function cmp_gt_log'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  
  function cmp_ge_log'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  
  function cmp_lt_log'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  
  function cmp_le_log'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : (uint32, uint32)) =
    [%#span1] inv'1 self
  
  predicate inv'0 (_1 : (uint32, uint32))
  
  axiom inv'0 : forall x : (uint32, uint32) . inv'0 x = true
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  use int.Int
  
  function lt_log'0 (self : (int, int)) (o : (int, int)) : bool =
    [%#span2] (let (a, _) = self in a) = (let (a, _) = o in a) /\ (let (_, a) = self in a) < (let (_, a) = o in a)
    \/ (let (a, _) = self in a) < (let (a, _) = o in a)
  
  use prelude.prelude.UInt32
  
  function deep_model'2 (self : uint32) : int =
    [%#span3] UInt32.to_int self
  
  function deep_model'1 (self : (uint32, uint32)) : (int, int) =
    [%#span4] (deep_model'2 (let (a, _) = self in a), deep_model'2 (let (_, a) = self in a))
  
  function deep_model'0 (self : (uint32, uint32)) : (int, int) =
    [%#span5] deep_model'1 self
  
  let rec lt'0 (self:(uint32, uint32)) (other:(uint32, uint32)) (return'  (ret:bool))= {[@expl:precondition] [%#span7] inv'0 other}
    {[@expl:precondition] [%#span6] inv'0 self}
    any
    [ return' (result:bool)-> {[%#span8] result = lt_log'0 (deep_model'0 self) (deep_model'0 other)}
      (! return' {result}) ]
    
  
  let rec uses_concrete_instance (x:(uint32, uint32)) (y:(uint32, uint32)) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 = lt'0 {x} {y} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ]  | bb1 = return' {_0} ]
    ) [ & _0 : bool = any_l () | & x : (uint32, uint32) = x | & y : (uint32, uint32) = y ] 
    [ return' (result:bool)-> (! return' {result}) ]
    
end
