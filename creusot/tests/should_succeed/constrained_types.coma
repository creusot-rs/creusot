
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
  function any_l (_ : 'b) : 'a
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module ConstrainedTypes_UsesConcreteInstance
  use prelude.Int
  function eq_cmp'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  let rec eq_cmp'0 (_1:(int, int)) (_2:(int, int)) (return'  (ret:()))= any
    [ return' (result:())-> {result = eq_cmp'0 _1 _2} (! return' {result}) ]
    
  function antisym2'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  let rec antisym2'0 (_1:(int, int)) (_2:(int, int)) (return'  (ret:()))= any
    [ return' (result:())-> {result = antisym2'0 _1 _2} (! return' {result}) ]
    
  function antisym1'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  let rec antisym1'0 (_1:(int, int)) (_2:(int, int)) (return'  (ret:()))= any
    [ return' (result:())-> {result = antisym1'0 _1 _2} (! return' {result}) ]
    
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans'0 (_1 : (int, int)) (_2 : (int, int)) (_3 : (int, int)) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
  let rec trans'0 (_1:(int, int)) (_2:(int, int)) (_3:(int, int)) (_4:Core_Cmp_Ordering_Type.t_ordering) (return'  (ret:()))= any
    [ return' (result:())-> {result = trans'0 _1 _2 _3 _4} (! return' {result}) ]
    
  function refl'0 (_1 : (int, int)) : ()
  let rec refl'0 (_1:(int, int)) (return'  (ret:()))= any
    [ return' (result:())-> {result = refl'0 _1} (! return' {result}) ]
    
  function cmp_gt_log'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  let rec cmp_gt_log'0 (_1:(int, int)) (_2:(int, int)) (return'  (ret:()))= any
    [ return' (result:())-> {result = cmp_gt_log'0 _1 _2} (! return' {result}) ]
    
  function cmp_ge_log'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  let rec cmp_ge_log'0 (_1:(int, int)) (_2:(int, int)) (return'  (ret:()))= any
    [ return' (result:())-> {result = cmp_ge_log'0 _1 _2} (! return' {result}) ]
    
  function cmp_lt_log'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  let rec cmp_lt_log'0 (_1:(int, int)) (_2:(int, int)) (return'  (ret:()))= any
    [ return' (result:())-> {result = cmp_lt_log'0 _1 _2} (! return' {result}) ]
    
  function cmp_le_log'0 (_1 : (int, int)) (_2 : (int, int)) : ()
  let rec cmp_le_log'0 (_1:(int, int)) (_2:(int, int)) (return'  (ret:()))= any
    [ return' (result:())-> {result = cmp_le_log'0 _1 _2} (! return' {result}) ]
    
  use prelude.UInt32
  predicate invariant'0 (self : (uint32, uint32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:(uint32, uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : (uint32, uint32))
  let rec inv'0 (_x:(uint32, uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : (uint32, uint32) . inv'0 x = true
  use prelude.Int
  use prelude.Intrinsic
  predicate resolve'1 (self : uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'1 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : (uint32, uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'1 (let (a, _) = self in a)
    /\ resolve'1 (let (_, a) = self in a)
  let rec resolve'0 (self:(uint32, uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  use int.Int
  function lt_log'0 (self : (int, int)) (o : (int, int)) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 240 20 240 67] (let (a, _) = self in a) = (let (a, _) = o in a)
    /\ (let (_, a) = self in a) < (let (_, a) = o in a)
    \/ (let (a, _) = self in a) < (let (a, _) = o in a)
  let rec lt_log'0 (self:(int, int)) (o:(int, int)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = lt_log'0 self o} (! return' {result}) ]
    
  use prelude.UInt32
  function deep_model'2 (self : uint32) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  let rec deep_model'2 (self:uint32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'2 self} (! return' {result}) ]
    
  function deep_model'1 (self : (uint32, uint32)) : (int, int) =
    [#"../../../../creusot-contracts/src/std/tuples.rs" 29 28 29 57] (deep_model'2 (let (a, _) = self in a), deep_model'2 (let (_, a) = self in a))
  let rec deep_model'1 (self:(uint32, uint32)) (return'  (ret:(int, int)))= any
    [ return' (result:(int, int))-> {result = deep_model'1 self} (! return' {result}) ]
    
  function deep_model'0 (self : (uint32, uint32)) : (int, int) =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'1 self
  let rec deep_model'0 (self:(uint32, uint32)) (return'  (ret:(int, int)))= any
    [ return' (result:(int, int))-> {result = deep_model'0 self} (! return' {result}) ]
    
  let rec lt'0 (self:(uint32, uint32)) (other:(uint32, uint32)) (return'  (ret:bool))= {[@expl:precondition] inv'0 other}
    {[@expl:precondition] inv'0 self}
    any
    [ return' (result:bool)-> {[#"../constrained_types.rs" 9 18 9 68] result
      = lt_log'0 (deep_model'0 self) (deep_model'0 other)}
      (! return' {result}) ]
    
  let rec uses_concrete_instance (x:(uint32, uint32)) (y:(uint32, uint32)) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 = lt'0 {x} {y} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = -{resolve'0 y}- s1 | s1 = -{resolve'0 x}- s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () : bool | & x : (uint32, uint32) = x | & y : (uint32, uint32) = y ] 
    [ return' (result:bool)-> (! return' {result}) ]
    
end
