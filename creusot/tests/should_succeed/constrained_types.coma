module M_constrained_types__uses_concrete_instance [#"constrained_types.rs" 14 0 14 67]
  let%span sconstrained_types0 = "constrained_types.rs" 9 18 9 68
  let%span smodel1 = "../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span sord2 = "../../../creusot-contracts/src/logic/ord.rs" 282 20 282 67
  let%span stuples3 = "../../../creusot-contracts/src/std/tuples.rs" 29 28 29 57
  let%span sord4 = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord5 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord6 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord7 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord8 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord9 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord10 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord11 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord12 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord13 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord14 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord15 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord16 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span snum17 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  let%span sord18 = "../../../creusot-contracts/src/logic/ord.rs" 276 20 276 68
  let%span sord19 = "../../../creusot-contracts/src/logic/ord.rs" 263 8 270 11
  let%span sord20 = "../../../creusot-contracts/src/logic/ord.rs" 288 20 288 68
  let%span sord21 = "../../../creusot-contracts/src/logic/ord.rs" 294 20 294 67
  let%span sord22 = "../../../creusot-contracts/src/logic/ord.rs" 186 16 192 17
  let%span sord23 = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord24 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord25 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord26 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord27 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord28 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord29 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord30 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord31 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord32 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord33 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord34 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord35 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  predicate inv'0 (_1 : (uint32, uint32))
  
  axiom inv_axiom'0 [@rewrite] : forall x : (uint32, uint32) [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  function deep_model'2 (self : uint32) : int =
    [%#snum17] UInt32.to_int self
  
  function deep_model'1 (self : (uint32, uint32)) : (int, int) =
    [%#stuples3] (deep_model'2 (let (a, _) = self in a), deep_model'2 (let (_, a) = self in a))
  
  function deep_model'0 (self : (uint32, uint32)) : (int, int) =
    [%#smodel1] deep_model'1 self
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  function cmp_log'1 (self : int) (o : int) : t_Ordering'0 =
    [%#sord22] if self < o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'1 (x : int) (y : int) : ()
  
  axiom eq_cmp'1_spec : forall x : int, y : int . [%#sord35] (x = y) = (cmp_log'1 x y = C_Equal'0)
  
  function antisym2'1 (x : int) (y : int) : ()
  
  axiom antisym2'1_spec : forall x : int, y : int . ([%#sord33] cmp_log'1 x y = C_Greater'0)
   -> ([%#sord34] cmp_log'1 y x = C_Less'0)
  
  function antisym1'1 (x : int) (y : int) : ()
  
  axiom antisym1'1_spec : forall x : int, y : int . ([%#sord31] cmp_log'1 x y = C_Less'0)
   -> ([%#sord32] cmp_log'1 y x = C_Greater'0)
  
  function trans'1 (x : int) (y : int) (z : int) (o : t_Ordering'0) : ()
  
  axiom trans'1_spec : forall x : int, y : int, z : int, o : t_Ordering'0 . ([%#sord28] cmp_log'1 x y = o)
   -> ([%#sord29] cmp_log'1 y z = o)  -> ([%#sord30] cmp_log'1 x z = o)
  
  function refl'1 (x : int) : ()
  
  axiom refl'1_spec : forall x : int . [%#sord27] cmp_log'1 x x = C_Equal'0
  
  function cmp_gt_log'1 (x : int) (y : int) : ()
  
  axiom cmp_gt_log'1_spec : forall x : int, y : int . [%#sord26] (x > y) = (cmp_log'1 x y = C_Greater'0)
  
  function cmp_ge_log'1 (x : int) (y : int) : ()
  
  axiom cmp_ge_log'1_spec : forall x : int, y : int . [%#sord25] (x >= y) = (cmp_log'1 x y <> C_Less'0)
  
  function cmp_lt_log'1 (x : int) (y : int) : ()
  
  axiom cmp_lt_log'1_spec : forall x : int, y : int . [%#sord24] (x < y) = (cmp_log'1 x y = C_Less'0)
  
  function cmp_le_log'1 (x : int) (y : int) : ()
  
  axiom cmp_le_log'1_spec : forall x : int, y : int . [%#sord23] (x <= y) = (cmp_log'1 x y <> C_Greater'0)
  
  function cmp_log'0 (self : (int, int)) (o : (int, int)) : t_Ordering'0 =
    [%#sord19] let r = cmp_log'1 (let (a, _) = self in a) (let (a, _) = o in a) in if r = C_Equal'0 then
      cmp_log'1 (let (_, a) = self in a) (let (_, a) = o in a)
    else
      r
    
  
  function eq_cmp'0 (x : (int, int)) (y : (int, int)) : ()
  
  axiom eq_cmp'0_spec : forall x : (int, int), y : (int, int) . [%#sord16] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : (int, int)) (y : (int, int)) : ()
  
  axiom antisym2'0_spec : forall x : (int, int), y : (int, int) . ([%#sord14] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord15] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : (int, int)) (y : (int, int)) : ()
  
  axiom antisym1'0_spec : forall x : (int, int), y : (int, int) . ([%#sord12] cmp_log'0 x y = C_Less'0)
   -> ([%#sord13] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : (int, int)) (y : (int, int)) (z : (int, int)) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : (int, int), y : (int, int), z : (int, int), o : t_Ordering'0 . ([%#sord9] cmp_log'0 x y
  = o)  -> ([%#sord10] cmp_log'0 y z = o)  -> ([%#sord11] cmp_log'0 x z = o)
  
  function refl'0 (x : (int, int)) : ()
  
  axiom refl'0_spec : forall x : (int, int) . [%#sord8] cmp_log'0 x x = C_Equal'0
  
  function gt_log'0 (self : (int, int)) (o : (int, int)) : bool =
    [%#sord21] (let (a, _) = self in a) = (let (a, _) = o in a) /\ (let (_, a) = self in a) > (let (_, a) = o in a)
    \/ (let (a, _) = self in a) > (let (a, _) = o in a)
  
  function cmp_gt_log'0 (x : (int, int)) (y : (int, int)) : ()
  
  axiom cmp_gt_log'0_spec : forall x : (int, int), y : (int, int) . [%#sord7] gt_log'0 x y
  = (cmp_log'0 x y = C_Greater'0)
  
  function ge_log'0 (self : (int, int)) (o : (int, int)) : bool =
    [%#sord20] (let (a, _) = self in a) = (let (a, _) = o in a) /\ (let (_, a) = self in a) >= (let (_, a) = o in a)
    \/ (let (a, _) = self in a) > (let (a, _) = o in a)
  
  function cmp_ge_log'0 (x : (int, int)) (y : (int, int)) : ()
  
  axiom cmp_ge_log'0_spec : forall x : (int, int), y : (int, int) . [%#sord6] ge_log'0 x y = (cmp_log'0 x y <> C_Less'0)
  
  function lt_log'0 (self : (int, int)) (o : (int, int)) : bool =
    [%#sord2] (let (a, _) = self in a) = (let (a, _) = o in a) /\ (let (_, a) = self in a) < (let (_, a) = o in a)
    \/ (let (a, _) = self in a) < (let (a, _) = o in a)
  
  function cmp_lt_log'0 (x : (int, int)) (y : (int, int)) : ()
  
  axiom cmp_lt_log'0_spec : forall x : (int, int), y : (int, int) . [%#sord5] lt_log'0 x y = (cmp_log'0 x y = C_Less'0)
  
  function le_log'0 (self : (int, int)) (o : (int, int)) : bool =
    [%#sord18] (let (a, _) = self in a) = (let (a, _) = o in a) /\ (let (_, a) = self in a) <= (let (_, a) = o in a)
    \/ (let (a, _) = self in a) < (let (a, _) = o in a)
  
  function cmp_le_log'0 (x : (int, int)) (y : (int, int)) : ()
  
  axiom cmp_le_log'0_spec : forall x : (int, int), y : (int, int) . [%#sord4] le_log'0 x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  let rec lt'0 (self:(uint32, uint32)) (other:(uint32, uint32)) (return'  (ret:bool))= {[@expl:lt 'self' type invariant] inv'0 self}
    {[@expl:lt 'other' type invariant] inv'0 other}
    any
    [ return' (result:bool)-> {[%#sconstrained_types0] result = lt_log'0 (deep_model'0 self) (deep_model'0 other)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec uses_concrete_instance'0 (x:(uint32, uint32)) (y:(uint32, uint32)) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 = lt'0 {x} {y} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ]  | bb1 = return' {_0} ]
    ) [ & _0 : bool = any_l () | & x : (uint32, uint32) = x | & y : (uint32, uint32) = y ] 
    [ return' (result:bool)-> (! return' {result}) ]
    
end
