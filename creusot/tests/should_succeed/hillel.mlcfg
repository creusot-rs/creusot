
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 58 8 58 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type s
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = s,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function index_logic [@inline:trivial] (self : s) (ix : int) : t =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 17 8 17 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 40 8 40 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/ghost.rs" 26 20 26 48] ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val len (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 66 26 66 48] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 69 26 69 51] ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module Hillel_RightPad_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic1 with
    type t = t,
    type s = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val right_pad [#"../hillel.rs" 16 0 16 59] (str : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (len : usize) (pad : t) : ()
    ensures { [#"../hillel.rs" 10 10 10 62] Seq.length (ShallowModel0.shallow_model ( ^ str)) >= UIntSize.to_int len /\ Seq.length (ShallowModel0.shallow_model ( ^ str)) >= Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 11 10 11 62] Seq.length (ShallowModel0.shallow_model ( ^ str)) = UIntSize.to_int len \/ Seq.length (ShallowModel0.shallow_model ( ^ str)) = Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 12 0 12 62] UIntSize.to_int len <= Seq.length (ShallowModel1.shallow_model str) -> Seq.length (ShallowModel0.shallow_model ( ^ str)) = Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 13 0 13 55] UIntSize.to_int len > Seq.length (ShallowModel1.shallow_model str) -> Seq.length (ShallowModel0.shallow_model ( ^ str)) = UIntSize.to_int len }
    ensures { [#"../hillel.rs" 14 0 14 75] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model str) -> IndexLogic0.index_logic ( ^ str) i = IndexLogic1.index_logic str i }
    ensures { [#"../hillel.rs" 15 0 15 75] forall i : int . Seq.length (ShallowModel1.shallow_model str) <= i /\ i < UIntSize.to_int len -> IndexLogic0.index_logic ( ^ str) i = pad }
    
end
module Hillel_RightPad
  type t
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  use prelude.Ghost
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = t
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel2 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = t,
    type s = Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = t,
    type s = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec cfg right_pad [#"../hillel.rs" 16 0 16 59] [@cfg:stackify] [@cfg:subregion_analysis] (str : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (len : usize) (pad : t) : ()
    ensures { [#"../hillel.rs" 10 10 10 62] Seq.length (ShallowModel0.shallow_model ( ^ str)) >= UIntSize.to_int len /\ Seq.length (ShallowModel0.shallow_model ( ^ str)) >= Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 11 10 11 62] Seq.length (ShallowModel0.shallow_model ( ^ str)) = UIntSize.to_int len \/ Seq.length (ShallowModel0.shallow_model ( ^ str)) = Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 12 0 12 62] UIntSize.to_int len <= Seq.length (ShallowModel1.shallow_model str) -> Seq.length (ShallowModel0.shallow_model ( ^ str)) = Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 13 0 13 55] UIntSize.to_int len > Seq.length (ShallowModel1.shallow_model str) -> Seq.length (ShallowModel0.shallow_model ( ^ str)) = UIntSize.to_int len }
    ensures { [#"../hillel.rs" 14 0 14 75] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model str) -> IndexLogic0.index_logic ( ^ str) i = IndexLogic1.index_logic str i }
    ensures { [#"../hillel.rs" 15 0 15 75] forall i : int . Seq.length (ShallowModel1.shallow_model str) <= i /\ i < UIntSize.to_int len -> IndexLogic0.index_logic ( ^ str) i = pad }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var str_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var len_2 : usize;
  var pad_3 : t;
  var old_str_10 : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var _17 : ();
  var _18 : bool;
  var _19 : usize;
  var _20 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _21 : usize;
  var _22 : ();
  var _23 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _24 : t;
  var _25 : ();
  var _26 : ();
  var _27 : ();
  {
    str_1 <- str;
    len_2 <- len;
    pad_3 <- pad;
    goto BB0
  }
  BB0 {
    old_str_10 <- ([#"../hillel.rs" 17 18 17 32] Ghost.new str_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_str_10 };
    goto BB2
  }
  BB2 {
    invariant { [#"../hillel.rs" 19 16 19 44] Seq.length (ShallowModel2.shallow_model old_str_10) <= Seq.length (ShallowModel1.shallow_model str_1) };
    invariant { [#"../hillel.rs" 19 4 19 46] Seq.length (ShallowModel2.shallow_model old_str_10) < UIntSize.to_int len_2 -> Seq.length (ShallowModel1.shallow_model str_1) <= UIntSize.to_int len_2 };
    invariant { [#"../hillel.rs" 19 4 19 46] Seq.length (ShallowModel1.shallow_model str_1) > UIntSize.to_int len_2 -> Seq.length (ShallowModel1.shallow_model str_1) = Seq.length (ShallowModel2.shallow_model old_str_10) };
    invariant { [#"../hillel.rs" 19 4 19 46] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel2.shallow_model old_str_10) -> IndexLogic1.index_logic str_1 i = IndexLogic2.index_logic old_str_10 i };
    invariant { [#"../hillel.rs" 19 4 19 46] forall i : int . Seq.length (ShallowModel2.shallow_model old_str_10) <= i /\ i < Seq.length (ShallowModel1.shallow_model str_1) -> IndexLogic1.index_logic str_1 i = pad_3 };
    goto BB3
  }
  BB3 {
    _20 <-  * str_1;
    _19 <- ([#"../hillel.rs" 24 10 24 19] Len0.len _20);
    goto BB4
  }
  BB4 {
    _21 <- len_2;
    _18 <- ([#"../hillel.rs" 24 10 24 25] _19 < _21);
    switch (_18)
      | False -> goto BB7
      | True -> goto BB5
      end
  }
  BB5 {
    _23 <- borrow_mut ( * str_1);
    str_1 <- { str_1 with current = ( ^ _23) };
    _24 <- pad_3;
    _22 <- ([#"../hillel.rs" 25 8 25 21] Push0.push _23 _24);
    goto BB6
  }
  BB6 {
    _17 <- ();
    goto BB2
  }
  BB7 {
    assume { Resolve1.resolve str_1 };
    assume { Resolve2.resolve pad_3 };
    _0 <- ();
    return _0
  }
  
end
module Alloc_Vec_Impl1_Insert_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic1 with
    type t = t,
    type s = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val insert (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : usize) (element : t) : ()
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 86 26 86 59] Seq.length (ShallowModel0.shallow_model ( ^ self)) = Seq.length (ShallowModel1.shallow_model self) + 1 }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 87 16 87 89] forall i : int . 0 <= i /\ i < UIntSize.to_int index -> IndexLogic0.index_logic ( ^ self) i = IndexLogic1.index_logic self i }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 88 26 88 52] IndexLogic0.index_logic ( ^ self) (UIntSize.to_int index) = element }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 89 16 89 105] forall i : int . UIntSize.to_int index < i /\ i < Seq.length (ShallowModel0.shallow_model ( ^ self)) -> IndexLogic0.index_logic ( ^ self) i = IndexLogic1.index_logic self (i - 1) }
    
end
module CreusotContracts_Std1_Num_Impl15_ShallowModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function shallow_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl15_ShallowModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function shallow_model (self : usize) : int
  val shallow_model (self : usize) : int
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Num_Impl15_ShallowModel
  use prelude.Int
  use prelude.UIntSize
  function shallow_model (self : usize) : int =
    UIntSize.to_int self
  val shallow_model (self : usize) : int
    ensures { result = shallow_model self }
    
end
module Hillel_LeftPad_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic1 with
    type t = t,
    type s = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val left_pad [#"../hillel.rs" 33 0 33 58] (str : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (len : usize) (pad : t) : ()
    ensures { [#"../hillel.rs" 29 10 29 62] Seq.length (ShallowModel0.shallow_model ( ^ str)) >= UIntSize.to_int len /\ Seq.length (ShallowModel0.shallow_model ( ^ str)) >= Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 30 10 30 62] Seq.length (ShallowModel0.shallow_model ( ^ str)) = UIntSize.to_int len \/ Seq.length (ShallowModel0.shallow_model ( ^ str)) = Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 31 0 31 90] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model ( ^ str)) - Seq.length (ShallowModel1.shallow_model str) -> IndexLogic0.index_logic ( ^ str) i = pad }
    ensures { [#"../hillel.rs" 32 0 32 106] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model str) -> IndexLogic0.index_logic ( ^ str) (i + (Seq.length (ShallowModel0.shallow_model ( ^ str)) - Seq.length (ShallowModel1.shallow_model str))) = IndexLogic1.index_logic str i }
    
end
module Hillel_LeftPad
  type t
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  clone CreusotContracts_Std1_Num_Impl15_ShallowModel as ShallowModel7
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use prelude.Int
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel5 with
    type t = usize,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel4 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  use prelude.Ghost
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = t
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = t,
    type s = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_Impl1_Insert_Interface as Insert0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IndexLogic1.index_logic = IndexLogic1.index_logic,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel2 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = t,
    type s = Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel3 with
    type t = usize,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec cfg left_pad [#"../hillel.rs" 33 0 33 58] [@cfg:stackify] [@cfg:subregion_analysis] (str : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (len : usize) (pad : t) : ()
    ensures { [#"../hillel.rs" 29 10 29 62] Seq.length (ShallowModel0.shallow_model ( ^ str)) >= UIntSize.to_int len /\ Seq.length (ShallowModel0.shallow_model ( ^ str)) >= Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 30 10 30 62] Seq.length (ShallowModel0.shallow_model ( ^ str)) = UIntSize.to_int len \/ Seq.length (ShallowModel0.shallow_model ( ^ str)) = Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 31 0 31 90] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model ( ^ str)) - Seq.length (ShallowModel1.shallow_model str) -> IndexLogic0.index_logic ( ^ str) i = pad }
    ensures { [#"../hillel.rs" 32 0 32 106] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model str) -> IndexLogic0.index_logic ( ^ str) (i + (Seq.length (ShallowModel0.shallow_model ( ^ str)) - Seq.length (ShallowModel1.shallow_model str))) = IndexLogic1.index_logic str i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var str_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var len_2 : usize;
  var pad_3 : t;
  var old_str_8 : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var c_10 : Ghost.ghost_ty usize;
  var _18 : ();
  var _19 : bool;
  var _20 : usize;
  var _21 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _22 : usize;
  var _23 : ();
  var _24 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _25 : t;
  var _26 : Ghost.ghost_ty usize;
  var _28 : ();
  var _29 : ();
  var _30 : ();
  {
    str_1 <- str;
    len_2 <- len;
    pad_3 <- pad;
    goto BB0
  }
  BB0 {
    old_str_8 <- ([#"../hillel.rs" 34 18 34 32] Ghost.new str_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_str_8 };
    c_10 <- ([#"../hillel.rs" 35 30 35 42] Ghost.new (0 : usize));
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant { [#"../hillel.rs" 37 16 37 44] Seq.length (ShallowModel2.shallow_model old_str_8) <= Seq.length (ShallowModel1.shallow_model str_1) };
    invariant { [#"../hillel.rs" 37 4 37 46] Seq.length (ShallowModel2.shallow_model old_str_8) < UIntSize.to_int len_2 -> Seq.length (ShallowModel1.shallow_model str_1) <= UIntSize.to_int len_2 };
    invariant { [#"../hillel.rs" 37 4 37 46] Seq.length (ShallowModel1.shallow_model str_1) > UIntSize.to_int len_2 -> Seq.length (ShallowModel1.shallow_model str_1) = Seq.length (ShallowModel2.shallow_model old_str_8) };
    invariant { [#"../hillel.rs" 40 16 40 49] ShallowModel3.shallow_model c_10 = Seq.length (ShallowModel1.shallow_model str_1) - Seq.length (ShallowModel2.shallow_model old_str_8) };
    invariant { [#"../hillel.rs" 37 4 37 46] forall i : int . ShallowModel3.shallow_model c_10 <= i /\ i < Seq.length (ShallowModel1.shallow_model str_1) -> IndexLogic1.index_logic str_1 i = IndexLogic2.index_logic old_str_8 (i - ShallowModel3.shallow_model c_10) };
    invariant { [#"../hillel.rs" 37 4 37 46] forall i : int . 0 <= i /\ i < ShallowModel3.shallow_model c_10 -> IndexLogic1.index_logic str_1 i = pad_3 };
    goto BB4
  }
  BB4 {
    _21 <-  * str_1;
    _20 <- ([#"../hillel.rs" 43 10 43 19] Len0.len _21);
    goto BB5
  }
  BB5 {
    _22 <- len_2;
    _19 <- ([#"../hillel.rs" 43 10 43 25] _20 < _22);
    switch (_19)
      | False -> goto BB9
      | True -> goto BB6
      end
  }
  BB6 {
    _24 <- borrow_mut ( * str_1);
    str_1 <- { str_1 with current = ( ^ _24) };
    _25 <- pad_3;
    _23 <- ([#"../hillel.rs" 44 8 44 26] Insert0.insert _24 ([#"../hillel.rs" 44 19 44 20] (0 : usize)) _25);
    goto BB7
  }
  BB7 {
    _26 <- ([#"../hillel.rs" 45 12 45 36] Ghost.new ((1 : usize) + Ghost.inner c_10));
    goto BB8
  }
  BB8 {
    c_10 <- _26;
    _26 <- any Ghost.ghost_ty usize;
    _18 <- ();
    goto BB3
  }
  BB9 {
    assume { Resolve1.resolve str_1 };
    assume { Resolve2.resolve pad_3 };
    _0 <- ();
    return _0
  }
  
end
module Hillel_IsUnique_Stub
  type t
  use seq.Seq
  predicate is_unique [#"../hillel.rs" 50 0 50 34] (s : Seq.seq t)
end
module Hillel_IsUnique_Interface
  type t
  use seq.Seq
  predicate is_unique [#"../hillel.rs" 50 0 50 34] (s : Seq.seq t)
  val is_unique [#"../hillel.rs" 50 0 50 34] (s : Seq.seq t) : bool
    ensures { result = is_unique s }
    
end
module Hillel_IsUnique
  type t
  use seq.Seq
  use prelude.Int
  predicate is_unique [#"../hillel.rs" 50 0 50 34] (s : Seq.seq t) =
    [#"../hillel.rs" 51 4 53 5] forall j : int . forall i : int . 0 <= i /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s -> Seq.get s i = Seq.get s j -> i = j
  val is_unique [#"../hillel.rs" 50 0 50 34] (s : Seq.seq t) : bool
    ensures { result = is_unique s }
    
end
module Hillel_Contains_Stub
  type t
  use seq.Seq
  predicate contains [#"../hillel.rs" 57 0 57 44] (seq : Seq.seq t) (elem : t)
end
module Hillel_Contains_Interface
  type t
  use seq.Seq
  predicate contains [#"../hillel.rs" 57 0 57 44] (seq : Seq.seq t) (elem : t)
  val contains [#"../hillel.rs" 57 0 57 44] (seq : Seq.seq t) (elem : t) : bool
    ensures { result = contains seq elem }
    
end
module Hillel_Contains
  type t
  use seq.Seq
  use prelude.Int
  predicate contains [#"../hillel.rs" 57 0 57 44] (seq : Seq.seq t) (elem : t) =
    [#"../hillel.rs" 58 4 60 5] exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = elem
  val contains [#"../hillel.rs" 57 0 57 44] (seq : Seq.seq t) (elem : t) : bool
    ensures { result = contains seq elem }
    
end
module Hillel_IsSubset_Stub
  type t
  use seq.Seq
  predicate is_subset [#"../hillel.rs" 64 0 64 49] (sub : Seq.seq t) (sup : Seq.seq t)
end
module Hillel_IsSubset_Interface
  type t
  use seq.Seq
  predicate is_subset [#"../hillel.rs" 64 0 64 49] (sub : Seq.seq t) (sup : Seq.seq t)
  val is_subset [#"../hillel.rs" 64 0 64 49] (sub : Seq.seq t) (sup : Seq.seq t) : bool
    ensures { result = is_subset sub sup }
    
end
module Hillel_IsSubset
  type t
  use seq.Seq
  use prelude.Int
  clone Hillel_Contains_Stub as Contains0 with
    type t = t
  predicate is_subset [#"../hillel.rs" 64 0 64 49] (sub : Seq.seq t) (sup : Seq.seq t) =
    [#"../hillel.rs" 65 4 67 5] forall i : int . 0 <= i /\ i < Seq.length sub -> Contains0.contains sup (Seq.get sub i)
  val is_subset [#"../hillel.rs" 64 0 64 49] (sub : Seq.seq t) (sup : Seq.seq t) : bool
    ensures { result = is_subset sub sup }
    
end
module Hillel_SubsetPush_Stub
  type t
  use seq.Seq
  clone Hillel_IsSubset_Stub as IsSubset0 with
    type t = t
  function subset_push [#"../hillel.rs" 72 0 72 37] (s : Seq.seq t) (elem : t) : ()
end
module Hillel_SubsetPush_Interface
  type t
  use seq.Seq
  clone Hillel_IsSubset_Stub as IsSubset0 with
    type t = t
  function subset_push [#"../hillel.rs" 72 0 72 37] (s : Seq.seq t) (elem : t) : ()
  val subset_push [#"../hillel.rs" 72 0 72 37] (s : Seq.seq t) (elem : t) : ()
    ensures { [#"../hillel.rs" 71 10 71 36] IsSubset0.is_subset s (Seq.snoc s elem) }
    ensures { result = subset_push s elem }
    
  axiom subset_push_spec : forall s : Seq.seq t, elem : t . [#"../hillel.rs" 71 10 71 36] IsSubset0.is_subset s (Seq.snoc s elem)
end
module Hillel_SubsetPush
  type t
  use seq.Seq
  clone Hillel_IsSubset_Stub as IsSubset0 with
    type t = t
  function subset_push [#"../hillel.rs" 72 0 72 37] (s : Seq.seq t) (elem : t) : () =
    [#"../hillel.rs" 70 0 70 8] ()
  val subset_push [#"../hillel.rs" 72 0 72 37] (s : Seq.seq t) (elem : t) : ()
    ensures { [#"../hillel.rs" 71 10 71 36] IsSubset0.is_subset s (Seq.snoc s elem) }
    ensures { result = subset_push s elem }
    
  axiom subset_push_spec : forall s : Seq.seq t, elem : t . [#"../hillel.rs" 71 10 71 36] IsSubset0.is_subset s (Seq.snoc s elem)
end
module Hillel_SubsetPush_Impl
  type t
  use seq.Seq
  clone Hillel_Contains as Contains0 with
    type t = t
  clone Hillel_IsSubset as IsSubset0 with
    type t = t,
    predicate Contains0.contains = Contains0.contains
  let rec ghost function subset_push [#"../hillel.rs" 72 0 72 37] (s : Seq.seq t) (elem : t) : ()
    ensures { [#"../hillel.rs" 71 10 71 36] IsSubset0.is_subset s (Seq.snoc s elem) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hillel.rs" 70 0 70 8] ()
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl2_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl2_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
  val deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl2_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : borrowed t) : DeepModelTy0.deepModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 49 8 49 28] DeepModel0.deep_model ( * self)
  val deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length result }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get result i = DeepModel0.deep_model (IndexLogic0.index_logic self i) }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (IndexLogic0.index_logic self i)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self))
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length result }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get result i = DeepModel0.deep_model (IndexLogic0.index_logic self i) }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (IndexLogic0.index_logic self i)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self))
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    [#"../../../../creusot-contracts/src/invariant.rs" 9 8 9 12] true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : slice t) : Seq.seq t
  val to_ref_seq (self : slice t) : Seq.seq t
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 83 14 83 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 84 4 84 82] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = IndexLogic0.index_logic self i }
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 84 4 84 82] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && ([#"../../../../creusot-contracts/src/std/slice.rs" 83 14 83 41] Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : slice t) : Seq.seq t
  val to_ref_seq (self : slice t) : Seq.seq t
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 83 14 83 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 84 4 84 82] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = IndexLogic0.index_logic self i }
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 84 4 84 82] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && ([#"../../../../creusot-contracts/src/std/slice.rs" 83 14 83 41] Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl15_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl15_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Std1_Slice_Impl15_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub as ToRefSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 379 12 379 66] ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Model_Impl0_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl0_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 31 8 31 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Alloc_Vec_Impl9_Deref_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val deref (self : Alloc_Vec_Vec_Type.t_vec t a) : slice t
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 137 26 137 42] ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    
end
module Core_Slice_Impl0_Iter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  val iter (self : slice t) : Core_Slice_Iter_Iter_Type.t_iter t
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 232 0 325 1] ShallowModel0.shallow_model result = self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Interface
  type self
  predicate into_iter_pre (self : self)
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  predicate into_iter_pre (self : self) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 57 20 57 24] true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Interface
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = i,
    type IntoIter0.intoIter = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = i
  val into_iter (self : i) : i
    requires {[#"../../../../creusot-contracts/src/std/iter.rs" 83 0 151 1] IntoIterPre0.into_iter_pre self}
    requires {Invariant0.invariant' self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 83 0 151 1] IntoIterPost0.into_iter_post self result }
    ensures { Invariant0.invariant' result }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl15_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl15_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl15_Completed
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = slice t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 372 20 372 61] Resolve0.resolve self /\ ShallowModel1.shallow_model (ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module Core_Slice_Iter_Impl181_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl15_Completed_Stub as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  val next (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 89 26 92 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Cmp_Impls_Impl9_Eq_Interface
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel1 with
    type t = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val eq (self : a) (other : b) : bool
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Interface
  type i
  predicate into_iter_pre (self : i)
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate into_iter_pre (self : i) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 68 8 68 24] Invariant0.invariant' self
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Interface
  type i
  predicate into_iter_post (self : i) (res : i)
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  predicate into_iter_post (self : i) (res : i) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 74 8 74 19] self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
  val is_inhabited (_1' : ()) : bool
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x }
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] result }
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] is_inhabited _1') && ([#"../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool =
    [#"../../../../creusot-contracts/src/invariant.rs" 20 8 20 12] true
  val is_inhabited (_1' : ()) : bool
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x }
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] result }
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] is_inhabited _1') && ([#"../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . [#"../../../../creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    [#"../../../../creusot-contracts/src/std/slice.rs" 383 4 383 10] ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . [#"../../../../creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b}
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"../../../../creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b) -> ([#"../../../../creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c) -> ([#"../../../../creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 388 4 388 10] ()
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b}
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"../../../../creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b) -> ([#"../../../../creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c) -> ([#"../../../../creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module Hillel_InsertUnique_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use seq.Seq
  clone Hillel_Contains_Stub as Contains0 with
    type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel2 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Hillel_IsSubset_Stub as IsSubset0 with
    type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub as DeepModel1 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Hillel_IsUnique_Stub as IsUnique0 with
    type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl2_DeepModel_Stub as DeepModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type DeepModelTy0.deepModelTy = Seq.seq DeepModelTy0.deepModelTy
  val insert_unique [#"../hillel.rs" 79 0 79 62] (vec : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (elem : t) : ()
    requires {[#"../hillel.rs" 74 11 74 38] IsUnique0.is_unique (DeepModel0.deep_model vec)}
    ensures { [#"../hillel.rs" 75 10 75 40] IsUnique0.is_unique (DeepModel1.deep_model ( ^ vec)) }
    ensures { [#"../hillel.rs" 76 10 76 58] IsSubset0.is_subset (DeepModel0.deep_model vec) (DeepModel1.deep_model ( ^ vec)) }
    ensures { [#"../hillel.rs" 77 10 77 82] IsSubset0.is_subset (DeepModel1.deep_model ( ^ vec)) (Seq.snoc (DeepModel0.deep_model vec) (DeepModel2.deep_model elem)) }
    ensures { [#"../hillel.rs" 78 10 78 58] Contains0.contains (DeepModel1.deep_model ( ^ vec)) (DeepModel2.deep_model elem) }
    
end
module Hillel_InsertUnique
  type t
  use prelude.Borrow
  use prelude.Ghost
  use prelude.Slice
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface as ShallowModel3 with
    type t = t
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel6 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = slice t,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel5 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel2 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel3 with
    type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel4 with
    type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl15_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve4.resolve,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = t,
    type s = slice t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface as ToRefSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_Produces as Produces0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic
  clone CreusotContracts_Std1_Slice_Impl15_ProducesTrans as ProducesTrans0 with
    type t = t,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_ProducesRefl as ProducesRefl0 with
    type t = t,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter t,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Core_Cmp_Impls_Impl9_Eq_Interface as Eq0 with
    type a = t,
    type b = t,
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel4.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve9 with
    type self = t
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve8 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve7 with
    type self = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve6 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = t
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with
    type t = t,
    type Item0.item = t,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = Ghost.ghost_ty (Seq.seq t)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter t)
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Slice_Iter_Iter_Type.t_iter t,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  clone Core_Slice_Impl0_Iter_Interface as Iter1 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = slice t
  clone Alloc_Vec_Impl9_Deref_Interface as Deref0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty ()
  clone Hillel_Contains as Contains0 with
    type t = DeepModelTy0.deepModelTy
  clone Hillel_IsSubset as IsSubset0 with
    type t = DeepModelTy0.deepModelTy,
    predicate Contains0.contains = Contains0.contains
  clone Hillel_SubsetPush as SubsetPush0 with
    type t = DeepModelTy0.deepModelTy,
    predicate IsSubset0.is_subset = IsSubset0.is_subset,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface as DeepModel1 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Hillel_IsUnique as IsUnique0 with
    type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl2_DeepModel as DeepModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type DeepModelTy0.deepModelTy = Seq.seq DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  let rec cfg insert_unique [#"../hillel.rs" 79 0 79 62] [@cfg:stackify] [@cfg:subregion_analysis] (vec : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (elem : t) : ()
    requires {[#"../hillel.rs" 74 11 74 38] IsUnique0.is_unique (DeepModel0.deep_model vec)}
    ensures { [#"../hillel.rs" 75 10 75 40] IsUnique0.is_unique (DeepModel1.deep_model ( ^ vec)) }
    ensures { [#"../hillel.rs" 76 10 76 58] IsSubset0.is_subset (DeepModel0.deep_model vec) (DeepModel1.deep_model ( ^ vec)) }
    ensures { [#"../hillel.rs" 77 10 77 82] IsSubset0.is_subset (DeepModel1.deep_model ( ^ vec)) (Seq.snoc (DeepModel0.deep_model vec) (DeepModel2.deep_model elem)) }
    ensures { [#"../hillel.rs" 78 10 78 58] Contains0.contains (DeepModel1.deep_model ( ^ vec)) (DeepModel2.deep_model elem) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var vec_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var elem_2 : t;
  var _8 : Ghost.ghost_ty ();
  var _10 : ();
  var _12 : ();
  var iter_13 : Core_Slice_Iter_Iter_Type.t_iter t;
  var _14 : Core_Slice_Iter_Iter_Type.t_iter t;
  var _15 : slice t;
  var _16 : slice t;
  var _17 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var iter_old_18 : Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter t);
  var produced_20 : Ghost.ghost_ty (Seq.seq t);
  var _25 : ();
  var _26 : Core_Option_Option_Type.t_option t;
  var _27 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var _28 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t);
  var _29 : isize;
  var __creusot_proc_iter_elem_30 : t;
  var _31 : Ghost.ghost_ty (Seq.seq t);
  var e_33 : t;
  var _34 : ();
  var _36 : bool;
  var _37 : t;
  var _38 : t;
  var _39 : t;
  var _40 : ();
  var _41 : ();
  var _43 : ();
  var _44 : ();
  var _46 : ();
  var _47 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _48 : t;
  {
    vec_1 <- vec;
    elem_2 <- elem;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _8 <- ([#"../hillel.rs" 80 4 80 44] Ghost.new ());
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _8 };
    assert { [@expl:assertion] [#"../hillel.rs" 81 20 81 89] IsSubset0.is_subset (DeepModel0.deep_model vec_1) (Seq.snoc (DeepModel0.deep_model vec_1) (DeepModel2.deep_model elem_2)) };
    goto BB4
  }
  BB4 {
    _10 <- ();
    _17 <-  * vec_1;
    _16 <- ([#"../hillel.rs" 84 13 84 23] Deref0.deref _17);
    goto BB5
  }
  BB5 {
    _15 <- _16;
    assume { Resolve1.resolve _16 };
    _14 <- ([#"../hillel.rs" 84 13 84 23] Iter1.iter _15);
    goto BB6
  }
  BB6 {
    iter_13 <- ([#"../hillel.rs" 83 4 83 111] IntoIter0.into_iter _14);
    goto BB7
  }
  BB7 {
    iter_old_18 <- ([#"../hillel.rs" 83 4 83 111] Ghost.new iter_13);
    goto BB8
  }
  BB8 {
    assume { Resolve2.resolve iter_old_18 };
    produced_20 <- ([#"../hillel.rs" 83 4 83 111] Ghost.new (Seq.empty ));
    goto BB9
  }
  BB9 {
    assume { Resolve3.resolve produced_20 };
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    invariant { [#"../hillel.rs" 83 4 83 111] Invariant0.invariant' iter_13 };
    invariant { [#"../hillel.rs" 83 4 83 111] Produces0.produces (Ghost.inner iter_old_18) (Ghost.inner produced_20) iter_13 };
    invariant { [#"../hillel.rs" 83 4 83 111] forall j : int . 0 <= j /\ j < Seq.length (Ghost.inner produced_20) -> DeepModel3.deep_model (Seq.get produced_20 j) <> DeepModel2.deep_model elem_2 };
    goto BB12
  }
  BB12 {
    _28 <- borrow_mut iter_13;
    iter_13 <-  ^ _28;
    _27 <- borrow_mut ( * _28);
    _28 <- { _28 with current = ( ^ _27) };
    _26 <- ([#"../hillel.rs" 83 4 83 111] Next0.next _27);
    goto BB13
  }
  BB13 {
    assume { Resolve4.resolve _28 };
    switch (_26)
      | Core_Option_Option_Type.C_None -> goto BB14
      | Core_Option_Option_Type.C_Some _ -> goto BB15
      end
  }
  BB14 {
    assume { Resolve6.resolve iter_13 };
    assume { Resolve7.resolve _26 };
    _12 <- ();
    assert { [@expl:assertion] [#"../hillel.rs" 92 20 92 71] IsUnique0.is_unique (Seq.snoc (DeepModel0.deep_model vec_1) (DeepModel2.deep_model elem_2)) };
    goto BB23
  }
  BB15 {
    goto BB17
  }
  BB16 {
    assume { Resolve5.resolve elem_2 };
    assume { Resolve6.resolve iter_13 };
    assume { Resolve7.resolve _26 };
    assume { Resolve8.resolve vec_1 };
    absurd
  }
  BB17 {
    __creusot_proc_iter_elem_30 <- Core_Option_Option_Type.some_0 _26;
    assume { Resolve7.resolve _26 };
    _31 <- ([#"../hillel.rs" 83 4 83 111] Ghost.new (Seq.(++) (Ghost.inner produced_20) (Seq.singleton __creusot_proc_iter_elem_30)));
    goto BB18
  }
  BB18 {
    produced_20 <- _31;
    _31 <- any Ghost.ghost_ty (Seq.seq t);
    assume { Resolve3.resolve produced_20 };
    e_33 <- __creusot_proc_iter_elem_30;
    assume { Resolve9.resolve __creusot_proc_iter_elem_30 };
    assert { [@expl:assertion] [#"../hillel.rs" 85 24 85 54] e_33 = IndexLogic0.index_logic ( * vec_1) (Seq.length (Ghost.inner produced_20) - 1) };
    _34 <- ();
    _37 <- e_33;
    _39 <- elem_2;
    _38 <- _39;
    _36 <- ([#"../hillel.rs" 86 11 86 21] Eq0.eq _37 _38);
    goto BB19
  }
  BB19 {
    assume { Resolve9.resolve e_33 };
    assume { Resolve9.resolve _39 };
    switch (_36)
      | False -> goto BB22
      | True -> goto BB20
      end
  }
  BB20 {
    assume { Resolve5.resolve elem_2 };
    assume { Resolve6.resolve iter_13 };
    assume { Resolve8.resolve vec_1 };
    assert { [@expl:assertion] [#"../hillel.rs" 87 28 87 73] Contains0.contains (DeepModel0.deep_model vec_1) (DeepModel2.deep_model elem_2) };
    goto BB21
  }
  BB21 {
    _41 <- ();
    _0 <- ();
    goto BB25
  }
  BB22 {
    _25 <- ();
    goto BB11
  }
  BB23 {
    _44 <- ();
    _47 <- borrow_mut ( * vec_1);
    vec_1 <- { vec_1 with current = ( ^ _47) };
    _48 <- elem_2;
    elem_2 <- any t;
    _46 <- ([#"../hillel.rs" 93 4 93 18] Push0.push _47 _48);
    goto BB24
  }
  BB24 {
    assume { Resolve8.resolve vec_1 };
    _0 <- ();
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
end
module CreusotContracts_Logic_Seq_Impl0_New_Stub
  type t
  use seq.Seq
  function new (_1' : ()) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_New_Interface
  type t
  use seq.Seq
  function new (_1' : ()) : Seq.seq t
  val new (_1' : ()) : Seq.seq t
    ensures { result = new _1' }
    
end
module CreusotContracts_Logic_Seq_Impl0_New
  type t
  use seq.Seq
  function new (_1' : ()) : Seq.seq t =
    [#"../../../../creusot-contracts/src/logic/seq.rs" 15 8 15 19] Seq.empty 
  val new (_1' : ()) : Seq.seq t
    ensures { result = new _1' }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use seq.Seq
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) - DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve
  type t
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (IndexLogic0.index_logic self i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val new (_1' : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 59 26 59 44] Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val len (self : slice t) : usize
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 232 0 325 1] Seq.length (ShallowModel0.shallow_model self) = UIntSize.to_int result }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module Core_Iter_Range_Impl3_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = a
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  val next (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 89 26 92 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Slice_Impl1_DeepModel_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : slice t) : Seq.seq DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Slice_Impl1_DeepModel_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : slice t) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : slice t) : Seq.seq DeepModelTy0.deepModelTy
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 31 14 31 41] Seq.length (ShallowModel0.shallow_model self) = Seq.length result }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 32 4 32 95] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = DeepModel0.deep_model (IndexLogic0.index_logic self i) }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 32 4 32 95] forall i : int . 0 <= i /\ i < Seq.length (deep_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (IndexLogic0.index_logic self i)) && ([#"../../../../creusot-contracts/src/std/slice.rs" 31 14 31 41] Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self))
end
module CreusotContracts_Std1_Slice_Impl1_DeepModel
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : slice t) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : slice t) : Seq.seq DeepModelTy0.deepModelTy
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 31 14 31 41] Seq.length (ShallowModel0.shallow_model self) = Seq.length result }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 32 4 32 95] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = DeepModel0.deep_model (IndexLogic0.index_logic self i) }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 32 4 32 95] forall i : int . 0 <= i /\ i < Seq.length (deep_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (IndexLogic0.index_logic self i)) && ([#"../../../../creusot-contracts/src/std/slice.rs" 31 14 31 41] Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self))
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    ensures { [#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . [#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : () =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 30 4 30 10] ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    ensures { [#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . [#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    ensures { [#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 35 4 35 10] ()
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    ensures { [#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] Resolve0.resolve self /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start ( * self)) >= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module Hillel_Unique_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel2 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Hillel_IsSubset_Stub as IsSubset0 with
    type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel1 with
    type t = slice t,
    type DeepModelTy0.deepModelTy = Seq.seq DeepModelTy0.deepModelTy
  clone Hillel_IsUnique_Stub as IsUnique0 with
    type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub as DeepModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val unique [#"../hillel.rs" 99 0 99 56] (str : slice t) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../hillel.rs" 96 10 96 40] IsUnique0.is_unique (DeepModel0.deep_model result) }
    ensures { [#"../hillel.rs" 97 10 97 58] IsSubset0.is_subset (DeepModel0.deep_model result) (DeepModel1.deep_model str) }
    ensures { [#"../hillel.rs" 98 10 98 58] IsSubset0.is_subset (DeepModel1.deep_model str) (DeepModel0.deep_model result) }
    
end
module Hillel_Unique
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use prelude.IntSize
  use seq_ext.SeqExt
  use seq.Seq
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = t,
    type s = slice t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel2 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface as DeepModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl2_DeepModel as DeepModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type DeepModelTy0.deepModelTy = Seq.seq DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  use prelude.Int
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel4
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed0 with
    type idx = usize,
    predicate Resolve0.resolve = Resolve1.resolve,
    function DeepModel0.deep_model = DeepModel4.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces0 with
    type idx = usize,
    function DeepModel0.deep_model = DeepModel4.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface as ProducesTrans0 with
    type idx = usize,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface as ProducesRefl0 with
    type idx = usize,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant0 with
    type self = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = Core_Ops_Range_Range_Type.t_range usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate Invariant0.invariant' = Invariant0.invariant'
  use prelude.Ghost
  clone Hillel_Contains as Contains0 with
    type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Slice_Impl1_DeepModel_Interface as DeepModel3 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone Hillel_IsSubset as IsSubset0 with
    type t = DeepModelTy0.deepModelTy,
    predicate Contains0.contains = Contains0.contains
  clone Hillel_IsUnique as IsUnique0 with
    type t = DeepModelTy0.deepModelTy
  clone Hillel_InsertUnique_Interface as InsertUnique0 with
    type t = t,
    function DeepModel0.deep_model = DeepModel5.deep_model,
    predicate IsUnique0.is_unique = IsUnique0.is_unique,
    function DeepModel1.deep_model = DeepModel0.deep_model,
    predicate IsSubset0.is_subset = IsSubset0.is_subset,
    function DeepModel2.deep_model = DeepModel2.deep_model,
    predicate Contains0.contains = Contains0.contains,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = t
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve3 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Resolve0.resolve = Resolve4.resolve,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = slice t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Iter_Range_Impl3_Next_Interface as Next0 with
    type a = usize,
    type Item0.item = usize,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  clone Core_Slice_Impl0_Len_Interface as Len0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (Seq.seq t)
  clone CreusotContracts_Logic_Seq_Impl0_New as New1 with
    type t = t
  clone Alloc_Vec_Impl0_New_Interface as New0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel1 with
    type t = slice t,
    type DeepModelTy0.deepModelTy = Seq.seq DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel3.deep_model
  let rec cfg unique [#"../hillel.rs" 99 0 99 56] [@cfg:stackify] [@cfg:subregion_analysis] (str : slice t) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../hillel.rs" 96 10 96 40] IsUnique0.is_unique (DeepModel0.deep_model result) }
    ensures { [#"../hillel.rs" 97 10 97 58] IsSubset0.is_subset (DeepModel0.deep_model result) (DeepModel1.deep_model str) }
    ensures { [#"../hillel.rs" 98 10 98 58] IsSubset0.is_subset (DeepModel1.deep_model str) (DeepModel0.deep_model result) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var str_1 : slice t;
  var unique_5 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var sub_str_6 : Ghost.ghost_ty (Seq.seq t);
  var _8 : ();
  var iter_9 : Core_Ops_Range_Range_Type.t_range usize;
  var _10 : Core_Ops_Range_Range_Type.t_range usize;
  var _11 : usize;
  var _12 : slice t;
  var iter_old_13 : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range usize);
  var produced_15 : Ghost.ghost_ty (Seq.seq usize);
  var _22 : ();
  var _23 : Core_Option_Option_Type.t_option usize;
  var _24 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _25 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _26 : isize;
  var __creusot_proc_iter_elem_27 : usize;
  var _28 : Ghost.ghost_ty (Seq.seq usize);
  var i_30 : usize;
  var elem_31 : t;
  var _32 : usize;
  var _33 : usize;
  var _34 : bool;
  var _35 : ();
  var _36 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _37 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _38 : t;
  var _39 : Ghost.ghost_ty (Seq.seq t);
  var _41 : ();
  var _42 : ();
  var _44 : ();
  {
    str_1 <- str;
    goto BB0
  }
  BB0 {
    unique_5 <- ([#"../hillel.rs" 100 21 100 31] New0.new ());
    goto BB1
  }
  BB1 {
    sub_str_6 <- ([#"../hillel.rs" 101 37 101 58] Ghost.new (New1.new ()));
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve sub_str_6 };
    _12 <- str_1;
    _11 <- ([#"../hillel.rs" 106 16 106 25] Len0.len _12);
    goto BB3
  }
  BB3 {
    _10 <- Core_Ops_Range_Range_Type.C_Range ([#"../hillel.rs" 106 13 106 14] (0 : usize)) _11;
    iter_9 <- ([#"../hillel.rs" 103 4 103 48] IntoIter0.into_iter _10);
    goto BB4
  }
  BB4 {
    iter_old_13 <- ([#"../hillel.rs" 103 4 103 48] Ghost.new iter_9);
    goto BB5
  }
  BB5 {
    produced_15 <- ([#"../hillel.rs" 103 4 103 48] Ghost.new (Seq.empty ));
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant { [#"../hillel.rs" 103 4 103 48] Invariant0.invariant' iter_9 };
    invariant { [#"../hillel.rs" 103 4 103 48] Produces0.produces (Ghost.inner iter_old_13) (Ghost.inner produced_15) iter_9 };
    invariant { [#"../hillel.rs" 103 16 103 46] IsUnique0.is_unique (DeepModel0.deep_model unique_5) };
    invariant { [#"../hillel.rs" 104 16 104 64] IsSubset0.is_subset (DeepModel0.deep_model unique_5) (DeepModel1.deep_model str_1) };
    invariant { [#"../hillel.rs" 105 16 105 95] IsSubset0.is_subset (SeqExt.subsequence (DeepModel1.deep_model str_1) 0 (Seq.length (Ghost.inner produced_15))) (DeepModel0.deep_model unique_5) };
    goto BB11
  }
  BB11 {
    _25 <- borrow_mut iter_9;
    iter_9 <-  ^ _25;
    _24 <- borrow_mut ( * _25);
    _25 <- { _25 with current = ( ^ _24) };
    _23 <- ([#"../hillel.rs" 103 4 103 48] Next0.next _24);
    goto BB12
  }
  BB12 {
    assume { Resolve1.resolve _25 };
    switch (_23)
      | Core_Option_Option_Type.C_None -> goto BB13
      | Core_Option_Option_Type.C_Some _ -> goto BB14
      end
  }
  BB13 {
    assume { Resolve2.resolve str_1 };
    _8 <- ();
    assert { [@expl:assertion] [#"../hillel.rs" 112 20 112 95] IsSubset0.is_subset (SeqExt.subsequence (DeepModel1.deep_model str_1) 0 (Seq.length (ShallowModel0.shallow_model str_1))) (DeepModel0.deep_model unique_5) };
    goto BB21
  }
  BB14 {
    goto BB16
  }
  BB15 {
    assume { Resolve2.resolve str_1 };
    assume { Resolve3.resolve unique_5 };
    absurd
  }
  BB16 {
    __creusot_proc_iter_elem_27 <- Core_Option_Option_Type.some_0 _23;
    _28 <- ([#"../hillel.rs" 103 4 103 48] Ghost.new (Seq.(++) (Ghost.inner produced_15) (Seq.singleton __creusot_proc_iter_elem_27)));
    goto BB17
  }
  BB17 {
    produced_15 <- _28;
    _28 <- any Ghost.ghost_ty (Seq.seq usize);
    i_30 <- __creusot_proc_iter_elem_27;
    _32 <- i_30;
    _33 <- Slice.length str_1;
    _34 <- ([#"../hillel.rs" 107 22 107 28] _32 < _33);
    assert { [@expl:index in bounds] [#"../hillel.rs" 107 22 107 28] _34 };
    goto BB18
  }
  BB18 {
    elem_31 <- Slice.get str_1 _32;
    _37 <- borrow_mut unique_5;
    unique_5 <-  ^ _37;
    _36 <- borrow_mut ( * _37);
    _37 <- { _37 with current = ( ^ _36) };
    _38 <- elem_31;
    assume { Resolve4.resolve elem_31 };
    _35 <- ([#"../hillel.rs" 108 8 108 40] InsertUnique0.insert_unique _36 _38);
    goto BB19
  }
  BB19 {
    assume { Resolve5.resolve _37 };
    _39 <- ([#"../hillel.rs" 109 18 109 47] Ghost.new (Seq.snoc (Ghost.inner sub_str_6) elem_31));
    goto BB20
  }
  BB20 {
    sub_str_6 <- _39;
    _39 <- any Ghost.ghost_ty (Seq.seq t);
    assume { Resolve0.resolve sub_str_6 };
    _22 <- ();
    goto BB10
  }
  BB21 {
    _42 <- ();
    assert { [@expl:assertion] [#"../hillel.rs" 113 20 113 88] Seq.(==) (SeqExt.subsequence (DeepModel1.deep_model str_1) 0 (Seq.length (ShallowModel0.shallow_model str_1))) (DeepModel1.deep_model str_1) };
    _44 <- ();
    _0 <- unique_5;
    unique_5 <- any Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
    goto BB22
  }
  BB22 {
    return _0
  }
  
end
module Hillel_SumRange_Stub
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  function sum_range [#"../hillel.rs" 121 0 121 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
end
module Hillel_SumRange_Interface
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  function sum_range [#"../hillel.rs" 121 0 121 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  val sum_range [#"../hillel.rs" 121 0 121 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
    requires {[#"../hillel.rs" 119 11 119 53] 0 <= from /\ from <= to' /\ to' <= Seq.length seq}
    ensures { [#"../hillel.rs" 120 10 120 21] result >= 0 }
    ensures { result = sum_range seq from to' }
    
  axiom sum_range_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([#"../hillel.rs" 119 11 119 53] 0 <= from /\ from <= to' /\ to' <= Seq.length seq) -> ([#"../hillel.rs" 120 10 120 21] sum_range seq from to' >= 0)
end
module Hillel_SumRange
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  function sum_range [#"../hillel.rs" 121 0 121 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  val sum_range [#"../hillel.rs" 121 0 121 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
    requires {[#"../hillel.rs" 119 11 119 53] 0 <= from /\ from <= to' /\ to' <= Seq.length seq}
    ensures { [#"../hillel.rs" 120 10 120 21] result >= 0 }
    ensures { result = sum_range seq from to' }
    
  axiom def : forall seq : Seq.seq uint32, from : int, to' : int . sum_range seq from to' = ([#"../hillel.rs" 117 0 117 8] if to' - from > 0 then
    UInt32.to_int (Seq.get seq from) + sum_range seq (from + 1) to'
  else
    0
  )
  axiom sum_range_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([#"../hillel.rs" 119 11 119 53] 0 <= from /\ from <= to' /\ to' <= Seq.length seq) -> ([#"../hillel.rs" 120 10 120 21] sum_range seq from to' >= 0)
end
module Hillel_SumRange_Impl
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  let rec ghost function sum_range [#"../hillel.rs" 121 0 121 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
    requires {[#"../hillel.rs" 119 11 119 53] 0 <= from /\ from <= to' /\ to' <= Seq.length seq}
    ensures { [#"../hillel.rs" 120 10 120 21] result >= 0 }
    variant {[#"../hillel.rs" 118 10 118 19] to' - from}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hillel.rs" 117 0 117 8] if pure {to' - from > 0} then
      UInt32.to_int (Seq.get seq from) + sum_range seq (from + 1) to'
    else
      0
    
end
module Hillel_SumRangeSplit_Stub
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  clone Hillel_SumRange_Stub as SumRange0 with
    axiom .
  function sum_range_split [#"../hillel.rs" 133 0 133 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
end
module Hillel_SumRangeSplit_Interface
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  clone Hillel_SumRange_Stub as SumRange0 with
    axiom .
  function sum_range_split [#"../hillel.rs" 133 0 133 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
  val sum_range_split [#"../hillel.rs" 133 0 133 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
    requires {[#"../hillel.rs" 131 11 131 63] 0 <= from /\ from <= i /\ i <= to' /\ to' <= Seq.length seq}
    ensures { [#"../hillel.rs" 132 10 132 85] SumRange0.sum_range seq from to' = SumRange0.sum_range seq from i + SumRange0.sum_range seq i to' }
    ensures { result = sum_range_split seq from to' i }
    
  axiom sum_range_split_spec : forall seq : Seq.seq uint32, from : int, to' : int, i : int . ([#"../hillel.rs" 131 11 131 63] 0 <= from /\ from <= i /\ i <= to' /\ to' <= Seq.length seq) -> ([#"../hillel.rs" 132 10 132 85] SumRange0.sum_range seq from to' = SumRange0.sum_range seq from i + SumRange0.sum_range seq i to')
end
module Hillel_SumRangeSplit
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  clone Hillel_SumRange_Stub as SumRange0 with
    axiom .
  function sum_range_split [#"../hillel.rs" 133 0 133 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
  val sum_range_split [#"../hillel.rs" 133 0 133 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
    requires {[#"../hillel.rs" 131 11 131 63] 0 <= from /\ from <= i /\ i <= to' /\ to' <= Seq.length seq}
    ensures { [#"../hillel.rs" 132 10 132 85] SumRange0.sum_range seq from to' = SumRange0.sum_range seq from i + SumRange0.sum_range seq i to' }
    ensures { result = sum_range_split seq from to' i }
    
  axiom def : forall seq : Seq.seq uint32, from : int, to' : int, i : int . sum_range_split seq from to' i = ([#"../hillel.rs" 134 4 136 5] if i > from then
    let _ = sum_range_split seq (from + 1) to' i in ()
  else
    ()
  )
  axiom sum_range_split_spec : forall seq : Seq.seq uint32, from : int, to' : int, i : int . ([#"../hillel.rs" 131 11 131 63] 0 <= from /\ from <= i /\ i <= to' /\ to' <= Seq.length seq) -> ([#"../hillel.rs" 132 10 132 85] SumRange0.sum_range seq from to' = SumRange0.sum_range seq from i + SumRange0.sum_range seq i to')
end
module Hillel_SumRangeSplit_Impl
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  clone Hillel_SumRange as SumRange0 with
    axiom .
  let rec ghost function sum_range_split [#"../hillel.rs" 133 0 133 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
    requires {[#"../hillel.rs" 131 11 131 63] 0 <= from /\ from <= i /\ i <= to' /\ to' <= Seq.length seq}
    ensures { [#"../hillel.rs" 132 10 132 85] SumRange0.sum_range seq from to' = SumRange0.sum_range seq from i + SumRange0.sum_range seq i to' }
    variant {[#"../hillel.rs" 130 10 130 18] i - from}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hillel.rs" 134 4 136 5] if pure {i > from} then let _ = sum_range_split seq (from + 1) to' i in () else ()
end
module CreusotContracts_Logic_Int_Impl0_AbsDiff_Stub
  use prelude.Int
  function abs_diff (self : int) (other : int) : int
end
module CreusotContracts_Logic_Int_Impl0_AbsDiff_Interface
  use prelude.Int
  function abs_diff (self : int) (other : int) : int
  val abs_diff (self : int) (other : int) : int
    ensures { result = abs_diff self other }
    
end
module CreusotContracts_Logic_Int_Impl0_AbsDiff
  use prelude.Int
  function abs_diff (self : int) (other : int) : int =
    [#"../../../../creusot-contracts/src/logic/int.rs" 50 4 50 12] if self < other then other - self else self - other
  val abs_diff (self : int) (other : int) : int
    ensures { result = abs_diff self other }
    
end
module Hillel_Score_Stub
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  clone Hillel_SumRange_Stub as SumRange0 with
    axiom .
  function score [#"../hillel.rs" 143 0 143 38] (seq : Seq.seq uint32) (i : int) : int
end
module Hillel_Score_Interface
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  clone Hillel_SumRange_Stub as SumRange0 with
    axiom .
  function score [#"../hillel.rs" 143 0 143 38] (seq : Seq.seq uint32) (i : int) : int
  val score [#"../hillel.rs" 143 0 143 38] (seq : Seq.seq uint32) (i : int) : int
    requires {[#"../hillel.rs" 140 11 140 35] 0 <= i /\ i <= Seq.length seq}
    ensures { [#"../hillel.rs" 141 10 141 64] 0 <= result /\ result <= SumRange0.sum_range seq 0 (Seq.length seq) }
    ensures { [#"../hillel.rs" 142 0 142 79] 0 = i \/ i = Seq.length seq -> result = SumRange0.sum_range seq 0 (Seq.length seq) }
    ensures { result = score seq i }
    
  axiom score_spec : forall seq : Seq.seq uint32, i : int . ([#"../hillel.rs" 140 11 140 35] 0 <= i /\ i <= Seq.length seq) -> ([#"../hillel.rs" 142 0 142 79] 0 = i \/ i = Seq.length seq -> score seq i = SumRange0.sum_range seq 0 (Seq.length seq)) && ([#"../hillel.rs" 141 10 141 64] 0 <= score seq i /\ score seq i <= SumRange0.sum_range seq 0 (Seq.length seq))
end
module Hillel_Score
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  clone CreusotContracts_Logic_Int_Impl0_AbsDiff_Stub as AbsDiff0
  clone Hillel_SumRange_Stub as SumRange0 with
    axiom .
  clone Hillel_SumRangeSplit_Stub as SumRangeSplit0 with
    function SumRange0.sum_range = SumRange0.sum_range,
    axiom .
  function score [#"../hillel.rs" 143 0 143 38] (seq : Seq.seq uint32) (i : int) : int =
    [#"../hillel.rs" 144 4 144 41] let _ = SumRangeSplit0.sum_range_split seq 0 (Seq.length seq) i in AbsDiff0.abs_diff (SumRange0.sum_range seq 0 i) (SumRange0.sum_range seq i (Seq.length seq))
  val score [#"../hillel.rs" 143 0 143 38] (seq : Seq.seq uint32) (i : int) : int
    requires {[#"../hillel.rs" 140 11 140 35] 0 <= i /\ i <= Seq.length seq}
    ensures { [#"../hillel.rs" 141 10 141 64] 0 <= result /\ result <= SumRange0.sum_range seq 0 (Seq.length seq) }
    ensures { [#"../hillel.rs" 142 0 142 79] 0 = i \/ i = Seq.length seq -> result = SumRange0.sum_range seq 0 (Seq.length seq) }
    ensures { result = score seq i }
    
  axiom score_spec : forall seq : Seq.seq uint32, i : int . ([#"../hillel.rs" 140 11 140 35] 0 <= i /\ i <= Seq.length seq) -> ([#"../hillel.rs" 142 0 142 79] 0 = i \/ i = Seq.length seq -> score seq i = SumRange0.sum_range seq 0 (Seq.length seq)) && ([#"../hillel.rs" 141 10 141 64] 0 <= score seq i /\ score seq i <= SumRange0.sum_range seq 0 (Seq.length seq))
end
module Hillel_Score_Impl
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  clone CreusotContracts_Logic_Int_Impl0_AbsDiff as AbsDiff0
  clone Hillel_SumRange as SumRange0 with
    axiom .
  clone Hillel_SumRangeSplit as SumRangeSplit0 with
    function SumRange0.sum_range = SumRange0.sum_range,
    axiom .
  let rec ghost function score [#"../hillel.rs" 143 0 143 38] (seq : Seq.seq uint32) (i : int) : int
    requires {[#"../hillel.rs" 140 11 140 35] 0 <= i /\ i <= Seq.length seq}
    ensures { [#"../hillel.rs" 141 10 141 64] 0 <= result /\ result <= SumRange0.sum_range seq 0 (Seq.length seq) }
    ensures { [#"../hillel.rs" 142 0 142 79] 0 = i \/ i = Seq.length seq -> result = SumRange0.sum_range seq 0 (Seq.length seq) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hillel.rs" 144 4 144 41] let _ = SumRangeSplit0.sum_range_split seq 0 (Seq.length seq) i in let a' = SumRange0.sum_range seq 0 i in let b' = SumRange0.sum_range seq i (Seq.length seq) in AbsDiff0.abs_diff a' b'
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPre_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  predicate into_iter_pre (self : slice t)
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPre_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  predicate into_iter_pre (self : slice t)
  val into_iter_pre (self : slice t) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPre
  type t
  use prelude.Borrow
  use prelude.Slice
  predicate into_iter_pre (self : slice t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 331 20 331 24] true
  val into_iter_pre (self : slice t) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPost_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate into_iter_post (self : slice t) (res : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPost_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate into_iter_post (self : slice t) (res : Core_Slice_Iter_Iter_Type.t_iter t)
  val into_iter_post (self : slice t) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPost
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  predicate into_iter_post (self : slice t) (res : Core_Slice_Iter_Iter_Type.t_iter t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 337 20 337 32] self = ShallowModel0.shallow_model res
  val into_iter_post (self : slice t) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Slice_Iter_Impl0_IntoIter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl11_IntoIterPost_Stub as IntoIterPost0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl11_IntoIterPre_Stub as IntoIterPre0 with
    type t = t
  val into_iter (self : slice t) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {[#"../../../../creusot-contracts/src/std/iter.rs" 83 0 151 1] IntoIterPre0.into_iter_pre self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 83 0 151 1] IntoIterPost0.into_iter_post self result }
    ensures { Invariant0.invariant' result }
    
end
module Core_Num_Impl8_AbsDiff_Interface
  use prelude.UInt32
  use prelude.Int
  clone CreusotContracts_Logic_Int_Impl0_AbsDiff_Stub as AbsDiff0
  val abs_diff (self : uint32) (other : uint32) : uint32
    ensures { [#"../../../../creusot-contracts/src/std/num.rs" 212 26 212 59] UInt32.to_int result = AbsDiff0.abs_diff (UInt32.to_int self) (UInt32.to_int other) }
    
end
module Hillel_Fulcrum_Interface
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use prelude.UInt32
  use seq.Seq
  clone Hillel_SumRange_Stub as SumRange0 with
    axiom .
  clone Hillel_Score_Stub as Score0 with
    function SumRange0.sum_range = SumRange0.sum_range,
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32
  val fulcrum [#"../hillel.rs" 155 0 155 30] (s : slice uint32) : usize
    requires {[#"../hillel.rs" 151 11 151 45] SumRange0.sum_range (ShallowModel0.shallow_model s) 0 (Seq.length (ShallowModel0.shallow_model s)) <= 1000}
    requires {[#"../hillel.rs" 152 11 152 23] Seq.length (ShallowModel0.shallow_model s) > 0}
    ensures { [#"../hillel.rs" 153 10 153 44] 0 <= UIntSize.to_int result /\ UIntSize.to_int result < Seq.length (ShallowModel0.shallow_model s) }
    ensures { [#"../hillel.rs" 154 0 154 88] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model s) -> Score0.score (ShallowModel0.shallow_model s) (UIntSize.to_int result) <= Score0.score (ShallowModel0.shallow_model s) i }
    
end
module Hillel_Fulcrum
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use prelude.UInt32
  use prelude.Ghost
  use seq.Seq
  use prelude.IntSize
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface as ShallowModel2 with
    type t = uint32
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel3 with
    type t = Core_Slice_Iter_Iter_Type.t_iter uint32,
    type ShallowModelTy0.shallowModelTy = slice uint32,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Core_Num_Impl11_Max as Max0
  use prelude.Int
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel0
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed1 with
    type idx = usize,
    predicate Resolve0.resolve = Resolve1.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces1 with
    type idx = usize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface as ProducesTrans1 with
    type idx = usize,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface as ProducesRefl1 with
    type idx = usize,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant1 with
    type self = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited1 with
    type self = Core_Ops_Range_Range_Type.t_range usize,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost1 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre1 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = uint32,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter uint32
  clone CreusotContracts_Std1_Slice_Impl15_Completed as Completed0 with
    type t = uint32,
    predicate Resolve0.resolve = Resolve0.resolve,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = uint32,
    type s = slice uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface as ToRefSeq0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_Produces as Produces0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Slice_Impl15_ProducesTrans as ProducesTrans0 with
    type t = uint32,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_ProducesRefl as ProducesRefl0 with
    type t = uint32,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter uint32
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl11_IntoIterPost as IntoIterPost0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Slice_Impl11_IntoIterPre as IntoIterPre0 with
    type t = uint32
  clone CreusotContracts_Logic_Int_Impl0_AbsDiff as AbsDiff1
  clone Hillel_SumRange as SumRange0 with
    axiom .
  clone Hillel_SumRangeSplit as SumRangeSplit0 with
    function SumRange0.sum_range = SumRange0.sum_range,
    axiom .
  clone Core_Num_Impl8_AbsDiff_Interface as AbsDiff0 with
    function AbsDiff0.abs_diff = AbsDiff1.abs_diff
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Iter_Range_Impl3_Next_Interface as Next1 with
    type a = usize,
    type Item0.item = usize,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter1 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre1.into_iter_pre,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IntoIterPost0.into_iter_post = IntoIterPost1.into_iter_post
  clone Core_Slice_Impl0_Len_Interface as Len0 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with
    type t = uint32,
    type Item0.item = uint32,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone Core_Slice_Iter_Impl0_IntoIter_Interface as IntoIter0 with
    type t = uint32,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Hillel_Score as Score0 with
    function SumRange0.sum_range = SumRange0.sum_range,
    function SumRangeSplit0.sum_range_split = SumRangeSplit0.sum_range_split,
    function AbsDiff0.abs_diff = AbsDiff1.abs_diff,
    axiom .
  let rec cfg fulcrum [#"../hillel.rs" 155 0 155 30] [@cfg:stackify] [@cfg:subregion_analysis] (s : slice uint32) : usize
    requires {[#"../hillel.rs" 151 11 151 45] SumRange0.sum_range (ShallowModel0.shallow_model s) 0 (Seq.length (ShallowModel0.shallow_model s)) <= 1000}
    requires {[#"../hillel.rs" 152 11 152 23] Seq.length (ShallowModel0.shallow_model s) > 0}
    ensures { [#"../hillel.rs" 153 10 153 44] 0 <= UIntSize.to_int result /\ UIntSize.to_int result < Seq.length (ShallowModel0.shallow_model s) }
    ensures { [#"../hillel.rs" 154 0 154 88] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model s) -> Score0.score (ShallowModel0.shallow_model s) (UIntSize.to_int result) <= Score0.score (ShallowModel0.shallow_model s) i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var s_1 : slice uint32;
  var total_6 : uint32;
  var _7 : ();
  var iter_8 : Core_Slice_Iter_Iter_Type.t_iter uint32;
  var _9 : slice uint32;
  var iter_old_10 : Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter uint32);
  var produced_12 : Ghost.ghost_ty (Seq.seq uint32);
  var _18 : ();
  var _19 : Core_Option_Option_Type.t_option uint32;
  var _20 : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32);
  var _21 : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32);
  var _22 : isize;
  var __creusot_proc_iter_elem_23 : uint32;
  var _24 : Ghost.ghost_ty (Seq.seq uint32);
  var x_26 : uint32;
  var _27 : uint32;
  var _28 : ();
  var _29 : ();
  var min_i_31 : usize;
  var min_dist_32 : uint32;
  var sum_33 : uint32;
  var _34 : ();
  var iter_35 : Core_Ops_Range_Range_Type.t_range usize;
  var _36 : Core_Ops_Range_Range_Type.t_range usize;
  var _37 : usize;
  var _38 : slice uint32;
  var iter_old_39 : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range usize);
  var produced_41 : Ghost.ghost_ty (Seq.seq usize);
  var _50 : Core_Option_Option_Type.t_option usize;
  var _51 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _52 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _53 : isize;
  var __creusot_proc_iter_elem_54 : usize;
  var _55 : Ghost.ghost_ty (Seq.seq usize);
  var i_57 : usize;
  var dist_58 : uint32;
  var _59 : uint32;
  var _60 : uint32;
  var _61 : uint32;
  var _62 : uint32;
  var _63 : ();
  var _64 : bool;
  var _65 : uint32;
  var _66 : uint32;
  var _67 : usize;
  var _68 : uint32;
  var _69 : uint32;
  var _70 : usize;
  var _71 : usize;
  var _72 : bool;
  var _73 : ();
  {
    s_1 <- s;
    goto BB0
  }
  BB0 {
    total_6 <- ([#"../hillel.rs" 156 25 156 26] (0 : uint32));
    _9 <- s_1;
    iter_8 <- ([#"../hillel.rs" 158 4 158 60] IntoIter0.into_iter _9);
    goto BB1
  }
  BB1 {
    iter_old_10 <- ([#"../hillel.rs" 158 4 158 60] Ghost.new iter_8);
    goto BB2
  }
  BB2 {
    produced_12 <- ([#"../hillel.rs" 158 4 158 60] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"../hillel.rs" 158 4 158 60] Invariant0.invariant' iter_8 };
    invariant { [#"../hillel.rs" 158 4 158 60] Produces0.produces (Ghost.inner iter_old_10) (Ghost.inner produced_12) iter_8 };
    invariant { [#"../hillel.rs" 158 16 158 58] UInt32.to_int total_6 = SumRange0.sum_range (ShallowModel0.shallow_model s_1) 0 (Seq.length (Ghost.inner produced_12)) };
    invariant { [#"../hillel.rs" 159 16 159 52] UInt32.to_int total_6 <= SumRange0.sum_range (ShallowModel0.shallow_model s_1) 0 (Seq.length (ShallowModel0.shallow_model s_1)) };
    goto BB5
  }
  BB5 {
    _21 <- borrow_mut iter_8;
    iter_8 <-  ^ _21;
    _20 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    _19 <- ([#"../hillel.rs" 158 4 158 60] Next0.next _20);
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve _21 };
    switch (_19)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB7 {
    _7 <- ();
    assert { [@expl:assertion] [#"../hillel.rs" 164 20 164 56] UInt32.to_int total_6 = SumRange0.sum_range (ShallowModel0.shallow_model s_1) 0 (Seq.length (ShallowModel0.shallow_model s_1)) };
    _29 <- ();
    min_i_31 <- ([#"../hillel.rs" 166 27 166 28] (0 : usize));
    min_dist_32 <- total_6;
    sum_33 <- ([#"../hillel.rs" 169 23 169 24] (0 : uint32));
    _38 <- s_1;
    _37 <- ([#"../hillel.rs" 175 16 175 23] Len0.len _38);
    goto BB12
  }
  BB8 {
    goto BB10
  }
  BB9 {
    absurd
  }
  BB10 {
    __creusot_proc_iter_elem_23 <- Core_Option_Option_Type.some_0 _19;
    _24 <- ([#"../hillel.rs" 158 4 158 60] Ghost.new (Seq.(++) (Ghost.inner produced_12) (Seq.singleton __creusot_proc_iter_elem_23)));
    goto BB11
  }
  BB11 {
    produced_12 <- _24;
    _24 <- any Ghost.ghost_ty (Seq.seq uint32);
    x_26 <- __creusot_proc_iter_elem_23;
    _27 <- x_26;
    total_6 <- ([#"../hillel.rs" 161 8 161 18] total_6 + _27);
    _18 <- ();
    goto BB4
  }
  BB12 {
    _36 <- Core_Ops_Range_Range_Type.C_Range ([#"../hillel.rs" 175 13 175 14] (0 : usize)) _37;
    iter_35 <- ([#"../hillel.rs" 170 4 170 58] IntoIter1.into_iter _36);
    goto BB13
  }
  BB13 {
    iter_old_39 <- ([#"../hillel.rs" 170 4 170 58] Ghost.new iter_35);
    goto BB14
  }
  BB14 {
    produced_41 <- ([#"../hillel.rs" 170 4 170 58] Ghost.new (Seq.empty ));
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    invariant { [#"../hillel.rs" 170 4 170 58] Invariant1.invariant' iter_35 };
    invariant { [#"../hillel.rs" 170 4 170 58] Produces1.produces (Ghost.inner iter_old_39) (Ghost.inner produced_41) iter_35 };
    invariant { [#"../hillel.rs" 170 16 170 56] UInt32.to_int sum_33 = SumRange0.sum_range (ShallowModel0.shallow_model s_1) 0 (Seq.length (Ghost.inner produced_41)) };
    invariant { [#"../hillel.rs" 171 16 171 30] UInt32.to_int sum_33 <= UInt32.to_int total_6 };
    invariant { [#"../hillel.rs" 172 16 172 61] UIntSize.to_int min_i_31 <= Seq.length (Ghost.inner produced_41) /\ UIntSize.to_int min_i_31 < Seq.length (ShallowModel0.shallow_model s_1) };
    invariant { [#"../hillel.rs" 173 16 173 46] UInt32.to_int min_dist_32 = Score0.score (ShallowModel0.shallow_model s_1) (UIntSize.to_int min_i_31) };
    invariant { [#"../hillel.rs" 170 4 170 58] forall j : int . 0 <= j /\ j < Seq.length (Ghost.inner produced_41) -> Score0.score (ShallowModel0.shallow_model s_1) (UIntSize.to_int min_i_31) <= Score0.score (ShallowModel0.shallow_model s_1) j };
    goto BB17
  }
  BB17 {
    _52 <- borrow_mut iter_35;
    iter_35 <-  ^ _52;
    _51 <- borrow_mut ( * _52);
    _52 <- { _52 with current = ( ^ _51) };
    _50 <- ([#"../hillel.rs" 170 4 170 58] Next1.next _51);
    goto BB18
  }
  BB18 {
    assume { Resolve1.resolve _52 };
    switch (_50)
      | Core_Option_Option_Type.C_None -> goto BB19
      | Core_Option_Option_Type.C_Some _ -> goto BB20
      end
  }
  BB19 {
    _34 <- ();
    _0 <- min_i_31;
    return _0
  }
  BB20 {
    goto BB21
  }
  BB21 {
    __creusot_proc_iter_elem_54 <- Core_Option_Option_Type.some_0 _50;
    _55 <- ([#"../hillel.rs" 170 4 170 58] Ghost.new (Seq.(++) (Ghost.inner produced_41) (Seq.singleton __creusot_proc_iter_elem_54)));
    goto BB22
  }
  BB22 {
    produced_41 <- _55;
    _55 <- any Ghost.ghost_ty (Seq.seq usize);
    i_57 <- __creusot_proc_iter_elem_54;
    _59 <- sum_33;
    _61 <- total_6;
    _62 <- sum_33;
    _60 <- ([#"../hillel.rs" 176 32 176 43] _61 - _62);
    dist_58 <- ([#"../hillel.rs" 176 19 176 44] AbsDiff0.abs_diff _59 _60);
    goto BB23
  }
  BB23 {
    _65 <- dist_58;
    _66 <- min_dist_32;
    _64 <- ([#"../hillel.rs" 177 11 177 26] _65 < _66);
    switch (_64)
      | False -> goto BB25
      | True -> goto BB24
      end
  }
  BB24 {
    _67 <- i_57;
    min_i_31 <- _67;
    _67 <- any usize;
    _68 <- dist_58;
    min_dist_32 <- _68;
    _68 <- any uint32;
    _63 <- ();
    goto BB26
  }
  BB25 {
    _63 <- ();
    goto BB26
  }
  BB26 {
    _70 <- i_57;
    _71 <- Slice.length s_1;
    _72 <- ([#"../hillel.rs" 182 15 182 19] _70 < _71);
    assert { [@expl:index in bounds] [#"../hillel.rs" 182 15 182 19] _72 };
    goto BB27
  }
  BB27 {
    _69 <- Slice.get s_1 _70;
    sum_33 <- ([#"../hillel.rs" 182 8 182 19] sum_33 + _69);
    _18 <- ();
    goto BB16
  }
  BB29 {
    goto BB9
  }
  BB30 {
    goto BB9
  }
  
end
