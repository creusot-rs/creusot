module T_inc_some_2_tree__Tree [#"inc_some_2_tree.rs" 4 0 4 13]
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_Tree  =
    | C_Node (t_Tree) uint32 (t_Tree)
    | C_Leaf
  
  let rec v_Node (input:t_Tree) (ret  (field_0:t_Tree) (field_1:uint32) (field_2:t_Tree))= any
    [ good (field_0:t_Tree) (field_1:uint32) (field_2:t_Tree)-> {C_Node field_0 field_1 field_2 = input}
      (! ret {field_0} {field_1} {field_2})
    | bad -> {forall field_0 : t_Tree, field_1 : uint32, field_2 : t_Tree [C_Node field_0 field_1 field_2 : t_Tree] . C_Node field_0 field_1 field_2
      <> input}
      (! {false}
      any) ]
    
  
  let rec v_Leaf (input:t_Tree) (ret  )= any
    [ good -> {C_Leaf  = input} (! ret) | bad -> {C_Leaf  <> input} (! {false} any) ]
    
end
module M_inc_some_2_tree__qyi9454558703362393917__lemma_sum_nonneg [#"inc_some_2_tree.rs" 33 4 33 30] (* Tree *)
  let%span sinc_some_2_tree0 = "inc_some_2_tree.rs" 32 14 32 29
  let%span sinc_some_2_tree1 = "inc_some_2_tree.rs" 31 15 31 19
  let%span sinc_some_2_tree2 = "inc_some_2_tree.rs" 23 12 26 13
  let%span sinc_some_2_tree3 = "inc_some_2_tree.rs" 34 8 40 9
  
  use T_inc_some_2_tree__Tree as Tree'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  function sum'0 [#"inc_some_2_tree.rs" 21 4 21 23] (self : Tree'0.t_Tree) : int =
    [%#sinc_some_2_tree2] match self with
      | Tree'0.C_Node tl a tr -> sum'0 tl + UInt32.to_int a + sum'0 tr
      | Tree'0.C_Leaf -> 0
      end
  
  constant self  : Tree'0.t_Tree
  
  function lemma_sum_nonneg [#"inc_some_2_tree.rs" 33 4 33 30] (self : Tree'0.t_Tree) : ()
  
  goal vc_lemma_sum_nonneg : match self with
    | Tree'0.C_Node tl _ tr -> ([%#sinc_some_2_tree0] sum'0 tl >= 0)
     -> (let _ = lemma_sum_nonneg tl in ([%#sinc_some_2_tree0] sum'0 tr >= 0)
     -> (let _ = lemma_sum_nonneg tr in [%#sinc_some_2_tree0] sum'0 self >= 0))
    | Tree'0.C_Leaf -> [%#sinc_some_2_tree0] sum'0 self >= 0
    end
end
module M_inc_some_2_tree__qyi9454558703362393917__sum_x [#"inc_some_2_tree.rs" 45 4 45 26] (* Tree *)
  let%span sinc_some_2_tree0 = "inc_some_2_tree.rs" 55 20 55 21
  let%span sinc_some_2_tree1 = "inc_some_2_tree.rs" 49 20 49 41
  let%span sinc_some_2_tree2 = "inc_some_2_tree.rs" 43 15 43 38
  let%span sinc_some_2_tree3 = "inc_some_2_tree.rs" 44 14 44 35
  let%span sinc_some_2_tree4 = "inc_some_2_tree.rs" 32 14 32 29
  let%span sinc_some_2_tree5 = "inc_some_2_tree.rs" 31 15 31 19
  let%span sinc_some_2_tree6 = "inc_some_2_tree.rs" 34 8 40 9
  let%span sinc_some_2_tree7 = "inc_some_2_tree.rs" 23 12 26 13
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_inc_some_2_tree__Tree as Tree'0
  
  function sum'0 [#"inc_some_2_tree.rs" 21 4 21 23] (self : Tree'0.t_Tree) : int =
    [%#sinc_some_2_tree7] match self with
      | Tree'0.C_Node tl a tr -> sum'0 tl + UInt32.to_int a + sum'0 tr
      | Tree'0.C_Leaf -> 0
      end
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  function lemma_sum_nonneg'0 [#"inc_some_2_tree.rs" 33 4 33 30] (self : Tree'0.t_Tree) : ()
  
  axiom lemma_sum_nonneg'0_def : forall self : Tree'0.t_Tree . lemma_sum_nonneg'0 self
  = ([%#sinc_some_2_tree6] match self with
    | Tree'0.C_Node tl _ tr -> let _ = lemma_sum_nonneg'0 tl in let _ = lemma_sum_nonneg'0 tr in ()
    | Tree'0.C_Leaf -> ()
    end)
  
  axiom lemma_sum_nonneg'0_spec : forall self : Tree'0.t_Tree . [%#sinc_some_2_tree4] sum'0 self >= 0
  
  use prelude.prelude.UInt32
  
  meta "compute_max_steps" 1000000
  
  let rec sum_x (self:Tree'0.t_Tree) (return'  (ret:uint32))= {[%#sinc_some_2_tree2] sum'0 self <= 1000000}
    (! bb0
    [ bb0 = any
      [ br0 (a:Tree'0.t_Tree) (b:uint32) (c:Tree'0.t_Tree)-> {self = Tree'0.C_Node a b c} (! bb2)
      | br1 -> {self = Tree'0.C_Leaf } (! bb3) ]
      
    | bb3 = s0 [ s0 =  [ &_0 <- [%#sinc_some_2_tree0] (0 : uint32) ] s1 | s1 = bb7 ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = Tree'0.v_Node {self} (fun (r0'0:Tree'0.t_Tree) (r1'0:uint32) (r2'0:Tree'0.t_Tree) ->  [ &tl <- r0'0 ] s1)
      | s1 = Tree'0.v_Node {self} (fun (r0'1:Tree'0.t_Tree) (r1'1:uint32) (r2'1:Tree'0.t_Tree) ->  [ &a <- r1'1 ] s2)
      | s2 = Tree'0.v_Node {self} (fun (r0'2:Tree'0.t_Tree) (r1'2:uint32) (r2'2:Tree'0.t_Tree) ->  [ &tr <- r2'2 ] s3)
      | s3 = {[@expl:assertion] [%#sinc_some_2_tree1] let _ = lemma_sum_nonneg'0 tl in let _ = lemma_sum_nonneg'0 tr in true}
        s4
      | s4 = sum_x {tl} (fun (_ret':uint32) ->  [ &_11 <- _ret' ] s5)
      | s5 = bb5 ]
      
    | bb5 = s0
      [ s0 = UInt32.add {_11} {a} (fun (_ret':uint32) ->  [ &_10 <- _ret' ] s1)
      | s1 = sum_x {tr} (fun (_ret':uint32) ->  [ &_14 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0 [ s0 = UInt32.add {_10} {_14} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = return' {_0} ]
    )
    [ & _0 : uint32 = any_l ()
    | & self : Tree'0.t_Tree = self
    | & tl : Tree'0.t_Tree = any_l ()
    | & a : uint32 = any_l ()
    | & tr : Tree'0.t_Tree = any_l ()
    | & _10 : uint32 = any_l ()
    | & _11 : uint32 = any_l ()
    | & _14 : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [%#sinc_some_2_tree3] UInt32.to_int result = sum'0 self}
      (! return' {result}) ]
    
end
module M_inc_some_2_tree__qyi9454558703362393917__take_some_rest [#"inc_some_2_tree.rs" 63 4 63 57] (* Tree *)
  let%span sinc_some_2_tree0 = "inc_some_2_tree.rs" 67 20 67 42
  let%span sinc_some_2_tree1 = "inc_some_2_tree.rs" 71 19 71 27
  let%span sinc_some_2_tree2 = "inc_some_2_tree.rs" 72 28 72 36
  let%span sinc_some_2_tree3 = "inc_some_2_tree.rs" 73 26 73 34
  let%span sinc_some_2_tree4 = "inc_some_2_tree.rs" 59 14 60 72
  let%span sinc_some_2_tree5 = "inc_some_2_tree.rs" 61 14 61 37
  let%span sinc_some_2_tree6 = "inc_some_2_tree.rs" 62 14 62 42
  let%span sinc_some_2_tree7 = "inc_some_2_tree.rs" 32 14 32 29
  let%span sinc_some_2_tree8 = "inc_some_2_tree.rs" 31 15 31 19
  let%span sinc_some_2_tree9 = "inc_some_2_tree.rs" 34 8 40 9
  let%span sinc_some_2_tree10 = "inc_some_2_tree.rs" 23 12 26 13
  let%span smodel11 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve12 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  function view'0 (self : borrowed uint32) : int =
    [%#smodel11] UInt32.to_int self.current
  
  use T_inc_some_2_tree__Tree as Tree'0
  
  function sum'0 [#"inc_some_2_tree.rs" 21 4 21 23] (self : Tree'0.t_Tree) : int =
    [%#sinc_some_2_tree10] match self with
      | Tree'0.C_Node tl a tr -> sum'0 tl + UInt32.to_int a + sum'0 tr
      | Tree'0.C_Leaf -> 0
      end
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'5 (self : borrowed uint32) =
    [%#sresolve12] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed uint32) =
    resolve'5 _1
  
  predicate resolve'4 (self : borrowed (Tree'0.t_Tree)) =
    [%#sresolve12] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Tree'0.t_Tree)) =
    resolve'4 _1
  
  let rec random'0 (_1:()) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  
  function lemma_sum_nonneg'0 [#"inc_some_2_tree.rs" 33 4 33 30] (self : Tree'0.t_Tree) : ()
  
  axiom lemma_sum_nonneg'0_def : forall self : Tree'0.t_Tree . lemma_sum_nonneg'0 self
  = ([%#sinc_some_2_tree9] match self with
    | Tree'0.C_Node tl _ tr -> let _ = lemma_sum_nonneg'0 tl in let _ = lemma_sum_nonneg'0 tr in ()
    | Tree'0.C_Leaf -> ()
    end)
  
  axiom lemma_sum_nonneg'0_spec : forall self : Tree'0.t_Tree . [%#sinc_some_2_tree7] sum'0 self >= 0
  
  predicate resolve'3 (self : borrowed (Tree'0.t_Tree)) =
    [%#sresolve12] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Tree'0.t_Tree)) =
    resolve'3 _1
  
  meta "compute_max_steps" 1000000
  
  let rec take_some_rest (self:borrowed (Tree'0.t_Tree)) (return'  (ret:(borrowed uint32, borrowed (Tree'0.t_Tree))))= (! bb0
    [ bb0 = any
      [ br0 (a:Tree'0.t_Tree) (b:uint32) (c:Tree'0.t_Tree)-> {self.current = Tree'0.C_Node a b c} (! bb2)
      | br1 -> {self.current = Tree'0.C_Leaf } (! bb3) ]
      
    | bb3 = s0 [ s0 = -{resolve'0 self}- s1 | s1 = bb19 ] 
    | bb19 = bb19 [ bb19 = (! bb20) [ bb20 = bb19 ]  ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = Tree'0.v_Node {self.current}
          (fun (r0'0:Tree'0.t_Tree) (r1'0:uint32) (r2'0:Tree'0.t_Tree) ->
            Borrow.borrow_final <Tree'0.t_Tree> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Tree'0.t_Tree)) ->
                 [ &mtl <- _ret' ] 
                 [ &self <- { self with current = Tree'0.C_Node _ret'.final r1'0 r2'0 ; } ] 
                s1))
      | s1 = Tree'0.v_Node {self.current}
          (fun (r0'1:Tree'0.t_Tree) (r1'1:uint32) (r2'1:Tree'0.t_Tree) ->
            Borrow.borrow_final <uint32> {r1'1} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed uint32) ->
                 [ &ma <- _ret' ] 
                 [ &self <- { self with current = Tree'0.C_Node r0'1 _ret'.final r2'1 ; } ] 
                s2))
      | s2 = Tree'0.v_Node {self.current}
          (fun (r0'2:Tree'0.t_Tree) (r1'2:uint32) (r2'2:Tree'0.t_Tree) ->
            Borrow.borrow_final <Tree'0.t_Tree> {r2'2} {Borrow.inherit_id (Borrow.get_id self) 3}
              (fun (_ret':borrowed (Tree'0.t_Tree)) ->
                 [ &mtr <- _ret' ] 
                 [ &self <- { self with current = Tree'0.C_Node r0'2 r1'2 _ret'.final ; } ] 
                s3))
      | s3 = {[@expl:assertion] [%#sinc_some_2_tree0] let _ = lemma_sum_nonneg'0 mtl.current in let _ = lemma_sum_nonneg'0 mtr.current in true}
        s4
      | s4 = random'0 {[%#sinc_some_2_tree1] ()} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s5)
      | s5 = bb5 ]
      
    | bb5 = any [ br0 -> {_11 = false} (! bb11) | br1 -> {_11} (! bb6) ] 
    | bb6 = s0
      [ s0 = Borrow.borrow_final <uint32> {ma.current} {Borrow.get_id ma}
          (fun (_ret':borrowed uint32) ->  [ &_12 <- _ret' ]  [ &ma <- { ma with current = _ret'.final ; } ] s1)
      | s1 = random'0 {[%#sinc_some_2_tree2] ()} (fun (_ret':bool) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = any [ br0 -> {_15 = false} (! bb9) | br1 -> {_15} (! bb8) ] 
    | bb8 = s0
      [ s0 = -{resolve'1 mtr}- s1
      | s1 = Borrow.borrow_final <Tree'0.t_Tree> {mtl.current} {Borrow.get_id mtl}
          (fun (_ret':borrowed (Tree'0.t_Tree)) ->
             [ &_16 <- _ret' ] 
             [ &mtl <- { mtl with current = _ret'.final ; } ] 
            s2)
      | s2 = Borrow.borrow_final <Tree'0.t_Tree> {_16.current} {Borrow.get_id _16}
          (fun (_ret':borrowed (Tree'0.t_Tree)) ->
             [ &_14 <- _ret' ] 
             [ &_16 <- { _16 with current = _ret'.final ; } ] 
            s3)
      | s3 = -{resolve'0 _16}- s4
      | s4 = bb10 ]
      
    | bb9 = s0
      [ s0 = -{resolve'1 mtl}- s1
      | s1 = Borrow.borrow_final <Tree'0.t_Tree> {mtr.current} {Borrow.get_id mtr}
          (fun (_ret':borrowed (Tree'0.t_Tree)) ->
             [ &_14 <- _ret' ] 
             [ &mtr <- { mtr with current = _ret'.final ; } ] 
            s2)
      | s2 = bb10 ]
      
    | bb10 = s0
      [ s0 = Borrow.borrow_final <Tree'0.t_Tree> {_14.current} {Borrow.get_id _14}
          (fun (_ret':borrowed (Tree'0.t_Tree)) ->
             [ &_13 <- _ret' ] 
             [ &_14 <- { _14 with current = _ret'.final ; } ] 
            s1)
      | s1 =  [ &_0 <- (_12, _13) ] s2
      | s2 = -{resolve'0 _14}- s3
      | s3 = bb18 ]
      
    | bb11 = s0
      [ s0 = -{resolve'2 ma}- s1
      | s1 = random'0 {[%#sinc_some_2_tree3] ()} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s2)
      | s2 = bb12 ]
      
    | bb12 = any [ br0 -> {_17 = false} (! bb15) | br1 -> {_17} (! bb13) ] 
    | bb13 = s0
      [ s0 = -{resolve'1 mtr}- s1
      | s1 = Borrow.borrow_final <Tree'0.t_Tree> {mtl.current} {Borrow.get_id mtl}
          (fun (_ret':borrowed (Tree'0.t_Tree)) ->
             [ &_18 <- _ret' ] 
             [ &mtl <- { mtl with current = _ret'.final ; } ] 
            s2)
      | s2 = take_some_rest {_18} (fun (_ret':(borrowed uint32, borrowed (Tree'0.t_Tree))) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb14 ]
      
    | bb14 = bb17
    | bb15 = s0
      [ s0 = -{resolve'1 mtl}- s1
      | s1 = Borrow.borrow_final <Tree'0.t_Tree> {mtr.current} {Borrow.get_id mtr}
          (fun (_ret':borrowed (Tree'0.t_Tree)) ->
             [ &_19 <- _ret' ] 
             [ &mtr <- { mtr with current = _ret'.final ; } ] 
            s2)
      | s2 = take_some_rest {_19} (fun (_ret':(borrowed uint32, borrowed (Tree'0.t_Tree))) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb16 ]
      
    | bb16 = bb17
    | bb17 = bb18
    | bb18 = s0
      [ s0 = -{resolve'1 mtr}- s1
      | s1 = -{resolve'2 ma}- s2
      | s2 = -{resolve'1 mtl}- s3
      | s3 = -{resolve'0 self}- s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : (borrowed uint32, borrowed (Tree'0.t_Tree)) = any_l ()
    | & self : borrowed (Tree'0.t_Tree) = self
    | & mtl : borrowed (Tree'0.t_Tree) = any_l ()
    | & ma : borrowed uint32 = any_l ()
    | & mtr : borrowed (Tree'0.t_Tree) = any_l ()
    | & _11 : bool = any_l ()
    | & _12 : borrowed uint32 = any_l ()
    | & _13 : borrowed (Tree'0.t_Tree) = any_l ()
    | & _14 : borrowed (Tree'0.t_Tree) = any_l ()
    | & _15 : bool = any_l ()
    | & _16 : borrowed (Tree'0.t_Tree) = any_l ()
    | & _17 : bool = any_l ()
    | & _18 : borrowed (Tree'0.t_Tree) = any_l ()
    | & _19 : borrowed (Tree'0.t_Tree) = any_l () ]
    
    [ return' (result:(borrowed uint32, borrowed (Tree'0.t_Tree)))-> {[@expl:postcondition] [%#sinc_some_2_tree6] sum'0 (let (_, a) = result in a).current
      <= sum'0 self.current}
      {[@expl:postcondition] [%#sinc_some_2_tree5] view'0 (let (a, _) = result in a) <= sum'0 self.current}
      {[@expl:postcondition] [%#sinc_some_2_tree4] sum'0 self.final - sum'0 self.current
      = UInt32.to_int (let (a, _) = result in a).final + sum'0 (let (_, a) = result in a).final
      - view'0 (let (a, _) = result in a)
      - sum'0 (let (_, a) = result in a).current}
      (! return' {result}) ]
    
end
module M_inc_some_2_tree__inc_some_2_tree [#"inc_some_2_tree.rs" 85 0 85 51]
  let%span sinc_some_2_tree0 = "inc_some_2_tree.rs" 91 4 91 38
  let%span sinc_some_2_tree1 = "inc_some_2_tree.rs" 84 11 84 41
  let%span sinc_some_2_tree2 = "inc_some_2_tree.rs" 43 15 43 38
  let%span sinc_some_2_tree3 = "inc_some_2_tree.rs" 44 14 44 35
  let%span sinc_some_2_tree4 = "inc_some_2_tree.rs" 59 14 60 72
  let%span sinc_some_2_tree5 = "inc_some_2_tree.rs" 61 14 61 37
  let%span sinc_some_2_tree6 = "inc_some_2_tree.rs" 62 14 62 42
  let%span sinc_some_2_tree7 = "inc_some_2_tree.rs" 23 12 26 13
  let%span smodel8 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve9 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_inc_some_2_tree__Tree as Tree'0
  
  function sum'0 [#"inc_some_2_tree.rs" 21 4 21 23] (self : Tree'0.t_Tree) : int =
    [%#sinc_some_2_tree7] match self with
      | Tree'0.C_Node tl a tr -> sum'0 tl + UInt32.to_int a + sum'0 tr
      | Tree'0.C_Leaf -> 0
      end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  predicate resolve'3 (self : borrowed uint32) =
    [%#sresolve9] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed uint32) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed (Tree'0.t_Tree)) =
    [%#sresolve9] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Tree'0.t_Tree)) =
    resolve'2 _1
  
  function view'0 (self : borrowed uint32) : int =
    [%#smodel8] UInt32.to_int self.current
  
  let rec take_some_rest'0 (self:borrowed (Tree'0.t_Tree)) (return'  (ret:(borrowed uint32, borrowed (Tree'0.t_Tree))))= any
    [ return' (result:(borrowed uint32, borrowed (Tree'0.t_Tree)))-> {[%#sinc_some_2_tree6] sum'0 (let (_, a) = result in a).current
      <= sum'0 self.current}
      {[%#sinc_some_2_tree5] view'0 (let (a, _) = result in a) <= sum'0 self.current}
      {[%#sinc_some_2_tree4] sum'0 self.final - sum'0 self.current
      = UInt32.to_int (let (a, _) = result in a).final + sum'0 (let (_, a) = result in a).final
      - view'0 (let (a, _) = result in a)
      - sum'0 (let (_, a) = result in a).current}
      (! return' {result}) ]
    
  
  let rec sum_x'0 (self:Tree'0.t_Tree) (return'  (ret:uint32))= {[@expl:precondition] [%#sinc_some_2_tree2] sum'0 self
    <= 1000000}
    any [ return' (result:uint32)-> {[%#sinc_some_2_tree3] UInt32.to_int result = sum'0 self} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec inc_some_2_tree (t:Tree'0.t_Tree) (j:uint32) (k:uint32) (return'  (ret:()))= {[%#sinc_some_2_tree1] sum'0 t
    + UInt32.to_int j
    + UInt32.to_int k
    <= 1000000}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = sum_x'0 {t} (fun (_ret':uint32) ->  [ &sum0 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <Tree'0.t_Tree> {t}
          (fun (_ret':borrowed (Tree'0.t_Tree)) ->  [ &_10 <- _ret' ]  [ &t <- _ret'.final ] s1)
      | s1 = take_some_rest'0 {_10} (fun (_ret':(borrowed uint32, borrowed (Tree'0.t_Tree))) ->  [ &_9 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &ma <- let (r'0, _) = _9 in r'0 ] s1
      | s1 =  [ &mt <- let (_, r'1) = _9 in r'1 ] s2
      | s2 = Borrow.borrow_final <Tree'0.t_Tree> {mt.current} {Borrow.get_id mt}
          (fun (_ret':borrowed (Tree'0.t_Tree)) ->
             [ &_13 <- _ret' ] 
             [ &mt <- { mt with current = _ret'.final ; } ] 
            s3)
      | s3 = take_some_rest'0 {_13} (fun (_ret':(borrowed uint32, borrowed (Tree'0.t_Tree))) ->  [ &_12 <- _ret' ] s4)
      | s4 = bb4 ]
      
    | bb4 = s0
      [ s0 = -{match _12 with
          | (_, x'0) -> resolve'0 x'0
          | _ -> true
          end}-
        s1
      | s1 =  [ &mb <- let (r'0, _) = _12 in r'0 ] s2
      | s2 = UInt32.add {ma.current} {j} (fun (_ret':uint32) ->  [ &ma <- { ma with current = _ret' ; } ] s3)
      | s3 = -{resolve'1 ma}- s4
      | s4 = UInt32.add {mb.current} {k} (fun (_ret':uint32) ->  [ &mb <- { mb with current = _ret' ; } ] s5)
      | s5 = -{resolve'1 mb}- s6
      | s6 = -{resolve'0 mt}- s7
      | s7 = sum_x'0 {t} (fun (_ret':uint32) ->  [ &_18 <- _ret' ] s8)
      | s8 = bb5 ]
      
    | bb5 = s0
      [ s0 = UInt32.add {sum0} {j} (fun (_ret':uint32) ->  [ &_21 <- _ret' ] s1)
      | s1 = UInt32.add {_21} {k} (fun (_ret':uint32) ->  [ &_20 <- _ret' ] s2)
      | s2 = UInt32.eq {_18} {_20} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s3)
      | s3 = any [ br0 -> {_17 = false} (! bb7) | br1 -> {_17} (! bb6) ]  ]
      
    | bb6 = bb8
    | bb8 = return' {_0}
    | bb7 = {[%#sinc_some_2_tree0] false} any ]
    )
    [ & _0 : () = any_l ()
    | & t : Tree'0.t_Tree = t
    | & j : uint32 = j
    | & k : uint32 = k
    | & sum0 : uint32 = any_l ()
    | & ma : borrowed uint32 = any_l ()
    | & mt : borrowed (Tree'0.t_Tree) = any_l ()
    | & _9 : (borrowed uint32, borrowed (Tree'0.t_Tree)) = any_l ()
    | & _10 : borrowed (Tree'0.t_Tree) = any_l ()
    | & mb : borrowed uint32 = any_l ()
    | & _12 : (borrowed uint32, borrowed (Tree'0.t_Tree)) = any_l ()
    | & _13 : borrowed (Tree'0.t_Tree) = any_l ()
    | & _17 : bool = any_l ()
    | & _18 : uint32 = any_l ()
    | & _20 : uint32 = any_l ()
    | & _21 : uint32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_inc_some_2_tree__qyi14842893467024877183 [#"inc_some_2_tree.rs" 12 0 12 25] (* <Tree as creusot_contracts::WellFounded> *)
  
end
