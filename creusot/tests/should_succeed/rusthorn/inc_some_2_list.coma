
module IncSome2List_List_Type
  use prelude.UInt32
  use prelude.Int
  type t_list  =
    | C_Cons uint32 (t_list)
    | C_Nil
    
  function any_l (_ : 'b) : 'a
  let rec cons (input:t_list) (ret  (field_0:uint32) (field_1:t_list))= any
    [ good (field_0:uint32) (field_1:t_list)-> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:uint32) (field_1:t_list)-> {C_Cons field_0 field_1 <> input} {false} any ]
    
  let rec nil (input:t_list) (ret  )= any [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} {false} any ] 
end
module IncSome2List_Impl0_LemmaSumNonneg_Impl
  use IncSome2List_List_Type as IncSome2List_List_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function sum'0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : IncSome2List_List_Type.t_list) : int =
    [#"../inc_some_2_list.rs" 23 12 26 13] match self with
      | IncSome2List_List_Type.C_Cons a l -> UInt32.to_int a + sum'0 l
      | IncSome2List_List_Type.C_Nil -> 0
      end
  let rec sum'0 (self:IncSome2List_List_Type.t_list) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum'0 self} (! return' {result}) ]
    
  constant self  : IncSome2List_List_Type.t_list
  function lemma_sum_nonneg [#"../inc_some_2_list.rs" 34 4 34 30] (self : IncSome2List_List_Type.t_list) : ()
  goal vc_lemma_sum_nonneg : match self with
    | IncSome2List_List_Type.C_Cons _ l -> ([#"../inc_some_2_list.rs" 33 14 33 29] sum'0 l >= 0)
     -> ([#"../inc_some_2_list.rs" 33 14 33 29] sum'0 self >= 0)
    | IncSome2List_List_Type.C_Nil -> [#"../inc_some_2_list.rs" 33 14 33 29] sum'0 self >= 0
    end
end
module IncSome2List_Impl0_SumX
  use prelude.UInt32
  use prelude.Int
  use IncSome2List_List_Type as IncSome2List_List_Type
  function sum'0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : IncSome2List_List_Type.t_list) : int =
    [#"../inc_some_2_list.rs" 23 12 26 13] match self with
      | IncSome2List_List_Type.C_Cons a l -> UInt32.to_int a + sum'0 l
      | IncSome2List_List_Type.C_Nil -> 0
      end
  let rec sum'0 (self:IncSome2List_List_Type.t_list) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  use prelude.Intrinsic
  use prelude.UInt32
  let rec sum_x (self:IncSome2List_List_Type.t_list) (return'  (ret:uint32))= {[#"../inc_some_2_list.rs" 41 15 41 38] sum'0 self
    <= 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:uint32) (b:IncSome2List_List_Type.t_list)-> {self = IncSome2List_List_Type.C_Cons a b} (! bb2)
        | br1 -> {self = IncSome2List_List_Type.C_Nil } (! bb3) ]
         ]
      
    | bb1 = s0 [ s0 = {[#"../inc_some_2_list.rs" 44 14 44 18] false} any ] 
    | bb3 = s0 [ s0 =  [ &_0 <- [#"../inc_some_2_list.rs" 46 19 46 20] (0 : uint32) ] s1 | s1 = bb6 ] 
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = IncSome2List_List_Type.cons {self}
          (fun (r0'0:uint32) (r1'0:IncSome2List_List_Type.t_list) ->  [ &a <- r0'0 ] s1)
      | s1 = IncSome2List_List_Type.cons {self}
          (fun (r0'1:uint32) (r1'1:IncSome2List_List_Type.t_list) ->  [ &l <- r1'1 ] s2)
      | s2 = sum_x {l} (fun (_ret':uint32) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = UInt32.add {a} {_8}
          (fun (_ret':uint32) ->  [ &_0 <- _ret' ] (any [ any_ (_any:uint32)-> (!  [ &_8 <- _any ] s1) ] ))
      | s1 = bb6 ]
      
    | bb6 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l () : uint32
    | & self : IncSome2List_List_Type.t_list = self
    | & a : uint32 = any_l () : uint32
    | & l : IncSome2List_List_Type.t_list = any_l () : IncSome2List_List_Type.t_list
    | & _8 : uint32 = any_l () : uint32 ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [#"../inc_some_2_list.rs" 42 14 42 35] UInt32.to_int result
      = sum'0 self}
      (! return' {result}) ]
    
end
module IncSome2List_Impl0_TakeSomeRest
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  use prelude.UInt32
  function shallow_model'0 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] UInt32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed uint32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use prelude.Int
  use IncSome2List_List_Type as IncSome2List_List_Type
  function sum'0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : IncSome2List_List_Type.t_list) : int =
    [#"../inc_some_2_list.rs" 23 12 26 13] match self with
      | IncSome2List_List_Type.C_Cons a l -> UInt32.to_int a + sum'0 l
      | IncSome2List_List_Type.C_Nil -> 0
      end
  let rec sum'0 (self:IncSome2List_List_Type.t_list) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Intrinsic
  predicate resolve'2 (self : borrowed (IncSome2List_List_Type.t_list)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed (IncSome2List_List_Type.t_list)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  let rec random'0 (_1:()) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  use prelude.Snapshot
  function lemma_sum_nonneg'0 [#"../inc_some_2_list.rs" 34 4 34 30] (self : IncSome2List_List_Type.t_list) : ()
  axiom lemma_sum_nonneg'0_def : forall self : IncSome2List_List_Type.t_list . lemma_sum_nonneg'0 self
  = ([#"../inc_some_2_list.rs" 35 8 38 9] match self with
    | IncSome2List_List_Type.C_Cons _ l -> lemma_sum_nonneg'0 l
    | IncSome2List_List_Type.C_Nil -> ()
    end)
  let rec lemma_sum_nonneg'0 (self:IncSome2List_List_Type.t_list) (return'  (ret:()))= any
    [ return' (result:())-> {result = lemma_sum_nonneg'0 self} (! return' {result}) ]
    
  axiom lemma_sum_nonneg'0_spec : forall self : IncSome2List_List_Type.t_list . [#"../inc_some_2_list.rs" 33 14 33 29] sum'0 self
  >= 0
  predicate resolve'0 (self : borrowed (IncSome2List_List_Type.t_list)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (IncSome2List_List_Type.t_list)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec take_some_rest (self:borrowed (IncSome2List_List_Type.t_list)) (return'  (ret:(borrowed uint32, borrowed (IncSome2List_List_Type.t_list))))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:uint32) (b:IncSome2List_List_Type.t_list)-> { * self = IncSome2List_List_Type.C_Cons a b} (! bb2)
        | br1 -> { * self = IncSome2List_List_Type.C_Nil } (! bb3) ]
         ]
      
    | bb1 = s0 [ s0 = -{resolve'0 self}- s1 | s1 = {[#"../inc_some_2_list.rs" 55 14 55 18] false} any ] 
    | bb3 = s0 [ s0 = -{resolve'0 self}- s1 | s1 = bb11 ] 
    | bb11 = bb11 [ bb11 = (! s0 [ s0 = bb12 ] ) [ bb12 = s0 [ s0 = bb11 ]  ]  ] 
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = IncSome2List_List_Type.cons { * self}
          (fun (r0'0:uint32) (r1'0:IncSome2List_List_Type.t_list) ->
            Borrow.borrow_final <uint32> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed uint32) ->
                 [ &ma <- _ret' ] 
                IncSome2List_List_Type.cons { * self}
                  (fun (l_0'0:uint32) (l_1'0:IncSome2List_List_Type.t_list) ->
                    
                    [ &self <- { self with current = (IncSome2List_List_Type.C_Cons ( ^ ma) l_1'0 : IncSome2List_List_Type.t_list) ; } ]
                    
                    s1)))
      | s1 = IncSome2List_List_Type.cons { * self}
          (fun (r0'1:uint32) (r1'1:IncSome2List_List_Type.t_list) ->
            Borrow.borrow_final <IncSome2List_List_Type.t_list> {r1'1} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed (IncSome2List_List_Type.t_list)) ->
                 [ &ml <- _ret' ] 
                IncSome2List_List_Type.cons { * self}
                  (fun (l_0'1:uint32) (l_1'1:IncSome2List_List_Type.t_list) ->
                    
                    [ &self <- { self with current = (IncSome2List_List_Type.C_Cons l_0'1 ( ^ ml) : IncSome2List_List_Type.t_list) ; } ]
                    
                    s2)))
      | s2 =  [ &_8 <- [#"../inc_some_2_list.rs" 57 16 57 51] Snapshot.new (lemma_sum_nonneg'0 ( * ml)) ] s3
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = random'0 {[#"../inc_some_2_list.rs" 58 19 58 27] ()} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1)
      | s1 = bb6 ]
      
    | bb6 = s0 [ s0 = any [ br0 -> {_10 = false} (! bb8) | br1 -> {_10} (! bb7) ]  ] 
    | bb7 = s0
      [ s0 = Borrow.borrow_final <uint32> { * ma} {Borrow.get_id ma}
          (fun (_ret':borrowed uint32) ->  [ &_11 <- _ret' ]  [ &ma <- { ma with current = ( ^ _11) ; } ] s1)
      | s1 = Borrow.borrow_mut <IncSome2List_List_Type.t_list> { * ml}
          (fun (_ret':borrowed (IncSome2List_List_Type.t_list)) ->
             [ &_12 <- _ret' ] 
             [ &ml <- { ml with current = ( ^ _12) ; } ] 
            s2)
      | s2 =  [ &_0 <- (_11, _12) ] 
        (any
        [ any_ (_any:borrowed uint32)-> (!  [ &_11 <- _any ] 
          (any [ any_ (_any:borrowed (IncSome2List_List_Type.t_list))-> (!  [ &_12 <- _any ] s3) ] )) ]
        )
      | s3 = bb10 ]
      
    | bb8 = s0
      [ s0 = -{resolve'1 ma}- s1
      | s1 = Borrow.borrow_mut <IncSome2List_List_Type.t_list> { * ml}
          (fun (_ret':borrowed (IncSome2List_List_Type.t_list)) ->
             [ &_13 <- _ret' ] 
             [ &ml <- { ml with current = ( ^ _13) ; } ] 
            s2)
      | s2 = take_some_rest {_13}
          (fun (_ret':(borrowed uint32, borrowed (IncSome2List_List_Type.t_list))) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb9 ]
      
    | bb9 = s0 [ s0 = bb10 ] 
    | bb10 = s0
      [ s0 = -{resolve'2 ml}- s1 | s1 = -{resolve'1 ma}- s2 | s2 = -{resolve'0 self}- s3 | s3 = return' {_0} ]
       ]
    )
    [ & _0 : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list)) = any_l () : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list))
    | & self : borrowed (IncSome2List_List_Type.t_list) = self
    | & ma : borrowed uint32 = any_l () : borrowed uint32
    | & ml : borrowed (IncSome2List_List_Type.t_list) = any_l () : borrowed (IncSome2List_List_Type.t_list)
    | & _8 : Snapshot.snap_ty () = any_l () : Snapshot.snap_ty ()
    | & _10 : bool = any_l () : bool
    | & _11 : borrowed uint32 = any_l () : borrowed uint32
    | & _12 : borrowed (IncSome2List_List_Type.t_list) = any_l () : borrowed (IncSome2List_List_Type.t_list)
    | & _13 : borrowed (IncSome2List_List_Type.t_list) = any_l () : borrowed (IncSome2List_List_Type.t_list) ]
    
    [ return' (result:(borrowed uint32, borrowed (IncSome2List_List_Type.t_list)))-> {[@expl:postcondition] [#"../inc_some_2_list.rs" 53 14 53 42] sum'0 ( * (let (_, a) = result in a))
      <= sum'0 ( * self)}
      {[@expl:postcondition] [#"../inc_some_2_list.rs" 52 14 52 37] shallow_model'0 (let (a, _) = result in a)
      <= sum'0 ( * self)}
      {[@expl:postcondition] [#"../inc_some_2_list.rs" 50 14 51 72] sum'0 ( ^ self) - sum'0 ( * self)
      = UInt32.to_int ( ^ (let (a, _) = result in a)) + sum'0 ( ^ (let (_, a) = result in a))
      - shallow_model'0 (let (a, _) = result in a)
      - sum'0 ( * (let (_, a) = result in a))}
      (! return' {result}) ]
    
end
module IncSome2List_IncSome2List
  use prelude.UInt32
  use prelude.Int
  use IncSome2List_List_Type as IncSome2List_List_Type
  function sum'0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : IncSome2List_List_Type.t_list) : int =
    [#"../inc_some_2_list.rs" 23 12 26 13] match self with
      | IncSome2List_List_Type.C_Cons a l -> UInt32.to_int a + sum'0 l
      | IncSome2List_List_Type.C_Nil -> 0
      end
  let rec sum'0 (self:IncSome2List_List_Type.t_list) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  use prelude.Borrow
  predicate resolve'2 (self : borrowed (IncSome2List_List_Type.t_list)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed (IncSome2List_List_Type.t_list)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use prelude.UInt32
  predicate resolve'1 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'1 (let (a, _) = self in a)
    /\ resolve'2 (let (_, a) = self in a)
  let rec resolve'0 (self:(borrowed uint32, borrowed (IncSome2List_List_Type.t_list))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  function shallow_model'0 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] UInt32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed uint32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec take_some_rest'0 (self:borrowed (IncSome2List_List_Type.t_list)) (return'  (ret:(borrowed uint32, borrowed (IncSome2List_List_Type.t_list))))= any
    [ return' (result:(borrowed uint32, borrowed (IncSome2List_List_Type.t_list)))-> {[#"../inc_some_2_list.rs" 53 14 53 42] sum'0 ( * (let (_, a) = result in a))
      <= sum'0 ( * self)}
      {[#"../inc_some_2_list.rs" 52 14 52 37] shallow_model'0 (let (a, _) = result in a) <= sum'0 ( * self)}
      {[#"../inc_some_2_list.rs" 50 14 51 72] sum'0 ( ^ self) - sum'0 ( * self)
      = UInt32.to_int ( ^ (let (a, _) = result in a)) + sum'0 ( ^ (let (_, a) = result in a))
      - shallow_model'0 (let (a, _) = result in a)
      - sum'0 ( * (let (_, a) = result in a))}
      (! return' {result}) ]
    
  let rec sum_x'0 (self:IncSome2List_List_Type.t_list) (return'  (ret:uint32))= {[@expl:precondition] [#"../inc_some_2_list.rs" 41 15 41 38] sum'0 self
    <= 1000000}
    any
    [ return' (result:uint32)-> {[#"../inc_some_2_list.rs" 42 14 42 35] UInt32.to_int result = sum'0 self}
      (! return' {result}) ]
    
  let rec inc_some_2_list (l:IncSome2List_List_Type.t_list) (j:uint32) (k:uint32) (return'  (ret:()))= {[#"../inc_some_2_list.rs" 69 11 69 41] sum'0 l
    + UInt32.to_int j
    + UInt32.to_int k
    <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = sum_x'0 {l} (fun (_ret':uint32) ->  [ &sum0 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <IncSome2List_List_Type.t_list> {l}
          (fun (_ret':borrowed (IncSome2List_List_Type.t_list)) ->  [ &_10 <- _ret' ]  [ &l <-  ^ _10 ] s1)
      | s1 = take_some_rest'0 {_10}
          (fun (_ret':(borrowed uint32, borrowed (IncSome2List_List_Type.t_list))) ->  [ &_9 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &ma <- let (r'0, _) = _9 in r'0 ] 
        (any [ any_ (_any:borrowed uint32)-> (!  [ &_9 <- let (_, l'2) = _9 in (_any, l'2) ] s1) ] )
      | s1 =  [ &ml <- let (_, r'1) = _9 in r'1 ] 
        (any
        [ any_ (_any:borrowed (IncSome2List_List_Type.t_list))-> (!  [ &_9 <- let (l'4, _) = _9 in (l'4, _any) ] s2) ]
        )
      | s2 = -{resolve'0 _9}- s3
      | s3 = Borrow.borrow_final <IncSome2List_List_Type.t_list> { * ml} {Borrow.get_id ml}
          (fun (_ret':borrowed (IncSome2List_List_Type.t_list)) ->
             [ &_13 <- _ret' ] 
             [ &ml <- { ml with current = ( ^ _13) ; } ] 
            s4)
      | s4 = take_some_rest'0 {_13}
          (fun (_ret':(borrowed uint32, borrowed (IncSome2List_List_Type.t_list))) ->  [ &_12 <- _ret' ] s5)
      | s5 = bb4 ]
      
    | bb4 = s0
      [ s0 =  [ &mb <- let (r'0, _) = _12 in r'0 ] 
        (any [ any_ (_any:borrowed uint32)-> (!  [ &_12 <- let (_, l'2) = _12 in (_any, l'2) ] s1) ] )
      | s1 = -{resolve'0 _12}- s2
      | s2 = UInt32.add { * ma} {j} (fun (_ret':uint32) ->  [ &ma <- { ma with current = _ret' ; } ] s3)
      | s3 = -{resolve'1 ma}- s4
      | s4 = UInt32.add { * mb} {k} (fun (_ret':uint32) ->  [ &mb <- { mb with current = _ret' ; } ] s5)
      | s5 = -{resolve'1 mb}- s6
      | s6 = -{resolve'2 ml}- s7
      | s7 = sum_x'0 {l} (fun (_ret':uint32) ->  [ &_18 <- _ret' ] s8)
      | s8 = bb5 ]
      
    | bb5 = s0
      [ s0 = UInt32.add {sum0} {j} (fun (_ret':uint32) ->  [ &_21 <- _ret' ] s1)
      | s1 = UInt32.add {_21} {k}
          (fun (_ret':uint32) ->  [ &_20 <- _ret' ] (any [ any_ (_any:uint32)-> (!  [ &_21 <- _any ] s2) ] ))
      | s2 = UInt32.eq {_18} {_20}
          (fun (_ret':bool) ->
             [ &_17 <- _ret' ] 
            (any
            [ any_ (_any:uint32)-> (!  [ &_18 <- _any ] (any [ any_ (_any:uint32)-> (!  [ &_20 <- _any ] s3) ] )) ]
            ))
      | s3 = any [ br0 -> {_17 = false} (! bb7) | br1 -> {_17} (! bb6) ]  ]
      
    | bb6 = s0 [ s0 =  [ &_0 <- [#"../inc_some_2_list.rs" 70 52 77 1] () ] s1 | s1 = bb8 ] 
    | bb8 = s0 [ s0 = return' {_0} ] 
    | bb7 = s0 [ s0 = {[#"../inc_some_2_list.rs" 76 4 76 38] false} any ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & l : IncSome2List_List_Type.t_list = l
    | & j : uint32 = j
    | & k : uint32 = k
    | & sum0 : uint32 = any_l () : uint32
    | & ma : borrowed uint32 = any_l () : borrowed uint32
    | & ml : borrowed (IncSome2List_List_Type.t_list) = any_l () : borrowed (IncSome2List_List_Type.t_list)
    | & _9 : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list)) = any_l () : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list))
    | & _10 : borrowed (IncSome2List_List_Type.t_list) = any_l () : borrowed (IncSome2List_List_Type.t_list)
    | & mb : borrowed uint32 = any_l () : borrowed uint32
    | & _12 : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list)) = any_l () : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list))
    | & _13 : borrowed (IncSome2List_List_Type.t_list) = any_l () : borrowed (IncSome2List_List_Type.t_list)
    | & _17 : bool = any_l () : bool
    | & _18 : uint32 = any_l () : uint32
    | & _20 : uint32 = any_l () : uint32
    | & _21 : uint32 = any_l () : uint32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module IncSome2List_Impl1
  
end
