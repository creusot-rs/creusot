
module T_inc_some_2_list__List
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_List  =
    | C_Cons uint32 (t_List)
    | C_Nil
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Cons (input:t_List) (ret  (field_0:uint32) (field_1:t_List))= any
    [ good (field_0:uint32) (field_1:t_List)-> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:uint32) (field_1:t_List)-> {C_Cons field_0 field_1 <> input} {false} any ]
    
  
  let rec v_Nil (input:t_List) (ret  )= any [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} {false} any ] 
end
module M_inc_some_2_list__qy123zimplqy35z0qy125z__lemma_sum_nonneg__Impl
  let%span sinc_some_2_list0 = "../inc_some_2_list.rs" 33 14 33 29
  
  let%span sinc_some_2_list1 = "../inc_some_2_list.rs" 32 15 32 19
  
  let%span span2 = "../inc_some_2_list.rs" 23 12 26 13
  
  use T_inc_some_2_list__List as List'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  function sum'0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : List'0.t_List) : int =
    [%#span2] match self with
      | List'0.C_Cons a l -> UInt32.to_int a + sum'0 l
      | List'0.C_Nil -> 0
      end
  
  constant self  : List'0.t_List
  
  function lemma_sum_nonneg [#"../inc_some_2_list.rs" 34 4 34 30] (self : List'0.t_List) : ()
  
  goal vc_lemma_sum_nonneg : match self with
    | List'0.C_Cons _ l -> ([%#sinc_some_2_list0] sum'0 l >= 0)  -> ([%#sinc_some_2_list0] sum'0 self >= 0)
    | List'0.C_Nil -> [%#sinc_some_2_list0] sum'0 self >= 0
    end
end
module M_inc_some_2_list__qy123zimplqy35z0qy125z__sum_x
  let%span sinc_some_2_list0 = "../inc_some_2_list.rs" 46 19 46 20
  
  let%span sinc_some_2_list1 = "../inc_some_2_list.rs" 41 15 41 38
  
  let%span sinc_some_2_list2 = "../inc_some_2_list.rs" 42 14 42 35
  
  let%span span3 = "../inc_some_2_list.rs" 23 12 26 13
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_inc_some_2_list__List as List'0
  
  function sum'0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : List'0.t_List) : int =
    [%#span3] match self with
      | List'0.C_Cons a l -> UInt32.to_int a + sum'0 l
      | List'0.C_Nil -> 0
      end
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  let rec sum_x (self:List'0.t_List) (return'  (ret:uint32))= {[%#sinc_some_2_list1] sum'0 self <= 1000000}
    (! bb0
    [ bb0 = any
      [ br0 (a:uint32) (b:List'0.t_List)-> {self = List'0.C_Cons a b} (! bb2) | br1 -> {self = List'0.C_Nil } (! bb3) ]
      
    | bb3 = s0 [ s0 =  [ &_0 <- [%#sinc_some_2_list0] (0 : uint32) ] s1 | s1 = bb6 ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = List'0.v_Cons {self} (fun (r0'0:uint32) (r1'0:List'0.t_List) ->  [ &a <- r0'0 ] s1)
      | s1 = List'0.v_Cons {self} (fun (r0'1:uint32) (r1'1:List'0.t_List) ->  [ &l <- r1'1 ] s2)
      | s2 = sum_x {l} (fun (_ret':uint32) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = UInt32.add {a} {_8} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = return' {_0} ]
    )
    [ & _0 : uint32 = any_l ()
    | & self : List'0.t_List = self
    | & a : uint32 = any_l ()
    | & l : List'0.t_List = any_l ()
    | & _8 : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [%#sinc_some_2_list2] UInt32.to_int result = sum'0 self}
      (! return' {result}) ]
    
end
module M_inc_some_2_list__qy123zimplqy35z0qy125z__take_some_rest
  let%span sinc_some_2_list0 = "../inc_some_2_list.rs" 57 16 57 51
  
  let%span sinc_some_2_list1 = "../inc_some_2_list.rs" 58 19 58 27
  
  let%span sinc_some_2_list2 = "../inc_some_2_list.rs" 50 14 51 72
  
  let%span sinc_some_2_list3 = "../inc_some_2_list.rs" 52 14 52 37
  
  let%span sinc_some_2_list4 = "../inc_some_2_list.rs" 53 14 53 42
  
  let%span span5 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span6 = "../inc_some_2_list.rs" 23 12 26 13
  
  let%span span7 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span8 = "../inc_some_2_list.rs" 33 14 33 29
  
  let%span span9 = "../inc_some_2_list.rs" 32 15 32 19
  
  let%span span10 = "../inc_some_2_list.rs" 35 8 38 9
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  function shallow_model'0 (self : borrowed uint32) : int =
    [%#span5] UInt32.to_int self.current
  
  use prelude.prelude.Int
  
  use T_inc_some_2_list__List as List'0
  
  function sum'0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : List'0.t_List) : int =
    [%#span6] match self with
      | List'0.C_Cons a l -> UInt32.to_int a + sum'0 l
      | List'0.C_Nil -> 0
      end
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed (List'0.t_List)) =
    [%#span7] self.final = self.current
  
  predicate resolve'1 (self : borrowed uint32) =
    [%#span7] self.final = self.current
  
  let rec random'0 (_1:()) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  function lemma_sum_nonneg'0 [#"../inc_some_2_list.rs" 34 4 34 30] (self : List'0.t_List) : ()
  
  axiom lemma_sum_nonneg'0_def : forall self : List'0.t_List . lemma_sum_nonneg'0 self
  = ([%#span10] match self with
    | List'0.C_Cons _ l -> lemma_sum_nonneg'0 l
    | List'0.C_Nil -> ()
    end)
  
  axiom lemma_sum_nonneg'0_spec : forall self : List'0.t_List . [%#span8] sum'0 self >= 0
  
  predicate resolve'0 (self : borrowed (List'0.t_List)) =
    [%#span7] self.final = self.current
  
  let rec take_some_rest (self:borrowed (List'0.t_List)) (return'  (ret:(borrowed uint32, borrowed (List'0.t_List))))= (! bb0
    [ bb0 = any
      [ br0 (a:uint32) (b:List'0.t_List)-> {self.current = List'0.C_Cons a b} (! bb2)
      | br1 -> {self.current = List'0.C_Nil } (! bb3) ]
      
    | bb3 = s0 [ s0 = -{resolve'0 self}- s1 | s1 = bb11 ] 
    | bb11 = bb11 [ bb11 = (! bb12) [ bb12 = bb11 ]  ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = List'0.v_Cons {self.current}
          (fun (r0'0:uint32) (r1'0:List'0.t_List) ->
            Borrow.borrow_mut <uint32> {r0'0}
              (fun (_ret':borrowed uint32) ->
                 [ &ma <- _ret' ] 
                List'0.v_Cons {self.current}
                  (fun (l_0'0:uint32) (l_1'0:List'0.t_List) ->
                     [ &self <- { self with current = List'0.C_Cons ma.final l_1'0 ; } ] 
                    s1)))
      | s1 = List'0.v_Cons {self.current}
          (fun (r0'1:uint32) (r1'1:List'0.t_List) ->
            Borrow.borrow_mut <List'0.t_List> {r1'1}
              (fun (_ret':borrowed (List'0.t_List)) ->
                 [ &ml <- _ret' ] 
                List'0.v_Cons {self.current}
                  (fun (l_0'1:uint32) (l_1'1:List'0.t_List) ->
                     [ &self <- { self with current = List'0.C_Cons l_0'1 ml.final ; } ] 
                    s2)))
      | s2 =  [ &_8 <- [%#sinc_some_2_list0] Snapshot.new (lemma_sum_nonneg'0 ml.current) ] s3
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = random'0 {[%#sinc_some_2_list1] ()} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = any [ br0 -> {_10 = false} (! bb8) | br1 -> {_10} (! bb7) ] 
    | bb7 = s0
      [ s0 = Borrow.borrow_final <uint32> {ma.current} {Borrow.get_id ma}
          (fun (_ret':borrowed uint32) ->  [ &_11 <- _ret' ]  [ &ma <- { ma with current = _11.final ; } ] s1)
      | s1 = Borrow.borrow_final <List'0.t_List> {ml.current} {Borrow.get_id ml}
          (fun (_ret':borrowed (List'0.t_List)) ->  [ &_12 <- _ret' ]  [ &ml <- { ml with current = _12.final ; } ] s2)
      | s2 =  [ &_0 <- (_11, _12) ] s3
      | s3 = bb10 ]
      
    | bb8 = s0
      [ s0 = -{resolve'1 ma}- s1
      | s1 = Borrow.borrow_final <List'0.t_List> {ml.current} {Borrow.get_id ml}
          (fun (_ret':borrowed (List'0.t_List)) ->  [ &_13 <- _ret' ]  [ &ml <- { ml with current = _13.final ; } ] s2)
      | s2 = take_some_rest {_13} (fun (_ret':(borrowed uint32, borrowed (List'0.t_List))) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb9 ]
      
    | bb9 = bb10
    | bb10 = s0
      [ s0 = -{resolve'2 ml}- s1 | s1 = -{resolve'1 ma}- s2 | s2 = -{resolve'0 self}- s3 | s3 = return' {_0} ]
       ]
    )
    [ & _0 : (borrowed uint32, borrowed (List'0.t_List)) = any_l ()
    | & self : borrowed (List'0.t_List) = self
    | & ma : borrowed uint32 = any_l ()
    | & ml : borrowed (List'0.t_List) = any_l ()
    | & _8 : Snapshot.snap_ty () = any_l ()
    | & _10 : bool = any_l ()
    | & _11 : borrowed uint32 = any_l ()
    | & _12 : borrowed (List'0.t_List) = any_l ()
    | & _13 : borrowed (List'0.t_List) = any_l () ]
    
    [ return' (result:(borrowed uint32, borrowed (List'0.t_List)))-> {[@expl:postcondition] [%#sinc_some_2_list4] sum'0 (let (_, a) = result in a).current
      <= sum'0 self.current}
      {[@expl:postcondition] [%#sinc_some_2_list3] shallow_model'0 (let (a, _) = result in a) <= sum'0 self.current}
      {[@expl:postcondition] [%#sinc_some_2_list2] sum'0 self.final - sum'0 self.current
      = UInt32.to_int (let (a, _) = result in a).final + sum'0 (let (_, a) = result in a).final
      - shallow_model'0 (let (a, _) = result in a)
      - sum'0 (let (_, a) = result in a).current}
      (! return' {result}) ]
    
end
module M_inc_some_2_list__inc_some_2_list
  let%span sinc_some_2_list0 = "../inc_some_2_list.rs" 76 4 76 38
  
  let%span sinc_some_2_list1 = "../inc_some_2_list.rs" 69 11 69 41
  
  let%span span2 = "../inc_some_2_list.rs" 23 12 26 13
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span4 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span5 = "../inc_some_2_list.rs" 50 14 51 72
  
  let%span span6 = "../inc_some_2_list.rs" 52 14 52 37
  
  let%span span7 = "../inc_some_2_list.rs" 53 14 53 42
  
  let%span span8 = "../inc_some_2_list.rs" 41 15 41 38
  
  let%span span9 = "../inc_some_2_list.rs" 42 14 42 35
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_inc_some_2_list__List as List'0
  
  function sum'0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : List'0.t_List) : int =
    [%#span2] match self with
      | List'0.C_Cons a l -> UInt32.to_int a + sum'0 l
      | List'0.C_Nil -> 0
      end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  predicate resolve'1 (self : borrowed uint32) =
    [%#span3] self.final = self.current
  
  predicate resolve'0 (self : borrowed (List'0.t_List)) =
    [%#span3] self.final = self.current
  
  use prelude.prelude.Int
  
  function shallow_model'0 (self : borrowed uint32) : int =
    [%#span4] UInt32.to_int self.current
  
  let rec take_some_rest'0 (self:borrowed (List'0.t_List)) (return'  (ret:(borrowed uint32, borrowed (List'0.t_List))))= any
    [ return' (result:(borrowed uint32, borrowed (List'0.t_List)))-> {[%#span7] sum'0 (let (_, a) = result in a).current
      <= sum'0 self.current}
      {[%#span6] shallow_model'0 (let (a, _) = result in a) <= sum'0 self.current}
      {[%#span5] sum'0 self.final - sum'0 self.current
      = UInt32.to_int (let (a, _) = result in a).final + sum'0 (let (_, a) = result in a).final
      - shallow_model'0 (let (a, _) = result in a)
      - sum'0 (let (_, a) = result in a).current}
      (! return' {result}) ]
    
  
  let rec sum_x'0 (self:List'0.t_List) (return'  (ret:uint32))= {[@expl:precondition] [%#span8] sum'0 self <= 1000000}
    any [ return' (result:uint32)-> {[%#span9] UInt32.to_int result = sum'0 self} (! return' {result}) ] 
  
  let rec inc_some_2_list (l:List'0.t_List) (j:uint32) (k:uint32) (return'  (ret:()))= {[%#sinc_some_2_list1] sum'0 l
    + UInt32.to_int j
    + UInt32.to_int k
    <= 1000000}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = sum_x'0 {l} (fun (_ret':uint32) ->  [ &sum0 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <List'0.t_List> {l}
          (fun (_ret':borrowed (List'0.t_List)) ->  [ &_10 <- _ret' ]  [ &l <- _10.final ] s1)
      | s1 = take_some_rest'0 {_10} (fun (_ret':(borrowed uint32, borrowed (List'0.t_List))) ->  [ &_9 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &ma <- let (r'0, _) = _9 in r'0 ] s1
      | s1 =  [ &ml <- let (_, r'1) = _9 in r'1 ] s2
      | s2 = Borrow.borrow_final <List'0.t_List> {ml.current} {Borrow.get_id ml}
          (fun (_ret':borrowed (List'0.t_List)) ->  [ &_13 <- _ret' ]  [ &ml <- { ml with current = _13.final ; } ] s3)
      | s3 = take_some_rest'0 {_13} (fun (_ret':(borrowed uint32, borrowed (List'0.t_List))) ->  [ &_12 <- _ret' ] s4)
      | s4 = bb4 ]
      
    | bb4 = s0
      [ s0 = -{resolve'0 (let (_, r'0) = _12 in r'0)}- s1
      | s1 =  [ &mb <- let (r'1, _) = _12 in r'1 ] s2
      | s2 = UInt32.add {ma.current} {j} (fun (_ret':uint32) ->  [ &ma <- { ma with current = _ret' ; } ] s3)
      | s3 = -{resolve'1 ma}- s4
      | s4 = UInt32.add {mb.current} {k} (fun (_ret':uint32) ->  [ &mb <- { mb with current = _ret' ; } ] s5)
      | s5 = -{resolve'1 mb}- s6
      | s6 = -{resolve'0 ml}- s7
      | s7 = sum_x'0 {l} (fun (_ret':uint32) ->  [ &_18 <- _ret' ] s8)
      | s8 = bb5 ]
      
    | bb5 = s0
      [ s0 = UInt32.add {sum0} {j} (fun (_ret':uint32) ->  [ &_21 <- _ret' ] s1)
      | s1 = UInt32.add {_21} {k} (fun (_ret':uint32) ->  [ &_20 <- _ret' ] s2)
      | s2 = UInt32.eq {_18} {_20} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s3)
      | s3 = any [ br0 -> {_17 = false} (! bb7) | br1 -> {_17} (! bb6) ]  ]
      
    | bb6 = bb8
    | bb8 = return' {_0}
    | bb7 = {[%#sinc_some_2_list0] false} any ]
    )
    [ & _0 : () = any_l ()
    | & l : List'0.t_List = l
    | & j : uint32 = j
    | & k : uint32 = k
    | & sum0 : uint32 = any_l ()
    | & ma : borrowed uint32 = any_l ()
    | & ml : borrowed (List'0.t_List) = any_l ()
    | & _9 : (borrowed uint32, borrowed (List'0.t_List)) = any_l ()
    | & _10 : borrowed (List'0.t_List) = any_l ()
    | & mb : borrowed uint32 = any_l ()
    | & _12 : (borrowed uint32, borrowed (List'0.t_List)) = any_l ()
    | & _13 : borrowed (List'0.t_List) = any_l ()
    | & _17 : bool = any_l ()
    | & _18 : uint32 = any_l ()
    | & _20 : uint32 = any_l ()
    | & _21 : uint32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_inc_some_2_list__qy123zimplqy35z1qy125z
  
end
