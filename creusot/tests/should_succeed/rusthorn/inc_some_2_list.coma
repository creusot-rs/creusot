module M_inc_some_2_list__qyi7504674480942992291__lemma_sum_nonneg [#"inc_some_2_list.rs" 34 4 34 30] (* List *)
  let%span sinc_some_2_list0 = "inc_some_2_list.rs" 33 14 33 29
  let%span sinc_some_2_list1 = "inc_some_2_list.rs" 32 15 32 19
  let%span sinc_some_2_list2 = "inc_some_2_list.rs" 35 8 38 9
  let%span sinc_some_2_list3 = "inc_some_2_list.rs" 23 12 26 13
  
  use prelude.prelude.UInt32
  
  type t_List'0  =
    | C_Cons'0 uint32 (t_List'0)
    | C_Nil'0
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  function sum'0 [#"inc_some_2_list.rs" 21 4 21 23] (self : t_List'0) : int =
    [%#sinc_some_2_list3] match self with
      | C_Cons'0 a l -> UInt32.to_int a + sum'0 l
      | C_Nil'0 -> 0
      end
  
  use prelude.prelude.Borrow
  
  constant self  : t_List'0
  
  function lemma_sum_nonneg'0 [#"inc_some_2_list.rs" 34 4 34 30] (self : t_List'0) : ()
  
  goal vc_lemma_sum_nonneg'0 : match self with
    | C_Cons'0 _ l -> ([%#sinc_some_2_list0] sum'0 l >= 0)  -> ([%#sinc_some_2_list0] sum'0 self >= 0)
    | C_Nil'0 -> [%#sinc_some_2_list0] sum'0 self >= 0
    end
end
module M_inc_some_2_list__qyi7504674480942992291__sum_x [#"inc_some_2_list.rs" 43 4 43 26] (* List *)
  let%span sinc_some_2_list0 = "inc_some_2_list.rs" 46 19 46 20
  let%span sinc_some_2_list1 = "inc_some_2_list.rs" 41 15 41 38
  let%span sinc_some_2_list2 = "inc_some_2_list.rs" 42 14 42 35
  let%span sinc_some_2_list3 = "inc_some_2_list.rs" 23 12 26 13
  
  use prelude.prelude.UInt32
  
  type t_List'0  =
    | C_Cons'0 uint32 (t_List'0)
    | C_Nil'0
  
  let rec v_Cons'0 (input:t_List'0) (ret  (field_0:uint32) (field_1:t_List'0))= any
    [ good (field_0:uint32) (field_1:t_List'0)-> {C_Cons'0 field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : uint32, field_1 : t_List'0 [C_Cons'0 field_0 field_1 : t_List'0] . C_Cons'0 field_0 field_1
      <> input}
      (! {false}
      any) ]
    
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  function sum'0 [#"inc_some_2_list.rs" 21 4 21 23] (self : t_List'0) : int =
    [%#sinc_some_2_list3] match self with
      | C_Cons'0 a l -> UInt32.to_int a + sum'0 l
      | C_Nil'0 -> 0
      end
  
  meta "compute_max_steps" 1000000
  
  let rec sum_x'0 (self:t_List'0) (return'  (ret:uint32))= {[@expl:sum_x requires] [%#sinc_some_2_list1] sum'0 self
    <= 1000000}
    (! bb0
    [ bb0 = any [ br0 (x0:uint32) (x1:t_List'0)-> {self = C_Cons'0 x0 x1} (! bb2) | br1 -> {self = C_Nil'0 } (! bb3) ] 
    | bb3 = s0 [ s0 =  [ &_0 <- [%#sinc_some_2_list0] (0 : uint32) ] s1 | s1 = bb6 ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Cons'0 {self} (fun (r0'0:uint32) (r1'0:t_List'0) ->  [ &a <- r0'0 ] s1)
      | s1 = v_Cons'0 {self} (fun (r0'1:uint32) (r1'1:t_List'0) ->  [ &l <- r1'1 ] s2)
      | s2 = sum_x'0 {l} (fun (_ret':uint32) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = UInt32.add {a} {_8} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = return' {_0} ]
    )
    [ & _0 : uint32 = any_l ()
    | & self : t_List'0 = self
    | & a : uint32 = any_l ()
    | & l : t_List'0 = any_l ()
    | & _8 : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:sum_x ensures] [%#sinc_some_2_list2] UInt32.to_int result = sum'0 self}
      (! return' {result}) ]
    
end
module M_inc_some_2_list__qyi7504674480942992291__take_some_rest [#"inc_some_2_list.rs" 54 4 54 57] (* List *)
  let%span sinc_some_2_list0 = "inc_some_2_list.rs" 57 16 57 51
  let%span sinc_some_2_list1 = "inc_some_2_list.rs" 58 19 58 27
  let%span sinc_some_2_list2 = "inc_some_2_list.rs" 50 14 51 72
  let%span sinc_some_2_list3 = "inc_some_2_list.rs" 52 14 52 37
  let%span sinc_some_2_list4 = "inc_some_2_list.rs" 53 14 53 42
  let%span sinc_some_2_list5 = "inc_some_2_list.rs" 33 14 33 29
  let%span sinc_some_2_list6 = "inc_some_2_list.rs" 32 15 32 19
  let%span sinc_some_2_list7 = "inc_some_2_list.rs" 35 8 38 9
  let%span sinc_some_2_list8 = "inc_some_2_list.rs" 23 12 26 13
  let%span smodel9 = "../../../../creusot-contracts/src/model.rs" 106 8 106 22
  let%span sresolve10 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.UInt32
  
  type t_List'0  =
    | C_Cons'0 uint32 (t_List'0)
    | C_Nil'0
  
  use prelude.prelude.Borrow
  
  predicate resolve'3 (self : borrowed (t_List'0)) =
    [%#sresolve10] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_List'0)) =
    resolve'3 _1
  
  let rec v_Cons'0 (input:t_List'0) (ret  (field_0:uint32) (field_1:t_List'0))= any
    [ good (field_0:uint32) (field_1:t_List'0)-> {C_Cons'0 field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : uint32, field_1 : t_List'0 [C_Cons'0 field_0 field_1 : t_List'0] . C_Cons'0 field_0 field_1
      <> input}
      (! {false}
      any) ]
    
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  function sum'0 [#"inc_some_2_list.rs" 21 4 21 23] (self : t_List'0) : int =
    [%#sinc_some_2_list8] match self with
      | C_Cons'0 a l -> UInt32.to_int a + sum'0 l
      | C_Nil'0 -> 0
      end
  
  function lemma_sum_nonneg'0 [#"inc_some_2_list.rs" 34 4 34 30] (self : t_List'0) : ()
  
  axiom lemma_sum_nonneg'0_def : forall self : t_List'0 . lemma_sum_nonneg'0 self
  = ([%#sinc_some_2_list7] match self with
    | C_Cons'0 _ l -> lemma_sum_nonneg'0 l
    | C_Nil'0 -> ()
    end)
  
  axiom lemma_sum_nonneg'0_spec : forall self : t_List'0 . [%#sinc_some_2_list5] sum'0 self >= 0
  
  use prelude.prelude.Snapshot
  
  let rec random'0 (_1:()) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  
  predicate resolve'4 (self : borrowed uint32) =
    [%#sresolve10] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed uint32) =
    resolve'4 _1
  
  predicate resolve'5 (self : borrowed (t_List'0)) =
    [%#sresolve10] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (t_List'0)) =
    resolve'5 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  function view'0 (self : borrowed uint32) : int =
    [%#smodel9] UInt32.to_int self.current
  
  meta "compute_max_steps" 1000000
  
  let rec take_some_rest'0 (self:borrowed (t_List'0)) (return'  (ret:(borrowed uint32, borrowed (t_List'0))))= (! bb0
    [ bb0 = any
      [ br0 (x0:uint32) (x1:t_List'0)-> {self.current = C_Cons'0 x0 x1} (! bb2)
      | br1 -> {self.current = C_Nil'0 } (! bb3) ]
      
    | bb3 = s0 [ s0 = -{resolve'0 self}- s1 | s1 = bb11 ] 
    | bb11 = bb11 [ bb11 = (! bb12) [ bb12 = bb11 ]  ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Cons'0 {self.current}
          (fun (r0'0:uint32) (r1'0:t_List'0) ->
            Borrow.borrow_final <uint32> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed uint32) ->
                 [ &ma <- _ret' ] 
                 [ &self <- { self with current = C_Cons'0 _ret'.final r1'0 } ] 
                s1))
      | s1 = v_Cons'0 {self.current}
          (fun (r0'1:uint32) (r1'1:t_List'0) ->
            Borrow.borrow_final <t_List'0> {r1'1} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed (t_List'0)) ->
                 [ &ml <- _ret' ] 
                 [ &self <- { self with current = C_Cons'0 r0'1 _ret'.final } ] 
                s2))
      | s2 =  [ &_8 <- [%#sinc_some_2_list0] Snapshot.new (lemma_sum_nonneg'0 ml.current) ] s3
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = random'0 {[%#sinc_some_2_list1] ()} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = any [ br0 -> {_10 = false} (! bb8) | br1 -> {_10} (! bb7) ] 
    | bb7 = s0
      [ s0 = Borrow.borrow_final <uint32> {ma.current} {Borrow.get_id ma}
          (fun (_ret':borrowed uint32) ->  [ &_11 <- _ret' ]  [ &ma <- { ma with current = _ret'.final } ] s1)
      | s1 = Borrow.borrow_final <t_List'0> {ml.current} {Borrow.get_id ml}
          (fun (_ret':borrowed (t_List'0)) ->  [ &_12 <- _ret' ]  [ &ml <- { ml with current = _ret'.final } ] s2)
      | s2 =  [ &_0 <- (_11, _12) ] s3
      | s3 = bb10 ]
      
    | bb8 = s0
      [ s0 = -{resolve'1 ma}- s1
      | s1 = Borrow.borrow_final <t_List'0> {ml.current} {Borrow.get_id ml}
          (fun (_ret':borrowed (t_List'0)) ->  [ &_13 <- _ret' ]  [ &ml <- { ml with current = _ret'.final } ] s2)
      | s2 = take_some_rest'0 {_13} (fun (_ret':(borrowed uint32, borrowed (t_List'0))) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb9 ]
      
    | bb9 = bb10
    | bb10 = s0
      [ s0 = -{resolve'2 ml}- s1 | s1 = -{resolve'1 ma}- s2 | s2 = -{resolve'0 self}- s3 | s3 = return' {_0} ]
       ]
    )
    [ & _0 : (borrowed uint32, borrowed (t_List'0)) = any_l ()
    | & self : borrowed (t_List'0) = self
    | & ma : borrowed uint32 = any_l ()
    | & ml : borrowed (t_List'0) = any_l ()
    | & _8 : Snapshot.snap_ty () = any_l ()
    | & _10 : bool = any_l ()
    | & _11 : borrowed uint32 = any_l ()
    | & _12 : borrowed (t_List'0) = any_l ()
    | & _13 : borrowed (t_List'0) = any_l () ]
    
    [ return' (result:(borrowed uint32, borrowed (t_List'0)))-> {[@expl:take_some_rest ensures #0] [%#sinc_some_2_list2] sum'0 self.final
      - sum'0 self.current
      = UInt32.to_int (let (a, _) = result in a).final + sum'0 (let (_, a) = result in a).final
      - view'0 (let (a, _) = result in a)
      - sum'0 (let (_, a) = result in a).current}
      {[@expl:take_some_rest ensures #1] [%#sinc_some_2_list3] view'0 (let (a, _) = result in a) <= sum'0 self.current}
      {[@expl:take_some_rest ensures #2] [%#sinc_some_2_list4] sum'0 (let (_, a) = result in a).current
      <= sum'0 self.current}
      (! return' {result}) ]
    
end
module M_inc_some_2_list__inc_some_2_list [#"inc_some_2_list.rs" 70 0 70 51]
  let%span sinc_some_2_list0 = "inc_some_2_list.rs" 76 4 76 38
  let%span sinc_some_2_list1 = "inc_some_2_list.rs" 69 11 69 41
  let%span sinc_some_2_list2 = "inc_some_2_list.rs" 41 15 41 38
  let%span sinc_some_2_list3 = "inc_some_2_list.rs" 42 14 42 35
  let%span sinc_some_2_list4 = "inc_some_2_list.rs" 50 14 51 72
  let%span sinc_some_2_list5 = "inc_some_2_list.rs" 52 14 52 37
  let%span sinc_some_2_list6 = "inc_some_2_list.rs" 53 14 53 42
  let%span sinc_some_2_list7 = "inc_some_2_list.rs" 23 12 26 13
  let%span smodel8 = "../../../../creusot-contracts/src/model.rs" 106 8 106 22
  let%span sresolve9 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.UInt32
  
  type t_List'0  =
    | C_Cons'0 uint32 (t_List'0)
    | C_Nil'0
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  function sum'0 [#"inc_some_2_list.rs" 21 4 21 23] (self : t_List'0) : int =
    [%#sinc_some_2_list7] match self with
      | C_Cons'0 a l -> UInt32.to_int a + sum'0 l
      | C_Nil'0 -> 0
      end
  
  use prelude.prelude.Borrow
  
  let rec sum_x'0 (self:t_List'0) (return'  (ret:uint32))= {[@expl:sum_x requires] [%#sinc_some_2_list2] sum'0 self
    <= 1000000}
    any [ return' (result:uint32)-> {[%#sinc_some_2_list3] UInt32.to_int result = sum'0 self} (! return' {result}) ] 
  
  function view'0 (self : borrowed uint32) : int =
    [%#smodel8] UInt32.to_int self.current
  
  let rec take_some_rest'0 (self:borrowed (t_List'0)) (return'  (ret:(borrowed uint32, borrowed (t_List'0))))= any
    [ return' (result:(borrowed uint32, borrowed (t_List'0)))-> {[%#sinc_some_2_list4] sum'0 self.final
      - sum'0 self.current
      = UInt32.to_int (let (a, _) = result in a).final + sum'0 (let (_, a) = result in a).final
      - view'0 (let (a, _) = result in a)
      - sum'0 (let (_, a) = result in a).current}
      {[%#sinc_some_2_list5] view'0 (let (a, _) = result in a) <= sum'0 self.current}
      {[%#sinc_some_2_list6] sum'0 (let (_, a) = result in a).current <= sum'0 self.current}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (t_List'0)) =
    [%#sresolve9] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_List'0)) =
    resolve'2 _1
  
  predicate resolve'3 (self : borrowed uint32) =
    [%#sresolve9] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed uint32) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec inc_some_2_list'0 (l:t_List'0) (j:uint32) (k:uint32) (return'  (ret:()))= {[@expl:inc_some_2_list requires] [%#sinc_some_2_list1] sum'0 l
    + UInt32.to_int j
    + UInt32.to_int k
    <= 1000000}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = sum_x'0 {l} (fun (_ret':uint32) ->  [ &sum0 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <t_List'0> {l}
          (fun (_ret':borrowed (t_List'0)) ->  [ &_10 <- _ret' ]  [ &l <- _ret'.final ] s1)
      | s1 = take_some_rest'0 {_10} (fun (_ret':(borrowed uint32, borrowed (t_List'0))) ->  [ &_9 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &ma <- let (r'0, _) = _9 in r'0 ] s1
      | s1 =  [ &ml <- let (_, r'1) = _9 in r'1 ] s2
      | s2 = Borrow.borrow_final <t_List'0> {ml.current} {Borrow.get_id ml}
          (fun (_ret':borrowed (t_List'0)) ->  [ &_13 <- _ret' ]  [ &ml <- { ml with current = _ret'.final } ] s3)
      | s3 = take_some_rest'0 {_13} (fun (_ret':(borrowed uint32, borrowed (t_List'0))) ->  [ &_12 <- _ret' ] s4)
      | s4 = bb4 ]
      
    | bb4 = s0
      [ s0 = -{match _12 with
          | (_, x'0) -> resolve'0 x'0
          | _ -> true
          end}-
        s1
      | s1 =  [ &mb <- let (r'0, _) = _12 in r'0 ] s2
      | s2 = UInt32.add {ma.current} {j} (fun (_ret':uint32) ->  [ &ma <- { ma with current = _ret' } ] s3)
      | s3 = -{resolve'1 ma}- s4
      | s4 = UInt32.add {mb.current} {k} (fun (_ret':uint32) ->  [ &mb <- { mb with current = _ret' } ] s5)
      | s5 = -{resolve'1 mb}- s6
      | s6 = -{resolve'0 ml}- s7
      | s7 = sum_x'0 {l} (fun (_ret':uint32) ->  [ &_18 <- _ret' ] s8)
      | s8 = bb5 ]
      
    | bb5 = s0
      [ s0 = UInt32.add {sum0} {j} (fun (_ret':uint32) ->  [ &_21 <- _ret' ] s1)
      | s1 = UInt32.add {_21} {k} (fun (_ret':uint32) ->  [ &_20 <- _ret' ] s2)
      | s2 = UInt32.eq {_18} {_20} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s3)
      | s3 = any [ br0 -> {_17 = false} (! bb7) | br1 -> {_17} (! bb6) ]  ]
      
    | bb6 = bb8
    | bb8 = return' {_0}
    | bb7 = {[%#sinc_some_2_list0] false} any ]
    )
    [ & _0 : () = any_l ()
    | & l : t_List'0 = l
    | & j : uint32 = j
    | & k : uint32 = k
    | & sum0 : uint32 = any_l ()
    | & ma : borrowed uint32 = any_l ()
    | & ml : borrowed (t_List'0) = any_l ()
    | & _9 : (borrowed uint32, borrowed (t_List'0)) = any_l ()
    | & _10 : borrowed (t_List'0) = any_l ()
    | & mb : borrowed uint32 = any_l ()
    | & _12 : (borrowed uint32, borrowed (t_List'0)) = any_l ()
    | & _13 : borrowed (t_List'0) = any_l ()
    | & _17 : bool = any_l ()
    | & _18 : uint32 = any_l ()
    | & _20 : uint32 = any_l ()
    | & _21 : uint32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
