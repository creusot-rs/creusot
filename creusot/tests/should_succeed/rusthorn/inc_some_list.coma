
module T_inc_some_list__List
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_List  =
    | C_Cons uint32 (t_List)
    | C_Nil
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Cons (input:t_List) (ret  (field_0:uint32) (field_1:t_List))= any
    [ good (field_0:uint32) (field_1:t_List)-> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:uint32) (field_1:t_List)-> {C_Cons field_0 field_1 <> input} {false} any ]
    
  
  let rec v_Nil (input:t_List) (ret  )= any [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} {false} any ] 
end
module M_inc_some_list__qy123zimplqy35z0qy125z__lemma_sum_nonneg__Impl
  let%span sinc_some_list0 = "../inc_some_list.rs" 32 14 32 29
  
  let%span sinc_some_list1 = "../inc_some_list.rs" 31 15 31 19
  
  let%span span2 = "../inc_some_list.rs" 23 12 26 13
  
  use T_inc_some_list__List as List'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  function sum'0 [#"../inc_some_list.rs" 21 4 21 23] (self : List'0.t_List) : int =
    [%#span2] match self with
      | List'0.C_Cons a l -> UInt32.to_int a + sum'0 l
      | List'0.C_Nil -> 0
      end
  
  constant self  : List'0.t_List
  
  function lemma_sum_nonneg [#"../inc_some_list.rs" 33 4 33 30] (self : List'0.t_List) : ()
  
  goal vc_lemma_sum_nonneg : match self with
    | List'0.C_Cons _ l -> ([%#sinc_some_list0] sum'0 l >= 0)  -> ([%#sinc_some_list0] sum'0 self >= 0)
    | List'0.C_Nil -> [%#sinc_some_list0] sum'0 self >= 0
    end
end
module M_inc_some_list__qy123zimplqy35z0qy125z__sum_x
  let%span sinc_some_list0 = "../inc_some_list.rs" 45 19 45 20
  
  let%span sinc_some_list1 = "../inc_some_list.rs" 40 15 40 38
  
  let%span sinc_some_list2 = "../inc_some_list.rs" 41 14 41 35
  
  let%span span3 = "../inc_some_list.rs" 23 12 26 13
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_inc_some_list__List as List'0
  
  function sum'0 [#"../inc_some_list.rs" 21 4 21 23] (self : List'0.t_List) : int =
    [%#span3] match self with
      | List'0.C_Cons a l -> UInt32.to_int a + sum'0 l
      | List'0.C_Nil -> 0
      end
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  let rec sum_x (self:List'0.t_List) (return'  (ret:uint32))= {[%#sinc_some_list1] sum'0 self <= 1000000}
    (! bb0
    [ bb0 = any
      [ br0 (a:uint32) (b:List'0.t_List)-> {self = List'0.C_Cons a b} (! bb2) | br1 -> {self = List'0.C_Nil } (! bb3) ]
      
    | bb3 = s0 [ s0 =  [ &_0 <- [%#sinc_some_list0] (0 : uint32) ] s1 | s1 = bb6 ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = List'0.v_Cons {self} (fun (r0'0:uint32) (r1'0:List'0.t_List) ->  [ &a <- r0'0 ] s1)
      | s1 = List'0.v_Cons {self} (fun (r0'1:uint32) (r1'1:List'0.t_List) ->  [ &l <- r1'1 ] s2)
      | s2 = sum_x {l} (fun (_ret':uint32) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = UInt32.add {a} {_8} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = return' {_0} ]
    )
    [ & _0 : uint32 = any_l ()
    | & self : List'0.t_List = self
    | & a : uint32 = any_l ()
    | & l : List'0.t_List = any_l ()
    | & _8 : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [%#sinc_some_list2] UInt32.to_int result = sum'0 self}
      (! return' {result}) ]
    
end
module M_inc_some_list__qy123zimplqy35z0qy125z__take_some
  let%span sinc_some_list0 = "../inc_some_list.rs" 54 16 54 51
  
  let%span sinc_some_list1 = "../inc_some_list.rs" 55 19 55 27
  
  let%span sinc_some_list2 = "../inc_some_list.rs" 49 14 49 64
  
  let%span sinc_some_list3 = "../inc_some_list.rs" 50 14 50 35
  
  let%span span4 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span5 = "../inc_some_list.rs" 23 12 26 13
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span7 = "../inc_some_list.rs" 32 14 32 29
  
  let%span span8 = "../inc_some_list.rs" 31 15 31 19
  
  let%span span9 = "../inc_some_list.rs" 34 8 37 9
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  function shallow_model'0 (self : borrowed uint32) : int =
    [%#span4] UInt32.to_int self.current
  
  use prelude.prelude.Int
  
  use T_inc_some_list__List as List'0
  
  function sum'0 [#"../inc_some_list.rs" 21 4 21 23] (self : List'0.t_List) : int =
    [%#span5] match self with
      | List'0.C_Cons a l -> UInt32.to_int a + sum'0 l
      | List'0.C_Nil -> 0
      end
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed uint32) =
    [%#span6] self.final = self.current
  
  predicate resolve'1 (self : borrowed (List'0.t_List)) =
    [%#span6] self.final = self.current
  
  let rec random'0 (_1:()) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  function lemma_sum_nonneg'0 [#"../inc_some_list.rs" 33 4 33 30] (self : List'0.t_List) : ()
  
  axiom lemma_sum_nonneg'0_def : forall self : List'0.t_List . lemma_sum_nonneg'0 self
  = ([%#span9] match self with
    | List'0.C_Cons _ l -> lemma_sum_nonneg'0 l
    | List'0.C_Nil -> ()
    end)
  
  axiom lemma_sum_nonneg'0_spec : forall self : List'0.t_List . [%#span7] sum'0 self >= 0
  
  predicate resolve'0 (self : borrowed (List'0.t_List)) =
    [%#span6] self.final = self.current
  
  let rec take_some (self:borrowed (List'0.t_List)) (return'  (ret:borrowed uint32))= (! bb0
    [ bb0 = any
      [ br0 (a:uint32) (b:List'0.t_List)-> {self.current = List'0.C_Cons a b} (! bb2)
      | br1 -> {self.current = List'0.C_Nil } (! bb3) ]
      
    | bb3 = s0 [ s0 = -{resolve'0 self}- s1 | s1 = bb11 ] 
    | bb11 = bb11 [ bb11 = (! bb12) [ bb12 = bb11 ]  ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = List'0.v_Cons {self.current}
          (fun (r0'0:uint32) (r1'0:List'0.t_List) ->
            Borrow.borrow_mut <uint32> {r0'0}
              (fun (_ret':borrowed uint32) ->
                 [ &ma <- _ret' ] 
                List'0.v_Cons {self.current}
                  (fun (l_0'0:uint32) (l_1'0:List'0.t_List) ->
                     [ &self <- { self with current = List'0.C_Cons ma.final l_1'0 ; } ] 
                    s1)))
      | s1 = List'0.v_Cons {self.current}
          (fun (r0'1:uint32) (r1'1:List'0.t_List) ->
            Borrow.borrow_mut <List'0.t_List> {r1'1}
              (fun (_ret':borrowed (List'0.t_List)) ->
                 [ &ml <- _ret' ] 
                List'0.v_Cons {self.current}
                  (fun (l_0'1:uint32) (l_1'1:List'0.t_List) ->
                     [ &self <- { self with current = List'0.C_Cons l_0'1 ml.final ; } ] 
                    s2)))
      | s2 =  [ &_10 <- [%#sinc_some_list0] Snapshot.new (lemma_sum_nonneg'0 ml.current) ] s3
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = random'0 {[%#sinc_some_list1] ()} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ] 
    | bb7 = s0
      [ s0 = -{resolve'1 ml}- s1
      | s1 = Borrow.borrow_final <uint32> {ma.current} {Borrow.get_id ma}
          (fun (_ret':borrowed uint32) ->  [ &_14 <- _ret' ]  [ &ma <- { ma with current = _14.final ; } ] s2)
      | s2 = Borrow.borrow_final <uint32> {_14.current} {Borrow.get_id _14}
          (fun (_ret':borrowed uint32) ->  [ &_12 <- _ret' ]  [ &_14 <- { _14 with current = _12.final ; } ] s3)
      | s3 = -{resolve'2 _14}- s4
      | s4 = bb10 ]
      
    | bb8 = s0
      [ s0 = -{resolve'2 ma}- s1
      | s1 = Borrow.borrow_final <List'0.t_List> {ml.current} {Borrow.get_id ml}
          (fun (_ret':borrowed (List'0.t_List)) ->  [ &_16 <- _ret' ]  [ &ml <- { ml with current = _16.final ; } ] s2)
      | s2 = take_some {_16} (fun (_ret':borrowed uint32) ->  [ &_15 <- _ret' ] s3)
      | s3 = bb9 ]
      
    | bb9 = s0
      [ s0 = Borrow.borrow_final <uint32> {_15.current} {Borrow.get_id _15}
          (fun (_ret':borrowed uint32) ->  [ &_12 <- _ret' ]  [ &_15 <- { _15 with current = _12.final ; } ] s1)
      | s1 = -{resolve'2 _15}- s2
      | s2 = bb10 ]
      
    | bb10 = s0
      [ s0 = Borrow.borrow_final <uint32> {_12.current} {Borrow.get_id _12}
          (fun (_ret':borrowed uint32) ->  [ &_9 <- _ret' ]  [ &_12 <- { _12 with current = _9.final ; } ] s1)
      | s1 = Borrow.borrow_final <uint32> {_9.current} {Borrow.get_id _9}
          (fun (_ret':borrowed uint32) ->  [ &_5 <- _ret' ]  [ &_9 <- { _9 with current = _5.final ; } ] s2)
      | s2 = -{resolve'2 _12}- s3
      | s3 = -{resolve'2 _9}- s4
      | s4 = -{resolve'1 ml}- s5
      | s5 = -{resolve'2 ma}- s6
      | s6 = Borrow.borrow_final <uint32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed uint32) ->  [ &_2 <- _ret' ]  [ &_5 <- { _5 with current = _2.final ; } ] s7)
      | s7 = Borrow.borrow_final <uint32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed uint32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _0.final ; } ] s8)
      | s8 = -{resolve'2 _5}- s9
      | s9 = -{resolve'2 _2}- s10
      | s10 = -{resolve'0 self}- s11
      | s11 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed uint32 = any_l ()
    | & self : borrowed (List'0.t_List) = self
    | & _2 : borrowed uint32 = any_l ()
    | & _5 : borrowed uint32 = any_l ()
    | & ma : borrowed uint32 = any_l ()
    | & ml : borrowed (List'0.t_List) = any_l ()
    | & _9 : borrowed uint32 = any_l ()
    | & _10 : Snapshot.snap_ty () = any_l ()
    | & _12 : borrowed uint32 = any_l ()
    | & _13 : bool = any_l ()
    | & _14 : borrowed uint32 = any_l ()
    | & _15 : borrowed uint32 = any_l ()
    | & _16 : borrowed (List'0.t_List) = any_l () ]
    
    [ return' (result:borrowed uint32)-> {[@expl:postcondition] [%#sinc_some_list3] shallow_model'0 result
      <= sum'0 self.current}
      {[@expl:postcondition] [%#sinc_some_list2] sum'0 self.final - sum'0 self.current
      = UInt32.to_int result.final - shallow_model'0 result}
      (! return' {result}) ]
    
end
module M_inc_some_list__inc_some_list
  let%span sinc_some_list0 = "../inc_some_list.rs" 71 4 71 34
  
  let%span sinc_some_list1 = "../inc_some_list.rs" 66 11 66 36
  
  let%span span2 = "../inc_some_list.rs" 23 12 26 13
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span4 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span5 = "../inc_some_list.rs" 49 14 49 64
  
  let%span span6 = "../inc_some_list.rs" 50 14 50 35
  
  let%span span7 = "../inc_some_list.rs" 40 15 40 38
  
  let%span span8 = "../inc_some_list.rs" 41 14 41 35
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_inc_some_list__List as List'0
  
  function sum'0 [#"../inc_some_list.rs" 21 4 21 23] (self : List'0.t_List) : int =
    [%#span2] match self with
      | List'0.C_Cons a l -> UInt32.to_int a + sum'0 l
      | List'0.C_Nil -> 0
      end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  predicate resolve'0 (self : borrowed uint32) =
    [%#span3] self.final = self.current
  
  use prelude.prelude.Int
  
  function shallow_model'0 (self : borrowed uint32) : int =
    [%#span4] UInt32.to_int self.current
  
  let rec take_some'0 (self:borrowed (List'0.t_List)) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {[%#span6] shallow_model'0 result <= sum'0 self.current}
      {[%#span5] sum'0 self.final - sum'0 self.current = UInt32.to_int result.final - shallow_model'0 result}
      (! return' {result}) ]
    
  
  let rec sum_x'0 (self:List'0.t_List) (return'  (ret:uint32))= {[@expl:precondition] [%#span7] sum'0 self <= 1000000}
    any [ return' (result:uint32)-> {[%#span8] UInt32.to_int result = sum'0 self} (! return' {result}) ] 
  
  let rec inc_some_list (l:List'0.t_List) (k:uint32) (return'  (ret:()))= {[%#sinc_some_list1] sum'0 l + UInt32.to_int k
    <= 1000000}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = sum_x'0 {l} (fun (_ret':uint32) ->  [ &sum0 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <List'0.t_List> {l}
          (fun (_ret':borrowed (List'0.t_List)) ->  [ &_7 <- _ret' ]  [ &l <- _7.final ] s1)
      | s1 = take_some'0 {_7} (fun (_ret':borrowed uint32) ->  [ &ma <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = UInt32.add {ma.current} {k} (fun (_ret':uint32) ->  [ &ma <- { ma with current = _ret' ; } ] s1)
      | s1 = -{resolve'0 ma}- s2
      | s2 = sum_x'0 {l} (fun (_ret':uint32) ->  [ &_11 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = s0
      [ s0 = UInt32.add {sum0} {k} (fun (_ret':uint32) ->  [ &_13 <- _ret' ] s1)
      | s1 = UInt32.eq {_11} {_13} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s2)
      | s2 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb5) ]  ]
      
    | bb5 = bb7
    | bb7 = return' {_0}
    | bb6 = {[%#sinc_some_list0] false} any ]
    )
    [ & _0 : () = any_l ()
    | & l : List'0.t_List = l
    | & k : uint32 = k
    | & sum0 : uint32 = any_l ()
    | & ma : borrowed uint32 = any_l ()
    | & _7 : borrowed (List'0.t_List) = any_l ()
    | & _10 : bool = any_l ()
    | & _11 : uint32 = any_l ()
    | & _13 : uint32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_inc_some_list__qy123zimplqy35z1qy125z
  
end
