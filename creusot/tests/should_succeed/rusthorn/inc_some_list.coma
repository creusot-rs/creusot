
module IncSomeList_List_Type
  use prelude.UInt32
  use prelude.Int
  type t_list  =
    | C_Cons uint32 (t_list)
    | C_Nil
    
  function any_l (_ : 'b) : 'a
  let rec cons (input:t_list) (ret  (field_0:uint32) (field_1:t_list))= any
    [ good (field_0:uint32) (field_1:t_list)-> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:uint32) (field_1:t_list)-> {C_Cons field_0 field_1 <> input} {false} any ]
    
  let rec nil (input:t_list) (ret  )= any [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} {false} any ] 
end
module IncSomeList_Impl0_LemmaSumNonneg_Impl
  use IncSomeList_List_Type as IncSomeList_List_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function sum'0 [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int =
    [#"../inc_some_list.rs" 23 12 26 13] match self with
      | IncSomeList_List_Type.C_Cons a l -> UInt32.to_int a + sum'0 l
      | IncSomeList_List_Type.C_Nil -> 0
      end
  let rec sum'0 (self:IncSomeList_List_Type.t_list) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum'0 self} (! return' {result}) ]
    
  constant self  : IncSomeList_List_Type.t_list
  function lemma_sum_nonneg [#"../inc_some_list.rs" 33 4 33 30] (self : IncSomeList_List_Type.t_list) : ()
  goal vc_lemma_sum_nonneg : match self with
    | IncSomeList_List_Type.C_Cons _ l -> ([#"../inc_some_list.rs" 32 14 32 29] sum'0 l >= 0)
     -> ([#"../inc_some_list.rs" 32 14 32 29] sum'0 self >= 0)
    | IncSomeList_List_Type.C_Nil -> [#"../inc_some_list.rs" 32 14 32 29] sum'0 self >= 0
    end
end
module IncSomeList_Impl0_SumX
  use prelude.UInt32
  use prelude.Int
  use IncSomeList_List_Type as IncSomeList_List_Type
  function sum'0 [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int =
    [#"../inc_some_list.rs" 23 12 26 13] match self with
      | IncSomeList_List_Type.C_Cons a l -> UInt32.to_int a + sum'0 l
      | IncSomeList_List_Type.C_Nil -> 0
      end
  let rec sum'0 (self:IncSomeList_List_Type.t_list) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  use prelude.Intrinsic
  use prelude.UInt32
  let rec sum_x (self:IncSomeList_List_Type.t_list) (return'  (ret:uint32))= {[#"../inc_some_list.rs" 40 15 40 38] sum'0 self
    <= 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:uint32) (b:IncSomeList_List_Type.t_list)-> {self = IncSomeList_List_Type.C_Cons a b} (! bb2)
        | br1 -> {self = IncSomeList_List_Type.C_Nil } (! bb3) ]
         ]
      
    | bb1 = s0 [ s0 = {[#"../inc_some_list.rs" 43 14 43 18] false} any ] 
    | bb3 = s0 [ s0 =  [ &_0 <- [#"../inc_some_list.rs" 45 19 45 20] (0 : uint32) ] s1 | s1 = bb6 ] 
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = IncSomeList_List_Type.cons {self}
          (fun (r0'0:uint32) (r1'0:IncSomeList_List_Type.t_list) ->  [ &a <- r0'0 ] s1)
      | s1 = IncSomeList_List_Type.cons {self}
          (fun (r0'1:uint32) (r1'1:IncSomeList_List_Type.t_list) ->  [ &l <- r1'1 ] s2)
      | s2 = sum_x {l} (fun (_ret':uint32) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = UInt32.add {a} {_8}
          (fun (_ret':uint32) ->  [ &_0 <- _ret' ] (any [ any_ (_any:uint32)-> (!  [ &_8 <- _any ] s1) ] ))
      | s1 = bb6 ]
      
    | bb6 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l () : uint32
    | & self : IncSomeList_List_Type.t_list = self
    | & a : uint32 = any_l () : uint32
    | & l : IncSomeList_List_Type.t_list = any_l () : IncSomeList_List_Type.t_list
    | & _8 : uint32 = any_l () : uint32 ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [#"../inc_some_list.rs" 41 14 41 35] UInt32.to_int result
      = sum'0 self}
      (! return' {result}) ]
    
end
module IncSomeList_Impl0_TakeSome
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  use prelude.UInt32
  function shallow_model'0 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] UInt32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed uint32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use prelude.Int
  use IncSomeList_List_Type as IncSomeList_List_Type
  function sum'0 [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int =
    [#"../inc_some_list.rs" 23 12 26 13] match self with
      | IncSomeList_List_Type.C_Cons a l -> UInt32.to_int a + sum'0 l
      | IncSomeList_List_Type.C_Nil -> 0
      end
  let rec sum'0 (self:IncSomeList_List_Type.t_list) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Intrinsic
  predicate resolve'2 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : borrowed (IncSomeList_List_Type.t_list)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (IncSomeList_List_Type.t_list)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  let rec random'0 (_1:()) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  use prelude.Snapshot
  function lemma_sum_nonneg'0 [#"../inc_some_list.rs" 33 4 33 30] (self : IncSomeList_List_Type.t_list) : ()
  axiom lemma_sum_nonneg'0_def : forall self : IncSomeList_List_Type.t_list . lemma_sum_nonneg'0 self
  = ([#"../inc_some_list.rs" 34 8 37 9] match self with
    | IncSomeList_List_Type.C_Cons _ l -> lemma_sum_nonneg'0 l
    | IncSomeList_List_Type.C_Nil -> ()
    end)
  let rec lemma_sum_nonneg'0 (self:IncSomeList_List_Type.t_list) (return'  (ret:()))= any
    [ return' (result:())-> {result = lemma_sum_nonneg'0 self} (! return' {result}) ]
    
  axiom lemma_sum_nonneg'0_spec : forall self : IncSomeList_List_Type.t_list . [#"../inc_some_list.rs" 32 14 32 29] sum'0 self
  >= 0
  predicate resolve'0 (self : borrowed (IncSomeList_List_Type.t_list)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (IncSomeList_List_Type.t_list)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec take_some (self:borrowed (IncSomeList_List_Type.t_list)) (return'  (ret:borrowed uint32))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:uint32) (b:IncSomeList_List_Type.t_list)-> { * self = IncSomeList_List_Type.C_Cons a b} (! bb2)
        | br1 -> { * self = IncSomeList_List_Type.C_Nil } (! bb3) ]
         ]
      
    | bb1 = s0 [ s0 = -{resolve'0 self}- s1 | s1 = {[#"../inc_some_list.rs" 52 14 52 18] false} any ] 
    | bb3 = s0 [ s0 = -{resolve'0 self}- s1 | s1 = bb11 ] 
    | bb11 = bb11 [ bb11 = (! s0 [ s0 = bb12 ] ) [ bb12 = s0 [ s0 = bb11 ]  ]  ] 
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = IncSomeList_List_Type.cons { * self}
          (fun (r0'0:uint32) (r1'0:IncSomeList_List_Type.t_list) ->
            Borrow.borrow_final <uint32> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed uint32) ->
                 [ &ma <- _ret' ] 
                IncSomeList_List_Type.cons { * self}
                  (fun (l_0'0:uint32) (l_1'0:IncSomeList_List_Type.t_list) ->
                    
                    [ &self <- { self with current = (IncSomeList_List_Type.C_Cons ( ^ ma) l_1'0 : IncSomeList_List_Type.t_list) ; } ]
                    
                    s1)))
      | s1 = IncSomeList_List_Type.cons { * self}
          (fun (r0'1:uint32) (r1'1:IncSomeList_List_Type.t_list) ->
            Borrow.borrow_final <IncSomeList_List_Type.t_list> {r1'1} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed (IncSomeList_List_Type.t_list)) ->
                 [ &ml <- _ret' ] 
                IncSomeList_List_Type.cons { * self}
                  (fun (l_0'1:uint32) (l_1'1:IncSomeList_List_Type.t_list) ->
                    
                    [ &self <- { self with current = (IncSomeList_List_Type.C_Cons l_0'1 ( ^ ml) : IncSomeList_List_Type.t_list) ; } ]
                    
                    s2)))
      | s2 =  [ &_10 <- [#"../inc_some_list.rs" 54 16 54 51] Snapshot.new (lemma_sum_nonneg'0 ( * ml)) ] s3
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = random'0 {[#"../inc_some_list.rs" 55 19 55 27] ()} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s1) | s1 = bb6 ]
      
    | bb6 = s0 [ s0 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ]  ] 
    | bb7 = s0
      [ s0 = -{resolve'1 ml}- s1
      | s1 = Borrow.borrow_final <uint32> { * ma} {Borrow.get_id ma}
          (fun (_ret':borrowed uint32) ->  [ &_14 <- _ret' ]  [ &ma <- { ma with current = ( ^ _14) ; } ] s2)
      | s2 = Borrow.borrow_final <uint32> { * _14} {Borrow.get_id _14}
          (fun (_ret':borrowed uint32) ->  [ &_12 <- _ret' ]  [ &_14 <- { _14 with current = ( ^ _12) ; } ] s3)
      | s3 = -{resolve'2 _14}- s4
      | s4 = bb10 ]
      
    | bb8 = s0
      [ s0 = -{resolve'2 ma}- s1
      | s1 = Borrow.borrow_mut <IncSomeList_List_Type.t_list> { * ml}
          (fun (_ret':borrowed (IncSomeList_List_Type.t_list)) ->
             [ &_16 <- _ret' ] 
             [ &ml <- { ml with current = ( ^ _16) ; } ] 
            s2)
      | s2 = take_some {_16} (fun (_ret':borrowed uint32) ->  [ &_15 <- _ret' ] s3)
      | s3 = bb9 ]
      
    | bb9 = s0
      [ s0 = Borrow.borrow_final <uint32> { * _15} {Borrow.get_id _15}
          (fun (_ret':borrowed uint32) ->  [ &_12 <- _ret' ]  [ &_15 <- { _15 with current = ( ^ _12) ; } ] s1)
      | s1 = -{resolve'2 _15}- s2
      | s2 = bb10 ]
      
    | bb10 = s0
      [ s0 = Borrow.borrow_final <uint32> { * _12} {Borrow.get_id _12}
          (fun (_ret':borrowed uint32) ->  [ &_9 <- _ret' ]  [ &_12 <- { _12 with current = ( ^ _9) ; } ] s1)
      | s1 = Borrow.borrow_final <uint32> { * _9} {Borrow.get_id _9}
          (fun (_ret':borrowed uint32) ->  [ &_5 <- _ret' ]  [ &_9 <- { _9 with current = ( ^ _5) ; } ] s2)
      | s2 = -{resolve'2 _12}- s3
      | s3 = -{resolve'2 _9}- s4
      | s4 = -{resolve'1 ml}- s5
      | s5 = -{resolve'2 ma}- s6
      | s6 = Borrow.borrow_final <uint32> { * _5} {Borrow.get_id _5}
          (fun (_ret':borrowed uint32) ->  [ &_2 <- _ret' ]  [ &_5 <- { _5 with current = ( ^ _2) ; } ] s7)
      | s7 = Borrow.borrow_final <uint32> { * _2} {Borrow.get_id _2}
          (fun (_ret':borrowed uint32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = ( ^ _0) ; } ] s8)
      | s8 = -{resolve'2 _5}- s9
      | s9 = -{resolve'2 _2}- s10
      | s10 = -{resolve'0 self}- s11
      | s11 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed uint32 = any_l () : borrowed uint32
    | & self : borrowed (IncSomeList_List_Type.t_list) = self
    | & _2 : borrowed uint32 = any_l () : borrowed uint32
    | & _5 : borrowed uint32 = any_l () : borrowed uint32
    | & ma : borrowed uint32 = any_l () : borrowed uint32
    | & ml : borrowed (IncSomeList_List_Type.t_list) = any_l () : borrowed (IncSomeList_List_Type.t_list)
    | & _9 : borrowed uint32 = any_l () : borrowed uint32
    | & _10 : Snapshot.snap_ty () = any_l () : Snapshot.snap_ty ()
    | & _12 : borrowed uint32 = any_l () : borrowed uint32
    | & _13 : bool = any_l () : bool
    | & _14 : borrowed uint32 = any_l () : borrowed uint32
    | & _15 : borrowed uint32 = any_l () : borrowed uint32
    | & _16 : borrowed (IncSomeList_List_Type.t_list) = any_l () : borrowed (IncSomeList_List_Type.t_list) ]
    
    [ return' (result:borrowed uint32)-> {[@expl:postcondition] [#"../inc_some_list.rs" 50 14 50 35] shallow_model'0 result
      <= sum'0 ( * self)}
      {[@expl:postcondition] [#"../inc_some_list.rs" 49 14 49 64] sum'0 ( ^ self) - sum'0 ( * self)
      = UInt32.to_int ( ^ result) - shallow_model'0 result}
      (! return' {result}) ]
    
end
module IncSomeList_IncSomeList
  use prelude.UInt32
  use prelude.Int
  use IncSomeList_List_Type as IncSomeList_List_Type
  function sum'0 [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int =
    [#"../inc_some_list.rs" 23 12 26 13] match self with
      | IncSomeList_List_Type.C_Cons a l -> UInt32.to_int a + sum'0 l
      | IncSomeList_List_Type.C_Nil -> 0
      end
  let rec sum'0 (self:IncSomeList_List_Type.t_list) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.UInt32
  predicate resolve'0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  function shallow_model'0 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] UInt32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed uint32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec take_some'0 (self:borrowed (IncSomeList_List_Type.t_list)) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {[#"../inc_some_list.rs" 50 14 50 35] shallow_model'0 result
      <= sum'0 ( * self)}
      {[#"../inc_some_list.rs" 49 14 49 64] sum'0 ( ^ self) - sum'0 ( * self)
      = UInt32.to_int ( ^ result) - shallow_model'0 result}
      (! return' {result}) ]
    
  let rec sum_x'0 (self:IncSomeList_List_Type.t_list) (return'  (ret:uint32))= {[@expl:precondition] [#"../inc_some_list.rs" 40 15 40 38] sum'0 self
    <= 1000000}
    any
    [ return' (result:uint32)-> {[#"../inc_some_list.rs" 41 14 41 35] UInt32.to_int result = sum'0 self}
      (! return' {result}) ]
    
  let rec inc_some_list (l:IncSomeList_List_Type.t_list) (k:uint32) (return'  (ret:()))= {[#"../inc_some_list.rs" 66 11 66 36] sum'0 l
    + UInt32.to_int k
    <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = sum_x'0 {l} (fun (_ret':uint32) ->  [ &sum0 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <IncSomeList_List_Type.t_list> {l}
          (fun (_ret':borrowed (IncSomeList_List_Type.t_list)) ->  [ &_7 <- _ret' ]  [ &l <-  ^ _7 ] s1)
      | s1 = take_some'0 {_7} (fun (_ret':borrowed uint32) ->  [ &ma <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = UInt32.add { * ma} {k} (fun (_ret':uint32) ->  [ &ma <- { ma with current = _ret' ; } ] s1)
      | s1 = -{resolve'0 ma}- s2
      | s2 = sum_x'0 {l} (fun (_ret':uint32) ->  [ &_11 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = s0
      [ s0 = UInt32.add {sum0} {k} (fun (_ret':uint32) ->  [ &_13 <- _ret' ] s1)
      | s1 = UInt32.eq {_11} {_13}
          (fun (_ret':bool) ->
             [ &_10 <- _ret' ] 
            (any
            [ any_ (_any:uint32)-> (!  [ &_11 <- _any ] (any [ any_ (_any:uint32)-> (!  [ &_13 <- _any ] s2) ] )) ]
            ))
      | s2 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb5) ]  ]
      
    | bb5 = s0 [ s0 =  [ &_0 <- [#"../inc_some_list.rs" 67 42 72 1] () ] s1 | s1 = bb7 ] 
    | bb7 = s0 [ s0 = return' {_0} ] 
    | bb6 = s0 [ s0 = {[#"../inc_some_list.rs" 71 4 71 34] false} any ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & l : IncSomeList_List_Type.t_list = l
    | & k : uint32 = k
    | & sum0 : uint32 = any_l () : uint32
    | & ma : borrowed uint32 = any_l () : borrowed uint32
    | & _7 : borrowed (IncSomeList_List_Type.t_list) = any_l () : borrowed (IncSomeList_List_Type.t_list)
    | & _10 : bool = any_l () : bool
    | & _11 : uint32 = any_l () : uint32
    | & _13 : uint32 = any_l () : uint32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module IncSomeList_Impl1
  
end
