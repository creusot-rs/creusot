
module IncMaxRepeat_TakeMax
  let%span sinc_max_repeat0 = "../inc_max_repeat.rs" 4 0 5 56
  
  let%span span1 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  predicate resolve'0 (self : borrowed uint32) =
    [%#span1]  ^ self =  * self
  
  let rec take_max (ma:borrowed uint32) (mb:borrowed uint32) (return'  (ret:borrowed uint32))= (! bb0
    [ bb0 = s0
      [ s0 = UInt32.ge { * ma} { * mb} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s1)
      | s1 = any [ br0 -> {_6 = false} (! bb2) | br1 -> {_6} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 mb}- s1
      | s1 = Borrow.borrow_final <uint32> { * ma} {Borrow.get_id ma}
          (fun (_ret':borrowed uint32) ->  [ &_9 <- _ret' ]  [ &ma <- { ma with current = ( ^ _9) ; } ] s2)
      | s2 = Borrow.borrow_final <uint32> { * _9} {Borrow.get_id _9}
          (fun (_ret':borrowed uint32) ->  [ &_5 <- _ret' ]  [ &_9 <- { _9 with current = ( ^ _5) ; } ] s3)
      | s3 = -{resolve'0 _9}- s4
      | s4 = bb3 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 ma}- s1
      | s1 = Borrow.borrow_final <uint32> { * mb} {Borrow.get_id mb}
          (fun (_ret':borrowed uint32) ->  [ &_5 <- _ret' ]  [ &mb <- { mb with current = ( ^ _5) ; } ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_final <uint32> { * _5} {Borrow.get_id _5}
          (fun (_ret':borrowed uint32) ->  [ &_3 <- _ret' ]  [ &_5 <- { _5 with current = ( ^ _3) ; } ] s1)
      | s1 = Borrow.borrow_final <uint32> { * _3} {Borrow.get_id _3}
          (fun (_ret':borrowed uint32) ->  [ &_0 <- _ret' ]  [ &_3 <- { _3 with current = ( ^ _0) ; } ] s2)
      | s2 = -{resolve'0 _5}- s3
      | s3 = -{resolve'0 _3}- s4
      | s4 = -{resolve'0 mb}- s5
      | s5 = -{resolve'0 ma}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed uint32 = any_l ()
    | & ma : borrowed uint32 = ma
    | & mb : borrowed uint32 = mb
    | & _3 : borrowed uint32 = any_l ()
    | & _5 : borrowed uint32 = any_l ()
    | & _6 : bool = any_l ()
    | & _9 : borrowed uint32 = any_l () ]
    
    [ return' (result:borrowed uint32)-> {[@expl:postcondition] [%#sinc_max_repeat0] if  * ma >=  * mb then
         * mb =  ^ mb /\ result = ma
      else
         * ma =  ^ ma /\ result = mb
      }
      (! return' {result}) ]
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
  
  function any_l (_ : 'b) : 'a
  
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  
  function range_end [@inline:trivial] (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function range_start [@inline:trivial] (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module CreusotContracts_Snapshot_Snapshot_Type
  type t_snapshot 't
end
module CreusotContracts_Logic_Seq2_Seq_Type
  use seq.Seq
  
  type t_seq 't =
    | C_Seq (Seq.seq 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_seq < 't > (input:t_seq 't) (ret  (field_0:Seq.seq 't))= any
    [ good (field_0:Seq.seq 't)-> {C_Seq field_0 = input} (! ret {field_0})
    | bad (field_0:Seq.seq 't)-> {C_Seq field_0 <> input} {false} any ]
    
  
  function seq_0 [@inline:trivial] (self : t_seq 't) : Seq.seq 't =
    match self with
      | C_Seq a -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module IncMaxRepeat_IncMaxRepeat
  let%span sinc_max_repeat0 = "../inc_max_repeat.rs" 18 13 18 14
  
  let%span sinc_max_repeat1 = "../inc_max_repeat.rs" 16 4 16 86
  
  let%span sinc_max_repeat2 = "../inc_max_repeat.rs" 16 4 16 86
  
  let%span sinc_max_repeat3 = "../inc_max_repeat.rs" 16 4 16 86
  
  let%span sinc_max_repeat4 = "../inc_max_repeat.rs" 16 16 16 84
  
  let%span sinc_max_repeat5 = "../inc_max_repeat.rs" 17 16 17 70
  
  let%span sinc_max_repeat6 = "../inc_max_repeat.rs" 16 4 16 86
  
  let%span sinc_max_repeat7 = "../inc_max_repeat.rs" 20 15 20 16
  
  let%span sinc_max_repeat8 = "../inc_max_repeat.rs" 22 4 22 37
  
  let%span sinc_max_repeat9 = "../inc_max_repeat.rs" 14 11 14 70
  
  let%span span10 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span18 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span19 = "../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  
  let%span span20 = "../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  
  let%span span21 = "../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  
  let%span span22 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  
  let%span span23 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33
  
  let%span span24 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  
  let%span span25 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63
  
  let%span span26 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  
  let%span span27 = "../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  
  let%span span28 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span29 = "../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  
  let%span span30 = "../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  
  let%span span31 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span32 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span33 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span34 = "../inc_max_repeat.rs" 4 0 5 56
  
  let%span span35 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span36 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span37 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span38 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span39 = "../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  
  let%span span40 = "" 0 0 0 0
  
  let%span span41 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span42 = "" 0 0 0 0
  
  let%span span43 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span44 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span45 = "../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span46 = "../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span47 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span48 = "" 0 0 0 0
  
  let%span span49 = "" 0 0 0 0
  
  use prelude.prelude.UInt32
  
  predicate invariant'4 (self : uint32) =
    [%#span10] true
  
  predicate inv'4 (_x : uint32)
  
  axiom inv'4 : forall x : uint32 . inv'4 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option uint32) =
    [%#span10] true
  
  predicate inv'3 (_x : Option'0.t_option uint32)
  
  axiom inv'3 : forall x : Option'0.t_option uint32 . inv'3 x = true
  
  use Core_Ops_Range_Range_Type as Range'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Range'0.t_range uint32)) =
    [%#span10] true
  
  predicate inv'2 (_x : borrowed (Range'0.t_range uint32))
  
  axiom inv'2 : forall x : borrowed (Range'0.t_range uint32) . inv'2 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'1 (self : Seq'0.t_seq uint32) =
    [%#span10] true
  
  predicate inv'1 (_x : Seq'0.t_seq uint32)
  
  axiom inv'1 : forall x : Seq'0.t_seq uint32 . inv'1 x = true
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  function index_logic'0 (self : Seq'0.t_seq uint32) (x : int) : uint32
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq uint32) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq uint32 . ([%#span11] inv'1 self)  -> ([%#span12] len'0 self >= 0)
  
  function concat'0 (self : Seq'0.t_seq uint32) (other : Seq'0.t_seq uint32) : Seq'0.t_seq uint32
  
  axiom concat'0_spec : forall self : Seq'0.t_seq uint32, other : Seq'0.t_seq uint32 . ([%#span13] inv'1 self)
   -> ([%#span14] inv'1 other)
   -> ([%#span17] inv'1 (concat'0 self other))
  && ([%#span16] forall i : int . 0 <= i /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span15] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  predicate inv'0 (_x : Range'0.t_range uint32)
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  function deep_model'0 (self : uint32) : int =
    [%#span18] UInt32.to_int self
  
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  
  predicate produces'0 (self : Range'0.t_range uint32) (visited : Seq'0.t_seq uint32) (o : Range'0.t_range uint32) =
    [%#span19] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (len'0 visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ len'0 visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < len'0 visited
     -> deep_model'0 (index_logic'0 visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  
  function produces_trans'0 (a : Range'0.t_range uint32) (ab : Seq'0.t_seq uint32) (b : Range'0.t_range uint32) (bc : Seq'0.t_seq uint32) (c : Range'0.t_range uint32) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_range uint32, ab : Seq'0.t_seq uint32, b : Range'0.t_range uint32, bc : Seq'0.t_seq uint32, c : Range'0.t_range uint32 . ([%#span20] produces'0 a ab b)
   -> ([%#span21] produces'0 b bc c)
   -> ([%#span22] inv'0 a)
   -> ([%#span23] inv'1 ab)
   -> ([%#span24] inv'0 b)
   -> ([%#span25] inv'1 bc)  -> ([%#span26] inv'0 c)  -> ([%#span27] produces'0 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq uint32 = [%#span28] ()
  
  function produces_refl'0 (self : Range'0.t_range uint32) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_range uint32 . ([%#span29] inv'0 self)
   -> ([%#span30] produces'0 self (empty'0 : Seq'0.t_seq uint32) self)
  
  predicate invariant'0 (self : Range'0.t_range uint32) =
    [%#span10] true
  
  axiom inv'0 : forall x : Range'0.t_range uint32 . inv'0 x = true
  
  function empty_len'0 (_1 : ()) : () =
    [%#span32] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span31] len'0 (empty'0 : Seq'0.t_seq uint32) = 0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed uint32) =
    [%#span33]  ^ self =  * self
  
  let rec take_max'0 (ma:borrowed uint32) (mb:borrowed uint32) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {[%#span34] if  * ma >=  * mb then
         * mb =  ^ mb /\ result = ma
      else
         * ma =  ^ ma /\ result = mb
      }
      (! return' {result}) ]
    
  
  use seq.Seq
  
  function singleton'0 (v : uint32) : Seq'0.t_seq uint32
  
  axiom singleton'0_spec : forall v : uint32 . ([%#span35] inv'4 v)
   -> ([%#span38] inv'1 (singleton'0 v))
  && ([%#span37] index_logic'0 (singleton'0 v) 0 = v) && ([%#span36] len'0 (singleton'0 v) = 1)
  
  predicate resolve'0 (self : borrowed (Range'0.t_range uint32)) =
    [%#span33]  ^ self =  * self
  
  predicate completed'0 (self : borrowed (Range'0.t_range uint32)) =
    [%#span39] resolve'0 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  
  let rec next'0 (self:borrowed (Range'0.t_range uint32)) (return'  (ret:Option'0.t_option uint32))= {[@expl:precondition] [%#span40] inv'2 self}
    any
    [ return' (result:Option'0.t_option uint32)-> {[%#span42] inv'3 result}
      {[%#span41] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function deref'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq uint32)) : Seq'0.t_seq uint32
  
  function inner'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq uint32)) : Seq'0.t_seq uint32
  
  function deref'1 (self : Snapshot'0.t_snapshot (Range'0.t_range uint32)) : Range'0.t_range uint32
  
  function inner'0 (self : Snapshot'0.t_snapshot (Range'0.t_range uint32)) : Range'0.t_range uint32
  
  function new'1 (x : Seq'0.t_seq uint32) : Snapshot'0.t_snapshot (Seq'0.t_seq uint32)
  
  axiom new'1_spec : forall x : Seq'0.t_seq uint32 . ([%#span43] inv'1 x)  -> ([%#span44] deref'0 (new'1 x) = x)
  
  function new'0 (x : Range'0.t_range uint32) : Snapshot'0.t_snapshot (Range'0.t_range uint32)
  
  axiom new'0_spec : forall x : Range'0.t_range uint32 . ([%#span43] inv'0 x)  -> ([%#span44] deref'1 (new'0 x) = x)
  
  predicate into_iter_post'0 (self : Range'0.t_range uint32) (res : Range'0.t_range uint32) =
    [%#span45] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_range uint32) =
    [%#span46] true
  
  let rec into_iter'0 (self:Range'0.t_range uint32) (return'  (ret:Range'0.t_range uint32))= {[@expl:precondition] [%#span48] inv'0 self}
    {[@expl:precondition] [%#span47] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_range uint32)-> {[%#span49] inv'0 result}
      {[%#span47] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec inc_max_repeat (a:uint32) (b:uint32) (n:uint32) (return'  (ret:()))= {[%#sinc_max_repeat9] a
    <= (1000000 : uint32)
    /\ b <= (1000000 : uint32) /\ n <= (1000000 : uint32)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_7 <- Range'0.C_Range ([%#sinc_max_repeat0] (0 : uint32)) n ] s1
      | s1 = into_iter'0 {_7} (fun (_ret':Range'0.t_range uint32) ->  [ &iter <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#sinc_max_repeat1] new'0 iter ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &produced <- [%#sinc_max_repeat2] new'1 (empty'0 : Seq'0.t_seq uint32) ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [%#sinc_max_repeat5] UInt32.to_int a >= UInt32.to_int b + len'0 (deref'0 produced)
        \/ UInt32.to_int b >= UInt32.to_int a + len'0 (deref'0 produced)}
        {[@expl:loop invariant] [%#sinc_max_repeat4] UInt32.to_int a <= 1000000 + len'0 (deref'0 produced)
        /\ UInt32.to_int b <= 1000000 + len'0 (deref'0 produced)}
        {[@expl:loop invariant] [%#sinc_max_repeat3] produces'0 (inner'0 iter_old) (inner'1 produced) iter}
        {[@expl:loop invariant] [%#sinc_max_repeat3] inv'0 iter}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_range uint32> {iter}
              (fun (_ret':borrowed (Range'0.t_range uint32)) ->  [ &_20 <- _ret' ]  [ &iter <-  ^ _20 ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_range uint32> { * _20} {Borrow.get_id _20}
              (fun (_ret':borrowed (Range'0.t_range uint32)) ->
                 [ &_19 <- _ret' ] 
                 [ &_20 <- { _20 with current = ( ^ _19) ; } ] 
                s2)
          | s2 = next'0 {_19} (fun (_ret':Option'0.t_option uint32) ->  [ &_18 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _20}- s1
          | s1 = any [ br0 -> {_18 = Option'0.C_None } (! bb9) | br1 (a:uint32)-> {_18 = Option'0.C_Some a} (! bb8) ]  ]
          
        | bb8 = bb10
        | bb10 = s0
          [ s0 = Option'0.some <uint32> {_18} (fun (r0'0:uint32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_23 <- [%#sinc_max_repeat6] new'1 (concat'0 (inner'1 produced) (singleton'0 __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _23 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq uint32))-> (!  [ &_23 <- _any ] s1) ] )
          | s1 = Borrow.borrow_mut <uint32> {a} (fun (_ret':borrowed uint32) ->  [ &_27 <- _ret' ]  [ &a <-  ^ _27 ] s2)
          | s2 = Borrow.borrow_final <uint32> { * _27} {Borrow.get_id _27}
              (fun (_ret':borrowed uint32) ->  [ &_26 <- _ret' ]  [ &_27 <- { _27 with current = ( ^ _26) ; } ] s3)
          | s3 = Borrow.borrow_mut <uint32> {b} (fun (_ret':borrowed uint32) ->  [ &_29 <- _ret' ]  [ &b <-  ^ _29 ] s4)
          | s4 = Borrow.borrow_final <uint32> { * _29} {Borrow.get_id _29}
              (fun (_ret':borrowed uint32) ->  [ &_28 <- _ret' ]  [ &_29 <- { _29 with current = ( ^ _28) ; } ] s5)
          | s5 = take_max'0 {_26} {_28} (fun (_ret':borrowed uint32) ->  [ &mc <- _ret' ] s6)
          | s6 = bb12 ]
          
        | bb12 = s0
          [ s0 = -{resolve'1 _29}- s1
          | s1 = -{resolve'1 _27}- s2
          | s2 = UInt32.add { * mc} {[%#sinc_max_repeat7] (1 : uint32)}
              (fun (_ret':uint32) ->  [ &mc <- { mc with current = _ret' ; } ] s3)
          | s3 = -{resolve'1 mc}- s4
          | s4 = bb4 ]
           ]
         ]
      
    | bb7 = {[%#sinc_max_repeat3] false} any
    | bb9 = s0
      [ s0 = UInt32.add {b} {n} (fun (_ret':uint32) ->  [ &_34 <- _ret' ] s1)
      | s1 = UInt32.ge {a} {_34}
          (fun (_ret':bool) ->  [ &_32 <- _ret' ] (any [ any_ (_any:uint32)-> (!  [ &_34 <- _any ] s2) ] ))
      | s2 = any [ br0 -> {_32 = false} (! bb14) | br1 -> {_32} (! bb13) ]  ]
      
    | bb13 = bb17
    | bb14 = s0
      [ s0 = UInt32.add {a} {n} (fun (_ret':uint32) ->  [ &_39 <- _ret' ] s1)
      | s1 = UInt32.ge {b} {_39}
          (fun (_ret':bool) ->  [ &_37 <- _ret' ] (any [ any_ (_any:uint32)-> (!  [ &_39 <- _any ] s2) ] ))
      | s2 = any [ br0 -> {_37 = false} (! bb16) | br1 -> {_37} (! bb15) ]  ]
      
    | bb15 = bb17
    | bb17 = return' {_0}
    | bb16 = {[%#sinc_max_repeat8] false} any ]
    )
    [ & _0 : () = any_l ()
    | & a : uint32 = a
    | & b : uint32 = b
    | & n : uint32 = n
    | & iter : Range'0.t_range uint32 = any_l ()
    | & _7 : Range'0.t_range uint32 = any_l ()
    | & iter_old : Snapshot'0.t_snapshot (Range'0.t_range uint32) = any_l ()
    | & produced : Snapshot'0.t_snapshot (Seq'0.t_seq uint32) = any_l ()
    | & _18 : Option'0.t_option uint32 = any_l ()
    | & _19 : borrowed (Range'0.t_range uint32) = any_l ()
    | & _20 : borrowed (Range'0.t_range uint32) = any_l ()
    | & __creusot_proc_iter_elem : uint32 = any_l ()
    | & _23 : Snapshot'0.t_snapshot (Seq'0.t_seq uint32) = any_l ()
    | & mc : borrowed uint32 = any_l ()
    | & _26 : borrowed uint32 = any_l ()
    | & _27 : borrowed uint32 = any_l ()
    | & _28 : borrowed uint32 = any_l ()
    | & _29 : borrowed uint32 = any_l ()
    | & _32 : bool = any_l ()
    | & _34 : uint32 = any_l ()
    | & _37 : bool = any_l ()
    | & _39 : uint32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
