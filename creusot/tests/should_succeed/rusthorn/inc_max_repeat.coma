
module IncMaxRepeat_TakeMax
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  predicate resolve'0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec take_max (ma:borrowed uint32) (mb:borrowed uint32) (return'  (ret:borrowed uint32))= (! bb0
    [ bb0 = s0
      [ s0 = UInt32.ge { * ma} { * mb} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s1)
      | s1 = any [ br0 -> {_6 = false} (! bb2) | br1 -> {_6} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 mb}- s1
      | s1 = Borrow.borrow_final <uint32> { * ma} {Borrow.get_id ma}
          (fun (_ret':borrowed uint32) ->  [ &_9 <- _ret' ]  [ &ma <- { ma with current = ( ^ _9) ; } ] s2)
      | s2 = Borrow.borrow_final <uint32> { * _9} {Borrow.get_id _9}
          (fun (_ret':borrowed uint32) ->  [ &_5 <- _ret' ]  [ &_9 <- { _9 with current = ( ^ _5) ; } ] s3)
      | s3 = -{resolve'0 _9}- s4
      | s4 = bb3 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 ma}- s1
      | s1 = Borrow.borrow_final <uint32> { * mb} {Borrow.get_id mb}
          (fun (_ret':borrowed uint32) ->  [ &_5 <- _ret' ]  [ &mb <- { mb with current = ( ^ _5) ; } ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_final <uint32> { * _5} {Borrow.get_id _5}
          (fun (_ret':borrowed uint32) ->  [ &_3 <- _ret' ]  [ &_5 <- { _5 with current = ( ^ _3) ; } ] s1)
      | s1 = Borrow.borrow_final <uint32> { * _3} {Borrow.get_id _3}
          (fun (_ret':borrowed uint32) ->  [ &_0 <- _ret' ]  [ &_3 <- { _3 with current = ( ^ _0) ; } ] s2)
      | s2 = -{resolve'0 _5}- s3
      | s3 = -{resolve'0 _3}- s4
      | s4 = -{resolve'0 mb}- s5
      | s5 = -{resolve'0 ma}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed uint32 = any_l () : borrowed uint32
    | & ma : borrowed uint32 = ma
    | & mb : borrowed uint32 = mb
    | & _3 : borrowed uint32 = any_l () : borrowed uint32
    | & _5 : borrowed uint32 = any_l () : borrowed uint32
    | & _6 : bool = any_l () : bool
    | & _9 : borrowed uint32 = any_l () : borrowed uint32 ]
    
    [ return' (result:borrowed uint32)-> {[@expl:postcondition] [#"../inc_max_repeat.rs" 4 0 5 56] if  * ma
      >=  * mb then
         * mb =  ^ mb /\ result = ma
      else
         * ma =  ^ ma /\ result = mb
      }
      (! return' {result}) ]
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  function any_l (_ : 'b) : 'a
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  function range_end (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  function range_start (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module IncMaxRepeat_IncMaxRepeat
  use prelude.UInt32
  use seq.Seq
  predicate invariant'3 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq uint32)
  let rec inv'3 (_x:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq uint32 . inv'3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'2 (self : Core_Option_Option_Type.t_option uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Core_Option_Option_Type.t_option uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option uint32)
  let rec inv'2 (_x:Core_Option_Option_Type.t_option uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option uint32 . inv'2 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant'1 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (Core_Ops_Range_Range_Type.t_range uint32))
  let rec inv'1 (_x:borrowed (Core_Ops_Range_Range_Type.t_range uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range uint32) . inv'1 x = true
  use seq.Seq
  predicate inv'0 (_x : Core_Ops_Range_Range_Type.t_range uint32)
  let rec inv'0 (_x:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  function deep_model'0 (self : uint32) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  let rec deep_model'0 (self:uint32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  predicate produces'0 (self : Core_Ops_Range_Range_Type.t_range uint32) (visited : Seq.seq uint32) (o : Core_Ops_Range_Range_Type.t_range uint32)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  let rec produces'0 (self:Core_Ops_Range_Range_Type.t_range uint32) (visited:Seq.seq uint32) (o:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Ops_Range_Range_Type.t_range uint32) (ab : Seq.seq uint32) (b : Core_Ops_Range_Range_Type.t_range uint32) (bc : Seq.seq uint32) (c : Core_Ops_Range_Range_Type.t_range uint32) : ()
    
  let rec produces_trans'0 (a:Core_Ops_Range_Range_Type.t_range uint32) (ab:Seq.seq uint32) (b:Core_Ops_Range_Range_Type.t_range uint32) (bc:Seq.seq uint32) (c:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'3 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'3 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'0 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Ops_Range_Range_Type.t_range uint32, ab : Seq.seq uint32, b : Core_Ops_Range_Range_Type.t_range uint32, bc : Seq.seq uint32, c : Core_Ops_Range_Range_Type.t_range uint32 . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'3 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'3 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Ops_Range_Range_Type.t_range uint32) : ()
  let rec produces_refl'0 (self:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Core_Ops_Range_Range_Type.t_range uint32 . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  predicate invariant'0 (self : Core_Ops_Range_Range_Type.t_range uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Ops_Range_Range_Type.t_range uint32 . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  let rec take_max'0 (ma:borrowed uint32) (mb:borrowed uint32) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {[#"../inc_max_repeat.rs" 4 0 5 56] if  * ma >=  * mb then
         * mb =  ^ mb /\ result = ma
      else
         * ma =  ^ ma /\ result = mb
      }
      (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve'0 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  let rec completed'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range uint32)) (return'  (ret:Core_Option_Option_Type.t_option uint32))= {[@expl:precondition] inv'1 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option uint32)-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Core_Ops_Range_Range_Type.t_range uint32) (res : Core_Ops_Range_Range_Type.t_range uint32)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'0 (self:Core_Ops_Range_Range_Type.t_range uint32) (res:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Core_Ops_Range_Range_Type.t_range uint32) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'0 (self:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:Core_Ops_Range_Range_Type.t_range uint32))= {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Ops_Range_Range_Type.t_range uint32)-> {inv'0 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  let rec inc_max_repeat (a:uint32) (b:uint32) (n:uint32) (return'  (ret:()))= {[#"../inc_max_repeat.rs" 14 11 14 70] a
    <= (1000000 : uint32)
    /\ b <= (1000000 : uint32) /\ n <= (1000000 : uint32)}
    (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_7 <- Core_Ops_Range_Range_Type.C_Range ([#"../inc_max_repeat.rs" 18 13 18 14] (0 : uint32)) n : Core_Ops_Range_Range_Type.t_range uint32 ]
        
        s1
      | s1 = into_iter'0 {_7} (fun (_ret':Core_Ops_Range_Range_Type.t_range uint32) ->  [ &iter <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = 
        [ &iter_old <- ([#"../inc_max_repeat.rs" 16 4 16 86] Snapshot.new iter) : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range uint32) ]
        
        s1
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = 
        [ &produced <- ([#"../inc_max_repeat.rs" 16 4 16 86] Snapshot.new (Seq.empty  : Seq.seq uint32)) : Snapshot.snap_ty (Seq.seq uint32) ]
        
        s1
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [#"../inc_max_repeat.rs" 17 16 17 70] UInt32.to_int a
        >= UInt32.to_int b + Seq.length (Snapshot.inner produced)
        \/ UInt32.to_int b >= UInt32.to_int a + Seq.length (Snapshot.inner produced)}
        {[@expl:loop invariant] [#"../inc_max_repeat.rs" 16 16 16 84] UInt32.to_int a
        <= 1000000 + Seq.length (Snapshot.inner produced)
        /\ UInt32.to_int b <= 1000000 + Seq.length (Snapshot.inner produced)}
        {[@expl:loop invariant] [#"../inc_max_repeat.rs" 16 4 16 86] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../inc_max_repeat.rs" 16 4 16 86] inv'0 iter}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Core_Ops_Range_Range_Type.t_range uint32> {iter}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range uint32)) ->
                 [ &_20 <- _ret' ] 
                 [ &iter <-  ^ _20 ] 
                s1)
          | s1 = Borrow.borrow_final <Core_Ops_Range_Range_Type.t_range uint32> { * _20} {Borrow.get_id _20}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range uint32)) ->
                 [ &_19 <- _ret' ] 
                 [ &_20 <- { _20 with current = ( ^ _19) ; } ] 
                s2)
          | s2 = next'0 {_19} (fun (_ret':Core_Option_Option_Type.t_option uint32) ->  [ &_18 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _20}- s1
          | s1 = any
            [ br0 -> {_18 = Core_Option_Option_Type.C_None } (! bb9)
            | br1 (a:uint32)-> {_18 = Core_Option_Option_Type.C_Some a} (! bb8) ]
             ]
          
        | bb8 = s0 [ s0 = bb10 ] 
        | bb10 = s0
          [ s0 = Core_Option_Option_Type.some <uint32> {_18}
              (fun (r0'0:uint32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_23 <- ([#"../inc_max_repeat.rs" 16 4 16 86] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq uint32) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _23 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq uint32))-> (!  [ &_23 <- _any ] s1) ] )
          | s1 = Borrow.borrow_mut <uint32> {a} (fun (_ret':borrowed uint32) ->  [ &_27 <- _ret' ]  [ &a <-  ^ _27 ] s2)
          | s2 = Borrow.borrow_final <uint32> { * _27} {Borrow.get_id _27}
              (fun (_ret':borrowed uint32) ->  [ &_26 <- _ret' ]  [ &_27 <- { _27 with current = ( ^ _26) ; } ] s3)
          | s3 = Borrow.borrow_mut <uint32> {b} (fun (_ret':borrowed uint32) ->  [ &_29 <- _ret' ]  [ &b <-  ^ _29 ] s4)
          | s4 = Borrow.borrow_final <uint32> { * _29} {Borrow.get_id _29}
              (fun (_ret':borrowed uint32) ->  [ &_28 <- _ret' ]  [ &_29 <- { _29 with current = ( ^ _28) ; } ] s5)
          | s5 = take_max'0 {_26} {_28} (fun (_ret':borrowed uint32) ->  [ &mc <- _ret' ] s6)
          | s6 = bb12 ]
          
        | bb12 = s0
          [ s0 = -{resolve'1 _29}- s1
          | s1 = -{resolve'1 _27}- s2
          | s2 = UInt32.add { * mc} {[#"../inc_max_repeat.rs" 20 15 20 16] (1 : uint32)}
              (fun (_ret':uint32) ->  [ &mc <- { mc with current = _ret' ; } ] s3)
          | s3 = -{resolve'1 mc}- s4
          | s4 = bb4 ]
           ]
         ]
      
    | bb7 = s0 [ s0 = {[#"../inc_max_repeat.rs" 16 4 16 86] false} any ] 
    | bb9 = s0
      [ s0 = UInt32.add {b} {n} (fun (_ret':uint32) ->  [ &_34 <- _ret' ] s1)
      | s1 = UInt32.ge {a} {_34}
          (fun (_ret':bool) ->  [ &_32 <- _ret' ] (any [ any_ (_any:uint32)-> (!  [ &_34 <- _any ] s2) ] ))
      | s2 = any [ br0 -> {_32 = false} (! bb14) | br1 -> {_32} (! bb13) ]  ]
      
    | bb13 = s0 [ s0 = bb17 ] 
    | bb14 = s0
      [ s0 = UInt32.add {a} {n} (fun (_ret':uint32) ->  [ &_39 <- _ret' ] s1)
      | s1 = UInt32.ge {b} {_39}
          (fun (_ret':bool) ->  [ &_37 <- _ret' ] (any [ any_ (_any:uint32)-> (!  [ &_39 <- _any ] s2) ] ))
      | s2 = any [ br0 -> {_37 = false} (! bb16) | br1 -> {_37} (! bb15) ]  ]
      
    | bb15 = s0 [ s0 = bb17 ] 
    | bb17 = s0 [ s0 =  [ &_0 <- [#"../inc_max_repeat.rs" 15 54 23 1] () ] s1 | s1 = return' {_0} ] 
    | bb16 = s0 [ s0 = {[#"../inc_max_repeat.rs" 22 4 22 37] false} any ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & a : uint32 = a
    | & b : uint32 = b
    | & n : uint32 = n
    | & iter : Core_Ops_Range_Range_Type.t_range uint32 = any_l () : Core_Ops_Range_Range_Type.t_range uint32
    | & _7 : Core_Ops_Range_Range_Type.t_range uint32 = any_l () : Core_Ops_Range_Range_Type.t_range uint32
    | & iter_old : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range uint32) = any_l () : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range uint32)
    | & produced : Snapshot.snap_ty (Seq.seq uint32) = any_l () : Snapshot.snap_ty (Seq.seq uint32)
    | & _18 : Core_Option_Option_Type.t_option uint32 = any_l () : Core_Option_Option_Type.t_option uint32
    | & _19 : borrowed (Core_Ops_Range_Range_Type.t_range uint32) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range uint32)
    | & _20 : borrowed (Core_Ops_Range_Range_Type.t_range uint32) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range uint32)
    | & __creusot_proc_iter_elem : uint32 = any_l () : uint32
    | & _23 : Snapshot.snap_ty (Seq.seq uint32) = any_l () : Snapshot.snap_ty (Seq.seq uint32)
    | & mc : borrowed uint32 = any_l () : borrowed uint32
    | & _26 : borrowed uint32 = any_l () : borrowed uint32
    | & _27 : borrowed uint32 = any_l () : borrowed uint32
    | & _28 : borrowed uint32 = any_l () : borrowed uint32
    | & _29 : borrowed uint32 = any_l () : borrowed uint32
    | & _32 : bool = any_l () : bool
    | & _34 : uint32 = any_l () : uint32
    | & _37 : bool = any_l () : bool
    | & _39 : uint32 = any_l () : uint32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
