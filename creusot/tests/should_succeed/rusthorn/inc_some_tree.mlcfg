
module IncSomeTree_Tree_Type
  use prelude.UInt32
  use prelude.Int
  type t_tree  =
    | C_Node (t_tree) uint32 (t_tree)
    | C_Leaf
    
  let function node_0 (self : t_tree) : t_tree = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Node a _ _ -> a
      | C_Leaf -> any t_tree
      end
  let function node_1 (self : t_tree) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Node _ a _ -> a
      | C_Leaf -> any uint32
      end
  let function node_2 (self : t_tree) : t_tree = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Node _ _ a -> a
      | C_Leaf -> any t_tree
      end
end
module IncSomeTree_Impl0_LemmaSumNonneg_Impl
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function sum0 [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int =
    [#"../inc_some_tree.rs" 23 12 26 13] match self with
      | IncSomeTree_Tree_Type.C_Node tl a tr -> sum0 tl + UInt32.to_int a + sum0 tr
      | IncSomeTree_Tree_Type.C_Leaf -> 0
      end
  val sum0 [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int
    ensures { result = sum0 self }
    
  constant self  : IncSomeTree_Tree_Type.t_tree
  function lemma_sum_nonneg [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
  goal vc_lemma_sum_nonneg : match self with
    | IncSomeTree_Tree_Type.C_Node tl _ tr -> ([#"../inc_some_tree.rs" 32 14 32 29] sum0 tl >= 0)
     -> (let _ = lemma_sum_nonneg tl in ([#"../inc_some_tree.rs" 32 14 32 29] sum0 tr >= 0)
     -> (let _ = lemma_sum_nonneg tr in [#"../inc_some_tree.rs" 32 14 32 29] sum0 self >= 0))
    | IncSomeTree_Tree_Type.C_Leaf -> [#"../inc_some_tree.rs" 32 14 32 29] sum0 self >= 0
    end
end
module IncSomeTree_Impl0_SumX
  use prelude.UInt32
  use prelude.Int
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  function sum0 [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int =
    [#"../inc_some_tree.rs" 23 12 26 13] match self with
      | IncSomeTree_Tree_Type.C_Node tl a tr -> sum0 tl + UInt32.to_int a + sum0 tr
      | IncSomeTree_Tree_Type.C_Leaf -> 0
      end
  val sum0 [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int
    ensures { result = sum0 self }
    
  use prelude.Borrow
  use prelude.UInt32
  function lemma_sum_nonneg0 [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
  axiom lemma_sum_nonneg0_def : forall self : IncSomeTree_Tree_Type.t_tree . lemma_sum_nonneg0 self
  = ([#"../inc_some_tree.rs" 34 8 40 9] match self with
    | IncSomeTree_Tree_Type.C_Node tl _ tr -> let _ = lemma_sum_nonneg0 tl in let _ = lemma_sum_nonneg0 tr in ()
    | IncSomeTree_Tree_Type.C_Leaf -> ()
    end)
  val lemma_sum_nonneg0 [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
    ensures { result = lemma_sum_nonneg0 self }
    
  axiom lemma_sum_nonneg0_spec : forall self : IncSomeTree_Tree_Type.t_tree . [#"../inc_some_tree.rs" 32 14 32 29] sum0 self
  >= 0
  let rec cfg sum_x [#"../inc_some_tree.rs" 45 4 45 26] [@cfg:stackify] [@cfg:subregion_analysis] (self : IncSomeTree_Tree_Type.t_tree) : uint32
    requires {[#"../inc_some_tree.rs" 43 15 43 38] sum0 self <= 1000000}
    ensures { [#"../inc_some_tree.rs" 44 14 44 35] UInt32.to_int result = sum0 self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self : IncSomeTree_Tree_Type.t_tree = self;
  var tl : IncSomeTree_Tree_Type.t_tree;
  var a : uint32;
  var tr : IncSomeTree_Tree_Type.t_tree;
  var _10 : uint32;
  var _11 : uint32;
  var _14 : uint32;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | IncSomeTree_Tree_Type.C_Node _ _ _ -> goto BB2
      | IncSomeTree_Tree_Type.C_Leaf -> goto BB3
      end
  }
  BB1 {
    assert { [#"../inc_some_tree.rs" 46 14 46 18] false };
    absurd
  }
  BB2 {
    goto BB4
  }
  BB3 {
    [#"../inc_some_tree.rs" 55 20 55 21] _0 <- ([#"../inc_some_tree.rs" 55 20 55 21] (0 : uint32));
    goto BB7
  }
  BB4 {
    [#"../inc_some_tree.rs" 47 17 47 19] tl <- IncSomeTree_Tree_Type.node_0 self;
    [#"../inc_some_tree.rs" 47 21 47 22] a <- IncSomeTree_Tree_Type.node_1 self;
    [#"../inc_some_tree.rs" 47 24 47 26] tr <- IncSomeTree_Tree_Type.node_2 self;
    assert { [@expl:assertion] [#"../inc_some_tree.rs" 49 20 49 41] let _ = lemma_sum_nonneg0 tl in let _ = lemma_sum_nonneg0 tr in true };
    [#"../inc_some_tree.rs" 53 16 53 26] _11 <- ([#"../inc_some_tree.rs" 53 16 53 26] sum_x tl);
    goto BB5
  }
  BB5 {
    [#"../inc_some_tree.rs" 53 16 53 31] _10 <- _11 + a;
    _11 <- any uint32;
    [#"../inc_some_tree.rs" 53 34 53 44] _14 <- ([#"../inc_some_tree.rs" 53 34 53 44] sum_x tr);
    goto BB6
  }
  BB6 {
    [#"../inc_some_tree.rs" 53 16 53 44] _0 <- _10 + _14;
    _10 <- any uint32;
    _14 <- any uint32;
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module IncSomeTree_Impl0_TakeSome
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  use prelude.UInt32
  function shallow_model0 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] UInt32.to_int ( * self)
  val shallow_model0 (self : borrowed uint32) : int
    ensures { result = shallow_model0 self }
    
  use prelude.Int
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  function sum0 [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int =
    [#"../inc_some_tree.rs" 23 12 26 13] match self with
      | IncSomeTree_Tree_Type.C_Node tl a tr -> sum0 tl + UInt32.to_int a + sum0 tr
      | IncSomeTree_Tree_Type.C_Leaf -> 0
      end
  val sum0 [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int
    ensures { result = sum0 self }
    
  predicate resolve2 (self : borrowed (IncSomeTree_Tree_Type.t_tree)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve2 (self : borrowed (IncSomeTree_Tree_Type.t_tree)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed (IncSomeTree_Tree_Type.t_tree)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (IncSomeTree_Tree_Type.t_tree)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  val random0 [#"../inc_some_tree.rs" 15 0 15 19] (_1 : ()) : bool
  function lemma_sum_nonneg0 [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
  axiom lemma_sum_nonneg0_def : forall self : IncSomeTree_Tree_Type.t_tree . lemma_sum_nonneg0 self
  = ([#"../inc_some_tree.rs" 34 8 40 9] match self with
    | IncSomeTree_Tree_Type.C_Node tl _ tr -> let _ = lemma_sum_nonneg0 tl in let _ = lemma_sum_nonneg0 tr in ()
    | IncSomeTree_Tree_Type.C_Leaf -> ()
    end)
  val lemma_sum_nonneg0 [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
    ensures { result = lemma_sum_nonneg0 self }
    
  axiom lemma_sum_nonneg0_spec : forall self : IncSomeTree_Tree_Type.t_tree . [#"../inc_some_tree.rs" 32 14 32 29] sum0 self
  >= 0
  let rec cfg take_some [#"../inc_some_tree.rs" 61 4 61 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (IncSomeTree_Tree_Type.t_tree)) : borrowed uint32
    ensures { [#"../inc_some_tree.rs" 59 14 59 64] sum0 ( ^ self) - sum0 ( * self)
    = UInt32.to_int ( ^ result) - shallow_model0 result }
    ensures { [#"../inc_some_tree.rs" 60 14 60 35] shallow_model0 result <= sum0 ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var self : borrowed (IncSomeTree_Tree_Type.t_tree) = self;
  var _2 : borrowed uint32;
  var _5 : borrowed uint32;
  var mtl : borrowed (IncSomeTree_Tree_Type.t_tree);
  var ma : borrowed uint32;
  var mtr : borrowed (IncSomeTree_Tree_Type.t_tree);
  var _10 : borrowed uint32;
  var _13 : borrowed uint32;
  var _14 : bool;
  var _15 : borrowed uint32;
  var _16 : bool;
  var _17 : borrowed uint32;
  var _18 : borrowed uint32;
  var _19 : borrowed (IncSomeTree_Tree_Type.t_tree);
  var _20 : borrowed uint32;
  var _21 : borrowed (IncSomeTree_Tree_Type.t_tree);
  {
    goto BB0
  }
  BB0 {
    switch ( * self)
      | IncSomeTree_Tree_Type.C_Node _ _ _ -> goto BB2
      | IncSomeTree_Tree_Type.C_Leaf -> goto BB3
      end
  }
  BB1 {
    assume { resolve2 self };
    assert { [#"../inc_some_tree.rs" 62 14 62 18] false };
    absurd
  }
  BB2 {
    goto BB4
  }
  BB3 {
    assume { resolve2 self };
    goto BB15
  }
  BB4 {
    [#"../inc_some_tree.rs" 63 17 63 20] mtl <- Borrow.borrow_final (IncSomeTree_Tree_Type.node_0 ( * self)) (Borrow.inherit_id (Borrow.get_id self) 1);
    [#"../inc_some_tree.rs" 63 17 63 20] self <- { self with current = (let IncSomeTree_Tree_Type.C_Node x0 x1 x2 =  * self in IncSomeTree_Tree_Type.C_Node ( ^ mtl) x1 x2) ; };
    [#"../inc_some_tree.rs" 63 22 63 24] ma <- Borrow.borrow_final (IncSomeTree_Tree_Type.node_1 ( * self)) (Borrow.inherit_id (Borrow.get_id self) 2);
    [#"../inc_some_tree.rs" 63 22 63 24] self <- { self with current = (let IncSomeTree_Tree_Type.C_Node x0 x1 x2 =  * self in IncSomeTree_Tree_Type.C_Node x0 ( ^ ma) x2) ; };
    [#"../inc_some_tree.rs" 63 26 63 29] mtr <- Borrow.borrow_final (IncSomeTree_Tree_Type.node_2 ( * self)) (Borrow.inherit_id (Borrow.get_id self) 3);
    [#"../inc_some_tree.rs" 63 26 63 29] self <- { self with current = (let IncSomeTree_Tree_Type.C_Node x0 x1 x2 =  * self in IncSomeTree_Tree_Type.C_Node x0 x1 ( ^ mtr)) ; };
    assert { [@expl:assertion] [#"../inc_some_tree.rs" 65 20 65 42] let _ = lemma_sum_nonneg0 ( * mtl) in let _ = lemma_sum_nonneg0 ( * mtr) in true };
    [#"../inc_some_tree.rs" 69 19 69 27] _14 <- ([#"../inc_some_tree.rs" 69 19 69 27] random0 ([#"../inc_some_tree.rs" 69 19 69 27] ()));
    goto BB5
  }
  BB5 {
    switch (_14)
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    assume { resolve1 mtr };
    assume { resolve1 mtl };
    [#"../inc_some_tree.rs" 70 20 70 22] _15 <- Borrow.borrow_final ( * ma) (Borrow.get_id ma);
    [#"../inc_some_tree.rs" 70 20 70 22] ma <- { ma with current = ( ^ _15) ; };
    [#"../inc_some_tree.rs" 70 20 70 22] _13 <- Borrow.borrow_final ( * _15) (Borrow.get_id _15);
    [#"../inc_some_tree.rs" 70 20 70 22] _15 <- { _15 with current = ( ^ _13) ; };
    assume { resolve0 _15 };
    goto BB14
  }
  BB7 {
    assume { resolve0 ma };
    [#"../inc_some_tree.rs" 71 26 71 34] _16 <- ([#"../inc_some_tree.rs" 71 26 71 34] random0 ([#"../inc_some_tree.rs" 71 26 71 34] ()));
    goto BB8
  }
  BB8 {
    switch (_16)
      | False -> goto BB11
      | True -> goto BB9
      end
  }
  BB9 {
    assume { resolve1 mtr };
    [#"../inc_some_tree.rs" 72 20 72 23] _19 <- Borrow.borrow_mut ( * mtl);
    [#"../inc_some_tree.rs" 72 20 72 23] mtl <- { mtl with current = ( ^ _19) ; };
    [#"../inc_some_tree.rs" 72 20 72 35] _18 <- ([#"../inc_some_tree.rs" 72 20 72 35] take_some _19);
    _19 <- any borrowed (IncSomeTree_Tree_Type.t_tree);
    goto BB10
  }
  BB10 {
    [#"../inc_some_tree.rs" 72 20 72 35] _17 <- Borrow.borrow_final ( * _18) (Borrow.get_id _18);
    [#"../inc_some_tree.rs" 72 20 72 35] _18 <- { _18 with current = ( ^ _17) ; };
    [#"../inc_some_tree.rs" 72 20 72 35] _13 <- Borrow.borrow_final ( * _17) (Borrow.get_id _17);
    [#"../inc_some_tree.rs" 72 20 72 35] _17 <- { _17 with current = ( ^ _13) ; };
    assume { resolve0 _18 };
    assume { resolve0 _17 };
    goto BB13
  }
  BB11 {
    assume { resolve1 mtl };
    [#"../inc_some_tree.rs" 74 20 74 23] _21 <- Borrow.borrow_mut ( * mtr);
    [#"../inc_some_tree.rs" 74 20 74 23] mtr <- { mtr with current = ( ^ _21) ; };
    [#"../inc_some_tree.rs" 74 20 74 35] _20 <- ([#"../inc_some_tree.rs" 74 20 74 35] take_some _21);
    _21 <- any borrowed (IncSomeTree_Tree_Type.t_tree);
    goto BB12
  }
  BB12 {
    [#"../inc_some_tree.rs" 74 20 74 35] _13 <- Borrow.borrow_final ( * _20) (Borrow.get_id _20);
    [#"../inc_some_tree.rs" 74 20 74 35] _20 <- { _20 with current = ( ^ _13) ; };
    assume { resolve0 _20 };
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    [#"../inc_some_tree.rs" 69 16 75 17] _10 <- Borrow.borrow_final ( * _13) (Borrow.get_id _13);
    [#"../inc_some_tree.rs" 69 16 75 17] _13 <- { _13 with current = ( ^ _10) ; };
    [#"../inc_some_tree.rs" 69 16 75 17] _5 <- Borrow.borrow_final ( * _10) (Borrow.get_id _10);
    [#"../inc_some_tree.rs" 69 16 75 17] _10 <- { _10 with current = ( ^ _5) ; };
    assume { resolve0 _13 };
    assume { resolve0 _10 };
    assume { resolve1 mtr };
    assume { resolve0 ma };
    assume { resolve1 mtl };
    [#"../inc_some_tree.rs" 62 8 78 9] _2 <- Borrow.borrow_final ( * _5) (Borrow.get_id _5);
    [#"../inc_some_tree.rs" 62 8 78 9] _5 <- { _5 with current = ( ^ _2) ; };
    [#"../inc_some_tree.rs" 62 8 78 9] _0 <- Borrow.borrow_final ( * _2) (Borrow.get_id _2);
    [#"../inc_some_tree.rs" 62 8 78 9] _2 <- { _2 with current = ( ^ _0) ; };
    assume { resolve0 _5 };
    assume { resolve0 _2 };
    assume { resolve2 self };
    return _0
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB15
  }
  
end
module IncSomeTree_IncSomeTree
  use prelude.UInt32
  use prelude.Int
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  function sum0 [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int =
    [#"../inc_some_tree.rs" 23 12 26 13] match self with
      | IncSomeTree_Tree_Type.C_Node tl a tr -> sum0 tl + UInt32.to_int a + sum0 tr
      | IncSomeTree_Tree_Type.C_Leaf -> 0
      end
  val sum0 [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int
    ensures { result = sum0 self }
    
  use prelude.Borrow
  use prelude.UInt32
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  function shallow_model0 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] UInt32.to_int ( * self)
  val shallow_model0 (self : borrowed uint32) : int
    ensures { result = shallow_model0 self }
    
  val take_some0 [#"../inc_some_tree.rs" 61 4 61 39] (self : borrowed (IncSomeTree_Tree_Type.t_tree)) : borrowed uint32
    ensures { [#"../inc_some_tree.rs" 59 14 59 64] sum0 ( ^ self) - sum0 ( * self)
    = UInt32.to_int ( ^ result) - shallow_model0 result }
    ensures { [#"../inc_some_tree.rs" 60 14 60 35] shallow_model0 result <= sum0 ( * self) }
    
  val sum_x0 [#"../inc_some_tree.rs" 45 4 45 26] (self : IncSomeTree_Tree_Type.t_tree) : uint32
    requires {[#"../inc_some_tree.rs" 43 15 43 38] sum0 self <= 1000000}
    ensures { [#"../inc_some_tree.rs" 44 14 44 35] UInt32.to_int result = sum0 self }
    
  let rec cfg inc_some_tree [#"../inc_some_tree.rs" 83 0 83 41] [@cfg:stackify] [@cfg:subregion_analysis] (t : IncSomeTree_Tree_Type.t_tree) (k : uint32) : ()
    requires {[#"../inc_some_tree.rs" 82 11 82 36] sum0 t + UInt32.to_int k <= 1000000}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var t : IncSomeTree_Tree_Type.t_tree = t;
  var k : uint32 = k;
  var sum0 : uint32;
  var ma : borrowed uint32;
  var _7 : borrowed (IncSomeTree_Tree_Type.t_tree);
  var _10 : bool;
  var _11 : uint32;
  var _13 : uint32;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    [#"../inc_some_tree.rs" 84 15 84 24] sum0 <- ([#"../inc_some_tree.rs" 84 15 84 24] sum_x0 t);
    goto BB2
  }
  BB2 {
    [#"../inc_some_tree.rs" 85 13 85 14] _7 <- Borrow.borrow_mut t;
    [#"../inc_some_tree.rs" 85 13 85 14] t <-  ^ _7;
    [#"../inc_some_tree.rs" 85 13 85 26] ma <- ([#"../inc_some_tree.rs" 85 13 85 26] take_some0 _7);
    _7 <- any borrowed (IncSomeTree_Tree_Type.t_tree);
    goto BB3
  }
  BB3 {
    [#"../inc_some_tree.rs" 86 4 86 12] ma <- { ma with current = ( * ma + k) ; };
    assume { resolve0 ma };
    [#"../inc_some_tree.rs" 87 12 87 21] _11 <- ([#"../inc_some_tree.rs" 87 12 87 21] sum_x0 t);
    goto BB4
  }
  BB4 {
    [#"../inc_some_tree.rs" 87 25 87 33] _13 <- sum0 + k;
    [#"../inc_some_tree.rs" 87 12 87 33] _10 <- _11 = _13;
    _11 <- any uint32;
    _13 <- any uint32;
    switch (_10)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    [#"../inc_some_tree.rs" 83 42 88 1] _0 <- ([#"../inc_some_tree.rs" 83 42 88 1] ());
    goto BB7
  }
  BB6 {
    assert { [#"../inc_some_tree.rs" 87 4 87 34] false };
    absurd
  }
  BB7 {
    return _0
  }
  
end
module IncSomeTree_Impl1
  
end
