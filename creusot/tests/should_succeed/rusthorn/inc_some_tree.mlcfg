
module IncSomeTree_Random_Interface
  val random [#"../inc_some_tree.rs" 15 0 15 19] (_1' : ()) : bool
end
module IncSomeTree_Tree_Type
  use prelude.Int
  use prelude.UInt32
  type t_tree  =
    | C_Node (t_tree) uint32 (t_tree)
    | C_Leaf
    
  let function node_0 (self : t_tree) : t_tree = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node a _ _ -> a
      | C_Leaf -> any t_tree
      end
  let function node_1 (self : t_tree) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node _ a _ -> a
      | C_Leaf -> any uint32
      end
  let function node_2 (self : t_tree) : t_tree = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node _ _ a -> a
      | C_Leaf -> any t_tree
      end
end
module IncSomeTree_Impl0_Sum_Stub
  use prelude.Int
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  function sum [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int
end
module IncSomeTree_Impl0_Sum_Interface
  use prelude.Int
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  function sum [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int
  val sum [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int
    ensures { result = sum self }
    
end
module IncSomeTree_Impl0_Sum
  use prelude.Int
  use prelude.UInt32
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  function sum [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int =
    [#"../inc_some_tree.rs" 23 12 26 13] match (self) with
      | IncSomeTree_Tree_Type.C_Node tl a tr -> sum tl + UInt32.to_int a + sum tr
      | IncSomeTree_Tree_Type.C_Leaf -> 0
      end
  val sum [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int
    ensures { result = sum self }
    
end
module IncSomeTree_Impl0_LemmaSumNonneg_Stub
  use prelude.Int
  use prelude.Borrow
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  clone IncSomeTree_Impl0_Sum_Stub as Sum0
  function lemma_sum_nonneg [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
end
module IncSomeTree_Impl0_LemmaSumNonneg_Interface
  use prelude.Int
  use prelude.Borrow
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  clone IncSomeTree_Impl0_Sum_Stub as Sum0
  function lemma_sum_nonneg [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
  val lemma_sum_nonneg [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
    ensures { [#"../inc_some_tree.rs" 32 14 32 29] Sum0.sum self >= 0 }
    ensures { result = lemma_sum_nonneg self }
    
  axiom lemma_sum_nonneg_spec : forall self : IncSomeTree_Tree_Type.t_tree . [#"../inc_some_tree.rs" 32 14 32 29] Sum0.sum self >= 0
end
module IncSomeTree_Impl0_LemmaSumNonneg
  use prelude.Int
  use prelude.Borrow
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  clone IncSomeTree_Impl0_Sum_Stub as Sum0
  function lemma_sum_nonneg [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
  val lemma_sum_nonneg [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
    ensures { [#"../inc_some_tree.rs" 32 14 32 29] Sum0.sum self >= 0 }
    ensures { result = lemma_sum_nonneg self }
    
  axiom def : forall self : IncSomeTree_Tree_Type.t_tree . lemma_sum_nonneg self = ([#"../inc_some_tree.rs" 34 8 40 9] match (self) with
    | IncSomeTree_Tree_Type.C_Node tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
    | IncSomeTree_Tree_Type.C_Leaf -> ()
    end)
  axiom lemma_sum_nonneg_spec : forall self : IncSomeTree_Tree_Type.t_tree . [#"../inc_some_tree.rs" 32 14 32 29] Sum0.sum self >= 0
end
module IncSomeTree_Impl0_LemmaSumNonneg_Impl
  use prelude.Int
  use prelude.Borrow
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  clone IncSomeTree_Impl0_Sum as Sum0
  let rec ghost function lemma_sum_nonneg [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
    ensures { [#"../inc_some_tree.rs" 32 14 32 29] Sum0.sum self >= 0 }
    variant {[#"../inc_some_tree.rs" 31 15 31 19] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../inc_some_tree.rs" 34 8 40 9] match (self) with
      | IncSomeTree_Tree_Type.C_Node tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
      | IncSomeTree_Tree_Type.C_Leaf -> ()
      end
end
module IncSomeTree_Impl0_SumX_Interface
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  clone IncSomeTree_Impl0_Sum_Stub as Sum0
  val sum_x [#"../inc_some_tree.rs" 45 4 45 26] (self : IncSomeTree_Tree_Type.t_tree) : uint32
    requires {[#"../inc_some_tree.rs" 43 15 43 38] Sum0.sum self <= 1000000}
    ensures { [#"../inc_some_tree.rs" 44 14 44 35] UInt32.to_int result = Sum0.sum self }
    
end
module IncSomeTree_Impl0_SumX
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  use prelude.IntSize
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  clone IncSomeTree_Impl0_Sum as Sum0
  clone IncSomeTree_Impl0_LemmaSumNonneg as LemmaSumNonneg0 with
    function Sum0.sum = Sum0.sum,
    axiom .
  let rec cfg sum_x [#"../inc_some_tree.rs" 45 4 45 26] [@cfg:stackify] [@cfg:subregion_analysis] (self : IncSomeTree_Tree_Type.t_tree) : uint32
    requires {[#"../inc_some_tree.rs" 43 15 43 38] Sum0.sum self <= 1000000}
    ensures { [#"../inc_some_tree.rs" 44 14 44 35] UInt32.to_int result = Sum0.sum self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self_1 : IncSomeTree_Tree_Type.t_tree;
  var _4 : isize;
  var tl_5 : IncSomeTree_Tree_Type.t_tree;
  var a_6 : uint32;
  var tr_7 : IncSomeTree_Tree_Type.t_tree;
  var _8 : ();
  var _10 : uint32;
  var _11 : uint32;
  var _12 : IncSomeTree_Tree_Type.t_tree;
  var _13 : uint32;
  var _14 : uint32;
  var _15 : IncSomeTree_Tree_Type.t_tree;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | IncSomeTree_Tree_Type.C_Node _ _ _ -> goto BB1
      | IncSomeTree_Tree_Type.C_Leaf -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    _0 <- ([#"../inc_some_tree.rs" 55 20 55 21] (0 : uint32));
    goto BB7
  }
  BB3 {
    absurd
  }
  BB4 {
    tl_5 <- IncSomeTree_Tree_Type.node_0 self_1;
    a_6 <- IncSomeTree_Tree_Type.node_1 self_1;
    tr_7 <- IncSomeTree_Tree_Type.node_2 self_1;
    assert { [@expl:assertion] [#"../inc_some_tree.rs" 49 20 49 41] let _ = LemmaSumNonneg0.lemma_sum_nonneg tl_5 in let _ = LemmaSumNonneg0.lemma_sum_nonneg tr_7 in true };
    _8 <- ();
    _12 <- tl_5;
    _11 <- ([#"../inc_some_tree.rs" 53 16 53 26] sum_x _12);
    goto BB5
  }
  BB5 {
    _13 <- a_6;
    _10 <- ([#"../inc_some_tree.rs" 53 16 53 31] _11 + _13);
    _15 <- tr_7;
    _14 <- ([#"../inc_some_tree.rs" 53 34 53 44] sum_x _15);
    goto BB6
  }
  BB6 {
    _0 <- ([#"../inc_some_tree.rs" 53 16 53 44] _10 + _14);
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 58 8 58 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Num_Impl6_ShallowModel_Stub
  use prelude.Int
  use prelude.UInt32
  function shallow_model (self : uint32) : int
end
module CreusotContracts_Std1_Num_Impl6_ShallowModel_Interface
  use prelude.Int
  use prelude.UInt32
  function shallow_model (self : uint32) : int
  val shallow_model (self : uint32) : int
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Num_Impl6_ShallowModel
  use prelude.Int
  use prelude.UInt32
  function shallow_model (self : uint32) : int =
    UInt32.to_int self
  val shallow_model (self : uint32) : int
    ensures { result = shallow_model self }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module IncSomeTree_Impl0_TakeSome_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use prelude.Int
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = uint32,
    type ShallowModelTy0.shallowModelTy = int
  clone IncSomeTree_Impl0_Sum_Stub as Sum0
  val take_some [#"../inc_some_tree.rs" 61 4 61 39] (self : borrowed (IncSomeTree_Tree_Type.t_tree)) : borrowed uint32
    ensures { [#"../inc_some_tree.rs" 59 14 59 64] Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ result) - ShallowModel0.shallow_model result }
    ensures { [#"../inc_some_tree.rs" 60 14 60 35] ShallowModel0.shallow_model result <= Sum0.sum ( * self) }
    
end
module IncSomeTree_Impl0_TakeSome
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use prelude.IntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Std1_Num_Impl6_ShallowModel as ShallowModel1
  use prelude.Int
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = IncSomeTree_Tree_Type.t_tree
  clone IncSomeTree_Random_Interface as Random0
  clone IncSomeTree_Impl0_Sum as Sum0
  clone IncSomeTree_Impl0_LemmaSumNonneg as LemmaSumNonneg0 with
    function Sum0.sum = Sum0.sum,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = IncSomeTree_Tree_Type.t_tree
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = uint32,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg take_some [#"../inc_some_tree.rs" 61 4 61 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (IncSomeTree_Tree_Type.t_tree)) : borrowed uint32
    ensures { [#"../inc_some_tree.rs" 59 14 59 64] Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ result) - ShallowModel0.shallow_model result }
    ensures { [#"../inc_some_tree.rs" 60 14 60 35] ShallowModel0.shallow_model result <= Sum0.sum ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var self_1 : borrowed (IncSomeTree_Tree_Type.t_tree);
  var _2 : borrowed uint32;
  var _5 : borrowed uint32;
  var _6 : isize;
  var mtl_7 : borrowed (IncSomeTree_Tree_Type.t_tree);
  var ma_8 : borrowed uint32;
  var mtr_9 : borrowed (IncSomeTree_Tree_Type.t_tree);
  var _10 : borrowed uint32;
  var _11 : ();
  var _13 : borrowed uint32;
  var _14 : bool;
  var _15 : borrowed uint32;
  var _16 : bool;
  var _17 : borrowed uint32;
  var _18 : borrowed uint32;
  var _19 : borrowed (IncSomeTree_Tree_Type.t_tree);
  var _20 : borrowed uint32;
  var _21 : borrowed (IncSomeTree_Tree_Type.t_tree);
  var _22 : ();
  var _23 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch ( * self_1)
      | IncSomeTree_Tree_Type.C_Node _ _ _ -> goto BB1
      | IncSomeTree_Tree_Type.C_Leaf -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    goto BB15
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB4 {
    mtl_7 <- borrow_mut (IncSomeTree_Tree_Type.node_0 ( * self_1));
    self_1 <- { self_1 with current = (let IncSomeTree_Tree_Type.C_Node a b c =  * self_1 in IncSomeTree_Tree_Type.C_Node ( ^ mtl_7) b c) };
    ma_8 <- borrow_mut (IncSomeTree_Tree_Type.node_1 ( * self_1));
    self_1 <- { self_1 with current = (let IncSomeTree_Tree_Type.C_Node a b c =  * self_1 in IncSomeTree_Tree_Type.C_Node a ( ^ ma_8) c) };
    mtr_9 <- borrow_mut (IncSomeTree_Tree_Type.node_2 ( * self_1));
    self_1 <- { self_1 with current = (let IncSomeTree_Tree_Type.C_Node a b c =  * self_1 in IncSomeTree_Tree_Type.C_Node a b ( ^ mtr_9)) };
    assert { [@expl:assertion] [#"../inc_some_tree.rs" 65 20 65 42] let _ = LemmaSumNonneg0.lemma_sum_nonneg ( * mtl_7) in let _ = LemmaSumNonneg0.lemma_sum_nonneg ( * mtr_9) in true };
    _11 <- ();
    _14 <- ([#"../inc_some_tree.rs" 69 19 69 27] Random0.random ());
    goto BB5
  }
  BB5 {
    switch (_14)
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    assume { Resolve1.resolve mtl_7 };
    assume { Resolve1.resolve mtr_9 };
    _15 <- borrow_mut ( * ma_8);
    ma_8 <- { ma_8 with current = ( ^ _15) };
    _13 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _13) };
    assume { Resolve2.resolve _15 };
    goto BB14
  }
  BB7 {
    assume { Resolve2.resolve ma_8 };
    _16 <- ([#"../inc_some_tree.rs" 71 26 71 34] Random0.random ());
    goto BB8
  }
  BB8 {
    switch (_16)
      | False -> goto BB11
      | True -> goto BB9
      end
  }
  BB9 {
    assume { Resolve1.resolve mtr_9 };
    _19 <- borrow_mut ( * mtl_7);
    mtl_7 <- { mtl_7 with current = ( ^ _19) };
    _18 <- ([#"../inc_some_tree.rs" 72 20 72 35] take_some _19);
    goto BB10
  }
  BB10 {
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _13 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _13) };
    assume { Resolve2.resolve _18 };
    assume { Resolve2.resolve _17 };
    goto BB13
  }
  BB11 {
    assume { Resolve1.resolve mtl_7 };
    _21 <- borrow_mut ( * mtr_9);
    mtr_9 <- { mtr_9 with current = ( ^ _21) };
    _20 <- ([#"../inc_some_tree.rs" 74 20 74 35] take_some _21);
    goto BB12
  }
  BB12 {
    _13 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _13) };
    assume { Resolve2.resolve _20 };
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    _10 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _10) };
    _5 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _5) };
    assume { Resolve2.resolve _13 };
    assume { Resolve2.resolve _10 };
    assume { Resolve1.resolve mtr_9 };
    assume { Resolve2.resolve ma_8 };
    assume { Resolve1.resolve mtl_7 };
    _2 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _2) };
    _0 <- borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    assume { Resolve2.resolve _5 };
    assume { Resolve2.resolve _2 };
    assume { Resolve0.resolve self_1 };
    return _0
  }
  BB15 {
    goto BB16
  }
  BB16 {
    _23 <- ();
    goto BB15
  }
  
end
module IncSomeTree_IncSomeTree_Interface
  use prelude.UInt32
  use prelude.Int
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  clone IncSomeTree_Impl0_Sum_Stub as Sum0
  val inc_some_tree [#"../inc_some_tree.rs" 83 0 83 41] (t : IncSomeTree_Tree_Type.t_tree) (k : uint32) : ()
    requires {[#"../inc_some_tree.rs" 82 11 82 36] Sum0.sum t + UInt32.to_int k <= 1000000}
    
end
module IncSomeTree_IncSomeTree
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Std1_Num_Impl6_ShallowModel as ShallowModel1
  use prelude.Int
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = uint32,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  clone IncSomeTree_Impl0_Sum as Sum0
  clone IncSomeTree_Impl0_TakeSome_Interface as TakeSome0 with
    function Sum0.sum = Sum0.sum,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone IncSomeTree_Impl0_SumX_Interface as SumX0 with
    function Sum0.sum = Sum0.sum
  let rec cfg inc_some_tree [#"../inc_some_tree.rs" 83 0 83 41] [@cfg:stackify] [@cfg:subregion_analysis] (t : IncSomeTree_Tree_Type.t_tree) (k : uint32) : ()
    requires {[#"../inc_some_tree.rs" 82 11 82 36] Sum0.sum t + UInt32.to_int k <= 1000000}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var t_1 : IncSomeTree_Tree_Type.t_tree;
  var k_2 : uint32;
  var sum0_4 : uint32;
  var _5 : IncSomeTree_Tree_Type.t_tree;
  var ma_6 : borrowed uint32;
  var _7 : borrowed (IncSomeTree_Tree_Type.t_tree);
  var _8 : uint32;
  var _9 : ();
  var _10 : bool;
  var _11 : bool;
  var _12 : uint32;
  var _13 : IncSomeTree_Tree_Type.t_tree;
  var _14 : uint32;
  var _15 : uint32;
  var _16 : uint32;
  var _17 : ();
  {
    t_1 <- t;
    k_2 <- k;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _5 <- t_1;
    sum0_4 <- ([#"../inc_some_tree.rs" 84 15 84 24] SumX0.sum_x _5);
    goto BB2
  }
  BB2 {
    _7 <- borrow_mut t_1;
    t_1 <-  ^ _7;
    ma_6 <- ([#"../inc_some_tree.rs" 85 13 85 26] TakeSome0.take_some _7);
    goto BB3
  }
  BB3 {
    _8 <- k_2;
    ma_6 <- { ma_6 with current = ([#"../inc_some_tree.rs" 86 4 86 12]  * ma_6 + _8) };
    assume { Resolve0.resolve ma_6 };
    _13 <- t_1;
    _12 <- ([#"../inc_some_tree.rs" 87 12 87 21] SumX0.sum_x _13);
    goto BB4
  }
  BB4 {
    _15 <- sum0_4;
    _16 <- k_2;
    _14 <- ([#"../inc_some_tree.rs" 87 25 87 33] _15 + _16);
    _11 <- ([#"../inc_some_tree.rs" 87 12 87 33] _12 = _14);
    _10 <- not _11;
    switch (_10)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    absurd
  }
  BB6 {
    _9 <- ();
    _0 <- ();
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module IncSomeTree_Impl1
  
end
