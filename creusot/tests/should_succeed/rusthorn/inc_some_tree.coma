
module IncSomeTree_Tree_Type
  use prelude.UInt32
  use prelude.Int
  type t_tree  =
    | C_Node (t_tree) uint32 (t_tree)
    | C_Leaf
    
  function any_l (_ : 'b) : 'a
  let rec node (input:t_tree) (ret  (field_0:t_tree) (field_1:uint32) (field_2:t_tree))= any
    [ good (field_0:t_tree) (field_1:uint32) (field_2:t_tree)-> {C_Node field_0 field_1 field_2 = input}
      (! ret {field_0} {field_1} {field_2})
    | bad (field_0:t_tree) (field_1:uint32) (field_2:t_tree)-> {C_Node field_0 field_1 field_2 <> input} {false} any ]
    
  let rec leaf (input:t_tree) (ret  )= any
    [ good -> {C_Leaf  = input} (! ret) | bad -> {C_Leaf  <> input} {false} any ]
    
end
module IncSomeTree_Impl0_LemmaSumNonneg_Impl
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function sum'0 [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int =
    [#"../inc_some_tree.rs" 23 12 26 13] match self with
      | IncSomeTree_Tree_Type.C_Node tl a tr -> sum'0 tl + UInt32.to_int a + sum'0 tr
      | IncSomeTree_Tree_Type.C_Leaf -> 0
      end
  let rec sum'0 (self:IncSomeTree_Tree_Type.t_tree) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum'0 self} (! return' {result}) ]
    
  constant self  : IncSomeTree_Tree_Type.t_tree
  function lemma_sum_nonneg [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
  goal vc_lemma_sum_nonneg : match self with
    | IncSomeTree_Tree_Type.C_Node tl _ tr -> ([#"../inc_some_tree.rs" 32 14 32 29] sum'0 tl >= 0)
     -> (let _ = lemma_sum_nonneg tl in ([#"../inc_some_tree.rs" 32 14 32 29] sum'0 tr >= 0)
     -> (let _ = lemma_sum_nonneg tr in [#"../inc_some_tree.rs" 32 14 32 29] sum'0 self >= 0))
    | IncSomeTree_Tree_Type.C_Leaf -> [#"../inc_some_tree.rs" 32 14 32 29] sum'0 self >= 0
    end
end
module IncSomeTree_Impl0_SumX
  use prelude.UInt32
  use prelude.Int
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  function sum'0 [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int =
    [#"../inc_some_tree.rs" 23 12 26 13] match self with
      | IncSomeTree_Tree_Type.C_Node tl a tr -> sum'0 tl + UInt32.to_int a + sum'0 tr
      | IncSomeTree_Tree_Type.C_Leaf -> 0
      end
  let rec sum'0 (self:IncSomeTree_Tree_Type.t_tree) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  use prelude.Intrinsic
  function lemma_sum_nonneg'0 [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
  axiom lemma_sum_nonneg'0_def : forall self : IncSomeTree_Tree_Type.t_tree . lemma_sum_nonneg'0 self
  = ([#"../inc_some_tree.rs" 34 8 40 9] match self with
    | IncSomeTree_Tree_Type.C_Node tl _ tr -> let _ = lemma_sum_nonneg'0 tl in let _ = lemma_sum_nonneg'0 tr in ()
    | IncSomeTree_Tree_Type.C_Leaf -> ()
    end)
  let rec lemma_sum_nonneg'0 (self:IncSomeTree_Tree_Type.t_tree) (return'  (ret:()))= any
    [ return' (result:())-> {result = lemma_sum_nonneg'0 self} (! return' {result}) ]
    
  axiom lemma_sum_nonneg'0_spec : forall self : IncSomeTree_Tree_Type.t_tree . [#"../inc_some_tree.rs" 32 14 32 29] sum'0 self
  >= 0
  use prelude.UInt32
  let rec sum_x (self:IncSomeTree_Tree_Type.t_tree) (return'  (ret:uint32))= {[#"../inc_some_tree.rs" 43 15 43 38] sum'0 self
    <= 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:IncSomeTree_Tree_Type.t_tree) (b:uint32) (c:IncSomeTree_Tree_Type.t_tree)-> {self
          = IncSomeTree_Tree_Type.C_Node a b c}
          (! bb2)
        | br1 -> {self = IncSomeTree_Tree_Type.C_Leaf } (! bb3) ]
         ]
      
    | bb1 = s0 [ s0 = {[#"../inc_some_tree.rs" 46 14 46 18] false} any ] 
    | bb3 = s0 [ s0 =  [ &_0 <- [#"../inc_some_tree.rs" 55 20 55 21] (0 : uint32) ] s1 | s1 = bb7 ] 
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = IncSomeTree_Tree_Type.node {self}
          (fun (r0'0:IncSomeTree_Tree_Type.t_tree) (r1'0:uint32) (r2'0:IncSomeTree_Tree_Type.t_tree) ->
             [ &tl <- r0'0 ] 
            s1)
      | s1 = IncSomeTree_Tree_Type.node {self}
          (fun (r0'1:IncSomeTree_Tree_Type.t_tree) (r1'1:uint32) (r2'1:IncSomeTree_Tree_Type.t_tree) ->
             [ &a <- r1'1 ] 
            s2)
      | s2 = IncSomeTree_Tree_Type.node {self}
          (fun (r0'2:IncSomeTree_Tree_Type.t_tree) (r1'2:uint32) (r2'2:IncSomeTree_Tree_Type.t_tree) ->
             [ &tr <- r2'2 ] 
            s3)
      | s3 = {[@expl:assertion] [#"../inc_some_tree.rs" 49 20 49 41] let _ = lemma_sum_nonneg'0 tl in let _ = lemma_sum_nonneg'0 tr in true}
        s4
      | s4 = sum_x {tl} (fun (_ret':uint32) ->  [ &_11 <- _ret' ] s5)
      | s5 = bb5 ]
      
    | bb5 = s0
      [ s0 = UInt32.add {_11} {a}
          (fun (_ret':uint32) ->  [ &_10 <- _ret' ] (any [ any_ (_any:uint32)-> (!  [ &_11 <- _any ] s1) ] ))
      | s1 = sum_x {tr} (fun (_ret':uint32) ->  [ &_14 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = UInt32.add {_10} {_14}
          (fun (_ret':uint32) ->
             [ &_0 <- _ret' ] 
            (any
            [ any_ (_any:uint32)-> (!  [ &_10 <- _any ] (any [ any_ (_any:uint32)-> (!  [ &_14 <- _any ] s1) ] )) ]
            ))
      | s1 = bb7 ]
      
    | bb7 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l () : uint32
    | & self : IncSomeTree_Tree_Type.t_tree = self
    | & tl : IncSomeTree_Tree_Type.t_tree = any_l () : IncSomeTree_Tree_Type.t_tree
    | & a : uint32 = any_l () : uint32
    | & tr : IncSomeTree_Tree_Type.t_tree = any_l () : IncSomeTree_Tree_Type.t_tree
    | & _10 : uint32 = any_l () : uint32
    | & _11 : uint32 = any_l () : uint32
    | & _14 : uint32 = any_l () : uint32 ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [#"../inc_some_tree.rs" 44 14 44 35] UInt32.to_int result
      = sum'0 self}
      (! return' {result}) ]
    
end
module IncSomeTree_Impl0_TakeSome
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  use prelude.UInt32
  function shallow_model'0 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] UInt32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed uint32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use prelude.Int
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  function sum'0 [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int =
    [#"../inc_some_tree.rs" 23 12 26 13] match self with
      | IncSomeTree_Tree_Type.C_Node tl a tr -> sum'0 tl + UInt32.to_int a + sum'0 tr
      | IncSomeTree_Tree_Type.C_Leaf -> 0
      end
  let rec sum'0 (self:IncSomeTree_Tree_Type.t_tree) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'2 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : borrowed (IncSomeTree_Tree_Type.t_tree)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (IncSomeTree_Tree_Type.t_tree)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  let rec random'0 (_1:()) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  function lemma_sum_nonneg'0 [#"../inc_some_tree.rs" 33 4 33 30] (self : IncSomeTree_Tree_Type.t_tree) : ()
  axiom lemma_sum_nonneg'0_def : forall self : IncSomeTree_Tree_Type.t_tree . lemma_sum_nonneg'0 self
  = ([#"../inc_some_tree.rs" 34 8 40 9] match self with
    | IncSomeTree_Tree_Type.C_Node tl _ tr -> let _ = lemma_sum_nonneg'0 tl in let _ = lemma_sum_nonneg'0 tr in ()
    | IncSomeTree_Tree_Type.C_Leaf -> ()
    end)
  let rec lemma_sum_nonneg'0 (self:IncSomeTree_Tree_Type.t_tree) (return'  (ret:()))= any
    [ return' (result:())-> {result = lemma_sum_nonneg'0 self} (! return' {result}) ]
    
  axiom lemma_sum_nonneg'0_spec : forall self : IncSomeTree_Tree_Type.t_tree . [#"../inc_some_tree.rs" 32 14 32 29] sum'0 self
  >= 0
  predicate resolve'0 (self : borrowed (IncSomeTree_Tree_Type.t_tree)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (IncSomeTree_Tree_Type.t_tree)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec take_some (self:borrowed (IncSomeTree_Tree_Type.t_tree)) (return'  (ret:borrowed uint32))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:IncSomeTree_Tree_Type.t_tree) (b:uint32) (c:IncSomeTree_Tree_Type.t_tree)-> { * self
          = IncSomeTree_Tree_Type.C_Node a b c}
          (! bb2)
        | br1 -> { * self = IncSomeTree_Tree_Type.C_Leaf } (! bb3) ]
         ]
      
    | bb1 = s0 [ s0 = -{resolve'0 self}- s1 | s1 = {[#"../inc_some_tree.rs" 62 14 62 18] false} any ] 
    | bb3 = s0 [ s0 = -{resolve'0 self}- s1 | s1 = bb15 ] 
    | bb15 = bb15 [ bb15 = (! s0 [ s0 = bb16 ] ) [ bb16 = s0 [ s0 = bb15 ]  ]  ] 
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = IncSomeTree_Tree_Type.node { * self}
          (fun (r0'0:IncSomeTree_Tree_Type.t_tree) (r1'0:uint32) (r2'0:IncSomeTree_Tree_Type.t_tree) ->
            Borrow.borrow_final <IncSomeTree_Tree_Type.t_tree> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (IncSomeTree_Tree_Type.t_tree)) ->
                 [ &mtl <- _ret' ] 
                IncSomeTree_Tree_Type.node { * self}
                  (fun (l_0'0:IncSomeTree_Tree_Type.t_tree) (l_1'0:uint32) (l_2'0:IncSomeTree_Tree_Type.t_tree) ->
                    
                    [ &self <- { self with current = (IncSomeTree_Tree_Type.C_Node ( ^ mtl) l_1'0 l_2'0 : IncSomeTree_Tree_Type.t_tree) ; } ]
                    
                    s1)))
      | s1 = IncSomeTree_Tree_Type.node { * self}
          (fun (r0'1:IncSomeTree_Tree_Type.t_tree) (r1'1:uint32) (r2'1:IncSomeTree_Tree_Type.t_tree) ->
            Borrow.borrow_final <uint32> {r1'1} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed uint32) ->
                 [ &ma <- _ret' ] 
                IncSomeTree_Tree_Type.node { * self}
                  (fun (l_0'1:IncSomeTree_Tree_Type.t_tree) (l_1'1:uint32) (l_2'1:IncSomeTree_Tree_Type.t_tree) ->
                    
                    [ &self <- { self with current = (IncSomeTree_Tree_Type.C_Node l_0'1 ( ^ ma) l_2'1 : IncSomeTree_Tree_Type.t_tree) ; } ]
                    
                    s2)))
      | s2 = IncSomeTree_Tree_Type.node { * self}
          (fun (r0'2:IncSomeTree_Tree_Type.t_tree) (r1'2:uint32) (r2'2:IncSomeTree_Tree_Type.t_tree) ->
            Borrow.borrow_final <IncSomeTree_Tree_Type.t_tree> {r2'2} {Borrow.inherit_id (Borrow.get_id self) 3}
              (fun (_ret':borrowed (IncSomeTree_Tree_Type.t_tree)) ->
                 [ &mtr <- _ret' ] 
                IncSomeTree_Tree_Type.node { * self}
                  (fun (l_0'2:IncSomeTree_Tree_Type.t_tree) (l_1'2:uint32) (l_2'2:IncSomeTree_Tree_Type.t_tree) ->
                    
                    [ &self <- { self with current = (IncSomeTree_Tree_Type.C_Node l_0'2 l_1'2 ( ^ mtr) : IncSomeTree_Tree_Type.t_tree) ; } ]
                    
                    s3)))
      | s3 = {[@expl:assertion] [#"../inc_some_tree.rs" 65 20 65 42] let _ = lemma_sum_nonneg'0 ( * mtl) in let _ = lemma_sum_nonneg'0 ( * mtr) in true}
        s4
      | s4 = random'0 {[#"../inc_some_tree.rs" 69 19 69 27] ()} (fun (_ret':bool) ->  [ &_14 <- _ret' ] s5)
      | s5 = bb5 ]
      
    | bb5 = s0 [ s0 = any [ br0 -> {_14 = false} (! bb7) | br1 -> {_14} (! bb6) ]  ] 
    | bb6 = s0
      [ s0 = -{resolve'1 mtr}- s1
      | s1 = -{resolve'1 mtl}- s2
      | s2 = Borrow.borrow_final <uint32> { * ma} {Borrow.get_id ma}
          (fun (_ret':borrowed uint32) ->  [ &_15 <- _ret' ]  [ &ma <- { ma with current = ( ^ _15) ; } ] s3)
      | s3 = Borrow.borrow_final <uint32> { * _15} {Borrow.get_id _15}
          (fun (_ret':borrowed uint32) ->  [ &_13 <- _ret' ]  [ &_15 <- { _15 with current = ( ^ _13) ; } ] s4)
      | s4 = -{resolve'2 _15}- s5
      | s5 = bb14 ]
      
    | bb7 = s0
      [ s0 = -{resolve'2 ma}- s1
      | s1 = random'0 {[#"../inc_some_tree.rs" 71 26 71 34] ()} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0 [ s0 = any [ br0 -> {_16 = false} (! bb11) | br1 -> {_16} (! bb9) ]  ] 
    | bb9 = s0
      [ s0 = -{resolve'1 mtr}- s1
      | s1 = Borrow.borrow_mut <IncSomeTree_Tree_Type.t_tree> { * mtl}
          (fun (_ret':borrowed (IncSomeTree_Tree_Type.t_tree)) ->
             [ &_19 <- _ret' ] 
             [ &mtl <- { mtl with current = ( ^ _19) ; } ] 
            s2)
      | s2 = take_some {_19} (fun (_ret':borrowed uint32) ->  [ &_18 <- _ret' ] s3)
      | s3 = bb10 ]
      
    | bb10 = s0
      [ s0 = Borrow.borrow_final <uint32> { * _18} {Borrow.get_id _18}
          (fun (_ret':borrowed uint32) ->  [ &_17 <- _ret' ]  [ &_18 <- { _18 with current = ( ^ _17) ; } ] s1)
      | s1 = Borrow.borrow_final <uint32> { * _17} {Borrow.get_id _17}
          (fun (_ret':borrowed uint32) ->  [ &_13 <- _ret' ]  [ &_17 <- { _17 with current = ( ^ _13) ; } ] s2)
      | s2 = -{resolve'2 _18}- s3
      | s3 = -{resolve'2 _17}- s4
      | s4 = bb13 ]
      
    | bb11 = s0
      [ s0 = -{resolve'1 mtl}- s1
      | s1 = Borrow.borrow_mut <IncSomeTree_Tree_Type.t_tree> { * mtr}
          (fun (_ret':borrowed (IncSomeTree_Tree_Type.t_tree)) ->
             [ &_21 <- _ret' ] 
             [ &mtr <- { mtr with current = ( ^ _21) ; } ] 
            s2)
      | s2 = take_some {_21} (fun (_ret':borrowed uint32) ->  [ &_20 <- _ret' ] s3)
      | s3 = bb12 ]
      
    | bb12 = s0
      [ s0 = Borrow.borrow_final <uint32> { * _20} {Borrow.get_id _20}
          (fun (_ret':borrowed uint32) ->  [ &_13 <- _ret' ]  [ &_20 <- { _20 with current = ( ^ _13) ; } ] s1)
      | s1 = -{resolve'2 _20}- s2
      | s2 = bb13 ]
      
    | bb13 = s0 [ s0 = bb14 ] 
    | bb14 = s0
      [ s0 = Borrow.borrow_final <uint32> { * _13} {Borrow.get_id _13}
          (fun (_ret':borrowed uint32) ->  [ &_10 <- _ret' ]  [ &_13 <- { _13 with current = ( ^ _10) ; } ] s1)
      | s1 = Borrow.borrow_final <uint32> { * _10} {Borrow.get_id _10}
          (fun (_ret':borrowed uint32) ->  [ &_5 <- _ret' ]  [ &_10 <- { _10 with current = ( ^ _5) ; } ] s2)
      | s2 = -{resolve'2 _13}- s3
      | s3 = -{resolve'2 _10}- s4
      | s4 = -{resolve'1 mtr}- s5
      | s5 = -{resolve'2 ma}- s6
      | s6 = -{resolve'1 mtl}- s7
      | s7 = Borrow.borrow_final <uint32> { * _5} {Borrow.get_id _5}
          (fun (_ret':borrowed uint32) ->  [ &_2 <- _ret' ]  [ &_5 <- { _5 with current = ( ^ _2) ; } ] s8)
      | s8 = Borrow.borrow_final <uint32> { * _2} {Borrow.get_id _2}
          (fun (_ret':borrowed uint32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = ( ^ _0) ; } ] s9)
      | s9 = -{resolve'2 _5}- s10
      | s10 = -{resolve'2 _2}- s11
      | s11 = -{resolve'0 self}- s12
      | s12 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed uint32 = any_l () : borrowed uint32
    | & self : borrowed (IncSomeTree_Tree_Type.t_tree) = self
    | & _2 : borrowed uint32 = any_l () : borrowed uint32
    | & _5 : borrowed uint32 = any_l () : borrowed uint32
    | & mtl : borrowed (IncSomeTree_Tree_Type.t_tree) = any_l () : borrowed (IncSomeTree_Tree_Type.t_tree)
    | & ma : borrowed uint32 = any_l () : borrowed uint32
    | & mtr : borrowed (IncSomeTree_Tree_Type.t_tree) = any_l () : borrowed (IncSomeTree_Tree_Type.t_tree)
    | & _10 : borrowed uint32 = any_l () : borrowed uint32
    | & _13 : borrowed uint32 = any_l () : borrowed uint32
    | & _14 : bool = any_l () : bool
    | & _15 : borrowed uint32 = any_l () : borrowed uint32
    | & _16 : bool = any_l () : bool
    | & _17 : borrowed uint32 = any_l () : borrowed uint32
    | & _18 : borrowed uint32 = any_l () : borrowed uint32
    | & _19 : borrowed (IncSomeTree_Tree_Type.t_tree) = any_l () : borrowed (IncSomeTree_Tree_Type.t_tree)
    | & _20 : borrowed uint32 = any_l () : borrowed uint32
    | & _21 : borrowed (IncSomeTree_Tree_Type.t_tree) = any_l () : borrowed (IncSomeTree_Tree_Type.t_tree) ]
    
    [ return' (result:borrowed uint32)-> {[@expl:postcondition] [#"../inc_some_tree.rs" 60 14 60 35] shallow_model'0 result
      <= sum'0 ( * self)}
      {[@expl:postcondition] [#"../inc_some_tree.rs" 59 14 59 64] sum'0 ( ^ self) - sum'0 ( * self)
      = UInt32.to_int ( ^ result) - shallow_model'0 result}
      (! return' {result}) ]
    
end
module IncSomeTree_IncSomeTree
  use prelude.UInt32
  use prelude.Int
  use IncSomeTree_Tree_Type as IncSomeTree_Tree_Type
  function sum'0 [#"../inc_some_tree.rs" 21 4 21 23] (self : IncSomeTree_Tree_Type.t_tree) : int =
    [#"../inc_some_tree.rs" 23 12 26 13] match self with
      | IncSomeTree_Tree_Type.C_Node tl a tr -> sum'0 tl + UInt32.to_int a + sum'0 tr
      | IncSomeTree_Tree_Type.C_Leaf -> 0
      end
  let rec sum'0 (self:IncSomeTree_Tree_Type.t_tree) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.UInt32
  predicate resolve'0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  function shallow_model'0 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] UInt32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed uint32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec take_some'0 (self:borrowed (IncSomeTree_Tree_Type.t_tree)) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {[#"../inc_some_tree.rs" 60 14 60 35] shallow_model'0 result
      <= sum'0 ( * self)}
      {[#"../inc_some_tree.rs" 59 14 59 64] sum'0 ( ^ self) - sum'0 ( * self)
      = UInt32.to_int ( ^ result) - shallow_model'0 result}
      (! return' {result}) ]
    
  let rec sum_x'0 (self:IncSomeTree_Tree_Type.t_tree) (return'  (ret:uint32))= {[@expl:precondition] [#"../inc_some_tree.rs" 43 15 43 38] sum'0 self
    <= 1000000}
    any
    [ return' (result:uint32)-> {[#"../inc_some_tree.rs" 44 14 44 35] UInt32.to_int result = sum'0 self}
      (! return' {result}) ]
    
  let rec inc_some_tree (t:IncSomeTree_Tree_Type.t_tree) (k:uint32) (return'  (ret:()))= {[#"../inc_some_tree.rs" 82 11 82 36] sum'0 t
    + UInt32.to_int k
    <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = sum_x'0 {t} (fun (_ret':uint32) ->  [ &sum0 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <IncSomeTree_Tree_Type.t_tree> {t}
          (fun (_ret':borrowed (IncSomeTree_Tree_Type.t_tree)) ->  [ &_7 <- _ret' ]  [ &t <-  ^ _7 ] s1)
      | s1 = take_some'0 {_7} (fun (_ret':borrowed uint32) ->  [ &ma <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = UInt32.add { * ma} {k} (fun (_ret':uint32) ->  [ &ma <- { ma with current = _ret' ; } ] s1)
      | s1 = -{resolve'0 ma}- s2
      | s2 = sum_x'0 {t} (fun (_ret':uint32) ->  [ &_11 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = s0
      [ s0 = UInt32.add {sum0} {k} (fun (_ret':uint32) ->  [ &_13 <- _ret' ] s1)
      | s1 = UInt32.eq {_11} {_13}
          (fun (_ret':bool) ->
             [ &_10 <- _ret' ] 
            (any
            [ any_ (_any:uint32)-> (!  [ &_11 <- _any ] (any [ any_ (_any:uint32)-> (!  [ &_13 <- _any ] s2) ] )) ]
            ))
      | s2 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb5) ]  ]
      
    | bb5 = s0 [ s0 =  [ &_0 <- [#"../inc_some_tree.rs" 83 42 88 1] () ] s1 | s1 = bb7 ] 
    | bb7 = s0 [ s0 = return' {_0} ] 
    | bb6 = s0 [ s0 = {[#"../inc_some_tree.rs" 87 4 87 34] false} any ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & t : IncSomeTree_Tree_Type.t_tree = t
    | & k : uint32 = k
    | & sum0 : uint32 = any_l () : uint32
    | & ma : borrowed uint32 = any_l () : borrowed uint32
    | & _7 : borrowed (IncSomeTree_Tree_Type.t_tree) = any_l () : borrowed (IncSomeTree_Tree_Type.t_tree)
    | & _10 : bool = any_l () : bool
    | & _11 : uint32 = any_l () : uint32
    | & _13 : uint32 = any_l () : uint32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module IncSomeTree_Impl1
  
end
