
module IncSome2List_List_Type
  use prelude.UInt32
  use prelude.Int
  type t_list  =
    | C_Cons uint32 (t_list)
    | C_Nil
    
  let function cons_0 (self : t_list) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Cons a _ -> a
      | C_Nil -> any uint32
      end
  let function cons_1 (self : t_list) : t_list = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Cons _ a -> a
      | C_Nil -> any t_list
      end
end
module IncSome2List_Impl0_LemmaSumNonneg_Impl
  use IncSome2List_List_Type as IncSome2List_List_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function sum0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : IncSome2List_List_Type.t_list) : int =
    [#"../inc_some_2_list.rs" 23 12 26 13] match self with
      | IncSome2List_List_Type.C_Cons a l -> UInt32.to_int a + sum0 l
      | IncSome2List_List_Type.C_Nil -> 0
      end
  val sum0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : IncSome2List_List_Type.t_list) : int
    ensures { result = sum0 self }
    
  let rec ghost function lemma_sum_nonneg [#"../inc_some_2_list.rs" 34 4 34 30] (self : IncSome2List_List_Type.t_list) : ()
    ensures { [#"../inc_some_2_list.rs" 33 14 33 29] sum0 self >= 0 }
    variant {[#"../inc_some_2_list.rs" 32 15 32 19] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../inc_some_2_list.rs" 35 8 38 9] match self with
      | IncSome2List_List_Type.C_Cons _ l -> lemma_sum_nonneg l
      | IncSome2List_List_Type.C_Nil -> ()
      end
end
module IncSome2List_Impl0_SumX
  use prelude.UInt32
  use prelude.Int
  use IncSome2List_List_Type as IncSome2List_List_Type
  function sum0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : IncSome2List_List_Type.t_list) : int =
    [#"../inc_some_2_list.rs" 23 12 26 13] match self with
      | IncSome2List_List_Type.C_Cons a l -> UInt32.to_int a + sum0 l
      | IncSome2List_List_Type.C_Nil -> 0
      end
  val sum0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : IncSome2List_List_Type.t_list) : int
    ensures { result = sum0 self }
    
  use prelude.Borrow
  use prelude.UInt32
  let rec cfg sum_x [#"../inc_some_2_list.rs" 43 4 43 26] [@cfg:stackify] [@cfg:subregion_analysis] (self : IncSome2List_List_Type.t_list) : uint32
    requires {[#"../inc_some_2_list.rs" 41 15 41 38] sum0 self <= 1000000}
    ensures { [#"../inc_some_2_list.rs" 42 14 42 35] UInt32.to_int result = sum0 self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self : IncSome2List_List_Type.t_list = self;
  var a : uint32;
  var l : IncSome2List_List_Type.t_list;
  var _8 : uint32;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | IncSome2List_List_Type.C_Cons _ _ -> goto BB1
      | IncSome2List_List_Type.C_Nil -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    [#"../inc_some_2_list.rs" 46 19 46 20] _0 <- ([#"../inc_some_2_list.rs" 46 19 46 20] [#"../inc_some_2_list.rs" 46 19 46 20] (0 : uint32));
    goto BB6
  }
  BB3 {
    assert { [#"../inc_some_2_list.rs" 44 14 44 18] false };
    absurd
  }
  BB4 {
    [#"../inc_some_2_list.rs" 45 17 45 18] a <- ([#"../inc_some_2_list.rs" 45 17 45 18] IncSome2List_List_Type.cons_0 self);
    [#"../inc_some_2_list.rs" 45 20 45 21] l <- ([#"../inc_some_2_list.rs" 45 20 45 21] IncSome2List_List_Type.cons_1 self);
    [#"../inc_some_2_list.rs" 45 31 45 40] _8 <- ([#"../inc_some_2_list.rs" 45 31 45 40] sum_x ([#"../inc_some_2_list.rs" 45 31 45 40] l));
    goto BB5
  }
  BB5 {
    [#"../inc_some_2_list.rs" 45 26 45 40] _0 <- ([#"../inc_some_2_list.rs" 45 26 45 40] ([#"../inc_some_2_list.rs" 45 26 45 28] a) + _8);
    _8 <- any uint32;
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module IncSome2List_Impl0_TakeSomeRest
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  use prelude.UInt32
  function shallow_model1 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] UInt32.to_int ( * self)
  val shallow_model1 (self : borrowed uint32) : int
    ensures { result = shallow_model1 self }
    
  use prelude.Int
  use IncSome2List_List_Type as IncSome2List_List_Type
  function sum0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : IncSome2List_List_Type.t_list) : int =
    [#"../inc_some_2_list.rs" 23 12 26 13] match self with
      | IncSome2List_List_Type.C_Cons a l -> UInt32.to_int a + sum0 l
      | IncSome2List_List_Type.C_Nil -> 0
      end
  val sum0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : IncSome2List_List_Type.t_list) : int
    ensures { result = sum0 self }
    
  use prelude.Ghost
  predicate resolve2 (self : borrowed (IncSome2List_List_Type.t_list)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (IncSome2List_List_Type.t_list)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed (IncSome2List_List_Type.t_list)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (IncSome2List_List_Type.t_list)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  val random0 [#"../inc_some_2_list.rs" 15 0 15 19] (_1 : ()) : bool
  use prelude.Ghost
  function lemma_sum_nonneg0 [#"../inc_some_2_list.rs" 34 4 34 30] (self : IncSome2List_List_Type.t_list) : ()
  axiom lemma_sum_nonneg0_def : forall self : IncSome2List_List_Type.t_list . lemma_sum_nonneg0 self = ([#"../inc_some_2_list.rs" 35 8 38 9] match self with
    | IncSome2List_List_Type.C_Cons _ l -> lemma_sum_nonneg0 l
    | IncSome2List_List_Type.C_Nil -> ()
    end)
  val lemma_sum_nonneg0 [#"../inc_some_2_list.rs" 34 4 34 30] (self : IncSome2List_List_Type.t_list) : ()
    ensures { result = lemma_sum_nonneg0 self }
    
  axiom lemma_sum_nonneg0_spec : forall self : IncSome2List_List_Type.t_list . [#"../inc_some_2_list.rs" 33 14 33 29] sum0 self >= 0
  let rec cfg take_some_rest [#"../inc_some_2_list.rs" 54 4 54 57] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (IncSome2List_List_Type.t_list)) : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list))
    ensures { [#"../inc_some_2_list.rs" 50 14 51 72] sum0 ( ^ self) - sum0 ( * self) = UInt32.to_int ( ^ (let (a, _) = result in a)) + sum0 ( ^ (let (_, a) = result in a)) - shallow_model1 (let (a, _) = result in a) - sum0 ( * (let (_, a) = result in a)) }
    ensures { [#"../inc_some_2_list.rs" 52 14 52 37] shallow_model1 (let (a, _) = result in a) <= sum0 ( * self) }
    ensures { [#"../inc_some_2_list.rs" 53 14 53 42] sum0 ( * (let (_, a) = result in a)) <= sum0 ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list));
  var self : borrowed (IncSome2List_List_Type.t_list) = self;
  var ma : borrowed uint32;
  var ml : borrowed (IncSome2List_List_Type.t_list);
  var _8 : Ghost.ghost_ty ();
  var _10 : bool;
  var _11 : borrowed uint32;
  var _12 : borrowed (IncSome2List_List_Type.t_list);
  var _13 : borrowed (IncSome2List_List_Type.t_list);
  {
    goto BB0
  }
  BB0 {
    switch ( * self)
      | IncSome2List_List_Type.C_Cons _ _ -> goto BB1
      | IncSome2List_List_Type.C_Nil -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    assume { resolve2 self };
    goto BB11
  }
  BB3 {
    assume { resolve2 self };
    assert { [#"../inc_some_2_list.rs" 55 14 55 18] false };
    absurd
  }
  BB4 {
    [#"../inc_some_2_list.rs" 56 17 56 19] ma <- Borrow.borrow_mut (IncSome2List_List_Type.cons_0 ( * self));
    [#"../inc_some_2_list.rs" 56 17 56 19] self <- { self with current = (let IncSome2List_List_Type.C_Cons x0 x1 =  * self in IncSome2List_List_Type.C_Cons ( ^ ma) x1) };
    [#"../inc_some_2_list.rs" 56 21 56 23] ml <- Borrow.borrow_mut (IncSome2List_List_Type.cons_1 ( * self));
    [#"../inc_some_2_list.rs" 56 21 56 23] self <- { self with current = (let IncSome2List_List_Type.C_Cons x0 x1 =  * self in IncSome2List_List_Type.C_Cons x0 ( ^ ml)) };
    [#"../inc_some_2_list.rs" 57 16 57 45] _8 <- ([#"../inc_some_2_list.rs" 57 16 57 45] Ghost.new (lemma_sum_nonneg0 ( * ml)));
    goto BB5
  }
  BB5 {
    [#"../inc_some_2_list.rs" 58 19 58 27] _10 <- ([#"../inc_some_2_list.rs" 58 19 58 27] random0 ());
    goto BB6
  }
  BB6 {
    switch (_10)
      | False -> goto BB8
      | True -> goto BB7
      end
  }
  BB7 {
    [#"../inc_some_2_list.rs" 59 21 59 23] _11 <- Borrow.borrow_mut ( * ma);
    [#"../inc_some_2_list.rs" 59 21 59 23] ma <- { ma with current =  ^ _11 };
    [#"../inc_some_2_list.rs" 59 25 59 27] _12 <- Borrow.borrow_mut ( * ml);
    [#"../inc_some_2_list.rs" 59 25 59 27] ml <- { ml with current =  ^ _12 };
    [#"../inc_some_2_list.rs" 59 20 59 28] _0 <- ([#"../inc_some_2_list.rs" 59 20 59 28] (_11, _12));
    _11 <- any borrowed uint32;
    _12 <- any borrowed (IncSome2List_List_Type.t_list);
    goto BB10
  }
  BB8 {
    assume { resolve0 ma };
    [#"../inc_some_2_list.rs" 61 20 61 39] _13 <- Borrow.borrow_mut ( * ml);
    [#"../inc_some_2_list.rs" 61 20 61 39] ml <- { ml with current =  ^ _13 };
    [#"../inc_some_2_list.rs" 61 20 61 39] _0 <- ([#"../inc_some_2_list.rs" 61 20 61 39] take_some_rest _13);
    _13 <- any borrowed (IncSome2List_List_Type.t_list);
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    assume { resolve1 ml };
    assume { resolve0 ma };
    assume { resolve2 self };
    return _0
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB11
  }
  
end
module IncSome2List_IncSome2List
  use prelude.UInt32
  use prelude.Int
  use IncSome2List_List_Type as IncSome2List_List_Type
  function sum0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : IncSome2List_List_Type.t_list) : int =
    [#"../inc_some_2_list.rs" 23 12 26 13] match self with
      | IncSome2List_List_Type.C_Cons a l -> UInt32.to_int a + sum0 l
      | IncSome2List_List_Type.C_Nil -> 0
      end
  val sum0 [#"../inc_some_2_list.rs" 21 4 21 23] (self : IncSome2List_List_Type.t_list) : int
    ensures { result = sum0 self }
    
  use prelude.Borrow
  predicate resolve2 (self : borrowed (IncSome2List_List_Type.t_list)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (IncSome2List_List_Type.t_list)) : bool
    ensures { result = resolve2 self }
    
  use prelude.UInt32
  predicate resolve1 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed uint32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] resolve1 (let (a, _) = self in a) /\ resolve2 (let (_, a) = self in a)
  val resolve0 (self : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  function shallow_model1 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] UInt32.to_int ( * self)
  val shallow_model1 (self : borrowed uint32) : int
    ensures { result = shallow_model1 self }
    
  val take_some_rest0 [#"../inc_some_2_list.rs" 54 4 54 57] (self : borrowed (IncSome2List_List_Type.t_list)) : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list))
    ensures { [#"../inc_some_2_list.rs" 50 14 51 72] sum0 ( ^ self) - sum0 ( * self) = UInt32.to_int ( ^ (let (a, _) = result in a)) + sum0 ( ^ (let (_, a) = result in a)) - shallow_model1 (let (a, _) = result in a) - sum0 ( * (let (_, a) = result in a)) }
    ensures { [#"../inc_some_2_list.rs" 52 14 52 37] shallow_model1 (let (a, _) = result in a) <= sum0 ( * self) }
    ensures { [#"../inc_some_2_list.rs" 53 14 53 42] sum0 ( * (let (_, a) = result in a)) <= sum0 ( * self) }
    
  val sum_x0 [#"../inc_some_2_list.rs" 43 4 43 26] (self : IncSome2List_List_Type.t_list) : uint32
    requires {[#"../inc_some_2_list.rs" 41 15 41 38] sum0 self <= 1000000}
    ensures { [#"../inc_some_2_list.rs" 42 14 42 35] UInt32.to_int result = sum0 self }
    
  let rec cfg inc_some_2_list [#"../inc_some_2_list.rs" 70 0 70 51] [@cfg:stackify] [@cfg:subregion_analysis] (l : IncSome2List_List_Type.t_list) (j : uint32) (k : uint32) : ()
    requires {[#"../inc_some_2_list.rs" 69 11 69 41] sum0 l + UInt32.to_int j + UInt32.to_int k <= 1000000}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l : IncSome2List_List_Type.t_list = l;
  var j : uint32 = j;
  var k : uint32 = k;
  var sum0 : uint32;
  var ma : borrowed uint32;
  var ml : borrowed (IncSome2List_List_Type.t_list);
  var _9 : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list));
  var _10 : borrowed (IncSome2List_List_Type.t_list);
  var mb : borrowed uint32;
  var _12 : (borrowed uint32, borrowed (IncSome2List_List_Type.t_list));
  var _13 : borrowed (IncSome2List_List_Type.t_list);
  var _19 : uint32;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    [#"../inc_some_2_list.rs" 71 15 71 24] sum0 <- ([#"../inc_some_2_list.rs" 71 15 71 24] sum_x0 ([#"../inc_some_2_list.rs" 71 15 71 24] l));
    goto BB2
  }
  BB2 {
    [#"../inc_some_2_list.rs" 72 19 72 37] _10 <- Borrow.borrow_mut l;
    [#"../inc_some_2_list.rs" 72 19 72 37] l <-  ^ _10;
    [#"../inc_some_2_list.rs" 72 19 72 37] _9 <- ([#"../inc_some_2_list.rs" 72 19 72 37] take_some_rest0 _10);
    _10 <- any borrowed (IncSome2List_List_Type.t_list);
    goto BB3
  }
  BB3 {
    [#"../inc_some_2_list.rs" 72 9 72 11] ma <- ([#"../inc_some_2_list.rs" 72 9 72 11] let (a, _) = _9 in a);
    [#"../inc_some_2_list.rs" 72 9 72 11] _9 <- (let (x0, x1) = _9 in (any borrowed uint32, x1));
    [#"../inc_some_2_list.rs" 72 13 72 15] ml <- ([#"../inc_some_2_list.rs" 72 13 72 15] let (_, a) = _9 in a);
    [#"../inc_some_2_list.rs" 72 13 72 15] _9 <- (let (x0, x1) = _9 in (x0, any borrowed (IncSome2List_List_Type.t_list)));
    assume { resolve0 _9 };
    [#"../inc_some_2_list.rs" 73 18 73 37] _13 <- Borrow.borrow_mut ( * ml);
    [#"../inc_some_2_list.rs" 73 18 73 37] ml <- { ml with current =  ^ _13 };
    [#"../inc_some_2_list.rs" 73 18 73 37] _12 <- ([#"../inc_some_2_list.rs" 73 18 73 37] take_some_rest0 _13);
    _13 <- any borrowed (IncSome2List_List_Type.t_list);
    goto BB4
  }
  BB4 {
    [#"../inc_some_2_list.rs" 73 9 73 11] mb <- ([#"../inc_some_2_list.rs" 73 9 73 11] let (a, _) = _12 in a);
    [#"../inc_some_2_list.rs" 73 9 73 11] _12 <- (let (x0, x1) = _12 in (any borrowed uint32, x1));
    assume { resolve0 _12 };
    [#"../inc_some_2_list.rs" 74 4 74 12] ma <- { ma with current = ([#"../inc_some_2_list.rs" 74 4 74 12]  * ma + ([#"../inc_some_2_list.rs" 74 11 74 12] j)) };
    assume { resolve1 ma };
    [#"../inc_some_2_list.rs" 75 4 75 12] mb <- { mb with current = ([#"../inc_some_2_list.rs" 75 4 75 12]  * mb + ([#"../inc_some_2_list.rs" 75 11 75 12] k)) };
    assume { resolve1 mb };
    assume { resolve2 ml };
    [#"../inc_some_2_list.rs" 76 12 76 21] _19 <- ([#"../inc_some_2_list.rs" 76 12 76 21] sum_x0 ([#"../inc_some_2_list.rs" 76 12 76 21] l));
    goto BB5
  }
  BB5 {
    switch ([#"../inc_some_2_list.rs" 76 4 76 38] not ([#"../inc_some_2_list.rs" 76 12 76 37] _19 = ([#"../inc_some_2_list.rs" 76 25 76 37] ([#"../inc_some_2_list.rs" 76 25 76 33] ([#"../inc_some_2_list.rs" 76 25 76 29] sum0) + ([#"../inc_some_2_list.rs" 76 32 76 33] j)) + ([#"../inc_some_2_list.rs" 76 36 76 37] k))))
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    assert { [#"../inc_some_2_list.rs" 76 4 76 38] false };
    absurd
  }
  BB7 {
    [#"../inc_some_2_list.rs" 70 52 77 1] _0 <- ([#"../inc_some_2_list.rs" 70 52 77 1] ());
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module IncSome2List_Impl1
  
end
