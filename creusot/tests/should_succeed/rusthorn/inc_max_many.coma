module M_inc_max_many__take_max [#"inc_max_many.rs" 6 0 6 64]
  let%span sinc_max_many0 = "inc_max_many.rs" 4 0 5 56
  let%span sresolve1 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  predicate resolve'1 (self : borrowed uint32) =
    [%#sresolve1] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed uint32) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec take_max (ma:borrowed uint32) (mb:borrowed uint32) (return'  (ret:borrowed uint32))= (! bb0
    [ bb0 = s0
      [ s0 = UInt32.ge {ma.current} {mb.current} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s1)
      | s1 = any [ br0 -> {_6 = false} (! bb2) | br1 -> {_6} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 mb}- s1
      | s1 = Borrow.borrow_final <uint32> {ma.current} {Borrow.get_id ma}
          (fun (_ret':borrowed uint32) ->  [ &_9 <- _ret' ]  [ &ma <- { ma with current = _ret'.final ; } ] s2)
      | s2 = Borrow.borrow_final <uint32> {_9.current} {Borrow.get_id _9}
          (fun (_ret':borrowed uint32) ->  [ &_5 <- _ret' ]  [ &_9 <- { _9 with current = _ret'.final ; } ] s3)
      | s3 = -{resolve'0 _9}- s4
      | s4 = bb3 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 ma}- s1
      | s1 = Borrow.borrow_final <uint32> {mb.current} {Borrow.get_id mb}
          (fun (_ret':borrowed uint32) ->  [ &_5 <- _ret' ]  [ &mb <- { mb with current = _ret'.final ; } ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_final <uint32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed uint32) ->  [ &_3 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final ; } ] s1)
      | s1 = Borrow.borrow_final <uint32> {_3.current} {Borrow.get_id _3}
          (fun (_ret':borrowed uint32) ->  [ &_0 <- _ret' ]  [ &_3 <- { _3 with current = _ret'.final ; } ] s2)
      | s2 = -{resolve'0 _5}- s3
      | s3 = -{resolve'0 _3}- s4
      | s4 = -{resolve'0 mb}- s5
      | s5 = -{resolve'0 ma}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed uint32 = any_l ()
    | & ma : borrowed uint32 = ma
    | & mb : borrowed uint32 = mb
    | & _3 : borrowed uint32 = any_l ()
    | & _5 : borrowed uint32 = any_l ()
    | & _6 : bool = any_l ()
    | & _9 : borrowed uint32 = any_l () ]
    
    [ return' (result:borrowed uint32)-> {[@expl:postcondition] [%#sinc_max_many0] if ma.current >= mb.current then
        mb.current = mb.final /\ result = ma
      else
        ma.current = ma.final /\ result = mb
      }
      (! return' {result}) ]
    
end
module M_inc_max_many__inc_max_many [#"inc_max_many.rs" 15 0 15 51]
  let%span sinc_max_many0 = "inc_max_many.rs" 18 4 18 37
  let%span sinc_max_many1 = "inc_max_many.rs" 14 11 14 70
  let%span sinc_max_many2 = "inc_max_many.rs" 4 0 5 56
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed uint32) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed uint32) =
    resolve'1 _1
  
  let rec take_max'0 (ma:borrowed uint32) (mb:borrowed uint32) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {[%#sinc_max_many2] if ma.current >= mb.current then
        mb.current = mb.final /\ result = ma
      else
        ma.current = ma.final /\ result = mb
      }
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec inc_max_many (a:uint32) (b:uint32) (k:uint32) (return'  (ret:()))= {[%#sinc_max_many1] a <= (1000000 : uint32)
    /\ b <= (1000000 : uint32) /\ k <= (1000000 : uint32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <uint32> {a} (fun (_ret':borrowed uint32) ->  [ &_7 <- _ret' ]  [ &a <- _ret'.final ] s1)
      | s1 = Borrow.borrow_final <uint32> {_7.current} {Borrow.get_id _7}
          (fun (_ret':borrowed uint32) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = _ret'.final ; } ] s2)
      | s2 = Borrow.borrow_mut <uint32> {b} (fun (_ret':borrowed uint32) ->  [ &_9 <- _ret' ]  [ &b <- _ret'.final ] s3)
      | s3 = Borrow.borrow_final <uint32> {_9.current} {Borrow.get_id _9}
          (fun (_ret':borrowed uint32) ->  [ &_8 <- _ret' ]  [ &_9 <- { _9 with current = _ret'.final ; } ] s4)
      | s4 = take_max'0 {_6} {_8} (fun (_ret':borrowed uint32) ->  [ &mc <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _9}- s1
      | s1 = -{resolve'0 _7}- s2
      | s2 = UInt32.add {mc.current} {k} (fun (_ret':uint32) ->  [ &mc <- { mc with current = _ret' ; } ] s3)
      | s3 = -{resolve'0 mc}- s4
      | s4 = UInt32.add {b} {k} (fun (_ret':uint32) ->  [ &_14 <- _ret' ] s5)
      | s5 = UInt32.ge {a} {_14} (fun (_ret':bool) ->  [ &_12 <- _ret' ] s6)
      | s6 = any [ br0 -> {_12 = false} (! bb3) | br1 -> {_12} (! bb2) ]  ]
      
    | bb2 = bb6
    | bb3 = s0
      [ s0 = UInt32.add {a} {k} (fun (_ret':uint32) ->  [ &_19 <- _ret' ] s1)
      | s1 = UInt32.ge {b} {_19} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s2)
      | s2 = any [ br0 -> {_17 = false} (! bb5) | br1 -> {_17} (! bb4) ]  ]
      
    | bb4 = bb6
    | bb6 = return' {_0}
    | bb5 = {[%#sinc_max_many0] false} any ]
    )
    [ & _0 : () = any_l ()
    | & a : uint32 = a
    | & b : uint32 = b
    | & k : uint32 = k
    | & mc : borrowed uint32 = any_l ()
    | & _6 : borrowed uint32 = any_l ()
    | & _7 : borrowed uint32 = any_l ()
    | & _8 : borrowed uint32 = any_l ()
    | & _9 : borrowed uint32 = any_l ()
    | & _12 : bool = any_l ()
    | & _14 : uint32 = any_l ()
    | & _17 : bool = any_l ()
    | & _19 : uint32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
