
module IncMax3_IncMax3
  let%span sinc_max_30 = "../inc_max_3.rs" 22 11 22 12
  
  let%span sinc_max_31 = "../inc_max_3.rs" 23 11 23 12
  
  let%span sinc_max_32 = "../inc_max_3.rs" 10 11 10 76
  
  let%span sinc_max_33 = "../inc_max_3.rs" 11 10 11 48
  
  let%span span4 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span5 = "../inc_max_3.rs" 5 10 5 38
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  predicate resolve'1 (self : borrowed uint32) =
    [%#span4]  ^ self =  * self
  
  predicate resolve'0 (self : borrowed (borrowed uint32)) =
    [%#span4]  ^ self =  * self
  
  use prelude.prelude.Int
  
  let rec swap'0 (mma:borrowed (borrowed uint32)) (mmb:borrowed (borrowed uint32)) (return'  (ret:()))= any
    [ return' (result:())-> {[%#span5]  ^ mma =  * mmb /\  ^ mmb =  * mma} (! return' {result}) ]
    
  
  let rec inc_max_3 (ma:borrowed uint32) (mb:borrowed uint32) (mc:borrowed uint32) (return'  (ret:()))= {[%#sinc_max_32]  * ma
    <= (1000000 : uint32)
    /\  * mb <= (1000000 : uint32) /\  * mc <= (1000000 : uint32)}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.lt { * ma} { * mb} (fun (_ret':bool) ->  [ &_7 <- _ret' ] s1)
      | s1 = any [ br0 -> {_7 = false} (! bb3) | br1 -> {_7} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <borrowed uint32> {ma}
          (fun (_ret':borrowed (borrowed uint32)) ->  [ &_12 <- _ret' ]  [ &ma <-  ^ _12 ] s1)
      | s1 = Borrow.borrow_final <borrowed uint32> { * _12} {Borrow.get_id _12}
          (fun (_ret':borrowed (borrowed uint32)) ->
             [ &_11 <- _ret' ] 
             [ &_12 <- { _12 with current = ( ^ _11) ; } ] 
            s2)
      | s2 = Borrow.borrow_mut <borrowed uint32> {mb}
          (fun (_ret':borrowed (borrowed uint32)) ->  [ &_14 <- _ret' ]  [ &mb <-  ^ _14 ] s3)
      | s3 = Borrow.borrow_final <borrowed uint32> { * _14} {Borrow.get_id _14}
          (fun (_ret':borrowed (borrowed uint32)) ->
             [ &_13 <- _ret' ] 
             [ &_14 <- { _14 with current = ( ^ _13) ; } ] 
            s4)
      | s4 = swap'0 {_11} {_13} (fun (_ret':()) ->  [ &_10 <- _ret' ] s5)
      | s5 = bb2 ]
      
    | bb2 = s0 [ s0 = -{resolve'0 _14}- s1 | s1 = -{resolve'0 _12}- s2 | s2 = bb4 ] 
    | bb3 = bb4
    | bb4 = s0
      [ s0 = UInt32.lt { * mb} { * mc} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s1)
      | s1 = any [ br0 -> {_16 = false} (! bb7) | br1 -> {_16} (! bb5) ]  ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <borrowed uint32> {mb}
          (fun (_ret':borrowed (borrowed uint32)) ->  [ &_21 <- _ret' ]  [ &mb <-  ^ _21 ] s1)
      | s1 = Borrow.borrow_final <borrowed uint32> { * _21} {Borrow.get_id _21}
          (fun (_ret':borrowed (borrowed uint32)) ->
             [ &_20 <- _ret' ] 
             [ &_21 <- { _21 with current = ( ^ _20) ; } ] 
            s2)
      | s2 = Borrow.borrow_mut <borrowed uint32> {mc}
          (fun (_ret':borrowed (borrowed uint32)) ->  [ &_23 <- _ret' ]  [ &mc <-  ^ _23 ] s3)
      | s3 = Borrow.borrow_final <borrowed uint32> { * _23} {Borrow.get_id _23}
          (fun (_ret':borrowed (borrowed uint32)) ->
             [ &_22 <- _ret' ] 
             [ &_23 <- { _23 with current = ( ^ _22) ; } ] 
            s4)
      | s4 = swap'0 {_20} {_22} (fun (_ret':()) ->  [ &_19 <- _ret' ] s5)
      | s5 = bb6 ]
      
    | bb6 = s0 [ s0 = -{resolve'0 _23}- s1 | s1 = -{resolve'0 _21}- s2 | s2 = -{resolve'1 mc}- s3 | s3 = bb8 ] 
    | bb7 = s0 [ s0 = -{resolve'1 mc}- s1 | s1 = bb8 ] 
    | bb8 = s0
      [ s0 = UInt32.lt { * ma} { * mb} (fun (_ret':bool) ->  [ &_25 <- _ret' ] s1)
      | s1 = any [ br0 -> {_25 = false} (! bb11) | br1 -> {_25} (! bb9) ]  ]
      
    | bb9 = s0
      [ s0 = Borrow.borrow_mut <borrowed uint32> {ma}
          (fun (_ret':borrowed (borrowed uint32)) ->  [ &_30 <- _ret' ]  [ &ma <-  ^ _30 ] s1)
      | s1 = Borrow.borrow_final <borrowed uint32> { * _30} {Borrow.get_id _30}
          (fun (_ret':borrowed (borrowed uint32)) ->
             [ &_29 <- _ret' ] 
             [ &_30 <- { _30 with current = ( ^ _29) ; } ] 
            s2)
      | s2 = Borrow.borrow_mut <borrowed uint32> {mb}
          (fun (_ret':borrowed (borrowed uint32)) ->  [ &_32 <- _ret' ]  [ &mb <-  ^ _32 ] s3)
      | s3 = Borrow.borrow_final <borrowed uint32> { * _32} {Borrow.get_id _32}
          (fun (_ret':borrowed (borrowed uint32)) ->
             [ &_31 <- _ret' ] 
             [ &_32 <- { _32 with current = ( ^ _31) ; } ] 
            s4)
      | s4 = swap'0 {_29} {_31} (fun (_ret':()) ->  [ &_28 <- _ret' ] s5)
      | s5 = bb10 ]
      
    | bb10 = s0 [ s0 = -{resolve'0 _32}- s1 | s1 = -{resolve'0 _30}- s2 | s2 = bb12 ] 
    | bb11 = bb12
    | bb12 = s0
      [ s0 = UInt32.add { * ma} {[%#sinc_max_30] (2 : uint32)}
          (fun (_ret':uint32) ->  [ &ma <- { ma with current = _ret' ; } ] s1)
      | s1 = -{resolve'1 ma}- s2
      | s2 = UInt32.add { * mb} {[%#sinc_max_31] (1 : uint32)}
          (fun (_ret':uint32) ->  [ &mb <- { mb with current = _ret' ; } ] s3)
      | s3 = -{resolve'1 mb}- s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & ma : borrowed uint32 = ma
    | & mb : borrowed uint32 = mb
    | & mc : borrowed uint32 = mc
    | & _7 : bool = any_l ()
    | & _10 : () = any_l ()
    | & _11 : borrowed (borrowed uint32) = any_l ()
    | & _12 : borrowed (borrowed uint32) = any_l ()
    | & _13 : borrowed (borrowed uint32) = any_l ()
    | & _14 : borrowed (borrowed uint32) = any_l ()
    | & _16 : bool = any_l ()
    | & _19 : () = any_l ()
    | & _20 : borrowed (borrowed uint32) = any_l ()
    | & _21 : borrowed (borrowed uint32) = any_l ()
    | & _22 : borrowed (borrowed uint32) = any_l ()
    | & _23 : borrowed (borrowed uint32) = any_l ()
    | & _25 : bool = any_l ()
    | & _28 : () = any_l ()
    | & _29 : borrowed (borrowed uint32) = any_l ()
    | & _30 : borrowed (borrowed uint32) = any_l ()
    | & _31 : borrowed (borrowed uint32) = any_l ()
    | & _32 : borrowed (borrowed uint32) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sinc_max_33]  ^ ma <>  ^ mb /\  ^ mb <>  ^ mc /\  ^ mc <>  ^ ma}
      (! return' {result}) ]
    
end
module IncMax3_TestIncMax3
  let%span sinc_max_30 = "../inc_max_3.rs" 29 4 29 39
  
  let%span sinc_max_31 = "../inc_max_3.rs" 26 11 26 70
  
  let%span span2 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span3 = "../inc_max_3.rs" 10 11 10 76
  
  let%span span4 = "../inc_max_3.rs" 11 10 11 48
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  predicate resolve'0 (self : borrowed uint32) =
    [%#span2]  ^ self =  * self
  
  use prelude.prelude.Int
  
  let rec inc_max_3'0 (ma:borrowed uint32) (mb:borrowed uint32) (mc:borrowed uint32) (return'  (ret:()))= {[@expl:precondition] [%#span3]  * ma
    <= (1000000 : uint32)
    /\  * mb <= (1000000 : uint32) /\  * mc <= (1000000 : uint32)}
    any [ return' (result:())-> {[%#span4]  ^ ma <>  ^ mb /\  ^ mb <>  ^ mc /\  ^ mc <>  ^ ma} (! return' {result}) ] 
  
  let rec test_inc_max_3 (a:uint32) (b:uint32) (c:uint32) (return'  (ret:()))= {[%#sinc_max_31] a <= (1000000 : uint32)
    /\ b <= (1000000 : uint32) /\ c <= (1000000 : uint32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <uint32> {a} (fun (_ret':borrowed uint32) ->  [ &_7 <- _ret' ]  [ &a <-  ^ _7 ] s1)
      | s1 = Borrow.borrow_final <uint32> { * _7} {Borrow.get_id _7}
          (fun (_ret':borrowed uint32) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = ( ^ _6) ; } ] s2)
      | s2 = Borrow.borrow_mut <uint32> {b} (fun (_ret':borrowed uint32) ->  [ &_9 <- _ret' ]  [ &b <-  ^ _9 ] s3)
      | s3 = Borrow.borrow_final <uint32> { * _9} {Borrow.get_id _9}
          (fun (_ret':borrowed uint32) ->  [ &_8 <- _ret' ]  [ &_9 <- { _9 with current = ( ^ _8) ; } ] s4)
      | s4 = Borrow.borrow_mut <uint32> {c} (fun (_ret':borrowed uint32) ->  [ &_11 <- _ret' ]  [ &c <-  ^ _11 ] s5)
      | s5 = Borrow.borrow_final <uint32> { * _11} {Borrow.get_id _11}
          (fun (_ret':borrowed uint32) ->  [ &_10 <- _ret' ]  [ &_11 <- { _11 with current = ( ^ _10) ; } ] s6)
      | s6 = inc_max_3'0 {_6} {_8} {_10} (fun (_ret':()) ->  [ &_5 <- _ret' ] s7)
      | s7 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _11}- s1
      | s1 = -{resolve'0 _9}- s2
      | s2 = -{resolve'0 _7}- s3
      | s3 = UInt32.ne {a} {b} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s4)
      | s4 = any [ br0 -> {_13 = false} (! bb7) | br1 -> {_13} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 = UInt32.ne {b} {c} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s1)
      | s1 = any [ br0 -> {_16 = false} (! bb6) | br1 -> {_16} (! bb3) ]  ]
      
    | bb3 = s0
      [ s0 = UInt32.ne {c} {a} (fun (_ret':bool) ->  [ &_19 <- _ret' ] s1)
      | s1 = any [ br0 -> {_19 = false} (! bb5) | br1 -> {_19} (! bb4) ]  ]
      
    | bb4 = return' {_0}
    | bb5 = bb8
    | bb6 = bb8
    | bb7 = bb8
    | bb8 = {[%#sinc_max_30] false} any ]
    )
    [ & _0 : () = any_l ()
    | & a : uint32 = a
    | & b : uint32 = b
    | & c : uint32 = c
    | & _5 : () = any_l ()
    | & _6 : borrowed uint32 = any_l ()
    | & _7 : borrowed uint32 = any_l ()
    | & _8 : borrowed uint32 = any_l ()
    | & _9 : borrowed uint32 = any_l ()
    | & _10 : borrowed uint32 = any_l ()
    | & _11 : borrowed uint32 = any_l ()
    | & _13 : bool = any_l ()
    | & _16 : bool = any_l ()
    | & _19 : bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
