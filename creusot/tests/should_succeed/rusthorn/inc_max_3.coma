module M_inc_max_3__inc_max_3 [#"inc_max_3.rs" 12 0 12 79]
  let%span sinc_max_30 = "inc_max_3.rs" 22 11 22 12
  let%span sinc_max_31 = "inc_max_3.rs" 23 11 23 12
  let%span sinc_max_32 = "inc_max_3.rs" 10 11 10 76
  let%span sinc_max_33 = "inc_max_3.rs" 11 10 11 48
  let%span sinc_max_34 = "inc_max_3.rs" 5 10 5 38
  let%span sresolve5 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sord6 = "../../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord7 = "../../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord8 = "../../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord9 = "../../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord10 = "../../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord11 = "../../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord12 = "../../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord13 = "../../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord14 = "../../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord15 = "../../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord16 = "../../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord17 = "../../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord18 = "../../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span sord19 = "../../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  let rec swap'0 (mma:borrowed (borrowed UInt32.t)) (mmb:borrowed (borrowed UInt32.t)) (return'  (ret:()))= any
    [ return' (result:())-> {[%#sinc_max_34] mma.final = mmb.current /\ mmb.final = mma.current} (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (borrowed UInt32.t)) =
    [%#sresolve5] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (borrowed UInt32.t)) =
    resolve'2 _1
  
  predicate resolve'3 (self : borrowed UInt32.t) =
    [%#sresolve5] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed UInt32.t) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.prelude.UInt32
  
  function cmp_log'0 (self : UInt32.t) (o : UInt32.t) : t_Ordering'0 =
    [%#sord19] if UInt32.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord18] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord16] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord17] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord14] cmp_log'0 x y = C_Less'0)
   -> ([%#sord15] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt32.t) (y : UInt32.t) (z : UInt32.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt32.t, y : UInt32.t, z : UInt32.t, o : t_Ordering'0 . ([%#sord11] cmp_log'0 x y
  = o)  -> ([%#sord12] cmp_log'0 y z = o)  -> ([%#sord13] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt32.t) : ()
  
  axiom refl'0_spec : forall x : UInt32.t . [%#sord10] cmp_log'0 x x = C_Equal'0
  
  use prelude.prelude.UInt32
  
  function cmp_gt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord9] UInt32.ugt x y = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.prelude.UInt32
  
  function cmp_ge_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord8] UInt32.uge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord7] UInt32.ult x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.prelude.UInt32
  
  function cmp_le_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord6] UInt32.ule x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  meta "compute_max_steps" 1000000
  
  let rec inc_max_3'0 (ma:borrowed UInt32.t) (mb:borrowed UInt32.t) (mc:borrowed UInt32.t) (return'  (ret:()))= {[@expl:inc_max_3 requires] [%#sinc_max_32] UInt32.ule ma.current (1000000 : UInt32.t)
    /\ UInt32.ule mb.current (1000000 : UInt32.t) /\ UInt32.ule mc.current (1000000 : UInt32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.lt {ma.current} {mb.current} (fun (_ret':bool) ->  [ &_7 <- _ret' ] s1)
      | s1 = any [ br0 -> {_7 = false} (! bb3) | br1 -> {_7} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <borrowed UInt32.t> {ma}
          (fun (_ret':borrowed (borrowed UInt32.t)) ->  [ &_12 <- _ret' ]  [ &ma <- _ret'.final ] s1)
      | s1 = Borrow.borrow_final <borrowed UInt32.t> {_12.current} {Borrow.get_id _12}
          (fun (_ret':borrowed (borrowed UInt32.t)) ->
             [ &_11 <- _ret' ] 
             [ &_12 <- { _12 with current = _ret'.final } ] 
            s2)
      | s2 = Borrow.borrow_mut <borrowed UInt32.t> {mb}
          (fun (_ret':borrowed (borrowed UInt32.t)) ->  [ &_14 <- _ret' ]  [ &mb <- _ret'.final ] s3)
      | s3 = Borrow.borrow_final <borrowed UInt32.t> {_14.current} {Borrow.get_id _14}
          (fun (_ret':borrowed (borrowed UInt32.t)) ->
             [ &_13 <- _ret' ] 
             [ &_14 <- { _14 with current = _ret'.final } ] 
            s4)
      | s4 = swap'0 {_11} {_13} (fun (_ret':()) ->  [ &_10 <- _ret' ] s5)
      | s5 = bb2 ]
      
    | bb2 = s0 [ s0 = -{resolve'0 _14}- s1 | s1 = -{resolve'0 _12}- s2 | s2 = bb4 ] 
    | bb3 = bb4
    | bb4 = s0
      [ s0 = UInt32.lt {mb.current} {mc.current} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s1)
      | s1 = any [ br0 -> {_16 = false} (! bb7) | br1 -> {_16} (! bb5) ]  ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <borrowed UInt32.t> {mb}
          (fun (_ret':borrowed (borrowed UInt32.t)) ->  [ &_21 <- _ret' ]  [ &mb <- _ret'.final ] s1)
      | s1 = Borrow.borrow_final <borrowed UInt32.t> {_21.current} {Borrow.get_id _21}
          (fun (_ret':borrowed (borrowed UInt32.t)) ->
             [ &_20 <- _ret' ] 
             [ &_21 <- { _21 with current = _ret'.final } ] 
            s2)
      | s2 = Borrow.borrow_mut <borrowed UInt32.t> {mc}
          (fun (_ret':borrowed (borrowed UInt32.t)) ->  [ &_23 <- _ret' ]  [ &mc <- _ret'.final ] s3)
      | s3 = Borrow.borrow_final <borrowed UInt32.t> {_23.current} {Borrow.get_id _23}
          (fun (_ret':borrowed (borrowed UInt32.t)) ->
             [ &_22 <- _ret' ] 
             [ &_23 <- { _23 with current = _ret'.final } ] 
            s4)
      | s4 = swap'0 {_20} {_22} (fun (_ret':()) ->  [ &_19 <- _ret' ] s5)
      | s5 = bb6 ]
      
    | bb6 = s0 [ s0 = -{resolve'0 _23}- s1 | s1 = -{resolve'0 _21}- s2 | s2 = -{resolve'1 mc}- s3 | s3 = bb8 ] 
    | bb7 = s0 [ s0 = -{resolve'1 mc}- s1 | s1 = bb8 ] 
    | bb8 = s0
      [ s0 = UInt32.lt {ma.current} {mb.current} (fun (_ret':bool) ->  [ &_25 <- _ret' ] s1)
      | s1 = any [ br0 -> {_25 = false} (! bb11) | br1 -> {_25} (! bb9) ]  ]
      
    | bb9 = s0
      [ s0 = Borrow.borrow_mut <borrowed UInt32.t> {ma}
          (fun (_ret':borrowed (borrowed UInt32.t)) ->  [ &_30 <- _ret' ]  [ &ma <- _ret'.final ] s1)
      | s1 = Borrow.borrow_final <borrowed UInt32.t> {_30.current} {Borrow.get_id _30}
          (fun (_ret':borrowed (borrowed UInt32.t)) ->
             [ &_29 <- _ret' ] 
             [ &_30 <- { _30 with current = _ret'.final } ] 
            s2)
      | s2 = Borrow.borrow_mut <borrowed UInt32.t> {mb}
          (fun (_ret':borrowed (borrowed UInt32.t)) ->  [ &_32 <- _ret' ]  [ &mb <- _ret'.final ] s3)
      | s3 = Borrow.borrow_final <borrowed UInt32.t> {_32.current} {Borrow.get_id _32}
          (fun (_ret':borrowed (borrowed UInt32.t)) ->
             [ &_31 <- _ret' ] 
             [ &_32 <- { _32 with current = _ret'.final } ] 
            s4)
      | s4 = swap'0 {_29} {_31} (fun (_ret':()) ->  [ &_28 <- _ret' ] s5)
      | s5 = bb10 ]
      
    | bb10 = s0 [ s0 = -{resolve'0 _32}- s1 | s1 = -{resolve'0 _30}- s2 | s2 = bb12 ] 
    | bb11 = bb12
    | bb12 = s0
      [ s0 = UInt32.add {ma.current} {[%#sinc_max_30] (2 : UInt32.t)}
          (fun (_ret':UInt32.t) ->  [ &ma <- { ma with current = _ret' } ] s1)
      | s1 = -{resolve'1 ma}- s2
      | s2 = UInt32.add {mb.current} {[%#sinc_max_31] (1 : UInt32.t)}
          (fun (_ret':UInt32.t) ->  [ &mb <- { mb with current = _ret' } ] s3)
      | s3 = -{resolve'1 mb}- s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & ma : borrowed UInt32.t = ma
    | & mb : borrowed UInt32.t = mb
    | & mc : borrowed UInt32.t = mc
    | & _7 : bool = any_l ()
    | & _10 : () = any_l ()
    | & _11 : borrowed (borrowed UInt32.t) = any_l ()
    | & _12 : borrowed (borrowed UInt32.t) = any_l ()
    | & _13 : borrowed (borrowed UInt32.t) = any_l ()
    | & _14 : borrowed (borrowed UInt32.t) = any_l ()
    | & _16 : bool = any_l ()
    | & _19 : () = any_l ()
    | & _20 : borrowed (borrowed UInt32.t) = any_l ()
    | & _21 : borrowed (borrowed UInt32.t) = any_l ()
    | & _22 : borrowed (borrowed UInt32.t) = any_l ()
    | & _23 : borrowed (borrowed UInt32.t) = any_l ()
    | & _25 : bool = any_l ()
    | & _28 : () = any_l ()
    | & _29 : borrowed (borrowed UInt32.t) = any_l ()
    | & _30 : borrowed (borrowed UInt32.t) = any_l ()
    | & _31 : borrowed (borrowed UInt32.t) = any_l ()
    | & _32 : borrowed (borrowed UInt32.t) = any_l () ]
    
    [ return' (result:())-> {[@expl:inc_max_3 ensures] [%#sinc_max_33] ma.final <> mb.final
      /\ mb.final <> mc.final /\ mc.final <> ma.final}
      (! return' {result}) ]
    
end
module M_inc_max_3__test_inc_max_3 [#"inc_max_3.rs" 27 0 27 57]
  let%span sinc_max_30 = "inc_max_3.rs" 29 4 29 39
  let%span sinc_max_31 = "inc_max_3.rs" 26 11 26 70
  let%span sinc_max_32 = "inc_max_3.rs" 10 11 10 76
  let%span sinc_max_33 = "inc_max_3.rs" 11 10 11 48
  let%span sresolve4 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sord5 = "../../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord6 = "../../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord7 = "../../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord8 = "../../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord9 = "../../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord10 = "../../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord11 = "../../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord12 = "../../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord13 = "../../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord14 = "../../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord15 = "../../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord16 = "../../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord17 = "../../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span sord18 = "../../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.prelude.UInt32
  
  function cmp_log'0 (self : UInt32.t) (o : UInt32.t) : t_Ordering'0 =
    [%#sord18] if UInt32.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord17] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord15] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord16] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord13] cmp_log'0 x y = C_Less'0)
   -> ([%#sord14] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt32.t) (y : UInt32.t) (z : UInt32.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt32.t, y : UInt32.t, z : UInt32.t, o : t_Ordering'0 . ([%#sord10] cmp_log'0 x y
  = o)  -> ([%#sord11] cmp_log'0 y z = o)  -> ([%#sord12] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt32.t) : ()
  
  axiom refl'0_spec : forall x : UInt32.t . [%#sord9] cmp_log'0 x x = C_Equal'0
  
  use prelude.prelude.UInt32
  
  function cmp_gt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord8] UInt32.ugt x y = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.prelude.UInt32
  
  function cmp_ge_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord7] UInt32.uge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord6] UInt32.ult x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.prelude.UInt32
  
  function cmp_le_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord5] UInt32.ule x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  let rec inc_max_3'0 (ma:borrowed UInt32.t) (mb:borrowed UInt32.t) (mc:borrowed UInt32.t) (return'  (ret:()))= {[@expl:inc_max_3 requires] [%#sinc_max_32] UInt32.ule ma.current (1000000 : UInt32.t)
    /\ UInt32.ule mb.current (1000000 : UInt32.t) /\ UInt32.ule mc.current (1000000 : UInt32.t)}
    any
    [ return' (result:())-> {[%#sinc_max_33] ma.final <> mb.final /\ mb.final <> mc.final /\ mc.final <> ma.final}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed UInt32.t) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed UInt32.t) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_inc_max_3'0 (a:UInt32.t) (b:UInt32.t) (c:UInt32.t) (return'  (ret:()))= {[@expl:test_inc_max_3 requires] [%#sinc_max_31] UInt32.ule a (1000000 : UInt32.t)
    /\ UInt32.ule b (1000000 : UInt32.t) /\ UInt32.ule c (1000000 : UInt32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <UInt32.t> {a}
          (fun (_ret':borrowed UInt32.t) ->  [ &_7 <- _ret' ]  [ &a <- _ret'.final ] s1)
      | s1 = Borrow.borrow_final <UInt32.t> {_7.current} {Borrow.get_id _7}
          (fun (_ret':borrowed UInt32.t) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = _ret'.final } ] s2)
      | s2 = Borrow.borrow_mut <UInt32.t> {b}
          (fun (_ret':borrowed UInt32.t) ->  [ &_9 <- _ret' ]  [ &b <- _ret'.final ] s3)
      | s3 = Borrow.borrow_final <UInt32.t> {_9.current} {Borrow.get_id _9}
          (fun (_ret':borrowed UInt32.t) ->  [ &_8 <- _ret' ]  [ &_9 <- { _9 with current = _ret'.final } ] s4)
      | s4 = Borrow.borrow_mut <UInt32.t> {c}
          (fun (_ret':borrowed UInt32.t) ->  [ &_11 <- _ret' ]  [ &c <- _ret'.final ] s5)
      | s5 = Borrow.borrow_final <UInt32.t> {_11.current} {Borrow.get_id _11}
          (fun (_ret':borrowed UInt32.t) ->  [ &_10 <- _ret' ]  [ &_11 <- { _11 with current = _ret'.final } ] s6)
      | s6 = inc_max_3'0 {_6} {_8} {_10} (fun (_ret':()) ->  [ &_5 <- _ret' ] s7)
      | s7 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _11}- s1
      | s1 = -{resolve'0 _9}- s2
      | s2 = -{resolve'0 _7}- s3
      | s3 = UInt32.ne {a} {b} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s4)
      | s4 = any [ br0 -> {_13 = false} (! bb7) | br1 -> {_13} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 = UInt32.ne {b} {c} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s1)
      | s1 = any [ br0 -> {_16 = false} (! bb6) | br1 -> {_16} (! bb3) ]  ]
      
    | bb3 = s0
      [ s0 = UInt32.ne {c} {a} (fun (_ret':bool) ->  [ &_19 <- _ret' ] s1)
      | s1 = any [ br0 -> {_19 = false} (! bb5) | br1 -> {_19} (! bb4) ]  ]
      
    | bb4 = return' {_0}
    | bb5 = bb8
    | bb6 = bb8
    | bb7 = bb8
    | bb8 = {[%#sinc_max_30] false} any ]
    )
    [ & _0 : () = any_l ()
    | & a : UInt32.t = a
    | & b : UInt32.t = b
    | & c : UInt32.t = c
    | & _5 : () = any_l ()
    | & _6 : borrowed UInt32.t = any_l ()
    | & _7 : borrowed UInt32.t = any_l ()
    | & _8 : borrowed UInt32.t = any_l ()
    | & _9 : borrowed UInt32.t = any_l ()
    | & _10 : borrowed UInt32.t = any_l ()
    | & _11 : borrowed UInt32.t = any_l ()
    | & _13 : bool = any_l ()
    | & _16 : bool = any_l ()
    | & _19 : bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
