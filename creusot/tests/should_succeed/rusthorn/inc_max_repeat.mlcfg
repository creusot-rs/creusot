
module IncMaxRepeat_TakeMax
  use prelude.Borrow
  use prelude.UInt32
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  let rec cfg take_max [#"../inc_max_repeat.rs" 6 0 6 64] [@cfg:stackify] [@cfg:subregion_analysis] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max_repeat.rs" 4 0 5 56] if  * ma >=  * mb then
       * mb =  ^ mb /\ result = ma
    else
       * ma =  ^ ma /\ result = mb
     }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var ma : borrowed uint32 = ma;
  var mb : borrowed uint32 = mb;
  var _3 : borrowed uint32;
  var _5 : borrowed uint32;
  var _9 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    switch ([#"../inc_max_repeat.rs" 7 7 7 17] ([#"../inc_max_repeat.rs" 7 7 7 10]  * ma) >= ([#"../inc_max_repeat.rs" 7 14 7 17]  * mb))
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { resolve0 mb };
    [#"../inc_max_repeat.rs" 8 8 8 10] _9 <- Borrow.borrow_mut ( * ma);
    [#"../inc_max_repeat.rs" 8 8 8 10] ma <- { ma with current =  ^ _9 };
    [#"../inc_max_repeat.rs" 8 8 8 10] _5 <- Borrow.borrow_mut ( * _9);
    [#"../inc_max_repeat.rs" 8 8 8 10] _9 <- { _9 with current =  ^ _5 };
    assume { resolve0 _9 };
    goto BB3
  }
  BB2 {
    assume { resolve0 ma };
    [#"../inc_max_repeat.rs" 10 8 10 10] _5 <- Borrow.borrow_mut ( * mb);
    [#"../inc_max_repeat.rs" 10 8 10 10] mb <- { mb with current =  ^ _5 };
    goto BB3
  }
  BB3 {
    [#"../inc_max_repeat.rs" 7 4 11 5] _3 <- Borrow.borrow_mut ( * _5);
    [#"../inc_max_repeat.rs" 7 4 11 5] _5 <- { _5 with current =  ^ _3 };
    [#"../inc_max_repeat.rs" 7 4 11 5] _0 <- Borrow.borrow_mut ( * _3);
    [#"../inc_max_repeat.rs" 7 4 11 5] _3 <- { _3 with current =  ^ _0 };
    assume { resolve0 _5 };
    assume { resolve0 _3 };
    assume { resolve0 mb };
    assume { resolve0 ma };
    return _0
  }
  
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module IncMaxRepeat_IncMaxRepeat
  use prelude.UInt32
  use seq.Seq
  predicate invariant3 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Seq.seq uint32) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq uint32)
  val inv3 (_x : Seq.seq uint32) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq uint32 . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : Core_Option_Option_Type.t_option uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Core_Option_Option_Type.t_option uint32) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option uint32)
  val inv2 (_x : Core_Option_Option_Type.t_option uint32) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option uint32 . inv2 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant1 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (Core_Ops_Range_Range_Type.t_range uint32))
  val inv1 (_x : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range uint32) . inv1 x = true
  use seq.Seq
  predicate inv0 (_x : Core_Ops_Range_Range_Type.t_range uint32)
  val inv0 (_x : Core_Ops_Range_Range_Type.t_range uint32) : bool
    ensures { result = inv0 _x }
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  function deep_model0 (self : uint32) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  val deep_model0 (self : uint32) : int
    ensures { result = deep_model0 self }
    
  predicate produces0 (self : Core_Ops_Range_Range_Type.t_range uint32) (visited : Seq.seq uint32) (o : Core_Ops_Range_Range_Type.t_range uint32)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ deep_model0 (Core_Ops_Range_Range_Type.range_start self) <= deep_model0 (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> deep_model0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model0 (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = deep_model0 (Core_Ops_Range_Range_Type.range_start o) - deep_model0 (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> deep_model0 (Seq.get visited i) = deep_model0 (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces0 (self : Core_Ops_Range_Range_Type.t_range uint32) (visited : Seq.seq uint32) (o : Core_Ops_Range_Range_Type.t_range uint32) : bool
    ensures { result = produces0 self visited o }
    
  function produces_trans0 (a : Core_Ops_Range_Range_Type.t_range uint32) (ab : Seq.seq uint32) (b : Core_Ops_Range_Range_Type.t_range uint32) (bc : Seq.seq uint32) (c : Core_Ops_Range_Range_Type.t_range uint32) : ()
    
  val produces_trans0 (a : Core_Ops_Range_Range_Type.t_range uint32) (ab : Seq.seq uint32) (b : Core_Ops_Range_Range_Type.t_range uint32) (bc : Seq.seq uint32) (c : Core_Ops_Range_Range_Type.t_range uint32) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv3 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv3 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Ops_Range_Range_Type.t_range uint32, ab : Seq.seq uint32, b : Core_Ops_Range_Range_Type.t_range uint32, bc : Seq.seq uint32, c : Core_Ops_Range_Range_Type.t_range uint32 . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv3 ab) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv3 bc) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (a : Core_Ops_Range_Range_Type.t_range uint32) : ()
  val produces_refl0 (a : Core_Ops_Range_Range_Type.t_range uint32) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] inv0 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : Core_Ops_Range_Range_Type.t_range uint32 . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] inv0 a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] produces0 a (Seq.empty ) a)
  predicate invariant0 (self : Core_Ops_Range_Range_Type.t_range uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Core_Ops_Range_Range_Type.t_range uint32) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Core_Ops_Range_Range_Type.t_range uint32 . inv0 x = true
  use prelude.Ghost
  predicate resolve1 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed uint32) : bool
    ensures { result = resolve1 self }
    
  val take_max0 [#"../inc_max_repeat.rs" 6 0 6 64] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max_repeat.rs" 4 0 5 56] if  * ma >=  * mb then
       * mb =  ^ mb /\ result = ma
    else
       * ma =  ^ ma /\ result = mb
     }
    
  use seq.Seq
  predicate resolve0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve0 self /\ deep_model0 (Core_Ops_Range_Range_Type.range_start ( * self)) >= deep_model0 (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) : Core_Option_Option_Type.t_option uint32
    requires {inv1 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv2 result }
    
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  predicate into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range uint32) (res : Core_Ops_Range_Range_Type.t_range uint32)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range uint32) (res : Core_Ops_Range_Range_Type.t_range uint32) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range uint32) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range uint32) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Core_Ops_Range_Range_Type.t_range uint32) : Core_Ops_Range_Range_Type.t_range uint32
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv0 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    ensures { inv0 result }
    
  let rec cfg inc_max_repeat [#"../inc_max_repeat.rs" 15 0 15 53] [@cfg:stackify] [@cfg:subregion_analysis] (a : uint32) (b : uint32) (n : uint32) : ()
    requires {[#"../inc_max_repeat.rs" 14 11 14 70] a <= (1000000 : uint32) /\ b <= (1000000 : uint32) /\ n <= (1000000 : uint32)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : uint32 = a;
  var b : uint32 = b;
  var n : uint32 = n;
  var iter : Core_Ops_Range_Range_Type.t_range uint32;
  var iter_old : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range uint32);
  var produced : Ghost.ghost_ty (Seq.seq uint32);
  var _18 : Core_Option_Option_Type.t_option uint32;
  var _19 : borrowed (Core_Ops_Range_Range_Type.t_range uint32);
  var _20 : borrowed (Core_Ops_Range_Range_Type.t_range uint32);
  var __creusot_proc_iter_elem : uint32;
  var _23 : Ghost.ghost_ty (Seq.seq uint32);
  var mc : borrowed uint32;
  var _26 : borrowed uint32;
  var _27 : borrowed uint32;
  var _28 : borrowed uint32;
  var _29 : borrowed uint32;
  var _33 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../inc_max_repeat.rs" 16 4 16 86] iter <- ([#"../inc_max_repeat.rs" 16 4 16 86] into_iter0 ([#"../inc_max_repeat.rs" 18 13 18 17] Core_Ops_Range_Range_Type.C_Range ([#"../inc_max_repeat.rs" 18 13 18 14] [#"../inc_max_repeat.rs" 18 13 18 14] (0 : uint32)) ([#"../inc_max_repeat.rs" 18 16 18 17] n)));
    goto BB1
  }
  BB1 {
    [#"../inc_max_repeat.rs" 16 4 16 86] iter_old <- ([#"../inc_max_repeat.rs" 16 4 16 86] Ghost.new iter);
    goto BB2
  }
  BB2 {
    [#"../inc_max_repeat.rs" 16 4 16 86] produced <- ([#"../inc_max_repeat.rs" 16 4 16 86] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"../inc_max_repeat.rs" 16 4 16 86] inv0 iter };
    invariant { [#"../inc_max_repeat.rs" 16 4 16 86] produces0 (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../inc_max_repeat.rs" 16 16 16 84] UInt32.to_int a <= 1000000 + Seq.length (Ghost.inner produced) /\ UInt32.to_int b <= 1000000 + Seq.length (Ghost.inner produced) };
    invariant { [#"../inc_max_repeat.rs" 17 16 17 70] UInt32.to_int a >= UInt32.to_int b + Seq.length (Ghost.inner produced) \/ UInt32.to_int b >= UInt32.to_int a + Seq.length (Ghost.inner produced) };
    goto BB5
  }
  BB5 {
    [#"../inc_max_repeat.rs" 16 4 16 86] _20 <- Borrow.borrow_mut iter;
    [#"../inc_max_repeat.rs" 16 4 16 86] iter <-  ^ _20;
    [#"../inc_max_repeat.rs" 16 4 16 86] _19 <- Borrow.borrow_mut ( * _20);
    [#"../inc_max_repeat.rs" 16 4 16 86] _20 <- { _20 with current =  ^ _19 };
    [#"../inc_max_repeat.rs" 16 4 16 86] _18 <- ([#"../inc_max_repeat.rs" 16 4 16 86] next0 _19);
    _19 <- any borrowed (Core_Ops_Range_Range_Type.t_range uint32);
    goto BB6
  }
  BB6 {
    assume { resolve0 _20 };
    switch (_18)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB7 {
    switch ([#"../inc_max_repeat.rs" 22 12 22 22] ([#"../inc_max_repeat.rs" 22 12 22 13] a) >= ([#"../inc_max_repeat.rs" 22 17 22 22] ([#"../inc_max_repeat.rs" 22 17 22 18] b) + ([#"../inc_max_repeat.rs" 22 21 22 22] n)))
      | False -> goto BB14
      | True -> goto BB13
      end
  }
  BB8 {
    goto BB10
  }
  BB9 {
    assert { [#"../inc_max_repeat.rs" 16 4 16 86] false };
    absurd
  }
  BB10 {
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] __creusot_proc_iter_elem <- ([#"../../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] Core_Option_Option_Type.some_0 _18);
    [#"../inc_max_repeat.rs" 16 4 16 86] _23 <- ([#"../inc_max_repeat.rs" 16 4 16 86] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB11
  }
  BB11 {
    [#"../inc_max_repeat.rs" 16 4 16 86] produced <- ([#"../inc_max_repeat.rs" 16 4 16 86] _23);
    [#"../inc_max_repeat.rs" 16 4 16 86] _23 <- any Ghost.ghost_ty (Seq.seq uint32);
    [#"../inc_max_repeat.rs" 19 26 19 32] _27 <- Borrow.borrow_mut a;
    [#"../inc_max_repeat.rs" 19 26 19 32] a <-  ^ _27;
    [#"../inc_max_repeat.rs" 19 26 19 32] _26 <- Borrow.borrow_mut ( * _27);
    [#"../inc_max_repeat.rs" 19 26 19 32] _27 <- { _27 with current =  ^ _26 };
    [#"../inc_max_repeat.rs" 19 34 19 40] _29 <- Borrow.borrow_mut b;
    [#"../inc_max_repeat.rs" 19 34 19 40] b <-  ^ _29;
    [#"../inc_max_repeat.rs" 19 34 19 40] _28 <- Borrow.borrow_mut ( * _29);
    [#"../inc_max_repeat.rs" 19 34 19 40] _29 <- { _29 with current =  ^ _28 };
    [#"../inc_max_repeat.rs" 19 17 19 41] mc <- ([#"../inc_max_repeat.rs" 19 17 19 41] take_max0 _26 _28);
    _26 <- any borrowed uint32;
    _28 <- any borrowed uint32;
    goto BB12
  }
  BB12 {
    assume { resolve1 _29 };
    assume { resolve1 _27 };
    [#"../inc_max_repeat.rs" 20 8 20 16] mc <- { mc with current = ([#"../inc_max_repeat.rs" 20 8 20 16]  * mc + ([#"../inc_max_repeat.rs" 20 15 20 16] [#"../inc_max_repeat.rs" 20 15 20 16] (1 : uint32))) };
    assume { resolve1 mc };
    goto BB4
  }
  BB13 {
    [#"../inc_max_repeat.rs" 22 12 22 36] _33 <- ([#"../inc_max_repeat.rs" 22 12 22 36] [#"../inc_max_repeat.rs" 22 12 22 36] true);
    goto BB15
  }
  BB14 {
    [#"../inc_max_repeat.rs" 22 12 22 36] _33 <- ([#"../inc_max_repeat.rs" 22 26 22 36] ([#"../inc_max_repeat.rs" 22 26 22 27] b) >= ([#"../inc_max_repeat.rs" 22 31 22 36] ([#"../inc_max_repeat.rs" 22 31 22 32] a) + ([#"../inc_max_repeat.rs" 22 35 22 36] n)));
    goto BB15
  }
  BB15 {
    switch ([#"../inc_max_repeat.rs" 22 4 22 37] not _33)
      | False -> goto BB17
      | True -> goto BB16
      end
  }
  BB16 {
    assert { [#"../inc_max_repeat.rs" 22 4 22 37] false };
    absurd
  }
  BB17 {
    [#"../inc_max_repeat.rs" 15 54 23 1] _0 <- ([#"../inc_max_repeat.rs" 15 54 23 1] ());
    return _0
  }
  
end
