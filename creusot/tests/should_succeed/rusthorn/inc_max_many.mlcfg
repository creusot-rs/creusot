
module IncMaxMany_TakeMax
  use prelude.Borrow
  use prelude.UInt32
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  let rec cfg take_max [#"../inc_max_many.rs" 6 0 6 64] [@cfg:stackify] [@cfg:subregion_analysis] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max_many.rs" 4 0 5 56] if  * ma >=  * mb then
       * mb =  ^ mb /\ result = ma
    else
       * ma =  ^ ma /\ result = mb
     }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var ma : borrowed uint32 = ma;
  var mb : borrowed uint32 = mb;
  var _3 : borrowed uint32;
  var _5 : borrowed uint32;
  var _6 : bool;
  var _9 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../inc_max_many.rs" 7 7 7 17] _6 <-  * ma >=  * mb;
    switch (_6)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { resolve0 mb };
    [#"../inc_max_many.rs" 8 8 8 10] _9 <- Borrow.borrow_final ( * ma) (Borrow.get_id ma);
    [#"../inc_max_many.rs" 8 8 8 10] ma <- { ma with current = ( ^ _9) ; };
    [#"../inc_max_many.rs" 8 8 8 10] _5 <- Borrow.borrow_final ( * _9) (Borrow.get_id _9);
    [#"../inc_max_many.rs" 8 8 8 10] _9 <- { _9 with current = ( ^ _5) ; };
    assume { resolve0 _9 };
    goto BB3
  }
  BB2 {
    assume { resolve0 ma };
    [#"../inc_max_many.rs" 10 8 10 10] _5 <- Borrow.borrow_final ( * mb) (Borrow.get_id mb);
    [#"../inc_max_many.rs" 10 8 10 10] mb <- { mb with current = ( ^ _5) ; };
    goto BB3
  }
  BB3 {
    [#"../inc_max_many.rs" 7 4 11 5] _3 <- Borrow.borrow_final ( * _5) (Borrow.get_id _5);
    [#"../inc_max_many.rs" 7 4 11 5] _5 <- { _5 with current = ( ^ _3) ; };
    [#"../inc_max_many.rs" 7 4 11 5] _0 <- Borrow.borrow_final ( * _3) (Borrow.get_id _3);
    [#"../inc_max_many.rs" 7 4 11 5] _3 <- { _3 with current = ( ^ _0) ; };
    assume { resolve0 _5 };
    assume { resolve0 _3 };
    assume { resolve0 mb };
    assume { resolve0 ma };
    return _0
  }
  
end
module IncMaxMany_IncMaxMany
  use prelude.Borrow
  use prelude.UInt32
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  val take_max0 [#"../inc_max_many.rs" 6 0 6 64] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max_many.rs" 4 0 5 56] if  * ma >=  * mb then
       * mb =  ^ mb /\ result = ma
    else
       * ma =  ^ ma /\ result = mb
     }
    
  let rec cfg inc_max_many [#"../inc_max_many.rs" 15 0 15 51] [@cfg:stackify] [@cfg:subregion_analysis] (a : uint32) (b : uint32) (k : uint32) : ()
    requires {[#"../inc_max_many.rs" 14 11 14 70] a <= (1000000 : uint32) /\ b <= (1000000 : uint32) /\ k <= (1000000 : uint32)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : uint32 = a;
  var b : uint32 = b;
  var k : uint32 = k;
  var mc : borrowed uint32;
  var _6 : borrowed uint32;
  var _7 : borrowed uint32;
  var _8 : borrowed uint32;
  var _9 : borrowed uint32;
  var _12 : bool;
  var _14 : uint32;
  var _17 : bool;
  var _19 : uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../inc_max_many.rs" 16 22 16 28] _7 <- Borrow.borrow_mut a;
    [#"../inc_max_many.rs" 16 22 16 28] a <-  ^ _7;
    [#"../inc_max_many.rs" 16 22 16 28] _6 <- Borrow.borrow_final ( * _7) (Borrow.get_id _7);
    [#"../inc_max_many.rs" 16 22 16 28] _7 <- { _7 with current = ( ^ _6) ; };
    [#"../inc_max_many.rs" 16 30 16 36] _9 <- Borrow.borrow_mut b;
    [#"../inc_max_many.rs" 16 30 16 36] b <-  ^ _9;
    [#"../inc_max_many.rs" 16 30 16 36] _8 <- Borrow.borrow_final ( * _9) (Borrow.get_id _9);
    [#"../inc_max_many.rs" 16 30 16 36] _9 <- { _9 with current = ( ^ _8) ; };
    [#"../inc_max_many.rs" 16 13 16 37] mc <- ([#"../inc_max_many.rs" 16 13 16 37] take_max0 _6 _8);
    _6 <- any borrowed uint32;
    _8 <- any borrowed uint32;
    goto BB1
  }
  BB1 {
    assume { resolve0 _9 };
    assume { resolve0 _7 };
    [#"../inc_max_many.rs" 17 4 17 12] mc <- { mc with current = ( * mc + k) ; };
    assume { resolve0 mc };
    [#"../inc_max_many.rs" 18 17 18 22] _14 <- b + k;
    [#"../inc_max_many.rs" 18 12 18 22] _12 <- a >= _14;
    _14 <- any uint32;
    switch (_12)
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    goto BB4
  }
  BB3 {
    [#"../inc_max_many.rs" 18 31 18 36] _19 <- a + k;
    [#"../inc_max_many.rs" 18 26 18 36] _17 <- b >= _19;
    _19 <- any uint32;
    switch (_17)
      | False -> goto BB5
      | True -> goto BB4
      end
  }
  BB4 {
    [#"../inc_max_many.rs" 15 52 19 1] _0 <- ([#"../inc_max_many.rs" 15 52 19 1] ());
    return _0
  }
  BB5 {
    assert { [#"../inc_max_many.rs" 18 4 18 37] false };
    absurd
  }
  
end
