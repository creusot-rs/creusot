
module IncSomeList_List_Type
  use prelude.UInt32
  use prelude.Int
  type t_list  =
    | C_Cons uint32 (t_list)
    | C_Nil
    
  let function cons_0 (self : t_list) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Cons a _ -> a
      | C_Nil -> any uint32
      end
  let function cons_1 (self : t_list) : t_list = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Cons _ a -> a
      | C_Nil -> any t_list
      end
end
module IncSomeList_Impl0_LemmaSumNonneg_Impl
  use IncSomeList_List_Type as IncSomeList_List_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function sum0 [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int =
    [#"../inc_some_list.rs" 23 12 26 13] match self with
      | IncSomeList_List_Type.C_Cons a l -> UInt32.to_int a + sum0 l
      | IncSomeList_List_Type.C_Nil -> 0
      end
  val sum0 [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int
    ensures { result = sum0 self }
    
  constant self  : IncSomeList_List_Type.t_list
  function lemma_sum_nonneg [#"../inc_some_list.rs" 33 4 33 30] (self : IncSomeList_List_Type.t_list) : ()
  goal vc_lemma_sum_nonneg : match self with
    | IncSomeList_List_Type.C_Cons _ l -> ([#"../inc_some_list.rs" 32 14 32 29] sum0 l >= 0)
     -> ([#"../inc_some_list.rs" 32 14 32 29] sum0 self >= 0)
    | IncSomeList_List_Type.C_Nil -> [#"../inc_some_list.rs" 32 14 32 29] sum0 self >= 0
    end
end
module IncSomeList_Impl0_SumX
  use prelude.UInt32
  use prelude.Int
  use IncSomeList_List_Type as IncSomeList_List_Type
  function sum0 [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int =
    [#"../inc_some_list.rs" 23 12 26 13] match self with
      | IncSomeList_List_Type.C_Cons a l -> UInt32.to_int a + sum0 l
      | IncSomeList_List_Type.C_Nil -> 0
      end
  val sum0 [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int
    ensures { result = sum0 self }
    
  use prelude.Borrow
  use prelude.UInt32
  let rec cfg sum_x [#"../inc_some_list.rs" 42 4 42 26] [@cfg:stackify] [@cfg:subregion_analysis] (self : IncSomeList_List_Type.t_list) : uint32
    requires {[#"../inc_some_list.rs" 40 15 40 38] sum0 self <= 1000000}
    ensures { [#"../inc_some_list.rs" 41 14 41 35] UInt32.to_int result = sum0 self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self : IncSomeList_List_Type.t_list = self;
  var a : uint32;
  var l : IncSomeList_List_Type.t_list;
  var _8 : uint32;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | IncSomeList_List_Type.C_Cons _ _ -> goto BB1
      | IncSomeList_List_Type.C_Nil -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    [#"../inc_some_list.rs" 45 19 45 20] _0 <- ([#"../inc_some_list.rs" 45 19 45 20] (0 : uint32));
    goto BB6
  }
  BB3 {
    assert { [#"../inc_some_list.rs" 43 14 43 18] false };
    absurd
  }
  BB4 {
    [#"../inc_some_list.rs" 44 17 44 18] a <- IncSomeList_List_Type.cons_0 self;
    [#"../inc_some_list.rs" 44 20 44 21] l <- IncSomeList_List_Type.cons_1 self;
    [#"../inc_some_list.rs" 44 31 44 40] _8 <- ([#"../inc_some_list.rs" 44 31 44 40] sum_x l);
    goto BB5
  }
  BB5 {
    [#"../inc_some_list.rs" 44 26 44 40] _0 <- a + _8;
    _8 <- any uint32;
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module IncSomeList_Impl0_TakeSome
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  use prelude.UInt32
  function shallow_model1 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 97 8 97 31] UInt32.to_int ( * self)
  val shallow_model1 (self : borrowed uint32) : int
    ensures { result = shallow_model1 self }
    
  use prelude.Int
  use IncSomeList_List_Type as IncSomeList_List_Type
  function sum0 [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int =
    [#"../inc_some_list.rs" 23 12 26 13] match self with
      | IncSomeList_List_Type.C_Cons a l -> UInt32.to_int a + sum0 l
      | IncSomeList_List_Type.C_Nil -> 0
      end
  val sum0 [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int
    ensures { result = sum0 self }
    
  use prelude.Snapshot
  predicate resolve2 (self : borrowed (IncSomeList_List_Type.t_list)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve2 (self : borrowed (IncSomeList_List_Type.t_list)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed (IncSomeList_List_Type.t_list)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (IncSomeList_List_Type.t_list)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  val random0 [#"../inc_some_list.rs" 15 0 15 19] (_1 : ()) : bool
  use prelude.Snapshot
  function lemma_sum_nonneg0 [#"../inc_some_list.rs" 33 4 33 30] (self : IncSomeList_List_Type.t_list) : ()
  axiom lemma_sum_nonneg0_def : forall self : IncSomeList_List_Type.t_list . lemma_sum_nonneg0 self = ([#"../inc_some_list.rs" 34 8 37 9] match self with
    | IncSomeList_List_Type.C_Cons _ l -> lemma_sum_nonneg0 l
    | IncSomeList_List_Type.C_Nil -> ()
    end)
  val lemma_sum_nonneg0 [#"../inc_some_list.rs" 33 4 33 30] (self : IncSomeList_List_Type.t_list) : ()
    ensures { result = lemma_sum_nonneg0 self }
    
  axiom lemma_sum_nonneg0_spec : forall self : IncSomeList_List_Type.t_list . [#"../inc_some_list.rs" 32 14 32 29] sum0 self >= 0
  let rec cfg take_some [#"../inc_some_list.rs" 51 4 51 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (IncSomeList_List_Type.t_list)) : borrowed uint32
    ensures { [#"../inc_some_list.rs" 49 14 49 64] sum0 ( ^ self) - sum0 ( * self) = UInt32.to_int ( ^ result) - shallow_model1 result }
    ensures { [#"../inc_some_list.rs" 50 14 50 35] shallow_model1 result <= sum0 ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var self : borrowed (IncSomeList_List_Type.t_list) = self;
  var _2 : borrowed uint32;
  var _5 : borrowed uint32;
  var ma : borrowed uint32;
  var ml : borrowed (IncSomeList_List_Type.t_list);
  var _9 : borrowed uint32;
  var _10 : Snapshot.snap_ty ();
  var _12 : borrowed uint32;
  var _13 : bool;
  var _14 : borrowed uint32;
  var _15 : borrowed uint32;
  var _16 : borrowed (IncSomeList_List_Type.t_list);
  {
    goto BB0
  }
  BB0 {
    switch ( * self)
      | IncSomeList_List_Type.C_Cons _ _ -> goto BB1
      | IncSomeList_List_Type.C_Nil -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    assume { resolve2 self };
    goto BB11
  }
  BB3 {
    assume { resolve2 self };
    assert { [#"../inc_some_list.rs" 52 14 52 18] false };
    absurd
  }
  BB4 {
    [#"../inc_some_list.rs" 53 17 53 19] ma <- Borrow.borrow_final (IncSomeList_List_Type.cons_0 ( * self)) (Borrow.inherit_id (Borrow.get_id self) 1);
    [#"../inc_some_list.rs" 53 17 53 19] self <- { self with current = (let IncSomeList_List_Type.C_Cons x0 x1 =  * self in IncSomeList_List_Type.C_Cons ( ^ ma) x1) ; };
    [#"../inc_some_list.rs" 53 21 53 23] ml <- Borrow.borrow_final (IncSomeList_List_Type.cons_1 ( * self)) (Borrow.inherit_id (Borrow.get_id self) 2);
    [#"../inc_some_list.rs" 53 21 53 23] self <- { self with current = (let IncSomeList_List_Type.C_Cons x0 x1 =  * self in IncSomeList_List_Type.C_Cons x0 ( ^ ml)) ; };
    [#"../inc_some_list.rs" 54 16 54 51] _10 <- ([#"../inc_some_list.rs" 54 16 54 51] Snapshot.new (lemma_sum_nonneg0 ( * ml)));
    goto BB5
  }
  BB5 {
    [#"../inc_some_list.rs" 55 19 55 27] _13 <- ([#"../inc_some_list.rs" 55 19 55 27] random0 ([#"../inc_some_list.rs" 55 19 55 27] ()));
    goto BB6
  }
  BB6 {
    switch (_13)
      | False -> goto BB8
      | True -> goto BB7
      end
  }
  BB7 {
    assume { resolve1 ml };
    [#"../inc_some_list.rs" 56 20 56 22] _14 <- Borrow.borrow_final ( * ma) (Borrow.get_id ma);
    [#"../inc_some_list.rs" 56 20 56 22] ma <- { ma with current = ( ^ _14) ; };
    [#"../inc_some_list.rs" 56 20 56 22] _12 <- Borrow.borrow_final ( * _14) (Borrow.get_id _14);
    [#"../inc_some_list.rs" 56 20 56 22] _14 <- { _14 with current = ( ^ _12) ; };
    assume { resolve0 _14 };
    goto BB10
  }
  BB8 {
    assume { resolve0 ma };
    [#"../inc_some_list.rs" 58 20 58 22] _16 <- Borrow.borrow_mut ( * ml);
    [#"../inc_some_list.rs" 58 20 58 22] ml <- { ml with current = ( ^ _16) ; };
    [#"../inc_some_list.rs" 58 20 58 34] _15 <- ([#"../inc_some_list.rs" 58 20 58 34] take_some _16);
    _16 <- any borrowed (IncSomeList_List_Type.t_list);
    goto BB9
  }
  BB9 {
    [#"../inc_some_list.rs" 58 20 58 34] _12 <- Borrow.borrow_final ( * _15) (Borrow.get_id _15);
    [#"../inc_some_list.rs" 58 20 58 34] _15 <- { _15 with current = ( ^ _12) ; };
    assume { resolve0 _15 };
    goto BB10
  }
  BB10 {
    [#"../inc_some_list.rs" 55 16 59 17] _9 <- Borrow.borrow_final ( * _12) (Borrow.get_id _12);
    [#"../inc_some_list.rs" 55 16 59 17] _12 <- { _12 with current = ( ^ _9) ; };
    [#"../inc_some_list.rs" 55 16 59 17] _5 <- Borrow.borrow_final ( * _9) (Borrow.get_id _9);
    [#"../inc_some_list.rs" 55 16 59 17] _9 <- { _9 with current = ( ^ _5) ; };
    assume { resolve0 _12 };
    assume { resolve0 _9 };
    assume { resolve1 ml };
    assume { resolve0 ma };
    [#"../inc_some_list.rs" 52 8 62 9] _2 <- Borrow.borrow_final ( * _5) (Borrow.get_id _5);
    [#"../inc_some_list.rs" 52 8 62 9] _5 <- { _5 with current = ( ^ _2) ; };
    [#"../inc_some_list.rs" 52 8 62 9] _0 <- Borrow.borrow_final ( * _2) (Borrow.get_id _2);
    [#"../inc_some_list.rs" 52 8 62 9] _2 <- { _2 with current = ( ^ _0) ; };
    assume { resolve0 _5 };
    assume { resolve0 _2 };
    assume { resolve2 self };
    return _0
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB11
  }
  
end
module IncSomeList_IncSomeList
  use prelude.UInt32
  use prelude.Int
  use IncSomeList_List_Type as IncSomeList_List_Type
  function sum0 [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int =
    [#"../inc_some_list.rs" 23 12 26 13] match self with
      | IncSomeList_List_Type.C_Cons a l -> UInt32.to_int a + sum0 l
      | IncSomeList_List_Type.C_Nil -> 0
      end
  val sum0 [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int
    ensures { result = sum0 self }
    
  use prelude.Borrow
  use prelude.UInt32
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  function shallow_model1 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 97 8 97 31] UInt32.to_int ( * self)
  val shallow_model1 (self : borrowed uint32) : int
    ensures { result = shallow_model1 self }
    
  val take_some0 [#"../inc_some_list.rs" 51 4 51 39] (self : borrowed (IncSomeList_List_Type.t_list)) : borrowed uint32
    ensures { [#"../inc_some_list.rs" 49 14 49 64] sum0 ( ^ self) - sum0 ( * self) = UInt32.to_int ( ^ result) - shallow_model1 result }
    ensures { [#"../inc_some_list.rs" 50 14 50 35] shallow_model1 result <= sum0 ( * self) }
    
  val sum_x0 [#"../inc_some_list.rs" 42 4 42 26] (self : IncSomeList_List_Type.t_list) : uint32
    requires {[#"../inc_some_list.rs" 40 15 40 38] sum0 self <= 1000000}
    ensures { [#"../inc_some_list.rs" 41 14 41 35] UInt32.to_int result = sum0 self }
    
  let rec cfg inc_some_list [#"../inc_some_list.rs" 67 0 67 41] [@cfg:stackify] [@cfg:subregion_analysis] (l : IncSomeList_List_Type.t_list) (k : uint32) : ()
    requires {[#"../inc_some_list.rs" 66 11 66 36] sum0 l + UInt32.to_int k <= 1000000}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l : IncSomeList_List_Type.t_list = l;
  var k : uint32 = k;
  var sum0 : uint32;
  var ma : borrowed uint32;
  var _7 : borrowed (IncSomeList_List_Type.t_list);
  var _10 : bool;
  var _11 : uint32;
  var _13 : uint32;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    [#"../inc_some_list.rs" 68 15 68 24] sum0 <- ([#"../inc_some_list.rs" 68 15 68 24] sum_x0 l);
    goto BB2
  }
  BB2 {
    [#"../inc_some_list.rs" 69 13 69 14] _7 <- Borrow.borrow_mut l;
    [#"../inc_some_list.rs" 69 13 69 14] l <-  ^ _7;
    [#"../inc_some_list.rs" 69 13 69 26] ma <- ([#"../inc_some_list.rs" 69 13 69 26] take_some0 _7);
    _7 <- any borrowed (IncSomeList_List_Type.t_list);
    goto BB3
  }
  BB3 {
    [#"../inc_some_list.rs" 70 4 70 12] ma <- { ma with current = ( * ma + k) ; };
    assume { resolve0 ma };
    [#"../inc_some_list.rs" 71 12 71 21] _11 <- ([#"../inc_some_list.rs" 71 12 71 21] sum_x0 l);
    goto BB4
  }
  BB4 {
    [#"../inc_some_list.rs" 71 25 71 33] _13 <- sum0 + k;
    [#"../inc_some_list.rs" 71 12 71 33] _10 <- _11 = _13;
    _11 <- any uint32;
    _13 <- any uint32;
    switch (_10)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    [#"../inc_some_list.rs" 67 42 72 1] _0 <- ([#"../inc_some_list.rs" 67 42 72 1] ());
    goto BB7
  }
  BB6 {
    assert { [#"../inc_some_list.rs" 71 4 71 34] false };
    absurd
  }
  BB7 {
    return _0
  }
  
end
module IncSomeList_Impl1
  
end
