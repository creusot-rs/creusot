
module IncMax3_Swap_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  val swap [#"../inc_max_3.rs" 6 0 6 67] (mma : borrowed (borrowed uint32)) (mmb : borrowed (borrowed uint32)) : ()
    ensures { [#"../inc_max_3.rs" 5 10 5 38]  ^ mma =  * mmb /\  ^ mmb =  * mma }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module IncMax3_IncMax3_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  val inc_max_3 [#"../inc_max_3.rs" 12 0 12 79] (ma : borrowed uint32) (mb : borrowed uint32) (mc : borrowed uint32) : ()
    requires {[#"../inc_max_3.rs" 10 11 10 76]  * ma <= (1000000 : uint32) /\  * mb <= (1000000 : uint32) /\  * mc <= (1000000 : uint32)}
    ensures { [#"../inc_max_3.rs" 11 10 11 48]  ^ ma <>  ^ mb /\  ^ mb <>  ^ mc /\  ^ mc <>  ^ ma }
    
end
module IncMax3_IncMax3
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = borrowed uint32
  clone IncMax3_Swap_Interface as Swap0
  let rec cfg inc_max_3 [#"../inc_max_3.rs" 12 0 12 79] [@cfg:stackify] [@cfg:subregion_analysis] (ma : borrowed uint32) (mb : borrowed uint32) (mc : borrowed uint32) : ()
    requires {[#"../inc_max_3.rs" 10 11 10 76]  * ma <= (1000000 : uint32) /\  * mb <= (1000000 : uint32) /\  * mc <= (1000000 : uint32)}
    ensures { [#"../inc_max_3.rs" 11 10 11 48]  ^ ma <>  ^ mb /\  ^ mb <>  ^ mc /\  ^ mc <>  ^ ma }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var ma : borrowed uint32 = ma;
  var mb : borrowed uint32 = mb;
  var mc : borrowed uint32 = mc;
  var _6 : ();
  var _10 : ();
  var _11 : borrowed (borrowed uint32);
  var _12 : borrowed (borrowed uint32);
  var _13 : borrowed (borrowed uint32);
  var _14 : borrowed (borrowed uint32);
  var _15 : ();
  var _19 : ();
  var _20 : borrowed (borrowed uint32);
  var _21 : borrowed (borrowed uint32);
  var _22 : borrowed (borrowed uint32);
  var _23 : borrowed (borrowed uint32);
  var _24 : ();
  var _28 : ();
  var _29 : borrowed (borrowed uint32);
  var _30 : borrowed (borrowed uint32);
  var _31 : borrowed (borrowed uint32);
  var _32 : borrowed (borrowed uint32);
  {
    goto BB0
  }
  BB0 {
    switch ([#"../inc_max_3.rs" 13 7 13 16]  * ma <  * mb)
      | False -> goto BB3
      | True -> goto BB1
      end
  }
  BB1 {
    _12 <- Borrow.borrow_mut ma;
    ma <-  ^ _12;
    _11 <- Borrow.borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    _14 <- Borrow.borrow_mut mb;
    mb <-  ^ _14;
    _13 <- Borrow.borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _10 <- ([#"../inc_max_3.rs" 14 8 14 30] Swap0.swap _11 _13);
    _11 <- any borrowed (borrowed uint32);
    _13 <- any borrowed (borrowed uint32);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _14 };
    assume { Resolve0.resolve _12 };
    _6 <- ([#"../inc_max_3.rs" 13 17 15 5] ());
    goto BB4
  }
  BB3 {
    _6 <- ([#"../inc_max_3.rs" 15 5 15 5] ());
    goto BB4
  }
  BB4 {
    switch ([#"../inc_max_3.rs" 16 7 16 16]  * mb <  * mc)
      | False -> goto BB7
      | True -> goto BB5
      end
  }
  BB5 {
    _21 <- Borrow.borrow_mut mb;
    mb <-  ^ _21;
    _20 <- Borrow.borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    _23 <- Borrow.borrow_mut mc;
    mc <-  ^ _23;
    _22 <- Borrow.borrow_mut ( * _23);
    _23 <- { _23 with current = ( ^ _22) };
    _19 <- ([#"../inc_max_3.rs" 17 8 17 30] Swap0.swap _20 _22);
    _20 <- any borrowed (borrowed uint32);
    _22 <- any borrowed (borrowed uint32);
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve _23 };
    assume { Resolve0.resolve _21 };
    assume { Resolve1.resolve mc };
    _15 <- ([#"../inc_max_3.rs" 16 17 18 5] ());
    goto BB8
  }
  BB7 {
    assume { Resolve1.resolve mc };
    _15 <- ([#"../inc_max_3.rs" 18 5 18 5] ());
    goto BB8
  }
  BB8 {
    switch ([#"../inc_max_3.rs" 19 7 19 16]  * ma <  * mb)
      | False -> goto BB11
      | True -> goto BB9
      end
  }
  BB9 {
    _30 <- Borrow.borrow_mut ma;
    ma <-  ^ _30;
    _29 <- Borrow.borrow_mut ( * _30);
    _30 <- { _30 with current = ( ^ _29) };
    _32 <- Borrow.borrow_mut mb;
    mb <-  ^ _32;
    _31 <- Borrow.borrow_mut ( * _32);
    _32 <- { _32 with current = ( ^ _31) };
    _28 <- ([#"../inc_max_3.rs" 20 8 20 30] Swap0.swap _29 _31);
    _29 <- any borrowed (borrowed uint32);
    _31 <- any borrowed (borrowed uint32);
    goto BB10
  }
  BB10 {
    assume { Resolve0.resolve _32 };
    assume { Resolve0.resolve _30 };
    _24 <- ([#"../inc_max_3.rs" 19 17 21 5] ());
    goto BB12
  }
  BB11 {
    _24 <- ([#"../inc_max_3.rs" 21 5 21 5] ());
    goto BB12
  }
  BB12 {
    ma <- { ma with current = ([#"../inc_max_3.rs" 22 4 22 12]  * ma + ([#"../inc_max_3.rs" 22 11 22 12] [#"../inc_max_3.rs" 22 11 22 12] (2 : uint32))) };
    assume { Resolve1.resolve ma };
    mb <- { mb with current = ([#"../inc_max_3.rs" 23 4 23 12]  * mb + ([#"../inc_max_3.rs" 23 11 23 12] [#"../inc_max_3.rs" 23 11 23 12] (1 : uint32))) };
    assume { Resolve1.resolve mb };
    _0 <- ([#"../inc_max_3.rs" 12 80 24 1] ());
    return _0
  }
  
end
module IncMax3_TestIncMax3_Interface
  use prelude.Int
  use prelude.UInt32
  val test_inc_max_3 [#"../inc_max_3.rs" 27 0 27 57] (a : uint32) (b : uint32) (c : uint32) : ()
    requires {[#"../inc_max_3.rs" 26 11 26 70] a <= (1000000 : uint32) /\ b <= (1000000 : uint32) /\ c <= (1000000 : uint32)}
    
end
module IncMax3_TestIncMax3
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  clone IncMax3_IncMax3_Interface as IncMax30
  let rec cfg test_inc_max_3 [#"../inc_max_3.rs" 27 0 27 57] [@cfg:stackify] [@cfg:subregion_analysis] (a : uint32) (b : uint32) (c : uint32) : ()
    requires {[#"../inc_max_3.rs" 26 11 26 70] a <= (1000000 : uint32) /\ b <= (1000000 : uint32) /\ c <= (1000000 : uint32)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : uint32 = a;
  var b : uint32 = b;
  var c : uint32 = c;
  var _5 : ();
  var _6 : borrowed uint32;
  var _7 : borrowed uint32;
  var _8 : borrowed uint32;
  var _9 : borrowed uint32;
  var _10 : borrowed uint32;
  var _11 : borrowed uint32;
  var _14 : bool;
  var _15 : bool;
  {
    goto BB0
  }
  BB0 {
    _7 <- Borrow.borrow_mut a;
    a <-  ^ _7;
    _6 <- Borrow.borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _9 <- Borrow.borrow_mut b;
    b <-  ^ _9;
    _8 <- Borrow.borrow_mut ( * _9);
    _9 <- { _9 with current = ( ^ _8) };
    _11 <- Borrow.borrow_mut c;
    c <-  ^ _11;
    _10 <- Borrow.borrow_mut ( * _11);
    _11 <- { _11 with current = ( ^ _10) };
    _5 <- ([#"../inc_max_3.rs" 28 4 28 37] IncMax30.inc_max_3 _6 _8 _10);
    _6 <- any borrowed uint32;
    _8 <- any borrowed uint32;
    _10 <- any borrowed uint32;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _11 };
    assume { Resolve0.resolve _9 };
    assume { Resolve0.resolve _7 };
    switch ([#"../inc_max_3.rs" 29 12 29 18] a <> b)
      | False -> goto BB5
      | True -> goto BB6
      end
  }
  BB2 {
    _14 <- ([#"../inc_max_3.rs" 29 12 29 38] [#"../inc_max_3.rs" 29 12 29 38] false);
    goto BB4
  }
  BB3 {
    _14 <- ([#"../inc_max_3.rs" 29 32 29 38] c <> a);
    goto BB4
  }
  BB4 {
    switch ([#"../inc_max_3.rs" 29 4 29 39] not _14)
      | False -> goto BB9
      | True -> goto BB8
      end
  }
  BB5 {
    _15 <- ([#"../inc_max_3.rs" 29 12 29 28] [#"../inc_max_3.rs" 29 12 29 28] false);
    goto BB7
  }
  BB6 {
    _15 <- ([#"../inc_max_3.rs" 29 22 29 28] b <> c);
    goto BB7
  }
  BB7 {
    switch (_15)
      | False -> goto BB2
      | True -> goto BB3
      end
  }
  BB8 {
    absurd
  }
  BB9 {
    _0 <- ([#"../inc_max_3.rs" 27 58 30 1] ());
    return _0
  }
  
end
