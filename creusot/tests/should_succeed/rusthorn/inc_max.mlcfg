
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module IncMax_TakeMax_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  val take_max [#"../inc_max.rs" 6 0 6 64] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max.rs" 4 0 5 56] if  * ma >=  * mb then
       * mb =  ^ mb /\ result = ma
    else
       * ma =  ^ ma /\ result = mb
     }
    
end
module IncMax_TakeMax
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  let rec cfg take_max [#"../inc_max.rs" 6 0 6 64] [@cfg:stackify] [@cfg:subregion_analysis] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max.rs" 4 0 5 56] if  * ma >=  * mb then
       * mb =  ^ mb /\ result = ma
    else
       * ma =  ^ ma /\ result = mb
     }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var ma : borrowed uint32 = ma;
  var mb : borrowed uint32 = mb;
  var _5 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    switch ([#"../inc_max.rs" 7 7 7 17]  * ma >=  * mb)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve mb };
    _5 <- ma;
    ma <- any borrowed uint32;
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve ma };
    _5 <- mb;
    mb <- any borrowed uint32;
    goto BB3
  }
  BB3 {
    _0 <- _5;
    _5 <- any borrowed uint32;
    return _0
  }
  
end
module IncMax_IncMax_Interface
  use prelude.Int
  use prelude.UInt32
  val inc_max [#"../inc_max.rs" 15 0 15 38] (a : uint32) (b : uint32) : ()
    requires {[#"../inc_max.rs" 14 11 14 49] a <= (1000000 : uint32) /\ b <= (1000000 : uint32)}
    
end
module IncMax_IncMax
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  clone IncMax_TakeMax_Interface as TakeMax0
  let rec cfg inc_max [#"../inc_max.rs" 15 0 15 38] [@cfg:stackify] [@cfg:subregion_analysis] (a : uint32) (b : uint32) : ()
    requires {[#"../inc_max.rs" 14 11 14 49] a <= (1000000 : uint32) /\ b <= (1000000 : uint32)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : uint32 = a;
  var b : uint32 = b;
  var mc : borrowed uint32;
  var _6 : borrowed uint32;
  var _8 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    _6 <- Borrow.borrow_mut a;
    a <-  ^ _6;
    _8 <- Borrow.borrow_mut b;
    b <-  ^ _8;
    mc <- ([#"../inc_max.rs" 16 13 16 37] TakeMax0.take_max _6 _8);
    _6 <- any borrowed uint32;
    _8 <- any borrowed uint32;
    goto BB1
  }
  BB1 {
    mc <- { mc with current = ([#"../inc_max.rs" 17 4 17 12]  * mc + ([#"../inc_max.rs" 17 11 17 12] (1 : uint32))) };
    assume { Resolve0.resolve mc };
    switch (not ([#"../inc_max.rs" 18 12 18 18] a <> b))
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- ();
    return _0
  }
  
end
