module M_inc_max__take_max [#"inc_max.rs" 6 0 6 64]
  let%span sinc_max0 = "inc_max.rs" 4 0 5 56
  let%span sresolve1 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sord2 = "../../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord3 = "../../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord4 = "../../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord5 = "../../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord6 = "../../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord7 = "../../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord8 = "../../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord9 = "../../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord10 = "../../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord11 = "../../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord12 = "../../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord13 = "../../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord14 = "../../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span sord15 = "../../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  predicate resolve'1 (self : borrowed UInt32.t) =
    [%#sresolve1] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed UInt32.t) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.prelude.UInt32
  
  function cmp_log'0 (self : UInt32.t) (o : UInt32.t) : t_Ordering'0 =
    [%#sord15] if UInt32.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord14] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord12] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord13] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord10] cmp_log'0 x y = C_Less'0)
   -> ([%#sord11] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt32.t) (y : UInt32.t) (z : UInt32.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt32.t, y : UInt32.t, z : UInt32.t, o : t_Ordering'0 . ([%#sord7] cmp_log'0 x y = o)
   -> ([%#sord8] cmp_log'0 y z = o)  -> ([%#sord9] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt32.t) : ()
  
  axiom refl'0_spec : forall x : UInt32.t . [%#sord6] cmp_log'0 x x = C_Equal'0
  
  use prelude.prelude.UInt32
  
  function cmp_gt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord5] UInt32.ugt x y = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.prelude.UInt32
  
  function cmp_ge_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord4] UInt32.uge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord3] UInt32.ult x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.prelude.UInt32
  
  function cmp_le_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord2] UInt32.ule x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  meta "compute_max_steps" 1000000
  
  let rec take_max'0 (ma:borrowed UInt32.t) (mb:borrowed UInt32.t) (return'  (ret:borrowed UInt32.t))= (! bb0
    [ bb0 = s0
      [ s0 = UInt32.ge {ma.current} {mb.current} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s1)
      | s1 = any [ br0 -> {_6 = false} (! bb2) | br1 -> {_6} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 mb}- s1
      | s1 = Borrow.borrow_final <UInt32.t> {ma.current} {Borrow.get_id ma}
          (fun (_ret':borrowed UInt32.t) ->  [ &_9 <- _ret' ]  [ &ma <- { ma with current = _ret'.final } ] s2)
      | s2 = Borrow.borrow_final <UInt32.t> {_9.current} {Borrow.get_id _9}
          (fun (_ret':borrowed UInt32.t) ->  [ &_5 <- _ret' ]  [ &_9 <- { _9 with current = _ret'.final } ] s3)
      | s3 = -{resolve'0 _9}- s4
      | s4 = bb3 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 ma}- s1
      | s1 = Borrow.borrow_final <UInt32.t> {mb.current} {Borrow.get_id mb}
          (fun (_ret':borrowed UInt32.t) ->  [ &_5 <- _ret' ]  [ &mb <- { mb with current = _ret'.final } ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_final <UInt32.t> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed UInt32.t) ->  [ &_3 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final } ] s1)
      | s1 = Borrow.borrow_final <UInt32.t> {_3.current} {Borrow.get_id _3}
          (fun (_ret':borrowed UInt32.t) ->  [ &_0 <- _ret' ]  [ &_3 <- { _3 with current = _ret'.final } ] s2)
      | s2 = -{resolve'0 _5}- s3
      | s3 = -{resolve'0 _3}- s4
      | s4 = -{resolve'0 mb}- s5
      | s5 = -{resolve'0 ma}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed UInt32.t = any_l ()
    | & ma : borrowed UInt32.t = ma
    | & mb : borrowed UInt32.t = mb
    | & _3 : borrowed UInt32.t = any_l ()
    | & _5 : borrowed UInt32.t = any_l ()
    | & _6 : bool = any_l ()
    | & _9 : borrowed UInt32.t = any_l () ]
    
    [ return' (result:borrowed UInt32.t)-> {[@expl:take_max ensures] [%#sinc_max0] if UInt32.uge ma.current mb.current then
        mb.current = mb.final /\ result = ma
      else
        ma.current = ma.final /\ result = mb
      }
      (! return' {result}) ]
    
end
module M_inc_max__inc_max [#"inc_max.rs" 15 0 15 38]
  let%span sinc_max0 = "inc_max.rs" 17 11 17 12
  let%span sinc_max1 = "inc_max.rs" 18 4 18 19
  let%span sinc_max2 = "inc_max.rs" 14 11 14 49
  let%span sinc_max3 = "inc_max.rs" 4 0 5 56
  let%span sresolve4 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sord5 = "../../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord6 = "../../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord7 = "../../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord8 = "../../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord9 = "../../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord10 = "../../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord11 = "../../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord12 = "../../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord13 = "../../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord14 = "../../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord15 = "../../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord16 = "../../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord17 = "../../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span sord18 = "../../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.prelude.UInt32
  
  function cmp_log'0 (self : UInt32.t) (o : UInt32.t) : t_Ordering'0 =
    [%#sord18] if UInt32.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord17] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord15] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord16] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord13] cmp_log'0 x y = C_Less'0)
   -> ([%#sord14] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt32.t) (y : UInt32.t) (z : UInt32.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt32.t, y : UInt32.t, z : UInt32.t, o : t_Ordering'0 . ([%#sord10] cmp_log'0 x y
  = o)  -> ([%#sord11] cmp_log'0 y z = o)  -> ([%#sord12] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt32.t) : ()
  
  axiom refl'0_spec : forall x : UInt32.t . [%#sord9] cmp_log'0 x x = C_Equal'0
  
  use prelude.prelude.UInt32
  
  function cmp_gt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord8] UInt32.ugt x y = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.prelude.UInt32
  
  function cmp_ge_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord7] UInt32.uge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord6] UInt32.ult x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.prelude.UInt32
  
  function cmp_le_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord5] UInt32.ule x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  let rec take_max'0 (ma:borrowed UInt32.t) (mb:borrowed UInt32.t) (return'  (ret:borrowed UInt32.t))= any
    [ return' (result:borrowed UInt32.t)-> {[%#sinc_max3] if UInt32.uge ma.current mb.current then
        mb.current = mb.final /\ result = ma
      else
        ma.current = ma.final /\ result = mb
      }
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed UInt32.t) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed UInt32.t) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec inc_max'0 (a:UInt32.t) (b:UInt32.t) (return'  (ret:()))= {[@expl:inc_max requires] [%#sinc_max2] UInt32.ule a (1000000 : UInt32.t)
    /\ UInt32.ule b (1000000 : UInt32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <UInt32.t> {a}
          (fun (_ret':borrowed UInt32.t) ->  [ &_6 <- _ret' ]  [ &a <- _ret'.final ] s1)
      | s1 = Borrow.borrow_final <UInt32.t> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed UInt32.t) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final } ] s2)
      | s2 = Borrow.borrow_mut <UInt32.t> {b}
          (fun (_ret':borrowed UInt32.t) ->  [ &_8 <- _ret' ]  [ &b <- _ret'.final ] s3)
      | s3 = Borrow.borrow_final <UInt32.t> {_8.current} {Borrow.get_id _8}
          (fun (_ret':borrowed UInt32.t) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = _ret'.final } ] s4)
      | s4 = take_max'0 {_5} {_7} (fun (_ret':borrowed UInt32.t) ->  [ &mc <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = -{resolve'0 _6}- s2
      | s2 = UInt32.add {mc.current} {[%#sinc_max0] (1 : UInt32.t)}
          (fun (_ret':UInt32.t) ->  [ &mc <- { mc with current = _ret' } ] s3)
      | s3 = -{resolve'0 mc}- s4
      | s4 = UInt32.ne {a} {b} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s5)
      | s5 = any [ br0 -> {_10 = false} (! bb3) | br1 -> {_10} (! bb2) ]  ]
      
    | bb2 = return' {_0}
    | bb3 = {[%#sinc_max1] false} any ]
    )
    [ & _0 : () = any_l ()
    | & a : UInt32.t = a
    | & b : UInt32.t = b
    | & mc : borrowed UInt32.t = any_l ()
    | & _5 : borrowed UInt32.t = any_l ()
    | & _6 : borrowed UInt32.t = any_l ()
    | & _7 : borrowed UInt32.t = any_l ()
    | & _8 : borrowed UInt32.t = any_l ()
    | & _10 : bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
