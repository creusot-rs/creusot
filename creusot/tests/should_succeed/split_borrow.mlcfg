
module SplitBorrow_Z_Interface
  val z [@cfg:stackify] [#"../split_borrow.rs" 5 0 5 14] (_1' : ()) : bool
end
module SplitBorrow_Z
  let rec cfg z [@cfg:stackify] [#"../split_borrow.rs" 5 0 5 14] (_1' : ()) : bool = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../split_borrow.rs" 6 4 6 8] true);
    return _0
  }
  
end
module SplitBorrow_MyInt_Type
  use mach.int.Int
  use prelude.UIntSize
  type t_myint  =
    | C_MyInt usize
    
  let function myint_0 (self : t_myint) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MyInt a -> a
      end
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module SplitBorrow_F_Interface
  val f [@cfg:stackify] [#"../split_borrow.rs" 9 0 9 10] (_1' : ()) : ()
end
module SplitBorrow_F
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use SplitBorrow_MyInt_Type as SplitBorrow_MyInt_Type
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve2 with
    type t = SplitBorrow_MyInt_Type.t_myint
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)
  clone SplitBorrow_Z_Interface as Z0
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = SplitBorrow_MyInt_Type.t_myint,
    type t2 = SplitBorrow_MyInt_Type.t_myint,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Resolve1.resolve = Resolve2.resolve
  let rec cfg f [@cfg:stackify] [#"../split_borrow.rs" 9 0 9 10] (_1' : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint);
  var _2 : SplitBorrow_MyInt_Type.t_myint;
  var _3 : SplitBorrow_MyInt_Type.t_myint;
  var y_4 : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint);
  var _5 : ();
  var _6 : bool;
  var _7 : SplitBorrow_MyInt_Type.t_myint;
  var _8 : SplitBorrow_MyInt_Type.t_myint;
  var _9 : usize;
  {
    goto BB0
  }
  BB0 {
    _2 <- SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 10 23 10 24] (1 : usize));
    _3 <- SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 10 33 10 34] (2 : usize));
    x_1 <- (_2, _3);
    y_4 <- borrow_mut x_1;
    x_1 <-  ^ y_4;
    assume { Resolve0.resolve x_1 };
    _6 <- ([#"../split_borrow.rs" 13 7 13 10] Z0.z ());
    goto BB1
  }
  BB1 {
    switch (_6)
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    _7 <- SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 14 23 14 24] (4 : usize));
    y_4 <- { y_4 with current = (let (a, b) =  * y_4 in (a, _7)) };
    _7 <- any SplitBorrow_MyInt_Type.t_myint;
    _5 <- ();
    goto BB4
  }
  BB3 {
    _8 <- SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 16 23 16 25] (10 : usize));
    y_4 <- { y_4 with current = (let (a, b) =  * y_4 in (_8, b)) };
    _8 <- any SplitBorrow_MyInt_Type.t_myint;
    _5 <- ();
    goto BB4
  }
  BB4 {
    _9 <- SplitBorrow_MyInt_Type.myint_0 (let (a, _) =  * y_4 in a);
    assume { Resolve1.resolve y_4 };
    _0 <- ();
    return _0
  }
  
end
