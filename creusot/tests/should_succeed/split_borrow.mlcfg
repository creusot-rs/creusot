
module SplitBorrow_Z_Interface
  val z [#"../split_borrow.rs" 5 0 5 14] (_1 : ()) : bool
end
module SplitBorrow_Z
  let rec cfg z [#"../split_borrow.rs" 5 0 5 14] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../split_borrow.rs" 6 4 6 8] true);
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module SplitBorrow_MyInt_Type
  use prelude.Int
  use prelude.UIntSize
  type t_myint  =
    | C_MyInt usize
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module SplitBorrow_F_Interface
  val f [#"../split_borrow.rs" 9 0 9 10] (_1 : ()) : ()
end
module SplitBorrow_F
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use SplitBorrow_MyInt_Type as SplitBorrow_MyInt_Type
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve2 with
    type t = SplitBorrow_MyInt_Type.t_myint
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve1 with
    type t1 = SplitBorrow_MyInt_Type.t_myint,
    type t2 = SplitBorrow_MyInt_Type.t_myint,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Resolve1.resolve = Resolve2.resolve
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)
  clone SplitBorrow_Z_Interface as Z0
  let rec cfg f [#"../split_borrow.rs" 9 0 9 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint);
  var y : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint);
  var _5 : ();
  {
    goto BB0
  }
  BB0 {
    x <- (SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 10 23 10 24] (1 : usize)), SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 10 33 10 34] (2 : usize)));
    y <- borrow_mut x;
    x <-  ^ y;
    goto BB1
  }
  BB1 {
    switch ([#"../split_borrow.rs" 13 7 13 10] Z0.z ())
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    y <- { y with current = (let (a, b) =  * y in (a, SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 14 23 14 24] (4 : usize)))) };
    _5 <- ();
    goto BB4
  }
  BB3 {
    y <- { y with current = (let (a, b) =  * y in (SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 16 23 16 25] (10 : usize)), b)) };
    _5 <- ();
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve y };
    assume { Resolve1.resolve x };
    _0 <- ();
    return _0
  }
  
end
module SplitBorrow_G_Interface
  val g [#"../split_borrow.rs" 23 0 23 10] (_1 : ()) : ()
end
module SplitBorrow_G
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use SplitBorrow_MyInt_Type as SplitBorrow_MyInt_Type
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve3 with
    type t = SplitBorrow_MyInt_Type.t_myint
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve2 with
    type t1 = SplitBorrow_MyInt_Type.t_myint,
    type t2 = SplitBorrow_MyInt_Type.t_myint,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = SplitBorrow_MyInt_Type.t_myint
  let rec cfg g [#"../split_borrow.rs" 23 0 23 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint);
  var x : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint);
  var _z : borrowed (SplitBorrow_MyInt_Type.t_myint);
  {
    goto BB0
  }
  BB0 {
    a <- (SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 24 23 24 24] (1 : usize)), SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 24 33 24 34] (2 : usize)));
    x <- borrow_mut a;
    a <-  ^ x;
    _z <- borrow_mut (let (_, a) =  * x in a);
    x <- { x with current = (let (a, b) =  * x in (a,  ^ _z)) };
    assume { Resolve0.resolve _z };
    x <- { x with current = (let (a, b) =  * x in (SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 29 19 29 20] (3 : usize)), b)) };
    assume { Resolve1.resolve x };
    assume { Resolve2.resolve a };
    _0 <- ();
    return _0
  }
  
end
