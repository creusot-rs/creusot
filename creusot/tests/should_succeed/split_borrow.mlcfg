
module SplitBorrow_Z
  let rec cfg z [#"../split_borrow.rs" 5 0 5 14] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../split_borrow.rs" 6 4 6 8] _0 <- ([#"../split_borrow.rs" 6 4 6 8] [#"../split_borrow.rs" 6 4 6 8] true);
    return _0
  }
  
end
module SplitBorrow_MyInt_Type
  use prelude.UIntSize
  use prelude.Int
  type t_myint  =
    | C_MyInt usize
    
end
module SplitBorrow_F
  use prelude.Borrow
  use SplitBorrow_MyInt_Type as SplitBorrow_MyInt_Type
  predicate resolve2 (self : SplitBorrow_MyInt_Type.t_myint) =
    [#"../../../../creusot-contracts/src/resolve.rs" 45 8 45 12] true
  val resolve2 (self : SplitBorrow_MyInt_Type.t_myint) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] resolve2 (let (a, _) = self in a) /\ resolve2 (let (_, a) = self in a)
  val resolve1 (self : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) : bool
    ensures { result = resolve0 self }
    
  val z0 [#"../split_borrow.rs" 5 0 5 14] (_1 : ()) : bool
  use prelude.UIntSize
  use prelude.Int
  let rec cfg f [#"../split_borrow.rs" 9 0 9 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint);
  var y : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint);
  var _5 : ();
  var _6 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../split_borrow.rs" 10 16 10 36] x <- ([#"../split_borrow.rs" 10 16 10 36] (([#"../split_borrow.rs" 10 17 10 25] SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 10 23 10 24] [#"../split_borrow.rs" 10 23 10 24] (1 : usize))), ([#"../split_borrow.rs" 10 27 10 35] SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 10 33 10 34] [#"../split_borrow.rs" 10 33 10 34] (2 : usize)))));
    [#"../split_borrow.rs" 11 12 11 18] y <- Borrow.borrow_mut x;
    [#"../split_borrow.rs" 11 12 11 18] x <-  ^ y;
    [#"../split_borrow.rs" 13 7 13 10] _6 <- ([#"../split_borrow.rs" 13 7 13 10] z0 ());
    goto BB1
  }
  BB1 {
    switch (_6)
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    [#"../split_borrow.rs" 14 8 14 25] y <- { y with current = (let (x0, x1) =  * y in (x0, ([#"../split_borrow.rs" 14 17 14 25] SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 14 23 14 24] [#"../split_borrow.rs" 14 23 14 24] (4 : usize))))) };
    [#"../split_borrow.rs" 13 11 15 5] _5 <- ([#"../split_borrow.rs" 13 11 15 5] ());
    goto BB4
  }
  BB3 {
    [#"../split_borrow.rs" 16 8 16 26] y <- { y with current = (let (x0, x1) =  * y in (([#"../split_borrow.rs" 16 17 16 26] SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 16 23 16 25] [#"../split_borrow.rs" 16 23 16 25] (10 : usize))), x1)) };
    [#"../split_borrow.rs" 15 11 17 5] _5 <- ([#"../split_borrow.rs" 15 11 17 5] ());
    goto BB4
  }
  BB4 {
    assume { resolve0 y };
    assume { resolve1 x };
    [#"../split_borrow.rs" 9 11 21 1] _0 <- ([#"../split_borrow.rs" 9 11 21 1] ());
    return _0
  }
  
end
module SplitBorrow_G
  use prelude.Borrow
  use SplitBorrow_MyInt_Type as SplitBorrow_MyInt_Type
  predicate resolve3 (self : SplitBorrow_MyInt_Type.t_myint) =
    [#"../../../../creusot-contracts/src/resolve.rs" 45 8 45 12] true
  val resolve3 (self : SplitBorrow_MyInt_Type.t_myint) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] resolve3 (let (a, _) = self in a) /\ resolve3 (let (_, a) = self in a)
  val resolve2 (self : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed (SplitBorrow_MyInt_Type.t_myint)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (SplitBorrow_MyInt_Type.t_myint)) : bool
    ensures { result = resolve0 self }
    
  use prelude.UIntSize
  use prelude.Int
  let rec cfg g [#"../split_borrow.rs" 23 0 23 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint);
  var x : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint);
  var _z : borrowed (SplitBorrow_MyInt_Type.t_myint);
  {
    goto BB0
  }
  BB0 {
    [#"../split_borrow.rs" 24 16 24 36] a <- ([#"../split_borrow.rs" 24 16 24 36] (([#"../split_borrow.rs" 24 17 24 25] SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 24 23 24 24] [#"../split_borrow.rs" 24 23 24 24] (1 : usize))), ([#"../split_borrow.rs" 24 27 24 35] SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 24 33 24 34] [#"../split_borrow.rs" 24 33 24 34] (2 : usize)))));
    [#"../split_borrow.rs" 25 12 25 18] x <- Borrow.borrow_mut a;
    [#"../split_borrow.rs" 25 12 25 18] a <-  ^ x;
    [#"../split_borrow.rs" 27 13 27 21] _z <- Borrow.borrow_mut (let (_, a) =  * x in a);
    [#"../split_borrow.rs" 27 13 27 21] x <- { x with current = (let (x0, x1) =  * x in (x0,  ^ _z)) };
    assume { resolve0 _z };
    [#"../split_borrow.rs" 29 4 29 21] x <- { x with current = (let (x0, x1) =  * x in (([#"../split_borrow.rs" 29 13 29 21] SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 29 19 29 20] [#"../split_borrow.rs" 29 19 29 20] (3 : usize))), x1)) };
    assume { resolve1 x };
    assume { resolve2 a };
    [#"../split_borrow.rs" 23 11 32 1] _0 <- ([#"../split_borrow.rs" 23 11 32 1] ());
    return _0
  }
  
end
