module M_ghost_set__ghost_map [#"ghost_set.rs" 4 0 4 18]
  let%span sghost_set0 = "ghost_set.rs" 5 18 5 36
  let%span sfset1 = "../../../../creusot-contracts/src/logic/fset.rs" 196 4 196 34
  let%span sfset2 = "../../../../creusot-contracts/src/logic/fset.rs" 194 14 194 31
  let%span sghost_set3 = "ghost_set.rs" 7 22 7 53
  let%span sghost_set4 = "ghost_set.rs" 8 25 8 26
  let%span sghost_set5 = "ghost_set.rs" 10 22 10 63
  let%span sghost_set6 = "ghost_set.rs" 11 22 11 34
  let%span sghost_set7 = "ghost_set.rs" 12 28 12 29
  let%span sghost_set8 = "ghost_set.rs" 12 31 12 32
  let%span sghost_set9 = "ghost_set.rs" 12 34 12 35
  let%span sghost_set10 = "ghost_set.rs" 14 45 14 46
  let%span sghost_set11 = "ghost_set.rs" 15 46 15 47
  let%span sghost_set12 = "ghost_set.rs" 17 22 17 54
  let%span sghost_set13 = "ghost_set.rs" 18 22 18 34
  let%span sghost_set14 = "ghost_set.rs" 19 22 19 62
  let%span sghost_set15 = "ghost_set.rs" 24 22 24 69
  let%span sghost_set16 = "ghost_set.rs" 25 22 25 41
  let%span sghost_set17 = "ghost_set.rs" 26 22 26 36
  let%span sghost_set18 = "ghost_set.rs" 31 22 31 31
  let%span sghost_set19 = "ghost_set.rs" 32 22 32 32
  let%span sghost_set20 = "ghost_set.rs" 33 22 33 32
  let%span sghost21 = "../../../../creusot-contracts/src/ghost.rs" 217 9 217 15
  let%span sfset22 = "../../../../creusot-contracts/src/logic/fset.rs" 46 8 46 26
  let%span sghost23 = "../../../../creusot-contracts/src/ghost.rs" 85 22 85 26
  let%span sghost24 = "../../../../creusot-contracts/src/ghost.rs" 85 4 85 48
  let%span sghost25 = "../../../../creusot-contracts/src/ghost.rs" 84 14 84 36
  let%span sfset26 = "../../../../creusot-contracts/src/logic/fset.rs" 277 29 277 33
  let%span sfset27 = "../../../../creusot-contracts/src/logic/fset.rs" 277 35 277 40
  let%span sfset28 = "../../../../creusot-contracts/src/logic/fset.rs" 275 14 275 44
  let%span sfset29 = "../../../../creusot-contracts/src/logic/fset.rs" 276 14 276 48
  let%span sghost30 = "../../../../creusot-contracts/src/ghost.rs" 69 14 69 18
  let%span sghost31 = "../../../../creusot-contracts/src/ghost.rs" 69 4 69 36
  let%span sghost32 = "../../../../creusot-contracts/src/ghost.rs" 68 14 68 35
  let%span sfset33 = "../../../../creusot-contracts/src/logic/fset.rs" 222 22 222 26
  let%span sfset34 = "../../../../creusot-contracts/src/logic/fset.rs" 221 14 221 34
  let%span sfset35 = "../../../../creusot-contracts/src/logic/fset.rs" 313 29 313 33
  let%span sfset36 = "../../../../creusot-contracts/src/logic/fset.rs" 313 35 313 40
  let%span sfset37 = "../../../../creusot-contracts/src/logic/fset.rs" 311 14 311 45
  let%span sfset38 = "../../../../creusot-contracts/src/logic/fset.rs" 312 14 312 48
  let%span sfset39 = "../../../../creusot-contracts/src/logic/fset.rs" 243 27 243 31
  let%span sfset40 = "../../../../creusot-contracts/src/logic/fset.rs" 243 33 243 38
  let%span sfset41 = "../../../../creusot-contracts/src/logic/fset.rs" 242 14 242 45
  let%span sghost42 = "../../../../creusot-contracts/src/ghost.rs" 181 15 181 16
  let%span sghost43 = "../../../../creusot-contracts/src/ghost.rs" 181 4 181 28
  let%span sghost44 = "../../../../creusot-contracts/src/ghost.rs" 179 14 179 28
  let%span sfset45 = "../../../../creusot-contracts/src/logic/fset.rs" 65 8 65 26
  let%span sresolve46 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sfset47 = "../../../../creusot-contracts/src/logic/fset.rs" 92 8 92 26
  
  use prelude.prelude.Int32
  
  use set.Fset
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: Fset.fset int32 }
  
  predicate inv'0 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_GhostBox'0 [inv'0 x] . inv'0 x = true
  
  function inner_logic'0 (self : t_GhostBox'0) : Fset.fset int32 =
    [%#sghost21] self.t_GhostBox__0'0
  
  use set.Fset
  
  let rec new'0 (_1:()) (return'  (ret:t_GhostBox'0))= any
    [ return' (result:t_GhostBox'0)-> {[%#sfset1] inv'0 result}
      {[%#sfset2] Fset.is_empty (inner_logic'0 result)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Borrow
  
  use set.Fset
  
  predicate contains'0 [@inline:trivial] (self : Fset.fset int32) (e : int32) =
    [%#sfset22] Fset.mem e self
  
  predicate inv'1 (_1 : borrowed (t_GhostBox'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (t_GhostBox'0) [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : borrowed (Fset.fset int32))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (Fset.fset int32) [inv'2 x] . inv'2 x = true
  
  let rec deref_mut'0 (self:borrowed (t_GhostBox'0)) (return'  (ret:borrowed (Fset.fset int32)))= {[@expl:deref_mut 'self' type invariant] [%#sghost23] inv'1 self}
    any
    [ return' (result:borrowed (Fset.fset int32))-> {[%#sghost24] inv'2 result}
      {[%#sghost25] result
      = Borrow.borrow_logic (self.current).t_GhostBox__0'0 (self.final).t_GhostBox__0'0 (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  predicate inv'3 (_1 : int32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : int32 [inv'3 x] . inv'3 x = true
  
  use set.Fset
  
  function insert'0 [@inline:trivial] (self : Fset.fset int32) (e : int32) : Fset.fset int32 =
    [%#sfset45] Fset.add e self
  
  let rec insert_ghost'0 (self:borrowed (Fset.fset int32)) (value:int32) (return'  (ret:bool))= {[@expl:insert_ghost 'self' type invariant] [%#sfset26] inv'2 self}
    {[@expl:insert_ghost 'value' type invariant] [%#sfset27] inv'3 value}
    any
    [ return' (result:bool)-> {[%#sfset28] self.final = insert'0 self.current value}
      {[%#sfset29] result = (not contains'0 self.current value)}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (Fset.fset int32)) =
    [%#sresolve46] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Fset.fset int32)) =
    resolve'2 _1
  
  predicate inv'4 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_GhostBox'0 [inv'4 x] . inv'4 x = true
  
  predicate inv'5 (_1 : Fset.fset int32)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Fset.fset int32 [inv'5 x] . inv'5 x = true
  
  let rec deref'0 (self:t_GhostBox'0) (return'  (ret:Fset.fset int32))= {[@expl:deref 'self' type invariant] [%#sghost30] inv'4 self}
    any
    [ return' (result:Fset.fset int32)-> {[%#sghost31] inv'5 result}
      {[%#sghost32] self.t_GhostBox__0'0 = result}
      (! return' {result}) ]
    
  
  use set.Fset
  
  use prelude.prelude.Int
  
  let rec len_ghost'0 (self:Fset.fset int32) (return'  (ret:int))= {[@expl:len_ghost 'self' type invariant] [%#sfset33] inv'5 self}
    any [ return' (result:int)-> {[%#sfset34] result = Fset.cardinal self} (! return' {result}) ] 
  
  predicate inv'6 (_1 : int32)
  
  axiom inv_axiom'6 [@rewrite] : forall x : int32 [inv'6 x] . inv'6 x = true
  
  use set.Fset
  
  function remove'0 [@inline:trivial] (self : Fset.fset int32) (e : int32) : Fset.fset int32 =
    [%#sfset47] Fset.remove e self
  
  let rec remove_ghost'0 (self:borrowed (Fset.fset int32)) (value:int32) (return'  (ret:bool))= {[@expl:remove_ghost 'self' type invariant] [%#sfset35] inv'2 self}
    {[@expl:remove_ghost 'value' type invariant] [%#sfset36] inv'6 value}
    any
    [ return' (result:bool)-> {[%#sfset37] self.final = remove'0 self.current value}
      {[%#sfset38] result = contains'0 self.current value}
      (! return' {result}) ]
    
  
  let rec contains_ghost'0 (self:Fset.fset int32) (value:int32) (return'  (ret:bool))= {[@expl:contains_ghost 'self' type invariant] [%#sfset39] inv'5 self}
    {[@expl:contains_ghost 'value' type invariant] [%#sfset40] inv'6 value}
    any [ return' (result:bool)-> {[%#sfset41] result = contains'0 self value} (! return' {result}) ] 
  
  type closure0'1  =
    { field_0'0: borrowed (t_GhostBox'0) }
  
  predicate resolve'4 (self : borrowed (t_GhostBox'0)) =
    [%#sresolve46] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (t_GhostBox'0)) =
    resolve'4 _1
  
  predicate resolve'1 (_1 : closure0'1) =
    resolve'3 _1.field_0'0
  
  predicate inv'7 (_1 : ())
  
  axiom inv_axiom'7 [@rewrite] : forall x : () [inv'7 x] . inv'7 x = true
  
  type t_GhostBox'1  =
    { t_GhostBox__0'1: () }
  
  predicate inv'8 (_1 : t_GhostBox'1)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_GhostBox'1 [inv'8 x] . inv'8 x = true
  
  let rec new'1 (x:()) (return'  (ret:t_GhostBox'1))= {[@expl:new 'x' type invariant] [%#sghost42] inv'7 x}
    any
    [ return' (result:t_GhostBox'1)-> {[%#sghost43] inv'8 result}
      {[%#sghost44] result.t_GhostBox__0'1 = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec closure0'0 (_1:closure0'1) (return'  (ret:t_GhostBox'1))= bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set3] forall k : int32 . not contains'0 (inner_logic'0 (_1.field_0'0).current) k}
        s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'0).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_8 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_8} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_7 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_7.current} {Borrow.get_id _7}
          (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = _ret'.final } ] s1)
      | s1 = insert_ghost'0 {_6} {[%#sghost_set4] (1 : int32)} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 = deref'0 {(_1.field_0'0).current} (fun (_ret':Fset.fset int32) ->  [ &_11 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = len_ghost'0 {_11} (fun (_ret':int) ->  [ &length1 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set5] contains'0 (inner_logic'0 (_1.field_0'0).current) (1 : int32)
        /\ not contains'0 (inner_logic'0 (_1.field_0'0).current) (2 : int32)}
        s1
      | s1 = {[@expl:assertion] [%#sghost_set6] length1 = 1} s2
      | s2 =  [ &_20 <- (([%#sghost_set7] (1 : int32)), ([%#sghost_set8] (2 : int32)), ([%#sghost_set9] (3 : int32))) ] 
        s3
      | s3 =  [ &x1 <- let (r'0, _, _) = _20 in r'0 ] s4
      | s4 =  [ &x2 <- let (_, r'1, _) = _20 in r'1 ] s5
      | s5 =  [ &x3 <- let (_, _, r'2) = _20 in r'2 ] s6
      | s6 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'0).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_24 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s7)
      | s7 = deref_mut'0 {_24} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_23 <- _ret' ] s8)
      | s8 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_23.current} {Borrow.get_id _23}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_22 <- _ret' ] 
             [ &_23 <- { _23 with current = _ret'.final } ] 
            s1)
      | s1 = insert_ghost'0 {_22} {[%#sghost_set10] (2 : int32)} (fun (_ret':bool) ->  [ &inserted_true <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'0 _23}- s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'0).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_28 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_28} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_27 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_27.current} {Borrow.get_id _27}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_26 <- _ret' ] 
             [ &_27 <- { _27 with current = _ret'.final } ] 
            s1)
      | s1 = insert_ghost'0 {_26} {[%#sghost_set11] (2 : int32)} (fun (_ret':bool) ->  [ &inserted_false <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 = -{resolve'0 _27}- s1
      | s1 = deref'0 {(_1.field_0'0).current} (fun (_ret':Fset.fset int32) ->  [ &_31 <- _ret' ] s2)
      | s2 = bb9 ]
      
    | bb9 = s0 [ s0 = len_ghost'0 {_31} (fun (_ret':int) ->  [ &length2 <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set12] inserted_true /\ not inserted_false} s1
      | s1 = {[@expl:assertion] [%#sghost_set13] length2 = 2} s2
      | s2 = {[@expl:assertion] [%#sghost_set14] contains'0 (inner_logic'0 (_1.field_0'0).current) (1 : int32)
        /\ contains'0 (inner_logic'0 (_1.field_0'0).current) (2 : int32)}
        s3
      | s3 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'0).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_42 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s4)
      | s4 = deref_mut'0 {_42} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_41 <- _ret' ] s5)
      | s5 = bb11 ]
      
    | bb11 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_41.current} {Borrow.get_id _41}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_40 <- _ret' ] 
             [ &_41 <- { _41 with current = _ret'.final } ] 
            s1)
      | s1 =  [ &_44 <- x3 ] s2
      | s2 = remove_ghost'0 {_40} {_44} (fun (_ret':bool) ->  [ &remove_false1 <- _ret' ] s3)
      | s3 = bb12 ]
      
    | bb12 = s0
      [ s0 = -{resolve'0 _41}- s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'0).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_48 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_48} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_47 <- _ret' ] s3)
      | s3 = bb13 ]
      
    | bb13 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_47.current} {Borrow.get_id _47}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_46 <- _ret' ] 
             [ &_47 <- { _47 with current = _ret'.final } ] 
            s1)
      | s1 =  [ &_50 <- x2 ] s2
      | s2 = remove_ghost'0 {_46} {_50} (fun (_ret':bool) ->  [ &remove_true <- _ret' ] s3)
      | s3 = bb14 ]
      
    | bb14 = s0
      [ s0 = -{resolve'0 _47}- s1
      | s1 = Borrow.borrow_final <t_GhostBox'0> {(_1.field_0'0).current} {Borrow.get_id _1.field_0'0}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_54 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_54} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_53 <- _ret' ] s3)
      | s3 = bb15 ]
      
    | bb15 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_53.current} {Borrow.get_id _53}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_52 <- _ret' ] 
             [ &_53 <- { _53 with current = _ret'.final } ] 
            s1)
      | s1 =  [ &_56 <- x2 ] s2
      | s2 = remove_ghost'0 {_52} {_56} (fun (_ret':bool) ->  [ &remove_false2 <- _ret' ] s3)
      | s3 = bb16 ]
      
    | bb16 = s0
      [ s0 = -{resolve'0 _53}- s1
      | s1 = {[@expl:assertion] [%#sghost_set15] not remove_false1 /\ remove_true /\ not remove_false2} s2
      | s2 = {[@expl:assertion] [%#sghost_set16] not contains'0 (inner_logic'0 (_1.field_0'0).current) (2 : int32)} s3
      | s3 = {[@expl:assertion] [%#sghost_set17] Fset.cardinal (inner_logic'0 (_1.field_0'0).current) = 1} s4
      | s4 = deref'0 {(_1.field_0'0).current} (fun (_ret':Fset.fset int32) ->  [ &_65 <- _ret' ] s5)
      | s5 = bb17 ]
      
    | bb17 = s0
      [ s0 =  [ &_68 <- x1 ] s1
      | s1 = contains_ghost'0 {_65} {_68} (fun (_ret':bool) ->  [ &contains1 <- _ret' ] s2)
      | s2 = bb18 ]
      
    | bb18 = s0
      [ s0 = deref'0 {(_1.field_0'0).current} (fun (_ret':Fset.fset int32) ->  [ &_71 <- _ret' ] s1) | s1 = bb19 ]
      
    | bb19 = s0
      [ s0 =  [ &_74 <- x2 ] s1
      | s1 = contains_ghost'0 {_71} {_74} (fun (_ret':bool) ->  [ &contains2 <- _ret' ] s2)
      | s2 = bb20 ]
      
    | bb20 = s0
      [ s0 = deref'0 {(_1.field_0'0).current} (fun (_ret':Fset.fset int32) ->  [ &_77 <- _ret' ] s1) | s1 = bb21 ]
      
    | bb21 = s0
      [ s0 =  [ &_80 <- x3 ] s1
      | s1 = contains_ghost'0 {_77} {_80} (fun (_ret':bool) ->  [ &contains3 <- _ret' ] s2)
      | s2 = bb22 ]
      
    | bb22 = s0
      [ s0 = -{resolve'1 _1}- s1
      | s1 = {[@expl:assertion] [%#sghost_set18] contains1} s2
      | s2 = {[@expl:assertion] [%#sghost_set19] not contains2} s3
      | s3 = {[@expl:assertion] [%#sghost_set20] not contains3} s4
      | s4 = new'1 {_2} (fun (_ret':t_GhostBox'1) ->  [ &_0 <- _ret' ] s5)
      | s5 = bb23 ]
      
    | bb23 = return' {_0} ]
    
    [ & _0 : t_GhostBox'1 = any_l ()
    | & _1 : closure0'1 = _1
    | & _2 : () = any_l ()
    | & _5 : bool = any_l ()
    | & _6 : borrowed (Fset.fset int32) = any_l ()
    | & _7 : borrowed (Fset.fset int32) = any_l ()
    | & _8 : borrowed (t_GhostBox'0) = any_l ()
    | & length1 : int = any_l ()
    | & _11 : Fset.fset int32 = any_l ()
    | & x1 : int32 = any_l ()
    | & x2 : int32 = any_l ()
    | & x3 : int32 = any_l ()
    | & _20 : (int32, int32, int32) = any_l ()
    | & inserted_true : bool = any_l ()
    | & _22 : borrowed (Fset.fset int32) = any_l ()
    | & _23 : borrowed (Fset.fset int32) = any_l ()
    | & _24 : borrowed (t_GhostBox'0) = any_l ()
    | & inserted_false : bool = any_l ()
    | & _26 : borrowed (Fset.fset int32) = any_l ()
    | & _27 : borrowed (Fset.fset int32) = any_l ()
    | & _28 : borrowed (t_GhostBox'0) = any_l ()
    | & length2 : int = any_l ()
    | & _31 : Fset.fset int32 = any_l ()
    | & remove_false1 : bool = any_l ()
    | & _40 : borrowed (Fset.fset int32) = any_l ()
    | & _41 : borrowed (Fset.fset int32) = any_l ()
    | & _42 : borrowed (t_GhostBox'0) = any_l ()
    | & _44 : int32 = any_l ()
    | & remove_true : bool = any_l ()
    | & _46 : borrowed (Fset.fset int32) = any_l ()
    | & _47 : borrowed (Fset.fset int32) = any_l ()
    | & _48 : borrowed (t_GhostBox'0) = any_l ()
    | & _50 : int32 = any_l ()
    | & remove_false2 : bool = any_l ()
    | & _52 : borrowed (Fset.fset int32) = any_l ()
    | & _53 : borrowed (Fset.fset int32) = any_l ()
    | & _54 : borrowed (t_GhostBox'0) = any_l ()
    | & _56 : int32 = any_l ()
    | & contains1 : bool = any_l ()
    | & _65 : Fset.fset int32 = any_l ()
    | & _68 : int32 = any_l ()
    | & contains2 : bool = any_l ()
    | & _71 : Fset.fset int32 = any_l ()
    | & _74 : int32 = any_l ()
    | & contains3 : bool = any_l ()
    | & _77 : Fset.fset int32 = any_l ()
    | & _80 : int32 = any_l () ]
     [ return' (result:t_GhostBox'1)-> return' {result} ] 
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_map'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = new'0 {[%#sghost_set0] ()} (fun (_ret':t_GhostBox'0) ->  [ &set <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <t_GhostBox'0> {set}
          (fun (_ret':borrowed (t_GhostBox'0)) ->  [ &_4 <- _ret' ]  [ &set <- _ret'.final ] s1)
      | s1 =  [ &_3 <- { field_0'0 = _4 } ] s2
      | s2 = closure0'0 {_3} (fun (_ret':t_GhostBox'1) ->  [ &_2 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & set : t_GhostBox'0 = any_l ()
    | & _2 : t_GhostBox'1 = any_l ()
    | & _3 : closure0'1 = any_l ()
    | & _4 : borrowed (t_GhostBox'0) = any_l ()
    | & _5 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
