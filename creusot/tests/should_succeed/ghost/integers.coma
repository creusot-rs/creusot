module M_integers__in_ghost_block [#"integers.rs" 4 0 4 23]
  let%span sintegers0 = "integers.rs" 5 19 5 23
  let%span sintegers1 = "integers.rs" 7 16 7 20
  let%span sintegers2 = "integers.rs" 9 20 9 24
  let%span sintegers3 = "integers.rs" 10 22 10 28
  let%span sintegers4 = "integers.rs" 14 31 14 35
  let%span sintegers5 = "integers.rs" 14 37 14 42
  let%span sintegers6 = "integers.rs" 14 44 14 48
  let%span sintegers7 = "integers.rs" 15 22 15 28
  let%span sint8 = "../../../../creusot-contracts/src/logic/int.rs" 60 14 60 31
  let%span sghost9 = "../../../../creusot-contracts/src/ghost.rs" 199 22 199 26
  let%span sghost10 = "../../../../creusot-contracts/src/ghost.rs" 199 4 199 32
  let%span sghost11 = "../../../../creusot-contracts/src/ghost.rs" 197 14 197 31
  let%span sghost12 = "../../../../creusot-contracts/src/ghost.rs" 181 15 181 16
  let%span sghost13 = "../../../../creusot-contracts/src/ghost.rs" 181 4 181 28
  let%span sghost14 = "../../../../creusot-contracts/src/ghost.rs" 179 14 179 28
  let%span sghost15 = "../../../../creusot-contracts/src/ghost.rs" 69 14 69 18
  let%span sghost16 = "../../../../creusot-contracts/src/ghost.rs" 69 4 69 36
  let%span sghost17 = "../../../../creusot-contracts/src/ghost.rs" 68 14 68 35
  let%span sint18 = "../../../../creusot-contracts/src/logic/int.rs" 255 14 255 36
  let%span sint19 = "../../../../creusot-contracts/src/logic/int.rs" 277 14 277 36
  let%span sintegers20 = "integers.rs" 20 10 20 29
  let%span sghost21 = "../../../../creusot-contracts/src/ghost.rs" 217 9 217 15
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: int }
  
  function inner_logic'0 (self : t_GhostBox'0) : int =
    [%#sghost21] self.t_GhostBox__0'0
  
  use prelude.prelude.Int128
  
  let rec new'0 (value:int128) (return'  (ret:t_GhostBox'0))= any
    [ return' (result:t_GhostBox'0)-> {[%#sint8] inner_logic'0 result = Int128.to_int value} (! return' {result}) ]
    
  
  predicate inv'0 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_GhostBox'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : int)
  
  axiom inv_axiom'1 [@rewrite] : forall x : int [inv'1 x] . inv'1 x = true
  
  let rec into_inner'0 (self:t_GhostBox'0) (return'  (ret:int))= {[@expl:into_inner 'self' type invariant] [%#sghost9] inv'0 self}
    any
    [ return' (result:int)-> {[%#sghost10] inv'1 result}
      {[%#sghost11] result = self.t_GhostBox__0'0}
      (! return' {result}) ]
    
  
  let rec new'1 (x:int) (return'  (ret:t_GhostBox'0))= {[@expl:new 'x' type invariant] [%#sghost12] inv'1 x}
    any
    [ return' (result:t_GhostBox'0)-> {[%#sghost13] inv'0 result}
      {[%#sghost14] result.t_GhostBox__0'0 = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec closure0'0 (_1:()) (return'  (ret:t_GhostBox'0))= bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#sintegers0] (1 : int128)} (fun (_ret':t_GhostBox'0) ->  [ &_3 <- _ret' ] s1) | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = into_inner'0 {_3} (fun (_ret':int) ->  [ &_2 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = new'1 {_2} (fun (_ret':t_GhostBox'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = return' {_0} ]
     [ & _0 : t_GhostBox'0 = any_l () | & _2 : int = any_l () | & _3 : t_GhostBox'0 = any_l () ] 
    [ return' (result:t_GhostBox'0)-> return' {result} ]
    
  
  use prelude.prelude.Borrow
  
  predicate inv'2 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_GhostBox'0 [inv'2 x] . inv'2 x = true
  
  predicate inv'3 (_1 : int)
  
  axiom inv_axiom'3 [@rewrite] : forall x : int [inv'3 x] . inv'3 x = true
  
  let rec deref'0 (self:t_GhostBox'0) (return'  (ret:int))= {[@expl:deref 'self' type invariant] [%#sghost15] inv'2 self}
    any
    [ return' (result:int)-> {[%#sghost16] inv'3 result}
      {[%#sghost17] self.t_GhostBox__0'0 = result}
      (! return' {result}) ]
    
  
  let rec add'0 (self:int) (other:int) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sint18] result = self + other} (! return' {result}) ]
    
  
  let rec mul'0 (self:int) (other:int) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sint19] result = self * other} (! return' {result}) ]
    
  
  predicate inv'4 (_1 : ())
  
  axiom inv_axiom'4 [@rewrite] : forall x : () [inv'4 x] . inv'4 x = true
  
  type t_GhostBox'1  =
    { t_GhostBox__0'1: () }
  
  predicate inv'5 (_1 : t_GhostBox'1)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_GhostBox'1 [inv'5 x] . inv'5 x = true
  
  let rec new'2 (x:()) (return'  (ret:t_GhostBox'1))= {[@expl:new 'x' type invariant] [%#sghost12] inv'4 x}
    any
    [ return' (result:t_GhostBox'1)-> {[%#sghost13] inv'5 result}
      {[%#sghost14] result.t_GhostBox__0'1 = x}
      (! return' {result}) ]
    
  
  type closure1'1  =
    { field_0'0: t_GhostBox'0 }
  
  let rec closure1'0 (_1:closure1'1) (return'  (ret:t_GhostBox'1))= bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#sintegers1] (2 : int128)} (fun (_ret':t_GhostBox'0) ->  [ &_4 <- _ret' ] s1) | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = into_inner'0 {_4} (fun (_ret':int) ->  [ &y <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = deref'0 {_1.field_0'0} (fun (_ret':int) ->  [ &_7 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = add'0 {_7} {y} (fun (_ret':int) ->  [ &z <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = new'0 {[%#sintegers2] (3 : int128)} (fun (_ret':t_GhostBox'0) ->  [ &_13 <- _ret' ] s1) | s1 = bb5 ]
      
    | bb5 = s0 [ s0 = into_inner'0 {_13} (fun (_ret':int) ->  [ &_12 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = mul'0 {z} {_12} (fun (_ret':int) ->  [ &w <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = {[@expl:assertion] [%#sintegers3] w = 9} s1
      | s1 = new'2 {_2} (fun (_ret':t_GhostBox'1) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = return' {_0} ]
    
    [ & _0 : t_GhostBox'1 = any_l ()
    | & _1 : closure1'1 = _1
    | & _2 : () = any_l ()
    | & y : int = any_l ()
    | & _4 : t_GhostBox'0 = any_l ()
    | & z : int = any_l ()
    | & _7 : int = any_l ()
    | & w : int = any_l ()
    | & _12 : int = any_l ()
    | & _13 : t_GhostBox'0 = any_l () ]
     [ return' (result:t_GhostBox'1)-> return' {result} ] 
  
  let rec ghost_function'0 (x:int) (y:int) (z:int) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sintegers20] result = x + mod y z} (! return' {result}) ]
    
  
  let rec closure2'0 (_1:()) (return'  (ret:t_GhostBox'1))= bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#sintegers4] (4 : int128)} (fun (_ret':t_GhostBox'0) ->  [ &_5 <- _ret' ] s1) | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = into_inner'0 {_5} (fun (_ret':int) ->  [ &_4 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = new'0 {[%#sintegers5] (13 : int128)} (fun (_ret':t_GhostBox'0) ->  [ &_7 <- _ret' ] s1) | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = into_inner'0 {_7} (fun (_ret':int) ->  [ &_6 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = new'0 {[%#sintegers6] (5 : int128)} (fun (_ret':t_GhostBox'0) ->  [ &_9 <- _ret' ] s1) | s1 = bb5 ]
      
    | bb5 = s0 [ s0 = into_inner'0 {_9} (fun (_ret':int) ->  [ &_8 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = ghost_function'0 {_4} {_6} {_8} (fun (_ret':int) ->  [ &x <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = {[@expl:assertion] [%#sintegers7] x = 7} s1
      | s1 = new'2 {_2} (fun (_ret':t_GhostBox'1) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = return' {_0} ]
    
    [ & _0 : t_GhostBox'1 = any_l ()
    | & _2 : () = any_l ()
    | & x : int = any_l ()
    | & _4 : int = any_l ()
    | & _5 : t_GhostBox'0 = any_l ()
    | & _6 : int = any_l ()
    | & _7 : t_GhostBox'0 = any_l ()
    | & _8 : int = any_l ()
    | & _9 : t_GhostBox'0 = any_l () ]
     [ return' (result:t_GhostBox'1)-> return' {result} ] 
  
  meta "compute_max_steps" 1000000
  
  let rec in_ghost_block'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- () ] s1 | s1 = closure0'0 {_2} (fun (_ret':t_GhostBox'0) ->  [ &x <- _ret' ] s2) | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_5 <- { field_0'0 = x } ] s1
      | s1 = closure1'0 {_5} (fun (_ret':t_GhostBox'1) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = bb3
    | bb3 = s0
      [ s0 =  [ &_9 <- () ] s1 | s1 = closure2'0 {_9} (fun (_ret':t_GhostBox'1) ->  [ &_8 <- _ret' ] s2) | s2 = bb4 ]
      
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : t_GhostBox'0 = any_l ()
    | & _2 : () = any_l ()
    | & _3 : () = any_l ()
    | & _4 : t_GhostBox'1 = any_l ()
    | & _5 : closure1'1 = any_l ()
    | & _7 : () = any_l ()
    | & _8 : t_GhostBox'1 = any_l ()
    | & _9 : () = any_l ()
    | & _10 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_integers__ghost_function [#"integers.rs" 21 0 21 52]
  let%span sintegers0 = "integers.rs" 20 10 20 29
  let%span sint1 = "../../../../creusot-contracts/src/logic/int.rs" 299 14 299 36
  let%span sint2 = "../../../../creusot-contracts/src/logic/int.rs" 255 14 255 36
  
  use prelude.prelude.Int
  
  let rec rem'0 (self:int) (other:int) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sint1] result = mod self other} (! return' {result}) ]
    
  
  let rec add'0 (self:int) (other:int) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sint2] result = self + other} (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_function'0 (x:int) (y:int) (z:int) (return'  (ret:int))= (! bb0
    [ bb0 = s0 [ s0 = rem'0 {y} {z} (fun (_ret':int) ->  [ &_6 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = add'0 {x} {_6} (fun (_ret':int) ->  [ &_0 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : int = any_l () | & x : int = x | & y : int = y | & z : int = z | & _6 : int = any_l () ] 
    [ return' (result:int)-> {[@expl:ghost_function ensures] [%#sintegers0] result = x + mod y z} (! return' {result}) ]
    
end
