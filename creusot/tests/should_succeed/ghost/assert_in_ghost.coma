module M_assert_in_ghost__ghost_only [#"assert_in_ghost.rs" 4 0 4 19]
  let%span sassert_in_ghost0 = "assert_in_ghost.rs" 6 16 6 20
  let%span sassert_in_ghost1 = "assert_in_ghost.rs" 7 22 7 31
  let%span sghost2 = "../../../../creusot-contracts/src/ghost.rs" 147 15 147 16
  let%span sghost3 = "../../../../creusot-contracts/src/ghost.rs" 147 4 147 28
  let%span sghost4 = "../../../../creusot-contracts/src/ghost.rs" 145 14 145 28
  
  use prelude.prelude.Int32
  
  predicate inv'0 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'0 x] . inv'0 x = true
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: () }
  
  predicate inv'1 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_GhostBox'0 [inv'1 x] . inv'1 x = true
  
  let rec new'0 (x:()) (return'  (ret:t_GhostBox'0))= {[@expl:new 'x' type invariant] [%#sghost2] inv'0 x}
    any
    [ return' (result:t_GhostBox'0)-> {[%#sghost3] inv'1 result}
      {[%#sghost4] result.t_GhostBox__0'0 = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec closure0'0 (_1:()) (return'  (ret:t_GhostBox'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#sassert_in_ghost0] (1 : int32) ] s1
      | s1 = {[@expl:assertion] [%#sassert_in_ghost1] x = (1 : int32)} s2
      | s2 = new'0 {_2} (fun (_ret':t_GhostBox'0) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : t_GhostBox'0 = any_l () | & _2 : () = any_l () | & x : int32 = any_l () ] 
    [ return' (result:t_GhostBox'0)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_only'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- () ] s1 | s1 = closure0'0 {_2} (fun (_ret':t_GhostBox'0) ->  [ &_1 <- _ret' ] s2) | s2 = bb1 ]
      
    | bb1 = bb2
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : t_GhostBox'0 = any_l () | & _2 : () = any_l () | & _3 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_assert_in_ghost__ghost_capture [#"assert_in_ghost.rs" 11 0 11 22]
  let%span sassert_in_ghost0 = "assert_in_ghost.rs" 12 12 12 17
  let%span sassert_in_ghost1 = "assert_in_ghost.rs" 16 22 16 32
  let%span sghost2 = "../../../../creusot-contracts/src/ghost.rs" 147 15 147 16
  let%span sghost3 = "../../../../creusot-contracts/src/ghost.rs" 147 4 147 28
  let%span sghost4 = "../../../../creusot-contracts/src/ghost.rs" 145 14 145 28
  
  use prelude.prelude.Int32
  
  predicate inv'0 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'0 x] . inv'0 x = true
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: () }
  
  predicate inv'1 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_GhostBox'0 [inv'1 x] . inv'1 x = true
  
  let rec new'0 (x:()) (return'  (ret:t_GhostBox'0))= {[@expl:new 'x' type invariant] [%#sghost2] inv'0 x}
    any
    [ return' (result:t_GhostBox'0)-> {[%#sghost3] inv'1 result}
      {[%#sghost4] result.t_GhostBox__0'0 = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  type closure0'1  =
    { field_0'0: int32 }
  
  let rec closure0'0 (_1:closure0'1) (return'  (ret:t_GhostBox'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &y <- _1.field_0'0 ] s1
      | s1 = {[@expl:assertion] [%#sassert_in_ghost1] y = (42 : int32)} s2
      | s2 = new'0 {_2} (fun (_ret':t_GhostBox'0) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : t_GhostBox'0 = any_l () | & _1 : closure0'1 = _1 | & _2 : () = any_l () | & y : int32 = any_l () ] 
    [ return' (result:t_GhostBox'0)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_capture'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#sassert_in_ghost0] (42 : int32) ] s1
      | s1 =  [ &_3 <- { field_0'0 = x } ] s2
      | s2 = closure0'0 {_3} (fun (_ret':t_GhostBox'0) ->  [ &_2 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = bb2
    | bb2 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & _2 : t_GhostBox'0 = any_l ()
    | & _3 : closure0'1 = any_l ()
    | & _5 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_assert_in_ghost__ghost_mutate [#"assert_in_ghost.rs" 20 0 20 21]
  let%span sassert_in_ghost0 = "assert_in_ghost.rs" 21 25 21 29
  let%span sassert_in_ghost1 = "assert_in_ghost.rs" 21 31 21 35
  let%span sassert_in_ghost2 = "assert_in_ghost.rs" 24 14 24 15
  let%span sassert_in_ghost3 = "assert_in_ghost.rs" 28 22 28 33
  let%span sassert_in_ghost4 = "assert_in_ghost.rs" 29 22 29 33
  let%span sghost5 = "../../../../creusot-contracts/src/ghost.rs" 147 15 147 16
  let%span sghost6 = "../../../../creusot-contracts/src/ghost.rs" 147 4 147 28
  let%span sghost7 = "../../../../creusot-contracts/src/ghost.rs" 145 14 145 28
  let%span sghost8 = "../../../../creusot-contracts/src/ghost.rs" 68 22 68 26
  let%span sghost9 = "../../../../creusot-contracts/src/ghost.rs" 68 4 68 48
  let%span sghost10 = "../../../../creusot-contracts/src/ghost.rs" 67 14 67 36
  let%span sghost11 = "../../../../creusot-contracts/src/ghost.rs" 183 9 183 15
  let%span sresolve12 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Int32
  
  predicate inv'0 (_1 : (int32, int32))
  
  axiom inv_axiom'0 [@rewrite] : forall x : (int32, int32) [inv'0 x] . inv'0 x = true
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: (int32, int32) }
  
  predicate inv'1 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_GhostBox'0 [inv'1 x] . inv'1 x = true
  
  let rec new'0 (x:(int32, int32)) (return'  (ret:t_GhostBox'0))= {[@expl:new 'x' type invariant] [%#sghost5] inv'0 x}
    any
    [ return' (result:t_GhostBox'0)-> {[%#sghost6] inv'1 result}
      {[%#sghost7] result.t_GhostBox__0'0 = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec closure0'0 (_1:()) (return'  (ret:t_GhostBox'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- (([%#sassert_in_ghost0] (2 : int32)), ([%#sassert_in_ghost1] (3 : int32))) ] s1
      | s1 = new'0 {_2} (fun (_ret':t_GhostBox'0) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : t_GhostBox'0 = any_l () | & _2 : (int32, int32) = any_l () ] 
    [ return' (result:t_GhostBox'0)-> return' {result} ]
    
  
  use prelude.prelude.Borrow
  
  predicate inv'2 (_1 : borrowed (t_GhostBox'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (t_GhostBox'0) [inv'2 x] . inv'2 x = true
  
  predicate inv'3 (_1 : borrowed (int32, int32))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (int32, int32) [inv'3 x] . inv'3 x = true
  
  let rec deref_mut'0 (self:borrowed (t_GhostBox'0)) (return'  (ret:borrowed (int32, int32)))= {[@expl:deref_mut 'self' type invariant] [%#sghost8] inv'2 self}
    any
    [ return' (result:borrowed (int32, int32))-> {[%#sghost9] inv'3 result}
      {[%#sghost10] result
      = Borrow.borrow_logic (self.current).t_GhostBox__0'0 (self.final).t_GhostBox__0'0 (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (int32, int32)) =
    [%#sresolve12] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (int32, int32)) =
    resolve'2 _1
  
  type closure1'1  =
    { field_0'0: borrowed (t_GhostBox'0) }
  
  predicate resolve'4 (self : borrowed (t_GhostBox'0)) =
    [%#sresolve12] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (t_GhostBox'0)) =
    resolve'4 _1
  
  predicate resolve'1 (_1 : closure1'1) =
    resolve'3 _1.field_0'0
  
  predicate inv'4 (_1 : ())
  
  axiom inv_axiom'4 [@rewrite] : forall x : () [inv'4 x] . inv'4 x = true
  
  type t_GhostBox'1  =
    { t_GhostBox__0'1: () }
  
  predicate inv'5 (_1 : t_GhostBox'1)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_GhostBox'1 [inv'5 x] . inv'5 x = true
  
  let rec new'1 (x:()) (return'  (ret:t_GhostBox'1))= {[@expl:new 'x' type invariant] [%#sghost5] inv'4 x}
    any
    [ return' (result:t_GhostBox'1)-> {[%#sghost6] inv'5 result}
      {[%#sghost7] result.t_GhostBox__0'1 = x}
      (! return' {result}) ]
    
  
  let rec closure1'0 (_1:closure1'1) (return'  (ret:t_GhostBox'1))= bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <t_GhostBox'0> {(_1.field_0'0).current} {Borrow.get_id _1.field_0'0}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_4 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s1)
      | s1 = deref_mut'0 {_4} (fun (_ret':borrowed (int32, int32)) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = 
        [ &_3 <- { _3 with current = (let (_, r'1) = _3.current in (([%#sassert_in_ghost2] (4 : int32)), r'1)) } ]
        
        s1
      | s1 = -{resolve'0 _3}- s2
      | s2 = -{resolve'1 _1}- s3
      | s3 = new'1 {_2} (fun (_ret':t_GhostBox'1) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = return' {_0} ]
    
    [ & _0 : t_GhostBox'1 = any_l ()
    | & _1 : closure1'1 = _1
    | & _2 : () = any_l ()
    | & _3 : borrowed (int32, int32) = any_l ()
    | & _4 : borrowed (t_GhostBox'0) = any_l () ]
     [ return' (result:t_GhostBox'1)-> return' {result} ] 
  
  function inner_logic'0 (self : t_GhostBox'0) : (int32, int32) =
    [%#sghost11] self.t_GhostBox__0'0
  
  type closure2'1  =
    { field_0'1: t_GhostBox'0 }
  
  let rec closure2'0 (_1:closure2'1) (return'  (ret:t_GhostBox'1))= bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#sassert_in_ghost3] (let (a, _) = inner_logic'0 _1.field_0'1 in a) = (4 : int32)} s1
      | s1 = {[@expl:assertion] [%#sassert_in_ghost4] (let (_, a) = inner_logic'0 _1.field_0'1 in a) = (3 : int32)} s2
      | s2 = new'1 {_2} (fun (_ret':t_GhostBox'1) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : t_GhostBox'1 = any_l () | & _1 : closure2'1 = _1 | & _2 : () = any_l () ] 
    [ return' (result:t_GhostBox'1)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_mutate'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- () ] s1 | s1 = closure0'0 {_2} (fun (_ret':t_GhostBox'0) ->  [ &p <- _ret' ] s2) | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <t_GhostBox'0> {p}
          (fun (_ret':borrowed (t_GhostBox'0)) ->  [ &_6 <- _ret' ]  [ &p <- _ret'.final ] s1)
      | s1 =  [ &_5 <- { field_0'0 = _6 } ] s2
      | s2 = closure1'0 {_5} (fun (_ret':t_GhostBox'1) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = bb3
    | bb3 = s0
      [ s0 =  [ &_9 <- { field_0'1 = p } ] s1
      | s1 = closure2'0 {_9} (fun (_ret':t_GhostBox'1) ->  [ &_8 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & p : t_GhostBox'0 = any_l ()
    | & _2 : () = any_l ()
    | & _3 : () = any_l ()
    | & _4 : t_GhostBox'1 = any_l ()
    | & _5 : closure1'1 = any_l ()
    | & _6 : borrowed (t_GhostBox'0) = any_l ()
    | & _7 : () = any_l ()
    | & _8 : t_GhostBox'1 = any_l ()
    | & _9 : closure2'1 = any_l ()
    | & _11 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
