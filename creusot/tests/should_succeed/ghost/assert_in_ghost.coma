
module CreusotContracts_Ghost_GhostBox_Type
  type t_ghostbox 't =
    | C_GhostBox 't
  
  function any_l (_ : 'b) : 'a
  
  let rec t_ghostbox < 't > (input:t_ghostbox 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_GhostBox field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_GhostBox field_0 <> input} {false} any ]
    
  
  function ghostbox_0 (self : t_ghostbox 't) : 't =
    match self with
      | C_GhostBox a -> a
      end
end
module AssertInGhost_GhostOnly_Closure0_Type
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  use prelude.prelude.Int32
  
  type assertinghost_ghostonly_closure0  =
    | Assertinghost_ghostonly_closure0
  
  let rec assertinghost_ghostonly_closure0 (input:assertinghost_ghostonly_closure0) (ret  )= any
    [ good -> {Assertinghost_ghostonly_closure0  = input} (! ret)
    | bad -> {Assertinghost_ghostonly_closure0  <> input} {false} any ]
    
end
module AssertInGhost_GhostOnly_Closure0
  let%span sassert_in_ghost0 = "../assert_in_ghost.rs" 6 16 6 20
  
  let%span sassert_in_ghost1 = "../assert_in_ghost.rs" 7 22 7 31
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span5 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_ghostbox ()) =
    [%#span2] true
  
  predicate inv'1 (_1 : GhostBox'0.t_ghostbox ())
  
  axiom inv'1 : forall x : GhostBox'0.t_ghostbox () . inv'1 x = true
  
  predicate invariant'0 (self : ()) =
    [%#span2] true
  
  predicate inv'0 (_1 : ())
  
  axiom inv'0 : forall x : () . inv'0 x = true
  
  use prelude.prelude.Int32
  
  use AssertInGhost_GhostOnly_Closure0_Type as Closure'0
  
  use prelude.prelude.Intrinsic
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_ghostbox ()))= {[@expl:precondition] [%#span3] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox ())-> {[%#span5] inv'1 result}
      {[%#span4] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  let rec assertinghost_ghostonly_closure0 (_1:Closure'0.assertinghost_ghostonly_closure0) (return'  (ret:GhostBox'0.t_ghostbox ()))= bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#sassert_in_ghost0] (1 : int32) ] s1
      | s1 = {[@expl:assertion] [%#sassert_in_ghost1] x = (1 : int32)} s2
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_ghostbox () = any_l () | & _2 : () = any_l () | & x : int32 = any_l () ] 
    [ return' (result:GhostBox'0.t_ghostbox ())-> return' {result} ]
    
end
module AssertInGhost_GhostOnly
  let%span span0 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span1 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span2 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  let%span span4 = "../assert_in_ghost.rs" 6 16 6 20
  
  let%span span5 = "../assert_in_ghost.rs" 7 22 7 31
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_ghostbox ()) =
    [%#span0] true
  
  predicate inv'1 (_1 : GhostBox'0.t_ghostbox ())
  
  axiom inv'1 : forall x : GhostBox'0.t_ghostbox () . inv'1 x = true
  
  predicate invariant'0 (self : ()) =
    [%#span0] true
  
  predicate inv'0 (_1 : ())
  
  axiom inv'0 : forall x : () . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use AssertInGhost_GhostOnly_Closure0_Type as Closure'0
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_ghostbox ()))= {[@expl:precondition] [%#span1] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox ())-> {[%#span3] inv'1 result}
      {[%#span2] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  let rec closure0'0 (_1:Closure'0.assertinghost_ghostonly_closure0) (return'  (ret:GhostBox'0.t_ghostbox ()))= bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#span4] (1 : int32) ] s1
      | s1 = {[@expl:assertion] [%#span5] x = (1 : int32)} s2
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_ghostbox () = any_l () | & _2 : () = any_l () | & x : int32 = any_l () ] 
    [ return' (result:GhostBox'0.t_ghostbox ())-> return' {result} ]
    
  
  let rec ghost_only (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- Closure'0.Assertinghost_ghostonly_closure0 ] s1
      | s1 = closure0'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_1 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & _1 : GhostBox'0.t_ghostbox () = any_l ()
    | & _2 : Closure'0.assertinghost_ghostonly_closure0 = any_l ()
    | & _3 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module AssertInGhost_GhostCapture_Closure0_Type
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type assertinghost_ghostcapture_closure0  =
    | Assertinghost_ghostcapture_closure0 int32
  
  let rec assertinghost_ghostcapture_closure0 (input:assertinghost_ghostcapture_closure0) (ret  (x:int32))= any
    [ good (x:int32)-> {Assertinghost_ghostcapture_closure0 x = input} (! ret {x})
    | bad (x:int32)-> {Assertinghost_ghostcapture_closure0 x <> input} {false} any ]
    
end
module AssertInGhost_GhostCapture_Closure0
  let%span sassert_in_ghost0 = "../assert_in_ghost.rs" 16 22 16 32
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_ghostbox ()) =
    [%#span1] true
  
  predicate inv'1 (_1 : GhostBox'0.t_ghostbox ())
  
  axiom inv'1 : forall x : GhostBox'0.t_ghostbox () . inv'1 x = true
  
  predicate invariant'0 (self : ()) =
    [%#span1] true
  
  predicate inv'0 (_1 : ())
  
  axiom inv'0 : forall x : () . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_ghostbox ()))= {[@expl:precondition] [%#span2] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox ())-> {[%#span4] inv'1 result}
      {[%#span3] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use AssertInGhost_GhostCapture_Closure0_Type as Closure'0
  
  let rec assertinghost_ghostcapture_closure0 (_1:Closure'0.assertinghost_ghostcapture_closure0) (return'  (ret:GhostBox'0.t_ghostbox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.assertinghost_ghostcapture_closure0 {_1} (fun (r'0:int32) ->  [ &y <- r'0 ] s1)
      | s1 = {[@expl:assertion] [%#sassert_in_ghost0] y = (42 : int32)} s2
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox () = any_l ()
    | & _1 : Closure'0.assertinghost_ghostcapture_closure0 = _1
    | & _2 : () = any_l ()
    | & y : int32 = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox ())-> return' {result} ] 
end
module AssertInGhost_GhostCapture
  let%span sassert_in_ghost0 = "../assert_in_ghost.rs" 12 12 12 17
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  let%span span5 = "../assert_in_ghost.rs" 16 22 16 32
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_ghostbox ()) =
    [%#span1] true
  
  predicate inv'1 (_1 : GhostBox'0.t_ghostbox ())
  
  axiom inv'1 : forall x : GhostBox'0.t_ghostbox () . inv'1 x = true
  
  predicate invariant'0 (self : ()) =
    [%#span1] true
  
  predicate inv'0 (_1 : ())
  
  axiom inv'0 : forall x : () . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_ghostbox ()))= {[@expl:precondition] [%#span2] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox ())-> {[%#span4] inv'1 result}
      {[%#span3] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  use AssertInGhost_GhostCapture_Closure0_Type as Closure'0
  
  let rec closure0'0 (_1:Closure'0.assertinghost_ghostcapture_closure0) (return'  (ret:GhostBox'0.t_ghostbox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.assertinghost_ghostcapture_closure0 {_1} (fun (r'0:int32) ->  [ &y <- r'0 ] s1)
      | s1 = {[@expl:assertion] [%#span5] y = (42 : int32)} s2
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox () = any_l ()
    | & _1 : Closure'0.assertinghost_ghostcapture_closure0 = _1
    | & _2 : () = any_l ()
    | & y : int32 = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox ())-> return' {result} ] 
  
  let rec ghost_capture (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#sassert_in_ghost0] (42 : int32) ] s1
      | s1 =  [ &_3 <- Closure'0.Assertinghost_ghostcapture_closure0 x ] s2
      | s2 = closure0'0 {_3} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_2 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & _2 : GhostBox'0.t_ghostbox () = any_l ()
    | & _3 : Closure'0.assertinghost_ghostcapture_closure0 = any_l ()
    | & _5 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module AssertInGhost_GhostMutate_Closure0_Type
  use prelude.prelude.Int32
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  type assertinghost_ghostmutate_closure0  =
    | Assertinghost_ghostmutate_closure0
  
  let rec assertinghost_ghostmutate_closure0 (input:assertinghost_ghostmutate_closure0) (ret  )= any
    [ good -> {Assertinghost_ghostmutate_closure0  = input} (! ret)
    | bad -> {Assertinghost_ghostmutate_closure0  <> input} {false} any ]
    
end
module AssertInGhost_GhostMutate_Closure0
  let%span sassert_in_ghost0 = "../assert_in_ghost.rs" 21 25 21 29
  
  let%span sassert_in_ghost1 = "../assert_in_ghost.rs" 21 31 21 35
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span5 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  use prelude.prelude.Int32
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_ghostbox (int32, int32)) =
    [%#span2] true
  
  predicate inv'1 (_1 : GhostBox'0.t_ghostbox (int32, int32))
  
  axiom inv'1 : forall x : GhostBox'0.t_ghostbox (int32, int32) . inv'1 x = true
  
  predicate invariant'0 (self : (int32, int32)) =
    [%#span2] true
  
  predicate inv'0 (_1 : (int32, int32))
  
  axiom inv'0 : forall x : (int32, int32) . inv'0 x = true
  
  use AssertInGhost_GhostMutate_Closure0_Type as Closure'0
  
  use prelude.prelude.Intrinsic
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  let rec new'0 (x:(int32, int32)) (return'  (ret:GhostBox'0.t_ghostbox (int32, int32)))= {[@expl:precondition] [%#span3] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox (int32, int32))-> {[%#span5] inv'1 result}
      {[%#span4] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  let rec assertinghost_ghostmutate_closure0 (_1:Closure'0.assertinghost_ghostmutate_closure0) (return'  (ret:GhostBox'0.t_ghostbox (int32, int32)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- (([%#sassert_in_ghost0] (2 : int32)), ([%#sassert_in_ghost1] (3 : int32))) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox (int32, int32)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_ghostbox (int32, int32) = any_l () | & _2 : (int32, int32) = any_l () ] 
    [ return' (result:GhostBox'0.t_ghostbox (int32, int32))-> return' {result} ]
    
end
module AssertInGhost_GhostMutate_Closure1_Type
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type assertinghost_ghostmutate_closure1  =
    | Assertinghost_ghostmutate_closure1 (borrowed (GhostBox'0.t_ghostbox (int32, int32)))
  
  let rec assertinghost_ghostmutate_closure1 (input:assertinghost_ghostmutate_closure1) (ret  (p:borrowed (GhostBox'0.t_ghostbox (int32, int32))))= any
    [ good (p:borrowed (GhostBox'0.t_ghostbox (int32, int32)))-> {Assertinghost_ghostmutate_closure1 p = input}
      (! ret {p})
    | bad (p:borrowed (GhostBox'0.t_ghostbox (int32, int32)))-> {Assertinghost_ghostmutate_closure1 p <> input}
      {false}
      any ]
    
end
module AssertInGhost_GhostMutate_Closure1
  let%span sassert_in_ghost0 = "../assert_in_ghost.rs" 24 14 24 15
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span5 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span7 = "../../../../../creusot-contracts/src/ghost.rs" 50 22 50 26
  
  let%span span8 = "../../../../../creusot-contracts/src/ghost.rs" 48 14 48 34
  
  let%span span9 = "../../../../../creusot-contracts/src/ghost.rs" 49 14 49 34
  
  let%span span10 = "../../../../../creusot-contracts/src/ghost.rs" 50 4 50 48
  
  use prelude.prelude.Int32
  
  predicate invariant'5 (self : (int32, int32)) =
    [%#span1] true
  
  predicate inv'5 (_1 : (int32, int32))
  
  axiom inv'5 : forall x : (int32, int32) . inv'5 x = true
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'4 (self : GhostBox'0.t_ghostbox (int32, int32)) =
    [%#span1] true
  
  predicate inv'4 (_1 : GhostBox'0.t_ghostbox (int32, int32))
  
  axiom inv'4 : forall x : GhostBox'0.t_ghostbox (int32, int32) . inv'4 x = true
  
  predicate invariant'3 (self : GhostBox'0.t_ghostbox ()) =
    [%#span1] true
  
  predicate inv'3 (_1 : GhostBox'0.t_ghostbox ())
  
  axiom inv'3 : forall x : GhostBox'0.t_ghostbox () . inv'3 x = true
  
  predicate invariant'2 (self : ()) =
    [%#span1] true
  
  predicate inv'2 (_1 : ())
  
  axiom inv'2 : forall x : () . inv'2 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (int32, int32)) =
    [%#span2] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'1 (_1 : borrowed (int32, int32))
  
  axiom inv'1 : forall x : borrowed (int32, int32) . inv'1 x = true
  
  predicate invariant'0 (self : borrowed (GhostBox'0.t_ghostbox (int32, int32))) =
    [%#span2] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'0 (_1 : borrowed (GhostBox'0.t_ghostbox (int32, int32)))
  
  axiom inv'0 : forall x : borrowed (GhostBox'0.t_ghostbox (int32, int32)) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_ghostbox ()))= {[@expl:precondition] [%#span3] inv'2 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox ())-> {[%#span5] inv'3 result}
      {[%#span4] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (GhostBox'0.t_ghostbox (int32, int32))) =
    [%#span6] self.final = self.current
  
  use prelude.prelude.Int
  
  use AssertInGhost_GhostMutate_Closure1_Type as Closure'0
  
  function field_0'0 [#"../assert_in_ghost.rs" 23 4 25 5] (self : Closure'0.assertinghost_ghostmutate_closure1) : borrowed (GhostBox'0.t_ghostbox (int32, int32))
    
   =
    let Closure'0.Assertinghost_ghostmutate_closure1 a = self in a
  
  predicate resolve'1 [#"../assert_in_ghost.rs" 23 4 25 5] (_1 : Closure'0.assertinghost_ghostmutate_closure1) =
    resolve'2 (field_0'0 _1)
  
  predicate resolve'0 (self : borrowed (int32, int32)) =
    [%#span6] self.final = self.current
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_ghostbox (int32, int32))) (return'  (ret:borrowed (int32, int32)))= {[@expl:precondition] [%#span7] inv'0 self}
    any
    [ return' (result:borrowed (int32, int32))-> {[%#span10] inv'1 result}
      {[%#span9] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self.current = result.current}
      {[%#span8] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self.final = result.final}
      (! return' {result}) ]
    
  
  let rec assertinghost_ghostmutate_closure1 (_1:Closure'0.assertinghost_ghostmutate_closure1) (return'  (ret:GhostBox'0.t_ghostbox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.assertinghost_ghostmutate_closure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_ghostbox (int32, int32))) ->
            Closure'0.assertinghost_ghostmutate_closure1 {_1}
              (fun (r'1:borrowed (GhostBox'0.t_ghostbox (int32, int32))) ->
                Borrow.borrow_final <GhostBox'0.t_ghostbox (int32, int32)> {r'1.current} {Borrow.get_id r'0}
                  (fun (_ret':borrowed (GhostBox'0.t_ghostbox (int32, int32))) ->
                     [ &_4 <- _ret' ] 
                    Closure'0.assertinghost_ghostmutate_closure1 {_1}
                      (fun (l'0:borrowed (GhostBox'0.t_ghostbox (int32, int32))) ->
                         [ &_1 <- Closure'0.Assertinghost_ghostmutate_closure1 ({ l'0 with current = _4.final ; }) ] 
                        s1))))
      | s1 = deref_mut'0 {_4} (fun (_ret':borrowed (int32, int32)) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = 
        [ &_3 <- { _3 with current = (let (_, l'2) = _3.current in (([%#sassert_in_ghost0] (4 : int32)), l'2)) ; } ]
        
        s1
      | s1 = -{resolve'0 _3}- s2
      | s2 = -{resolve'1 _1}- s3
      | s3 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox () = any_l ()
    | & _1 : Closure'0.assertinghost_ghostmutate_closure1 = _1
    | & _2 : () = any_l ()
    | & _3 : borrowed (int32, int32) = any_l ()
    | & _4 : borrowed (GhostBox'0.t_ghostbox (int32, int32)) = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox ())-> return' {result} ] 
end
module AssertInGhost_GhostMutate_Closure2_Type
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type assertinghost_ghostmutate_closure2  =
    | Assertinghost_ghostmutate_closure2 (GhostBox'0.t_ghostbox (int32, int32))
  
  let rec assertinghost_ghostmutate_closure2 (input:assertinghost_ghostmutate_closure2) (ret  (p:GhostBox'0.t_ghostbox (int32, int32)))= any
    [ good (p:GhostBox'0.t_ghostbox (int32, int32))-> {Assertinghost_ghostmutate_closure2 p = input} (! ret {p})
    | bad (p:GhostBox'0.t_ghostbox (int32, int32))-> {Assertinghost_ghostmutate_closure2 p <> input} {false} any ]
    
end
module AssertInGhost_GhostMutate_Closure2
  let%span sassert_in_ghost0 = "../assert_in_ghost.rs" 28 22 28 41
  
  let%span sassert_in_ghost1 = "../assert_in_ghost.rs" 29 22 29 41
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span5 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  let%span span6 = "../../../../../creusot-contracts/src/ghost.rs" 84 14 84 30
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_ghostbox ()) =
    [%#span2] true
  
  predicate inv'1 (_1 : GhostBox'0.t_ghostbox ())
  
  axiom inv'1 : forall x : GhostBox'0.t_ghostbox () . inv'1 x = true
  
  predicate invariant'0 (self : ()) =
    [%#span2] true
  
  predicate inv'0 (_1 : ())
  
  axiom inv'0 : forall x : () . inv'0 x = true
  
  use prelude.prelude.Int32
  
  use AssertInGhost_GhostMutate_Closure2_Type as Closure'0
  
  use prelude.prelude.Intrinsic
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_ghostbox ()))= {[@expl:precondition] [%#span3] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox ())-> {[%#span5] inv'1 result}
      {[%#span4] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  function inner'0 (self : GhostBox'0.t_ghostbox (int32, int32)) : (int32, int32)
  
  axiom inner'0_spec : forall self : GhostBox'0.t_ghostbox (int32, int32) . [%#span6] inner'0 self
  = CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self
  
  use prelude.prelude.Borrow
  
  function field_0'0 [#"../assert_in_ghost.rs" 27 4 30 5] (self : Closure'0.assertinghost_ghostmutate_closure2) : GhostBox'0.t_ghostbox (int32, int32)
    
   =
    let Closure'0.Assertinghost_ghostmutate_closure2 a = self in a
  
  let rec assertinghost_ghostmutate_closure2 (_1:Closure'0.assertinghost_ghostmutate_closure2) (return'  (ret:GhostBox'0.t_ghostbox ()))= bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#sassert_in_ghost0] (let (a, _) = inner'0 (field_0'0 _1) in a) = (4 : int32)} s1
      | s1 = {[@expl:assertion] [%#sassert_in_ghost1] (let (_, a) = inner'0 (field_0'0 _1) in a) = (3 : int32)} s2
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox () = any_l ()
    | & _1 : Closure'0.assertinghost_ghostmutate_closure2 = _1
    | & _2 : () = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox ())-> return' {result} ] 
end
module AssertInGhost_GhostMutate
  let%span span0 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span2 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  let%span span5 = "../../../../../creusot-contracts/src/ghost.rs" 84 14 84 30
  
  let%span span6 = "../assert_in_ghost.rs" 28 22 28 41
  
  let%span span7 = "../assert_in_ghost.rs" 29 22 29 41
  
  let%span span8 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span9 = "../../../../../creusot-contracts/src/ghost.rs" 50 22 50 26
  
  let%span span10 = "../../../../../creusot-contracts/src/ghost.rs" 48 14 48 34
  
  let%span span11 = "../../../../../creusot-contracts/src/ghost.rs" 49 14 49 34
  
  let%span span12 = "../../../../../creusot-contracts/src/ghost.rs" 50 4 50 48
  
  let%span span13 = "../assert_in_ghost.rs" 24 14 24 15
  
  let%span span14 = "../assert_in_ghost.rs" 21 25 21 29
  
  let%span span15 = "../assert_in_ghost.rs" 21 31 21 35
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'5 (self : GhostBox'0.t_ghostbox ()) =
    [%#span0] true
  
  predicate inv'5 (_1 : GhostBox'0.t_ghostbox ())
  
  axiom inv'5 : forall x : GhostBox'0.t_ghostbox () . inv'5 x = true
  
  predicate invariant'4 (self : ()) =
    [%#span0] true
  
  predicate inv'4 (_1 : ())
  
  axiom inv'4 : forall x : () . inv'4 x = true
  
  use prelude.prelude.Int32
  
  predicate inv'0 (_1 : (int32, int32))
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed (int32, int32)) =
    [%#span1] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed (int32, int32))
  
  axiom inv'3 : forall x : borrowed (int32, int32) . inv'3 x = true
  
  predicate inv'1 (_1 : GhostBox'0.t_ghostbox (int32, int32))
  
  predicate invariant'2 (self : borrowed (GhostBox'0.t_ghostbox (int32, int32))) =
    [%#span1] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : borrowed (GhostBox'0.t_ghostbox (int32, int32)))
  
  axiom inv'2 : forall x : borrowed (GhostBox'0.t_ghostbox (int32, int32)) . inv'2 x = true
  
  predicate invariant'1 (self : GhostBox'0.t_ghostbox (int32, int32)) =
    [%#span0] true
  
  axiom inv'1 : forall x : GhostBox'0.t_ghostbox (int32, int32) . inv'1 x = true
  
  predicate invariant'0 (self : (int32, int32)) =
    [%#span0] true
  
  axiom inv'0 : forall x : (int32, int32) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use AssertInGhost_GhostMutate_Closure2_Type as Closure'2
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  let rec new'1 (x:()) (return'  (ret:GhostBox'0.t_ghostbox ()))= {[@expl:precondition] [%#span2] inv'4 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox ())-> {[%#span4] inv'5 result}
      {[%#span3] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  function inner'0 (self : GhostBox'0.t_ghostbox (int32, int32)) : (int32, int32)
  
  axiom inner'0_spec : forall self : GhostBox'0.t_ghostbox (int32, int32) . [%#span5] inner'0 self
  = CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self
  
  function field_0'0 [#"../assert_in_ghost.rs" 27 4 30 5] (self : Closure'2.assertinghost_ghostmutate_closure2) : GhostBox'0.t_ghostbox (int32, int32)
    
   =
    let Closure'2.Assertinghost_ghostmutate_closure2 a = self in a
  
  let rec closure2'0 (_1:Closure'2.assertinghost_ghostmutate_closure2) (return'  (ret:GhostBox'0.t_ghostbox ()))= bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#span6] (let (a, _) = inner'0 (field_0'0 _1) in a) = (4 : int32)} s1
      | s1 = {[@expl:assertion] [%#span7] (let (_, a) = inner'0 (field_0'0 _1) in a) = (3 : int32)} s2
      | s2 = new'1 {_2} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox () = any_l ()
    | & _1 : Closure'2.assertinghost_ghostmutate_closure2 = _1
    | & _2 : () = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox ())-> return' {result} ] 
  
  predicate resolve'2 (self : borrowed (GhostBox'0.t_ghostbox (int32, int32))) =
    [%#span8] self.final = self.current
  
  use AssertInGhost_GhostMutate_Closure1_Type as Closure'1
  
  function field_0'1 [#"../assert_in_ghost.rs" 23 4 25 5] (self : Closure'1.assertinghost_ghostmutate_closure1) : borrowed (GhostBox'0.t_ghostbox (int32, int32))
    
   =
    let Closure'1.Assertinghost_ghostmutate_closure1 a = self in a
  
  predicate resolve'1 [#"../assert_in_ghost.rs" 23 4 25 5] (_1 : Closure'1.assertinghost_ghostmutate_closure1) =
    resolve'2 (field_0'1 _1)
  
  predicate resolve'0 (self : borrowed (int32, int32)) =
    [%#span8] self.final = self.current
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_ghostbox (int32, int32))) (return'  (ret:borrowed (int32, int32)))= {[@expl:precondition] [%#span9] inv'2 self}
    any
    [ return' (result:borrowed (int32, int32))-> {[%#span12] inv'3 result}
      {[%#span11] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self.current = result.current}
      {[%#span10] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self.final = result.final}
      (! return' {result}) ]
    
  
  let rec closure1'0 (_1:Closure'1.assertinghost_ghostmutate_closure1) (return'  (ret:GhostBox'0.t_ghostbox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'1.assertinghost_ghostmutate_closure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_ghostbox (int32, int32))) ->
            Closure'1.assertinghost_ghostmutate_closure1 {_1}
              (fun (r'1:borrowed (GhostBox'0.t_ghostbox (int32, int32))) ->
                Borrow.borrow_final <GhostBox'0.t_ghostbox (int32, int32)> {r'1.current} {Borrow.get_id r'0}
                  (fun (_ret':borrowed (GhostBox'0.t_ghostbox (int32, int32))) ->
                     [ &_4 <- _ret' ] 
                    Closure'1.assertinghost_ghostmutate_closure1 {_1}
                      (fun (l'0:borrowed (GhostBox'0.t_ghostbox (int32, int32))) ->
                         [ &_1 <- Closure'1.Assertinghost_ghostmutate_closure1 ({ l'0 with current = _4.final ; }) ] 
                        s1))))
      | s1 = deref_mut'0 {_4} (fun (_ret':borrowed (int32, int32)) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_3 <- { _3 with current = (let (_, l'2) = _3.current in (([%#span13] (4 : int32)), l'2)) ; } ] s1
      | s1 = -{resolve'0 _3}- s2
      | s2 = -{resolve'1 _1}- s3
      | s3 = new'1 {_2} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox () = any_l ()
    | & _1 : Closure'1.assertinghost_ghostmutate_closure1 = _1
    | & _2 : () = any_l ()
    | & _3 : borrowed (int32, int32) = any_l ()
    | & _4 : borrowed (GhostBox'0.t_ghostbox (int32, int32)) = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox ())-> return' {result} ] 
  
  use AssertInGhost_GhostMutate_Closure0_Type as Closure'0
  
  let rec new'0 (x:(int32, int32)) (return'  (ret:GhostBox'0.t_ghostbox (int32, int32)))= {[@expl:precondition] [%#span2] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox (int32, int32))-> {[%#span4] inv'1 result}
      {[%#span3] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  let rec closure0'0 (_1:Closure'0.assertinghost_ghostmutate_closure0) (return'  (ret:GhostBox'0.t_ghostbox (int32, int32)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- (([%#span14] (2 : int32)), ([%#span15] (3 : int32))) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox (int32, int32)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_ghostbox (int32, int32) = any_l () | & _2 : (int32, int32) = any_l () ] 
    [ return' (result:GhostBox'0.t_ghostbox (int32, int32))-> return' {result} ]
    
  
  let rec ghost_mutate (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- Closure'0.Assertinghost_ghostmutate_closure0 ] s1
      | s1 = closure0'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox (int32, int32)) ->  [ &p <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <GhostBox'0.t_ghostbox (int32, int32)> {p}
          (fun (_ret':borrowed (GhostBox'0.t_ghostbox (int32, int32))) ->  [ &_6 <- _ret' ]  [ &p <- _6.final ] s1)
      | s1 =  [ &_5 <- Closure'1.Assertinghost_ghostmutate_closure1 _6 ] s2
      | s2 = closure1'0 {_5} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_9 <- Closure'2.Assertinghost_ghostmutate_closure2 p ] s1
      | s1 = closure2'0 {_9} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_8 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & p : GhostBox'0.t_ghostbox (int32, int32) = any_l ()
    | & _2 : Closure'0.assertinghost_ghostmutate_closure0 = any_l ()
    | & _3 : () = any_l ()
    | & _4 : GhostBox'0.t_ghostbox () = any_l ()
    | & _5 : Closure'1.assertinghost_ghostmutate_closure1 = any_l ()
    | & _6 : borrowed (GhostBox'0.t_ghostbox (int32, int32)) = any_l ()
    | & _7 : () = any_l ()
    | & _8 : GhostBox'0.t_ghostbox () = any_l ()
    | & _9 : Closure'2.assertinghost_ghostmutate_closure2 = any_l ()
    | & _11 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
