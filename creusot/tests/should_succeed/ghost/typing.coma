module T_typing__NonCopy [#"typing.rs" 4 0 4 14]
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_NonCopy  =
    | C_NonCopy int32
  
  let rec t_NonCopy (input:t_NonCopy) (ret  (field_0:int32))= any
    [ good (field_0:int32)-> {C_NonCopy field_0 = input} (! ret {field_0}) ]
    
  
  function t_NonCopy__0 (self : t_NonCopy) : int32 =
    match self with
      | C_NonCopy a -> a
      end
end
module T_creusot_contracts__ghost__GhostBox [#"../../../../creusot-contracts/src/ghost.rs" 27 0 27 22]
  type t_GhostBox 't =
    | C_GhostBox 't
  
  let rec t_GhostBox < 't > (input:t_GhostBox 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_GhostBox field_0 = input} (! ret {field_0}) ]
    
  
  function t_GhostBox__0 (self : t_GhostBox 't) : 't =
    match self with
      | C_GhostBox a -> a
      end
end
module T_typing__ghost_enter_ghost__qyClosure0 [#"typing.rs" 15 17 15 35]
  type m_typing__ghost_enter_ghost__qyClosure0  =
    | M_typing__ghost_enter_ghost__qyClosure0
  
  let rec m_typing__ghost_enter_ghost__qyClosure0 (input:m_typing__ghost_enter_ghost__qyClosure0) (ret  )= any
    [ good -> {M_typing__ghost_enter_ghost__qyClosure0  = input} (! ret) ]
    
end
module M_typing__ghost_enter_ghost__qyClosure0 [#"typing.rs" 15 17 15 35]
  let%span styping0 = "typing.rs" 15 32 15 33
  let%span sghost1 = "../../../../creusot-contracts/src/ghost.rs" 146 15 146 16
  let%span sghost2 = "../../../../creusot-contracts/src/ghost.rs" 144 14 144 28
  let%span sghost3 = "../../../../creusot-contracts/src/ghost.rs" 146 4 146 28
  
  use T_typing__NonCopy as NonCopy'0
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'1 (_1 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  axiom inv_axiom'1 [@rewrite] : forall x : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : NonCopy'0.t_NonCopy)
  
  axiom inv_axiom'0 [@rewrite] : forall x : NonCopy'0.t_NonCopy [inv'0 x] . inv'0 x = true
  
  use T_typing__ghost_enter_ghost__qyClosure0 as Closure'0
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:NonCopy'0.t_NonCopy) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= {[@expl:precondition] [%#sghost1] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> {[%#sghost3] inv'1 result}
      {[%#sghost2] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec m_typing__ghost_enter_ghost__qyClosure0 (_1:Closure'0.m_typing__ghost_enter_ghost__qyClosure0) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#styping0] (1 : int32)) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l () | & _2 : NonCopy'0.t_NonCopy = any_l () ] 
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> return' {result} ]
    
end
module T_typing__ghost_enter_ghost__qyClosure1 [#"typing.rs" 16 17 16 35]
  type m_typing__ghost_enter_ghost__qyClosure1  =
    | M_typing__ghost_enter_ghost__qyClosure1
  
  let rec m_typing__ghost_enter_ghost__qyClosure1 (input:m_typing__ghost_enter_ghost__qyClosure1) (ret  )= any
    [ good -> {M_typing__ghost_enter_ghost__qyClosure1  = input} (! ret) ]
    
end
module M_typing__ghost_enter_ghost__qyClosure1 [#"typing.rs" 16 17 16 35]
  let%span styping0 = "typing.rs" 16 32 16 33
  let%span sghost1 = "../../../../creusot-contracts/src/ghost.rs" 146 15 146 16
  let%span sghost2 = "../../../../creusot-contracts/src/ghost.rs" 144 14 144 28
  let%span sghost3 = "../../../../creusot-contracts/src/ghost.rs" 146 4 146 28
  
  use T_typing__NonCopy as NonCopy'0
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'1 (_1 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  axiom inv_axiom'1 [@rewrite] : forall x : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : NonCopy'0.t_NonCopy)
  
  axiom inv_axiom'0 [@rewrite] : forall x : NonCopy'0.t_NonCopy [inv'0 x] . inv'0 x = true
  
  use T_typing__ghost_enter_ghost__qyClosure1 as Closure'0
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:NonCopy'0.t_NonCopy) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= {[@expl:precondition] [%#sghost1] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> {[%#sghost3] inv'1 result}
      {[%#sghost2] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec m_typing__ghost_enter_ghost__qyClosure1 (_1:Closure'0.m_typing__ghost_enter_ghost__qyClosure1) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#styping0] (2 : int32)) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l () | & _2 : NonCopy'0.t_NonCopy = any_l () ] 
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> return' {result} ]
    
end
module T_typing__ghost_enter_ghost__qyClosure2 [#"typing.rs" 17 20 17 38]
  type m_typing__ghost_enter_ghost__qyClosure2  =
    | M_typing__ghost_enter_ghost__qyClosure2
  
  let rec m_typing__ghost_enter_ghost__qyClosure2 (input:m_typing__ghost_enter_ghost__qyClosure2) (ret  )= any
    [ good -> {M_typing__ghost_enter_ghost__qyClosure2  = input} (! ret) ]
    
end
module M_typing__ghost_enter_ghost__qyClosure2 [#"typing.rs" 17 20 17 38]
  let%span styping0 = "typing.rs" 17 35 17 36
  let%span sghost1 = "../../../../creusot-contracts/src/ghost.rs" 146 15 146 16
  let%span sghost2 = "../../../../creusot-contracts/src/ghost.rs" 144 14 144 28
  let%span sghost3 = "../../../../creusot-contracts/src/ghost.rs" 146 4 146 28
  
  use T_typing__NonCopy as NonCopy'0
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'1 (_1 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  axiom inv_axiom'1 [@rewrite] : forall x : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : NonCopy'0.t_NonCopy)
  
  axiom inv_axiom'0 [@rewrite] : forall x : NonCopy'0.t_NonCopy [inv'0 x] . inv'0 x = true
  
  use T_typing__ghost_enter_ghost__qyClosure2 as Closure'0
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:NonCopy'0.t_NonCopy) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= {[@expl:precondition] [%#sghost1] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> {[%#sghost3] inv'1 result}
      {[%#sghost2] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec m_typing__ghost_enter_ghost__qyClosure2 (_1:Closure'0.m_typing__ghost_enter_ghost__qyClosure2) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#styping0] (3 : int32)) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l () | & _2 : NonCopy'0.t_NonCopy = any_l () ] 
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> return' {result} ]
    
end
module T_typing__ghost_enter_ghost__qyClosure3 [#"typing.rs" 19 4 23 5]
  use T_typing__NonCopy as NonCopy'0
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  use prelude.prelude.Borrow
  
  type m_typing__ghost_enter_ghost__qyClosure3  =
    | M_typing__ghost_enter_ghost__qyClosure3 (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  let rec m_typing__ghost_enter_ghost__qyClosure3 (input:m_typing__ghost_enter_ghost__qyClosure3) (ret  (g_read:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (g_mut:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (g_move:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= any
    [ good (g_read:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (g_mut:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (g_move:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> {M_typing__ghost_enter_ghost__qyClosure3 g_read g_mut g_move
      = input}
      (! ret {g_read} {g_mut} {g_move}) ]
    
end
module M_typing__ghost_enter_ghost__qyClosure3 [#"typing.rs" 19 4 23 5]
  let%span styping0 = "typing.rs" 22 25 22 26
  let%span sghost1 = "../../../../creusot-contracts/src/ghost.rs" 51 14 51 18
  let%span sghost2 = "../../../../creusot-contracts/src/ghost.rs" 50 14 50 35
  let%span sghost3 = "../../../../creusot-contracts/src/ghost.rs" 51 4 51 36
  let%span sghost4 = "../../../../creusot-contracts/src/ghost.rs" 66 22 66 26
  let%span sghost5 = "../../../../creusot-contracts/src/ghost.rs" 65 14 65 36
  let%span sghost6 = "../../../../creusot-contracts/src/ghost.rs" 66 4 66 48
  let%span sghost7 = "../../../../creusot-contracts/src/ghost.rs" 146 15 146 16
  let%span sghost8 = "../../../../creusot-contracts/src/ghost.rs" 144 14 144 28
  let%span sghost9 = "../../../../creusot-contracts/src/ghost.rs" 146 4 146 28
  let%span sresolve10 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'5 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv_axiom'5 [@rewrite] : forall x : GhostBox'0.t_GhostBox () [inv'5 x] . inv'5 x = true
  
  predicate inv'4 (_1 : ())
  
  axiom inv_axiom'4 [@rewrite] : forall x : () [inv'4 x] . inv'4 x = true
  
  use T_typing__NonCopy as NonCopy'0
  
  use prelude.prelude.Borrow
  
  predicate inv'3 (_1 : borrowed (NonCopy'0.t_NonCopy))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (NonCopy'0.t_NonCopy) [inv'3 x] . inv'3 x = true
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'2 (_1 : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) [inv'2 x] . inv'2 x
  = true
  
  predicate inv'1 (_1 : NonCopy'0.t_NonCopy)
  
  axiom inv_axiom'1 [@rewrite] : forall x : NonCopy'0.t_NonCopy [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  axiom inv_axiom'0 [@rewrite] : forall x : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#sghost7] inv'4 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#sghost9] inv'5 result}
      {[%#sghost8] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) =
    [%#sresolve10] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) =
    resolve'5 _1
  
  use T_typing__ghost_enter_ghost__qyClosure3 as Closure'0
  
  function field_1'0 [#"typing.rs" 19 4 23 5] (self : Closure'0.m_typing__ghost_enter_ghost__qyClosure3) : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
    
   =
    let Closure'0.M_typing__ghost_enter_ghost__qyClosure3 _ a _ = self in a
  
  predicate resolve'3 [#"typing.rs" 19 4 23 5] (_1 : Closure'0.m_typing__ghost_enter_ghost__qyClosure3) =
    resolve'4 (field_1'0 _1)
  
  predicate resolve'1 (_1 : Closure'0.m_typing__ghost_enter_ghost__qyClosure3) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed (NonCopy'0.t_NonCopy)) =
    [%#sresolve10] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (NonCopy'0.t_NonCopy)) =
    resolve'2 _1
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (return'  (ret:borrowed (NonCopy'0.t_NonCopy)))= {[@expl:precondition] [%#sghost4] inv'2 self}
    any
    [ return' (result:borrowed (NonCopy'0.t_NonCopy))-> {[%#sghost6] inv'3 result}
      {[%#sghost5] result
      = Borrow.borrow_logic (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.current) (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.final) (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  let rec deref'0 (self:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (return'  (ret:NonCopy'0.t_NonCopy))= {[@expl:precondition] [%#sghost1] inv'0 self}
    any
    [ return' (result:NonCopy'0.t_NonCopy)-> {[%#sghost3] inv'1 result}
      {[%#sghost2] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec m_typing__ghost_enter_ghost__qyClosure3 (_1:Closure'0.m_typing__ghost_enter_ghost__qyClosure3) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_typing__ghost_enter_ghost__qyClosure3 {_1}
          (fun (r'0:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (r'1:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (r'2:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->
            deref'0 {r'0} (fun (_ret':NonCopy'0.t_NonCopy) ->  [ &_3 <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_5 <- NonCopy'0.C_NonCopy ([%#styping0] (4 : int32)) ] s1
      | s1 = Closure'0.m_typing__ghost_enter_ghost__qyClosure3 {_1}
          (fun (r'0:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (r'1:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (r'2:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->
            Borrow.borrow_final <GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)> {r'1.current} {Borrow.get_id r'1}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) ->
                 [ &_7 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_typing__ghost_enter_ghost__qyClosure3 r'0 ({ r'1 with current = _ret'.final ; }) r'2 ]
                
                s2))
      | s2 = deref_mut'0 {_7} (fun (_ret':borrowed (NonCopy'0.t_NonCopy)) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_6 <- { _6 with current = _5 ; } ] s1
      | s1 = -{resolve'0 _6}- s2
      | s2 = -{resolve'1 _1}- s3
      | s3 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb3 ]
      
    | bb3 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_typing__ghost_enter_ghost__qyClosure3 = _1
    | & _2 : () = any_l ()
    | & _3 : NonCopy'0.t_NonCopy = any_l ()
    | & _5 : NonCopy'0.t_NonCopy = any_l ()
    | & _6 : borrowed (NonCopy'0.t_NonCopy) = any_l ()
    | & _7 : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
end
module M_typing__ghost_enter_ghost [#"typing.rs" 14 0 14 26]
  let%span styping0 = "typing.rs" 25 18 25 30
  let%span styping1 = "typing.rs" 26 18 26 29
  let%span styping2 = "typing.rs" 15 32 15 33
  let%span styping3 = "typing.rs" 16 32 16 33
  let%span styping4 = "typing.rs" 17 35 17 36
  let%span styping5 = "typing.rs" 22 25 22 26
  let%span sghost6 = "../../../../creusot-contracts/src/ghost.rs" 80 4 80 12
  let%span sghost7 = "../../../../creusot-contracts/src/ghost.rs" 146 15 146 16
  let%span sghost8 = "../../../../creusot-contracts/src/ghost.rs" 144 14 144 28
  let%span sghost9 = "../../../../creusot-contracts/src/ghost.rs" 146 4 146 28
  let%span sghost10 = "../../../../creusot-contracts/src/ghost.rs" 51 14 51 18
  let%span sghost11 = "../../../../creusot-contracts/src/ghost.rs" 50 14 50 35
  let%span sghost12 = "../../../../creusot-contracts/src/ghost.rs" 51 4 51 36
  let%span sghost13 = "../../../../creusot-contracts/src/ghost.rs" 66 22 66 26
  let%span sghost14 = "../../../../creusot-contracts/src/ghost.rs" 65 14 65 36
  let%span sghost15 = "../../../../creusot-contracts/src/ghost.rs" 66 4 66 48
  let%span sboxed16 = "../../../../creusot-contracts/src/std/boxed.rs" 18 8 18 22
  let%span sresolve17 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span styping18 = "typing.rs" 10 8 10 29
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'7 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv_axiom'7 [@rewrite] : forall x : GhostBox'0.t_GhostBox () [inv'7 x] . inv'7 x = true
  
  predicate inv'6 (_1 : ())
  
  axiom inv_axiom'6 [@rewrite] : forall x : () [inv'6 x] . inv'6 x = true
  
  use T_typing__NonCopy as NonCopy'0
  
  use prelude.prelude.Borrow
  
  predicate inv'5 (_1 : borrowed (NonCopy'0.t_NonCopy))
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed (NonCopy'0.t_NonCopy) [inv'5 x] . inv'5 x = true
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'4 (_1 : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) [inv'4 x] . inv'4 x
  = true
  
  predicate inv'3 (_1 : NonCopy'0.t_NonCopy)
  
  axiom inv_axiom'3 [@rewrite] : forall x : NonCopy'0.t_NonCopy [inv'3 x] . inv'3 x = true
  
  predicate inv'2 (_1 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  axiom inv_axiom'2 [@rewrite] : forall x : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) [inv'2 x] . inv'2 x = true
  
  predicate inv'1 (_1 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  axiom inv_axiom'1 [@rewrite] : forall x : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : NonCopy'0.t_NonCopy)
  
  axiom inv_axiom'0 [@rewrite] : forall x : NonCopy'0.t_NonCopy [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use T_typing__NonCopy as T_typing__NonCopy
  
  use prelude.prelude.Int
  
  function view'2 [#"typing.rs" 9 4 9 33] (self : NonCopy'0.t_NonCopy) : int =
    [%#styping18] Int32.to_int (T_typing__NonCopy.t_NonCopy__0 self)
  
  function view'1 (self : NonCopy'0.t_NonCopy) : int =
    [%#sboxed16] view'2 self
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  function view'0 (self : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) : int =
    [%#sghost6] view'1 (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self)
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'1 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#sghost7] inv'6 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#sghost9] inv'7 result}
      {[%#sghost8] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) =
    [%#sresolve17] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) =
    resolve'5 _1
  
  use T_typing__ghost_enter_ghost__qyClosure3 as Closure'3
  
  function field_1'0 [#"typing.rs" 19 4 23 5] (self : Closure'3.m_typing__ghost_enter_ghost__qyClosure3) : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
    
   =
    let Closure'3.M_typing__ghost_enter_ghost__qyClosure3 _ a _ = self in a
  
  predicate resolve'3 [#"typing.rs" 19 4 23 5] (_1 : Closure'3.m_typing__ghost_enter_ghost__qyClosure3) =
    resolve'4 (field_1'0 _1)
  
  predicate resolve'1 (_1 : Closure'3.m_typing__ghost_enter_ghost__qyClosure3) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed (NonCopy'0.t_NonCopy)) =
    [%#sresolve17] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (NonCopy'0.t_NonCopy)) =
    resolve'2 _1
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (return'  (ret:borrowed (NonCopy'0.t_NonCopy)))= {[@expl:precondition] [%#sghost13] inv'4 self}
    any
    [ return' (result:borrowed (NonCopy'0.t_NonCopy))-> {[%#sghost15] inv'5 result}
      {[%#sghost14] result
      = Borrow.borrow_logic (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.current) (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.final) (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  let rec deref'0 (self:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (return'  (ret:NonCopy'0.t_NonCopy))= {[@expl:precondition] [%#sghost10] inv'2 self}
    any
    [ return' (result:NonCopy'0.t_NonCopy)-> {[%#sghost12] inv'3 result}
      {[%#sghost11] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  let rec closure3'0 (_1:Closure'3.m_typing__ghost_enter_ghost__qyClosure3) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'3.m_typing__ghost_enter_ghost__qyClosure3 {_1}
          (fun (r'0:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (r'1:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (r'2:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->
            deref'0 {r'0} (fun (_ret':NonCopy'0.t_NonCopy) ->  [ &_3 <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_5 <- NonCopy'0.C_NonCopy ([%#styping5] (4 : int32)) ] s1
      | s1 = Closure'3.m_typing__ghost_enter_ghost__qyClosure3 {_1}
          (fun (r'0:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (r'1:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (r'2:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->
            Borrow.borrow_final <GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)> {r'1.current} {Borrow.get_id r'1}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) ->
                 [ &_7 <- _ret' ] 
                
                [ &_1 <- Closure'3.M_typing__ghost_enter_ghost__qyClosure3 r'0 ({ r'1 with current = _ret'.final ; }) r'2 ]
                
                s2))
      | s2 = deref_mut'0 {_7} (fun (_ret':borrowed (NonCopy'0.t_NonCopy)) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_6 <- { _6 with current = _5 ; } ] s1
      | s1 = -{resolve'0 _6}- s2
      | s2 = -{resolve'1 _1}- s3
      | s3 = new'1 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb3 ]
      
    | bb3 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'3.m_typing__ghost_enter_ghost__qyClosure3 = _1
    | & _2 : () = any_l ()
    | & _3 : NonCopy'0.t_NonCopy = any_l ()
    | & _5 : NonCopy'0.t_NonCopy = any_l ()
    | & _6 : borrowed (NonCopy'0.t_NonCopy) = any_l ()
    | & _7 : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
  
  let rec new'0 (x:NonCopy'0.t_NonCopy) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= {[@expl:precondition] [%#sghost7] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> {[%#sghost9] inv'1 result}
      {[%#sghost8] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  use T_typing__ghost_enter_ghost__qyClosure2 as Closure'2
  
  let rec closure2'0 (_1:Closure'2.m_typing__ghost_enter_ghost__qyClosure2) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#styping4] (3 : int32)) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l () | & _2 : NonCopy'0.t_NonCopy = any_l () ] 
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> return' {result} ]
    
  
  use T_typing__ghost_enter_ghost__qyClosure1 as Closure'1
  
  let rec closure1'0 (_1:Closure'1.m_typing__ghost_enter_ghost__qyClosure1) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#styping3] (2 : int32)) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l () | & _2 : NonCopy'0.t_NonCopy = any_l () ] 
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> return' {result} ]
    
  
  use T_typing__ghost_enter_ghost__qyClosure0 as Closure'0
  
  let rec closure0'0 (_1:Closure'0.m_typing__ghost_enter_ghost__qyClosure0) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#styping2] (1 : int32)) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l () | & _2 : NonCopy'0.t_NonCopy = any_l () ] 
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_enter_ghost (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- Closure'0.M_typing__ghost_enter_ghost__qyClosure0 ] s1
      | s1 = closure0'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &g_move <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_5 <- Closure'1.M_typing__ghost_enter_ghost__qyClosure1 ] s1
      | s1 = closure1'0 {_5} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &g_read <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_8 <- Closure'2.M_typing__ghost_enter_ghost__qyClosure2 ] s1
      | s1 = closure2'0 {_8} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &g_mut <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)> {g_mut}
          (fun (_ret':borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) ->
             [ &_13 <- _ret' ] 
             [ &g_mut <- _ret'.final ] 
            s1)
      | s1 =  [ &_11 <- Closure'3.M_typing__ghost_enter_ghost__qyClosure3 g_read _13 g_move ] s2
      | s2 = closure3'0 {_11} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_10 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = bb5
    | bb5 = s0 [ s0 = {[@expl:assertion] [%#styping0] view'0 g_read = 2} s1 | s1 = bb6 ] 
    | bb6 = s0 [ s0 = {[@expl:assertion] [%#styping1] view'0 g_mut = 4} s1 | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & g_move : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l ()
    | & _2 : Closure'0.m_typing__ghost_enter_ghost__qyClosure0 = any_l ()
    | & _3 : () = any_l ()
    | & g_read : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l ()
    | & _5 : Closure'1.m_typing__ghost_enter_ghost__qyClosure1 = any_l ()
    | & _6 : () = any_l ()
    | & g_mut : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l ()
    | & _8 : Closure'2.m_typing__ghost_enter_ghost__qyClosure2 = any_l ()
    | & _9 : () = any_l ()
    | & _10 : GhostBox'0.t_GhostBox () = any_l ()
    | & _11 : Closure'3.m_typing__ghost_enter_ghost__qyClosure3 = any_l ()
    | & _13 : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) = any_l ()
    | & _15 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module T_typing__copy_enter_ghost__qyClosure0 [#"typing.rs" 34 4 38 5]
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_typing__copy_enter_ghost__qyClosure0  =
    | M_typing__copy_enter_ghost__qyClosure0 int32 () (int32, int32)
  
  let rec m_typing__copy_enter_ghost__qyClosure0 (input:m_typing__copy_enter_ghost__qyClosure0) (ret  (x:int32) (unit:()) (pair:(int32, int32)))= any
    [ good (x:int32) (unit:()) (pair:(int32, int32))-> {M_typing__copy_enter_ghost__qyClosure0 x unit pair = input}
      (! ret {x} {unit} {pair}) ]
    
end
module M_typing__copy_enter_ghost__qyClosure0 [#"typing.rs" 34 4 38 5]
  let%span sghost0 = "../../../../creusot-contracts/src/ghost.rs" 146 15 146 16
  let%span sghost1 = "../../../../creusot-contracts/src/ghost.rs" 144 14 144 28
  let%span sghost2 = "../../../../creusot-contracts/src/ghost.rs" 146 4 146 28
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'1 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : GhostBox'0.t_GhostBox () [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#sghost0] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#sghost2] inv'1 result}
      {[%#sghost1] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use T_typing__copy_enter_ghost__qyClosure0 as Closure'0
  
  meta "compute_max_steps" 1000000
  
  let rec m_typing__copy_enter_ghost__qyClosure0 (_1:Closure'0.m_typing__copy_enter_ghost__qyClosure0) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_typing__copy_enter_ghost__qyClosure0 {_1}
          (fun (r'0:int32) (r'1:()) (r'2:(int32, int32)) ->  [ &_x <- r'0 ] s1)
      | s1 = Closure'0.m_typing__copy_enter_ghost__qyClosure0 {_1}
          (fun (r'3:int32) (r'4:()) (r'5:(int32, int32)) ->  [ &_pair <- r'5 ] s2)
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_typing__copy_enter_ghost__qyClosure0 = _1
    | & _2 : () = any_l ()
    | & _x : int32 = any_l ()
    | & _pair : (int32, int32) = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
end
module M_typing__copy_enter_ghost [#"typing.rs" 29 0 29 25]
  let%span styping0 = "typing.rs" 30 12 30 16
  let%span styping1 = "typing.rs" 32 16 32 17
  let%span styping2 = "typing.rs" 32 19 32 21
  let%span styping3 = "typing.rs" 39 18 39 25
  let%span styping4 = "typing.rs" 40 18 40 47
  let%span sghost5 = "../../../../creusot-contracts/src/ghost.rs" 146 15 146 16
  let%span sghost6 = "../../../../creusot-contracts/src/ghost.rs" 144 14 144 28
  let%span sghost7 = "../../../../creusot-contracts/src/ghost.rs" 146 4 146 28
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'1 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : GhostBox'0.t_GhostBox () [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#sghost5] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#sghost7] inv'1 result}
      {[%#sghost6] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use T_typing__copy_enter_ghost__qyClosure0 as Closure'0
  
  let rec closure0'0 (_1:Closure'0.m_typing__copy_enter_ghost__qyClosure0) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_typing__copy_enter_ghost__qyClosure0 {_1}
          (fun (r'0:int32) (r'1:()) (r'2:(int32, int32)) ->  [ &_x <- r'0 ] s1)
      | s1 = Closure'0.m_typing__copy_enter_ghost__qyClosure0 {_1}
          (fun (r'3:int32) (r'4:()) (r'5:(int32, int32)) ->  [ &_pair <- r'5 ] s2)
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_typing__copy_enter_ghost__qyClosure0 = _1
    | & _2 : () = any_l ()
    | & _x : int32 = any_l ()
    | & _pair : (int32, int32) = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
  
  meta "compute_max_steps" 1000000
  
  let rec copy_enter_ghost (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#styping0] (2 : int32) ] s1
      | s1 =  [ &pair <- (([%#styping1] (6 : int32)), ([%#styping2] (42 : int32))) ] s2
      | s2 =  [ &_5 <- Closure'0.M_typing__copy_enter_ghost__qyClosure0 x unit pair ] s3
      | s3 = closure0'0 {_5} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = bb2
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#styping3] Int32.to_int x = 2} s1
      | s1 = {[@expl:assertion] [%#styping4] Int32.to_int (let (a, _) = pair in a) = 6
        /\ Int32.to_int (let (_, a) = pair in a) = 42}
        s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & unit : () = any_l ()
    | & pair : (int32, int32) = any_l ()
    | & _4 : GhostBox'0.t_GhostBox () = any_l ()
    | & _5 : Closure'0.m_typing__copy_enter_ghost__qyClosure0 = any_l ()
    | & _9 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_typing__qyi7696239405685825375 [#"typing.rs" 5 0 5 21] (* <NonCopy as creusot_contracts::View> *)
  
end
