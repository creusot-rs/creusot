
module T_typing__NonCopy
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_NonCopy  =
    | C_NonCopy int32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonCopy (input:t_NonCopy) (ret  (field_0:int32))= any
    [ good (field_0:int32)-> {C_NonCopy field_0 = input} (! ret {field_0})
    | bad (field_0:int32)-> {C_NonCopy field_0 <> input} {false} any ]
    
  
  function t_NonCopy__0 (self : t_NonCopy) : int32 =
    match self with
      | C_NonCopy a -> a
      end
end
module T_creusot_contracts__ghost__GhostBox
  type t_GhostBox 't =
    | C_GhostBox 't
  
  function any_l (_ : 'b) : 'a
  
  let rec t_GhostBox < 't > (input:t_GhostBox 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_GhostBox field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_GhostBox field_0 <> input} {false} any ]
    
  
  function t_GhostBox__0 (self : t_GhostBox 't) : 't =
    match self with
      | C_GhostBox a -> a
      end
end
module M_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z_Type
  use T_typing__NonCopy as NonCopy'0
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  use prelude.prelude.Int32
  
  type m_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z  =
    | M_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z
  
  let rec m_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z (input:m_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z) (ret  )= any
    [ good -> {M_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z  = input} (! ret)
    | bad -> {M_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z  <> input} {false} any ]
    
end
module M_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z
  let%span styping0 = "../typing.rs" 15 32 15 33
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  use T_typing__NonCopy as NonCopy'0
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) =
    [%#span1] true
  
  predicate inv'1 (_1 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  axiom inv'1 : forall x : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) . inv'1 x = true
  
  predicate invariant'0 (self : NonCopy'0.t_NonCopy) =
    [%#span1] true
  
  predicate inv'0 (_1 : NonCopy'0.t_NonCopy)
  
  axiom inv'0 : forall x : NonCopy'0.t_NonCopy . inv'0 x = true
  
  use prelude.prelude.Int32
  
  use M_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:NonCopy'0.t_NonCopy) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= {[@expl:precondition] [%#span2] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> {[%#span4] inv'1 result}
      {[%#span3] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  let rec m_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z (_1:Closure'0.m_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#styping0] (1 : int32)) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l () | & _2 : NonCopy'0.t_NonCopy = any_l () ] 
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> return' {result} ]
    
end
module M_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z_Type
  use T_typing__NonCopy as NonCopy'0
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  use prelude.prelude.Int32
  
  type m_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z  =
    | M_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z
  
  let rec m_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z (input:m_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z) (ret  )= any
    [ good -> {M_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z  = input} (! ret)
    | bad -> {M_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z  <> input} {false} any ]
    
end
module M_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z
  let%span styping0 = "../typing.rs" 16 32 16 33
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  use T_typing__NonCopy as NonCopy'0
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) =
    [%#span1] true
  
  predicate inv'1 (_1 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  axiom inv'1 : forall x : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) . inv'1 x = true
  
  predicate invariant'0 (self : NonCopy'0.t_NonCopy) =
    [%#span1] true
  
  predicate inv'0 (_1 : NonCopy'0.t_NonCopy)
  
  axiom inv'0 : forall x : NonCopy'0.t_NonCopy . inv'0 x = true
  
  use prelude.prelude.Int32
  
  use M_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z_Type as Closure'0
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:NonCopy'0.t_NonCopy) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= {[@expl:precondition] [%#span2] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> {[%#span4] inv'1 result}
      {[%#span3] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  let rec m_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z (_1:Closure'0.m_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#styping0] (2 : int32)) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l () | & _2 : NonCopy'0.t_NonCopy = any_l () ] 
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> return' {result} ]
    
end
module M_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z_Type
  use T_typing__NonCopy as NonCopy'0
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  use prelude.prelude.Int32
  
  type m_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z  =
    | M_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z
  
  let rec m_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z (input:m_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z) (ret  )= any
    [ good -> {M_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z  = input} (! ret)
    | bad -> {M_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z  <> input} {false} any ]
    
end
module M_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z
  let%span styping0 = "../typing.rs" 17 35 17 36
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  use T_typing__NonCopy as NonCopy'0
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) =
    [%#span1] true
  
  predicate inv'1 (_1 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  axiom inv'1 : forall x : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) . inv'1 x = true
  
  predicate invariant'0 (self : NonCopy'0.t_NonCopy) =
    [%#span1] true
  
  predicate inv'0 (_1 : NonCopy'0.t_NonCopy)
  
  axiom inv'0 : forall x : NonCopy'0.t_NonCopy . inv'0 x = true
  
  use prelude.prelude.Int32
  
  use M_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z_Type as Closure'0
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:NonCopy'0.t_NonCopy) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= {[@expl:precondition] [%#span2] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> {[%#span4] inv'1 result}
      {[%#span3] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  let rec m_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z (_1:Closure'0.m_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#styping0] (3 : int32)) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l () | & _2 : NonCopy'0.t_NonCopy = any_l () ] 
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> return' {result} ]
    
end
module M_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z_Type
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  use prelude.prelude.Int32
  
  use T_typing__NonCopy as NonCopy'0
  
  use prelude.prelude.Borrow
  
  type m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z  =
    | M_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  let rec m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z (input:m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z) (ret  (g_read:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (g_mut:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (g_move:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= any
    [ good (g_read:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (g_mut:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (g_move:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> {M_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z g_read g_mut g_move
      = input}
      (! ret {g_read} {g_mut} {g_move})
    | bad (g_read:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (g_mut:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (g_move:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> {M_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z g_read g_mut g_move
      <> input}
      {false}
      any ]
    
end
module M_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z
  let%span styping0 = "../typing.rs" 22 25 22 26
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span5 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span6 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  let%span span7 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span8 = "../../../../../creusot-contracts/src/ghost.rs" 50 22 50 26
  
  let%span span9 = "../../../../../creusot-contracts/src/ghost.rs" 48 14 48 34
  
  let%span span10 = "../../../../../creusot-contracts/src/ghost.rs" 49 14 49 34
  
  let%span span11 = "../../../../../creusot-contracts/src/ghost.rs" 50 4 50 48
  
  let%span span12 = "../../../../../creusot-contracts/src/ghost.rs" 41 14 41 18
  
  let%span span13 = "../../../../../creusot-contracts/src/ghost.rs" 40 14 40 34
  
  let%span span14 = "../../../../../creusot-contracts/src/ghost.rs" 41 4 41 36
  
  use T_typing__NonCopy as NonCopy'0
  
  predicate invariant'7 (self : NonCopy'0.t_NonCopy) =
    [%#span1] true
  
  predicate inv'7 (_1 : NonCopy'0.t_NonCopy)
  
  axiom inv'7 : forall x : NonCopy'0.t_NonCopy . inv'7 x = true
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate invariant'6 (self : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) =
    [%#span1] true
  
  predicate inv'6 (_1 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  axiom inv'6 : forall x : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) . inv'6 x = true
  
  predicate invariant'5 (self : GhostBox'0.t_GhostBox ()) =
    [%#span1] true
  
  predicate inv'5 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv'5 : forall x : GhostBox'0.t_GhostBox () . inv'5 x = true
  
  predicate invariant'4 (self : ()) =
    [%#span1] true
  
  predicate inv'4 (_1 : ())
  
  axiom inv'4 : forall x : () . inv'4 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed (NonCopy'0.t_NonCopy)) =
    [%#span2] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'3 (_1 : borrowed (NonCopy'0.t_NonCopy))
  
  axiom inv'3 : forall x : borrowed (NonCopy'0.t_NonCopy) . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) =
    [%#span2] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'2 (_1 : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))
  
  axiom inv'2 : forall x : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) . inv'2 x = true
  
  predicate invariant'1 (self : NonCopy'0.t_NonCopy) =
    [%#span3] inv'7 self
  
  predicate inv'1 (_1 : NonCopy'0.t_NonCopy)
  
  axiom inv'1 : forall x : NonCopy'0.t_NonCopy . inv'1 x = true
  
  predicate invariant'0 (self : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) =
    [%#span3] inv'6 self
  
  predicate inv'0 (_1 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  axiom inv'0 : forall x : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#span4] inv'4 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#span6] inv'5 result}
      {[%#span5] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) =
    [%#span7] self.final = self.current
  
  use prelude.prelude.Int32
  
  use M_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z_Type as Closure'0
  
  function field_1'0 [#"../typing.rs" 19 4 23 5] (self : Closure'0.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z) : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
    
   =
    let Closure'0.M_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z _ a _ = self in a
  
  predicate resolve'1 [#"../typing.rs" 19 4 23 5] (_1 : Closure'0.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z)
    
   =
    resolve'2 (field_1'0 _1)
  
  predicate resolve'0 (self : borrowed (NonCopy'0.t_NonCopy)) =
    [%#span7] self.final = self.current
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (return'  (ret:borrowed (NonCopy'0.t_NonCopy)))= {[@expl:precondition] [%#span8] inv'2 self}
    any
    [ return' (result:borrowed (NonCopy'0.t_NonCopy))-> {[%#span11] inv'3 result}
      {[%#span10] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.current = result.current}
      {[%#span9] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.final = result.final}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  let rec deref'0 (self:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (return'  (ret:NonCopy'0.t_NonCopy))= {[@expl:precondition] [%#span12] inv'0 self}
    any
    [ return' (result:NonCopy'0.t_NonCopy)-> {[%#span14] inv'1 result}
      {[%#span13] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  let rec m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z (_1:Closure'0.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z {_1}
          (fun (r'0:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (r'1:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (r'2:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->
            deref'0 {r'0} (fun (_ret':NonCopy'0.t_NonCopy) ->  [ &_3 <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_5 <- NonCopy'0.C_NonCopy ([%#styping0] (4 : int32)) ] s1
      | s1 = Closure'0.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z {_1}
          (fun (r'0:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (r'1:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (r'2:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->
            Closure'0.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z {_1}
              (fun (r'3:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (r'4:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (r'5:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->
                Borrow.borrow_final <GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)> {r'4.current} {Borrow.get_id r'1}
                  (fun (_ret':borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) ->
                     [ &_7 <- _ret' ] 
                    Closure'0.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z {_1}
                      (fun (l'0:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (l'1:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (l'2:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->
                        
                        [ &_1 <- Closure'0.M_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z l'0 ({ l'1 with current = _7.final ; }) l'2 ]
                        
                        s2))))
      | s2 = deref_mut'0 {_7} (fun (_ret':borrowed (NonCopy'0.t_NonCopy)) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_6 <- { _6 with current = _5 ; } ] s1
      | s1 = -{resolve'0 _6}- s2
      | s2 = -{resolve'1 _1}- s3
      | s3 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb3 ]
      
    | bb3 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z = _1
    | & _2 : () = any_l ()
    | & _3 : NonCopy'0.t_NonCopy = any_l ()
    | & _5 : NonCopy'0.t_NonCopy = any_l ()
    | & _6 : borrowed (NonCopy'0.t_NonCopy) = any_l ()
    | & _7 : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
end
module M_typing__ghost_enter_ghost
  let%span styping0 = "../typing.rs" 25 18 25 30
  
  let%span styping1 = "../typing.rs" 26 18 26 29
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span5 = "../typing.rs" 10 8 10 29
  
  let%span span6 = "../../../../../creusot-contracts/src/ghost.rs" 57 4 57 12
  
  let%span span7 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span8 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span9 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  let%span span10 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span11 = "../../../../../creusot-contracts/src/ghost.rs" 50 22 50 26
  
  let%span span12 = "../../../../../creusot-contracts/src/ghost.rs" 48 14 48 34
  
  let%span span13 = "../../../../../creusot-contracts/src/ghost.rs" 49 14 49 34
  
  let%span span14 = "../../../../../creusot-contracts/src/ghost.rs" 50 4 50 48
  
  let%span span15 = "../../../../../creusot-contracts/src/ghost.rs" 41 14 41 18
  
  let%span span16 = "../../../../../creusot-contracts/src/ghost.rs" 40 14 40 34
  
  let%span span17 = "../../../../../creusot-contracts/src/ghost.rs" 41 4 41 36
  
  let%span span18 = "../typing.rs" 22 25 22 26
  
  let%span span19 = "../typing.rs" 17 35 17 36
  
  let%span span20 = "../typing.rs" 16 32 16 33
  
  let%span span21 = "../typing.rs" 15 32 15 33
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate invariant'7 (self : GhostBox'0.t_GhostBox ()) =
    [%#span2] true
  
  predicate inv'7 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv'7 : forall x : GhostBox'0.t_GhostBox () . inv'7 x = true
  
  predicate invariant'6 (self : ()) =
    [%#span2] true
  
  predicate inv'6 (_1 : ())
  
  axiom inv'6 : forall x : () . inv'6 x = true
  
  use T_typing__NonCopy as NonCopy'0
  
  predicate inv'0 (_1 : NonCopy'0.t_NonCopy)
  
  use prelude.prelude.Borrow
  
  predicate invariant'5 (self : borrowed (NonCopy'0.t_NonCopy)) =
    [%#span3] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'5 (_1 : borrowed (NonCopy'0.t_NonCopy))
  
  axiom inv'5 : forall x : borrowed (NonCopy'0.t_NonCopy) . inv'5 x = true
  
  predicate inv'1 (_1 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  predicate invariant'4 (self : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) =
    [%#span3] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'4 (_1 : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))
  
  axiom inv'4 : forall x : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) . inv'4 x = true
  
  predicate invariant'3 (self : NonCopy'0.t_NonCopy) =
    [%#span4] inv'0 self
  
  predicate inv'3 (_1 : NonCopy'0.t_NonCopy)
  
  axiom inv'3 : forall x : NonCopy'0.t_NonCopy . inv'3 x = true
  
  predicate invariant'2 (self : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) =
    [%#span4] inv'1 self
  
  predicate inv'2 (_1 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
  
  axiom inv'2 : forall x : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) . inv'2 x = true
  
  predicate invariant'1 (self : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) =
    [%#span2] true
  
  axiom inv'1 : forall x : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) . inv'1 x = true
  
  predicate invariant'0 (self : NonCopy'0.t_NonCopy) =
    [%#span2] true
  
  axiom inv'0 : forall x : NonCopy'0.t_NonCopy . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use T_typing__NonCopy as T_typing__NonCopy
  
  use prelude.prelude.Int
  
  function shallow_model'1 [#"../typing.rs" 9 4 9 50] (self : NonCopy'0.t_NonCopy) : int =
    [%#span5] Int32.to_int (T_typing__NonCopy.t_NonCopy__0 self)
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  use prelude.prelude.Int
  
  function shallow_model'0 (self : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) : int =
    [%#span6] shallow_model'1 (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self)
  
  let rec new'1 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#span7] inv'6 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#span9] inv'7 result}
      {[%#span8] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) =
    [%#span10] self.final = self.current
  
  use prelude.prelude.Int32
  
  use M_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z_Type as Closure'3
  
  function field_1'0 [#"../typing.rs" 19 4 23 5] (self : Closure'3.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z) : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))
    
   =
    let Closure'3.M_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z _ a _ = self in a
  
  predicate resolve'1 [#"../typing.rs" 19 4 23 5] (_1 : Closure'3.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z)
    
   =
    resolve'2 (field_1'0 _1)
  
  predicate resolve'0 (self : borrowed (NonCopy'0.t_NonCopy)) =
    [%#span10] self.final = self.current
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (return'  (ret:borrowed (NonCopy'0.t_NonCopy)))= {[@expl:precondition] [%#span11] inv'4 self}
    any
    [ return' (result:borrowed (NonCopy'0.t_NonCopy))-> {[%#span14] inv'5 result}
      {[%#span13] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.current = result.current}
      {[%#span12] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.final = result.final}
      (! return' {result}) ]
    
  
  let rec deref'0 (self:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (return'  (ret:NonCopy'0.t_NonCopy))= {[@expl:precondition] [%#span15] inv'2 self}
    any
    [ return' (result:NonCopy'0.t_NonCopy)-> {[%#span17] inv'3 result}
      {[%#span16] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  let rec closure3'0 (_1:Closure'3.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'3.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z {_1}
          (fun (r'0:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (r'1:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (r'2:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->
            deref'0 {r'0} (fun (_ret':NonCopy'0.t_NonCopy) ->  [ &_3 <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_5 <- NonCopy'0.C_NonCopy ([%#span18] (4 : int32)) ] s1
      | s1 = Closure'3.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z {_1}
          (fun (r'0:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (r'1:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (r'2:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->
            Closure'3.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z {_1}
              (fun (r'3:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (r'4:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (r'5:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->
                Borrow.borrow_final <GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)> {r'4.current} {Borrow.get_id r'1}
                  (fun (_ret':borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) ->
                     [ &_7 <- _ret' ] 
                    Closure'3.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z {_1}
                      (fun (l'0:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) (l'1:borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) (l'2:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->
                        
                        [ &_1 <- Closure'3.M_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z l'0 ({ l'1 with current = _7.final ; }) l'2 ]
                        
                        s2))))
      | s2 = deref_mut'0 {_7} (fun (_ret':borrowed (NonCopy'0.t_NonCopy)) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_6 <- { _6 with current = _5 ; } ] s1
      | s1 = -{resolve'0 _6}- s2
      | s2 = -{resolve'1 _1}- s3
      | s3 = new'1 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb3 ]
      
    | bb3 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'3.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z = _1
    | & _2 : () = any_l ()
    | & _3 : NonCopy'0.t_NonCopy = any_l ()
    | & _5 : NonCopy'0.t_NonCopy = any_l ()
    | & _6 : borrowed (NonCopy'0.t_NonCopy) = any_l ()
    | & _7 : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
  
  use M_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z_Type as Closure'2
  
  let rec new'0 (x:NonCopy'0.t_NonCopy) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= {[@expl:precondition] [%#span7] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> {[%#span9] inv'1 result}
      {[%#span8] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  let rec closure2'0 (_1:Closure'2.m_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#span19] (3 : int32)) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l () | & _2 : NonCopy'0.t_NonCopy = any_l () ] 
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> return' {result} ]
    
  
  use M_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z_Type as Closure'1
  
  let rec closure1'0 (_1:Closure'1.m_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#span20] (2 : int32)) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l () | & _2 : NonCopy'0.t_NonCopy = any_l () ] 
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> return' {result} ]
    
  
  use M_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  let rec closure0'0 (_1:Closure'0.m_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z) (return'  (ret:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#span21] (1 : int32)) ] s1
      | s1 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l () | & _2 : NonCopy'0.t_NonCopy = any_l () ] 
    [ return' (result:GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))-> return' {result} ]
    
  
  let rec ghost_enter_ghost (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- Closure'0.M_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z ] s1
      | s1 = closure0'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &g_move <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_5 <- Closure'1.M_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z ] s1
      | s1 = closure1'0 {_5} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &g_read <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_8 <- Closure'2.M_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z ] s1
      | s1 = closure2'0 {_8} (fun (_ret':GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) ->  [ &g_mut <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)> {g_mut}
          (fun (_ret':borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy))) ->
             [ &_13 <- _ret' ] 
             [ &g_mut <- _13.final ] 
            s1)
      | s1 =  [ &_11 <- Closure'3.M_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z g_read _13 g_move ] s2
      | s2 = closure3'0 {_11} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_10 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = s0
      [ s0 = {[@expl:assertion] [%#styping0] shallow_model'0 g_read = 2} s1
      | s1 = {[@expl:assertion] [%#styping1] shallow_model'0 g_mut = 4} s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & g_move : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l ()
    | & _2 : Closure'0.m_typing__ghost_enter_ghost__qy123zclosureqy35z0qy125z = any_l ()
    | & _3 : () = any_l ()
    | & g_read : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l ()
    | & _5 : Closure'1.m_typing__ghost_enter_ghost__qy123zclosureqy35z1qy125z = any_l ()
    | & _6 : () = any_l ()
    | & g_mut : GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy) = any_l ()
    | & _8 : Closure'2.m_typing__ghost_enter_ghost__qy123zclosureqy35z2qy125z = any_l ()
    | & _9 : () = any_l ()
    | & _10 : GhostBox'0.t_GhostBox () = any_l ()
    | & _11 : Closure'3.m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z = any_l ()
    | & _13 : borrowed (GhostBox'0.t_GhostBox (NonCopy'0.t_NonCopy)) = any_l ()
    | & _15 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z_Type
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z  =
    | M_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z int32 () (int32, int32)
  
  let rec m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z (input:m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z) (ret  (x:int32) (unit:()) (pair:(int32, int32)))= any
    [ good (x:int32) (unit:()) (pair:(int32, int32))-> {M_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z x unit pair
      = input}
      (! ret {x} {unit} {pair})
    | bad (x:int32) (unit:()) (pair:(int32, int32))-> {M_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z x unit pair
      <> input}
      {false}
      any ]
    
end
module M_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z
  let%span span0 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span1 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span2 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_GhostBox ()) =
    [%#span0] true
  
  predicate inv'1 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv'1 : forall x : GhostBox'0.t_GhostBox () . inv'1 x = true
  
  predicate invariant'0 (self : ()) =
    [%#span0] true
  
  predicate inv'0 (_1 : ())
  
  axiom inv'0 : forall x : () . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#span1] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#span3] inv'1 result}
      {[%#span2] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use M_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  let rec m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z (_1:Closure'0.m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z {_1}
          (fun (r'0:int32) (r'1:()) (r'2:(int32, int32)) ->  [ &_x <- r'0 ] s1)
      | s1 = Closure'0.m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z {_1}
          (fun (r'3:int32) (r'4:()) (r'5:(int32, int32)) ->  [ &_pair <- r'5 ] s2)
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z = _1
    | & _2 : () = any_l ()
    | & _x : int32 = any_l ()
    | & _pair : (int32, int32) = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
end
module M_typing__copy_enter_ghost
  let%span styping0 = "../typing.rs" 30 12 30 16
  
  let%span styping1 = "../typing.rs" 32 16 32 17
  
  let%span styping2 = "../typing.rs" 32 19 32 21
  
  let%span styping3 = "../typing.rs" 39 18 39 25
  
  let%span styping4 = "../typing.rs" 40 18 40 47
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span7 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span8 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_GhostBox ()) =
    [%#span5] true
  
  predicate inv'1 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv'1 : forall x : GhostBox'0.t_GhostBox () . inv'1 x = true
  
  predicate invariant'0 (self : ()) =
    [%#span5] true
  
  predicate inv'0 (_1 : ())
  
  axiom inv'0 : forall x : () . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#span6] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#span8] inv'1 result}
      {[%#span7] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  use M_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  let rec closure0'0 (_1:Closure'0.m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z {_1}
          (fun (r'0:int32) (r'1:()) (r'2:(int32, int32)) ->  [ &_x <- r'0 ] s1)
      | s1 = Closure'0.m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z {_1}
          (fun (r'3:int32) (r'4:()) (r'5:(int32, int32)) ->  [ &_pair <- r'5 ] s2)
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z = _1
    | & _2 : () = any_l ()
    | & _x : int32 = any_l ()
    | & _pair : (int32, int32) = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
  
  let rec copy_enter_ghost (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#styping0] (2 : int32) ] s1
      | s1 =  [ &pair <- (([%#styping1] (6 : int32)), ([%#styping2] (42 : int32))) ] s2
      | s2 =  [ &_5 <- Closure'0.M_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z x unit pair ] s3
      | s3 = closure0'0 {_5} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#styping3] Int32.to_int x = 2} s1
      | s1 = {[@expl:assertion] [%#styping4] Int32.to_int (let (a, _) = pair in a) = 6
        /\ Int32.to_int (let (_, a) = pair in a) = 42}
        s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & unit : () = any_l ()
    | & pair : (int32, int32) = any_l ()
    | & _4 : GhostBox'0.t_GhostBox () = any_l ()
    | & _5 : Closure'0.m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z = any_l ()
    | & _9 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_typing__qy123zimplqy35z0qy125z
  
end
