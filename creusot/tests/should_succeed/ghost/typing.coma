
module Typing_NonCopy_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_noncopy  =
    | C_NonCopy int32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_noncopy (input:t_noncopy) (ret  (field_0:int32))= any
    [ good (field_0:int32)-> {C_NonCopy field_0 = input} (! ret {field_0})
    | bad (field_0:int32)-> {C_NonCopy field_0 <> input} {false} any ]
    
  
  function noncopy_0 (self : t_noncopy) : int32 =
    match self with
      | C_NonCopy a -> a
      end
end
module CreusotContracts_Ghost_GhostBox_Type
  type t_ghostbox 't =
    | C_GhostBox 't
  
  function any_l (_ : 'b) : 'a
  
  let rec t_ghostbox < 't > (input:t_ghostbox 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_GhostBox field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_GhostBox field_0 <> input} {false} any ]
    
  
  function ghostbox_0 (self : t_ghostbox 't) : 't =
    match self with
      | C_GhostBox a -> a
      end
end
module Typing_GhostEnterGhost_Closure0_Type
  use Typing_NonCopy_Type as NonCopy'0
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  use prelude.prelude.Int32
  
  type typing_ghostenterghost_closure0  =
    | Typing_ghostenterghost_closure0
  
  let rec typing_ghostenterghost_closure0 (input:typing_ghostenterghost_closure0) (ret  )= any
    [ good -> {Typing_ghostenterghost_closure0  = input} (! ret)
    | bad -> {Typing_ghostenterghost_closure0  <> input} {false} any ]
    
end
module Typing_GhostEnterGhost_Closure0
  let%span styping0 = "../typing.rs" 15 32 15 33
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  use Typing_NonCopy_Type as NonCopy'0
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) =
    [%#span1] true
  
  predicate inv'1 (_x : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))
  
  axiom inv'1 : forall x : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) . inv'1 x = true
  
  predicate invariant'0 (self : NonCopy'0.t_noncopy) =
    [%#span1] true
  
  predicate inv'0 (_x : NonCopy'0.t_noncopy)
  
  axiom inv'0 : forall x : NonCopy'0.t_noncopy . inv'0 x = true
  
  use prelude.prelude.Int32
  
  use Typing_GhostEnterGhost_Closure0_Type as Closure'0
  
  use prelude.prelude.Intrinsic
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  let rec new'0 (x:NonCopy'0.t_noncopy) (return'  (ret:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))= {[@expl:precondition] [%#span2] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))-> {[%#span4] inv'1 result}
      {[%#span3] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  predicate resolve'0 [#"../typing.rs" 15 17 15 35] (_1 : Closure'0.typing_ghostenterghost_closure0) =
    true
  
  let rec typing_ghostenterghost_closure0 (_1:Closure'0.typing_ghostenterghost_closure0) (return'  (ret:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))= bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#styping0] (1 : int32)) ] s2
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) = any_l ()
    | & _1 : Closure'0.typing_ghostenterghost_closure0 = _1
    | & _2 : NonCopy'0.t_noncopy = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))-> return' {result} ] 
end
module Typing_GhostEnterGhost_Closure1_Type
  use Typing_NonCopy_Type as NonCopy'0
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  use prelude.prelude.Int32
  
  type typing_ghostenterghost_closure1  =
    | Typing_ghostenterghost_closure1
  
  let rec typing_ghostenterghost_closure1 (input:typing_ghostenterghost_closure1) (ret  )= any
    [ good -> {Typing_ghostenterghost_closure1  = input} (! ret)
    | bad -> {Typing_ghostenterghost_closure1  <> input} {false} any ]
    
end
module Typing_GhostEnterGhost_Closure1
  let%span styping0 = "../typing.rs" 16 32 16 33
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  use Typing_NonCopy_Type as NonCopy'0
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) =
    [%#span1] true
  
  predicate inv'1 (_x : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))
  
  axiom inv'1 : forall x : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) . inv'1 x = true
  
  predicate invariant'0 (self : NonCopy'0.t_noncopy) =
    [%#span1] true
  
  predicate inv'0 (_x : NonCopy'0.t_noncopy)
  
  axiom inv'0 : forall x : NonCopy'0.t_noncopy . inv'0 x = true
  
  use prelude.prelude.Int32
  
  use Typing_GhostEnterGhost_Closure1_Type as Closure'0
  
  use prelude.prelude.Intrinsic
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  let rec new'0 (x:NonCopy'0.t_noncopy) (return'  (ret:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))= {[@expl:precondition] [%#span2] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))-> {[%#span4] inv'1 result}
      {[%#span3] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  predicate resolve'0 [#"../typing.rs" 16 17 16 35] (_1 : Closure'0.typing_ghostenterghost_closure1) =
    true
  
  let rec typing_ghostenterghost_closure1 (_1:Closure'0.typing_ghostenterghost_closure1) (return'  (ret:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))= bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#styping0] (2 : int32)) ] s2
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) = any_l ()
    | & _1 : Closure'0.typing_ghostenterghost_closure1 = _1
    | & _2 : NonCopy'0.t_noncopy = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))-> return' {result} ] 
end
module Typing_GhostEnterGhost_Closure2_Type
  use Typing_NonCopy_Type as NonCopy'0
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  use prelude.prelude.Int32
  
  type typing_ghostenterghost_closure2  =
    | Typing_ghostenterghost_closure2
  
  let rec typing_ghostenterghost_closure2 (input:typing_ghostenterghost_closure2) (ret  )= any
    [ good -> {Typing_ghostenterghost_closure2  = input} (! ret)
    | bad -> {Typing_ghostenterghost_closure2  <> input} {false} any ]
    
end
module Typing_GhostEnterGhost_Closure2
  let%span styping0 = "../typing.rs" 17 35 17 36
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  use Typing_NonCopy_Type as NonCopy'0
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) =
    [%#span1] true
  
  predicate inv'1 (_x : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))
  
  axiom inv'1 : forall x : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) . inv'1 x = true
  
  predicate invariant'0 (self : NonCopy'0.t_noncopy) =
    [%#span1] true
  
  predicate inv'0 (_x : NonCopy'0.t_noncopy)
  
  axiom inv'0 : forall x : NonCopy'0.t_noncopy . inv'0 x = true
  
  use prelude.prelude.Int32
  
  use Typing_GhostEnterGhost_Closure2_Type as Closure'0
  
  use prelude.prelude.Intrinsic
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  let rec new'0 (x:NonCopy'0.t_noncopy) (return'  (ret:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))= {[@expl:precondition] [%#span2] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))-> {[%#span4] inv'1 result}
      {[%#span3] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  predicate resolve'0 [#"../typing.rs" 17 20 17 38] (_1 : Closure'0.typing_ghostenterghost_closure2) =
    true
  
  let rec typing_ghostenterghost_closure2 (_1:Closure'0.typing_ghostenterghost_closure2) (return'  (ret:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))= bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#styping0] (3 : int32)) ] s2
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) = any_l ()
    | & _1 : Closure'0.typing_ghostenterghost_closure2 = _1
    | & _2 : NonCopy'0.t_noncopy = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))-> return' {result} ] 
end
module Typing_GhostEnterGhost_Closure3_Type
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  use prelude.prelude.Int32
  
  use Typing_NonCopy_Type as NonCopy'0
  
  use prelude.prelude.Borrow
  
  type typing_ghostenterghost_closure3  =
    | Typing_ghostenterghost_closure3 (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))
  
  let rec typing_ghostenterghost_closure3 (input:typing_ghostenterghost_closure3) (ret  (g_read:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (g_mut:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (g_move:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))= any
    [ good (g_read:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (g_mut:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (g_move:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))-> {Typing_ghostenterghost_closure3 g_read g_mut g_move
      = input}
      (! ret {g_read} {g_mut} {g_move})
    | bad (g_read:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (g_mut:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (g_move:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))-> {Typing_ghostenterghost_closure3 g_read g_mut g_move
      <> input}
      {false}
      any ]
    
end
module Typing_GhostEnterGhost_Closure3
  let%span styping0 = "../typing.rs" 22 25 22 26
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span6 = "../../../../../creusot-contracts/src/ghost.rs" 50 22 50 26
  
  let%span span7 = "../../../../../creusot-contracts/src/ghost.rs" 48 14 48 34
  
  let%span span8 = "../../../../../creusot-contracts/src/ghost.rs" 49 14 49 34
  
  let%span span9 = "../../../../../creusot-contracts/src/ghost.rs" 50 4 50 48
  
  let%span span10 = "../../../../../creusot-contracts/src/ghost.rs" 41 14 41 18
  
  let%span span11 = "../../../../../creusot-contracts/src/ghost.rs" 40 14 40 34
  
  let%span span12 = "../../../../../creusot-contracts/src/ghost.rs" 41 4 41 36
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'5 (self : GhostBox'0.t_ghostbox ()) =
    [%#span1] true
  
  predicate inv'5 (_x : GhostBox'0.t_ghostbox ())
  
  axiom inv'5 : forall x : GhostBox'0.t_ghostbox () . inv'5 x = true
  
  predicate invariant'4 (self : ()) =
    [%#span1] true
  
  predicate inv'4 (_x : ())
  
  axiom inv'4 : forall x : () . inv'4 x = true
  
  use Typing_NonCopy_Type as NonCopy'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed (NonCopy'0.t_noncopy)) =
    [%#span1] true
  
  predicate inv'3 (_x : borrowed (NonCopy'0.t_noncopy))
  
  axiom inv'3 : forall x : borrowed (NonCopy'0.t_noncopy) . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) =
    [%#span1] true
  
  predicate inv'2 (_x : borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))
  
  axiom inv'2 : forall x : borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) . inv'2 x = true
  
  predicate invariant'1 (self : NonCopy'0.t_noncopy) =
    [%#span1] true
  
  predicate inv'1 (_x : NonCopy'0.t_noncopy)
  
  axiom inv'1 : forall x : NonCopy'0.t_noncopy . inv'1 x = true
  
  predicate invariant'0 (self : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) =
    [%#span1] true
  
  predicate inv'0 (_x : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))
  
  axiom inv'0 : forall x : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_ghostbox ()))= {[@expl:precondition] [%#span2] inv'4 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox ())-> {[%#span4] inv'5 result}
      {[%#span3] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) =
    [%#span5] self.final = self.current
  
  use prelude.prelude.Int32
  
  use Typing_GhostEnterGhost_Closure3_Type as Closure'0
  
  function field_1'0 [#"../typing.rs" 19 4 23 5] (self : Closure'0.typing_ghostenterghost_closure3) : borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))
    
   =
    let Closure'0.Typing_ghostenterghost_closure3 _ a _ = self in a
  
  predicate resolve'1 [#"../typing.rs" 19 4 23 5] (_1 : Closure'0.typing_ghostenterghost_closure3) =
    resolve'2 (field_1'0 _1)
  
  predicate resolve'0 (self : borrowed (NonCopy'0.t_noncopy)) =
    [%#span5] self.final = self.current
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (return'  (ret:borrowed (NonCopy'0.t_noncopy)))= {[@expl:precondition] [%#span6] inv'2 self}
    any
    [ return' (result:borrowed (NonCopy'0.t_noncopy))-> {[%#span9] inv'3 result}
      {[%#span8] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self.current = result.current}
      {[%#span7] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self.final = result.final}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  let rec deref'0 (self:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (return'  (ret:NonCopy'0.t_noncopy))= {[@expl:precondition] [%#span10] inv'0 self}
    any
    [ return' (result:NonCopy'0.t_noncopy)-> {[%#span12] inv'1 result}
      {[%#span11] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self = result}
      (! return' {result}) ]
    
  
  let rec typing_ghostenterghost_closure3 (_1:Closure'0.typing_ghostenterghost_closure3) (return'  (ret:GhostBox'0.t_ghostbox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.typing_ghostenterghost_closure3 {_1}
          (fun (r'0:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (r'1:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (r'2:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->
            deref'0 {r'0} (fun (_ret':NonCopy'0.t_noncopy) ->  [ &_3 <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_5 <- NonCopy'0.C_NonCopy ([%#styping0] (4 : int32)) ] s1
      | s1 = Closure'0.typing_ghostenterghost_closure3 {_1}
          (fun (r'0:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (r'1:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (r'2:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->
            Closure'0.typing_ghostenterghost_closure3 {_1}
              (fun (r'3:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (r'4:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (r'5:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->
                Borrow.borrow_final <GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)> {r'4.current} {Borrow.get_id r'1}
                  (fun (_ret':borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) ->
                     [ &_7 <- _ret' ] 
                    Closure'0.typing_ghostenterghost_closure3 {_1}
                      (fun (l'0:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (l'1:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (l'2:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->
                        
                        [ &_1 <- Closure'0.Typing_ghostenterghost_closure3 l'0 ({ l'1 with current = _7.final ; }) l'2 ]
                        
                        s2))))
      | s2 = deref_mut'0 {_7} (fun (_ret':borrowed (NonCopy'0.t_noncopy)) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_6 <- { _6 with current = _5 ; } ] (any [ any_ (_any:NonCopy'0.t_noncopy)-> (!  [ &_5 <- _any ] s1) ] )
      | s1 = -{resolve'0 _6}- s2
      | s2 = -{resolve'1 _1}- s3
      | s3 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb3 ]
      
    | bb3 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox () = any_l ()
    | & _1 : Closure'0.typing_ghostenterghost_closure3 = _1
    | & _2 : () = any_l ()
    | & _3 : NonCopy'0.t_noncopy = any_l ()
    | & _5 : NonCopy'0.t_noncopy = any_l ()
    | & _6 : borrowed (NonCopy'0.t_noncopy) = any_l ()
    | & _7 : borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox ())-> return' {result} ] 
end
module Typing_GhostEnterGhost
  let%span styping0 = "../typing.rs" 25 18 25 30
  
  let%span styping1 = "../typing.rs" 26 18 26 29
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../typing.rs" 10 8 10 29
  
  let%span span4 = "../../../../../creusot-contracts/src/ghost.rs" 57 4 57 12
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span6 = "../../../../../creusot-contracts/src/ghost.rs" 69 8 69 32
  
  let%span span7 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span8 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span9 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  let%span span10 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span11 = "../../../../../creusot-contracts/src/ghost.rs" 50 22 50 26
  
  let%span span12 = "../../../../../creusot-contracts/src/ghost.rs" 48 14 48 34
  
  let%span span13 = "../../../../../creusot-contracts/src/ghost.rs" 49 14 49 34
  
  let%span span14 = "../../../../../creusot-contracts/src/ghost.rs" 50 4 50 48
  
  let%span span15 = "../../../../../creusot-contracts/src/ghost.rs" 41 14 41 18
  
  let%span span16 = "../../../../../creusot-contracts/src/ghost.rs" 40 14 40 34
  
  let%span span17 = "../../../../../creusot-contracts/src/ghost.rs" 41 4 41 36
  
  let%span span18 = "../typing.rs" 22 25 22 26
  
  let%span span19 = "../typing.rs" 17 35 17 36
  
  let%span span20 = "../typing.rs" 16 32 16 33
  
  let%span span21 = "../typing.rs" 15 32 15 33
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'7 (self : GhostBox'0.t_ghostbox ()) =
    [%#span2] true
  
  predicate inv'7 (_x : GhostBox'0.t_ghostbox ())
  
  axiom inv'7 : forall x : GhostBox'0.t_ghostbox () . inv'7 x = true
  
  predicate invariant'6 (self : ()) =
    [%#span2] true
  
  predicate inv'6 (_x : ())
  
  axiom inv'6 : forall x : () . inv'6 x = true
  
  use Typing_NonCopy_Type as NonCopy'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'5 (self : borrowed (NonCopy'0.t_noncopy)) =
    [%#span2] true
  
  predicate inv'5 (_x : borrowed (NonCopy'0.t_noncopy))
  
  axiom inv'5 : forall x : borrowed (NonCopy'0.t_noncopy) . inv'5 x = true
  
  predicate invariant'4 (self : borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) =
    [%#span2] true
  
  predicate inv'4 (_x : borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))
  
  axiom inv'4 : forall x : borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) . inv'4 x = true
  
  predicate invariant'3 (self : NonCopy'0.t_noncopy) =
    [%#span2] true
  
  predicate inv'3 (_x : NonCopy'0.t_noncopy)
  
  axiom inv'3 : forall x : NonCopy'0.t_noncopy . inv'3 x = true
  
  predicate invariant'2 (self : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) =
    [%#span2] true
  
  predicate inv'2 (_x : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))
  
  axiom inv'2 : forall x : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) . inv'2 x = true
  
  predicate invariant'1 (self : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) =
    [%#span2] true
  
  predicate inv'1 (_x : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))
  
  axiom inv'1 : forall x : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) . inv'1 x = true
  
  predicate invariant'0 (self : NonCopy'0.t_noncopy) =
    [%#span2] true
  
  predicate inv'0 (_x : NonCopy'0.t_noncopy)
  
  axiom inv'0 : forall x : NonCopy'0.t_noncopy . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use Typing_NonCopy_Type as Typing_NonCopy_Type
  
  use prelude.prelude.Int
  
  function shallow_model'1 [#"../typing.rs" 9 4 9 50] (self : NonCopy'0.t_noncopy) : int =
    [%#span3] Int32.to_int (Typing_NonCopy_Type.noncopy_0 self)
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  use prelude.prelude.Int
  
  function shallow_model'0 (self : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) : int =
    [%#span4] shallow_model'1 (CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self)
  
  predicate resolve'8 (self : NonCopy'0.t_noncopy) =
    [%#span5] true
  
  predicate resolve'1 (self : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) =
    [%#span6] resolve'8 (CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self)
  
  predicate resolve'7 (self : ()) =
    [%#span5] true
  
  predicate resolve'0 (self : GhostBox'0.t_ghostbox ()) =
    [%#span6] resolve'7 (CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self)
  
  let rec new'1 (x:()) (return'  (ret:GhostBox'0.t_ghostbox ()))= {[@expl:precondition] [%#span7] inv'6 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox ())-> {[%#span9] inv'7 result}
      {[%#span8] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'9 (self : borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) =
    [%#span10] self.final = self.current
  
  use prelude.prelude.Int32
  
  use Typing_GhostEnterGhost_Closure3_Type as Closure'3
  
  function field_1'0 [#"../typing.rs" 19 4 23 5] (self : Closure'3.typing_ghostenterghost_closure3) : borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))
    
   =
    let Closure'3.Typing_ghostenterghost_closure3 _ a _ = self in a
  
  predicate resolve'6 [#"../typing.rs" 19 4 23 5] (_1 : Closure'3.typing_ghostenterghost_closure3) =
    resolve'9 (field_1'0 _1)
  
  predicate resolve'5 (self : borrowed (NonCopy'0.t_noncopy)) =
    [%#span10] self.final = self.current
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (return'  (ret:borrowed (NonCopy'0.t_noncopy)))= {[@expl:precondition] [%#span11] inv'4 self}
    any
    [ return' (result:borrowed (NonCopy'0.t_noncopy))-> {[%#span14] inv'5 result}
      {[%#span13] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self.current = result.current}
      {[%#span12] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self.final = result.final}
      (! return' {result}) ]
    
  
  let rec deref'0 (self:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (return'  (ret:NonCopy'0.t_noncopy))= {[@expl:precondition] [%#span15] inv'2 self}
    any
    [ return' (result:NonCopy'0.t_noncopy)-> {[%#span17] inv'3 result}
      {[%#span16] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self = result}
      (! return' {result}) ]
    
  
  let rec closure3'0 (_1:Closure'3.typing_ghostenterghost_closure3) (return'  (ret:GhostBox'0.t_ghostbox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'3.typing_ghostenterghost_closure3 {_1}
          (fun (r'0:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (r'1:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (r'2:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->
            deref'0 {r'0} (fun (_ret':NonCopy'0.t_noncopy) ->  [ &_3 <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_5 <- NonCopy'0.C_NonCopy ([%#span18] (4 : int32)) ] s1
      | s1 = Closure'3.typing_ghostenterghost_closure3 {_1}
          (fun (r'0:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (r'1:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (r'2:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->
            Closure'3.typing_ghostenterghost_closure3 {_1}
              (fun (r'3:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (r'4:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (r'5:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->
                Borrow.borrow_final <GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)> {r'4.current} {Borrow.get_id r'1}
                  (fun (_ret':borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) ->
                     [ &_7 <- _ret' ] 
                    Closure'3.typing_ghostenterghost_closure3 {_1}
                      (fun (l'0:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) (l'1:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) (l'2:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->
                        
                        [ &_1 <- Closure'3.Typing_ghostenterghost_closure3 l'0 ({ l'1 with current = _7.final ; }) l'2 ]
                        
                        s2))))
      | s2 = deref_mut'0 {_7} (fun (_ret':borrowed (NonCopy'0.t_noncopy)) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_6 <- { _6 with current = _5 ; } ] (any [ any_ (_any:NonCopy'0.t_noncopy)-> (!  [ &_5 <- _any ] s1) ] )
      | s1 = -{resolve'5 _6}- s2
      | s2 = -{resolve'6 _1}- s3
      | s3 = new'1 {_2} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb3 ]
      
    | bb3 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox () = any_l ()
    | & _1 : Closure'3.typing_ghostenterghost_closure3 = _1
    | & _2 : () = any_l ()
    | & _3 : NonCopy'0.t_noncopy = any_l ()
    | & _5 : NonCopy'0.t_noncopy = any_l ()
    | & _6 : borrowed (NonCopy'0.t_noncopy) = any_l ()
    | & _7 : borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox ())-> return' {result} ] 
  
  use Typing_GhostEnterGhost_Closure2_Type as Closure'2
  
  let rec new'0 (x:NonCopy'0.t_noncopy) (return'  (ret:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))= {[@expl:precondition] [%#span7] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))-> {[%#span9] inv'1 result}
      {[%#span8] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'4 [#"../typing.rs" 17 20 17 38] (_1 : Closure'2.typing_ghostenterghost_closure2) =
    true
  
  let rec closure2'0 (_1:Closure'2.typing_ghostenterghost_closure2) (return'  (ret:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))= bb0
    [ bb0 = s0
      [ s0 = -{resolve'4 _1}- s1
      | s1 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#span19] (3 : int32)) ] s2
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) = any_l ()
    | & _1 : Closure'2.typing_ghostenterghost_closure2 = _1
    | & _2 : NonCopy'0.t_noncopy = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))-> return' {result} ] 
  
  use Typing_GhostEnterGhost_Closure1_Type as Closure'1
  
  predicate resolve'3 [#"../typing.rs" 16 17 16 35] (_1 : Closure'1.typing_ghostenterghost_closure1) =
    true
  
  let rec closure1'0 (_1:Closure'1.typing_ghostenterghost_closure1) (return'  (ret:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))= bb0
    [ bb0 = s0
      [ s0 = -{resolve'3 _1}- s1
      | s1 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#span20] (2 : int32)) ] s2
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) = any_l ()
    | & _1 : Closure'1.typing_ghostenterghost_closure1 = _1
    | & _2 : NonCopy'0.t_noncopy = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))-> return' {result} ] 
  
  use Typing_GhostEnterGhost_Closure0_Type as Closure'0
  
  predicate resolve'2 [#"../typing.rs" 15 17 15 35] (_1 : Closure'0.typing_ghostenterghost_closure0) =
    true
  
  let rec closure0'0 (_1:Closure'0.typing_ghostenterghost_closure0) (return'  (ret:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))= bb0
    [ bb0 = s0
      [ s0 = -{resolve'2 _1}- s1
      | s1 =  [ &_2 <- NonCopy'0.C_NonCopy ([%#span21] (1 : int32)) ] s2
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) = any_l ()
    | & _1 : Closure'0.typing_ghostenterghost_closure0 = _1
    | & _2 : NonCopy'0.t_noncopy = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))-> return' {result} ] 
  
  let rec ghost_enter_ghost (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- Closure'0.Typing_ghostenterghost_closure0 ] s1
      | s1 = closure0'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->  [ &g_move <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_5 <- Closure'1.Typing_ghostenterghost_closure1 ] s1
      | s1 = closure1'0 {_5} (fun (_ret':GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->  [ &g_read <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_8 <- Closure'2.Typing_ghostenterghost_closure2 ] s1
      | s1 = closure2'0 {_8} (fun (_ret':GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) ->  [ &g_mut <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)> {g_mut}
          (fun (_ret':borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy))) ->
             [ &_13 <- _ret' ] 
             [ &g_mut <- _13.final ] 
            s1)
      | s1 =  [ &_11 <- Closure'3.Typing_ghostenterghost_closure3 g_read _13 g_move ] 
        (any [ any_ (_any:borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)))-> (!  [ &_13 <- _any ] s2) ] )
      | s2 = closure3'0 {_11} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_10 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = s0
      [ s0 = -{resolve'0 _10}- s1
      | s1 = -{resolve'1 g_mut}- s2
      | s2 = -{resolve'1 g_read}- s3
      | s3 = -{resolve'1 g_move}- s4
      | s4 = {[@expl:assertion] [%#styping0] shallow_model'0 g_read = 2} s5
      | s5 = {[@expl:assertion] [%#styping1] shallow_model'0 g_mut = 4} s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & g_move : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) = any_l ()
    | & _2 : Closure'0.typing_ghostenterghost_closure0 = any_l ()
    | & _3 : () = any_l ()
    | & g_read : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) = any_l ()
    | & _5 : Closure'1.typing_ghostenterghost_closure1 = any_l ()
    | & _6 : () = any_l ()
    | & g_mut : GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy) = any_l ()
    | & _8 : Closure'2.typing_ghostenterghost_closure2 = any_l ()
    | & _9 : () = any_l ()
    | & _10 : GhostBox'0.t_ghostbox () = any_l ()
    | & _11 : Closure'3.typing_ghostenterghost_closure3 = any_l ()
    | & _13 : borrowed (GhostBox'0.t_ghostbox (NonCopy'0.t_noncopy)) = any_l ()
    | & _15 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Typing_CopyEnterGhost_Closure0_Type
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type typing_copyenterghost_closure0  =
    | Typing_copyenterghost_closure0 int32 () (int32, int32)
  
  let rec typing_copyenterghost_closure0 (input:typing_copyenterghost_closure0) (ret  (x:int32) (unit:()) (pair:(int32, int32)))= any
    [ good (x:int32) (unit:()) (pair:(int32, int32))-> {Typing_copyenterghost_closure0 x unit pair = input}
      (! ret {x} {unit} {pair})
    | bad (x:int32) (unit:()) (pair:(int32, int32))-> {Typing_copyenterghost_closure0 x unit pair <> input}
      {false}
      any ]
    
end
module Typing_CopyEnterGhost_Closure0
  let%span span0 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span1 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span2 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span3 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  let%span span4 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_ghostbox ()) =
    [%#span0] true
  
  predicate inv'1 (_x : GhostBox'0.t_ghostbox ())
  
  axiom inv'1 : forall x : GhostBox'0.t_ghostbox () . inv'1 x = true
  
  predicate invariant'0 (self : ()) =
    [%#span0] true
  
  predicate inv'0 (_x : ())
  
  axiom inv'0 : forall x : () . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_ghostbox ()))= {[@expl:precondition] [%#span1] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox ())-> {[%#span3] inv'1 result}
      {[%#span2] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  predicate resolve'2 (self : int32) =
    [%#span4] true
  
  predicate resolve'1 (self : (int32, int32)) =
    [%#span5] resolve'2 (let (a, _) = self in a) /\ resolve'2 (let (_, a) = self in a)
  
  use Typing_CopyEnterGhost_Closure0_Type as Closure'0
  
  predicate resolve'0 [#"../typing.rs" 34 4 38 5] (_1 : Closure'0.typing_copyenterghost_closure0) =
    true
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  let rec typing_copyenterghost_closure0 (_1:Closure'0.typing_copyenterghost_closure0) (return'  (ret:GhostBox'0.t_ghostbox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.typing_copyenterghost_closure0 {_1}
          (fun (r'0:int32) (r'1:()) (r'2:(int32, int32)) ->  [ &_x <- r'0 ] s1)
      | s1 = Closure'0.typing_copyenterghost_closure0 {_1}
          (fun (r'3:int32) (r'4:()) (r'5:(int32, int32)) ->  [ &_pair <- r'5 ] s2)
      | s2 = -{resolve'0 _1}- s3
      | s3 = -{resolve'1 _pair}- s4
      | s4 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_0 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox () = any_l ()
    | & _1 : Closure'0.typing_copyenterghost_closure0 = _1
    | & _2 : () = any_l ()
    | & _x : int32 = any_l ()
    | & _pair : (int32, int32) = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox ())-> return' {result} ] 
end
module Typing_CopyEnterGhost
  let%span styping0 = "../typing.rs" 30 12 30 16
  
  let%span styping1 = "../typing.rs" 32 16 32 17
  
  let%span styping2 = "../typing.rs" 32 19 32 21
  
  let%span styping3 = "../typing.rs" 39 18 39 25
  
  let%span styping4 = "../typing.rs" 40 18 40 47
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span7 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  let%span span8 = "../../../../../creusot-contracts/src/ghost.rs" 69 8 69 32
  
  let%span span9 = "../../../../../creusot-contracts/src/ghost.rs" 77 15 77 16
  
  let%span span10 = "../../../../../creusot-contracts/src/ghost.rs" 76 14 76 27
  
  let%span span11 = "../../../../../creusot-contracts/src/ghost.rs" 77 4 77 28
  
  use CreusotContracts_Ghost_GhostBox_Type as GhostBox'0
  
  predicate invariant'1 (self : GhostBox'0.t_ghostbox ()) =
    [%#span5] true
  
  predicate inv'1 (_x : GhostBox'0.t_ghostbox ())
  
  axiom inv'1 : forall x : GhostBox'0.t_ghostbox () . inv'1 x = true
  
  predicate invariant'0 (self : ()) =
    [%#span5] true
  
  predicate inv'0 (_x : ())
  
  axiom inv'0 : forall x : () . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int32
  
  predicate resolve'4 (self : int32) =
    [%#span6] true
  
  predicate resolve'1 (self : (int32, int32)) =
    [%#span7] resolve'4 (let (a, _) = self in a) /\ resolve'4 (let (_, a) = self in a)
  
  predicate resolve'3 (self : ()) =
    [%#span6] true
  
  use CreusotContracts_Ghost_GhostBox_Type as CreusotContracts_Ghost_GhostBox_Type
  
  predicate resolve'0 (self : GhostBox'0.t_ghostbox ()) =
    [%#span8] resolve'3 (CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 self)
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_ghostbox ()))= {[@expl:precondition] [%#span9] inv'0 x}
    any
    [ return' (result:GhostBox'0.t_ghostbox ())-> {[%#span11] inv'1 result}
      {[%#span10] CreusotContracts_Ghost_GhostBox_Type.ghostbox_0 result = x}
      (! return' {result}) ]
    
  
  use Typing_CopyEnterGhost_Closure0_Type as Closure'0
  
  predicate resolve'2 [#"../typing.rs" 34 4 38 5] (_1 : Closure'0.typing_copyenterghost_closure0) =
    true
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  let rec closure0'0 (_1:Closure'0.typing_copyenterghost_closure0) (return'  (ret:GhostBox'0.t_ghostbox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.typing_copyenterghost_closure0 {_1}
          (fun (r'0:int32) (r'1:()) (r'2:(int32, int32)) ->  [ &_x <- r'0 ] s1)
      | s1 = Closure'0.typing_copyenterghost_closure0 {_1}
          (fun (r'3:int32) (r'4:()) (r'5:(int32, int32)) ->  [ &_pair <- r'5 ] s2)
      | s2 = -{resolve'2 _1}- s3
      | s3 = -{resolve'1 _pair}- s4
      | s4 = new'0 {_2} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_0 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_ghostbox () = any_l ()
    | & _1 : Closure'0.typing_copyenterghost_closure0 = _1
    | & _2 : () = any_l ()
    | & _x : int32 = any_l ()
    | & _pair : (int32, int32) = any_l () ]
     [ return' (result:GhostBox'0.t_ghostbox ())-> return' {result} ] 
  
  let rec copy_enter_ghost (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#styping0] (2 : int32) ] s1
      | s1 =  [ &pair <- (([%#styping1] (6 : int32)), ([%#styping2] (42 : int32))) ] s2
      | s2 =  [ &_5 <- Closure'0.Typing_copyenterghost_closure0 x unit pair ] s3
      | s3 = closure0'0 {_5} (fun (_ret':GhostBox'0.t_ghostbox ()) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _4}- s1
      | s1 = -{resolve'1 pair}- s2
      | s2 = {[@expl:assertion] [%#styping3] Int32.to_int x = 2} s3
      | s3 = {[@expl:assertion] [%#styping4] Int32.to_int (let (a, _) = pair in a) = 6
        /\ Int32.to_int (let (_, a) = pair in a) = 42}
        s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & unit : () = any_l ()
    | & pair : (int32, int32) = any_l ()
    | & _4 : GhostBox'0.t_ghostbox () = any_l ()
    | & _5 : Closure'0.typing_copyenterghost_closure0 = any_l ()
    | & _9 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Typing_Impl0
  
end
