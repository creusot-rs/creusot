module M_ghost_vec__ghost_vec [#"ghost_vec.rs" 4 0 4 18]
  let%span sghost_vec0 = "ghost_vec.rs" 5 16 5 26
  let%span sghost_vec1 = "ghost_vec.rs" 6 18 6 49
  let%span sghost_vec2 = "ghost_vec.rs" 40 16 40 26
  let%span sseq3 = "../../../../creusot-contracts/src/logic/seq.rs" 254 4 254 34
  let%span sseq4 = "../../../../creusot-contracts/src/logic/seq.rs" 252 14 252 36
  let%span sghost5 = "../../../../creusot-contracts/src/ghost.rs" 183 9 183 15
  let%span sseq6 = "../../../../creusot-contracts/src/logic/seq.rs" 62 4 62 12
  let%span sghost_vec7 = "ghost_vec.rs" 8 26 8 28
  let%span sghost_vec8 = "ghost_vec.rs" 9 22 9 35
  let%span sghost_vec9 = "ghost_vec.rs" 10 22 10 34
  let%span sghost_vec10 = "ghost_vec.rs" 12 26 12 28
  let%span sghost_vec11 = "ghost_vec.rs" 13 26 13 28
  let%span sghost_vec12 = "ghost_vec.rs" 15 22 15 30
  let%span sghost_vec13 = "ghost_vec.rs" 16 22 16 69
  let%span sghost_vec14 = "ghost_vec.rs" 18 41 18 42
  let%span sghost_vec15 = "ghost_vec.rs" 19 41 19 42
  let%span sghost_vec16 = "ghost_vec.rs" 20 22 20 42
  let%span sghost_vec17 = "ghost_vec.rs" 21 22 21 34
  let%span sghost_vec18 = "ghost_vec.rs" 23 51 23 52
  let%span sghost_vec19 = "ghost_vec.rs" 24 17 24 19
  let%span sghost_vec20 = "ghost_vec.rs" 26 22 26 35
  let%span sghost_vec21 = "ghost_vec.rs" 33 22 33 41
  let%span sghost_vec22 = "ghost_vec.rs" 34 22 34 41
  let%span sghost_vec23 = "ghost_vec.rs" 35 22 35 41
  let%span sghost_vec24 = "ghost_vec.rs" 36 22 36 34
  let%span sghost_vec25 = "ghost_vec.rs" 37 22 37 34
  let%span sghost_vec26 = "ghost_vec.rs" 42 27 42 28
  let%span sghost_vec27 = "ghost_vec.rs" 43 27 43 28
  let%span sghost_vec28 = "ghost_vec.rs" 44 27 44 28
  let%span sghost_vec29 = "ghost_vec.rs" 49 22 49 40
  let%span sghost_vec30 = "ghost_vec.rs" 50 22 50 40
  let%span sghost_vec31 = "ghost_vec.rs" 51 22 51 40
  let%span sghost_vec32 = "ghost_vec.rs" 52 22 52 34
  let%span sghost33 = "../../../../creusot-contracts/src/ghost.rs" 68 22 68 26
  let%span sghost34 = "../../../../creusot-contracts/src/ghost.rs" 68 4 68 48
  let%span sghost35 = "../../../../creusot-contracts/src/ghost.rs" 67 14 67 36
  let%span sseq36 = "../../../../creusot-contracts/src/logic/seq.rs" 321 32 321 36
  let%span sseq37 = "../../../../creusot-contracts/src/logic/seq.rs" 321 38 321 39
  let%span sseq38 = "../../../../creusot-contracts/src/logic/seq.rs" 320 14 320 40
  let%span sghost39 = "../../../../creusot-contracts/src/ghost.rs" 52 14 52 18
  let%span sghost40 = "../../../../creusot-contracts/src/ghost.rs" 52 4 52 36
  let%span sghost41 = "../../../../creusot-contracts/src/ghost.rs" 51 14 51 35
  let%span sseq42 = "../../../../creusot-contracts/src/logic/seq.rs" 278 22 278 26
  let%span sseq43 = "../../../../creusot-contracts/src/logic/seq.rs" 277 14 277 34
  let%span sint44 = "../../../../creusot-contracts/src/logic/int.rs" 28 14 28 31
  let%span sseq45 = "../../../../creusot-contracts/src/logic/seq.rs" 349 22 349 26
  let%span sseq46 = "../../../../creusot-contracts/src/logic/seq.rs" 349 4 349 53
  let%span sseq47 = "../../../../creusot-contracts/src/logic/seq.rs" 345 14 348 5
  let%span sseq48 = "../../../../creusot-contracts/src/logic/seq.rs" 380 30 380 34
  let%span sseq49 = "../../../../creusot-contracts/src/logic/seq.rs" 380 4 380 65
  let%span sseq50 = "../../../../creusot-contracts/src/logic/seq.rs" 374 14 377 5
  let%span sseq51 = "../../../../creusot-contracts/src/logic/seq.rs" 378 14 378 84
  let%span sseq52 = "../../../../creusot-contracts/src/logic/seq.rs" 379 14 379 44
  let%span sseq53 = "../../../../creusot-contracts/src/logic/seq.rs" 407 31 407 35
  let%span sseq54 = "../../../../creusot-contracts/src/logic/seq.rs" 407 4 407 49
  let%span sseq55 = "../../../../creusot-contracts/src/logic/seq.rs" 403 14 406 5
  let%span sghost56 = "../../../../creusot-contracts/src/ghost.rs" 147 15 147 16
  let%span sghost57 = "../../../../creusot-contracts/src/ghost.rs" 147 4 147 28
  let%span sghost58 = "../../../../creusot-contracts/src/ghost.rs" 145 14 145 28
  let%span sseq59 = "../../../../creusot-contracts/src/logic/seq.rs" 299 33 299 37
  let%span sseq60 = "../../../../creusot-contracts/src/logic/seq.rs" 299 39 299 40
  let%span sseq61 = "../../../../creusot-contracts/src/logic/seq.rs" 298 14 298 41
  let%span sseq62 = "../../../../creusot-contracts/src/logic/seq.rs" 433 32 433 36
  let%span sseq63 = "../../../../creusot-contracts/src/logic/seq.rs" 433 4 433 50
  let%span sseq64 = "../../../../creusot-contracts/src/logic/seq.rs" 429 14 432 5
  let%span sresolve65 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sseq66 = "../../../../creusot-contracts/src/logic/seq.rs" 143 8 143 27
  
  use prelude.prelude.Int32
  
  use seq.Seq
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: Seq.seq int32 }
  
  predicate inv'0 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_GhostBox'0 [inv'0 x] . inv'0 x = true
  
  function inner_logic'0 (self : t_GhostBox'0) : Seq.seq int32 =
    [%#sghost5] self.t_GhostBox__0'0
  
  use seq.Seq
  
  let rec new'0 (_1:()) (return'  (ret:t_GhostBox'0))= any
    [ return' (result:t_GhostBox'0)-> {[%#sseq3] inv'0 result}
      {[%#sseq4] inner_logic'0 result = (Seq.empty  : Seq.seq int32)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use seq.Seq
  
  use seq.Seq
  
  function get'0 (self : Seq.seq int32) (ix : int) : t_Option'0 =
    [%#sseq6] if 0 <= ix /\ ix < Seq.length self then C_Some'0 (Seq.get self ix) else C_None'0
  
  use prelude.prelude.Borrow
  
  predicate inv'1 (_1 : borrowed (t_GhostBox'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (t_GhostBox'0) [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : borrowed (Seq.seq int32))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (Seq.seq int32) [inv'2 x] . inv'2 x = true
  
  let rec deref_mut'0 (self:borrowed (t_GhostBox'0)) (return'  (ret:borrowed (Seq.seq int32)))= {[@expl:deref_mut 'self' type invariant] [%#sghost33] inv'1 self}
    any
    [ return' (result:borrowed (Seq.seq int32))-> {[%#sghost34] inv'2 result}
      {[%#sghost35] result
      = Borrow.borrow_logic (self.current).t_GhostBox__0'0 (self.final).t_GhostBox__0'0 (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  predicate inv'3 (_1 : int32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : int32 [inv'3 x] . inv'3 x = true
  
  use seq.Seq
  
  let rec push_back_ghost'0 (self:borrowed (Seq.seq int32)) (x:int32) (return'  (ret:()))= {[@expl:push_back_ghost 'self' type invariant] [%#sseq36] inv'2 self}
    {[@expl:push_back_ghost 'x' type invariant] [%#sseq37] inv'3 x}
    any [ return' (result:())-> {[%#sseq38] self.final = Seq.snoc self.current x} (! return' {result}) ] 
  
  predicate resolve'4 (self : borrowed (Seq.seq int32)) =
    [%#sresolve65] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Seq.seq int32)) =
    resolve'4 _1
  
  predicate inv'4 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_GhostBox'0 [inv'4 x] . inv'4 x = true
  
  predicate inv'5 (_1 : Seq.seq int32)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Seq.seq int32 [inv'5 x] . inv'5 x = true
  
  let rec deref'0 (self:t_GhostBox'0) (return'  (ret:Seq.seq int32))= {[@expl:deref 'self' type invariant] [%#sghost39] inv'4 self}
    any
    [ return' (result:Seq.seq int32)-> {[%#sghost40] inv'5 result}
      {[%#sghost41] self.t_GhostBox__0'0 = result}
      (! return' {result}) ]
    
  
  let rec len_ghost'0 (self:Seq.seq int32) (return'  (ret:int))= {[@expl:len_ghost 'self' type invariant] [%#sseq42] inv'5 self}
    any [ return' (result:int)-> {[%#sseq43] result = Seq.length self} (! return' {result}) ] 
  
  use prelude.prelude.Int128
  
  type t_GhostBox'2  =
    { t_GhostBox__0'2: int }
  
  function inner_logic'1 (self : t_GhostBox'2) : int =
    [%#sghost5] self.t_GhostBox__0'2
  
  use prelude.prelude.Int128
  
  let rec new'1 (value:int128) (return'  (ret:t_GhostBox'2))= any
    [ return' (result:t_GhostBox'2)-> {[%#sint44] inner_logic'1 result = Int128.to_int value} (! return' {result}) ]
    
  
  predicate inv'6 (_1 : t_GhostBox'2)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_GhostBox'2 [inv'6 x] . inv'6 x = true
  
  predicate inv'7 (_1 : int)
  
  axiom inv_axiom'7 [@rewrite] : forall x : int [inv'7 x] . inv'7 x = true
  
  let rec deref'1 (self:t_GhostBox'2) (return'  (ret:int))= {[@expl:deref 'self' type invariant] [%#sghost39] inv'6 self}
    any
    [ return' (result:int)-> {[%#sghost40] inv'7 result}
      {[%#sghost41] self.t_GhostBox__0'2 = result}
      (! return' {result}) ]
    
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 int32
  
  predicate inv'8 (_1 : t_Option'1)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_Option'1 [inv'8 x] . inv'8 x = true
  
  let rec get_ghost'0 (self:Seq.seq int32) (index:int) (return'  (ret:t_Option'1))= {[@expl:get_ghost 'self' type invariant] [%#sseq45] inv'5 self}
    any
    [ return' (result:t_Option'1)-> {[%#sseq46] inv'8 result}
      {[%#sseq47] match get'0 self index with
        | C_None'0 -> result = C_None'1
        | C_Some'0 v -> result = C_Some'1 v
        end}
      (! return' {result}) ]
    
  
  type t_Option'2  =
    | C_None'2
    | C_Some'2 (borrowed int32)
  
  predicate inv'9 (_1 : t_Option'2)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_Option'2 [inv'9 x] . inv'9 x = true
  
  let rec get_mut_ghost'0 (self:borrowed (Seq.seq int32)) (index:int) (return'  (ret:t_Option'2))= {[@expl:get_mut_ghost 'self' type invariant] [%#sseq48] inv'2 self}
    any
    [ return' (result:t_Option'2)-> {[%#sseq49] inv'9 result}
      {[%#sseq50] match result with
        | C_None'2 -> get'0 self.current index = C_None'0 /\ self.current = self.final
        | C_Some'2 r -> get'0 self.current index = C_Some'0 (r.current) /\ r.final = Seq.get self.final index
        end}
      {[%#sseq51] forall i : int . i <> index  -> get'0 self.current index = get'0 self.final index}
      {[%#sseq52] Seq.length self.current = Seq.length self.final}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed int32) =
    [%#sresolve65] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed int32) =
    resolve'5 _1
  
  let rec v_Some'0 (input:t_Option'2) (ret  (field_0:borrowed int32))= any
    [ good (field_0:borrowed int32)-> {C_Some'2 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : borrowed int32 [C_Some'2 field_0 : t_Option'2] . C_Some'2 field_0 <> input}
      (! {false}
      any) ]
    
  
  predicate inv'10 (_1 : t_Option'0)
  
  axiom inv_axiom'10 [@rewrite] : forall x : t_Option'0 [inv'10 x] . inv'10 x = true
  
  let rec pop_back_ghost'0 (self:borrowed (Seq.seq int32)) (return'  (ret:t_Option'0))= {[@expl:pop_back_ghost 'self' type invariant] [%#sseq53] inv'2 self}
    any
    [ return' (result:t_Option'0)-> {[%#sseq54] inv'10 result}
      {[%#sseq55] match result with
        | C_None'0 -> self.current = (Seq.empty  : Seq.seq int32) /\ self.current = self.final
        | C_Some'0 r -> self.current = Seq.snoc self.final r
        end}
      (! return' {result}) ]
    
  
  type closure1'1  =
    { field_0'0: borrowed (t_GhostBox'0) }
  
  predicate resolve'7 (self : borrowed (t_GhostBox'0)) =
    [%#sresolve65] self.final = self.current
  
  predicate resolve'6 (_1 : borrowed (t_GhostBox'0)) =
    resolve'7 _1
  
  predicate resolve'2 (_1 : closure1'1) =
    resolve'6 _1.field_0'0
  
  predicate inv'11 (_1 : ())
  
  axiom inv_axiom'11 [@rewrite] : forall x : () [inv'11 x] . inv'11 x = true
  
  type t_GhostBox'1  =
    { t_GhostBox__0'1: () }
  
  predicate inv'12 (_1 : t_GhostBox'1)
  
  axiom inv_axiom'12 [@rewrite] : forall x : t_GhostBox'1 [inv'12 x] . inv'12 x = true
  
  let rec new'2 (x:()) (return'  (ret:t_GhostBox'1))= {[@expl:new 'x' type invariant] [%#sghost56] inv'11 x}
    any
    [ return' (result:t_GhostBox'1)-> {[%#sghost57] inv'12 result}
      {[%#sghost58] result.t_GhostBox__0'1 = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec closure1'0 (_1:closure1'1) (return'  (ret:t_GhostBox'1))= bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'0).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_6 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s1)
      | s1 = deref_mut'0 {_6} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final } ] s1)
      | s1 = push_back_ghost'0 {_4} {[%#sghost_vec7] (21 : int32)} (fun (_ret':()) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _5}- s1
      | s1 = {[@expl:assertion] [%#sghost_vec8] Seq.get (inner_logic'0 (_1.field_0'0).current) 0 = (21 : int32)} s2
      | s2 = {[@expl:assertion] [%#sghost_vec9] Seq.length (inner_logic'0 (_1.field_0'0).current) = 1} s3
      | s3 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'0).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_14 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s4)
      | s4 = deref_mut'0 {_14} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_13 <- _ret' ] s5)
      | s5 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_13.current} {Borrow.get_id _13}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_12 <- _ret' ] 
             [ &_13 <- { _13 with current = _ret'.final } ] 
            s1)
      | s1 = push_back_ghost'0 {_12} {[%#sghost_vec10] (10 : int32)} (fun (_ret':()) ->  [ &_11 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 = -{resolve'0 _13}- s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'0).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_18 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_18} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_17.current} {Borrow.get_id _17}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_16 <- _ret' ] 
             [ &_17 <- { _17 with current = _ret'.final } ] 
            s1)
      | s1 = push_back_ghost'0 {_16} {[%#sghost_vec11] (30 : int32)} (fun (_ret':()) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'0 _17}- s1
      | s1 = deref'0 {(_1.field_0'0).current} (fun (_ret':Seq.seq int32) ->  [ &_21 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0 [ s0 = len_ghost'0 {_21} (fun (_ret':int) ->  [ &len <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec12] len = 3} s1
      | s1 = {[@expl:assertion] [%#sghost_vec13] Seq.get (inner_logic'0 (_1.field_0'0).current) 0 = (21 : int32)
        /\ Seq.get (inner_logic'0 (_1.field_0'0).current) 1 = (10 : int32)
        /\ Seq.get (inner_logic'0 (_1.field_0'0).current) 2 = (30 : int32)}
        s2
      | s2 = deref'0 {(_1.field_0'0).current} (fun (_ret':Seq.seq int32) ->  [ &_29 <- _ret' ] s3)
      | s3 = bb9 ]
      
    | bb9 = s0
      [ s0 = new'1 {[%#sghost_vec14] (1 : int128)} (fun (_ret':t_GhostBox'2) ->  [ &_34 <- _ret' ] s1) | s1 = bb10 ]
      
    | bb10 = s0 [ s0 = deref'1 {_34} (fun (_ret':int) ->  [ &_32 <- _ret' ] s1) | s1 = bb11 ] 
    | bb11 = s0 [ s0 = get_ghost'0 {_29} {_32} (fun (_ret':t_Option'1) ->  [ &get1 <- _ret' ] s1) | s1 = bb12 ] 
    | bb12 = bb13
    | bb13 = s0
      [ s0 = deref'0 {(_1.field_0'0).current} (fun (_ret':Seq.seq int32) ->  [ &_37 <- _ret' ] s1) | s1 = bb14 ]
      
    | bb14 = s0
      [ s0 = new'1 {[%#sghost_vec15] (3 : int128)} (fun (_ret':t_GhostBox'2) ->  [ &_42 <- _ret' ] s1) | s1 = bb15 ]
      
    | bb15 = s0 [ s0 = deref'1 {_42} (fun (_ret':int) ->  [ &_40 <- _ret' ] s1) | s1 = bb16 ] 
    | bb16 = s0 [ s0 = get_ghost'0 {_37} {_40} (fun (_ret':t_Option'1) ->  [ &get2 <- _ret' ] s1) | s1 = bb17 ] 
    | bb17 = bb18
    | bb18 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec16] get1 = C_Some'1 (10 : int32)} s1
      | s1 = {[@expl:assertion] [%#sghost_vec17] get2 = C_None'1} s2
      | s2 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'0).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_51 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s3)
      | s3 = deref_mut'0 {_51} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_50 <- _ret' ] s4)
      | s4 = bb19 ]
      
    | bb19 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_50.current} {Borrow.get_id _50}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_49 <- _ret' ] 
             [ &_50 <- { _50 with current = _ret'.final } ] 
            s1)
      | s1 = new'1 {[%#sghost_vec18] (0 : int128)} (fun (_ret':t_GhostBox'2) ->  [ &_55 <- _ret' ] s2)
      | s2 = bb20 ]
      
    | bb20 = s0 [ s0 = deref'1 {_55} (fun (_ret':int) ->  [ &_53 <- _ret' ] s1) | s1 = bb21 ] 
    | bb21 = s0 [ s0 = get_mut_ghost'0 {_49} {_53} (fun (_ret':t_Option'2) ->  [ &_48 <- _ret' ] s1) | s1 = bb22 ] 
    | bb22 = any [ br0 -> {_48 = C_None'2 } (! bb25) | br1 (x0:borrowed int32)-> {_48 = C_Some'2 x0} (! bb23) ] 
    | bb25 = s0
      [ s0 = -{match _48 with
          | C_Some'2 x'0 -> resolve'1 x'0
          | _ -> true
          end}-
        s1
      | s1 = -{resolve'0 _50}- s2
      | s2 = bb26 ]
      
    | bb23 = bb24
    | bb24 = s0
      [ s0 = v_Some'0 {_48} (fun (r0'0:borrowed int32) ->  [ &x <- r0'0 ] s1)
      | s1 =  [ &x <- { x with current = ([%#sghost_vec19] (42 : int32)) } ] s2
      | s2 = -{resolve'1 x}- s3
      | s3 = -{resolve'0 _50}- s4
      | s4 = bb26 ]
      
    | bb26 = bb27
    | bb27 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec20] Seq.get (inner_logic'0 (_1.field_0'0).current) 0 = (42 : int32)} s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'0).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_63 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_63} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_62 <- _ret' ] s3)
      | s3 = bb28 ]
      
    | bb28 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_62.current} {Borrow.get_id _62}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_61 <- _ret' ] 
             [ &_62 <- { _62 with current = _ret'.final } ] 
            s1)
      | s1 = pop_back_ghost'0 {_61} (fun (_ret':t_Option'0) ->  [ &pop1 <- _ret' ] s2)
      | s2 = bb29 ]
      
    | bb29 = s0
      [ s0 = -{resolve'0 _62}- s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'0).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_67 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_67} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_66 <- _ret' ] s3)
      | s3 = bb30 ]
      
    | bb30 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_66.current} {Borrow.get_id _66}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_65 <- _ret' ] 
             [ &_66 <- { _66 with current = _ret'.final } ] 
            s1)
      | s1 = pop_back_ghost'0 {_65} (fun (_ret':t_Option'0) ->  [ &pop2 <- _ret' ] s2)
      | s2 = bb31 ]
      
    | bb31 = s0
      [ s0 = -{resolve'0 _66}- s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'0).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_71 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_71} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_70 <- _ret' ] s3)
      | s3 = bb32 ]
      
    | bb32 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_70.current} {Borrow.get_id _70}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_69 <- _ret' ] 
             [ &_70 <- { _70 with current = _ret'.final } ] 
            s1)
      | s1 = pop_back_ghost'0 {_69} (fun (_ret':t_Option'0) ->  [ &pop3 <- _ret' ] s2)
      | s2 = bb33 ]
      
    | bb33 = s0
      [ s0 = -{resolve'0 _70}- s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'0).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_75 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_75} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_74 <- _ret' ] s3)
      | s3 = bb34 ]
      
    | bb34 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_74.current} {Borrow.get_id _74}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_73 <- _ret' ] 
             [ &_74 <- { _74 with current = _ret'.final } ] 
            s1)
      | s1 = pop_back_ghost'0 {_73} (fun (_ret':t_Option'0) ->  [ &pop4 <- _ret' ] s2)
      | s2 = bb35 ]
      
    | bb35 = s0
      [ s0 = -{resolve'0 _74}- s1
      | s1 = Borrow.borrow_final <t_GhostBox'0> {(_1.field_0'0).current} {Borrow.get_id _1.field_0'0}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_79 <- _ret' ] 
             [ &_1 <- { field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_79} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_78 <- _ret' ] s3)
      | s3 = bb36 ]
      
    | bb36 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_78.current} {Borrow.get_id _78}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_77 <- _ret' ] 
             [ &_78 <- { _78 with current = _ret'.final } ] 
            s1)
      | s1 = pop_back_ghost'0 {_77} (fun (_ret':t_Option'0) ->  [ &pop5 <- _ret' ] s2)
      | s2 = bb37 ]
      
    | bb37 = s0
      [ s0 = -{resolve'0 _78}- s1
      | s1 = -{resolve'2 _1}- s2
      | s2 = {[@expl:assertion] [%#sghost_vec21] pop1 = C_Some'0 (30 : int32)} s3
      | s3 = {[@expl:assertion] [%#sghost_vec22] pop2 = C_Some'0 (10 : int32)} s4
      | s4 = {[@expl:assertion] [%#sghost_vec23] pop3 = C_Some'0 (42 : int32)} s5
      | s5 = {[@expl:assertion] [%#sghost_vec24] pop4 = C_None'0} s6
      | s6 = {[@expl:assertion] [%#sghost_vec25] pop5 = C_None'0} s7
      | s7 = new'2 {_2} (fun (_ret':t_GhostBox'1) ->  [ &_0 <- _ret' ] s8)
      | s8 = bb38 ]
      
    | bb38 = return' {_0} ]
    
    [ & _0 : t_GhostBox'1 = any_l ()
    | & _1 : closure1'1 = _1
    | & _2 : () = any_l ()
    | & _3 : () = any_l ()
    | & _4 : borrowed (Seq.seq int32) = any_l ()
    | & _5 : borrowed (Seq.seq int32) = any_l ()
    | & _6 : borrowed (t_GhostBox'0) = any_l ()
    | & _11 : () = any_l ()
    | & _12 : borrowed (Seq.seq int32) = any_l ()
    | & _13 : borrowed (Seq.seq int32) = any_l ()
    | & _14 : borrowed (t_GhostBox'0) = any_l ()
    | & _15 : () = any_l ()
    | & _16 : borrowed (Seq.seq int32) = any_l ()
    | & _17 : borrowed (Seq.seq int32) = any_l ()
    | & _18 : borrowed (t_GhostBox'0) = any_l ()
    | & len : int = any_l ()
    | & _21 : Seq.seq int32 = any_l ()
    | & get1 : t_Option'1 = any_l ()
    | & _29 : Seq.seq int32 = any_l ()
    | & _32 : int = any_l ()
    | & _34 : t_GhostBox'2 = any_l ()
    | & get2 : t_Option'1 = any_l ()
    | & _37 : Seq.seq int32 = any_l ()
    | & _40 : int = any_l ()
    | & _42 : t_GhostBox'2 = any_l ()
    | & _48 : t_Option'2 = any_l ()
    | & _49 : borrowed (Seq.seq int32) = any_l ()
    | & _50 : borrowed (Seq.seq int32) = any_l ()
    | & _51 : borrowed (t_GhostBox'0) = any_l ()
    | & _53 : int = any_l ()
    | & _55 : t_GhostBox'2 = any_l ()
    | & x : borrowed int32 = any_l ()
    | & pop1 : t_Option'0 = any_l ()
    | & _61 : borrowed (Seq.seq int32) = any_l ()
    | & _62 : borrowed (Seq.seq int32) = any_l ()
    | & _63 : borrowed (t_GhostBox'0) = any_l ()
    | & pop2 : t_Option'0 = any_l ()
    | & _65 : borrowed (Seq.seq int32) = any_l ()
    | & _66 : borrowed (Seq.seq int32) = any_l ()
    | & _67 : borrowed (t_GhostBox'0) = any_l ()
    | & pop3 : t_Option'0 = any_l ()
    | & _69 : borrowed (Seq.seq int32) = any_l ()
    | & _70 : borrowed (Seq.seq int32) = any_l ()
    | & _71 : borrowed (t_GhostBox'0) = any_l ()
    | & pop4 : t_Option'0 = any_l ()
    | & _73 : borrowed (Seq.seq int32) = any_l ()
    | & _74 : borrowed (Seq.seq int32) = any_l ()
    | & _75 : borrowed (t_GhostBox'0) = any_l ()
    | & pop5 : t_Option'0 = any_l ()
    | & _77 : borrowed (Seq.seq int32) = any_l ()
    | & _78 : borrowed (Seq.seq int32) = any_l ()
    | & _79 : borrowed (t_GhostBox'0) = any_l () ]
     [ return' (result:t_GhostBox'1)-> return' {result} ] 
  
  use seq.Seq
  
  function push_front'0 [@inline:trivial] (self : Seq.seq int32) (x : int32) : Seq.seq int32 =
    [%#sseq66] Seq.cons x self
  
  let rec push_front_ghost'0 (self:borrowed (Seq.seq int32)) (x:int32) (return'  (ret:()))= {[@expl:push_front_ghost 'self' type invariant] [%#sseq59] inv'2 self}
    {[@expl:push_front_ghost 'x' type invariant] [%#sseq60] inv'3 x}
    any [ return' (result:())-> {[%#sseq61] self.final = push_front'0 self.current x} (! return' {result}) ] 
  
  let rec pop_front_ghost'0 (self:borrowed (Seq.seq int32)) (return'  (ret:t_Option'0))= {[@expl:pop_front_ghost 'self' type invariant] [%#sseq62] inv'2 self}
    any
    [ return' (result:t_Option'0)-> {[%#sseq63] inv'10 result}
      {[%#sseq64] match result with
        | C_None'0 -> self.current = (Seq.empty  : Seq.seq int32) /\ self.current = self.final
        | C_Some'0 r -> self.current = push_front'0 self.final r
        end}
      (! return' {result}) ]
    
  
  type closure2'1  =
    { field_0'1: borrowed (t_GhostBox'0) }
  
  predicate resolve'3 (_1 : closure2'1) =
    resolve'6 _1.field_0'1
  
  let rec closure2'0 (_1:closure2'1) (return'  (ret:t_GhostBox'1))= bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'1).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_6 <- _ret' ] 
             [ &_1 <- { field_0'1 = { _1.field_0'1 with current = _ret'.final } } ] 
            s1)
      | s1 = deref_mut'0 {_6} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final } ] s1)
      | s1 = push_front_ghost'0 {_4} {[%#sghost_vec26] (1 : int32)} (fun (_ret':()) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _5}- s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'1).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_10 <- _ret' ] 
             [ &_1 <- { field_0'1 = { _1.field_0'1 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_10} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_9.current} {Borrow.get_id _9}
          (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_8 <- _ret' ]  [ &_9 <- { _9 with current = _ret'.final } ] s1)
      | s1 = push_front_ghost'0 {_8} {[%#sghost_vec27] (2 : int32)} (fun (_ret':()) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 = -{resolve'0 _9}- s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'1).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_14 <- _ret' ] 
             [ &_1 <- { field_0'1 = { _1.field_0'1 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_14} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_13 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_13.current} {Borrow.get_id _13}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_12 <- _ret' ] 
             [ &_13 <- { _13 with current = _ret'.final } ] 
            s1)
      | s1 = push_front_ghost'0 {_12} {[%#sghost_vec28] (3 : int32)} (fun (_ret':()) ->  [ &_11 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'0 _13}- s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'1).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_18 <- _ret' ] 
             [ &_1 <- { field_0'1 = { _1.field_0'1 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_18} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_17.current} {Borrow.get_id _17}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_16 <- _ret' ] 
             [ &_17 <- { _17 with current = _ret'.final } ] 
            s1)
      | s1 = pop_front_ghost'0 {_16} (fun (_ret':t_Option'0) ->  [ &pop1 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 = -{resolve'0 _17}- s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'1).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_22 <- _ret' ] 
             [ &_1 <- { field_0'1 = { _1.field_0'1 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_22} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_21 <- _ret' ] s3)
      | s3 = bb9 ]
      
    | bb9 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_21.current} {Borrow.get_id _21}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_20 <- _ret' ] 
             [ &_21 <- { _21 with current = _ret'.final } ] 
            s1)
      | s1 = pop_front_ghost'0 {_20} (fun (_ret':t_Option'0) ->  [ &pop2 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = s0
      [ s0 = -{resolve'0 _21}- s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {(_1.field_0'1).current}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_26 <- _ret' ] 
             [ &_1 <- { field_0'1 = { _1.field_0'1 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_26} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_25 <- _ret' ] s3)
      | s3 = bb11 ]
      
    | bb11 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_25.current} {Borrow.get_id _25}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_24 <- _ret' ] 
             [ &_25 <- { _25 with current = _ret'.final } ] 
            s1)
      | s1 = pop_front_ghost'0 {_24} (fun (_ret':t_Option'0) ->  [ &pop3 <- _ret' ] s2)
      | s2 = bb12 ]
      
    | bb12 = s0
      [ s0 = -{resolve'0 _25}- s1
      | s1 = Borrow.borrow_final <t_GhostBox'0> {(_1.field_0'1).current} {Borrow.get_id _1.field_0'1}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_30 <- _ret' ] 
             [ &_1 <- { field_0'1 = { _1.field_0'1 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_30} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_29 <- _ret' ] s3)
      | s3 = bb13 ]
      
    | bb13 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_29.current} {Borrow.get_id _29}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_28 <- _ret' ] 
             [ &_29 <- { _29 with current = _ret'.final } ] 
            s1)
      | s1 = pop_front_ghost'0 {_28} (fun (_ret':t_Option'0) ->  [ &pop4 <- _ret' ] s2)
      | s2 = bb14 ]
      
    | bb14 = s0
      [ s0 = -{resolve'0 _29}- s1
      | s1 = -{resolve'3 _1}- s2
      | s2 = {[@expl:assertion] [%#sghost_vec29] pop1 = C_Some'0 (3 : int32)} s3
      | s3 = {[@expl:assertion] [%#sghost_vec30] pop2 = C_Some'0 (2 : int32)} s4
      | s4 = {[@expl:assertion] [%#sghost_vec31] pop3 = C_Some'0 (1 : int32)} s5
      | s5 = {[@expl:assertion] [%#sghost_vec32] pop4 = C_None'0} s6
      | s6 = new'2 {_2} (fun (_ret':t_GhostBox'1) ->  [ &_0 <- _ret' ] s7)
      | s7 = bb15 ]
      
    | bb15 = return' {_0} ]
    
    [ & _0 : t_GhostBox'1 = any_l ()
    | & _1 : closure2'1 = _1
    | & _2 : () = any_l ()
    | & _3 : () = any_l ()
    | & _4 : borrowed (Seq.seq int32) = any_l ()
    | & _5 : borrowed (Seq.seq int32) = any_l ()
    | & _6 : borrowed (t_GhostBox'0) = any_l ()
    | & _7 : () = any_l ()
    | & _8 : borrowed (Seq.seq int32) = any_l ()
    | & _9 : borrowed (Seq.seq int32) = any_l ()
    | & _10 : borrowed (t_GhostBox'0) = any_l ()
    | & _11 : () = any_l ()
    | & _12 : borrowed (Seq.seq int32) = any_l ()
    | & _13 : borrowed (Seq.seq int32) = any_l ()
    | & _14 : borrowed (t_GhostBox'0) = any_l ()
    | & pop1 : t_Option'0 = any_l ()
    | & _16 : borrowed (Seq.seq int32) = any_l ()
    | & _17 : borrowed (Seq.seq int32) = any_l ()
    | & _18 : borrowed (t_GhostBox'0) = any_l ()
    | & pop2 : t_Option'0 = any_l ()
    | & _20 : borrowed (Seq.seq int32) = any_l ()
    | & _21 : borrowed (Seq.seq int32) = any_l ()
    | & _22 : borrowed (t_GhostBox'0) = any_l ()
    | & pop3 : t_Option'0 = any_l ()
    | & _24 : borrowed (Seq.seq int32) = any_l ()
    | & _25 : borrowed (Seq.seq int32) = any_l ()
    | & _26 : borrowed (t_GhostBox'0) = any_l ()
    | & pop4 : t_Option'0 = any_l ()
    | & _28 : borrowed (Seq.seq int32) = any_l ()
    | & _29 : borrowed (Seq.seq int32) = any_l ()
    | & _30 : borrowed (t_GhostBox'0) = any_l () ]
     [ return' (result:t_GhostBox'1)-> return' {result} ] 
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_vec'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = new'0 {[%#sghost_vec0] ()} (fun (_ret':t_GhostBox'0) ->  [ &v <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec1] forall i : int . get'0 (inner_logic'0 v) i = C_None'0} s1
      | s1 = Borrow.borrow_mut <t_GhostBox'0> {v}
          (fun (_ret':borrowed (t_GhostBox'0)) ->  [ &_6 <- _ret' ]  [ &v <- _ret'.final ] s2)
      | s2 =  [ &_5 <- { field_0'0 = _6 } ] s3
      | s3 = closure1'0 {_5} (fun (_ret':t_GhostBox'1) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = bb3
    | bb3 = s0 [ s0 = new'0 {[%#sghost_vec2] ()} (fun (_ret':t_GhostBox'0) ->  [ &v1 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = Borrow.borrow_mut <t_GhostBox'0> {v1}
          (fun (_ret':borrowed (t_GhostBox'0)) ->  [ &_11 <- _ret' ]  [ &v1 <- _ret'.final ] s1)
      | s1 =  [ &_10 <- { field_0'1 = _11 } ] s2
      | s2 = closure2'0 {_10} (fun (_ret':t_GhostBox'1) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v : t_GhostBox'0 = any_l ()
    | & _4 : t_GhostBox'1 = any_l ()
    | & _5 : closure1'1 = any_l ()
    | & _6 : borrowed (t_GhostBox'0) = any_l ()
    | & _7 : () = any_l ()
    | & v1 : t_GhostBox'0 = any_l ()
    | & _9 : t_GhostBox'1 = any_l ()
    | & _10 : closure2'1 = any_l ()
    | & _11 : borrowed (t_GhostBox'0) = any_l ()
    | & _12 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
