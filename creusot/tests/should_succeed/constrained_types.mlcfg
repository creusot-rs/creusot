
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl0_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl0_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 31 8 31 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate lt_log (self : self) (o : self) =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 21 20 21 53] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Less
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl0_LtLog_Stub
  type a
  type b
  predicate lt_log (self : (a, b)) (o : (a, b))
end
module CreusotContracts_Logic_Ord_Impl0_LtLog_Interface
  type a
  type b
  predicate lt_log (self : (a, b)) (o : (a, b))
  val lt_log (self : (a, b)) (o : (a, b)) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl0_LtLog
  type a
  type b
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog1 with
    type self = a
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = b
  predicate lt_log (self : (a, b)) (o : (a, b)) =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 220 20 220 67] (let (a, _) = self in a) = (let (a, _) = o in a) /\ LtLog0.lt_log (let (_, a) = self in a) (let (_, a) = o in a) \/ LtLog1.lt_log (let (a, _) = self in a) (let (a, _) = o in a)
  val lt_log (self : (a, b)) (o : (a, b)) : bool
    ensures { result = lt_log self o }
    
end
module Core_Tuple_Impl11_Lt_Interface
  type u
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = u
  clone CreusotContracts_Logic_Ord_Impl0_LtLog_Stub as LtLog0 with
    type a = DeepModelTy0.deepModelTy,
    type b = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = (u, t),
    type DeepModelTy0.deepModelTy = (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
  val lt (self : (u, t)) (other : (u, t)) : bool
    ensures { [#"../constrained_types.rs" 9 18 9 68] result = LtLog0.lt_log (DeepModel0.deep_model self) (DeepModel0.deep_model other) }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Tuples_Impl4_DeepModel_Stub
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  function deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
end
module CreusotContracts_Std1_Tuples_Impl4_DeepModel_Interface
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  function deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
  val deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Tuples_Impl4_DeepModel
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy) =
    [#"../../../../creusot-contracts/src/std/tuples.rs" 29 28 29 57] (DeepModel0.deep_model (let (a, _) = self in a), DeepModel1.deep_model (let (_, a) = self in a))
  val deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Ord_Impl2_LtLog_Stub
  use prelude.Int
  predicate lt_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl2_LtLog_Interface
  use prelude.Int
  predicate lt_log (self : int) (_2' : int)
  val lt_log (self : int) (_2' : int) : bool
    ensures { result = lt_log self _2' }
    
end
module CreusotContracts_Logic_Ord_Impl2_LtLog
  use prelude.Int
  use int.Int
  predicate lt_log (self : int) (_2' : int) =
    Int.(<) self _2'
  val lt_log (self : int) (_2' : int) : bool
    ensures { result = lt_log self _2' }
    
end
module CreusotContracts_Std1_Num_Impl7_DeepModel_Stub
  use prelude.Int
  use prelude.UInt32
  function deep_model (self : uint32) : int
end
module CreusotContracts_Std1_Num_Impl7_DeepModel_Interface
  use prelude.Int
  use prelude.UInt32
  function deep_model (self : uint32) : int
  val deep_model (self : uint32) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl7_DeepModel
  use prelude.Int
  use prelude.UInt32
  function deep_model (self : uint32) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  val deep_model (self : uint32) : int
    ensures { result = deep_model self }
    
end
module ConstrainedTypes_UsesConcreteInstance_Interface
  use prelude.Int
  use prelude.UInt32
  val uses_concrete_instance [#"../constrained_types.rs" 14 0 14 67] (x : (uint32, uint32)) (y : (uint32, uint32)) : bool
    
end
module ConstrainedTypes_UsesConcreteInstance
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Std1_Num_Impl7_DeepModel as DeepModel2
  clone CreusotContracts_Logic_Ord_Impl2_LtLog as LtLog1
  use prelude.Int
  clone CreusotContracts_Std1_Tuples_Impl4_DeepModel as DeepModel1 with
    type a = uint32,
    type b = uint32,
    type DeepModelTy0.deepModelTy = int,
    type DeepModelTy1.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel2.deep_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = uint32
  clone CreusotContracts_Logic_Ord_Impl0_LtLog as LtLog0 with
    type a = int,
    type b = int,
    predicate LtLog0.lt_log = LtLog1.lt_log,
    predicate LtLog1.lt_log = LtLog1.lt_log
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = (uint32, uint32),
    type DeepModelTy0.deepModelTy = (int, int),
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = uint32,
    type t2 = uint32,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  clone Core_Tuple_Impl11_Lt_Interface as Lt0 with
    type u = uint32,
    type t = uint32,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    type DeepModelTy0.deepModelTy = int,
    type DeepModelTy1.deepModelTy = int
  let rec cfg uses_concrete_instance [#"../constrained_types.rs" 14 0 14 67] [@cfg:stackify] [@cfg:subregion_analysis] (x : (uint32, uint32)) (y : (uint32, uint32)) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x_1 : (uint32, uint32);
  var y_2 : (uint32, uint32);
  var _3 : (uint32, uint32);
  var _4 : (uint32, uint32);
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    _4 <- y_2;
    _0 <- ([#"../constrained_types.rs" 15 4 15 9] Lt0.lt _3 _4);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve x_1 };
    assume { Resolve0.resolve y_2 };
    return _0
  }
  
end
