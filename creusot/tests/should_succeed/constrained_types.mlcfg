
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl4_Model_Stub
  type t
  type u
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = u
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : (t, u)) : (ModelTy0.modelTy, ModelTy1.modelTy)
end
module CreusotContracts_Logic_Model_Impl4_Model_Interface
  type t
  type u
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = u
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : (t, u)) : (ModelTy0.modelTy, ModelTy1.modelTy)
end
module CreusotContracts_Logic_Model_Impl4_Model
  type t
  type u
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = u
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model1 with type self = u,
    type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : (t, u)) : (ModelTy0.modelTy, ModelTy1.modelTy) = [@vc:do_not_keep_trace] [@vc:sp]
    (Model0.model (let (a, _) = self in a), Model1.model (let (_, a) = self in a))
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  val ghost function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  val ghost function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  val ghost function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  val ghost predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  val ghost predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  let rec ghost predicate lt_log (self : self) (o : self) = [@vc:do_not_keep_trace] [@vc:sp]
    let a = CmpLog0.cmp_log self o in pure {a = Core_Cmp_Ordering_Type.C_Less}
end
module CreusotContracts_Logic_Ord_Impl0_LtLog_Stub
  type a
  type b
  val ghost predicate lt_log (self : (a, b)) (o : (a, b))
end
module CreusotContracts_Logic_Ord_Impl0_LtLog_Interface
  type a
  type b
  val ghost predicate lt_log (self : (a, b)) (o : (a, b))
end
module CreusotContracts_Logic_Ord_Impl0_LtLog
  type a
  type b
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog1 with type self = a
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with type self = b
  let rec ghost predicate lt_log (self : (a, b)) (o : (a, b)) = [@vc:do_not_keep_trace] [@vc:sp]
    pure {(let (a, _) = self in a) = (let (a, _) = o in a)} && LtLog0.lt_log (let (_, a) = self in a) (let (_, a) = o in a) || LtLog1.lt_log (let (a, _) = self in a) (let (a, _) = o in a)
end
module CreusotContracts_Logic_Model_Impl4_ModelTy_Type
  type t
  type u
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = u
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  type modelTy  =
    (ModelTy0.modelTy, ModelTy1.modelTy)
end
module Core_Tuple_Impl7_Lt_Interface
  type u
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = u
  clone CreusotContracts_Logic_Model_Impl4_ModelTy_Type as ModelTy0 with type t = u, type u = t,
    type ModelTy0.modelTy = ModelTy1.modelTy, type ModelTy1.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Ord_Impl0_LtLog_Stub as LtLog0 with type a = ModelTy1.modelTy, type b = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl4_Model_Stub as Model1 with type t = u, type u = t,
    type ModelTy0.modelTy = ModelTy1.modelTy, type ModelTy1.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model0 with type t = (u, t),
    type ModelTy0.modelTy = ModelTy0.modelTy
  val lt [@cfg:stackify] (self : (u, t)) (other : (u, t)) : bool
    ensures { [#"../constrained_types.rs" 9 18 9 47] result = LtLog0.lt_log (Model0.model self) (Model1.model other) }
    
end
module Core_Tuple_Impl7_Lt
  type u
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = u
  clone CreusotContracts_Logic_Model_Impl4_ModelTy_Type as ModelTy0 with type t = u, type u = t,
    type ModelTy0.modelTy = ModelTy1.modelTy, type ModelTy1.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Ord_Impl0_LtLog_Interface as LtLog0 with type a = ModelTy1.modelTy,
    type b = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl4_Model_Interface as Model1 with type t = u, type u = t,
    type ModelTy0.modelTy = ModelTy1.modelTy, type ModelTy1.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = (u, t),
    type ModelTy0.modelTy = ModelTy0.modelTy
  val lt [@cfg:stackify] (self : (u, t)) (other : (u, t)) : bool
    ensures { [#"../constrained_types.rs" 9 18 9 47] result = LtLog0.lt_log (Model0.model self) (Model1.model other) }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  val ghost predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  val ghost predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = t1
  let rec ghost predicate resolve (self : (t1, t2)) = [@vc:do_not_keep_trace] [@vc:sp]
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Stub
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  let rec ghost predicate resolve (self : t) = [@vc:do_not_keep_trace] [@vc:sp]
    true
end
module CreusotContracts_Logic_Int_Impl12_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module CreusotContracts_Logic_Int_Impl12_Model_Stub
  use mach.int.Int
  use mach.int.UInt32
  val ghost function model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl12_Model_Interface
  use mach.int.Int
  use mach.int.UInt32
  val ghost function model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl12_Model
  use mach.int.Int
  use mach.int.UInt32
  let rec ghost function model (self : uint32) : int = [@vc:do_not_keep_trace] [@vc:sp]
    UInt32.to_int self
end
module CreusotContracts_Logic_Ord_Impl1_LtLog_Stub
  use mach.int.Int
  val ghost predicate lt_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_LtLog_Interface
  use mach.int.Int
  val ghost predicate lt_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_LtLog
  use mach.int.Int
  use int.Int
  let rec ghost predicate lt_log (self : int) (_2' : int) = [@vc:do_not_keep_trace] [@vc:sp]
    Int.(<) self _2'
end
module ConstrainedTypes_UsesConcreteInstance_Interface
  use mach.int.Int
  use mach.int.UInt32
  val uses_concrete_instance [@cfg:stackify] (x : (uint32, uint32)) (y : (uint32, uint32)) : bool
end
module ConstrainedTypes_UsesConcreteInstance
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  clone CreusotContracts_Logic_Ord_Impl1_LtLog as LtLog1
  use mach.int.Int
  clone CreusotContracts_Logic_Int_Impl12_Model as Model2
  clone CreusotContracts_Logic_Int_Impl12_ModelTy_Type as ModelTy1
  clone CreusotContracts_Logic_Model_Impl4_ModelTy_Type as ModelTy0 with type t = uint32, type u = uint32,
    type ModelTy0.modelTy = ModelTy1.modelTy, type ModelTy1.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Ord_Impl0_LtLog as LtLog0 with type a = int, type b = int,
    val LtLog0.lt_log = LtLog1.lt_log, val LtLog1.lt_log = LtLog1.lt_log
  clone CreusotContracts_Logic_Model_Impl4_Model as Model1 with type t = uint32, type u = uint32,
    type ModelTy0.modelTy = ModelTy1.modelTy, type ModelTy1.modelTy = ModelTy1.modelTy, val Model0.model = Model2.model,
    val Model1.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = (uint32, uint32),
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = uint32
  clone Core_Tuple_Impl7_Lt_Interface as Lt0 with type u = uint32, type t = uint32, val Model0.model = Model0.model,
    val Model1.model = Model1.model, val LtLog0.lt_log = LtLog0.lt_log, type ModelTy1.modelTy = ModelTy1.modelTy,
    type ModelTy2.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = uint32, type t2 = uint32,
    val Resolve0.resolve = Resolve1.resolve, val Resolve1.resolve = Resolve1.resolve
  let rec cfg uses_concrete_instance [@cfg:stackify] [#"../constrained_types.rs" 14 0 14 67] (x : (uint32, uint32)) (y : (uint32, uint32)) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x_1 : (uint32, uint32);
  var y_2 : (uint32, uint32);
  var _3 : (uint32, uint32);
  var _4 : (uint32, uint32);
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    assume { Resolve0.resolve x_1 };
    _4 <- y_2;
    assume { Resolve0.resolve y_2 };
    _0 <- ([#"../constrained_types.rs" 15 4 15 9] Lt0.lt _3 _4);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
