
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl4_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 74 8 74 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2 }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2 }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  function lt_log (self : self) (o : self) : bool
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  function lt_log (self : self) (o : self) : bool
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function lt_log (self : self) (o : self) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 21 20 21 53] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Less
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  function le_log (self : self) (o : self) : bool
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  function le_log (self : self) (o : self) : bool
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function le_log (self : self) (o : self) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 11 20 11 56] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_le_log (x : self) (y : self) : ()
  val cmp_le_log (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_le_log (x : self) (y : self) : ()
  val cmp_le_log (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_lt_log (x : self) (y : self) : ()
  val cmp_lt_log (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_lt_log (x : self) (y : self) : ()
  val cmp_lt_log (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less))
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub
  type self
  function ge_log (self : self) (o : self) : bool
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  function ge_log (self : self) (o : self) : bool
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function ge_log (self : self) (o : self) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 31 20 31 53] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Less
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_ge_log (x : self) (y : self) : ()
  val cmp_ge_log (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_ge_log (x : self) (y : self) : ()
  val cmp_ge_log (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less))
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub
  type self
  function gt_log (self : self) (o : self) : bool
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  function gt_log (self : self) (o : self) : bool
  val gt_log (self : self) (o : self) : bool
    ensures { result = gt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function gt_log (self : self) (o : self) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 41 20 41 56] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Greater
  val gt_log (self : self) (o : self) : bool
    ensures { result = gt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_gt_log (x : self) (y : self) : ()
  val cmp_gt_log (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_gt_log (x : self) (y : self) : ()
  val cmp_gt_log (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater))
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function refl (x : self) : ()
  val refl (x : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] Inv0.inv x}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function refl (x : self) : ()
  val refl (x : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] Inv0.inv x}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] Inv0.inv y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] Inv0.inv z}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] Inv0.inv z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] Inv0.inv y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] Inv0.inv z}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] Inv0.inv z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Stub
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  val antisym1 (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  val antisym1 (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Stub
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  val antisym2 (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  val antisym2 (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function eq_cmp (x : self) (y : self) : ()
  val eq_cmp (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal))
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function eq_cmp (x : self) (y : self) : ()
  val eq_cmp (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] Inv0.inv x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] Inv0.inv y}
    ensures { [#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] Inv0.inv x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] Inv0.inv y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal))
end
module CreusotContracts_Logic_Ord_Impl1_LtLog_Stub
  type a
  type b
  function lt_log (self : (a, b)) (o : (a, b)) : bool
end
module CreusotContracts_Logic_Ord_Impl1_LtLog_Interface
  type a
  type b
  function lt_log (self : (a, b)) (o : (a, b)) : bool
  val lt_log (self : (a, b)) (o : (a, b)) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl1_LtLog
  type a
  type b
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog1 with
    type self = a
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = b
  function lt_log (self : (a, b)) (o : (a, b)) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 240 20 240 67] (let (a, _) = self in a) = (let (a, _) = o in a) /\ LtLog0.lt_log (let (_, a) = self in a) (let (_, a) = o in a) \/ LtLog1.lt_log (let (a, _) = self in a) (let (a, _) = o in a)
  val lt_log (self : (a, b)) (o : (a, b)) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Std1_Tuples_Impl4_DeepModel_Stub
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  function deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
end
module CreusotContracts_Std1_Tuples_Impl4_DeepModel_Interface
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  function deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
  val deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Tuples_Impl4_DeepModel
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy) =
    [#"../../../../creusot-contracts/src/std/tuples.rs" 29 28 29 57] (DeepModel0.deep_model (let (a, _) = self in a), DeepModel1.deep_model (let (_, a) = self in a))
  val deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
    ensures { result = deep_model self }
    
end
module Core_Tuple_Impl17_Lt_Interface
  type u
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = u
  clone CreusotContracts_Logic_Ord_Impl1_LtLog_Stub as LtLog0 with
    type a = DeepModelTy0.deepModelTy,
    type b = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = (u, t),
    type DeepModelTy0.deepModelTy = (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = (u, t)
  val lt (self : (u, t)) (other : (u, t)) : bool
    requires {Inv0.inv self}
    requires {Inv0.inv other}
    ensures { [#"../constrained_types.rs" 9 18 9 68] result = LtLog0.lt_log (DeepModel0.deep_model self) (DeepModel0.deep_model other) }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Logic_Ord_Impl1_CmpLeLog_Stub
  type a
  type b
  function cmp_le_log (_1 : (a, b)) (_2 : (a, b)) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpLeLog_Interface
  type a
  type b
  function cmp_le_log (_1 : (a, b)) (_2 : (a, b)) : ()
  val cmp_le_log (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = cmp_le_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl1_CmpLeLog
  type a
  type b
  function cmp_le_log (_1 : (a, b)) (_2 : (a, b)) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 79 12 79 14] ()
  val cmp_le_log (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = cmp_le_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl1_CmpLtLog_Stub
  type a
  type b
  function cmp_lt_log (_1 : (a, b)) (_2 : (a, b)) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpLtLog_Interface
  type a
  type b
  function cmp_lt_log (_1 : (a, b)) (_2 : (a, b)) : ()
  val cmp_lt_log (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = cmp_lt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl1_CmpLtLog
  type a
  type b
  function cmp_lt_log (_1 : (a, b)) (_2 : (a, b)) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 85 12 85 14] ()
  val cmp_lt_log (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = cmp_lt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl1_CmpGeLog_Stub
  type a
  type b
  function cmp_ge_log (_1 : (a, b)) (_2 : (a, b)) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGeLog_Interface
  type a
  type b
  function cmp_ge_log (_1 : (a, b)) (_2 : (a, b)) : ()
  val cmp_ge_log (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = cmp_ge_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl1_CmpGeLog
  type a
  type b
  function cmp_ge_log (_1 : (a, b)) (_2 : (a, b)) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 91 12 91 14] ()
  val cmp_ge_log (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = cmp_ge_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl1_CmpGtLog_Stub
  type a
  type b
  function cmp_gt_log (_1 : (a, b)) (_2 : (a, b)) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGtLog_Interface
  type a
  type b
  function cmp_gt_log (_1 : (a, b)) (_2 : (a, b)) : ()
  val cmp_gt_log (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = cmp_gt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl1_CmpGtLog
  type a
  type b
  function cmp_gt_log (_1 : (a, b)) (_2 : (a, b)) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 97 12 97 14] ()
  val cmp_gt_log (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = cmp_gt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl1_Refl_Stub
  type a
  type b
  function refl (_1 : (a, b)) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Refl_Interface
  type a
  type b
  function refl (_1 : (a, b)) : ()
  val refl (_1 : (a, b)) : ()
    ensures { result = refl _1 }
    
end
module CreusotContracts_Logic_Ord_Impl1_Refl
  type a
  type b
  function refl (_1 : (a, b)) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 103 12 103 14] ()
  val refl (_1 : (a, b)) : ()
    ensures { result = refl _1 }
    
end
module CreusotContracts_Logic_Ord_Impl1_Trans_Stub
  type a
  type b
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : (a, b)) (_2 : (a, b)) (_3 : (a, b)) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Trans_Interface
  type a
  type b
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : (a, b)) (_2 : (a, b)) (_3 : (a, b)) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (_1 : (a, b)) (_2 : (a, b)) (_3 : (a, b)) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    ensures { result = trans _1 _2 _3 _4 }
    
end
module CreusotContracts_Logic_Ord_Impl1_Trans
  type a
  type b
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : (a, b)) (_2 : (a, b)) (_3 : (a, b)) (_4 : Core_Cmp_Ordering_Type.t_ordering) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 109 12 109 14] ()
  val trans (_1 : (a, b)) (_2 : (a, b)) (_3 : (a, b)) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    ensures { result = trans _1 _2 _3 _4 }
    
end
module CreusotContracts_Logic_Ord_Impl1_Antisym1_Stub
  type a
  type b
  function antisym1 (_1 : (a, b)) (_2 : (a, b)) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym1_Interface
  type a
  type b
  function antisym1 (_1 : (a, b)) (_2 : (a, b)) : ()
  val antisym1 (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = antisym1 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl1_Antisym1
  type a
  type b
  function antisym1 (_1 : (a, b)) (_2 : (a, b)) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 115 12 115 14] ()
  val antisym1 (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = antisym1 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl1_Antisym2_Stub
  type a
  type b
  function antisym2 (_1 : (a, b)) (_2 : (a, b)) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym2_Interface
  type a
  type b
  function antisym2 (_1 : (a, b)) (_2 : (a, b)) : ()
  val antisym2 (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = antisym2 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl1_Antisym2
  type a
  type b
  function antisym2 (_1 : (a, b)) (_2 : (a, b)) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 121 12 121 14] ()
  val antisym2 (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = antisym2 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl1_EqCmp_Stub
  type a
  type b
  function eq_cmp (_1 : (a, b)) (_2 : (a, b)) : ()
end
module CreusotContracts_Logic_Ord_Impl1_EqCmp_Interface
  type a
  type b
  function eq_cmp (_1 : (a, b)) (_2 : (a, b)) : ()
  val eq_cmp (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = eq_cmp _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl1_EqCmp
  type a
  type b
  function eq_cmp (_1 : (a, b)) (_2 : (a, b)) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 127 12 127 14] ()
  val eq_cmp (_1 : (a, b)) (_2 : (a, b)) : ()
    ensures { result = eq_cmp _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_LtLog_Stub
  use prelude.Int
  function lt_log (self : int) (_2 : int) : bool
end
module CreusotContracts_Logic_Ord_Impl3_LtLog_Interface
  use prelude.Int
  function lt_log (self : int) (_2 : int) : bool
  val lt_log (self : int) (_2 : int) : bool
    ensures { result = lt_log self _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_LtLog
  use prelude.Int
  use int.Int
  function lt_log (self : int) (_2 : int) : bool =
    Int.(<) self _2
  val lt_log (self : int) (_2 : int) : bool
    ensures { result = lt_log self _2 }
    
end
module CreusotContracts_Std1_Num_Impl7_DeepModel_Stub
  use prelude.Int
  use prelude.UInt32
  function deep_model (self : uint32) : int
end
module CreusotContracts_Std1_Num_Impl7_DeepModel_Interface
  use prelude.Int
  use prelude.UInt32
  function deep_model (self : uint32) : int
  val deep_model (self : uint32) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl7_DeepModel
  use prelude.Int
  use prelude.UInt32
  function deep_model (self : uint32) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  val deep_model (self : uint32) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLeLog_Stub
  use prelude.Int
  function cmp_le_log (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_CmpLeLog_Interface
  use prelude.Int
  function cmp_le_log (_1 : int) (_2 : int) : ()
  val cmp_le_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_le_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLeLog
  use prelude.Int
  function cmp_le_log (_1 : int) (_2 : int) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 79 12 79 14] ()
  val cmp_le_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_le_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLtLog_Stub
  use prelude.Int
  function cmp_lt_log (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_CmpLtLog_Interface
  use prelude.Int
  function cmp_lt_log (_1 : int) (_2 : int) : ()
  val cmp_lt_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_lt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLtLog
  use prelude.Int
  function cmp_lt_log (_1 : int) (_2 : int) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 85 12 85 14] ()
  val cmp_lt_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_lt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpGeLog_Stub
  use prelude.Int
  function cmp_ge_log (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_CmpGeLog_Interface
  use prelude.Int
  function cmp_ge_log (_1 : int) (_2 : int) : ()
  val cmp_ge_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_ge_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpGeLog
  use prelude.Int
  function cmp_ge_log (_1 : int) (_2 : int) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 91 12 91 14] ()
  val cmp_ge_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_ge_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpGtLog_Stub
  use prelude.Int
  function cmp_gt_log (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_CmpGtLog_Interface
  use prelude.Int
  function cmp_gt_log (_1 : int) (_2 : int) : ()
  val cmp_gt_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_gt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpGtLog
  use prelude.Int
  function cmp_gt_log (_1 : int) (_2 : int) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 97 12 97 14] ()
  val cmp_gt_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_gt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Refl_Stub
  use prelude.Int
  function refl (_1 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_Refl_Interface
  use prelude.Int
  function refl (_1 : int) : ()
  val refl (_1 : int) : ()
    ensures { result = refl _1 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Refl
  use prelude.Int
  function refl (_1 : int) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 103 12 103 14] ()
  val refl (_1 : int) : ()
    ensures { result = refl _1 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Trans_Stub
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_Impl3_Trans_Interface
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    ensures { result = trans _1 _2 _3 _4 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Trans
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 109 12 109 14] ()
  val trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    ensures { result = trans _1 _2 _3 _4 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Antisym1_Stub
  use prelude.Int
  function antisym1 (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_Antisym1_Interface
  use prelude.Int
  function antisym1 (_1 : int) (_2 : int) : ()
  val antisym1 (_1 : int) (_2 : int) : ()
    ensures { result = antisym1 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Antisym1
  use prelude.Int
  function antisym1 (_1 : int) (_2 : int) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 115 12 115 14] ()
  val antisym1 (_1 : int) (_2 : int) : ()
    ensures { result = antisym1 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Antisym2_Stub
  use prelude.Int
  function antisym2 (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_Antisym2_Interface
  use prelude.Int
  function antisym2 (_1 : int) (_2 : int) : ()
  val antisym2 (_1 : int) (_2 : int) : ()
    ensures { result = antisym2 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Antisym2
  use prelude.Int
  function antisym2 (_1 : int) (_2 : int) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 121 12 121 14] ()
  val antisym2 (_1 : int) (_2 : int) : ()
    ensures { result = antisym2 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_EqCmp_Stub
  use prelude.Int
  function eq_cmp (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_EqCmp_Interface
  use prelude.Int
  function eq_cmp (_1 : int) (_2 : int) : ()
  val eq_cmp (_1 : int) (_2 : int) : ()
    ensures { result = eq_cmp _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_EqCmp
  use prelude.Int
  function eq_cmp (_1 : int) (_2 : int) : () =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 127 12 127 14] ()
  val eq_cmp (_1 : int) (_2 : int) : ()
    ensures { result = eq_cmp _1 _2 }
    
end
module ConstrainedTypes_UsesConcreteInstance_Interface
  use prelude.Int
  use prelude.UInt32
  val uses_concrete_instance [#"../constrained_types.rs" 14 0 14 67] (x : (uint32, uint32)) (y : (uint32, uint32)) : bool
    
end
module ConstrainedTypes_UsesConcreteInstance
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Logic_Ord_Impl3_EqCmp_Interface as EqCmp1
  clone CreusotContracts_Logic_Ord_Impl3_Antisym2_Interface as Antisym21
  clone CreusotContracts_Logic_Ord_Impl3_Antisym1_Interface as Antisym11
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl3_Trans_Interface as Trans1
  clone CreusotContracts_Logic_Ord_Impl3_Refl_Interface as Refl1
  clone CreusotContracts_Logic_Ord_Impl3_CmpGtLog_Interface as CmpGtLog1
  clone CreusotContracts_Logic_Ord_Impl3_CmpGeLog_Interface as CmpGeLog1
  clone CreusotContracts_Logic_Ord_Impl3_CmpLtLog_Interface as CmpLtLog1
  clone CreusotContracts_Logic_Ord_Impl3_CmpLeLog_Interface as CmpLeLog1
  clone CreusotContracts_Std1_Num_Impl7_DeepModel as DeepModel2
  clone CreusotContracts_Logic_Ord_Impl3_LtLog as LtLog1
  use prelude.Int
  clone CreusotContracts_Logic_Ord_Impl1_EqCmp_Interface as EqCmp0 with
    type a = int,
    type b = int
  clone CreusotContracts_Logic_Ord_Impl1_Antisym2_Interface as Antisym20 with
    type a = int,
    type b = int
  clone CreusotContracts_Logic_Ord_Impl1_Antisym1_Interface as Antisym10 with
    type a = int,
    type b = int
  clone CreusotContracts_Logic_Ord_Impl1_Trans_Interface as Trans0 with
    type a = int,
    type b = int
  clone CreusotContracts_Logic_Ord_Impl1_Refl_Interface as Refl0 with
    type a = int,
    type b = int
  clone CreusotContracts_Logic_Ord_Impl1_CmpGtLog_Interface as CmpGtLog0 with
    type a = int,
    type b = int
  clone CreusotContracts_Logic_Ord_Impl1_CmpGeLog_Interface as CmpGeLog0 with
    type a = int,
    type b = int
  clone CreusotContracts_Logic_Ord_Impl1_CmpLtLog_Interface as CmpLtLog0 with
    type a = int,
    type b = int
  clone CreusotContracts_Logic_Ord_Impl1_CmpLeLog_Interface as CmpLeLog0 with
    type a = int,
    type b = int
  clone CreusotContracts_Std1_Tuples_Impl4_DeepModel as DeepModel1 with
    type a = uint32,
    type b = uint32,
    type DeepModelTy0.deepModelTy = int,
    type DeepModelTy1.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel2.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = (uint32, uint32)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = (uint32, uint32),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = uint32
  clone CreusotContracts_Logic_Ord_Impl1_LtLog as LtLog0 with
    type a = int,
    type b = int,
    function LtLog0.lt_log = LtLog1.lt_log,
    function LtLog1.lt_log = LtLog1.lt_log
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = (uint32, uint32),
    type DeepModelTy0.deepModelTy = (int, int),
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = uint32,
    type t2 = uint32,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  clone Core_Tuple_Impl17_Lt_Interface as Lt0 with
    type u = uint32,
    type t = uint32,
    predicate Inv0.inv = Inv0.inv,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function LtLog0.lt_log = LtLog0.lt_log,
    type DeepModelTy0.deepModelTy = int,
    type DeepModelTy1.deepModelTy = int
  let rec cfg uses_concrete_instance [#"../constrained_types.rs" 14 0 14 67] [@cfg:stackify] [@cfg:subregion_analysis] (x : (uint32, uint32)) (y : (uint32, uint32)) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x : (uint32, uint32) = x;
  var y : (uint32, uint32) = y;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../constrained_types.rs" 15 4 15 9] Lt0.lt ([#"../constrained_types.rs" 15 4 15 5] x) ([#"../constrained_types.rs" 15 8 15 9] y));
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve y };
    assume { Resolve0.resolve x };
    return _0
  }
  
end
