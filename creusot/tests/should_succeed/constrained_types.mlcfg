
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module ConstrainedTypes_UsesConcreteInstance
  use prelude.Int
  function eq_cmp0 (_1 : (int, int)) (_2 : (int, int)) : ()
  val eq_cmp0 (_1 : (int, int)) (_2 : (int, int)) : ()
    ensures { result = eq_cmp0 _1 _2 }
    
  function antisym20 (_1 : (int, int)) (_2 : (int, int)) : ()
  val antisym20 (_1 : (int, int)) (_2 : (int, int)) : ()
    ensures { result = antisym20 _1 _2 }
    
  function antisym10 (_1 : (int, int)) (_2 : (int, int)) : ()
  val antisym10 (_1 : (int, int)) (_2 : (int, int)) : ()
    ensures { result = antisym10 _1 _2 }
    
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans0 (_1 : (int, int)) (_2 : (int, int)) (_3 : (int, int)) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans0 (_1 : (int, int)) (_2 : (int, int)) (_3 : (int, int)) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    ensures { result = trans0 _1 _2 _3 _4 }
    
  function refl0 (_1 : (int, int)) : ()
  val refl0 (_1 : (int, int)) : ()
    ensures { result = refl0 _1 }
    
  function cmp_gt_log0 (_1 : (int, int)) (_2 : (int, int)) : ()
  val cmp_gt_log0 (_1 : (int, int)) (_2 : (int, int)) : ()
    ensures { result = cmp_gt_log0 _1 _2 }
    
  function cmp_ge_log0 (_1 : (int, int)) (_2 : (int, int)) : ()
  val cmp_ge_log0 (_1 : (int, int)) (_2 : (int, int)) : ()
    ensures { result = cmp_ge_log0 _1 _2 }
    
  function cmp_lt_log0 (_1 : (int, int)) (_2 : (int, int)) : ()
  val cmp_lt_log0 (_1 : (int, int)) (_2 : (int, int)) : ()
    ensures { result = cmp_lt_log0 _1 _2 }
    
  function cmp_le_log0 (_1 : (int, int)) (_2 : (int, int)) : ()
  val cmp_le_log0 (_1 : (int, int)) (_2 : (int, int)) : ()
    ensures { result = cmp_le_log0 _1 _2 }
    
  use prelude.UInt32
  predicate invariant0 (self : (uint32, uint32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : (uint32, uint32)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : (uint32, uint32))
  val inv0 (_x : (uint32, uint32)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : (uint32, uint32) . inv0 x = true
  use prelude.Int
  predicate resolve1 (self : uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve1 (self : uint32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (uint32, uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve1 (let (a, _) = self in a) /\ resolve1 (let (_, a) = self in a)
  val resolve0 (self : (uint32, uint32)) : bool
    ensures { result = resolve0 self }
    
  use prelude.Borrow
  use int.Int
  function lt_log0 (self : (int, int)) (o : (int, int)) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 240 20 240 67] (let (a, _) = self in a) = (let (a, _) = o in a) /\ (let (_, a) = self in a) < (let (_, a) = o in a) \/ (let (a, _) = self in a) < (let (a, _) = o in a)
  val lt_log0 (self : (int, int)) (o : (int, int)) : bool
    ensures { result = lt_log0 self o }
    
  use prelude.UInt32
  function deep_model2 (self : uint32) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  val deep_model2 (self : uint32) : int
    ensures { result = deep_model2 self }
    
  function deep_model1 (self : (uint32, uint32)) : (int, int) =
    [#"../../../../creusot-contracts/src/std/tuples.rs" 29 28 29 57] (deep_model2 (let (a, _) = self in a), deep_model2 (let (_, a) = self in a))
  val deep_model1 (self : (uint32, uint32)) : (int, int)
    ensures { result = deep_model1 self }
    
  function deep_model0 (self : (uint32, uint32)) : (int, int) =
    [#"../../../../creusot-contracts/src/model.rs" 70 8 70 28] deep_model1 self
  val deep_model0 (self : (uint32, uint32)) : (int, int)
    ensures { result = deep_model0 self }
    
  val lt0 (self : (uint32, uint32)) (other : (uint32, uint32)) : bool
    requires {inv0 self}
    requires {inv0 other}
    ensures { [#"../constrained_types.rs" 9 18 9 68] result = lt_log0 (deep_model0 self) (deep_model0 other) }
    
  let rec cfg uses_concrete_instance [#"../constrained_types.rs" 14 0 14 67] [@cfg:stackify] [@cfg:subregion_analysis] (x : (uint32, uint32)) (y : (uint32, uint32)) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x : (uint32, uint32) = x;
  var y : (uint32, uint32) = y;
  {
    goto BB0
  }
  BB0 {
    [#"../constrained_types.rs" 15 4 15 9] _0 <- ([#"../constrained_types.rs" 15 4 15 9] lt0 x y);
    goto BB1
  }
  BB1 {
    assume { resolve0 y };
    assume { resolve0 x };
    return _0
  }
  
end
