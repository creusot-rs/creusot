module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_take_first_mut__take_first_mut [#"take_first_mut.rs" 14 0 14 74]
  type t
  
  let%span stake_first_mut0 = "take_first_mut.rs" 14 29 14 34
  let%span stake_first_mut1 = "take_first_mut.rs" 6 10 13 1
  let%span stake_first_mut2 = "take_first_mut.rs" 14 57 14 74
  let%span smem3 = "../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  let%span smem4 = "../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  let%span sslice5 = "../../../creusot-contracts/src/std/slice.rs" 283 18 291 9
  let%span sops6 = "../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span sslice7 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice8 = "../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span sseq9 = "../../../creusot-contracts/src/logic/seq.rs" 65 8 65 39
  let%span sslice10 = "../../../creusot-contracts/src/std/slice.rs" 66 20 66 65
  let%span smodel11 = "../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve12 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant13 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sslice14 = "../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sseq15 = "../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed16 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'3 (_1 : t)
  
  predicate invariant'5 (self : t) =
    [%#sboxed16] inv'3 self
  
  predicate inv'9 (_1 : t)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t [inv'9 x] . inv'9 x = invariant'5 x
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : borrowed (slice t))
  
  predicate inv'4 (_1 : borrowed t)
  
  predicate inv'8 (_1 : (borrowed t, borrowed (slice t)))
  
  axiom inv_axiom'7 [@rewrite] : forall x : (borrowed t, borrowed (slice t)) [inv'8 x] . inv'8 x
  = (let (a, b) = x in inv'4 a /\ inv'0 b)
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq t) =
    [%#sseq15] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'7 (_1 : Seq.seq t)
  
  axiom inv_axiom'6 [@rewrite] : forall x : Seq.seq t [inv'7 x] . inv'7 x = invariant'4 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'6 (_1 : Option'0.t_Option (borrowed t, borrowed (slice t)))
  
  axiom inv_axiom'5 [@rewrite] : forall x : Option'0.t_Option (borrowed t, borrowed (slice t)) [inv'6 x] . inv'6 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'8 a_0
    end
  
  use T_core__option__Option as Option'0
  
  predicate inv'5 (_1 : Option'0.t_Option (borrowed t))
  
  axiom inv_axiom'4 [@rewrite] : forall x : Option'0.t_Option (borrowed t) [inv'5 x] . inv'5 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'4 a_0
    end
  
  predicate invariant'3 (self : borrowed t) =
    [%#sinvariant13] inv'3 self.current /\ inv'3 self.final
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed t [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate invariant'2 (self : borrowed (borrowed (slice t))) =
    [%#sinvariant13] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (borrowed (slice t)))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (borrowed (slice t)) [inv'2 x] . inv'2 x = invariant'2 x
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'0 (self : slice t) : Seq.seq t
  
  axiom view'0_spec : forall self : slice t . ([%#sslice8] view'0 self = Slice.id self)
  && ([%#sslice7] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'1 (self : slice t) =
    [%#sslice14] inv'7 (view'0 self)
  
  predicate inv'1 (_1 : slice t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : slice t [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (slice t)) =
    [%#sinvariant13] inv'1 self.current /\ inv'1 self.final
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (slice t) [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  function tail'0 (self : Seq.seq t) : Seq.seq t =
    [%#sseq9] Seq.([..]) self 1 (Seq.length self)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#sops6] Seq.get (view'0 self) ix
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'5 (self : borrowed t) =
    [%#sresolve12] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed t) =
    resolve'5 _1
  
  predicate resolve'4 (self : borrowed (borrowed (slice t))) =
    [%#sresolve12] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (borrowed (slice t))) =
    resolve'4 _1
  
  predicate resolve'3 (self : borrowed (slice t)) =
    [%#sresolve12] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (slice t)) =
    resolve'3 _1
  
  function view'1 (self : borrowed (slice t)) : Seq.seq t =
    [%#smodel11] view'0 self.current
  
  let rec split_first_mut'0 (self:borrowed (slice t)) (return'  (ret:Option'0.t_Option (borrowed t, borrowed (slice t))))= {[@expl:precondition] inv'0 self}
    any
    [ return' (result:Option'0.t_Option (borrowed t, borrowed (slice t)))-> {inv'6 result}
      {[%#sslice5] match result with
        | Option'0.C_Some (first, tail) -> first.current = index_logic'0 self.current 0
        /\ first.final = index_logic'0 self.final 0
        /\ Seq.length (view'0 self.current) > 0
        /\ Seq.length (view'0 self.final) > 0
        /\ view'0 tail.current = tail'0 (view'0 self.current) /\ view'0 tail.final = tail'0 (view'0 self.final)
        | Option'0.C_None -> Seq.length (view'1 self) = 0
        /\ self.final = self.current /\ view'1 self = (Seq.empty  : Seq.seq t)
        end}
      (! return' {result}) ]
    
  
  predicate is_default'0 (self : borrowed (slice t)) =
    [%#sslice10] view'1 self = (Seq.empty  : Seq.seq t) /\ view'0 self.final = (Seq.empty  : Seq.seq t)
  
  let rec take'0 (dest:borrowed (borrowed (slice t))) (return'  (ret:borrowed (slice t)))= {[@expl:precondition] inv'2 dest}
    any
    [ return' (result:borrowed (slice t))-> {inv'0 result}
      {[%#smem4] is_default'0 dest.final}
      {[%#smem3] result = dest.current}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec take_first_mut (self_:borrowed (borrowed (slice t))) (return'  (ret:Option'0.t_Option (borrowed t)))= {[%#stake_first_mut0] inv'2 self_}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 self_.current}
        Borrow.borrow_mut <borrowed (slice t)> {self_.current}
          (fun (_ret':borrowed (borrowed (slice t))) ->
             [ &_6 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self_ <- { self_ with current = _ret'.final ; } ] 
            s1)
      | s1 = take'0 {_6} (fun (_ret':borrowed (slice t)) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = {inv'1 _5.current}
        Borrow.borrow_final <slice t> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed (slice t)) ->
             [ &_4 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_5 <- { _5 with current = _ret'.final ; } ] 
            s1)
      | s1 = split_first_mut'0 {_4}
          (fun (_ret':Option'0.t_Option (borrowed t, borrowed (slice t))) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = any
      [ br0 -> {_3 = Option'0.C_None } (! bb4)
      | br1 (a:(borrowed t, borrowed (slice t)))-> {_3 = Option'0.C_Some a} (! bb5) ]
      
    | bb5 = s0
      [ s0 = Option'0.v_Some <(borrowed t, borrowed (slice t))> {_3}
          (fun (r0'0:(borrowed t, borrowed (slice t))) ->  [ &first <- let (r'0, _) = r0'0 in r'0 ] s1)
      | s1 = Option'0.v_Some <(borrowed t, borrowed (slice t))> {_3}
          (fun (r0'1:(borrowed t, borrowed (slice t))) ->  [ &rem <- let (_, r'1) = r0'1 in r'1 ] s2)
      | s2 = {inv'1 rem.current}
        Borrow.borrow_final <slice t> {rem.current} {Borrow.get_id rem}
          (fun (_ret':borrowed (slice t)) ->
             [ &_11 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &rem <- { rem with current = _ret'.final ; } ] 
            s3)
      | s3 = {[@expl:type invariant] match self_ with
          | {current = x'0} -> inv'0 x'0
          | _ -> true
          end}
        s4
      | s4 = -{match self_ with
          | {current = x'1} -> resolve'0 x'1
          | _ -> true
          end}-
        s5
      | s5 =  [ &self_ <- { self_ with current = _11 ; } ] s6
      | s6 = {[@expl:type invariant] inv'2 self_} s7
      | s7 = -{resolve'1 self_}- s8
      | s8 = {inv'3 first.current}
        Borrow.borrow_final <t> {first.current} {Borrow.get_id first}
          (fun (_ret':borrowed t) ->
             [ &_12 <- _ret' ] 
            -{inv'3 _ret'.final}-
             [ &first <- { first with current = _ret'.final ; } ] 
            s9)
      | s9 =  [ &_0 <- Option'0.C_Some _12 ] s10
      | s10 = {[@expl:type invariant] inv'0 rem} s11
      | s11 = -{resolve'0 rem}- s12
      | s12 = {[@expl:type invariant] inv'4 first} s13
      | s13 = -{resolve'2 first}- s14
      | s14 = {[@expl:type invariant] inv'0 _5} s15
      | s15 = -{resolve'0 _5}- s16
      | s16 = bb7 ]
      
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'2 self_} s1 | s1 = -{resolve'1 self_}- s2 | s2 = bb6 ] 
    | bb6 = s0
      [ s0 =  [ &_0 <- Option'0.C_None ] s1
      | s1 = {[@expl:type invariant] inv'0 _5} s2
      | s2 = -{resolve'0 _5}- s3
      | s3 = bb7 ]
      
    | bb7 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option (borrowed t) = any_l ()
    | & self_ : borrowed (borrowed (slice t)) = self_
    | & _3 : Option'0.t_Option (borrowed t, borrowed (slice t)) = any_l ()
    | & _4 : borrowed (slice t) = any_l ()
    | & _5 : borrowed (slice t) = any_l ()
    | & _6 : borrowed (borrowed (slice t)) = any_l ()
    | & first : borrowed t = any_l ()
    | & rem : borrowed (slice t) = any_l ()
    | & _11 : borrowed (slice t) = any_l ()
    | & _12 : borrowed t = any_l () ]
    
    [ return' (result:Option'0.t_Option (borrowed t))-> {[@expl:postcondition] [%#stake_first_mut2] inv'5 result}
      {[@expl:postcondition] [%#stake_first_mut1] match result with
        | Option'0.C_Some r -> r.current = index_logic'0 (self_.current).current 0
        /\ r.final = index_logic'0 (self_.current).final 0
        /\ Seq.length (view'0 (self_.current).current) > 0
        /\ Seq.length (view'0 (self_.current).final) > 0
        /\ view'0 (self_.final).current = tail'0 (view'0 (self_.current).current)
        /\ view'0 (self_.final).final = tail'0 (view'0 (self_.current).final)
        | Option'0.C_None -> view'0 (self_.final).current = (Seq.empty  : Seq.seq t)
        /\ view'0 (self_.current).final = (Seq.empty  : Seq.seq t)
        /\ view'0 (self_.current).current = (Seq.empty  : Seq.seq t)
        /\ view'0 (self_.final).final = (Seq.empty  : Seq.seq t)
        end}
      (! return' {result}) ]
    
end
