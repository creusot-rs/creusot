
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module TakeFirstMut_TakeFirstMut
  type t
  
  let%span stake_first_mut0 = "../take_first_mut.rs" 15 10 15 44
  
  let%span stake_first_mut1 = "../take_first_mut.rs" 14 29 14 34
  
  let%span stake_first_mut2 = "../take_first_mut.rs" 6 10 13 1
  
  let%span stake_first_mut3 = "../take_first_mut.rs" 14 57 14 74
  
  let%span span4 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../../../../creusot-contracts/src/logic/seq.rs" 52 8 52 39
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span8 = "../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span9 = "../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span10 = "../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span12 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span13 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span14 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span15 = "" 0 0 0 0
  
  let%span span16 = "../../../../creusot-contracts/src/std/slice.rs" 272 18 280 9
  
  let%span span17 = "" 0 0 0 0
  
  let%span span18 = "../../../../creusot-contracts/src/std/slice.rs" 55 20 55 65
  
  let%span span19 = "" 0 0 0 0
  
  let%span span20 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  
  let%span span21 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  
  let%span span22 = "" 0 0 0 0
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq t) =
    [%#span4] true
  
  predicate inv'7 (_x : Seq.seq t)
  
  axiom inv'7 : forall x : Seq.seq t . inv'7 x = true
  
  use prelude.prelude.Borrow
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'6 (self : Option'0.t_option (borrowed t)) =
    [%#span4] true
  
  predicate inv'6 (_x : Option'0.t_option (borrowed t))
  
  axiom inv'6 : forall x : Option'0.t_option (borrowed t) . inv'6 x = true
  
  predicate invariant'5 (self : borrowed t)
  
  predicate inv'5 (_x : borrowed t)
  
  axiom inv'5 : forall x : borrowed t . inv'5 x = true
  
  predicate invariant'4 (self : t)
  
  predicate inv'4 (_x : t)
  
  axiom inv'4 : forall x : t . inv'4 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'3 (self : Option'0.t_option (borrowed t, borrowed (slice t))) =
    [%#span4] true
  
  predicate inv'3 (_x : Option'0.t_option (borrowed t, borrowed (slice t)))
  
  axiom inv'3 : forall x : Option'0.t_option (borrowed t, borrowed (slice t)) . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (borrowed (slice t))) =
    [%#span4] true
  
  predicate inv'2 (_x : borrowed (borrowed (slice t)))
  
  axiom inv'2 : forall x : borrowed (borrowed (slice t)) . inv'2 x = true
  
  predicate invariant'1 (self : slice t) =
    [%#span4] true
  
  predicate inv'1 (_x : slice t)
  
  axiom inv'1 : forall x : slice t . inv'1 x = true
  
  predicate invariant'0 (self : borrowed (slice t)) =
    [%#span4] true
  
  predicate inv'0 (_x : borrowed (slice t))
  
  axiom inv'0 : forall x : borrowed (slice t) . inv'0 x = true
  
  use seq.Seq
  
  use prelude.seq_ext.SeqExt
  
  use seq.Seq
  
  function tail'0 (self : Seq.seq t) : Seq.seq t =
    [%#span5] SeqExt.subsequence self 1 (Seq.length self)
  
  use prelude.prelude.Int
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant max'0 : usize = [%#span6] (18446744073709551615 : usize)
  
  function shallow_model'0 (self : slice t) : Seq.seq t
  
  axiom shallow_model'0_spec : forall self : slice t . ([%#span7] inv'1 self)
   -> ([%#span10] inv'7 (shallow_model'0 self))
  && ([%#span9] shallow_model'0 self = Slice.id self)
  && ([%#span8] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#span11] Seq.get (shallow_model'0 self) ix
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed t) =
    [%#span12]  ^ self =  * self
  
  predicate resolve'2 (self : borrowed (slice t)) =
    [%#span12]  ^ self =  * self
  
  predicate resolve'1 (self : Option'0.t_option (borrowed t, borrowed (slice t))) =
    [%#span13] true
  
  predicate resolve'0 (self : borrowed (borrowed (slice t))) =
    [%#span12]  ^ self =  * self
  
  function shallow_model'1 (self : borrowed (slice t)) : Seq.seq t =
    [%#span14] shallow_model'0 ( * self)
  
  let rec split_first_mut'0 (self:borrowed (slice t)) (return'  (ret:Option'0.t_option (borrowed t, borrowed (slice t))))= {[@expl:precondition] [%#span15] inv'0 self}
    any
    [ return' (result:Option'0.t_option (borrowed t, borrowed (slice t)))-> {[%#span17] inv'3 result}
      {[%#span16] match result with
        | Option'0.C_Some (first, tail) ->  * first = index_logic'0 ( * self) 0
        /\  ^ first = index_logic'0 ( ^ self) 0
        /\ Seq.length (shallow_model'0 ( * self)) > 0
        /\ Seq.length (shallow_model'0 ( ^ self)) > 0
        /\ shallow_model'0 ( * tail) = tail'0 (shallow_model'0 ( * self))
        /\ shallow_model'0 ( ^ tail) = tail'0 (shallow_model'0 ( ^ self))
        | Option'0.C_None -> Seq.length (shallow_model'1 self) = 0
        /\  ^ self =  * self /\ shallow_model'1 self = (Seq.empty  : Seq.seq t)
        end}
      (! return' {result}) ]
    
  
  predicate is_default'0 (self : borrowed (slice t)) =
    [%#span18] shallow_model'1 self = (Seq.empty  : Seq.seq t) /\ shallow_model'0 ( ^ self) = (Seq.empty  : Seq.seq t)
  
  let rec take'0 (dest:borrowed (borrowed (slice t))) (return'  (ret:borrowed (slice t)))= {[@expl:precondition] [%#span19] inv'2 dest}
    any
    [ return' (result:borrowed (slice t))-> {[%#span22] inv'0 result}
      {[%#span21] is_default'0 ( ^ dest)}
      {[%#span20] result =  * dest}
      (! return' {result}) ]
    
  
  let rec take_first_mut (self_:borrowed (borrowed (slice t))) (return'  (ret:Option'0.t_option (borrowed t)))= {[%#stake_first_mut1] inv'2 self_}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <borrowed (slice t)> { * self_} {Borrow.get_id self_}
          (fun (_ret':borrowed (borrowed (slice t))) ->
             [ &_6 <- _ret' ] 
             [ &self_ <- { self_ with current = ( ^ _6) ; } ] 
            s1)
      | s1 = -{inv'0 ( ^ _6)}- s2
      | s2 = take'0 {_6} (fun (_ret':borrowed (slice t)) ->  [ &_5 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <slice t> { * _5} {Borrow.get_id _5}
          (fun (_ret':borrowed (slice t)) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = ( ^ _4) ; } ] s1)
      | s1 = -{inv'1 ( ^ _4)}- s2
      | s2 = split_first_mut'0 {_4}
          (fun (_ret':Option'0.t_option (borrowed t, borrowed (slice t))) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = any
      [ br0 -> {_3 = Option'0.C_None } (! bb4)
      | br1 (a:(borrowed t, borrowed (slice t)))-> {_3 = Option'0.C_Some a} (! bb5) ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'2 self_} s1
      | s1 = -{resolve'0 self_}- s2
      | s2 = {[@expl:type invariant] inv'3 _3} s3
      | s3 = -{resolve'1 _3}- s4
      | s4 = {[@expl:type invariant] inv'0 _5} s5
      | s5 = -{resolve'2 _5}- s6
      | s6 = {[%#stake_first_mut0] false} any ]
      
    | bb5 = s0
      [ s0 = Option'0.some <(borrowed t, borrowed (slice t))> {_3}
          (fun (r0'0:(borrowed t, borrowed (slice t))) ->
             [ &first <- let (r'0, _) = r0'0 in r'0 ] 
            (any
            [ any_ (_any:borrowed t)-> (! Option'0.some <(borrowed t, borrowed (slice t))> {_3}
                (fun (l_0'0:(borrowed t, borrowed (slice t))) ->
                   [ &_3 <- Option'0.C_Some (let (_, l'2) = l_0'0 in (_any, l'2)) ] 
                  s1)) ]
            ))
      | s1 = Option'0.some <(borrowed t, borrowed (slice t))> {_3}
          (fun (r0'1:(borrowed t, borrowed (slice t))) ->
             [ &rem <- let (_, r'1) = r0'1 in r'1 ] 
            (any
            [ any_ (_any:borrowed (slice t))-> (! Option'0.some <(borrowed t, borrowed (slice t))> {_3}
                (fun (l_0'1:(borrowed t, borrowed (slice t))) ->
                   [ &_3 <- Option'0.C_Some (let (l'4, _) = l_0'1 in (l'4, _any)) ] 
                  s2)) ]
            ))
      | s2 = {[@expl:type invariant] inv'3 _3} s3
      | s3 = -{resolve'1 _3}- s4
      | s4 = Borrow.borrow_final <slice t> { * rem} {Borrow.get_id rem}
          (fun (_ret':borrowed (slice t)) ->  [ &_11 <- _ret' ]  [ &rem <- { rem with current = ( ^ _11) ; } ] s5)
      | s5 = -{inv'1 ( ^ _11)}- s6
      | s6 =  [ &self_ <- { self_ with current = _11 ; } ] 
        (any [ any_ (_any:borrowed (slice t))-> (!  [ &_11 <- _any ] s7) ] )
      | s7 = {[@expl:type invariant] inv'0 ( * self_)} s8
      | s8 = -{resolve'2 ( * self_)}- s9
      | s9 = {[@expl:type invariant] inv'2 self_} s10
      | s10 = -{resolve'0 self_}- s11
      | s11 = Borrow.borrow_final <t> { * first} {Borrow.get_id first}
          (fun (_ret':borrowed t) ->  [ &_12 <- _ret' ]  [ &first <- { first with current = ( ^ _12) ; } ] s12)
      | s12 = -{inv'4 ( ^ _12)}- s13
      | s13 =  [ &_0 <- Option'0.C_Some _12 ] (any [ any_ (_any:borrowed t)-> (!  [ &_12 <- _any ] s14) ] )
      | s14 = {[@expl:type invariant] inv'0 rem} s15
      | s15 = -{resolve'2 rem}- s16
      | s16 = {[@expl:type invariant] inv'5 first} s17
      | s17 = -{resolve'3 first}- s18
      | s18 = {[@expl:type invariant] inv'0 _5} s19
      | s19 = -{resolve'2 _5}- s20
      | s20 = bb7 ]
      
    | bb4 = bb6
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'3 _3} s1
      | s1 = -{resolve'1 _3}- s2
      | s2 = {[@expl:type invariant] inv'2 self_} s3
      | s3 = -{resolve'0 self_}- s4
      | s4 =  [ &_0 <- Option'0.C_None ] s5
      | s5 = {[@expl:type invariant] inv'0 _5} s6
      | s6 = -{resolve'2 _5}- s7
      | s7 = bb7 ]
      
    | bb7 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option (borrowed t) = any_l ()
    | & self_ : borrowed (borrowed (slice t)) = self_
    | & _3 : Option'0.t_option (borrowed t, borrowed (slice t)) = any_l ()
    | & _4 : borrowed (slice t) = any_l ()
    | & _5 : borrowed (slice t) = any_l ()
    | & _6 : borrowed (borrowed (slice t)) = any_l ()
    | & first : borrowed t = any_l ()
    | & rem : borrowed (slice t) = any_l ()
    | & _11 : borrowed (slice t) = any_l ()
    | & _12 : borrowed t = any_l () ]
    
    [ return' (result:Option'0.t_option (borrowed t))-> {[@expl:postcondition] [%#stake_first_mut3] inv'6 result}
      {[@expl:postcondition] [%#stake_first_mut2] match result with
        | Option'0.C_Some r ->  * r = index_logic'0 ( *  * self_) 0
        /\  ^ r = index_logic'0 ( ^  * self_) 0
        /\ Seq.length (shallow_model'0 ( *  * self_)) > 0
        /\ Seq.length (shallow_model'0 ( ^  * self_)) > 0
        /\ shallow_model'0 ( *  ^ self_) = tail'0 (shallow_model'0 ( *  * self_))
        /\ shallow_model'0 ( ^  ^ self_) = tail'0 (shallow_model'0 ( ^  * self_))
        | Option'0.C_None -> shallow_model'0 ( *  ^ self_) = (Seq.empty  : Seq.seq t)
        /\ shallow_model'0 ( ^  * self_) = (Seq.empty  : Seq.seq t)
        /\ shallow_model'0 ( *  * self_) = (Seq.empty  : Seq.seq t)
        /\ shallow_model'0 ( ^  ^ self_) = (Seq.empty  : Seq.seq t)
        end}
      (! return' {result}) ]
    
end
