
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module T_alloc__boxed__Box
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_Box 't 'a =
    | C_Box (Unique'0.t_Unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module M_take_first_mut__take_first_mut
  type t
  
  let%span stake_first_mut0 = "../take_first_mut.rs" 14 29 14 34
  
  let%span stake_first_mut1 = "../take_first_mut.rs" 6 10 13 1
  
  let%span stake_first_mut2 = "../take_first_mut.rs" 14 57 14 74
  
  let%span span3 = "../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span4 = "../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span5 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "../../../../creusot-contracts/src/std/slice.rs" 27 14 27 41
  
  let%span span9 = "../../../../creusot-contracts/src/std/slice.rs" 28 14 28 42
  
  let%span span10 = "../../../../creusot-contracts/src/std/slice.rs" 16 20 16 30
  
  let%span span11 = "../../../../creusot-contracts/src/logic/seq.rs" 65 8 65 39
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  
  let%span span13 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span14 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span15 = "" 0 0 0 0
  
  let%span span16 = "../../../../creusot-contracts/src/std/slice.rs" 281 18 289 9
  
  let%span span17 = "" 0 0 0 0
  
  let%span span18 = "../../../../creusot-contracts/src/std/slice.rs" 64 20 64 65
  
  let%span span19 = "" 0 0 0 0
  
  let%span span20 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  
  let%span span21 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  
  let%span span22 = "" 0 0 0 0
  
  predicate inv'3 (_1 : t)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'8 (self : t) =
    [%#span3] inv'3 self
  
  predicate inv'8 (_1 : t)
  
  axiom inv'8 : forall x : t . inv'8 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq t) =
    [%#span4] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'7 (_1 : Seq.seq t)
  
  axiom inv'7 : forall x : Seq.seq t . inv'7 x = true
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Borrow
  
  use T_core__option__Option as Option'0
  
  predicate invariant'6 (self : Option'0.t_Option (borrowed t, borrowed (slice t))) =
    [%#span5] true
  
  predicate inv'6 (_1 : Option'0.t_Option (borrowed t, borrowed (slice t)))
  
  axiom inv'6 : forall x : Option'0.t_Option (borrowed t, borrowed (slice t)) . inv'6 x = true
  
  predicate invariant'5 (self : Option'0.t_Option (borrowed t)) =
    [%#span5] true
  
  predicate inv'5 (_1 : Option'0.t_Option (borrowed t))
  
  axiom inv'5 : forall x : Option'0.t_Option (borrowed t) . inv'5 x = true
  
  predicate invariant'4 (self : borrowed t) =
    [%#span6] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_1 : borrowed t)
  
  axiom inv'4 : forall x : borrowed t . inv'4 x = true
  
  predicate invariant'3 (self : t)
  
  axiom inv'3 : forall x : t . inv'3 x = true
  
  predicate inv'0 (_1 : borrowed (slice t))
  
  predicate invariant'2 (self : borrowed (borrowed (slice t))) =
    [%#span6] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (borrowed (slice t)))
  
  axiom inv'2 : forall x : borrowed (borrowed (slice t)) . inv'2 x = true
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span7] (18446744073709551615 : usize)
  
  function shallow_model'0 (self : slice t) : Seq.seq t
  
  axiom shallow_model'0_spec : forall self : slice t . ([%#span9] shallow_model'0 self = Slice.id self)
  && ([%#span8] Seq.length (shallow_model'0 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'1 (self : slice t) =
    [%#span10] inv'7 (shallow_model'0 self)
  
  predicate inv'1 (_1 : slice t)
  
  axiom inv'1 : forall x : slice t . inv'1 x = true
  
  predicate invariant'0 (self : borrowed (slice t)) =
    [%#span6] inv'1 self.current /\ inv'1 self.final
  
  axiom inv'0 : forall x : borrowed (slice t) . inv'0 x = true
  
  use seq.Seq
  
  use prelude.seq_ext.SeqExt
  
  function tail'0 (self : Seq.seq t) : Seq.seq t =
    [%#span11] SeqExt.subsequence self 1 (Seq.length self)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#span12] Seq.get (shallow_model'0 self) ix
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed t) =
    [%#span13] self.final = self.current
  
  predicate resolve'1 (self : borrowed (borrowed (slice t))) =
    [%#span13] self.final = self.current
  
  predicate resolve'0 (self : borrowed (slice t)) =
    [%#span13] self.final = self.current
  
  function shallow_model'1 (self : borrowed (slice t)) : Seq.seq t =
    [%#span14] shallow_model'0 self.current
  
  let rec split_first_mut'0 (self:borrowed (slice t)) (return'  (ret:Option'0.t_Option (borrowed t, borrowed (slice t))))= {[@expl:precondition] [%#span15] inv'0 self}
    any
    [ return' (result:Option'0.t_Option (borrowed t, borrowed (slice t)))-> {[%#span17] inv'6 result}
      {[%#span16] match result with
        | Option'0.C_Some (first, tail) -> first.current = index_logic'0 self.current 0
        /\ first.final = index_logic'0 self.final 0
        /\ Seq.length (shallow_model'0 self.current) > 0
        /\ Seq.length (shallow_model'0 self.final) > 0
        /\ shallow_model'0 tail.current = tail'0 (shallow_model'0 self.current)
        /\ shallow_model'0 tail.final = tail'0 (shallow_model'0 self.final)
        | Option'0.C_None -> Seq.length (shallow_model'1 self) = 0
        /\ self.final = self.current /\ shallow_model'1 self = (Seq.empty  : Seq.seq t)
        end}
      (! return' {result}) ]
    
  
  predicate is_default'0 (self : borrowed (slice t)) =
    [%#span18] shallow_model'1 self = (Seq.empty  : Seq.seq t) /\ shallow_model'0 self.final = (Seq.empty  : Seq.seq t)
  
  let rec take'0 (dest:borrowed (borrowed (slice t))) (return'  (ret:borrowed (slice t)))= {[@expl:precondition] [%#span19] inv'2 dest}
    any
    [ return' (result:borrowed (slice t))-> {[%#span22] inv'0 result}
      {[%#span21] is_default'0 dest.final}
      {[%#span20] result = dest.current}
      (! return' {result}) ]
    
  
  let rec take_first_mut (self_:borrowed (borrowed (slice t))) (return'  (ret:Option'0.t_Option (borrowed t)))= {[%#stake_first_mut0] inv'2 self_}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <borrowed (slice t)> {self_.current}
          (fun (_ret':borrowed (borrowed (slice t))) ->
             [ &_6 <- _ret' ] 
             [ &self_ <- { self_ with current = _6.final ; } ] 
            s1)
      | s1 = -{inv'0 _6.final}- s2
      | s2 = take'0 {_6} (fun (_ret':borrowed (slice t)) ->  [ &_5 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <slice t> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed (slice t)) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = _4.final ; } ] s1)
      | s1 = -{inv'1 _4.final}- s2
      | s2 = split_first_mut'0 {_4}
          (fun (_ret':Option'0.t_Option (borrowed t, borrowed (slice t))) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = any
      [ br0 -> {_3 = Option'0.C_None } (! bb4)
      | br1 (a:(borrowed t, borrowed (slice t)))-> {_3 = Option'0.C_Some a} (! bb5) ]
      
    | bb5 = s0
      [ s0 = Option'0.v_Some <(borrowed t, borrowed (slice t))> {_3}
          (fun (r0'0:(borrowed t, borrowed (slice t))) ->  [ &first <- let (r'0, _) = r0'0 in r'0 ] s1)
      | s1 = Option'0.v_Some <(borrowed t, borrowed (slice t))> {_3}
          (fun (r0'1:(borrowed t, borrowed (slice t))) ->  [ &rem <- let (_, r'1) = r0'1 in r'1 ] s2)
      | s2 = Borrow.borrow_final <slice t> {rem.current} {Borrow.get_id rem}
          (fun (_ret':borrowed (slice t)) ->  [ &_11 <- _ret' ]  [ &rem <- { rem with current = _11.final ; } ] s3)
      | s3 = -{inv'1 _11.final}- s4
      | s4 = {[@expl:type invariant] inv'0 self_.current} s5
      | s5 = -{resolve'0 self_.current}- s6
      | s6 =  [ &self_ <- { self_ with current = _11 ; } ] s7
      | s7 = {[@expl:type invariant] inv'2 self_} s8
      | s8 = -{resolve'1 self_}- s9
      | s9 = Borrow.borrow_final <t> {first.current} {Borrow.get_id first}
          (fun (_ret':borrowed t) ->  [ &_12 <- _ret' ]  [ &first <- { first with current = _12.final ; } ] s10)
      | s10 = -{inv'3 _12.final}- s11
      | s11 =  [ &_0 <- Option'0.C_Some _12 ] s12
      | s12 = {[@expl:type invariant] inv'0 rem} s13
      | s13 = -{resolve'0 rem}- s14
      | s14 = {[@expl:type invariant] inv'4 first} s15
      | s15 = -{resolve'2 first}- s16
      | s16 = {[@expl:type invariant] inv'0 _5} s17
      | s17 = -{resolve'0 _5}- s18
      | s18 = bb7 ]
      
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'2 self_} s1 | s1 = -{resolve'1 self_}- s2 | s2 = bb6 ] 
    | bb6 = s0
      [ s0 =  [ &_0 <- Option'0.C_None ] s1
      | s1 = {[@expl:type invariant] inv'0 _5} s2
      | s2 = -{resolve'0 _5}- s3
      | s3 = bb7 ]
      
    | bb7 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option (borrowed t) = any_l ()
    | & self_ : borrowed (borrowed (slice t)) = self_
    | & _3 : Option'0.t_Option (borrowed t, borrowed (slice t)) = any_l ()
    | & _4 : borrowed (slice t) = any_l ()
    | & _5 : borrowed (slice t) = any_l ()
    | & _6 : borrowed (borrowed (slice t)) = any_l ()
    | & first : borrowed t = any_l ()
    | & rem : borrowed (slice t) = any_l ()
    | & _11 : borrowed (slice t) = any_l ()
    | & _12 : borrowed t = any_l () ]
    
    [ return' (result:Option'0.t_Option (borrowed t))-> {[@expl:postcondition] [%#stake_first_mut2] inv'5 result}
      {[@expl:postcondition] [%#stake_first_mut1] match result with
        | Option'0.C_Some r -> r.current = index_logic'0 (self_.current).current 0
        /\ r.final = index_logic'0 (self_.current).final 0
        /\ Seq.length (shallow_model'0 (self_.current).current) > 0
        /\ Seq.length (shallow_model'0 (self_.current).final) > 0
        /\ shallow_model'0 (self_.final).current = tail'0 (shallow_model'0 (self_.current).current)
        /\ shallow_model'0 (self_.final).final = tail'0 (shallow_model'0 (self_.current).final)
        | Option'0.C_None -> shallow_model'0 (self_.final).current = (Seq.empty  : Seq.seq t)
        /\ shallow_model'0 (self_.current).final = (Seq.empty  : Seq.seq t)
        /\ shallow_model'0 (self_.current).current = (Seq.empty  : Seq.seq t)
        /\ shallow_model'0 (self_.final).final = (Seq.empty  : Seq.seq t)
        end}
      (! return' {result}) ]
    
end
