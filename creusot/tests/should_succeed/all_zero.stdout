module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some('t)
    
  type allzero_list  = 
    | AllZero_List_Cons(uint32, allzero_list)
    | AllZero_List_Nil
    
end
module AllZero_Len
  use mach.int.Int
  use mach.int.Int32
  use Type
  function len (l : Type.allzero_list) : int = 
    match (l) with
      | Type.AllZero_List_Cons(_, ls) -> Int32.to_int (1 : int32) + len ls
      | Type.AllZero_List_Nil -> Int32.to_int (0 : int32)
      end
end
module AllZero_Get
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  function get (l : Type.allzero_list) (ix : int) : Type.core_option_option uint32 = 
    match (l) with
      | Type.AllZero_List_Cons(x, ls) -> match (ix = Int32.to_int (0 : int32)) with
        | True -> Type.Core_Option_Option_Some(x)
        | False -> get ls (ix - Int32.to_int (1 : int32))
        end
      | Type.AllZero_List_Nil -> Type.Core_Option_Option_None
      end
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Impl11_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Builtins_Impl11
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Builtins_Resolve with type self = borrowed t, predicate resolve = Resolve0.resolve
end
module AllZero_AllZero
  use mach.int.Int
  use mach.int.Int32
  use Type
  use mach.int.UInt32
  use prelude.Prelude
  clone AllZero_Len as Len0
  clone AllZero_Get as Get1
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve2 with type t = Type.allzero_list
  clone CreusotContracts_Builtins_Resolve as Resolve3 with type self = isize
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve4 with type t = uint32
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve5 with type t = Type.allzero_list
  clone CreusotContracts_Builtins_Resolve as Resolve6 with type self = ()
  let rec cfg all_zero (l : borrowed (Type.allzero_list)) : ()
    ensures { Len0.len ( * l) = Len0.len ( ^ l) }
    ensures { forall i : (int) . Int32.to_int (0 : int32) <= i && i < Len0.len ( * l) -> Get1.get ( ^ l) i = Type.Core_Option_Option_Some((0 : uint32)) }
    
   = 
  var _0 : ();
  var l_1 : borrowed (Type.allzero_list);
  var loop_l_2 : borrowed (Type.allzero_list);
  var _5 : ();
  var _6 : isize;
  var value_7 : borrowed uint32;
  var next_8 : borrowed (Type.allzero_list);
  var _9 : borrowed (Type.allzero_list);
  var _10 : ();
  {
    l_1 <- l;
    goto BB0
  }
  BB0 {
    assume { Resolve2.resolve loop_l_2 };
    loop_l_2 <- l_1;
    goto BB1
  }
  BB1 {
    invariant zeroed { (forall i : (int) . Int32.to_int (0 : int32) <= i && i < Len0.len ( * loop_l_2) -> Get1.get ( ^ loop_l_2) i = Type.Core_Option_Option_Some((0 : uint32))) -> (forall i : (int) . Int32.to_int (0 : int32) <= i && i < Len0.len ( * l_1) -> Get1.get ( ^ l_1) i = Type.Core_Option_Option_Some((0 : uint32))) };
    invariant in_len { Len0.len ( ^ loop_l_2) = Len0.len ( * loop_l_2) -> Len0.len ( ^ l_1) = Len0.len ( * l_1) };
    goto BB2
  }
  BB2 {
    switch ( * loop_l_2)
      | Type.AllZero_List_Cons(_, _) -> goto BB3
      | _ -> goto BB4
      end
  }
  BB3 {
    assume { Resolve3.resolve _6 };
    goto BB5
  }
  BB4 {
    assume { Resolve2.resolve loop_l_2 };
    assume { Resolve3.resolve _6 };
    _0 <- ();
    return _0
  }
  BB5 {
    value_7 <- borrow_mut (let Type.AllZero_List_Cons(a, _) =  * loop_l_2 in a);
    loop_l_2 <- { loop_l_2 with current = (let Type.AllZero_List_Cons(a, b) =  * loop_l_2 in Type.AllZero_List_Cons( ^ value_7, b)) };
    next_8 <- borrow_mut (let Type.AllZero_List_Cons(_, a) =  * loop_l_2 in a);
    loop_l_2 <- { loop_l_2 with current = (let Type.AllZero_List_Cons(a, b) =  * loop_l_2 in Type.AllZero_List_Cons(a,  ^ next_8)) };
    assume { Resolve2.resolve loop_l_2 };
    value_7 <- { value_7 with current = (0 : uint32) };
    assume { Resolve4.resolve value_7 };
    _9 <- borrow_mut ( * next_8);
    next_8 <- { next_8 with current = ( ^ _9) };
    assume { Resolve5.resolve next_8 };
    assume { Resolve2.resolve loop_l_2 };
    loop_l_2 <- _9;
    _5 <- ();
    assume { Resolve6.resolve _5 };
    goto BB1
  }
  
end
module AllZero_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
