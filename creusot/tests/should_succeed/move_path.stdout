module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module MovePath_Main_Interface
  val main () : ()
end
module MovePath_Main
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  let rec cfg main () : () = 
  var _0 : ();
  var x_1 : int32;
  var y_2 : borrowed int32;
  var d_3 : borrowed int32;
  var z_4 : borrowed int32;
  var _5 : bool;
  var _6 : int32;
  {
    goto BB0
  }
  BB0 {
    x_1 <- (1 : int32);
    y_2 <- borrow_mut x_1;
    x_1 <-  ^ y_2;
    assume { (fun x -> true) d_3 };
    d_3 <- y_2;
    assume { (fun x -> true) z_4 };
    z_4 <- d_3;
    z_4 <- { z_4 with current = (2 : int32) };
    assume { (fun x -> true) z_4 };
    assume { (fun x -> true) _6 };
    _6 <- x_1;
    assume { (fun x -> true) x_1 };
    _5 <- _6 = (2 : int32);
    assume { (fun x -> true) _5 };
    _0 <- ();
    return _0
  }
  
end
