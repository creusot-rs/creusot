module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_result_result 't 'e = 
    | Core_Result_Result_Ok 't
    | Core_Result_Result_Err 'e
    
  function core_result_result_Err_0 (self : core_result_result 't 'e) : 'e
  val core_result_result_Err_0 (self : core_result_result 't 'e) : 'e
    ensures { result = core_result_result_Err_0 self }
    
  axiom core_result_result_Err_0_acc : forall a : 'e . core_result_result_Err_0 (Core_Result_Result_Err a : core_result_result 't 'e) = a
  function core_result_result_Ok_0 (self : core_result_result 't 'e) : 't
  val core_result_result_Ok_0 (self : core_result_result 't 'e) : 't
    ensures { result = core_result_result_Ok_0 self }
    
  axiom core_result_result_Ok_0_acc : forall a : 't . core_result_result_Ok_0 (Core_Result_Result_Ok a : core_result_result 't 'e) = a
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  function core_option_option_Some_0 (self : core_option_option 't) : 't
  val core_option_option_Some_0 (self : core_option_option 't) : 't
    ensures { result = core_option_option_Some_0 self }
    
  axiom core_option_option_Some_0_acc : forall a : 't . core_option_option_Some_0 (Core_Option_Option_Some a : core_option_option 't) = a
end
module Projections_CopyOutOfRef_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  val copy_out_of_ref (x : uint32) : uint32
end
module Projections_CopyOutOfRef
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  let rec cfg copy_out_of_ref (x : uint32) : uint32 = 
  var _0 : uint32;
  var x_1 : uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    assume { (fun x -> true) _0 };
    _0 <- x_1;
    assume { (fun x -> true) x_1 };
    return _0
  }
  
end
module Projections_CopyOutOfSum_Interface
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  val copy_out_of_sum (x : Type.core_result_result (borrowed uint32) (borrowed uint32)) : uint32
end
module Projections_CopyOutOfSum
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int64
  let rec cfg copy_out_of_sum (x : Type.core_result_result (borrowed uint32) (borrowed uint32)) : uint32 = 
  var _0 : uint32;
  var x_1 : Type.core_result_result (borrowed uint32) (borrowed uint32);
  var _2 : isize;
  var x_3 : borrowed uint32;
  var y_4 : borrowed uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    switch (x_1)
      | Type.Core_Result_Result_Ok _ -> goto BB1
      | Type.Core_Result_Result_Err _ -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    assume { (fun x -> true) y_4 };
    y_4 <- Type.core_result_result_Err_0 x_1;
    assume { (fun x -> true) x_1 };
    assume { (fun x -> true) _0 };
    _0 <-  * y_4;
    assume { (fun x -> true) y_4 };
    goto BB5
  }
  BB3 {
    assume { (fun x -> true) x_1 };
    absurd
  }
  BB4 {
    assume { (fun x -> true) x_3 };
    x_3 <- Type.core_result_result_Ok_0 x_1;
    assume { (fun x -> true) x_1 };
    assume { (fun x -> true) _0 };
    _0 <-  * x_3;
    assume { (fun x -> true) x_3 };
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Projections_WriteIntoSum_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt32
  val write_into_sum (x : borrowed (Type.core_option_option uint32)) : ()
end
module Projections_WriteIntoSum
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int64
  let rec cfg write_into_sum (x : borrowed (Type.core_option_option uint32)) : () = 
  var _0 : ();
  var x_1 : borrowed (Type.core_option_option uint32);
  var _2 : isize;
  var y_3 : borrowed uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    switch ( * x_1)
      | Type.Core_Option_Option_None -> goto BB1
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB1 {
    assume { (fun x -> true) x_1 };
    _0 <- ();
    goto BB5
  }
  BB2 {
    goto BB4
  }
  BB3 {
    assume { (fun x -> true) x_1 };
    absurd
  }
  BB4 {
    y_3 <- borrow_mut (Type.core_option_option_Some_0 ( * x_1));
    x_1 <- { x_1 with current = (let Type.Core_Option_Option_Some a =  * x_1 in Type.Core_Option_Option_Some ( ^ y_3)) };
    assume { (fun x -> true) x_1 };
    y_3 <- { y_3 with current = (10 : uint32) };
    assume { (fun x -> true) y_3 };
    _0 <- ();
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Projections_Main_Interface
  val main () : ()
end
module Projections_Main
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use mach.int.Int64
  let rec cfg main () : () = 
  var _0 : ();
  var _1 : bool;
  var _2 : Type.core_option_option int32;
  var _3 : isize;
  var x_4 : int32;
  var _5 : int32;
  {
    goto BB0
  }
  BB0 {
    _2 <- Type.Core_Option_Option_Some (10 : int32);
    switch (_2)
      | Type.Core_Option_Option_None -> goto BB1
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB1 {
    assume { (fun x -> true) _2 };
    _1 <- false;
    assume { (fun x -> true) _1 };
    goto BB5
  }
  BB2 {
    goto BB4
  }
  BB3 {
    assume { (fun x -> true) _2 };
    absurd
  }
  BB4 {
    assume { (fun x -> true) x_4 };
    x_4 <- Type.core_option_option_Some_0 _2;
    assume { (fun x -> true) _2 };
    assume { (fun x -> true) _5 };
    _5 <- x_4;
    assume { (fun x -> true) x_4 };
    _1 <- _5 = (0 : int32);
    assume { (fun x -> true) _1 };
    goto BB5
  }
  BB5 {
    _0 <- ();
    return _0
  }
  
end
