module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type modules_nested_nested  = 
    | Modules_Nested_Nested_Test
    
end
module Modules_Nested_Further_Another_Interface
  val another () : bool
end
module Modules_Nested_Further_Another
  let rec cfg another () : bool = 
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- false;
    return _0
  }
  
end
module Modules_Nested_Impl0_Resolve_Interface
  use Type
  predicate resolve (self : Type.modules_nested_nested)
end
module Modules_Nested_Impl0_Resolve
  use Type
  predicate resolve (self : Type.modules_nested_nested) = 
    true
end
module Modules_Nested_InnerFunc_Interface
  val inner_func () : bool
    ensures { result = true }
    
end
module Modules_Nested_InnerFunc
  use Type
  clone Modules_Nested_Impl0_Resolve as Resolve0
  let rec cfg inner_func () : bool
    ensures { result = true }
    
   = 
  var _0 : bool;
  var _1 : Type.modules_nested_nested;
  {
    goto BB0
  }
  BB0 {
    _1 <- Type.Modules_Nested_Nested_Test;
    assume { Resolve0.resolve _1 };
    _0 <- true;
    return _0
  }
  
end
module Modules_Main_Interface
  val main () : ()
end
module Modules_Main
  clone Modules_Nested_Further_Another_Interface as Another0
  clone Modules_Nested_InnerFunc_Interface as InnerFunc0
  let rec cfg main () : () = 
  var _0 : ();
  var _1 : bool;
  var _2 : bool;
  {
    goto BB0
  }
  BB0 {
    _1 <- InnerFunc0.inner_func ();
    goto BB1
  }
  BB1 {
    _2 <- Another0.another ();
    goto BB2
  }
  BB2 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Builtins_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module Modules_Nested_Impl0_Interface
  use Type
  clone export Modules_Nested_Impl0_Resolve_Interface
  clone export CreusotContracts_Builtins_Resolve_Resolve with type self = Type.modules_nested_nested,
  predicate resolve = resolve
end
module Modules_Nested_Impl0
  use Type
  clone export Modules_Nested_Impl0_Resolve
  clone export CreusotContracts_Builtins_Resolve_Resolve with type self = Type.modules_nested_nested,
  predicate resolve = resolve
end
