
module Bitwise_TestBitXorI64
  use prelude.Int64
  use prelude.Int
  let rec cfg test_bit_xor_i64 [#"../bitwise.rs" 9 0 9 46] [@cfg:stackify] [@cfg:subregion_analysis] (a : int64) (b : int64) : int64
    ensures { [#"../bitwise.rs" 8 10 8 25] result = bw_xor a b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int64;
  var a : int64 = a;
  var b : int64 = b;
  {
    goto BB0
  }
  BB0 {
    [#"../bitwise.rs" 10 4 10 9] _0 <- ([#"../bitwise.rs" 10 4 10 9] bw_xor ([#"../bitwise.rs" 10 4 10 5] a) ([#"../bitwise.rs" 10 8 10 9] b));
    return _0
  }
  
end
module Bitwise_TestBitAndU16
  use prelude.UInt16
  use prelude.Int
  let rec cfg test_bit_and_u16 [#"../bitwise.rs" 14 0 14 46] [@cfg:stackify] [@cfg:subregion_analysis] (a : uint16) (b : uint16) : uint16
    ensures { [#"../bitwise.rs" 13 10 13 25] result = bw_and a b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint16;
  var a : uint16 = a;
  var b : uint16 = b;
  {
    goto BB0
  }
  BB0 {
    [#"../bitwise.rs" 15 4 15 9] _0 <- ([#"../bitwise.rs" 15 4 15 9] bw_and ([#"../bitwise.rs" 15 4 15 5] a) ([#"../bitwise.rs" 15 8 15 9] b));
    return _0
  }
  
end
module Bitwise_TestBitOrI32
  use prelude.Int32
  use prelude.Int
  let rec cfg test_bit_or_i32 [#"../bitwise.rs" 19 0 19 45] [@cfg:stackify] [@cfg:subregion_analysis] (a : int32) (b : int32) : int32
    ensures { [#"../bitwise.rs" 18 10 18 25] result = bw_or a b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var a : int32 = a;
  var b : int32 = b;
  {
    goto BB0
  }
  BB0 {
    [#"../bitwise.rs" 20 4 20 9] _0 <- ([#"../bitwise.rs" 20 4 20 9] bw_or ([#"../bitwise.rs" 20 4 20 5] a) ([#"../bitwise.rs" 20 8 20 9] b));
    return _0
  }
  
end
module Bitwise_TestAddUsize
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  let rec cfg test_add_usize [#"../bitwise.rs" 26 0 26 50] [@cfg:stackify] [@cfg:subregion_analysis] (a : usize) (b : usize) : usize
    ensures { [#"../bitwise.rs" 24 10 24 28] UIntSize.to_uint result = UIntSize.to_uint a + UIntSize.to_uint b }
    ensures { [#"../bitwise.rs" 25 10 25 25] result = a + b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var a : usize = a;
  var b : usize = b;
  {
    goto BB0
  }
  BB0 {
    [#"../bitwise.rs" 27 4 27 9] _0 <- ([#"../bitwise.rs" 27 4 27 9] u_add ([#"../bitwise.rs" 27 4 27 5] a) ([#"../bitwise.rs" 27 8 27 9] b));
    return _0
  }
  
end
module Bitwise_TestMulI8
  use prelude.Int8
  use prelude.Int8
  use prelude.Int
  let rec cfg test_mul_i8 [#"../bitwise.rs" 33 0 33 38] [@cfg:stackify] [@cfg:subregion_analysis] (a : int8) (b : int8) : int8
    ensures { [#"../bitwise.rs" 31 10 31 28] Int8.to_int result = Int8.to_int a * Int8.to_int b }
    ensures { [#"../bitwise.rs" 32 10 32 25] result = a * b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int8;
  var a : int8 = a;
  var b : int8 = b;
  {
    goto BB0
  }
  BB0 {
    [#"../bitwise.rs" 34 4 34 9] _0 <- ([#"../bitwise.rs" 34 4 34 9] s_mul ([#"../bitwise.rs" 34 4 34 5] a) ([#"../bitwise.rs" 34 8 34 9] b));
    return _0
  }
  
end
