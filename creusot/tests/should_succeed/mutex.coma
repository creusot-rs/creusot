module T_mutex__Even [#"mutex.rs" 61 0 61 11]
  type t_Even  =
    | C_Even
  
  let rec t_Even (input:t_Even) (ret  )= any [ good -> {C_Even  = input} (! ret) ] 
end
module T_mutex__MutexInner [#"mutex.rs" 11 0 11 20]
  type t_MutexInner 't
end
module T_mutex__Mutex [#"mutex.rs" 13 0 13 22]
  use T_mutex__MutexInner as MutexInner'0
  
  type t_Mutex 't 'i =
    | C_Mutex (MutexInner'0.t_MutexInner 't) 'i
  
  let rec t_Mutex < 't > < 'i > (input:t_Mutex 't 'i) (ret  (field_0:MutexInner'0.t_MutexInner 't) (field_1:'i))= any
    [ good (field_0:MutexInner'0.t_MutexInner 't) (field_1:'i)-> {C_Mutex field_0 field_1 = input}
      (! ret {field_0} {field_1}) ]
    
  
  function t_Mutex__1 (self : t_Mutex 't 'i) : 'i =
    match self with
      | C_Mutex _ a -> a
      end
end
module T_mutex__AddsTwo [#"mutex.rs" 71 0 71 18]
  use T_mutex__Even as Even'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_mutex__Mutex as Mutex'0
  
  use prelude.prelude.Borrow
  
  type t_AddsTwo  =
    | C_AddsTwo (Mutex'0.t_Mutex uint32 (Even'0.t_Even))
  
  let rec t_AddsTwo (input:t_AddsTwo) (ret  (mutex:Mutex'0.t_Mutex uint32 (Even'0.t_Even)))= any
    [ good (mutex:Mutex'0.t_Mutex uint32 (Even'0.t_Even))-> {C_AddsTwo mutex = input} (! ret {mutex}) ]
    
end
module T_mutex__GuardInner [#"mutex.rs" 43 0 43 37]
  type t_GuardInner 't
end
module T_mutex__MutexGuard [#"mutex.rs" 45 0 45 44]
  use prelude.prelude.Snapshot
  
  use T_mutex__GuardInner as GuardInner'0
  
  type t_MutexGuard 't 'i =
    | C_MutexGuard (GuardInner'0.t_GuardInner 't) (Snapshot.snap_ty 'i)
  
  let rec t_MutexGuard < 't > < 'i > (input:t_MutexGuard 't 'i) (ret  (field_0:GuardInner'0.t_GuardInner 't) (field_1:Snapshot.snap_ty 'i))= any
    [ good (field_0:GuardInner'0.t_GuardInner 't) (field_1:Snapshot.snap_ty 'i)-> {C_MutexGuard field_0 field_1 = input}
      (! ret {field_0} {field_1}) ]
    
  
  function t_MutexGuard__1 (self : t_MutexGuard 't 'i) : Snapshot.snap_ty 'i =
    match self with
      | C_MutexGuard _ a -> a
      end
end
module M_mutex__qyi5425553346843331945__call [#"mutex.rs" 100 4 100 23] (* <AddsTwo<'a> as FakeFnOnce> *)
  let%span smutex0 = "mutex.rs" 103 17 103 23
  let%span smutex1 = "mutex.rs" 104 24 104 25
  let%span smutex2 = "mutex.rs" 106 18 106 19
  let%span smutex3 = "mutex.rs" 37 17 37 21
  let%span smutex4 = "mutex.rs" 36 14 36 33
  let%span smutex5 = "mutex.rs" 49 4 49 35
  let%span smutex6 = "mutex.rs" 50 23 50 25
  let%span smutex7 = "mutex.rs" 55 4 55 30
  let%span smutex8 = "mutex.rs" 56 22 56 23
  let%span smutex9 = "mutex.rs" 67 8 67 24
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  predicate inv'3 (_1 : uint32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : uint32 [inv'3 x] . inv'3 x = true
  
  use prelude.prelude.Borrow
  
  predicate inv'2 (_1 : uint32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : uint32 [inv'2 x] . inv'2 x = true
  
  use T_mutex__Even as Even'0
  
  use T_mutex__Mutex as Mutex'0
  
  predicate inv'0 (_1 : Mutex'0.t_Mutex uint32 (Even'0.t_Even))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Mutex'0.t_Mutex uint32 (Even'0.t_Even) [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use T_mutex__MutexGuard as MutexGuard'0
  
  predicate inv'1 [#"mutex.rs" 66 4 66 33] (self : Even'0.t_Even) (x : uint32) =
    [%#smutex9] mod x (2 : uint32) = (0 : uint32)
  
  use prelude.prelude.Snapshot
  
  use T_mutex__MutexGuard as T_mutex__MutexGuard
  
  let rec set'0 (self:borrowed (MutexGuard'0.t_MutexGuard uint32 (Even'0.t_Even))) (v:uint32) (return'  (ret:()))= {[@expl:precondition] [%#smutex8] inv'3 v}
    {[@expl:precondition] [%#smutex7] inv'1 (Snapshot.inner (T_mutex__MutexGuard.t_MutexGuard__1 self.current)) v}
    any [ return' (result:())-> (! return' {result}) ] 
  
  let rec deref'0 (self:MutexGuard'0.t_MutexGuard uint32 (Even'0.t_Even)) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {[%#smutex6] inv'2 result}
      {[%#smutex5] inv'1 (Snapshot.inner (T_mutex__MutexGuard.t_MutexGuard__1 self)) result}
      (! return' {result}) ]
    
  
  use T_mutex__Mutex as T_mutex__Mutex
  
  let rec lock'0 (self:Mutex'0.t_Mutex uint32 (Even'0.t_Even)) (return'  (ret:MutexGuard'0.t_MutexGuard uint32 (Even'0.t_Even)))= {[@expl:precondition] [%#smutex3] inv'0 self}
    any
    [ return' (result:MutexGuard'0.t_MutexGuard uint32 (Even'0.t_Even))-> {[%#smutex4] T_mutex__Mutex.t_Mutex__1 self
      = Snapshot.inner (T_mutex__MutexGuard.t_MutexGuard__1 result)}
      (! return' {result}) ]
    
  
  use T_mutex__AddsTwo as AddsTwo'0
  
  meta "compute_max_steps" 1000000
  
  let rec call (self:AddsTwo'0.t_AddsTwo) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = AddsTwo'0.t_AddsTwo {self}
          (fun (rmutex'0:Mutex'0.t_Mutex uint32 (Even'0.t_Even)) ->
            lock'0 {rmutex'0} (fun (_ret':MutexGuard'0.t_MutexGuard uint32 (Even'0.t_Even)) ->  [ &v <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = deref'0 {v} (fun (_ret':uint32) ->  [ &_5 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &val' <- _5 ] s1
      | s1 = UInt32.lt {val'} {[%#smutex0] (100000 : uint32)} (fun (_ret':bool) ->  [ &_7 <- _ret' ] s2)
      | s2 = any [ br0 -> {_7 = false} (! bb5) | br1 -> {_7} (! bb3) ]  ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <MutexGuard'0.t_MutexGuard uint32 (Even'0.t_Even)> {v}
          (fun (_ret':borrowed (MutexGuard'0.t_MutexGuard uint32 (Even'0.t_Even))) ->
             [ &_10 <- _ret' ] 
             [ &v <- _ret'.final ] 
            s1)
      | s1 = UInt32.add {val'} {[%#smutex1] (2 : uint32)} (fun (_ret':uint32) ->  [ &_11 <- _ret' ] s2)
      | s2 = set'0 {_10} {_11} (fun (_ret':()) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = bb7
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <MutexGuard'0.t_MutexGuard uint32 (Even'0.t_Even)> {v}
          (fun (_ret':borrowed (MutexGuard'0.t_MutexGuard uint32 (Even'0.t_Even))) ->
             [ &_14 <- _ret' ] 
             [ &v <- _ret'.final ] 
            s1)
      | s1 = set'0 {_14} {[%#smutex2] (0 : uint32)} (fun (_ret':()) ->  [ &_13 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : AddsTwo'0.t_AddsTwo = self
    | & v : MutexGuard'0.t_MutexGuard uint32 (Even'0.t_Even) = any_l ()
    | & val' : uint32 = any_l ()
    | & _5 : uint32 = any_l ()
    | & _7 : bool = any_l ()
    | & _9 : () = any_l ()
    | & _10 : borrowed (MutexGuard'0.t_MutexGuard uint32 (Even'0.t_Even)) = any_l ()
    | & _11 : uint32 = any_l ()
    | & _13 : () = any_l ()
    | & _14 : borrowed (MutexGuard'0.t_MutexGuard uint32 (Even'0.t_Even)) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module T_mutex__SpawnPostCond [#"mutex.rs" 143 0 143 23]
  type t_SpawnPostCond 'f =
    | C_SpawnPostCond 'f
  
  let rec t_SpawnPostCond < 'f > (input:t_SpawnPostCond 'f) (ret  (f:'f))= any
    [ good (f:'f)-> {C_SpawnPostCond f = input} (! ret {f}) ]
    
  
  function t_SpawnPostCond__f (self : t_SpawnPostCond 'f) : 'f =
    match self with
      | C_SpawnPostCond a -> a
      end
end
module T_mutex__JoinHandleInner [#"mutex.rs" 112 0 112 25]
  type t_JoinHandleInner 't
end
module T_mutex__JoinHandle [#"mutex.rs" 113 0 113 23]
  use prelude.prelude.Snapshot
  
  use T_mutex__JoinHandleInner as JoinHandleInner'0
  
  type t_JoinHandle 't 'i =
    | C_JoinHandle (JoinHandleInner'0.t_JoinHandleInner 't) (Snapshot.snap_ty 'i)
  
  let rec t_JoinHandle < 't > < 'i > (input:t_JoinHandle 't 'i) (ret  (field_0:JoinHandleInner'0.t_JoinHandleInner 't) (field_1:Snapshot.snap_ty 'i))= any
    [ good (field_0:JoinHandleInner'0.t_JoinHandleInner 't) (field_1:Snapshot.snap_ty 'i)-> {C_JoinHandle field_0 field_1
      = input}
      (! ret {field_0} {field_1}) ]
    
  
  function t_JoinHandle__1 (self : t_JoinHandle 't 'i) : Snapshot.snap_ty 'i =
    match self with
      | C_JoinHandle _ a -> a
      end
end
module T_core__result__Result
  type t_Result 't 'e =
    | C_Ok 't
    | C_Err 'e
  
  let rec v_Ok < 't > < 'e > (input:t_Result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Ok field_0 : t_Result 't 'e] . C_Ok field_0 <> input} (! {false} any) ]
    
  
  let rec v_Err < 't > < 'e > (input:t_Result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 'e [C_Err field_0 : t_Result 't 'e] . C_Err field_0 <> input} (! {false} any) ]
    
end
module M_mutex__concurrent [#"mutex.rs" 163 0 163 19]
  let%span smutex0 = "mutex.rs" 164 49 164 50
  let%span smutex1 = "mutex.rs" 17 15 17 25
  let%span smutex2 = "mutex.rs" 18 15 18 18
  let%span smutex3 = "mutex.rs" 18 23 18 24
  let%span smutex4 = "mutex.rs" 18 32 18 36
  let%span smutex5 = "mutex.rs" 159 19 159 20
  let%span smutex6 = "mutex.rs" 158 10 158 23
  let%span smutex7 = "mutex.rs" 159 33 159 42
  let%span smutex8 = "mutex.rs" 130 11 130 27
  let%span smutex9 = "mutex.rs" 132 4 132 5
  let%span smutex10 = "mutex.rs" 117 14 120 5
  let%span smutex11 = "mutex.rs" 121 21 121 34
  let%span smutex12 = "mutex.rs" 67 8 67 24
  let%span sresolve13 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span smutex14 = "mutex.rs" 92 8 92 12
  let%span smutex15 = "mutex.rs" 149 4 149 16
  let%span smutex16 = "mutex.rs" 97 8 97 12
  
  use T_core__result__Result as Result'0
  
  predicate inv'8 (_1 : Result'0.t_Result () ())
  
  axiom inv_axiom'6 [@rewrite] : forall x : Result'0.t_Result () () [inv'8 x] . inv'8 x = true
  
  use T_mutex__AddsTwo as AddsTwo'0
  
  predicate inv'6 (_1 : AddsTwo'0.t_AddsTwo)
  
  axiom inv_axiom'5 [@rewrite] : forall x : AddsTwo'0.t_AddsTwo [inv'6 x] . inv'6 x = true
  
  use T_mutex__Even as Even'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_mutex__Mutex as Mutex'0
  
  use prelude.prelude.Borrow
  
  predicate inv'5 (_1 : borrowed (Mutex'0.t_Mutex uint32 (Even'0.t_Even)))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (Mutex'0.t_Mutex uint32 (Even'0.t_Even)) [inv'5 x] . inv'5 x = true
  
  predicate inv'4 (_1 : Mutex'0.t_Mutex uint32 (Even'0.t_Even))
  
  axiom inv_axiom'3 [@rewrite] : forall x : Mutex'0.t_Mutex uint32 (Even'0.t_Even) [inv'4 x] . inv'4 x = true
  
  predicate inv'3 (_1 : Mutex'0.t_Mutex uint32 (Even'0.t_Even))
  
  axiom inv_axiom'2 [@rewrite] : forall x : Mutex'0.t_Mutex uint32 (Even'0.t_Even) [inv'3 x] . inv'3 x = true
  
  predicate inv'2 (_1 : Even'0.t_Even)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Even'0.t_Even [inv'2 x] . inv'2 x = true
  
  predicate inv'1 (_1 : uint32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : uint32 [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Intrinsic
  
  use T_mutex__SpawnPostCond as SpawnPostCond'0
  
  use T_mutex__JoinHandle as JoinHandle'0
  
  predicate postcondition'0 [#"mutex.rs" 96 4 96 41] (self : AddsTwo'0.t_AddsTwo) (_2 : ()) =
    [%#smutex16] true
  
  use T_mutex__SpawnPostCond as T_mutex__SpawnPostCond
  
  predicate inv'7 [#"mutex.rs" 150 4 150 39] (self : SpawnPostCond'0.t_SpawnPostCond (AddsTwo'0.t_AddsTwo)) (v : ()) =
    [%#smutex15] postcondition'0 (T_mutex__SpawnPostCond.t_SpawnPostCond__f self) v
  
  use prelude.prelude.Snapshot
  
  use T_mutex__JoinHandle as T_mutex__JoinHandle
  
  let rec join'0 (self:JoinHandle'0.t_JoinHandle () (SpawnPostCond'0.t_SpawnPostCond (AddsTwo'0.t_AddsTwo))) (return'  (ret:Result'0.t_Result () ()))= any
    [ return' (result:Result'0.t_Result () ())-> {[%#smutex11] inv'8 result}
      {[%#smutex10] match result with
        | Result'0.C_Ok v -> inv'7 (Snapshot.inner (T_mutex__JoinHandle.t_JoinHandle__1 self)) v
        | _ -> true
        end}
      (! return' {result}) ]
    
  
  predicate precondition'0 [#"mutex.rs" 91 4 91 33] (self : AddsTwo'0.t_AddsTwo) =
    [%#smutex14] true
  
  let rec spawn'0 (f:AddsTwo'0.t_AddsTwo) (return'  (ret:JoinHandle'0.t_JoinHandle () (SpawnPostCond'0.t_SpawnPostCond (AddsTwo'0.t_AddsTwo))))= {[@expl:precondition] [%#smutex9] inv'6 f}
    {[@expl:precondition] [%#smutex8] precondition'0 f}
    any
    [ return' (result:JoinHandle'0.t_JoinHandle () (SpawnPostCond'0.t_SpawnPostCond (AddsTwo'0.t_AddsTwo)))-> (! return'
        {result}
        ) ]
    
  
  predicate resolve'1 (self : borrowed (Mutex'0.t_Mutex uint32 (Even'0.t_Even))) =
    [%#sresolve13] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Mutex'0.t_Mutex uint32 (Even'0.t_Even))) =
    resolve'1 _1
  
  let rec leak'0 (b:Mutex'0.t_Mutex uint32 (Even'0.t_Even)) (return'  (ret:borrowed (Mutex'0.t_Mutex uint32 (Even'0.t_Even))))= {[@expl:precondition] [%#smutex5] inv'4 b}
    any
    [ return' (result:borrowed (Mutex'0.t_Mutex uint32 (Even'0.t_Even)))-> {[%#smutex7] inv'5 result}
      {[%#smutex6] result.current = b}
      (! return' {result}) ]
    
  
  predicate inv'0 [#"mutex.rs" 66 4 66 33] (self : Even'0.t_Even) (x : uint32) =
    [%#smutex12] mod x (2 : uint32) = (0 : uint32)
  
  let rec new'0 (val':uint32) (i:Even'0.t_Even) (return'  (ret:Mutex'0.t_Mutex uint32 (Even'0.t_Even)))= {[@expl:precondition] [%#smutex3] inv'2 i}
    {[@expl:precondition] [%#smutex2] inv'1 val'}
    {[@expl:precondition] [%#smutex1] inv'0 i val'}
    any [ return' (result:Mutex'0.t_Mutex uint32 (Even'0.t_Even))-> {[%#smutex4] inv'3 result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec concurrent (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- Even'0.C_Even ] s1
      | s1 = new'0 {[%#smutex0] (0 : uint32)} {_5}
          (fun (_ret':Mutex'0.t_Mutex uint32 (Even'0.t_Even)) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = bb2
    | bb2 = s0
      [ s0 = leak'0 {_4} (fun (_ret':borrowed (Mutex'0.t_Mutex uint32 (Even'0.t_Even))) ->  [ &_2 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &m <- _2.current ] s1
      | s1 = -{resolve'0 _2}- s2
      | s2 =  [ &_8 <- m ] s3
      | s3 =  [ &t1 <- AddsTwo'0.C_AddsTwo _8 ] s4
      | s4 = spawn'0 {t1}
          (fun (_ret':JoinHandle'0.t_JoinHandle () (SpawnPostCond'0.t_SpawnPostCond (AddsTwo'0.t_AddsTwo))) ->
             [ &j1 <- _ret' ] 
            s5)
      | s5 = bb4 ]
      
    | bb4 = s0
      [ s0 =  [ &_13 <- m ] s1
      | s1 =  [ &t2 <- AddsTwo'0.C_AddsTwo _13 ] s2
      | s2 = spawn'0 {t2}
          (fun (_ret':JoinHandle'0.t_JoinHandle () (SpawnPostCond'0.t_SpawnPostCond (AddsTwo'0.t_AddsTwo))) ->
             [ &j2 <- _ret' ] 
            s3)
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = join'0 {j1} (fun (_ret':Result'0.t_Result () ()) ->  [ &_16 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = join'0 {j2} (fun (_ret':Result'0.t_Result () ()) ->  [ &_18 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & m : Mutex'0.t_Mutex uint32 (Even'0.t_Even) = any_l ()
    | & _2 : borrowed (Mutex'0.t_Mutex uint32 (Even'0.t_Even)) = any_l ()
    | & _4 : Mutex'0.t_Mutex uint32 (Even'0.t_Even) = any_l ()
    | & _5 : Even'0.t_Even = any_l ()
    | & t1 : AddsTwo'0.t_AddsTwo = any_l ()
    | & _8 : Mutex'0.t_Mutex uint32 (Even'0.t_Even) = any_l ()
    | & j1 : JoinHandle'0.t_JoinHandle () (SpawnPostCond'0.t_SpawnPostCond (AddsTwo'0.t_AddsTwo)) = any_l ()
    | & t2 : AddsTwo'0.t_AddsTwo = any_l ()
    | & _13 : Mutex'0.t_Mutex uint32 (Even'0.t_Even) = any_l ()
    | & j2 : JoinHandle'0.t_JoinHandle () (SpawnPostCond'0.t_SpawnPostCond (AddsTwo'0.t_AddsTwo)) = any_l ()
    | & _16 : Result'0.t_Result () () = any_l ()
    | & _18 : Result'0.t_Result () () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_mutex__qyi12134777373670854950 [#"mutex.rs" 63 0 63 22] (* <Even as Inv<u32>> *)
  
end
module M_mutex__qyi10602809272342340175 [#"mutex.rs" 147 0 147 55] (* <SpawnPostCond<F> as Inv<<F as FakeFnOnce>::Return>> *)
  type f
end
module M_mutex__qyi5425553346843331945 [#"mutex.rs" 88 0 88 35] (* <AddsTwo<'a> as FakeFnOnce> *)
  let%span smutex0 = "mutex.rs" 100 4 100 23
  let%span smutex1 = "mutex.rs" 92 8 92 12
  let%span smutex2 = "mutex.rs" 97 8 97 12
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  use T_mutex__AddsTwo as AddsTwo'0
  
  predicate inv'0 (_1 : AddsTwo'0.t_AddsTwo)
  
  axiom inv_axiom'0 [@rewrite] : forall x : AddsTwo'0.t_AddsTwo [inv'0 x] . inv'0 x = true
  
  predicate postcondition'0 [#"mutex.rs" 96 4 96 41] (self : AddsTwo'0.t_AddsTwo) (_2 : ()) =
    [%#smutex2] true
  
  predicate precondition'0 [#"mutex.rs" 91 4 91 33] (self : AddsTwo'0.t_AddsTwo) =
    [%#smutex1] true
  
  goal call_refn : [%#smutex0] forall self : AddsTwo'0.t_AddsTwo . inv'0 self /\ precondition'0 self
   -> (forall result : () . inv'1 result /\ postcondition'0 self result)
end
