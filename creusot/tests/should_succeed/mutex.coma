
module Mutex_MutexInner_Type
  type t_mutexinner 't
end
module Mutex_Mutex_Type
  use Mutex_MutexInner_Type as MutexInner'0
  
  type t_mutex 't 'i =
    | C_Mutex (MutexInner'0.t_mutexinner 't) 'i
  
  function any_l (_ : 'b) : 'a
  
  let rec t_mutex < 't > < 'i > (input:t_mutex 't 'i) (ret  (field_0:MutexInner'0.t_mutexinner 't) (field_1:'i))= any
    [ good (field_0:MutexInner'0.t_mutexinner 't) (field_1:'i)-> {C_Mutex field_0 field_1 = input}
      (! ret {field_0} {field_1})
    | bad (field_0:MutexInner'0.t_mutexinner 't) (field_1:'i)-> {C_Mutex field_0 field_1 <> input} {false} any ]
    
  
  function mutex_1 (self : t_mutex 't 'i) : 'i =
    match self with
      | C_Mutex _ a -> a
      end
end
module Mutex_GuardInner_Type
  type t_guardinner 't
end
module Mutex_MutexGuard_Type
  use prelude.prelude.Snapshot
  
  use Mutex_GuardInner_Type as GuardInner'0
  
  type t_mutexguard 't 'i =
    | C_MutexGuard (GuardInner'0.t_guardinner 't) (Snapshot.snap_ty 'i)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_mutexguard < 't > < 'i > (input:t_mutexguard 't 'i) (ret  (field_0:GuardInner'0.t_guardinner 't) (field_1:Snapshot.snap_ty 'i))= any
    [ good (field_0:GuardInner'0.t_guardinner 't) (field_1:Snapshot.snap_ty 'i)-> {C_MutexGuard field_0 field_1 = input}
      (! ret {field_0} {field_1})
    | bad (field_0:GuardInner'0.t_guardinner 't) (field_1:Snapshot.snap_ty 'i)-> {C_MutexGuard field_0 field_1 <> input}
      {false}
      any ]
    
  
  function mutexguard_1 (self : t_mutexguard 't 'i) : Snapshot.snap_ty 'i =
    match self with
      | C_MutexGuard _ a -> a
      end
end
module Mutex_Even_Type
  type t_even  =
    | C_Even
  
  function any_l (_ : 'b) : 'a
  
  let rec t_even (input:t_even) (ret  )= any
    [ good -> {C_Even  = input} (! ret) | bad -> {C_Even  <> input} {false} any ]
    
end
module Mutex_AddsTwo_Type
  use Mutex_Even_Type as Even'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use Mutex_Mutex_Type as Mutex'0
  
  use prelude.prelude.Borrow
  
  type t_addstwo  =
    | C_AddsTwo (Mutex'0.t_mutex uint32 (Even'0.t_even))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_addstwo (input:t_addstwo) (ret  (mutex:Mutex'0.t_mutex uint32 (Even'0.t_even)))= any
    [ good (mutex:Mutex'0.t_mutex uint32 (Even'0.t_even))-> {C_AddsTwo mutex = input} (! ret {mutex})
    | bad (mutex:Mutex'0.t_mutex uint32 (Even'0.t_even))-> {C_AddsTwo mutex <> input} {false} any ]
    
end
module Mutex_Impl3_Call
  let%span smutex0 = "../mutex.rs" 103 17 103 23
  
  let%span smutex1 = "../mutex.rs" 104 24 104 25
  
  let%span smutex2 = "../mutex.rs" 106 18 106 19
  
  let%span span3 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../mutex.rs" 67 8 67 24
  
  let%span span5 = "../mutex.rs" 55 4 55 30
  
  let%span span6 = "../mutex.rs" 56 16 56 20
  
  let%span span7 = "../mutex.rs" 56 22 56 23
  
  let%span span8 = "../mutex.rs" 50 14 50 18
  
  let%span span9 = "../mutex.rs" 49 4 49 35
  
  let%span span10 = "../mutex.rs" 50 23 50 25
  
  let%span span11 = "../mutex.rs" 37 17 37 21
  
  let%span span12 = "../mutex.rs" 36 14 36 33
  
  let%span span13 = "../mutex.rs" 37 26 37 46
  
  use prelude.prelude.UInt32
  
  predicate invariant'5 (self : uint32) =
    [%#span3] true
  
  predicate inv'6 (_x : uint32)
  
  axiom inv'6 : forall x : uint32 . inv'6 x = true
  
  use Mutex_Even_Type as Even'0
  
  use Mutex_MutexGuard_Type as MutexGuard'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed (MutexGuard'0.t_mutexguard uint32 (Even'0.t_even))) =
    [%#span3] true
  
  predicate inv'5 (_x : borrowed (MutexGuard'0.t_mutexguard uint32 (Even'0.t_even)))
  
  axiom inv'5 : forall x : borrowed (MutexGuard'0.t_mutexguard uint32 (Even'0.t_even)) . inv'5 x = true
  
  predicate invariant'3 (self : uint32) =
    [%#span3] true
  
  predicate inv'4 (_x : uint32)
  
  axiom inv'4 : forall x : uint32 . inv'4 x = true
  
  predicate invariant'2 (self : MutexGuard'0.t_mutexguard uint32 (Even'0.t_even)) =
    [%#span3] true
  
  predicate inv'2 (_x : MutexGuard'0.t_mutexguard uint32 (Even'0.t_even))
  
  axiom inv'2 : forall x : MutexGuard'0.t_mutexguard uint32 (Even'0.t_even) . inv'2 x = true
  
  predicate invariant'1 (self : MutexGuard'0.t_mutexguard uint32 (Even'0.t_even)) =
    [%#span3] true
  
  predicate inv'1 (_x : MutexGuard'0.t_mutexguard uint32 (Even'0.t_even))
  
  axiom inv'1 : forall x : MutexGuard'0.t_mutexguard uint32 (Even'0.t_even) . inv'1 x = true
  
  use Mutex_Mutex_Type as Mutex'0
  
  predicate invariant'0 (self : Mutex'0.t_mutex uint32 (Even'0.t_even)) =
    [%#span3] true
  
  predicate inv'0 (_x : Mutex'0.t_mutex uint32 (Even'0.t_even))
  
  axiom inv'0 : forall x : Mutex'0.t_mutex uint32 (Even'0.t_even) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  predicate inv'3 [#"../mutex.rs" 66 4 66 33] (self : Even'0.t_even) (x : uint32) =
    [%#span4] mod x (2 : uint32) = (0 : uint32)
  
  use prelude.prelude.Snapshot
  
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  
  let rec set'0 (self:borrowed (MutexGuard'0.t_mutexguard uint32 (Even'0.t_even))) (v:uint32) (return'  (ret:()))= {[@expl:precondition] [%#span7] inv'6 v}
    {[@expl:precondition] [%#span6] inv'5 self}
    {[@expl:precondition] [%#span5] inv'3 (Snapshot.inner (Mutex_MutexGuard_Type.mutexguard_1 self.current)) v}
    any [ return' (result:())-> (! return' {result}) ] 
  
  let rec deref'0 (self:MutexGuard'0.t_mutexguard uint32 (Even'0.t_even)) (return'  (ret:uint32))= {[@expl:precondition] [%#span8] inv'2 self}
    any
    [ return' (result:uint32)-> {[%#span10] inv'4 result}
      {[%#span9] inv'3 (Snapshot.inner (Mutex_MutexGuard_Type.mutexguard_1 self)) result}
      (! return' {result}) ]
    
  
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  
  let rec lock'0 (self:Mutex'0.t_mutex uint32 (Even'0.t_even)) (return'  (ret:MutexGuard'0.t_mutexguard uint32 (Even'0.t_even)))= {[@expl:precondition] [%#span11] inv'0 self}
    any
    [ return' (result:MutexGuard'0.t_mutexguard uint32 (Even'0.t_even))-> {[%#span13] inv'1 result}
      {[%#span12] Mutex_Mutex_Type.mutex_1 self = Snapshot.inner (Mutex_MutexGuard_Type.mutexguard_1 result)}
      (! return' {result}) ]
    
  
  use Mutex_AddsTwo_Type as AddsTwo'0
  
  let rec call (self:AddsTwo'0.t_addstwo) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = AddsTwo'0.t_addstwo {self}
          (fun (rmutex'0:Mutex'0.t_mutex uint32 (Even'0.t_even)) ->
            lock'0 {rmutex'0} (fun (_ret':MutexGuard'0.t_mutexguard uint32 (Even'0.t_even)) ->  [ &v <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = deref'0 {v} (fun (_ret':uint32) ->  [ &_5 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &val' <- _5 ] s1
      | s1 = UInt32.lt {val'} {[%#smutex0] (100000 : uint32)} (fun (_ret':bool) ->  [ &_7 <- _ret' ] s2)
      | s2 = any [ br0 -> {_7 = false} (! bb5) | br1 -> {_7} (! bb3) ]  ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <MutexGuard'0.t_mutexguard uint32 (Even'0.t_even)> {v}
          (fun (_ret':borrowed (MutexGuard'0.t_mutexguard uint32 (Even'0.t_even))) ->
             [ &_10 <- _ret' ] 
             [ &v <- _10.final ] 
            s1)
      | s1 = UInt32.add {val'} {[%#smutex1] (2 : uint32)} (fun (_ret':uint32) ->  [ &_11 <- _ret' ] s2)
      | s2 = set'0 {_10} {_11} (fun (_ret':()) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = bb7
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <MutexGuard'0.t_mutexguard uint32 (Even'0.t_even)> {v}
          (fun (_ret':borrowed (MutexGuard'0.t_mutexguard uint32 (Even'0.t_even))) ->
             [ &_14 <- _ret' ] 
             [ &v <- _14.final ] 
            s1)
      | s1 = set'0 {_14} {[%#smutex2] (0 : uint32)} (fun (_ret':()) ->  [ &_13 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : AddsTwo'0.t_addstwo = self
    | & v : MutexGuard'0.t_mutexguard uint32 (Even'0.t_even) = any_l ()
    | & val' : uint32 = any_l ()
    | & _5 : uint32 = any_l ()
    | & _7 : bool = any_l ()
    | & _9 : () = any_l ()
    | & _10 : borrowed (MutexGuard'0.t_mutexguard uint32 (Even'0.t_even)) = any_l ()
    | & _11 : uint32 = any_l ()
    | & _13 : () = any_l ()
    | & _14 : borrowed (MutexGuard'0.t_mutexguard uint32 (Even'0.t_even)) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
  
  function any_l (_ : 'b) : 'a
  
  let rec ok < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Ok field_0 <> input} {false} any ]
    
  
  let rec err < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad (field_0:'e)-> {C_Err field_0 <> input} {false} any ]
    
end
module Mutex_JoinHandleInner_Type
  type t_joinhandleinner 't
end
module Mutex_JoinHandle_Type
  use prelude.prelude.Snapshot
  
  use Mutex_JoinHandleInner_Type as JoinHandleInner'0
  
  type t_joinhandle 't 'i =
    | C_JoinHandle (JoinHandleInner'0.t_joinhandleinner 't) (Snapshot.snap_ty 'i)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_joinhandle < 't > < 'i > (input:t_joinhandle 't 'i) (ret  (field_0:JoinHandleInner'0.t_joinhandleinner 't) (field_1:Snapshot.snap_ty 'i))= any
    [ good (field_0:JoinHandleInner'0.t_joinhandleinner 't) (field_1:Snapshot.snap_ty 'i)-> {C_JoinHandle field_0 field_1
      = input}
      (! ret {field_0} {field_1})
    | bad (field_0:JoinHandleInner'0.t_joinhandleinner 't) (field_1:Snapshot.snap_ty 'i)-> {C_JoinHandle field_0 field_1
      <> input}
      {false}
      any ]
    
  
  function joinhandle_1 (self : t_joinhandle 't 'i) : Snapshot.snap_ty 'i =
    match self with
      | C_JoinHandle _ a -> a
      end
end
module Mutex_SpawnPostCond_Type
  type t_spawnpostcond 'f =
    | C_SpawnPostCond 'f
  
  function any_l (_ : 'b) : 'a
  
  let rec t_spawnpostcond < 'f > (input:t_spawnpostcond 'f) (ret  (f:'f))= any
    [ good (f:'f)-> {C_SpawnPostCond f = input} (! ret {f}) | bad (f:'f)-> {C_SpawnPostCond f <> input} {false} any ]
    
  
  function spawnpostcond_f (self : t_spawnpostcond 'f) : 'f =
    match self with
      | C_SpawnPostCond a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_box 't 'a =
    | C_Box (Unique'0.t_unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module Mutex_Concurrent
  let%span smutex0 = "../mutex.rs" 164 49 164 50
  
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../mutex.rs" 97 8 97 12
  
  let%span span3 = "../mutex.rs" 149 4 149 16
  
  let%span span4 = "../mutex.rs" 121 12 121 16
  
  let%span span5 = "../mutex.rs" 117 14 120 5
  
  let%span span6 = "../mutex.rs" 121 21 121 34
  
  let%span span7 = "../mutex.rs" 92 8 92 12
  
  let%span span8 = "../mutex.rs" 130 11 130 27
  
  let%span span9 = "../mutex.rs" 132 4 132 5
  
  let%span span10 = "../mutex.rs" 133 5 133 36
  
  let%span span11 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span12 = "../mutex.rs" 159 19 159 20
  
  let%span span13 = "../mutex.rs" 158 10 158 23
  
  let%span span14 = "../mutex.rs" 159 33 159 42
  
  let%span span15 = "../mutex.rs" 67 8 67 24
  
  let%span span16 = "../mutex.rs" 17 15 17 25
  
  let%span span17 = "../mutex.rs" 18 15 18 18
  
  let%span span18 = "../mutex.rs" 18 23 18 24
  
  let%span span19 = "../mutex.rs" 18 32 18 36
  
  use Core_Result_Result_Type as Result'0
  
  predicate invariant'7 (self : Result'0.t_result () ()) =
    [%#span1] true
  
  predicate inv'9 (_x : Result'0.t_result () ())
  
  axiom inv'9 : forall x : Result'0.t_result () () . inv'9 x = true
  
  use Mutex_AddsTwo_Type as AddsTwo'0
  
  use Mutex_SpawnPostCond_Type as SpawnPostCond'0
  
  use Mutex_JoinHandle_Type as JoinHandle'0
  
  predicate invariant'6 (self : JoinHandle'0.t_joinhandle () (SpawnPostCond'0.t_spawnpostcond (AddsTwo'0.t_addstwo))) =
    [%#span1] true
  
  predicate inv'7 (_x : JoinHandle'0.t_joinhandle () (SpawnPostCond'0.t_spawnpostcond (AddsTwo'0.t_addstwo)))
  
  axiom inv'7 : forall x : JoinHandle'0.t_joinhandle () (SpawnPostCond'0.t_spawnpostcond (AddsTwo'0.t_addstwo)) . inv'7 x
  = true
  
  predicate invariant'5 (self : AddsTwo'0.t_addstwo) =
    [%#span1] true
  
  predicate inv'6 (_x : AddsTwo'0.t_addstwo)
  
  axiom inv'6 : forall x : AddsTwo'0.t_addstwo . inv'6 x = true
  
  use Mutex_Even_Type as Even'0
  
  use prelude.prelude.UInt32
  
  use Mutex_Mutex_Type as Mutex'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed (Mutex'0.t_mutex uint32 (Even'0.t_even))) =
    [%#span1] true
  
  predicate inv'5 (_x : borrowed (Mutex'0.t_mutex uint32 (Even'0.t_even)))
  
  axiom inv'5 : forall x : borrowed (Mutex'0.t_mutex uint32 (Even'0.t_even)) . inv'5 x = true
  
  predicate invariant'3 (self : Mutex'0.t_mutex uint32 (Even'0.t_even)) =
    [%#span1] true
  
  predicate inv'4 (_x : Mutex'0.t_mutex uint32 (Even'0.t_even))
  
  axiom inv'4 : forall x : Mutex'0.t_mutex uint32 (Even'0.t_even) . inv'4 x = true
  
  predicate invariant'2 (self : Mutex'0.t_mutex uint32 (Even'0.t_even)) =
    [%#span1] true
  
  predicate inv'3 (_x : Mutex'0.t_mutex uint32 (Even'0.t_even))
  
  axiom inv'3 : forall x : Mutex'0.t_mutex uint32 (Even'0.t_even) . inv'3 x = true
  
  predicate invariant'1 (self : Even'0.t_even) =
    [%#span1] true
  
  predicate inv'2 (_x : Even'0.t_even)
  
  axiom inv'2 : forall x : Even'0.t_even . inv'2 x = true
  
  predicate invariant'0 (self : uint32) =
    [%#span1] true
  
  predicate inv'1 (_x : uint32)
  
  axiom inv'1 : forall x : uint32 . inv'1 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate postcondition'0 [#"../mutex.rs" 96 4 96 41] (self : AddsTwo'0.t_addstwo) (_2 : ()) =
    [%#span2] true
  
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  
  predicate inv'8 [#"../mutex.rs" 150 4 150 39] (self : SpawnPostCond'0.t_spawnpostcond (AddsTwo'0.t_addstwo)) (v : ())
   =
    [%#span3] postcondition'0 (Mutex_SpawnPostCond_Type.spawnpostcond_f self) v
  
  use prelude.prelude.Snapshot
  
  use Mutex_JoinHandle_Type as Mutex_JoinHandle_Type
  
  let rec join'0 (self:JoinHandle'0.t_joinhandle () (SpawnPostCond'0.t_spawnpostcond (AddsTwo'0.t_addstwo))) (return'  (ret:Result'0.t_result () ()))= {[@expl:precondition] [%#span4] inv'7 self}
    any
    [ return' (result:Result'0.t_result () ())-> {[%#span6] inv'9 result}
      {[%#span5] match result with
        | Result'0.C_Ok v -> inv'8 (Snapshot.inner (Mutex_JoinHandle_Type.joinhandle_1 self)) v
        | _ -> true
        end}
      (! return' {result}) ]
    
  
  predicate precondition'0 [#"../mutex.rs" 91 4 91 33] (self : AddsTwo'0.t_addstwo) =
    [%#span7] true
  
  let rec spawn'0 (f:AddsTwo'0.t_addstwo) (return'  (ret:JoinHandle'0.t_joinhandle () (SpawnPostCond'0.t_spawnpostcond (AddsTwo'0.t_addstwo))))= {[@expl:precondition] [%#span9] inv'6 f}
    {[@expl:precondition] [%#span8] precondition'0 f}
    any
    [ return' (result:JoinHandle'0.t_joinhandle () (SpawnPostCond'0.t_spawnpostcond (AddsTwo'0.t_addstwo)))-> {[%#span10] inv'7 result}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed (Mutex'0.t_mutex uint32 (Even'0.t_even))) =
    [%#span11] self.final = self.current
  
  let rec leak'0 (b:Mutex'0.t_mutex uint32 (Even'0.t_even)) (return'  (ret:borrowed (Mutex'0.t_mutex uint32 (Even'0.t_even))))= {[@expl:precondition] [%#span12] inv'4 b}
    any
    [ return' (result:borrowed (Mutex'0.t_mutex uint32 (Even'0.t_even)))-> {[%#span14] inv'5 result}
      {[%#span13] result.current = b}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  predicate inv'0 [#"../mutex.rs" 66 4 66 33] (self : Even'0.t_even) (x : uint32) =
    [%#span15] mod x (2 : uint32) = (0 : uint32)
  
  let rec new'0 (val':uint32) (i:Even'0.t_even) (return'  (ret:Mutex'0.t_mutex uint32 (Even'0.t_even)))= {[@expl:precondition] [%#span18] inv'2 i}
    {[@expl:precondition] [%#span17] inv'1 val'}
    {[@expl:precondition] [%#span16] inv'0 i val'}
    any [ return' (result:Mutex'0.t_mutex uint32 (Even'0.t_even))-> {[%#span19] inv'3 result} (! return' {result}) ] 
  
  let rec concurrent (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- Even'0.C_Even ] s1
      | s1 = new'0 {[%#smutex0] (0 : uint32)} {_5}
          (fun (_ret':Mutex'0.t_mutex uint32 (Even'0.t_even)) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = bb2
    | bb2 = s0
      [ s0 = leak'0 {_4} (fun (_ret':borrowed (Mutex'0.t_mutex uint32 (Even'0.t_even))) ->  [ &_2 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &m <- _2.current ] s1
      | s1 = -{resolve'0 _2}- s2
      | s2 =  [ &_8 <- m ] s3
      | s3 =  [ &t1 <- AddsTwo'0.C_AddsTwo _8 ] s4
      | s4 = spawn'0 {t1}
          (fun (_ret':JoinHandle'0.t_joinhandle () (SpawnPostCond'0.t_spawnpostcond (AddsTwo'0.t_addstwo))) ->
             [ &j1 <- _ret' ] 
            s5)
      | s5 = bb4 ]
      
    | bb4 = s0
      [ s0 =  [ &_13 <- m ] s1
      | s1 =  [ &t2 <- AddsTwo'0.C_AddsTwo _13 ] s2
      | s2 = spawn'0 {t2}
          (fun (_ret':JoinHandle'0.t_joinhandle () (SpawnPostCond'0.t_spawnpostcond (AddsTwo'0.t_addstwo))) ->
             [ &j2 <- _ret' ] 
            s3)
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = join'0 {j1} (fun (_ret':Result'0.t_result () ()) ->  [ &_16 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = join'0 {j2} (fun (_ret':Result'0.t_result () ()) ->  [ &_18 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & m : Mutex'0.t_mutex uint32 (Even'0.t_even) = any_l ()
    | & _2 : borrowed (Mutex'0.t_mutex uint32 (Even'0.t_even)) = any_l ()
    | & _4 : Mutex'0.t_mutex uint32 (Even'0.t_even) = any_l ()
    | & _5 : Even'0.t_even = any_l ()
    | & t1 : AddsTwo'0.t_addstwo = any_l ()
    | & _8 : Mutex'0.t_mutex uint32 (Even'0.t_even) = any_l ()
    | & j1 : JoinHandle'0.t_joinhandle () (SpawnPostCond'0.t_spawnpostcond (AddsTwo'0.t_addstwo)) = any_l ()
    | & t2 : AddsTwo'0.t_addstwo = any_l ()
    | & _13 : Mutex'0.t_mutex uint32 (Even'0.t_even) = any_l ()
    | & j2 : JoinHandle'0.t_joinhandle () (SpawnPostCond'0.t_spawnpostcond (AddsTwo'0.t_addstwo)) = any_l ()
    | & _16 : Result'0.t_result () () = any_l ()
    | & _18 : Result'0.t_result () () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Mutex_Impl2
  
end
module Mutex_Impl5
  type f
end
module Mutex_Impl3
  let%span smutex0 = "../mutex.rs" 100 4 100 23
  
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../mutex.rs" 97 8 97 12
  
  let%span span3 = "../mutex.rs" 92 8 92 12
  
  predicate invariant'1 (self : ()) =
    [%#span1] true
  
  predicate inv'1 (_x : ())
  
  axiom inv'1 : forall x : () . inv'1 x = true
  
  use Mutex_AddsTwo_Type as AddsTwo'0
  
  predicate invariant'0 (self : AddsTwo'0.t_addstwo) =
    [%#span1] true
  
  predicate inv'0 (_x : AddsTwo'0.t_addstwo)
  
  axiom inv'0 : forall x : AddsTwo'0.t_addstwo . inv'0 x = true
  
  predicate postcondition'0 [#"../mutex.rs" 96 4 96 41] (self : AddsTwo'0.t_addstwo) (_2 : ()) =
    [%#span2] true
  
  predicate precondition'0 [#"../mutex.rs" 91 4 91 33] (self : AddsTwo'0.t_addstwo) =
    [%#span3] true
  
  goal call_refn : [%#smutex0] forall self : AddsTwo'0.t_addstwo . inv'0 self /\ precondition'0 self
   -> (forall result : () . inv'1 result /\ postcondition'0 self result)
end
