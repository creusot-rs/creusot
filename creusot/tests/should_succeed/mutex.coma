
module Mutex_MutexInner_Type
  type t_mutexinner 't
end
module Mutex_Mutex_Type
  use Mutex_MutexInner_Type as Mutex_MutexInner_Type
  type t_mutex 't 'i =
    | C_Mutex (Mutex_MutexInner_Type.t_mutexinner 't) 'i
    
  function any_l (_ : 'b) : 'a
  let rec t_mutex < 't > < 'i > (input:t_mutex 't 'i) (ret  (field_0:Mutex_MutexInner_Type.t_mutexinner 't) (field_1:'i))= any
    [ good (field_0:Mutex_MutexInner_Type.t_mutexinner 't) (field_1:'i)-> {C_Mutex field_0 field_1 = input}
      (! ret {field_0} {field_1})
    | bad (field_0:Mutex_MutexInner_Type.t_mutexinner 't) (field_1:'i)-> {C_Mutex field_0 field_1 <> input}
      {false}
      any ]
    
  function mutex_1 (self : t_mutex 't 'i) : 'i =
    match self with
      | C_Mutex _ a -> a
      end
end
module Mutex_GuardInner_Type
  type t_guardinner 't
end
module Mutex_MutexGuard_Type
  use prelude.Snapshot
  use Mutex_GuardInner_Type as Mutex_GuardInner_Type
  type t_mutexguard 't 'i =
    | C_MutexGuard (Mutex_GuardInner_Type.t_guardinner 't) (Snapshot.snap_ty 'i)
    
  function any_l (_ : 'b) : 'a
  let rec t_mutexguard < 't > < 'i > (input:t_mutexguard 't 'i) (ret  (field_0:Mutex_GuardInner_Type.t_guardinner 't) (field_1:Snapshot.snap_ty 'i))= any
    [ good (field_0:Mutex_GuardInner_Type.t_guardinner 't) (field_1:Snapshot.snap_ty 'i)-> {C_MutexGuard field_0 field_1
      = input}
      (! ret {field_0} {field_1})
    | bad (field_0:Mutex_GuardInner_Type.t_guardinner 't) (field_1:Snapshot.snap_ty 'i)-> {C_MutexGuard field_0 field_1
      <> input}
      {false}
      any ]
    
  function mutexguard_1 (self : t_mutexguard 't 'i) : Snapshot.snap_ty 'i =
    match self with
      | C_MutexGuard _ a -> a
      end
end
module Mutex_Even_Type
  type t_even  =
    | C_Even
    
  function any_l (_ : 'b) : 'a
  let rec t_even (input:t_even) (ret  )= any
    [ good -> {C_Even  = input} (! ret) | bad -> {C_Even  <> input} {false} any ]
    
end
module Mutex_AddsTwo_Type
  use Mutex_Even_Type as Mutex_Even_Type
  use prelude.UInt32
  use prelude.Int
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  use prelude.Borrow
  type t_addstwo  =
    | C_AddsTwo (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))
    
  function any_l (_ : 'b) : 'a
  let rec t_addstwo (input:t_addstwo) (ret  (mutex:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)))= any
    [ good (mutex:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))-> {C_AddsTwo mutex = input} (! ret {mutex})
    | bad (mutex:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))-> {C_AddsTwo mutex <> input} {false} any ]
    
end
module Mutex_Impl3_Call
  use prelude.UInt32
  predicate invariant'5 (self : uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'6 (_x : uint32)
  let rec inv'6 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : uint32 . inv'6 x = true
  use Mutex_Even_Type as Mutex_Even_Type
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  use prelude.Borrow
  predicate invariant'4 (self : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'5 (_x : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)))
  let rec inv'5 (_x:borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) . inv'5 x
  = true
  predicate invariant'3 (self : uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'4 (_x : uint32)
  let rec inv'4 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : uint32 . inv'4 x = true
  predicate invariant'2 (self : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))
  let rec inv'2 (_x:Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even) . inv'2 x = true
  predicate invariant'1 (self : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))
  let rec inv'1 (_x:Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even) . inv'1 x = true
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  predicate invariant'0 (self : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))
  let rec inv'0 (_x:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even) . inv'0 x = true
  use prelude.Intrinsic
  use prelude.Int
  predicate inv'3 [#"../mutex.rs" 66 4 66 33] (self : Mutex_Even_Type.t_even) (x : uint32) =
    [#"../mutex.rs" 67 8 67 24] mod x (2 : uint32) = (0 : uint32)
  let rec inv'3 (self:Mutex_Even_Type.t_even) (x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 self x} (! return' {result}) ]
    
  use prelude.Snapshot
  let rec set'0 (self:borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))) (v:uint32) (return'  (ret:()))= {[@expl:precondition] [#"../mutex.rs" 56 22 56 23] inv'6 v}
    {[@expl:precondition] [#"../mutex.rs" 56 16 56 20] inv'5 self}
    {[@expl:precondition] [#"../mutex.rs" 55 4 55 30] inv'3 (Snapshot.inner (Mutex_MutexGuard_Type.mutexguard_1 ( * self))) v}
    any [ return' (result:())-> (! return' {result}) ] 
  let rec deref'0 (self:Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) (return'  (ret:uint32))= {[@expl:precondition] [#"../mutex.rs" 50 14 50 18] inv'2 self}
    any
    [ return' (result:uint32)-> {[#"../mutex.rs" 50 23 50 25] inv'4 result}
      {[#"../mutex.rs" 49 4 49 35] inv'3 (Snapshot.inner (Mutex_MutexGuard_Type.mutexguard_1 self)) result}
      (! return' {result}) ]
    
  let rec lock'0 (self:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) (return'  (ret:Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)))= {[@expl:precondition] [#"../mutex.rs" 37 17 37 21] inv'0 self}
    any
    [ return' (result:Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))-> {[#"../mutex.rs" 37 26 37 46] inv'1 result}
      {[#"../mutex.rs" 36 14 36 33] Mutex_Mutex_Type.mutex_1 self
      = Snapshot.inner (Mutex_MutexGuard_Type.mutexguard_1 result)}
      (! return' {result}) ]
    
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  let rec call (self:Mutex_AddsTwo_Type.t_addstwo) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Mutex_AddsTwo_Type.t_addstwo {self}
          (fun (rmutex'0:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) ->
            lock'0 {rmutex'0}
              (fun (_ret':Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) ->  [ &v <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = deref'0 {v} (fun (_ret':uint32) ->  [ &_5 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &val' <- _5 ] s1
      | s1 = UInt32.lt {val'} {[#"../mutex.rs" 103 17 103 23] (100000 : uint32)}
          (fun (_ret':bool) ->  [ &_7 <- _ret' ] s2)
      | s2 = any [ br0 -> {_7 = false} (! bb5) | br1 -> {_7} (! bb3) ]  ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)> {v}
          (fun (_ret':borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))) ->
             [ &_10 <- _ret' ] 
             [ &v <-  ^ _10 ] 
            s1)
      | s1 = UInt32.add {val'} {[#"../mutex.rs" 104 24 104 25] (2 : uint32)}
          (fun (_ret':uint32) ->  [ &_11 <- _ret' ] s2)
      | s2 = set'0 {_10} {_11} (fun (_ret':()) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &_0 <- [#"../mutex.rs" 103 24 105 9] () ] s1 | s1 = bb7 ] 
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)> {v}
          (fun (_ret':borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))) ->
             [ &_14 <- _ret' ] 
             [ &v <-  ^ _14 ] 
            s1)
      | s1 = set'0 {_14} {[#"../mutex.rs" 106 18 106 19] (0 : uint32)} (fun (_ret':()) ->  [ &_13 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0 [ s0 =  [ &_0 <- [#"../mutex.rs" 105 15 107 9] () ] s1 | s1 = bb7 ] 
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & self : Mutex_AddsTwo_Type.t_addstwo = self
    | & v : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even) = any_l () : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)
    | & val' : uint32 = any_l () : uint32
    | & _5 : uint32 = any_l () : uint32
    | & _7 : bool = any_l () : bool
    | & _9 : () = any_l () : ()
    | & _10 : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) = any_l () : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))
    | & _11 : uint32 = any_l () : uint32
    | & _13 : () = any_l () : ()
    | & _14 : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) = any_l () : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
  function any_l (_ : 'b) : 'a
  let rec ok < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Ok field_0 <> input} {false} any ]
    
  let rec err < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad (field_0:'e)-> {C_Err field_0 <> input} {false} any ]
    
end
module Mutex_JoinHandleInner_Type
  type t_joinhandleinner 't
end
module Mutex_JoinHandle_Type
  use prelude.Snapshot
  use Mutex_JoinHandleInner_Type as Mutex_JoinHandleInner_Type
  type t_joinhandle 't 'i =
    | C_JoinHandle (Mutex_JoinHandleInner_Type.t_joinhandleinner 't) (Snapshot.snap_ty 'i)
    
  function any_l (_ : 'b) : 'a
  let rec t_joinhandle < 't > < 'i > (input:t_joinhandle 't 'i) (ret  (field_0:Mutex_JoinHandleInner_Type.t_joinhandleinner 't) (field_1:Snapshot.snap_ty 'i))= any
    [ good (field_0:Mutex_JoinHandleInner_Type.t_joinhandleinner 't) (field_1:Snapshot.snap_ty 'i)-> {C_JoinHandle field_0 field_1
      = input}
      (! ret {field_0} {field_1})
    | bad (field_0:Mutex_JoinHandleInner_Type.t_joinhandleinner 't) (field_1:Snapshot.snap_ty 'i)-> {C_JoinHandle field_0 field_1
      <> input}
      {false}
      any ]
    
  function joinhandle_1 (self : t_joinhandle 't 'i) : Snapshot.snap_ty 'i =
    match self with
      | C_JoinHandle _ a -> a
      end
end
module Mutex_SpawnPostCond_Type
  type t_spawnpostcond 'f =
    | C_SpawnPostCond 'f
    
  function any_l (_ : 'b) : 'a
  let rec t_spawnpostcond < 'f > (input:t_spawnpostcond 'f) (ret  (f:'f))= any
    [ good (f:'f)-> {C_SpawnPostCond f = input} (! ret {f}) | bad (f:'f)-> {C_SpawnPostCond f <> input} {false} any ]
    
  function spawnpostcond_f (self : t_spawnpostcond 'f) : 'f =
    match self with
      | C_SpawnPostCond a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
  function any_l (_ : 'b) : 'a
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Mutex_Concurrent
  use Core_Result_Result_Type as Core_Result_Result_Type
  predicate invariant'7 (self : Core_Result_Result_Type.t_result () ()) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:Core_Result_Result_Type.t_result () ()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'9 (_x : Core_Result_Result_Type.t_result () ())
  let rec inv'9 (_x:Core_Result_Result_Type.t_result () ()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : Core_Result_Result_Type.t_result () () . inv'9 x = true
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  use Mutex_JoinHandle_Type as Mutex_JoinHandle_Type
  predicate invariant'6 (self : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo)))
    
   =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo)))
    
  let rec inv'7 (_x:Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo)) . inv'7 x
  = true
  predicate invariant'5 (self : Mutex_AddsTwo_Type.t_addstwo) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:Mutex_AddsTwo_Type.t_addstwo) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Mutex_AddsTwo_Type.t_addstwo)
  let rec inv'6 (_x:Mutex_AddsTwo_Type.t_addstwo) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Mutex_AddsTwo_Type.t_addstwo . inv'6 x = true
  use Mutex_Even_Type as Mutex_Even_Type
  use prelude.UInt32
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  use prelude.Borrow
  predicate invariant'4 (self : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'5 (_x : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)))
  let rec inv'5 (_x:borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) . inv'5 x = true
  predicate invariant'3 (self : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))
  let rec inv'4 (_x:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv'4 : forall x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even) . inv'4 x = true
  predicate invariant'2 (self : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))
  let rec inv'3 (_x:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even) . inv'3 x = true
  predicate invariant'1 (self : Mutex_Even_Type.t_even) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:Mutex_Even_Type.t_even) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Mutex_Even_Type.t_even)
  let rec inv'2 (_x:Mutex_Even_Type.t_even) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Mutex_Even_Type.t_even . inv'2 x = true
  predicate invariant'0 (self : uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'1 (_x : uint32)
  let rec inv'1 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : uint32 . inv'1 x = true
  use prelude.Intrinsic
  predicate postcondition'0 [#"../mutex.rs" 96 4 96 41] (self : Mutex_AddsTwo_Type.t_addstwo) (_2 : ()) =
    [#"../mutex.rs" 97 8 97 12] true
  let rec postcondition'0 (self:Mutex_AddsTwo_Type.t_addstwo) (_2:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition'0 self _2} (! return' {result}) ]
    
  predicate inv'8 [#"../mutex.rs" 150 4 150 39] (self : Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo)) (v : ())
    
   =
    [#"../mutex.rs" 149 4 149 16] postcondition'0 (Mutex_SpawnPostCond_Type.spawnpostcond_f self) v
  let rec inv'8 (self:Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo)) (v:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 self v} (! return' {result}) ]
    
  use prelude.Snapshot
  let rec join'0 (self:Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo))) (return'  (ret:Core_Result_Result_Type.t_result () ()))= {[@expl:precondition] [#"../mutex.rs" 121 12 121 16] inv'7 self}
    any
    [ return' (result:Core_Result_Result_Type.t_result () ())-> {[#"../mutex.rs" 121 21 121 34] inv'9 result}
      {[#"../mutex.rs" 117 14 120 5] match result with
        | Core_Result_Result_Type.C_Ok v -> inv'8 (Snapshot.inner (Mutex_JoinHandle_Type.joinhandle_1 self)) v
        | _ -> true
        end}
      (! return' {result}) ]
    
  predicate precondition'0 [#"../mutex.rs" 91 4 91 33] (self : Mutex_AddsTwo_Type.t_addstwo) =
    [#"../mutex.rs" 92 8 92 12] true
  let rec precondition'0 (self:Mutex_AddsTwo_Type.t_addstwo) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self} (! return' {result}) ]
    
  let rec spawn'0 (f:Mutex_AddsTwo_Type.t_addstwo) (return'  (ret:Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo))))= {[@expl:precondition] [#"../mutex.rs" 132 4 132 5] inv'6 f}
    {[@expl:precondition] [#"../mutex.rs" 130 11 130 27] precondition'0 f}
    any
    [ return' (result:Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo)))-> {[#"../mutex.rs" 133 5 133 36] inv'7 result}
      (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec leak'0 (b:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) (return'  (ret:borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))))= {[@expl:precondition] [#"../mutex.rs" 159 19 159 20] inv'4 b}
    any
    [ return' (result:borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)))-> {[#"../mutex.rs" 159 33 159 42] inv'5 result}
      {[#"../mutex.rs" 158 10 158 23]  * result = b}
      (! return' {result}) ]
    
  use prelude.Int
  predicate inv'0 [#"../mutex.rs" 66 4 66 33] (self : Mutex_Even_Type.t_even) (x : uint32) =
    [#"../mutex.rs" 67 8 67 24] mod x (2 : uint32) = (0 : uint32)
  let rec inv'0 (self:Mutex_Even_Type.t_even) (x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 self x} (! return' {result}) ]
    
  let rec new'0 (val':uint32) (i:Mutex_Even_Type.t_even) (return'  (ret:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)))= {[@expl:precondition] [#"../mutex.rs" 18 23 18 24] inv'2 i}
    {[@expl:precondition] [#"../mutex.rs" 18 15 18 18] inv'1 val'}
    {[@expl:precondition] [#"../mutex.rs" 17 15 17 25] inv'0 i val'}
    any
    [ return' (result:Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))-> {[#"../mutex.rs" 18 32 18 36] inv'3 result}
      (! return' {result}) ]
    
  let rec concurrent (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- Mutex_Even_Type.C_Even ] s1
      | s1 = new'0 {[#"../mutex.rs" 164 49 164 50] (0 : uint32)} {_5}
          (fun (_ret':Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = leak'0 {_4}
          (fun (_ret':borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))) ->  [ &_2 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &m <-  * _2 ] s1
      | s1 = -{resolve'0 _2}- s2
      | s2 =  [ &_8 <- m ] s3
      | s3 =  [ &t1 <- Mutex_AddsTwo_Type.C_AddsTwo _8 : Mutex_AddsTwo_Type.t_addstwo ] s4
      | s4 = spawn'0 {t1}
          (fun (_ret':Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo))) ->
             [ &j1 <- _ret' ] 
            s5)
      | s5 = bb4 ]
      
    | bb4 = s0
      [ s0 =  [ &_13 <- m ] s1
      | s1 =  [ &t2 <- Mutex_AddsTwo_Type.C_AddsTwo _13 : Mutex_AddsTwo_Type.t_addstwo ] s2
      | s2 = spawn'0 {t2}
          (fun (_ret':Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo))) ->
             [ &j2 <- _ret' ] 
            s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = join'0 {j1} (fun (_ret':Core_Result_Result_Type.t_result () ()) ->  [ &_16 <- _ret' ] s1) | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 = join'0 {j2} (fun (_ret':Core_Result_Result_Type.t_result () ()) ->  [ &_18 <- _ret' ] s1) | s1 = bb7 ]
      
    | bb7 = s0 [ s0 =  [ &_0 <- [#"../mutex.rs" 163 20 175 1] () ] s1 | s1 = bb8 ] 
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & m : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even) = any_l () : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)
    | & _2 : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) = any_l () : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))
    | & _4 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even) = any_l () : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)
    | & _5 : Mutex_Even_Type.t_even = any_l () : Mutex_Even_Type.t_even
    | & t1 : Mutex_AddsTwo_Type.t_addstwo = any_l () : Mutex_AddsTwo_Type.t_addstwo
    | & _8 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even) = any_l () : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)
    | & j1 : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo)) = any_l () : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo))
    | & t2 : Mutex_AddsTwo_Type.t_addstwo = any_l () : Mutex_AddsTwo_Type.t_addstwo
    | & _13 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even) = any_l () : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)
    | & j2 : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo)) = any_l () : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo))
    | & _16 : Core_Result_Result_Type.t_result () () = any_l () : Core_Result_Result_Type.t_result () ()
    | & _18 : Core_Result_Result_Type.t_result () () = any_l () : Core_Result_Result_Type.t_result () () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Mutex_Impl2
  
end
module Mutex_Impl5
  type f
end
module Mutex_Impl3
  predicate invariant'1 (self : ()) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : ())
  let rec inv'1 (_x:()) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : () . inv'1 x = true
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  predicate invariant'0 (self : Mutex_AddsTwo_Type.t_addstwo) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Mutex_AddsTwo_Type.t_addstwo) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Mutex_AddsTwo_Type.t_addstwo)
  let rec inv'0 (_x:Mutex_AddsTwo_Type.t_addstwo) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Mutex_AddsTwo_Type.t_addstwo . inv'0 x = true
  predicate postcondition'0 [#"../mutex.rs" 96 4 96 41] (self : Mutex_AddsTwo_Type.t_addstwo) (_2 : ()) =
    [#"../mutex.rs" 97 8 97 12] true
  let rec postcondition'0 (self:Mutex_AddsTwo_Type.t_addstwo) (_2:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition'0 self _2} (! return' {result}) ]
    
  predicate precondition'0 [#"../mutex.rs" 91 4 91 33] (self : Mutex_AddsTwo_Type.t_addstwo) =
    [#"../mutex.rs" 92 8 92 12] true
  let rec precondition'0 (self:Mutex_AddsTwo_Type.t_addstwo) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self} (! return' {result}) ]
    
  goal call_refn : [#"../mutex.rs" 100 4 100 23] forall self : Mutex_AddsTwo_Type.t_addstwo . inv'0 self
  /\ precondition'0 self  -> (forall result : () . inv'1 result /\ postcondition'0 self result)
end
