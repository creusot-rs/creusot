module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module MutCall_Kill_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  val kill (_1 : borrowed uint32) : ()
end
module MutCall_Kill
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  let rec cfg kill (_1 : borrowed uint32) : () = 
  var _0 : ();
  var _1 : borrowed uint32;
  {
    _1 <- _1;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { (fun x -> true) _1 };
    return _0
  }
  
end
module MutCall_Test_Interface
  val test () : ()
end
module MutCall_Test
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone MutCall_Kill_Interface as Kill0
  let rec cfg test () : () = 
  var _0 : ();
  var a_1 : uint32;
  var _2 : ();
  var _3 : borrowed uint32;
  var _4 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    a_1 <- (10 : uint32);
    _4 <- borrow_mut a_1;
    a_1 <-  ^ _4;
    assume { (fun x -> true) a_1 };
    _3 <- borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _3) };
    assume { (fun x -> true) _4 };
    _2 <- Kill0.kill _3;
    goto BB1
  }
  BB1 {
    assume { (fun x -> true) _3 };
    _0 <- ();
    return _0
  }
  
end
module MutCall_Main_Interface
  val main () : ()
end
module MutCall_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
