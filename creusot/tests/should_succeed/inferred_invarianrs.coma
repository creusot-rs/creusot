
module InferredInvarianrs_F
  type t
  
  let%span span0 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed t)
  
  predicate inv'0 (_x : borrowed t)
  
  axiom inv'0 : forall x : borrowed t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed t) =
    [%#span0] self.final = self.current
  
  let rec f (_1:borrowed t) (return'  (ret:()))= {inv'0 _1}
    (! bb0 [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 _1} s1 | s1 = -{resolve'0 _1}- s2 | s2 = return' {_0} ]  ] )
    [ & _0 : () = any_l () | & _1 : borrowed t = _1 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module InferredInvarianrs_Simple
  type t
  
  let%span sinferred_invarianrs0 = "../inferred_invarianrs.rs" 6 17 6 18
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed t)
  
  predicate inv'1 (_x : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  let rec f'0 (_1:borrowed t) (return'  (ret:()))= {[@expl:precondition] inv'1 _1}
    any [ return' (result:())-> (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  let rec simple (x:borrowed t) (return'  (ret:()))= {[%#sinferred_invarianrs0] inv'1 x}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_1_0 <- Snapshot.new x ] s1 | s1 = bb1 ] 
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant] (Snapshot.inner old_1_0).final = x.final}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = s0
          [ s0 = Borrow.borrow_mut <t> {x.current}
              (fun (_ret':borrowed t) ->  [ &_4 <- _ret' ]  [ &x <- { x with current = _4.final ; } ] s1)
          | s1 = -{inv'0 _4.final}- s2
          | s2 = f'0 {_4} (fun (_ret':()) ->  [ &_3 <- _ret' ] s3)
          | s3 = bb3 ]
          
        | bb3 = bb1 ]
         ]
       ]
    )
    [ & x : borrowed t = x
    | & _3 : () = any_l ()
    | & _4 : borrowed t = any_l ()
    | & old_1_0 : Snapshot.snap_ty (borrowed t) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module InferredInvarianrs_Swapper
  type t
  
  let%span sinferred_invarianrs0 = "../inferred_invarianrs.rs" 12 26 12 27
  
  let%span sinferred_invarianrs1 = "../inferred_invarianrs.rs" 12 44 12 45
  
  let%span span2 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed t)
  
  predicate inv'1 (_x : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed t) =
    [%#span2] self.final = self.current
  
  let rec swapper (x:borrowed t) (y:borrowed t) (return'  (ret:()))= {[%#sinferred_invarianrs1] inv'1 y}
    {[%#sinferred_invarianrs0] inv'1 x}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb1
      [ bb1 = (! bb2)
        [ bb2 = s0
          [ s0 =  [ &c <- x ] (any [ any_ (_any:borrowed t)-> (!  [ &x <- _any ] s1) ] )
          | s1 = Borrow.borrow_final <t> {y.current} {Borrow.get_id y}
              (fun (_ret':borrowed t) ->  [ &_6 <- _ret' ]  [ &y <- { y with current = _6.final ; } ] s2)
          | s2 = -{inv'0 _6.final}- s3
          | s3 =  [ &x <- _6 ] (any [ any_ (_any:borrowed t)-> (!  [ &_6 <- _any ] s4) ] )
          | s4 = Borrow.borrow_final <t> {c.current} {Borrow.get_id c}
              (fun (_ret':borrowed t) ->  [ &_7 <- _ret' ]  [ &c <- { c with current = _7.final ; } ] s5)
          | s5 = -{inv'0 _7.final}- s6
          | s6 = {[@expl:type invariant] inv'1 y} s7
          | s7 = -{resolve'0 y}- s8
          | s8 =  [ &y <- _7 ] (any [ any_ (_any:borrowed t)-> (!  [ &_7 <- _any ] s9) ] )
          | s9 = {[@expl:type invariant] inv'1 c} s10
          | s10 = -{resolve'0 c}- s11
          | s11 = bb1 ]
           ]
         ]
       ]
    )
    [ & x : borrowed t = x
    | & y : borrowed t = y
    | & c : borrowed t = any_l ()
    | & _6 : borrowed t = any_l ()
    | & _7 : borrowed t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module InferredInvarianrs_Tuple
  type t
  
  let%span sinferred_invarianrs0 = "../inferred_invarianrs.rs" 20 24 20 25
  
  let%span sinferred_invarianrs1 = "../inferred_invarianrs.rs" 20 50 20 51
  
  let%span span2 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : (borrowed t, bool)) =
    [%#span2] true
  
  predicate inv'0 (_x : (borrowed t, bool))
  
  axiom inv'0 : forall x : (borrowed t, bool) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  let rec tuple (d:(borrowed t, bool)) (e:(borrowed t, bool)) (return'  (ret:()))= {[%#sinferred_invarianrs1] inv'0 e}
    {[%#sinferred_invarianrs0] inv'0 d}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb1
      [ bb1 = (! bb2)
        [ bb2 = s0
          [ s0 =  [ &c <- d ] (any [ any_ (_any:(borrowed t, bool))-> (!  [ &d <- _any ] s1) ] )
          | s1 =  [ &d <- e ] (any [ any_ (_any:(borrowed t, bool))-> (!  [ &e <- _any ] s2) ] )
          | s2 =  [ &e <- c ] (any [ any_ (_any:(borrowed t, bool))-> (!  [ &c <- _any ] s3) ] )
          | s3 = bb1 ]
           ]
         ]
       ]
    ) [ & d : (borrowed t, bool) = d | & e : (borrowed t, bool) = e | & c : (borrowed t, bool) = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module InferredInvarianrs_TempMove
  type t
  
  let%span sinferred_invarianrs0 = "../inferred_invarianrs.rs" 28 28 28 29
  
  let%span span1 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed t)
  
  predicate inv'1 (_x : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed t) =
    [%#span1] self.final = self.current
  
  let rec temp_move (x:borrowed t) (return'  (ret:()))= {[%#sinferred_invarianrs0] inv'1 x}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb1
      [ bb1 = (! bb2)
        [ bb2 = s0
          [ s0 =  [ &c <- x ] (any [ any_ (_any:borrowed t)-> (!  [ &x <- _any ] s1) ] )
          | s1 = Borrow.borrow_final <t> {c.current} {Borrow.get_id c}
              (fun (_ret':borrowed t) ->  [ &_5 <- _ret' ]  [ &c <- { c with current = _5.final ; } ] s2)
          | s2 = -{inv'0 _5.final}- s3
          | s3 =  [ &x <- _5 ] (any [ any_ (_any:borrowed t)-> (!  [ &_5 <- _any ] s4) ] )
          | s4 = {[@expl:type invariant] inv'1 c} s5
          | s5 = -{resolve'0 c}- s6
          | s6 = bb1 ]
           ]
         ]
       ]
    ) [ & x : borrowed t = x | & c : borrowed t = any_l () | & _5 : borrowed t = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module InferredInvarianrs_Y
  let%span sinferred_invarianrs0 = "../inferred_invarianrs.rs" 36 16 36 31
  
  let%span sinferred_invarianrs1 = "../inferred_invarianrs.rs" 37 16 37 17
  
  let%span sinferred_invarianrs2 = "../inferred_invarianrs.rs" 38 16 38 40
  
  let%span sinferred_invarianrs3 = "../inferred_invarianrs.rs" 39 16 39 24
  
  let%span sinferred_invarianrs4 = "../inferred_invarianrs.rs" 42 19 42 20
  
  let%span sinferred_invarianrs5 = "../inferred_invarianrs.rs" 45 13 45 14
  
  let%span sinferred_invarianrs6 = "../inferred_invarianrs.rs" 46 15 46 17
  
  let%span span7 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span8 = "" 0 0 0 0
  
  let%span span9 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span10 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span11 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span12 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span13 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span14 = "../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96
  
  let%span span15 = "../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  
  let%span span16 = "../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  
  let%span span17 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span18 = "../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46
  
  let%span span19 = "" 0 0 0 0
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54
  
  let%span span22 = "../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57
  
  let%span span23 = "../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62
  
  let%span span24 = "../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55
  
  let%span span25 = "" 0 0 0 0
  
  let%span span26 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span27 = "" 0 0 0 0
  
  let%span span28 = "../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  let%span span29 = "../../../../creusot-contracts/src/snapshot.rs" 28 20 28 48
  
  use prelude.prelude.Int32
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq int32) =
    [%#span7] true
  
  predicate inv'5 (_x : Seq.seq int32)
  
  axiom inv'5 : forall x : Seq.seq int32 . inv'5 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span8] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'4 (_x : Vec'0.t_vec int32 (Global'0.t_global))
  
  function shallow_model'3 (self : Vec'0.t_vec int32 (Global'0.t_global)) : Seq.seq int32
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_vec int32 (Global'0.t_global) . ([%#span9] inv'4 self)
   -> ([%#span11] inv'5 (shallow_model'3 self))
  && ([%#span10] Seq.length (shallow_model'3 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'4 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span12] inv'5 (shallow_model'3 self)
  
  axiom inv'4 : forall x : Vec'0.t_vec int32 (Global'0.t_global) . inv'4 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed int32) =
    [%#span7] true
  
  predicate inv'3 (_x : borrowed int32)
  
  axiom inv'3 : forall x : borrowed int32 . inv'3 x = true
  
  predicate invariant'2 (self : usize) =
    [%#span7] true
  
  predicate inv'2 (_x : usize)
  
  axiom inv'2 : forall x : usize . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (Vec'0.t_vec int32 (Global'0.t_global))) =
    [%#span7] true
  
  predicate inv'1 (_x : borrowed (Vec'0.t_vec int32 (Global'0.t_global)))
  
  axiom inv'1 : forall x : borrowed (Vec'0.t_vec int32 (Global'0.t_global)) . inv'1 x = true
  
  predicate invariant'0 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span7] true
  
  predicate inv'0 (_x : Vec'0.t_vec int32 (Global'0.t_global))
  
  axiom inv'0 : forall x : Vec'0.t_vec int32 (Global'0.t_global) . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Vec'0.t_vec int32 (Global'0.t_global))) =
    [%#span13] self.final = self.current
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span13] self.final = self.current
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq int32) (fin : Seq.seq int32) =
    [%#span14] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) =
    [%#span15] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq int32) =
    [%#span16] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'1 (self : borrowed (Vec'0.t_vec int32 (Global'0.t_global))) : Seq.seq int32 =
    [%#span17] shallow_model'3 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_vec int32 (Global'0.t_global))) (index:usize) (return'  (ret:borrowed int32))= {[@expl:precondition] [%#span20] inv'2 index}
    {[@expl:precondition] [%#span19] inv'1 self}
    {[@expl:precondition] [%#span18] in_bounds'0 index (shallow_model'1 self)}
    any
    [ return' (result:borrowed int32)-> {[%#span25] inv'3 result}
      {[%#span24] Seq.length (shallow_model'3 self.final) = Seq.length (shallow_model'1 self)}
      {[%#span23] resolve_elswhere'0 index (shallow_model'1 self) (shallow_model'3 self.final)}
      {[%#span22] has_value'0 index (shallow_model'3 self.final) result.final}
      {[%#span21] has_value'0 index (shallow_model'1 self) result.current}
      (! return' {result}) ]
    
  
  function shallow_model'4 (self : Vec'0.t_vec int32 (Global'0.t_global)) : Seq.seq int32 =
    [%#span26] shallow_model'3 self
  
  let rec len'0 (self:Vec'0.t_vec int32 (Global'0.t_global)) (return'  (ret:usize))= {[@expl:precondition] [%#span27] inv'0 self}
    any
    [ return' (result:usize)-> {[%#span28] UIntSize.to_int result = Seq.length (shallow_model'4 self)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  function shallow_model'2 (self : borrowed (Vec'0.t_vec int32 (Global'0.t_global))) : Seq.seq int32 =
    [%#span26] shallow_model'1 self
  
  function shallow_model'0 (self : Snapshot.snap_ty (borrowed (Vec'0.t_vec int32 (Global'0.t_global)))) : Seq.seq int32
   =
    [%#span29] shallow_model'2 (Snapshot.inner self)
  
  use prelude.prelude.Snapshot
  
  let rec y (v:borrowed (Vec'0.t_vec int32 (Global'0.t_global))) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#sinferred_invarianrs0] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &i <- [%#sinferred_invarianrs1] (0 : usize) ] s1 | s1 =  [ &old_2_0 <- Snapshot.new v ] s2 | s2 = bb2 ]
      
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] (Snapshot.inner old_2_0).final = v.final}
        {[@expl:loop invariant] [%#sinferred_invarianrs3] UIntSize.to_int i <= 10}
        {[@expl:loop invariant] [%#sinferred_invarianrs2] Seq.length (shallow_model'0 old_v)
        = Seq.length (shallow_model'1 v)}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0 [ s0 = len'0 {v.current} (fun (_ret':usize) ->  [ &_11 <- _ret' ] s1) | s1 = bb4 ] 
        | bb4 = s0
          [ s0 = UIntSize.lt {i} {_11}
              (fun (_ret':bool) ->  [ &_9 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_11 <- _any ] s1) ] ))
          | s1 = any [ br0 -> {_9 = false} (! bb7) | br1 -> {_9} (! bb5) ]  ]
          
        | bb5 = s0
          [ s0 = Borrow.borrow_mut <Vec'0.t_vec int32 (Global'0.t_global)> {v.current}
              (fun (_ret':borrowed (Vec'0.t_vec int32 (Global'0.t_global))) ->
                 [ &_14 <- _ret' ] 
                 [ &v <- { v with current = _14.final ; } ] 
                s1)
          | s1 = index_mut'0 {_14} {i} (fun (_ret':borrowed int32) ->  [ &_13 <- _ret' ] s2)
          | s2 = bb6 ]
          
        | bb6 = s0
          [ s0 =  [ &_13 <- { _13 with current = ([%#sinferred_invarianrs4] (0 : int32)) ; } ] s1
          | s1 = -{resolve'0 _13}- s2
          | s2 = bb8 ]
          
        | bb7 = bb8
        | bb8 = s0
          [ s0 = UIntSize.add {i} {[%#sinferred_invarianrs5] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1)
          | s1 = UIntSize.gt {i} {[%#sinferred_invarianrs6] (10 : usize)} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s2)
          | s2 = any [ br0 -> {_16 = false} (! bb10) | br1 -> {_16} (! bb9) ]  ]
          
        | bb10 = bb2 ]
         ]
      
    | bb9 = s0 [ s0 = -{resolve'1 v}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_vec int32 (Global'0.t_global)) = v
    | & old_v : Snapshot.snap_ty (borrowed (Vec'0.t_vec int32 (Global'0.t_global))) = any_l ()
    | & i : usize = any_l ()
    | & _9 : bool = any_l ()
    | & _11 : usize = any_l ()
    | & _13 : borrowed int32 = any_l ()
    | & _14 : borrowed (Vec'0.t_vec int32 (Global'0.t_global)) = any_l ()
    | & _16 : bool = any_l ()
    | & old_2_0 : Snapshot.snap_ty (borrowed (Vec'0.t_vec int32 (Global'0.t_global))) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
