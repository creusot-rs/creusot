
module C01_Func1
  use prelude.Intrinsic
  let rec func1 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../01.rs" 6 11 6 13] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ]  [ return' (result:())-> (! return' {result}) ] 
end
module C01_Func2
  use prelude.Intrinsic
  let rec func1'0 (_1:()) (return'  (ret:()))= any [ return' (result:())-> (! return' {result}) ] 
  let rec func2 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = func1'0 {[#"../01.rs" 9 4 9 11] ()} (fun (_ret':()) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ]  [ return' (result:())-> (! return' {result}) ] 
end
module C01_Func3
  use prelude.Intrinsic
  let rec func2'0 (_1:()) (return'  (ret:()))= any [ return' (result:())-> (! return' {result}) ] 
  let rec func3 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = func2'0 {[#"../01.rs" 13 4 13 11] ()} (fun (_ret':()) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ]  [ return' (result:())-> (! return' {result}) ] 
end
