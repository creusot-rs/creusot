module M_01__func1 [#"01.rs" 6 0 6 10]
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec func1 (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_01__func2 [#"01.rs" 8 0 8 10]
  let%span s010 = "01.rs" 9 4 9 11
  
  use prelude.prelude.Intrinsic
  
  let rec func1'0 (_1:()) (return'  (ret:()))= any [ return' (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec func2 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = func1'0 {[%#s010] ()} (fun (_ret':()) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
module M_01__func3 [#"01.rs" 12 0 12 14]
  let%span s010 = "01.rs" 13 4 13 11
  
  use prelude.prelude.Intrinsic
  
  let rec func2'0 (_1:()) (return'  (ret:()))= any [ return' (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec func3 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = func2'0 {[%#s010] ()} (fun (_ret':()) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
