
module C03_Prog
  type t
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  function omg0 [#"../03.rs" 6 0 6 24] (_x : t) : bool =
    [#"../03.rs" 7 4 7 8] true
  val omg0 [#"../03.rs" 6 0 6 24] (_x : t) : bool
    ensures { result = omg0 _x }
    
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  let rec cfg prog [#"../03.rs" 11 0 11 16] [@cfg:stackify] [@cfg:subregion_analysis] (x : t) : ()
    requires {[#"../03.rs" 11 11 11 12] inv0 x}
    ensures { [#"../03.rs" 10 10 10 16] omg0 x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : t = x;
  {
    goto BB0
  }
  BB0 {
    assert { [@expl:type invariant] inv0 x };
    assume { resolve0 x };
    goto BB1
  }
  BB1 {
    [#"../03.rs" 11 17 11 19] _0 <- ([#"../03.rs" 11 17 11 19] ());
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module C03_Prog2
  use prelude.Int32
  predicate invariant0 (self : int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : int32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : int32)
  val inv0 (_x : int32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : int32 . inv0 x = true
  use prelude.Int
  function omg0 [#"../03.rs" 6 0 6 24] (_x : int) : bool =
    [#"../03.rs" 7 4 7 8] true
  val omg0 [#"../03.rs" 6 0 6 24] (_x : int) : bool
    ensures { result = omg0 _x }
    
  function omg1 [#"../03.rs" 6 0 6 24] (_x : int32) : bool =
    [#"../03.rs" 7 4 7 8] true
  val omg1 [#"../03.rs" 6 0 6 24] (_x : int32) : bool
    ensures { result = omg1 _x }
    
  val prog0 [#"../03.rs" 11 0 11 16] (x : int32) : ()
    requires {[#"../03.rs" 11 11 11 12] inv0 x}
    ensures { [#"../03.rs" 10 10 10 16] omg1 x }
    
  use prelude.Int
  let rec cfg prog2 [#"../03.rs" 14 0 14 14] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    ensures { [#"../03.rs" 13 10 13 16] omg0 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _2 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../03.rs" 15 4 15 11] _2 <- ([#"../03.rs" 15 4 15 11] prog0 ([#"../03.rs" 15 9 15 10] [#"../03.rs" 15 9 15 10] (0 : int32)));
    goto BB1
  }
  BB1 {
    [#"../03.rs" 14 15 16 1] _0 <- ([#"../03.rs" 14 15 16 1] ());
    return _0
  }
  
end
module C03_Prog3
  use prelude.Int
  function omg0 [#"../03.rs" 6 0 6 24] (_x : (int, int)) : bool =
    [#"../03.rs" 7 4 7 8] true
  val omg0 [#"../03.rs" 6 0 6 24] (_x : (int, int)) : bool
    ensures { result = omg0 _x }
    
  let rec cfg prog3 [#"../03.rs" 19 0 19 14] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    ensures { [#"../03.rs" 18 10 18 21] omg0 (0, 0) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../03.rs" 19 15 19 17] _0 <- ([#"../03.rs" 19 15 19 17] ());
    return _0
  }
  
end
