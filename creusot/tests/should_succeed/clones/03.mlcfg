
module C03_Omg_Stub
  type t
  function omg [#"../03.rs" 6 0 6 24] (_x : t) : bool
end
module C03_Omg_Interface
  type t
  function omg [#"../03.rs" 6 0 6 24] (_x : t) : bool
  val omg [#"../03.rs" 6 0 6 24] (_x : t) : bool
    ensures { result = omg _x }
    
end
module C03_Omg
  type t
  function omg [#"../03.rs" 6 0 6 24] (_x : t) : bool =
    [#"../03.rs" 7 4 7 8] true
  val omg [#"../03.rs" 6 0 6 24] (_x : t) : bool
    ensures { result = omg _x }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C03_Prog_Interface
  type t
  clone C03_Omg_Stub as Omg0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val prog [#"../03.rs" 11 0 11 16] (x : t) : ()
    requires {[#"../03.rs" 11 11 11 12] Inv0.inv x}
    ensures { [#"../03.rs" 10 10 10 16] Omg0.omg x }
    
end
module C03_Prog
  type t
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C03_Omg as Omg0 with
    type t = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = t
  let rec cfg prog [#"../03.rs" 11 0 11 16] [@cfg:stackify] [@cfg:subregion_analysis] (x : t) : ()
    requires {[#"../03.rs" 11 11 11 12] Inv0.inv x}
    ensures { [#"../03.rs" 10 10 10 16] Omg0.omg x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : t = x;
  {
    goto BB0
  }
  BB0 {
    assert { [@expl:type invariant] Inv0.inv x };
    assume { Resolve0.resolve x };
    goto BB1
  }
  BB1 {
    _0 <- ();
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module C03_Prog2_Interface
  use prelude.Int
  use prelude.Int
  clone C03_Omg_Stub as Omg0 with
    type t = int
  val prog2 [#"../03.rs" 14 0 14 14] (_1 : ()) : ()
    ensures { [#"../03.rs" 13 10 13 16] Omg0.omg 0 }
    
end
module C03_Prog2
  use prelude.Int
  use prelude.Int32
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = int32
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = int32,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use prelude.Int
  clone C03_Omg as Omg1 with
    type t = int32
  clone C03_Omg as Omg0 with
    type t = int
  clone C03_Prog_Interface as Prog0 with
    type t = int32,
    predicate Inv0.inv = Inv0.inv,
    function Omg0.omg = Omg1.omg
  let rec cfg prog2 [#"../03.rs" 14 0 14 14] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    ensures { [#"../03.rs" 13 10 13 16] Omg0.omg 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _2 : ();
  {
    goto BB0
  }
  BB0 {
    _2 <- ([#"../03.rs" 15 4 15 11] Prog0.prog ([#"../03.rs" 15 9 15 10] (0 : int32)));
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
module C03_Prog3_Interface
  use prelude.Int
  use prelude.Int
  clone C03_Omg_Stub as Omg0 with
    type t = (int, int)
  val prog3 [#"../03.rs" 19 0 19 14] (_1 : ()) : ()
    ensures { [#"../03.rs" 18 10 18 21] Omg0.omg (0, 0) }
    
end
module C03_Prog3
  use prelude.Int
  use prelude.Int
  clone C03_Omg as Omg0 with
    type t = (int, int)
  let rec cfg prog3 [#"../03.rs" 19 0 19 14] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    ensures { [#"../03.rs" 18 10 18 21] Omg0.omg (0, 0) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
