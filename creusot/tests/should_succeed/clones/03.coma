
module M_03__prog
  type t
  
  let%span s030 = "../03.rs" 11 11 11 12
  
  let%span s031 = "../03.rs" 10 10 10 16
  
  let%span span2 = "../03.rs" 7 4 7 8
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_1 : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  function omg'0 [#"../03.rs" 6 0 6 24] (_x : t) : bool =
    [%#span2] true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : t)
  
  let rec prog (x:t) (return'  (ret:()))= {[%#s030] inv'0 x}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 x} s1 | s1 = -{resolve'0 x}- s2 | s2 = bb1 ] 
    | bb1 = bb2
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & x : t = x ] 
    [ return' (result:())-> {[@expl:postcondition] [%#s031] omg'0 x} (! return' {result}) ]
    
end
module M_03__prog2
  let%span s030 = "../03.rs" 15 9 15 10
  
  let%span s031 = "../03.rs" 13 10 13 16
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../03.rs" 7 4 7 8
  
  let%span span4 = "../03.rs" 11 11 11 12
  
  let%span span5 = "../03.rs" 10 10 10 16
  
  use prelude.prelude.Int32
  
  predicate invariant'0 (self : int32) =
    [%#span2] true
  
  predicate inv'0 (_1 : int32)
  
  axiom inv'0 : forall x : int32 . inv'0 x = true
  
  use prelude.prelude.Int
  
  function omg'0 [#"../03.rs" 6 0 6 24] (_x : int) : bool =
    [%#span3] true
  
  use prelude.prelude.Intrinsic
  
  function omg'1 [#"../03.rs" 6 0 6 24] (_x : int32) : bool =
    [%#span3] true
  
  let rec prog'0 (x:int32) (return'  (ret:()))= {[@expl:precondition] [%#span4] inv'0 x}
    any [ return' (result:())-> {[%#span5] omg'1 x} (! return' {result}) ] 
  
  use prelude.prelude.Int
  
  let rec prog2 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = prog'0 {[%#s030] (0 : int32)} (fun (_ret':()) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _2 : () = any_l () ] 
    [ return' (result:())-> {[@expl:postcondition] [%#s031] omg'0 0} (! return' {result}) ]
    
end
module M_03__prog3
  let%span s030 = "../03.rs" 18 10 18 21
  
  let%span span1 = "../03.rs" 7 4 7 8
  
  use prelude.prelude.Int
  
  function omg'0 [#"../03.rs" 6 0 6 24] (_x : (int, int)) : bool =
    [%#span1] true
  
  use prelude.prelude.Intrinsic
  
  let rec prog3 (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:postcondition] [%#s030] omg'0 (0, 0)} (! return' {result}) ]
    
end
