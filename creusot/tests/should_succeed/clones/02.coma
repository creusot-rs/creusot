
module C02_Program
  function simple'0 [#"../02.rs" 9 0 9 19] (_1 : ()) : bool =
    [#"../02.rs" 10 4 10 8] true
  let rec simple'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = simple'0 _1} (! return' {result}) ]
    
  function uses_simple'0 [#"../02.rs" 14 0 14 24] (_1 : ()) : bool =
    [#"../02.rs" 15 4 15 12] simple'0 ()
  let rec uses_simple'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = uses_simple'0 _1} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec program (_1:()) (return'  (ret:()))= {[#"../02.rs" 18 11 18 24] uses_simple'0 ()}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- [#"../02.rs" 20 17 20 19] () ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : () = any_l () : () ]
     [ return' (result:())-> {[@expl:postcondition] [#"../02.rs" 19 10 19 18] simple'0 ()} (! return' {result}) ] 
end
