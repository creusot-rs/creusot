module M_04__f [#"04.rs" 21 0 21 16]
  let%span s040 = "04.rs" 20 11 20 15
  let%span s041 = "04.rs" 17 4 17 21
  let%span s042 = "04.rs" 12 4 12 21
  let%span sord3 = "../../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord4 = "../../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord5 = "../../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord6 = "../../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord7 = "../../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord8 = "../../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord9 = "../../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord10 = "../../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord11 = "../../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord12 = "../../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord13 = "../../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord14 = "../../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord15 = "../../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span s0416 = "04.rs" 7 4 7 12
  let%span sord17 = "../../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.prelude.UInt32
  
  function cmp_log'0 (self : UInt32.t) (o : UInt32.t) : t_Ordering'0 =
    [%#sord17] if UInt32.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord15] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord13] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord14] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord11] cmp_log'0 x y = C_Less'0)
   -> ([%#sord12] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt32.t) (y : UInt32.t) (z : UInt32.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt32.t, y : UInt32.t, z : UInt32.t, o : t_Ordering'0 . ([%#sord8] cmp_log'0 x y = o)
   -> ([%#sord9] cmp_log'0 y z = o)  -> ([%#sord10] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt32.t) : ()
  
  axiom refl'0_spec : forall x : UInt32.t . [%#sord7] cmp_log'0 x x = C_Equal'0
  
  use prelude.prelude.UInt32
  
  function cmp_gt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord6] UInt32.ugt x y = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.prelude.UInt32
  
  function cmp_ge_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord5] UInt32.uge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord4] UInt32.ult x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.prelude.UInt32
  
  function cmp_le_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord3] UInt32.ule x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  function a'0 [#"04.rs" 6 0 6 20] (x : UInt32.t) : bool =
    [%#s0416] UInt32.ugt x (0 : UInt32.t)
  
  function b'0 [#"04.rs" 11 0 11 20] (x : UInt32.t) : bool =
    [%#s042] UInt32.ugt x (10 : UInt32.t) /\ a'0 x
  
  function c'0 [#"04.rs" 16 0 16 20] (x : UInt32.t) : bool =
    [%#s041] UInt32.ult x (50 : UInt32.t) /\ b'0 x
  
  meta "compute_max_steps" 1000000
  
  let rec f'0 (x:UInt32.t) (return'  (ret:()))= {[@expl:f requires] [%#s040] c'0 x}
    (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
