module M_04__f [#"04.rs" 21 0 21 16]
  let%span s040 = "04.rs" 20 11 20 15
  let%span s041 = "04.rs" 17 4 17 21
  let%span s042 = "04.rs" 12 4 12 21
  let%span s043 = "04.rs" 7 4 7 12
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  function a'0 [#"04.rs" 6 0 6 20] (x : uint32) : bool =
    [%#s043] x > (0 : uint32)
  
  function b'0 [#"04.rs" 11 0 11 20] (x : uint32) : bool =
    [%#s042] x > (10 : uint32) /\ a'0 x
  
  function c'0 [#"04.rs" 16 0 16 20] (x : uint32) : bool =
    [%#s041] x < (50 : uint32) /\ b'0 x
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec f (x:uint32) (return'  (ret:()))= {[%#s040] c'0 x}
    (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
