
module InplaceListReversal_List_Type
  type t_list 't =
    | C_Nil
    | C_Cons ('t, t_list 't)
    
  let function cons_0 (self : t_list 't) : ('t, t_list 't) = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Nil -> any ('t, t_list 't)
      | C_Cons a -> a
      end
end
module InplaceListReversal_Rev
  type t
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  use prelude.Borrow
  predicate invariant2 (self : borrowed (InplaceListReversal_List_Type.t_list t))
  val invariant2 (self : borrowed (InplaceListReversal_List_Type.t_list t)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (InplaceListReversal_List_Type.t_list t))
  val inv2 (_x : borrowed (InplaceListReversal_List_Type.t_list t)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (InplaceListReversal_List_Type.t_list t) . inv2 x = true
  predicate invariant1 (self : InplaceListReversal_List_Type.t_list t)
  val invariant1 (self : InplaceListReversal_List_Type.t_list t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : InplaceListReversal_List_Type.t_list t)
  val inv1 (_x : InplaceListReversal_List_Type.t_list t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : InplaceListReversal_List_Type.t_list t . inv1 x = true
  use prelude.Ghost
  predicate invariant0 (self : Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t)))
  val invariant0 (self : Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t)))
  val inv0 (_x : Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t)) . inv0 x = true
  predicate resolve2 (self : borrowed (InplaceListReversal_List_Type.t_list t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (InplaceListReversal_List_Type.t_list t)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : InplaceListReversal_List_Type.t_list t)
  val resolve1 (self : InplaceListReversal_List_Type.t_list t) : bool
    ensures { result = resolve1 self }
    
  use prelude.Ghost
  function rev_append0 [#"../inplace_list_reversal.rs" 16 0 16 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    
   =
    [#"../inplace_list_reversal.rs" 17 4 20 5] match n with
      | InplaceListReversal_List_Type.C_Nil -> o
      | InplaceListReversal_List_Type.C_Cons (hd, tl) -> rev_append0 tl (InplaceListReversal_List_Type.C_Cons (hd, o))
      end
  val rev_append0 [#"../inplace_list_reversal.rs" 16 0 16 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    ensures { result = rev_append0 n o }
    
  val replace0 (dest : borrowed (InplaceListReversal_List_Type.t_list t)) (src : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    requires {inv2 dest}
    requires {inv1 src}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 7 22 7 34]  ^ dest = src }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 8 22 8 37] result =  * dest }
    ensures { inv1 result }
    
  predicate resolve0 (self : Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t)))
  val resolve0 (self : Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Ghost
  let rec cfg rev [#"../inplace_list_reversal.rs" 24 0 24 30] [@cfg:stackify] [@cfg:subregion_analysis] (l : borrowed (InplaceListReversal_List_Type.t_list t)) : ()
    requires {[#"../inplace_list_reversal.rs" 24 14 24 15] inv2 l}
    ensures { [#"../inplace_list_reversal.rs" 23 10 23 35]  ^ l = rev_append0 ( * l) (InplaceListReversal_List_Type.C_Nil) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l : borrowed (InplaceListReversal_List_Type.t_list t) = l;
  var old_l : Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t));
  var prev : InplaceListReversal_List_Type.t_list t;
  var head : InplaceListReversal_List_Type.t_list t;
  var _7 : borrowed (InplaceListReversal_List_Type.t_list t);
  var curr : (t, InplaceListReversal_List_Type.t_list t);
  var next : InplaceListReversal_List_Type.t_list t;
  {
    goto BB0
  }
  BB0 {
    [#"../inplace_list_reversal.rs" 25 16 25 25] old_l <- ([#"../inplace_list_reversal.rs" 25 16 25 25] Ghost.new l);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 old_l };
    assume { resolve0 old_l };
    [#"../inplace_list_reversal.rs" 26 19 26 22] prev <- ([#"../inplace_list_reversal.rs" 26 19 26 22] InplaceListReversal_List_Type.C_Nil);
    [#"../inplace_list_reversal.rs" 27 27 27 28] _7 <- Borrow.borrow_mut ( * l);
    [#"../inplace_list_reversal.rs" 27 27 27 28] l <- { l with current =  ^ _7 };
    assume { inv1 ( ^ _7) };
    [#"../inplace_list_reversal.rs" 27 19 27 34] head <- ([#"../inplace_list_reversal.rs" 27 19 27 34] replace0 _7 ([#"../inplace_list_reversal.rs" 27 30 27 33] InplaceListReversal_List_Type.C_Nil));
    _7 <- any borrowed (InplaceListReversal_List_Type.t_list t);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"../inplace_list_reversal.rs" 28 16 28 73] rev_append0 head prev = rev_append0 ( * Ghost.inner old_l) (InplaceListReversal_List_Type.C_Nil) };
    goto BB5
  }
  BB5 {
    switch (head)
      | InplaceListReversal_List_Type.C_Cons _ -> goto BB6
      | _ -> goto BB19
      end
  }
  BB6 {
    goto BB7
  }
  BB7 {
    [#"../inplace_list_reversal.rs" 29 19 29 27] curr <- ([#"../inplace_list_reversal.rs" 29 19 29 27] InplaceListReversal_List_Type.cons_0 head);
    [#"../inplace_list_reversal.rs" 29 19 29 27] head <- (let InplaceListReversal_List_Type.C_Cons x0 = head in InplaceListReversal_List_Type.C_Cons (any (t, InplaceListReversal_List_Type.t_list t)));
    assert { [@expl:type invariant] inv1 head };
    assume { resolve1 head };
    [#"../inplace_list_reversal.rs" 30 19 30 25] next <- ([#"../inplace_list_reversal.rs" 30 19 30 25] let (_, a) = curr in a);
    [#"../inplace_list_reversal.rs" 30 19 30 25] curr <- (let (x0, x1) = curr in (x0, any InplaceListReversal_List_Type.t_list t));
    goto BB8
  }
  BB8 {
    [#"../inplace_list_reversal.rs" 31 8 31 14] curr <- (let (x0, x1) = curr in (x0, ([#"../inplace_list_reversal.rs" 31 17 31 21] prev)));
    [#"../inplace_list_reversal.rs" 31 17 31 21] prev <- any InplaceListReversal_List_Type.t_list t;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    [#"../inplace_list_reversal.rs" 32 8 32 12] prev <- ([#"../inplace_list_reversal.rs" 32 15 32 25] InplaceListReversal_List_Type.C_Cons ([#"../inplace_list_reversal.rs" 32 20 32 24] curr));
    [#"../inplace_list_reversal.rs" 32 20 32 24] curr <- any (t, InplaceListReversal_List_Type.t_list t);
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    [#"../inplace_list_reversal.rs" 33 8 33 12] head <- ([#"../inplace_list_reversal.rs" 33 15 33 19] next);
    [#"../inplace_list_reversal.rs" 33 15 33 19] next <- any InplaceListReversal_List_Type.t_list t;
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB20
  }
  BB19 {
    assert { [@expl:type invariant] inv1 head };
    assume { resolve1 head };
    goto BB21
  }
  BB20 {
    goto BB4
  }
  BB21 {
    [#"../inplace_list_reversal.rs" 35 4 35 6] l <- { l with current = ([#"../inplace_list_reversal.rs" 35 9 35 13] prev) };
    [#"../inplace_list_reversal.rs" 35 9 35 13] prev <- any InplaceListReversal_List_Type.t_list t;
    assert { [@expl:type invariant] inv1 ( * l) };
    assume { resolve1 ( * l) };
    assert { [@expl:type invariant] inv2 l };
    assume { resolve2 l };
    goto BB23
  }
  BB23 {
    [#"../inplace_list_reversal.rs" 24 31 36 1] _0 <- ([#"../inplace_list_reversal.rs" 24 31 36 1] ());
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
