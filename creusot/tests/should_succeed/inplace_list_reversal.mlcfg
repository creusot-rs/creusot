
module InplaceListReversal_List_Type
  type t_list 't =
    | C_Nil
    | C_Cons ('t, t_list 't)
    
  let function cons_0 (self : t_list 't) : ('t, t_list 't) = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Nil -> any ('t, t_list 't)
      | C_Cons a -> a
      end
end
module InplaceListReversal_RevAppend_Stub
  type t
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  function rev_append [#"../inplace_list_reversal.rs" 16 0 16 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    
end
module InplaceListReversal_RevAppend_Interface
  type t
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  function rev_append [#"../inplace_list_reversal.rs" 16 0 16 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    
  val rev_append [#"../inplace_list_reversal.rs" 16 0 16 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    ensures { result = rev_append n o }
    
end
module InplaceListReversal_RevAppend
  type t
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  function rev_append [#"../inplace_list_reversal.rs" 16 0 16 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    
   =
    [#"../inplace_list_reversal.rs" 17 4 20 5] match (n) with
      | InplaceListReversal_List_Type.C_Nil -> o
      | InplaceListReversal_List_Type.C_Cons (hd, tl) -> rev_append tl (InplaceListReversal_List_Type.C_Cons (hd, o))
      end
  val rev_append [#"../inplace_list_reversal.rs" 16 0 16 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    ensures { result = rev_append n o }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Core_Mem_Replace_Interface
  type t
  use prelude.Borrow
  val replace (dest : borrowed t) (src : t) : t
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 7 22 7 34]  ^ dest = src }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 8 22 8 37] result =  * dest }
    
end
module InplaceListReversal_Rev_Interface
  type t
  use prelude.Borrow
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  clone InplaceListReversal_RevAppend_Stub as RevAppend0 with
    type t = t
  val rev [#"../inplace_list_reversal.rs" 24 0 24 30] (l : borrowed (InplaceListReversal_List_Type.t_list t)) : ()
    ensures { [#"../inplace_list_reversal.rs" 23 10 23 35]  ^ l = RevAppend0.rev_append ( * l) (InplaceListReversal_List_Type.C_Nil) }
    
end
module InplaceListReversal_Rev
  type t
  use prelude.Borrow
  use prelude.Ghost
  use prelude.Int
  use prelude.IntSize
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = InplaceListReversal_List_Type.t_list t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = InplaceListReversal_List_Type.t_list t
  clone Core_Mem_Replace_Interface as Replace0 with
    type t = InplaceListReversal_List_Type.t_list t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t))
  clone InplaceListReversal_RevAppend as RevAppend0 with
    type t = t
  let rec cfg rev [#"../inplace_list_reversal.rs" 24 0 24 30] [@cfg:stackify] [@cfg:subregion_analysis] (l : borrowed (InplaceListReversal_List_Type.t_list t)) : ()
    ensures { [#"../inplace_list_reversal.rs" 23 10 23 35]  ^ l = RevAppend0.rev_append ( * l) (InplaceListReversal_List_Type.C_Nil) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l_1 : borrowed (InplaceListReversal_List_Type.t_list t);
  var old_l_3 : Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t));
  var prev_5 : InplaceListReversal_List_Type.t_list t;
  var head_6 : InplaceListReversal_List_Type.t_list t;
  var _7 : borrowed (InplaceListReversal_List_Type.t_list t);
  var _8 : InplaceListReversal_List_Type.t_list t;
  var _9 : ();
  var _11 : ();
  var _12 : isize;
  var curr_13 : (t, InplaceListReversal_List_Type.t_list t);
  var next_14 : InplaceListReversal_List_Type.t_list t;
  var _15 : InplaceListReversal_List_Type.t_list t;
  var _16 : InplaceListReversal_List_Type.t_list t;
  var _17 : (t, InplaceListReversal_List_Type.t_list t);
  var _18 : InplaceListReversal_List_Type.t_list t;
  var _19 : ();
  var _20 : ();
  var _21 : ();
  var _22 : InplaceListReversal_List_Type.t_list t;
  {
    l_1 <- l;
    goto BB0
  }
  BB0 {
    old_l_3 <- ([#"../inplace_list_reversal.rs" 25 16 25 28] Ghost.new l_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_l_3 };
    prev_5 <- InplaceListReversal_List_Type.C_Nil;
    _7 <- borrow_mut ( * l_1);
    l_1 <- { l_1 with current = ( ^ _7) };
    _8 <- InplaceListReversal_List_Type.C_Nil;
    head_6 <- ([#"../inplace_list_reversal.rs" 27 19 27 34] Replace0.replace _7 _8);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"../inplace_list_reversal.rs" 28 16 28 73] RevAppend0.rev_append head_6 prev_5 = RevAppend0.rev_append ( * Ghost.inner old_l_3) (InplaceListReversal_List_Type.C_Nil) };
    goto BB5
  }
  BB5 {
    switch (head_6)
      | InplaceListReversal_List_Type.C_Cons _ -> goto BB6
      | _ -> goto BB19
      end
  }
  BB6 {
    goto BB7
  }
  BB7 {
    curr_13 <- InplaceListReversal_List_Type.cons_0 head_6;
    head_6 <- (let InplaceListReversal_List_Type.C_Cons a = head_6 in InplaceListReversal_List_Type.C_Cons (any (t, InplaceListReversal_List_Type.t_list t)));
    assume { Resolve1.resolve head_6 };
    next_14 <- (let (_, a) = curr_13 in a);
    curr_13 <- (let (a, b) = curr_13 in (a, any InplaceListReversal_List_Type.t_list t));
    _15 <- prev_5;
    prev_5 <- any InplaceListReversal_List_Type.t_list t;
    goto BB8
  }
  BB8 {
    curr_13 <- (let (a, b) = curr_13 in (a, _15));
    _15 <- any InplaceListReversal_List_Type.t_list t;
    goto BB10
  }
  BB10 {
    _17 <- curr_13;
    curr_13 <- any (t, InplaceListReversal_List_Type.t_list t);
    _16 <- InplaceListReversal_List_Type.C_Cons _17;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    prev_5 <- _16;
    _16 <- any InplaceListReversal_List_Type.t_list t;
    goto BB14
  }
  BB14 {
    _18 <- next_14;
    next_14 <- any InplaceListReversal_List_Type.t_list t;
    goto BB15
  }
  BB15 {
    head_6 <- _18;
    _18 <- any InplaceListReversal_List_Type.t_list t;
    goto BB17
  }
  BB17 {
    _11 <- ();
    goto BB18
  }
  BB18 {
    goto BB20
  }
  BB19 {
    assume { Resolve1.resolve head_6 };
    _9 <- ();
    _22 <- prev_5;
    prev_5 <- any InplaceListReversal_List_Type.t_list t;
    goto BB21
  }
  BB20 {
    goto BB4
  }
  BB21 {
    l_1 <- { l_1 with current = _22 };
    _22 <- any InplaceListReversal_List_Type.t_list t;
    assume { Resolve1.resolve ( * l_1) };
    assume { Resolve2.resolve l_1 };
    goto BB23
  }
  BB23 {
    _0 <- ();
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
