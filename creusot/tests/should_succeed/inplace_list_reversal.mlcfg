
module InplaceListReversal_List_Type
  type t_list 't =
    | C_Nil
    | C_Cons ('t, t_list 't)
    
  let function cons_0 (self : t_list 't) : ('t, t_list 't) = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Nil -> any ('t, t_list 't)
      | C_Cons a -> a
      end
end
module InplaceListReversal_RevAppend_Stub
  type t
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  function rev_append [#"../inplace_list_reversal.rs" 16 0 16 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    
end
module InplaceListReversal_RevAppend_Interface
  type t
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  function rev_append [#"../inplace_list_reversal.rs" 16 0 16 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    
  val rev_append [#"../inplace_list_reversal.rs" 16 0 16 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    ensures { result = rev_append n o }
    
end
module InplaceListReversal_RevAppend
  type t
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  function rev_append [#"../inplace_list_reversal.rs" 16 0 16 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    
   =
    [#"../inplace_list_reversal.rs" 17 4 20 5] match (n) with
      | InplaceListReversal_List_Type.C_Nil -> o
      | InplaceListReversal_List_Type.C_Cons (hd, tl) -> rev_append tl (InplaceListReversal_List_Type.C_Cons (hd, o))
      end
  val rev_append [#"../inplace_list_reversal.rs" 16 0 16 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    ensures { result = rev_append n o }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module Core_Mem_Replace_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  val replace (dest : borrowed t) (src : t) : t
    requires {Inv0.inv dest}
    requires {Inv1.inv src}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 7 22 7 34]  ^ dest = src }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 8 22 8 37] result =  * dest }
    ensures { Inv1.inv result }
    
end
module InplaceListReversal_Rev_Interface
  type t
  use prelude.Borrow
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  clone InplaceListReversal_RevAppend_Stub as RevAppend0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (InplaceListReversal_List_Type.t_list t)
  val rev [#"../inplace_list_reversal.rs" 24 0 24 30] (l : borrowed (InplaceListReversal_List_Type.t_list t)) : ()
    requires {[#"../inplace_list_reversal.rs" 24 14 24 15] Inv0.inv l}
    ensures { [#"../inplace_list_reversal.rs" 23 10 23 35]  ^ l = RevAppend0.rev_append ( * l) (InplaceListReversal_List_Type.C_Nil) }
    
end
module InplaceListReversal_Rev
  type t
  use prelude.Ghost
  use prelude.Borrow
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (InplaceListReversal_List_Type.t_list t)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (InplaceListReversal_List_Type.t_list t),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = InplaceListReversal_List_Type.t_list t
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = InplaceListReversal_List_Type.t_list t,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t))
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t)),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = InplaceListReversal_List_Type.t_list t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = InplaceListReversal_List_Type.t_list t
  clone InplaceListReversal_RevAppend as RevAppend0 with
    type t = t
  clone Core_Mem_Replace_Interface as Replace0 with
    type t = InplaceListReversal_List_Type.t_list t,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv1.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t))
  let rec cfg rev [#"../inplace_list_reversal.rs" 24 0 24 30] [@cfg:stackify] [@cfg:subregion_analysis] (l : borrowed (InplaceListReversal_List_Type.t_list t)) : ()
    requires {[#"../inplace_list_reversal.rs" 24 14 24 15] Inv2.inv l}
    ensures { [#"../inplace_list_reversal.rs" 23 10 23 35]  ^ l = RevAppend0.rev_append ( * l) (InplaceListReversal_List_Type.C_Nil) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l : borrowed (InplaceListReversal_List_Type.t_list t) = l;
  var old_l : Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t));
  var prev : InplaceListReversal_List_Type.t_list t;
  var head : InplaceListReversal_List_Type.t_list t;
  var _7 : borrowed (InplaceListReversal_List_Type.t_list t);
  var curr : (t, InplaceListReversal_List_Type.t_list t);
  var next : InplaceListReversal_List_Type.t_list t;
  {
    goto BB0
  }
  BB0 {
    old_l <- ([#"../inplace_list_reversal.rs" 25 16 25 25] Ghost.new l);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] Inv0.inv old_l };
    assume { Resolve0.resolve old_l };
    prev <- ([#"../inplace_list_reversal.rs" 26 19 26 22] InplaceListReversal_List_Type.C_Nil);
    _7 <- Borrow.borrow_mut ( * l);
    l <- { l with current = ( ^ _7) };
    assume { Inv1.inv ( ^ _7) };
    head <- ([#"../inplace_list_reversal.rs" 27 19 27 34] Replace0.replace _7 ([#"../inplace_list_reversal.rs" 27 30 27 33] InplaceListReversal_List_Type.C_Nil));
    _7 <- any borrowed (InplaceListReversal_List_Type.t_list t);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"../inplace_list_reversal.rs" 28 16 28 73] RevAppend0.rev_append head prev = RevAppend0.rev_append ( * Ghost.inner old_l) (InplaceListReversal_List_Type.C_Nil) };
    goto BB5
  }
  BB5 {
    switch (head)
      | InplaceListReversal_List_Type.C_Cons _ -> goto BB6
      | _ -> goto BB19
      end
  }
  BB6 {
    goto BB7
  }
  BB7 {
    curr <- InplaceListReversal_List_Type.cons_0 head;
    head <- (let InplaceListReversal_List_Type.C_Cons a = head in InplaceListReversal_List_Type.C_Cons (any (t, InplaceListReversal_List_Type.t_list t)));
    assert { [@expl:type invariant] Inv1.inv head };
    assume { Resolve1.resolve head };
    next <- (let (_, a) = curr in a);
    curr <- (let (a, b) = curr in (a, any InplaceListReversal_List_Type.t_list t));
    goto BB8
  }
  BB8 {
    curr <- (let (a, b) = curr in (a, prev));
    prev <- any InplaceListReversal_List_Type.t_list t;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    prev <- ([#"../inplace_list_reversal.rs" 32 15 32 25] InplaceListReversal_List_Type.C_Cons curr);
    curr <- any (t, InplaceListReversal_List_Type.t_list t);
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    head <- next;
    next <- any InplaceListReversal_List_Type.t_list t;
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB20
  }
  BB19 {
    assert { [@expl:type invariant] Inv1.inv head };
    assume { Resolve1.resolve head };
    goto BB21
  }
  BB20 {
    goto BB4
  }
  BB21 {
    l <- { l with current = prev };
    prev <- any InplaceListReversal_List_Type.t_list t;
    assert { [@expl:type invariant] Inv1.inv ( * l) };
    assume { Resolve1.resolve ( * l) };
    assert { [@expl:type invariant] Inv2.inv l };
    assume { Resolve2.resolve l };
    goto BB23
  }
  BB23 {
    _0 <- ([#"../inplace_list_reversal.rs" 24 31 36 1] ());
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
