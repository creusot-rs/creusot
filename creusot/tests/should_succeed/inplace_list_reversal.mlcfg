
module InplaceListReversal_List_Type
  type t_list 't =
    | C_Nil
    | C_Cons ('t, t_list 't)
    
  let function cons_0 (self : t_list 't) : ('t, t_list 't) = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Nil -> any ('t, t_list 't)
      | C_Cons a -> a
      end
end
module InplaceListReversal_RevAppend_Stub
  type t
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  function rev_append [#"../inplace_list_reversal.rs" 15 0 15 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    
end
module InplaceListReversal_RevAppend_Interface
  type t
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  function rev_append [#"../inplace_list_reversal.rs" 15 0 15 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    
end
module InplaceListReversal_RevAppend
  type t
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  function rev_append [#"../inplace_list_reversal.rs" 15 0 15 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    
   =
    [#"../inplace_list_reversal.rs" 16 4 19 5] match (n) with
      | InplaceListReversal_List_Type.C_Nil -> o
      | InplaceListReversal_List_Type.C_Cons (hd, tl) -> rev_append tl (InplaceListReversal_List_Type.C_Cons (hd, o))
      end
  val rev_append [#"../inplace_list_reversal.rs" 15 0 15 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    ensures { result = rev_append n o }
    
end
module Core_Mem_Replace_Interface
  type t
  use prelude.Borrow
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures {  ^ dest = src }
    ensures { result =  * dest }
    
end
module Core_Mem_Replace
  type t
  use prelude.Borrow
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures {  ^ dest = src }
    ensures { result =  * dest }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module InplaceListReversal_Rev_Interface
  type t
  use prelude.Borrow
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  clone InplaceListReversal_RevAppend_Stub as RevAppend0 with
    type t = t
  val rev [@cfg:stackify] [#"../inplace_list_reversal.rs" 23 0 23 30] (l : borrowed (InplaceListReversal_List_Type.t_list t)) : ()
    ensures { [#"../inplace_list_reversal.rs" 22 10 22 35]  ^ l = RevAppend0.rev_append ( * l) (InplaceListReversal_List_Type.C_Nil) }
    
end
module InplaceListReversal_Rev
  type t
  use prelude.Borrow
  use prelude.Ghost
  use mach.int.Int
  use prelude.IntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use prelude.Ghost
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = (t, InplaceListReversal_List_Type.t_list t)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = InplaceListReversal_List_Type.t_list t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = InplaceListReversal_List_Type.t_list t
  clone Core_Mem_Replace_Interface as Replace0 with
    type t = InplaceListReversal_List_Type.t_list t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t))
  clone InplaceListReversal_RevAppend as RevAppend0 with
    type t = t
  let rec cfg rev [@cfg:stackify] [#"../inplace_list_reversal.rs" 23 0 23 30] (l : borrowed (InplaceListReversal_List_Type.t_list t)) : ()
    ensures { [#"../inplace_list_reversal.rs" 22 10 22 35]  ^ l = RevAppend0.rev_append ( * l) (InplaceListReversal_List_Type.C_Nil) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l_1 : borrowed (InplaceListReversal_List_Type.t_list t);
  var old_l_3 : Ghost.ghost_ty (borrowed (InplaceListReversal_List_Type.t_list t));
  var _5 : ();
  var prev_6 : InplaceListReversal_List_Type.t_list t;
  var head_7 : InplaceListReversal_List_Type.t_list t;
  var _8 : borrowed (InplaceListReversal_List_Type.t_list t);
  var _9 : InplaceListReversal_List_Type.t_list t;
  var _10 : ();
  var _12 : ();
  var _13 : isize;
  var curr_14 : (t, InplaceListReversal_List_Type.t_list t);
  var next_15 : InplaceListReversal_List_Type.t_list t;
  var _16 : InplaceListReversal_List_Type.t_list t;
  var _17 : InplaceListReversal_List_Type.t_list t;
  var _18 : (t, InplaceListReversal_List_Type.t_list t);
  var _19 : InplaceListReversal_List_Type.t_list t;
  var _20 : ();
  var _21 : ();
  var _22 : ();
  var _23 : InplaceListReversal_List_Type.t_list t;
  {
    l_1 <- l;
    goto BB0
  }
  BB0 {
    _5 <- ();
    old_l_3 <- ([#"../inplace_list_reversal.rs" 24 16 24 28] Ghost.new l_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_l_3 };
    prev_6 <- InplaceListReversal_List_Type.C_Nil;
    _8 <- borrow_mut ( * l_1);
    l_1 <- { l_1 with current = ( ^ _8) };
    _9 <- InplaceListReversal_List_Type.C_Nil;
    head_7 <- ([#"../inplace_list_reversal.rs" 26 19 26 34] Replace0.replace _8 _9);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant x { [#"../inplace_list_reversal.rs" 27 19 27 76] RevAppend0.rev_append head_7 prev_6 = RevAppend0.rev_append ( * Ghost.inner old_l_3) (InplaceListReversal_List_Type.C_Nil) };
    switch (head_7)
      | InplaceListReversal_List_Type.C_Cons _ -> goto BB5
      | _ -> goto BB14
      end
  }
  BB5 {
    assume { Resolve3.resolve curr_14 };
    curr_14 <- InplaceListReversal_List_Type.cons_0 head_7;
    head_7 <- (let InplaceListReversal_List_Type.C_Cons a = head_7 in InplaceListReversal_List_Type.C_Cons (any (t, InplaceListReversal_List_Type.t_list t)));
    assume { Resolve1.resolve next_15 };
    next_15 <- (let (_, a) = curr_14 in a);
    curr_14 <- (let (a, b) = curr_14 in (a, any InplaceListReversal_List_Type.t_list t));
    assume { Resolve1.resolve _16 };
    _16 <- prev_6;
    prev_6 <- any InplaceListReversal_List_Type.t_list t;
    assume { Resolve1.resolve (let (_, a) = curr_14 in a) };
    curr_14 <- (let (a, b) = curr_14 in (a, _16));
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve3.resolve _18 };
    _18 <- curr_14;
    curr_14 <- any (t, InplaceListReversal_List_Type.t_list t);
    _17 <- InplaceListReversal_List_Type.C_Cons _18;
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve prev_6 };
    prev_6 <- _17;
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    assume { Resolve1.resolve _19 };
    _19 <- next_15;
    next_15 <- any InplaceListReversal_List_Type.t_list t;
    assume { Resolve1.resolve head_7 };
    head_7 <- _19;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    _12 <- ();
    goto BB13
  }
  BB13 {
    goto BB15
  }
  BB14 {
    _10 <- ();
    assume { Resolve1.resolve _23 };
    _23 <- prev_6;
    prev_6 <- any InplaceListReversal_List_Type.t_list t;
    assume { Resolve1.resolve ( * l_1) };
    l_1 <- { l_1 with current = _23 };
    goto BB16
  }
  BB15 {
    goto BB4
  }
  BB16 {
    assume { Resolve2.resolve l_1 };
    goto BB17
  }
  BB17 {
    _0 <- ();
    goto BB18
  }
  BB18 {
    assume { Resolve1.resolve head_7 };
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
