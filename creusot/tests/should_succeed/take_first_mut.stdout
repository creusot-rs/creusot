module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't = 
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
end
module TakeFirstMut_DefaultSpec_DefaultLog_Interface
  type self
  function default_log (_ : ()) : self
end
module TakeFirstMut_DefaultSpec_DefaultLog
  type self
  function default_log [#"../take_first_mut.rs" 21 4 29] (_ : ()) : self
end
module TakeFirstMut_Impl0_DefaultLog_Interface
  type t
  use prelude.Prelude
  use seq.Seq
  function default_log (_ : ()) : borrowed (seq t)
end
module TakeFirstMut_Impl0_DefaultLog
  type t
  use prelude.Prelude
  use seq.Seq
  function default_log [#"../take_first_mut.rs" 35 4 28] (_ : ()) : borrowed (seq t)
  axiom default_log_spec : ([#"../take_first_mut.rs" 33 4 38] Prelude.id ( * default_log ()) = Seq.empty ) && ([#"../take_first_mut.rs" 34 4 38] Prelude.id ( ^ default_log ()) = Seq.empty )
end
module CreusotContracts_Logic_Seq_Impl0_Tail_Interface
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Tail
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq_ext.SeqExt
  function tail (self : Seq.seq t) : Seq.seq t = 
    SeqExt.subsequence self 1 (Seq.length self)
end
module Core_Mem_Take_Interface
  type t
  use prelude.Prelude
  clone TakeFirstMut_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { [#"../take_first_mut.rs" 26 4 41]  ^ dest = DefaultLog0.default_log () }
    ensures { [#"../take_first_mut.rs" 25 4 31] result =  * dest }
    
end
module Core_Mem_Take
  type t
  use prelude.Prelude
  clone TakeFirstMut_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { [#"../take_first_mut.rs" 26 4 41]  ^ dest = DefaultLog0.default_log () }
    ensures { [#"../take_first_mut.rs" 25 4 31] result =  * dest }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl2_ModelTy
  type t
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module Core_Slice_Impl0_SplitFirstMut_Interface
  type t
  use Type
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Interface as Tail0 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val split_first_mut [@cfg:stackify] (self : borrowed (seq t)) : Type.core_option_option (borrowed t, borrowed (seq t))
    ensures { [#"../take_first_mut.rs" 9 4 7] match (result) with
      | Type.Core_Option_Option_None -> Seq.length (Model0.model self) = 0 &&  ^ self =  * self && Prelude.id ( * self) = Seq.empty 
      | Type.Core_Option_Option_Some (first, tail) ->  * first = Seq.get (Prelude.id ( * self)) 0 &&  ^ first = Seq.get (Prelude.id ( ^ self)) 0 && Seq.length (Prelude.id ( * self)) > 0 && Seq.length (Prelude.id ( ^ self)) > 0 && Prelude.id ( * tail) = Tail0.tail (Prelude.id ( * self)) && Prelude.id ( ^ tail) = Tail0.tail (Prelude.id ( ^ self))
      end }
    
end
module Core_Slice_Impl0_SplitFirstMut
  type t
  use Type
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Interface as Tail0 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val split_first_mut [@cfg:stackify] (self : borrowed (seq t)) : Type.core_option_option (borrowed t, borrowed (seq t))
    ensures { [#"../take_first_mut.rs" 9 4 7] match (result) with
      | Type.Core_Option_Option_None -> Seq.length (Model0.model self) = 0 &&  ^ self =  * self && Prelude.id ( * self) = Seq.empty 
      | Type.Core_Option_Option_Some (first, tail) ->  * first = Seq.get (Prelude.id ( * self)) 0 &&  ^ first = Seq.get (Prelude.id ( ^ self)) 0 && Seq.length (Prelude.id ( * self)) > 0 && Seq.length (Prelude.id ( ^ self)) > 0 && Prelude.id ( * tail) = Tail0.tail (Prelude.id ( * self)) && Prelude.id ( ^ tail) = Tail0.tail (Prelude.id ( ^ self))
      end }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module TakeFirstMut_Impl0
  type t
  use prelude.Prelude
  use seq.Seq
  clone TakeFirstMut_Impl0_DefaultLog as DefaultLog0 with type t = t, axiom .
  clone TakeFirstMut_DefaultSpec_DefaultLog as DefaultLog1 with type self = borrowed (seq t),
  function default_log = DefaultLog0.default_log
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl2_Model_Interface
  type t
  use prelude.Prelude
  use seq.Seq
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Logic_Model_Impl2_Model
  type t
  use prelude.Prelude
  use seq.Seq
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Logic_Model_Impl2
  type t
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Logic_Model_Impl2_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = seq t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = seq t, type modelTy = ModelTy0.modelTy
end
module TakeFirstMut_TakeFirstMut_Interface
  type t
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Interface as Tail0 with type t = t
  val take_first_mut [@cfg:stackify] (self_ : borrowed (borrowed (seq t))) : Type.core_option_option (borrowed t)
    ensures { [#"../take_first_mut.rs" 40 0 3] match (result) with
      | Type.Core_Option_Option_Some r ->  * r = Seq.get (Prelude.id ( *  * self_)) 0 &&  ^ r = Seq.get (Prelude.id ( ^  * self_)) 0 && Seq.length (Prelude.id ( *  * self_)) > 0 && Seq.length (Prelude.id ( ^  * self_)) > 0 && Prelude.id ( *  ^ self_) = Tail0.tail (Prelude.id ( *  * self_)) && Prelude.id ( ^  ^ self_) = Tail0.tail (Prelude.id ( ^  * self_))
      | Type.Core_Option_Option_None ->  ^ self_ =  * self_ && Seq.length (Prelude.id ( *  * self_)) = 0
      end }
    
end
module TakeFirstMut_TakeFirstMut
  type t
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl0_Tail as Tail0 with type t = t
  use mach.int.Int64
  clone CreusotContracts_Logic_Model_Impl2_Model as Model1 with type t = t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.core_option_option (borrowed t, borrowed (seq t))
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = borrowed (seq t)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone TakeFirstMut_Impl0_DefaultLog as DefaultLog0 with type t = t, axiom .
  clone Core_Mem_Take_Interface as Take0 with type t = borrowed (seq t),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone Core_Slice_Impl0_SplitFirstMut_Interface as SplitFirstMut0 with type t = t,
  function Model0.model = Model0.model, function Tail0.tail = Tail0.tail
  let rec cfg take_first_mut [@cfg:stackify] [#"../take_first_mut.rs" 50 0 74] (self_ : borrowed (borrowed (seq t))) : Type.core_option_option (borrowed t)
    ensures { [#"../take_first_mut.rs" 40 0 3] match (result) with
      | Type.Core_Option_Option_Some r ->  * r = Seq.get (Prelude.id ( *  * self_)) 0 &&  ^ r = Seq.get (Prelude.id ( ^  * self_)) 0 && Seq.length (Prelude.id ( *  * self_)) > 0 && Seq.length (Prelude.id ( ^  * self_)) > 0 && Prelude.id ( *  ^ self_) = Tail0.tail (Prelude.id ( *  * self_)) && Prelude.id ( ^  ^ self_) = Tail0.tail (Prelude.id ( ^  * self_))
      | Type.Core_Option_Option_None ->  ^ self_ =  * self_ && Seq.length (Prelude.id ( *  * self_)) = 0
      end }
    
   = 
  var _0 : Type.core_option_option (borrowed t);
  var self__1 : borrowed (borrowed (seq t));
  var _2 : Type.core_option_option (borrowed t, borrowed (seq t));
  var _3 : borrowed (seq t);
  var _4 : borrowed (seq t);
  var _5 : borrowed (borrowed (seq t));
  var _6 : isize;
  var _7 : ();
  var first_8 : borrowed t;
  var rem_9 : borrowed (seq t);
  var _10 : borrowed (seq t);
  var _11 : borrowed t;
  {
    self__1 <- self_;
    goto BB0
  }
  BB0 {
    _5 <- borrow_mut ( * self__1);
    self__1 <- { self__1 with current = ( ^ _5) };
    _4 <- ([#"../take_first_mut.rs" 51 10 26] Take0.take _5);
    goto BB1
  }
  BB1 {
    _3 <- borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _3) };
    _2 <- ([#"../take_first_mut.rs" 51 10 44] SplitFirstMut0.split_first_mut _3);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _4 };
    switch (_2)
      | Type.Core_Option_Option_None -> goto BB5
      | Type.Core_Option_Option_Some _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve3.resolve first_8 };
    first_8 <- (let (a, _) = Type.core_option_option_Some_0 _2 in a);
    assume { Resolve0.resolve rem_9 };
    rem_9 <- (let (_, a) = Type.core_option_option_Some_0 _2 in a);
    assume { Resolve2.resolve _2 };
    _10 <- borrow_mut ( * rem_9);
    rem_9 <- { rem_9 with current = ( ^ _10) };
    assume { Resolve0.resolve rem_9 };
    assume { Resolve0.resolve ( * self__1) };
    self__1 <- { self__1 with current = _10 };
    assume { Resolve1.resolve self__1 };
    _11 <- borrow_mut ( * first_8);
    first_8 <- { first_8 with current = ( ^ _11) };
    _0 <- Type.Core_Option_Option_Some _11;
    assume { Resolve3.resolve first_8 };
    goto BB6
  }
  BB4 {
    assume { Resolve1.resolve self__1 };
    assume { Resolve2.resolve _2 };
    absurd
  }
  BB5 {
    assume { Resolve1.resolve self__1 };
    assume { Resolve2.resolve _2 };
    _0 <- Type.Core_Option_Option_None;
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
