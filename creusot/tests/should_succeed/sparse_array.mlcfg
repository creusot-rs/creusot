
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module SparseArray_Sparse_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_sparse 't =
    | C_Sparse usize usize (Alloc_Vec_Vec_Type.t_vec 't (Alloc_Alloc_Global_Type.t_global)) (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  let function sparse_size (self : t_sparse 't) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sparse a _ _ _ _ -> a
      end
  let function sparse_idx (self : t_sparse 't) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sparse _ _ _ a _ -> a
      end
  let function sparse_n (self : t_sparse 't) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sparse _ a _ _ _ -> a
      end
  let function sparse_back (self : t_sparse 't) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sparse _ _ _ _ a -> a
      end
  let function sparse_values (self : t_sparse 't) : Alloc_Vec_Vec_Type.t_vec 't (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sparse _ _ a _ _ -> a
      end
end
module CreusotContracts_Std1_Vec_Impl0_Model_Stub
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { Seq.length result <= UInt64.to_int (18446744073709551615 : usize) }
    
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module SparseArray_Impl1_IsElt_Stub
  type t
  use prelude.Borrow
  use mach.int.Int
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  val ghost predicate is_elt (self : SparseArray_Sparse_Type.t_sparse t) (i : int)
end
module SparseArray_Impl1_IsElt_Interface
  type t
  use prelude.Borrow
  use mach.int.Int
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  val ghost predicate is_elt (self : SparseArray_Sparse_Type.t_sparse t) (i : int)
end
module SparseArray_Impl1_IsElt
  type t
  use prelude.Borrow
  use mach.int.Int
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  use mach.int.UInt64
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  let rec ghost predicate is_elt [#"../sparse_array.rs" 52 4 52 36] (self : SparseArray_Sparse_Type.t_sparse t) (i : int)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../sparse_array.rs" 53 20 55 66] 0 <= i && i < UInt64.to_int (SparseArray_Sparse_Type.sparse_size self) && (let a' = let a' = Model0.model (SparseArray_Sparse_Type.sparse_idx self) in Seq.get a' i in UInt64.to_int a') < UInt64.to_int (SparseArray_Sparse_Type.sparse_n self) && (let a = let a' = let a' = Model0.model (SparseArray_Sparse_Type.sparse_back self) in let b' = let a' = let a' = Model0.model (SparseArray_Sparse_Type.sparse_idx self) in Seq.get a' i in UInt64.to_int a' in Seq.get a' b' in UInt64.to_int a' in pure {a = i})
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module SparseArray_Impl0_Model_Stub
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with type t = t
  val ghost function model (self : SparseArray_Sparse_Type.t_sparse t) : Seq.seq (Core_Option_Option_Type.t_option t)
end
module SparseArray_Impl0_Model_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with type t = t
  val ghost function model (self : SparseArray_Sparse_Type.t_sparse t) : Seq.seq (Core_Option_Option_Type.t_option t)
    ensures { [#"../sparse_array.rs" 34 14 34 42] Seq.length result = UInt64.to_int (SparseArray_Sparse_Type.sparse_size self) }
    ensures { [#"../sparse_array.rs" 35 4 37 6] forall i : int . Seq.get result i = (if IsElt0.is_elt self i then
      Core_Option_Option_Type.C_Some (Seq.get (Model0.model (SparseArray_Sparse_Type.sparse_values self)) i)
    else
      Core_Option_Option_Type.C_None
    ) }
    
end
module SparseArray_Impl0_Model
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with type t = t
  val ghost function model [#"../sparse_array.rs" 38 4 38 35] (self : SparseArray_Sparse_Type.t_sparse t) : Seq.seq (Core_Option_Option_Type.t_option t)
    
  axiom model_spec : forall self : SparseArray_Sparse_Type.t_sparse t . ([#"../sparse_array.rs" 35 4 37 6] forall i : int . Seq.get (model self) i = (if IsElt0.is_elt self i then
    Core_Option_Option_Type.C_Some (Seq.get (Model0.model (SparseArray_Sparse_Type.sparse_values self)) i)
  else
    Core_Option_Option_Type.C_None
  )) && ([#"../sparse_array.rs" 34 14 34 42] Seq.length (model self) = UInt64.to_int (SparseArray_Sparse_Type.sparse_size self))
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model self
end
module SparseArray_Impl0_ModelTy_Type
  type t
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  type modelTy  =
    Seq.seq (Core_Option_Option_Type.t_option t)
end
module SparseArray_Impl1_SparseInv_Stub
  type t
  use prelude.Borrow
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  val ghost predicate sparse_inv (self : SparseArray_Sparse_Type.t_sparse t)
end
module SparseArray_Impl1_SparseInv_Interface
  type t
  use prelude.Borrow
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  val ghost predicate sparse_inv (self : SparseArray_Sparse_Type.t_sparse t)
end
module SparseArray_Impl1_SparseInv
  type t
  use prelude.Borrow
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use prelude.UIntSize
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone SparseArray_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model2 with type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model1 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model0 with type t = SparseArray_Sparse_Type.t_sparse t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost predicate sparse_inv [#"../sparse_array.rs" 62 4 62 32] (self : SparseArray_Sparse_Type.t_sparse t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../sparse_array.rs" 63 8 74 9] UInt64.to_int (SparseArray_Sparse_Type.sparse_n self) <= UInt64.to_int (SparseArray_Sparse_Type.sparse_size self) && (let a = let a' = Model0.model self in Seq.length a' in pure {a = UInt64.to_int (SparseArray_Sparse_Type.sparse_size self)}) && (let a = let a' = Model1.model (SparseArray_Sparse_Type.sparse_values self) in Seq.length a' in pure {a = UInt64.to_int (SparseArray_Sparse_Type.sparse_size self)}) && (let a = let a' = Model2.model (SparseArray_Sparse_Type.sparse_idx self) in Seq.length a' in pure {a = UInt64.to_int (SparseArray_Sparse_Type.sparse_size self)}) && (let a = let a' = Model2.model (SparseArray_Sparse_Type.sparse_back self) in Seq.length a' in pure {a = UInt64.to_int (SparseArray_Sparse_Type.sparse_size self)}) && pure {forall i : int . 0 <= i /\ i < UInt64.to_int (SparseArray_Sparse_Type.sparse_n self) -> match (Seq.get (Model2.model (SparseArray_Sparse_Type.sparse_back self)) i) with
      | j -> 0 <= UInt64.to_int j /\ UInt64.to_int j < UInt64.to_int (SparseArray_Sparse_Type.sparse_size self) /\ UInt64.to_int (Seq.get (Model2.model (SparseArray_Sparse_Type.sparse_idx self)) (UInt64.to_int j)) = i
      end}
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    pure {Seq.get seq (UInt64.to_int self) = out}
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module SparseArray_Impl1_Get_Interface
  type t
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use prelude.UIntSize
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone SparseArray_Impl0_ModelTy_Type as ModelTy0 with type t = t
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model0 with type t = SparseArray_Sparse_Type.t_sparse t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone SparseArray_Impl1_SparseInv_Stub as SparseInv0 with type t = t
  val get [@cfg:stackify] (self : SparseArray_Sparse_Type.t_sparse t) (i : usize) : Core_Option_Option_Type.t_option t
    requires {[#"../sparse_array.rs" 79 15 79 32] SparseInv0.sparse_inv self}
    requires {[#"../sparse_array.rs" 80 15 80 33] UInt64.to_int i < Seq.length (Model0.model self)}
    ensures { [#"../sparse_array.rs" 81 14 84 5] match (result) with
      | Core_Option_Option_Type.C_None -> Seq.get (Model0.model self) (UInt64.to_int i) = Core_Option_Option_Type.C_None
      | Core_Option_Option_Type.C_Some x -> Seq.get (Model0.model self) (UInt64.to_int i) = Core_Option_Option_Type.C_Some x
      end }
    ensures { [#"../sparse_array.rs" 85 14 88 5] match (Seq.get (Model0.model self) (UInt64.to_int i)) with
      | Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None
      | Core_Option_Option_Type.C_Some _ -> true
      end }
    
end
module SparseArray_Impl1_Get
  type t
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt as IsElt0 with type t = t, val Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone SparseArray_Impl0_Model as Model3 with type t = t, val IsElt0.is_elt = IsElt0.is_elt,
    val Model0.model = Model1.model, axiom .
  clone SparseArray_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = SparseArray_Sparse_Type.t_sparse t,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model3.model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with type t = t, val Model0.model = Model0.model,
    val Model1.model = Model1.model, val Model2.model = Model2.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy2 with type t = t
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = usize
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = t, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model1.model,
    val InBounds0.in_bounds = InBounds1.in_bounds, val HasValue0.has_value = HasValue1.has_value,
    type Output0.output = Output1.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = SparseArray_Sparse_Type.t_sparse t
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = usize, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model2.model,
    val InBounds0.in_bounds = InBounds0.in_bounds, val HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  let rec cfg get [@cfg:stackify] [#"../sparse_array.rs" 89 4 89 45] (self : SparseArray_Sparse_Type.t_sparse t) (i : usize) : Core_Option_Option_Type.t_option t
    requires {[#"../sparse_array.rs" 79 15 79 32] SparseInv0.sparse_inv self}
    requires {[#"../sparse_array.rs" 80 15 80 33] UInt64.to_int i < Seq.length (Model0.model self)}
    ensures { [#"../sparse_array.rs" 81 14 84 5] match (result) with
      | Core_Option_Option_Type.C_None -> Seq.get (Model0.model self) (UInt64.to_int i) = Core_Option_Option_Type.C_None
      | Core_Option_Option_Type.C_Some x -> Seq.get (Model0.model self) (UInt64.to_int i) = Core_Option_Option_Type.C_Some x
      end }
    ensures { [#"../sparse_array.rs" 85 14 88 5] match (Seq.get (Model0.model self) (UInt64.to_int i)) with
      | Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None
      | Core_Option_Option_Type.C_Some _ -> true
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var self_1 : SparseArray_Sparse_Type.t_sparse t;
  var i_2 : usize;
  var index_7 : usize;
  var _8 : usize;
  var _9 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _10 : usize;
  var _11 : bool;
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _19 : usize;
  var _20 : usize;
  var _21 : t;
  var _22 : t;
  var _23 : t;
  var _24 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _25 : usize;
  {
    self_1 <- self;
    i_2 <- i;
    goto BB0
  }
  BB0 {
    _9 <- SparseArray_Sparse_Type.sparse_idx self_1;
    _10 <- i_2;
    _8 <- ([#"../sparse_array.rs" 90 20 90 31] Index0.index _9 _10);
    goto BB1
  }
  BB1 {
    index_7 <- _8;
    _13 <- index_7;
    _14 <- SparseArray_Sparse_Type.sparse_n self_1;
    _12 <- ([#"../sparse_array.rs" 91 11 91 25] _13 < _14);
    switch (_12)
      | False -> goto BB2
      | True -> goto BB3
      end
  }
  BB2 {
    _11 <- false;
    goto BB4
  }
  BB3 {
    _18 <- SparseArray_Sparse_Type.sparse_back self_1;
    _19 <- index_7;
    _17 <- ([#"../sparse_array.rs" 91 29 91 45] Index0.index _18 _19);
    goto BB5
  }
  BB4 {
    switch (_11)
      | False -> goto BB8
      | True -> goto BB6
      end
  }
  BB5 {
    _16 <- _17;
    _20 <- i_2;
    _15 <- ([#"../sparse_array.rs" 91 29 91 50] _16 = _20);
    _11 <- _15;
    _15 <- any bool;
    goto BB4
  }
  BB6 {
    _24 <- SparseArray_Sparse_Type.sparse_values self_1;
    assume { Resolve0.resolve self_1 };
    _25 <- i_2;
    _23 <- ([#"../sparse_array.rs" 92 18 92 32] Index1.index _24 _25);
    goto BB7
  }
  BB7 {
    _22 <- _23;
    assume { Resolve1.resolve _23 };
    _21 <- _22;
    assume { Resolve1.resolve _22 };
    _0 <- Core_Option_Option_Type.C_Some _21;
    goto BB9
  }
  BB8 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module SparseArray_Impl1_LemmaPermutation_Stub
  type t
  use mach.int.Int
  use mach.int.UInt64
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with type t = t
  clone SparseArray_Impl1_SparseInv_Stub as SparseInv0 with type t = t
  val ghost function lemma_permutation (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : ()
end
module SparseArray_Impl1_LemmaPermutation_Interface
  type t
  use mach.int.Int
  use mach.int.UInt64
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with type t = t
  clone SparseArray_Impl1_SparseInv_Stub as SparseInv0 with type t = t
  val ghost function lemma_permutation (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : ()
    requires {[#"../sparse_array.rs" 101 15 101 32] SparseInv0.sparse_inv self}
    requires {[#"../sparse_array.rs" 102 15 102 34] SparseArray_Sparse_Type.sparse_n self = SparseArray_Sparse_Type.sparse_size self}
    requires {[#"../sparse_array.rs" 103 15 103 41] 0 <= i /\ i < UInt64.to_int (SparseArray_Sparse_Type.sparse_size self)}
    ensures { [#"../sparse_array.rs" 104 14 104 28] IsElt0.is_elt self i }
    
end
module SparseArray_Impl1_LemmaPermutation
  type t
  use mach.int.Int
  use mach.int.UInt64
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with type t = t
  clone SparseArray_Impl1_SparseInv_Stub as SparseInv0 with type t = t
  let rec ghost function lemma_permutation [#"../sparse_array.rs" 105 4 105 38] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../sparse_array.rs" 100 4 100 12] ()
  axiom lemma_permutation_spec : forall self : SparseArray_Sparse_Type.t_sparse t, i : int . ([#"../sparse_array.rs" 101 15 101 32] SparseInv0.sparse_inv self) -> ([#"../sparse_array.rs" 102 15 102 34] SparseArray_Sparse_Type.sparse_n self = SparseArray_Sparse_Type.sparse_size self) -> ([#"../sparse_array.rs" 103 15 103 41] 0 <= i /\ i < UInt64.to_int (SparseArray_Sparse_Type.sparse_size self)) -> ([#"../sparse_array.rs" 104 14 104 28] IsElt0.is_elt self i)
end
module SparseArray_Impl1_LemmaPermutation_Impl
  type t
  use mach.int.Int
  use mach.int.UInt64
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt as IsElt0 with type t = t, val Model0.model = Model2.model
  clone SparseArray_Impl0_Model as Model3 with type t = t, val IsElt0.is_elt = IsElt0.is_elt,
    val Model0.model = Model1.model, axiom .
  clone SparseArray_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = SparseArray_Sparse_Type.t_sparse t,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model3.model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with type t = t, val Model0.model = Model0.model,
    val Model1.model = Model1.model, val Model2.model = Model2.model
  let rec ghost function lemma_permutation (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : ()
    requires {[#"../sparse_array.rs" 101 15 101 32] SparseInv0.sparse_inv self}
    requires {[#"../sparse_array.rs" 102 15 102 34] SparseArray_Sparse_Type.sparse_n self = SparseArray_Sparse_Type.sparse_size self}
    requires {[#"../sparse_array.rs" 103 15 103 41] 0 <= i /\ i < UInt64.to_int (SparseArray_Sparse_Type.sparse_size self)}
    ensures { [#"../sparse_array.rs" 104 14 104 28] IsElt0.is_elt self i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../sparse_array.rs" 100 4 100 12] ()
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Stub as ResolveElswhere0 with type self = i,
    type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
    type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    pure {forall i : int . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i}
end
module SparseArray_Impl1_Set_Interface
  type t
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model1 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone SparseArray_Impl0_Model_Stub as Model0 with type t = t, val IsElt0.is_elt = IsElt0.is_elt,
    val Model0.model = Model1.model, axiom .
  clone SparseArray_Impl1_SparseInv_Stub as SparseInv0 with type t = t
  val set [@cfg:stackify] (self : borrowed (SparseArray_Sparse_Type.t_sparse t)) (i : usize) (v : t) : ()
    requires {[#"../sparse_array.rs" 109 15 109 35] SparseInv0.sparse_inv ( * self)}
    requires {[#"../sparse_array.rs" 110 15 110 34] UInt64.to_int i < Seq.length (Model0.model ( * self))}
    ensures { [#"../sparse_array.rs" 111 14 111 34] SparseInv0.sparse_inv ( ^ self) }
    ensures { [#"../sparse_array.rs" 112 14 112 46] Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { [#"../sparse_array.rs" 113 4 113 69] forall j : int . j <> UInt64.to_int i -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures { [#"../sparse_array.rs" 114 14 114 37] Seq.get (Model0.model ( ^ self)) (UInt64.to_int i) = Core_Option_Option_Type.C_Some v }
    
end
module SparseArray_Impl1_Set
  type t
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt as IsElt0 with type t = t, val Model0.model = Model3.model
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone SparseArray_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone SparseArray_Impl0_Model as Model0 with type t = t, val IsElt0.is_elt = IsElt0.is_elt,
    val Model0.model = Model2.model, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = SparseArray_Sparse_Type.t_sparse t,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model0.model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with type t = t, val Model0.model = Model1.model,
    val Model1.model = Model2.model, val Model2.model = Model3.model
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy2 with type t = usize
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = t
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = usize
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = usize, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model3.model,
    val InBounds0.in_bounds = InBounds1.in_bounds, val HasValue0.has_value = HasValue1.has_value,
    val ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere, type Output0.output = Output1.output
  clone SparseArray_Impl1_LemmaPermutation as LemmaPermutation0 with type t = t,
    val SparseInv0.sparse_inv = SparseInv0.sparse_inv, val IsElt0.is_elt = IsElt0.is_elt, axiom .
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = usize, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model3.model,
    val InBounds0.in_bounds = InBounds1.in_bounds, val HasValue0.has_value = HasValue1.has_value,
    type Output0.output = Output1.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = t
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = t, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model2.model,
    val InBounds0.in_bounds = InBounds0.in_bounds, val HasValue0.has_value = HasValue0.has_value,
    val ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  let rec cfg set [@cfg:stackify] [#"../sparse_array.rs" 115 4 115 41] (self : borrowed (SparseArray_Sparse_Type.t_sparse t)) (i : usize) (v : t) : ()
    requires {[#"../sparse_array.rs" 109 15 109 35] SparseInv0.sparse_inv ( * self)}
    requires {[#"../sparse_array.rs" 110 15 110 34] UInt64.to_int i < Seq.length (Model0.model ( * self))}
    ensures { [#"../sparse_array.rs" 111 14 111 34] SparseInv0.sparse_inv ( ^ self) }
    ensures { [#"../sparse_array.rs" 112 14 112 46] Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { [#"../sparse_array.rs" 113 4 113 69] forall j : int . j <> UInt64.to_int i -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures { [#"../sparse_array.rs" 114 14 114 37] Seq.get (Model0.model ( ^ self)) (UInt64.to_int i) = Core_Option_Option_Type.C_Some v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (SparseArray_Sparse_Type.t_sparse t);
  var i_2 : usize;
  var v_3 : t;
  var _10 : t;
  var _11 : borrowed t;
  var _12 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _13 : usize;
  var index_14 : usize;
  var _15 : usize;
  var _16 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _17 : usize;
  var _18 : bool;
  var _19 : bool;
  var _20 : bool;
  var _21 : usize;
  var _22 : usize;
  var _23 : bool;
  var _24 : usize;
  var _25 : usize;
  var _26 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _27 : usize;
  var _28 : usize;
  var _29 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost ();
  var _32 : ();
  var _33 : ();
  var _35 : usize;
  var _36 : borrowed usize;
  var _37 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _38 : usize;
  var _39 : usize;
  var _40 : borrowed usize;
  var _41 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _42 : usize;
  {
    self_1 <- self;
    i_2 <- i;
    v_3 <- v;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _10 };
    _10 <- v_3;
    v_3 <- any t;
    _12 <- borrow_mut (SparseArray_Sparse_Type.sparse_values ( * self_1));
    self_1 <- { self_1 with current = (let SparseArray_Sparse_Type.C_Sparse a b c d e =  * self_1 in SparseArray_Sparse_Type.C_Sparse a b ( ^ _12) d e) };
    _13 <- i_2;
    _11 <- ([#"../sparse_array.rs" 116 8 116 22] IndexMut0.index_mut _12 _13);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve ( * _11) };
    _11 <- { _11 with current = _10 };
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve _11 };
    goto BB4
  }
  BB4 {
    _16 <- SparseArray_Sparse_Type.sparse_idx ( * self_1);
    _17 <- i_2;
    _15 <- ([#"../sparse_array.rs" 117 20 117 31] Index0.index _16 _17);
    goto BB5
  }
  BB5 {
    index_14 <- _15;
    _21 <- index_14;
    _22 <- SparseArray_Sparse_Type.sparse_n ( * self_1);
    _20 <- ([#"../sparse_array.rs" 118 13 118 27] _21 < _22);
    switch (_20)
      | False -> goto BB6
      | True -> goto BB7
      end
  }
  BB6 {
    _19 <- false;
    goto BB8
  }
  BB7 {
    _26 <- SparseArray_Sparse_Type.sparse_back ( * self_1);
    _27 <- index_14;
    _25 <- ([#"../sparse_array.rs" 118 31 118 47] Index0.index _26 _27);
    goto BB9
  }
  BB8 {
    _18 <- not _19;
    switch (_18)
      | False -> goto BB14
      | True -> goto BB10
      end
  }
  BB9 {
    _24 <- _25;
    _28 <- i_2;
    _23 <- ([#"../sparse_array.rs" 118 31 118 52] _24 = _28);
    _19 <- _23;
    _23 <- any bool;
    goto BB8
  }
  BB10 {
    _32 <- ();
    _29 <- ([#"../sparse_array.rs" 120 12 120 43] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost ());
    goto BB11
  }
  BB11 {
    assert { [#"../sparse_array.rs" 121 26 121 50] UInt64.to_int (SparseArray_Sparse_Type.sparse_n ( * self_1)) < UInt64.to_int (SparseArray_Sparse_Type.sparse_size ( * self_1)) };
    _33 <- ();
    _35 <- SparseArray_Sparse_Type.sparse_n ( * self_1);
    _37 <- borrow_mut (SparseArray_Sparse_Type.sparse_idx ( * self_1));
    self_1 <- { self_1 with current = (let SparseArray_Sparse_Type.C_Sparse a b c d e =  * self_1 in SparseArray_Sparse_Type.C_Sparse a b c ( ^ _37) e) };
    _38 <- i_2;
    _36 <- ([#"../sparse_array.rs" 123 12 123 23] IndexMut1.index_mut _37 _38);
    goto BB12
  }
  BB12 {
    _36 <- { _36 with current = _35 };
    _35 <- any usize;
    assume { Resolve2.resolve _36 };
    _39 <- i_2;
    _41 <- borrow_mut (SparseArray_Sparse_Type.sparse_back ( * self_1));
    self_1 <- { self_1 with current = (let SparseArray_Sparse_Type.C_Sparse a b c d e =  * self_1 in SparseArray_Sparse_Type.C_Sparse a b c d ( ^ _41)) };
    _42 <- SparseArray_Sparse_Type.sparse_n ( * self_1);
    _40 <- ([#"../sparse_array.rs" 124 12 124 29] IndexMut1.index_mut _41 _42);
    goto BB13
  }
  BB13 {
    _40 <- { _40 with current = _39 };
    _39 <- any usize;
    assume { Resolve2.resolve _40 };
    self_1 <- { self_1 with current = (let SparseArray_Sparse_Type.C_Sparse a b c d e =  * self_1 in SparseArray_Sparse_Type.C_Sparse a ([#"../sparse_array.rs" 125 12 125 23] SparseArray_Sparse_Type.sparse_n ( * self_1) + (1 : usize)) c d e) };
    assume { Resolve3.resolve self_1 };
    _0 <- ();
    goto BB15
  }
  BB14 {
    assume { Resolve3.resolve self_1 };
    _0 <- ();
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    return _0
  }
  
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module Alloc_Vec_FromElem
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module SparseArray_Create_Interface
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model1 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone SparseArray_Impl0_Model_Stub as Model0 with type t = t, val IsElt0.is_elt = IsElt0.is_elt,
    val Model0.model = Model1.model, axiom .
  clone SparseArray_Impl1_SparseInv_Stub as SparseInv0 with type t = t
  val create [@cfg:stackify] (sz : usize) (dummy : t) : SparseArray_Sparse_Type.t_sparse t
    ensures { [#"../sparse_array.rs" 135 10 135 29] SparseInv0.sparse_inv result }
    ensures { [#"../sparse_array.rs" 136 10 136 27] SparseArray_Sparse_Type.sparse_size result = sz }
    ensures { [#"../sparse_array.rs" 137 0 137 47] forall i : int . Seq.get (Model0.model result) i = Core_Option_Option_Type.C_None }
    
end
module SparseArray_Create
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt as IsElt0 with type t = t, val Model0.model = Model3.model
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone SparseArray_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone SparseArray_Impl0_Model as Model0 with type t = t, val IsElt0.is_elt = IsElt0.is_elt,
    val Model0.model = Model2.model, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = SparseArray_Sparse_Type.t_sparse t,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model0.model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with type t = t, val Model0.model = Model1.model,
    val Model1.model = Model2.model, val Model2.model = Model3.model
  clone Alloc_Vec_FromElem_Interface as FromElem1 with type t = usize, val Model0.model = Model3.model
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = t, val Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  let rec cfg create [@cfg:stackify] [#"../sparse_array.rs" 138 0 138 64] (sz : usize) (dummy : t) : SparseArray_Sparse_Type.t_sparse t
    ensures { [#"../sparse_array.rs" 135 10 135 29] SparseInv0.sparse_inv result }
    ensures { [#"../sparse_array.rs" 136 10 136 27] SparseArray_Sparse_Type.sparse_size result = sz }
    ensures { [#"../sparse_array.rs" 137 0 137 47] forall i : int . Seq.get (Model0.model result) i = Core_Option_Option_Type.C_None }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : SparseArray_Sparse_Type.t_sparse t;
  var sz_1 : usize;
  var dummy_2 : t;
  var _6 : usize;
  var _7 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _8 : t;
  var _9 : usize;
  var _10 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _11 : usize;
  var _12 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _13 : usize;
  {
    sz_1 <- sz;
    dummy_2 <- dummy;
    goto BB0
  }
  BB0 {
    _6 <- sz_1;
    assume { Resolve0.resolve _8 };
    _8 <- dummy_2;
    assume { Resolve0.resolve dummy_2 };
    _9 <- sz_1;
    _7 <- ([#"../sparse_array.rs" 143 16 143 41] FromElem0.from_elem _8 _9);
    goto BB1
  }
  BB1 {
    _11 <- sz_1;
    _10 <- ([#"../sparse_array.rs" 145 13 145 34] FromElem1.from_elem (0 : usize) _11);
    goto BB2
  }
  BB2 {
    _13 <- sz_1;
    _12 <- ([#"../sparse_array.rs" 147 14 147 35] FromElem1.from_elem (0 : usize) _13);
    goto BB3
  }
  BB3 {
    _0 <- SparseArray_Sparse_Type.C_Sparse _6 (0 : usize) _7 _10 _12;
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module CreusotContracts_Logic_Int_Impl18_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module CreusotContracts_Logic_Int_Impl18_Model_Stub
  use mach.int.Int
  use mach.int.Int32
  val ghost function model (self : int32) : int
end
module CreusotContracts_Logic_Int_Impl18_Model_Interface
  use mach.int.Int
  use mach.int.Int32
  val ghost function model (self : int32) : int
end
module CreusotContracts_Logic_Int_Impl18_Model
  use mach.int.Int
  use mach.int.Int32
  let rec ghost function model (self : int32) : int = [@vc:do_not_keep_trace] [@vc:sp]
    Int32.to_int self
end
module SparseArray_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module SparseArray_F
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = usize, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Int_Impl18_Model as Model4
  clone CreusotContracts_Logic_Int_Impl18_ModelTy_Type as ModelTy1
  clone SparseArray_Impl0_ModelTy_Type as ModelTy0 with type t = int32
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = int32, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone SparseArray_Impl1_IsElt as IsElt0 with type t = int32, val Model0.model = Model5.model
  clone SparseArray_Impl0_Model as Model1 with type t = int32, val IsElt0.is_elt = IsElt0.is_elt,
    val Model0.model = Model2.model, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = SparseArray_Sparse_Type.t_sparse int32,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with type t = int32, val Model0.model = Model3.model,
    val Model1.model = Model2.model, val Model2.model = Model5.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = int32,
    type ModelTy0.modelTy = ModelTy1.modelTy, val Model0.model = Model4.model
  clone SparseArray_Impl1_Set_Interface as Set0 with type t = int32, val SparseInv0.sparse_inv = SparseInv0.sparse_inv,
    val Model0.model = Model1.model, val IsElt0.is_elt = IsElt0.is_elt, val Model1.model = Model2.model
  clone SparseArray_Impl1_Get_Interface as Get0 with type t = int32, val SparseInv0.sparse_inv = SparseInv0.sparse_inv,
    val Model0.model = Model3.model
  clone SparseArray_Create_Interface as Create0 with type t = int32, val SparseInv0.sparse_inv = SparseInv0.sparse_inv,
    val Model0.model = Model1.model, val IsElt0.is_elt = IsElt0.is_elt, val Model1.model = Model2.model
  let rec cfg f [@cfg:stackify] [#"../sparse_array.rs" 153 0 153 10] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var default_1 : int32;
  var a_2 : SparseArray_Sparse_Type.t_sparse int32;
  var _3 : int32;
  var b_4 : SparseArray_Sparse_Type.t_sparse int32;
  var _5 : int32;
  var x_6 : Core_Option_Option_Type.t_option int32;
  var _7 : SparseArray_Sparse_Type.t_sparse int32;
  var y_8 : Core_Option_Option_Type.t_option int32;
  var _9 : SparseArray_Sparse_Type.t_sparse int32;
  var _10 : ();
  var _12 : ();
  var _13 : borrowed (SparseArray_Sparse_Type.t_sparse int32);
  var _14 : ();
  var _15 : borrowed (SparseArray_Sparse_Type.t_sparse int32);
  var _16 : Core_Option_Option_Type.t_option int32;
  var _17 : SparseArray_Sparse_Type.t_sparse int32;
  var _18 : Core_Option_Option_Type.t_option int32;
  var _19 : SparseArray_Sparse_Type.t_sparse int32;
  var _20 : ();
  var _22 : ();
  var _24 : Core_Option_Option_Type.t_option int32;
  var _25 : SparseArray_Sparse_Type.t_sparse int32;
  var _26 : Core_Option_Option_Type.t_option int32;
  var _27 : SparseArray_Sparse_Type.t_sparse int32;
  var _28 : ();
  var _30 : Core_Option_Option_Type.t_option int32;
  var _31 : SparseArray_Sparse_Type.t_sparse int32;
  var _32 : Core_Option_Option_Type.t_option int32;
  var _33 : SparseArray_Sparse_Type.t_sparse int32;
  var _34 : ();
  var _36 : Core_Option_Option_Type.t_option int32;
  var _37 : SparseArray_Sparse_Type.t_sparse int32;
  var _38 : Core_Option_Option_Type.t_option int32;
  var _39 : SparseArray_Sparse_Type.t_sparse int32;
  {
    goto BB0
  }
  BB0 {
    default_1 <- (0 : int32);
    _3 <- default_1;
    a_2 <- ([#"../sparse_array.rs" 155 16 155 35] Create0.create (10 : usize) _3);
    goto BB1
  }
  BB1 {
    _5 <- default_1;
    b_4 <- ([#"../sparse_array.rs" 156 16 156 35] Create0.create (20 : usize) _5);
    goto BB2
  }
  BB2 {
    _7 <- a_2;
    x_6 <- ([#"../sparse_array.rs" 157 16 157 24] Get0.get _7 (5 : usize));
    goto BB3
  }
  BB3 {
    _9 <- b_4;
    y_8 <- ([#"../sparse_array.rs" 158 16 158 24] Get0.get _9 (7 : usize));
    goto BB4
  }
  BB4 {
    assert { [#"../sparse_array.rs" 159 18 159 40] x_6 = Core_Option_Option_Type.C_None /\ y_8 = Core_Option_Option_Type.C_None };
    _10 <- ();
    _13 <- borrow_mut a_2;
    a_2 <-  ^ _13;
    _12 <- ([#"../sparse_array.rs" 161 4 161 15] Set0.set _13 (5 : usize) (1 : int32));
    goto BB5
  }
  BB5 {
    _15 <- borrow_mut b_4;
    b_4 <-  ^ _15;
    _14 <- ([#"../sparse_array.rs" 162 4 162 15] Set0.set _15 (7 : usize) (2 : int32));
    goto BB6
  }
  BB6 {
    _17 <- a_2;
    _16 <- ([#"../sparse_array.rs" 163 8 163 16] Get0.get _17 (5 : usize));
    goto BB7
  }
  BB7 {
    x_6 <- _16;
    _16 <- any Core_Option_Option_Type.t_option int32;
    _19 <- b_4;
    _18 <- ([#"../sparse_array.rs" 164 8 164 16] Get0.get _19 (7 : usize));
    goto BB8
  }
  BB8 {
    y_8 <- _18;
    _18 <- any Core_Option_Option_Type.t_option int32;
    assert { [#"../sparse_array.rs" 165 18 168 5] match (x_6) with
      | Core_Option_Option_Type.C_None -> false
      | Core_Option_Option_Type.C_Some z -> Model0.model z = 1
      end };
    _20 <- ();
    assert { [#"../sparse_array.rs" 169 18 172 5] match (y_8) with
      | Core_Option_Option_Type.C_None -> false
      | Core_Option_Option_Type.C_Some z -> Model0.model z = 2
      end };
    _22 <- ();
    _25 <- a_2;
    _24 <- ([#"../sparse_array.rs" 174 8 174 16] Get0.get _25 (7 : usize));
    goto BB9
  }
  BB9 {
    x_6 <- _24;
    _24 <- any Core_Option_Option_Type.t_option int32;
    _27 <- b_4;
    _26 <- ([#"../sparse_array.rs" 175 8 175 16] Get0.get _27 (5 : usize));
    goto BB10
  }
  BB10 {
    y_8 <- _26;
    _26 <- any Core_Option_Option_Type.t_option int32;
    assert { [#"../sparse_array.rs" 176 18 176 40] x_6 = Core_Option_Option_Type.C_None /\ y_8 = Core_Option_Option_Type.C_None };
    _28 <- ();
    _31 <- a_2;
    _30 <- ([#"../sparse_array.rs" 178 8 178 16] Get0.get _31 (0 : usize));
    goto BB11
  }
  BB11 {
    x_6 <- _30;
    _30 <- any Core_Option_Option_Type.t_option int32;
    _33 <- b_4;
    _32 <- ([#"../sparse_array.rs" 179 8 179 16] Get0.get _33 (0 : usize));
    goto BB12
  }
  BB12 {
    y_8 <- _32;
    _32 <- any Core_Option_Option_Type.t_option int32;
    assert { [#"../sparse_array.rs" 180 18 180 40] x_6 = Core_Option_Option_Type.C_None /\ y_8 = Core_Option_Option_Type.C_None };
    _34 <- ();
    _37 <- a_2;
    _36 <- ([#"../sparse_array.rs" 182 8 182 16] Get0.get _37 (9 : usize));
    goto BB13
  }
  BB13 {
    x_6 <- _36;
    _36 <- any Core_Option_Option_Type.t_option int32;
    _39 <- b_4;
    _38 <- ([#"../sparse_array.rs" 183 8 183 16] Get0.get _39 (9 : usize));
    goto BB14
  }
  BB14 {
    y_8 <- _38;
    _38 <- any Core_Option_Option_Type.t_option int32;
    assert { [#"../sparse_array.rs" 184 18 184 40] x_6 = Core_Option_Option_Type.C_None /\ y_8 = Core_Option_Option_Type.C_None };
    _0 <- ();
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    return _0
  }
  
end
module SparseArray_Impl0
  type t
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt as IsElt0 with type t = t, val Model0.model = Model3.model
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone SparseArray_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone SparseArray_Impl0_Model as Model0 with type t = t, val IsElt0.is_elt = IsElt0.is_elt,
    val Model0.model = Model2.model, axiom .
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = SparseArray_Sparse_Type.t_sparse t,
    val model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = SparseArray_Sparse_Type.t_sparse t,
    type modelTy = ModelTy0.modelTy
end
