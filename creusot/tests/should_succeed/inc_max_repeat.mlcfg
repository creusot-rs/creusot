
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module IncMaxRepeat_TakeMax_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  val take_max [@cfg:stackify] [#"../inc_max_repeat.rs" 6 0 6 64] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max_repeat.rs" 4 0 5 56] if  * ma >=  * mb then
       * mb =  ^ mb /\ result = ma
    else
       * ma =  ^ ma /\ result = mb
     }
    
end
module IncMaxRepeat_TakeMax
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  let rec cfg take_max [@cfg:stackify] [#"../inc_max_repeat.rs" 6 0 6 64] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max_repeat.rs" 4 0 5 56] if  * ma >=  * mb then
       * mb =  ^ mb /\ result = ma
    else
       * ma =  ^ ma /\ result = mb
     }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var ma_1 : borrowed uint32;
  var mb_2 : borrowed uint32;
  var _3 : borrowed uint32;
  var _5 : borrowed uint32;
  var _6 : bool;
  var _7 : uint32;
  var _8 : uint32;
  var _9 : borrowed uint32;
  {
    ma_1 <- ma;
    mb_2 <- mb;
    goto BB0
  }
  BB0 {
    _7 <-  * ma_1;
    _8 <-  * mb_2;
    _6 <- ([#"../inc_max_repeat.rs" 7 7 7 17] _7 >= _8);
    switch (_6)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve mb_2 };
    _9 <- borrow_mut ( * ma_1);
    ma_1 <- { ma_1 with current = ( ^ _9) };
    assume { Resolve0.resolve ma_1 };
    _5 <- borrow_mut ( * _9);
    _9 <- { _9 with current = ( ^ _5) };
    assume { Resolve0.resolve _9 };
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve ma_1 };
    _5 <- borrow_mut ( * mb_2);
    mb_2 <- { mb_2 with current = ( ^ _5) };
    assume { Resolve0.resolve mb_2 };
    goto BB3
  }
  BB3 {
    _3 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _3) };
    assume { Resolve0.resolve _5 };
    _0 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _0) };
    assume { Resolve0.resolve _3 };
    return _0
  }
  
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module CreusotContracts_Std1_Ops_Impl3_Invariant_Stub
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx)
end
module CreusotContracts_Std1_Ops_Impl3_Invariant_Interface
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx)
end
module CreusotContracts_Std1_Ops_Impl3_Invariant
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx) =
    true
  val invariant' (self : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = invariant' self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module Core_Iter_Range_Impl3_Item_Type
  type a
  type item  =
    a
end
module Core_Iter_Range_Impl3_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Range_Impl3_Item_Type as Item1 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Iter_Range_Impl3_Next
  type a
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Range_Impl3_Item_Type as Item1 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Interface as Invariant0 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
   =
    Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) - DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : () =
    ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
   =
    ()
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Logic_Int_Impl12_DeepModel_Stub
  use mach.int.Int
  use mach.int.UInt32
  function deep_model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl12_DeepModel_Interface
  use mach.int.Int
  use mach.int.UInt32
  function deep_model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl12_DeepModel
  use mach.int.Int
  use mach.int.UInt32
  function deep_model (self : uint32) : int =
    UInt32.to_int self
  val deep_model (self : uint32) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) =
    Resolve0.resolve self /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start ( * self)) >= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module IncMaxRepeat_IncMaxRepeat_Interface
  use mach.int.Int
  use mach.int.UInt32
  val inc_max_repeat [@cfg:stackify] [#"../inc_max_repeat.rs" 15 0 15 53] (a : uint32) (b : uint32) (n : uint32) : ()
    requires {[#"../inc_max_repeat.rs" 14 11 14 70] a <= (1000000 : uint32) /\ b <= (1000000 : uint32) /\ n <= (1000000 : uint32)}
    
end
module IncMaxRepeat_IncMaxRepeat
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use prelude.IntSize
  clone CreusotContracts_Logic_Int_Impl12_DeepModel as DeepModel0
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range uint32
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed0 with
    type idx = uint32,
    predicate Resolve0.resolve = Resolve0.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Iter_Range_Impl3_Item_Type as Item0 with
    type a = uint32
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces0 with
    type idx = uint32,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Ops_Impl3_Invariant as Invariant0 with
    type idx = uint32
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans as ProducesTrans0 with
    type idx = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl as ProducesRefl0 with
    type idx = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = uint32
  clone IncMaxRepeat_TakeMax_Interface as TakeMax0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Iter_Range_Impl3_Next_Interface as Next0 with
    type a = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Ops_Range_Range_Type.t_range uint32
  let rec cfg inc_max_repeat [@cfg:stackify] [#"../inc_max_repeat.rs" 15 0 15 53] (a : uint32) (b : uint32) (n : uint32) : ()
    requires {[#"../inc_max_repeat.rs" 14 11 14 70] a <= (1000000 : uint32) /\ b <= (1000000 : uint32) /\ n <= (1000000 : uint32)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : uint32;
  var b_2 : uint32;
  var n_3 : uint32;
  var _5 : ();
  var iter_6 : Core_Ops_Range_Range_Type.t_range uint32;
  var _7 : Core_Ops_Range_Range_Type.t_range uint32;
  var _8 : uint32;
  var iter_old_9 : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range uint32);
  var _11 : ();
  var produced_12 : Ghost.ghost_ty (Seq.seq uint32);
  var _15 : ();
  var _20 : ();
  var _21 : Core_Option_Option_Type.t_option uint32;
  var _22 : borrowed (Core_Ops_Range_Range_Type.t_range uint32);
  var _23 : borrowed (Core_Ops_Range_Range_Type.t_range uint32);
  var _24 : isize;
  var i_25 : uint32;
  var _26 : Ghost.ghost_ty (Seq.seq uint32);
  var _28 : ();
  var mc_29 : borrowed uint32;
  var _30 : borrowed uint32;
  var _31 : borrowed uint32;
  var _32 : borrowed uint32;
  var _33 : borrowed uint32;
  var _34 : ();
  var _35 : ();
  var _36 : bool;
  var _37 : bool;
  var _38 : bool;
  var _39 : uint32;
  var _40 : uint32;
  var _41 : uint32;
  var _42 : uint32;
  var _43 : bool;
  var _44 : uint32;
  var _45 : uint32;
  var _46 : uint32;
  var _47 : uint32;
  var _48 : ();
  {
    a_1 <- a;
    b_2 <- b;
    n_3 <- n;
    goto BB0
  }
  BB0 {
    _8 <- n_3;
    _7 <- Core_Ops_Range_Range_Type.C_Range ([#"../inc_max_repeat.rs" 18 13 18 14] (0 : uint32)) _8;
    iter_6 <- ([#"../inc_max_repeat.rs" 16 4 16 97] IntoIter0.into_iter _7);
    goto BB1
  }
  BB1 {
    _11 <- ();
    iter_old_9 <- ([#"../inc_max_repeat.rs" 16 4 16 97] Ghost.new iter_6);
    goto BB2
  }
  BB2 {
    _15 <- ();
    produced_12 <- ([#"../inc_max_repeat.rs" 16 4 16 97] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant type_invariant { [#"../inc_max_repeat.rs" 16 4 16 97] Invariant0.invariant' iter_6 };
    invariant structural { [#"../inc_max_repeat.rs" 16 4 16 97] Produces0.produces (Ghost.inner iter_old_9) (Ghost.inner produced_12) iter_6 };
    invariant val_bound { [#"../inc_max_repeat.rs" 16 27 16 95] UInt32.to_int a_1 <= 1000000 + Seq.length (Ghost.inner produced_12) /\ UInt32.to_int b_2 <= 1000000 + Seq.length (Ghost.inner produced_12) };
    invariant diff_bound { [#"../inc_max_repeat.rs" 17 28 17 82] UInt32.to_int a_1 >= UInt32.to_int b_2 + Seq.length (Ghost.inner produced_12) \/ UInt32.to_int b_2 >= UInt32.to_int a_1 + Seq.length (Ghost.inner produced_12) };
    _23 <- borrow_mut iter_6;
    iter_6 <-  ^ _23;
    _22 <- borrow_mut ( * _23);
    _23 <- { _23 with current = ( ^ _22) };
    _21 <- ([#"../inc_max_repeat.rs" 16 4 16 97] Next0.next _22);
    goto BB5
  }
  BB5 {
    assume { Resolve0.resolve _23 };
    switch (_21)
      | Core_Option_Option_Type.C_None -> goto BB6
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB6 {
    _5 <- ();
    _39 <- a_1;
    _41 <- b_2;
    _42 <- n_3;
    _40 <- ([#"../inc_max_repeat.rs" 22 17 22 22] _41 + _42);
    _38 <- ([#"../inc_max_repeat.rs" 22 12 22 22] _39 >= _40);
    switch (_38)
      | False -> goto BB12
      | True -> goto BB11
      end
  }
  BB7 {
    absurd
  }
  BB8 {
    i_25 <- Core_Option_Option_Type.some_0 _21;
    _28 <- ();
    _26 <- ([#"../inc_max_repeat.rs" 16 4 16 97] Ghost.new (Seq.(++) (Ghost.inner produced_12) (Seq.singleton i_25)));
    goto BB9
  }
  BB9 {
    produced_12 <- _26;
    _26 <- any Ghost.ghost_ty (Seq.seq uint32);
    _31 <- borrow_mut a_1;
    a_1 <-  ^ _31;
    _30 <- borrow_mut ( * _31);
    _31 <- { _31 with current = ( ^ _30) };
    _33 <- borrow_mut b_2;
    b_2 <-  ^ _33;
    _32 <- borrow_mut ( * _33);
    _33 <- { _33 with current = ( ^ _32) };
    mc_29 <- ([#"../inc_max_repeat.rs" 19 17 19 41] TakeMax0.take_max _30 _32);
    goto BB10
  }
  BB10 {
    assume { Resolve1.resolve _31 };
    assume { Resolve1.resolve _33 };
    mc_29 <- { mc_29 with current = ([#"../inc_max_repeat.rs" 20 8 20 16]  * mc_29 + ([#"../inc_max_repeat.rs" 20 15 20 16] (1 : uint32))) };
    assume { Resolve1.resolve mc_29 };
    _20 <- ();
    goto BB4
  }
  BB11 {
    _37 <- ([#"../inc_max_repeat.rs" 22 12 22 36] true);
    goto BB13
  }
  BB12 {
    _44 <- b_2;
    _46 <- a_1;
    _47 <- n_3;
    _45 <- ([#"../inc_max_repeat.rs" 22 31 22 36] _46 + _47);
    _43 <- ([#"../inc_max_repeat.rs" 22 26 22 36] _44 >= _45);
    _37 <- _43;
    _43 <- any bool;
    goto BB13
  }
  BB13 {
    _36 <- not _37;
    switch (_36)
      | False -> goto BB15
      | True -> goto BB14
      end
  }
  BB14 {
    absurd
  }
  BB15 {
    _35 <- ();
    _0 <- ();
    return _0
  }
  
end
