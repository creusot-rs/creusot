
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module IncMaxRepeat_TakeMax_Interface
  use mach.int.UInt32
  use prelude.Borrow
  use mach.int.Int
  val take_max [@cfg:stackify] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max_repeat.rs" 4 0 5 56] if  * ma >=  * mb then
       * mb =  ^ mb /\ result = ma
    else
       * ma =  ^ ma /\ result = mb
     }
    
end
module IncMaxRepeat_TakeMax
  use mach.int.UInt32
  use prelude.Borrow
  use mach.int.Int
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  let rec cfg take_max [@cfg:stackify] [#"../inc_max_repeat.rs" 6 0 6 64] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max_repeat.rs" 4 0 5 56] if  * ma >=  * mb then
       * mb =  ^ mb /\ result = ma
    else
       * ma =  ^ ma /\ result = mb
     }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var ma_1 : borrowed uint32;
  var mb_2 : borrowed uint32;
  var _3 : borrowed uint32;
  var _5 : borrowed uint32;
  var _6 : bool;
  var _7 : uint32;
  var _8 : uint32;
  var _9 : borrowed uint32;
  {
    ma_1 <- ma;
    mb_2 <- mb;
    goto BB0
  }
  BB0 {
    _7 <-  * ma_1;
    _8 <-  * mb_2;
    _6 <- ([#"../inc_max_repeat.rs" 7 7 7 17] _7 >= _8);
    switch (_6)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve mb_2 };
    _9 <- borrow_mut ( * ma_1);
    ma_1 <- { ma_1 with current = ( ^ _9) };
    assume { Resolve0.resolve ma_1 };
    _5 <- borrow_mut ( * _9);
    _9 <- { _9 with current = ( ^ _5) };
    assume { Resolve0.resolve _9 };
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve ma_1 };
    _5 <- borrow_mut ( * mb_2);
    mb_2 <- { mb_2 with current = ( ^ _5) };
    assume { Resolve0.resolve mb_2 };
    goto BB3
  }
  BB3 {
    _3 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _3) };
    assume { Resolve0.resolve _5 };
    _0 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _0) };
    assume { Resolve0.resolve _3 };
    return _0
  }
  
end
module IncMaxRepeat_IncMaxRepeat_Interface
  use mach.int.UInt32
  use mach.int.Int
  val inc_max_repeat [@cfg:stackify] (a : uint32) (b : uint32) (n : uint32) : ()
    requires {[#"../inc_max_repeat.rs" 14 11 14 70] a <= (1000000 : uint32) /\ b <= (1000000 : uint32) /\ n <= (1000000 : uint32)}
    
end
module IncMaxRepeat_IncMaxRepeat
  use mach.int.UInt32
  use mach.int.Int
  use prelude.Borrow
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  clone IncMaxRepeat_TakeMax_Interface as TakeMax0
  let rec cfg inc_max_repeat [@cfg:stackify] [#"../inc_max_repeat.rs" 15 0 15 53] (a : uint32) (b : uint32) (n : uint32) : ()
    requires {[#"../inc_max_repeat.rs" 14 11 14 70] a <= (1000000 : uint32) /\ b <= (1000000 : uint32) /\ n <= (1000000 : uint32)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : uint32;
  var b_2 : uint32;
  var n_3 : uint32;
  var i_5 : uint32;
  var _6 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : uint32;
  var _13 : uint32;
  var mc_14 : borrowed uint32;
  var _15 : borrowed uint32;
  var _16 : borrowed uint32;
  var _17 : borrowed uint32;
  var _18 : borrowed uint32;
  var _19 : ();
  var _20 : ();
  var _21 : ();
  var _22 : ();
  var _23 : bool;
  var _24 : bool;
  var _25 : bool;
  var _26 : uint32;
  var _27 : uint32;
  var _28 : uint32;
  var _29 : uint32;
  var _30 : bool;
  var _31 : uint32;
  var _32 : uint32;
  var _33 : uint32;
  var _34 : uint32;
  var _35 : ();
  {
    a_1 <- a;
    b_2 <- b;
    n_3 <- n;
    goto BB0
  }
  BB0 {
    i_5 <- (0 : uint32);
    goto BB1
  }
  BB1 {
    invariant cntr_bound { [#"../inc_max_repeat.rs" 17 28 17 34] i_5 <= n_3 };
    invariant val_bound { [#"../inc_max_repeat.rs" 18 27 18 73] a_1 <= (1000000 : uint32) + i_5 /\ b_2 <= (1000000 : uint32) + i_5 };
    invariant diff_bound { [#"../inc_max_repeat.rs" 19 28 19 52] a_1 >= b_2 + i_5 \/ b_2 >= a_1 + i_5 };
    _12 <- i_5;
    _13 <- n_3;
    _11 <- ([#"../inc_max_repeat.rs" 20 10 20 15] _12 < _13);
    switch (_11)
      | False -> goto BB4
      | True -> goto BB2
      end
  }
  BB2 {
    _16 <- borrow_mut a_1;
    a_1 <-  ^ _16;
    _15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _15) };
    _18 <- borrow_mut b_2;
    b_2 <-  ^ _18;
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    mc_14 <- ([#"../inc_max_repeat.rs" 21 17 21 41] TakeMax0.take_max _15 _17);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _16 };
    assume { Resolve0.resolve _18 };
    mc_14 <- { mc_14 with current = ([#"../inc_max_repeat.rs" 22 8 22 16]  * mc_14 + (1 : uint32)) };
    assume { Resolve0.resolve mc_14 };
    i_5 <- ([#"../inc_max_repeat.rs" 23 8 23 14] i_5 + (1 : uint32));
    _10 <- ();
    goto BB1
  }
  BB4 {
    _6 <- ();
    _26 <- a_1;
    _28 <- b_2;
    _29 <- i_5;
    _27 <- ([#"../inc_max_repeat.rs" 25 17 25 22] _28 + _29);
    _25 <- ([#"../inc_max_repeat.rs" 25 12 25 22] _26 >= _27);
    switch (_25)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    _24 <- true;
    goto BB7
  }
  BB6 {
    _31 <- b_2;
    _33 <- a_1;
    _34 <- i_5;
    _32 <- ([#"../inc_max_repeat.rs" 25 31 25 36] _33 + _34);
    _30 <- ([#"../inc_max_repeat.rs" 25 26 25 36] _31 >= _32);
    _24 <- _30;
    _30 <- any bool;
    goto BB7
  }
  BB7 {
    _23 <- not _24;
    switch (_23)
      | False -> goto BB9
      | True -> goto BB8
      end
  }
  BB8 {
    absurd
  }
  BB9 {
    _22 <- ();
    _0 <- ();
    return _0
  }
  
end
