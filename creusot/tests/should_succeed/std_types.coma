
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module StdTypes_MyType_Type
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use Core_Option_Option_Type as Option'0
  
  type t_mytype  =
    | C_MyType (Option'0.t_option uint32)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_mytype (input:t_mytype) (ret  (field_0:Option'0.t_option uint32))= any
    [ good (field_0:Option'0.t_option uint32)-> {C_MyType field_0 = input} (! ret {field_0})
    | bad (field_0:Option'0.t_option uint32)-> {C_MyType field_0 <> input} {false} any ]
    
end
module StdTypes_X
  use StdTypes_MyType_Type as MyType'0
  
  use prelude.prelude.Intrinsic
  
  let rec x (_x:MyType'0.t_mytype) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
