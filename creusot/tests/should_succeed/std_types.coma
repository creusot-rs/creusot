
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module T_std_types__MyType
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_core__option__Option as Option'0
  
  type t_MyType  =
    | C_MyType (Option'0.t_Option uint32)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_MyType (input:t_MyType) (ret  (field_0:Option'0.t_Option uint32))= any
    [ good (field_0:Option'0.t_Option uint32)-> {C_MyType field_0 = input} (! ret {field_0})
    | bad (field_0:Option'0.t_Option uint32)-> {C_MyType field_0 <> input} {false} any ]
    
end
module M_std_types__x
  use T_std_types__MyType as MyType'0
  
  use prelude.prelude.Intrinsic
  
  let rec x (_x:MyType'0.t_MyType) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
