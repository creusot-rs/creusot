
module TraitImpl_Impl0_X
  type b
  type t2
  type t1
  predicate invariant'0 (self : (t1, t2))
  let rec invariant'0 (self:(t1, t2)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : (t1, t2))
  let rec inv'0 (_x:(t1, t2)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : (t1, t2) . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'2 (self : t2)
  let rec resolve'2 (self:t2) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : t1)
  let rec resolve'1 (self:t1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : (t1, t2)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'1 (let (a, _) = self in a)
    /\ resolve'2 (let (_, a) = self in a)
  let rec resolve'0 (self:(t1, t2)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec x (self:(t1, t2)) (return'  (ret:()))= {[#"../trait_impl.rs" 25 9 25 13] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- [#"../trait_impl.rs" 25 15 25 17] () ] s1
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () | & self : (t1, t2) = self ]  [ return' (result:())-> (! return' {result}) ] 
end
module TraitImpl_Impl1_X
  type b
  use prelude.UInt32
  use prelude.Int
  use prelude.Intrinsic
  let rec x (self:uint32) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../trait_impl.rs" 29 15 29 17] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ]  [ return' (result:())-> (! return' {result}) ] 
end
module TraitImpl_Impl0
  type b
  type t2
  type t1
  predicate invariant'0 (self : (t1, t2))
  let rec invariant'0 (self:(t1, t2)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : (t1, t2))
  let rec inv'0 (_x:(t1, t2)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : (t1, t2) . inv'0 x = true
  goal x_refn : [#"../trait_impl.rs" 25 4 25 14] forall self : (t1, t2) . inv'0 self  -> inv'0 self
end
module TraitImpl_Impl1
  type b
  goal x_refn : [#"../trait_impl.rs" 29 4 29 14] true
end
