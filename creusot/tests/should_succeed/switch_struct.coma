
module SwitchStruct_M_Type
  use prelude.UInt32
  use prelude.Int
  type t_m 't =
    | C_F uint32
    | C_G 't
    
  function any_l (_ : 'b) : 'a
  let rec f < 't > (input:t_m 't) (ret  (field1:uint32))= any
    [ good (field1:uint32)-> {C_F field1 = input} (! ret {field1})
    | bad (field1:uint32)-> {C_F field1 <> input} {false} any ]
    
  let rec g < 't > (input:t_m 't) (ret  (field2:'t))= any
    [ good (field2:'t)-> {C_G field2 = input} (! ret {field2}) | bad (field2:'t)-> {C_G field2 <> input} {false} any ]
    
end
module SwitchStruct_Test
  use prelude.Intrinsic
  use prelude.UInt32
  use SwitchStruct_M_Type as SwitchStruct_M_Type
  use prelude.Int
  let rec test (o:SwitchStruct_M_Type.t_m uint32) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:uint32)-> {o = SwitchStruct_M_Type.C_F a} (! bb2)
        | br1 (a:uint32)-> {o = SwitchStruct_M_Type.C_G a} (! bb3) ]
         ]
      
    | bb1 = s0 [ s0 = {[#"../switch_struct.rs" 10 10 10 11] false} any ] 
    | bb3 = s0
      [ s0 = SwitchStruct_M_Type.g <uint32> {o} (fun (rfield2'0:uint32) ->  [ &field2 <- rfield2'0 ] s1)
      | s1 = UInt32.eq {field2} {[#"../switch_struct.rs" 12 34 12 35] (0 : uint32)}
          (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = SwitchStruct_M_Type.f <uint32> {o} (fun (rfield1'0:uint32) ->  [ &field1 <- rfield1'0 ] s1)
      | s1 = UInt32.gt {field1} {[#"../switch_struct.rs" 11 33 11 34] (0 : uint32)}
          (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : bool = any_l () : bool
    | & o : SwitchStruct_M_Type.t_m uint32 = o
    | & field1 : uint32 = any_l () : uint32
    | & field2 : uint32 = any_l () : uint32 ]
     [ return' (result:bool)-> (! return' {result}) ] 
end
