module M_switch_struct__test [#"switch_struct.rs" 8 0 8 30]
  let%span sswitch_struct0 = "switch_struct.rs" 12 34 12 35
  let%span sswitch_struct1 = "switch_struct.rs" 11 33 11 34
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  type t_M'0  =
    | C_F'0 UInt32.t
    | C_G'0 UInt32.t
  
  let rec v_G'0 (input:t_M'0) (ret  (field2:UInt32.t))= any
    [ good (field2:UInt32.t)-> {C_G'0 field2 = input} (! ret {field2})
    | bad -> {forall field2 : UInt32.t [C_G'0 field2 : t_M'0] . C_G'0 field2 <> input} (! {false} any) ]
    
  
  let rec v_F'0 (input:t_M'0) (ret  (field1:UInt32.t))= any
    [ good (field1:UInt32.t)-> {C_F'0 field1 = input} (! ret {field1})
    | bad -> {forall field1 : UInt32.t [C_F'0 field1 : t_M'0] . C_F'0 field1 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test'0 (o:t_M'0) (return'  (ret:bool))= (! bb0
    [ bb0 = any [ br0 (x0:UInt32.t)-> {o = C_F'0 x0} (! bb2) | br1 (x0:UInt32.t)-> {o = C_G'0 x0} (! bb3) ] 
    | bb3 = s0
      [ s0 = v_G'0 {o} (fun (rfield2'0:UInt32.t) ->  [ &field2 <- rfield2'0 ] s1)
      | s1 = UInt32.eq {field2} {[%#sswitch_struct0] (0 : UInt32.t)} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_F'0 {o} (fun (rfield1'0:UInt32.t) ->  [ &field1 <- rfield1'0 ] s1)
      | s1 = UInt32.gt {field1} {[%#sswitch_struct1] (0 : UInt32.t)} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = return' {_0} ]
    ) [ & _0 : bool = any_l () | & o : t_M'0 = o | & field1 : UInt32.t = any_l () | & field2 : UInt32.t = any_l () ] 
    [ return' (result:bool)-> (! return' {result}) ]
    
end
