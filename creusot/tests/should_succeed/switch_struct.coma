
module SwitchStruct_M_Type
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_m 't =
    | C_F uint32
    | C_G 't
  
  function any_l (_ : 'b) : 'a
  
  let rec f < 't > (input:t_m 't) (ret  (field1:uint32))= any
    [ good (field1:uint32)-> {C_F field1 = input} (! ret {field1})
    | bad (field1:uint32)-> {C_F field1 <> input} {false} any ]
    
  
  let rec g < 't > (input:t_m 't) (ret  (field2:'t))= any
    [ good (field2:'t)-> {C_G field2 = input} (! ret {field2}) | bad (field2:'t)-> {C_G field2 <> input} {false} any ]
    
end
module SwitchStruct_Test
  let%span sswitch_struct0 = "../switch_struct.rs" 12 34 12 35
  
  let%span sswitch_struct1 = "../switch_struct.rs" 11 33 11 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use SwitchStruct_M_Type as M'0
  
  use prelude.prelude.Int
  
  let rec test (o:M'0.t_m uint32) (return'  (ret:bool))= (! bb0
    [ bb0 = any [ br0 (a:uint32)-> {o = M'0.C_F a} (! bb2) | br1 (a:uint32)-> {o = M'0.C_G a} (! bb3) ] 
    | bb3 = s0
      [ s0 = M'0.g <uint32> {o} (fun (rfield2'0:uint32) ->  [ &field2 <- rfield2'0 ] s1)
      | s1 = UInt32.eq {field2} {[%#sswitch_struct0] (0 : uint32)} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = M'0.f <uint32> {o} (fun (rfield1'0:uint32) ->  [ &field1 <- rfield1'0 ] s1)
      | s1 = UInt32.gt {field1} {[%#sswitch_struct1] (0 : uint32)} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = return' {_0} ]
    )
    [ & _0 : bool = any_l () | & o : M'0.t_m uint32 = o | & field1 : uint32 = any_l () | & field2 : uint32 = any_l () ]
     [ return' (result:bool)-> (! return' {result}) ] 
end
