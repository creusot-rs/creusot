
module M_inferred_invariants__f
  type t
  
  let%span span0 = "../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span1 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_1 : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed t) =
    [%#span0] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed t)
  
  axiom inv'0 : forall x : borrowed t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed t) =
    [%#span1] self.final = self.current
  
  let rec f (_1:borrowed t) (return'  (ret:()))= {inv'0 _1}
    (! bb0 [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 _1} s1 | s1 = -{resolve'0 _1}- s2 | s2 = return' {_0} ]  ] )
    [ & _0 : () = any_l () | & _1 : borrowed t = _1 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_inferred_invariants__simple
  type t
  
  let%span sinferred_invariants0 = "../inferred_invariants.rs" 6 17 6 18
  
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  predicate inv'0 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed t) =
    [%#span1] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  let rec f'0 (_1:borrowed t) (return'  (ret:()))= {[@expl:precondition] inv'1 _1}
    any [ return' (result:())-> (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  let rec simple (x:borrowed t) (return'  (ret:()))= {[%#sinferred_invariants0] inv'1 x}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_1_0 <- Snapshot.new x ] s1 | s1 = bb1 ] 
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant] (Snapshot.inner old_1_0).final = x.final}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = s0
          [ s0 = Borrow.borrow_mut <t> {x.current}
              (fun (_ret':borrowed t) ->  [ &_4 <- _ret' ]  [ &x <- { x with current = _4.final ; } ] s1)
          | s1 = -{inv'0 _4.final}- s2
          | s2 = f'0 {_4} (fun (_ret':()) ->  [ &_3 <- _ret' ] s3)
          | s3 = bb3 ]
          
        | bb3 = bb1 ]
         ]
       ]
    )
    [ & x : borrowed t = x
    | & _3 : () = any_l ()
    | & _4 : borrowed t = any_l ()
    | & old_1_0 : Snapshot.snap_ty (borrowed t) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_inferred_invariants__swapper
  type t
  
  let%span sinferred_invariants0 = "../inferred_invariants.rs" 12 26 12 27
  
  let%span sinferred_invariants1 = "../inferred_invariants.rs" 12 44 12 45
  
  let%span span2 = "../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span3 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  predicate inv'0 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed t) =
    [%#span2] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed t) =
    [%#span3] self.final = self.current
  
  let rec swapper (x:borrowed t) (y:borrowed t) (return'  (ret:()))= {[%#sinferred_invariants1] inv'1 y}
    {[%#sinferred_invariants0] inv'1 x}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb1
      [ bb1 = (! bb2)
        [ bb2 = s0
          [ s0 =  [ &c <- x ] s1
          | s1 = Borrow.borrow_final <t> {y.current} {Borrow.get_id y}
              (fun (_ret':borrowed t) ->  [ &_6 <- _ret' ]  [ &y <- { y with current = _6.final ; } ] s2)
          | s2 = -{inv'0 _6.final}- s3
          | s3 =  [ &x <- _6 ] s4
          | s4 = Borrow.borrow_final <t> {c.current} {Borrow.get_id c}
              (fun (_ret':borrowed t) ->  [ &_7 <- _ret' ]  [ &c <- { c with current = _7.final ; } ] s5)
          | s5 = -{inv'0 _7.final}- s6
          | s6 = {[@expl:type invariant] inv'1 y} s7
          | s7 = -{resolve'0 y}- s8
          | s8 =  [ &y <- _7 ] s9
          | s9 = {[@expl:type invariant] inv'1 c} s10
          | s10 = -{resolve'0 c}- s11
          | s11 = bb1 ]
           ]
         ]
       ]
    )
    [ & x : borrowed t = x
    | & y : borrowed t = y
    | & c : borrowed t = any_l ()
    | & _6 : borrowed t = any_l ()
    | & _7 : borrowed t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_inferred_invariants__tuple
  type t
  
  let%span sinferred_invariants0 = "../inferred_invariants.rs" 20 24 20 25
  
  let%span sinferred_invariants1 = "../inferred_invariants.rs" 20 50 20 51
  
  let%span span2 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : (borrowed t, bool)) =
    [%#span2] true
  
  predicate inv'0 (_1 : (borrowed t, bool))
  
  axiom inv'0 : forall x : (borrowed t, bool) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  let rec tuple (d:(borrowed t, bool)) (e:(borrowed t, bool)) (return'  (ret:()))= {[%#sinferred_invariants1] inv'0 e}
    {[%#sinferred_invariants0] inv'0 d}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb1
      [ bb1 = (! bb2) [ bb2 = s0 [ s0 =  [ &c <- d ] s1 | s1 =  [ &d <- e ] s2 | s2 =  [ &e <- c ] s3 | s3 = bb1 ]  ]  ]
       ]
    ) [ & d : (borrowed t, bool) = d | & e : (borrowed t, bool) = e | & c : (borrowed t, bool) = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_inferred_invariants__temp_move
  type t
  
  let%span sinferred_invariants0 = "../inferred_invariants.rs" 28 28 28 29
  
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span2 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  predicate inv'0 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed t) =
    [%#span1] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed t) =
    [%#span2] self.final = self.current
  
  let rec temp_move (x:borrowed t) (return'  (ret:()))= {[%#sinferred_invariants0] inv'1 x}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb1
      [ bb1 = (! bb2)
        [ bb2 = s0
          [ s0 =  [ &c <- x ] s1
          | s1 = Borrow.borrow_final <t> {c.current} {Borrow.get_id c}
              (fun (_ret':borrowed t) ->  [ &_5 <- _ret' ]  [ &c <- { c with current = _5.final ; } ] s2)
          | s2 = -{inv'0 _5.final}- s3
          | s3 =  [ &x <- _5 ] s4
          | s4 = {[@expl:type invariant] inv'1 c} s5
          | s5 = -{resolve'0 c}- s6
          | s6 = bb1 ]
           ]
         ]
       ]
    ) [ & x : borrowed t = x | & c : borrowed t = any_l () | & _5 : borrowed t = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module T_alloc__boxed__Box
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_Box 't 'a =
    | C_Box (Unique'0.t_Unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module M_inferred_invariants__y
  let%span sinferred_invariants0 = "../inferred_invariants.rs" 36 16 36 31
  
  let%span sinferred_invariants1 = "../inferred_invariants.rs" 37 16 37 17
  
  let%span sinferred_invariants2 = "../inferred_invariants.rs" 38 16 38 40
  
  let%span sinferred_invariants3 = "../inferred_invariants.rs" 39 16 39 24
  
  let%span sinferred_invariants4 = "../inferred_invariants.rs" 42 19 42 20
  
  let%span sinferred_invariants5 = "../inferred_invariants.rs" 45 13 45 14
  
  let%span sinferred_invariants6 = "../inferred_invariants.rs" 46 15 46 17
  
  let%span span7 = "../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span8 = "../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span9 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span10 = "" 0 0 0 0
  
  let%span span11 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span12 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span13 = "../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span14 = "../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span15 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span16 = "../../../../creusot-contracts/src/std/slice.rs" 138 8 138 96
  
  let%span span17 = "../../../../creusot-contracts/src/std/slice.rs" 131 20 131 37
  
  let%span span18 = "../../../../creusot-contracts/src/std/slice.rs" 124 20 124 37
  
  let%span span19 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span20 = "../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46
  
  let%span span21 = "" 0 0 0 0
  
  let%span span22 = "" 0 0 0 0
  
  let%span span23 = "../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54
  
  let%span span24 = "../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57
  
  let%span span25 = "../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62
  
  let%span span26 = "../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55
  
  let%span span27 = "" 0 0 0 0
  
  let%span span28 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span29 = "" 0 0 0 0
  
  let%span span30 = "../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  let%span span31 = "../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48
  
  use prelude.prelude.Int32
  
  predicate inv'5 (_1 : int32)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'7 (self : int32) =
    [%#span7] inv'5 self
  
  predicate inv'7 (_1 : int32)
  
  axiom inv'7 : forall x : int32 . inv'7 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'6 (self : Seq.seq int32) =
    [%#span8] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'6 (_1 : Seq.seq int32)
  
  axiom inv'6 : forall x : Seq.seq int32 . inv'6 x = true
  
  predicate invariant'5 (self : int32) =
    [%#span9] true
  
  axiom inv'5 : forall x : int32 . inv'5 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span10] (18446744073709551615 : usize)
  
  function shallow_model'3 (self : Vec'0.t_Vec int32 (Global'0.t_Global)) : Seq.seq int32
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_Vec int32 (Global'0.t_Global) . [%#span11] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'4 (self : Vec'0.t_Vec int32 (Global'0.t_Global)) =
    [%#span12] inv'6 (shallow_model'3 self)
  
  predicate inv'4 (_1 : Vec'0.t_Vec int32 (Global'0.t_Global))
  
  axiom inv'4 : forall x : Vec'0.t_Vec int32 (Global'0.t_Global) . inv'4 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed int32) =
    [%#span13] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'3 (_1 : borrowed int32)
  
  axiom inv'3 : forall x : borrowed int32 . inv'3 x = true
  
  predicate invariant'2 (self : usize) =
    [%#span9] true
  
  predicate inv'2 (_1 : usize)
  
  axiom inv'2 : forall x : usize . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (Vec'0.t_Vec int32 (Global'0.t_Global))) =
    [%#span13] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'1 (_1 : borrowed (Vec'0.t_Vec int32 (Global'0.t_Global)))
  
  axiom inv'1 : forall x : borrowed (Vec'0.t_Vec int32 (Global'0.t_Global)) . inv'1 x = true
  
  predicate invariant'0 (self : Vec'0.t_Vec int32 (Global'0.t_Global)) =
    [%#span14] inv'4 self
  
  predicate inv'0 (_1 : Vec'0.t_Vec int32 (Global'0.t_Global))
  
  axiom inv'0 : forall x : Vec'0.t_Vec int32 (Global'0.t_Global) . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Vec'0.t_Vec int32 (Global'0.t_Global))) =
    [%#span15] self.final = self.current
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span15] self.final = self.current
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq int32) (fin : Seq.seq int32) =
    [%#span16] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) =
    [%#span17] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq int32) =
    [%#span18] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'1 (self : borrowed (Vec'0.t_Vec int32 (Global'0.t_Global))) : Seq.seq int32 =
    [%#span19] shallow_model'3 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_Vec int32 (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed int32))= {[@expl:precondition] [%#span22] inv'2 index}
    {[@expl:precondition] [%#span21] inv'1 self}
    {[@expl:precondition] [%#span20] in_bounds'0 index (shallow_model'1 self)}
    any
    [ return' (result:borrowed int32)-> {[%#span27] inv'3 result}
      {[%#span26] Seq.length (shallow_model'3 self.final) = Seq.length (shallow_model'1 self)}
      {[%#span25] resolve_elswhere'0 index (shallow_model'1 self) (shallow_model'3 self.final)}
      {[%#span24] has_value'0 index (shallow_model'3 self.final) result.final}
      {[%#span23] has_value'0 index (shallow_model'1 self) result.current}
      (! return' {result}) ]
    
  
  function shallow_model'4 (self : Vec'0.t_Vec int32 (Global'0.t_Global)) : Seq.seq int32 =
    [%#span28] shallow_model'3 self
  
  let rec len'0 (self:Vec'0.t_Vec int32 (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] [%#span29] inv'0 self}
    any
    [ return' (result:usize)-> {[%#span30] UIntSize.to_int result = Seq.length (shallow_model'4 self)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  function shallow_model'2 (self : borrowed (Vec'0.t_Vec int32 (Global'0.t_Global))) : Seq.seq int32 =
    [%#span28] shallow_model'1 self
  
  function shallow_model'0 (self : Snapshot.snap_ty (borrowed (Vec'0.t_Vec int32 (Global'0.t_Global)))) : Seq.seq int32
   =
    [%#span31] shallow_model'2 (Snapshot.inner self)
  
  use prelude.prelude.Snapshot
  
  let rec y (v:borrowed (Vec'0.t_Vec int32 (Global'0.t_Global))) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#sinferred_invariants0] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &i <- [%#sinferred_invariants1] (0 : usize) ] s1 | s1 =  [ &old_2_0 <- Snapshot.new v ] s2 | s2 = bb2 ]
      
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] (Snapshot.inner old_2_0).final = v.final}
        {[@expl:loop invariant] [%#sinferred_invariants3] UIntSize.to_int i <= 10}
        {[@expl:loop invariant] [%#sinferred_invariants2] Seq.length (shallow_model'0 old_v)
        = Seq.length (shallow_model'1 v)}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0 [ s0 = len'0 {v.current} (fun (_ret':usize) ->  [ &_11 <- _ret' ] s1) | s1 = bb4 ] 
        | bb4 = s0
          [ s0 = UIntSize.lt {i} {_11} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s1)
          | s1 = any [ br0 -> {_9 = false} (! bb7) | br1 -> {_9} (! bb5) ]  ]
          
        | bb5 = s0
          [ s0 = Borrow.borrow_mut <Vec'0.t_Vec int32 (Global'0.t_Global)> {v.current}
              (fun (_ret':borrowed (Vec'0.t_Vec int32 (Global'0.t_Global))) ->
                 [ &_14 <- _ret' ] 
                 [ &v <- { v with current = _14.final ; } ] 
                s1)
          | s1 = index_mut'0 {_14} {i} (fun (_ret':borrowed int32) ->  [ &_13 <- _ret' ] s2)
          | s2 = bb6 ]
          
        | bb6 = s0
          [ s0 =  [ &_13 <- { _13 with current = ([%#sinferred_invariants4] (0 : int32)) ; } ] s1
          | s1 = -{resolve'0 _13}- s2
          | s2 = bb8 ]
          
        | bb7 = bb8
        | bb8 = s0
          [ s0 = UIntSize.add {i} {[%#sinferred_invariants5] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1)
          | s1 = UIntSize.gt {i} {[%#sinferred_invariants6] (10 : usize)} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s2)
          | s2 = any [ br0 -> {_16 = false} (! bb10) | br1 -> {_16} (! bb9) ]  ]
          
        | bb10 = bb2 ]
         ]
      
    | bb9 = s0 [ s0 = -{resolve'1 v}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_Vec int32 (Global'0.t_Global)) = v
    | & old_v : Snapshot.snap_ty (borrowed (Vec'0.t_Vec int32 (Global'0.t_Global))) = any_l ()
    | & i : usize = any_l ()
    | & _9 : bool = any_l ()
    | & _11 : usize = any_l ()
    | & _13 : borrowed int32 = any_l ()
    | & _14 : borrowed (Vec'0.t_Vec int32 (Global'0.t_Global)) = any_l ()
    | & _16 : bool = any_l ()
    | & old_2_0 : Snapshot.snap_ty (borrowed (Vec'0.t_Vec int32 (Global'0.t_Global))) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
