
module CreusotContracts_GhostPtr_GhostPtrToken_Type
  type t_ghostptrtoken 't
end
module CreusotContracts_GhostPtr_GhostPtrTokenMut_Type
  type t_ghostptrtokenmut 't
end
module CreusotContracts_Logic_Fmap_FMap_Type
  type t_fmap 'k 'v
end
module Core_Panicking_AssertKind_Type
  type t_assertkind  =
    | C_Eq
    | C_Ne
    | C_Match
    
  function any_l (_ : 'b) : 'a
  let rec eq (input:t_assertkind) (ret  )= any
    [ good -> {C_Eq  = input} (! ret) | bad -> {C_Eq  <> input} {false} any ]
    
  let rec ne (input:t_assertkind) (ret  )= any
    [ good -> {C_Ne  = input} (! ret) | bad -> {C_Ne  <> input} {false} any ]
    
  let rec match' (input:t_assertkind) (ret  )= any
    [ good -> {C_Match  = input} (! ret) | bad -> {C_Match  <> input} {false} any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
  function any_l (_ : 'b) : 'a
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module GhostPtrToken_Test
  use prelude.Int32
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'7 (self : Core_Option_Option_Type.t_option int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:Core_Option_Option_Type.t_option int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Core_Option_Option_Type.t_option int32)
  let rec inv'7 (_x:Core_Option_Option_Type.t_option int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Core_Option_Option_Type.t_option int32 . inv'7 x = true
  use prelude.Opaque
  use map.Map
  predicate invariant'6 (self : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32))
  let rec inv'6 (_x:Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32) . inv'6 x = true
  predicate invariant'5 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : int32)
  let rec inv'5 (_x:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : int32 . inv'5 x = true
  predicate invariant'4 (self : opaque_ptr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:opaque_ptr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : opaque_ptr)
  let rec inv'4 (_x:opaque_ptr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : opaque_ptr . inv'4 x = true
  use CreusotContracts_Logic_Fmap_FMap_Type as CreusotContracts_Logic_Fmap_FMap_Type
  predicate invariant'3 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)
  let rec inv'3 (_x:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32 . inv'3 x = true
  predicate invariant'2 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : int32)
  let rec inv'2 (_x:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : int32 . inv'2 x = true
  use prelude.Borrow
  predicate invariant'1 (self : borrowed int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed int32)
  let rec inv'1 (_x:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed int32 . inv'1 x = true
  predicate invariant'0 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : int32)
  let rec inv'0 (_x:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv'0 : forall x : int32 . inv'0 x = true
  use prelude.Intrinsic
  use Core_Panicking_AssertKind_Type as Core_Panicking_AssertKind_Type
  use CreusotContracts_GhostPtr_GhostPtrToken_Type as CreusotContracts_GhostPtr_GhostPtrToken_Type
  function unreachable'0 (_1 : ()) : int32
  let rec unreachable'0 (_1:()) (return'  (ret:int32))= {[@expl:precondition] [#"../../../../creusot-contracts/src/util.rs" 24 11 24 16] false}
    any [ return' (result:int32)-> {result = unreachable'0 _1} (! return' {result}) ] 
  axiom unreachable'0_spec : forall _1 : () . ([#"../../../../creusot-contracts/src/util.rs" 24 11 24 16] false)
   -> ([#"../../../../creusot-contracts/src/util.rs" 27 0 27 28] inv'0 (unreachable'0 _1))
  && ([#"../../../../creusot-contracts/src/util.rs" 25 10 25 15] false)
  function unwrap'0 (op : Core_Option_Option_Type.t_option int32) : int32
  let rec unwrap'0 (op:Core_Option_Option_Type.t_option int32) (return'  (ret:int32))= {[@expl:precondition] [#"../../../../creusot-contracts/src/util.rs" 35 17 35 19] inv'7 op}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/util.rs" 33 11 33 21] op
    <> Core_Option_Option_Type.C_None}
    any [ return' (result:int32)-> {result = unwrap'0 op} (! return' {result}) ] 
  axiom unwrap'0_spec : forall op : Core_Option_Option_Type.t_option int32 . ([#"../../../../creusot-contracts/src/util.rs" 33 11 33 21] op
  <> Core_Option_Option_Type.C_None)
   -> ([#"../../../../creusot-contracts/src/util.rs" 35 17 35 19] inv'7 op)
   -> ([#"../../../../creusot-contracts/src/util.rs" 35 0 35 36] inv'0 (unwrap'0 op))
  && ([#"../../../../creusot-contracts/src/util.rs" 34 10 34 28] Core_Option_Option_Type.C_Some (unwrap'0 op) = op)
  use map.Map
  function mk'0 (_m : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  let rec mk'0 (_m:Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) (return'  (ret:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32))= any
    [ return' (result:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)-> {result = mk'0 _m}
      (! return' {result}) ]
    
  function view'0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)
    
  let rec view'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (return'  (ret:Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/fmap.rs" 28 16 28 20] inv'3 self}
    any
    [ return' (result:Map.map opaque_ptr (Core_Option_Option_Type.t_option int32))-> {result = view'0 self}
      (! return' {result}) ]
    
  axiom view'0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32 . ([#"../../../../creusot-contracts/src/logic/fmap.rs" 28 16 28 20] inv'3 self)
   -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 28 4 28 35] inv'6 (view'0 self))
  && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 27 14 27 38] mk'0 (view'0 self) = self)
  function get'0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : Core_Option_Option_Type.t_option int32
    
   =
    [#"../../../../creusot-contracts/src/logic/fmap.rs" 55 8 55 26] Map.get (view'0 self) k
  let rec get'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k:opaque_ptr) (return'  (ret:Core_Option_Option_Type.t_option int32))= any
    [ return' (result:Core_Option_Option_Type.t_option int32)-> {result = get'0 self k} (! return' {result}) ]
    
  function lookup_unsized'0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : int32
    
   =
    [#"../../../../creusot-contracts/src/logic/fmap.rs" 62 8 62 27] unwrap'0 (get'0 self k)
  let rec lookup_unsized'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k:opaque_ptr) (return'  (ret:int32))= any
    [ return' (result:int32)-> {result = lookup_unsized'0 self k} (! return' {result}) ]
    
  function contains'0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : bool
    
   =
    [#"../../../../creusot-contracts/src/logic/fmap.rs" 79 8 79 27] get'0 self k <> Core_Option_Option_Type.C_None
  let rec contains'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k:opaque_ptr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = contains'0 self k} (! return' {result}) ]
    
  function shallow_model'0 (self : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  let rec shallow_model'0 (self:CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) (return'  (ret:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32))= any
    [ return' (result:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)-> {result = shallow_model'0 self}
      (! return' {result}) ]
    
  function shallow_model'1 (self : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'0 self
  let rec shallow_model'1 (self:CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) (return'  (ret:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32))= any
    [ return' (result:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)-> {result = shallow_model'1 self}
      (! return' {result}) ]
    
  let rec ptr_as_ref'0 (self:CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) (ptr:opaque_ptr) (return'  (ret:int32))= {[@expl:precondition] [#"../../../../creusot-contracts/src/ghost_ptr.rs" 79 4 79 36] contains'0 (shallow_model'1 self) ptr}
    any
    [ return' (result:int32)-> {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 81 4 81 49] inv'2 result}
      {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 80 14 80 51] result
      = lookup_unsized'0 (shallow_model'1 self) ptr}
      (! return' {result}) ]
    
  predicate resolve'2 (self : borrowed int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  let rec swap'0 (x:borrowed int32) (y:borrowed int32) (return'  (ret:()))= {[@expl:precondition] inv'1 y}
    {[@expl:precondition] inv'1 x}
    any
    [ return' (result:())-> {[#"../../../../creusot-contracts/src/std/mem.rs" 14 22 14 30]  ^ y =  * x}
      {[#"../../../../creusot-contracts/src/std/mem.rs" 13 22 13 30]  ^ x =  * y}
      (! return' {result}) ]
    
  predicate resolve'3 (self : int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'3 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'1 (self : (int32, int32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'3 (let (a, _) = self in a)
    /\ resolve'3 (let (_, a) = self in a)
  let rec resolve'1 (self:(int32, int32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use CreusotContracts_GhostPtr_GhostPtrTokenMut_Type as CreusotContracts_GhostPtr_GhostPtrTokenMut_Type
  function fin'0 (self : CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  let rec fin'0 (self:CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) (return'  (ret:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32))= any
    [ return' (result:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)-> {result = fin'0 self}
      (! return' {result}) ]
    
  function cur'0 (self : CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  let rec cur'0 (self:CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) (return'  (ret:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32))= any
    [ return' (result:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)-> {result = cur'0 self}
      (! return' {result}) ]
    
  predicate resolve'0 (self : CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) =
    [#"../../../../creusot-contracts/src/ghost_ptr.rs" 263 8 263 32] cur'0 self = fin'0 self
  let rec resolve'0 (self:CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  function len'0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : int
  let rec len'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (return'  (ret:int))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/fmap.rs" 13 15 13 19] inv'3 self}
    any [ return' (result:int)-> {result = len'0 self} (! return' {result}) ] 
  axiom len'0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32 . ([#"../../../../creusot-contracts/src/logic/fmap.rs" 13 15 13 19] inv'3 self)
   -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 12 14 12 25] len'0 self >= 0)
  use map.Map
  function make_sized'0 (self : int32) : int32
  let rec make_sized'0 (self:int32) (return'  (ret:int32))= {[@expl:precondition] [#"../../../../creusot-contracts/src/util.rs" 16 19 16 23] inv'2 self}
    any [ return' (result:int32)-> {result = make_sized'0 self} (! return' {result}) ] 
  axiom make_sized'0_spec : forall self : int32 . ([#"../../../../creusot-contracts/src/util.rs" 16 19 16 23] inv'2 self)
   -> ([#"../../../../creusot-contracts/src/util.rs" 16 4 16 40] inv'0 (make_sized'0 self))
  && ([#"../../../../creusot-contracts/src/util.rs" 15 14 15 30] make_sized'0 self = self)
  function insert'0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) (v : int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  let rec insert'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k:opaque_ptr) (v:int32) (return'  (ret:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/fmap.rs" 38 30 38 31] inv'5 v}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/fmap.rs" 38 24 38 25] inv'4 k}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/fmap.rs" 38 18 38 22] inv'3 self}
    any
    [ return' (result:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)-> {result = insert'0 self k v}
      (! return' {result}) ]
    
  axiom insert'0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32, k : opaque_ptr, v : int32 . ([#"../../../../creusot-contracts/src/logic/fmap.rs" 38 18 38 22] inv'3 self)
   -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 38 24 38 25] inv'4 k)
   -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 38 30 38 31] inv'5 v)
   -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 38 4 38 43] inv'3 (insert'0 self k v))
  && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 37 4 37 68] not contains'0 self k
   -> len'0 (insert'0 self k v) = len'0 self + 1)
  && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 36 4 36 63] contains'0 self k
   -> len'0 (insert'0 self k v) = len'0 self)
  && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 35 14 35 71] view'0 (insert'0 self k v)
  = Map.set (view'0 self) k (Core_Option_Option_Type.C_Some (make_sized'0 v)))
  function remove'0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  let rec remove'0 (self:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k:opaque_ptr) (return'  (ret:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/fmap.rs" 47 24 47 25] inv'4 k}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/fmap.rs" 47 18 47 22] inv'3 self}
    any
    [ return' (result:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)-> {result = remove'0 self k}
      (! return' {result}) ]
    
  axiom remove'0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32, k : opaque_ptr . ([#"../../../../creusot-contracts/src/logic/fmap.rs" 47 18 47 22] inv'3 self)
   -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 47 24 47 25] inv'4 k)
   -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 47 4 47 37] inv'3 (remove'0 self k))
  && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 46 14 46 84] len'0 (remove'0 self k)
  = (if contains'0 self k then len'0 self - 1 else len'0 self))
  && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 45 14 45 55] view'0 (remove'0 self k)
  = Map.set (view'0 self) k (Core_Option_Option_Type.C_None))
  let rec take_mut'0 (self:borrowed (CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32)) (ptr:opaque_ptr) (return'  (ret:borrowed int32))= {[@expl:precondition] [#"../../../../creusot-contracts/src/ghost_ptr.rs" 229 15 229 42] contains'0 (cur'0 ( * self)) ptr}
    any
    [ return' (result:borrowed int32)-> {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 234 4 234 58] inv'1 result}
      {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 233 14 233 42] not contains'0 (fin'0 ( ^ self)) ptr}
      {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 232 14 232 65] fin'0 ( * self)
      = insert'0 (fin'0 ( ^ self)) ptr ( ^ result)}
      {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 231 14 231 56] cur'0 ( ^ self)
      = remove'0 (cur'0 ( * self)) ptr}
      {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 230 14 230 59]  * result
      = lookup_unsized'0 (cur'0 ( * self)) ptr}
      (! return' {result}) ]
    
  let rec borrow_mut'0 (self:borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)) (return'  (ret:CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32))= any
    [ return' (result:CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32)-> {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 125 14 125 38] fin'0 result
      = shallow_model'0 ( ^ self)}
      {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 124 14 124 38] cur'0 result = shallow_model'0 ( * self)}
      (! return' {result}) ]
    
  let rec ptr_from_box'0 (self:borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)) (val':int32) (return'  (ret:opaque_ptr))= {[@expl:precondition] [#"../../../../creusot-contracts/src/ghost_ptr.rs" 71 35 71 38] inv'0 val'}
    any
    [ return' (result:opaque_ptr)-> {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 70 14 70 55] shallow_model'0 ( ^ self)
      = insert'0 (shallow_model'0 ( * self)) result val'}
      {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 67 4 67 42] not contains'0 (shallow_model'0 ( * self)) result}
      (! return' {result}) ]
    
  use map.Const
  function empty'0 (_1 : ()) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
  let rec empty'0 (_1:()) (return'  (ret:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32))= any
    [ return' (result:CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)-> {result = empty'0 _1}
      (! return' {result}) ]
    
  axiom empty'0_spec : forall _1 : () . ([#"../../../../creusot-contracts/src/logic/fmap.rs" 87 4 87 26] inv'3 (empty'0 _1))
  && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 86 14 86 49] view'0 (empty'0 _1)
  = Const.const (Core_Option_Option_Type.C_None))
  && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 85 14 85 31] len'0 (empty'0 _1) = 0)
  let rec new'0 (_1:()) (return'  (ret:CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32))= any
    [ return' (result:CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)-> {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 41 14 41 38] shallow_model'0 result
      = empty'0 ()}
      (! return' {result}) ]
    
  let rec promoted0 (return'  (ret:int32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../ghost_ptr_token.rs" 17 40 17 41] (1 : int32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : int32 = any_l () : int32 ]  [ return' (result:int32)-> return' {result} ] 
  let rec promoted1 (return'  (ret:int32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../ghost_ptr_token.rs" 16 40 16 41] (2 : int32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : int32 = any_l () : int32 ]  [ return' (result:int32)-> return' {result} ] 
  let rec promoted2 (return'  (ret:int32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../ghost_ptr_token.rs" 13 20 13 21] (2 : int32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : int32 = any_l () : int32 ]  [ return' (result:int32)-> return' {result} ] 
  let rec promoted3 (return'  (ret:int32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../ghost_ptr_token.rs" 12 20 12 21] (1 : int32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : int32 = any_l () : int32 ]  [ return' (result:int32)-> return' {result} ] 
  let rec test (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[#"../ghost_ptr_token.rs" 4 20 4 40] ()}
          (fun (_ret':CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) ->  [ &token <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32> {token}
          (fun (_ret':borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)) ->
             [ &_3 <- _ret' ] 
             [ &token <-  ^ _3 ] 
            s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = ptr_from_box'0 {_3} {[#"../ghost_ptr_token.rs" 5 43 5 44] (1 : int32)}
          (fun (_ret':opaque_ptr) ->  [ &ptr1 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32> {token}
          (fun (_ret':borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)) ->
             [ &_6 <- _ret' ] 
             [ &token <-  ^ _6 ] 
            s1)
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = ptr_from_box'0 {_6} {[#"../ghost_ptr_token.rs" 6 43 6 44] (2 : int32)}
          (fun (_ret':opaque_ptr) ->  [ &ptr2 <- _ret' ] s1)
      | s1 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32> {token}
          (fun (_ret':borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)) ->
             [ &_9 <- _ret' ] 
             [ &token <-  ^ _9 ] 
            s1)
      | s1 = borrow_mut'0 {_9}
          (fun (_ret':CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) ->
             [ &token_mut <- _ret' ] 
            s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = Borrow.borrow_mut <CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32> {token_mut}
          (fun (_ret':borrowed (CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32)) ->
             [ &_11 <- _ret' ] 
             [ &token_mut <-  ^ _11 ] 
            s1)
      | s1 = take_mut'0 {_11} {ptr1} (fun (_ret':borrowed int32) ->  [ &m1 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = Borrow.borrow_mut <CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32> {token_mut}
          (fun (_ret':borrowed (CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32)) ->
             [ &_14 <- _ret' ] 
             [ &token_mut <-  ^ _14 ] 
            s1)
      | s1 = take_mut'0 {_14} {ptr2} (fun (_ret':borrowed int32) ->  [ &m2 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 = -{resolve'0 token_mut}- s1
      | s1 = promoted3 (fun (pr3:int32) ->  [ &_104 <- pr3 ] s2)
      | s2 =  [ &_17 <- ( * m1, _104) ] s3
      | s3 =  [ &left_val <- let (r'0, _) = _17 in r'0 ] s4
      | s4 =  [ &right_val <- let (_, r'1) = _17 in r'1 ] s5
      | s5 = -{resolve'1 _17}- s6
      | s6 = Int32.eq {left_val} {right_val} (fun (_ret':bool) ->  [ &_23 <- _ret' ] s7)
      | s7 = any [ br0 -> {_23 = false} (! bb10) | br1 -> {_23} (! bb9) ]  ]
      
    | bb9 = s0
      [ s0 = promoted2 (fun (pr2:int32) ->  [ &_103 <- pr2 ] s1)
      | s1 =  [ &_36 <- ( * m2, _103) ] s2
      | s2 =  [ &left_val1 <- let (r'0, _) = _36 in r'0 ] s3
      | s3 =  [ &right_val1 <- let (_, r'1) = _36 in r'1 ] s4
      | s4 = -{resolve'1 _36}- s5
      | s5 = Int32.eq {left_val1} {right_val1} (fun (_ret':bool) ->  [ &_42 <- _ret' ] s6)
      | s6 = any [ br0 -> {_42 = false} (! bb12) | br1 -> {_42} (! bb11) ]  ]
      
    | bb11 = s0
      [ s0 = Borrow.borrow_final <int32> { * m1} {Borrow.get_id m1}
          (fun (_ret':borrowed int32) ->  [ &_55 <- _ret' ]  [ &m1 <- { m1 with current = ( ^ _55) ; } ] s1)
      | s1 = Borrow.borrow_final <int32> { * m2} {Borrow.get_id m2}
          (fun (_ret':borrowed int32) ->  [ &_56 <- _ret' ]  [ &m2 <- { m2 with current = ( ^ _56) ; } ] s2)
      | s2 = swap'0 {_55} {_56} (fun (_ret':()) ->  [ &_54 <- _ret' ] s3)
      | s3 = bb13 ]
      
    | bb13 = s0
      [ s0 = -{resolve'2 m2}- s1
      | s1 = -{resolve'2 m1}- s2
      | s2 = ptr_as_ref'0 {token} {ptr1} (fun (_ret':int32) ->  [ &_60 <- _ret' ] s3)
      | s3 = bb14 ]
      
    | bb14 = s0
      [ s0 = promoted1 (fun (pr1:int32) ->  [ &_102 <- pr1 ] s1)
      | s1 =  [ &_58 <- (_60, _102) ] s2
      | s2 =  [ &left_val2 <- let (r'0, _) = _58 in r'0 ] s3
      | s3 =  [ &right_val2 <- let (_, r'1) = _58 in r'1 ] s4
      | s4 = -{resolve'1 _58}- s5
      | s5 = Int32.eq {left_val2} {right_val2} (fun (_ret':bool) ->  [ &_67 <- _ret' ] s6)
      | s6 = any [ br0 -> {_67 = false} (! bb16) | br1 -> {_67} (! bb15) ]  ]
      
    | bb15 = s0 [ s0 = ptr_as_ref'0 {token} {ptr2} (fun (_ret':int32) ->  [ &_82 <- _ret' ] s1) | s1 = bb17 ] 
    | bb17 = s0
      [ s0 = promoted0 (fun (pr0:int32) ->  [ &_101 <- pr0 ] s1)
      | s1 =  [ &_80 <- (_82, _101) ] s2
      | s2 =  [ &left_val3 <- let (r'0, _) = _80 in r'0 ] s3
      | s3 =  [ &right_val3 <- let (_, r'1) = _80 in r'1 ] s4
      | s4 = -{resolve'1 _80}- s5
      | s5 = Int32.eq {left_val3} {right_val3} (fun (_ret':bool) ->  [ &_89 <- _ret' ] s6)
      | s6 = any [ br0 -> {_89 = false} (! bb19) | br1 -> {_89} (! bb18) ]  ]
      
    | bb18 = s0 [ s0 =  [ &_0 <- [#"../ghost_ptr_token.rs" 3 14 18 1] () ] s1 | s1 = return' {_0} ] 
    | bb19 = s0
      [ s0 =  [ &kind3 <- Core_Panicking_AssertKind_Type.C_Eq ] s1
      | s1 =  [ &_97 <- left_val3 ] s2
      | s2 =  [ &_99 <- right_val3 ] s3
      | s3 = {false} any ]
      
    | bb16 = s0
      [ s0 =  [ &kind2 <- Core_Panicking_AssertKind_Type.C_Eq ] s1
      | s1 =  [ &_75 <- left_val2 ] s2
      | s2 =  [ &_77 <- right_val2 ] s3
      | s3 = {false} any ]
      
    | bb12 = s0
      [ s0 = -{resolve'2 m1}- s1
      | s1 =  [ &kind1 <- Core_Panicking_AssertKind_Type.C_Eq ] s2
      | s2 =  [ &_50 <- left_val1 ] s3
      | s3 =  [ &_52 <- right_val1 ] s4
      | s4 = {false} any ]
      
    | bb10 = s0
      [ s0 = -{resolve'2 m2}- s1
      | s1 =  [ &kind <- Core_Panicking_AssertKind_Type.C_Eq ] s2
      | s2 =  [ &_31 <- left_val ] s3
      | s3 =  [ &_33 <- right_val ] s4
      | s4 = {false} any ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & token : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32 = any_l () : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32
    | & ptr1 : opaque_ptr = any_l () : opaque_ptr
    | & _3 : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) = any_l () : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)
    | & ptr2 : opaque_ptr = any_l () : opaque_ptr
    | & _6 : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) = any_l () : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)
    | & token_mut : CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32 = any_l () : CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32
    | & _9 : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) = any_l () : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)
    | & m1 : borrowed int32 = any_l () : borrowed int32
    | & _11 : borrowed (CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) = any_l () : borrowed (CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32)
    | & m2 : borrowed int32 = any_l () : borrowed int32
    | & _14 : borrowed (CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) = any_l () : borrowed (CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32)
    | & _17 : (int32, int32) = any_l () : (int32, int32)
    | & left_val : int32 = any_l () : int32
    | & right_val : int32 = any_l () : int32
    | & _23 : bool = any_l () : bool
    | & kind : Core_Panicking_AssertKind_Type.t_assertkind = any_l () : Core_Panicking_AssertKind_Type.t_assertkind
    | & _31 : int32 = any_l () : int32
    | & _33 : int32 = any_l () : int32
    | & _36 : (int32, int32) = any_l () : (int32, int32)
    | & left_val1 : int32 = any_l () : int32
    | & right_val1 : int32 = any_l () : int32
    | & _42 : bool = any_l () : bool
    | & kind1 : Core_Panicking_AssertKind_Type.t_assertkind = any_l () : Core_Panicking_AssertKind_Type.t_assertkind
    | & _50 : int32 = any_l () : int32
    | & _52 : int32 = any_l () : int32
    | & _54 : () = any_l () : ()
    | & _55 : borrowed int32 = any_l () : borrowed int32
    | & _56 : borrowed int32 = any_l () : borrowed int32
    | & _58 : (int32, int32) = any_l () : (int32, int32)
    | & _60 : int32 = any_l () : int32
    | & left_val2 : int32 = any_l () : int32
    | & right_val2 : int32 = any_l () : int32
    | & _67 : bool = any_l () : bool
    | & kind2 : Core_Panicking_AssertKind_Type.t_assertkind = any_l () : Core_Panicking_AssertKind_Type.t_assertkind
    | & _75 : int32 = any_l () : int32
    | & _77 : int32 = any_l () : int32
    | & _80 : (int32, int32) = any_l () : (int32, int32)
    | & _82 : int32 = any_l () : int32
    | & left_val3 : int32 = any_l () : int32
    | & right_val3 : int32 = any_l () : int32
    | & _89 : bool = any_l () : bool
    | & kind3 : Core_Panicking_AssertKind_Type.t_assertkind = any_l () : Core_Panicking_AssertKind_Type.t_assertkind
    | & _97 : int32 = any_l () : int32
    | & _99 : int32 = any_l () : int32
    | & _101 : int32 = any_l () : int32
    | & _102 : int32 = any_l () : int32
    | & _103 : int32 = any_l () : int32
    | & _104 : int32 = any_l () : int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
