module M_ghost_ptr_token__test [#"ghost_ptr_token.rs" 3 0 3 13]
  let%span sghost_ptr_token0 = "ghost_ptr_token.rs" 4 20 4 40
  let%span sghost_ptr_token1 = "ghost_ptr_token.rs" 5 43 5 44
  let%span sghost_ptr_token2 = "ghost_ptr_token.rs" 6 43 6 44
  let%span sghost_ptr3 = "../../../creusot-contracts/src/ghost_ptr.rs" 54 4 54 24
  let%span sghost_ptr4 = "../../../creusot-contracts/src/ghost_ptr.rs" 53 14 53 38
  let%span sghost_ptr5 = "../../../creusot-contracts/src/ghost_ptr.rs" 83 29 83 33
  let%span sghost_ptr6 = "../../../creusot-contracts/src/ghost_ptr.rs" 83 35 83 38
  let%span sghost_ptr7 = "../../../creusot-contracts/src/ghost_ptr.rs" 79 14 79 40
  let%span sghost_ptr8 = "../../../creusot-contracts/src/ghost_ptr.rs" 82 14 82 55
  let%span sghost_ptr9 = "../../../creusot-contracts/src/ghost_ptr.rs" 139 27 139 31
  let%span sghost_ptr10 = "../../../creusot-contracts/src/ghost_ptr.rs" 137 14 137 38
  let%span sghost_ptr11 = "../../../creusot-contracts/src/ghost_ptr.rs" 138 14 138 38
  let%span sghost_ptr12 = "../../../creusot-contracts/src/ghost_ptr.rs" 254 15 254 42
  let%span sghost_ptr13 = "../../../creusot-contracts/src/ghost_ptr.rs" 259 4 259 61
  let%span sghost_ptr14 = "../../../creusot-contracts/src/ghost_ptr.rs" 255 14 255 59
  let%span sghost_ptr15 = "../../../creusot-contracts/src/ghost_ptr.rs" 256 14 256 56
  let%span sghost_ptr16 = "../../../creusot-contracts/src/ghost_ptr.rs" 257 14 257 65
  let%span sghost_ptr17 = "../../../creusot-contracts/src/ghost_ptr.rs" 258 14 258 42
  let%span sghost_ptr_token18 = "ghost_ptr_token.rs" 12 20 12 21
  let%span sghost_ptr_token19 = "ghost_ptr_token.rs" 13 20 13 21
  let%span smem20 = "../../../creusot-contracts/src/std/mem.rs" 13 22 13 30
  let%span smem21 = "../../../creusot-contracts/src/std/mem.rs" 14 22 14 30
  let%span sghost_ptr22 = "../../../creusot-contracts/src/ghost_ptr.rs" 94 23 94 27
  let%span sghost_ptr23 = "../../../creusot-contracts/src/ghost_ptr.rs" 92 15 92 34
  let%span sghost_ptr24 = "../../../creusot-contracts/src/ghost_ptr.rs" 94 4 94 52
  let%span sghost_ptr25 = "../../../creusot-contracts/src/ghost_ptr.rs" 93 14 93 51
  let%span sghost_ptr_token26 = "ghost_ptr_token.rs" 16 40 16 41
  let%span sghost_ptr_token27 = "ghost_ptr_token.rs" 17 40 17 41
  let%span sghost_ptr28 = "../../../creusot-contracts/src/ghost_ptr.rs" 34 14 34 64
  let%span sfmap29 = "../../../creusot-contracts/src/logic/fmap.rs" 36 14 36 31
  let%span sfmap30 = "../../../creusot-contracts/src/logic/fmap.rs" 37 14 37 49
  let%span sfmap31 = "../../../creusot-contracts/src/logic/fmap.rs" 120 8 120 35
  let%span sfmap32 = "../../../creusot-contracts/src/logic/fmap.rs" 64 14 64 71
  let%span sfmap33 = "../../../creusot-contracts/src/logic/fmap.rs" 65 14 65 61
  let%span sfmap34 = "../../../creusot-contracts/src/logic/fmap.rs" 66 14 66 66
  let%span sghost_ptr35 = "../../../creusot-contracts/src/ghost_ptr.rs" 209 14 209 64
  let%span sghost_ptr36 = "../../../creusot-contracts/src/ghost_ptr.rs" 216 14 216 64
  let%span sfmap37 = "../../../creusot-contracts/src/logic/fmap.rs" 103 8 103 35
  let%span sfmap38 = "../../../creusot-contracts/src/logic/fmap.rs" 73 14 73 55
  let%span sfmap39 = "../../../creusot-contracts/src/logic/fmap.rs" 74 14 74 84
  let%span sghost_ptr40 = "../../../creusot-contracts/src/ghost_ptr.rs" 288 8 288 32
  let%span sresolve41 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel42 = "../../../creusot-contracts/src/model.rs" 88 8 88 22
  let%span sghost_ptr43 = "../../../creusot-contracts/src/ghost_ptr.rs" 147 14 147 38
  let%span sghost_ptr44 = "../../../creusot-contracts/src/ghost_ptr.rs" 148 14 148 96
  let%span sfmap45 = "../../../creusot-contracts/src/logic/fmap.rs" 96 8 96 26
  let%span sfmap46 = "../../../creusot-contracts/src/logic/fmap.rs" 44 14 44 25
  let%span sfmap47 = "../../../creusot-contracts/src/logic/fmap.rs" 57 14 57 38
  let%span sutil48 = "../../../creusot-contracts/src/util.rs" 14 14 14 30
  let%span sutil49 = "../../../creusot-contracts/src/util.rs" 32 11 32 21
  let%span sutil50 = "../../../creusot-contracts/src/util.rs" 33 10 33 28
  
  type t_GhostPtrToken'0
  
  predicate inv'0 (_1 : t_GhostPtrToken'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_GhostPtrToken'0 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Opaque
  
  use prelude.prelude.Int
  
  function addr_logic'0 (self : opaque_ptr) : int
  
  function null_logic'0 (_1 : ()) : opaque_ptr
  
  axiom null_logic'0_spec : forall _1 : () . ([%#sghost_ptr43] addr_logic'0 (null_logic'0 _1) = 0)
  && ([%#sghost_ptr44] forall ptr : opaque_ptr . addr_logic'0 ptr = addr_logic'0 (null_logic'0 _1)
   -> ptr = null_logic'0 _1)
  
  type t_FMap'0
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use map.Map
  
  function mk'0 (_m : Map.map opaque_ptr (t_Option'0)) : t_FMap'0
  
  function view'2 (self : t_FMap'0) : Map.map opaque_ptr (t_Option'0)
  
  axiom view'2_spec : forall self : t_FMap'0 . [%#sfmap47] mk'0 (view'2 self) = self
  
  use map.Map
  
  function get_unsized'0 [@inline:trivial] (self : t_FMap'0) (k : opaque_ptr) : t_Option'0 =
    [%#sfmap45] Map.get (view'2 self) k
  
  function view'0 (self : t_GhostPtrToken'0) : t_FMap'0
  
  axiom view'0_spec : forall self : t_GhostPtrToken'0 . [%#sghost_ptr28] get_unsized'0 (view'0 self) (null_logic'0 ())
  = C_None'0
  
  function len'0 (self : t_FMap'0) : int
  
  axiom len'0_spec : forall self : t_FMap'0 . [%#sfmap46] len'0 self >= 0
  
  use map.Const
  
  function empty'0 (_1 : ()) : t_FMap'0
  
  axiom empty'0_spec : forall _1 : () . ([%#sfmap29] len'0 (empty'0 _1) = 0)
  && ([%#sfmap30] view'2 (empty'0 _1) = Const.const (C_None'0))
  
  let rec new'0 (_1:()) (return'  (ret:t_GhostPtrToken'0))= any
    [ return' (result:t_GhostPtrToken'0)-> {[%#sghost_ptr3] inv'0 result}
      {[%#sghost_ptr4] view'0 result = empty'0 ()}
      (! return' {result}) ]
    
  
  use prelude.prelude.Borrow
  
  predicate inv'1 (_1 : borrowed (t_GhostPtrToken'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (t_GhostPtrToken'0) [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : int32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : int32 [inv'2 x] . inv'2 x = true
  
  function contains'0 [@inline:trivial] (self : t_FMap'0) (k : opaque_ptr) : bool =
    [%#sfmap31] get_unsized'0 self k <> C_None'0
  
  function make_sized'0 (self : int32) : int32
  
  axiom make_sized'0_spec : forall self : int32 . [%#sutil48] make_sized'0 self = self
  
  use map.Map
  
  function insert'0 (self : t_FMap'0) (k : opaque_ptr) (v : int32) : t_FMap'0
  
  axiom insert'0_spec : forall self : t_FMap'0, k : opaque_ptr, v : int32 . ([%#sfmap32] view'2 (insert'0 self k v)
  = Map.set (view'2 self) k (C_Some'0 (make_sized'0 v)))
  && ([%#sfmap33] contains'0 self k  -> len'0 (insert'0 self k v) = len'0 self)
  && ([%#sfmap34] not contains'0 self k  -> len'0 (insert'0 self k v) = len'0 self + 1)
  
  let rec ptr_from_box'0 (self:borrowed (t_GhostPtrToken'0)) (val':int32) (return'  (ret:opaque_ptr))= {[@expl:ptr_from_box 'self' type invariant] [%#sghost_ptr5] inv'1 self}
    {[@expl:ptr_from_box 'val' type invariant] [%#sghost_ptr6] inv'2 val'}
    any
    [ return' (result:opaque_ptr)-> {[%#sghost_ptr7] not contains'0 (view'0 self.current) result}
      {[%#sghost_ptr8] view'0 self.final = insert'0 (view'0 self.current) result val'}
      (! return' {result}) ]
    
  
  type t_GhostPtrTokenMut'0
  
  function cur'0 (self : t_GhostPtrTokenMut'0) : t_FMap'0
  
  axiom cur'0_spec : forall self : t_GhostPtrTokenMut'0 . [%#sghost_ptr35] get_unsized'0 (cur'0 self) (null_logic'0 ())
  = C_None'0
  
  function fin'0 (self : t_GhostPtrTokenMut'0) : t_FMap'0
  
  axiom fin'0_spec : forall self : t_GhostPtrTokenMut'0 . [%#sghost_ptr36] get_unsized'0 (fin'0 self) (null_logic'0 ())
  = C_None'0
  
  let rec borrow_mut'0 (self:borrowed (t_GhostPtrToken'0)) (return'  (ret:t_GhostPtrTokenMut'0))= {[@expl:borrow_mut 'self' type invariant] [%#sghost_ptr9] inv'1 self}
    any
    [ return' (result:t_GhostPtrTokenMut'0)-> {[%#sghost_ptr10] cur'0 result = view'0 self.current}
      {[%#sghost_ptr11] fin'0 result = view'0 self.final}
      (! return' {result}) ]
    
  
  predicate inv'3 (_1 : borrowed int32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed int32 [inv'3 x] . inv'3 x = true
  
  function unwrap'0 (op : t_Option'0) : int32
  
  axiom unwrap'0_spec : forall op : t_Option'0 . ([%#sutil49] op <> C_None'0)
   -> ([%#sutil50] C_Some'0 (unwrap'0 op) = op)
  
  function lookup_unsized'0 [@inline:trivial] (self : t_FMap'0) (k : opaque_ptr) : int32 =
    [%#sfmap37] unwrap'0 (get_unsized'0 self k)
  
  function remove'0 (self : t_FMap'0) (k : opaque_ptr) : t_FMap'0
  
  axiom remove'0_spec : forall self : t_FMap'0, k : opaque_ptr . ([%#sfmap38] view'2 (remove'0 self k)
  = Map.set (view'2 self) k (C_None'0))
  && ([%#sfmap39] len'0 (remove'0 self k) = (if contains'0 self k then len'0 self - 1 else len'0 self))
  
  let rec take_mut'0 (self:borrowed (t_GhostPtrTokenMut'0)) (ptr:opaque_ptr) (return'  (ret:borrowed int32))= {[@expl:take_mut requires] [%#sghost_ptr12] contains'0 (cur'0 self.current) ptr}
    any
    [ return' (result:borrowed int32)-> {[%#sghost_ptr13] inv'3 result}
      {[%#sghost_ptr14] result.current = lookup_unsized'0 (cur'0 self.current) ptr}
      {[%#sghost_ptr15] cur'0 self.final = remove'0 (cur'0 self.current) ptr}
      {[%#sghost_ptr16] fin'0 self.current = insert'0 (fin'0 self.final) ptr result.final}
      {[%#sghost_ptr17] not contains'0 (fin'0 self.final) ptr}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : t_GhostPtrTokenMut'0) =
    [%#sghost_ptr40] cur'0 self = fin'0 self
  
  predicate resolve'0 (_1 : t_GhostPtrTokenMut'0) =
    resolve'2 _1
  
  use prelude.prelude.Intrinsic
  
  let rec promoted3__test'0 (return'  (ret:int32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_ptr_token18] (1 : int32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : int32 = any_l () ]  [ return' (result:int32)-> return' {result} ] 
  
  let rec promoted2__test'0 (return'  (ret:int32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_ptr_token19] (2 : int32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : int32 = any_l () ]  [ return' (result:int32)-> return' {result} ] 
  
  let rec swap'0 (x:borrowed int32) (y:borrowed int32) (return'  (ret:()))= {[@expl:swap 'x' type invariant] inv'3 x}
    {[@expl:swap 'y' type invariant] inv'3 y}
    any
    [ return' (result:())-> {[%#smem20] x.final = y.current} {[%#smem21] y.final = x.current} (! return' {result}) ]
    
  
  predicate resolve'3 (self : borrowed int32) =
    [%#sresolve41] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed int32) =
    resolve'3 _1
  
  predicate inv'4 (_1 : t_GhostPtrToken'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_GhostPtrToken'0 [inv'4 x] . inv'4 x = true
  
  function view'1 (self : t_GhostPtrToken'0) : t_FMap'0 =
    [%#smodel42] view'0 self
  
  predicate inv'5 (_1 : int32)
  
  axiom inv_axiom'5 [@rewrite] : forall x : int32 [inv'5 x] . inv'5 x = true
  
  let rec ptr_as_ref'0 (self:t_GhostPtrToken'0) (ptr:opaque_ptr) (return'  (ret:int32))= {[@expl:ptr_as_ref 'self' type invariant] [%#sghost_ptr22] inv'4 self}
    {[@expl:ptr_as_ref requires] [%#sghost_ptr23] contains'0 (view'1 self) ptr}
    any
    [ return' (result:int32)-> {[%#sghost_ptr24] inv'5 result}
      {[%#sghost_ptr25] result = lookup_unsized'0 (view'1 self) ptr}
      (! return' {result}) ]
    
  
  let rec promoted1__test'0 (return'  (ret:int32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_ptr_token26] (2 : int32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : int32 = any_l () ]  [ return' (result:int32)-> return' {result} ] 
  
  let rec promoted0__test'0 (return'  (ret:int32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_ptr_token27] (1 : int32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : int32 = any_l () ]  [ return' (result:int32)-> return' {result} ] 
  
  type t_AssertKind'0  =
    | C_Eq'0
    | C_Ne'0
    | C_Match'0
  
  meta "compute_max_steps" 1000000
  
  let rec test'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#sghost_ptr_token0] ()} (fun (_ret':t_GhostPtrToken'0) ->  [ &token <- _ret' ] s1) | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <t_GhostPtrToken'0> {token}
          (fun (_ret':borrowed (t_GhostPtrToken'0)) ->  [ &_3 <- _ret' ]  [ &token <- _ret'.final ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = ptr_from_box'0 {_3} {[%#sghost_ptr_token1] (1 : int32)} (fun (_ret':opaque_ptr) ->  [ &ptr1 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <t_GhostPtrToken'0> {token}
          (fun (_ret':borrowed (t_GhostPtrToken'0)) ->  [ &_6 <- _ret' ]  [ &token <- _ret'.final ] s1)
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = ptr_from_box'0 {_6} {[%#sghost_ptr_token2] (2 : int32)} (fun (_ret':opaque_ptr) ->  [ &ptr2 <- _ret' ] s1)
      | s1 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <t_GhostPtrToken'0> {token}
          (fun (_ret':borrowed (t_GhostPtrToken'0)) ->  [ &_9 <- _ret' ]  [ &token <- _ret'.final ] s1)
      | s1 = borrow_mut'0 {_9} (fun (_ret':t_GhostPtrTokenMut'0) ->  [ &token_mut <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = Borrow.borrow_mut <t_GhostPtrTokenMut'0> {token_mut}
          (fun (_ret':borrowed (t_GhostPtrTokenMut'0)) ->  [ &_11 <- _ret' ]  [ &token_mut <- _ret'.final ] s1)
      | s1 = take_mut'0 {_11} {ptr1} (fun (_ret':borrowed int32) ->  [ &m1 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = Borrow.borrow_mut <t_GhostPtrTokenMut'0> {token_mut}
          (fun (_ret':borrowed (t_GhostPtrTokenMut'0)) ->  [ &_14 <- _ret' ]  [ &token_mut <- _ret'.final ] s1)
      | s1 = take_mut'0 {_14} {ptr2} (fun (_ret':borrowed int32) ->  [ &m2 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 = -{resolve'0 token_mut}- s1
      | s1 = promoted3__test'0 (fun (pr3:int32) ->  [ &_104 <- pr3 ] s2)
      | s2 =  [ &_17 <- (m1.current, _104) ] s3
      | s3 =  [ &left_val <- let (r'0, _) = _17 in r'0 ] s4
      | s4 =  [ &right_val <- let (_, r'1) = _17 in r'1 ] s5
      | s5 = Int32.eq {left_val} {right_val} (fun (_ret':bool) ->  [ &_23 <- _ret' ] s6)
      | s6 = any [ br0 -> {_23 = false} (! bb10) | br1 -> {_23} (! bb9) ]  ]
      
    | bb9 = s0
      [ s0 = promoted2__test'0 (fun (pr2:int32) ->  [ &_103 <- pr2 ] s1)
      | s1 =  [ &_36 <- (m2.current, _103) ] s2
      | s2 =  [ &left_val1 <- let (r'0, _) = _36 in r'0 ] s3
      | s3 =  [ &right_val1 <- let (_, r'1) = _36 in r'1 ] s4
      | s4 = Int32.eq {left_val1} {right_val1} (fun (_ret':bool) ->  [ &_42 <- _ret' ] s5)
      | s5 = any [ br0 -> {_42 = false} (! bb12) | br1 -> {_42} (! bb11) ]  ]
      
    | bb11 = s0
      [ s0 = Borrow.borrow_final <int32> {m1.current} {Borrow.get_id m1}
          (fun (_ret':borrowed int32) ->  [ &_55 <- _ret' ]  [ &m1 <- { m1 with current = _ret'.final } ] s1)
      | s1 = Borrow.borrow_final <int32> {m2.current} {Borrow.get_id m2}
          (fun (_ret':borrowed int32) ->  [ &_56 <- _ret' ]  [ &m2 <- { m2 with current = _ret'.final } ] s2)
      | s2 = swap'0 {_55} {_56} (fun (_ret':()) ->  [ &_54 <- _ret' ] s3)
      | s3 = bb13 ]
      
    | bb13 = s0
      [ s0 = -{resolve'1 m2}- s1
      | s1 = -{resolve'1 m1}- s2
      | s2 = ptr_as_ref'0 {token} {ptr1} (fun (_ret':int32) ->  [ &_60 <- _ret' ] s3)
      | s3 = bb14 ]
      
    | bb14 = s0
      [ s0 = promoted1__test'0 (fun (pr1:int32) ->  [ &_102 <- pr1 ] s1)
      | s1 =  [ &_58 <- (_60, _102) ] s2
      | s2 =  [ &left_val2 <- let (r'0, _) = _58 in r'0 ] s3
      | s3 =  [ &right_val2 <- let (_, r'1) = _58 in r'1 ] s4
      | s4 = Int32.eq {left_val2} {right_val2} (fun (_ret':bool) ->  [ &_67 <- _ret' ] s5)
      | s5 = any [ br0 -> {_67 = false} (! bb16) | br1 -> {_67} (! bb15) ]  ]
      
    | bb15 = s0 [ s0 = ptr_as_ref'0 {token} {ptr2} (fun (_ret':int32) ->  [ &_82 <- _ret' ] s1) | s1 = bb17 ] 
    | bb17 = s0
      [ s0 = promoted0__test'0 (fun (pr0:int32) ->  [ &_101 <- pr0 ] s1)
      | s1 =  [ &_80 <- (_82, _101) ] s2
      | s2 =  [ &left_val3 <- let (r'0, _) = _80 in r'0 ] s3
      | s3 =  [ &right_val3 <- let (_, r'1) = _80 in r'1 ] s4
      | s4 = Int32.eq {left_val3} {right_val3} (fun (_ret':bool) ->  [ &_89 <- _ret' ] s5)
      | s5 = any [ br0 -> {_89 = false} (! bb19) | br1 -> {_89} (! bb18) ]  ]
      
    | bb18 = return' {_0}
    | bb19 = s0
      [ s0 =  [ &kind3 <- C_Eq'0 ] s1
      | s1 =  [ &_97 <- left_val3 ] s2
      | s2 =  [ &_99 <- right_val3 ] s3
      | s3 = {false} any ]
      
    | bb16 = s0
      [ s0 =  [ &kind2 <- C_Eq'0 ] s1
      | s1 =  [ &_75 <- left_val2 ] s2
      | s2 =  [ &_77 <- right_val2 ] s3
      | s3 = {false} any ]
      
    | bb12 = s0
      [ s0 = -{resolve'1 m1}- s1
      | s1 =  [ &kind1 <- C_Eq'0 ] s2
      | s2 =  [ &_50 <- left_val1 ] s3
      | s3 =  [ &_52 <- right_val1 ] s4
      | s4 = {false} any ]
      
    | bb10 = s0
      [ s0 = -{resolve'1 m2}- s1
      | s1 =  [ &kind <- C_Eq'0 ] s2
      | s2 =  [ &_31 <- left_val ] s3
      | s3 =  [ &_33 <- right_val ] s4
      | s4 = {false} any ]
       ]
    )
    [ & _0 : () = any_l ()
    | & token : t_GhostPtrToken'0 = any_l ()
    | & ptr1 : opaque_ptr = any_l ()
    | & _3 : borrowed (t_GhostPtrToken'0) = any_l ()
    | & ptr2 : opaque_ptr = any_l ()
    | & _6 : borrowed (t_GhostPtrToken'0) = any_l ()
    | & token_mut : t_GhostPtrTokenMut'0 = any_l ()
    | & _9 : borrowed (t_GhostPtrToken'0) = any_l ()
    | & m1 : borrowed int32 = any_l ()
    | & _11 : borrowed (t_GhostPtrTokenMut'0) = any_l ()
    | & m2 : borrowed int32 = any_l ()
    | & _14 : borrowed (t_GhostPtrTokenMut'0) = any_l ()
    | & _17 : (int32, int32) = any_l ()
    | & left_val : int32 = any_l ()
    | & right_val : int32 = any_l ()
    | & _23 : bool = any_l ()
    | & kind : t_AssertKind'0 = any_l ()
    | & _31 : int32 = any_l ()
    | & _33 : int32 = any_l ()
    | & _36 : (int32, int32) = any_l ()
    | & left_val1 : int32 = any_l ()
    | & right_val1 : int32 = any_l ()
    | & _42 : bool = any_l ()
    | & kind1 : t_AssertKind'0 = any_l ()
    | & _50 : int32 = any_l ()
    | & _52 : int32 = any_l ()
    | & _54 : () = any_l ()
    | & _55 : borrowed int32 = any_l ()
    | & _56 : borrowed int32 = any_l ()
    | & _58 : (int32, int32) = any_l ()
    | & _60 : int32 = any_l ()
    | & left_val2 : int32 = any_l ()
    | & right_val2 : int32 = any_l ()
    | & _67 : bool = any_l ()
    | & kind2 : t_AssertKind'0 = any_l ()
    | & _75 : int32 = any_l ()
    | & _77 : int32 = any_l ()
    | & _80 : (int32, int32) = any_l ()
    | & _82 : int32 = any_l ()
    | & left_val3 : int32 = any_l ()
    | & right_val3 : int32 = any_l ()
    | & _89 : bool = any_l ()
    | & kind3 : t_AssertKind'0 = any_l ()
    | & _97 : int32 = any_l ()
    | & _99 : int32 = any_l ()
    | & _101 : int32 = any_l ()
    | & _102 : int32 = any_l ()
    | & _103 : int32 = any_l ()
    | & _104 : int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
