
module CreusotContracts_GhostPtr_GhostPtrToken_Type
  type t_ghostptrtoken 't
end
module CreusotContracts_GhostPtr_GhostPtrTokenMut_Type
  type t_ghostptrtokenmut 't
end
module CreusotContracts_Logic_Fmap_FMap_Type
  type t_fmap 'k 'v
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Panicking_AssertKind_Type
  type t_assertkind  =
    | C_Eq
    | C_Ne
    | C_Match
  
  function any_l (_ : 'b) : 'a
  
  let rec eq (input:t_assertkind) (ret  )= any
    [ good -> {C_Eq  = input} (! ret) | bad -> {C_Eq  <> input} {false} any ]
    
  
  let rec ne (input:t_assertkind) (ret  )= any
    [ good -> {C_Ne  = input} (! ret) | bad -> {C_Ne  <> input} {false} any ]
    
  
  let rec match' (input:t_assertkind) (ret  )= any
    [ good -> {C_Match  = input} (! ret) | bad -> {C_Match  <> input} {false} any ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_box 't 'a =
    | C_Box (Unique'0.t_unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module GhostPtrToken_Test
  let%span sghost_ptr_token0 = "../ghost_ptr_token.rs" 4 20 4 40
  
  let%span sghost_ptr_token1 = "../ghost_ptr_token.rs" 5 43 5 44
  
  let%span sghost_ptr_token2 = "../ghost_ptr_token.rs" 6 43 6 44
  
  let%span smod3 = "" 0 0 0 0
  
  let%span smod4 = "" 0 0 0 0
  
  let%span smod5 = "" 0 0 0 0
  
  let%span smod6 = "" 0 0 0 0
  
  let%span sghost_ptr_token7 = "../ghost_ptr_token.rs" 17 40 17 41
  
  let%span sghost_ptr_token8 = "../ghost_ptr_token.rs" 16 40 16 41
  
  let%span sghost_ptr_token9 = "../ghost_ptr_token.rs" 13 20 13 21
  
  let%span sghost_ptr_token10 = "../ghost_ptr_token.rs" 12 20 12 21
  
  let%span span11 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span12 = "../../../../creusot-contracts/src/util.rs" 24 11 24 16
  
  let%span span13 = "../../../../creusot-contracts/src/util.rs" 25 10 25 15
  
  let%span span14 = "../../../../creusot-contracts/src/util.rs" 27 0 27 28
  
  let%span span15 = "../../../../creusot-contracts/src/util.rs" 26 10 26 11
  
  let%span span16 = "../../../../creusot-contracts/src/util.rs" 33 11 33 21
  
  let%span span17 = "../../../../creusot-contracts/src/util.rs" 35 17 35 19
  
  let%span span18 = "../../../../creusot-contracts/src/util.rs" 34 10 34 28
  
  let%span span19 = "../../../../creusot-contracts/src/util.rs" 35 0 35 36
  
  let%span span20 = "../../../../creusot-contracts/src/logic/fmap.rs" 28 16 28 20
  
  let%span span21 = "../../../../creusot-contracts/src/logic/fmap.rs" 27 14 27 38
  
  let%span span22 = "../../../../creusot-contracts/src/logic/fmap.rs" 28 4 28 35
  
  let%span span23 = "../../../../creusot-contracts/src/logic/fmap.rs" 55 8 55 26
  
  let%span span24 = "../../../../creusot-contracts/src/logic/fmap.rs" 62 8 62 27
  
  let%span span25 = "../../../../creusot-contracts/src/logic/fmap.rs" 79 8 79 27
  
  let%span span26 = "../../../../creusot-contracts/src/ghost_ptr.rs" 136 14 136 38
  
  let%span span27 = "../../../../creusot-contracts/src/ghost_ptr.rs" 137 4 137 98
  
  let%span span28 = "../../../../creusot-contracts/src/ghost_ptr.rs" 32 14 32 56
  
  let%span span29 = "../../../../creusot-contracts/src/ghost_ptr.rs" 34 4 34 50
  
  let%span span30 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span31 = "../../../../creusot-contracts/src/ghost_ptr.rs" 80 4 80 36
  
  let%span span32 = "../../../../creusot-contracts/src/ghost_ptr.rs" 81 14 81 51
  
  let%span span33 = "../../../../creusot-contracts/src/ghost_ptr.rs" 82 4 82 49
  
  let%span span34 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span35 = "" 0 0 0 0
  
  let%span span36 = "" 0 0 0 0
  
  let%span span37 = "../../../../creusot-contracts/src/std/mem.rs" 13 22 13 30
  
  let%span span38 = "../../../../creusot-contracts/src/std/mem.rs" 14 22 14 30
  
  let%span span39 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span40 = "../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  let%span span41 = "../../../../creusot-contracts/src/ghost_ptr.rs" 209 14 209 56
  
  let%span span42 = "../../../../creusot-contracts/src/ghost_ptr.rs" 210 4 210 44
  
  let%span span43 = "../../../../creusot-contracts/src/ghost_ptr.rs" 201 14 201 56
  
  let%span span44 = "../../../../creusot-contracts/src/ghost_ptr.rs" 202 4 202 44
  
  let%span span45 = "../../../../creusot-contracts/src/ghost_ptr.rs" 280 8 280 32
  
  let%span span46 = "../../../../creusot-contracts/src/logic/fmap.rs" 13 15 13 19
  
  let%span span47 = "../../../../creusot-contracts/src/logic/fmap.rs" 12 14 12 25
  
  let%span span48 = "../../../../creusot-contracts/src/util.rs" 16 19 16 23
  
  let%span span49 = "../../../../creusot-contracts/src/util.rs" 15 14 15 30
  
  let%span span50 = "../../../../creusot-contracts/src/util.rs" 16 4 16 40
  
  let%span span51 = "../../../../creusot-contracts/src/logic/fmap.rs" 38 18 38 22
  
  let%span span52 = "../../../../creusot-contracts/src/logic/fmap.rs" 38 24 38 25
  
  let%span span53 = "../../../../creusot-contracts/src/logic/fmap.rs" 38 30 38 31
  
  let%span span54 = "../../../../creusot-contracts/src/logic/fmap.rs" 35 14 35 71
  
  let%span span55 = "../../../../creusot-contracts/src/logic/fmap.rs" 36 4 36 63
  
  let%span span56 = "../../../../creusot-contracts/src/logic/fmap.rs" 37 4 37 68
  
  let%span span57 = "../../../../creusot-contracts/src/logic/fmap.rs" 38 4 38 43
  
  let%span span58 = "../../../../creusot-contracts/src/logic/fmap.rs" 47 18 47 22
  
  let%span span59 = "../../../../creusot-contracts/src/logic/fmap.rs" 47 24 47 25
  
  let%span span60 = "../../../../creusot-contracts/src/logic/fmap.rs" 45 14 45 55
  
  let%span span61 = "../../../../creusot-contracts/src/logic/fmap.rs" 46 14 46 84
  
  let%span span62 = "../../../../creusot-contracts/src/logic/fmap.rs" 47 4 47 37
  
  let%span span63 = "../../../../creusot-contracts/src/ghost_ptr.rs" 246 15 246 42
  
  let%span span64 = "../../../../creusot-contracts/src/ghost_ptr.rs" 247 14 247 59
  
  let%span span65 = "../../../../creusot-contracts/src/ghost_ptr.rs" 248 14 248 56
  
  let%span span66 = "../../../../creusot-contracts/src/ghost_ptr.rs" 249 14 249 65
  
  let%span span67 = "../../../../creusot-contracts/src/ghost_ptr.rs" 250 14 250 42
  
  let%span span68 = "../../../../creusot-contracts/src/ghost_ptr.rs" 251 4 251 58
  
  let%span span69 = "../../../../creusot-contracts/src/ghost_ptr.rs" 125 14 125 38
  
  let%span span70 = "../../../../creusot-contracts/src/ghost_ptr.rs" 126 14 126 38
  
  let%span span71 = "../../../../creusot-contracts/src/ghost_ptr.rs" 71 35 71 38
  
  let%span span72 = "../../../../creusot-contracts/src/ghost_ptr.rs" 67 4 67 42
  
  let%span span73 = "../../../../creusot-contracts/src/ghost_ptr.rs" 70 14 70 55
  
  let%span span74 = "../../../../creusot-contracts/src/logic/fmap.rs" 85 14 85 31
  
  let%span span75 = "../../../../creusot-contracts/src/logic/fmap.rs" 86 14 86 49
  
  let%span span76 = "../../../../creusot-contracts/src/logic/fmap.rs" 87 4 87 26
  
  let%span span77 = "../../../../creusot-contracts/src/ghost_ptr.rs" 41 14 41 38
  
  use prelude.prelude.Int32
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'7 (self : Option'0.t_option int32) =
    [%#span11] true
  
  predicate inv'7 (_x : Option'0.t_option int32)
  
  axiom inv'7 : forall x : Option'0.t_option int32 . inv'7 x = true
  
  use prelude.prelude.Opaque
  
  use map.Map
  
  predicate invariant'6 (self : Map.map opaque_ptr (Option'0.t_option int32)) =
    [%#span11] true
  
  predicate inv'6 (_x : Map.map opaque_ptr (Option'0.t_option int32))
  
  axiom inv'6 : forall x : Map.map opaque_ptr (Option'0.t_option int32) . inv'6 x = true
  
  predicate invariant'5 (self : int32) =
    [%#span11] true
  
  predicate inv'5 (_x : int32)
  
  axiom inv'5 : forall x : int32 . inv'5 x = true
  
  predicate invariant'4 (self : opaque_ptr) =
    [%#span11] true
  
  predicate inv'4 (_x : opaque_ptr)
  
  axiom inv'4 : forall x : opaque_ptr . inv'4 x = true
  
  use CreusotContracts_Logic_Fmap_FMap_Type as FMap'0
  
  predicate invariant'3 (self : FMap'0.t_fmap opaque_ptr int32) =
    [%#span11] true
  
  predicate inv'3 (_x : FMap'0.t_fmap opaque_ptr int32)
  
  axiom inv'3 : forall x : FMap'0.t_fmap opaque_ptr int32 . inv'3 x = true
  
  predicate invariant'2 (self : int32) =
    [%#span11] true
  
  predicate inv'2 (_x : int32)
  
  axiom inv'2 : forall x : int32 . inv'2 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed int32) =
    [%#span11] true
  
  predicate inv'1 (_x : borrowed int32)
  
  axiom inv'1 : forall x : borrowed int32 . inv'1 x = true
  
  predicate invariant'0 (self : int32) =
    [%#span11] true
  
  predicate inv'0 (_x : int32)
  
  axiom inv'0 : forall x : int32 . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use Core_Panicking_AssertKind_Type as AssertKind'0
  
  use CreusotContracts_GhostPtr_GhostPtrToken_Type as GhostPtrToken'0
  
  function unreachable'0 (_1 : ()) : int32
  
  axiom unreachable'0_spec : forall _1 : () . ([%#span12] false)
   -> ([%#span14] inv'0 (unreachable'0 _1)) && ([%#span13] false)
  
  function unwrap'0 (op : Option'0.t_option int32) : int32
  
  axiom unwrap'0_spec : forall op : Option'0.t_option int32 . ([%#span16] op <> Option'0.C_None)
   -> ([%#span17] inv'7 op)  -> ([%#span19] inv'0 (unwrap'0 op)) && ([%#span18] Option'0.C_Some (unwrap'0 op) = op)
  
  use map.Map
  
  function mk'0 (_m : Map.map opaque_ptr (Option'0.t_option int32)) : FMap'0.t_fmap opaque_ptr int32
  
  function view'0 (self : FMap'0.t_fmap opaque_ptr int32) : Map.map opaque_ptr (Option'0.t_option int32)
  
  axiom view'0_spec : forall self : FMap'0.t_fmap opaque_ptr int32 . ([%#span20] inv'3 self)
   -> ([%#span22] inv'6 (view'0 self)) && ([%#span21] mk'0 (view'0 self) = self)
  
  function get'0 [@inline:trivial] (self : FMap'0.t_fmap opaque_ptr int32) (k : opaque_ptr) : Option'0.t_option int32 =
    [%#span23] Map.get (view'0 self) k
  
  function lookup_unsized'0 [@inline:trivial] (self : FMap'0.t_fmap opaque_ptr int32) (k : opaque_ptr) : int32 =
    [%#span24] unwrap'0 (get'0 self k)
  
  function contains'0 [@inline:trivial] (self : FMap'0.t_fmap opaque_ptr int32) (k : opaque_ptr) : bool =
    [%#span25] get'0 self k <> Option'0.C_None
  
  use prelude.prelude.Int
  
  function addr_logic'0 (self : opaque_ptr) : int
  
  function null_logic'0 (_1 : ()) : opaque_ptr
  
  axiom null_logic'0_spec : forall _1 : () . ([%#span27] forall ptr : opaque_ptr . addr_logic'0 ptr
  = addr_logic'0 (null_logic'0 _1)  -> ptr = null_logic'0 _1)
  && ([%#span26] addr_logic'0 (null_logic'0 _1) = 0)
  
  function shallow_model'0 (self : GhostPtrToken'0.t_ghostptrtoken int32) : FMap'0.t_fmap opaque_ptr int32
  
  axiom shallow_model'0_spec : forall self : GhostPtrToken'0.t_ghostptrtoken int32 . ([%#span29] inv'3 (shallow_model'0 self))
  && ([%#span28] get'0 (shallow_model'0 self) (null_logic'0 ()) = Option'0.C_None)
  
  function shallow_model'1 (self : GhostPtrToken'0.t_ghostptrtoken int32) : FMap'0.t_fmap opaque_ptr int32 =
    [%#span30] shallow_model'0 self
  
  let rec ptr_as_ref'0 (self:GhostPtrToken'0.t_ghostptrtoken int32) (ptr:opaque_ptr) (return'  (ret:int32))= {[@expl:precondition] [%#span31] contains'0 (shallow_model'1 self) ptr}
    any
    [ return' (result:int32)-> {[%#span33] inv'2 result}
      {[%#span32] result = lookup_unsized'0 (shallow_model'1 self) ptr}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed int32) =
    [%#span34] self.final = self.current
  
  let rec swap'0 (x:borrowed int32) (y:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [%#span36] inv'1 y}
    {[@expl:precondition] [%#span35] inv'1 x}
    any
    [ return' (result:())-> {[%#span38] y.final = x.current} {[%#span37] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'3 (self : int32) =
    [%#span39] true
  
  predicate resolve'1 (self : (int32, int32)) =
    [%#span40] resolve'3 (let (a, _) = self in a) /\ resolve'3 (let (_, a) = self in a)
  
  use CreusotContracts_GhostPtr_GhostPtrTokenMut_Type as GhostPtrTokenMut'0
  
  function fin'0 (self : GhostPtrTokenMut'0.t_ghostptrtokenmut int32) : FMap'0.t_fmap opaque_ptr int32
  
  axiom fin'0_spec : forall self : GhostPtrTokenMut'0.t_ghostptrtokenmut int32 . ([%#span42] inv'3 (fin'0 self))
  && ([%#span41] get'0 (fin'0 self) (null_logic'0 ()) = Option'0.C_None)
  
  function cur'0 (self : GhostPtrTokenMut'0.t_ghostptrtokenmut int32) : FMap'0.t_fmap opaque_ptr int32
  
  axiom cur'0_spec : forall self : GhostPtrTokenMut'0.t_ghostptrtokenmut int32 . ([%#span44] inv'3 (cur'0 self))
  && ([%#span43] get'0 (cur'0 self) (null_logic'0 ()) = Option'0.C_None)
  
  predicate resolve'0 (self : GhostPtrTokenMut'0.t_ghostptrtokenmut int32) =
    [%#span45] cur'0 self = fin'0 self
  
  function len'0 (self : FMap'0.t_fmap opaque_ptr int32) : int
  
  axiom len'0_spec : forall self : FMap'0.t_fmap opaque_ptr int32 . ([%#span46] inv'3 self)
   -> ([%#span47] len'0 self >= 0)
  
  use map.Map
  
  function make_sized'0 (self : int32) : int32
  
  axiom make_sized'0_spec : forall self : int32 . ([%#span48] inv'2 self)
   -> ([%#span50] inv'0 (make_sized'0 self)) && ([%#span49] make_sized'0 self = self)
  
  function insert'0 (self : FMap'0.t_fmap opaque_ptr int32) (k : opaque_ptr) (v : int32) : FMap'0.t_fmap opaque_ptr int32
    
  
  axiom insert'0_spec : forall self : FMap'0.t_fmap opaque_ptr int32, k : opaque_ptr, v : int32 . ([%#span51] inv'3 self)
   -> ([%#span52] inv'4 k)
   -> ([%#span53] inv'5 v)
   -> ([%#span57] inv'3 (insert'0 self k v))
  && ([%#span56] not contains'0 self k  -> len'0 (insert'0 self k v) = len'0 self + 1)
  && ([%#span55] contains'0 self k  -> len'0 (insert'0 self k v) = len'0 self)
  && ([%#span54] view'0 (insert'0 self k v) = Map.set (view'0 self) k (Option'0.C_Some (make_sized'0 v)))
  
  function remove'0 (self : FMap'0.t_fmap opaque_ptr int32) (k : opaque_ptr) : FMap'0.t_fmap opaque_ptr int32
  
  axiom remove'0_spec : forall self : FMap'0.t_fmap opaque_ptr int32, k : opaque_ptr . ([%#span58] inv'3 self)
   -> ([%#span59] inv'4 k)
   -> ([%#span62] inv'3 (remove'0 self k))
  && ([%#span61] len'0 (remove'0 self k) = (if contains'0 self k then len'0 self - 1 else len'0 self))
  && ([%#span60] view'0 (remove'0 self k) = Map.set (view'0 self) k (Option'0.C_None))
  
  let rec take_mut'0 (self:borrowed (GhostPtrTokenMut'0.t_ghostptrtokenmut int32)) (ptr:opaque_ptr) (return'  (ret:borrowed int32))= {[@expl:precondition] [%#span63] contains'0 (cur'0 self.current) ptr}
    any
    [ return' (result:borrowed int32)-> {[%#span68] inv'1 result}
      {[%#span67] not contains'0 (fin'0 self.final) ptr}
      {[%#span66] fin'0 self.current = insert'0 (fin'0 self.final) ptr result.final}
      {[%#span65] cur'0 self.final = remove'0 (cur'0 self.current) ptr}
      {[%#span64] result.current = lookup_unsized'0 (cur'0 self.current) ptr}
      (! return' {result}) ]
    
  
  let rec borrow_mut'0 (self:borrowed (GhostPtrToken'0.t_ghostptrtoken int32)) (return'  (ret:GhostPtrTokenMut'0.t_ghostptrtokenmut int32))= any
    [ return' (result:GhostPtrTokenMut'0.t_ghostptrtokenmut int32)-> {[%#span70] fin'0 result
      = shallow_model'0 self.final}
      {[%#span69] cur'0 result = shallow_model'0 self.current}
      (! return' {result}) ]
    
  
  let rec ptr_from_box'0 (self:borrowed (GhostPtrToken'0.t_ghostptrtoken int32)) (val':int32) (return'  (ret:opaque_ptr))= {[@expl:precondition] [%#span71] inv'0 val'}
    any
    [ return' (result:opaque_ptr)-> {[%#span73] shallow_model'0 self.final
      = insert'0 (shallow_model'0 self.current) result val'}
      {[%#span72] not contains'0 (shallow_model'0 self.current) result}
      (! return' {result}) ]
    
  
  use map.Const
  
  function empty'0 (_1 : ()) : FMap'0.t_fmap opaque_ptr int32
  
  axiom empty'0_spec : forall _1 : () . ([%#span76] inv'3 (empty'0 _1))
  && ([%#span75] view'0 (empty'0 _1) = Const.const (Option'0.C_None)) && ([%#span74] len'0 (empty'0 _1) = 0)
  
  let rec new'0 (_1:()) (return'  (ret:GhostPtrToken'0.t_ghostptrtoken int32))= any
    [ return' (result:GhostPtrToken'0.t_ghostptrtoken int32)-> {[%#span77] shallow_model'0 result = empty'0 ()}
      (! return' {result}) ]
    
  
  let rec promoted0 (return'  (ret:int32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_ptr_token7] (1 : int32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : int32 = any_l () ]  [ return' (result:int32)-> return' {result} ] 
  
  let rec promoted1 (return'  (ret:int32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_ptr_token8] (2 : int32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : int32 = any_l () ]  [ return' (result:int32)-> return' {result} ] 
  
  let rec promoted2 (return'  (ret:int32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_ptr_token9] (2 : int32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : int32 = any_l () ]  [ return' (result:int32)-> return' {result} ] 
  
  let rec promoted3 (return'  (ret:int32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_ptr_token10] (1 : int32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : int32 = any_l () ]  [ return' (result:int32)-> return' {result} ] 
  
  let rec test (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#sghost_ptr_token0] ()}
          (fun (_ret':GhostPtrToken'0.t_ghostptrtoken int32) ->  [ &token <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <GhostPtrToken'0.t_ghostptrtoken int32> {token}
          (fun (_ret':borrowed (GhostPtrToken'0.t_ghostptrtoken int32)) ->  [ &_3 <- _ret' ]  [ &token <- _3.final ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = ptr_from_box'0 {_3} {[%#sghost_ptr_token1] (1 : int32)} (fun (_ret':opaque_ptr) ->  [ &ptr1 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <GhostPtrToken'0.t_ghostptrtoken int32> {token}
          (fun (_ret':borrowed (GhostPtrToken'0.t_ghostptrtoken int32)) ->  [ &_6 <- _ret' ]  [ &token <- _6.final ] s1)
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = ptr_from_box'0 {_6} {[%#sghost_ptr_token2] (2 : int32)} (fun (_ret':opaque_ptr) ->  [ &ptr2 <- _ret' ] s1)
      | s1 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <GhostPtrToken'0.t_ghostptrtoken int32> {token}
          (fun (_ret':borrowed (GhostPtrToken'0.t_ghostptrtoken int32)) ->  [ &_9 <- _ret' ]  [ &token <- _9.final ] s1)
      | s1 = borrow_mut'0 {_9} (fun (_ret':GhostPtrTokenMut'0.t_ghostptrtokenmut int32) ->  [ &token_mut <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = Borrow.borrow_mut <GhostPtrTokenMut'0.t_ghostptrtokenmut int32> {token_mut}
          (fun (_ret':borrowed (GhostPtrTokenMut'0.t_ghostptrtokenmut int32)) ->
             [ &_11 <- _ret' ] 
             [ &token_mut <- _11.final ] 
            s1)
      | s1 = take_mut'0 {_11} {ptr1} (fun (_ret':borrowed int32) ->  [ &m1 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = Borrow.borrow_mut <GhostPtrTokenMut'0.t_ghostptrtokenmut int32> {token_mut}
          (fun (_ret':borrowed (GhostPtrTokenMut'0.t_ghostptrtokenmut int32)) ->
             [ &_14 <- _ret' ] 
             [ &token_mut <- _14.final ] 
            s1)
      | s1 = take_mut'0 {_14} {ptr2} (fun (_ret':borrowed int32) ->  [ &m2 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 = -{resolve'0 token_mut}- s1
      | s1 = promoted3 (fun (pr3:int32) ->  [ &_104 <- pr3 ] s2)
      | s2 =  [ &_17 <- (m1.current, _104) ] s3
      | s3 =  [ &left_val <- let (r'0, _) = _17 in r'0 ] s4
      | s4 =  [ &right_val <- let (_, r'1) = _17 in r'1 ] s5
      | s5 = -{resolve'1 _17}- s6
      | s6 = Int32.eq {left_val} {right_val} (fun (_ret':bool) ->  [ &_23 <- _ret' ] s7)
      | s7 = any [ br0 -> {_23 = false} (! bb10) | br1 -> {_23} (! bb9) ]  ]
      
    | bb9 = s0
      [ s0 = promoted2 (fun (pr2:int32) ->  [ &_103 <- pr2 ] s1)
      | s1 =  [ &_36 <- (m2.current, _103) ] s2
      | s2 =  [ &left_val1 <- let (r'0, _) = _36 in r'0 ] s3
      | s3 =  [ &right_val1 <- let (_, r'1) = _36 in r'1 ] s4
      | s4 = -{resolve'1 _36}- s5
      | s5 = Int32.eq {left_val1} {right_val1} (fun (_ret':bool) ->  [ &_42 <- _ret' ] s6)
      | s6 = any [ br0 -> {_42 = false} (! bb12) | br1 -> {_42} (! bb11) ]  ]
      
    | bb11 = s0
      [ s0 = Borrow.borrow_final <int32> {m1.current} {Borrow.get_id m1}
          (fun (_ret':borrowed int32) ->  [ &_55 <- _ret' ]  [ &m1 <- { m1 with current = _55.final ; } ] s1)
      | s1 = Borrow.borrow_final <int32> {m2.current} {Borrow.get_id m2}
          (fun (_ret':borrowed int32) ->  [ &_56 <- _ret' ]  [ &m2 <- { m2 with current = _56.final ; } ] s2)
      | s2 = swap'0 {_55} {_56} (fun (_ret':()) ->  [ &_54 <- _ret' ] s3)
      | s3 = bb13 ]
      
    | bb13 = s0
      [ s0 = -{resolve'2 m2}- s1
      | s1 = -{resolve'2 m1}- s2
      | s2 = ptr_as_ref'0 {token} {ptr1} (fun (_ret':int32) ->  [ &_60 <- _ret' ] s3)
      | s3 = bb14 ]
      
    | bb14 = s0
      [ s0 = promoted1 (fun (pr1:int32) ->  [ &_102 <- pr1 ] s1)
      | s1 =  [ &_58 <- (_60, _102) ] s2
      | s2 =  [ &left_val2 <- let (r'0, _) = _58 in r'0 ] s3
      | s3 =  [ &right_val2 <- let (_, r'1) = _58 in r'1 ] s4
      | s4 = -{resolve'1 _58}- s5
      | s5 = Int32.eq {left_val2} {right_val2} (fun (_ret':bool) ->  [ &_67 <- _ret' ] s6)
      | s6 = any [ br0 -> {_67 = false} (! bb16) | br1 -> {_67} (! bb15) ]  ]
      
    | bb15 = s0 [ s0 = ptr_as_ref'0 {token} {ptr2} (fun (_ret':int32) ->  [ &_82 <- _ret' ] s1) | s1 = bb17 ] 
    | bb17 = s0
      [ s0 = promoted0 (fun (pr0:int32) ->  [ &_101 <- pr0 ] s1)
      | s1 =  [ &_80 <- (_82, _101) ] s2
      | s2 =  [ &left_val3 <- let (r'0, _) = _80 in r'0 ] s3
      | s3 =  [ &right_val3 <- let (_, r'1) = _80 in r'1 ] s4
      | s4 = -{resolve'1 _80}- s5
      | s5 = Int32.eq {left_val3} {right_val3} (fun (_ret':bool) ->  [ &_89 <- _ret' ] s6)
      | s6 = any [ br0 -> {_89 = false} (! bb19) | br1 -> {_89} (! bb18) ]  ]
      
    | bb18 = return' {_0}
    | bb19 = s0
      [ s0 =  [ &kind3 <- AssertKind'0.C_Eq ] s1
      | s1 =  [ &_97 <- left_val3 ] s2
      | s2 =  [ &_99 <- right_val3 ] s3
      | s3 = {[%#smod3] false} any ]
      
    | bb16 = s0
      [ s0 =  [ &kind2 <- AssertKind'0.C_Eq ] s1
      | s1 =  [ &_75 <- left_val2 ] s2
      | s2 =  [ &_77 <- right_val2 ] s3
      | s3 = {[%#smod4] false} any ]
      
    | bb12 = s0
      [ s0 = -{resolve'2 m1}- s1
      | s1 =  [ &kind1 <- AssertKind'0.C_Eq ] s2
      | s2 =  [ &_50 <- left_val1 ] s3
      | s3 =  [ &_52 <- right_val1 ] s4
      | s4 = {[%#smod5] false} any ]
      
    | bb10 = s0
      [ s0 = -{resolve'2 m2}- s1
      | s1 =  [ &kind <- AssertKind'0.C_Eq ] s2
      | s2 =  [ &_31 <- left_val ] s3
      | s3 =  [ &_33 <- right_val ] s4
      | s4 = {[%#smod6] false} any ]
       ]
    )
    [ & _0 : () = any_l ()
    | & token : GhostPtrToken'0.t_ghostptrtoken int32 = any_l ()
    | & ptr1 : opaque_ptr = any_l ()
    | & _3 : borrowed (GhostPtrToken'0.t_ghostptrtoken int32) = any_l ()
    | & ptr2 : opaque_ptr = any_l ()
    | & _6 : borrowed (GhostPtrToken'0.t_ghostptrtoken int32) = any_l ()
    | & token_mut : GhostPtrTokenMut'0.t_ghostptrtokenmut int32 = any_l ()
    | & _9 : borrowed (GhostPtrToken'0.t_ghostptrtoken int32) = any_l ()
    | & m1 : borrowed int32 = any_l ()
    | & _11 : borrowed (GhostPtrTokenMut'0.t_ghostptrtokenmut int32) = any_l ()
    | & m2 : borrowed int32 = any_l ()
    | & _14 : borrowed (GhostPtrTokenMut'0.t_ghostptrtokenmut int32) = any_l ()
    | & _17 : (int32, int32) = any_l ()
    | & left_val : int32 = any_l ()
    | & right_val : int32 = any_l ()
    | & _23 : bool = any_l ()
    | & kind : AssertKind'0.t_assertkind = any_l ()
    | & _31 : int32 = any_l ()
    | & _33 : int32 = any_l ()
    | & _36 : (int32, int32) = any_l ()
    | & left_val1 : int32 = any_l ()
    | & right_val1 : int32 = any_l ()
    | & _42 : bool = any_l ()
    | & kind1 : AssertKind'0.t_assertkind = any_l ()
    | & _50 : int32 = any_l ()
    | & _52 : int32 = any_l ()
    | & _54 : () = any_l ()
    | & _55 : borrowed int32 = any_l ()
    | & _56 : borrowed int32 = any_l ()
    | & _58 : (int32, int32) = any_l ()
    | & _60 : int32 = any_l ()
    | & left_val2 : int32 = any_l ()
    | & right_val2 : int32 = any_l ()
    | & _67 : bool = any_l ()
    | & kind2 : AssertKind'0.t_assertkind = any_l ()
    | & _75 : int32 = any_l ()
    | & _77 : int32 = any_l ()
    | & _80 : (int32, int32) = any_l ()
    | & _82 : int32 = any_l ()
    | & left_val3 : int32 = any_l ()
    | & right_val3 : int32 = any_l ()
    | & _89 : bool = any_l ()
    | & kind3 : AssertKind'0.t_assertkind = any_l ()
    | & _97 : int32 = any_l ()
    | & _99 : int32 = any_l ()
    | & _101 : int32 = any_l ()
    | & _102 : int32 = any_l ()
    | & _103 : int32 = any_l ()
    | & _104 : int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
