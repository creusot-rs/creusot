module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 9223372036854775807
end
module FilterPositive_NumOfPos_Interface
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  function num_of_pos (i : int) (j : int) (t : Seq.seq int32) : int
end
module FilterPositive_NumOfPos
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  function num_of_pos [#"../filter_positive.rs" 34 0 49] (i : int) (j : int) (t : Seq.seq int32) : int
  axiom def : forall i : int, j : int, t : Seq.seq int32 . num_of_pos i j t = ([#"../filter_positive.rs" 34 0 49] if i >= j then
    0
  else
    if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos i (j - 1) t + 1 else num_of_pos i (j - 1) t
  )
  axiom num_of_pos_spec : forall i : int, j : int, t : Seq.seq int32 . true
end
module FilterPositive_NumOfPos_Impl
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  let rec ghost function num_of_pos (i : int) (j : int) (t : Seq.seq int32) : int
    variant {[#"../filter_positive.rs" 33 0 15] j - i}
    
   =
    [#"../filter_positive.rs" 34 0 49] if i >= j then
      0
    else
      if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos i (j - 1) t + 1 else num_of_pos i (j - 1) t
    
end
module FilterPositive_LemmaNumOfPosStrictlyIncreasing_Interface
  use seq.Seq
  use mach.int.Int32
  use mach.int.Int
  clone FilterPositive_NumOfPos_Interface as NumOfPos0 with axiom .
  function lemma_num_of_pos_strictly_increasing (i : int) (t : Seq.seq int32) : ()
end
module FilterPositive_LemmaNumOfPosStrictlyIncreasing
  use seq.Seq
  use mach.int.Int32
  use mach.int.Int
  clone FilterPositive_NumOfPos_Interface as NumOfPos0 with axiom .
  function lemma_num_of_pos_strictly_increasing [#"../filter_positive.rs" 76 0 60] (i : int) (t : Seq.seq int32) : () =
    [#"../filter_positive.rs" 76 0 60] ()
  axiom lemma_num_of_pos_strictly_increasing_spec : forall i : int, t : Seq.seq int32 . ([#"../filter_positive.rs" 74 0 22] Int32.to_int (Seq.get t i) > 0) -> ([#"../filter_positive.rs" 73 0 34] 0 <= i && i < Seq.length t) -> ([#"../filter_positive.rs" 75 0 51] NumOfPos0.num_of_pos 0 i t < NumOfPos0.num_of_pos 0 (i + 1) t)
end
module FilterPositive_LemmaNumOfPosStrictlyIncreasing_Impl
  use seq.Seq
  use mach.int.Int32
  use mach.int.Int
  clone FilterPositive_NumOfPos as NumOfPos0 with axiom .
  let rec ghost function lemma_num_of_pos_strictly_increasing (i : int) (t : Seq.seq int32) : ()
    requires {[#"../filter_positive.rs" 74 0 22] Int32.to_int (Seq.get t i) > 0}
    requires {[#"../filter_positive.rs" 73 0 34] 0 <= i && i < Seq.length t}
    ensures { [#"../filter_positive.rs" 75 0 51] NumOfPos0.num_of_pos 0 i t < NumOfPos0.num_of_pos 0 (i + 1) t }
    
   =
    [#"../filter_positive.rs" 76 0 60] ()
end
module FilterPositive_LemmaNumOfPosIncreasing_Interface
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  clone FilterPositive_NumOfPos_Interface as NumOfPos0 with axiom .
  function lemma_num_of_pos_increasing (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
end
module FilterPositive_LemmaNumOfPosIncreasing
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  clone FilterPositive_NumOfPos_Interface as NumOfPos0 with axiom .
  function lemma_num_of_pos_increasing [#"../filter_positive.rs" 62 0 67] (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
    
  axiom def : forall i : int, j : int, k : int, t : Seq.seq int32 . lemma_num_of_pos_increasing i j k t = ([#"../filter_positive.rs" 62 0 67] if j < k then
    lemma_num_of_pos_increasing i (j + 1) k t
  else
    ()
  )
  axiom lemma_num_of_pos_increasing_spec : forall i : int, j : int, k : int, t : Seq.seq int32 . ([#"../filter_positive.rs" 59 0 19] j <= k) -> ([#"../filter_positive.rs" 60 0 50] NumOfPos0.num_of_pos i j t <= NumOfPos0.num_of_pos i k t)
end
module FilterPositive_LemmaNumOfPosIncreasing_Impl
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  clone FilterPositive_NumOfPos as NumOfPos0 with axiom .
  let rec ghost function lemma_num_of_pos_increasing (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
    requires {[#"../filter_positive.rs" 59 0 19] j <= k}
    ensures { [#"../filter_positive.rs" 60 0 50] NumOfPos0.num_of_pos i j t <= NumOfPos0.num_of_pos i k t }
    variant {[#"../filter_positive.rs" 61 0 15] k - j}
    
   =
    [#"../filter_positive.rs" 62 0 67] if j < k then lemma_num_of_pos_increasing i (j + 1) k t else ()
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.alloc_vec_vec t a,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.alloc_vec_vec t a,
  type modelTy = ModelTy0.modelTy
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self
  type idx
  type output
end
module Core_Ops_Index_Index_Index_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_FromElem_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Alloc_Vec_FromElem
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl1_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl1_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) =
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module Alloc_Vec_Impl16_Output
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  type output  =
    Output0.output
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone Core_Slice_Index_SliceIndex_Output as Output2 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Output as Output0 with type t = t, type i = i, type a = a, type Output0.output = Output2.output
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.alloc_vec_vec t a, type idx = i,
  type output = Output0.output
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone Alloc_Vec_Impl16_Output as Output1 with type t = t, type i = i, type a = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output1.output
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Std1_Vec_Impl1
  type t
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i && i <> UInt64.to_int self && i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  =
    t
end
module CreusotContracts_Std1_Slice_Impl3
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere1 with type self = usize,
  type t = seq t, predicate resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue1 with type self = usize,
  type t = seq t, predicate has_value = HasValue0.has_value, type ModelTy0.modelTy = ModelTy0.modelTy,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds1 with type self = usize,
  type t = seq t, predicate in_bounds = InBounds0.in_bounds, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Core_Slice_Index_SliceIndex_Get_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Get
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone Core_Slice_Index_Impl2_IndexMut_Interface as IndexMut0 with type t = t
  clone Core_Slice_Index_Impl2_Index_Interface as Index0 with type t = t
  clone Core_Slice_Index_Impl2_GetUncheckedMut_Interface as GetUncheckedMut0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface as GetUncheckedMut1 with type self = usize,
  type t = seq t, val get_unchecked_mut = GetUncheckedMut0.get_unchecked_mut
  clone Core_Slice_Index_Impl2_GetUnchecked_Interface as GetUnchecked0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUnchecked_Interface as GetUnchecked1 with type self = usize, type t = seq t,
  val get_unchecked = GetUnchecked0.get_unchecked
  clone Core_Slice_Index_Impl2_GetMut_Interface as GetMut0 with type t = t
  clone Core_Slice_Index_Impl2_Get_Interface as Get0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone Core_Slice_Index_SliceIndex_IndexMut_Interface as IndexMut1 with type self = usize, type t = seq t,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Index_Interface as Index1 with type self = usize, type t = seq t,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_GetMut_Interface as GetMut1 with type self = usize, type t = seq t,
  val get_mut = GetMut0.get_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Get_Interface as Get1 with type self = usize, type t = seq t, val get = Get0.get,
  type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Output as Output1 with type self = usize, type t = seq t,
  type output = Output0.output
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.Int64
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.Int64
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . Seq.length (model self) <= 9223372036854775807 && model self = Prelude.id self
end
module CreusotContracts_Std1_Slice_Impl0
  type t
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model0 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = seq t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = seq t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module FilterPositive_M_Interface
  use Type
  use mach.int.Int
  use mach.int.Int32
  val m [@cfg:stackify] (t : Type.alloc_vec_vec int32 (Type.alloc_alloc_global)) : Type.alloc_vec_vec int32 (Type.alloc_alloc_global)
    
end
module FilterPositive_M
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  clone FilterPositive_NumOfPos as NumOfPos0 with axiom .
  clone FilterPositive_LemmaNumOfPosIncreasing as LemmaNumOfPosIncreasing0 with function NumOfPos0.num_of_pos = NumOfPos0.num_of_pos,
  axiom .
  clone FilterPositive_LemmaNumOfPosStrictlyIncreasing as LemmaNumOfPosStrictlyIncreasing0 with function NumOfPos0.num_of_pos = NumOfPos0.num_of_pos,
  axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = int32, type a = Type.alloc_alloc_global, axiom .
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = int32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = int32
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = int32
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = int32
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = int32
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = int32
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = int32
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve1 with type t = int32, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = int32, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = int32, function Model0.model = Model0.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = int32, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = int32, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  let rec cfg m [@cfg:stackify] [#"../filter_positive.rs" 79 0 29] (t : Type.alloc_vec_vec int32 (Type.alloc_alloc_global)) : Type.alloc_vec_vec int32 (Type.alloc_alloc_global)
    
   =
  var _0 : Type.alloc_vec_vec int32 (Type.alloc_alloc_global);
  var t_1 : Type.alloc_vec_vec int32 (Type.alloc_alloc_global);
  var _2 : ();
  var count_3 : usize;
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.alloc_vec_vec int32 (Type.alloc_alloc_global);
  var _11 : ();
  var _12 : bool;
  var _13 : int32;
  var _14 : int32;
  var _15 : Type.alloc_vec_vec int32 (Type.alloc_alloc_global);
  var _16 : usize;
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var u_20 : Type.alloc_vec_vec int32 (Type.alloc_alloc_global);
  var _21 : usize;
  var _22 : ();
  var _23 : bool;
  var _24 : usize;
  var _25 : usize;
  var _26 : Type.alloc_vec_vec int32 (Type.alloc_alloc_global);
  var _27 : ();
  var _28 : bool;
  var _29 : int32;
  var _30 : int32;
  var _31 : Type.alloc_vec_vec int32 (Type.alloc_alloc_global);
  var _32 : usize;
  var _33 : ();
  var _34 : ();
  var _35 : int32;
  var _36 : int32;
  var _37 : Type.alloc_vec_vec int32 (Type.alloc_alloc_global);
  var _38 : usize;
  var _39 : borrowed int32;
  var _40 : borrowed (Type.alloc_vec_vec int32 (Type.alloc_alloc_global));
  var _41 : usize;
  var _42 : ();
  var _43 : ();
  var _44 : ();
  {
    t_1 <- t;
    goto BB0
  }
  BB0 {
    count_3 <- (0 : usize);
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant loop_bound { [#"../filter_positive.rs" 82 4 46] UInt64.to_int i_4 <= Seq.length (Model0.model t_1) };
    invariant count_bound { [#"../filter_positive.rs" 83 4 43] UInt64.to_int count_3 <= UInt64.to_int i_4 };
    invariant num { [#"../filter_positive.rs" 84 4 52] UInt64.to_int count_3 = NumOfPos0.num_of_pos 0 (UInt64.to_int i_4) (Model0.model t_1) };
    _8 <- i_4;
    _10 <- t_1;
    _9 <- ([#"../filter_positive.rs" 86 14 21] Len0.len _10);
    goto BB4
  }
  BB4 {
    _7 <- ([#"../filter_positive.rs" 86 10 21] _8 < _9);
    switch (_7)
      | False -> goto BB10
      | _ -> goto BB5
      end
  }
  BB5 {
    _15 <- t_1;
    _16 <- i_4;
    _14 <- ([#"../filter_positive.rs" 87 11 15] Index0.index _15 _16);
    goto BB6
  }
  BB6 {
    _13 <- _14;
    _12 <- ([#"../filter_positive.rs" 87 11 19] _13 > (0 : int32));
    switch (_12)
      | False -> goto BB8
      | _ -> goto BB7
      end
  }
  BB7 {
    count_3 <- ([#"../filter_positive.rs" 88 12 22] count_3 + (1 : usize));
    _11 <- ();
    goto BB9
  }
  BB8 {
    _11 <- ();
    goto BB9
  }
  BB9 {
    i_4 <- ([#"../filter_positive.rs" 90 8 14] i_4 + (1 : usize));
    _6 <- ();
    goto BB3
  }
  BB10 {
    _5 <- ();
    _21 <- count_3;
    u_20 <- ([#"../filter_positive.rs" 92 26 50] FromElem0.from_elem (0 : int32) _21);
    goto BB11
  }
  BB11 {
    count_3 <- (0 : usize);
    i_4 <- (0 : usize);
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    invariant num { [#"../filter_positive.rs" 97 4 52] UInt64.to_int count_3 = NumOfPos0.num_of_pos 0 (UInt64.to_int i_4) (Model0.model t_1) };
    invariant ulength { [#"../filter_positive.rs" 98 4 68] Seq.length (Model0.model u_20) = NumOfPos0.num_of_pos 0 (Seq.length (Model0.model t_1)) (Model0.model t_1) };
    _24 <- i_4;
    _26 <- t_1;
    _25 <- ([#"../filter_positive.rs" 100 14 21] Len0.len _26);
    goto BB15
  }
  BB15 {
    _23 <- ([#"../filter_positive.rs" 100 10 21] _24 < _25);
    switch (_23)
      | False -> goto BB25
      | _ -> goto BB16
      end
  }
  BB16 {
    _31 <- t_1;
    _32 <- i_4;
    _30 <- ([#"../filter_positive.rs" 101 11 15] Index0.index _31 _32);
    goto BB17
  }
  BB17 {
    _29 <- _30;
    _28 <- ([#"../filter_positive.rs" 101 11 19] _29 > (0 : int32));
    switch (_28)
      | False -> goto BB23
      | _ -> goto BB18
      end
  }
  BB18 {
    assert { [#"../filter_positive.rs" 103 12 13] let _ = LemmaNumOfPosStrictlyIncreasing0.lemma_num_of_pos_strictly_increasing (UInt64.to_int i_4) (Model0.model u_20) in NumOfPos0.num_of_pos 0 (UInt64.to_int i_4) (Model0.model t_1) < NumOfPos0.num_of_pos 0 (UInt64.to_int i_4 + 1) (Model0.model t_1) };
    goto BB19
  }
  BB19 {
    _33 <- ();
    assert { [#"../filter_positive.rs" 107 12 13] let _ = LemmaNumOfPosIncreasing0.lemma_num_of_pos_increasing 0 (UInt64.to_int i_4 + 1) (Seq.length (Model0.model t_1)) (Model0.model t_1) in UInt64.to_int count_3 < Seq.length (Model0.model u_20) };
    goto BB20
  }
  BB20 {
    _34 <- ();
    _37 <- t_1;
    _38 <- i_4;
    _36 <- ([#"../filter_positive.rs" 111 23 27] Index0.index _37 _38);
    goto BB21
  }
  BB21 {
    _35 <- _36;
    _40 <- borrow_mut u_20;
    u_20 <-  ^ _40;
    _41 <- count_3;
    _39 <- ([#"../filter_positive.rs" 111 12 20] IndexMut0.index_mut _40 _41);
    goto BB22
  }
  BB22 {
    _39 <- { _39 with current = _35 };
    assume { Resolve0.resolve _39 };
    count_3 <- ([#"../filter_positive.rs" 112 12 22] count_3 + (1 : usize));
    _27 <- ();
    goto BB24
  }
  BB23 {
    _27 <- ();
    goto BB24
  }
  BB24 {
    i_4 <- ([#"../filter_positive.rs" 114 8 14] i_4 + (1 : usize));
    _6 <- ();
    goto BB14
  }
  BB25 {
    _22 <- ();
    assume { Resolve1.resolve _0 };
    _0 <- u_20;
    goto BB26
  }
  BB26 {
    goto BB27
  }
  BB27 {
    assume { Resolve1.resolve t_1 };
    return _0
  }
  
end
module FilterPositive_Main_Interface
  val main [@cfg:stackify] (_ : ()) : ()
    requires {[#"../filter_positive.rs" 120 0 18] false}
    
end
module FilterPositive_Main
  val main [@cfg:stackify] (_ : ()) : ()
    requires {[#"../filter_positive.rs" 120 0 18] false}
    
end
