
module FilterPositive_NumOfPos_Impl
  use prelude.Int32
  use seq.Seq
  use prelude.Int32
  use seq.Seq
  use prelude.Int
  constant i  : int
  constant j  : int
  constant t  : Seq.seq int32
  function num_of_pos [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
  goal vc_num_of_pos : match i >= j with
    | True -> true
    | False -> match Int32.to_int (Seq.get t (j - 1)) > 0 with
      | True -> 0 <= ([#"../filter_positive.rs" 36 10 36 13] j - i) /\ ([#"../filter_positive.rs" 36 10 36 13] j - 1 - i) < ([#"../filter_positive.rs" 36 10 36 13] j - i)
      | False -> 0 <= ([#"../filter_positive.rs" 36 10 36 13] j - i) /\ ([#"../filter_positive.rs" 36 10 36 13] j - 1 - i) < ([#"../filter_positive.rs" 36 10 36 13] j - i)
      end
    end
end
module FilterPositive_LemmaNumOfPosIncreasing_Impl
  use prelude.Int32
  use seq.Seq
  use prelude.Int32
  use seq.Seq
  use prelude.Int
  function num_of_pos0 [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
  axiom num_of_pos0_def : forall i : int, j : int, t : Seq.seq int32 . num_of_pos0 i j t = ([#"../filter_positive.rs" 38 4 46 5] if i >= j then
    0
  else
    if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos0 i (j - 1) t + 1 else num_of_pos0 i (j - 1) t
  )
  val num_of_pos0 [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
    ensures { result = num_of_pos0 i j t }
    
  constant i  : int
  constant j  : int
  constant k  : int
  constant t  : Seq.seq int32
  function lemma_num_of_pos_increasing [#"../filter_positive.rs" 65 0 65 67] (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
    
  goal vc_lemma_num_of_pos_increasing : ([#"../filter_positive.rs" 62 11 62 17] j <= k)
   -> match j < k with
    | True -> (([#"../filter_positive.rs" 62 11 62 17] j + 1 <= k) /\ 0 <= ([#"../filter_positive.rs" 64 10 64 13] k - j) /\ ([#"../filter_positive.rs" 64 10 64 13] k - (j + 1)) < ([#"../filter_positive.rs" 64 10 64 13] k - j)) /\ (([#"../filter_positive.rs" 63 10 63 48] num_of_pos0 i (j + 1) t <= num_of_pos0 i k t)
     -> ([#"../filter_positive.rs" 63 10 63 48] num_of_pos0 i j t <= num_of_pos0 i k t))
    | False -> [#"../filter_positive.rs" 63 10 63 48] num_of_pos0 i j t <= num_of_pos0 i k t
    end
end
module FilterPositive_LemmaNumOfPosStrictlyIncreasing_Impl
  use prelude.Int32
  use seq.Seq
  use prelude.Int32
  use seq.Seq
  use prelude.Int
  function num_of_pos0 [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
  axiom num_of_pos0_def : forall i : int, j : int, t : Seq.seq int32 . num_of_pos0 i j t = ([#"../filter_positive.rs" 38 4 46 5] if i >= j then
    0
  else
    if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos0 i (j - 1) t + 1 else num_of_pos0 i (j - 1) t
  )
  val num_of_pos0 [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
    ensures { result = num_of_pos0 i j t }
    
  use seq.Seq
  constant i  : int
  constant t  : Seq.seq int32
  function lemma_num_of_pos_strictly_increasing [#"../filter_positive.rs" 79 0 79 60] (i : int) (t : Seq.seq int32) : ()
  goal vc_lemma_num_of_pos_strictly_increasing : ([#"../filter_positive.rs" 77 11 77 20] Int32.to_int (Seq.get t i) > 0)
   -> ([#"../filter_positive.rs" 76 11 76 32] 0 <= i /\ i < Seq.length t)
   -> ([#"../filter_positive.rs" 78 10 78 49] num_of_pos0 0 i t < num_of_pos0 0 (i + 1) t)
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module FilterPositive_M
  use prelude.Int32
  use prelude.Borrow
  predicate invariant7 (self : borrowed int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : borrowed int32) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed int32)
  val inv7 (_x : borrowed int32) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed int32 . inv7 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant6 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)))
  val inv6 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) . inv6 x = true
  predicate invariant5 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : int32) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : int32)
  val inv5 (_x : int32) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : int32 . inv5 x = true
  use prelude.UIntSize
  predicate invariant4 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : usize) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : usize)
  val inv4 (_x : usize) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : usize . inv4 x = true
  predicate invariant3 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : int32) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : int32)
  val inv3 (_x : int32) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : int32 . inv3 x = true
  predicate invariant2 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv2 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv2 x = true
  use seq.Seq
  predicate invariant1 (self : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Seq.seq int32) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq int32)
  val inv1 (_x : Seq.seq int32) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq int32 . inv1 x = true
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv1 (shallow_model1 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model1 self) <= UIntSize.to_int max0)
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv1 (shallow_model1 self)
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  predicate resolve1 (self : borrowed int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed int32) : bool
    ensures { result = resolve1 self }
    
  use prelude.Slice
  use seq.Seq
  predicate resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq int32) (fin : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq int32) (fin : Seq.seq int32) : bool
    ensures { result = resolve_elswhere0 self old' fin }
    
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq int32) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model1 ( * self)
  val shallow_model4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    ensures { result = shallow_model4 self }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (index : usize) : borrowed int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds0 index (shallow_model4 self)}
    requires {inv6 self}
    requires {inv4 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value0 index (shallow_model4 self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value0 index (shallow_model1 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model4 self) (shallow_model1 ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model1 ( ^ self)) = Seq.length (shallow_model4 self) }
    ensures { inv7 result }
    
  use prelude.Int32
  function num_of_pos0 [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
  axiom num_of_pos0_def : forall i : int, j : int, t : Seq.seq int32 . num_of_pos0 i j t = ([#"../filter_positive.rs" 38 4 46 5] if i >= j then
    0
  else
    if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos0 i (j - 1) t + 1 else num_of_pos0 i (j - 1) t
  )
  val num_of_pos0 [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
    ensures { result = num_of_pos0 i j t }
    
  function lemma_num_of_pos_increasing0 [#"../filter_positive.rs" 65 0 65 67] (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
    
  axiom lemma_num_of_pos_increasing0_def : forall i : int, j : int, k : int, t : Seq.seq int32 . lemma_num_of_pos_increasing0 i j k t = ([#"../filter_positive.rs" 67 8 69 9] if j < k then
    lemma_num_of_pos_increasing0 i (j + 1) k t
  else
    ()
  )
  val lemma_num_of_pos_increasing0 [#"../filter_positive.rs" 65 0 65 67] (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
    requires {[#"../filter_positive.rs" 62 11 62 17] j <= k}
    ensures { result = lemma_num_of_pos_increasing0 i j k t }
    
  axiom lemma_num_of_pos_increasing0_spec : forall i : int, j : int, k : int, t : Seq.seq int32 . ([#"../filter_positive.rs" 62 11 62 17] j <= k)
   -> ([#"../filter_positive.rs" 63 10 63 48] num_of_pos0 i j t <= num_of_pos0 i k t)
  function lemma_num_of_pos_strictly_increasing0 [#"../filter_positive.rs" 79 0 79 60] (i : int) (t : Seq.seq int32) : ()
    
   =
    [#"../filter_positive.rs" 75 0 75 8] ()
  val lemma_num_of_pos_strictly_increasing0 [#"../filter_positive.rs" 79 0 79 60] (i : int) (t : Seq.seq int32) : ()
    requires {[#"../filter_positive.rs" 76 11 76 32] 0 <= i /\ i < Seq.length t}
    requires {[#"../filter_positive.rs" 77 11 77 20] Int32.to_int (Seq.get t i) > 0}
    ensures { result = lemma_num_of_pos_strictly_increasing0 i t }
    
  axiom lemma_num_of_pos_strictly_increasing0_spec : forall i : int, t : Seq.seq int32 . ([#"../filter_positive.rs" 76 11 76 32] 0 <= i /\ i < Seq.length t)
   -> ([#"../filter_positive.rs" 77 11 77 20] Int32.to_int (Seq.get t i) > 0)
   -> ([#"../filter_positive.rs" 78 10 78 49] num_of_pos0 0 i t < num_of_pos0 0 (i + 1) t)
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32 =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model1 self
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    ensures { result = shallow_model3 self }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (index : usize) : int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model3 self)}
    requires {inv2 self}
    requires {inv4 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model3 self) result }
    ensures { inv5 result }
    
  predicate resolve2 (self : int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 45 8 45 12] true
  val resolve2 (self : int32) : bool
    ensures { result = resolve2 self }
    
  function index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model1 self) ix
  val index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    ensures { result = index_logic1 self ix }
    
  predicate resolve0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i /\ i < Seq.length (shallow_model1 self)
     -> resolve2 (index_logic1 self i)
  val resolve0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve0 self }
    
  val from_elem0 (elem : int32) (n : usize) : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    requires {inv3 elem}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 157 22 157 41] Seq.length (shallow_model1 result) = UIntSize.to_int n }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 158 12 158 78] forall i : int . 0 <= i /\ i < UIntSize.to_int n
     -> index_logic1 result i = elem }
    ensures { inv0 result }
    
  val len1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv2 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result = Seq.length (shallow_model3 self) }
    
  let rec cfg m [#"../filter_positive.rs" 82 0 82 33] [@cfg:stackify] [@cfg:subregion_analysis] (t : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var t : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) = t;
  var count : usize;
  var i : usize;
  var _9 : ();
  var _10 : bool;
  var _12 : usize;
  var _14 : ();
  var _15 : bool;
  var _17 : int32;
  var u : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var _28 : bool;
  var _30 : usize;
  var _32 : ();
  var _33 : bool;
  var _35 : int32;
  var _43 : int32;
  var _46 : borrowed int32;
  var _47 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
  {
    goto BB0
  }
  BB0 {
    [#"../filter_positive.rs" 83 27 83 28] count <- ([#"../filter_positive.rs" 83 27 83 28] (0 : usize));
    [#"../filter_positive.rs" 84 23 84 24] i <- ([#"../filter_positive.rs" 84 23 84 24] (0 : usize));
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant { [#"../filter_positive.rs" 85 16 85 30] UIntSize.to_int i <= Seq.length (shallow_model1 t) };
    invariant { [#"../filter_positive.rs" 86 16 86 28] UIntSize.to_int count <= UIntSize.to_int i };
    invariant { [#"../filter_positive.rs" 87 16 87 45] UIntSize.to_int count = num_of_pos0 0 (UIntSize.to_int i) (shallow_model1 t) };
    goto BB4
  }
  BB4 {
    [#"../filter_positive.rs" 89 14 89 21] _12 <- ([#"../filter_positive.rs" 89 14 89 21] len1 t);
    goto BB5
  }
  BB5 {
    [#"../filter_positive.rs" 89 10 89 21] _10 <- i < _12;
    _12 <- any usize;
    switch (_10)
      | False -> goto BB11
      | True -> goto BB6
      end
  }
  BB6 {
    [#"../filter_positive.rs" 90 12 90 15] _17 <- ([#"../filter_positive.rs" 90 12 90 15] index0 t i);
    goto BB7
  }
  BB7 {
    [#"../filter_positive.rs" 90 11 90 19] _15 <- _17 > ([#"../filter_positive.rs" 90 18 90 19] (0 : int32));
    switch (_15)
      | False -> goto BB9
      | True -> goto BB8
      end
  }
  BB8 {
    [#"../filter_positive.rs" 91 12 91 22] count <- count + ([#"../filter_positive.rs" 91 21 91 22] (1 : usize));
    [#"../filter_positive.rs" 91 12 91 22] _14 <- ([#"../filter_positive.rs" 91 12 91 22] ());
    goto BB10
  }
  BB9 {
    [#"../filter_positive.rs" 92 9 92 9] _14 <- ([#"../filter_positive.rs" 92 9 92 9] ());
    goto BB10
  }
  BB10 {
    [#"../filter_positive.rs" 93 8 93 14] i <- i + ([#"../filter_positive.rs" 93 13 93 14] (1 : usize));
    [#"../filter_positive.rs" 89 22 94 5] _9 <- ([#"../filter_positive.rs" 89 22 94 5] ());
    goto BB3
  }
  BB11 {
    [#"../filter_positive.rs" 95 26 95 40] u <- ([#"../filter_positive.rs" 95 26 95 40] from_elem0 ([#"../filter_positive.rs" 95 31 95 32] (0 : int32)) count);
    goto BB12
  }
  BB12 {
    [#"../filter_positive.rs" 96 4 96 13] count <- ([#"../filter_positive.rs" 96 12 96 13] (0 : usize));
    [#"../filter_positive.rs" 98 4 98 9] i <- ([#"../filter_positive.rs" 98 8 98 9] (0 : usize));
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    invariant { [#"../filter_positive.rs" 99 16 99 45] UIntSize.to_int count = num_of_pos0 0 (UIntSize.to_int i) (shallow_model1 t) };
    invariant { [#"../filter_positive.rs" 100 16 100 53] Seq.length (shallow_model1 u) = num_of_pos0 0 (Seq.length (shallow_model1 t)) (shallow_model1 t) };
    goto BB16
  }
  BB16 {
    [#"../filter_positive.rs" 102 14 102 21] _30 <- ([#"../filter_positive.rs" 102 14 102 21] len1 t);
    goto BB17
  }
  BB17 {
    [#"../filter_positive.rs" 102 10 102 21] _28 <- i < _30;
    _30 <- any usize;
    switch (_28)
      | False -> goto BB27
      | True -> goto BB18
      end
  }
  BB18 {
    [#"../filter_positive.rs" 103 12 103 15] _35 <- ([#"../filter_positive.rs" 103 12 103 15] index0 t i);
    goto BB19
  }
  BB19 {
    [#"../filter_positive.rs" 103 11 103 19] _33 <- _35 > ([#"../filter_positive.rs" 103 18 103 19] (0 : int32));
    switch (_33)
      | False -> goto BB25
      | True -> goto BB20
      end
  }
  BB20 {
    assert { [@expl:assertion] [#"../filter_positive.rs" 106 16 106 59] let _ = lemma_num_of_pos_strictly_increasing0 (UIntSize.to_int i) (shallow_model1 u) in num_of_pos0 0 (UIntSize.to_int i) (shallow_model1 t) < num_of_pos0 0 (UIntSize.to_int i + 1) (shallow_model1 t) };
    goto BB21
  }
  BB21 {
    assert { [@expl:assertion] [#"../filter_positive.rs" 110 16 110 63] let _ = lemma_num_of_pos_increasing0 0 (UIntSize.to_int i + 1) (Seq.length (shallow_model1 t)) (shallow_model1 t) in UIntSize.to_int count < Seq.length (shallow_model1 u) };
    goto BB22
  }
  BB22 {
    [#"../filter_positive.rs" 113 24 113 27] _43 <- ([#"../filter_positive.rs" 113 24 113 27] index0 t i);
    goto BB23
  }
  BB23 {
    [#"../filter_positive.rs" 113 12 113 13] _47 <- Borrow.borrow_mut u;
    [#"../filter_positive.rs" 113 12 113 13] u <-  ^ _47;
    [#"../filter_positive.rs" 113 13 113 20] _46 <- ([#"../filter_positive.rs" 113 13 113 20] index_mut0 _47 count);
    _47 <- any borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
    goto BB24
  }
  BB24 {
    [#"../filter_positive.rs" 113 12 113 27] _46 <- { _46 with current = _43 ; };
    assume { resolve1 _46 };
    [#"../filter_positive.rs" 114 12 114 22] count <- count + ([#"../filter_positive.rs" 114 21 114 22] (1 : usize));
    [#"../filter_positive.rs" 103 20 115 9] _32 <- ([#"../filter_positive.rs" 103 20 115 9] ());
    goto BB26
  }
  BB25 {
    [#"../filter_positive.rs" 115 9 115 9] _32 <- ([#"../filter_positive.rs" 115 9 115 9] ());
    goto BB26
  }
  BB26 {
    [#"../filter_positive.rs" 116 8 116 14] i <- i + ([#"../filter_positive.rs" 116 13 116 14] (1 : usize));
    [#"../filter_positive.rs" 102 22 117 5] _9 <- ([#"../filter_positive.rs" 102 22 117 5] ());
    goto BB15
  }
  BB27 {
    assume { resolve0 t };
    [#"../filter_positive.rs" 118 11 118 12] _0 <- u;
    u <- any Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
