
module SumOfOdds_SumOfOdd_Impl
  use prelude.Int
  let rec ghost function sum_of_odd [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
    variant {[#"../sum_of_odds.rs" 17 10 17 11] x}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../sum_of_odds.rs" 16 0 16 8] if pure {x <= 0} then 0 else sum_of_odd (x - 1) + 2 * x - 1
end
module SumOfOdds_SumOfOddIsSqr_Impl
  use prelude.Int
  function sqr0 [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [#"../sum_of_odds.rs" 8 4 8 9] x * x
  val sqr0 [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int
    ensures { result = sqr0 x }
    
  function sum_of_odd0 [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  axiom sum_of_odd0_def : forall x : int . sum_of_odd0 x = ([#"../sum_of_odds.rs" 16 0 16 8] if x <= 0 then
    0
  else
    sum_of_odd0 (x - 1) + 2 * x - 1
  )
  val sum_of_odd0 [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
    ensures { result = sum_of_odd0 x }
    
  let rec ghost function sum_of_odd_is_sqr [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
    requires {[#"../sum_of_odds.rs" 27 11 27 17] x >= 0}
    ensures { [#"../sum_of_odds.rs" 28 10 28 33] sum_of_odd0 x = sqr0 x }
    variant {[#"../sum_of_odds.rs" 29 10 29 11] x}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../sum_of_odds.rs" 31 4 31 65] if pure {x > 0} then sum_of_odd_is_sqr (x - 1) else ()
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module SumOfOdds_ComputeSumOfOdd
  use prelude.UInt32
  use seq.Seq
  predicate invariant3 (self : Seq.seq uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Seq.seq uint32) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq uint32)
  val inv3 (_x : Seq.seq uint32) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq uint32 . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : Core_Option_Option_Type.t_option uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Core_Option_Option_Type.t_option uint32) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option uint32)
  val inv2 (_x : Core_Option_Option_Type.t_option uint32) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option uint32 . inv2 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant1 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (Core_Ops_Range_Range_Type.t_range uint32))
  val inv1 (_x : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range uint32) . inv1 x = true
  use seq.Seq
  predicate inv0 (_x : Core_Ops_Range_Range_Type.t_range uint32)
  val inv0 (_x : Core_Ops_Range_Range_Type.t_range uint32) : bool
    ensures { result = inv0 _x }
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  function deep_model0 (self : uint32) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  val deep_model0 (self : uint32) : int
    ensures { result = deep_model0 self }
    
  predicate produces0 (self : Core_Ops_Range_Range_Type.t_range uint32) (visited : Seq.seq uint32) (o : Core_Ops_Range_Range_Type.t_range uint32)
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ deep_model0 (Core_Ops_Range_Range_Type.range_start self) <= deep_model0 (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> deep_model0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model0 (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = deep_model0 (Core_Ops_Range_Range_Type.range_start o) - deep_model0 (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> deep_model0 (Seq.get visited i) = deep_model0 (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces0 (self : Core_Ops_Range_Range_Type.t_range uint32) (visited : Seq.seq uint32) (o : Core_Ops_Range_Range_Type.t_range uint32) : bool
    ensures { result = produces0 self visited o }
    
  function produces_trans0 (a : Core_Ops_Range_Range_Type.t_range uint32) (ab : Seq.seq uint32) (b : Core_Ops_Range_Range_Type.t_range uint32) (bc : Seq.seq uint32) (c : Core_Ops_Range_Range_Type.t_range uint32) : ()
    
  val produces_trans0 (a : Core_Ops_Range_Range_Type.t_range uint32) (ab : Seq.seq uint32) (b : Core_Ops_Range_Range_Type.t_range uint32) (bc : Seq.seq uint32) (c : Core_Ops_Range_Range_Type.t_range uint32) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv3 ab}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv3 bc}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Ops_Range_Range_Type.t_range uint32, ab : Seq.seq uint32, b : Core_Ops_Range_Range_Type.t_range uint32, bc : Seq.seq uint32, c : Core_Ops_Range_Range_Type.t_range uint32 . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv3 ab) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv3 bc) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (a : Core_Ops_Range_Range_Type.t_range uint32) : ()
  val produces_refl0 (a : Core_Ops_Range_Range_Type.t_range uint32) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] inv0 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : Core_Ops_Range_Range_Type.t_range uint32 . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] inv0 a) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] produces0 a (Seq.empty ) a)
  predicate invariant0 (self : Core_Ops_Range_Range_Type.t_range uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Core_Ops_Range_Range_Type.t_range uint32) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Core_Ops_Range_Range_Type.t_range uint32 . inv0 x = true
  use prelude.Ghost
  function sqr0 [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [#"../sum_of_odds.rs" 8 4 8 9] x * x
  val sqr0 [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int
    ensures { result = sqr0 x }
    
  function sum_of_odd0 [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  axiom sum_of_odd0_def : forall x : int . sum_of_odd0 x = ([#"../sum_of_odds.rs" 16 0 16 8] if x <= 0 then
    0
  else
    sum_of_odd0 (x - 1) + 2 * x - 1
  )
  val sum_of_odd0 [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
    ensures { result = sum_of_odd0 x }
    
  function sum_of_odd_is_sqr0 [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
  axiom sum_of_odd_is_sqr0_def : forall x : int . sum_of_odd_is_sqr0 x = ([#"../sum_of_odds.rs" 31 4 31 65] if x > 0 then
    sum_of_odd_is_sqr0 (x - 1)
  else
    ()
  )
  val sum_of_odd_is_sqr0 [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
    requires {[#"../sum_of_odds.rs" 27 11 27 17] x >= 0}
    ensures { result = sum_of_odd_is_sqr0 x }
    
  axiom sum_of_odd_is_sqr0_spec : forall x : int . ([#"../sum_of_odds.rs" 27 11 27 17] x >= 0) -> ([#"../sum_of_odds.rs" 28 10 28 33] sum_of_odd0 x = sqr0 x)
  use seq.Seq
  predicate resolve0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve0 self /\ deep_model0 (Core_Ops_Range_Range_Type.range_start ( * self)) >= deep_model0 (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) : Core_Option_Option_Type.t_option uint32
    requires {inv1 self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv2 result }
    
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  predicate into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range uint32) (res : Core_Ops_Range_Range_Type.t_range uint32)
    
   =
    [#"../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range uint32) (res : Core_Ops_Range_Range_Type.t_range uint32) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range uint32) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range uint32) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Core_Ops_Range_Range_Type.t_range uint32) : Core_Ops_Range_Range_Type.t_range uint32
    requires {[#"../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    ensures { inv0 result }
    
  let rec cfg compute_sum_of_odd [#"../sum_of_odds.rs" 36 0 36 36] [@cfg:stackify] [@cfg:subregion_analysis] (x : uint32) : uint32
    requires {[#"../sum_of_odds.rs" 34 11 34 23] UInt32.to_int x < 65536}
    ensures { [#"../sum_of_odds.rs" 35 10 35 35] UInt32.to_int result = sum_of_odd0 (UInt32.to_int x) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x : uint32 = x;
  var s : uint32;
  var iter : Core_Ops_Range_Range_Type.t_range uint32;
  var iter_old : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range uint32);
  var produced : Ghost.ghost_ty (Seq.seq uint32);
  var _18 : Core_Option_Option_Type.t_option uint32;
  var _19 : borrowed (Core_Ops_Range_Range_Type.t_range uint32);
  var _20 : borrowed (Core_Ops_Range_Range_Type.t_range uint32);
  var __creusot_proc_iter_elem : uint32;
  var _23 : Ghost.ghost_ty (Seq.seq uint32);
  var i : uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../sum_of_odds.rs" 37 21 37 22] s <- ([#"../sum_of_odds.rs" 37 21 37 22] [#"../sum_of_odds.rs" 37 21 37 22] (0 : uint32));
    [#"../sum_of_odds.rs" 38 4 38 50] iter <- ([#"../sum_of_odds.rs" 38 4 38 50] into_iter0 ([#"../sum_of_odds.rs" 39 13 39 17] Core_Ops_Range_Range_Type.C_Range ([#"../sum_of_odds.rs" 39 13 39 14] [#"../sum_of_odds.rs" 39 13 39 14] (0 : uint32)) ([#"../sum_of_odds.rs" 39 16 39 17] x)));
    goto BB1
  }
  BB1 {
    [#"../sum_of_odds.rs" 38 4 38 50] iter_old <- ([#"../sum_of_odds.rs" 38 4 38 50] Ghost.new iter);
    goto BB2
  }
  BB2 {
    [#"../sum_of_odds.rs" 38 4 38 50] produced <- ([#"../sum_of_odds.rs" 38 4 38 50] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"../sum_of_odds.rs" 38 4 38 50] inv0 iter };
    invariant { [#"../sum_of_odds.rs" 38 4 38 50] produces0 (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../sum_of_odds.rs" 38 16 38 48] UInt32.to_int s = sum_of_odd0 (Seq.length (Ghost.inner produced)) };
    goto BB5
  }
  BB5 {
    [#"../sum_of_odds.rs" 38 4 38 50] _20 <- Borrow.borrow_mut iter;
    [#"../sum_of_odds.rs" 38 4 38 50] iter <-  ^ _20;
    [#"../sum_of_odds.rs" 38 4 38 50] _19 <- Borrow.borrow_mut ( * _20);
    [#"../sum_of_odds.rs" 38 4 38 50] _20 <- { _20 with current =  ^ _19 };
    [#"../sum_of_odds.rs" 38 4 38 50] _18 <- ([#"../sum_of_odds.rs" 38 4 38 50] next0 _19);
    _19 <- any borrowed (Core_Ops_Range_Range_Type.t_range uint32);
    goto BB6
  }
  BB6 {
    assume { resolve0 _20 };
    switch (_18)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB7 {
    [#"../sum_of_odds.rs" 46 11 46 12] _0 <- ([#"../sum_of_odds.rs" 46 11 46 12] s);
    return _0
  }
  BB8 {
    goto BB10
  }
  BB9 {
    assert { [#"../sum_of_odds.rs" 38 4 38 50] false };
    absurd
  }
  BB10 {
    [#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] __creusot_proc_iter_elem <- ([#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] Core_Option_Option_Type.some_0 _18);
    [#"../sum_of_odds.rs" 38 4 38 50] _23 <- ([#"../sum_of_odds.rs" 38 4 38 50] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB11
  }
  BB11 {
    [#"../sum_of_odds.rs" 38 4 38 50] produced <- ([#"../sum_of_odds.rs" 38 4 38 50] _23);
    [#"../sum_of_odds.rs" 38 4 38 50] _23 <- any Ghost.ghost_ty (Seq.seq uint32);
    [#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] i <- ([#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] __creusot_proc_iter_elem);
    assert { [@expl:assertion] [#"../sum_of_odds.rs" 41 12 41 33] let _ = sum_of_odd_is_sqr0 (UInt32.to_int i) in true };
    [#"../sum_of_odds.rs" 44 8 44 22] s <- ([#"../sum_of_odds.rs" 44 8 44 22] s + ([#"../sum_of_odds.rs" 44 13 44 22] ([#"../sum_of_odds.rs" 44 13 44 18] ([#"../sum_of_odds.rs" 44 13 44 14] [#"../sum_of_odds.rs" 44 13 44 14] (2 : uint32)) * ([#"../sum_of_odds.rs" 44 17 44 18] i)) + ([#"../sum_of_odds.rs" 44 21 44 22] [#"../sum_of_odds.rs" 44 21 44 22] (1 : uint32))));
    goto BB4
  }
  
end
module SumOfOdds_Test
  use prelude.UInt32
  use prelude.Int
  function sqr0 [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [#"../sum_of_odds.rs" 8 4 8 9] x * x
  val sqr0 [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int
    ensures { result = sqr0 x }
    
  predicate is_square0 [#"../sum_of_odds.rs" 12 0 12 28] (y : int) =
    [#"../sum_of_odds.rs" 13 4 13 44] exists z : int . y = sqr0 z
  val is_square0 [#"../sum_of_odds.rs" 12 0 12 28] (y : int) : bool
    ensures { result = is_square0 y }
    
  function sum_of_odd0 [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  axiom sum_of_odd0_def : forall x : int . sum_of_odd0 x = ([#"../sum_of_odds.rs" 16 0 16 8] if x <= 0 then
    0
  else
    sum_of_odd0 (x - 1) + 2 * x - 1
  )
  val sum_of_odd0 [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
    ensures { result = sum_of_odd0 x }
    
  function sum_of_odd_is_sqr0 [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
  axiom sum_of_odd_is_sqr0_def : forall x : int . sum_of_odd_is_sqr0 x = ([#"../sum_of_odds.rs" 31 4 31 65] if x > 0 then
    sum_of_odd_is_sqr0 (x - 1)
  else
    ()
  )
  val sum_of_odd_is_sqr0 [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
    requires {[#"../sum_of_odds.rs" 27 11 27 17] x >= 0}
    ensures { result = sum_of_odd_is_sqr0 x }
    
  axiom sum_of_odd_is_sqr0_spec : forall x : int . ([#"../sum_of_odds.rs" 27 11 27 17] x >= 0) -> ([#"../sum_of_odds.rs" 28 10 28 33] sum_of_odd0 x = sqr0 x)
  use prelude.UInt32
  val compute_sum_of_odd0 [#"../sum_of_odds.rs" 36 0 36 36] (x : uint32) : uint32
    requires {[#"../sum_of_odds.rs" 34 11 34 23] UInt32.to_int x < 65536}
    ensures { [#"../sum_of_odds.rs" 35 10 35 35] UInt32.to_int result = sum_of_odd0 (UInt32.to_int x) }
    
  let rec cfg test [#"../sum_of_odds.rs" 50 0 50 19] [@cfg:stackify] [@cfg:subregion_analysis] (x : uint32) : ()
    requires {[#"../sum_of_odds.rs" 49 11 49 23] UInt32.to_int x < 65536}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : uint32 = x;
  var y : uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../sum_of_odds.rs" 51 12 51 33] y <- ([#"../sum_of_odds.rs" 51 12 51 33] compute_sum_of_odd0 ([#"../sum_of_odds.rs" 51 31 51 32] x));
    goto BB1
  }
  BB1 {
    assert { [@expl:assertion] [#"../sum_of_odds.rs" 53 8 53 29] let _ = sum_of_odd_is_sqr0 (UInt32.to_int x) in is_square0 (UInt32.to_int y) };
    [#"../sum_of_odds.rs" 52 4 55 5] _0 <- ([#"../sum_of_odds.rs" 52 4 55 5] ());
    return _0
  }
  
end
