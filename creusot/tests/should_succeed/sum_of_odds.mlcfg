
module SumOfOdds_Sqr_Stub
  use prelude.Int
  function sqr [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int
end
module SumOfOdds_Sqr_Interface
  use prelude.Int
  function sqr [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int
  val sqr [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int
    ensures { result = sqr x }
    
end
module SumOfOdds_Sqr
  use prelude.Int
  function sqr [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [#"../sum_of_odds.rs" 8 4 8 9] x * x
  val sqr [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int
    ensures { result = sqr x }
    
end
module SumOfOdds_IsSquare_Stub
  use prelude.Int
  predicate is_square [#"../sum_of_odds.rs" 12 0 12 28] (y : int)
end
module SumOfOdds_IsSquare_Interface
  use prelude.Int
  predicate is_square [#"../sum_of_odds.rs" 12 0 12 28] (y : int)
  val is_square [#"../sum_of_odds.rs" 12 0 12 28] (y : int) : bool
    ensures { result = is_square y }
    
end
module SumOfOdds_IsSquare
  use prelude.Int
  clone SumOfOdds_Sqr_Stub as Sqr0
  predicate is_square [#"../sum_of_odds.rs" 12 0 12 28] (y : int) =
    [#"../sum_of_odds.rs" 13 4 13 44] exists z : int . y = Sqr0.sqr z
  val is_square [#"../sum_of_odds.rs" 12 0 12 28] (y : int) : bool
    ensures { result = is_square y }
    
end
module SumOfOdds_SumOfOdd_Stub
  use prelude.Int
  function sum_of_odd [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
end
module SumOfOdds_SumOfOdd_Interface
  use prelude.Int
  function sum_of_odd [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  val sum_of_odd [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
    ensures { result = sum_of_odd x }
    
end
module SumOfOdds_SumOfOdd
  use prelude.Int
  function sum_of_odd [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  val sum_of_odd [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
    ensures { result = sum_of_odd x }
    
  axiom def : forall x : int . sum_of_odd x = ([#"../sum_of_odds.rs" 16 0 16 8] if x <= 0 then
    0
  else
    sum_of_odd (x - 1) + 2 * x - 1
  )
end
module SumOfOdds_SumOfOdd_Impl
  use prelude.Int
  let rec ghost function sum_of_odd [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
    variant {[#"../sum_of_odds.rs" 17 10 17 11] x}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../sum_of_odds.rs" 16 0 16 8] if pure {x <= 0} then 0 else sum_of_odd (x - 1) + 2 * x - 1
end
module SumOfOdds_SumOfOddIsSqr_Stub
  use prelude.Int
  clone SumOfOdds_Sqr_Stub as Sqr0
  clone SumOfOdds_SumOfOdd_Stub as SumOfOdd0 with
    axiom .
  function sum_of_odd_is_sqr [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
end
module SumOfOdds_SumOfOddIsSqr_Interface
  use prelude.Int
  clone SumOfOdds_Sqr_Stub as Sqr0
  clone SumOfOdds_SumOfOdd_Stub as SumOfOdd0 with
    axiom .
  function sum_of_odd_is_sqr [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
  val sum_of_odd_is_sqr [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
    requires {[#"../sum_of_odds.rs" 27 11 27 17] x >= 0}
    ensures { [#"../sum_of_odds.rs" 28 10 28 33] SumOfOdd0.sum_of_odd x = Sqr0.sqr x }
    ensures { result = sum_of_odd_is_sqr x }
    
  axiom sum_of_odd_is_sqr_spec : forall x : int . ([#"../sum_of_odds.rs" 27 11 27 17] x >= 0) -> ([#"../sum_of_odds.rs" 28 10 28 33] SumOfOdd0.sum_of_odd x = Sqr0.sqr x)
end
module SumOfOdds_SumOfOddIsSqr
  use prelude.Int
  clone SumOfOdds_Sqr_Stub as Sqr0
  clone SumOfOdds_SumOfOdd_Stub as SumOfOdd0 with
    axiom .
  function sum_of_odd_is_sqr [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
  val sum_of_odd_is_sqr [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
    requires {[#"../sum_of_odds.rs" 27 11 27 17] x >= 0}
    ensures { [#"../sum_of_odds.rs" 28 10 28 33] SumOfOdd0.sum_of_odd x = Sqr0.sqr x }
    ensures { result = sum_of_odd_is_sqr x }
    
  axiom def : forall x : int . sum_of_odd_is_sqr x = ([#"../sum_of_odds.rs" 31 4 31 65] if x > 0 then
    sum_of_odd_is_sqr (x - 1)
  else
    ()
  )
  axiom sum_of_odd_is_sqr_spec : forall x : int . ([#"../sum_of_odds.rs" 27 11 27 17] x >= 0) -> ([#"../sum_of_odds.rs" 28 10 28 33] SumOfOdd0.sum_of_odd x = Sqr0.sqr x)
end
module SumOfOdds_SumOfOddIsSqr_Impl
  use prelude.Int
  clone SumOfOdds_Sqr as Sqr0
  clone SumOfOdds_SumOfOdd as SumOfOdd0 with
    axiom .
  let rec ghost function sum_of_odd_is_sqr [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
    requires {[#"../sum_of_odds.rs" 27 11 27 17] x >= 0}
    ensures { [#"../sum_of_odds.rs" 28 10 28 33] SumOfOdd0.sum_of_odd x = Sqr0.sqr x }
    variant {[#"../sum_of_odds.rs" 29 10 29 11] x}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../sum_of_odds.rs" 31 4 31 65] if pure {x > 0} then sum_of_odd_is_sqr (x - 1) else ()
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    [#"../../../../creusot-contracts/src/invariant.rs" 9 8 9 12] true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use seq.Seq
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) - DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Interface
  type self
  predicate into_iter_pre (self : self)
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  predicate into_iter_pre (self : self) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 57 20 57 24] true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Interface
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = i,
    type IntoIter0.intoIter = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = i
  val into_iter (self : i) : i
    requires {[#"../../../../creusot-contracts/src/std/iter.rs" 83 0 151 1] IntoIterPre0.into_iter_pre self}
    requires {Invariant0.invariant' self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 83 0 151 1] IntoIterPost0.into_iter_post self result }
    ensures { Invariant0.invariant' result }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module Core_Iter_Range_Impl3_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = a
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  val next (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 89 26 92 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Interface
  type i
  predicate into_iter_pre (self : i)
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate into_iter_pre (self : i) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 68 8 68 24] Invariant0.invariant' self
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Interface
  type i
  predicate into_iter_post (self : i) (res : i)
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  predicate into_iter_post (self : i) (res : i) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 74 8 74 19] self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
  val is_inhabited (_1' : ()) : bool
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x }
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] result }
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] is_inhabited _1') && ([#"../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool =
    [#"../../../../creusot-contracts/src/invariant.rs" 20 8 20 12] true
  val is_inhabited (_1' : ()) : bool
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x }
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] result }
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../creusot-contracts/src/invariant.rs" 15 14 15 20] is_inhabited _1') && ([#"../../../../creusot-contracts/src/invariant.rs" 14 4 14 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    ensures { [#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . [#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : () =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 30 4 30 10] ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    ensures { [#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . [#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    ensures { [#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 35 4 35 10] ()
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    ensures { [#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Num_Impl7_DeepModel_Stub
  use prelude.Int
  use prelude.UInt32
  function deep_model (self : uint32) : int
end
module CreusotContracts_Std1_Num_Impl7_DeepModel_Interface
  use prelude.Int
  use prelude.UInt32
  function deep_model (self : uint32) : int
  val deep_model (self : uint32) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl7_DeepModel
  use prelude.Int
  use prelude.UInt32
  function deep_model (self : uint32) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  val deep_model (self : uint32) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] Resolve0.resolve self /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start ( * self)) >= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module SumOfOdds_ComputeSumOfOdd_Interface
  use prelude.UInt32
  use prelude.Int
  clone SumOfOdds_SumOfOdd_Stub as SumOfOdd0 with
    axiom .
  val compute_sum_of_odd [#"../sum_of_odds.rs" 36 0 36 36] (x : uint32) : uint32
    requires {[#"../sum_of_odds.rs" 34 11 34 23] UInt32.to_int x < 65536}
    ensures { [#"../sum_of_odds.rs" 35 10 35 35] UInt32.to_int result = SumOfOdd0.sum_of_odd (UInt32.to_int x) }
    
end
module SumOfOdds_ComputeSumOfOdd
  use prelude.Int
  use prelude.UInt32
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use prelude.IntSize
  clone SumOfOdds_Sqr as Sqr0
  use prelude.Int
  clone CreusotContracts_Std1_Num_Impl7_DeepModel as DeepModel0
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range uint32
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed0 with
    type idx = uint32,
    predicate Resolve0.resolve = Resolve0.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces0 with
    type idx = uint32,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface as ProducesTrans0 with
    type idx = uint32,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface as ProducesRefl0 with
    type idx = uint32,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant0 with
    type self = Core_Ops_Range_Range_Type.t_range uint32
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = Core_Ops_Range_Range_Type.t_range uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Ops_Range_Range_Type.t_range uint32
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Ops_Range_Range_Type.t_range uint32,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone SumOfOdds_SumOfOdd as SumOfOdd0 with
    axiom .
  clone SumOfOdds_SumOfOddIsSqr as SumOfOddIsSqr0 with
    function SumOfOdd0.sum_of_odd = SumOfOdd0.sum_of_odd,
    function Sqr0.sqr = Sqr0.sqr,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Iter_Range_Impl3_Next_Interface as Next0 with
    type a = uint32,
    type Item0.item = uint32,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Ops_Range_Range_Type.t_range uint32,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  let rec cfg compute_sum_of_odd [#"../sum_of_odds.rs" 36 0 36 36] [@cfg:stackify] [@cfg:subregion_analysis] (x : uint32) : uint32
    requires {[#"../sum_of_odds.rs" 34 11 34 23] UInt32.to_int x < 65536}
    ensures { [#"../sum_of_odds.rs" 35 10 35 35] UInt32.to_int result = SumOfOdd0.sum_of_odd (UInt32.to_int x) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var x_1 : uint32;
  var _2 : ();
  var s_5 : uint32;
  var _6 : ();
  var iter_7 : Core_Ops_Range_Range_Type.t_range uint32;
  var _8 : Core_Ops_Range_Range_Type.t_range uint32;
  var _9 : uint32;
  var iter_old_10 : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range uint32);
  var produced_12 : Ghost.ghost_ty (Seq.seq uint32);
  var _17 : ();
  var _18 : Core_Option_Option_Type.t_option uint32;
  var _19 : borrowed (Core_Ops_Range_Range_Type.t_range uint32);
  var _20 : borrowed (Core_Ops_Range_Range_Type.t_range uint32);
  var _21 : isize;
  var __creusot_proc_iter_elem_22 : uint32;
  var _23 : Ghost.ghost_ty (Seq.seq uint32);
  var i_25 : uint32;
  var _26 : ();
  var _28 : uint32;
  var _29 : uint32;
  var _30 : uint32;
  var _31 : ();
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    s_5 <- ([#"../sum_of_odds.rs" 37 21 37 22] (0 : uint32));
    _9 <- x_1;
    _8 <- Core_Ops_Range_Range_Type.C_Range ([#"../sum_of_odds.rs" 39 13 39 14] (0 : uint32)) _9;
    iter_7 <- ([#"../sum_of_odds.rs" 38 4 38 50] IntoIter0.into_iter _8);
    goto BB1
  }
  BB1 {
    iter_old_10 <- ([#"../sum_of_odds.rs" 38 4 38 50] Ghost.new iter_7);
    goto BB2
  }
  BB2 {
    produced_12 <- ([#"../sum_of_odds.rs" 38 4 38 50] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"../sum_of_odds.rs" 38 4 38 50] Invariant0.invariant' iter_7 };
    invariant { [#"../sum_of_odds.rs" 38 4 38 50] Produces0.produces (Ghost.inner iter_old_10) (Ghost.inner produced_12) iter_7 };
    invariant { [#"../sum_of_odds.rs" 38 16 38 48] UInt32.to_int s_5 = SumOfOdd0.sum_of_odd (Seq.length (Ghost.inner produced_12)) };
    goto BB5
  }
  BB5 {
    _20 <- borrow_mut iter_7;
    iter_7 <-  ^ _20;
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    _18 <- ([#"../sum_of_odds.rs" 38 4 38 50] Next0.next _19);
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve _20 };
    switch (_18)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB7 {
    _6 <- ();
    _0 <- s_5;
    return _0
  }
  BB8 {
    goto BB10
  }
  BB9 {
    absurd
  }
  BB10 {
    __creusot_proc_iter_elem_22 <- Core_Option_Option_Type.some_0 _18;
    _23 <- ([#"../sum_of_odds.rs" 38 4 38 50] Ghost.new (Seq.(++) (Ghost.inner produced_12) (Seq.singleton __creusot_proc_iter_elem_22)));
    goto BB11
  }
  BB11 {
    produced_12 <- _23;
    _23 <- any Ghost.ghost_ty (Seq.seq uint32);
    i_25 <- __creusot_proc_iter_elem_22;
    assert { [@expl:assertion] [#"../sum_of_odds.rs" 41 12 41 33] let _ = SumOfOddIsSqr0.sum_of_odd_is_sqr (UInt32.to_int i_25) in true };
    _26 <- ();
    _30 <- i_25;
    _29 <- ([#"../sum_of_odds.rs" 44 13 44 18] ([#"../sum_of_odds.rs" 44 13 44 14] (2 : uint32)) * _30);
    _28 <- ([#"../sum_of_odds.rs" 44 13 44 22] _29 + ([#"../sum_of_odds.rs" 44 21 44 22] (1 : uint32)));
    s_5 <- ([#"../sum_of_odds.rs" 44 8 44 22] s_5 + _28);
    _17 <- ();
    goto BB4
  }
  
end
module SumOfOdds_Test_Interface
  use prelude.UInt32
  use prelude.Int
  val test [#"../sum_of_odds.rs" 50 0 50 19] (x : uint32) : ()
    requires {[#"../sum_of_odds.rs" 49 11 49 23] UInt32.to_int x < 65536}
    
end
module SumOfOdds_Test
  use prelude.Int
  use prelude.UInt32
  clone SumOfOdds_Sqr as Sqr0
  clone SumOfOdds_SumOfOdd as SumOfOdd0 with
    axiom .
  clone SumOfOdds_IsSquare as IsSquare0 with
    function Sqr0.sqr = Sqr0.sqr
  clone SumOfOdds_SumOfOddIsSqr as SumOfOddIsSqr0 with
    function SumOfOdd0.sum_of_odd = SumOfOdd0.sum_of_odd,
    function Sqr0.sqr = Sqr0.sqr,
    axiom .
  clone SumOfOdds_ComputeSumOfOdd_Interface as ComputeSumOfOdd0 with
    function SumOfOdd0.sum_of_odd = SumOfOdd0.sum_of_odd
  let rec cfg test [#"../sum_of_odds.rs" 50 0 50 19] [@cfg:stackify] [@cfg:subregion_analysis] (x : uint32) : ()
    requires {[#"../sum_of_odds.rs" 49 11 49 23] UInt32.to_int x < 65536}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : uint32;
  var y_3 : uint32;
  var _4 : uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _4 <- x_1;
    y_3 <- ([#"../sum_of_odds.rs" 51 12 51 33] ComputeSumOfOdd0.compute_sum_of_odd _4);
    goto BB1
  }
  BB1 {
    assert { [@expl:assertion] [#"../sum_of_odds.rs" 53 8 53 29] let _ = SumOfOddIsSqr0.sum_of_odd_is_sqr (UInt32.to_int x_1) in IsSquare0.is_square (UInt32.to_int y_3) };
    _0 <- ();
    return _0
  }
  
end
