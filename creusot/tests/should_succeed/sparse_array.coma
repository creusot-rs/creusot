
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module SparseArray_Sparse_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  type t_sparse 't =
    | C_Sparse usize usize (Alloc_Vec_Vec_Type.t_vec 't (Alloc_Alloc_Global_Type.t_global)) (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  function any_l (_ : 'b) : 'a
  let rec t_sparse < 't > (input:t_sparse 't) (ret  (size:usize) (n:usize) (values:Alloc_Vec_Vec_Type.t_vec 't (Alloc_Alloc_Global_Type.t_global)) (idx:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (back:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))= any
    [ good (size:usize) (n:usize) (values:Alloc_Vec_Vec_Type.t_vec 't (Alloc_Alloc_Global_Type.t_global)) (idx:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (back:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> {C_Sparse size n values idx back
      = input}
      (! ret {size} {n} {values} {idx} {back})
    | bad (size:usize) (n:usize) (values:Alloc_Vec_Vec_Type.t_vec 't (Alloc_Alloc_Global_Type.t_global)) (idx:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (back:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> {C_Sparse size n values idx back
      <> input}
      {false}
      any ]
    
  function sparse_size (self : t_sparse 't) : usize =
    match self with
      | C_Sparse a _ _ _ _ -> a
      end
  function sparse_idx (self : t_sparse 't) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) =
    match self with
      | C_Sparse _ _ _ a _ -> a
      end
  function sparse_n (self : t_sparse 't) : usize =
    match self with
      | C_Sparse _ a _ _ _ -> a
      end
  function sparse_back (self : t_sparse 't) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) =
    match self with
      | C_Sparse _ _ _ _ a -> a
      end
  function sparse_values (self : t_sparse 't) : Alloc_Vec_Vec_Type.t_vec 't (Alloc_Alloc_Global_Type.t_global) =
    match self with
      | C_Sparse _ _ a _ _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module SparseArray_Impl2_Get
  type t
  use seq.Seq
  predicate invariant'11 (self : Seq.seq t)
  let rec invariant'11 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  predicate inv'11 (_x : Seq.seq t)
  let rec inv'11 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  axiom inv'11 : forall x : Seq.seq t . inv'11 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'10 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'10 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  function shallow_model'5 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  let rec shallow_model'5 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'10 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'5 self} (! return' {result}) ] 
  axiom shallow_model'5_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'10 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'11 (shallow_model'5 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'5 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'10 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'11 (shallow_model'5 self)
  let rec invariant'10 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  axiom inv'10 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'10 x = true
  predicate invariant'9 (self : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'9 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : Seq.seq usize)
  let rec inv'9 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : Seq.seq usize . inv'9 x = true
  use seq.Seq
  predicate inv'8 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'8 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  function shallow_model'4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  let rec shallow_model'4 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'8 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'4 self} (! return' {result}) ] 
  axiom shallow_model'4_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'8 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'9 (shallow_model'4 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'4 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'8 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'9 (shallow_model'4 self)
  let rec invariant'8 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  axiom inv'8 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'8 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  function index_logic'1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'4 self) ix
  let rec index_logic'1 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = index_logic'1 self ix} (! return' {result}) ]
    
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use prelude.Mapping
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'5 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  function is_elt'0 [#"../sparse_array.rs" 72 4 72 36] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : bool =
    [#"../sparse_array.rs" 73 20 74 52] UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)
    < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_back self) (UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)))
    = i
  let rec is_elt'0 (self:SparseArray_Sparse_Type.t_sparse t) (i:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_elt'0 self i} (! return' {result}) ]
    
  function shallow_model'3 [#"../sparse_array.rs" 38 4 38 50] (self : SparseArray_Sparse_Type.t_sparse t) : Seq.seq (Core_Option_Option_Type.t_option t)
    
   =
    [#"../sparse_array.rs" 40 12 41 82] Seq.create (UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)) (Mapping.from_fn (fun (i : int) -> if is_elt'0 self i then
      Core_Option_Option_Type.C_Some (index_logic'0 (SparseArray_Sparse_Type.sparse_values self) i)
    else
      Core_Option_Option_Type.C_None
    ))
  let rec shallow_model'3 (self:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:Seq.seq (Core_Option_Option_Type.t_option t)))= any
    [ return' (result:Seq.seq (Core_Option_Option_Type.t_option t))-> {result = shallow_model'3 self}
      (! return' {result}) ]
    
  predicate invariant'7 [#"../sparse_array.rs" 49 4 49 30] (self : SparseArray_Sparse_Type.t_sparse t) =
    [#"../sparse_array.rs" 50 8 61 9] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    <= UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'3 self) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'5 (SparseArray_Sparse_Type.sparse_values self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'4 (SparseArray_Sparse_Type.sparse_idx self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'4 (SparseArray_Sparse_Type.sparse_back self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
     -> match index_logic'1 (SparseArray_Sparse_Type.sparse_back self) i with
      | j -> 0 <= UIntSize.to_int j
      /\ UIntSize.to_int j < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
      /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) (UIntSize.to_int j)) = i
      end)
  let rec invariant'7 (self:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : SparseArray_Sparse_Type.t_sparse t)
  let rec inv'7 (_x:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : SparseArray_Sparse_Type.t_sparse t . inv'7 x
  = (invariant'7 x
  /\ match x with
    | SparseArray_Sparse_Type.C_Sparse size n values idx back -> true
    end)
  predicate invariant'6 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec invariant'6 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'6 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'6 x = true
  predicate invariant'5 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : usize)
  let rec inv'5 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : usize . inv'5 x = true
  predicate invariant'4 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : usize)
  let rec inv'4 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : usize . inv'4 x = true
  predicate invariant'3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'3 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'3 x = true
  predicate invariant'2 (self : Core_Option_Option_Type.t_option t)
  let rec invariant'2 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option t)
  let rec inv'2 (_x:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option t . inv'2 x = true
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  predicate invariant'0 (self : SparseArray_Sparse_Type.t_sparse t)
  let rec invariant'0 (self:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : SparseArray_Sparse_Type.t_sparse t)
  let rec inv'0 (_x:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : SparseArray_Sparse_Type.t_sparse t . inv'0 x = inv'7 x
  use seq.Seq
  function shallow_model'0 (self : SparseArray_Sparse_Type.t_sparse t) : Seq.seq (Core_Option_Option_Type.t_option t) =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'3 self
  let rec shallow_model'0 (self:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:Seq.seq (Core_Option_Option_Type.t_option t)))= any
    [ return' (result:Seq.seq (Core_Option_Option_Type.t_option t))-> {result = shallow_model'0 self}
      (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'1 (self : t)
  let rec resolve'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Slice
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  let rec has_value'1 (self:usize) (seq:Seq.seq t) (out:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = has_value'1 self seq out} (! return' {result}) ]
    
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  let rec in_bounds'1 (self:usize) (seq:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'1 self seq} (! return' {result}) ]
    
  function shallow_model'2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'5 self
  let rec shallow_model'2 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'2 self} (! return' {result}) ]
    
  let rec index'1 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (index:usize) (return'  (ret:t))= {[@expl:precondition] inv'4 index}
    {[@expl:precondition] inv'6 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46] in_bounds'1 index (shallow_model'2 self)}
    any
    [ return' (result:t)-> {inv'1 result}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54] has_value'1 index (shallow_model'2 self) result}
      (! return' {result}) ]
    
  predicate resolve'0 (self : SparseArray_Sparse_Type.t_sparse t)
  let rec resolve'0 (self:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  let rec has_value'0 (self:usize) (seq:Seq.seq usize) (out:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = has_value'0 self seq out} (! return' {result}) ]
    
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  let rec in_bounds'0 (self:usize) (seq:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'0 self seq} (! return' {result}) ]
    
  function shallow_model'1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'4 self
  let rec shallow_model'1 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= any
    [ return' (result:Seq.seq usize)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  let rec index'0 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (index:usize) (return'  (ret:usize))= {[@expl:precondition] inv'4 index}
    {[@expl:precondition] inv'3 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46] in_bounds'0 index (shallow_model'1 self)}
    any
    [ return' (result:usize)-> {inv'5 result}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54] has_value'0 index (shallow_model'1 self) result}
      (! return' {result}) ]
    
  let rec get (self:SparseArray_Sparse_Type.t_sparse t) (i:usize) (return'  (ret:Core_Option_Option_Type.t_option t))= {[#"../sparse_array.rs" 89 16 89 20] inv'0 self}
    {[#"../sparse_array.rs" 80 15 80 31] UIntSize.to_int i < Seq.length (shallow_model'0 self)}
    (! bb0
    [ bb0 = s0
      [ s0 = SparseArray_Sparse_Type.t_sparse <t> {self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ridx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (rback'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
            index'0 {ridx'0} {i} (fun (_ret':usize) ->  [ &_7 <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &index <- _7 ] s1
      | s1 = SparseArray_Sparse_Type.t_sparse <t> {self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ridx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (rback'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
            UIntSize.lt {index} {rn'0} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s2))
      | s2 = any [ br0 -> {_10 = false} (! bb7) | br1 -> {_10} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 = SparseArray_Sparse_Type.t_sparse <t> {self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ridx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (rback'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
            index'0 {rback'0} {index} (fun (_ret':usize) ->  [ &_15 <- _ret' ] s1))
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = UIntSize.eq {_15} {i} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s1)
      | s1 = any [ br0 -> {_13 = false} (! bb6) | br1 -> {_13} (! bb4) ]  ]
      
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = SparseArray_Sparse_Type.t_sparse <t> {self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ridx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (rback'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
            index'1 {rvalues'0} {i} (fun (_ret':t) ->  [ &_21 <- _ret' ] s3))
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 =  [ &_20 <- _21 ] s1
      | s1 = {[@expl:type invariant] inv'1 _21} s2
      | s2 = -{resolve'1 _21}- s3
      | s3 = {[@expl:type invariant] inv'1 _20} s4
      | s4 = -{resolve'1 _20}- s5
      | s5 =  [ &_0 <- Core_Option_Option_Type.C_Some _20 : Core_Option_Option_Type.t_option t ] s6
      | s6 = bb9 ]
      
    | bb6 = s0 [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb8 ] 
    | bb7 = s0 [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb8 ] 
    | bb8 = s0 [ s0 =  [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option t ] s1 | s1 = bb9 ] 
    | bb9 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option t = any_l () : Core_Option_Option_Type.t_option t
    | & self : SparseArray_Sparse_Type.t_sparse t = self
    | & i : usize = i
    | & index : usize = any_l () : usize
    | & _7 : usize = any_l () : usize
    | & _10 : bool = any_l () : bool
    | & _13 : bool = any_l () : bool
    | & _15 : usize = any_l () : usize
    | & _20 : t = any_l () : t
    | & _21 : t = any_l () : t ]
    
    [ return' (result:Core_Option_Option_Type.t_option t)-> {[@expl:postcondition] [#"../sparse_array.rs" 89 35 89 45] inv'2 result}
      {[@expl:postcondition] [#"../sparse_array.rs" 85 14 88 5] match Seq.get (shallow_model'0 self) (UIntSize.to_int i) with
        | Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None
        | Core_Option_Option_Type.C_Some _ -> true
        end}
      {[@expl:postcondition] [#"../sparse_array.rs" 81 14 84 5] match result with
        | Core_Option_Option_Type.C_None -> Seq.get (shallow_model'0 self) (UIntSize.to_int i)
        = Core_Option_Option_Type.C_None
        | Core_Option_Option_Type.C_Some x -> Seq.get (shallow_model'0 self) (UIntSize.to_int i)
        = Core_Option_Option_Type.C_Some x
        end}
      (! return' {result}) ]
    
end
module SparseArray_Impl2_LemmaPermutation_Impl
  type t
  use seq.Seq
  predicate invariant'4 (self : Seq.seq t)
  let rec invariant'4 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Seq.seq t)
  let rec inv'4 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Seq.seq t . inv'4 x = true
  use prelude.UIntSize
  predicate invariant'3 (self : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq usize)
  let rec inv'3 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq usize . inv'3 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'2 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'2 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'2 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'0 self} (! return' {result}) ] 
  axiom shallow_model'0_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'2 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'3 (shallow_model'0 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'3 (shallow_model'0 self)
  let rec invariant'2 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'2 x = true
  use seq.Seq
  predicate inv'1 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'1 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  function shallow_model'2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  let rec shallow_model'2 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'1 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'2 self} (! return' {result}) ] 
  axiom shallow_model'2_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'1 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'4 (shallow_model'2 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'4 (shallow_model'2 self)
  let rec invariant'1 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'1 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'0 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use prelude.Mapping
  use seq.Seq
  function index_logic'1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'2 self) ix
  let rec index_logic'1 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'1 self ix} (! return' {result}) ]
    
  function is_elt'0 [#"../sparse_array.rs" 72 4 72 36] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : bool =
    [#"../sparse_array.rs" 73 20 74 52] UIntSize.to_int (index_logic'0 (SparseArray_Sparse_Type.sparse_idx self) i)
    < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    /\ UIntSize.to_int (index_logic'0 (SparseArray_Sparse_Type.sparse_back self) (UIntSize.to_int (index_logic'0 (SparseArray_Sparse_Type.sparse_idx self) i)))
    = i
  let rec is_elt'0 (self:SparseArray_Sparse_Type.t_sparse t) (i:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_elt'0 self i} (! return' {result}) ]
    
  function shallow_model'1 [#"../sparse_array.rs" 38 4 38 50] (self : SparseArray_Sparse_Type.t_sparse t) : Seq.seq (Core_Option_Option_Type.t_option t)
    
   =
    [#"../sparse_array.rs" 40 12 41 82] Seq.create (UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)) (Mapping.from_fn (fun (i : int) -> if is_elt'0 self i then
      Core_Option_Option_Type.C_Some (index_logic'1 (SparseArray_Sparse_Type.sparse_values self) i)
    else
      Core_Option_Option_Type.C_None
    ))
  let rec shallow_model'1 (self:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:Seq.seq (Core_Option_Option_Type.t_option t)))= any
    [ return' (result:Seq.seq (Core_Option_Option_Type.t_option t))-> {result = shallow_model'1 self}
      (! return' {result}) ]
    
  predicate invariant'0 [#"../sparse_array.rs" 49 4 49 30] (self : SparseArray_Sparse_Type.t_sparse t) =
    [#"../sparse_array.rs" 50 8 61 9] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    <= UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'1 self) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'2 (SparseArray_Sparse_Type.sparse_values self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'0 (SparseArray_Sparse_Type.sparse_idx self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'0 (SparseArray_Sparse_Type.sparse_back self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
     -> match index_logic'0 (SparseArray_Sparse_Type.sparse_back self) i with
      | j -> 0 <= UIntSize.to_int j
      /\ UIntSize.to_int j < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
      /\ UIntSize.to_int (index_logic'0 (SparseArray_Sparse_Type.sparse_idx self) (UIntSize.to_int j)) = i
      end)
  let rec invariant'0 (self:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : SparseArray_Sparse_Type.t_sparse t)
  let rec inv'0 (_x:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : SparseArray_Sparse_Type.t_sparse t . inv'0 x
  = (invariant'0 x
  /\ match x with
    | SparseArray_Sparse_Type.C_Sparse size n values idx back -> true
    end)
  constant self  : SparseArray_Sparse_Type.t_sparse t
  constant i  : int
  function lemma_permutation [#"../sparse_array.rs" 104 4 104 38] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : ()
    
  goal vc_lemma_permutation : ([#"../sparse_array.rs" 104 25 104 29] inv'0 self)
   -> ([#"../sparse_array.rs" 102 15 102 39] 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self))
   -> ([#"../sparse_array.rs" 101 15 101 34] SparseArray_Sparse_Type.sparse_n self
  = SparseArray_Sparse_Type.sparse_size self)  -> ([#"../sparse_array.rs" 103 14 103 28] is_elt'0 self i)
end
module SparseArray_Impl2_Set
  type t
  use prelude.UIntSize
  use seq.Seq
  predicate invariant'13 (self : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'13 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'13 self} (! return' {result}) ]
    
  predicate inv'13 (_x : Seq.seq usize)
  let rec inv'13 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'13 _x} (! return' {result}) ]
    
  axiom inv'13 : forall x : Seq.seq usize . inv'13 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'12 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'12 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'12 _x} (! return' {result}) ]
    
  function shallow_model'6 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  let rec shallow_model'6 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'12 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'6 self} (! return' {result}) ] 
  axiom shallow_model'6_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'12 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'13 (shallow_model'6 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'6 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'12 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'13 (shallow_model'6 self)
  let rec invariant'12 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'12 self} (! return' {result}) ]
    
  axiom inv'12 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'12 x = true
  predicate invariant'11 (self : Seq.seq t)
  let rec invariant'11 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  predicate inv'11 (_x : Seq.seq t)
  let rec inv'11 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  axiom inv'11 : forall x : Seq.seq t . inv'11 x = true
  use prelude.Borrow
  predicate invariant'10 (self : borrowed usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'10 (self:borrowed usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : borrowed usize)
  let rec inv'10 (_x:borrowed usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : borrowed usize . inv'10 x = true
  predicate invariant'9 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'9 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'9 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv'9 x = true
  predicate inv'0 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'0 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  function index_logic'1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'6 self) ix
  let rec index_logic'1 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = index_logic'1 self ix} (! return' {result}) ]
    
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  use seq.Seq
  function shallow_model'3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  let rec shallow_model'3 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'0 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'3 self} (! return' {result}) ] 
  axiom shallow_model'3_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'0 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'11 (shallow_model'3 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (max'0 : usize))
  use seq.Seq
  use seq.Seq
  use prelude.Mapping
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'3 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  function is_elt'0 [#"../sparse_array.rs" 72 4 72 36] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : bool =
    [#"../sparse_array.rs" 73 20 74 52] UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)
    < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_back self) (UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)))
    = i
  let rec is_elt'0 (self:SparseArray_Sparse_Type.t_sparse t) (i:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_elt'0 self i} (! return' {result}) ]
    
  function shallow_model'1 [#"../sparse_array.rs" 38 4 38 50] (self : SparseArray_Sparse_Type.t_sparse t) : Seq.seq (Core_Option_Option_Type.t_option t)
    
   =
    [#"../sparse_array.rs" 40 12 41 82] Seq.create (UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)) (Mapping.from_fn (fun (i : int) -> if is_elt'0 self i then
      Core_Option_Option_Type.C_Some (index_logic'0 (SparseArray_Sparse_Type.sparse_values self) i)
    else
      Core_Option_Option_Type.C_None
    ))
  let rec shallow_model'1 (self:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:Seq.seq (Core_Option_Option_Type.t_option t)))= any
    [ return' (result:Seq.seq (Core_Option_Option_Type.t_option t))-> {result = shallow_model'1 self}
      (! return' {result}) ]
    
  predicate invariant'8 [#"../sparse_array.rs" 49 4 49 30] (self : SparseArray_Sparse_Type.t_sparse t) =
    [#"../sparse_array.rs" 50 8 61 9] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    <= UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'1 self) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'3 (SparseArray_Sparse_Type.sparse_values self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'6 (SparseArray_Sparse_Type.sparse_idx self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'6 (SparseArray_Sparse_Type.sparse_back self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
     -> match index_logic'1 (SparseArray_Sparse_Type.sparse_back self) i with
      | j -> 0 <= UIntSize.to_int j
      /\ UIntSize.to_int j < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
      /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) (UIntSize.to_int j)) = i
      end)
  let rec invariant'8 (self:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : SparseArray_Sparse_Type.t_sparse t)
  let rec inv'8 (_x:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : SparseArray_Sparse_Type.t_sparse t . inv'8 x
  = (invariant'8 x
  /\ match x with
    | SparseArray_Sparse_Type.C_Sparse size n values idx back -> true
    end)
  predicate invariant'7 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : usize)
  let rec inv'7 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : usize . inv'7 x = true
  predicate invariant'6 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'6 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'6 x = true
  predicate invariant'5 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : usize)
  let rec inv'5 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : usize . inv'5 x = true
  predicate invariant'4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec invariant'4 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'4 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv'4 x = true
  predicate invariant'3 (self : borrowed (SparseArray_Sparse_Type.t_sparse t))
  let rec invariant'3 (self:borrowed (SparseArray_Sparse_Type.t_sparse t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed (SparseArray_Sparse_Type.t_sparse t))
  let rec inv'3 (_x:borrowed (SparseArray_Sparse_Type.t_sparse t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed (SparseArray_Sparse_Type.t_sparse t) . inv'3 x = (inv'8 ( * x) /\ inv'8 ( ^ x))
  predicate invariant'2 (self : borrowed t)
  let rec invariant'2 (self:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed t)
  let rec inv'2 (_x:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed t . inv'2 x = true
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  predicate invariant'0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'11 (shallow_model'3 self)
  let rec invariant'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'0 x = true
  use seq.Seq
  function shallow_model'0 (self : borrowed (SparseArray_Sparse_Type.t_sparse t)) : Seq.seq (Core_Option_Option_Type.t_option t)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'1 ( * self)
  let rec shallow_model'0 (self:borrowed (SparseArray_Sparse_Type.t_sparse t)) (return'  (ret:Seq.seq (Core_Option_Option_Type.t_option t)))= any
    [ return' (result:Seq.seq (Core_Option_Option_Type.t_option t))-> {result = shallow_model'0 self}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Intrinsic
  predicate resolve'4 (self : borrowed usize) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'4 (self:borrowed usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  use prelude.Slice
  predicate resolve_elswhere'1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i
    /\ i <> UIntSize.to_int self /\ i < Seq.length old'  -> Seq.get old' i = Seq.get fin i
  let rec resolve_elswhere'1 (self:usize) (old':Seq.seq usize) (fin:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve_elswhere'1 self old' fin} (! return' {result}) ]
    
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  let rec has_value'1 (self:usize) (seq:Seq.seq usize) (out:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = has_value'1 self seq out} (! return' {result}) ]
    
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  let rec in_bounds'1 (self:usize) (seq:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'1 self seq} (! return' {result}) ]
    
  function shallow_model'5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'6 ( * self)
  let rec shallow_model'5 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq usize))= any
    [ return' (result:Seq.seq usize)-> {result = shallow_model'5 self} (! return' {result}) ]
    
  let rec index_mut'1 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (index:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] inv'5 index}
    {[@expl:precondition] inv'9 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46] in_bounds'1 index (shallow_model'5 self)}
    any
    [ return' (result:borrowed usize)-> {inv'10 result}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55] Seq.length (shallow_model'6 ( ^ self))
      = Seq.length (shallow_model'5 self)}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62] resolve_elswhere'1 index (shallow_model'5 self) (shallow_model'6 ( ^ self))}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57] has_value'1 index (shallow_model'6 ( ^ self)) ( ^ result)}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54] has_value'1 index (shallow_model'5 self) ( * result)}
      (! return' {result}) ]
    
  predicate resolve'3 (self : Snapshot.snap_ty ())
  let rec resolve'3 (self:Snapshot.snap_ty ()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  use prelude.Snapshot
  function lemma_permutation'0 [#"../sparse_array.rs" 104 4 104 38] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : ()
    
   =
    [#"../sparse_array.rs" 100 4 100 12] ()
  let rec lemma_permutation'0 (self:SparseArray_Sparse_Type.t_sparse t) (i:int) (return'  (ret:()))= {[@expl:precondition] [#"../sparse_array.rs" 104 25 104 29] inv'8 self}
    {[@expl:precondition] [#"../sparse_array.rs" 102 15 102 39] 0 <= i
    /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)}
    {[@expl:precondition] [#"../sparse_array.rs" 101 15 101 34] SparseArray_Sparse_Type.sparse_n self
    = SparseArray_Sparse_Type.sparse_size self}
    any [ return' (result:())-> {result = lemma_permutation'0 self i} (! return' {result}) ] 
  axiom lemma_permutation'0_spec : forall self : SparseArray_Sparse_Type.t_sparse t, i : int . ([#"../sparse_array.rs" 101 15 101 34] SparseArray_Sparse_Type.sparse_n self
  = SparseArray_Sparse_Type.sparse_size self)
   -> ([#"../sparse_array.rs" 102 15 102 39] 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self))
   -> ([#"../sparse_array.rs" 104 25 104 29] inv'8 self)  -> ([#"../sparse_array.rs" 103 14 103 28] is_elt'0 self i)
  predicate resolve'2 (self : borrowed (SparseArray_Sparse_Type.t_sparse t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed (SparseArray_Sparse_Type.t_sparse t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  function shallow_model'4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'6 self
  let rec shallow_model'4 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= any
    [ return' (result:Seq.seq usize)-> {result = shallow_model'4 self} (! return' {result}) ]
    
  let rec index'0 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (index:usize) (return'  (ret:usize))= {[@expl:precondition] inv'5 index}
    {[@expl:precondition] inv'6 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46] in_bounds'1 index (shallow_model'4 self)}
    any
    [ return' (result:usize)-> {inv'7 result}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54] has_value'1 index (shallow_model'4 self) result}
      (! return' {result}) ]
    
  predicate resolve'1 (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : t)
  let rec resolve'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i
    /\ i <> UIntSize.to_int self /\ i < Seq.length old'  -> Seq.get old' i = Seq.get fin i
  let rec resolve_elswhere'0 (self:usize) (old':Seq.seq t) (fin:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve_elswhere'0 self old' fin} (! return' {result}) ]
    
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  let rec has_value'0 (self:usize) (seq:Seq.seq t) (out:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = has_value'0 self seq out} (! return' {result}) ]
    
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  let rec in_bounds'0 (self:usize) (seq:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'0 self seq} (! return' {result}) ]
    
  function shallow_model'2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'3 ( * self)
  let rec shallow_model'2 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'2 self} (! return' {result}) ]
    
  let rec index_mut'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (index:usize) (return'  (ret:borrowed t))= {[@expl:precondition] inv'5 index}
    {[@expl:precondition] inv'4 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46] in_bounds'0 index (shallow_model'2 self)}
    any
    [ return' (result:borrowed t)-> {inv'2 result}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55] Seq.length (shallow_model'3 ( ^ self))
      = Seq.length (shallow_model'2 self)}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62] resolve_elswhere'0 index (shallow_model'2 self) (shallow_model'3 ( ^ self))}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57] has_value'0 index (shallow_model'3 ( ^ self)) ( ^ result)}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54] has_value'0 index (shallow_model'2 self) ( * result)}
      (! return' {result}) ]
    
  let rec set (self:borrowed (SparseArray_Sparse_Type.t_sparse t)) (i:usize) (v:t) (return'  (ret:()))= {[#"../sparse_array.rs" 112 36 112 37] inv'1 v}
    {[#"../sparse_array.rs" 112 20 112 24] inv'3 self}
    {[#"../sparse_array.rs" 108 15 108 31] UIntSize.to_int i < Seq.length (shallow_model'0 self)}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0
      [ s0 = SparseArray_Sparse_Type.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ridx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (rback'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
            Borrow.borrow_final
              <Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)>
              {rvalues'0}
              {Borrow.inherit_id (Borrow.get_id self) 3}
              (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_10 <- _ret' ] 
                SparseArray_Sparse_Type.t_sparse <t> { * self}
                  (fun (l_size'0:usize) (l_n'0:usize) (l_values'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (l_idx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (l_back'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
                    
                    [ &self <- { self with current = (SparseArray_Sparse_Type.C_Sparse l_size'0 l_n'0 ( ^ _10) l_idx'0 l_back'0 : SparseArray_Sparse_Type.t_sparse t) ; } ]
                    
                    s1)))
      | s1 = -{inv'0 ( ^ _10)}- s2
      | s2 = index_mut'0 {_10} {i} (fun (_ret':borrowed t) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_9 <- { _9 with current = v ; } ] (any [ any_ (_any:t)-> (!  [ &v <- _any ] s1) ] )
      | s1 = {[@expl:type invariant] inv'1 ( * _9)} s2
      | s2 = -{resolve'0 ( * _9)}- s3
      | s3 = {[@expl:type invariant] inv'2 _9} s4
      | s4 = -{resolve'1 _9}- s5
      | s5 = bb5 ]
      
    | bb5 = s0
      [ s0 = SparseArray_Sparse_Type.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ridx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (rback'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
            index'0 {ridx'0} {i} (fun (_ret':usize) ->  [ &_13 <- _ret' ] s1))
      | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 =  [ &index <- _13 ] s1
      | s1 = SparseArray_Sparse_Type.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ridx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (rback'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
            UIntSize.lt {index} {rn'0} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s2))
      | s2 = any [ br0 -> {_16 = false} (! bb11) | br1 -> {_16} (! bb7) ]  ]
      
    | bb7 = s0
      [ s0 = SparseArray_Sparse_Type.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ridx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (rback'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
            index'0 {rback'0} {index} (fun (_ret':usize) ->  [ &_21 <- _ret' ] s1))
      | s1 = bb8 ]
      
    | bb8 = s0
      [ s0 = UIntSize.eq {_21} {i} (fun (_ret':bool) ->  [ &_19 <- _ret' ] s1)
      | s1 = any [ br0 -> {_19 = false} (! bb10) | br1 -> {_19} (! bb9) ]  ]
      
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'3 self} s1
      | s1 = -{resolve'2 self}- s2
      | s2 =  [ &_0 <- [#"../sparse_array.rs" 123 9 123 9] () ] s3
      | s3 = bb16 ]
      
    | bb10 = s0 [ s0 = bb12 ] 
    | bb11 = s0 [ s0 = bb12 ] 
    | bb12 = s0 [ s0 =  [ &_25 <- [#"../sparse_array.rs" 117 12 117 46] Snapshot.new () ] s1 | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = -{resolve'3 _25}- s1
      | s1 = {[@expl:assertion] [#"../sparse_array.rs" 118 26 118 46] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n ( * self))
        < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size ( * self))}
        s2
      | s2 = SparseArray_Sparse_Type.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ridx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (rback'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
            Borrow.borrow_final
              <Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)>
              {ridx'0}
              {Borrow.inherit_id (Borrow.get_id self) 4}
              (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_31 <- _ret' ] 
                SparseArray_Sparse_Type.t_sparse <t> { * self}
                  (fun (l_size'0:usize) (l_n'0:usize) (l_values'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (l_idx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (l_back'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
                    
                    [ &self <- { self with current = (SparseArray_Sparse_Type.C_Sparse l_size'0 l_n'0 l_values'0 ( ^ _31) l_back'0 : SparseArray_Sparse_Type.t_sparse t) ; } ]
                    
                    s3)))
      | s3 = index_mut'1 {_31} {i} (fun (_ret':borrowed usize) ->  [ &_30 <- _ret' ] s4)
      | s4 = bb14 ]
      
    | bb14 = s0
      [ s0 = SparseArray_Sparse_Type.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ridx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (rback'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
             [ &_30 <- { _30 with current = rn'0 ; } ] 
            s1)
      | s1 = -{resolve'4 _30}- s2
      | s2 = SparseArray_Sparse_Type.t_sparse <t> { * self}
          (fun (rsize'1:usize) (rn'1:usize) (rvalues'1:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ridx'1:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (rback'1:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
            Borrow.borrow_final
              <Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)>
              {rback'1}
              {Borrow.inherit_id (Borrow.get_id self) 5}
              (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_35 <- _ret' ] 
                SparseArray_Sparse_Type.t_sparse <t> { * self}
                  (fun (l_size'0:usize) (l_n'0:usize) (l_values'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (l_idx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (l_back'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
                    
                    [ &self <- { self with current = (SparseArray_Sparse_Type.C_Sparse l_size'0 l_n'0 l_values'0 l_idx'0 ( ^ _35) : SparseArray_Sparse_Type.t_sparse t) ; } ]
                    
                    s3)))
      | s3 = SparseArray_Sparse_Type.t_sparse <t> { * self}
          (fun (rsize'2:usize) (rn'2:usize) (rvalues'2:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ridx'2:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (rback'2:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
            index_mut'1 {_35} {rn'2} (fun (_ret':borrowed usize) ->  [ &_34 <- _ret' ] s4))
      | s4 = bb15 ]
      
    | bb15 = s0
      [ s0 =  [ &_34 <- { _34 with current = i ; } ] s1
      | s1 = -{resolve'4 _34}- s2
      | s2 = SparseArray_Sparse_Type.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ridx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (rback'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
            UIntSize.add {rn'0} {[#"../sparse_array.rs" 122 22 122 23] (1 : usize)}
              (fun (_ret':usize) ->
                SparseArray_Sparse_Type.t_sparse <t> { * self}
                  (fun (l_size'0:usize) (l_n'0:usize) (l_values'0:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (l_idx'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (l_back'0:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->
                    
                    [ &self <- { self with current = (SparseArray_Sparse_Type.C_Sparse l_size'0 _ret' l_values'0 l_idx'0 l_back'0 : SparseArray_Sparse_Type.t_sparse t) ; } ]
                    
                    s3)))
      | s3 = {[@expl:type invariant] inv'3 self} s4
      | s4 = -{resolve'2 self}- s5
      | s5 =  [ &_0 <- [#"../sparse_array.rs" 115 54 123 9] () ] s6
      | s6 = bb16 ]
      
    | bb16 = s0 [ s0 = bb17 ] 
    | bb17 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & self : borrowed (SparseArray_Sparse_Type.t_sparse t) = self
    | & i : usize = i
    | & v : t = v
    | & _9 : borrowed t = any_l () : borrowed t
    | & _10 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
    | & index : usize = any_l () : usize
    | & _13 : usize = any_l () : usize
    | & _16 : bool = any_l () : bool
    | & _19 : bool = any_l () : bool
    | & _21 : usize = any_l () : usize
    | & _25 : Snapshot.snap_ty () = any_l () : Snapshot.snap_ty ()
    | & _30 : borrowed usize = any_l () : borrowed usize
    | & _31 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    | & _34 : borrowed usize = any_l () : borrowed usize
    | & _35 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../sparse_array.rs" 111 14 111 37] Seq.get (shallow_model'1 ( ^ self)) (UIntSize.to_int i)
      = Core_Option_Option_Type.C_Some v}
      {[@expl:postcondition] [#"../sparse_array.rs" 110 4 110 95] forall j : int . 0 <= j
      /\ j < Seq.length (shallow_model'0 self) /\ j <> UIntSize.to_int i
       -> Seq.get (shallow_model'1 ( ^ self)) j = Seq.get (shallow_model'0 self) j}
      {[@expl:postcondition] [#"../sparse_array.rs" 109 14 109 43] Seq.length (shallow_model'1 ( ^ self))
      = Seq.length (shallow_model'0 self)}
      (! return' {result}) ]
    
end
module SparseArray_Create
  type t
  use prelude.UIntSize
  use seq.Seq
  predicate invariant'6 (self : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq usize)
  let rec inv'6 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq usize . inv'6 x = true
  predicate invariant'5 (self : Seq.seq t)
  let rec invariant'5 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq t)
  let rec inv'5 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq t . inv'5 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'4 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'4 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  function shallow_model'2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  let rec shallow_model'2 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'4 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'2 self} (! return' {result}) ] 
  axiom shallow_model'2_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'4 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'6 (shallow_model'2 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'6 (shallow_model'2 self)
  let rec invariant'4 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'4 x = true
  predicate invariant'3 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : usize)
  let rec inv'3 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : usize . inv'3 x = true
  use seq.Seq
  predicate inv'2 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'2 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  function shallow_model'1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  let rec shallow_model'1 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'2 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'1 self} (! return' {result}) ] 
  axiom shallow_model'1_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'2 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'5 (shallow_model'1 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'5 (shallow_model'1 self)
  let rec invariant'2 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'2 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  function index_logic'1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'2 self) ix
  let rec index_logic'1 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = index_logic'1 self ix} (! return' {result}) ]
    
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use prelude.Mapping
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'1 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  function is_elt'0 [#"../sparse_array.rs" 72 4 72 36] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : bool =
    [#"../sparse_array.rs" 73 20 74 52] UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)
    < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_back self) (UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)))
    = i
  let rec is_elt'0 (self:SparseArray_Sparse_Type.t_sparse t) (i:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_elt'0 self i} (! return' {result}) ]
    
  function shallow_model'0 [#"../sparse_array.rs" 38 4 38 50] (self : SparseArray_Sparse_Type.t_sparse t) : Seq.seq (Core_Option_Option_Type.t_option t)
    
   =
    [#"../sparse_array.rs" 40 12 41 82] Seq.create (UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)) (Mapping.from_fn (fun (i : int) -> if is_elt'0 self i then
      Core_Option_Option_Type.C_Some (index_logic'0 (SparseArray_Sparse_Type.sparse_values self) i)
    else
      Core_Option_Option_Type.C_None
    ))
  let rec shallow_model'0 (self:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:Seq.seq (Core_Option_Option_Type.t_option t)))= any
    [ return' (result:Seq.seq (Core_Option_Option_Type.t_option t))-> {result = shallow_model'0 self}
      (! return' {result}) ]
    
  predicate invariant'1 [#"../sparse_array.rs" 49 4 49 30] (self : SparseArray_Sparse_Type.t_sparse t) =
    [#"../sparse_array.rs" 50 8 61 9] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    <= UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'0 self) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'1 (SparseArray_Sparse_Type.sparse_values self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'2 (SparseArray_Sparse_Type.sparse_idx self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'2 (SparseArray_Sparse_Type.sparse_back self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
     -> match index_logic'1 (SparseArray_Sparse_Type.sparse_back self) i with
      | j -> 0 <= UIntSize.to_int j
      /\ UIntSize.to_int j < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
      /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) (UIntSize.to_int j)) = i
      end)
  let rec invariant'1 (self:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : SparseArray_Sparse_Type.t_sparse t)
  let rec inv'1 (_x:SparseArray_Sparse_Type.t_sparse t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : SparseArray_Sparse_Type.t_sparse t . inv'1 x
  = (invariant'1 x
  /\ match x with
    | SparseArray_Sparse_Type.C_Sparse size n values idx back -> true
    end)
  predicate invariant'0 (self : t)
  let rec invariant'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : t)
  let rec inv'0 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : t . inv'0 x = true
  use seq.Seq
  use prelude.Intrinsic
  let rec from_elem'1 (elem:usize) (n:usize) (return'  (ret:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))= {[@expl:precondition] inv'3 elem}
    any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> {inv'4 result}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 175 12 175 78] forall i : int . 0 <= i /\ i < UIntSize.to_int n
       -> index_logic'1 result i = elem}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 174 22 174 41] Seq.length (shallow_model'2 result)
      = UIntSize.to_int n}
      (! return' {result}) ]
    
  let rec from_elem'0 (elem:t) (n:usize) (return'  (ret:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))= {[@expl:precondition] inv'0 elem}
    any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))-> {inv'2 result}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 175 12 175 78] forall i : int . 0 <= i /\ i < UIntSize.to_int n
       -> index_logic'0 result i = elem}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 174 22 174 41] Seq.length (shallow_model'1 result)
      = UIntSize.to_int n}
      (! return' {result}) ]
    
  predicate resolve'0 (self : t)
  let rec resolve'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec create (sz:usize) (dummy:t) (return'  (ret:SparseArray_Sparse_Type.t_sparse t))= {[#"../sparse_array.rs" 134 42 134 47] inv'0 dummy}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 dummy} s1
      | s1 = -{resolve'0 dummy}- s2
      | s2 = from_elem'0 {dummy} {sz}
          (fun (_ret':Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = from_elem'1 {[#"../sparse_array.rs" 135 64 135 65] (0 : usize)} {sz}
          (fun (_ret':Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->  [ &_9 <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = from_elem'1 {[#"../sparse_array.rs" 135 83 135 84] (0 : usize)} {sz}
          (fun (_ret':Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->  [ &_11 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = 
        [ &_0 <- SparseArray_Sparse_Type.C_Sparse sz ([#"../sparse_array.rs" 135 26 135 27] (0 : usize)) _6 _9 _11 : SparseArray_Sparse_Type.t_sparse t ]
        
        (any
        [ any_ (_any:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))-> (!  [ &_6 <- _any ] 
          (any
          [ any_ (_any:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> (!  [ &_9 <- _any ] 
            (any
            [ any_ (_any:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> (!  [ &_11 <- _any ] s1) ]
            )) ]
          )) ]
        )
      | s1 = bb4 ]
      
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = s0 [ s0 = bb6 ] 
    | bb6 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : SparseArray_Sparse_Type.t_sparse t = any_l () : SparseArray_Sparse_Type.t_sparse t
    | & sz : usize = sz
    | & dummy : t = dummy
    | & _6 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    | & _9 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    | & _11 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) ]
    
    [ return' (result:SparseArray_Sparse_Type.t_sparse t)-> {[@expl:postcondition] [#"../sparse_array.rs" 134 55 134 64] inv'1 result}
      {[@expl:postcondition] [#"../sparse_array.rs" 133 0 133 67] forall i : int . 0 <= i /\ i < UIntSize.to_int sz
       -> Seq.get (shallow_model'0 result) i = Core_Option_Option_Type.C_None}
      {[@expl:postcondition] [#"../sparse_array.rs" 132 10 132 27] SparseArray_Sparse_Type.sparse_size result = sz}
      (! return' {result}) ]
    
end
module SparseArray_F
  use prelude.UIntSize
  use seq.Seq
  predicate invariant'8 (self : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'8 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Seq.seq usize)
  let rec inv'8 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Seq.seq usize . inv'8 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'7 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'7 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  function shallow_model'5 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  let rec shallow_model'5 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'7 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'5 self} (! return' {result}) ] 
  axiom shallow_model'5_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'7 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'8 (shallow_model'5 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'5 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'7 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'8 (shallow_model'5 self)
  let rec invariant'7 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  axiom inv'7 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'7 x = true
  use prelude.Int32
  predicate invariant'6 (self : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Seq.seq int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq int32)
  let rec inv'6 (_x:Seq.seq int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq int32 . inv'6 x = true
  use seq.Seq
  predicate inv'5 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  let rec inv'5 (_x:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  function shallow_model'4 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
  let rec shallow_model'4 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq int32))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'5 self}
    any [ return' (result:Seq.seq int32)-> {result = shallow_model'4 self} (! return' {result}) ] 
  axiom shallow_model'4_spec : forall self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'5 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'6 (shallow_model'4 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'4 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'5 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'6 (shallow_model'4 self)
  let rec invariant'5 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  axiom inv'5 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv'5 x = true
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  use prelude.Borrow
  predicate invariant'4 (self : borrowed (SparseArray_Sparse_Type.t_sparse int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:borrowed (SparseArray_Sparse_Type.t_sparse int32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'0 (_x : SparseArray_Sparse_Type.t_sparse int32)
  let rec inv'0 (_x:SparseArray_Sparse_Type.t_sparse int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed (SparseArray_Sparse_Type.t_sparse int32))
  let rec inv'4 (_x:borrowed (SparseArray_Sparse_Type.t_sparse int32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed (SparseArray_Sparse_Type.t_sparse int32) . inv'4 x = (inv'0 ( * x) /\ inv'0 ( ^ x))
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Core_Option_Option_Type.t_option int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option int32)
  let rec inv'3 (_x:Core_Option_Option_Type.t_option int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option int32 . inv'3 x = true
  predicate invariant'2 (self : SparseArray_Sparse_Type.t_sparse int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:SparseArray_Sparse_Type.t_sparse int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : SparseArray_Sparse_Type.t_sparse int32)
  let rec inv'2 (_x:SparseArray_Sparse_Type.t_sparse int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : SparseArray_Sparse_Type.t_sparse int32 . inv'2 x = inv'0 x
  predicate invariant'1 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : int32)
  let rec inv'1 (_x:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : int32 . inv'1 x = true
  use seq.Seq
  function index_logic'1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'5 self) ix
  let rec index_logic'1 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = index_logic'1 self ix} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  use prelude.Mapping
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'4 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:int32))= any
    [ return' (result:int32)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  function is_elt'0 [#"../sparse_array.rs" 72 4 72 36] (self : SparseArray_Sparse_Type.t_sparse int32) (i : int) : bool
   =
    [#"../sparse_array.rs" 73 20 74 52] UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)
    < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_back self) (UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)))
    = i
  let rec is_elt'0 (self:SparseArray_Sparse_Type.t_sparse int32) (i:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_elt'0 self i} (! return' {result}) ]
    
  function shallow_model'1 [#"../sparse_array.rs" 38 4 38 50] (self : SparseArray_Sparse_Type.t_sparse int32) : Seq.seq (Core_Option_Option_Type.t_option int32)
    
   =
    [#"../sparse_array.rs" 40 12 41 82] Seq.create (UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)) (Mapping.from_fn (fun (i : int) -> if is_elt'0 self i then
      Core_Option_Option_Type.C_Some (index_logic'0 (SparseArray_Sparse_Type.sparse_values self) i)
    else
      Core_Option_Option_Type.C_None
    ))
  let rec shallow_model'1 (self:SparseArray_Sparse_Type.t_sparse int32) (return'  (ret:Seq.seq (Core_Option_Option_Type.t_option int32)))= any
    [ return' (result:Seq.seq (Core_Option_Option_Type.t_option int32))-> {result = shallow_model'1 self}
      (! return' {result}) ]
    
  predicate invariant'0 [#"../sparse_array.rs" 49 4 49 30] (self : SparseArray_Sparse_Type.t_sparse int32) =
    [#"../sparse_array.rs" 50 8 61 9] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    <= UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'1 self) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'4 (SparseArray_Sparse_Type.sparse_values self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'5 (SparseArray_Sparse_Type.sparse_idx self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'5 (SparseArray_Sparse_Type.sparse_back self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
     -> match index_logic'1 (SparseArray_Sparse_Type.sparse_back self) i with
      | j -> 0 <= UIntSize.to_int j
      /\ UIntSize.to_int j < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
      /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) (UIntSize.to_int j)) = i
      end)
  let rec invariant'0 (self:SparseArray_Sparse_Type.t_sparse int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : SparseArray_Sparse_Type.t_sparse int32 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | SparseArray_Sparse_Type.C_Sparse size n values idx back -> true
    end)
  use prelude.Intrinsic
  use prelude.Int32
  use prelude.Int
  function shallow_model'0 (self : int32) : int =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] Int32.to_int self
  let rec shallow_model'0 (self:int32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'3 (self : borrowed (SparseArray_Sparse_Type.t_sparse int32)) : Seq.seq (Core_Option_Option_Type.t_option int32)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'1 ( * self)
  let rec shallow_model'3 (self:borrowed (SparseArray_Sparse_Type.t_sparse int32)) (return'  (ret:Seq.seq (Core_Option_Option_Type.t_option int32)))= any
    [ return' (result:Seq.seq (Core_Option_Option_Type.t_option int32))-> {result = shallow_model'3 self}
      (! return' {result}) ]
    
  let rec set'0 (self:borrowed (SparseArray_Sparse_Type.t_sparse int32)) (i:usize) (v:int32) (return'  (ret:()))= {[@expl:precondition] [#"../sparse_array.rs" 112 36 112 37] inv'1 v}
    {[@expl:precondition] [#"../sparse_array.rs" 112 20 112 24] inv'4 self}
    {[@expl:precondition] [#"../sparse_array.rs" 108 15 108 31] UIntSize.to_int i < Seq.length (shallow_model'3 self)}
    any
    [ return' (result:())-> {[#"../sparse_array.rs" 111 14 111 37] Seq.get (shallow_model'1 ( ^ self)) (UIntSize.to_int i)
      = Core_Option_Option_Type.C_Some v}
      {[#"../sparse_array.rs" 110 4 110 95] forall j : int . 0 <= j
      /\ j < Seq.length (shallow_model'3 self) /\ j <> UIntSize.to_int i
       -> Seq.get (shallow_model'1 ( ^ self)) j = Seq.get (shallow_model'3 self) j}
      {[#"../sparse_array.rs" 109 14 109 43] Seq.length (shallow_model'1 ( ^ self)) = Seq.length (shallow_model'3 self)}
      (! return' {result}) ]
    
  function shallow_model'2 (self : SparseArray_Sparse_Type.t_sparse int32) : Seq.seq (Core_Option_Option_Type.t_option int32)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'1 self
  let rec shallow_model'2 (self:SparseArray_Sparse_Type.t_sparse int32) (return'  (ret:Seq.seq (Core_Option_Option_Type.t_option int32)))= any
    [ return' (result:Seq.seq (Core_Option_Option_Type.t_option int32))-> {result = shallow_model'2 self}
      (! return' {result}) ]
    
  let rec get'0 (self:SparseArray_Sparse_Type.t_sparse int32) (i:usize) (return'  (ret:Core_Option_Option_Type.t_option int32))= {[@expl:precondition] [#"../sparse_array.rs" 89 16 89 20] inv'2 self}
    {[@expl:precondition] [#"../sparse_array.rs" 80 15 80 31] UIntSize.to_int i < Seq.length (shallow_model'2 self)}
    any
    [ return' (result:Core_Option_Option_Type.t_option int32)-> {[#"../sparse_array.rs" 89 35 89 45] inv'3 result}
      {[#"../sparse_array.rs" 85 14 88 5] match Seq.get (shallow_model'2 self) (UIntSize.to_int i) with
        | Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None
        | Core_Option_Option_Type.C_Some _ -> true
        end}
      {[#"../sparse_array.rs" 81 14 84 5] match result with
        | Core_Option_Option_Type.C_None -> Seq.get (shallow_model'2 self) (UIntSize.to_int i)
        = Core_Option_Option_Type.C_None
        | Core_Option_Option_Type.C_Some x -> Seq.get (shallow_model'2 self) (UIntSize.to_int i)
        = Core_Option_Option_Type.C_Some x
        end}
      (! return' {result}) ]
    
  let rec create'0 (sz:usize) (dummy:int32) (return'  (ret:SparseArray_Sparse_Type.t_sparse int32))= {[@expl:precondition] [#"../sparse_array.rs" 134 42 134 47] inv'1 dummy}
    any
    [ return' (result:SparseArray_Sparse_Type.t_sparse int32)-> {[#"../sparse_array.rs" 134 55 134 64] inv'0 result}
      {[#"../sparse_array.rs" 133 0 133 67] forall i : int . 0 <= i /\ i < UIntSize.to_int sz
       -> Seq.get (shallow_model'1 result) i = Core_Option_Option_Type.C_None}
      {[#"../sparse_array.rs" 132 10 132 27] SparseArray_Sparse_Type.sparse_size result = sz}
      (! return' {result}) ]
    
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &default <- [#"../sparse_array.rs" 141 18 141 19] (0 : int32) ] s1
      | s1 = create'0 {[#"../sparse_array.rs" 142 23 142 25] (10 : usize)} {default}
          (fun (_ret':SparseArray_Sparse_Type.t_sparse int32) ->  [ &a <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = create'0 {[#"../sparse_array.rs" 143 23 143 25] (20 : usize)} {default}
          (fun (_ret':SparseArray_Sparse_Type.t_sparse int32) ->  [ &b <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = get'0 {a} {[#"../sparse_array.rs" 144 22 144 23] (5 : usize)}
          (fun (_ret':Core_Option_Option_Type.t_option int32) ->  [ &x <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = get'0 {b} {[#"../sparse_array.rs" 145 22 145 23] (7 : usize)}
          (fun (_ret':Core_Option_Option_Type.t_option int32) ->  [ &y <- _ret' ] s1)
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = {[@expl:assertion] [#"../sparse_array.rs" 146 18 146 40] x = Core_Option_Option_Type.C_None
        /\ y = Core_Option_Option_Type.C_None}
        s1
      | s1 = Borrow.borrow_mut <SparseArray_Sparse_Type.t_sparse int32> {a}
          (fun (_ret':borrowed (SparseArray_Sparse_Type.t_sparse int32)) ->  [ &_13 <- _ret' ]  [ &a <-  ^ _13 ] s2)
      | s2 = -{inv'0 ( ^ _13)}- s3
      | s3 = set'0
          {_13}
          {[#"../sparse_array.rs" 148 10 148 11] (5 : usize)}
          {[#"../sparse_array.rs" 148 13 148 14] (1 : int32)}
          (fun (_ret':()) ->  [ &_12 <- _ret' ] s4)
      | s4 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <SparseArray_Sparse_Type.t_sparse int32> {b}
          (fun (_ret':borrowed (SparseArray_Sparse_Type.t_sparse int32)) ->  [ &_15 <- _ret' ]  [ &b <-  ^ _15 ] s1)
      | s1 = -{inv'0 ( ^ _15)}- s2
      | s2 = set'0
          {_15}
          {[#"../sparse_array.rs" 149 10 149 11] (7 : usize)}
          {[#"../sparse_array.rs" 149 13 149 14] (2 : int32)}
          (fun (_ret':()) ->  [ &_14 <- _ret' ] s3)
      | s3 = bb6 ]
      
    | bb6 = s0
      [ s0 = get'0 {a} {[#"../sparse_array.rs" 150 14 150 15] (5 : usize)}
          (fun (_ret':Core_Option_Option_Type.t_option int32) ->  [ &_16 <- _ret' ] s1)
      | s1 = bb7 ]
      
    | bb7 = s0
      [ s0 =  [ &x <- _16 ] (any [ any_ (_any:Core_Option_Option_Type.t_option int32)-> (!  [ &_16 <- _any ] s1) ] )
      | s1 = get'0 {b} {[#"../sparse_array.rs" 151 14 151 15] (7 : usize)}
          (fun (_ret':Core_Option_Option_Type.t_option int32) ->  [ &_18 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 =  [ &y <- _18 ] (any [ any_ (_any:Core_Option_Option_Type.t_option int32)-> (!  [ &_18 <- _any ] s1) ] )
      | s1 = {[@expl:assertion] [#"../sparse_array.rs" 152 18 155 5] match x with
          | Core_Option_Option_Type.C_None -> false
          | Core_Option_Option_Type.C_Some z -> shallow_model'0 z = 1
          end}
        s2
      | s2 = {[@expl:assertion] [#"../sparse_array.rs" 156 18 159 5] match y with
          | Core_Option_Option_Type.C_None -> false
          | Core_Option_Option_Type.C_Some z -> shallow_model'0 z = 2
          end}
        s3
      | s3 = get'0 {a} {[#"../sparse_array.rs" 161 14 161 15] (7 : usize)}
          (fun (_ret':Core_Option_Option_Type.t_option int32) ->  [ &_24 <- _ret' ] s4)
      | s4 = bb9 ]
      
    | bb9 = s0
      [ s0 =  [ &x <- _24 ] (any [ any_ (_any:Core_Option_Option_Type.t_option int32)-> (!  [ &_24 <- _any ] s1) ] )
      | s1 = get'0 {b} {[#"../sparse_array.rs" 162 14 162 15] (5 : usize)}
          (fun (_ret':Core_Option_Option_Type.t_option int32) ->  [ &_26 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = s0
      [ s0 =  [ &y <- _26 ] (any [ any_ (_any:Core_Option_Option_Type.t_option int32)-> (!  [ &_26 <- _any ] s1) ] )
      | s1 = {[@expl:assertion] [#"../sparse_array.rs" 163 18 163 40] x = Core_Option_Option_Type.C_None
        /\ y = Core_Option_Option_Type.C_None}
        s2
      | s2 = get'0 {a} {[#"../sparse_array.rs" 165 14 165 15] (0 : usize)}
          (fun (_ret':Core_Option_Option_Type.t_option int32) ->  [ &_30 <- _ret' ] s3)
      | s3 = bb11 ]
      
    | bb11 = s0
      [ s0 =  [ &x <- _30 ] (any [ any_ (_any:Core_Option_Option_Type.t_option int32)-> (!  [ &_30 <- _any ] s1) ] )
      | s1 = get'0 {b} {[#"../sparse_array.rs" 166 14 166 15] (0 : usize)}
          (fun (_ret':Core_Option_Option_Type.t_option int32) ->  [ &_32 <- _ret' ] s2)
      | s2 = bb12 ]
      
    | bb12 = s0
      [ s0 =  [ &y <- _32 ] (any [ any_ (_any:Core_Option_Option_Type.t_option int32)-> (!  [ &_32 <- _any ] s1) ] )
      | s1 = {[@expl:assertion] [#"../sparse_array.rs" 167 18 167 40] x = Core_Option_Option_Type.C_None
        /\ y = Core_Option_Option_Type.C_None}
        s2
      | s2 = get'0 {a} {[#"../sparse_array.rs" 169 14 169 15] (9 : usize)}
          (fun (_ret':Core_Option_Option_Type.t_option int32) ->  [ &_36 <- _ret' ] s3)
      | s3 = bb13 ]
      
    | bb13 = s0
      [ s0 =  [ &x <- _36 ] (any [ any_ (_any:Core_Option_Option_Type.t_option int32)-> (!  [ &_36 <- _any ] s1) ] )
      | s1 = get'0 {b} {[#"../sparse_array.rs" 170 14 170 15] (9 : usize)}
          (fun (_ret':Core_Option_Option_Type.t_option int32) ->  [ &_38 <- _ret' ] s2)
      | s2 = bb14 ]
      
    | bb14 = s0
      [ s0 =  [ &y <- _38 ] (any [ any_ (_any:Core_Option_Option_Type.t_option int32)-> (!  [ &_38 <- _any ] s1) ] )
      | s1 = {[@expl:assertion] [#"../sparse_array.rs" 171 18 171 40] x = Core_Option_Option_Type.C_None
        /\ y = Core_Option_Option_Type.C_None}
        s2
      | s2 =  [ &_0 <- [#"../sparse_array.rs" 171 4 171 41] () ] s3
      | s3 = bb15 ]
      
    | bb15 = s0 [ s0 = bb16 ] 
    | bb16 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & default : int32 = any_l () : int32
    | & a : SparseArray_Sparse_Type.t_sparse int32 = any_l () : SparseArray_Sparse_Type.t_sparse int32
    | & b : SparseArray_Sparse_Type.t_sparse int32 = any_l () : SparseArray_Sparse_Type.t_sparse int32
    | & x : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & y : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & _12 : () = any_l () : ()
    | & _13 : borrowed (SparseArray_Sparse_Type.t_sparse int32) = any_l () : borrowed (SparseArray_Sparse_Type.t_sparse int32)
    | & _14 : () = any_l () : ()
    | & _15 : borrowed (SparseArray_Sparse_Type.t_sparse int32) = any_l () : borrowed (SparseArray_Sparse_Type.t_sparse int32)
    | & _16 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & _18 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & _24 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & _26 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & _30 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & _32 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & _36 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & _38 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module SparseArray_Impl0
  type t
end
module SparseArray_Impl1
  type t
end
