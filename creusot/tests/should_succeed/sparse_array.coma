
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module SparseArray_Sparse_Type
  use Alloc_Alloc_Global_Type as Global'0
  
  use prelude.prelude.UIntSize
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.Int
  
  type t_sparse 't =
    | C_Sparse usize usize (Vec'0.t_vec 't (Global'0.t_global)) (Vec'0.t_vec usize (Global'0.t_global)) (Vec'0.t_vec usize (Global'0.t_global))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_sparse < 't > (input:t_sparse 't) (ret  (size:usize) (n:usize) (values:Vec'0.t_vec 't (Global'0.t_global)) (idx:Vec'0.t_vec usize (Global'0.t_global)) (back:Vec'0.t_vec usize (Global'0.t_global)))= any
    [ good (size:usize) (n:usize) (values:Vec'0.t_vec 't (Global'0.t_global)) (idx:Vec'0.t_vec usize (Global'0.t_global)) (back:Vec'0.t_vec usize (Global'0.t_global))-> {C_Sparse size n values idx back
      = input}
      (! ret {size} {n} {values} {idx} {back})
    | bad (size:usize) (n:usize) (values:Vec'0.t_vec 't (Global'0.t_global)) (idx:Vec'0.t_vec usize (Global'0.t_global)) (back:Vec'0.t_vec usize (Global'0.t_global))-> {C_Sparse size n values idx back
      <> input}
      {false}
      any ]
    
  
  function sparse_size (self : t_sparse 't) : usize =
    match self with
      | C_Sparse a _ _ _ _ -> a
      end
  
  function sparse_idx (self : t_sparse 't) : Vec'0.t_vec usize (Global'0.t_global) =
    match self with
      | C_Sparse _ _ _ a _ -> a
      end
  
  function sparse_n (self : t_sparse 't) : usize =
    match self with
      | C_Sparse _ a _ _ _ -> a
      end
  
  function sparse_back (self : t_sparse 't) : Vec'0.t_vec usize (Global'0.t_global) =
    match self with
      | C_Sparse _ _ _ _ a -> a
      end
  
  function sparse_values (self : t_sparse 't) : Vec'0.t_vec 't (Global'0.t_global) =
    match self with
      | C_Sparse _ _ a _ _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module SparseArray_Impl2_Get
  type t
  
  let%span ssparse_array0 = "../sparse_array.rs" 80 15 80 31
  
  let%span ssparse_array1 = "../sparse_array.rs" 89 16 89 20
  
  let%span ssparse_array2 = "../sparse_array.rs" 81 14 84 5
  
  let%span ssparse_array3 = "../sparse_array.rs" 85 14 88 5
  
  let%span ssparse_array4 = "../sparse_array.rs" 89 35 89 45
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span7 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span8 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span9 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span10 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span12 = "../sparse_array.rs" 73 20 74 52
  
  let%span span13 = "../sparse_array.rs" 40 12 41 82
  
  let%span span14 = "../sparse_array.rs" 50 8 61 9
  
  let%span span15 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span16 = "../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  
  let%span span17 = "../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  
  let%span span18 = "../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span19 = "" 0 0 0 0
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span22 = "" 0 0 0 0
  
  use seq.Seq
  
  predicate invariant'11 (self : Seq.seq t)
  
  predicate inv'11 (_x : Seq.seq t)
  
  axiom inv'11 : forall x : Seq.seq t . inv'11 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span5] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'10 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'5 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t
  
  axiom shallow_model'5_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span6] inv'10 self)
   -> ([%#span8] inv'11 (shallow_model'5 self))
  && ([%#span7] Seq.length (shallow_model'5 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'10 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span9] inv'11 (shallow_model'5 self)
  
  axiom inv'10 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'10 x = true
  
  predicate invariant'9 (self : Seq.seq usize) =
    [%#span10] true
  
  predicate inv'9 (_x : Seq.seq usize)
  
  axiom inv'9 : forall x : Seq.seq usize . inv'9 x = true
  
  use seq.Seq
  
  predicate inv'8 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'4 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'4_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span6] inv'8 self)
   -> ([%#span8] inv'9 (shallow_model'4 self))
  && ([%#span7] Seq.length (shallow_model'4 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'8 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span9] inv'9 (shallow_model'4 self)
  
  axiom inv'8 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'8 x = true
  
  use Core_Option_Option_Type as Option'0
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : int) : usize =
    [%#span11] Seq.get (shallow_model'4 self) ix
  
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use prelude.prelude.Mapping
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec t (Global'0.t_global)) (ix : int) : t =
    [%#span11] Seq.get (shallow_model'5 self) ix
  
  use SparseArray_Sparse_Type as Sparse'0
  
  function is_elt'0 [#"../sparse_array.rs" 72 4 72 36] (self : Sparse'0.t_sparse t) (i : int) : bool =
    [%#span12] UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)
    < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_back self) (UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)))
    = i
  
  function shallow_model'3 [#"../sparse_array.rs" 38 4 38 50] (self : Sparse'0.t_sparse t) : Seq.seq (Option'0.t_option t)
    
   =
    [%#span13] Seq.create (UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)) (Mapping.from_fn (fun (i : int) -> if is_elt'0 self i then
      Option'0.C_Some (index_logic'0 (SparseArray_Sparse_Type.sparse_values self) i)
    else
      Option'0.C_None
    ))
  
  predicate invariant'7 [#"../sparse_array.rs" 49 4 49 30] (self : Sparse'0.t_sparse t) =
    [%#span14] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    <= UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'3 self) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'5 (SparseArray_Sparse_Type.sparse_values self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'4 (SparseArray_Sparse_Type.sparse_idx self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'4 (SparseArray_Sparse_Type.sparse_back self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
     -> match index_logic'1 (SparseArray_Sparse_Type.sparse_back self) i with
      | j -> 0 <= UIntSize.to_int j
      /\ UIntSize.to_int j < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
      /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) (UIntSize.to_int j)) = i
      end)
  
  predicate inv'7 (_x : Sparse'0.t_sparse t)
  
  axiom inv'7 : forall x : Sparse'0.t_sparse t . inv'7 x
  = (invariant'7 x
  /\ match x with
    | Sparse'0.C_Sparse size n values idx back -> true
    end)
  
  predicate invariant'6 (self : Vec'0.t_vec t (Global'0.t_global))
  
  predicate inv'6 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  axiom inv'6 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'6 x = true
  
  predicate invariant'5 (self : usize) =
    [%#span10] true
  
  predicate inv'5 (_x : usize)
  
  axiom inv'5 : forall x : usize . inv'5 x = true
  
  predicate invariant'4 (self : usize) =
    [%#span10] true
  
  predicate inv'4 (_x : usize)
  
  axiom inv'4 : forall x : usize . inv'4 x = true
  
  predicate invariant'3 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span10] true
  
  predicate inv'3 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  axiom inv'3 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'3 x = true
  
  predicate invariant'2 (self : Option'0.t_option t)
  
  predicate inv'2 (_x : Option'0.t_option t)
  
  axiom inv'2 : forall x : Option'0.t_option t . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  predicate invariant'0 (self : Sparse'0.t_sparse t)
  
  predicate inv'0 (_x : Sparse'0.t_sparse t)
  
  axiom inv'0 : forall x : Sparse'0.t_sparse t . inv'0 x = inv'7 x
  
  use seq.Seq
  
  function shallow_model'0 (self : Sparse'0.t_sparse t) : Seq.seq (Option'0.t_option t) =
    [%#span15] shallow_model'3 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : t)
  
  use prelude.prelude.Slice
  
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [%#span16] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [%#span17] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'2 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t =
    [%#span15] shallow_model'5 self
  
  let rec index'1 (self:Vec'0.t_vec t (Global'0.t_global)) (index:usize) (return'  (ret:t))= {[@expl:precondition] [%#span20] inv'4 index}
    {[@expl:precondition] [%#span19] inv'6 self}
    {[@expl:precondition] [%#span18] in_bounds'1 index (shallow_model'2 self)}
    any
    [ return' (result:t)-> {[%#span22] inv'1 result}
      {[%#span21] has_value'1 index (shallow_model'2 self) result}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : Sparse'0.t_sparse t)
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#span16] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#span17] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'1 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize =
    [%#span15] shallow_model'4 self
  
  let rec index'0 (self:Vec'0.t_vec usize (Global'0.t_global)) (index:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span20] inv'4 index}
    {[@expl:precondition] [%#span19] inv'3 self}
    {[@expl:precondition] [%#span18] in_bounds'0 index (shallow_model'1 self)}
    any
    [ return' (result:usize)-> {[%#span22] inv'5 result}
      {[%#span21] has_value'0 index (shallow_model'1 self) result}
      (! return' {result}) ]
    
  
  let rec get (self:Sparse'0.t_sparse t) (i:usize) (return'  (ret:Option'0.t_option t))= {[%#ssparse_array1] inv'0 self}
    {[%#ssparse_array0] UIntSize.to_int i < Seq.length (shallow_model'0 self)}
    (! bb0
    [ bb0 = s0
      [ s0 = Sparse'0.t_sparse <t> {self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Vec'0.t_vec t (Global'0.t_global)) (ridx'0:Vec'0.t_vec usize (Global'0.t_global)) (rback'0:Vec'0.t_vec usize (Global'0.t_global)) ->
            index'0 {ridx'0} {i} (fun (_ret':usize) ->  [ &_7 <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &index <- _7 ] s1
      | s1 = Sparse'0.t_sparse <t> {self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Vec'0.t_vec t (Global'0.t_global)) (ridx'0:Vec'0.t_vec usize (Global'0.t_global)) (rback'0:Vec'0.t_vec usize (Global'0.t_global)) ->
            UIntSize.lt {index} {rn'0} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s2))
      | s2 = any [ br0 -> {_10 = false} (! bb7) | br1 -> {_10} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 = Sparse'0.t_sparse <t> {self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Vec'0.t_vec t (Global'0.t_global)) (ridx'0:Vec'0.t_vec usize (Global'0.t_global)) (rback'0:Vec'0.t_vec usize (Global'0.t_global)) ->
            index'0 {rback'0} {index} (fun (_ret':usize) ->  [ &_15 <- _ret' ] s1))
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = UIntSize.eq {_15} {i} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s1)
      | s1 = any [ br0 -> {_13 = false} (! bb6) | br1 -> {_13} (! bb4) ]  ]
      
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = Sparse'0.t_sparse <t> {self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Vec'0.t_vec t (Global'0.t_global)) (ridx'0:Vec'0.t_vec usize (Global'0.t_global)) (rback'0:Vec'0.t_vec usize (Global'0.t_global)) ->
            index'1 {rvalues'0} {i} (fun (_ret':t) ->  [ &_21 <- _ret' ] s3))
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 =  [ &_20 <- _21 ] s1
      | s1 = {[@expl:type invariant] inv'1 _21} s2
      | s2 = -{resolve'1 _21}- s3
      | s3 = {[@expl:type invariant] inv'1 _20} s4
      | s4 = -{resolve'1 _20}- s5
      | s5 =  [ &_0 <- Option'0.C_Some _20 ] s6
      | s6 = bb9 ]
      
    | bb6 = s0 [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb8 ] 
    | bb7 = s0 [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb8 ] 
    | bb8 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb9 ] 
    | bb9 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option t = any_l ()
    | & self : Sparse'0.t_sparse t = self
    | & i : usize = i
    | & index : usize = any_l ()
    | & _7 : usize = any_l ()
    | & _10 : bool = any_l ()
    | & _13 : bool = any_l ()
    | & _15 : usize = any_l ()
    | & _20 : t = any_l ()
    | & _21 : t = any_l () ]
    
    [ return' (result:Option'0.t_option t)-> {[@expl:postcondition] [%#ssparse_array4] inv'2 result}
      {[@expl:postcondition] [%#ssparse_array3] match Seq.get (shallow_model'0 self) (UIntSize.to_int i) with
        | Option'0.C_None -> result = Option'0.C_None
        | Option'0.C_Some _ -> true
        end}
      {[@expl:postcondition] [%#ssparse_array2] match result with
        | Option'0.C_None -> Seq.get (shallow_model'0 self) (UIntSize.to_int i) = Option'0.C_None
        | Option'0.C_Some x -> Seq.get (shallow_model'0 self) (UIntSize.to_int i) = Option'0.C_Some x
        end}
      (! return' {result}) ]
    
end
module SparseArray_Impl2_LemmaPermutation_Impl
  type t
  
  let%span ssparse_array0 = "../sparse_array.rs" 101 15 101 34
  
  let%span ssparse_array1 = "../sparse_array.rs" 102 15 102 39
  
  let%span ssparse_array2 = "../sparse_array.rs" 104 25 104 29
  
  let%span ssparse_array3 = "../sparse_array.rs" 103 14 103 28
  
  let%span span4 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span7 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span8 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span9 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span11 = "../sparse_array.rs" 73 20 74 52
  
  let%span span12 = "../sparse_array.rs" 40 12 41 82
  
  let%span span13 = "../sparse_array.rs" 50 8 61 9
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq t)
  
  predicate inv'4 (_x : Seq.seq t)
  
  axiom inv'4 : forall x : Seq.seq t . inv'4 x = true
  
  use prelude.prelude.UIntSize
  
  predicate invariant'3 (self : Seq.seq usize) =
    [%#span4] true
  
  predicate inv'3 (_x : Seq.seq usize)
  
  axiom inv'3 : forall x : Seq.seq usize . inv'3 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span5] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'2 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span6] inv'2 self)
   -> ([%#span8] inv'3 (shallow_model'0 self))
  && ([%#span7] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'2 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span9] inv'3 (shallow_model'0 self)
  
  axiom inv'2 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'2 x = true
  
  use seq.Seq
  
  predicate inv'1 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span6] inv'1 self)
   -> ([%#span8] inv'4 (shallow_model'2 self))
  && ([%#span7] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'1 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span9] inv'4 (shallow_model'2 self)
  
  axiom inv'1 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'1 x = true
  
  use Core_Option_Option_Type as Option'0
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : int) : usize =
    [%#span10] Seq.get (shallow_model'0 self) ix
  
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use prelude.prelude.Mapping
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec t (Global'0.t_global)) (ix : int) : t =
    [%#span10] Seq.get (shallow_model'2 self) ix
  
  use SparseArray_Sparse_Type as Sparse'0
  
  function is_elt'0 [#"../sparse_array.rs" 72 4 72 36] (self : Sparse'0.t_sparse t) (i : int) : bool =
    [%#span11] UIntSize.to_int (index_logic'0 (SparseArray_Sparse_Type.sparse_idx self) i)
    < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    /\ UIntSize.to_int (index_logic'0 (SparseArray_Sparse_Type.sparse_back self) (UIntSize.to_int (index_logic'0 (SparseArray_Sparse_Type.sparse_idx self) i)))
    = i
  
  function shallow_model'1 [#"../sparse_array.rs" 38 4 38 50] (self : Sparse'0.t_sparse t) : Seq.seq (Option'0.t_option t)
    
   =
    [%#span12] Seq.create (UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)) (Mapping.from_fn (fun (i : int) -> if is_elt'0 self i then
      Option'0.C_Some (index_logic'1 (SparseArray_Sparse_Type.sparse_values self) i)
    else
      Option'0.C_None
    ))
  
  predicate invariant'0 [#"../sparse_array.rs" 49 4 49 30] (self : Sparse'0.t_sparse t) =
    [%#span13] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    <= UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'1 self) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'2 (SparseArray_Sparse_Type.sparse_values self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'0 (SparseArray_Sparse_Type.sparse_idx self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'0 (SparseArray_Sparse_Type.sparse_back self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
     -> match index_logic'0 (SparseArray_Sparse_Type.sparse_back self) i with
      | j -> 0 <= UIntSize.to_int j
      /\ UIntSize.to_int j < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
      /\ UIntSize.to_int (index_logic'0 (SparseArray_Sparse_Type.sparse_idx self) (UIntSize.to_int j)) = i
      end)
  
  predicate inv'0 (_x : Sparse'0.t_sparse t)
  
  axiom inv'0 : forall x : Sparse'0.t_sparse t . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Sparse'0.C_Sparse size n values idx back -> true
    end)
  
  constant self  : Sparse'0.t_sparse t
  
  constant i  : int
  
  function lemma_permutation [#"../sparse_array.rs" 104 4 104 38] (self : Sparse'0.t_sparse t) (i : int) : ()
  
  goal vc_lemma_permutation : ([%#ssparse_array2] inv'0 self)
   -> ([%#ssparse_array1] 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self))
   -> ([%#ssparse_array0] SparseArray_Sparse_Type.sparse_n self = SparseArray_Sparse_Type.sparse_size self)
   -> ([%#ssparse_array3] is_elt'0 self i)
end
module SparseArray_Impl2_Set
  type t
  
  let%span ssparse_array0 = "../sparse_array.rs" 117 12 117 46
  
  let%span ssparse_array1 = "../sparse_array.rs" 118 26 118 46
  
  let%span ssparse_array2 = "../sparse_array.rs" 122 22 122 23
  
  let%span ssparse_array3 = "../sparse_array.rs" 108 15 108 31
  
  let%span ssparse_array4 = "../sparse_array.rs" 112 20 112 24
  
  let%span ssparse_array5 = "../sparse_array.rs" 112 36 112 37
  
  let%span ssparse_array6 = "../sparse_array.rs" 109 14 109 43
  
  let%span ssparse_array7 = "../sparse_array.rs" 110 4 110 95
  
  let%span ssparse_array8 = "../sparse_array.rs" 111 14 111 37
  
  let%span span9 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span10 = "" 0 0 0 0
  
  let%span span11 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span12 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span13 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span14 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span16 = "../sparse_array.rs" 73 20 74 52
  
  let%span span17 = "../sparse_array.rs" 40 12 41 82
  
  let%span span18 = "../sparse_array.rs" 50 8 61 9
  
  let%span span19 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span20 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span21 = "../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96
  
  let%span span22 = "../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  
  let%span span23 = "../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  
  let%span span24 = "../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46
  
  let%span span25 = "" 0 0 0 0
  
  let%span span26 = "" 0 0 0 0
  
  let%span span27 = "../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54
  
  let%span span28 = "../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57
  
  let%span span29 = "../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62
  
  let%span span30 = "../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55
  
  let%span span31 = "" 0 0 0 0
  
  let%span span32 = "../sparse_array.rs" 101 15 101 34
  
  let%span span33 = "../sparse_array.rs" 102 15 102 39
  
  let%span span34 = "../sparse_array.rs" 104 25 104 29
  
  let%span span35 = "../sparse_array.rs" 103 14 103 28
  
  let%span span36 = "../sparse_array.rs" 100 4 100 12
  
  let%span span37 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span38 = "../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span39 = "" 0 0 0 0
  
  let%span span40 = "" 0 0 0 0
  
  let%span span41 = "../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span42 = "" 0 0 0 0
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'13 (self : Seq.seq usize) =
    [%#span9] true
  
  predicate inv'13 (_x : Seq.seq usize)
  
  axiom inv'13 : forall x : Seq.seq usize . inv'13 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span10] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'12 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'6 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'6_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span11] inv'12 self)
   -> ([%#span13] inv'13 (shallow_model'6 self))
  && ([%#span12] Seq.length (shallow_model'6 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'12 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span14] inv'13 (shallow_model'6 self)
  
  axiom inv'12 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'12 x = true
  
  predicate invariant'11 (self : Seq.seq t)
  
  predicate inv'11 (_x : Seq.seq t)
  
  axiom inv'11 : forall x : Seq.seq t . inv'11 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'10 (self : borrowed usize) =
    [%#span9] true
  
  predicate inv'10 (_x : borrowed usize)
  
  axiom inv'10 : forall x : borrowed usize . inv'10 x = true
  
  predicate invariant'9 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span9] true
  
  predicate inv'9 (_x : borrowed (Vec'0.t_vec usize (Global'0.t_global)))
  
  axiom inv'9 : forall x : borrowed (Vec'0.t_vec usize (Global'0.t_global)) . inv'9 x = true
  
  predicate inv'0 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  use Core_Option_Option_Type as Option'0
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : int) : usize =
    [%#span15] Seq.get (shallow_model'6 self) ix
  
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  
  use seq.Seq
  
  function shallow_model'3 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span11] inv'0 self)
   -> ([%#span13] inv'11 (shallow_model'3 self))
  && ([%#span12] Seq.length (shallow_model'3 self) <= UIntSize.to_int (max'0 : usize))
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Mapping
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec t (Global'0.t_global)) (ix : int) : t =
    [%#span15] Seq.get (shallow_model'3 self) ix
  
  use SparseArray_Sparse_Type as Sparse'0
  
  function is_elt'0 [#"../sparse_array.rs" 72 4 72 36] (self : Sparse'0.t_sparse t) (i : int) : bool =
    [%#span16] UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)
    < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_back self) (UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)))
    = i
  
  function shallow_model'1 [#"../sparse_array.rs" 38 4 38 50] (self : Sparse'0.t_sparse t) : Seq.seq (Option'0.t_option t)
    
   =
    [%#span17] Seq.create (UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)) (Mapping.from_fn (fun (i : int) -> if is_elt'0 self i then
      Option'0.C_Some (index_logic'0 (SparseArray_Sparse_Type.sparse_values self) i)
    else
      Option'0.C_None
    ))
  
  predicate invariant'8 [#"../sparse_array.rs" 49 4 49 30] (self : Sparse'0.t_sparse t) =
    [%#span18] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    <= UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'1 self) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'3 (SparseArray_Sparse_Type.sparse_values self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'6 (SparseArray_Sparse_Type.sparse_idx self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'6 (SparseArray_Sparse_Type.sparse_back self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
     -> match index_logic'1 (SparseArray_Sparse_Type.sparse_back self) i with
      | j -> 0 <= UIntSize.to_int j
      /\ UIntSize.to_int j < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
      /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) (UIntSize.to_int j)) = i
      end)
  
  predicate inv'8 (_x : Sparse'0.t_sparse t)
  
  axiom inv'8 : forall x : Sparse'0.t_sparse t . inv'8 x
  = (invariant'8 x
  /\ match x with
    | Sparse'0.C_Sparse size n values idx back -> true
    end)
  
  predicate invariant'7 (self : usize) =
    [%#span9] true
  
  predicate inv'7 (_x : usize)
  
  axiom inv'7 : forall x : usize . inv'7 x = true
  
  predicate invariant'6 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span9] true
  
  predicate inv'6 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  axiom inv'6 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'6 x = true
  
  predicate invariant'5 (self : usize) =
    [%#span9] true
  
  predicate inv'5 (_x : usize)
  
  axiom inv'5 : forall x : usize . inv'5 x = true
  
  predicate invariant'4 (self : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  predicate inv'4 (_x : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  axiom inv'4 : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . inv'4 x = true
  
  predicate invariant'3 (self : borrowed (Sparse'0.t_sparse t))
  
  predicate inv'3 (_x : borrowed (Sparse'0.t_sparse t))
  
  axiom inv'3 : forall x : borrowed (Sparse'0.t_sparse t) . inv'3 x = (inv'8 ( * x) /\ inv'8 ( ^ x))
  
  predicate invariant'2 (self : borrowed t)
  
  predicate inv'2 (_x : borrowed t)
  
  axiom inv'2 : forall x : borrowed t . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  predicate invariant'0 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span14] inv'11 (shallow_model'3 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'0 x = true
  
  use seq.Seq
  
  function shallow_model'0 (self : borrowed (Sparse'0.t_sparse t)) : Seq.seq (Option'0.t_option t) =
    [%#span19] shallow_model'1 ( * self)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'4 (self : borrowed usize) =
    [%#span20]  ^ self =  * self
  
  use prelude.prelude.Slice
  
  predicate resolve_elswhere'1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [%#span21] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#span22] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#span23] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'5 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) : Seq.seq usize =
    [%#span19] shallow_model'6 ( * self)
  
  let rec index_mut'1 (self:borrowed (Vec'0.t_vec usize (Global'0.t_global))) (index:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] [%#span26] inv'5 index}
    {[@expl:precondition] [%#span25] inv'9 self}
    {[@expl:precondition] [%#span24] in_bounds'1 index (shallow_model'5 self)}
    any
    [ return' (result:borrowed usize)-> {[%#span31] inv'10 result}
      {[%#span30] Seq.length (shallow_model'6 ( ^ self)) = Seq.length (shallow_model'5 self)}
      {[%#span29] resolve_elswhere'1 index (shallow_model'5 self) (shallow_model'6 ( ^ self))}
      {[%#span28] has_value'1 index (shallow_model'6 ( ^ self)) ( ^ result)}
      {[%#span27] has_value'1 index (shallow_model'5 self) ( * result)}
      (! return' {result}) ]
    
  
  predicate resolve'3 (self : Snapshot.snap_ty ())
  
  use prelude.prelude.Snapshot
  
  function lemma_permutation'0 [#"../sparse_array.rs" 104 4 104 38] (self : Sparse'0.t_sparse t) (i : int) : () =
    [%#span36] ()
  
  axiom lemma_permutation'0_spec : forall self : Sparse'0.t_sparse t, i : int . ([%#span32] SparseArray_Sparse_Type.sparse_n self
  = SparseArray_Sparse_Type.sparse_size self)
   -> ([%#span33] 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self))
   -> ([%#span34] inv'8 self)  -> ([%#span35] is_elt'0 self i)
  
  predicate resolve'2 (self : borrowed (Sparse'0.t_sparse t)) =
    [%#span20]  ^ self =  * self
  
  function shallow_model'4 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize =
    [%#span37] shallow_model'6 self
  
  let rec index'0 (self:Vec'0.t_vec usize (Global'0.t_global)) (index:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span40] inv'5 index}
    {[@expl:precondition] [%#span39] inv'6 self}
    {[@expl:precondition] [%#span38] in_bounds'1 index (shallow_model'4 self)}
    any
    [ return' (result:usize)-> {[%#span42] inv'7 result}
      {[%#span41] has_value'1 index (shallow_model'4 self) result}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed t) =
    [%#span20]  ^ self =  * self
  
  predicate resolve'0 (self : t)
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    [%#span21] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [%#span22] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [%#span23] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'2 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq t =
    [%#span19] shallow_model'3 ( * self)
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (index:usize) (return'  (ret:borrowed t))= {[@expl:precondition] [%#span26] inv'5 index}
    {[@expl:precondition] [%#span25] inv'4 self}
    {[@expl:precondition] [%#span24] in_bounds'0 index (shallow_model'2 self)}
    any
    [ return' (result:borrowed t)-> {[%#span31] inv'2 result}
      {[%#span30] Seq.length (shallow_model'3 ( ^ self)) = Seq.length (shallow_model'2 self)}
      {[%#span29] resolve_elswhere'0 index (shallow_model'2 self) (shallow_model'3 ( ^ self))}
      {[%#span28] has_value'0 index (shallow_model'3 ( ^ self)) ( ^ result)}
      {[%#span27] has_value'0 index (shallow_model'2 self) ( * result)}
      (! return' {result}) ]
    
  
  let rec set (self:borrowed (Sparse'0.t_sparse t)) (i:usize) (v:t) (return'  (ret:()))= {[%#ssparse_array5] inv'1 v}
    {[%#ssparse_array4] inv'3 self}
    {[%#ssparse_array3] UIntSize.to_int i < Seq.length (shallow_model'0 self)}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 = Sparse'0.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Vec'0.t_vec t (Global'0.t_global)) (ridx'0:Vec'0.t_vec usize (Global'0.t_global)) (rback'0:Vec'0.t_vec usize (Global'0.t_global)) ->
            Borrow.borrow_final
              <Vec'0.t_vec t (Global'0.t_global)>
              {rvalues'0}
              {Borrow.inherit_id (Borrow.get_id self) 3}
              (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
                 [ &_10 <- _ret' ] 
                Sparse'0.t_sparse <t> { * self}
                  (fun (l_size'0:usize) (l_n'0:usize) (l_values'0:Vec'0.t_vec t (Global'0.t_global)) (l_idx'0:Vec'0.t_vec usize (Global'0.t_global)) (l_back'0:Vec'0.t_vec usize (Global'0.t_global)) ->
                     [ &self <- { self with current = Sparse'0.C_Sparse l_size'0 l_n'0 ( ^ _10) l_idx'0 l_back'0 ; } ] 
                    s1)))
      | s1 = -{inv'0 ( ^ _10)}- s2
      | s2 = index_mut'0 {_10} {i} (fun (_ret':borrowed t) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = bb3
    | bb3 = s0
      [ s0 =  [ &_9 <- { _9 with current = v ; } ] (any [ any_ (_any:t)-> (!  [ &v <- _any ] s1) ] )
      | s1 = {[@expl:type invariant] inv'1 ( * _9)} s2
      | s2 = -{resolve'0 ( * _9)}- s3
      | s3 = {[@expl:type invariant] inv'2 _9} s4
      | s4 = -{resolve'1 _9}- s5
      | s5 = bb5 ]
      
    | bb5 = s0
      [ s0 = Sparse'0.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Vec'0.t_vec t (Global'0.t_global)) (ridx'0:Vec'0.t_vec usize (Global'0.t_global)) (rback'0:Vec'0.t_vec usize (Global'0.t_global)) ->
            index'0 {ridx'0} {i} (fun (_ret':usize) ->  [ &_13 <- _ret' ] s1))
      | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 =  [ &index <- _13 ] s1
      | s1 = Sparse'0.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Vec'0.t_vec t (Global'0.t_global)) (ridx'0:Vec'0.t_vec usize (Global'0.t_global)) (rback'0:Vec'0.t_vec usize (Global'0.t_global)) ->
            UIntSize.lt {index} {rn'0} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s2))
      | s2 = any [ br0 -> {_16 = false} (! bb11) | br1 -> {_16} (! bb7) ]  ]
      
    | bb7 = s0
      [ s0 = Sparse'0.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Vec'0.t_vec t (Global'0.t_global)) (ridx'0:Vec'0.t_vec usize (Global'0.t_global)) (rback'0:Vec'0.t_vec usize (Global'0.t_global)) ->
            index'0 {rback'0} {index} (fun (_ret':usize) ->  [ &_21 <- _ret' ] s1))
      | s1 = bb8 ]
      
    | bb8 = s0
      [ s0 = UIntSize.eq {_21} {i} (fun (_ret':bool) ->  [ &_19 <- _ret' ] s1)
      | s1 = any [ br0 -> {_19 = false} (! bb10) | br1 -> {_19} (! bb9) ]  ]
      
    | bb9 = s0 [ s0 = {[@expl:type invariant] inv'3 self} s1 | s1 = -{resolve'2 self}- s2 | s2 = bb16 ] 
    | bb10 = bb12
    | bb11 = bb12
    | bb12 = s0 [ s0 =  [ &_25 <- [%#ssparse_array0] Snapshot.new () ] s1 | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = -{resolve'3 _25}- s1
      | s1 = {[@expl:assertion] [%#ssparse_array1] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n ( * self))
        < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size ( * self))}
        s2
      | s2 = Sparse'0.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Vec'0.t_vec t (Global'0.t_global)) (ridx'0:Vec'0.t_vec usize (Global'0.t_global)) (rback'0:Vec'0.t_vec usize (Global'0.t_global)) ->
            Borrow.borrow_final
              <Vec'0.t_vec usize (Global'0.t_global)>
              {ridx'0}
              {Borrow.inherit_id (Borrow.get_id self) 4}
              (fun (_ret':borrowed (Vec'0.t_vec usize (Global'0.t_global))) ->
                 [ &_31 <- _ret' ] 
                Sparse'0.t_sparse <t> { * self}
                  (fun (l_size'0:usize) (l_n'0:usize) (l_values'0:Vec'0.t_vec t (Global'0.t_global)) (l_idx'0:Vec'0.t_vec usize (Global'0.t_global)) (l_back'0:Vec'0.t_vec usize (Global'0.t_global)) ->
                    
                    [ &self <- { self with current = Sparse'0.C_Sparse l_size'0 l_n'0 l_values'0 ( ^ _31) l_back'0 ; } ]
                    
                    s3)))
      | s3 = index_mut'1 {_31} {i} (fun (_ret':borrowed usize) ->  [ &_30 <- _ret' ] s4)
      | s4 = bb14 ]
      
    | bb14 = s0
      [ s0 = Sparse'0.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Vec'0.t_vec t (Global'0.t_global)) (ridx'0:Vec'0.t_vec usize (Global'0.t_global)) (rback'0:Vec'0.t_vec usize (Global'0.t_global)) ->
             [ &_30 <- { _30 with current = rn'0 ; } ] 
            s1)
      | s1 = -{resolve'4 _30}- s2
      | s2 = Sparse'0.t_sparse <t> { * self}
          (fun (rsize'1:usize) (rn'1:usize) (rvalues'1:Vec'0.t_vec t (Global'0.t_global)) (ridx'1:Vec'0.t_vec usize (Global'0.t_global)) (rback'1:Vec'0.t_vec usize (Global'0.t_global)) ->
            Borrow.borrow_final
              <Vec'0.t_vec usize (Global'0.t_global)>
              {rback'1}
              {Borrow.inherit_id (Borrow.get_id self) 5}
              (fun (_ret':borrowed (Vec'0.t_vec usize (Global'0.t_global))) ->
                 [ &_35 <- _ret' ] 
                Sparse'0.t_sparse <t> { * self}
                  (fun (l_size'0:usize) (l_n'0:usize) (l_values'0:Vec'0.t_vec t (Global'0.t_global)) (l_idx'0:Vec'0.t_vec usize (Global'0.t_global)) (l_back'0:Vec'0.t_vec usize (Global'0.t_global)) ->
                    
                    [ &self <- { self with current = Sparse'0.C_Sparse l_size'0 l_n'0 l_values'0 l_idx'0 ( ^ _35) ; } ]
                    
                    s3)))
      | s3 = Sparse'0.t_sparse <t> { * self}
          (fun (rsize'2:usize) (rn'2:usize) (rvalues'2:Vec'0.t_vec t (Global'0.t_global)) (ridx'2:Vec'0.t_vec usize (Global'0.t_global)) (rback'2:Vec'0.t_vec usize (Global'0.t_global)) ->
            index_mut'1 {_35} {rn'2} (fun (_ret':borrowed usize) ->  [ &_34 <- _ret' ] s4))
      | s4 = bb15 ]
      
    | bb15 = s0
      [ s0 =  [ &_34 <- { _34 with current = i ; } ] s1
      | s1 = -{resolve'4 _34}- s2
      | s2 = Sparse'0.t_sparse <t> { * self}
          (fun (rsize'0:usize) (rn'0:usize) (rvalues'0:Vec'0.t_vec t (Global'0.t_global)) (ridx'0:Vec'0.t_vec usize (Global'0.t_global)) (rback'0:Vec'0.t_vec usize (Global'0.t_global)) ->
            UIntSize.add {rn'0} {[%#ssparse_array2] (1 : usize)}
              (fun (_ret':usize) ->
                Sparse'0.t_sparse <t> { * self}
                  (fun (l_size'0:usize) (l_n'0:usize) (l_values'0:Vec'0.t_vec t (Global'0.t_global)) (l_idx'0:Vec'0.t_vec usize (Global'0.t_global)) (l_back'0:Vec'0.t_vec usize (Global'0.t_global)) ->
                    
                    [ &self <- { self with current = Sparse'0.C_Sparse l_size'0 _ret' l_values'0 l_idx'0 l_back'0 ; } ]
                    
                    s3)))
      | s3 = {[@expl:type invariant] inv'3 self} s4
      | s4 = -{resolve'2 self}- s5
      | s5 = bb16 ]
      
    | bb16 = bb17
    | bb17 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Sparse'0.t_sparse t) = self
    | & i : usize = i
    | & v : t = v
    | & _9 : borrowed t = any_l ()
    | & _10 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & index : usize = any_l ()
    | & _13 : usize = any_l ()
    | & _16 : bool = any_l ()
    | & _19 : bool = any_l ()
    | & _21 : usize = any_l ()
    | & _25 : Snapshot.snap_ty () = any_l ()
    | & _30 : borrowed usize = any_l ()
    | & _31 : borrowed (Vec'0.t_vec usize (Global'0.t_global)) = any_l ()
    | & _34 : borrowed usize = any_l ()
    | & _35 : borrowed (Vec'0.t_vec usize (Global'0.t_global)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#ssparse_array8] Seq.get (shallow_model'1 ( ^ self)) (UIntSize.to_int i)
      = Option'0.C_Some v}
      {[@expl:postcondition] [%#ssparse_array7] forall j : int . 0 <= j
      /\ j < Seq.length (shallow_model'0 self) /\ j <> UIntSize.to_int i
       -> Seq.get (shallow_model'1 ( ^ self)) j = Seq.get (shallow_model'0 self) j}
      {[@expl:postcondition] [%#ssparse_array6] Seq.length (shallow_model'1 ( ^ self))
      = Seq.length (shallow_model'0 self)}
      (! return' {result}) ]
    
end
module SparseArray_Create
  type t
  
  let%span ssparse_array0 = "../sparse_array.rs" 135 64 135 65
  
  let%span ssparse_array1 = "../sparse_array.rs" 135 83 135 84
  
  let%span ssparse_array2 = "../sparse_array.rs" 135 26 135 27
  
  let%span ssparse_array3 = "../sparse_array.rs" 134 42 134 47
  
  let%span ssparse_array4 = "../sparse_array.rs" 132 10 132 27
  
  let%span ssparse_array5 = "../sparse_array.rs" 133 0 133 67
  
  let%span ssparse_array6 = "../sparse_array.rs" 134 55 134 64
  
  let%span span7 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span8 = "" 0 0 0 0
  
  let%span span9 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span10 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span11 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span12 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span14 = "../sparse_array.rs" 73 20 74 52
  
  let%span span15 = "../sparse_array.rs" 40 12 41 82
  
  let%span span16 = "../sparse_array.rs" 50 8 61 9
  
  let%span span17 = "" 0 0 0 0
  
  let%span span18 = "../../../../creusot-contracts/src/std/vec.rs" 174 22 174 41
  
  let%span span19 = "../../../../creusot-contracts/src/std/vec.rs" 175 12 175 78
  
  let%span span20 = "" 0 0 0 0
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'6 (self : Seq.seq usize) =
    [%#span7] true
  
  predicate inv'6 (_x : Seq.seq usize)
  
  axiom inv'6 : forall x : Seq.seq usize . inv'6 x = true
  
  predicate invariant'5 (self : Seq.seq t)
  
  predicate inv'5 (_x : Seq.seq t)
  
  axiom inv'5 : forall x : Seq.seq t . inv'5 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span8] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'4 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span9] inv'4 self)
   -> ([%#span11] inv'6 (shallow_model'2 self))
  && ([%#span10] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'4 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span12] inv'6 (shallow_model'2 self)
  
  axiom inv'4 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'4 x = true
  
  predicate invariant'3 (self : usize) =
    [%#span7] true
  
  predicate inv'3 (_x : usize)
  
  axiom inv'3 : forall x : usize . inv'3 x = true
  
  use seq.Seq
  
  predicate inv'2 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'1 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span9] inv'2 self)
   -> ([%#span11] inv'5 (shallow_model'1 self))
  && ([%#span10] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'2 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span12] inv'5 (shallow_model'1 self)
  
  axiom inv'2 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'2 x = true
  
  use Core_Option_Option_Type as Option'0
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : int) : usize =
    [%#span13] Seq.get (shallow_model'2 self) ix
  
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use prelude.prelude.Mapping
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec t (Global'0.t_global)) (ix : int) : t =
    [%#span13] Seq.get (shallow_model'1 self) ix
  
  use SparseArray_Sparse_Type as Sparse'0
  
  function is_elt'0 [#"../sparse_array.rs" 72 4 72 36] (self : Sparse'0.t_sparse t) (i : int) : bool =
    [%#span14] UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)
    < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_back self) (UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)))
    = i
  
  function shallow_model'0 [#"../sparse_array.rs" 38 4 38 50] (self : Sparse'0.t_sparse t) : Seq.seq (Option'0.t_option t)
    
   =
    [%#span15] Seq.create (UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)) (Mapping.from_fn (fun (i : int) -> if is_elt'0 self i then
      Option'0.C_Some (index_logic'0 (SparseArray_Sparse_Type.sparse_values self) i)
    else
      Option'0.C_None
    ))
  
  predicate invariant'1 [#"../sparse_array.rs" 49 4 49 30] (self : Sparse'0.t_sparse t) =
    [%#span16] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    <= UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'0 self) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'1 (SparseArray_Sparse_Type.sparse_values self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'2 (SparseArray_Sparse_Type.sparse_idx self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'2 (SparseArray_Sparse_Type.sparse_back self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
     -> match index_logic'1 (SparseArray_Sparse_Type.sparse_back self) i with
      | j -> 0 <= UIntSize.to_int j
      /\ UIntSize.to_int j < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
      /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) (UIntSize.to_int j)) = i
      end)
  
  predicate inv'1 (_x : Sparse'0.t_sparse t)
  
  axiom inv'1 : forall x : Sparse'0.t_sparse t . inv'1 x
  = (invariant'1 x
  /\ match x with
    | Sparse'0.C_Sparse size n values idx back -> true
    end)
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use seq.Seq
  
  use prelude.prelude.Intrinsic
  
  let rec from_elem'1 (elem:usize) (n:usize) (return'  (ret:Vec'0.t_vec usize (Global'0.t_global)))= {[@expl:precondition] [%#span17] inv'3 elem}
    any
    [ return' (result:Vec'0.t_vec usize (Global'0.t_global))-> {[%#span20] inv'4 result}
      {[%#span19] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'1 result i = elem}
      {[%#span18] Seq.length (shallow_model'2 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  let rec from_elem'0 (elem:t) (n:usize) (return'  (ret:Vec'0.t_vec t (Global'0.t_global)))= {[@expl:precondition] [%#span17] inv'0 elem}
    any
    [ return' (result:Vec'0.t_vec t (Global'0.t_global))-> {[%#span20] inv'2 result}
      {[%#span19] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[%#span18] Seq.length (shallow_model'1 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : t)
  
  let rec create (sz:usize) (dummy:t) (return'  (ret:Sparse'0.t_sparse t))= {[%#ssparse_array3] inv'0 dummy}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 dummy} s1
      | s1 = -{resolve'0 dummy}- s2
      | s2 = from_elem'0 {dummy} {sz} (fun (_ret':Vec'0.t_vec t (Global'0.t_global)) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = from_elem'1 {[%#ssparse_array0] (0 : usize)} {sz}
          (fun (_ret':Vec'0.t_vec usize (Global'0.t_global)) ->  [ &_9 <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = from_elem'1 {[%#ssparse_array1] (0 : usize)} {sz}
          (fun (_ret':Vec'0.t_vec usize (Global'0.t_global)) ->  [ &_11 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &_0 <- Sparse'0.C_Sparse sz ([%#ssparse_array2] (0 : usize)) _6 _9 _11 ] 
        (any
        [ any_ (_any:Vec'0.t_vec t (Global'0.t_global))-> (!  [ &_6 <- _any ] 
          (any
          [ any_ (_any:Vec'0.t_vec usize (Global'0.t_global))-> (!  [ &_9 <- _any ] 
            (any [ any_ (_any:Vec'0.t_vec usize (Global'0.t_global))-> (!  [ &_11 <- _any ] s1) ] )) ]
          )) ]
        )
      | s1 = bb4 ]
      
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = return' {_0} ]
    )
    [ & _0 : Sparse'0.t_sparse t = any_l ()
    | & sz : usize = sz
    | & dummy : t = dummy
    | & _6 : Vec'0.t_vec t (Global'0.t_global) = any_l ()
    | & _9 : Vec'0.t_vec usize (Global'0.t_global) = any_l ()
    | & _11 : Vec'0.t_vec usize (Global'0.t_global) = any_l () ]
    
    [ return' (result:Sparse'0.t_sparse t)-> {[@expl:postcondition] [%#ssparse_array6] inv'1 result}
      {[@expl:postcondition] [%#ssparse_array5] forall i : int . 0 <= i /\ i < UIntSize.to_int sz
       -> Seq.get (shallow_model'0 result) i = Option'0.C_None}
      {[@expl:postcondition] [%#ssparse_array4] SparseArray_Sparse_Type.sparse_size result = sz}
      (! return' {result}) ]
    
end
module SparseArray_F
  let%span ssparse_array0 = "../sparse_array.rs" 141 18 141 19
  
  let%span ssparse_array1 = "../sparse_array.rs" 142 23 142 25
  
  let%span ssparse_array2 = "../sparse_array.rs" 143 23 143 25
  
  let%span ssparse_array3 = "../sparse_array.rs" 144 22 144 23
  
  let%span ssparse_array4 = "../sparse_array.rs" 145 22 145 23
  
  let%span ssparse_array5 = "../sparse_array.rs" 146 18 146 40
  
  let%span ssparse_array6 = "../sparse_array.rs" 148 10 148 11
  
  let%span ssparse_array7 = "../sparse_array.rs" 148 13 148 14
  
  let%span ssparse_array8 = "../sparse_array.rs" 149 10 149 11
  
  let%span ssparse_array9 = "../sparse_array.rs" 149 13 149 14
  
  let%span ssparse_array10 = "../sparse_array.rs" 150 14 150 15
  
  let%span ssparse_array11 = "../sparse_array.rs" 151 14 151 15
  
  let%span ssparse_array12 = "../sparse_array.rs" 152 18 155 5
  
  let%span ssparse_array13 = "../sparse_array.rs" 156 18 159 5
  
  let%span ssparse_array14 = "../sparse_array.rs" 161 14 161 15
  
  let%span ssparse_array15 = "../sparse_array.rs" 162 14 162 15
  
  let%span ssparse_array16 = "../sparse_array.rs" 163 18 163 40
  
  let%span ssparse_array17 = "../sparse_array.rs" 165 14 165 15
  
  let%span ssparse_array18 = "../sparse_array.rs" 166 14 166 15
  
  let%span ssparse_array19 = "../sparse_array.rs" 167 18 167 40
  
  let%span ssparse_array20 = "../sparse_array.rs" 169 14 169 15
  
  let%span ssparse_array21 = "../sparse_array.rs" 170 14 170 15
  
  let%span ssparse_array22 = "../sparse_array.rs" 171 18 171 40
  
  let%span span23 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span24 = "" 0 0 0 0
  
  let%span span25 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span26 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span27 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span28 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span30 = "../sparse_array.rs" 73 20 74 52
  
  let%span span31 = "../sparse_array.rs" 40 12 41 82
  
  let%span span32 = "../sparse_array.rs" 50 8 61 9
  
  let%span span33 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span34 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span35 = "../sparse_array.rs" 108 15 108 31
  
  let%span span36 = "../sparse_array.rs" 112 20 112 24
  
  let%span span37 = "../sparse_array.rs" 112 36 112 37
  
  let%span span38 = "../sparse_array.rs" 109 14 109 43
  
  let%span span39 = "../sparse_array.rs" 110 4 110 95
  
  let%span span40 = "../sparse_array.rs" 111 14 111 37
  
  let%span span41 = "../sparse_array.rs" 80 15 80 31
  
  let%span span42 = "../sparse_array.rs" 89 16 89 20
  
  let%span span43 = "../sparse_array.rs" 81 14 84 5
  
  let%span span44 = "../sparse_array.rs" 85 14 88 5
  
  let%span span45 = "../sparse_array.rs" 89 35 89 45
  
  let%span span46 = "../sparse_array.rs" 134 42 134 47
  
  let%span span47 = "../sparse_array.rs" 132 10 132 27
  
  let%span span48 = "../sparse_array.rs" 133 0 133 67
  
  let%span span49 = "../sparse_array.rs" 134 55 134 64
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'8 (self : Seq.seq usize) =
    [%#span23] true
  
  predicate inv'8 (_x : Seq.seq usize)
  
  axiom inv'8 : forall x : Seq.seq usize . inv'8 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span24] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'7 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'5 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'5_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span25] inv'7 self)
   -> ([%#span27] inv'8 (shallow_model'5 self))
  && ([%#span26] Seq.length (shallow_model'5 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'7 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span28] inv'8 (shallow_model'5 self)
  
  axiom inv'7 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'7 x = true
  
  use prelude.prelude.Int32
  
  predicate invariant'6 (self : Seq.seq int32) =
    [%#span23] true
  
  predicate inv'6 (_x : Seq.seq int32)
  
  axiom inv'6 : forall x : Seq.seq int32 . inv'6 x = true
  
  use seq.Seq
  
  predicate inv'5 (_x : Vec'0.t_vec int32 (Global'0.t_global))
  
  function shallow_model'4 (self : Vec'0.t_vec int32 (Global'0.t_global)) : Seq.seq int32
  
  axiom shallow_model'4_spec : forall self : Vec'0.t_vec int32 (Global'0.t_global) . ([%#span25] inv'5 self)
   -> ([%#span27] inv'6 (shallow_model'4 self))
  && ([%#span26] Seq.length (shallow_model'4 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'5 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span28] inv'6 (shallow_model'4 self)
  
  axiom inv'5 : forall x : Vec'0.t_vec int32 (Global'0.t_global) . inv'5 x = true
  
  use SparseArray_Sparse_Type as Sparse'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed (Sparse'0.t_sparse int32)) =
    [%#span23] true
  
  predicate inv'0 (_x : Sparse'0.t_sparse int32)
  
  predicate inv'4 (_x : borrowed (Sparse'0.t_sparse int32))
  
  axiom inv'4 : forall x : borrowed (Sparse'0.t_sparse int32) . inv'4 x = (inv'0 ( * x) /\ inv'0 ( ^ x))
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option int32) =
    [%#span23] true
  
  predicate inv'3 (_x : Option'0.t_option int32)
  
  axiom inv'3 : forall x : Option'0.t_option int32 . inv'3 x = true
  
  predicate invariant'2 (self : Sparse'0.t_sparse int32) =
    [%#span23] true
  
  predicate inv'2 (_x : Sparse'0.t_sparse int32)
  
  axiom inv'2 : forall x : Sparse'0.t_sparse int32 . inv'2 x = inv'0 x
  
  predicate invariant'1 (self : int32) =
    [%#span23] true
  
  predicate inv'1 (_x : int32)
  
  axiom inv'1 : forall x : int32 . inv'1 x = true
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : int) : usize =
    [%#span29] Seq.get (shallow_model'5 self) ix
  
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Mapping
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec int32 (Global'0.t_global)) (ix : int) : int32 =
    [%#span29] Seq.get (shallow_model'4 self) ix
  
  function is_elt'0 [#"../sparse_array.rs" 72 4 72 36] (self : Sparse'0.t_sparse int32) (i : int) : bool =
    [%#span30] UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)
    < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_back self) (UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) i)))
    = i
  
  function shallow_model'1 [#"../sparse_array.rs" 38 4 38 50] (self : Sparse'0.t_sparse int32) : Seq.seq (Option'0.t_option int32)
    
   =
    [%#span31] Seq.create (UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)) (Mapping.from_fn (fun (i : int) -> if is_elt'0 self i then
      Option'0.C_Some (index_logic'0 (SparseArray_Sparse_Type.sparse_values self) i)
    else
      Option'0.C_None
    ))
  
  predicate invariant'0 [#"../sparse_array.rs" 49 4 49 30] (self : Sparse'0.t_sparse int32) =
    [%#span32] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
    <= UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'1 self) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'4 (SparseArray_Sparse_Type.sparse_values self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'5 (SparseArray_Sparse_Type.sparse_idx self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ Seq.length (shallow_model'5 (SparseArray_Sparse_Type.sparse_back self))
    = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self)
     -> match index_logic'1 (SparseArray_Sparse_Type.sparse_back self) i with
      | j -> 0 <= UIntSize.to_int j
      /\ UIntSize.to_int j < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)
      /\ UIntSize.to_int (index_logic'1 (SparseArray_Sparse_Type.sparse_idx self) (UIntSize.to_int j)) = i
      end)
  
  axiom inv'0 : forall x : Sparse'0.t_sparse int32 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Sparse'0.C_Sparse size n values idx back -> true
    end)
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  function shallow_model'0 (self : int32) : int =
    [%#span33] Int32.to_int self
  
  use seq.Seq
  
  function shallow_model'3 (self : borrowed (Sparse'0.t_sparse int32)) : Seq.seq (Option'0.t_option int32) =
    [%#span34] shallow_model'1 ( * self)
  
  let rec set'0 (self:borrowed (Sparse'0.t_sparse int32)) (i:usize) (v:int32) (return'  (ret:()))= {[@expl:precondition] [%#span37] inv'1 v}
    {[@expl:precondition] [%#span36] inv'4 self}
    {[@expl:precondition] [%#span35] UIntSize.to_int i < Seq.length (shallow_model'3 self)}
    any
    [ return' (result:())-> {[%#span40] Seq.get (shallow_model'1 ( ^ self)) (UIntSize.to_int i) = Option'0.C_Some v}
      {[%#span39] forall j : int . 0 <= j /\ j < Seq.length (shallow_model'3 self) /\ j <> UIntSize.to_int i
       -> Seq.get (shallow_model'1 ( ^ self)) j = Seq.get (shallow_model'3 self) j}
      {[%#span38] Seq.length (shallow_model'1 ( ^ self)) = Seq.length (shallow_model'3 self)}
      (! return' {result}) ]
    
  
  function shallow_model'2 (self : Sparse'0.t_sparse int32) : Seq.seq (Option'0.t_option int32) =
    [%#span33] shallow_model'1 self
  
  let rec get'0 (self:Sparse'0.t_sparse int32) (i:usize) (return'  (ret:Option'0.t_option int32))= {[@expl:precondition] [%#span42] inv'2 self}
    {[@expl:precondition] [%#span41] UIntSize.to_int i < Seq.length (shallow_model'2 self)}
    any
    [ return' (result:Option'0.t_option int32)-> {[%#span45] inv'3 result}
      {[%#span44] match Seq.get (shallow_model'2 self) (UIntSize.to_int i) with
        | Option'0.C_None -> result = Option'0.C_None
        | Option'0.C_Some _ -> true
        end}
      {[%#span43] match result with
        | Option'0.C_None -> Seq.get (shallow_model'2 self) (UIntSize.to_int i) = Option'0.C_None
        | Option'0.C_Some x -> Seq.get (shallow_model'2 self) (UIntSize.to_int i) = Option'0.C_Some x
        end}
      (! return' {result}) ]
    
  
  let rec create'0 (sz:usize) (dummy:int32) (return'  (ret:Sparse'0.t_sparse int32))= {[@expl:precondition] [%#span46] inv'1 dummy}
    any
    [ return' (result:Sparse'0.t_sparse int32)-> {[%#span49] inv'0 result}
      {[%#span48] forall i : int . 0 <= i /\ i < UIntSize.to_int sz
       -> Seq.get (shallow_model'1 result) i = Option'0.C_None}
      {[%#span47] SparseArray_Sparse_Type.sparse_size result = sz}
      (! return' {result}) ]
    
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &default <- [%#ssparse_array0] (0 : int32) ] s1
      | s1 = create'0 {[%#ssparse_array1] (10 : usize)} {default}
          (fun (_ret':Sparse'0.t_sparse int32) ->  [ &a <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = create'0 {[%#ssparse_array2] (20 : usize)} {default}
          (fun (_ret':Sparse'0.t_sparse int32) ->  [ &b <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = get'0 {a} {[%#ssparse_array3] (5 : usize)} (fun (_ret':Option'0.t_option int32) ->  [ &x <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = get'0 {b} {[%#ssparse_array4] (7 : usize)} (fun (_ret':Option'0.t_option int32) ->  [ &y <- _ret' ] s1)
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = {[@expl:assertion] [%#ssparse_array5] x = Option'0.C_None /\ y = Option'0.C_None} s1
      | s1 = Borrow.borrow_mut <Sparse'0.t_sparse int32> {a}
          (fun (_ret':borrowed (Sparse'0.t_sparse int32)) ->  [ &_13 <- _ret' ]  [ &a <-  ^ _13 ] s2)
      | s2 = -{inv'0 ( ^ _13)}- s3
      | s3 = set'0 {_13} {[%#ssparse_array6] (5 : usize)} {[%#ssparse_array7] (1 : int32)}
          (fun (_ret':()) ->  [ &_12 <- _ret' ] s4)
      | s4 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <Sparse'0.t_sparse int32> {b}
          (fun (_ret':borrowed (Sparse'0.t_sparse int32)) ->  [ &_15 <- _ret' ]  [ &b <-  ^ _15 ] s1)
      | s1 = -{inv'0 ( ^ _15)}- s2
      | s2 = set'0 {_15} {[%#ssparse_array8] (7 : usize)} {[%#ssparse_array9] (2 : int32)}
          (fun (_ret':()) ->  [ &_14 <- _ret' ] s3)
      | s3 = bb6 ]
      
    | bb6 = s0
      [ s0 = get'0 {a} {[%#ssparse_array10] (5 : usize)} (fun (_ret':Option'0.t_option int32) ->  [ &_16 <- _ret' ] s1)
      | s1 = bb7 ]
      
    | bb7 = s0
      [ s0 =  [ &x <- _16 ] (any [ any_ (_any:Option'0.t_option int32)-> (!  [ &_16 <- _any ] s1) ] )
      | s1 = get'0 {b} {[%#ssparse_array11] (7 : usize)} (fun (_ret':Option'0.t_option int32) ->  [ &_18 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 =  [ &y <- _18 ] (any [ any_ (_any:Option'0.t_option int32)-> (!  [ &_18 <- _any ] s1) ] )
      | s1 = {[@expl:assertion] [%#ssparse_array12] match x with
          | Option'0.C_None -> false
          | Option'0.C_Some z -> shallow_model'0 z = 1
          end}
        s2
      | s2 = {[@expl:assertion] [%#ssparse_array13] match y with
          | Option'0.C_None -> false
          | Option'0.C_Some z -> shallow_model'0 z = 2
          end}
        s3
      | s3 = get'0 {a} {[%#ssparse_array14] (7 : usize)} (fun (_ret':Option'0.t_option int32) ->  [ &_24 <- _ret' ] s4)
      | s4 = bb9 ]
      
    | bb9 = s0
      [ s0 =  [ &x <- _24 ] (any [ any_ (_any:Option'0.t_option int32)-> (!  [ &_24 <- _any ] s1) ] )
      | s1 = get'0 {b} {[%#ssparse_array15] (5 : usize)} (fun (_ret':Option'0.t_option int32) ->  [ &_26 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = s0
      [ s0 =  [ &y <- _26 ] (any [ any_ (_any:Option'0.t_option int32)-> (!  [ &_26 <- _any ] s1) ] )
      | s1 = {[@expl:assertion] [%#ssparse_array16] x = Option'0.C_None /\ y = Option'0.C_None} s2
      | s2 = get'0 {a} {[%#ssparse_array17] (0 : usize)} (fun (_ret':Option'0.t_option int32) ->  [ &_30 <- _ret' ] s3)
      | s3 = bb11 ]
      
    | bb11 = s0
      [ s0 =  [ &x <- _30 ] (any [ any_ (_any:Option'0.t_option int32)-> (!  [ &_30 <- _any ] s1) ] )
      | s1 = get'0 {b} {[%#ssparse_array18] (0 : usize)} (fun (_ret':Option'0.t_option int32) ->  [ &_32 <- _ret' ] s2)
      | s2 = bb12 ]
      
    | bb12 = s0
      [ s0 =  [ &y <- _32 ] (any [ any_ (_any:Option'0.t_option int32)-> (!  [ &_32 <- _any ] s1) ] )
      | s1 = {[@expl:assertion] [%#ssparse_array19] x = Option'0.C_None /\ y = Option'0.C_None} s2
      | s2 = get'0 {a} {[%#ssparse_array20] (9 : usize)} (fun (_ret':Option'0.t_option int32) ->  [ &_36 <- _ret' ] s3)
      | s3 = bb13 ]
      
    | bb13 = s0
      [ s0 =  [ &x <- _36 ] (any [ any_ (_any:Option'0.t_option int32)-> (!  [ &_36 <- _any ] s1) ] )
      | s1 = get'0 {b} {[%#ssparse_array21] (9 : usize)} (fun (_ret':Option'0.t_option int32) ->  [ &_38 <- _ret' ] s2)
      | s2 = bb14 ]
      
    | bb14 = s0
      [ s0 =  [ &y <- _38 ] (any [ any_ (_any:Option'0.t_option int32)-> (!  [ &_38 <- _any ] s1) ] )
      | s1 = {[@expl:assertion] [%#ssparse_array22] x = Option'0.C_None /\ y = Option'0.C_None} s2
      | s2 = bb15 ]
      
    | bb15 = bb16
    | bb16 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & default : int32 = any_l ()
    | & a : Sparse'0.t_sparse int32 = any_l ()
    | & b : Sparse'0.t_sparse int32 = any_l ()
    | & x : Option'0.t_option int32 = any_l ()
    | & y : Option'0.t_option int32 = any_l ()
    | & _12 : () = any_l ()
    | & _13 : borrowed (Sparse'0.t_sparse int32) = any_l ()
    | & _14 : () = any_l ()
    | & _15 : borrowed (Sparse'0.t_sparse int32) = any_l ()
    | & _16 : Option'0.t_option int32 = any_l ()
    | & _18 : Option'0.t_option int32 = any_l ()
    | & _24 : Option'0.t_option int32 = any_l ()
    | & _26 : Option'0.t_option int32 = any_l ()
    | & _30 : Option'0.t_option int32 = any_l ()
    | & _32 : Option'0.t_option int32 = any_l ()
    | & _36 : Option'0.t_option int32 = any_l ()
    | & _38 : Option'0.t_option int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module SparseArray_Impl0
  type t
end
module SparseArray_Impl1
  type t
end
