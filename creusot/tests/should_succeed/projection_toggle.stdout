module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module ProjectionToggle_ProjToggle_Interface
  type t   
  use prelude.Prelude
  val proj_toggle (toggle : bool) (a : borrowed t) (b : borrowed t) : borrowed t
    ensures { if toggle then result = a &&  ^ b =  * b else result = b &&  ^ a =  * a }
    
end
module ProjectionToggle_ProjToggle
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = bool
  let rec cfg proj_toggle (toggle : bool) (a : borrowed t) (b : borrowed t) : borrowed t
    ensures { if toggle then result = a &&  ^ b =  * b else result = b &&  ^ a =  * a }
    
   = 
  var _0 : borrowed t;
  var toggle_1 : bool;
  var a_2 : borrowed t;
  var b_3 : borrowed t;
  var _4 : borrowed t;
  var _5 : borrowed t;
  var _6 : bool;
  var _7 : borrowed t;
  {
    toggle_1 <- toggle;
    a_2 <- a;
    b_3 <- b;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _6 };
    _6 <- toggle_1;
    assume { Resolve0.resolve toggle_1 };
    switch (_6)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { Resolve1.resolve b_3 };
    _7 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _7) };
    assume { Resolve1.resolve a_2 };
    _5 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _5) };
    assume { Resolve1.resolve _7 };
    goto BB3
  }
  BB2 {
    assume { Resolve1.resolve a_2 };
    _5 <- borrow_mut ( * b_3);
    b_3 <- { b_3 with current = ( ^ _5) };
    assume { Resolve1.resolve b_3 };
    goto BB3
  }
  BB3 {
    _4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    assume { Resolve1.resolve _5 };
    _0 <- borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _0) };
    assume { Resolve1.resolve _4 };
    return _0
  }
  
end
module ProjectionToggle_Main_Interface
  val main () : ()
end
module ProjectionToggle_Main
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = int32
  clone ProjectionToggle_ProjToggle_Interface as ProjToggle0 with type t = int32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = int32
  let rec cfg main () : () = 
  var _0 : ();
  var a_1 : int32;
  var b_2 : int32;
  var x_3 : borrowed int32;
  var _4 : borrowed int32;
  var _5 : borrowed int32;
  var _6 : borrowed int32;
  var _7 : borrowed int32;
  var _8 : ();
  var _9 : bool;
  var _10 : bool;
  var _11 : int32;
  var _12 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- (10 : int32);
    b_2 <- (5 : int32);
    _5 <- borrow_mut a_1;
    a_1 <-  ^ _5;
    _4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    _7 <- borrow_mut b_2;
    b_2 <-  ^ _7;
    assume { Resolve0.resolve b_2 };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    x_3 <- ProjToggle0.proj_toggle true _4 _6;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve _5 };
    assume { Resolve1.resolve _7 };
    x_3 <- { x_3 with current = ( * x_3 + (5 : int32)) };
    assume { Resolve1.resolve x_3 };
    assume { Resolve0.resolve _11 };
    _11 <- a_1;
    assume { Resolve0.resolve a_1 };
    _10 <- _11 = (15 : int32);
    _9 <- not _10;
    switch (_9)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    absurd
  }
  BB3 {
    _8 <- ();
    assume { Resolve2.resolve _8 };
    _0 <- ();
    return _0
  }
  
end
