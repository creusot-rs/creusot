module M_borrows__qyi5649894289181344863__new [#"borrows.rs" 17 4 17 30] (* NonZero *)
  let%span sborrows0 = "borrows.rs" 15 15 15 22
  let%span sborrows1 = "borrows.rs" 17 26 17 30
  let%span sborrows2 = "borrows.rs" 16 14 16 27
  let%span sborrows3 = "borrows.rs" 10 20 10 32
  
  use prelude.prelude.Int32
  
  type t_NonZero'0  =
    { t_NonZero__0'0: int32 }
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  predicate invariant'0 [#"borrows.rs" 9 4 9 30] (self : t_NonZero'0) =
    [%#sborrows3] Int32.to_int self.t_NonZero__0'0 <> 0
  
  predicate inv'0 (_1 : t_NonZero'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_NonZero'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_NonZero__0'0 = a_0} -> true
    end)
  
  meta "compute_max_steps" 1000000
  
  let rec new'0 (n:int32) (return'  (ret:t_NonZero'0))= {[@expl:new requires] [%#sborrows0] Int32.to_int n <> 0}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- { t_NonZero__0'0 = n } ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : t_NonZero'0 = any_l () | & n : int32 = n ]
    
    [ return' (result:t_NonZero'0)-> {[@expl:new result type invariant] [%#sborrows1] inv'0 result}
      {[@expl:new ensures] [%#sborrows2] result.t_NonZero__0'0 = n}
      (! return' {result}) ]
    
end
module M_borrows__qyi5649894289181344863__inner_mut [#"borrows.rs" 23 4 23 43] (* NonZero *)
  let%span sborrows0 = "borrows.rs" 23 26 23 30
  let%span sborrows1 = "borrows.rs" 21 14 21 38
  let%span sborrows2 = "borrows.rs" 22 14 22 38
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant4 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sborrows5 = "borrows.rs" 10 20 10 32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  type t_NonZero'0  =
    { t_NonZero__0'0: int32 }
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  use prelude.prelude.Int32
  
  predicate invariant'1 [#"borrows.rs" 9 4 9 30] (self : t_NonZero'0) =
    [%#sborrows5] Int32.to_int self.t_NonZero__0'0 <> 0
  
  predicate inv'1 (_1 : t_NonZero'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_NonZero'0 [inv'1 x] . inv'1 x
  = (invariant'1 x
  /\ match x with
    | {t_NonZero__0'0 = a_0} -> true
    end)
  
  predicate invariant'0 (self : borrowed (t_NonZero'0)) =
    [%#sinvariant4] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed (t_NonZero'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_NonZero'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'3 (self : borrowed (t_NonZero'0)) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_NonZero'0)) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec inner_mut'0 (self:borrowed (t_NonZero'0)) (return'  (ret:borrowed int32))= {[@expl:inner_mut 'self' type invariant] [%#sborrows0] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <int32> {(self.current).t_NonZero__0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
          (fun (_ret':borrowed int32) ->
             [ &_5 <- _ret' ] 
             [ &self <- { self with current = { t_NonZero__0'0 = _ret'.final } } ] 
            s1)
      | s1 = Borrow.borrow_final <int32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final } ] s2)
      | s2 = Borrow.borrow_final <int32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final } ] s3)
      | s3 = -{resolve'0 _5}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = {[@expl:type invariant] inv'0 self} s6
      | s6 = -{resolve'1 self}- s7
      | s7 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed int32 = any_l ()
    | & self : borrowed (t_NonZero'0) = self
    | & _2 : borrowed int32 = any_l ()
    | & _5 : borrowed int32 = any_l () ]
    
    [ return' (result:borrowed int32)-> {[@expl:inner_mut ensures #0] [%#sborrows1] Int32.to_int (self.current).t_NonZero__0'0
      = Int32.to_int result.current}
      {[@expl:inner_mut ensures #1] [%#sborrows2] Int32.to_int (self.final).t_NonZero__0'0 = Int32.to_int result.final}
      (! return' {result}) ]
    
end
module M_borrows__simple [#"borrows.rs" 31 0 31 30]
  let%span sborrows0 = "borrows.rs" 31 14 31 15
  let%span sborrows1 = "borrows.rs" 29 11 29 27
  let%span sborrows2 = "borrows.rs" 30 11 30 21
  let%span sborrows3 = "borrows.rs" 99 11 99 25
  let%span sborrows4 = "borrows.rs" 100 10 100 25
  let%span smodel5 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span sresolve6 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant7 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sborrows8 = "borrows.rs" 10 20 10 32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  type t_NonZero'0  =
    { t_NonZero__0'0: int32 }
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  function view'0 (self : borrowed int32) : int =
    [%#smodel5] Int32.to_int self.current
  
  constant v_MAX'0 : int32 = (2147483647 : int32)
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:inc requires] [%#sborrows3] view'0 x
    < Int32.to_int (v_MAX'0 : int32)}
    any [ return' (result:())-> {[%#sborrows4] Int32.to_int x.final = view'0 x + 1} (! return' {result}) ] 
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  predicate invariant'1 [#"borrows.rs" 9 4 9 30] (self : t_NonZero'0) =
    [%#sborrows8] Int32.to_int self.t_NonZero__0'0 <> 0
  
  predicate inv'1 (_1 : t_NonZero'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_NonZero'0 [inv'1 x] . inv'1 x
  = (invariant'1 x
  /\ match x with
    | {t_NonZero__0'0 = a_0} -> true
    end)
  
  predicate invariant'0 (self : borrowed (t_NonZero'0)) =
    [%#sinvariant7] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed (t_NonZero'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_NonZero'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'3 (self : borrowed (t_NonZero'0)) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_NonZero'0)) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec simple'0 (x:borrowed (t_NonZero'0)) (return'  (ret:()))= {[@expl:simple 'x' type invariant] [%#sborrows0] inv'0 x}
    {[@expl:simple requires #0] [%#sborrows1] Int32.to_int (x.current).t_NonZero__0'0 < Int32.to_int (v_MAX'0 : int32)}
    {[@expl:simple requires #1] [%#sborrows2] Int32.to_int (x.current).t_NonZero__0'0 <> - 1}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <int32> {(x.current).t_NonZero__0'0} {Borrow.inherit_id (Borrow.get_id x) 1}
          (fun (_ret':borrowed int32) ->
             [ &_6 <- _ret' ] 
             [ &x <- { x with current = { t_NonZero__0'0 = _ret'.final } } ] 
            s1)
      | s1 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final } ] s2)
      | s2 = inc'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'0 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : borrowed (t_NonZero'0) = x
    | & _4 : () = any_l ()
    | & _5 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_borrows__hard [#"borrows.rs" 38 0 38 28]
  let%span sborrows0 = "borrows.rs" 38 12 38 13
  let%span sborrows1 = "borrows.rs" 36 11 36 27
  let%span sborrows2 = "borrows.rs" 37 11 37 21
  let%span sborrows3 = "borrows.rs" 23 26 23 30
  let%span sborrows4 = "borrows.rs" 21 14 21 38
  let%span sborrows5 = "borrows.rs" 22 14 22 38
  let%span sborrows6 = "borrows.rs" 99 11 99 25
  let%span sborrows7 = "borrows.rs" 100 10 100 25
  let%span smodel8 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span sresolve9 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sborrows10 = "borrows.rs" 10 20 10 32
  let%span sinvariant11 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  type t_NonZero'0  =
    { t_NonZero__0'0: int32 }
  
  use prelude.prelude.Int32
  
  predicate invariant'0 [#"borrows.rs" 9 4 9 30] (self : t_NonZero'0) =
    [%#sborrows10] Int32.to_int self.t_NonZero__0'0 <> 0
  
  predicate inv'0 (_1 : t_NonZero'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_NonZero'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_NonZero__0'0 = a_0} -> true
    end)
  
  predicate invariant'1 (self : borrowed (t_NonZero'0)) =
    [%#sinvariant11] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (t_NonZero'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (t_NonZero'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  let rec inner_mut'0 (self:borrowed (t_NonZero'0)) (return'  (ret:borrowed int32))= {[@expl:inner_mut 'self' type invariant] [%#sborrows3] inv'1 self}
    any
    [ return' (result:borrowed int32)-> {[%#sborrows4] Int32.to_int (self.current).t_NonZero__0'0
      = Int32.to_int result.current}
      {[%#sborrows5] Int32.to_int (self.final).t_NonZero__0'0 = Int32.to_int result.final}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  function view'0 (self : borrowed int32) : int =
    [%#smodel8] Int32.to_int self.current
  
  constant v_MAX'0 : int32 = (2147483647 : int32)
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:inc requires] [%#sborrows6] view'0 x
    < Int32.to_int (v_MAX'0 : int32)}
    any [ return' (result:())-> {[%#sborrows7] Int32.to_int x.final = view'0 x + 1} (! return' {result}) ] 
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve9] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  predicate resolve'3 (self : borrowed (t_NonZero'0)) =
    [%#sresolve9] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_NonZero'0)) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec hard'0 (x:borrowed (t_NonZero'0)) (return'  (ret:()))= {[@expl:hard 'x' type invariant] [%#sborrows0] inv'1 x}
    {[@expl:hard requires #0] [%#sborrows1] Int32.to_int (x.current).t_NonZero__0'0 < Int32.to_int (v_MAX'0 : int32)}
    {[@expl:hard requires #1] [%#sborrows2] Int32.to_int (x.current).t_NonZero__0'0 <> - 1}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 x.current}
        Borrow.borrow_final <t_NonZero'0> {x.current} {Borrow.get_id x}
          (fun (_ret':borrowed (t_NonZero'0)) ->
             [ &_7 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &x <- { x with current = _ret'.final } ] 
            s1)
      | s1 = inner_mut'0 {_7} (fun (_ret':borrowed int32) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final } ] s1)
      | s1 = inc'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'1 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : borrowed (t_NonZero'0) = x
    | & _4 : () = any_l ()
    | & _5 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l ()
    | & _7 : borrowed (t_NonZero'0) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_borrows__tuple [#"borrows.rs" 45 0 45 44]
  let%span sborrows0 = "borrows.rs" 46 13 46 14
  let%span sborrows1 = "borrows.rs" 45 17 45 18
  let%span sborrows2 = "borrows.rs" 43 11 43 29
  let%span sborrows3 = "borrows.rs" 44 11 44 23
  let%span sborrows4 = "borrows.rs" 99 11 99 25
  let%span sborrows5 = "borrows.rs" 100 10 100 25
  let%span smodel6 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span sresolve7 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sresolve8 = "../../../../creusot-contracts/src/resolve.rs" 40 8 40 44
  let%span sborrows9 = "borrows.rs" 10 20 10 32
  let%span sinvariant10 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use prelude.prelude.Int32
  
  type t_NonZero'0  =
    { t_NonZero__0'0: int32 }
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  function view'0 (self : borrowed int32) : int =
    [%#smodel6] Int32.to_int self.current
  
  constant v_MAX'0 : int32 = (2147483647 : int32)
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:inc requires] [%#sborrows4] view'0 x
    < Int32.to_int (v_MAX'0 : int32)}
    any [ return' (result:())-> {[%#sborrows5] Int32.to_int x.final = view'0 x + 1} (! return' {result}) ] 
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  predicate invariant'0 [#"borrows.rs" 9 4 9 30] (self : t_NonZero'0) =
    [%#sborrows9] Int32.to_int self.t_NonZero__0'0 <> 0
  
  predicate inv'1 (_1 : t_NonZero'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_NonZero'0 [inv'1 x] . inv'1 x
  = (invariant'0 x
  /\ match x with
    | {t_NonZero__0'0 = a_0} -> true
    end)
  
  predicate invariant'1 (self : borrowed (t_NonZero'0)) =
    [%#sinvariant10] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : borrowed (t_NonZero'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (t_NonZero'0) [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate inv'0 (_1 : (t_NonZero'0, borrowed (t_NonZero'0)))
  
  axiom inv_axiom'0 [@rewrite] : forall x : (t_NonZero'0, borrowed (t_NonZero'0)) [inv'0 x] . inv'0 x
  = (let (x0, x1) = x in inv'1 x0 /\ inv'2 x1)
  
  predicate resolve'4 (_1 : t_NonZero'0) =
    true
  
  predicate resolve'6 (self : borrowed (t_NonZero'0)) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'5 (_1 : borrowed (t_NonZero'0)) =
    resolve'6 _1
  
  predicate resolve'3 (self : (t_NonZero'0, borrowed (t_NonZero'0))) =
    [%#sresolve8] resolve'4 (let (a, _) = self in a) /\ resolve'5 (let (_, a) = self in a)
  
  predicate resolve'1 (_1 : (t_NonZero'0, borrowed (t_NonZero'0))) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec tuple'0 (x:(t_NonZero'0, borrowed (t_NonZero'0))) (return'  (ret:()))= {[@expl:tuple 'x' type invariant] [%#sborrows1] inv'0 x}
    {[@expl:tuple requires #0] [%#sborrows2] Int32.to_int ((let (_, a) = x in a).current).t_NonZero__0'0
    < Int32.to_int (v_MAX'0 : int32)}
    {[@expl:tuple requires #1] [%#sborrows3] Int32.to_int ((let (_, a) = x in a).current).t_NonZero__0'0 <> - 1}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- let (_, r'1) = x in ({ t_NonZero__0'0 = ([%#sborrows0] (0 : int32)) }, r'1) ] s1
      | s1 = Borrow.borrow_final
          <int32>
          {((let (_, r'2) = x in r'2).current).t_NonZero__0'0}
          {Borrow.inherit_id (Borrow.get_id (let (_, r'2) = x in r'2)) 1}
          (fun (_ret':borrowed int32) ->
             [ &_6 <- _ret' ] 
            
            [ &x <- let (r'3, _) = x in (r'3, { (let (_, r'2) = x in r'2) with current = { t_NonZero__0'0 = _ret'.final } }) ]
            
            s2)
      | s2 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final } ] s3)
      | s3 = inc'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'0 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : (t_NonZero'0, borrowed (t_NonZero'0)) = x
    | & _4 : () = any_l ()
    | & _5 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_borrows__partial_move [#"borrows.rs" 53 0 53 47]
  let%span sborrows0 = "borrows.rs" 56 10 56 11
  let%span sborrows1 = "borrows.rs" 53 20 53 21
  let%span sborrows2 = "borrows.rs" 51 11 51 29
  let%span sborrows3 = "borrows.rs" 52 11 52 23
  let%span sborrows4 = "borrows.rs" 99 11 99 25
  let%span sborrows5 = "borrows.rs" 100 10 100 25
  let%span smodel6 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span sresolve7 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant8 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sborrows9 = "borrows.rs" 10 20 10 32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  type t_NonZero'0  =
    { t_NonZero__0'0: int32 }
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  function view'0 (self : borrowed int32) : int =
    [%#smodel6] Int32.to_int self.current
  
  constant v_MAX'0 : int32 = (2147483647 : int32)
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:inc requires] [%#sborrows4] view'0 x
    < Int32.to_int (v_MAX'0 : int32)}
    any [ return' (result:())-> {[%#sborrows5] Int32.to_int x.final = view'0 x + 1} (! return' {result}) ] 
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  predicate invariant'1 [#"borrows.rs" 9 4 9 30] (self : t_NonZero'0) =
    [%#sborrows9] Int32.to_int self.t_NonZero__0'0 <> 0
  
  predicate inv'2 (_1 : t_NonZero'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_NonZero'0 [inv'2 x] . inv'2 x
  = (invariant'1 x
  /\ match x with
    | {t_NonZero__0'0 = a_0} -> true
    end)
  
  predicate invariant'0 (self : borrowed (t_NonZero'0)) =
    [%#sinvariant8] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'0 (_1 : borrowed (t_NonZero'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_NonZero'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'3 (self : borrowed (t_NonZero'0)) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_NonZero'0)) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  predicate inv'1 (_1 : (t_NonZero'0, borrowed (t_NonZero'0)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : (t_NonZero'0, borrowed (t_NonZero'0)) [inv'1 x] . inv'1 x
  = (let (x0, x1) = x in inv'2 x0 /\ inv'0 x1)
  
  meta "compute_max_steps" 1000000
  
  let rec partial_move'0 (x:(t_NonZero'0, borrowed (t_NonZero'0))) (return'  (ret:()))= {[@expl:partial_move 'x' type invariant] [%#sborrows1] inv'1 x}
    {[@expl:partial_move requires #0] [%#sborrows2] Int32.to_int ((let (_, a) = x in a).current).t_NonZero__0'0
    < Int32.to_int (v_MAX'0 : int32)}
    {[@expl:partial_move requires #1] [%#sborrows3] Int32.to_int ((let (_, a) = x in a).current).t_NonZero__0'0 <> - 1}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- let (r'0, _) = x in r'0 ] s1
      | s1 = Borrow.borrow_final
          <int32>
          {((let (_, r'1) = x in r'1).current).t_NonZero__0'0}
          {Borrow.inherit_id (Borrow.get_id (let (_, r'1) = x in r'1)) 1}
          (fun (_ret':borrowed int32) ->
             [ &_7 <- _ret' ] 
            
            [ &x <- let (r'2, _) = x in (r'2, { (let (_, r'1) = x in r'1) with current = { t_NonZero__0'0 = _ret'.final } }) ]
            
            s2)
      | s2 = Borrow.borrow_final <int32> {_7.current} {Borrow.get_id _7}
          (fun (_ret':borrowed int32) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = _ret'.final } ] s3)
      | s3 = inc'0 {_6} (fun (_ret':()) ->  [ &_5 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 = {[@expl:type invariant] match x with
          | (_, x'1) -> inv'0 x'1
          | _ -> true
          end}
        s2
      | s2 = -{match x with
          | (_, x'2) -> resolve'1 x'2
          | _ -> true
          end}-
        s3
      | s3 =  [ &a <- { t_NonZero__0'0 = ([%#sborrows0] (0 : int32)) } ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : (t_NonZero'0, borrowed (t_NonZero'0)) = x
    | & a : t_NonZero'0 = any_l ()
    | & _5 : () = any_l ()
    | & _6 : borrowed int32 = any_l ()
    | & _7 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_borrows__destruct [#"borrows.rs" 61 0 61 43]
  let%span sborrows0 = "borrows.rs" 63 10 63 11
  let%span sborrows1 = "borrows.rs" 61 16 61 17
  let%span sborrows2 = "borrows.rs" 59 11 59 29
  let%span sborrows3 = "borrows.rs" 60 11 60 23
  let%span sborrows4 = "borrows.rs" 99 11 99 25
  let%span sborrows5 = "borrows.rs" 100 10 100 25
  let%span smodel6 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span sresolve7 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant8 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sborrows9 = "borrows.rs" 10 20 10 32
  
  use prelude.prelude.Int32
  
  type t_NonZero'0  =
    { t_NonZero__0'0: int32 }
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  function view'0 (self : borrowed int32) : int =
    [%#smodel6] Int32.to_int self.current
  
  constant v_MAX'0 : int32 = (2147483647 : int32)
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:inc requires] [%#sborrows4] view'0 x
    < Int32.to_int (v_MAX'0 : int32)}
    any [ return' (result:())-> {[%#sborrows5] Int32.to_int x.final = view'0 x + 1} (! return' {result}) ] 
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  predicate invariant'1 [#"borrows.rs" 9 4 9 30] (self : t_NonZero'0) =
    [%#sborrows9] Int32.to_int self.t_NonZero__0'0 <> 0
  
  predicate inv'2 (_1 : t_NonZero'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_NonZero'0 [inv'2 x] . inv'2 x
  = (invariant'1 x
  /\ match x with
    | {t_NonZero__0'0 = a_0} -> true
    end)
  
  predicate invariant'0 (self : borrowed (t_NonZero'0)) =
    [%#sinvariant8] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'0 (_1 : borrowed (t_NonZero'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_NonZero'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'3 (self : borrowed (t_NonZero'0)) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_NonZero'0)) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  predicate inv'1 (_1 : (t_NonZero'0, borrowed (t_NonZero'0)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : (t_NonZero'0, borrowed (t_NonZero'0)) [inv'1 x] . inv'1 x
  = (let (x0, x1) = x in inv'2 x0 /\ inv'0 x1)
  
  meta "compute_max_steps" 1000000
  
  let rec destruct'0 (x:(t_NonZero'0, borrowed (t_NonZero'0))) (return'  (ret:()))= {[@expl:destruct 'x' type invariant] [%#sborrows1] inv'1 x}
    {[@expl:destruct requires #0] [%#sborrows2] Int32.to_int ((let (_, a) = x in a).current).t_NonZero__0'0
    < Int32.to_int (v_MAX'0 : int32)}
    {[@expl:destruct requires #1] [%#sborrows3] Int32.to_int ((let (_, a) = x in a).current).t_NonZero__0'0 <> - 1}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- let (r'0, _) = x in r'0 ] s1
      | s1 =  [ &b <- let (_, r'1) = x in r'1 ] s2
      | s2 =  [ &a <- { t_NonZero__0'0 = ([%#sborrows0] (0 : int32)) } ] s3
      | s3 = Borrow.borrow_final <int32> {(b.current).t_NonZero__0'0} {Borrow.inherit_id (Borrow.get_id b) 1}
          (fun (_ret':borrowed int32) ->
             [ &_8 <- _ret' ] 
             [ &b <- { b with current = { t_NonZero__0'0 = _ret'.final } } ] 
            s4)
      | s4 = Borrow.borrow_final <int32> {_8.current} {Borrow.get_id _8}
          (fun (_ret':borrowed int32) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = _ret'.final } ] s5)
      | s5 = inc'0 {_7} (fun (_ret':()) ->  [ &_6 <- _ret' ] s6)
      | s6 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:type invariant] inv'0 b} s2
      | s2 = -{resolve'1 b}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : (t_NonZero'0, borrowed (t_NonZero'0)) = x
    | & a : t_NonZero'0 = any_l ()
    | & b : borrowed (t_NonZero'0) = any_l ()
    | & _6 : () = any_l ()
    | & _7 : borrowed int32 = any_l ()
    | & _8 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_borrows__frozen_dead [#"borrows.rs" 69 0 69 66]
  let%span sborrows0 = "borrows.rs" 69 27 69 28
  let%span sborrows1 = "borrows.rs" 69 47 69 48
  let%span sborrows2 = "borrows.rs" 67 11 67 27
  let%span sborrows3 = "borrows.rs" 68 11 68 21
  let%span sborrows4 = "borrows.rs" 99 11 99 25
  let%span sborrows5 = "borrows.rs" 100 10 100 25
  let%span sresolve6 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel7 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span sborrows8 = "borrows.rs" 10 20 10 32
  let%span sinvariant9 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  type t_NonZero'0  =
    { t_NonZero__0'0: int32 }
  
  use prelude.prelude.Int32
  
  predicate invariant'0 [#"borrows.rs" 9 4 9 30] (self : t_NonZero'0) =
    [%#sborrows8] Int32.to_int self.t_NonZero__0'0 <> 0
  
  predicate inv'0 (_1 : t_NonZero'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_NonZero'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_NonZero__0'0 = a_0} -> true
    end)
  
  predicate invariant'1 (self : borrowed (t_NonZero'0)) =
    [%#sinvariant9] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (t_NonZero'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (t_NonZero'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate resolve'2 (self : borrowed (t_NonZero'0)) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_NonZero'0)) =
    resolve'2 _1
  
  use prelude.prelude.Int
  
  function view'0 (self : borrowed int32) : int =
    [%#smodel7] Int32.to_int self.current
  
  constant v_MAX'0 : int32 = (2147483647 : int32)
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:inc requires] [%#sborrows4] view'0 x
    < Int32.to_int (v_MAX'0 : int32)}
    any [ return' (result:())-> {[%#sborrows5] Int32.to_int x.final = view'0 x + 1} (! return' {result}) ] 
  
  predicate resolve'3 (self : borrowed int32) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed int32) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec frozen_dead'0 (x:borrowed (t_NonZero'0)) (y:borrowed (t_NonZero'0)) (return'  (ret:()))= {[@expl:frozen_dead 'x' type invariant] [%#sborrows0] inv'1 x}
    {[@expl:frozen_dead 'y' type invariant] [%#sborrows1] inv'1 y}
    {[@expl:frozen_dead requires #0] [%#sborrows2] Int32.to_int (x.current).t_NonZero__0'0
    < Int32.to_int (v_MAX'0 : int32)}
    {[@expl:frozen_dead requires #1] [%#sborrows3] Int32.to_int (x.current).t_NonZero__0'0 <> - 1}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <int32> {(x.current).t_NonZero__0'0} {Borrow.inherit_id (Borrow.get_id x) 1}
          (fun (_ret':borrowed int32) ->
             [ &_a <- _ret' ] 
             [ &x <- { x with current = { t_NonZero__0'0 = _ret'.final } } ] 
            s1)
      | s1 = {inv'0 y.current}
        Borrow.borrow_final <t_NonZero'0> {y.current} {Borrow.get_id y}
          (fun (_ret':borrowed (t_NonZero'0)) ->
             [ &_6 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &y <- { y with current = _ret'.final } ] 
            s2)
      | s2 = {[@expl:type invariant] inv'1 x} s3
      | s3 = -{resolve'0 x}- s4
      | s4 =  [ &x <- _6 ] s5
      | s5 = {[@expl:type invariant] inv'1 x} s6
      | s6 = -{resolve'0 x}- s7
      | s7 = Borrow.borrow_final <int32> {_a.current} {Borrow.get_id _a}
          (fun (_ret':borrowed int32) ->  [ &_8 <- _ret' ]  [ &_a <- { _a with current = _ret'.final } ] s8)
      | s8 = inc'0 {_8} (fun (_ret':()) ->  [ &_7 <- _ret' ] s9)
      | s9 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'1 _a}- s1
      | s1 = {[@expl:type invariant] inv'1 y} s2
      | s2 = -{resolve'0 y}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : borrowed (t_NonZero'0) = x
    | & y : borrowed (t_NonZero'0) = y
    | & _a : borrowed int32 = any_l ()
    | & _6 : borrowed (t_NonZero'0) = any_l ()
    | & _7 : () = any_l ()
    | & _8 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_borrows__qyi5556307355051076399__foo [#"borrows.rs" 93 4 93 25] (* SumTo10 *)
  let%span sborrows0 = "borrows.rs" 93 20 93 24
  let%span sborrows1 = "borrows.rs" 92 15 92 34
  let%span sborrows2 = "borrows.rs" 99 11 99 25
  let%span sborrows3 = "borrows.rs" 100 10 100 25
  let%span sborrows4 = "borrows.rs" 105 11 105 25
  let%span sborrows5 = "borrows.rs" 106 10 106 25
  let%span smodel6 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span sresolve7 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant8 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sborrows9 = "borrows.rs" 87 20 87 43
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  type t_SumTo10'0  =
    { t_SumTo10__a'0: int32; t_SumTo10__b'0: int32 }
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  function view'0 (self : borrowed int32) : int =
    [%#smodel6] Int32.to_int self.current
  
  constant v_MAX'0 : int32 = (2147483647 : int32)
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:inc requires] [%#sborrows2] view'0 x
    < Int32.to_int (v_MAX'0 : int32)}
    any [ return' (result:())-> {[%#sborrows3] Int32.to_int x.final = view'0 x + 1} (! return' {result}) ] 
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  constant v_MIN'0 : int32 = (-2147483648 : int32)
  
  let rec dec'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:dec requires] [%#sborrows4] view'0 x
    > Int32.to_int (v_MIN'0 : int32)}
    any [ return' (result:())-> {[%#sborrows5] Int32.to_int x.final = view'0 x - 1} (! return' {result}) ] 
  
  predicate invariant'1 [#"borrows.rs" 86 4 86 30] (self : t_SumTo10'0) =
    [%#sborrows9] Int32.to_int self.t_SumTo10__a'0 + Int32.to_int self.t_SumTo10__b'0 = 10
  
  predicate inv'1 (_1 : t_SumTo10'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_SumTo10'0 [inv'1 x] . inv'1 x
  = (invariant'1 x
  /\ match x with
    | {t_SumTo10__a'0 = a ; t_SumTo10__b'0 = b} -> true
    end)
  
  predicate invariant'0 (self : borrowed (t_SumTo10'0)) =
    [%#sinvariant8] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed (t_SumTo10'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_SumTo10'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'3 (self : borrowed (t_SumTo10'0)) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_SumTo10'0)) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec foo'0 (self:borrowed (t_SumTo10'0)) (return'  (ret:()))= {[@expl:foo 'self' type invariant] [%#sborrows0] inv'0 self}
    {[@expl:foo requires] [%#sborrows1] Int32.to_int (self.current).t_SumTo10__a'0 < Int32.to_int (v_MAX'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <int32> {(self.current).t_SumTo10__a'0} {Borrow.inherit_id (Borrow.get_id self) 1}
          (fun (_ret':borrowed int32) ->
             [ &_5 <- _ret' ] 
             [ &self <- { self with current = { self.current with t_SumTo10__a'0 = _ret'.final } } ] 
            s1)
      | s1 = Borrow.borrow_final <int32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed int32) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final } ] s2)
      | s2 = inc'0 {_4} (fun (_ret':()) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _5}- s1
      | s1 = Borrow.borrow_final <int32> {(self.current).t_SumTo10__b'0} {Borrow.inherit_id (Borrow.get_id self) 2}
          (fun (_ret':borrowed int32) ->
             [ &_8 <- _ret' ] 
             [ &self <- { self with current = { self.current with t_SumTo10__b'0 = _ret'.final } } ] 
            s2)
      | s2 = Borrow.borrow_final <int32> {_8.current} {Borrow.get_id _8}
          (fun (_ret':borrowed int32) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = _ret'.final } ] s3)
      | s3 = dec'0 {_7} (fun (_ret':()) ->  [ &_6 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'1 self}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (t_SumTo10'0) = self
    | & _3 : () = any_l ()
    | & _4 : borrowed int32 = any_l ()
    | & _5 : borrowed int32 = any_l ()
    | & _6 : () = any_l ()
    | & _7 : borrowed int32 = any_l ()
    | & _8 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_borrows__inc [#"borrows.rs" 101 0 101 23]
  let%span sborrows0 = "borrows.rs" 102 10 102 11
  let%span sborrows1 = "borrows.rs" 99 11 99 25
  let%span sborrows2 = "borrows.rs" 100 10 100 25
  let%span smodel3 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span sresolve4 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed int32) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  function view'0 (self : borrowed int32) : int =
    [%#smodel3] Int32.to_int self.current
  
  constant v_MAX'0 : int32 = (2147483647 : int32)
  
  meta "compute_max_steps" 1000000
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:inc requires] [%#sborrows1] view'0 x
    < Int32.to_int (v_MAX'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.add {x.current} {[%#sborrows0] (1 : int32)}
          (fun (_ret':int32) ->  [ &x <- { x with current = _ret' } ] s1)
      | s1 = -{resolve'0 x}- s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & x : borrowed int32 = x ] 
    [ return' (result:())-> {[@expl:inc ensures] [%#sborrows2] Int32.to_int x.final = view'0 x + 1}
      (! return' {result}) ]
    
end
module M_borrows__dec [#"borrows.rs" 107 0 107 23]
  let%span sborrows0 = "borrows.rs" 108 10 108 11
  let%span sborrows1 = "borrows.rs" 105 11 105 25
  let%span sborrows2 = "borrows.rs" 106 10 106 25
  let%span smodel3 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span sresolve4 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed int32) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  function view'0 (self : borrowed int32) : int =
    [%#smodel3] Int32.to_int self.current
  
  constant v_MIN'0 : int32 = (-2147483648 : int32)
  
  meta "compute_max_steps" 1000000
  
  let rec dec'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:dec requires] [%#sborrows1] view'0 x
    > Int32.to_int (v_MIN'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.sub {x.current} {[%#sborrows0] (1 : int32)}
          (fun (_ret':int32) ->  [ &x <- { x with current = _ret' } ] s1)
      | s1 = -{resolve'0 x}- s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & x : borrowed int32 = x ] 
    [ return' (result:())-> {[@expl:dec ensures] [%#sborrows2] Int32.to_int x.final = view'0 x - 1}
      (! return' {result}) ]
    
end
