module T_borrows__NonZero [#"borrows.rs" 4 0 4 18]
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_NonZero  =
    | C_NonZero Int32.t
  
  let rec t_NonZero (input:t_NonZero) (ret  (field_0:Int32.t))= any
    [ good (field_0:Int32.t)-> {C_NonZero field_0 = input} (! ret {field_0}) ]
    
  
  function t_NonZero__0 (self : t_NonZero) : Int32.t =
    match self with
      | C_NonZero a -> a
      end
end
module M_borrows__qyi5649894289181344863__new [#"borrows.rs" 17 4 17 30] (* NonZero *)
  let%span sborrows0 = "borrows.rs" 15 15 15 22
  let%span sborrows1 = "borrows.rs" 16 14 16 27
  let%span sborrows2 = "borrows.rs" 17 26 17 30
  let%span sborrows3 = "borrows.rs" 10 20 10 32
  
  use prelude.prelude.Int128.to_int
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32.to_int
  
  use T_borrows__NonZero as T_borrows__NonZero
  
  use T_borrows__NonZero as NonZero'0
  
  predicate invariant'0 [#"borrows.rs" 9 4 9 30] (self : NonZero'0.t_NonZero) =
    [%#sborrows3] Int32.to_int (T_borrows__NonZero.t_NonZero__0 self) <> Int128.to_int (0 : Int128.t)
  
  predicate inv'0 (_1 : NonZero'0.t_NonZero)
  
  axiom inv_axiom'0 [@rewrite] : forall x : NonZero'0.t_NonZero [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec new (n:Int32.t) (return'  (ret:NonZero'0.t_NonZero))= {[%#sborrows0] Int32.to_int n
    <> Int128.to_int (0 : Int128.t)}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- NonZero'0.C_NonZero n ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : NonZero'0.t_NonZero = any_l () | & n : Int32.t = n ]
    
    [ return' (result:NonZero'0.t_NonZero)-> {[@expl:postcondition] [%#sborrows2] inv'0 result}
      {[@expl:postcondition] [%#sborrows1] T_borrows__NonZero.t_NonZero__0 result = n}
      (! return' {result}) ]
    
end
module M_borrows__qyi5649894289181344863__inner_mut [#"borrows.rs" 23 4 23 43] (* NonZero *)
  let%span sborrows0 = "borrows.rs" 23 26 23 30
  let%span sborrows1 = "borrows.rs" 21 14 21 38
  let%span sborrows2 = "borrows.rs" 22 14 22 38
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant4 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sborrows5 = "borrows.rs" 10 20 10 32
  
  use prelude.prelude.Int128.to_int
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32.to_int
  
  use T_borrows__NonZero as T_borrows__NonZero
  
  use T_borrows__NonZero as NonZero'0
  
  predicate invariant'1 [#"borrows.rs" 9 4 9 30] (self : NonZero'0.t_NonZero) =
    [%#sborrows5] Int32.to_int (T_borrows__NonZero.t_NonZero__0 self) <> Int128.to_int (0 : Int128.t)
  
  predicate inv'1 (_1 : NonZero'0.t_NonZero)
  
  axiom inv_axiom'1 [@rewrite] : forall x : NonZero'0.t_NonZero [inv'1 x] . inv'1 x
  = (invariant'1 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sinvariant4] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed (NonZero'0.t_NonZero))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (NonZero'0.t_NonZero) [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (NonZero'0.t_NonZero)) =
    resolve'3 _1
  
  use prelude.prelude.Int32
  
  predicate resolve'2 (self : borrowed Int32.t) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed Int32.t) =
    resolve'2 _1
  
  meta "compute_max_steps" 1000000
  
  let rec inner_mut (self:borrowed (NonZero'0.t_NonZero)) (return'  (ret:borrowed Int32.t))= {[%#sborrows0] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = NonZero'0.t_NonZero {self.current}
          (fun (r0'0:Int32.t) ->
            Borrow.borrow_final <Int32.t> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed Int32.t) ->
                 [ &_5 <- _ret' ] 
                 [ &self <- { self with current = NonZero'0.C_NonZero _ret'.final ; } ] 
                s1))
      | s1 = Borrow.borrow_final <Int32.t> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed Int32.t) ->  [ &_2 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final ; } ] s2)
      | s2 = Borrow.borrow_final <Int32.t> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed Int32.t) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final ; } ] s3)
      | s3 = -{resolve'0 _5}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = {[@expl:type invariant] inv'0 self} s6
      | s6 = -{resolve'1 self}- s7
      | s7 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed Int32.t = any_l ()
    | & self : borrowed (NonZero'0.t_NonZero) = self
    | & _2 : borrowed Int32.t = any_l ()
    | & _5 : borrowed Int32.t = any_l () ]
    
    [ return' (result:borrowed Int32.t)-> {[@expl:postcondition] [%#sborrows2] Int32.to_int (T_borrows__NonZero.t_NonZero__0 self.final)
      = Int32.to_int result.final}
      {[@expl:postcondition] [%#sborrows1] Int32.to_int (T_borrows__NonZero.t_NonZero__0 self.current)
      = Int32.to_int result.current}
      (! return' {result}) ]
    
end
module M_borrows__simple [#"borrows.rs" 31 0 31 30]
  let%span sborrows0 = "borrows.rs" 29 11 29 27
  let%span sborrows1 = "borrows.rs" 30 11 30 21
  let%span sborrows2 = "borrows.rs" 31 14 31 15
  let%span sborrows3 = "borrows.rs" 99 11 99 25
  let%span sborrows4 = "borrows.rs" 100 10 100 25
  let%span smodel5 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve6 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant7 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sborrows8 = "borrows.rs" 10 20 10 32
  
  use prelude.prelude.Int128.to_int
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32.to_int
  
  use T_borrows__NonZero as T_borrows__NonZero
  
  use T_borrows__NonZero as NonZero'0
  
  predicate invariant'1 [#"borrows.rs" 9 4 9 30] (self : NonZero'0.t_NonZero) =
    [%#sborrows8] Int32.to_int (T_borrows__NonZero.t_NonZero__0 self) <> Int128.to_int (0 : Int128.t)
  
  predicate inv'1 (_1 : NonZero'0.t_NonZero)
  
  axiom inv_axiom'1 [@rewrite] : forall x : NonZero'0.t_NonZero [inv'1 x] . inv'1 x
  = (invariant'1 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sinvariant7] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed (NonZero'0.t_NonZero))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (NonZero'0.t_NonZero) [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Int32
  
  constant v_MAX'0 : Int32.t = (2147483647 : Int32.t)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (NonZero'0.t_NonZero)) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed Int32.t) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed Int32.t) =
    resolve'2 _1
  
  function view'0 (self : borrowed Int32.t) : int =
    [%#smodel5] Int32.to_int self.current
  
  let rec inc'0 (x:borrowed Int32.t) (return'  (ret:()))= {[@expl:precondition] [%#sborrows3] view'0 x
    < Int32.to_int (v_MAX'0 : Int32.t)}
    any
    [ return' (result:())-> {[%#sborrows4] Int32.to_int x.final = view'0 x + Int128.to_int (1 : Int128.t)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec simple (x:borrowed (NonZero'0.t_NonZero)) (return'  (ret:()))= {[%#sborrows2] inv'0 x}
    {[%#sborrows1] Int32.to_int (T_borrows__NonZero.t_NonZero__0 x.current) <> - Int128.to_int (1 : Int128.t)}
    {[%#sborrows0] Int32.to_int (T_borrows__NonZero.t_NonZero__0 x.current) < Int32.to_int (v_MAX'0 : Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = NonZero'0.t_NonZero {x.current}
          (fun (r0'0:Int32.t) ->
            Borrow.borrow_final <Int32.t> {r0'0} {Borrow.inherit_id (Borrow.get_id x) 1}
              (fun (_ret':borrowed Int32.t) ->
                 [ &_6 <- _ret' ] 
                 [ &x <- { x with current = NonZero'0.C_NonZero _ret'.final ; } ] 
                s1))
      | s1 = Borrow.borrow_final <Int32.t> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed Int32.t) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final ; } ] s2)
      | s2 = inc'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'0 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : borrowed (NonZero'0.t_NonZero) = x
    | & _4 : () = any_l ()
    | & _5 : borrowed Int32.t = any_l ()
    | & _6 : borrowed Int32.t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_borrows__hard [#"borrows.rs" 38 0 38 28]
  let%span sborrows0 = "borrows.rs" 36 11 36 27
  let%span sborrows1 = "borrows.rs" 37 11 37 21
  let%span sborrows2 = "borrows.rs" 38 12 38 13
  let%span sborrows3 = "borrows.rs" 23 26 23 30
  let%span sborrows4 = "borrows.rs" 21 14 21 38
  let%span sborrows5 = "borrows.rs" 22 14 22 38
  let%span sborrows6 = "borrows.rs" 99 11 99 25
  let%span sborrows7 = "borrows.rs" 100 10 100 25
  let%span smodel8 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve9 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sborrows10 = "borrows.rs" 10 20 10 32
  let%span sinvariant11 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use T_borrows__NonZero as NonZero'0
  
  predicate inv'0 (_1 : NonZero'0.t_NonZero)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sinvariant11] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (NonZero'0.t_NonZero))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (NonZero'0.t_NonZero) [inv'1 x] . inv'1 x = invariant'1 x
  
  use prelude.prelude.Int128.to_int
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32.to_int
  
  use T_borrows__NonZero as T_borrows__NonZero
  
  predicate invariant'0 [#"borrows.rs" 9 4 9 30] (self : NonZero'0.t_NonZero) =
    [%#sborrows10] Int32.to_int (T_borrows__NonZero.t_NonZero__0 self) <> Int128.to_int (0 : Int128.t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : NonZero'0.t_NonZero [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  use prelude.prelude.Int32
  
  constant v_MAX'0 : Int32.t = (2147483647 : Int32.t)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sresolve9] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (NonZero'0.t_NonZero)) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed Int32.t) =
    [%#sresolve9] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed Int32.t) =
    resolve'2 _1
  
  function view'0 (self : borrowed Int32.t) : int =
    [%#smodel8] Int32.to_int self.current
  
  let rec inc'0 (x:borrowed Int32.t) (return'  (ret:()))= {[@expl:precondition] [%#sborrows6] view'0 x
    < Int32.to_int (v_MAX'0 : Int32.t)}
    any
    [ return' (result:())-> {[%#sborrows7] Int32.to_int x.final = view'0 x + Int128.to_int (1 : Int128.t)}
      (! return' {result}) ]
    
  
  let rec inner_mut'0 (self:borrowed (NonZero'0.t_NonZero)) (return'  (ret:borrowed Int32.t))= {[@expl:precondition] [%#sborrows3] inv'1 self}
    any
    [ return' (result:borrowed Int32.t)-> {[%#sborrows5] Int32.to_int (T_borrows__NonZero.t_NonZero__0 self.final)
      = Int32.to_int result.final}
      {[%#sborrows4] Int32.to_int (T_borrows__NonZero.t_NonZero__0 self.current) = Int32.to_int result.current}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec hard (x:borrowed (NonZero'0.t_NonZero)) (return'  (ret:()))= {[%#sborrows2] inv'1 x}
    {[%#sborrows1] Int32.to_int (T_borrows__NonZero.t_NonZero__0 x.current) <> - Int128.to_int (1 : Int128.t)}
    {[%#sborrows0] Int32.to_int (T_borrows__NonZero.t_NonZero__0 x.current) < Int32.to_int (v_MAX'0 : Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 x.current}
        Borrow.borrow_final <NonZero'0.t_NonZero> {x.current} {Borrow.get_id x}
          (fun (_ret':borrowed (NonZero'0.t_NonZero)) ->
             [ &_7 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &x <- { x with current = _ret'.final ; } ] 
            s1)
      | s1 = inner_mut'0 {_7} (fun (_ret':borrowed Int32.t) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <Int32.t> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed Int32.t) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final ; } ] s1)
      | s1 = inc'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'1 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : borrowed (NonZero'0.t_NonZero) = x
    | & _4 : () = any_l ()
    | & _5 : borrowed Int32.t = any_l ()
    | & _6 : borrowed Int32.t = any_l ()
    | & _7 : borrowed (NonZero'0.t_NonZero) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_borrows__tuple [#"borrows.rs" 45 0 45 44]
  let%span sborrows0 = "borrows.rs" 46 13 46 14
  let%span sborrows1 = "borrows.rs" 43 11 43 29
  let%span sborrows2 = "borrows.rs" 44 11 44 23
  let%span sborrows3 = "borrows.rs" 45 17 45 18
  let%span sborrows4 = "borrows.rs" 99 11 99 25
  let%span sborrows5 = "borrows.rs" 100 10 100 25
  let%span smodel6 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve7 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sresolve8 = "../../../../creusot-contracts/src/resolve.rs" 27 8 27 44
  let%span sborrows9 = "borrows.rs" 10 20 10 32
  let%span sinvariant10 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use T_borrows__NonZero as NonZero'0
  
  predicate inv'1 (_1 : NonZero'0.t_NonZero)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sinvariant10] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : borrowed (NonZero'0.t_NonZero))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (NonZero'0.t_NonZero) [inv'2 x] . inv'2 x = invariant'1 x
  
  use prelude.prelude.Int128.to_int
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32.to_int
  
  use T_borrows__NonZero as T_borrows__NonZero
  
  predicate invariant'0 [#"borrows.rs" 9 4 9 30] (self : NonZero'0.t_NonZero) =
    [%#sborrows9] Int32.to_int (T_borrows__NonZero.t_NonZero__0 self) <> Int128.to_int (0 : Int128.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : NonZero'0.t_NonZero [inv'1 x] . inv'1 x
  = (invariant'0 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  predicate inv'0 (_1 : (NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero)))
  
  axiom inv_axiom'0 [@rewrite] : forall x : (NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero)) [inv'0 x] . inv'0 x
  = (let (a, b) = x in inv'1 a /\ inv'2 b)
  
  use prelude.prelude.Int32
  
  constant v_MAX'0 : Int32.t = (2147483647 : Int32.t)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'6 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'5 (_1 : borrowed (NonZero'0.t_NonZero)) =
    resolve'6 _1
  
  predicate resolve'4 (_1 : NonZero'0.t_NonZero) =
    true
  
  predicate resolve'3 (self : (NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero))) =
    [%#sresolve8] resolve'4 (let (a, _) = self in a) /\ resolve'5 (let (_, a) = self in a)
  
  predicate resolve'1 (_1 : (NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero))) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed Int32.t) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed Int32.t) =
    resolve'2 _1
  
  function view'0 (self : borrowed Int32.t) : int =
    [%#smodel6] Int32.to_int self.current
  
  let rec inc'0 (x:borrowed Int32.t) (return'  (ret:()))= {[@expl:precondition] [%#sborrows4] view'0 x
    < Int32.to_int (v_MAX'0 : Int32.t)}
    any
    [ return' (result:())-> {[%#sborrows5] Int32.to_int x.final = view'0 x + Int128.to_int (1 : Int128.t)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec tuple (x:(NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero))) (return'  (ret:()))= {[%#sborrows3] inv'0 x}
    {[%#sborrows2] Int32.to_int (T_borrows__NonZero.t_NonZero__0 (let (_, a) = x in a).current)
    <> - Int128.to_int (1 : Int128.t)}
    {[%#sborrows1] Int32.to_int (T_borrows__NonZero.t_NonZero__0 (let (_, a) = x in a).current)
    < Int32.to_int (v_MAX'0 : Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = NonZero'0.t_NonZero {let (r'0, _) = x in r'0}
          (fun (r0'0:Int32.t) ->
             [ &x <- let (_, r'2) = x in (NonZero'0.C_NonZero ([%#sborrows0] (0 : Int32.t)), r'2) ] 
            s1)
      | s1 = NonZero'0.t_NonZero {(let (_, r'3) = x in r'3).current}
          (fun (r0'1:Int32.t) ->
            Borrow.borrow_final <Int32.t> {r0'1} {Borrow.inherit_id (Borrow.get_id (let (_, r'3) = x in r'3)) 1}
              (fun (_ret':borrowed Int32.t) ->
                 [ &_6 <- _ret' ] 
                
                [ &x <- let (r'4, _) = x in (r'4, { (let (_, r'3) = x in r'3) with current = NonZero'0.C_NonZero _ret'.final ; }) ]
                
                s2))
      | s2 = Borrow.borrow_final <Int32.t> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed Int32.t) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final ; } ] s3)
      | s3 = inc'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'0 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : (NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero)) = x
    | & _4 : () = any_l ()
    | & _5 : borrowed Int32.t = any_l ()
    | & _6 : borrowed Int32.t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_borrows__partial_move [#"borrows.rs" 53 0 53 47]
  let%span sborrows0 = "borrows.rs" 56 10 56 11
  let%span sborrows1 = "borrows.rs" 51 11 51 29
  let%span sborrows2 = "borrows.rs" 52 11 52 23
  let%span sborrows3 = "borrows.rs" 53 20 53 21
  let%span sborrows4 = "borrows.rs" 99 11 99 25
  let%span sborrows5 = "borrows.rs" 100 10 100 25
  let%span smodel6 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve7 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant8 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sborrows9 = "borrows.rs" 10 20 10 32
  
  use prelude.prelude.Int128.to_int
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32.to_int
  
  use T_borrows__NonZero as T_borrows__NonZero
  
  use T_borrows__NonZero as NonZero'0
  
  predicate invariant'1 [#"borrows.rs" 9 4 9 30] (self : NonZero'0.t_NonZero) =
    [%#sborrows9] Int32.to_int (T_borrows__NonZero.t_NonZero__0 self) <> Int128.to_int (0 : Int128.t)
  
  predicate inv'2 (_1 : NonZero'0.t_NonZero)
  
  axiom inv_axiom'2 [@rewrite] : forall x : NonZero'0.t_NonZero [inv'2 x] . inv'2 x
  = (invariant'1 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : borrowed (NonZero'0.t_NonZero))
  
  predicate inv'1 (_1 : (NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : (NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero)) [inv'1 x] . inv'1 x
  = (let (a, b) = x in inv'2 a /\ inv'0 b)
  
  predicate invariant'0 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sinvariant8] inv'2 self.current /\ inv'2 self.final
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (NonZero'0.t_NonZero) [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Int32
  
  constant v_MAX'0 : Int32.t = (2147483647 : Int32.t)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (NonZero'0.t_NonZero)) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed Int32.t) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed Int32.t) =
    resolve'2 _1
  
  function view'0 (self : borrowed Int32.t) : int =
    [%#smodel6] Int32.to_int self.current
  
  let rec inc'0 (x:borrowed Int32.t) (return'  (ret:()))= {[@expl:precondition] [%#sborrows4] view'0 x
    < Int32.to_int (v_MAX'0 : Int32.t)}
    any
    [ return' (result:())-> {[%#sborrows5] Int32.to_int x.final = view'0 x + Int128.to_int (1 : Int128.t)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec partial_move (x:(NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero))) (return'  (ret:()))= {[%#sborrows3] inv'1 x}
    {[%#sborrows2] Int32.to_int (T_borrows__NonZero.t_NonZero__0 (let (_, a) = x in a).current)
    <> - Int128.to_int (1 : Int128.t)}
    {[%#sborrows1] Int32.to_int (T_borrows__NonZero.t_NonZero__0 (let (_, a) = x in a).current)
    < Int32.to_int (v_MAX'0 : Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- let (r'0, _) = x in r'0 ] s1
      | s1 = NonZero'0.t_NonZero {(let (_, r'1) = x in r'1).current}
          (fun (r0'0:Int32.t) ->
            Borrow.borrow_final <Int32.t> {r0'0} {Borrow.inherit_id (Borrow.get_id (let (_, r'1) = x in r'1)) 1}
              (fun (_ret':borrowed Int32.t) ->
                 [ &_7 <- _ret' ] 
                
                [ &x <- let (r'2, _) = x in (r'2, { (let (_, r'1) = x in r'1) with current = NonZero'0.C_NonZero _ret'.final ; }) ]
                
                s2))
      | s2 = Borrow.borrow_final <Int32.t> {_7.current} {Borrow.get_id _7}
          (fun (_ret':borrowed Int32.t) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = _ret'.final ; } ] s3)
      | s3 = inc'0 {_6} (fun (_ret':()) ->  [ &_5 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 = {[@expl:type invariant] match x with
          | (_, x'1) -> inv'0 x'1
          | _ -> true
          end}
        s2
      | s2 = -{match x with
          | (_, x'2) -> resolve'1 x'2
          | _ -> true
          end}-
        s3
      | s3 = NonZero'0.t_NonZero {a}
          (fun (r0'0:Int32.t) ->  [ &a <- NonZero'0.C_NonZero ([%#sborrows0] (0 : Int32.t)) ] s4)
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : (NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero)) = x
    | & a : NonZero'0.t_NonZero = any_l ()
    | & _5 : () = any_l ()
    | & _6 : borrowed Int32.t = any_l ()
    | & _7 : borrowed Int32.t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_borrows__destruct [#"borrows.rs" 61 0 61 43]
  let%span sborrows0 = "borrows.rs" 63 10 63 11
  let%span sborrows1 = "borrows.rs" 59 11 59 29
  let%span sborrows2 = "borrows.rs" 60 11 60 23
  let%span sborrows3 = "borrows.rs" 61 16 61 17
  let%span sborrows4 = "borrows.rs" 99 11 99 25
  let%span sborrows5 = "borrows.rs" 100 10 100 25
  let%span smodel6 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve7 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant8 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sborrows9 = "borrows.rs" 10 20 10 32
  
  use prelude.prelude.Int128.to_int
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32.to_int
  
  use T_borrows__NonZero as T_borrows__NonZero
  
  use T_borrows__NonZero as NonZero'0
  
  predicate invariant'1 [#"borrows.rs" 9 4 9 30] (self : NonZero'0.t_NonZero) =
    [%#sborrows9] Int32.to_int (T_borrows__NonZero.t_NonZero__0 self) <> Int128.to_int (0 : Int128.t)
  
  predicate inv'2 (_1 : NonZero'0.t_NonZero)
  
  axiom inv_axiom'2 [@rewrite] : forall x : NonZero'0.t_NonZero [inv'2 x] . inv'2 x
  = (invariant'1 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : borrowed (NonZero'0.t_NonZero))
  
  predicate inv'1 (_1 : (NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : (NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero)) [inv'1 x] . inv'1 x
  = (let (a, b) = x in inv'2 a /\ inv'0 b)
  
  predicate invariant'0 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sinvariant8] inv'2 self.current /\ inv'2 self.final
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (NonZero'0.t_NonZero) [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Int32
  
  constant v_MAX'0 : Int32.t = (2147483647 : Int32.t)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (NonZero'0.t_NonZero)) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed Int32.t) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed Int32.t) =
    resolve'2 _1
  
  function view'0 (self : borrowed Int32.t) : int =
    [%#smodel6] Int32.to_int self.current
  
  let rec inc'0 (x:borrowed Int32.t) (return'  (ret:()))= {[@expl:precondition] [%#sborrows4] view'0 x
    < Int32.to_int (v_MAX'0 : Int32.t)}
    any
    [ return' (result:())-> {[%#sborrows5] Int32.to_int x.final = view'0 x + Int128.to_int (1 : Int128.t)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec destruct (x:(NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero))) (return'  (ret:()))= {[%#sborrows3] inv'1 x}
    {[%#sborrows2] Int32.to_int (T_borrows__NonZero.t_NonZero__0 (let (_, a) = x in a).current)
    <> - Int128.to_int (1 : Int128.t)}
    {[%#sborrows1] Int32.to_int (T_borrows__NonZero.t_NonZero__0 (let (_, a) = x in a).current)
    < Int32.to_int (v_MAX'0 : Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- let (r'0, _) = x in r'0 ] s1
      | s1 =  [ &b <- let (_, r'1) = x in r'1 ] s2
      | s2 = NonZero'0.t_NonZero {a}
          (fun (r0'0:Int32.t) ->  [ &a <- NonZero'0.C_NonZero ([%#sborrows0] (0 : Int32.t)) ] s3)
      | s3 = NonZero'0.t_NonZero {b.current}
          (fun (r0'1:Int32.t) ->
            Borrow.borrow_final <Int32.t> {r0'1} {Borrow.inherit_id (Borrow.get_id b) 1}
              (fun (_ret':borrowed Int32.t) ->
                 [ &_8 <- _ret' ] 
                 [ &b <- { b with current = NonZero'0.C_NonZero _ret'.final ; } ] 
                s4))
      | s4 = Borrow.borrow_final <Int32.t> {_8.current} {Borrow.get_id _8}
          (fun (_ret':borrowed Int32.t) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = _ret'.final ; } ] s5)
      | s5 = inc'0 {_7} (fun (_ret':()) ->  [ &_6 <- _ret' ] s6)
      | s6 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:type invariant] inv'0 b} s2
      | s2 = -{resolve'1 b}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : (NonZero'0.t_NonZero, borrowed (NonZero'0.t_NonZero)) = x
    | & a : NonZero'0.t_NonZero = any_l ()
    | & b : borrowed (NonZero'0.t_NonZero) = any_l ()
    | & _6 : () = any_l ()
    | & _7 : borrowed Int32.t = any_l ()
    | & _8 : borrowed Int32.t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_borrows__frozen_dead [#"borrows.rs" 69 0 69 66]
  let%span sborrows0 = "borrows.rs" 67 11 67 27
  let%span sborrows1 = "borrows.rs" 68 11 68 21
  let%span sborrows2 = "borrows.rs" 69 27 69 28
  let%span sborrows3 = "borrows.rs" 69 47 69 48
  let%span sborrows4 = "borrows.rs" 99 11 99 25
  let%span sborrows5 = "borrows.rs" 100 10 100 25
  let%span sresolve6 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span smodel7 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sborrows8 = "borrows.rs" 10 20 10 32
  let%span sinvariant9 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use T_borrows__NonZero as NonZero'0
  
  predicate inv'0 (_1 : NonZero'0.t_NonZero)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sinvariant9] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (NonZero'0.t_NonZero))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (NonZero'0.t_NonZero) [inv'1 x] . inv'1 x = invariant'1 x
  
  use prelude.prelude.Int128.to_int
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32.to_int
  
  use T_borrows__NonZero as T_borrows__NonZero
  
  predicate invariant'0 [#"borrows.rs" 9 4 9 30] (self : NonZero'0.t_NonZero) =
    [%#sborrows8] Int32.to_int (T_borrows__NonZero.t_NonZero__0 self) <> Int128.to_int (0 : Int128.t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : NonZero'0.t_NonZero [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  use prelude.prelude.Int32
  
  constant v_MAX'0 : Int32.t = (2147483647 : Int32.t)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed Int32.t) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed Int32.t) =
    resolve'3 _1
  
  function view'0 (self : borrowed Int32.t) : int =
    [%#smodel7] Int32.to_int self.current
  
  let rec inc'0 (x:borrowed Int32.t) (return'  (ret:()))= {[@expl:precondition] [%#sborrows4] view'0 x
    < Int32.to_int (v_MAX'0 : Int32.t)}
    any
    [ return' (result:())-> {[%#sborrows5] Int32.to_int x.final = view'0 x + Int128.to_int (1 : Int128.t)}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (NonZero'0.t_NonZero)) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (NonZero'0.t_NonZero)) =
    resolve'2 _1
  
  meta "compute_max_steps" 1000000
  
  let rec frozen_dead (x:borrowed (NonZero'0.t_NonZero)) (y:borrowed (NonZero'0.t_NonZero)) (return'  (ret:()))= {[%#sborrows3] inv'1 y}
    {[%#sborrows2] inv'1 x}
    {[%#sborrows1] Int32.to_int (T_borrows__NonZero.t_NonZero__0 x.current) <> - Int128.to_int (1 : Int128.t)}
    {[%#sborrows0] Int32.to_int (T_borrows__NonZero.t_NonZero__0 x.current) < Int32.to_int (v_MAX'0 : Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = NonZero'0.t_NonZero {x.current}
          (fun (r0'0:Int32.t) ->
            Borrow.borrow_final <Int32.t> {r0'0} {Borrow.inherit_id (Borrow.get_id x) 1}
              (fun (_ret':borrowed Int32.t) ->
                 [ &_a <- _ret' ] 
                 [ &x <- { x with current = NonZero'0.C_NonZero _ret'.final ; } ] 
                s1))
      | s1 = {inv'0 y.current}
        Borrow.borrow_final <NonZero'0.t_NonZero> {y.current} {Borrow.get_id y}
          (fun (_ret':borrowed (NonZero'0.t_NonZero)) ->
             [ &_6 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &y <- { y with current = _ret'.final ; } ] 
            s2)
      | s2 = {[@expl:type invariant] inv'1 x} s3
      | s3 = -{resolve'0 x}- s4
      | s4 =  [ &x <- _6 ] s5
      | s5 = {[@expl:type invariant] inv'1 x} s6
      | s6 = -{resolve'0 x}- s7
      | s7 = Borrow.borrow_final <Int32.t> {_a.current} {Borrow.get_id _a}
          (fun (_ret':borrowed Int32.t) ->  [ &_8 <- _ret' ]  [ &_a <- { _a with current = _ret'.final ; } ] s8)
      | s8 = inc'0 {_8} (fun (_ret':()) ->  [ &_7 <- _ret' ] s9)
      | s9 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'1 _a}- s1
      | s1 = {[@expl:type invariant] inv'1 y} s2
      | s2 = -{resolve'0 y}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : borrowed (NonZero'0.t_NonZero) = x
    | & y : borrowed (NonZero'0.t_NonZero) = y
    | & _a : borrowed Int32.t = any_l ()
    | & _6 : borrowed (NonZero'0.t_NonZero) = any_l ()
    | & _7 : () = any_l ()
    | & _8 : borrowed Int32.t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module T_borrows__SumTo10 [#"borrows.rs" 78 0 78 18]
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_SumTo10  =
    | C_SumTo10 Int32.t Int32.t
  
  let rec t_SumTo10 (input:t_SumTo10) (ret  (a:Int32.t) (b:Int32.t))= any
    [ good (a:Int32.t) (b:Int32.t)-> {C_SumTo10 a b = input} (! ret {a} {b}) ]
    
  
  function t_SumTo10__a (self : t_SumTo10) : Int32.t =
    match self with
      | C_SumTo10 a _ -> a
      end
  
  function t_SumTo10__b (self : t_SumTo10) : Int32.t =
    match self with
      | C_SumTo10 _ a -> a
      end
end
module M_borrows__qyi5556307355051076399__foo [#"borrows.rs" 93 4 93 25] (* SumTo10 *)
  let%span sborrows0 = "borrows.rs" 92 15 92 34
  let%span sborrows1 = "borrows.rs" 93 20 93 24
  let%span sborrows2 = "borrows.rs" 99 11 99 25
  let%span sborrows3 = "borrows.rs" 100 10 100 25
  let%span sborrows4 = "borrows.rs" 105 11 105 25
  let%span sborrows5 = "borrows.rs" 106 10 106 25
  let%span smodel6 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve7 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant8 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sborrows9 = "borrows.rs" 87 20 87 43
  
  use prelude.prelude.Int128.to_int
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int
  
  use T_borrows__SumTo10 as T_borrows__SumTo10
  
  use prelude.prelude.Int32.to_int
  
  use T_borrows__SumTo10 as T_borrows__SumTo10
  
  use T_borrows__SumTo10 as SumTo10'0
  
  predicate invariant'1 [#"borrows.rs" 86 4 86 30] (self : SumTo10'0.t_SumTo10) =
    [%#sborrows9] Int32.to_int (T_borrows__SumTo10.t_SumTo10__a self)
    + Int32.to_int (T_borrows__SumTo10.t_SumTo10__b self)
    = Int128.to_int (10 : Int128.t)
  
  predicate inv'1 (_1 : SumTo10'0.t_SumTo10)
  
  axiom inv_axiom'1 [@rewrite] : forall x : SumTo10'0.t_SumTo10 [inv'1 x] . inv'1 x
  = (invariant'1 x
  /\ match x with
    | SumTo10'0.C_SumTo10 a b -> true
    end)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (SumTo10'0.t_SumTo10)) =
    [%#sinvariant8] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed (SumTo10'0.t_SumTo10))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (SumTo10'0.t_SumTo10) [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Int32
  
  constant v_MAX'0 : Int32.t = (2147483647 : Int32.t)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (SumTo10'0.t_SumTo10)) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (SumTo10'0.t_SumTo10)) =
    resolve'3 _1
  
  constant v_MIN'0 : Int32.t = (-2147483648 : Int32.t)
  
  function view'0 (self : borrowed Int32.t) : int =
    [%#smodel6] Int32.to_int self.current
  
  let rec dec'0 (x:borrowed Int32.t) (return'  (ret:()))= {[@expl:precondition] [%#sborrows4] view'0 x
    > Int32.to_int (v_MIN'0 : Int32.t)}
    any
    [ return' (result:())-> {[%#sborrows5] Int32.to_int x.final = view'0 x - Int128.to_int (1 : Int128.t)}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed Int32.t) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed Int32.t) =
    resolve'2 _1
  
  let rec inc'0 (x:borrowed Int32.t) (return'  (ret:()))= {[@expl:precondition] [%#sborrows2] view'0 x
    < Int32.to_int (v_MAX'0 : Int32.t)}
    any
    [ return' (result:())-> {[%#sborrows3] Int32.to_int x.final = view'0 x + Int128.to_int (1 : Int128.t)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec foo (self:borrowed (SumTo10'0.t_SumTo10)) (return'  (ret:()))= {[%#sborrows1] inv'0 self}
    {[%#sborrows0] Int32.to_int (T_borrows__SumTo10.t_SumTo10__a self.current) < Int32.to_int (v_MAX'0 : Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = SumTo10'0.t_SumTo10 {self.current}
          (fun (ra'0:Int32.t) (rb'0:Int32.t) ->
            Borrow.borrow_final <Int32.t> {ra'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed Int32.t) ->
                 [ &_5 <- _ret' ] 
                 [ &self <- { self with current = SumTo10'0.C_SumTo10 _ret'.final rb'0 ; } ] 
                s1))
      | s1 = Borrow.borrow_final <Int32.t> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed Int32.t) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final ; } ] s2)
      | s2 = inc'0 {_4} (fun (_ret':()) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _5}- s1
      | s1 = SumTo10'0.t_SumTo10 {self.current}
          (fun (ra'0:Int32.t) (rb'0:Int32.t) ->
            Borrow.borrow_final <Int32.t> {rb'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed Int32.t) ->
                 [ &_8 <- _ret' ] 
                 [ &self <- { self with current = SumTo10'0.C_SumTo10 ra'0 _ret'.final ; } ] 
                s2))
      | s2 = Borrow.borrow_final <Int32.t> {_8.current} {Borrow.get_id _8}
          (fun (_ret':borrowed Int32.t) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = _ret'.final ; } ] s3)
      | s3 = dec'0 {_7} (fun (_ret':()) ->  [ &_6 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'1 self}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (SumTo10'0.t_SumTo10) = self
    | & _3 : () = any_l ()
    | & _4 : borrowed Int32.t = any_l ()
    | & _5 : borrowed Int32.t = any_l ()
    | & _6 : () = any_l ()
    | & _7 : borrowed Int32.t = any_l ()
    | & _8 : borrowed Int32.t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_borrows__inc [#"borrows.rs" 101 0 101 23]
  let%span sborrows0 = "borrows.rs" 102 10 102 11
  let%span sborrows1 = "borrows.rs" 99 11 99 25
  let%span sborrows2 = "borrows.rs" 100 10 100 25
  let%span smodel3 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve4 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Int128.to_int
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int32.to_int
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : Int32.t = (2147483647 : Int32.t)
  
  use prelude.prelude.Borrow
  
  function view'0 (self : borrowed Int32.t) : int =
    [%#smodel3] Int32.to_int self.current
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed Int32.t) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed Int32.t) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec inc (x:borrowed Int32.t) (return'  (ret:()))= {[%#sborrows1] view'0 x < Int32.to_int (v_MAX'0 : Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.add {x.current} {[%#sborrows0] (1 : Int32.t)}
          (fun (_ret':Int32.t) ->  [ &x <- { x with current = _ret' ; } ] s1)
      | s1 = -{resolve'0 x}- s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & x : borrowed Int32.t = x ] 
    [ return' (result:())-> {[@expl:postcondition] [%#sborrows2] Int32.to_int x.final
      = view'0 x + Int128.to_int (1 : Int128.t)}
      (! return' {result}) ]
    
end
module M_borrows__dec [#"borrows.rs" 107 0 107 23]
  let%span sborrows0 = "borrows.rs" 108 10 108 11
  let%span sborrows1 = "borrows.rs" 105 11 105 25
  let%span sborrows2 = "borrows.rs" 106 10 106 25
  let%span smodel3 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sresolve4 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Int128.to_int
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int32.to_int
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  constant v_MIN'0 : Int32.t = (-2147483648 : Int32.t)
  
  use prelude.prelude.Borrow
  
  function view'0 (self : borrowed Int32.t) : int =
    [%#smodel3] Int32.to_int self.current
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed Int32.t) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed Int32.t) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec dec (x:borrowed Int32.t) (return'  (ret:()))= {[%#sborrows1] view'0 x > Int32.to_int (v_MIN'0 : Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.sub {x.current} {[%#sborrows0] (1 : Int32.t)}
          (fun (_ret':Int32.t) ->  [ &x <- { x with current = _ret' ; } ] s1)
      | s1 = -{resolve'0 x}- s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & x : borrowed Int32.t = x ] 
    [ return' (result:())-> {[@expl:postcondition] [%#sborrows2] Int32.to_int x.final
      = view'0 x - Int128.to_int (1 : Int128.t)}
      (! return' {result}) ]
    
end
module M_borrows__qyi5024211669630233854 [#"borrows.rs" 6 0 6 26] (* <NonZero as creusot_contracts::Invariant> *)
  
end
module M_borrows__qyi4859323780236167259 [#"borrows.rs" 83 0 83 26] (* <SumTo10 as creusot_contracts::Invariant> *)
  
end
