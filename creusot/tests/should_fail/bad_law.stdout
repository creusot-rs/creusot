module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module BadLaw_BadLaw_MyLaw_Interface
  type self   
  type t   
  function my_law (x : t) : ()
end
module BadLaw_BadLaw_MyLaw
  type self   
  type t   
  function my_law (x : t) : ()
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module BadLaw_Impl0_MyLaw_Interface
  type t   
  val my_law [@cfg:stackify] (x : t) : ()
end
module BadLaw_Impl0_MyLaw
  type t   
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  let rec cfg my_law [@cfg:stackify] (x : t) : () = 
  var _0 : ();
  var x_1 : t;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve x_1 };
    return _0
  }
  
end
module BadLaw_Impl0
  type t   
  clone BadLaw_Impl0_MyLaw_Interface as MyLaw0 with type t = t
  clone BadLaw_BadLaw_MyLaw as MyLaw1 with type self = (), type t = t, function my_law = MyLaw0.my_law
end
