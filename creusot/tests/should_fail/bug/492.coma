
module C492_ReborrowTuple
  type t
  use prelude.UInt32
  use prelude.Borrow
  predicate invariant'2 (self : (borrowed t, uint32))
  let rec invariant'2 (self:(borrowed t, uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : (borrowed t, uint32))
  let rec inv'2 (_x:(borrowed t, uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : (borrowed t, uint32) . inv'2 x = true
  predicate invariant'1 (self : borrowed t)
  let rec invariant'1 (self:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed t)
  let rec inv'1 (_x:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  predicate invariant'0 (self : t)
  let rec invariant'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : t)
  let rec inv'0 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : t . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'0 (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  let rec reborrow_tuple (x:borrowed t) (return'  (ret:(borrowed t, uint32)))= {[#"../492.rs" 5 25 5 26] inv'1 x}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <t> { * x} {Borrow.get_id x}
          (fun (_ret':borrowed t) ->  [ &_3 <- _ret' ]  [ &x <- { x with current = ( ^ _3) ; } ] s1)
      | s1 = -{inv'0 ( ^ _3)}- s2
      | s2 =  [ &_0 <- (_3, ([#"../492.rs" 6 8 6 10] (32 : uint32))) ] 
        (any [ any_ (_any:borrowed t)-> (!  [ &_3 <- _any ] s3) ] )
      | s3 = {[@expl:type invariant] inv'1 x} s4
      | s4 = -{resolve'0 x}- s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : (borrowed t, uint32) = any_l () : (borrowed t, uint32)
    | & x : borrowed t = x
    | & _3 : borrowed t = any_l () : borrowed t ]
    
    [ return' (result:(borrowed t, uint32))-> {[@expl:postcondition] [#"../492.rs" 5 39 5 52] inv'2 result}
      {[@expl:postcondition] [#"../492.rs" 4 10 4 27]  * (let (a, _) = result in a) =  * x}
      (! return' {result}) ]
    
end
module C492_Test
  use prelude.UInt32
  use prelude.Int32
  use prelude.Borrow
  predicate invariant'1 (self : (borrowed int32, uint32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:(borrowed int32, uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : (borrowed int32, uint32))
  let rec inv'1 (_x:(borrowed int32, uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : (borrowed int32, uint32) . inv'1 x = true
  predicate invariant'0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed int32)
  let rec inv'0 (_x:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed int32 . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'2 (self : uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'2 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 (self : (borrowed int32, uint32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'1 (let (a, _) = self in a)
    /\ resolve'2 (let (_, a) = self in a)
  let rec resolve'0 (self:(borrowed int32, uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  let rec reborrow_tuple'0 (x:borrowed int32) (return'  (ret:(borrowed int32, uint32)))= {[@expl:precondition] [#"../492.rs" 5 25 5 26] inv'0 x}
    any
    [ return' (result:(borrowed int32, uint32))-> {[#"../492.rs" 5 39 5 52] inv'1 result}
      {[#"../492.rs" 4 10 4 27]  * (let (a, _) = result in a) =  * x}
      (! return' {result}) ]
    
  let rec test (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [#"../492.rs" 11 16 11 17] (5 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &_6 <- _ret' ]  [ &x <-  ^ _6 ] s2)
      | s2 = Borrow.borrow_final <int32> { * _6} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = ( ^ _5) ; } ] s3)
      | s3 = reborrow_tuple'0 {_5} (fun (_ret':(borrowed int32, uint32)) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &res <- let (r'0, _) = _4 in r'0 ] 
        (any [ any_ (_any:borrowed int32)-> (!  [ &_4 <- let (_, l'2) = _4 in (_any, l'2) ] s1) ] )
      | s1 = -{resolve'0 _4}- s2
      | s2 = -{resolve'1 _6}- s3
      | s3 = {[@expl:assertion] [#"../492.rs" 13 18 13 30]  ^ res = (5 : int32)} s4
      | s4 =  [ &res <- { res with current = ([#"../492.rs" 14 11 14 13] (10 : int32)) ; } ] s5
      | s5 = -{resolve'1 res}- s6
      | s6 =  [ &_0 <- [#"../492.rs" 10 14 15 1] () ] s7
      | s7 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : int32 = any_l () : int32
    | & res : borrowed int32 = any_l () : borrowed int32
    | & _4 : (borrowed int32, uint32) = any_l () : (borrowed int32, uint32)
    | & _5 : borrowed int32 = any_l () : borrowed int32
    | & _6 : borrowed int32 = any_l () : borrowed int32 ]
     [ return' (result:())-> {[@expl:postcondition] [#"../492.rs" 9 10 9 15] false} (! return' {result}) ] 
end
