
module C492_ReborrowTuple
  type t
  use prelude.UInt32
  use prelude.Borrow
  predicate invariant2 (self : (borrowed t, uint32))
  val invariant2 (self : (borrowed t, uint32)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : (borrowed t, uint32))
  val inv2 (_x : (borrowed t, uint32)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : (borrowed t, uint32) . inv2 x = true
  predicate invariant1 (self : borrowed t)
  val invariant1 (self : borrowed t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed t)
  val inv1 (_x : borrowed t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed t . inv1 x = true
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  predicate resolve0 (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed t) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  let rec cfg reborrow_tuple [#"../492.rs" 5 0 5 52] [@cfg:stackify] [@cfg:subregion_analysis] (x : borrowed t) : (borrowed t, uint32)
    requires {[#"../492.rs" 5 25 5 26] inv1 x}
    ensures { [#"../492.rs" 4 10 4 27]  * (let (a, _) = result in a) =  * x }
    ensures { [#"../492.rs" 5 39 5 52] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (borrowed t, uint32);
  var x : borrowed t = x;
  var _3 : borrowed t;
  {
    goto BB0
  }
  BB0 {
    [#"../492.rs" 6 5 6 6] _3 <- Borrow.borrow_mut ( * x);
    [#"../492.rs" 6 5 6 6] x <- { x with current =  ^ _3 };
    assume { inv0 ( ^ _3) };
    [#"../492.rs" 6 4 6 11] _0 <- ([#"../492.rs" 6 4 6 11] (_3, ([#"../492.rs" 6 8 6 10] [#"../492.rs" 6 8 6 10] (32 : uint32))));
    _3 <- any borrowed t;
    assert { [@expl:type invariant] inv1 x };
    assume { resolve0 x };
    return _0
  }
  
end
module C492_Test
  use prelude.UInt32
  use prelude.Int32
  use prelude.Borrow
  predicate invariant1 (self : (borrowed int32, uint32)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : (borrowed int32, uint32)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : (borrowed int32, uint32))
  val inv1 (_x : (borrowed int32, uint32)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : (borrowed int32, uint32) . inv1 x = true
  predicate invariant0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : borrowed int32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed int32)
  val inv0 (_x : borrowed int32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed int32 . inv0 x = true
  predicate resolve1 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed int32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve2 (self : uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 45 8 45 12] true
  val resolve2 (self : uint32) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 (self : (borrowed int32, uint32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] resolve1 (let (a, _) = self in a) /\ resolve2 (let (_, a) = self in a)
  val resolve0 (self : (borrowed int32, uint32)) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  val reborrow_tuple0 [#"../492.rs" 5 0 5 52] (x : borrowed int32) : (borrowed int32, uint32)
    requires {[#"../492.rs" 5 25 5 26] inv0 x}
    ensures { [#"../492.rs" 4 10 4 27]  * (let (a, _) = result in a) =  * x }
    ensures { [#"../492.rs" 5 39 5 52] inv1 result }
    
  let rec cfg test [#"../492.rs" 10 0 10 13] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    ensures { [#"../492.rs" 9 10 9 15] false }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : int32;
  var res : borrowed int32;
  var _4 : (borrowed int32, uint32);
  var _5 : borrowed int32;
  var _6 : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    [#"../492.rs" 11 16 11 17] x <- ([#"../492.rs" 11 16 11 17] [#"../492.rs" 11 16 11 17] (5 : int32));
    [#"../492.rs" 12 34 12 40] _6 <- Borrow.borrow_mut x;
    [#"../492.rs" 12 34 12 40] x <-  ^ _6;
    [#"../492.rs" 12 34 12 40] _5 <- Borrow.borrow_mut ( * _6);
    [#"../492.rs" 12 34 12 40] _6 <- { _6 with current =  ^ _5 };
    [#"../492.rs" 12 19 12 41] _4 <- ([#"../492.rs" 12 19 12 41] reborrow_tuple0 _5);
    _5 <- any borrowed int32;
    goto BB1
  }
  BB1 {
    [#"../492.rs" 12 9 12 12] res <- ([#"../492.rs" 12 9 12 12] let (a, _) = _4 in a);
    [#"../492.rs" 12 9 12 12] _4 <- (let (x0, x1) = _4 in (any borrowed int32, x1));
    assume { resolve0 _4 };
    assume { resolve1 _6 };
    assert { [@expl:assertion] [#"../492.rs" 13 18 13 30]  ^ res = (5 : int32) };
    [#"../492.rs" 14 4 14 13] res <- { res with current = ([#"../492.rs" 14 4 14 13] [#"../492.rs" 14 11 14 13] (10 : int32)) };
    assume { resolve1 res };
    [#"../492.rs" 10 14 15 1] _0 <- ([#"../492.rs" 10 14 15 1] ());
    return _0
  }
  
end
