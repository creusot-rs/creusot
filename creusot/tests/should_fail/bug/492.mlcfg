
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C492_ReborrowTuple_Interface
  type t
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  val reborrow_tuple [#"../492.rs" 5 0 5 52] (x : borrowed t) : (borrowed t, uint32)
    ensures { [#"../492.rs" 4 10 4 27]  * (let (a, _) = result in a) =  * x }
    
end
module C492_ReborrowTuple
  type t
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = t
  let rec cfg reborrow_tuple [#"../492.rs" 5 0 5 52] [@cfg:stackify] [@cfg:subregion_analysis] (x : borrowed t) : (borrowed t, uint32)
    ensures { [#"../492.rs" 4 10 4 27]  * (let (a, _) = result in a) =  * x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (borrowed t, uint32);
  var x : borrowed t = x;
  var _3 : borrowed t;
  {
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut ( * x);
    x <- { x with current = ( ^ _3) };
    _0 <- (_3, [#"../492.rs" 6 8 6 10] (32 : uint32));
    _3 <- any borrowed t;
    assume { Resolve0.resolve x };
    return _0
  }
  
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module C492_Test_Interface
  val test [#"../492.rs" 10 0 10 13] (_1 : ()) : ()
    ensures { [#"../492.rs" 9 10 9 15] false }
    
end
module C492_Test
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve2 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = int32
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = borrowed int32,
    type t2 = uint32,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve2.resolve
  clone C492_ReborrowTuple_Interface as ReborrowTuple0 with
    type t = int32
  let rec cfg test [#"../492.rs" 10 0 10 13] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    ensures { [#"../492.rs" 9 10 9 15] false }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : int32;
  var res : borrowed int32;
  var _4 : (borrowed int32, uint32);
  var _5 : borrowed int32;
  var _6 : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    x <- ([#"../492.rs" 11 16 11 17] (5 : int32));
    _6 <- borrow_mut x;
    x <-  ^ _6;
    _5 <- borrow_mut ( * _6);
    _6 <- { _6 with current = ( ^ _5) };
    _4 <- ([#"../492.rs" 12 19 12 41] ReborrowTuple0.reborrow_tuple _5);
    _5 <- any borrowed int32;
    goto BB1
  }
  BB1 {
    res <- (let (a, _) = _4 in a);
    _4 <- (let (a, b) = _4 in (any borrowed int32, b));
    assume { Resolve0.resolve _4 };
    assume { Resolve1.resolve _6 };
    assert { [@expl:assertion] [#"../492.rs" 13 18 13 30]  ^ res = (5 : int32) };
    res <- { res with current = ([#"../492.rs" 14 11 14 13] (10 : int32)) };
    assume { Resolve1.resolve res };
    _0 <- ();
    return _0
  }
  
end
