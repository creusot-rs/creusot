
module C222_A_Mktrue_Stub
  type self
  use prelude.Int
  function mktrue [#"../222.rs" 7 4 7 22] (_1 : ()) : int
end
module C222_A_Mktrue_Interface
  type self
  use prelude.Int
  function mktrue [#"../222.rs" 7 4 7 22] (_1 : ()) : int
  val mktrue [#"../222.rs" 7 4 7 22] (_1 : ()) : int
    ensures { result = mktrue _1 }
    
end
module C222_A_Mktrue
  type self
  use prelude.Int
  function mktrue [#"../222.rs" 7 4 7 22] (_1 : ()) : int =
    [#"../222.rs" 8 20 8 21] 5
  val mktrue [#"../222.rs" 7 4 7 22] (_1 : ()) : int
    ensures { result = mktrue _1 }
    
end
module C222_A_IsTrue_Stub
  type self
  use prelude.Int
  clone C222_A_Mktrue_Stub as Mktrue0 with
    type self = self
  function is_true [#"../222.rs" 14 4 14 16] (_1 : ()) : ()
end
module C222_A_IsTrue_Interface
  type self
  use prelude.Int
  clone C222_A_Mktrue_Stub as Mktrue0 with
    type self = self
  function is_true [#"../222.rs" 14 4 14 16] (_1 : ()) : ()
  val is_true [#"../222.rs" 14 4 14 16] (_1 : ()) : ()
    ensures { [#"../222.rs" 13 14 13 34] Mktrue0.mktrue () <= 10 }
    ensures { result = is_true _1 }
    
  axiom is_true_spec : forall _1 : () . [#"../222.rs" 13 14 13 34] Mktrue0.mktrue () <= 10
end
module C222_A_IsTrue
  type self
  use prelude.Int
  clone C222_A_Mktrue_Stub as Mktrue0 with
    type self = self
  function is_true [#"../222.rs" 14 4 14 16] (_1 : ()) : () =
    [#"../222.rs" 15 8 15 10] ()
  val is_true [#"../222.rs" 14 4 14 16] (_1 : ()) : ()
    ensures { [#"../222.rs" 13 14 13 34] Mktrue0.mktrue () <= 10 }
    ensures { result = is_true _1 }
    
  axiom is_true_spec : forall _1 : () . [#"../222.rs" 13 14 13 34] Mktrue0.mktrue () <= 10
end
module C222_A_IsTrue_Impl
  type self
  use prelude.Int
  clone C222_A_Mktrue_Interface as Mktrue0 with
    type self = self
  let rec ghost function is_true [#"../222.rs" 14 4 14 16] (_1 : ()) : ()
    ensures { [#"../222.rs" 13 14 13 34] Mktrue0.mktrue () <= 10 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../222.rs" 15 8 15 10] ()
end
module C222_Impl0_Mktrue_Stub
  use prelude.Int
  function mktrue [#"../222.rs" 21 4 21 22] (_1 : ()) : int
end
module C222_Impl0_Mktrue_Interface
  use prelude.Int
  function mktrue [#"../222.rs" 21 4 21 22] (_1 : ()) : int
  val mktrue [#"../222.rs" 21 4 21 22] (_1 : ()) : int
    ensures { result = mktrue _1 }
    
end
module C222_Impl0_Mktrue
  use prelude.Int
  function mktrue [#"../222.rs" 21 4 21 22] (_1 : ()) : int =
    [#"../222.rs" 22 20 22 21] 6
  val mktrue [#"../222.rs" 21 4 21 22] (_1 : ()) : int
    ensures { result = mktrue _1 }
    
end
module C222_Invariant_Invariant_Stub
  type self
  predicate invariant' [#"../222.rs" 29 4 29 30] (self : self)
end
module C222_Invariant_Invariant_Interface
  type self
  predicate invariant' [#"../222.rs" 29 4 29 30] (self : self)
  val invariant' [#"../222.rs" 29 4 29 30] (self : self) : bool
    ensures { result = invariant' self }
    
end
module C222_Invariant_Invariant
  type self
  predicate invariant' [#"../222.rs" 29 4 29 30] (self : self) =
    [#"../222.rs" 30 8 30 12] true
  val invariant' [#"../222.rs" 29 4 29 30] (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module C222_Once_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_once 't =
    | C_Once (Core_Option_Option_Type.t_option 't)
    
  let function once_0 (self : t_once 't) : Core_Option_Option_Type.t_option 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Once a -> a
      end
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module Core_Option_Impl0_Take_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Option_Option_Type.t_option t)
  val take (self : borrowed (Core_Option_Option_Type.t_option t)) : Core_Option_Option_Type.t_option t
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] result =  * self /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { Inv1.inv result }
    
end
module C222_UsesInvariant_Interface
  type t
  use prelude.Borrow
  use C222_Once_Type as C222_Once_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (C222_Once_Type.t_once t)
  clone C222_Invariant_Invariant_Stub as Invariant0 with
    type self = C222_Once_Type.t_once t
  val uses_invariant [#"../222.rs" 40 0 40 41] (x : borrowed (C222_Once_Type.t_once t)) : ()
    requires {[#"../222.rs" 38 11 38 24] Invariant0.invariant' ( * x)}
    requires {[#"../222.rs" 40 25 40 26] Inv0.inv x}
    ensures { [#"../222.rs" 39 10 39 26] Invariant0.invariant' ( ^ x) }
    
end
module C222_UsesInvariant
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (Core_Option_Option_Type.t_option t)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (Core_Option_Option_Type.t_option t),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use C222_Once_Type as C222_Once_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (C222_Once_Type.t_once t)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed (C222_Once_Type.t_once t),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Core_Option_Option_Type.t_option t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Option_Option_Type.t_option t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C222_Invariant_Invariant as Invariant0 with
    type self = C222_Once_Type.t_once t
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = C222_Once_Type.t_once t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Core_Option_Option_Type.t_option t
  clone Core_Option_Impl0_Take_Interface as Take0 with
    type t = t,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv0.inv
  let rec cfg uses_invariant [#"../222.rs" 40 0 40 41] [@cfg:stackify] [@cfg:subregion_analysis] (x : borrowed (C222_Once_Type.t_once t)) : ()
    requires {[#"../222.rs" 38 11 38 24] Invariant0.invariant' ( * x)}
    requires {[#"../222.rs" 40 25 40 26] Inv1.inv x}
    ensures { [#"../222.rs" 39 10 39 26] Invariant0.invariant' ( ^ x) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : borrowed (C222_Once_Type.t_once t) = x;
  var _4 : Core_Option_Option_Type.t_option t;
  var _5 : borrowed (Core_Option_Option_Type.t_option t);
  {
    goto BB0
  }
  BB0 {
    _5 <- Borrow.borrow_mut (C222_Once_Type.once_0 ( * x));
    x <- { x with current = (let C222_Once_Type.C_Once a =  * x in C222_Once_Type.C_Once ( ^ _5)) };
    assume { Inv0.inv ( ^ _5) };
    _4 <- ([#"../222.rs" 41 4 41 14] Take0.take _5);
    _5 <- any borrowed (Core_Option_Option_Type.t_option t);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] Inv0.inv _4 };
    assume { Resolve0.resolve _4 };
    assert { [@expl:type invariant] Inv1.inv x };
    assume { Resolve1.resolve x };
    goto BB2
  }
  BB2 {
    _0 <- ();
    return _0
  }
  
end
module C222_Impl0
  
end
module C222_Impl1
  type t
end
