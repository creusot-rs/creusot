
module C869_Unsound
  use prelude.Snapshot
  use prelude.Borrow
  use prelude.Intrinsic
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate resolve'0 (self : borrowed (Snapshot.snap_ty bool)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Snapshot.snap_ty bool)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  let rec unsound (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [#"../869.rs" 5 32 5 50] Snapshot.new true ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <Snapshot.snap_ty bool> {x}
          (fun (_ret':borrowed (Snapshot.snap_ty bool)) ->  [ &_4 <- _ret' ]  [ &x <-  ^ _4 ] s1)
      | s1 = Borrow.borrow_final <Snapshot.snap_ty bool> { * _4} {Borrow.get_id _4}
          (fun (_ret':borrowed (Snapshot.snap_ty bool)) ->
             [ &xm <- _ret' ] 
             [ &_4 <- { _4 with current = ( ^ xm) ; } ] 
            s2)
      | s2 = -{resolve'0 _4}- s3
      | s3 = Borrow.borrow_mut <Snapshot.snap_ty bool> { * xm}
          (fun (_ret':borrowed (Snapshot.snap_ty bool)) ->
             [ &_6 <- _ret' ] 
             [ &xm <- { xm with current = ( ^ _6) ; } ] 
            s4)
      | s4 = Borrow.borrow_final <Snapshot.snap_ty bool> { * _6} {Borrow.get_id _6}
          (fun (_ret':borrowed (Snapshot.snap_ty bool)) ->
             [ &b <- _ret' ] 
             [ &_6 <- { _6 with current = ( ^ b) ; } ] 
            s5)
      | s5 = -{resolve'0 b}- s6
      | s6 = -{resolve'0 _6}- s7
      | s7 =  [ &bg <- [#"../869.rs" 10 44 10 59] Snapshot.new b ] s8
      | s8 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:assertion] [#"../869.rs" 11 20 11 50] Snapshot.inner ( * Snapshot.inner bg) = true
        /\ Snapshot.inner ( ^ Snapshot.inner bg) = true}
        s1
      | s1 = Borrow.borrow_final <Snapshot.snap_ty bool> { * xm} {Borrow.get_id xm}
          (fun (_ret':borrowed (Snapshot.snap_ty bool)) ->
             [ &_12 <- _ret' ] 
             [ &xm <- { xm with current = ( ^ _12) ; } ] 
            s2)
      | s2 = Borrow.borrow_final <Snapshot.snap_ty bool> { * _12} {Borrow.get_id _12}
          (fun (_ret':borrowed (Snapshot.snap_ty bool)) ->
             [ &evil <- _ret' ] 
             [ &_12 <- { _12 with current = ( ^ evil) ; } ] 
            s3)
      | s3 = -{resolve'0 _12}- s4
      | s4 = {[@expl:assertion] [#"../869.rs" 17 20 17 53] (evil = Snapshot.inner bg)
        = (Snapshot.inner ( ^ evil) = true)}
        s5
      | s5 =  [ &_15 <- [#"../869.rs" 18 12 18 64] Snapshot.new (if evil = Snapshot.inner bg then false else true) ] s6
      | s6 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &evil <- { evil with current = _15 ; } ] 
        (any [ any_ (_any:Snapshot.snap_ty bool)-> (!  [ &_15 <- _any ] s1) ] )
      | s1 = -{resolve'0 evil}- s2
      | s2 = -{resolve'0 xm}- s3
      | s3 = {[@expl:assertion] [#"../869.rs" 19 20 19 37] Snapshot.inner ( * evil) = (not Snapshot.inner ( ^ evil))} s4
      | s4 = {[@expl:assertion] [#"../869.rs" 20 20 20 37] Snapshot.inner ( * evil) = (not Snapshot.inner ( * evil))} s5
      | s5 =  [ &_0 <- [#"../869.rs" 4 17 21 1] () ] s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : Snapshot.snap_ty bool = any_l () : Snapshot.snap_ty bool
    | & xm : borrowed (Snapshot.snap_ty bool) = any_l () : borrowed (Snapshot.snap_ty bool)
    | & _4 : borrowed (Snapshot.snap_ty bool) = any_l () : borrowed (Snapshot.snap_ty bool)
    | & b : borrowed (Snapshot.snap_ty bool) = any_l () : borrowed (Snapshot.snap_ty bool)
    | & _6 : borrowed (Snapshot.snap_ty bool) = any_l () : borrowed (Snapshot.snap_ty bool)
    | & bg : Snapshot.snap_ty (borrowed (Snapshot.snap_ty bool)) = any_l () : Snapshot.snap_ty (borrowed (Snapshot.snap_ty bool))
    | & evil : borrowed (Snapshot.snap_ty bool) = any_l () : borrowed (Snapshot.snap_ty bool)
    | & _12 : borrowed (Snapshot.snap_ty bool) = any_l () : borrowed (Snapshot.snap_ty bool)
    | & _15 : Snapshot.snap_ty bool = any_l () : Snapshot.snap_ty bool ]
     [ return' (result:())-> (! return' {result}) ] 
end
