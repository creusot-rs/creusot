
module CreusotContracts_Snapshot_Snapshot_Type
  type t_snapshot 't
end
module C869_Unsound
  let%span s8690 = "../869.rs" 5 32 5 50
  
  let%span s8691 = "../869.rs" 10 44 10 59
  
  let%span s8692 = "../869.rs" 11 20 11 50
  
  let%span s8693 = "../869.rs" 17 20 17 53
  
  let%span s8694 = "../869.rs" 18 12 18 64
  
  let%span s8695 = "../869.rs" 19 20 19 37
  
  let%span s8696 = "../869.rs" 20 20 20 37
  
  let%span span7 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span8 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span9 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span10 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (Snapshot'0.t_snapshot bool)) =
    [%#span7] true
  
  predicate inv'1 (_x : borrowed (Snapshot'0.t_snapshot bool))
  
  axiom inv'1 : forall x : borrowed (Snapshot'0.t_snapshot bool) . inv'1 x = true
  
  predicate invariant'0 (self : bool) =
    [%#span7] true
  
  predicate inv'0 (_x : bool)
  
  axiom inv'0 : forall x : bool . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  function deref'1 (self : Snapshot'0.t_snapshot bool) : bool
  
  function deref'0 (self : Snapshot'0.t_snapshot (borrowed (Snapshot'0.t_snapshot bool))) : borrowed (Snapshot'0.t_snapshot bool)
    
  
  function new'1 (x : borrowed (Snapshot'0.t_snapshot bool)) : Snapshot'0.t_snapshot (borrowed (Snapshot'0.t_snapshot bool))
    
  
  axiom new'1_spec : forall x : borrowed (Snapshot'0.t_snapshot bool) . ([%#span8] inv'1 x)
   -> ([%#span9] deref'0 (new'1 x) = x)
  
  predicate resolve'0 (self : borrowed (Snapshot'0.t_snapshot bool)) =
    [%#span10]  ^ self =  * self
  
  function new'0 (x : bool) : Snapshot'0.t_snapshot bool
  
  axiom new'0_spec : forall x : bool . ([%#span8] inv'0 x)  -> ([%#span9] deref'1 (new'0 x) = x)
  
  let rec unsound (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [%#s8690] new'0 true ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <Snapshot'0.t_snapshot bool> {x}
          (fun (_ret':borrowed (Snapshot'0.t_snapshot bool)) ->  [ &_4 <- _ret' ]  [ &x <-  ^ _4 ] s1)
      | s1 = Borrow.borrow_final <Snapshot'0.t_snapshot bool> { * _4} {Borrow.get_id _4}
          (fun (_ret':borrowed (Snapshot'0.t_snapshot bool)) ->
             [ &xm <- _ret' ] 
             [ &_4 <- { _4 with current = ( ^ xm) ; } ] 
            s2)
      | s2 = -{resolve'0 _4}- s3
      | s3 = Borrow.borrow_mut <Snapshot'0.t_snapshot bool> { * xm}
          (fun (_ret':borrowed (Snapshot'0.t_snapshot bool)) ->
             [ &_6 <- _ret' ] 
             [ &xm <- { xm with current = ( ^ _6) ; } ] 
            s4)
      | s4 = Borrow.borrow_final <Snapshot'0.t_snapshot bool> { * _6} {Borrow.get_id _6}
          (fun (_ret':borrowed (Snapshot'0.t_snapshot bool)) ->
             [ &b <- _ret' ] 
             [ &_6 <- { _6 with current = ( ^ b) ; } ] 
            s5)
      | s5 = -{resolve'0 b}- s6
      | s6 = -{resolve'0 _6}- s7
      | s7 =  [ &bg <- [%#s8691] new'1 b ] s8
      | s8 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#s8692] deref'1 ( * deref'0 bg) = true /\ deref'1 ( ^ deref'0 bg) = true} s1
      | s1 = Borrow.borrow_final <Snapshot'0.t_snapshot bool> { * xm} {Borrow.get_id xm}
          (fun (_ret':borrowed (Snapshot'0.t_snapshot bool)) ->
             [ &_12 <- _ret' ] 
             [ &xm <- { xm with current = ( ^ _12) ; } ] 
            s2)
      | s2 = Borrow.borrow_final <Snapshot'0.t_snapshot bool> { * _12} {Borrow.get_id _12}
          (fun (_ret':borrowed (Snapshot'0.t_snapshot bool)) ->
             [ &evil <- _ret' ] 
             [ &_12 <- { _12 with current = ( ^ evil) ; } ] 
            s3)
      | s3 = -{resolve'0 _12}- s4
      | s4 = {[@expl:assertion] [%#s8693] (evil = deref'0 bg) = (deref'1 ( ^ evil) = true)} s5
      | s5 =  [ &_15 <- [%#s8694] new'0 (if evil = deref'0 bg then false else true) ] s6
      | s6 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &evil <- { evil with current = _15 ; } ] 
        (any [ any_ (_any:Snapshot'0.t_snapshot bool)-> (!  [ &_15 <- _any ] s1) ] )
      | s1 = -{resolve'0 evil}- s2
      | s2 = -{resolve'0 xm}- s3
      | s3 = {[@expl:assertion] [%#s8695] deref'1 ( * evil) = (not deref'1 ( ^ evil))} s4
      | s4 = {[@expl:assertion] [%#s8696] deref'1 ( * evil) = (not deref'1 ( * evil))} s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : Snapshot'0.t_snapshot bool = any_l ()
    | & xm : borrowed (Snapshot'0.t_snapshot bool) = any_l ()
    | & _4 : borrowed (Snapshot'0.t_snapshot bool) = any_l ()
    | & b : borrowed (Snapshot'0.t_snapshot bool) = any_l ()
    | & _6 : borrowed (Snapshot'0.t_snapshot bool) = any_l ()
    | & bg : Snapshot'0.t_snapshot (borrowed (Snapshot'0.t_snapshot bool)) = any_l ()
    | & evil : borrowed (Snapshot'0.t_snapshot bool) = any_l ()
    | & _12 : borrowed (Snapshot'0.t_snapshot bool) = any_l ()
    | & _15 : Snapshot'0.t_snapshot bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
