module M_1204__evil [#"1204.rs" 7 0 7 22]
  let%span s12040 = "1204.rs" 5 11 5 16
  let%span s12041 = "1204.rs" 6 10 6 11
  let%span s12042 = "1204.rs" 8 4 8 16
  
  use prelude.prelude.Int
  
  constant x  : int
  
  function evil'0 [#"1204.rs" 7 0 7 22] (x : int) : int
  
  goal vc_evil'0 : ([%#s12040] false)
   -> ([@expl:evil requires] [%#s12040] false) /\ 0 <= ([%#s12041] x) /\ ([%#s12041] - x) < ([%#s12041] x)
end
module M_1204__wrong [#"1204.rs" 13 0 13 10]
  let%span s12040 = "1204.rs" 12 10 12 15
  let%span s12041 = "1204.rs" 5 11 5 16
  let%span s12042 = "1204.rs" 6 10 6 11
  let%span s12043 = "1204.rs" 14 4 14 43
  let%span s12044 = "1204.rs" 8 4 8 16
  
  use prelude.prelude.Int
  
  function evil'0 [#"1204.rs" 7 0 7 22] (x : int) : int
  
  axiom evil'0_def : forall x : int . ([%#s12041] false)  -> evil'0 x = ([%#s12044] evil'0 (- x) + 1)
  
  constant _1  : ()
  
  function wrong'0 [#"1204.rs" 13 0 13 10] (_1 : ()) : ()
  
  goal vc_wrong'0 : ([@expl:evil requires] [%#s12041] false)
  /\ ([@expl:evil requires] [%#s12041] false)
  /\ evil'0 1 = evil'0 (- 1) + 1
  && (let _ = () in let _ = () in ([@expl:evil requires] [%#s12041] false)
  /\ ([@expl:evil requires] [%#s12041] false) /\ evil'0 (- 1) = evil'0 1 + 1 && (let _ = () in [%#s12040] false))
end
