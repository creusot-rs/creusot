
module C695_InversedIf
  type c
  type b
  predicate resolve0 (self : c)
  val resolve0 (self : c) : bool
    ensures { result = resolve0 self }
    
  use prelude.Borrow
  predicate postcondition_mut0 (self : borrowed c) (_2 : ()) (_3 : bool)
  val postcondition_mut0 (self : borrowed c) (_2 : ()) (_3 : bool) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate inv6 (_x : borrowed c)
  val inv6 (_x : borrowed c) : bool
    ensures { result = inv6 _x }
    
  predicate postcondition_once1 (self : c) (_2 : ()) (_3 : bool)
  val postcondition_once1 (self : c) (_2 : ()) (_3 : bool) : bool
    ensures { result = postcondition_once1 self _2 _3 }
    
  predicate inv4 (_x : bool)
  val inv4 (_x : bool) : bool
    ensures { result = inv4 _x }
    
  predicate inv3 (_x : ())
  val inv3 (_x : ()) : bool
    ensures { result = inv3 _x }
    
  predicate inv0 (_x : c)
  val inv0 (_x : c) : bool
    ensures { result = inv0 _x }
    
  function fn_mut_once0 (self : c) (args : ()) (res : bool) : ()
  val fn_mut_once0 (self : c) (args : ()) (res : bool) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv3 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv4 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : c, args : (), res : bool . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv3 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv4 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once1 self args res = (exists s : borrowed c . inv6 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : c) (_2 : c)
  val unnest0 (self : c) (_2 : c) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : c) (b : c) (c : c) : ()
  val unnest_trans0 (self : c) (b : c) (c : c) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv0 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : c, b : c, c : c . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv0 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv0 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : c) : ()
  val unnest_refl0 (self : c) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv0 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : c . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed c) (args : ()) (res : bool) : ()
  val postcondition_mut_unnest0 (self : borrowed c) (args : ()) (res : bool) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv6 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv3 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv4 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed c, args : (), res : bool . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv6 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv3 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv4 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate invariant6 (self : borrowed c)
  val invariant6 (self : borrowed c) : bool
    ensures { result = invariant6 self }
    
  axiom inv6 : forall x : borrowed c . inv6 x = true
  predicate invariant5 (self : bool) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : bool) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : bool)
  val inv5 (_x : bool) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : bool . inv5 x = true
  predicate invariant4 (self : bool) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : bool) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : bool . inv4 x = true
  predicate invariant3 (self : ()) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : ()) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : () . inv3 x = true
  predicate invariant2 (self : c)
  val invariant2 (self : c) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : c)
  val inv2 (_x : c) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : c . inv2 x = true
  predicate postcondition0 (self : c) (_2 : ()) (_3 : bool)
  val postcondition0 (self : c) (_2 : ()) (_3 : bool) : bool
    ensures { result = postcondition0 self _2 _3 }
    
  function fn_once0 (self : c) (args : ()) (res : bool) : ()
  val fn_once0 (self : c) (args : ()) (res : bool) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv3 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv4 res}
    ensures { result = fn_once0 self args res }
    
  axiom fn_once0_spec : forall self : c, args : (), res : bool . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv3 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv4 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] postcondition_once1 self args res = (resolve0 self /\ postcondition0 self args res))
  predicate resolve1 (self : borrowed c) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed c) : bool
    ensures { result = resolve1 self }
    
  function fn_mut0 (self : borrowed c) (args : ()) (res : bool) : ()
  val fn_mut0 (self : borrowed c) (args : ()) (res : bool) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv6 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv3 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv4 res}
    ensures { result = fn_mut0 self args res }
    
  axiom fn_mut0_spec : forall self : borrowed c, args : (), res : bool . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv6 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv3 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv4 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] postcondition_mut0 self args res = (resolve1 self /\ postcondition0 ( * self) args res))
  predicate invariant1 (self : b)
  val invariant1 (self : b) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : b)
  val inv1 (_x : b) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : b . inv1 x = true
  predicate invariant0 (self : c)
  val invariant0 (self : c) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : c . inv0 x = true
  predicate postcondition_once0 (self : b) (_2 : bool) (_3 : ())
  val postcondition_once0 (self : b) (_2 : bool) (_3 : ()) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  predicate precondition1 (self : b) (_2 : bool)
  val precondition1 (self : b) (_2 : bool) : bool
    ensures { result = precondition1 self _2 }
    
  predicate precondition0 (self : c) (_2 : ())
  val precondition0 (self : c) (_2 : ()) : bool
    ensures { result = precondition0 self _2 }
    
  val call_once0 (self : b) (args : bool) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] precondition1 self args}
    requires {inv1 self}
    requires {inv5 args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition_once0 self args result }
    ensures { inv3 result }
    
  val call0 (self : c) (args : ()) : bool
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 166 27 166 52] precondition0 self args}
    requires {inv2 self}
    requires {inv3 args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition0 self args result }
    ensures { inv4 result }
    
  let rec cfg inversed_if [#"../695.rs" 6 0 6 78] [@cfg:stackify] [@cfg:subregion_analysis] (cond : c) (branch : b) : ()
    requires {[#"../695.rs" 4 0 4 79] precondition0 cond () /\ (forall b : bool . precondition1 branch (b))}
    requires {[#"../695.rs" 6 59 6 63] inv0 cond}
    requires {[#"../695.rs" 6 68 6 74] inv1 branch}
    ensures { [#"../695.rs" 5 0 5 91] exists b : bool . postcondition0 cond () b /\ postcondition_once0 branch (not b) () }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var cond : c = cond;
  var branch : b = branch;
  var _5 : bool;
  var _7 : ();
  var _9 : bool;
  var _11 : bool;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    [#"../695.rs" 7 8 7 14] _7 <- ();
    [#"../695.rs" 7 8 7 14] _5 <- ([#"../695.rs" 7 8 7 14] call0 cond _7);
    _7 <- any ();
    goto BB3
  }
  BB3 {
    switch (_5)
      | False -> goto BB5
      | True -> goto BB4
      end
  }
  BB4 {
    assert { [@expl:type invariant] inv0 cond };
    assume { resolve0 cond };
    [#"../695.rs" 10 8 10 21] _11 <- (([#"../695.rs" 10 15 10 20] false));
    [#"../695.rs" 10 8 10 21] _0 <- ([#"../695.rs" 10 8 10 21] call_once0 branch _11);
    branch <- any b;
    _11 <- any bool;
    goto BB7
  }
  BB5 {
    assert { [@expl:type invariant] inv0 cond };
    assume { resolve0 cond };
    [#"../695.rs" 8 8 8 20] _9 <- (([#"../695.rs" 8 15 8 19] true));
    [#"../695.rs" 8 8 8 20] _0 <- ([#"../695.rs" 8 8 8 20] call_once0 branch _9);
    branch <- any b;
    _9 <- any bool;
    goto BB6
  }
  BB6 {
    goto BB8
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module C695_Valid_Closure2_Type
  use prelude.Int16
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  type c695_valid_closure2  =
    | C695_Valid_Closure2 (borrowed uint32)
    
end
module C695_Valid_Closure2
  use prelude.Int16
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  use C695_Valid_Closure2_Type as C695_Valid_Closure2
  function field_00 [#"../695.rs" 19 17 19 64] (self : C695_Valid_Closure2.c695_valid_closure2) : borrowed uint32 =
    let C695_Valid_Closure2.C695_Valid_Closure2 a = self in a
  val field_00 [#"../695.rs" 19 17 19 64] (self : C695_Valid_Closure2.c695_valid_closure2) : borrowed uint32
    ensures { result = field_00 self }
    
  predicate unnest0 [#"../695.rs" 19 17 19 64] (self : C695_Valid_Closure2.c695_valid_closure2) (_2 : C695_Valid_Closure2.c695_valid_closure2)
    
   =
     ^ field_00 _2 =  ^ field_00 self
  predicate resolve0 (self : borrowed C695_Valid_Closure2.c695_valid_closure2) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed C695_Valid_Closure2.c695_valid_closure2) : bool
    ensures { result = resolve0 self }
    
  let rec cfg c695_Valid_Closure2 [#"../695.rs" 19 17 19 64] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed C695_Valid_Closure2.c695_valid_closure2) (b : bool) : ()
    ensures { [#"../695.rs" 19 27 19 62] b /\  * field_00 ( ^ _1) = (2 : uint32) \/ not b /\  * field_00 ( ^ _1) = (1 : uint32) }
    ensures { unnest0 ( * _1) ( ^ _1) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : borrowed C695_Valid_Closure2.c695_valid_closure2 = _1;
  var b : bool = b;
  var res : ();
  var _4 : uint32;
  {
    goto BB0
  }
  BB0 {
    switch (b)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    [#"../695.rs" 20 25 20 26] _4 <- ([#"../695.rs" 20 25 20 26] (2 : uint32));
    goto BB3
  }
  BB2 {
    [#"../695.rs" 20 36 20 37] _4 <- ([#"../695.rs" 20 36 20 37] (1 : uint32));
    goto BB3
  }
  BB3 {
    [#"../695.rs" 20 14 20 39] _1 <- { _1 with current = (let C695_Valid_Closure2.C695_Valid_Closure2 x0 =  * _1 in C695_Valid_Closure2.C695_Valid_Closure2 ({ (field_00 ( * _1)) with current = _4 ; })) ; };
    _4 <- any uint32;
    assume { resolve0 _1 };
    [#"../695.rs" 20 14 20 39] res <- ([#"../695.rs" 20 14 20 39] ());
    [#"../695.rs" 19 17 19 64] _0 <- res;
    return _0
  }
  
end
module C695_Valid_Closure1_Type
  use prelude.Int8
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  type c695_valid_closure1  =
    | C695_Valid_Closure1 uint32
    
end
module C695_Valid_Closure1
  use prelude.Int8
  use prelude.UInt32
  use C695_Valid_Closure1_Type as C695_Valid_Closure1
  use prelude.Borrow
  use prelude.Int
  function field_00 [#"../695.rs" 17 15 17 47] (self : C695_Valid_Closure1.c695_valid_closure1) : uint32 =
    let C695_Valid_Closure1.C695_Valid_Closure1 a = self in a
  val field_00 [#"../695.rs" 17 15 17 47] (self : C695_Valid_Closure1.c695_valid_closure1) : uint32
    ensures { result = field_00 self }
    
  let rec cfg c695_Valid_Closure1 [#"../695.rs" 17 15 17 47] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : C695_Valid_Closure1.c695_valid_closure1) : bool
    ensures { [#"../695.rs" 17 25 17 45] result = (field_00 _1 > (7 : uint32)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var _1 : C695_Valid_Closure1.c695_valid_closure1 = _1;
  var res : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../695.rs" 18 7 18 15] res <- field_00 _1 > ([#"../695.rs" 18 11 18 15] (7 : uint32));
    [#"../695.rs" 17 15 17 47] _0 <- res;
    return _0
  }
  
end
module C695_Valid
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Int16
  use C695_Valid_Closure2_Type as C695_Valid_Closure2
  predicate invariant1 (self : C695_Valid_Closure2.c695_valid_closure2) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : C695_Valid_Closure2.c695_valid_closure2) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : C695_Valid_Closure2.c695_valid_closure2)
  val inv1 (_x : C695_Valid_Closure2.c695_valid_closure2) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : C695_Valid_Closure2.c695_valid_closure2 . inv1 x = true
  use prelude.Int8
  use C695_Valid_Closure1_Type as C695_Valid_Closure1
  predicate invariant0 (self : C695_Valid_Closure1.c695_valid_closure1) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : C695_Valid_Closure1.c695_valid_closure1) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C695_Valid_Closure1.c695_valid_closure1)
  val inv0 (_x : C695_Valid_Closure1.c695_valid_closure1) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C695_Valid_Closure1.c695_valid_closure1 . inv0 x = true
  use prelude.Int
  function field_01 [#"../695.rs" 19 17 19 64] (self : C695_Valid_Closure2.c695_valid_closure2) : borrowed uint32 =
    let C695_Valid_Closure2.C695_Valid_Closure2 a = self in a
  val field_01 [#"../695.rs" 19 17 19 64] (self : C695_Valid_Closure2.c695_valid_closure2) : borrowed uint32
    ensures { result = field_01 self }
    
  predicate postcondition_once0 [#"../695.rs" 19 17 19 64] (self : C695_Valid_Closure2.c695_valid_closure2) (args : bool) (result : ())
    
   =
    [#"../695.rs" 19 27 19 62] let (b) = args in b /\  ^ field_01 self = (2 : uint32) \/ not b /\  ^ field_01 self = (1 : uint32)
  function field_00 [#"../695.rs" 17 15 17 47] (self : C695_Valid_Closure1.c695_valid_closure1) : uint32 =
    let C695_Valid_Closure1.C695_Valid_Closure1 a = self in a
  val field_00 [#"../695.rs" 17 15 17 47] (self : C695_Valid_Closure1.c695_valid_closure1) : uint32
    ensures { result = field_00 self }
    
  predicate postcondition0 [#"../695.rs" 17 15 17 47] (self : C695_Valid_Closure1.c695_valid_closure1) (_ : ()) (result : bool)
    
   =
    [#"../695.rs" 17 25 17 45] result = (field_00 self > (7 : uint32))
  predicate precondition1 [#"../695.rs" 19 17 19 64] (self : C695_Valid_Closure2.c695_valid_closure2) (args : bool) =
    let (b) = args in true
  predicate precondition0 [#"../695.rs" 17 15 17 47] (self : C695_Valid_Closure1.c695_valid_closure1) (_ : ()) =
    true
  val inversed_if0 [#"../695.rs" 6 0 6 78] (cond : C695_Valid_Closure1.c695_valid_closure1) (branch : C695_Valid_Closure2.c695_valid_closure2) : ()
    requires {[#"../695.rs" 4 0 4 79] precondition0 cond () /\ (forall b : bool . precondition1 branch (b))}
    requires {[#"../695.rs" 6 59 6 63] inv0 cond}
    requires {[#"../695.rs" 6 68 6 74] inv1 branch}
    ensures { [#"../695.rs" 5 0 5 91] exists b : bool . postcondition0 cond () b /\ postcondition_once0 branch (not b) () }
    
  predicate resolve0 [#"../695.rs" 17 15 17 47] (_1 : C695_Valid_Closure1.c695_valid_closure1) =
    true
  let rec cfg valid [#"../695.rs" 15 0 15 27] [@cfg:stackify] [@cfg:subregion_analysis] (n : uint32) : uint32
    ensures { [#"../695.rs" 14 10 14 71] n > (7 : uint32) /\ result = (2 : uint32) \/ n <= (7 : uint32) /\ result = (1 : uint32) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var n : uint32 = n;
  var r : uint32;
  var cond : C695_Valid_Closure1.c695_valid_closure1;
  var branch : C695_Valid_Closure2.c695_valid_closure2;
  var _7 : borrowed uint32;
  var _8 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../695.rs" 16 16 16 20] r <- ([#"../695.rs" 16 16 16 20] (0 : uint32));
    [#"../695.rs" 17 15 17 47] cond <- C695_Valid_Closure1.C695_Valid_Closure1 n;
    [#"../695.rs" 19 17 19 64] _7 <- Borrow.borrow_mut r;
    [#"../695.rs" 19 17 19 64] r <-  ^ _7;
    [#"../695.rs" 19 17 19 64] branch <- C695_Valid_Closure2.C695_Valid_Closure2 _7;
    _7 <- any borrowed uint32;
    assume { resolve0 cond };
    [#"../695.rs" 21 4 21 29] _8 <- ([#"../695.rs" 21 4 21 29] inversed_if0 cond branch);
    branch <- any C695_Valid_Closure2.c695_valid_closure2;
    goto BB1
  }
  BB1 {
    assert { [@expl:assertion] [#"../695.rs" 22 20 22 25] false };
    [#"../695.rs" 23 4 23 5] _0 <- r;
    return _0
  }
  
end
