
module M_692__incorrect
  type c
  
  type b
  
  let%span s6920 = "../692.rs" 5 0 6 87
  
  let%span s6921 = "../692.rs" 8 57 8 61
  
  let%span s6922 = "../692.rs" 8 66 8 72
  
  let%span s6923 = "../692.rs" 7 10 7 15
  
  let%span span4 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101
  
  let%span span12 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100
  
  predicate resolve'1 (self : c)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed c) (_2 : ()) (_3 : bool)
  
  predicate postcondition_once'0 (self : c) (_2 : ()) (_3 : bool)
  
  function fn_mut_once'0 (self : c) (args : ()) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : c, args : (), res : bool . [%#span4] postcondition_once'0 self args res
  = (exists s : borrowed c . s.current = self /\ postcondition_mut'0 s args res /\ resolve'1 s.final)
  
  predicate unnest'0 (self : c) (_2 : c)
  
  function unnest_trans'0 (self : c) (b : c) (c : c) : ()
  
  axiom unnest_trans'0_spec : forall self : c, b : c, c : c . ([%#span5] unnest'0 self b)
   -> ([%#span6] unnest'0 b c)  -> ([%#span7] unnest'0 self c)
  
  function unnest_refl'0 (self : c) : ()
  
  axiom unnest_refl'0_spec : forall self : c . [%#span8] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed c) (args : ()) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed c, args : (), res : bool . ([%#span9] postcondition_mut'0 self args res)
   -> ([%#span10] unnest'0 self.current self.final)
  
  predicate postcondition'0 (self : c) (_2 : ()) (_3 : bool)
  
  function fn_once'0 (self : c) (args : ()) (res : bool) : ()
  
  axiom fn_once'0_spec : forall self : c, args : (), res : bool . [%#span11] postcondition_once'0 self args res
  = (resolve'1 self /\ postcondition'0 self args res)
  
  predicate resolve'2 (self : borrowed c) =
    [%#span12] self.final = self.current
  
  function fn_mut'0 (self : borrowed c) (args : ()) (res : bool) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed c, args : (), res : bool . [%#span13] postcondition_mut'0 self args res
  = (resolve'2 self /\ postcondition'0 self.current args res)
  
  predicate invariant'1 (self : c)
  
  predicate inv'1 (_1 : c)
  
  axiom inv'1 : forall x : c . inv'1 x = true
  
  predicate invariant'0 (self : b)
  
  predicate inv'0 (_1 : b)
  
  axiom inv'0 : forall x : b . inv'0 x = true
  
  predicate precondition'1 (self : b) (_2 : bool)
  
  predicate precondition'0 (self : c) (_2 : ())
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : b)
  
  let rec incorrect (cond:c) (branch:b) (return'  (ret:()))= {[%#s6922] inv'0 branch}
    {[%#s6921] inv'1 cond}
    {[%#s6920] precondition'0 cond ()
    /\ (forall b : bool . precondition'1 branch (b)
    /\ (exists b : bool . forall b0 : bool . postcondition'0 cond () b0  -> b0 = b))}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 branch} s1
      | s1 = -{resolve'0 branch}- s2
      | s2 = {[@expl:type invariant] inv'1 cond} s3
      | s3 = -{resolve'1 cond}- s4
      | s4 = bb1 ]
      
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : () = any_l () | & cond : c = cond | & branch : b = branch ] 
    [ return' (result:())-> {[@expl:postcondition] [%#s6923] false} (! return' {result}) ]
    
end
module M_692__valid_normal__qy123zclosureqy35z1qy125z_Type
  use prelude.prelude.Int8
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_692__valid_normal__qy123zclosureqy35z1qy125z  =
    | M_692__valid_normal__qy123zclosureqy35z1qy125z uint32
  
  let rec m_692__valid_normal__qy123zclosureqy35z1qy125z (input:m_692__valid_normal__qy123zclosureqy35z1qy125z) (ret  (n:uint32))= any
    [ good (n:uint32)-> {M_692__valid_normal__qy123zclosureqy35z1qy125z n = input} (! ret {n})
    | bad (n:uint32)-> {M_692__valid_normal__qy123zclosureqy35z1qy125z n <> input} {false} any ]
    
end
module M_692__valid_normal__qy123zclosureqy35z1qy125z
  let%span s6920 = "../692.rs" 14 11 14 15
  
  let%span s6921 = "../692.rs" 13 25 13 45
  
  use prelude.prelude.Int8
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  use M_692__valid_normal__qy123zclosureqy35z1qy125z_Type as Closure'0
  
  function field_0'0 [#"../692.rs" 13 15 13 47] (self : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z) : uint32
    
   =
    let Closure'0.M_692__valid_normal__qy123zclosureqy35z1qy125z a = self in a
  
  use prelude.prelude.Intrinsic
  
  let rec m_692__valid_normal__qy123zclosureqy35z1qy125z (_1:Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:uint32) -> UInt32.gt {r'0} {[%#s6920] (7 : uint32)} (fun (_ret':bool) ->  [ &res <- _ret' ] s1))
      | s1 =  [ &_0 <- res ] s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : bool = any_l ()
    | & _1 : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z = _1
    | & res : bool = any_l () ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [%#s6921] result = (field_0'0 _1 > (7 : uint32))}
      (! return' {result}) ]
    
end
module M_692__valid_normal__qy123zclosureqy35z2qy125z_Type
  use prelude.prelude.Int16
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_692__valid_normal__qy123zclosureqy35z2qy125z  =
    | M_692__valid_normal__qy123zclosureqy35z2qy125z (borrowed uint32)
  
  let rec m_692__valid_normal__qy123zclosureqy35z2qy125z (input:m_692__valid_normal__qy123zclosureqy35z2qy125z) (ret  (r:borrowed uint32))= any
    [ good (r:borrowed uint32)-> {M_692__valid_normal__qy123zclosureqy35z2qy125z r = input} (! ret {r})
    | bad (r:borrowed uint32)-> {M_692__valid_normal__qy123zclosureqy35z2qy125z r <> input} {false} any ]
    
end
module M_692__valid_normal__qy123zclosureqy35z2qy125z
  let%span s6920 = "../692.rs" 16 25 16 26
  
  let%span s6921 = "../692.rs" 16 36 16 37
  
  let%span s6922 = "../692.rs" 15 27 15 62
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int16
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  use M_692__valid_normal__qy123zclosureqy35z2qy125z_Type as Closure'0
  
  function field_0'0 [#"../692.rs" 15 17 15 64] (self : Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z) : borrowed uint32
    
   =
    let Closure'0.M_692__valid_normal__qy123zclosureqy35z2qy125z a = self in a
  
  predicate unnest'0 [#"../692.rs" 15 17 15 64] (self : Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z) (_2 : Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z)
    
   =
    (field_0'0 _2).final = (field_0'0 self).final
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z) =
    [%#span3] self.final = self.current
  
  let rec m_692__valid_normal__qy123zclosureqy35z2qy125z (_1:borrowed Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z) (b:bool) (return'  (ret:()))= (! bb0
    [ bb0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ] 
    | bb1 = s0 [ s0 =  [ &_4 <- [%#s6920] (2 : uint32) ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_4 <- [%#s6921] (1 : uint32) ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z {_1.current}
          (fun (l'0:borrowed uint32) ->
            
            [ &_1 <- { _1 with current = Closure'0.M_692__valid_normal__qy123zclosureqy35z2qy125z ({ l'0 with current = _4 ; }) ; } ]
            
            s1)
      | s1 = -{resolve'0 _1}- s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & _1 : borrowed Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z = _1
    | & b : bool = b
    | & _4 : uint32 = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s6922] b /\ (field_0'0 _1.final).current = (2 : uint32)
      \/ not b /\ (field_0'0 _1.final).current = (1 : uint32)}
      (! return' {result}) ]
    
end
module M_692__valid_normal
  let%span s6920 = "../692.rs" 12 16 12 20
  
  let%span s6921 = "../692.rs" 10 10 10 15
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../692.rs" 13 25 13 45
  
  let%span span4 = "../692.rs" 5 0 6 87
  
  let%span span5 = "../692.rs" 8 57 8 61
  
  let%span span6 = "../692.rs" 8 66 8 72
  
  let%span span7 = "../692.rs" 7 10 7 15
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int16
  
  use M_692__valid_normal__qy123zclosureqy35z2qy125z_Type as Closure'1
  
  predicate invariant'1 (self : Closure'1.m_692__valid_normal__qy123zclosureqy35z2qy125z) =
    [%#span2] true
  
  predicate inv'1 (_1 : Closure'1.m_692__valid_normal__qy123zclosureqy35z2qy125z)
  
  axiom inv'1 : forall x : Closure'1.m_692__valid_normal__qy123zclosureqy35z2qy125z . inv'1 x = true
  
  use prelude.prelude.Int8
  
  use M_692__valid_normal__qy123zclosureqy35z1qy125z_Type as Closure'0
  
  predicate invariant'0 (self : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z) =
    [%#span2] true
  
  predicate inv'0 (_1 : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z)
  
  axiom inv'0 : forall x : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  function field_0'0 [#"../692.rs" 13 15 13 47] (self : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z) : uint32
    
   =
    let Closure'0.M_692__valid_normal__qy123zclosureqy35z1qy125z a = self in a
  
  predicate postcondition'0 [#"../692.rs" 13 15 13 47] (self : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z) (_ : ()) (result : bool)
    
   =
    [%#span3] result = (field_0'0 self > (7 : uint32))
  
  predicate precondition'1 [#"../692.rs" 15 17 15 64] (self : Closure'1.m_692__valid_normal__qy123zclosureqy35z2qy125z) (args : bool)
    
   =
    let (b) = args in true
  
  predicate precondition'0 [#"../692.rs" 13 15 13 47] (self : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z) (_ : ())
    
   =
    true
  
  let rec incorrect'0 (cond:Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z) (branch:Closure'1.m_692__valid_normal__qy123zclosureqy35z2qy125z) (return'  (ret:()))= {[@expl:precondition] [%#span6] inv'1 branch}
    {[@expl:precondition] [%#span5] inv'0 cond}
    {[@expl:precondition] [%#span4] precondition'0 cond ()
    /\ (forall b : bool . precondition'1 branch (b)
    /\ (exists b : bool . forall b0 : bool . postcondition'0 cond () b0  -> b0 = b))}
    any [ return' (result:())-> {[%#span7] false} (! return' {result}) ] 
  
  let rec valid_normal (n:uint32) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#s6920] (0 : uint32) ] s1
      | s1 =  [ &cond <- Closure'0.M_692__valid_normal__qy123zclosureqy35z1qy125z n ] s2
      | s2 = Borrow.borrow_mut <uint32> {r} (fun (_ret':borrowed uint32) ->  [ &_7 <- _ret' ]  [ &r <- _7.final ] s3)
      | s3 =  [ &branch <- Closure'1.M_692__valid_normal__qy123zclosureqy35z2qy125z _7 ] s4
      | s4 = incorrect'0 {cond} {branch} (fun (_ret':()) ->  [ &_8 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- r ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l ()
    | & n : uint32 = n
    | & r : uint32 = any_l ()
    | & cond : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z = any_l ()
    | & branch : Closure'1.m_692__valid_normal__qy123zclosureqy35z2qy125z = any_l ()
    | & _7 : borrowed uint32 = any_l ()
    | & _8 : () = any_l () ]
     [ return' (result:uint32)-> {[@expl:postcondition] [%#s6921] false} (! return' {result}) ] 
end
