module M_692__incorrect [#"692.rs" 8 0 8 76]
  let%span s6920 = "692.rs" 8 57 8 61
  let%span s6921 = "692.rs" 8 66 8 72
  let%span s6922 = "692.rs" 5 11 6 84
  let%span s6923 = "692.rs" 7 10 7 15
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 143 14 143 114
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 148 14 148 101
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  
  type t_B'0
  
  predicate inv'0 (_1 : t_B'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_B'0)
  
  type t_C'0
  
  predicate inv'1 (_1 : t_C'0)
  
  predicate resolve'1 (_1 : t_C'0)
  
  use prelude.prelude.Intrinsic
  
  predicate precondition'0 (self : t_C'0) (args : ())
  
  predicate precondition'1 (self : t_B'0) (args : bool)
  
  predicate postcondition_once'0 (self : t_C'0) (args : ()) (result : bool)
  
  predicate postcondition_mut'0 (self : t_C'0) (args : ()) (result_state : t_C'0) (result : bool)
  
  function fn_mut_once'0 (self : t_C'0) (args : ()) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_C'0, args : (), res : bool . [%#sops12] postcondition_once'0 self args res
  = (exists res_state : t_C'0 . postcondition_mut'0 self args res_state res /\ resolve'1 res_state)
  
  predicate unnest'0 (self : t_C'0) (_2 : t_C'0)
  
  function unnest_trans'0 (self : t_C'0) (b : t_C'0) (c : t_C'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_C'0, b : t_C'0, c : t_C'0 . ([%#sops9] unnest'0 self b)
   -> ([%#sops10] unnest'0 b c)  -> ([%#sops11] unnest'0 self c)
  
  function unnest_refl'0 (self : t_C'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_C'0 . [%#sops8] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_C'0) (args : ()) (res_state : t_C'0) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_C'0, args : (), res_state : t_C'0, res : bool . ([%#sops6] postcondition_mut'0 self args res_state res)
   -> ([%#sops7] unnest'0 self res_state)
  
  predicate postcondition'0 (self : t_C'0) (args : ()) (result : bool)
  
  function fn_once'0 (self : t_C'0) (args : ()) (res : bool) : ()
  
  axiom fn_once'0_spec : forall self : t_C'0, args : (), res : bool . [%#sops5] postcondition_once'0 self args res
  = (resolve'1 self /\ postcondition'0 self args res)
  
  function fn_mut'0 (self : t_C'0) (args : ()) (res_state : t_C'0) (res : bool) : ()
  
  axiom fn_mut'0_spec : forall self : t_C'0, args : (), res_state : t_C'0, res : bool . [%#sops4] postcondition_mut'0 self args res_state res
  = (self = res_state /\ postcondition'0 self args res)
  
  meta "compute_max_steps" 1000000
  
  let rec incorrect'0 (cond:t_C'0) (branch:t_B'0) (return'  (ret:()))= {[@expl:incorrect 'cond' type invariant] [%#s6920] inv'1 cond}
    {[@expl:incorrect 'branch' type invariant] [%#s6921] inv'0 branch}
    {[@expl:incorrect requires] [%#s6922] precondition'0 cond ()
    /\ (forall b : bool . precondition'1 branch (b)
    /\ (exists b : bool . forall b0 : bool . postcondition'0 cond () b0  -> b0 = b))}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 branch} s1
      | s1 = -{resolve'0 branch}- s2
      | s2 = {[@expl:type invariant] inv'1 cond} s3
      | s3 = -{resolve'1 cond}- s4
      | s4 = bb1 ]
      
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : () = any_l () | & cond : t_C'0 = cond | & branch : t_B'0 = branch ] 
    [ return' (result:())-> {[@expl:incorrect ensures] [%#s6923] false} (! return' {result}) ]
    
end
module M_692__valid_normal [#"692.rs" 11 0 11 34]
  let%span s6920 = "692.rs" 12 16 12 20
  let%span s6921 = "692.rs" 10 10 10 15
  let%span s6922 = "692.rs" 14 11 14 15
  let%span s6923 = "692.rs" 13 25 13 45
  let%span s6924 = "692.rs" 16 25 16 26
  let%span s6925 = "692.rs" 16 36 16 37
  let%span s6926 = "692.rs" 15 27 15 62
  let%span s6927 = "692.rs" 8 57 8 61
  let%span s6928 = "692.rs" 8 66 8 72
  let%span s6929 = "692.rs" 5 11 6 84
  let%span s69210 = "692.rs" 7 10 7 15
  let%span sresolve11 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span sops19 = "../../../../creusot-contracts/src/std/ops.rs" 143 14 143 114
  let%span sops20 = "../../../../creusot-contracts/src/std/ops.rs" 148 14 148 101
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  type closure1'1  =
    { field_0'0: uint32 }
  
  use prelude.prelude.Int
  
  let rec closure1'0 (_1:closure1'1) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = UInt32.gt {_1.field_0'0} {[%#s6922] (7 : uint32)} (fun (_ret':bool) ->  [ &res <- _ret' ] s1)
      | s1 =  [ &_0 <- res ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () | & _1 : closure1'1 = _1 | & res : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:closure ensures] [%#s6923] result = (_1.field_0'0 > (7 : uint32))}
      (! return' {result}) ]
    
  
  type closure2'1  =
    { field_0'1: borrowed uint32 }
  
  predicate resolve'1 (self : borrowed closure2'1) =
    [%#sresolve11] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed closure2'1) =
    resolve'1 _1
  
  predicate postcondition_once'0 (self : closure2'1) (args : bool) (result : ()) =
    [%#s6926] let (b) = args in b /\ (self.field_0'1).final = (2 : uint32)
    \/ not b /\ (self.field_0'1).final = (1 : uint32)
  
  predicate resolve'5 (self : borrowed uint32) =
    [%#sresolve11] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed uint32) =
    resolve'5 _1
  
  predicate resolve'2 (_1 : closure2'1) =
    resolve'4 _1.field_0'1
  
  predicate unnest'0 (self : closure2'1) (_2 : closure2'1) =
    (_2.field_0'1).final = (self.field_0'1).final
  
  predicate postcondition_mut'0 (self : closure2'1) (args : bool) (result_state : closure2'1) (result : ()) =
    (let (b) = args in b /\ (result_state.field_0'1).current = (2 : uint32)
    \/ not b /\ (result_state.field_0'1).current = (1 : uint32))
    /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : closure2'1) (args : bool) (res : ()) : ()
  
  axiom fn_mut_once'0_spec : forall self : closure2'1, args : bool, res : () . [%#sops18] postcondition_once'0 self args res
  = (exists res_state : closure2'1 . postcondition_mut'0 self args res_state res /\ resolve'2 res_state)
  
  function unnest_trans'0 (self : closure2'1) (b : closure2'1) (c : closure2'1) : ()
  
  axiom unnest_trans'0_spec : forall self : closure2'1, b : closure2'1, c : closure2'1 . ([%#sops15] unnest'0 self b)
   -> ([%#sops16] unnest'0 b c)  -> ([%#sops17] unnest'0 self c)
  
  function unnest_refl'0 (self : closure2'1) : ()
  
  axiom unnest_refl'0_spec : forall self : closure2'1 . [%#sops14] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : closure2'1) (args : bool) (res_state : closure2'1) (res : ()) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : closure2'1, args : bool, res_state : closure2'1, res : () . ([%#sops12] postcondition_mut'0 self args res_state res)
   -> ([%#sops13] unnest'0 self res_state)
  
  let rec closure2'0 (_1:borrowed closure2'1) (b:bool) (return'  (ret:()))= (! bb0
    [ bb0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ] 
    | bb1 = s0 [ s0 =  [ &_4 <- [%#s6924] (2 : uint32) ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_4 <- [%#s6925] (1 : uint32) ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_1 <- { _1 with current = { field_0'1 = { (_1.current).field_0'1 with current = _4 } } } ] s1
      | s1 = -{resolve'0 _1}- s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & _1 : borrowed closure2'1 = _1 | & b : bool = b | & _4 : uint32 = any_l () ] 
    [ return' (result:())-> {[@expl:closure ensures] [%#s6926] b /\ ((_1.final).field_0'1).current = (2 : uint32)
      \/ not b /\ ((_1.final).field_0'1).current = (1 : uint32)}
      {[@expl:closure unnest] unnest'0 _1.current _1.final}
      (! return' {result}) ]
    
  
  predicate inv'0 (_1 : closure1'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : closure1'1 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : closure2'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : closure2'1 [inv'1 x] . inv'1 x = true
  
  predicate precondition'0 (self : closure1'1) (args : ()) =
    let () = args in true
  
  predicate precondition'1 (self : closure2'1) (args : bool) =
    let (b) = args in true
  
  predicate postcondition_once'1 (self : closure1'1) (args : ()) (result : bool) =
    [%#s6923] let () = args in result = (self.field_0'0 > (7 : uint32))
  
  predicate resolve'3 (_1 : closure1'1) =
    true
  
  predicate unnest'1 (self : closure1'1) (_2 : closure1'1) =
    _2.field_0'0 = self.field_0'0
  
  predicate postcondition_mut'1 (self : closure1'1) (args : ()) (result_state : closure1'1) (result : bool) =
    (let () = args in result = (result_state.field_0'0 > (7 : uint32))) /\ unnest'1 self result_state
  
  function fn_mut_once'1 (self : closure1'1) (args : ()) (res : bool) : ()
  
  axiom fn_mut_once'1_spec : forall self : closure1'1, args : (), res : bool . [%#sops18] postcondition_once'1 self args res
  = (exists res_state : closure1'1 . postcondition_mut'1 self args res_state res /\ resolve'3 res_state)
  
  function unnest_trans'1 (self : closure1'1) (b : closure1'1) (c : closure1'1) : ()
  
  axiom unnest_trans'1_spec : forall self : closure1'1, b : closure1'1, c : closure1'1 . ([%#sops15] unnest'1 self b)
   -> ([%#sops16] unnest'1 b c)  -> ([%#sops17] unnest'1 self c)
  
  function unnest_refl'1 (self : closure1'1) : ()
  
  axiom unnest_refl'1_spec : forall self : closure1'1 . [%#sops14] unnest'1 self self
  
  function postcondition_mut_unnest'1 (self : closure1'1) (args : ()) (res_state : closure1'1) (res : bool) : ()
  
  axiom postcondition_mut_unnest'1_spec : forall self : closure1'1, args : (), res_state : closure1'1, res : bool . ([%#sops12] postcondition_mut'1 self args res_state res)
   -> ([%#sops13] unnest'1 self res_state)
  
  predicate postcondition'0 (self : closure1'1) (args : ()) (result : bool) =
    [%#s6923] let () = args in result = (self.field_0'0 > (7 : uint32))
  
  function fn_once'0 (self : closure1'1) (args : ()) (res : bool) : ()
  
  axiom fn_once'0_spec : forall self : closure1'1, args : (), res : bool . [%#sops20] postcondition_once'1 self args res
  = (resolve'3 self /\ postcondition'0 self args res)
  
  function fn_mut'0 (self : closure1'1) (args : ()) (res_state : closure1'1) (res : bool) : ()
  
  axiom fn_mut'0_spec : forall self : closure1'1, args : (), res_state : closure1'1, res : bool . [%#sops19] postcondition_mut'1 self args res_state res
  = (self = res_state /\ postcondition'0 self args res)
  
  let rec incorrect'0 (cond:closure1'1) (branch:closure2'1) (return'  (ret:()))= {[@expl:incorrect 'cond' type invariant] [%#s6927] inv'0 cond}
    {[@expl:incorrect 'branch' type invariant] [%#s6928] inv'1 branch}
    {[@expl:incorrect requires] [%#s6929] precondition'0 cond ()
    /\ (forall b : bool . precondition'1 branch (b)
    /\ (exists b : bool . forall b0 : bool . postcondition'0 cond () b0  -> b0 = b))}
    any [ return' (result:())-> {[%#s69210] false} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec valid_normal'0 (n:uint32) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#s6920] (0 : uint32) ] s1
      | s1 =  [ &cond <- { field_0'0 = n } ] s2
      | s2 = Borrow.borrow_mut <uint32> {r} (fun (_ret':borrowed uint32) ->  [ &_7 <- _ret' ]  [ &r <- _ret'.final ] s3)
      | s3 =  [ &branch <- { field_0'1 = _7 } ] s4
      | s4 = incorrect'0 {cond} {branch} (fun (_ret':()) ->  [ &_8 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- r ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l ()
    | & n : uint32 = n
    | & r : uint32 = any_l ()
    | & cond : closure1'1 = any_l ()
    | & branch : closure2'1 = any_l ()
    | & _7 : borrowed uint32 = any_l ()
    | & _8 : () = any_l () ]
     [ return' (result:uint32)-> {[@expl:valid_normal ensures] [%#s6921] false} (! return' {result}) ] 
end
