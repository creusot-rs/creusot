
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Specialize_F
  let%span sspecialize0 = "../specialize.rs" 24 20 24 25
  
  let%span span1 = "../specialize.rs" 17 14 17 18
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.Intrinsic
  
  let rec x'0 (self:Vec'0.t_vec uint32 (Global'0.t_global)) (return'  (ret:()))= any
    [ return' (result:())-> {[%#span1] true} (! return' {result}) ]
    
  
  let rec f (v:Vec'0.t_vec uint32 (Global'0.t_global)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = x'0 {v} (fun (_ret':()) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sspecialize0] false} s1 | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & v : Vec'0.t_vec uint32 (Global'0.t_global) = v | & _2 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module Specialize_G
  type t
  
  let%span sspecialize0 = "../specialize.rs" 31 20 31 25
  
  let%span sspecialize1 = "../specialize.rs" 27 8 27 9
  
  let%span span2 = "" 0 0 0 0
  
  let%span span3 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span4 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span5 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span6 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span7 = "../specialize.rs" 6 9 6 13
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t)
  
  predicate inv'1 (_x : Seq.seq t)
  
  axiom inv'1 : forall x : Seq.seq t . inv'1 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span2] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'0 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span3] inv'0 self)
   -> ([%#span5] inv'1 (shallow_model'0 self))
  && ([%#span4] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span6] inv'1 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  let rec x'0 (self:Vec'0.t_vec t (Global'0.t_global)) (return'  (ret:()))= {[@expl:precondition] [%#span7] inv'0 self}
    any [ return' (result:())-> (! return' {result}) ] 
  
  let rec g (v:Vec'0.t_vec t (Global'0.t_global)) (return'  (ret:()))= {[%#sspecialize1] inv'0 v}
    (! bb0
    [ bb0 = s0 [ s0 = x'0 {v} (fun (_ret':()) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sspecialize0] false} s1 | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & v : Vec'0.t_vec t (Global'0.t_global) = v | & _2 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module Specialize_H
  let%span sspecialize0 = "../specialize.rs" 37 20 37 25
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "" 0 0 0 0
  
  let%span span3 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span4 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span5 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span6 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span7 = "../specialize.rs" 12 17 12 21
  
  let%span span8 = "../specialize.rs" 11 14 11 19
  
  use prelude.prelude.Int32
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq int32) =
    [%#span1] true
  
  predicate inv'1 (_x : Seq.seq int32)
  
  axiom inv'1 : forall x : Seq.seq int32 . inv'1 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span2] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'0 (_x : Vec'0.t_vec int32 (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec int32 (Global'0.t_global)) : Seq.seq int32
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec int32 (Global'0.t_global) . ([%#span3] inv'0 self)
   -> ([%#span5] inv'1 (shallow_model'0 self))
  && ([%#span4] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span6] inv'1 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec int32 (Global'0.t_global) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  let rec x'0 (self:Vec'0.t_vec int32 (Global'0.t_global)) (return'  (ret:()))= {[@expl:precondition] [%#span7] inv'0 self}
    any [ return' (result:())-> {[%#span8] false} (! return' {result}) ] 
  
  let rec h (v:Vec'0.t_vec int32 (Global'0.t_global)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = x'0 {v} (fun (_ret':()) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sspecialize0] false} s1 | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & v : Vec'0.t_vec int32 (Global'0.t_global) = v | & _2 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module Specialize_Impl0
  type u
  
  let%span sspecialize0 = "../specialize.rs" 12 4 12 22
  
  let%span span1 = "" 0 0 0 0
  
  let%span span2 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span3 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span4 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span5 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq u)
  
  predicate inv'1 (_x : Seq.seq u)
  
  axiom inv'1 : forall x : Seq.seq u . inv'1 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span1] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'0 (_x : Vec'0.t_vec u (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec u (Global'0.t_global)) : Seq.seq u
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec u (Global'0.t_global) . ([%#span2] inv'0 self)
   -> ([%#span4] inv'1 (shallow_model'0 self))
  && ([%#span3] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec u (Global'0.t_global)) =
    [%#span5] inv'1 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec u (Global'0.t_global) . inv'0 x = true
  
  goal x_refn : [%#sspecialize0] forall self : Vec'0.t_vec u (Global'0.t_global) . inv'0 self  -> inv'0 self
end
module Specialize_Impl1
  let%span sspecialize0 = "../specialize.rs" 18 4 18 14
  
  goal x_refn : [%#sspecialize0] true
end
