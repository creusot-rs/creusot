module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_01_resolve_unsoundness__make_vec_of_size [#"01_resolve_unsoundness.rs" 9 0 9 46]
  let%span s01_resolve_unsoundness0 = "01_resolve_unsoundness.rs" 10 29 10 39
  let%span s01_resolve_unsoundness1 = "01_resolve_unsoundness.rs" 11 16 11 17
  let%span s01_resolve_unsoundness2 = "01_resolve_unsoundness.rs" 12 16 12 37
  let%span s01_resolve_unsoundness3 = "01_resolve_unsoundness.rs" 14 17 14 22
  let%span s01_resolve_unsoundness4 = "01_resolve_unsoundness.rs" 15 13 15 14
  let%span s01_resolve_unsoundness5 = "01_resolve_unsoundness.rs" 8 10 8 29
  let%span svec6 = "../../../../creusot-contracts/src/std/vec.rs" 77 26 77 44
  let%span svec7 = "../../../../creusot-contracts/src/std/vec.rs" 90 26 90 51
  let%span svec8 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span smodel9 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  
  predicate inv'2 (_1 : bool)
  
  axiom inv_axiom'2 [@rewrite] : forall x : bool [inv'2 x] . inv'2 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.Borrow
  
  predicate inv'1 (_1 : borrowed (Vec'0.t_Vec bool (Global'0.t_Global)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Vec'0.t_Vec bool (Global'0.t_Global)) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : Vec'0.t_Vec bool (Global'0.t_Global))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec bool (Global'0.t_Global) [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'0 (self : Vec'0.t_Vec bool (Global'0.t_Global)) : Seq.seq bool
  
  axiom view'0_spec : forall self : Vec'0.t_Vec bool (Global'0.t_Global) . [%#svec8] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  function view'1 (self : borrowed (Vec'0.t_Vec bool (Global'0.t_Global))) : Seq.seq bool =
    [%#smodel9] view'0 self.current
  
  let rec push'0 (self:borrowed (Vec'0.t_Vec bool (Global'0.t_Global))) (value:bool) (return'  (ret:()))= {[@expl:precondition] inv'2 value}
    {[@expl:precondition] inv'1 self}
    any [ return' (result:())-> {[%#svec7] view'0 self.final = Seq.snoc (view'1 self) value} (! return' {result}) ] 
  
  let rec new'0 (_1:()) (return'  (ret:Vec'0.t_Vec bool (Global'0.t_Global)))= any
    [ return' (result:Vec'0.t_Vec bool (Global'0.t_Global))-> {inv'0 result}
      {[%#svec6] Seq.length (view'0 result) = 0}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec make_vec_of_size (n:usize) (return'  (ret:Vec'0.t_Vec bool (Global'0.t_Global)))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#s01_resolve_unsoundness0] ()}
          (fun (_ret':Vec'0.t_Vec bool (Global'0.t_Global)) ->  [ &out <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &i <- [%#s01_resolve_unsoundness1] (0 : usize) ] s1 | s1 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] [%#s01_resolve_unsoundness2] (0 : usize) <= i /\ i <= n}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 = UIntSize.le {i} {n} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s1)
          | s1 = any [ br0 -> {_9 = false} (! bb6) | br1 -> {_9} (! bb4) ]  ]
          
        | bb4 = s0
          [ s0 = Borrow.borrow_mut <Vec'0.t_Vec bool (Global'0.t_Global)> {out}
              (fun (_ret':borrowed (Vec'0.t_Vec bool (Global'0.t_Global))) ->
                 [ &_13 <- _ret' ] 
                 [ &out <- _ret'.final ] 
                s1)
          | s1 = push'0 {_13} {[%#s01_resolve_unsoundness3] false} (fun (_ret':()) ->  [ &_12 <- _ret' ] s2)
          | s2 = bb5 ]
          
        | bb5 = s0
          [ s0 = UIntSize.add {i} {[%#s01_resolve_unsoundness4] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1)
          | s1 = bb2 ]
           ]
         ]
      
    | bb6 = s0 [ s0 =  [ &_0 <- out ] s1 | s1 = bb7 ] 
    | bb7 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_Vec bool (Global'0.t_Global) = any_l ()
    | & n : usize = n
    | & out : Vec'0.t_Vec bool (Global'0.t_Global) = any_l ()
    | & i : usize = any_l ()
    | & _9 : bool = any_l ()
    | & _12 : () = any_l ()
    | & _13 : borrowed (Vec'0.t_Vec bool (Global'0.t_Global)) = any_l () ]
    
    [ return' (result:Vec'0.t_Vec bool (Global'0.t_Global))-> {[@expl:postcondition] [%#s01_resolve_unsoundness5] Seq.length (view'0 result)
      = UIntSize.to_int n}
      (! return' {result}) ]
    
end
