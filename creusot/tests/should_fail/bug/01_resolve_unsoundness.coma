module M_01_resolve_unsoundness__make_vec_of_size [#"01_resolve_unsoundness.rs" 9 0 9 46]
  let%span s01_resolve_unsoundness0 = "01_resolve_unsoundness.rs" 10 29 10 39
  let%span s01_resolve_unsoundness1 = "01_resolve_unsoundness.rs" 11 16 11 17
  let%span s01_resolve_unsoundness2 = "01_resolve_unsoundness.rs" 12 16 12 37
  let%span s01_resolve_unsoundness3 = "01_resolve_unsoundness.rs" 14 17 14 22
  let%span s01_resolve_unsoundness4 = "01_resolve_unsoundness.rs" 15 13 15 14
  let%span s01_resolve_unsoundness5 = "01_resolve_unsoundness.rs" 8 10 8 29
  let%span svec6 = "../../../../creusot-contracts/src/std/vec.rs" 74 26 74 44
  let%span svec7 = "../../../../creusot-contracts/src/std/vec.rs" 87 26 87 56
  let%span svec8 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span smodel9 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = true
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq bool
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec8] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  let rec new'0 (_1:()) (return'  (ret:t_Vec'0))= any
    [ return' (result:t_Vec'0)-> {inv'0 result} {[%#svec6] Seq.length (view'0 result) = 0} (! return' {result}) ]
    
  
  use prelude.prelude.Borrow
  
  predicate inv'1 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : bool)
  
  axiom inv_axiom'2 [@rewrite] : forall x : bool [inv'2 x] . inv'2 x = true
  
  function view'1 (self : borrowed (t_Vec'0)) : Seq.seq bool =
    [%#smodel9] view'0 self.current
  
  use seq.Seq
  
  let rec push'0 (self:borrowed (t_Vec'0)) (value:bool) (return'  (ret:()))= {[@expl:push 'self' type invariant] inv'1 self}
    {[@expl:push 'value' type invariant] inv'2 value}
    any [ return' (result:())-> {[%#svec7] view'0 self.final = Seq.snoc (view'1 self) value} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec make_vec_of_size'0 (n:usize) (return'  (ret:t_Vec'0))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#s01_resolve_unsoundness0] ()} (fun (_ret':t_Vec'0) ->  [ &out <- _ret' ] s1) | s1 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &i <- [%#s01_resolve_unsoundness1] (0 : usize) ] s1 | s1 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] [%#s01_resolve_unsoundness2] (0 : usize) <= i /\ i <= n}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 = UIntSize.le {i} {n} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1)
          | s1 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb4) ]  ]
          
        | bb4 = s0
          [ s0 = Borrow.borrow_mut <t_Vec'0> {out}
              (fun (_ret':borrowed (t_Vec'0)) ->  [ &_14 <- _ret' ]  [ &out <- _ret'.final ] s1)
          | s1 = push'0 {_14} {[%#s01_resolve_unsoundness3] false} (fun (_ret':()) ->  [ &_13 <- _ret' ] s2)
          | s2 = bb5 ]
          
        | bb5 = s0
          [ s0 = UIntSize.add {i} {[%#s01_resolve_unsoundness4] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1)
          | s1 = bb2 ]
           ]
         ]
      
    | bb6 = s0 [ s0 =  [ &_0 <- out ] s1 | s1 = bb7 ] 
    | bb7 = return' {_0} ]
    )
    [ & _0 : t_Vec'0 = any_l ()
    | & n : usize = n
    | & out : t_Vec'0 = any_l ()
    | & i : usize = any_l ()
    | & _10 : bool = any_l ()
    | & _13 : () = any_l ()
    | & _14 : borrowed (t_Vec'0) = any_l () ]
    
    [ return' (result:t_Vec'0)-> {[@expl:make_vec_of_size ensures] [%#s01_resolve_unsoundness5] Seq.length (view'0 result)
      = UIntSize.to_int n}
      (! return' {result}) ]
    
end
