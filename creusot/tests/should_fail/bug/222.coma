module M_222__A__is_true [#"222.rs" 14 4 14 16]
  type self
  
  let%span s2220 = "222.rs" 13 14 13 34
  
  use prelude.prelude.Int
  
  function mktrue'0 [#"222.rs" 7 4 7 22] (_1 : ()) : int
  
  constant _1  : ()
  
  function is_true [#"222.rs" 14 4 14 16] (_1 : ()) : ()
  
  goal vc_is_true : [%#s2220] mktrue'0 () <= 10
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_222__Once [#"222.rs" 34 0 34 18]
  use T_core__option__Option as Option'0
  
  type t_Once 't =
    | C_Once (Option'0.t_Option 't)
  
  let rec t_Once < 't > (input:t_Once 't) (ret  (field_0:Option'0.t_Option 't))= any
    [ good (field_0:Option'0.t_Option 't)-> {C_Once field_0 = input} (! ret {field_0}) ]
    
end
module M_222__uses_invariant [#"222.rs" 40 0 40 41]
  type t
  
  let%span s2220 = "222.rs" 38 11 38 24
  let%span s2221 = "222.rs" 40 25 40 26
  let%span s2222 = "222.rs" 39 10 39 26
  let%span soption3 = "../../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span s2224 = "222.rs" 30 8 30 12
  let%span sresolve5 = "../../../../creusot-contracts/src/resolve.rs" 69 8 72 9
  let%span sresolve6 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant7 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use T_core__option__Option as Option'0
  
  predicate inv'0 (_1 : Option'0.t_Option t)
  
  use T_222__Once as Once'0
  
  predicate inv'4 (_1 : Once'0.t_Once t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Once'0.t_Once t [inv'4 x] . inv'4 x
  = match x with
    | Once'0.C_Once a_0 -> inv'0 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Option'0.t_Option t)) =
    [%#sinvariant7] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (Option'0.t_Option t))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (Option'0.t_Option t) [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed (Once'0.t_Once t)) =
    [%#sinvariant7] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'1 (_1 : borrowed (Once'0.t_Once t))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Once'0.t_Once t) [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate inv'3 (_1 : t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Option'0.t_Option t [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  predicate invariant'0 [#"222.rs" 29 4 29 30] (self : Once'0.t_Once t) =
    [%#s2224] true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (Once'0.t_Once t)) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Once'0.t_Once t)) =
    resolve'3 _1
  
  predicate resolve'4 (_1 : t)
  
  predicate resolve'2 (self : Option'0.t_Option t) =
    [%#sresolve5] match self with
      | Option'0.C_Some x -> resolve'4 x
      | Option'0.C_None -> true
      end
  
  predicate resolve'0 (_1 : Option'0.t_Option t) =
    resolve'2 _1
  
  let rec take'0 (self:borrowed (Option'0.t_Option t)) (return'  (ret:Option'0.t_Option t))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:Option'0.t_Option t)-> {inv'0 result}
      {[%#soption3] result = self.current /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec uses_invariant (x:borrowed (Once'0.t_Once t)) (return'  (ret:()))= {[%#s2221] inv'1 x}
    {[%#s2220] invariant'0 x.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Once'0.t_Once <t> {x.current}
          (fun (r0'0:Option'0.t_Option t) ->
            {inv'0 r0'0}
            Borrow.borrow_final <Option'0.t_Option t> {r0'0} {Borrow.inherit_id (Borrow.get_id x) 1}
              (fun (_ret':borrowed (Option'0.t_Option t)) ->
                 [ &_5 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &x <- { x with current = Once'0.C_Once _ret'.final ; } ] 
                s1))
      | s1 = take'0 {_5} (fun (_ret':Option'0.t_Option t) ->  [ &_4 <- _ret' ] s2)
      | s2 = {[@expl:type invariant] inv'0 _4} s3
      | s3 = -{resolve'0 _4}- s4
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 x} s1 | s1 = -{resolve'1 x}- s2 | s2 = bb2 ] 
    | bb2 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : borrowed (Once'0.t_Once t) = x
    | & _4 : Option'0.t_Option t = any_l ()
    | & _5 : borrowed (Option'0.t_Option t) = any_l () ]
     [ return' (result:())-> {[@expl:postcondition] [%#s2222] invariant'0 x.final} (! return' {result}) ] 
end
module M_222__qyi2574917115831112192 [#"222.rs" 19 0 19 13] (* <() as A> *)
  
end
module M_222__qyi17379344119867683727 [#"222.rs" 36 0 36 29] (* <Once<T> as Invariant> *)
  type t
end
