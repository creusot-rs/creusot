
module C222_A_IsTrue_Impl
  type self
  use prelude.Int
  function mktrue'0 [#"../222.rs" 7 4 7 22] (_1 : ()) : int
  let rec mktrue'0 (_1:()) (return'  (ret:int))= any
    [ return' (result:int)-> {result = mktrue'0 _1} (! return' {result}) ]
    
  constant _1  : ()
  function is_true [#"../222.rs" 14 4 14 16] (_1 : ()) : ()
  goal vc_is_true : [#"../222.rs" 13 14 13 34] mktrue'0 () <= 10
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C222_Once_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_once 't =
    | C_Once (Core_Option_Option_Type.t_option 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_once < 't > (input:t_once 't) (ret  (field_0:Core_Option_Option_Type.t_option 't))= any
    [ good (field_0:Core_Option_Option_Type.t_option 't)-> {C_Once field_0 = input} (! ret {field_0})
    | bad (field_0:Core_Option_Option_Type.t_option 't)-> {C_Once field_0 <> input} {false} any ]
    
end
module C222_UsesInvariant
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Borrow
  predicate invariant'3 (self : borrowed (Core_Option_Option_Type.t_option t))
  let rec invariant'3 (self:borrowed (Core_Option_Option_Type.t_option t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (Core_Option_Option_Type.t_option t))
  let rec inv'2 (_x:borrowed (Core_Option_Option_Type.t_option t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (Core_Option_Option_Type.t_option t) . inv'2 x = true
  use C222_Once_Type as C222_Once_Type
  predicate invariant'2 (self : borrowed (C222_Once_Type.t_once t))
  let rec invariant'2 (self:borrowed (C222_Once_Type.t_once t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (C222_Once_Type.t_once t))
  let rec inv'1 (_x:borrowed (C222_Once_Type.t_once t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (C222_Once_Type.t_once t) . inv'1 x = true
  predicate invariant'1 (self : Core_Option_Option_Type.t_option t)
  let rec invariant'1 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Core_Option_Option_Type.t_option t)
  let rec inv'0 (_x:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Option_Option_Type.t_option t . inv'0 x = true
  predicate invariant'0 [#"../222.rs" 29 4 29 30] (self : C222_Once_Type.t_once t) =
    [#"../222.rs" 30 8 30 12] true
  let rec invariant'0 (self:C222_Once_Type.t_once t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed (C222_Once_Type.t_once t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (C222_Once_Type.t_once t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : Core_Option_Option_Type.t_option t)
  let rec resolve'0 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec take'0 (self:borrowed (Core_Option_Option_Type.t_option t)) (return'  (ret:Core_Option_Option_Type.t_option t))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option t)-> {inv'0 result}
      {[#"../../../../../creusot-contracts/src/std/option.rs" 29 0 140 1] result =  * self
      /\  ^ self = Core_Option_Option_Type.C_None}
      (! return' {result}) ]
    
  let rec uses_invariant (x:borrowed (C222_Once_Type.t_once t)) (return'  (ret:()))= {[#"../222.rs" 40 25 40 26] inv'1 x}
    {[#"../222.rs" 38 11 38 24] invariant'0 ( * x)}
    (! bb0
    [ bb0 = s0
      [ s0 = C222_Once_Type.t_once <t> { * x}
          (fun (r0'0:Core_Option_Option_Type.t_option t) ->
            Borrow.borrow_final <Core_Option_Option_Type.t_option t> {r0'0} {Borrow.inherit_id (Borrow.get_id x) 1}
              (fun (_ret':borrowed (Core_Option_Option_Type.t_option t)) ->
                 [ &_5 <- _ret' ] 
                C222_Once_Type.t_once <t> { * x}
                  (fun (l_0'0:Core_Option_Option_Type.t_option t) ->
                     [ &x <- { x with current = (C222_Once_Type.C_Once ( ^ _5) : C222_Once_Type.t_once t) ; } ] 
                    s1)))
      | s1 = -{inv'0 ( ^ _5)}- s2
      | s2 = take'0 {_5} (fun (_ret':Core_Option_Option_Type.t_option t) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 _4} s1
      | s1 = -{resolve'0 _4}- s2
      | s2 = {[@expl:type invariant] inv'1 x} s3
      | s3 = -{resolve'1 x}- s4
      | s4 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- [#"../222.rs" 40 42 42 1] () ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & x : borrowed (C222_Once_Type.t_once t) = x
    | & _4 : Core_Option_Option_Type.t_option t = any_l () : Core_Option_Option_Type.t_option t
    | & _5 : borrowed (Core_Option_Option_Type.t_option t) = any_l () : borrowed (Core_Option_Option_Type.t_option t) ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../222.rs" 39 10 39 26] invariant'0 ( ^ x)} (! return' {result}) ]
    
end
module C222_Impl0
  
end
module C222_Impl1
  type t
end
