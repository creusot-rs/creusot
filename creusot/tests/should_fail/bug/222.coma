
module M_222__A__is_true__Impl
  type self
  
  let%span s2220 = "../222.rs" 13 14 13 34
  
  use prelude.prelude.Int
  
  function mktrue'0 [#"../222.rs" 7 4 7 22] (_1 : ()) : int
  
  constant _1  : ()
  
  function is_true [#"../222.rs" 14 4 14 16] (_1 : ()) : ()
  
  goal vc_is_true : [%#s2220] mktrue'0 () <= 10
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module T_222__Once
  use T_core__option__Option as Option'0
  
  type t_Once 't =
    | C_Once (Option'0.t_Option 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Once < 't > (input:t_Once 't) (ret  (field_0:Option'0.t_Option 't))= any
    [ good (field_0:Option'0.t_Option 't)-> {C_Once field_0 = input} (! ret {field_0})
    | bad (field_0:Option'0.t_Option 't)-> {C_Once field_0 <> input} {false} any ]
    
end
module M_222__uses_invariant
  type t
  
  let%span s2220 = "../222.rs" 38 11 38 24
  
  let%span s2221 = "../222.rs" 40 25 40 26
  
  let%span s2222 = "../222.rs" 39 10 39 26
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span5 = "../222.rs" 30 8 30 12
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "../../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span9 = "" 0 0 0 0
  
  use T_222__Once as Once'0
  
  predicate invariant'4 (self : Once'0.t_Once t) =
    [%#span3] true
  
  predicate inv'3 (_1 : Once'0.t_Once t)
  
  axiom inv'3 : forall x : Once'0.t_Once t . inv'3 x = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'0 (_1 : Option'0.t_Option t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed (Option'0.t_Option t)) =
    [%#span4] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (Option'0.t_Option t))
  
  axiom inv'2 : forall x : borrowed (Option'0.t_Option t) . inv'2 x = true
  
  predicate invariant'2 (self : borrowed (Once'0.t_Once t)) =
    [%#span4] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'1 (_1 : borrowed (Once'0.t_Once t))
  
  axiom inv'1 : forall x : borrowed (Once'0.t_Once t) . inv'1 x = true
  
  predicate invariant'1 (self : Option'0.t_Option t) =
    [%#span3] true
  
  axiom inv'0 : forall x : Option'0.t_Option t . inv'0 x = true
  
  predicate invariant'0 [#"../222.rs" 29 4 29 30] (self : Once'0.t_Once t) =
    [%#span5] true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (Once'0.t_Once t)) =
    [%#span6] self.final = self.current
  
  let rec take'0 (self:borrowed (Option'0.t_Option t)) (return'  (ret:Option'0.t_Option t))= {[@expl:precondition] [%#span7] inv'2 self}
    any
    [ return' (result:Option'0.t_Option t)-> {[%#span9] inv'0 result}
      {[%#span8] result = self.current /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec uses_invariant (x:borrowed (Once'0.t_Once t)) (return'  (ret:()))= {[%#s2221] inv'1 x}
    {[%#s2220] invariant'0 x.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Once'0.t_Once <t> {x.current}
          (fun (r0'0:Option'0.t_Option t) ->
            Borrow.borrow_final <Option'0.t_Option t> {r0'0} {Borrow.inherit_id (Borrow.get_id x) 1}
              (fun (_ret':borrowed (Option'0.t_Option t)) ->
                 [ &_5 <- _ret' ] 
                Once'0.t_Once <t> {x.current}
                  (fun (l_0'0:Option'0.t_Option t) ->  [ &x <- { x with current = Once'0.C_Once _5.final ; } ] s1)))
      | s1 = -{inv'0 _5.final}- s2
      | s2 = take'0 {_5} (fun (_ret':Option'0.t_Option t) ->  [ &_4 <- _ret' ] s3)
      | s3 = {[@expl:type invariant] inv'0 _4} s4
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 x} s1 | s1 = -{resolve'0 x}- s2 | s2 = bb2 ] 
    | bb2 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : borrowed (Once'0.t_Once t) = x
    | & _4 : Option'0.t_Option t = any_l ()
    | & _5 : borrowed (Option'0.t_Option t) = any_l () ]
     [ return' (result:())-> {[@expl:postcondition] [%#s2222] invariant'0 x.final} (! return' {result}) ] 
end
module M_222__qy123zimplqy35z0qy125z
  
end
module M_222__qy123zimplqy35z1qy125z
  type t
end
