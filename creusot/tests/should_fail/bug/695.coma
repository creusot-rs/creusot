
module C695_InversedIf
  type c
  
  type b
  
  let%span s6950 = "../695.rs" 10 15 10 20
  
  let%span s6951 = "../695.rs" 8 15 8 19
  
  let%span s6952 = "../695.rs" 4 0 4 79
  
  let%span s6953 = "../695.rs" 6 59 6 63
  
  let%span s6954 = "../695.rs" 6 68 6 74
  
  let%span s6955 = "../695.rs" 5 0 5 91
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span23 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25
  
  let%span span26 = "../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101
  
  let%span span28 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29
  
  let%span span31 = "../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40
  
  let%span span32 = "../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100
  
  let%span span33 = "../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1
  
  let%span span34 = "" 0 0 0 0
  
  let%span span35 = "" 0 0 0 0
  
  let%span span36 = "" 0 0 0 0
  
  let%span span37 = "../../../../../creusot-contracts/src/std/ops.rs" 166 27 166 52
  
  let%span span38 = "" 0 0 0 0
  
  let%span span39 = "" 0 0 0 0
  
  let%span span40 = "" 0 0 0 0
  
  predicate resolve'0 (self : c)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed c) (_2 : ()) (_3 : bool)
  
  predicate inv'6 (_x : borrowed c)
  
  predicate postcondition_once'1 (self : c) (_2 : ()) (_3 : bool)
  
  predicate inv'4 (_x : bool)
  
  predicate inv'3 (_x : ())
  
  predicate inv'0 (_x : c)
  
  function fn_mut_once'0 (self : c) (args : ()) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : c, args : (), res : bool . ([%#span6] inv'0 self)
   -> ([%#span7] inv'3 args)
   -> ([%#span8] inv'4 res)
   -> ([%#span9] postcondition_once'1 self args res
  = (exists s : borrowed c . inv'6 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : c) (_2 : c)
  
  function unnest_trans'0 (self : c) (b : c) (c : c) : ()
  
  axiom unnest_trans'0_spec : forall self : c, b : c, c : c . ([%#span10] unnest'0 self b)
   -> ([%#span11] unnest'0 b c)
   -> ([%#span12] inv'0 self)  -> ([%#span13] inv'0 b)  -> ([%#span14] inv'0 c)  -> ([%#span15] unnest'0 self c)
  
  function unnest_refl'0 (self : c) : ()
  
  axiom unnest_refl'0_spec : forall self : c . ([%#span16] inv'0 self)  -> ([%#span17] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed c) (args : ()) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed c, args : (), res : bool . ([%#span18] postcondition_mut'0 self args res)
   -> ([%#span19] inv'6 self)
   -> ([%#span20] inv'3 args)  -> ([%#span21] inv'4 res)  -> ([%#span22] unnest'0 self.current self.final)
  
  predicate invariant'6 (self : borrowed c)
  
  axiom inv'6 : forall x : borrowed c . inv'6 x = true
  
  predicate invariant'5 (self : bool) =
    [%#span23] true
  
  predicate inv'5 (_x : bool)
  
  axiom inv'5 : forall x : bool . inv'5 x = true
  
  predicate invariant'4 (self : bool) =
    [%#span23] true
  
  axiom inv'4 : forall x : bool . inv'4 x = true
  
  predicate invariant'3 (self : ()) =
    [%#span23] true
  
  axiom inv'3 : forall x : () . inv'3 x = true
  
  predicate invariant'2 (self : c)
  
  predicate inv'2 (_x : c)
  
  axiom inv'2 : forall x : c . inv'2 x = true
  
  predicate postcondition'0 (self : c) (_2 : ()) (_3 : bool)
  
  function fn_once'0 (self : c) (args : ()) (res : bool) : ()
  
  axiom fn_once'0_spec : forall self : c, args : (), res : bool . ([%#span24] inv'0 self)
   -> ([%#span25] inv'3 args)
   -> ([%#span26] inv'4 res)
   -> ([%#span27] postcondition_once'1 self args res = (resolve'0 self /\ postcondition'0 self args res))
  
  predicate resolve'1 (self : borrowed c) =
    [%#span28] self.final = self.current
  
  function fn_mut'0 (self : borrowed c) (args : ()) (res : bool) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed c, args : (), res : bool . ([%#span29] inv'6 self)
   -> ([%#span30] inv'3 args)
   -> ([%#span31] inv'4 res)
   -> ([%#span32] postcondition_mut'0 self args res = (resolve'1 self /\ postcondition'0 self.current args res))
  
  predicate invariant'1 (self : b)
  
  predicate inv'1 (_x : b)
  
  axiom inv'1 : forall x : b . inv'1 x = true
  
  predicate invariant'0 (self : c)
  
  axiom inv'0 : forall x : c . inv'0 x = true
  
  predicate postcondition_once'0 (self : b) (_2 : bool) (_3 : ())
  
  predicate precondition'1 (self : b) (_2 : bool)
  
  predicate precondition'0 (self : c) (_2 : ())
  
  use prelude.prelude.Intrinsic
  
  let rec call_once'0 (self:b) (args:bool) (return'  (ret:()))= {[@expl:precondition] [%#span35] inv'5 args}
    {[@expl:precondition] [%#span34] inv'1 self}
    {[@expl:precondition] [%#span33] precondition'1 self args}
    any
    [ return' (result:())-> {[%#span36] inv'3 result}
      {[%#span33] postcondition_once'0 self args result}
      (! return' {result}) ]
    
  
  let rec call'0 (self:c) (args:()) (return'  (ret:bool))= {[@expl:precondition] [%#span39] inv'3 args}
    {[@expl:precondition] [%#span38] inv'2 self}
    {[@expl:precondition] [%#span37] precondition'0 self args}
    any
    [ return' (result:bool)-> {[%#span40] inv'4 result}
      {[%#span33] postcondition'0 self args result}
      (! return' {result}) ]
    
  
  let rec inversed_if (cond:c) (branch:b) (return'  (ret:()))= {[%#s6954] inv'1 branch}
    {[%#s6953] inv'0 cond}
    {[%#s6952] precondition'0 cond () /\ (forall b : bool . precondition'1 branch (b))}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = call'0 {cond} {_7} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = any [ br0 -> {_5 = false} (! bb5) | br1 -> {_5} (! bb4) ] 
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'0 cond} s1
      | s1 = -{resolve'0 cond}- s2
      | s2 =  [ &_11 <- (([%#s6950] false)) ] s3
      | s3 = call_once'0 {branch} {_11} (fun (_ret':()) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb7 ]
      
    | bb7 = bb8
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 cond} s1
      | s1 = -{resolve'0 cond}- s2
      | s2 =  [ &_9 <- (([%#s6951] true)) ] s3
      | s3 = call_once'0 {branch} {_9} (fun (_ret':()) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb6 ]
      
    | bb6 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & cond : c = cond
    | & branch : b = branch
    | & _5 : bool = any_l ()
    | & _7 : () = any_l ()
    | & _9 : bool = any_l ()
    | & _11 : bool = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s6955] exists b : bool . postcondition'0 cond () b
      /\ postcondition_once'0 branch (not b) ()}
      (! return' {result}) ]
    
end
module C695_Valid_Closure1_Type
  use prelude.prelude.Int8
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type c695_valid_closure1  =
    | C695_valid_closure1 uint32
  
  let rec c695_valid_closure1 (input:c695_valid_closure1) (ret  (n:uint32))= any
    [ good (n:uint32)-> {C695_valid_closure1 n = input} (! ret {n})
    | bad (n:uint32)-> {C695_valid_closure1 n <> input} {false} any ]
    
end
module C695_Valid_Closure1
  let%span s6950 = "../695.rs" 18 11 18 15
  
  let%span s6951 = "../695.rs" 17 25 17 45
  
  use prelude.prelude.Int8
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  use C695_Valid_Closure1_Type as Closure'0
  
  function field_0'0 [#"../695.rs" 17 15 17 47] (self : Closure'0.c695_valid_closure1) : uint32 =
    let Closure'0.C695_valid_closure1 a = self in a
  
  use prelude.prelude.Intrinsic
  
  let rec c695_valid_closure1 (_1:Closure'0.c695_valid_closure1) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = Closure'0.c695_valid_closure1 {_1}
          (fun (r'0:uint32) -> UInt32.gt {r'0} {[%#s6950] (7 : uint32)} (fun (_ret':bool) ->  [ &res <- _ret' ] s1))
      | s1 =  [ &_0 <- res ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () | & _1 : Closure'0.c695_valid_closure1 = _1 | & res : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#s6951] result = (field_0'0 _1 > (7 : uint32))}
      (! return' {result}) ]
    
end
module C695_Valid_Closure2_Type
  use prelude.prelude.Int16
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type c695_valid_closure2  =
    | C695_valid_closure2 (borrowed uint32)
  
  let rec c695_valid_closure2 (input:c695_valid_closure2) (ret  (r:borrowed uint32))= any
    [ good (r:borrowed uint32)-> {C695_valid_closure2 r = input} (! ret {r})
    | bad (r:borrowed uint32)-> {C695_valid_closure2 r <> input} {false} any ]
    
end
module C695_Valid_Closure2
  let%span s6950 = "../695.rs" 20 25 20 26
  
  let%span s6951 = "../695.rs" 20 36 20 37
  
  let%span s6952 = "../695.rs" 19 27 19 62
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int16
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  use C695_Valid_Closure2_Type as Closure'0
  
  function field_0'0 [#"../695.rs" 19 17 19 64] (self : Closure'0.c695_valid_closure2) : borrowed uint32 =
    let Closure'0.C695_valid_closure2 a = self in a
  
  predicate unnest'0 [#"../695.rs" 19 17 19 64] (self : Closure'0.c695_valid_closure2) (_2 : Closure'0.c695_valid_closure2)
    
   =
    (field_0'0 _2).final = (field_0'0 self).final
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed Closure'0.c695_valid_closure2) =
    [%#span3] self.final = self.current
  
  let rec c695_valid_closure2 (_1:borrowed Closure'0.c695_valid_closure2) (b:bool) (return'  (ret:()))= (! bb0
    [ bb0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ] 
    | bb1 = s0 [ s0 =  [ &_4 <- [%#s6950] (2 : uint32) ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_4 <- [%#s6951] (1 : uint32) ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = Closure'0.c695_valid_closure2 {_1.current}
          (fun (l'0:borrowed uint32) ->
             [ &_1 <- { _1 with current = Closure'0.C695_valid_closure2 ({ l'0 with current = _4 ; }) ; } ] 
            (any [ any_ (_any:uint32)-> (!  [ &_4 <- _any ] s1) ] ))
      | s1 = -{resolve'0 _1}- s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & _1 : borrowed Closure'0.c695_valid_closure2 = _1
    | & b : bool = b
    | & _4 : uint32 = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s6952] b /\ (field_0'0 _1.final).current = (2 : uint32)
      \/ not b /\ (field_0'0 _1.final).current = (1 : uint32)}
      (! return' {result}) ]
    
end
module C695_Valid
  let%span s6950 = "../695.rs" 16 16 16 20
  
  let%span s6951 = "../695.rs" 22 20 22 25
  
  let%span s6952 = "../695.rs" 14 10 14 71
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../695.rs" 19 27 19 62
  
  let%span span5 = "../695.rs" 17 25 17 45
  
  let%span span6 = "../695.rs" 4 0 4 79
  
  let%span span7 = "../695.rs" 6 59 6 63
  
  let%span span8 = "../695.rs" 6 68 6 74
  
  let%span span9 = "../695.rs" 5 0 5 91
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int16
  
  use C695_Valid_Closure2_Type as Closure'1
  
  predicate invariant'1 (self : Closure'1.c695_valid_closure2) =
    [%#span3] true
  
  predicate inv'1 (_x : Closure'1.c695_valid_closure2)
  
  axiom inv'1 : forall x : Closure'1.c695_valid_closure2 . inv'1 x = true
  
  use prelude.prelude.Int8
  
  use C695_Valid_Closure1_Type as Closure'0
  
  predicate invariant'0 (self : Closure'0.c695_valid_closure1) =
    [%#span3] true
  
  predicate inv'0 (_x : Closure'0.c695_valid_closure1)
  
  axiom inv'0 : forall x : Closure'0.c695_valid_closure1 . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  function field_0'1 [#"../695.rs" 19 17 19 64] (self : Closure'1.c695_valid_closure2) : borrowed uint32 =
    let Closure'1.C695_valid_closure2 a = self in a
  
  predicate postcondition_once'0 [#"../695.rs" 19 17 19 64] (self : Closure'1.c695_valid_closure2) (args : bool) (result : ())
    
   =
    [%#span4] let (b) = args in b /\ (field_0'1 self).final = (2 : uint32)
    \/ not b /\ (field_0'1 self).final = (1 : uint32)
  
  function field_0'0 [#"../695.rs" 17 15 17 47] (self : Closure'0.c695_valid_closure1) : uint32 =
    let Closure'0.C695_valid_closure1 a = self in a
  
  predicate postcondition'0 [#"../695.rs" 17 15 17 47] (self : Closure'0.c695_valid_closure1) (_ : ()) (result : bool) =
    [%#span5] result = (field_0'0 self > (7 : uint32))
  
  predicate precondition'1 [#"../695.rs" 19 17 19 64] (self : Closure'1.c695_valid_closure2) (args : bool) =
    let (b) = args in true
  
  predicate precondition'0 [#"../695.rs" 17 15 17 47] (self : Closure'0.c695_valid_closure1) (_ : ()) =
    true
  
  let rec inversed_if'0 (cond:Closure'0.c695_valid_closure1) (branch:Closure'1.c695_valid_closure2) (return'  (ret:()))= {[@expl:precondition] [%#span8] inv'1 branch}
    {[@expl:precondition] [%#span7] inv'0 cond}
    {[@expl:precondition] [%#span6] precondition'0 cond () /\ (forall b : bool . precondition'1 branch (b))}
    any
    [ return' (result:())-> {[%#span9] exists b : bool . postcondition'0 cond () b
      /\ postcondition_once'0 branch (not b) ()}
      (! return' {result}) ]
    
  
  predicate resolve'0 [#"../695.rs" 17 15 17 47] (_1 : Closure'0.c695_valid_closure1) =
    true
  
  let rec valid (n:uint32) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#s6950] (0 : uint32) ] s1
      | s1 =  [ &cond <- Closure'0.C695_valid_closure1 n ] s2
      | s2 = Borrow.borrow_mut <uint32> {r} (fun (_ret':borrowed uint32) ->  [ &_7 <- _ret' ]  [ &r <- _7.final ] s3)
      | s3 =  [ &branch <- Closure'1.C695_valid_closure2 _7 ] 
        (any [ any_ (_any:borrowed uint32)-> (!  [ &_7 <- _any ] s4) ] )
      | s4 = -{resolve'0 cond}- s5
      | s5 = inversed_if'0 {cond} {branch} (fun (_ret':()) ->  [ &_8 <- _ret' ] s6)
      | s6 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#s6951] false} s1 | s1 =  [ &_0 <- r ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l ()
    | & n : uint32 = n
    | & r : uint32 = any_l ()
    | & cond : Closure'0.c695_valid_closure1 = any_l ()
    | & branch : Closure'1.c695_valid_closure2 = any_l ()
    | & _7 : borrowed uint32 = any_l ()
    | & _8 : () = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [%#s6952] n > (7 : uint32) /\ result = (2 : uint32)
      \/ n <= (7 : uint32) /\ result = (1 : uint32)}
      (! return' {result}) ]
    
end
