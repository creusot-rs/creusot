module M_695__inversed_if [#"695.rs" 6 0 6 78]
  let%span s6950 = "695.rs" 10 15 10 20
  let%span s6951 = "695.rs" 8 15 8 19
  let%span s6952 = "695.rs" 6 59 6 63
  let%span s6953 = "695.rs" 6 68 6 74
  let%span s6954 = "695.rs" 4 11 4 77
  let%span s6955 = "695.rs" 5 10 5 89
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 164 27 164 52
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 165 26 165 60
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 148 0 170 1
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 139 14 139 114
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101
  let%span sinvariant11 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  
  use prelude.prelude.Borrow
  
  type t_C'0
  
  predicate inv'0 (_1 : t_C'0)
  
  predicate invariant'0 (self : t_C'0) =
    [%#sinvariant11] inv'0 self
  
  predicate inv'2 (_1 : t_C'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_C'0 [inv'2 x] . inv'2 x = invariant'0 x
  
  predicate inv'3 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'3 x] . inv'3 x = true
  
  predicate precondition'0 (self : t_C'0) (args : ())
  
  predicate inv'4 (_1 : bool)
  
  axiom inv_axiom'2 [@rewrite] : forall x : bool [inv'4 x] . inv'4 x = true
  
  predicate postcondition_once'1 (self : t_C'0) (args : ()) (result : bool)
  
  predicate resolve'0 (_1 : t_C'0)
  
  predicate postcondition_mut'0 (self : t_C'0) (args : ()) (result_state : t_C'0) (result : bool)
  
  function fn_mut_once'0 (self : t_C'0) (args : ()) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_C'0, args : (), res : bool . [%#sops18] postcondition_once'1 self args res
  = (exists res_state : t_C'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_C'0) (_2 : t_C'0)
  
  function unnest_trans'0 (self : t_C'0) (b : t_C'0) (c : t_C'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_C'0, b : t_C'0, c : t_C'0 . ([%#sops15] unnest'0 self b)
   -> ([%#sops16] unnest'0 b c)  -> ([%#sops17] unnest'0 self c)
  
  function unnest_refl'0 (self : t_C'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_C'0 . [%#sops14] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_C'0) (args : ()) (res_state : t_C'0) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_C'0, args : (), res_state : t_C'0, res : bool . ([%#sops12] postcondition_mut'0 self args res_state res)
   -> ([%#sops13] unnest'0 self res_state)
  
  predicate postcondition'0 (self : t_C'0) (args : ()) (result : bool)
  
  function fn_once'0 (self : t_C'0) (args : ()) (res : bool) : ()
  
  axiom fn_once'0_spec : forall self : t_C'0, args : (), res : bool . [%#sops10] postcondition_once'1 self args res
  = (resolve'0 self /\ postcondition'0 self args res)
  
  function fn_mut'0 (self : t_C'0) (args : ()) (res_state : t_C'0) (res : bool) : ()
  
  axiom fn_mut'0_spec : forall self : t_C'0, args : (), res_state : t_C'0, res : bool . [%#sops9] postcondition_mut'0 self args res_state res
  = (self = res_state /\ postcondition'0 self args res)
  
  let rec call'0 (self:t_C'0) (args:()) (return'  (ret:bool))= {[@expl:call 'self' type invariant] inv'2 self}
    {[@expl:call 'args' type invariant] inv'3 args}
    {[@expl:call requires] [%#sops6] precondition'0 self args}
    any [ return' (result:bool)-> {inv'4 result} {[%#sops7] postcondition'0 self args result} (! return' {result}) ] 
  
  type t_B'0
  
  predicate inv'1 (_1 : t_B'0)
  
  predicate inv'5 (_1 : bool)
  
  axiom inv_axiom'3 [@rewrite] : forall x : bool [inv'5 x] . inv'5 x = true
  
  predicate precondition'1 (self : t_B'0) (args : bool)
  
  predicate postcondition_once'0 (self : t_B'0) (args : bool) (result : ())
  
  let rec call_once'0 (self:t_B'0) (args:bool) (return'  (ret:()))= {[@expl:call_once 'self' type invariant] inv'1 self}
    {[@expl:call_once 'args' type invariant] inv'5 args}
    {[@expl:call_once requires] [%#sops8] precondition'1 self args}
    any [ return' (result:())-> {inv'3 result} {[%#sops8] postcondition_once'0 self args result} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec inversed_if'0 (cond:t_C'0) (branch:t_B'0) (return'  (ret:()))= {[@expl:inversed_if 'cond' type invariant] [%#s6952] inv'0 cond}
    {[@expl:inversed_if 'branch' type invariant] [%#s6953] inv'1 branch}
    {[@expl:inversed_if requires] [%#s6954] precondition'0 cond () /\ (forall b : bool . precondition'1 branch (b))}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = call'0 {cond} {_7} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 cond} s1
      | s1 = -{resolve'0 cond}- s2
      | s2 = any [ br0 -> {_5 = false} (! bb5) | br1 -> {_5} (! bb4) ]  ]
      
    | bb4 = s0
      [ s0 =  [ &_11 <- (([%#s6950] false)) ] s1
      | s1 = call_once'0 {branch} {_11} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = bb8
    | bb5 = s0
      [ s0 =  [ &_9 <- (([%#s6951] true)) ] s1
      | s1 = call_once'0 {branch} {_9} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & cond : t_C'0 = cond
    | & branch : t_B'0 = branch
    | & _5 : bool = any_l ()
    | & _7 : () = any_l ()
    | & _9 : bool = any_l ()
    | & _11 : bool = any_l () ]
    
    [ return' (result:())-> {[@expl:inversed_if ensures] [%#s6955] exists b : bool . postcondition'0 cond () b
      /\ postcondition_once'0 branch (not b) ()}
      (! return' {result}) ]
    
end
module M_695__valid [#"695.rs" 15 0 15 27]
  let%span s6950 = "695.rs" 16 16 16 20
  let%span s6951 = "695.rs" 22 20 22 25
  let%span s6952 = "695.rs" 14 10 14 71
  let%span s6953 = "695.rs" 18 11 18 15
  let%span s6954 = "695.rs" 17 25 17 45
  let%span s6955 = "695.rs" 20 25 20 26
  let%span s6956 = "695.rs" 20 36 20 37
  let%span s6957 = "695.rs" 19 27 19 62
  let%span s6958 = "695.rs" 6 59 6 63
  let%span s6959 = "695.rs" 6 68 6 74
  let%span s69510 = "695.rs" 4 11 4 77
  let%span s69511 = "695.rs" 5 10 5 89
  let%span sord12 = "../../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord13 = "../../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord14 = "../../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord15 = "../../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord16 = "../../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord17 = "../../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord18 = "../../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord19 = "../../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord20 = "../../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord21 = "../../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord22 = "../../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord23 = "../../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord24 = "../../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span sresolve25 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops26 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops27 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops28 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops29 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops30 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops31 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops32 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  let%span sops33 = "../../../../creusot-contracts/src/std/ops.rs" 139 14 139 114
  let%span sops34 = "../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101
  let%span sord35 = "../../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  type closure1'1  =
    { field_0'0: UInt32.t }
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.prelude.UInt32
  
  function cmp_log'0 (self : UInt32.t) (o : UInt32.t) : t_Ordering'0 =
    [%#sord35] if UInt32.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord24] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord22] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord23] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord20] cmp_log'0 x y = C_Less'0)
   -> ([%#sord21] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt32.t) (y : UInt32.t) (z : UInt32.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt32.t, y : UInt32.t, z : UInt32.t, o : t_Ordering'0 . ([%#sord17] cmp_log'0 x y
  = o)  -> ([%#sord18] cmp_log'0 y z = o)  -> ([%#sord19] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt32.t) : ()
  
  axiom refl'0_spec : forall x : UInt32.t . [%#sord16] cmp_log'0 x x = C_Equal'0
  
  use prelude.prelude.UInt32
  
  function cmp_gt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord15] UInt32.ugt x y
  = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.prelude.UInt32
  
  function cmp_ge_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord14] UInt32.uge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord13] UInt32.ult x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.prelude.UInt32
  
  function cmp_le_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord12] UInt32.ule x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  let rec closure1'0 (_1:closure1'1) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = UInt32.gt {_1.field_0'0} {[%#s6953] (7 : UInt32.t)} (fun (_ret':bool) ->  [ &res <- _ret' ] s1)
      | s1 =  [ &_0 <- res ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () | & _1 : closure1'1 = _1 | & res : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:closure ensures] [%#s6954] result = UInt32.ugt _1.field_0'0 (7 : UInt32.t)}
      (! return' {result}) ]
    
  
  type closure2'1  =
    { field_0'1: borrowed UInt32.t }
  
  predicate resolve'1 (self : borrowed closure2'1) =
    [%#sresolve25] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed closure2'1) =
    resolve'1 _1
  
  predicate postcondition_once'0 (self : closure2'1) (args : bool) (result : ()) =
    [%#s6957] let (b) = args in b /\ (self.field_0'1).final = (2 : UInt32.t)
    \/ not b /\ (self.field_0'1).final = (1 : UInt32.t)
  
  predicate resolve'5 (self : borrowed UInt32.t) =
    [%#sresolve25] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed UInt32.t) =
    resolve'5 _1
  
  predicate resolve'2 (_1 : closure2'1) =
    resolve'4 _1.field_0'1
  
  predicate unnest'0 (self : closure2'1) (_2 : closure2'1) =
    (_2.field_0'1).final = (self.field_0'1).final
  
  predicate postcondition_mut'0 (self : closure2'1) (args : bool) (result_state : closure2'1) (result : ()) =
    (let (b) = args in b /\ (result_state.field_0'1).current = (2 : UInt32.t)
    \/ not b /\ (result_state.field_0'1).current = (1 : UInt32.t))
    /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : closure2'1) (args : bool) (res : ()) : ()
  
  axiom fn_mut_once'0_spec : forall self : closure2'1, args : bool, res : () . [%#sops32] postcondition_once'0 self args res
  = (exists res_state : closure2'1 . postcondition_mut'0 self args res_state res /\ resolve'2 res_state)
  
  function unnest_trans'0 (self : closure2'1) (b : closure2'1) (c : closure2'1) : ()
  
  axiom unnest_trans'0_spec : forall self : closure2'1, b : closure2'1, c : closure2'1 . ([%#sops29] unnest'0 self b)
   -> ([%#sops30] unnest'0 b c)  -> ([%#sops31] unnest'0 self c)
  
  function unnest_refl'0 (self : closure2'1) : ()
  
  axiom unnest_refl'0_spec : forall self : closure2'1 . [%#sops28] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : closure2'1) (args : bool) (res_state : closure2'1) (res : ()) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : closure2'1, args : bool, res_state : closure2'1, res : () . ([%#sops26] postcondition_mut'0 self args res_state res)
   -> ([%#sops27] unnest'0 self res_state)
  
  let rec closure2'0 (_1:borrowed closure2'1) (b:bool) (return'  (ret:()))= (! bb0
    [ bb0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ] 
    | bb1 = s0 [ s0 =  [ &_4 <- [%#s6955] (2 : UInt32.t) ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_4 <- [%#s6956] (1 : UInt32.t) ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_1 <- { _1 with current = { field_0'1 = { (_1.current).field_0'1 with current = _4 } } } ] s1
      | s1 = -{resolve'0 _1}- s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & _1 : borrowed closure2'1 = _1 | & b : bool = b | & _4 : UInt32.t = any_l () ] 
    [ return' (result:())-> {[@expl:closure ensures] [%#s6957] b /\ ((_1.final).field_0'1).current = (2 : UInt32.t)
      \/ not b /\ ((_1.final).field_0'1).current = (1 : UInt32.t)}
      {[@expl:closure unnest] unnest'0 _1.current _1.final}
      (! return' {result}) ]
    
  
  predicate inv'0 (_1 : closure1'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : closure1'1 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : closure2'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : closure2'1 [inv'1 x] . inv'1 x = true
  
  predicate precondition'0 (self : closure1'1) (args : ()) =
    let () = args in true
  
  predicate precondition'1 (self : closure2'1) (args : bool) =
    let (b) = args in true
  
  predicate postcondition_once'1 (self : closure1'1) (args : ()) (result : bool) =
    [%#s6954] let () = args in result = UInt32.ugt self.field_0'0 (7 : UInt32.t)
  
  predicate resolve'3 (_1 : closure1'1) =
    true
  
  predicate unnest'1 (self : closure1'1) (_2 : closure1'1) =
    _2.field_0'0 = self.field_0'0
  
  predicate postcondition_mut'1 (self : closure1'1) (args : ()) (result_state : closure1'1) (result : bool) =
    (let () = args in result = UInt32.ugt result_state.field_0'0 (7 : UInt32.t)) /\ unnest'1 self result_state
  
  function fn_mut_once'1 (self : closure1'1) (args : ()) (res : bool) : ()
  
  axiom fn_mut_once'1_spec : forall self : closure1'1, args : (), res : bool . [%#sops32] postcondition_once'1 self args res
  = (exists res_state : closure1'1 . postcondition_mut'1 self args res_state res /\ resolve'3 res_state)
  
  function unnest_trans'1 (self : closure1'1) (b : closure1'1) (c : closure1'1) : ()
  
  axiom unnest_trans'1_spec : forall self : closure1'1, b : closure1'1, c : closure1'1 . ([%#sops29] unnest'1 self b)
   -> ([%#sops30] unnest'1 b c)  -> ([%#sops31] unnest'1 self c)
  
  function unnest_refl'1 (self : closure1'1) : ()
  
  axiom unnest_refl'1_spec : forall self : closure1'1 . [%#sops28] unnest'1 self self
  
  function postcondition_mut_unnest'1 (self : closure1'1) (args : ()) (res_state : closure1'1) (res : bool) : ()
  
  axiom postcondition_mut_unnest'1_spec : forall self : closure1'1, args : (), res_state : closure1'1, res : bool . ([%#sops26] postcondition_mut'1 self args res_state res)
   -> ([%#sops27] unnest'1 self res_state)
  
  predicate postcondition'0 (self : closure1'1) (args : ()) (result : bool) =
    [%#s6954] let () = args in result = UInt32.ugt self.field_0'0 (7 : UInt32.t)
  
  function fn_once'0 (self : closure1'1) (args : ()) (res : bool) : ()
  
  axiom fn_once'0_spec : forall self : closure1'1, args : (), res : bool . [%#sops34] postcondition_once'1 self args res
  = (resolve'3 self /\ postcondition'0 self args res)
  
  function fn_mut'0 (self : closure1'1) (args : ()) (res_state : closure1'1) (res : bool) : ()
  
  axiom fn_mut'0_spec : forall self : closure1'1, args : (), res_state : closure1'1, res : bool . [%#sops33] postcondition_mut'1 self args res_state res
  = (self = res_state /\ postcondition'0 self args res)
  
  let rec inversed_if'0 (cond:closure1'1) (branch:closure2'1) (return'  (ret:()))= {[@expl:inversed_if 'cond' type invariant] [%#s6958] inv'0 cond}
    {[@expl:inversed_if 'branch' type invariant] [%#s6959] inv'1 branch}
    {[@expl:inversed_if requires] [%#s69510] precondition'0 cond () /\ (forall b : bool . precondition'1 branch (b))}
    any
    [ return' (result:())-> {[%#s69511] exists b : bool . postcondition'0 cond () b
      /\ postcondition_once'0 branch (not b) ()}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec valid'0 (n:UInt32.t) (return'  (ret:UInt32.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#s6950] (0 : UInt32.t) ] s1
      | s1 =  [ &cond <- { field_0'0 = n } ] s2
      | s2 = Borrow.borrow_mut <UInt32.t> {r}
          (fun (_ret':borrowed UInt32.t) ->  [ &_7 <- _ret' ]  [ &r <- _ret'.final ] s3)
      | s3 =  [ &branch <- { field_0'1 = _7 } ] s4
      | s4 = inversed_if'0 {cond} {branch} (fun (_ret':()) ->  [ &_8 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#s6951] false} s1 | s1 =  [ &_0 <- r ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : UInt32.t = any_l ()
    | & n : UInt32.t = n
    | & r : UInt32.t = any_l ()
    | & cond : closure1'1 = any_l ()
    | & branch : closure2'1 = any_l ()
    | & _7 : borrowed UInt32.t = any_l ()
    | & _8 : () = any_l () ]
    
    [ return' (result:UInt32.t)-> {[@expl:valid ensures] [%#s6952] UInt32.ugt n (7 : UInt32.t)
      /\ result = (2 : UInt32.t)
      \/ UInt32.ule n (7 : UInt32.t) /\ result = (1 : UInt32.t)}
      (! return' {result}) ]
    
end
