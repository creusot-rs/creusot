
module C695_InversedIf
  type c
  type b
  predicate resolve'0 (self : c)
  let rec resolve'0 (self:c) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate postcondition_mut'0 (self : borrowed c) (_2 : ()) (_3 : bool)
  let rec postcondition_mut'0 (self:borrowed c) (_2:()) (_3:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'6 (_x : borrowed c)
  let rec inv'6 (_x:borrowed c) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  predicate postcondition_once'1 (self : c) (_2 : ()) (_3 : bool)
  let rec postcondition_once'1 (self:c) (_2:()) (_3:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'1 self _2 _3} (! return' {result}) ]
    
  predicate inv'4 (_x : bool)
  let rec inv'4 (_x:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  predicate inv'3 (_x : ())
  let rec inv'3 (_x:()) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  predicate inv'0 (_x : c)
  let rec inv'0 (_x:c) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  function fn_mut_once'0 (self : c) (args : ()) (res : bool) : ()
  let rec fn_mut_once'0 (self:c) (args:()) (res:bool) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'4 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'3 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'0 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : c, args : (), res : bool . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'3 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'4 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'1 self args res
  = (exists s : borrowed c . inv'6 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : c) (_2 : c)
  let rec unnest'0 (self:c) (_2:c) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : c) (b : c) (c : c) : ()
  let rec unnest_trans'0 (self:c) (b:c) (c:c) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : c, b : c, c : c . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : c) : ()
  let rec unnest_refl'0 (self:c) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'0 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : c . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed c) (args : ()) (res : bool) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed c) (args:()) (res:bool) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'4 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'3 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'6 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed c, args : (), res : bool . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'3 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'4 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'6 (self : borrowed c)
  let rec invariant'6 (self:borrowed c) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  axiom inv'6 : forall x : borrowed c . inv'6 x = true
  predicate invariant'5 (self : bool) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : bool)
  let rec inv'5 (_x:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : bool . inv'5 x = true
  predicate invariant'4 (self : bool) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : bool . inv'4 x = true
  predicate invariant'3 (self : ()) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : () . inv'3 x = true
  predicate invariant'2 (self : c)
  let rec invariant'2 (self:c) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : c)
  let rec inv'2 (_x:c) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : c . inv'2 x = true
  predicate postcondition'0 (self : c) (_2 : ()) (_3 : bool)
  let rec postcondition'0 (self:c) (_2:()) (_3:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition'0 self _2 _3} (! return' {result}) ]
    
  function fn_once'0 (self : c) (args : ()) (res : bool) : ()
  let rec fn_once'0 (self:c) (args:()) (res:bool) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv'4 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv'3 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv'0 self}
    any [ return' (result:())-> {result = fn_once'0 self args res} (! return' {result}) ] 
  axiom fn_once'0_spec : forall self : c, args : (), res : bool . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv'3 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv'4 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] postcondition_once'1 self args res
  = (resolve'0 self /\ postcondition'0 self args res))
  predicate resolve'1 (self : borrowed c) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed c) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  function fn_mut'0 (self : borrowed c) (args : ()) (res : bool) : ()
  let rec fn_mut'0 (self:borrowed c) (args:()) (res:bool) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv'4 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv'3 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv'6 self}
    any [ return' (result:())-> {result = fn_mut'0 self args res} (! return' {result}) ] 
  axiom fn_mut'0_spec : forall self : borrowed c, args : (), res : bool . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv'3 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv'4 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] postcondition_mut'0 self args res
  = (resolve'1 self /\ postcondition'0 ( * self) args res))
  predicate invariant'1 (self : b)
  let rec invariant'1 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : b)
  let rec inv'1 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : b . inv'1 x = true
  predicate invariant'0 (self : c)
  let rec invariant'0 (self:c) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : c . inv'0 x = true
  predicate postcondition_once'0 (self : b) (_2 : bool) (_3 : ())
  let rec postcondition_once'0 (self:b) (_2:bool) (_3:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  predicate precondition'1 (self : b) (_2 : bool)
  let rec precondition'1 (self:b) (_2:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'1 self _2} (! return' {result}) ]
    
  predicate precondition'0 (self : c) (_2 : ())
  let rec precondition'0 (self:c) (_2:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec call_once'0 (self:b) (args:bool) (return'  (ret:()))= {[@expl:precondition] inv'5 args}
    {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] precondition'1 self args}
    any
    [ return' (result:())-> {inv'3 result}
      {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition_once'0 self args result}
      (! return' {result}) ]
    
  let rec call'0 (self:c) (args:()) (return'  (ret:bool))= {[@expl:precondition] inv'3 args}
    {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 166 27 166 52] precondition'0 self args}
    any
    [ return' (result:bool)-> {inv'4 result}
      {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition'0 self args result}
      (! return' {result}) ]
    
  let rec inversed_if (cond:c) (branch:b) (return'  (ret:()))= {[#"../695.rs" 6 68 6 74] inv'1 branch}
    {[#"../695.rs" 6 59 6 63] inv'0 cond}
    {[#"../695.rs" 4 0 4 79] precondition'0 cond () /\ (forall b : bool . precondition'1 branch (b))}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_7 <- () ] s1 | s1 = call'0 {cond} {_7} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s2) | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = any [ br0 -> {_5 = false} (! bb5) | br1 -> {_5} (! bb4) ]  ] 
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'0 cond} s1
      | s1 = -{resolve'0 cond}- s2
      | s2 =  [ &_11 <- (([#"../695.rs" 10 15 10 20] false)) ] s3
      | s3 = call_once'0 {branch} {_11} (fun (_ret':()) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb7 ]
      
    | bb7 = s0 [ s0 = bb8 ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 cond} s1
      | s1 = -{resolve'0 cond}- s2
      | s2 =  [ &_9 <- (([#"../695.rs" 8 15 8 19] true)) ] s3
      | s3 = call_once'0 {branch} {_9} (fun (_ret':()) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb6 ]
      
    | bb6 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0 [ s0 = bb10 ] 
    | bb10 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & cond : c = cond
    | & branch : b = branch
    | & _5 : bool = any_l () : bool
    | & _7 : () = any_l () : ()
    | & _9 : bool = any_l () : bool
    | & _11 : bool = any_l () : bool ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../695.rs" 5 0 5 91] exists b : bool . postcondition'0 cond () b
      /\ postcondition_once'0 branch (not b) ()}
      (! return' {result}) ]
    
end
module C695_Valid_Closure1_Type
  use prelude.Int8
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  type c695_valid_closure1  =
    | C695_valid_closure1 uint32
    
  let rec c695_valid_closure1 (input:c695_valid_closure1) (ret  (n:uint32))= any
    [ good (n:uint32)-> {C695_valid_closure1 n = input} (! ret {n})
    | bad (n:uint32)-> {C695_valid_closure1 n <> input} {false} any ]
    
end
module C695_Valid_Closure1
  use prelude.Int8
  use prelude.Int
  use prelude.Borrow
  use prelude.UInt32
  use C695_Valid_Closure1_Type as C695_Valid_Closure1_Type
  function field_0'0 [#"../695.rs" 17 15 17 47] (self : C695_Valid_Closure1_Type.c695_valid_closure1) : uint32 =
    let C695_Valid_Closure1_Type.C695_valid_closure1 a = self in a
  let rec field_0'0 (self:C695_Valid_Closure1_Type.c695_valid_closure1) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {result = field_0'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec c695_valid_closure1 (_1:C695_Valid_Closure1_Type.c695_valid_closure1) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = C695_Valid_Closure1_Type.c695_valid_closure1 {_1}
          (fun (r'0:uint32) ->
            UInt32.gt {r'0} {[#"../695.rs" 18 11 18 15] (7 : uint32)} (fun (_ret':bool) ->  [ &res <- _ret' ] s1))
      | s1 =  [ &_0 <- res ] s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : bool = any_l () : bool
    | & _1 : C695_Valid_Closure1_Type.c695_valid_closure1 = _1
    | & res : bool = any_l () : bool ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [#"../695.rs" 17 25 17 45] result = (field_0'0 _1 > (7 : uint32))}
      (! return' {result}) ]
    
end
module C695_Valid_Closure2_Type
  use prelude.Int16
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  type c695_valid_closure2  =
    | C695_valid_closure2 (borrowed uint32)
    
  let rec c695_valid_closure2 (input:c695_valid_closure2) (ret  (r:borrowed uint32))= any
    [ good (r:borrowed uint32)-> {C695_valid_closure2 r = input} (! ret {r})
    | bad (r:borrowed uint32)-> {C695_valid_closure2 r <> input} {false} any ]
    
end
module C695_Valid_Closure2
  use prelude.Int16
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  use C695_Valid_Closure2_Type as C695_Valid_Closure2_Type
  function field_0'0 [#"../695.rs" 19 17 19 64] (self : C695_Valid_Closure2_Type.c695_valid_closure2) : borrowed uint32
   =
    let C695_Valid_Closure2_Type.C695_valid_closure2 a = self in a
  let rec field_0'0 (self:C695_Valid_Closure2_Type.c695_valid_closure2) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {result = field_0'0 self} (! return' {result}) ]
    
  predicate unnest'0 [#"../695.rs" 19 17 19 64] (self : C695_Valid_Closure2_Type.c695_valid_closure2) (_2 : C695_Valid_Closure2_Type.c695_valid_closure2)
    
   =
     ^ field_0'0 _2 =  ^ field_0'0 self
  use prelude.Intrinsic
  predicate resolve'0 (self : borrowed C695_Valid_Closure2_Type.c695_valid_closure2) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed C695_Valid_Closure2_Type.c695_valid_closure2) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec c695_valid_closure2 (_1:borrowed C695_Valid_Closure2_Type.c695_valid_closure2) (b:bool) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ]  ] 
    | bb1 = s0 [ s0 =  [ &_4 <- [#"../695.rs" 20 25 20 26] (2 : uint32) ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_4 <- [#"../695.rs" 20 36 20 37] (1 : uint32) ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = C695_Valid_Closure2_Type.c695_valid_closure2 { * _1}
          (fun (l'0:borrowed uint32) ->
            
            [ &_1 <- { _1 with current = (C695_Valid_Closure2_Type.C695_valid_closure2 ({ l'0 with current = _4 ; }) : C695_Valid_Closure2_Type.c695_valid_closure2) ; } ]
            
            (any [ any_ (_any:uint32)-> (!  [ &_4 <- _any ] s1) ] ))
      | s1 = -{resolve'0 _1}- s2
      | s2 =  [ &res <- [#"../695.rs" 20 14 20 39] () ] s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & _1 : borrowed C695_Valid_Closure2_Type.c695_valid_closure2 = _1
    | & b : bool = b
    | & res : () = any_l () : ()
    | & _4 : uint32 = any_l () : uint32 ]
    
    [ return' (result:())-> {[@expl:postcondition] unnest'0 ( * _1) ( ^ _1)}
      {[@expl:postcondition] [#"../695.rs" 19 27 19 62] b /\  * field_0'0 ( ^ _1) = (2 : uint32)
      \/ not b /\  * field_0'0 ( ^ _1) = (1 : uint32)}
      (! return' {result}) ]
    
end
module C695_Valid
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Int16
  use C695_Valid_Closure2_Type as C695_Valid_Closure2_Type
  predicate invariant'1 (self : C695_Valid_Closure2_Type.c695_valid_closure2) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:C695_Valid_Closure2_Type.c695_valid_closure2) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : C695_Valid_Closure2_Type.c695_valid_closure2)
  let rec inv'1 (_x:C695_Valid_Closure2_Type.c695_valid_closure2) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : C695_Valid_Closure2_Type.c695_valid_closure2 . inv'1 x = true
  use prelude.Int8
  use C695_Valid_Closure1_Type as C695_Valid_Closure1_Type
  predicate invariant'0 (self : C695_Valid_Closure1_Type.c695_valid_closure1) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:C695_Valid_Closure1_Type.c695_valid_closure1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C695_Valid_Closure1_Type.c695_valid_closure1)
  let rec inv'0 (_x:C695_Valid_Closure1_Type.c695_valid_closure1) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C695_Valid_Closure1_Type.c695_valid_closure1 . inv'0 x = true
  use prelude.Intrinsic
  use prelude.Int
  function field_0'1 [#"../695.rs" 19 17 19 64] (self : C695_Valid_Closure2_Type.c695_valid_closure2) : borrowed uint32
   =
    let C695_Valid_Closure2_Type.C695_valid_closure2 a = self in a
  let rec field_0'1 (self:C695_Valid_Closure2_Type.c695_valid_closure2) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {result = field_0'1 self} (! return' {result}) ]
    
  predicate postcondition_once'0 [#"../695.rs" 19 17 19 64] (self : C695_Valid_Closure2_Type.c695_valid_closure2) (args : bool) (result : ())
    
   =
    [#"../695.rs" 19 27 19 62] let (b) = args in b /\  ^ field_0'1 self = (2 : uint32)
    \/ not b /\  ^ field_0'1 self = (1 : uint32)
  function field_0'0 [#"../695.rs" 17 15 17 47] (self : C695_Valid_Closure1_Type.c695_valid_closure1) : uint32 =
    let C695_Valid_Closure1_Type.C695_valid_closure1 a = self in a
  let rec field_0'0 (self:C695_Valid_Closure1_Type.c695_valid_closure1) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {result = field_0'0 self} (! return' {result}) ]
    
  predicate postcondition'0 [#"../695.rs" 17 15 17 47] (self : C695_Valid_Closure1_Type.c695_valid_closure1) (_ : ()) (result : bool)
    
   =
    [#"../695.rs" 17 25 17 45] result = (field_0'0 self > (7 : uint32))
  predicate precondition'1 [#"../695.rs" 19 17 19 64] (self : C695_Valid_Closure2_Type.c695_valid_closure2) (args : bool)
    
   =
    let (b) = args in true
  predicate precondition'0 [#"../695.rs" 17 15 17 47] (self : C695_Valid_Closure1_Type.c695_valid_closure1) (_ : ()) =
    true
  let rec inversed_if'0 (cond:C695_Valid_Closure1_Type.c695_valid_closure1) (branch:C695_Valid_Closure2_Type.c695_valid_closure2) (return'  (ret:()))= {[@expl:precondition] [#"../695.rs" 6 68 6 74] inv'1 branch}
    {[@expl:precondition] [#"../695.rs" 6 59 6 63] inv'0 cond}
    {[@expl:precondition] [#"../695.rs" 4 0 4 79] precondition'0 cond ()
    /\ (forall b : bool . precondition'1 branch (b))}
    any
    [ return' (result:())-> {[#"../695.rs" 5 0 5 91] exists b : bool . postcondition'0 cond () b
      /\ postcondition_once'0 branch (not b) ()}
      (! return' {result}) ]
    
  predicate resolve'0 [#"../695.rs" 17 15 17 47] (_1 : C695_Valid_Closure1_Type.c695_valid_closure1) =
    true
  let rec valid (n:uint32) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [#"../695.rs" 16 16 16 20] (0 : uint32) ] s1
      | s1 = 
        [ &cond <- C695_Valid_Closure1_Type.C695_valid_closure1 n : C695_Valid_Closure1_Type.c695_valid_closure1 ]
        
        s2
      | s2 = Borrow.borrow_mut <uint32> {r} (fun (_ret':borrowed uint32) ->  [ &_7 <- _ret' ]  [ &r <-  ^ _7 ] s3)
      | s3 = 
        [ &branch <- C695_Valid_Closure2_Type.C695_valid_closure2 _7 : C695_Valid_Closure2_Type.c695_valid_closure2 ]
        
        (any [ any_ (_any:borrowed uint32)-> (!  [ &_7 <- _any ] s4) ] )
      | s4 = -{resolve'0 cond}- s5
      | s5 = inversed_if'0 {cond} {branch} (fun (_ret':()) ->  [ &_8 <- _ret' ] s6)
      | s6 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:assertion] [#"../695.rs" 22 20 22 25] false} s1 | s1 =  [ &_0 <- r ] s2 | s2 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l () : uint32
    | & n : uint32 = n
    | & r : uint32 = any_l () : uint32
    | & cond : C695_Valid_Closure1_Type.c695_valid_closure1 = any_l () : C695_Valid_Closure1_Type.c695_valid_closure1
    | & branch : C695_Valid_Closure2_Type.c695_valid_closure2 = any_l () : C695_Valid_Closure2_Type.c695_valid_closure2
    | & _7 : borrowed uint32 = any_l () : borrowed uint32
    | & _8 : () = any_l () : () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [#"../695.rs" 14 10 14 71] n > (7 : uint32)
      /\ result = (2 : uint32)
      \/ n <= (7 : uint32) /\ result = (1 : uint32)}
      (! return' {result}) ]
    
end
