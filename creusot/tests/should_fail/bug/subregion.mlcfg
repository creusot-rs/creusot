
module Subregion_ListReversalH_Interface
  use prelude.Int
  use prelude.UIntSize
  val list_reversal_h [#"../subregion.rs" 3 0 3 37] (l : usize) : usize
end
module Subregion_ListReversalH
  use prelude.Int
  use prelude.UIntSize
  let rec cfg list_reversal_h [#"../subregion.rs" 3 0 3 37] [@cfg:stackify] [@cfg:subregion_analysis] (l : usize) : usize
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var l_1 : usize;
  var _2 : ();
  var r_3 : usize;
  var _4 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : ();
  var x_11 : usize;
  var tmp_12 : usize;
  var _13 : usize;
  var _14 : ();
  var _15 : ();
  var _16 : ();
  {
    l_1 <- l;
    goto BB0
  }
  BB0 {
    r_3 <- ([#"../subregion.rs" 4 16 4 17] (0 : usize));
    goto BB1
  }
  BB1 {
    invariant { [#"../subregion.rs" 5 16 5 20] true };
    goto BB2
  }
  BB2 {
    _8 <- l_1;
    _7 <- ([#"../subregion.rs" 6 10 6 16] _8 <> ([#"../subregion.rs" 6 15 6 16] (0 : usize)));
    switch (_7)
      | False -> goto BB4
      | True -> goto BB3
      end
  }
  BB3 {
    assert { [@expl:assertion] [#"../subregion.rs" 7 22 7 27] false };
    _9 <- ();
    x_11 <- r_3;
    tmp_12 <- l_1;
    _13 <- tmp_12;
    r_3 <- _13;
    _13 <- any usize;
    _6 <- ();
    goto BB1
  }
  BB4 {
    _4 <- ();
    _0 <- r_3;
    return _0
  }
  
end
