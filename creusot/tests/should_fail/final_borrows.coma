
module FinalBorrows_NotFinalBorrow
  type t
  
  let%span sfinal_borrows0 = "../final_borrows.rs" 7 18 7 27
  
  let%span sfinal_borrows1 = "../final_borrows.rs" 5 27 5 30
  
  let%span span2 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed t)
  
  predicate inv'1 (_x : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed t) =
    [%#span2]  ^ self =  * self
  
  let rec not_final_borrow (bor:borrowed t) (return'  (ret:()))= {[%#sfinal_borrows1] inv'1 bor}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <t> { * bor}
          (fun (_ret':borrowed t) ->  [ &b1 <- _ret' ]  [ &bor <- { bor with current = ( ^ b1) ; } ] s1)
      | s1 = -{inv'0 ( ^ b1)}- s2
      | s2 = {[@expl:type invariant] inv'1 b1} s3
      | s3 = -{resolve'0 b1}- s4
      | s4 = {[@expl:assertion] [%#sfinal_borrows0] b1 = bor} s5
      | s5 = Borrow.borrow_final <t> { * bor} {Borrow.get_id bor}
          (fun (_ret':borrowed t) ->  [ &_b2 <- _ret' ]  [ &bor <- { bor with current = ( ^ _b2) ; } ] s6)
      | s6 = -{inv'0 ( ^ _b2)}- s7
      | s7 = {[@expl:type invariant] inv'1 _b2} s8
      | s8 = -{resolve'0 _b2}- s9
      | s9 = {[@expl:type invariant] inv'1 bor} s10
      | s10 = -{resolve'0 bor}- s11
      | s11 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () | & bor : borrowed t = bor | & b1 : borrowed t = any_l () | & _b2 : borrowed t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module FinalBorrows_StoreChangesProphecy
  type t
  
  let%span sfinal_borrows0 = "../final_borrows.rs" 15 18 15 27
  
  let%span sfinal_borrows1 = "../final_borrows.rs" 11 33 11 36
  
  let%span sfinal_borrows2 = "../final_borrows.rs" 11 46 11 47
  
  let%span span3 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed t)
  
  predicate inv'1 (_x : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : t)
  
  predicate resolve'0 (self : borrowed t) =
    [%#span3]  ^ self =  * self
  
  let rec store_changes_prophecy (bor:borrowed t) (x:t) (return'  (ret:()))= {[%#sfinal_borrows2] inv'0 x}
    {[%#sfinal_borrows1] inv'1 bor}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <t> { * bor} {Borrow.get_id bor}
          (fun (_ret':borrowed t) ->  [ &b1 <- _ret' ]  [ &bor <- { bor with current = ( ^ b1) ; } ] s1)
      | s1 = -{inv'0 ( ^ b1)}- s2
      | s2 = {[@expl:type invariant] inv'1 b1} s3
      | s3 = -{resolve'0 b1}- s4
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &bor <- { bor with current = x ; } ] (any [ any_ (_any:t)-> (!  [ &x <- _any ] s1) ] )
      | s1 = {[@expl:type invariant] inv'0 ( * bor)} s2
      | s2 = -{resolve'1 ( * bor)}- s3
      | s3 = {[@expl:type invariant] inv'1 bor} s4
      | s4 = -{resolve'0 bor}- s5
      | s5 = bb3 ]
      
    | bb3 = s0 [ s0 = {[@expl:assertion] [%#sfinal_borrows0] b1 = bor} s1 | s1 = bb4 ] 
    | bb4 = return' {_0} ]
    ) [ & _0 : () = any_l () | & bor : borrowed t = bor | & x : t = x | & b1 : borrowed t = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module FinalBorrows_CallChangesProphecy_Inner
  let%span sfinal_borrows0 = "../final_borrows.rs" 20 8 20 9
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  let rec inner (_1:()) (return'  (ret:int32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sfinal_borrows0] (2 : int32) ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : int32 = any_l () ]  [ return' (result:int32)-> (! return' {result}) ] 
end
module FinalBorrows_CallChangesProphecy
  let%span sfinal_borrows0 = "../final_borrows.rs" 24 11 24 18
  
  let%span sfinal_borrows1 = "../final_borrows.rs" 25 18 25 27
  
  let%span span2 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  let rec inner'0 (_1:()) (return'  (ret:int32))= any [ return' (result:int32)-> (! return' {result}) ] 
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span2]  ^ self =  * self
  
  let rec call_changes_prophecy (bor:borrowed int32) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <int32> { * bor} {Borrow.get_id bor}
          (fun (_ret':borrowed int32) ->  [ &b1 <- _ret' ]  [ &bor <- { bor with current = ( ^ b1) ; } ] s1)
      | s1 = -{resolve'0 b1}- s2
      | s2 = inner'0 {[%#sfinal_borrows0] ()} (fun (_ret':int32) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &bor <- { bor with current = _3 ; } ] (any [ any_ (_any:int32)-> (!  [ &_3 <- _any ] s1) ] )
      | s1 = -{resolve'0 bor}- s2
      | s2 = {[@expl:assertion] [%#sfinal_borrows1] b1 = bor} s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () | & bor : borrowed int32 = bor | & b1 : borrowed int32 = any_l () | & _3 : int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module FinalBorrows_UnnestingFails
  type t
  
  let%span sfinal_borrows0 = "../final_borrows.rs" 30 38 30 39
  
  let%span sfinal_borrows1 = "../final_borrows.rs" 29 10 29 32
  
  let%span sfinal_borrows2 = "../final_borrows.rs" 30 68 30 77
  
  let%span span3 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (borrowed (t, t)))
  
  predicate inv'2 (_x : borrowed (borrowed (t, t)))
  
  axiom inv'2 : forall x : borrowed (borrowed (t, t)) . inv'2 x = true
  
  predicate invariant'1 (self : borrowed t)
  
  predicate inv'1 (_x : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (borrowed (t, t))) =
    [%#span3]  ^ self =  * self
  
  predicate resolve'0 (self : borrowed t) =
    [%#span3]  ^ self =  * self
  
  let rec unnesting_fails (x:borrowed (borrowed (t, t))) (return'  (ret:borrowed t))= {[%#sfinal_borrows0] inv'2 x}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <t> {let (r'0, _) =  *  * x in r'0}
          (fun (_ret':borrowed t) ->
             [ &_4 <- _ret' ] 
             [ &x <- { x with current = { ( * x) with current = (let (_, l'2) =  *  * x in ( ^ _4, l'2)) ; } ; } ] 
            s1)
      | s1 = -{inv'0 ( ^ _4)}- s2
      | s2 = Borrow.borrow_final <t> { * _4} {Borrow.get_id _4}
          (fun (_ret':borrowed t) ->  [ &_2 <- _ret' ]  [ &_4 <- { _4 with current = ( ^ _2) ; } ] s3)
      | s3 = -{inv'0 ( ^ _2)}- s4
      | s4 = Borrow.borrow_final <t> { * _2} {Borrow.get_id _2}
          (fun (_ret':borrowed t) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = ( ^ _0) ; } ] s5)
      | s5 = -{inv'0 ( ^ _0)}- s6
      | s6 = {[@expl:type invariant] inv'1 _4} s7
      | s7 = -{resolve'0 _4}- s8
      | s8 = {[@expl:type invariant] inv'1 _2} s9
      | s9 = -{resolve'0 _2}- s10
      | s10 = {[@expl:type invariant] inv'2 x} s11
      | s11 = -{resolve'1 x}- s12
      | s12 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed t = any_l ()
    | & x : borrowed (borrowed (t, t)) = x
    | & _2 : borrowed t = any_l ()
    | & _4 : borrowed t = any_l () ]
    
    [ return' (result:borrowed t)-> {[@expl:postcondition] [%#sfinal_borrows2] inv'1 result}
      {[@expl:postcondition] [%#sfinal_borrows1] result
      = Borrow.borrow_logic (let (a, _) =  *  * x in a) (let (a, _) =  ^  * x in a) (Borrow.inherit_id (Borrow.get_id ( * x)) 1)}
      (! return' {result}) ]
    
end
module CreusotContracts_Logic_Seq2_Seq_Type
  type t_seq 't
end
module FinalBorrows_Indexing
  type t
  
  let%span sfinal_borrows0 = "../final_borrows.rs" 38 11 38 12
  
  let%span sfinal_borrows1 = "../final_borrows.rs" 38 9 38 13
  
  let%span sfinal_borrows2 = "../final_borrows.rs" 35 11 35 24
  
  let%span sfinal_borrows3 = "../final_borrows.rs" 37 19 37 20
  
  let%span sfinal_borrows4 = "../final_borrows.rs" 36 10 36 37
  
  let%span sfinal_borrows5 = "../final_borrows.rs" 37 35 37 41
  
  let%span span6 = "../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span7 = "../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  let%span span8 = "" 0 0 0 0
  
  let%span span9 = "../../../../creusot-contracts/src/std/slice.rs" 18 21 18 25
  
  let%span span10 = "../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span12 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span13 = "../../../../creusot-contracts/src/std/slice.rs" 67 23 67 27
  
  let%span span14 = "../../../../creusot-contracts/src/std/slice.rs" 64 14 64 41
  
  let%span span15 = "../../../../creusot-contracts/src/std/slice.rs" 65 4 65 82
  
  let%span span16 = "../../../../creusot-contracts/src/std/slice.rs" 66 4 66 85
  
  let%span span17 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Slice
  
  predicate invariant'3 (self : slice t)
  
  predicate inv'3 (_x : slice t)
  
  axiom inv'3 : forall x : slice t . inv'3 x = true
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  function len'1 (self : Seq'0.t_seq (borrowed t)) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq (borrowed t) . [%#span6] len'1 self >= 0
  
  constant empty'1 : Seq'0.t_seq (borrowed t)
  
  function empty_len'1 (_1 : ()) : ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span7] len'1 (empty'1 : Seq'0.t_seq (borrowed t)) = 0
  
  function len'0 (self : Seq'0.t_seq t) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq t . [%#span6] len'0 self >= 0
  
  constant empty'0 : Seq'0.t_seq t
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span7] len'0 (empty'0 : Seq'0.t_seq t) = 0
  
  predicate invariant'2 (self : borrowed (slice t))
  
  predicate inv'2 (_x : borrowed (slice t))
  
  axiom inv'2 : forall x : borrowed (slice t) . inv'2 x = true
  
  predicate invariant'1 (self : borrowed t)
  
  predicate inv'1 (_x : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  function index_logic'0 (self : Seq'0.t_seq (borrowed t)) (_2 : int) : borrowed t
  
  function index_logic'2 (self : Seq'0.t_seq t) (_2 : int) : t
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant max'0 : usize = [%#span8] (18446744073709551615 : usize)
  
  function shallow_model'1 (self : slice t) : Seq'0.t_seq t
  
  axiom shallow_model'1_spec : forall self : slice t . ([%#span9] inv'3 self)
   -> ([%#span10] len'0 (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  function index_logic'1 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#span11] index_logic'2 (shallow_model'1 self) ix
  
  function shallow_model'0 (self : borrowed (slice t)) : Seq'0.t_seq t =
    [%#span12] shallow_model'1 ( * self)
  
  function to_mut_seq'0 (self : borrowed (slice t)) : Seq'0.t_seq (borrowed t)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t) . ([%#span13] inv'2 self)
   -> ([%#span16] forall i : int . 0 <= i /\ i < len'1 (to_mut_seq'0 self)
   ->  ^ index_logic'0 (to_mut_seq'0 self) i = index_logic'1 ( ^ self) i)
  && ([%#span15] forall i : int . 0 <= i /\ i < len'1 (to_mut_seq'0 self)
   ->  * index_logic'0 (to_mut_seq'0 self) i = index_logic'1 ( * self) i)
  && ([%#span14] len'1 (to_mut_seq'0 self) = len'0 (shallow_model'0 self))
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (slice t)) =
    [%#span17]  ^ self =  * self
  
  predicate resolve'0 (self : borrowed t) =
    [%#span17]  ^ self =  * self
  
  let rec indexing (x:borrowed (slice t)) (return'  (ret:borrowed t))= {[%#sfinal_borrows3] inv'2 x}
    {[%#sfinal_borrows2] len'0 (shallow_model'0 x) >= 1}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_6 <- [%#sfinal_borrows0] (0 : usize) ] s1
      | s1 =  [ &_7 <- Slice.length ( * x) ] s2
      | s2 = UIntSize.lt {_6} {_7} (fun (_ret':bool) ->  [ &_8 <- _ret' ] s3)
      | s3 = {[@expl:index in bounds] [%#sfinal_borrows1] _8} s4
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = Slice.get <t> { * x} {_6}
          (fun (r'0:t) ->
            Borrow.borrow_mut <t> {r'0}
              (fun (_ret':borrowed t) ->
                 [ &_5 <- _ret' ] 
                Slice.get <t> { * x} {_6}
                  (fun (l'0:t) ->
                    Slice.set <t> { * x} {_6} { ^ _5} (fun (l'1:slice t) ->  [ &x <- { x with current = l'1 ; } ] s1))))
      | s1 = -{inv'0 ( ^ _5)}- s2
      | s2 = Borrow.borrow_final <t> { * _5} {Borrow.get_id _5}
          (fun (_ret':borrowed t) ->  [ &_2 <- _ret' ]  [ &_5 <- { _5 with current = ( ^ _2) ; } ] s3)
      | s3 = -{inv'0 ( ^ _2)}- s4
      | s4 = Borrow.borrow_final <t> { * _2} {Borrow.get_id _2}
          (fun (_ret':borrowed t) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = ( ^ _0) ; } ] s5)
      | s5 = -{inv'0 ( ^ _0)}- s6
      | s6 = {[@expl:type invariant] inv'1 _5} s7
      | s7 = -{resolve'0 _5}- s8
      | s8 = {[@expl:type invariant] inv'1 _2} s9
      | s9 = -{resolve'0 _2}- s10
      | s10 = {[@expl:type invariant] inv'2 x} s11
      | s11 = -{resolve'1 x}- s12
      | s12 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed t = any_l ()
    | & x : borrowed (slice t) = x
    | & _2 : borrowed t = any_l ()
    | & _5 : borrowed t = any_l ()
    | & _6 : usize = any_l ()
    | & _7 : usize = any_l ()
    | & _8 : bool = any_l () ]
    
    [ return' (result:borrowed t)-> {[@expl:postcondition] [%#sfinal_borrows5] inv'1 result}
      {[@expl:postcondition] [%#sfinal_borrows4] result = index_logic'0 (to_mut_seq'0 x) 0}
      (! return' {result}) ]
    
end
