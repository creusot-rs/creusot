module M_final_borrows__not_final_borrow [#"final_borrows.rs" 5 0 5 45]
  type t
  
  let%span sfinal_borrows0 = "final_borrows.rs" 8 18 8 27
  let%span sfinal_borrows1 = "final_borrows.rs" 5 33 5 36
  let%span sresolve2 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant3 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  predicate inv'0 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed t) =
    [%#sinvariant3] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed t [inv'1 x] . inv'1 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed t) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec not_final_borrow (bor:borrowed t) (return'  (ret:()))= {[%#sfinal_borrows1] inv'1 bor}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 bor.current}
        Borrow.borrow_mut <t> {bor.current}
          (fun (_ret':borrowed t) ->
             [ &b1 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &bor <- { bor with current = _ret'.final ; } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'1 b1} s2
      | s2 = -{resolve'0 b1}- s3
      | s3 = {inv'0 bor.current}
        Borrow.borrow_final <t> {bor.current} {Borrow.get_id bor}
          (fun (_ret':borrowed t) ->
             [ &_b2 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &bor <- { bor with current = _ret'.final ; } ] 
            s4)
      | s4 = {[@expl:type invariant] inv'1 _b2} s5
      | s5 = -{resolve'0 _b2}- s6
      | s6 = {[@expl:type invariant] inv'1 bor} s7
      | s7 = -{resolve'0 bor}- s8
      | s8 = {[@expl:assertion] [%#sfinal_borrows0] b1 = bor} s9
      | s9 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () | & bor : borrowed t = bor | & b1 : borrowed t = any_l () | & _b2 : borrowed t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_final_borrows__store_changes_prophecy [#"final_borrows.rs" 11 0 11 51]
  type t
  
  let%span sfinal_borrows0 = "final_borrows.rs" 16 18 16 27
  let%span sfinal_borrows1 = "final_borrows.rs" 11 39 11 42
  let%span sresolve2 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant3 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  predicate inv'0 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed t) =
    [%#sinvariant3] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed t [inv'1 x] . inv'1 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed t) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec store_changes_prophecy (bor:borrowed t) (return'  (ret:()))= {[%#sfinal_borrows1] inv'1 bor}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 bor.current}
        Borrow.borrow_mut <t> {bor.current}
          (fun (_ret':borrowed t) ->
             [ &b1 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &bor <- { bor with current = _ret'.final ; } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'1 b1} s2
      | s2 = -{resolve'0 b1}- s3
      | s3 =  [ &val' <- b1.current ] s4
      | s4 =  [ &bor <- { bor with current = val' ; } ] s5
      | s5 = {[@expl:type invariant] inv'1 bor} s6
      | s6 = -{resolve'0 bor}- s7
      | s7 = {[@expl:assertion] [%#sfinal_borrows0] b1 = bor} s8
      | s8 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & bor : borrowed t = bor | & b1 : borrowed t = any_l () | & val' : t = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_final_borrows__store_changes_prophecy_2 [#"final_borrows.rs" 19 0 19 59]
  type t
  
  let%span sfinal_borrows0 = "final_borrows.rs" 24 18 24 27
  let%span sfinal_borrows1 = "final_borrows.rs" 19 41 19 44
  let%span sfinal_borrows2 = "final_borrows.rs" 19 54 19 55
  let%span sresolve3 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant4 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  predicate inv'0 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed t) =
    [%#sinvariant4] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed t [inv'1 x] . inv'1 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed t) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec store_changes_prophecy_2 (bor:borrowed t) (x:t) (return'  (ret:()))= {[%#sfinal_borrows2] inv'0 x}
    {[%#sfinal_borrows1] inv'1 bor}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 bor.current}
        Borrow.borrow_mut <t> {bor.current}
          (fun (_ret':borrowed t) ->
             [ &b1 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &bor <- { bor with current = _ret'.final ; } ] 
            s1)
      | s1 =  [ &b1 <- { b1 with current = x ; } ] s2
      | s2 = {[@expl:type invariant] inv'1 b1} s3
      | s3 = -{resolve'0 b1}- s4
      | s4 =  [ &bor <- { bor with current = x ; } ] s5
      | s5 = {[@expl:type invariant] inv'1 bor} s6
      | s6 = -{resolve'0 bor}- s7
      | s7 = {[@expl:assertion] [%#sfinal_borrows0] b1 = bor} s8
      | s8 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & bor : borrowed t = bor | & x : t = x | & b1 : borrowed t = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_final_borrows__call_changes_prophecy [#"final_borrows.rs" 27 0 27 43]
  let%span sfinal_borrows0 = "final_borrows.rs" 33 19 33 33
  let%span sfinal_borrows1 = "final_borrows.rs" 35 18 35 31
  let%span sfinal_borrows2 = "final_borrows.rs" 36 10 36 17
  let%span sfinal_borrows3 = "final_borrows.rs" 38 11 38 18
  let%span sfinal_borrows4 = "final_borrows.rs" 39 18 39 39
  let%span sfinal_borrows5 = "final_borrows.rs" 29 14 29 26
  let%span sresolve6 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed int32) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'1 _1
  
  use prelude.prelude.Int32
  
  let rec inner'0 (_1:()) (return'  (ret:int32))= any
    [ return' (result:int32)-> {[%#sfinal_borrows5] Int32.to_int result = 2} (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec call_changes_prophecy (bor:borrowed int32) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &bor_snap <- [%#sfinal_borrows0] Snapshot.new bor ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <int32> {bor.current}
          (fun (_ret':borrowed int32) ->  [ &b1 <- _ret' ]  [ &bor <- { bor with current = _ret'.final ; } ] s1)
      | s1 =  [ &b1_snap <- [%#sfinal_borrows1] Snapshot.new b1 ] s2
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 = inner'0 {[%#sfinal_borrows2] ()} (fun (_ret':int32) ->  [ &_7 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &b1 <- { b1 with current = _7 ; } ] s1
      | s1 = -{resolve'0 b1}- s2
      | s2 = inner'0 {[%#sfinal_borrows3] ()} (fun (_ret':int32) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = s0
      [ s0 =  [ &bor <- { bor with current = _8 ; } ] s1
      | s1 = -{resolve'0 bor}- s2
      | s2 = {[@expl:assertion] [%#sfinal_borrows4] Snapshot.inner b1_snap = Snapshot.inner bor_snap} s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & bor : borrowed int32 = bor
    | & bor_snap : Snapshot.snap_ty (borrowed int32) = any_l ()
    | & b1 : borrowed int32 = any_l ()
    | & b1_snap : Snapshot.snap_ty (borrowed int32) = any_l ()
    | & _7 : int32 = any_l ()
    | & _8 : int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_final_borrows__unnesting_fails [#"final_borrows.rs" 42 0 42 24]
  let%span sfinal_borrows0 = "final_borrows.rs" 43 16 43 17
  let%span sfinal_borrows1 = "final_borrows.rs" 49 18 49 34
  let%span sresolve2 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'3 (self : borrowed (borrowed int32)) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (borrowed int32)) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  meta "compute_max_steps" 1000000
  
  let rec unnesting_fails (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#sfinal_borrows0] (0 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &bor <- _ret' ]  [ &x <- _ret'.final ] s2)
      | s2 = Borrow.borrow_mut <borrowed int32> {bor}
          (fun (_ret':borrowed (borrowed int32)) ->  [ &nested <- _ret' ]  [ &bor <- _ret'.final ] s3)
      | s3 = Borrow.borrow_mut <int32> {(nested.current).current}
          (fun (_ret':borrowed int32) ->
             [ &rebor1 <- _ret' ] 
             [ &nested <- { nested with current = { nested.current with current = _ret'.final ; } ; } ] 
            s4)
      | s4 = -{resolve'0 rebor1}- s5
      | s5 = Borrow.borrow_mut <int32> {(nested.current).current}
          (fun (_ret':borrowed int32) ->
             [ &rebor2 <- _ret' ] 
             [ &nested <- { nested with current = { nested.current with current = _ret'.final ; } ; } ] 
            s6)
      | s6 = -{resolve'0 rebor2}- s7
      | s7 = -{resolve'1 nested}- s8
      | s8 = -{resolve'0 bor}- s9
      | s9 = {[@expl:assertion] [%#sfinal_borrows1] rebor1 = rebor2} s10
      | s10 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & bor : borrowed int32 = any_l ()
    | & nested : borrowed (borrowed int32) = any_l ()
    | & rebor1 : borrowed int32 = any_l ()
    | & rebor2 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_final_borrows__move_place_without_deref [#"final_borrows.rs" 53 0 53 52]
  type t
  
  let%span sfinal_borrows0 = "final_borrows.rs" 59 18 59 28
  let%span sfinal_borrows1 = "final_borrows.rs" 53 35 53 38
  let%span sfinal_borrows2 = "final_borrows.rs" 56 16 56 17
  let%span sfinal_borrows3 = "final_borrows.rs" 55 14 55 24
  let%span sresolve4 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant5 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed6 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  predicate inv'1 (_1 : borrowed t)
  
  predicate invariant'1 (self : borrowed t) =
    [%#sboxed6] inv'1 self
  
  predicate inv'2 (_1 : borrowed t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed t [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate inv'0 (_1 : t)
  
  predicate invariant'0 (self : borrowed t) =
    [%#sinvariant5] inv'0 self.current /\ inv'0 self.final
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed t [inv'1 x] . inv'1 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  let rec inner'0 (x:borrowed t) (return'  (ret:()))= {[@expl:precondition] [%#sfinal_borrows2] inv'2 x}
    any [ return' (result:())-> {[%#sfinal_borrows3] x.current = x.final} (! return' {result}) ] 
  
  predicate resolve'1 (self : borrowed t) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec move_place_without_deref (bor:borrowed t) (return'  (ret:()))= {[%#sfinal_borrows1] inv'2 bor}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 bor.current}
        Borrow.borrow_mut <t> {bor.current}
          (fun (_ret':borrowed t) ->
             [ &b1 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &bor <- { bor with current = _ret'.final ; } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'1 b1} s2
      | s2 = -{resolve'0 b1}- s3
      | s3 = inner'0 {bor} (fun (_ret':()) ->  [ &_3 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sfinal_borrows0] b1 = bor} s1 | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & bor : borrowed t = bor | & b1 : borrowed t = any_l () | & _3 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
