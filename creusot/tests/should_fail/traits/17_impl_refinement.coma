module M_17_impl_refinement__qyi14398438181735515246__my_function [#"17_impl_refinement.rs" 14 4 14 34] (* <() as Tr> *)
  let%span s17_impl_refinement0 = "17_impl_refinement.rs" 15 8 15 10
  let%span s17_impl_refinement1 = "17_impl_refinement.rs" 12 15 12 19
  let%span s17_impl_refinement2 = "17_impl_refinement.rs" 13 14 13 27
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec my_function (self:()) (return'  (ret:usize))= {[%#s17_impl_refinement1] true}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- [%#s17_impl_refinement0] (20 : usize) ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : usize = any_l () ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [%#s17_impl_refinement2] UIntSize.to_int result >= 15}
      (! return' {result}) ]
    
end
module M_17_impl_refinement__qyi15782060473717464421__need_false [#"17_impl_refinement.rs" 29 4 29 25] (* <() as ReqFalse> *)
  let%span s17_impl_refinement0 = "17_impl_refinement.rs" 28 15 28 23
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt64
  
  constant y  : uint64
  
  function need_false [#"17_impl_refinement.rs" 29 4 29 25] (y : uint64) : ()
  
  goal vc_need_false : true
end
module M_17_impl_refinement__qyi14398438181735515246 [#"17_impl_refinement.rs" 11 0 11 14] (* <() as Tr> *)
  let%span s17_impl_refinement0 = "17_impl_refinement.rs" 14 4 14 34
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  goal my_function_refn : [%#s17_impl_refinement0] forall self : () . inv'0 self
   -> (forall result : usize . UIntSize.to_int result >= 15  -> UIntSize.to_int result >= 10)
end
module M_17_impl_refinement__qyi15782060473717464421 [#"17_impl_refinement.rs" 25 0 25 20] (* <() as ReqFalse> *)
  let%span s17_impl_refinement0 = "17_impl_refinement.rs" 29 4 29 25
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  goal need_false_refn : [%#s17_impl_refinement0] forall x : uint64 . UInt64.to_int x >= 10  -> UInt64.to_int x >= 15
end
