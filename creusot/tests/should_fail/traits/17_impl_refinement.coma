
module C17ImplRefinement_Impl0_MyFunction
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Intrinsic
  use prelude.UIntSize
  use prelude.Int
  let rec my_function (self:()) (return'  (ret:usize))= {[#"../17_impl_refinement.rs" 12 15 12 19] true}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../17_impl_refinement.rs" 15 8 15 10] (20 : usize) ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : usize = any_l () : usize ] 
    [ return' (result:usize)-> {[@expl:postcondition] [#"../17_impl_refinement.rs" 13 14 13 27] UIntSize.to_int result
      >= 15}
      (! return' {result}) ]
    
end
module C17ImplRefinement_Impl1_NeedFalse_Impl
  use prelude.UInt64
  use prelude.Int
  use prelude.UInt64
  constant y  : uint64
  function need_false [#"../17_impl_refinement.rs" 29 4 29 25] (y : uint64) : ()
  goal vc_need_false : true
end
module C17ImplRefinement_Impl0
  predicate invariant'0 (self : ()) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : ())
  let rec inv'0 (_x:()) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : () . inv'0 x = true
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  goal my_function_refn : [#"../17_impl_refinement.rs" 14 4 14 34] forall self : () . inv'0 self
   -> (forall result : usize . UIntSize.to_int result >= 15  -> UIntSize.to_int result >= 10)
end
module C17ImplRefinement_Impl1
  use prelude.UInt64
  use prelude.UInt64
  use prelude.Int
  goal need_false_refn : [#"../17_impl_refinement.rs" 29 4 29 25] forall x : uint64 . UInt64.to_int x >= 10
   -> UInt64.to_int x >= 15
end
