
module C17ImplRefinement_Impl0_MyFunction_Interface
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  val my_function [#"../17_impl_refinement.rs" 14 4 14 34] (self : ()) : usize
    requires {[#"../17_impl_refinement.rs" 12 15 12 19] true}
    ensures { [#"../17_impl_refinement.rs" 13 14 13 27] UIntSize.to_int result >= 15 }
    
end
module C17ImplRefinement_Impl0_MyFunction
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  let rec cfg my_function [#"../17_impl_refinement.rs" 14 4 14 34] [@cfg:stackify] [@cfg:subregion_analysis] (self : ()) : usize
    requires {[#"../17_impl_refinement.rs" 12 15 12 19] true}
    ensures { [#"../17_impl_refinement.rs" 13 14 13 27] UIntSize.to_int result >= 15 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../17_impl_refinement.rs" 15 8 15 10] (20 : usize));
    return _0
  }
  
end
module C17ImplRefinement_Impl1_NeedFalse_Stub
  use prelude.UInt64
  use prelude.Int
  function need_false [#"../17_impl_refinement.rs" 29 4 29 25] (y : uint64) : ()
end
module C17ImplRefinement_Impl1_NeedFalse_Interface
  use prelude.UInt64
  use prelude.Int
  function need_false [#"../17_impl_refinement.rs" 29 4 29 25] (y : uint64) : ()
  val need_false [#"../17_impl_refinement.rs" 29 4 29 25] (y : uint64) : ()
    requires {[#"../17_impl_refinement.rs" 28 15 28 23] UInt64.to_int y >= 15}
    ensures { result = need_false y }
    
end
module C17ImplRefinement_Impl1_NeedFalse
  use prelude.UInt64
  use prelude.Int
  function need_false [#"../17_impl_refinement.rs" 29 4 29 25] (y : uint64) : () =
    [#"../17_impl_refinement.rs" 27 4 27 12] ()
  val need_false [#"../17_impl_refinement.rs" 29 4 29 25] (y : uint64) : ()
    requires {[#"../17_impl_refinement.rs" 28 15 28 23] UInt64.to_int y >= 15}
    ensures { result = need_false y }
    
end
module C17ImplRefinement_Impl1_NeedFalse_Impl
  use prelude.UInt64
  use prelude.Int
  let rec ghost function need_false [#"../17_impl_refinement.rs" 29 4 29 25] (y : uint64) : ()
    requires {[#"../17_impl_refinement.rs" 28 15 28 23] UInt64.to_int y >= 15}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../17_impl_refinement.rs" 27 4 27 12] ()
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C17ImplRefinement_Impl0
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = ()
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = (),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal my_function_refn : [#"../17_impl_refinement.rs" 14 4 14 34] forall self : () . Inv0.inv self -> (forall result : usize . UIntSize.to_int result >= 15 -> UIntSize.to_int result >= 10)
end
module C17ImplRefinement_Impl1
  use prelude.Int
  use prelude.UInt64
  goal need_false_refn : [#"../17_impl_refinement.rs" 29 4 29 25] forall x : uint64 . UInt64.to_int x >= 10 -> UInt64.to_int x >= 15
end
