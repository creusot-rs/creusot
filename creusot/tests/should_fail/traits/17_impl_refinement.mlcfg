
module C17ImplRefinement_Impl0_MyFunction
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  let rec cfg my_function [#"../17_impl_refinement.rs" 14 4 14 34] [@cfg:stackify] [@cfg:subregion_analysis] (self : ()) : usize
    requires {[#"../17_impl_refinement.rs" 12 15 12 19] true}
    ensures { [#"../17_impl_refinement.rs" 13 14 13 27] UIntSize.to_int result >= 15 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  {
    goto BB0
  }
  BB0 {
    [#"../17_impl_refinement.rs" 15 8 15 10] _0 <- ([#"../17_impl_refinement.rs" 15 8 15 10] [#"../17_impl_refinement.rs" 15 8 15 10] (20 : usize));
    return _0
  }
  
end
module C17ImplRefinement_Impl1_NeedFalse_Impl
  use prelude.UInt64
  use prelude.Int
  use prelude.UInt64
  let rec ghost function need_false [#"../17_impl_refinement.rs" 29 4 29 25] (y : uint64) : ()
    requires {[#"../17_impl_refinement.rs" 28 15 28 23] UInt64.to_int y >= 15}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../17_impl_refinement.rs" 27 4 27 12] ()
end
module C17ImplRefinement_Impl0
  predicate invariant0 (self : ()) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : ()) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : ())
  val inv0 (_x : ()) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : () . inv0 x = true
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  goal my_function_refn : [#"../17_impl_refinement.rs" 14 4 14 34] forall self : () . inv0 self -> (forall result : usize . UIntSize.to_int result >= 15 -> UIntSize.to_int result >= 10)
end
module C17ImplRefinement_Impl1
  use prelude.UInt64
  use prelude.UInt64
  use prelude.Int
  goal need_false_refn : [#"../17_impl_refinement.rs" 29 4 29 25] forall x : uint64 . UInt64.to_int x >= 10 -> UInt64.to_int x >= 15
end
