module Opaque
  type opaque_ptr
end
module Mapping
  function from_fn (f : 'a -> 'b) : ('a -> 'b) = f
  val from_fn (f : 'a -> 'b) : ('a -> 'b)
    ensures { result = from_fn f }
end
module Bool
  let eqb (a : bool) (b : bool) : bool =
    ensures { result <-> a = b  }
    match a, b with
    | True, True -> True
    | False, False -> True
    | _ -> False
    end

  let neqb (a : bool) (b : bool) : bool =
    ensures { result <-> a <> b  }
    not (eqb a b)

  let to_int (b : bool) : int =
    if b then 1 else 0

  use int.Int

  let of_int (i : int) : bool =
    i = 1
end
module Borrow
  type borrowed 'a = { current : 'a ; final : 'a; }
  let function ( *_ ) x = x.current
  let function ( ^_ ) x = x.final
  val borrow_mut (a : 'a) : borrowed 'a
  ensures { *result = a }
end
module Slice
  use seq.Seq
  type rust_array 'a = seq 'a
  function id (s : seq 'a) : seq 'a = s
end
module IntSize
  use export mach.int.Int64
  type isize = int64
end
module UIntSize
  use export mach.int.UInt64
  type usize = uint64
end
module Int8
  use int.Int

  type int8 = < range -0x80 0x7f >

  let constant min_int8 : int = - 0x80
  let constant max_int8 : int =   0x7f
  function to_int (x : int8) : int = int8'int x

  clone export mach.int.Bounded_int with
    type t = int8,
    constant min = int8'minInt,
    constant max = int8'maxInt,
    function to_int = int8'int,
    lemma to_int_in_bounds,
    lemma extensionality
end
module Int16
  use int.Int

  type int16 = < range -0x8000 0x7fff >

  let constant min_int16 : int = - 0x8000
  let constant max_int16 : int =   0x7fff
  function to_int (x : int16) : int = int16'int x

  clone export mach.int.Bounded_int with
    type t = int16,
    constant min = int16'minInt,
    constant max = int16'maxInt,
    function to_int = int16'int,
    lemma to_int_in_bounds,
    lemma extensionality
end
module Int128
  use int.Int

  type int128 = < range -0x80000000000000000000000000000000 0x7fffffffffffffffffffffffffffffff >

  let constant min_int128 : int = - 0x80000000000000000000000000000000
  let constant max_int128 : int =   0x7fffffffffffffffffffffffffffffff
  function to_int (x : int128) : int = int128'int x

  clone export mach.int.Bounded_int with
    type t = int128,
    constant min = int128'minInt,
    constant max = int128'maxInt,
    function to_int = int128'int,
    lemma to_int_in_bounds,
    lemma extensionality
end
module UInt8
  use int.Int

  type uint8 = < range 0x0 0xff >

  let constant min_uint8 : int =  0x00
  let constant max_uint8 : int =  0xff
  function to_int (x : uint8) : int = uint8'int x

  clone export mach.int.Bounded_int with
    type t = uint8,
    constant min = uint8'minInt,
    constant max = uint8'maxInt,
    function to_int = uint8'int,
    lemma to_int_in_bounds,
    lemma extensionality
end
module UInt16
  use int.Int

  type uint16 = < range 0x0 0xffff >

  let constant min_uint16 : int =  0x00
  let constant max_uint16 : int =  0xffff
  function to_int (x : uint16) : int = uint16'int x

  clone export mach.int.Bounded_int with
    type t = uint16,
    constant min = uint16'minInt,
    constant max = uint16'maxInt,
    function to_int = uint16'int,
    lemma to_int_in_bounds,
    lemma extensionality
end
module UInt128
  use int.Int

  type uint128 = < range 0x0 0xffffffffffffffffffffffffffffffff >

  let constant min_uint128 : int =  0x00000000000000000000000000000000
  let constant max_uint128 : int =  0xffffffffffffffffffffffffffffffff
  function to_int (x : uint128) : int = uint128'int x

  clone export mach.int.Bounded_int with
    type t = uint128,
    constant min = uint128'minInt,
    constant max = uint128'maxInt,
    function to_int = uint128'int,
    lemma to_int_in_bounds,
    lemma extensionality
end
module Char
  (* utf8 characters (not glyphs)
      highly restricted until Why3 supports Unicode strings
  *)
  use int.Int

  type char

  function code char : int

  axiom code: forall c. 0 <= code c < 0x10FFFF

  val function chr (n: int) : char

  axiom code_chr: forall n. 0 <= n < 0x10FFFF -> code (chr n) = n

  axiom chr_code: forall c. chr (code c) = c
end
module Panic
  exception Panic
end
