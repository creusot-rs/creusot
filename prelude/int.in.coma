module UInt$bits_count$
  use mach.int.Int

  type t = < range 0 $max_unsigned_value$ >

  constant two_power_size : int = $two_power_size$

  axiom extensionality:
    forall x y: t [t'int x, t'int y]. t'int x = t'int y -> x = y

  predicate in_bounds [@inline:trivial] (n:int) = 0 <= n <= $max_unsigned_value$

  function of_int (n: int) : t
  axiom to_of_int:
    forall x: int [of_int x]. in_bounds x -> t'int (of_int x) = x

  function add (a:t) (b:t) : t
  axiom add_in_bounds:
    forall x y:t [add x y]. in_bounds(t'int x + t'int y) -> t'int(add x y) = t'int x + t'int y
  axiom add_wrapping:
    forall x y:t [add x y]. exists k:int. t'int(add x y) = t'int x + t'int y + k * two_power_size

  function add_with_overflow (a:t) (b:t) : (t, bool)
  axiom add_with_overflow_spec : forall x y:t. add_with_overflow x y = (add x y, false = in_bounds(t'int x + t'int y))

  function sub (a:t) (b:t) : t
  axiom sub_in_bounds:
    forall x y:t [sub x y]. in_bounds(t'int x - t'int y) -> t'int(sub x y) = t'int x - t'int y
  axiom sub_wrapping:
    forall x y:t [sub x y]. exists k:int. t'int(sub x y) = t'int x - t'int y + k * two_power_size

  function mul (a:t) (b:t) : t
  axiom mul_in_bounds:
    forall x y:t [mul x y]. in_bounds(t'int x * t'int y) -> t'int(mul x y) = t'int x * t'int y
  axiom mul_wrapping:
    forall x y:t [mul x y]. exists k:int. t'int(mul x y) = t'int x * t'int y + k * two_power_size

  function neg (a:t): t
  axiom neg_zero:
    forall x:t [neg x]. t'int x = 0 -> t'int(neg x) = 0
  axiom neg_not_zero:
    forall x:t [neg x]. 0 < t'int x <= $max_unsigned_value$ -> t'int(neg x) = two_power_size - t'int x

  function of_bool [@inline:trivial] (b:bool) : t = if b then 1:t else 0:t

  predicate le [@inline:trivial] (a:t) (b:t) = t'int a <= t'int b
  predicate lt [@inline:trivial] (a:t) (b:t) = t'int a < t'int b
  predicate ge [@inline:trivial] (a:t) (b:t) = t'int a >= t'int b
  predicate gt [@inline:trivial] (a:t) (b:t) = t'int a > t'int b

  function bw_and (a:t) (b:t) : t
  function bw_or (a:t) (b:t) : t
  function bw_xor (a:t) (b:t) : t
  function bw_not (a:t) : t

  let of_int (n:int) { [@expl:integer overflow] in_bounds n }
    (ret (result : t) { t'int result = n }) = any

  let add (a:t) (b:t)
    { [@expl:integer overflow] in_bounds (t'int a + t'int b) }
    (ret (result : t) { t'int result = t'int a + t'int b })
    = any
  let sub (a:t) (b:t)
    { [@expl:integer overflow] in_bounds (t'int a - t'int b) }
    (ret (result : t) { t'int result = t'int a - t'int b })
    = any
  let mul (a:t) (b:t)
    { [@expl:integer overflow] in_bounds (t'int a * t'int b) }
    (ret (result : t) { t'int result = t'int a * t'int b })
    = any
  let div (a:t) (b:t)
    { [@expl:division by zero] t'int b <> 0 }
    (ret (result : t) { t'int result = div (t'int a) (t'int b) })
    = any
  let rem (a:t) (b:t)
    { [@expl:division by zero] t'int b <> 0 }
    (ret (result : t) { t'int result = mod (t'int a) (t'int b) })
    = any
  let shl (a:t) (b:int)
    { [@expl:out-of-bounds shifting] b >= 0 /\ b <= $bits_count$  }
    (ret (result :t) { true })
    = any
  let shr (a:t) (b:int)
    { [@expl:out-of-bounds shifting] b >= 0 /\ b <= $bits_count$ }
    (ret (result :t) { true })
    = any
end

module UInt$bits_count$BW
  use export bv.BV$bits_count$
  use bv.BV256 as BV256
  use bv.BVConverter_$bits_count$_256
  use mach.int.Int

  constant max_uint_as_BV256 : BV256.t = $max_unsigned_value$

  function to_BV256 (x: t) : BV256.t = toBig x
  function of_BV256 (x: BV256.t) : t = toSmall x
  function of_bool [@inline:trivial] (b : bool) : t = if b then 1:t else 0:t

  predicate le (a:t) (b:t) = ule a b
  predicate lt (a:t) (b:t) = ult a b
  predicate ge (a:t) (b:t) = uge a b
  predicate gt (a:t) (b:t) = ugt a b

  let of_BV256 (a:BV256.t)
    { [@expl:arithmetic overflow] BV256.t'int a >= 0 /\ BV256.t'int a < two_power_size }
    (ret (result: t) { result = of_BV256 a })
    = any

  let add (a:t) (b:t)
    { [@expl:arithmetic overflow] t'int a + t'int b < two_power_size \/ BV256.ule (BV256.add (to_BV256 a) (to_BV256 b)) max_uint_as_BV256 }
    (ret (result :t)  { t'int result = t'int a + t'int b } { result = add a b })
    = any
  let sub (a:t)  (b:t)
    { [@expl:arithmetic overflow] t'int a >= t'int b \/ uge a b }
    (ret (result: t) { t'int result = t'int a - t'int b } { result = sub a b })
    = any
  let mul (a:t) (b:t)
    { [@expl:arithmetic overflow] t'int a * t'int b < two_power_size \/ BV256.ule (BV256.mul (to_BV256 a) (to_BV256 b)) max_uint_as_BV256 }
    (ret (result: t) { result = mul a b } { t'int result = t'int a * t'int b })
    = any
  let div (a:t) (b:t)
    { [@expl:division by zero] b <> zeros \/ t'int b <> 0 }
    (ret (result: t) { t'int result = div (t'int a) (t'int b) } { result = udiv a b })
    = any
  let rem (a:t) (b:t)
    { [@expl:remainder by zero] b <> zeros  \/ t'int b <> 0 }
    (ret (result: t) { t'int result = mod (t'int a) (t'int b) } { result = urem a b })
    = any
  let shl (a:t) (b:int)
    { [@expl:out-of-bounds shifting] b >= 0 /\ b <= size  }
    (ret (result :t) { result = lsl_bv a (of_int b) } { result = lsl a b })
    = any
  let shr (a:t) (b:int)
    { [@expl:out-of-bounds shifting] b >= 0 /\ b <= size }
    (ret (result :t) { result = lsr_bv a (of_int b) } { result = lsr a b })
    = any
end

module Int$bits_count$
  use mach.int.Int

  type t = < range -$min_signed_value$ $max_signed_value$ >

  constant min_int : int = - $min_signed_value$
  constant max_int : int =   $max_signed_value$
  constant two_power_size : int = $two_power_size$

  predicate in_bounds [@inline:trivial] (n:int) = min_int <= n <= max_int

  function to_int (x:t) : int = t'int x
  axiom extensionality:
    forall x y: t [to_int x, to_int y]. to_int x = to_int y -> x = y

  function of_int (n: int) : t
  axiom to_of_int:
    forall x: int [of_int x]. in_bounds x -> to_int (of_int x) = x

  function add (a:t) (b:t) : t
  axiom add_in_bounds:
    forall x y:t [add x y]. in_bounds(to_int x + to_int y) -> to_int(add x y) = to_int x + to_int y
  axiom add_wrapping:
    forall x y:t [add x y]. exists k:int. to_int(add x y) = to_int x + to_int y + k * two_power_size

  function sub (a:t) (b:t) : t
  axiom sub_in_bounds:
    forall x y:t [sub x y]. in_bounds(to_int x - to_int y) -> to_int(sub x y) = to_int x - to_int y
  axiom sub_wrapping:
    forall x y:t [sub x y]. exists k:int. to_int(sub x y) = to_int x - to_int y + k * two_power_size

  function mul (a:t) (b:t) : t
  axiom mul_in_bounds:
    forall x y:t [mul x y]. in_bounds(to_int x * to_int y) -> to_int(mul x y) = to_int x * to_int y
  axiom mul_wrapping:
    forall x y:t [mul x y]. exists k:int. to_int(mul x y) = to_int x * to_int y + k * two_power_size

  function neg (a:t): t
  axiom neg_in_bounds:
    forall x:t [neg x]. min_int < to_int x <= max_int -> to_int(neg x) = - (to_int x)
  axiom neg_wrapping:
    forall x:t [neg x]. to_int x = min_int -> to_int(neg x) = min_int

  function of_bool [@inline:trivial] (b:bool) : t = if b then 1:t else 0:t

  predicate le [@inline:trivial] (a:t) (b:t) = to_int a <= to_int b
  predicate lt [@inline:trivial] (a:t) (b:t) = to_int a < to_int b
  predicate ge [@inline:trivial] (a:t) (b:t) = to_int a >= to_int b
  predicate gt [@inline:trivial] (a:t) (b:t) = to_int a > to_int b

  function bw_and (a:t) (b:t) : t
  function bw_or (a:t) (b:t) : t
  function bw_xor (a:t) (b:t) : t
  function bw_not (a:t) : t

  let of_int (n:int) { [@expl:integer overflow] in_bounds n }
    (ret (result : t) { to_int result = n }) = any
  let neg (a:t)
    { [@expl:integer overflow] to_int a <> min_int }
    (ret (result : t) { to_int result =  - (to_int a) })
    = any
  let add (a:t) (b:t)
    { [@expl:integer overflow] in_bounds (to_int a + to_int b) }
    (ret (result : t) { to_int result = to_int a + to_int b })
    = any
  let sub (a:t) (b:t)
    { [@expl:integer overflow] in_bounds (to_int a - to_int b) }
    (ret (result : t) { to_int result = to_int a - to_int b })
    = any
  let mul (a:t) (b:t)
    { [@expl:integer overflow] in_bounds (to_int a * to_int b) }
    (ret (result : t) { to_int result = to_int a * to_int b })
    = any
  let div (a:t) (b:t)
    { [@expl:division by zero] (to_int b) <> 0 }
    { [@expl:integer overflow] not (to_int a = min_int /\ to_int b = -1) }
    (ret (result : t) { to_int result = div (to_int a) (to_int b) })
    = any
  let rem (a:t) (b:t)
    { [@expl:division by zero] (to_int b) <> 0 }
    { [@expl:integer overflow] not (to_int a = min_int /\ to_int b = -1) }
    (ret (result : t) { true })
    = any
  let shl (a:t) (b:int)
    { [@expl:out-of-bounds shifting] b >= 0 /\ b <= $bits_count$  }
    (ret (result :t) { true })
    = any
  let shr (a:t) (b:int)
    { [@expl:out-of-bounds shifting] b >= 0 /\ b <= $bits_count$ }
    (ret (result :t) { true })
    = any
end

module Int$bits_count$BW
  use export bv.BV$bits_count$
  use bv.BV256 as BV256
  use bv.BVConverter_$bits_count$_256
  use mach.int.Int

  constant min_sint : t = $min_signed_value$
  constant minus_one : t = $max_unsigned_value$
  constant min_sint_as_BV256 : BV256.t = $min_signed_value$
  constant max_sint_as_BV256 : BV256.t = $max_signed_value$

  function to_BV256 (x: t) : BV256.t = stoBig x
  function of_BV256 (x: BV256.t) : t = toSmall x

  function of_bool [@inline:trivial] (b : bool) : t = if b then 1:t else 0:t

  predicate le (a:t) (b:t) = sle a b
  predicate lt (a:t) (b:t) = slt a b
  predicate ge (a:t) (b:t) = sge a b
  predicate gt (a:t) (b:t) = sgt a b

  let of_BV256 (a:BV256.t)
    { [@expl:arithmetic overflow] BV256.to_int a >= 0 /\ BV256.to_int a < two_power_size }
    (ret (result: t) { result = of_BV256 a })
    = any
  let neg (a:t)
    { [@expl:arithmetic overflow] a <> min_sint }
    (ret (result :t)  { to_int result = - to_int a  } { result = neg a})
    = any
  let add (a:t) (b:t)
    { [@expl:arithmetic overflow] - two_power_size_minus_one <= to_int a + to_int b < two_power_size_minus_one \/ let r = BV256.add (to_BV256 a) (to_BV256 b) in (BV256.sle min_sint_as_BV256 r /\ BV256.sle r max_sint_as_BV256) }
    (ret (result :t)  { to_int result = to_int a + to_int b } { result = add a b })
    = any
  let sub (a:t)  (b:t)
    { [@expl:arithmetic overflow] - two_power_size_minus_one <= to_int a - to_int b < two_power_size_minus_one \/ let r = BV256.sub (to_BV256 a) (to_BV256 b) in (BV256.sle min_sint_as_BV256 r /\ BV256.sle r max_sint_as_BV256) }
    (ret (result: t) { to_int result = to_int a - to_int b } { result = sub a b })
    = any
  let mul (a:t) (b:t)
    { [@expl:arithmetic overflow] - two_power_size_minus_one <= to_int a * to_int b < two_power_size_minus_one \/ let r = BV256.mul (to_BV256 a) (to_BV256 b) in (BV256.sle min_sint_as_BV256 r /\ BV256.sle r max_sint_as_BV256) }
    (ret (result: t) { to_int result = to_int a * to_int b } { result = mul a b })
    = any
  let div (a:t) (b:t)
    { [@expl:division by zero] b <> zeros \/ to_int b <> 0 }
    { [@expl:signed division overflow check] (a <> min_sint \/ b <> minus_one) \/ (to_int a <> to_int min_sint \/ to_int b <> -1) }
    (ret (result: t) { to_int result = div (to_int a) (to_int b) } { result = sdiv a b })
    = any
  let rem (a:t) (b:t)
    { [@expl:remainder by zero] b <> zeros \/ to_int b <> 0 }
    (ret (result: t) { to_int result = mod (to_int a) (to_int b) } { result = srem a b })
    = any
  let shl (a:t) (b:int)
    { [@expl:out-of-bounds shifting] b >= 0 /\ b < size  }
    (ret (result :t) { result = lsl_bv a (of_int b) } { result = lsl a b })
    = any
  let shr (a:t) (b:int)
    { [@expl:out-of-bounds shifting] b >= 0 /\ b < size }
    (ret (result :t) { result = asr_bv a (of_int b) } { result = asr a b })
    = any
end
